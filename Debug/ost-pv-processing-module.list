
ost-pv-processing-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000998  0800e730  0800e730  0001e730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0c8  0800f0c8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0c8  0800f0c8  0001f0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0d0  0800f0d0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800f0d0  0800f0d0  0001f0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800f0dc  0800f0dc  0001f0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800f0e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004df4  200001d8  0800f2c0  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004fcc  0800f2c0  00024fcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000378c9  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000503c  00000000  00000000  00057b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d18  00000000  00000000  0005cb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001669  00000000  00000000  0005e868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279fd  00000000  00000000  0005fed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c36b  00000000  00000000  000878ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001089cc  00000000  00000000  000a3c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a36c  00000000  00000000  001ac608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001b6974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e718 	.word	0x0800e718

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800e718 	.word	0x0800e718

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
	return (static_cast<unsigned char>(__c1)
		< static_cast<unsigned char>(__c2));
      }

      static _GLIBCXX17_CONSTEXPR int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x16>
	  return 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e006      	b.n	8000f08 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x24>
	      else if (lt(__s2[__i], __s1[__i]))
		return 1;
	    return 0;
	  }
#endif
	return __builtin_memcmp(__s1, __s2, __n);
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f00b fd36 	bl	800c970 <memcmp>
 8000f04:	4603      	mov	r3, r0
 8000f06:	bf00      	nop
      }
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f36:	d205      	bcs.n	8000f44 <_ZSt16__deque_buf_sizej+0x1c>
 8000f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	e000      	b.n	8000f46 <_ZSt16__deque_buf_sizej+0x1e>
 8000f44:	2301      	movs	r3, #1
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <_ZN5ESP328send_cmdENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
#include "ESP32.hpp"

void ESP32::send_cmd(std::string cmd) {
 8000f54:	b5b0      	push	{r4, r5, r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
	cmd += "\r\n";
 8000f5e:	490c      	ldr	r1, [pc, #48]	; (8000f90 <_ZN5ESP328send_cmdENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>)
 8000f60:	6838      	ldr	r0, [r7, #0]
 8000f62:	f00a fde7 	bl	800bb34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	HAL_UART_Transmit(&huart, (uint8_t*) cmd.c_str(), cmd.length(), 100);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681c      	ldr	r4, [r3, #0]
 8000f6a:	6838      	ldr	r0, [r7, #0]
 8000f6c:	f00a fde6 	bl	800bb3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000f70:	4605      	mov	r5, r0
 8000f72:	6838      	ldr	r0, [r7, #0]
 8000f74:	f00a fc64 	bl	800b840 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	2364      	movs	r3, #100	; 0x64
 8000f7e:	4629      	mov	r1, r5
 8000f80:	4620      	mov	r0, r4
 8000f82:	f005 fd74 	bl	8006a6e <HAL_UART_Transmit>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	0800e730 	.word	0x0800e730

08000f94 <_ZN5ESP324initEv>:

int ESP32::init() {
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b091      	sub	sp, #68	; 0x44
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	// AT+RESTORE restarts the module, so the timing is hard to get right
	// will not include for now

	send_cmd("ATE0"); // disable echo
 8000f9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f00a faba 	bl	800b51a <_ZNSaIcEC1Ev>
 8000fa6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fae:	4921      	ldr	r1, [pc, #132]	; (8001034 <_ZN5ESP324initEv+0xa0>)
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f00a fe21 	bl	800bbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ffc9 	bl	8000f54 <_ZN5ESP328send_cmdENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f00a fc32 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000fcc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00a faa4 	bl	800b51e <_ZNSaIcED1Ev>

	std::string resp = poll(ESP_ECHO_OFF_OK.length());
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <_ZN5ESP324initEv+0xa4>)
 8000fd8:	f00a fc32 	bl	800b840 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f82a 	bl	8001040 <_ZN5ESP324pollB5cxx11Ei>
	if (resp != ESP_ECHO_OFF_OK && resp != ESP_OK) {
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	4911      	ldr	r1, [pc, #68]	; (8001038 <_ZN5ESP324initEv+0xa4>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f906 	bl	8001204 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00a      	beq.n	8001014 <_ZN5ESP324initEv+0x80>
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	490e      	ldr	r1, [pc, #56]	; (800103c <_ZN5ESP324initEv+0xa8>)
 8001004:	4618      	mov	r0, r3
 8001006:	f000 f8fd 	bl	8001204 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <_ZN5ESP324initEv+0x80>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <_ZN5ESP324initEv+0x82>
 8001014:	2300      	movs	r3, #0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <_ZN5ESP324initEv+0x8a>
		return 0; // init FAIL
 800101a:	2400      	movs	r4, #0
 800101c:	e000      	b.n	8001020 <_ZN5ESP324initEv+0x8c>
	}

	return 1;
 800101e:	2401      	movs	r4, #1
}
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	4618      	mov	r0, r3
 8001026:	f00a fc03 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800102a:	4623      	mov	r3, r4
 800102c:	4618      	mov	r0, r3
 800102e:	3744      	adds	r7, #68	; 0x44
 8001030:	46bd      	mov	sp, r7
 8001032:	bd90      	pop	{r4, r7, pc}
 8001034:	0800e734 	.word	0x0800e734
 8001038:	200001f4 	.word	0x200001f4
 800103c:	2000020c 	.word	0x2000020c

08001040 <_ZN5ESP324pollB5cxx11Ei>:

std::string ESP32::poll(int num_bytes) {
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
	char* buf = new char[num_bytes+1]();
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3301      	adds	r3, #1
 8001050:	461c      	mov	r4, r3
 8001052:	4620      	mov	r0, r4
 8001054:	f00a fa5f 	bl	800b516 <_Znaj>
 8001058:	4603      	mov	r3, r0
 800105a:	4619      	mov	r1, r3
 800105c:	460a      	mov	r2, r1
 800105e:	1e63      	subs	r3, r4, #1
 8001060:	e003      	b.n	800106a <_ZN5ESP324pollB5cxx11Ei+0x2a>
 8001062:	2000      	movs	r0, #0
 8001064:	7010      	strb	r0, [r2, #0]
 8001066:	3201      	adds	r2, #1
 8001068:	3b01      	subs	r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	daf9      	bge.n	8001062 <_ZN5ESP324pollB5cxx11Ei+0x22>
 800106e:	6179      	str	r1, [r7, #20]
	HAL_UART_Receive(&huart, (uint8_t*) buf, num_bytes, 100);
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	b29a      	uxth	r2, r3
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	6979      	ldr	r1, [r7, #20]
 800107c:	f005 fd89 	bl	8006b92 <HAL_UART_Receive>
	std::string ret(buf);
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	4618      	mov	r0, r3
 8001086:	f00a fa48 	bl	800b51a <_ZNSaIcEC1Ev>
 800108a:	f107 0310 	add.w	r3, r7, #16
 800108e:	461a      	mov	r2, r3
 8001090:	6979      	ldr	r1, [r7, #20]
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f00a fdb0 	bl	800bbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4618      	mov	r0, r3
 800109e:	f00a fa3e 	bl	800b51e <_ZNSaIcED1Ev>
	delete[] buf;
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <_ZN5ESP324pollB5cxx11Ei+0x6e>
 80010a8:	6978      	ldr	r0, [r7, #20]
 80010aa:	f00a fa21 	bl	800b4f0 <_ZdaPv>

	return ret;
 80010ae:	bf00      	nop
}
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	371c      	adds	r7, #28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd90      	pop	{r4, r7, pc}

080010b8 <_ZN5ESP3222process_incoming_bytesEPci>:

void ESP32::process_incoming_bytes(char* buf, int num_bytes) {
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b08d      	sub	sp, #52	; 0x34
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < num_bytes; i++) {
 80010c4:	2300      	movs	r3, #0
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010c8:	e04d      	b.n	8001166 <_ZN5ESP3222process_incoming_bytesEPci+0xae>
		if (current_message.length() > 1 && buf[i] == '\n' && current_message.back() == '\r') {
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3304      	adds	r3, #4
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00a fbb6 	bl	800b840 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d910      	bls.n	80010fc <_ZN5ESP3222process_incoming_bytesEPci+0x44>
 80010da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	4413      	add	r3, r2
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b0a      	cmp	r3, #10
 80010e4:	d10a      	bne.n	80010fc <_ZN5ESP3222process_incoming_bytesEPci+0x44>
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3304      	adds	r3, #4
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00a fbc9 	bl	800b882 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 80010f0:	4603      	mov	r3, r0
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b0d      	cmp	r3, #13
 80010f6:	d101      	bne.n	80010fc <_ZN5ESP3222process_incoming_bytesEPci+0x44>
 80010f8:	2301      	movs	r3, #1
 80010fa:	e000      	b.n	80010fe <_ZN5ESP3222process_incoming_bytesEPci+0x46>
 80010fc:	2300      	movs	r3, #0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d025      	beq.n	800114e <_ZN5ESP3222process_incoming_bytesEPci+0x96>
			messages.push(current_message + buf[i]);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f103 041c 	add.w	r4, r3, #28
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	1d19      	adds	r1, r3, #4
 800110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4618      	mov	r0, r3
 800111a:	f000 f884 	bl	8001226 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4620      	mov	r0, r4
 8001126:	f000 f894 	bl	8001252 <_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEE4pushEOS5_>
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4618      	mov	r0, r3
 8001130:	f00a fb7e 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			osSemaphoreRelease(messages_sem);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f006 ff8e 	bl	800805c <osSemaphoreRelease>
			current_message = "";
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3304      	adds	r3, #4
 8001144:	490c      	ldr	r1, [pc, #48]	; (8001178 <_ZN5ESP3222process_incoming_bytesEPci+0xc0>)
 8001146:	4618      	mov	r0, r3
 8001148:	f00a fc9d 	bl	800ba86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
 800114c:	e008      	b.n	8001160 <_ZN5ESP3222process_incoming_bytesEPci+0xa8>
		} else {
			current_message += buf[i];
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	1d18      	adds	r0, r3, #4
 8001152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	4413      	add	r3, r2
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4619      	mov	r1, r3
 800115c:	f00a fbb5 	bl	800b8ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	for (int i = 0; i < num_bytes; i++) {
 8001160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001162:	3301      	adds	r3, #1
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	429a      	cmp	r2, r3
 800116c:	dbad      	blt.n	80010ca <_ZN5ESP3222process_incoming_bytesEPci+0x12>
		}
	}
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	3734      	adds	r7, #52	; 0x34
 8001174:	46bd      	mov	sp, r7
 8001176:	bd90      	pop	{r4, r7, pc}
 8001178:	0800e73c 	.word	0x0800e73c

0800117c <_ZN5ESP3215consume_messageB5cxx11Ev>:

std::string ESP32::consume_message() {
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	if (!messages.empty()) {
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	331c      	adds	r3, #28
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f873 	bl	8001276 <_ZNKSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEE5emptyEv>
 8001190:	4603      	mov	r3, r0
 8001192:	f083 0301 	eor.w	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d01c      	beq.n	80011d6 <_ZN5ESP3215consume_messageB5cxx11Ev+0x5a>
		std::string msg = messages.front();
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	331c      	adds	r3, #28
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 f875 	bl	8001290 <_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEE5frontEv>
 80011a6:	4602      	mov	r2, r0
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f00a fcee 	bl	800bb90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
		messages.pop();
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	331c      	adds	r3, #28
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 f876 	bl	80012aa <_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEE3popEv>
		return msg;
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	4619      	mov	r1, r3
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f00a fb19 	bl	800b7fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	} else {
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4618      	mov	r0, r3
 80011d0:	f00a fb2e 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		return "ERROR -- This should never be seen";
	}
}
 80011d4:	e010      	b.n	80011f8 <_ZN5ESP3215consume_messageB5cxx11Ev+0x7c>
		return "ERROR -- This should never be seen";
 80011d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011da:	4618      	mov	r0, r3
 80011dc:	f00a f99d 	bl	800b51a <_ZNSaIcEC1Ev>
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	461a      	mov	r2, r3
 80011e6:	4906      	ldr	r1, [pc, #24]	; (8001200 <_ZN5ESP3215consume_messageB5cxx11Ev+0x84>)
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f00a fd05 	bl	800bbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80011ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f2:	4618      	mov	r0, r3
 80011f4:	f00a f993 	bl	800b51e <_ZNSaIcED1Ev>
}
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	0800e740 	.word	0x0800e740

08001204 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return !(__lhs == __rhs); }
 800120e:	6839      	ldr	r1, [r7, #0]
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f88c 	bl	800132e <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 8001216:	4603      	mov	r3, r0
 8001218:	f083 0301 	eor.w	r3, r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	4613      	mov	r3, r2
 8001232:	71fb      	strb	r3, [r7, #7]
      __string_type __str(__lhs);
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f00a fcaa 	bl	800bb90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	461a      	mov	r2, r3
 8001240:	2101      	movs	r1, #1
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f00a fb88 	bl	800b958 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 8001248:	bf00      	nop
    }
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEE4pushEOS5_>:
      push(const value_type& __x)
      { c.push_back(__x); }

#if __cplusplus >= 201103L
      void
      push(value_type&& __x)
 8001252:	b590      	push	{r4, r7, lr}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 800125c:	687c      	ldr	r4, [r7, #4]
 800125e:	6838      	ldr	r0, [r7, #0]
 8001260:	f000 f88f 	bl	8001382 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001264:	4603      	mov	r3, r0
 8001266:	4619      	mov	r1, r3
 8001268:	4620      	mov	r0, r4
 800126a:	f000 f895 	bl	8001398 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	bd90      	pop	{r4, r7, pc}

08001276 <_ZNKSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEE5emptyEv>:
      empty() const
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f89a 	bl	80013ba <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5emptyEv>
 8001286:	4603      	mov	r3, r0
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEE5frontEv>:
      front()
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	return c.front();
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f89f 	bl	80013de <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5frontEv>
 80012a0:	4603      	mov	r3, r0
      }
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 f8a6 	bl	8001406 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv>
      }
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	3308      	adds	r3, #8
 80012d0:	4619      	mov	r1, r3
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 f80f 	bl	80012f6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    operator==(const basic_string<_CharT>& __lhs,
 800132e:	b5b0      	push	{r4, r5, r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	6039      	str	r1, [r7, #0]
    { return (__lhs.size() == __rhs.size()
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f00a fa7f 	bl	800b83c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800133e:	4604      	mov	r4, r0
 8001340:	6838      	ldr	r0, [r7, #0]
 8001342:	f00a fa7b 	bl	800b83c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001346:	4603      	mov	r3, r0
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
 8001348:	429c      	cmp	r4, r3
 800134a:	d115      	bne.n	8001378 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4a>
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f00a fbf7 	bl	800bb40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8001352:	4604      	mov	r4, r0
 8001354:	6838      	ldr	r0, [r7, #0]
 8001356:	f00a fbf3 	bl	800bb40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 800135a:	4605      	mov	r5, r0
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f00a fa6d 	bl	800b83c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4629      	mov	r1, r5
 8001368:	4620      	mov	r0, r4
 800136a:	f7ff fdbb 	bl	8000ee4 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4a>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4c>
 8001378:	2300      	movs	r3, #0
						    __lhs.size())); }
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bdb0      	pop	{r4, r5, r7, pc}

08001382 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>:
	  _M_push_back_aux(__x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80013a2:	6838      	ldr	r0, [r7, #0]
 80013a4:	f7ff ffed 	bl	8001382 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4619      	mov	r1, r3
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f869 	bl	8001484 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f103 0218 	add.w	r2, r3, #24
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3308      	adds	r3, #8
 80013cc:	4619      	mov	r1, r3
 80013ce:	4610      	mov	r0, r2
 80013d0:	f000 f883 	bl	80014da <_ZSteqRKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ESA_>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
	return *begin();
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff68 	bl	80012c2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f883 	bl	8001502 <_ZNKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EdeEv>
 80013fc:	4603      	mov	r3, r0
      }
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	3b18      	subs	r3, #24
	if (this->_M_impl._M_start._M_cur
 8001418:	429a      	cmp	r2, r3
 800141a:	d011      	beq.n	8001440 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv+0x3a>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff5e 	bl	80012e0 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001424:	4602      	mov	r2, r0
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	4619      	mov	r1, r3
 800142c:	4610      	mov	r0, r2
 800142e:	f000 f874 	bl	800151a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f103 0218 	add.w	r2, r3, #24
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 800143e:	e002      	b.n	8001446 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f877 	bl	8001534 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_front_auxEv>
      }
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_deallocate_mapEPPS5_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	68f9      	ldr	r1, [r7, #12]
 8001460:	4618      	mov	r0, r3
 8001462:	f000 f8ef 	bl	8001644 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f905 	bl	800167e <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS7_PS6_j>
      }
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4618      	mov	r0, r3
 800147a:	f000 f8f4 	bl	8001666 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 8001484:	b5b0      	push	{r4, r5, r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	3b18      	subs	r3, #24
	if (this->_M_impl._M_finish._M_cur
 8001498:	429a      	cmp	r2, r3
 800149a:	d012      	beq.n	80014c2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 800149c:	687c      	ldr	r4, [r7, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699d      	ldr	r5, [r3, #24]
 80014a2:	6838      	ldr	r0, [r7, #0]
 80014a4:	f000 f8fa 	bl	800169c <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4629      	mov	r1, r5
 80014ae:	4620      	mov	r0, r4
 80014b0:	f000 f8ff 	bl	80016b2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f103 0218 	add.w	r2, r3, #24
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 80014c0:	e007      	b.n	80014d2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 80014c2:	6838      	ldr	r0, [r7, #0]
 80014c4:	f000 f8ea 	bl	800169c <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4619      	mov	r1, r3
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f903 	bl	80016d8 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJS5_EEEvDpOT_>
      }
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bdb0      	pop	{r4, r5, r7, pc}

080014da <_ZSteqRKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ESA_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_ZNKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8001524:	6839      	ldr	r1, [r7, #0]
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f91a 	bl	8001760 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fece 	bl	80012e0 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001544:	4602      	mov	r2, r0
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	4619      	mov	r1, r3
 800154c:	4610      	mov	r0, r2
 800154e:	f7ff ffe4 	bl	800151a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	4619      	mov	r1, r3
 800155a:	4610      	mov	r0, r2
 800155c:	f000 f85f 	bl	800161e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE18_M_deallocate_nodeEPS5_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f103 0208 	add.w	r2, r3, #8
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	3304      	adds	r3, #4
 800156c:	4619      	mov	r1, r3
 800156e:	4610      	mov	r0, r2
 8001570:	f000 f839 	bl	80015e6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]
    }
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d201      	bcs.n	800159e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	e000      	b.n	80015a0 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800159e:	687b      	ldr	r3, [r7, #4]
    }
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 f841 	bl	8001644 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	6839      	ldr	r1, [r7, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f8d5 	bl	8001778 <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS7_j>
 80015ce:	4604      	mov	r4, r0
 80015d0:	bf00      	nop
      }
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f845 	bl	8001666 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80015dc:	4623      	mov	r3, r4
      }
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd90      	pop	{r4, r7, pc}

080015e6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80015e6:	b590      	push	{r4, r7, lr}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685c      	ldr	r4, [r3, #4]
 8001602:	f000 f8da 	bl	80017ba <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>
 8001606:	4602      	mov	r2, r0
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	18e2      	adds	r2, r4, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	609a      	str	r2, [r3, #8]
      }
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}

0800161e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE18_M_deallocate_nodeEPS5_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800161e:	b590      	push	{r4, r7, lr}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8001628:	687c      	ldr	r4, [r7, #4]
 800162a:	2018      	movs	r0, #24
 800162c:	f7ff fc7c 	bl	8000f28 <_ZSt16__deque_buf_sizej>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	6839      	ldr	r1, [r7, #0]
 8001636:	4620      	mov	r0, r4
 8001638:	f000 f8c7 	bl	80017ca <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bd90      	pop	{r4, r7, pc}

08001644 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800164e:	6838      	ldr	r0, [r7, #0]
 8001650:	f000 f8ca 	bl	80017e8 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001654:	4603      	mov	r3, r0
 8001656:	4619      	mov	r1, r3
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f8d0 	bl	80017fe <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS4_EERKSaIT_E>
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f8d2 	bl	8001818 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f8cd 	bl	800182e <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS7_j>
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffec 	bl	800169c <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 f8bf 	bl	800184e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>
	}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJS5_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f8cb 	bl	800187e <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 80016e8:	4604      	mov	r4, r0
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f8d9 	bl	80018a2 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 80016f0:	4603      	mov	r3, r0
 80016f2:	429c      	cmp	r4, r3
 80016f4:	bf0c      	ite	eq
 80016f6:	2301      	moveq	r3, #1
 80016f8:	2300      	movne	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d002      	beq.n	8001706 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJS5_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8001700:	4816      	ldr	r0, [pc, #88]	; (800175c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJS5_EEEvDpOT_+0x84>)
 8001702:	f009 ff16 	bl	800b532 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8001706:	2101      	movs	r1, #1
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f8db 	bl	80018c4 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	1d1c      	adds	r4, r3, #4
 8001716:	4610      	mov	r0, r2
 8001718:	f000 f83d 	bl	8001796 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_allocate_nodeEv>
 800171c:	4603      	mov	r3, r0
 800171e:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8001720:	687c      	ldr	r4, [r7, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699d      	ldr	r5, [r3, #24]
 8001726:	6838      	ldr	r0, [r7, #0]
 8001728:	f7ff ffb8 	bl	800169c <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	4629      	mov	r1, r5
 8001732:	4620      	mov	r0, r4
 8001734:	f7ff ffbd 	bl	80016b2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f103 0218 	add.w	r2, r3, #24
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	3304      	adds	r3, #4
 8001744:	4619      	mov	r1, r3
 8001746:	4610      	mov	r0, r2
 8001748:	f7ff ff4d 	bl	80015e6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69da      	ldr	r2, [r3, #28]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
      }
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bdb0      	pop	{r4, r5, r7, pc}
 800175c:	0800e764 	.word	0x0800e764

08001760 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800176a:	6838      	ldr	r0, [r7, #0]
 800176c:	f00a f860 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001782:	2200      	movs	r2, #0
 8001784:	6839      	ldr	r1, [r7, #0]
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f8c3 	bl	8001912 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 800178c:	4603      	mov	r3, r0
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8001796:	b590      	push	{r4, r7, lr}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800179e:	687c      	ldr	r4, [r7, #4]
 80017a0:	2018      	movs	r0, #24
 80017a2:	f7ff fbc1 	bl	8000f28 <_ZSt16__deque_buf_sizej>
 80017a6:	4603      	mov	r3, r0
 80017a8:	4619      	mov	r1, r3
 80017aa:	4620      	mov	r0, r4
 80017ac:	f000 f8da 	bl	8001964 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 80017b0:	4603      	mov	r3, r0
      }
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd90      	pop	{r4, r7, pc}

080017ba <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80017ba:	b580      	push	{r7, lr}
 80017bc:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80017be:	2018      	movs	r0, #24
 80017c0:	f7ff fbb2 	bl	8000f28 <_ZSt16__deque_buf_sizej>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4618      	mov	r0, r3
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 f8d1 	bl	8001982 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS4_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f8cd 	bl	80019a8 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4619      	mov	r1, r3
 8001840:	68b8      	ldr	r0, [r7, #8]
 8001842:	f009 fe53 	bl	800b4ec <_ZdlPvj>
      }
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800184e:	b590      	push	{r4, r7, lr}
 8001850:	b085      	sub	sp, #20
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ff1e 	bl	800169c <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001860:	4604      	mov	r4, r0
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	4619      	mov	r1, r3
 8001866:	2018      	movs	r0, #24
 8001868:	f7ff fb52 	bl	8000f10 <_ZnwjPv>
 800186c:	4603      	mov	r3, r0
 800186e:	4621      	mov	r1, r4
 8001870:	4618      	mov	r0, r3
 8001872:	f009 ffc3 	bl	800b7fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	bd90      	pop	{r4, r7, pc}

0800187e <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f103 0218 	add.w	r2, r3, #24
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3308      	adds	r3, #8
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f000 f894 	bl	80019c0 <_ZStmiRKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ESA_>
 8001898:	4603      	mov	r3, r0
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff9b 	bl	80017e8 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 f8b7 	bl	8001a28 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	6809      	ldr	r1, [r1, #0]
 80018de:	1a41      	subs	r1, r0, r1
 80018e0:	1089      	asrs	r1, r1, #2
 80018e2:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d904      	bls.n	80018f2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80018e8:	2200      	movs	r2, #0
 80018ea:	6839      	ldr	r1, [r7, #0]
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f8b5 	bl	8001a5c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb>
      }
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_ZNK9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001902:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001912:	b580      	push	{r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f7ff ffeb 	bl	80018fa <_ZNK9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	4293      	cmp	r3, r2
 800192a:	bf8c      	ite	hi
 800192c:	2301      	movhi	r3, #1
 800192e:	2300      	movls	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	bf14      	ite	ne
 8001936:	2301      	movne	r3, #1
 8001938:	2300      	moveq	r3, #0
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d007      	beq.n	8001950 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001946:	d301      	bcc.n	800194c <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8001948:	f009 fded 	bl	800b526 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800194c:	f009 fde8 	bl	800b520 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4618      	mov	r0, r3
 8001956:	f009 fdcd 	bl	800b4f4 <_Znwj>
 800195a:	4603      	mov	r3, r0
      }
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800196e:	2200      	movs	r2, #0
 8001970:	6839      	ldr	r1, [r7, #0]
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f91a 	bl	8001bac <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 8001978:	4603      	mov	r3, r0
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4619      	mov	r1, r3
 800199a:	68b8      	ldr	r0, [r7, #8]
 800199c:	f009 fda6 	bl	800b4ec <_ZdlPvj>
      }
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <_ZStmiRKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ESA_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80019ca:	f7ff fef6 	bl	80017ba <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	109b      	asrs	r3, r3, #2
 80019de:	461a      	mov	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf14      	ite	ne
 80019e8:	2301      	movne	r3, #1
 80019ea:	2300      	moveq	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
	  + (__x._M_cur - __x._M_first)
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6811      	ldr	r1, [r2, #0]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6852      	ldr	r2, [r2, #4]
 80019fc:	1a8a      	subs	r2, r1, r2
 80019fe:	10d2      	asrs	r2, r2, #3
 8001a00:	4908      	ldr	r1, [pc, #32]	; (8001a24 <_ZStmiRKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ESA_+0x64>)
 8001a02:	fb01 f202 	mul.w	r2, r1, r2
 8001a06:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	6891      	ldr	r1, [r2, #8]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	1a8a      	subs	r2, r1, r2
 8001a12:	10d2      	asrs	r2, r2, #3
 8001a14:	4903      	ldr	r1, [pc, #12]	; (8001a24 <_ZStmiRKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ESA_+0x64>)
 8001a16:	fb01 f202 	mul.w	r2, r1, r2
 8001a1a:	4413      	add	r3, r2
      }
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	aaaaaaab 	.word	0xaaaaaaab

08001a28 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8001a30:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001a34:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f8e6 	bl	8001c08 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001a40:	f107 0208 	add.w	r2, r7, #8
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f8e8 	bl	8001c20 <_ZSt3minIjERKT_S2_S2_>
 8001a50:	4603      	mov	r3, r0
 8001a52:	681b      	ldr	r3, [r3, #0]
      }
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b08b      	sub	sp, #44	; 0x2c
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	4613      	mov	r3, r2
 8001a68:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	109b      	asrs	r3, r3, #2
 8001a76:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8001a78:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	6a3a      	ldr	r2, [r7, #32]
 8001a7e:	4413      	add	r3, r2
 8001a80:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d92d      	bls.n	8001aea <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	1acb      	subs	r3, r1, r3
 8001a9a:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001a9c:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d002      	beq.n	8001aaa <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x4e>
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	e000      	b.n	8001aac <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x50>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001aae:	4413      	add	r3, r2
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d209      	bcs.n	8001ad0 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f000 f8bd 	bl	8001c48 <_ZSt4copyIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>
 8001ace:	e048      	b.n	8001b62 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8001ad8:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8001ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae0:	4413      	add	r3, r2
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f000 f8c8 	bl	8001c78 <_ZSt13copy_backwardIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>
 8001ae8:	e03b      	b.n	8001b62 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3304      	adds	r3, #4
 8001af2:	f107 0208 	add.w	r2, r7, #8
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fd43 	bl	8001584 <_ZSt3maxIjERKT_S2_S2_>
 8001afe:	4603      	mov	r3, r0
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8001b04:	3302      	adds	r3, #2
 8001b06:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	69b9      	ldr	r1, [r7, #24]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fd4d 	bl	80015ac <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_allocate_mapEj>
 8001b12:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	085b      	lsrs	r3, r3, #1
 8001b1c:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0xce>
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	e000      	b.n	8001b2c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0xd0>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4413      	add	r3, r2
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b40:	4619      	mov	r1, r3
 8001b42:	f000 f881 	bl	8001c48 <_ZSt4copyIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6819      	ldr	r1, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	461a      	mov	r2, r3
 8001b52:	f7ff fc7c 	bl	800144e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_deallocate_mapEPPS5_j>

	  this->_M_impl._M_map = __new_map;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	3308      	adds	r3, #8
 8001b66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fd3c 	bl	80015e6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f103 0018 	add.w	r0, r3, #24
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b80:	4413      	add	r3, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7ff fd2f 	bl	80015e6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
    }
 8001b88:	bf00      	nop
 8001b8a:	372c      	adds	r7, #44	; 0x2c
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}

08001b90 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv+0x18>)
      }
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	05555555 	.word	0x05555555

08001bac <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f7ff ffe9 	bl	8001b90 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	bf8c      	ite	hi
 8001bc6:	2301      	movhi	r3, #1
 8001bc8:	2300      	movls	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf14      	ite	ne
 8001bd0:	2301      	movne	r3, #1
 8001bd2:	2300      	moveq	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x58>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8001be2:	f009 fca0 	bl	800b526 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8001be6:	f009 fc9b 	bl	800b520 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f009 fc7d 	bl	800b4f4 <_Znwj>
 8001bfa:	4603      	mov	r3, r0
      }
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	0aaaaaaa 	.word	0x0aaaaaaa

08001c08 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f849 	bl	8001ca8 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 8001c16:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d201      	bcs.n	8001c3a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	e000      	b.n	8001c3c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001c3a:	687b      	ldr	r3, [r7, #4]
    }
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_ZSt4copyIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f833 	bl	8001cc0 <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	68b8      	ldr	r0, [r7, #8]
 8001c5e:	f000 f82f 	bl	8001cc0 <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8001c62:	4603      	mov	r3, r0
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	4619      	mov	r1, r3
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f000 f834 	bl	8001cd6 <_ZSt13__copy_move_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 8001c6e:	4603      	mov	r3, r0
    }
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd90      	pop	{r4, r7, pc}

08001c78 <_ZSt13copy_backwardIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 f81b 	bl	8001cc0 <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	68b8      	ldr	r0, [r7, #8]
 8001c8e:	f000 f817 	bl	8001cc0 <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8001c92:	4603      	mov	r3, r0
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	4619      	mov	r1, r3
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f000 f83f 	bl	8001d1c <_ZSt22__copy_move_backward_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 8001c9e:	4603      	mov	r3, r0
    }
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd90      	pop	{r4, r7, pc}

08001ca8 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff6d 	bl	8001b90 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <_ZSt13__copy_move_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8001cd6:	b5b0      	push	{r4, r5, r7, lr}
 8001cd8:	b084      	sub	sp, #16
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 f83d 	bl	8001d62 <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	68b8      	ldr	r0, [r7, #8]
 8001cec:	f000 f839 	bl	8001d62 <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8001cf0:	4605      	mov	r5, r0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 f834 	bl	8001d62 <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4629      	mov	r1, r5
 8001d00:	4620      	mov	r0, r4
 8001d02:	f000 f839 	bl	8001d78 <_ZSt14__copy_move_a1ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 8001d06:	4602      	mov	r2, r0
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 f843 	bl	8001d98 <_ZSt12__niter_wrapIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_RKS8_S8_>
 8001d12:	4603      	mov	r3, r0
    }
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bdb0      	pop	{r4, r5, r7, pc}

08001d1c <_ZSt22__copy_move_backward_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8001d1c:	b5b0      	push	{r4, r5, r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 f81a 	bl	8001d62 <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8001d2e:	4604      	mov	r4, r0
 8001d30:	68b8      	ldr	r0, [r7, #8]
 8001d32:	f000 f816 	bl	8001d62 <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8001d36:	4605      	mov	r5, r0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f811 	bl	8001d62 <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	4629      	mov	r1, r5
 8001d46:	4620      	mov	r0, r4
 8001d48:	f000 f832 	bl	8001db0 <_ZSt23__copy_move_backward_a1ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f820 	bl	8001d98 <_ZSt12__niter_wrapIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_RKS8_S8_>
 8001d58:	4603      	mov	r3, r0
    }
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bdb0      	pop	{r4, r5, r7, pc}

08001d62 <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>:
    __niter_base(_Iterator __it)
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_ZSt14__copy_move_a1ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	68b9      	ldr	r1, [r7, #8]
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 f821 	bl	8001dd0 <_ZSt14__copy_move_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_ZSt12__niter_wrapIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_RKS8_S8_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
    { return __res; }
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <_ZSt23__copy_move_backward_a1ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f815 	bl	8001df0 <_ZSt23__copy_move_backward_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_ZSt14__copy_move_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	68b9      	ldr	r1, [r7, #8]
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f815 	bl	8001e10 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>
 8001de6:	4603      	mov	r3, r0
    }
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <_ZSt23__copy_move_backward_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	68b9      	ldr	r1, [r7, #8]
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 f822 	bl	8001e4a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>
 8001e06:	4603      	mov	r3, r0
    }
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	109b      	asrs	r3, r3, #2
 8001e24:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	461a      	mov	r2, r3
 8001e32:	68f9      	ldr	r1, [r7, #12]
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f00a fdab 	bl	800c990 <memmove>
	  return __result + _Num;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
	}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	109b      	asrs	r3, r3, #2
 8001e5e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	425b      	negs	r3, r3
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	18d0      	adds	r0, r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	461a      	mov	r2, r3
 8001e76:	68f9      	ldr	r1, [r7, #12]
 8001e78:	f00a fd8a 	bl	800c990 <memmove>
	  return __result - _Num;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	425b      	negs	r3, r3
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	4413      	add	r3, r2
	}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <_Z41__static_initialization_and_destruction_0ii>:
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d126      	bne.n	8001eee <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d121      	bne.n	8001eee <_Z41__static_initialization_and_destruction_0ii+0x5e>
#include "stm32f4xx_hal.h"
#include "cmsis_os.h"
#include <string>
#include <queue>

const std::string ESP_ECHO_OFF_OK = "ATE0\r\n\r\nOK\r\n";
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f009 fb33 	bl	800b51a <_ZNSaIcEC1Ev>
 8001eb4:	f107 0308 	add.w	r3, r7, #8
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4916      	ldr	r1, [pc, #88]	; (8001f14 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001ebc:	4816      	ldr	r0, [pc, #88]	; (8001f18 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001ebe:	f009 fe9b 	bl	800bbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f009 fb29 	bl	800b51e <_ZNSaIcED1Ev>
const std::string ESP_OK = "\r\nOK\r\n";
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f009 fb22 	bl	800b51a <_ZNSaIcEC1Ev>
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	461a      	mov	r2, r3
 8001edc:	490f      	ldr	r1, [pc, #60]	; (8001f1c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001ede:	4810      	ldr	r0, [pc, #64]	; (8001f20 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001ee0:	f009 fe8a 	bl	800bbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f009 fb18 	bl	800b51e <_ZNSaIcED1Ev>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10a      	bne.n	8001f0a <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d105      	bne.n	8001f0a <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8001efe:	4808      	ldr	r0, [pc, #32]	; (8001f20 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001f00:	f009 fc96 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string ESP_ECHO_OFF_OK = "ATE0\r\n\r\nOK\r\n";
 8001f04:	4804      	ldr	r0, [pc, #16]	; (8001f18 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001f06:	f009 fc93 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	0800e794 	.word	0x0800e794
 8001f18:	200001f4 	.word	0x200001f4
 8001f1c:	0800e7a4 	.word	0x0800e7a4
 8001f20:	2000020c 	.word	0x2000020c

08001f24 <_GLOBAL__sub_I__ZN5ESP328send_cmdENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f7ff ffaf 	bl	8001e90 <_Z41__static_initialization_and_destruction_0ii>
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_GLOBAL__sub_D__ZN5ESP328send_cmdENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7ff ffa7 	bl	8001e90 <_Z41__static_initialization_and_destruction_0ii>
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <_ZNSt11char_traitsIcE6lengthEPKc>:

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7fe f98f 	bl	8000270 <strlen>
 8001f52:	4603      	mov	r3, r0
      }
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <_ZN6Logger3logE8LogLevelNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
#include "Logger.hpp"

void Logger::log(LogLevel level, std::string msg) {
 8001f5c:	b5b0      	push	{r4, r5, r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	460b      	mov	r3, r1
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	72fb      	strb	r3, [r7, #11]
	if (logLevel >= level) {
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	791b      	ldrb	r3, [r3, #4]
 8001f6e:	7afa      	ldrb	r2, [r7, #11]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d815      	bhi.n	8001fa0 <_ZN6Logger3logE8LogLevelNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>
		msg += newline;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3308      	adds	r3, #8
 8001f78:	4619      	mov	r1, r3
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f009 fdaf 	bl	800bade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
		HAL_UART_Transmit(&huart, (uint8_t*) msg.c_str(), msg.length(), 100);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681c      	ldr	r4, [r3, #0]
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f009 fdd9 	bl	800bb3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001f8a:	4605      	mov	r5, r0
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f009 fc57 	bl	800b840 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	2364      	movs	r3, #100	; 0x64
 8001f98:	4629      	mov	r1, r5
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f004 fd67 	bl	8006a6e <HAL_UART_Transmit>
		// TODO: write to SD log file
	}
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bdb0      	pop	{r4, r5, r7, pc}

08001fa8 <_ZN6Logger5debugENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Logger::debug(std::string msg) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
	log(LogLevel::Debug, "[DEBUG] " + msg);
 8001fb2:	f107 0308 	add.w	r3, r7, #8
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4909      	ldr	r1, [pc, #36]	; (8001fe0 <_ZN6Logger5debugENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>)
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f84e 	bl	800205c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8001fc0:	f107 0308 	add.w	r3, r7, #8
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ffc7 	bl	8001f5c <_ZN6Logger3logE8LogLevelNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f009 fc2c 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8001fd8:	bf00      	nop
 8001fda:	3720      	adds	r7, #32
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	0800e7ac 	.word	0x0800e7ac

08001fe4 <_ZN6Logger4infoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Logger::info(std::string msg) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
	log(LogLevel::Debug, "[INFO] " + msg);
 8001fee:	f107 0308 	add.w	r3, r7, #8
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	4909      	ldr	r1, [pc, #36]	; (800201c <_ZN6Logger4infoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>)
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f830 	bl	800205c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8001ffc:	f107 0308 	add.w	r3, r7, #8
 8002000:	461a      	mov	r2, r3
 8002002:	2100      	movs	r1, #0
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ffa9 	bl	8001f5c <_ZN6Logger3logE8LogLevelNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800200a:	f107 0308 	add.w	r3, r7, #8
 800200e:	4618      	mov	r0, r3
 8002010:	f009 fc0e 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8002014:	bf00      	nop
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	0800e7b8 	.word	0x0800e7b8

08002020 <_ZN6Logger5errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void Logger::warn(std::string msg) {
	log(LogLevel::Debug, "[WARN] " + msg);
}

void Logger::error(std::string msg) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
	log(LogLevel::Debug, "[ERROR] " + msg);
 800202a:	f107 0308 	add.w	r3, r7, #8
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	4909      	ldr	r1, [pc, #36]	; (8002058 <_ZN6Logger5errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>)
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f812 	bl	800205c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8002038:	f107 0308 	add.w	r3, r7, #8
 800203c:	461a      	mov	r2, r3
 800203e:	2100      	movs	r1, #0
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff8b 	bl	8001f5c <_ZN6Logger3logE8LogLevelNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002046:	f107 0308 	add.w	r3, r7, #8
 800204a:	4618      	mov	r0, r3
 800204c:	f009 fbf0 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8002050:	bf00      	nop
 8002052:	3720      	adds	r7, #32
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	0800e7c8 	.word	0x0800e7c8

0800205c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
	rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      const __size_type __len = _Traits::length(__lhs);
 8002068:	68b8      	ldr	r0, [r7, #8]
 800206a:	f7ff ff6b 	bl	8001f44 <_ZNSt11char_traitsIcE6lengthEPKc>
 800206e:	61f8      	str	r0, [r7, #28]
      __string_type __str(_Alloc_traits::_S_select_on_copy(
 8002070:	f107 0318 	add.w	r3, r7, #24
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4618      	mov	r0, r3
 8002078:	f009 fd64 	bl	800bb44 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	f107 0218 	add.w	r2, r7, #24
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f828 	bl	80020dc <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f009 fbab 	bl	800b7ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4618      	mov	r0, r3
 800209e:	f009 fa3e 	bl	800b51e <_ZNSaIcED1Ev>
 80020a2:	f107 0318 	add.w	r3, r7, #24
 80020a6:	4618      	mov	r0, r3
 80020a8:	f009 fa39 	bl	800b51e <_ZNSaIcED1Ev>
          __rhs.get_allocator()));
      __str.reserve(__len + __rhs.size());
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f009 fbc5 	bl	800b83c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80020b2:	4602      	mov	r2, r0
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	4413      	add	r3, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f009 fbc2 	bl	800b844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 80020c0:	69fa      	ldr	r2, [r7, #28]
 80020c2:	68b9      	ldr	r1, [r7, #8]
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f009 fd0f 	bl	800bae8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f009 fd00 	bl	800bad2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 80020d2:	bf00      	nop
    }
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	3720      	adds	r7, #32
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6839      	ldr	r1, [r7, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f804 	bl	80020f8 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static _GLIBCXX20_CONSTEXPR allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8002102:	6839      	ldr	r1, [r7, #0]
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f009 fa09 	bl	800b51c <_ZNSaIcEC1ERKS_>
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <_ZNKSt4hashIhEclEh>:

  /// Explicit specialization for signed char.
  _Cxx_hashtable_define_trivial_hash(signed char)

  /// Explicit specialization for unsigned char.
  _Cxx_hashtable_define_trivial_hash(unsigned char)
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	70fb      	strb	r3, [r7, #3]
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	fbb3 f2f2 	udiv	r2, r3, r2
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	fb01 f202 	mul.w	r2, r1, r2
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	ed87 0a00 	vstr	s0, [r7]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEEC1ERKS9_>:
		      const allocator_type& __a = allocator_type())
	: _M_h(__first, __last, __n, __hf, __eql, __a)
	{ }

      /// Copy constructor.
      unordered_map(const unordered_map&) = default;
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	4611      	mov	r1, r2
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 fc31 	bl	8002a26 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSG_>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEED1Ev>:
    class unordered_map
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fc6b 	bl	8002ab4 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_ZN8SelectorC1ESt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS1_EEE>:
	uint16_t pin;
};

class Selector {
public:
	Selector(const std::unordered_map<uint8_t, GPIOPortPin> panel_gpio) : panel_gpio(panel_gpio) {}
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6839      	ldr	r1, [r7, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ffd9 	bl	80021ae <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEEC1ERKS9_>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <_ZN6LoggerC1ER20__UART_HandleTypeDef8LogLevelNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	Error
};

class Logger {
public:
	Logger(UART_HandleTypeDef& huart, LogLevel level = Info, std::string newline = "\n") :
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	4613      	mov	r3, r2
 8002214:	71fb      	strb	r3, [r7, #7]
		huart(huart), logLevel(level), newline(newline) {}
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	79fa      	ldrb	r2, [r7, #7]
 8002220:	711a      	strb	r2, [r3, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3308      	adds	r3, #8
 8002226:	6839      	ldr	r1, [r7, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f009 fcb1 	bl	800bb90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEED1Ev>:
    class queue
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fc69 	bl	8002b1a <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <_ZN5ESP32C1ER20__UART_HandleTypeDefRPv>:

class ESP32 {
public:
	ESP32(UART_HandleTypeDef& huart, osSemaphoreId_t& messages_sem) :
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
		huart(huart), messages_sem(messages_sem) {}
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1d1c      	adds	r4, r3, #4
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	4618      	mov	r0, r3
 8002270:	f009 f953 	bl	800b51a <_ZNSaIcEC1Ev>
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	461a      	mov	r2, r3
 800227a:	490b      	ldr	r1, [pc, #44]	; (80022a8 <_ZN5ESP32C1ER20__UART_HandleTypeDefRPv+0x54>)
 800227c:	4620      	mov	r0, r4
 800227e:	f009 fcbb 	bl	800bbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4618      	mov	r0, r3
 8002288:	f009 f949 	bl	800b51e <_ZNSaIcED1Ev>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	331c      	adds	r3, #28
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fc2e 	bl	8002af2 <_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEEC1IS8_vEEv>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	645a      	str	r2, [r3, #68]	; 0x44
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd90      	pop	{r4, r7, pc}
 80022a6:	bf00      	nop
 80022a8:	0800e7d4 	.word	0x0800e7d4

080022ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b09c      	sub	sp, #112	; 0x70
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022b2:	f002 fcdb 	bl	8004c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022b6:	f000 f8d5 	bl	8002464 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022ba:	f000 fab3 	bl	8002824 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80022be:	f000 fa91 	bl	80027e4 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80022c2:	f000 f99d 	bl	8002600 <_ZL12MX_I2C1_Initv>
  MX_USART1_UART_Init();
 80022c6:	f000 fa03 	bl	80026d0 <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 80022ca:	f000 f93d 	bl	8002548 <_ZL12MX_ADC1_Initv>
  MX_I2C2_Init();
 80022ce:	f000 f9cb 	bl	8002668 <_ZL12MX_I2C2_Initv>
  //MX_SDIO_SD_Init();
  MX_USART2_UART_Init();
 80022d2:	f000 fa2b 	bl	800272c <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 80022d6:	f000 fa57 	bl	8002788 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  logger.debug("Init");
 80022da:	f107 0318 	add.w	r3, r7, #24
 80022de:	4618      	mov	r0, r3
 80022e0:	f009 f91b 	bl	800b51a <_ZNSaIcEC1Ev>
 80022e4:	f107 0218 	add.w	r2, r7, #24
 80022e8:	463b      	mov	r3, r7
 80022ea:	494f      	ldr	r1, [pc, #316]	; (8002428 <main+0x17c>)
 80022ec:	4618      	mov	r0, r3
 80022ee:	f009 fc83 	bl	800bbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80022f2:	463b      	mov	r3, r7
 80022f4:	4619      	mov	r1, r3
 80022f6:	484d      	ldr	r0, [pc, #308]	; (800242c <main+0x180>)
 80022f8:	f7ff fe56 	bl	8001fa8 <_ZN6Logger5debugENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80022fc:	463b      	mov	r3, r7
 80022fe:	4618      	mov	r0, r3
 8002300:	f009 fa96 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002304:	f107 0318 	add.w	r3, r7, #24
 8002308:	4618      	mov	r0, r3
 800230a:	f009 f908 	bl	800b51e <_ZNSaIcED1Ev>

#ifdef ESP32_D
  if (!esp.init()) {
 800230e:	4848      	ldr	r0, [pc, #288]	; (8002430 <main+0x184>)
 8002310:	f7fe fe40 	bl	8000f94 <_ZN5ESP324initEv>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	bf0c      	ite	eq
 800231a:	2301      	moveq	r3, #1
 800231c:	2300      	movne	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d01d      	beq.n	8002360 <main+0xb4>
	  logger.error("ESP32 init FAIL!");
 8002324:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002328:	4618      	mov	r0, r3
 800232a:	f009 f8f6 	bl	800b51a <_ZNSaIcEC1Ev>
 800232e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002332:	f107 031c 	add.w	r3, r7, #28
 8002336:	493f      	ldr	r1, [pc, #252]	; (8002434 <main+0x188>)
 8002338:	4618      	mov	r0, r3
 800233a:	f009 fc5d 	bl	800bbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	4619      	mov	r1, r3
 8002344:	4839      	ldr	r0, [pc, #228]	; (800242c <main+0x180>)
 8002346:	f7ff fe6b 	bl	8002020 <_ZN6Logger5errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800234a:	f107 031c 	add.w	r3, r7, #28
 800234e:	4618      	mov	r0, r3
 8002350:	f009 fa6e 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002354:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002358:	4618      	mov	r0, r3
 800235a:	f009 f8e0 	bl	800b51e <_ZNSaIcED1Ev>
 800235e:	e01c      	b.n	800239a <main+0xee>
  } else {
	  logger.info("ESP32 init SUCCESS");
 8002360:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002364:	4618      	mov	r0, r3
 8002366:	f009 f8d8 	bl	800b51a <_ZNSaIcEC1Ev>
 800236a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800236e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002372:	4931      	ldr	r1, [pc, #196]	; (8002438 <main+0x18c>)
 8002374:	4618      	mov	r0, r3
 8002376:	f009 fc3f 	bl	800bbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800237a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800237e:	4619      	mov	r1, r3
 8002380:	482a      	ldr	r0, [pc, #168]	; (800242c <main+0x180>)
 8002382:	f7ff fe2f 	bl	8001fe4 <_ZN6Logger4infoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002386:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800238a:	4618      	mov	r0, r3
 800238c:	f009 fa50 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002390:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002394:	4618      	mov	r0, r3
 8002396:	f009 f8c2 	bl	800b51e <_ZNSaIcED1Ev>

//  esp.send_cmd("AT+GMR");
//  std::string esp_resp = esp.poll(100);
//  logger.debug(esp_resp);

  HAL_UART_Receive_IT(&huart2, (uint8_t*) esp_buf, 4);
 800239a:	2204      	movs	r2, #4
 800239c:	4927      	ldr	r1, [pc, #156]	; (800243c <main+0x190>)
 800239e:	4828      	ldr	r0, [pc, #160]	; (8002440 <main+0x194>)
 80023a0:	f004 fc99 	bl	8006cd6 <HAL_UART_Receive_IT>
  esp.send_cmd("AT+GMR");
 80023a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023a8:	4618      	mov	r0, r3
 80023aa:	f009 f8b6 	bl	800b51a <_ZNSaIcEC1Ev>
 80023ae:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80023b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023b6:	4923      	ldr	r1, [pc, #140]	; (8002444 <main+0x198>)
 80023b8:	4618      	mov	r0, r3
 80023ba:	f009 fc1d 	bl	800bbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80023be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023c2:	4619      	mov	r1, r3
 80023c4:	481a      	ldr	r0, [pc, #104]	; (8002430 <main+0x184>)
 80023c6:	f7fe fdc5 	bl	8000f54 <_ZN5ESP328send_cmdENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80023ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023ce:	4618      	mov	r0, r3
 80023d0:	f009 fa2e 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80023d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023d8:	4618      	mov	r0, r3
 80023da:	f009 f8a0 	bl	800b51e <_ZNSaIcED1Ev>
  selector.deselect_all();
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80023de:	f005 fc43 	bl	8007c68 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  esp_messages_sem = osSemaphoreNew(30U, 0U, NULL);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	201e      	movs	r0, #30
 80023e8:	f005 fd5c 	bl	8007ea4 <osSemaphoreNew>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4a16      	ldr	r2, [pc, #88]	; (8002448 <main+0x19c>)
 80023f0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  mid_MsgQueue = osMessageQueueNew(16, sizeof(MSGQUEUE_OBJ_t), NULL);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2104      	movs	r1, #4
 80023f6:	2010      	movs	r0, #16
 80023f8:	f005 fe74 	bl	80080e4 <osMessageQueueNew>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4a13      	ldr	r2, [pc, #76]	; (800244c <main+0x1a0>)
 8002400:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
#ifdef SELECTOR_D
  selectorTaskHandle = osThreadNew(SelectorCycleTask, NULL, &defaultTask_attributes);
#endif

  httpSendTaskHandle = osThreadNew(SendHTTPTask, NULL, &defaultTask_attributes);
 8002402:	4a13      	ldr	r2, [pc, #76]	; (8002450 <main+0x1a4>)
 8002404:	2100      	movs	r1, #0
 8002406:	4813      	ldr	r0, [pc, #76]	; (8002454 <main+0x1a8>)
 8002408:	f005 fc8d 	bl	8007d26 <osThreadNew>
 800240c:	4603      	mov	r3, r0
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <main+0x1ac>)
 8002410:	6013      	str	r3, [r2, #0]
  processHandle = osThreadNew(ProcessUartTask, NULL,  &defaultTask_attributes);
 8002412:	4a0f      	ldr	r2, [pc, #60]	; (8002450 <main+0x1a4>)
 8002414:	2100      	movs	r1, #0
 8002416:	4811      	ldr	r0, [pc, #68]	; (800245c <main+0x1b0>)
 8002418:	f005 fc85 	bl	8007d26 <osThreadNew>
 800241c:	4603      	mov	r3, r0
 800241e:	4a10      	ldr	r2, [pc, #64]	; (8002460 <main+0x1b4>)
 8002420:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002422:	f005 fc45 	bl	8007cb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002426:	e7fe      	b.n	8002426 <main+0x17a>
 8002428:	0800e7e4 	.word	0x0800e7e4
 800242c:	20000490 	.word	0x20000490
 8002430:	200004cc 	.word	0x200004cc
 8002434:	0800e7ec 	.word	0x0800e7ec
 8002438:	0800e800 	.word	0x0800e800
 800243c:	20000514 	.word	0x20000514
 8002440:	20000388 	.word	0x20000388
 8002444:	0800e814 	.word	0x0800e814
 8002448:	20000470 	.word	0x20000470
 800244c:	20000520 	.word	0x20000520
 8002450:	0800e874 	.word	0x0800e874
 8002454:	080028e5 	.word	0x080028e5
 8002458:	20000518 	.word	0x20000518
 800245c:	08002981 	.word	0x08002981
 8002460:	2000051c 	.word	0x2000051c

08002464 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b094      	sub	sp, #80	; 0x50
 8002468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800246a:	f107 0320 	add.w	r3, r7, #32
 800246e:	2230      	movs	r2, #48	; 0x30
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f00a faa6 	bl	800c9c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <_Z18SystemClock_Configv+0xdc>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	4a2b      	ldr	r2, [pc, #172]	; (8002540 <_Z18SystemClock_Configv+0xdc>)
 8002492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002496:	6413      	str	r3, [r2, #64]	; 0x40
 8002498:	4b29      	ldr	r3, [pc, #164]	; (8002540 <_Z18SystemClock_Configv+0xdc>)
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024a4:	2300      	movs	r3, #0
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	4b26      	ldr	r3, [pc, #152]	; (8002544 <_Z18SystemClock_Configv+0xe0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a25      	ldr	r2, [pc, #148]	; (8002544 <_Z18SystemClock_Configv+0xe0>)
 80024ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b23      	ldr	r3, [pc, #140]	; (8002544 <_Z18SystemClock_Configv+0xe0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024c0:	2302      	movs	r3, #2
 80024c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024c4:	2301      	movs	r3, #1
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024c8:	2310      	movs	r3, #16
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024cc:	2302      	movs	r3, #2
 80024ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024d0:	2300      	movs	r3, #0
 80024d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80024d4:	2310      	movs	r3, #16
 80024d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80024d8:	23c0      	movs	r3, #192	; 0xc0
 80024da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024dc:	2302      	movs	r3, #2
 80024de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024e0:	2304      	movs	r3, #4
 80024e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e4:	f107 0320 	add.w	r3, r7, #32
 80024e8:	4618      	mov	r0, r3
 80024ea:	f003 fe1b 	bl	8006124 <HAL_RCC_OscConfig>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf14      	ite	ne
 80024f4:	2301      	movne	r3, #1
 80024f6:	2300      	moveq	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80024fe:	f000 fa75 	bl	80029ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002502:	230f      	movs	r3, #15
 8002504:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002516:	f107 030c 	add.w	r3, r7, #12
 800251a:	2100      	movs	r1, #0
 800251c:	4618      	mov	r0, r3
 800251e:	f004 f879 	bl	8006614 <HAL_RCC_ClockConfig>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf14      	ite	ne
 8002528:	2301      	movne	r3, #1
 800252a:	2300      	moveq	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8002532:	f000 fa5b 	bl	80029ec <Error_Handler>
  }
}
 8002536:	bf00      	nop
 8002538:	3750      	adds	r7, #80	; 0x50
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	40007000 	.word	0x40007000

08002548 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800254e:	463b      	mov	r3, r7
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800255a:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <_ZL12MX_ADC1_Initv+0xac>)
 800255c:	4a26      	ldr	r2, [pc, #152]	; (80025f8 <_ZL12MX_ADC1_Initv+0xb0>)
 800255e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002560:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <_ZL12MX_ADC1_Initv+0xac>)
 8002562:	2200      	movs	r2, #0
 8002564:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002566:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <_ZL12MX_ADC1_Initv+0xac>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800256c:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <_ZL12MX_ADC1_Initv+0xac>)
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <_ZL12MX_ADC1_Initv+0xac>)
 8002574:	2200      	movs	r2, #0
 8002576:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002578:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <_ZL12MX_ADC1_Initv+0xac>)
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002580:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <_ZL12MX_ADC1_Initv+0xac>)
 8002582:	2200      	movs	r2, #0
 8002584:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <_ZL12MX_ADC1_Initv+0xac>)
 8002588:	4a1c      	ldr	r2, [pc, #112]	; (80025fc <_ZL12MX_ADC1_Initv+0xb4>)
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800258c:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <_ZL12MX_ADC1_Initv+0xac>)
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <_ZL12MX_ADC1_Initv+0xac>)
 8002594:	2201      	movs	r2, #1
 8002596:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002598:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <_ZL12MX_ADC1_Initv+0xac>)
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <_ZL12MX_ADC1_Initv+0xac>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025a6:	4813      	ldr	r0, [pc, #76]	; (80025f4 <_ZL12MX_ADC1_Initv+0xac>)
 80025a8:	f002 fbd2 	bl	8004d50 <HAL_ADC_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	bf14      	ite	ne
 80025b2:	2301      	movne	r3, #1
 80025b4:	2300      	moveq	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 80025bc:	f000 fa16 	bl	80029ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80025c4:	2301      	movs	r3, #1
 80025c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025cc:	463b      	mov	r3, r7
 80025ce:	4619      	mov	r1, r3
 80025d0:	4808      	ldr	r0, [pc, #32]	; (80025f4 <_ZL12MX_ADC1_Initv+0xac>)
 80025d2:	f002 fc01 	bl	8004dd8 <HAL_ADC_ConfigChannel>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf14      	ite	ne
 80025dc:	2301      	movne	r3, #1
 80025de:	2300      	moveq	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 80025e6:	f000 fa01 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000254 	.word	0x20000254
 80025f8:	40012000 	.word	0x40012000
 80025fc:	0f000001 	.word	0x0f000001

08002600 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002604:	4b15      	ldr	r3, [pc, #84]	; (800265c <_ZL12MX_I2C1_Initv+0x5c>)
 8002606:	4a16      	ldr	r2, [pc, #88]	; (8002660 <_ZL12MX_I2C1_Initv+0x60>)
 8002608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800260a:	4b14      	ldr	r3, [pc, #80]	; (800265c <_ZL12MX_I2C1_Initv+0x5c>)
 800260c:	4a15      	ldr	r2, [pc, #84]	; (8002664 <_ZL12MX_I2C1_Initv+0x64>)
 800260e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <_ZL12MX_I2C1_Initv+0x5c>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <_ZL12MX_I2C1_Initv+0x5c>)
 8002618:	2200      	movs	r2, #0
 800261a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <_ZL12MX_I2C1_Initv+0x5c>)
 800261e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002624:	4b0d      	ldr	r3, [pc, #52]	; (800265c <_ZL12MX_I2C1_Initv+0x5c>)
 8002626:	2200      	movs	r2, #0
 8002628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <_ZL12MX_I2C1_Initv+0x5c>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <_ZL12MX_I2C1_Initv+0x5c>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002636:	4b09      	ldr	r3, [pc, #36]	; (800265c <_ZL12MX_I2C1_Initv+0x5c>)
 8002638:	2200      	movs	r2, #0
 800263a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800263c:	4807      	ldr	r0, [pc, #28]	; (800265c <_ZL12MX_I2C1_Initv+0x5c>)
 800263e:	f003 fc2d 	bl	8005e9c <HAL_I2C_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf14      	ite	ne
 8002648:	2301      	movne	r3, #1
 800264a:	2300      	moveq	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002652:	f000 f9cb 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000029c 	.word	0x2000029c
 8002660:	40005400 	.word	0x40005400
 8002664:	000186a0 	.word	0x000186a0

08002668 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800266c:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <_ZL12MX_I2C2_Initv+0x5c>)
 800266e:	4a16      	ldr	r2, [pc, #88]	; (80026c8 <_ZL12MX_I2C2_Initv+0x60>)
 8002670:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002672:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <_ZL12MX_I2C2_Initv+0x5c>)
 8002674:	4a15      	ldr	r2, [pc, #84]	; (80026cc <_ZL12MX_I2C2_Initv+0x64>)
 8002676:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002678:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <_ZL12MX_I2C2_Initv+0x5c>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <_ZL12MX_I2C2_Initv+0x5c>)
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <_ZL12MX_I2C2_Initv+0x5c>)
 8002686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800268a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800268c:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <_ZL12MX_I2C2_Initv+0x5c>)
 800268e:	2200      	movs	r2, #0
 8002690:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <_ZL12MX_I2C2_Initv+0x5c>)
 8002694:	2200      	movs	r2, #0
 8002696:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002698:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <_ZL12MX_I2C2_Initv+0x5c>)
 800269a:	2200      	movs	r2, #0
 800269c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <_ZL12MX_I2C2_Initv+0x5c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026a4:	4807      	ldr	r0, [pc, #28]	; (80026c4 <_ZL12MX_I2C2_Initv+0x5c>)
 80026a6:	f003 fbf9 	bl	8005e9c <HAL_I2C_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	bf14      	ite	ne
 80026b0:	2301      	movne	r3, #1
 80026b2:	2300      	moveq	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80026ba:	f000 f997 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200002f0 	.word	0x200002f0
 80026c8:	40005800 	.word	0x40005800
 80026cc:	000186a0 	.word	0x000186a0

080026d0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026d4:	4b13      	ldr	r3, [pc, #76]	; (8002724 <_ZL19MX_USART1_UART_Initv+0x54>)
 80026d6:	4a14      	ldr	r2, [pc, #80]	; (8002728 <_ZL19MX_USART1_UART_Initv+0x58>)
 80026d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <_ZL19MX_USART1_UART_Initv+0x54>)
 80026dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <_ZL19MX_USART1_UART_Initv+0x54>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <_ZL19MX_USART1_UART_Initv+0x54>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ee:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <_ZL19MX_USART1_UART_Initv+0x54>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <_ZL19MX_USART1_UART_Initv+0x54>)
 80026f6:	220c      	movs	r2, #12
 80026f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <_ZL19MX_USART1_UART_Initv+0x54>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002702:	2200      	movs	r2, #0
 8002704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002706:	4807      	ldr	r0, [pc, #28]	; (8002724 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002708:	f004 f964 	bl	80069d4 <HAL_UART_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	bf14      	ite	ne
 8002712:	2301      	movne	r3, #1
 8002714:	2300      	moveq	r3, #0
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800271c:	f000 f966 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000344 	.word	0x20000344
 8002728:	40011000 	.word	0x40011000

0800272c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002732:	4a14      	ldr	r2, [pc, #80]	; (8002784 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800273c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002744:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <_ZL19MX_USART2_UART_Initv+0x54>)
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002752:	220c      	movs	r2, #12
 8002754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <_ZL19MX_USART2_UART_Initv+0x54>)
 800275e:	2200      	movs	r2, #0
 8002760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002762:	4807      	ldr	r0, [pc, #28]	; (8002780 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002764:	f004 f936 	bl	80069d4 <HAL_UART_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf14      	ite	ne
 800276e:	2301      	movne	r3, #1
 8002770:	2300      	moveq	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002778:	f000 f938 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20000388 	.word	0x20000388
 8002784:	40004400 	.word	0x40004400

08002788 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800278c:	4b13      	ldr	r3, [pc, #76]	; (80027dc <_ZL19MX_USART3_UART_Initv+0x54>)
 800278e:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002790:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002798:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <_ZL19MX_USART3_UART_Initv+0x54>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <_ZL19MX_USART3_UART_Initv+0x54>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <_ZL19MX_USART3_UART_Initv+0x54>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <_ZL19MX_USART3_UART_Initv+0x54>)
 80027ae:	220c      	movs	r2, #12
 80027b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <_ZL19MX_USART3_UART_Initv+0x54>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <_ZL19MX_USART3_UART_Initv+0x54>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027be:	4807      	ldr	r0, [pc, #28]	; (80027dc <_ZL19MX_USART3_UART_Initv+0x54>)
 80027c0:	f004 f908 	bl	80069d4 <HAL_UART_Init>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bf14      	ite	ne
 80027ca:	2301      	movne	r3, #1
 80027cc:	2300      	moveq	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80027d4:	f000 f90a 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	200003cc 	.word	0x200003cc
 80027e0:	40004800 	.word	0x40004800

080027e4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <_ZL11MX_DMA_Initv+0x3c>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <_ZL11MX_DMA_Initv+0x3c>)
 80027f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <_ZL11MX_DMA_Initv+0x3c>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2105      	movs	r1, #5
 800280a:	2010      	movs	r0, #16
 800280c:	f002 fddd 	bl	80053ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002810:	2010      	movs	r0, #16
 8002812:	f002 fdf6 	bl	8005402 <HAL_NVIC_EnableIRQ>

}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800

08002824 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	; 0x28
 8002828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282a:	f107 0314 	add.w	r3, r7, #20
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	60da      	str	r2, [r3, #12]
 8002838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	4b27      	ldr	r3, [pc, #156]	; (80028dc <_ZL12MX_GPIO_Initv+0xb8>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a26      	ldr	r2, [pc, #152]	; (80028dc <_ZL12MX_GPIO_Initv+0xb8>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b24      	ldr	r3, [pc, #144]	; (80028dc <_ZL12MX_GPIO_Initv+0xb8>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b20      	ldr	r3, [pc, #128]	; (80028dc <_ZL12MX_GPIO_Initv+0xb8>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <_ZL12MX_GPIO_Initv+0xb8>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <_ZL12MX_GPIO_Initv+0xb8>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <_ZL12MX_GPIO_Initv+0xb8>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a18      	ldr	r2, [pc, #96]	; (80028dc <_ZL12MX_GPIO_Initv+0xb8>)
 800287c:	f043 0308 	orr.w	r3, r3, #8
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b16      	ldr	r3, [pc, #88]	; (80028dc <_ZL12MX_GPIO_Initv+0xb8>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <_ZL12MX_GPIO_Initv+0xb8>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a11      	ldr	r2, [pc, #68]	; (80028dc <_ZL12MX_GPIO_Initv+0xb8>)
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <_ZL12MX_GPIO_Initv+0xb8>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Panel0_Pin|Panel1_Pin|Panel2_Pin, GPIO_PIN_RESET);
 80028aa:	2200      	movs	r2, #0
 80028ac:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80028b0:	480b      	ldr	r0, [pc, #44]	; (80028e0 <_ZL12MX_GPIO_Initv+0xbc>)
 80028b2:	f003 fad9 	bl	8005e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Panel0_Pin Panel1_Pin Panel2_Pin */
  GPIO_InitStruct.Pin = Panel0_Pin|Panel1_Pin|Panel2_Pin;
 80028b6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80028ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028bc:	2301      	movs	r3, #1
 80028be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4619      	mov	r1, r3
 80028ce:	4804      	ldr	r0, [pc, #16]	; (80028e0 <_ZL12MX_GPIO_Initv+0xbc>)
 80028d0:	f003 f92e 	bl	8005b30 <HAL_GPIO_Init>

}
 80028d4:	bf00      	nop
 80028d6:	3728      	adds	r7, #40	; 0x28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020c00 	.word	0x40020c00

080028e4 <_Z12SendHTTPTaskPv>:
		}
		osDelay(10000);
	}
}

void SendHTTPTask(void* argument) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b090      	sub	sp, #64	; 0x40
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	uint32_t tick = osKernelGetTickCount();
 80028ec:	f005 fa06 	bl	8007cfc <osKernelGetTickCount>
 80028f0:	63f8      	str	r0, [r7, #60]	; 0x3c

	for(;;) {
		tick += 10000U;
 80028f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80028f8:	3310      	adds	r3, #16
 80028fa:	63fb      	str	r3, [r7, #60]	; 0x3c

		esp.send_cmd("AT+GMR");
 80028fc:	f107 0320 	add.w	r3, r7, #32
 8002900:	4618      	mov	r0, r3
 8002902:	f008 fe0a 	bl	800b51a <_ZNSaIcEC1Ev>
 8002906:	f107 0220 	add.w	r2, r7, #32
 800290a:	f107 0308 	add.w	r3, r7, #8
 800290e:	4918      	ldr	r1, [pc, #96]	; (8002970 <_Z12SendHTTPTaskPv+0x8c>)
 8002910:	4618      	mov	r0, r3
 8002912:	f009 f971 	bl	800bbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002916:	f107 0308 	add.w	r3, r7, #8
 800291a:	4619      	mov	r1, r3
 800291c:	4815      	ldr	r0, [pc, #84]	; (8002974 <_Z12SendHTTPTaskPv+0x90>)
 800291e:	f7fe fb19 	bl	8000f54 <_ZN5ESP328send_cmdENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002922:	f107 0308 	add.w	r3, r7, #8
 8002926:	4618      	mov	r0, r3
 8002928:	f008 ff82 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800292c:	f107 0320 	add.w	r3, r7, #32
 8002930:	4618      	mov	r0, r3
 8002932:	f008 fdf4 	bl	800b51e <_ZNSaIcED1Ev>
		osSemaphoreAcquire(esp_messages_sem, 5000);
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <_Z12SendHTTPTaskPv+0x94>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f241 3188 	movw	r1, #5000	; 0x1388
 800293e:	4618      	mov	r0, r3
 8002940:	f005 fb3a 	bl	8007fb8 <osSemaphoreAcquire>
		logger.info(esp.consume_message());
 8002944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002948:	490a      	ldr	r1, [pc, #40]	; (8002974 <_Z12SendHTTPTaskPv+0x90>)
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe fc16 	bl	800117c <_ZN5ESP3215consume_messageB5cxx11Ev>
 8002950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002954:	4619      	mov	r1, r3
 8002956:	4809      	ldr	r0, [pc, #36]	; (800297c <_Z12SendHTTPTaskPv+0x98>)
 8002958:	f7ff fb44 	bl	8001fe4 <_ZN6Logger4infoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800295c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002960:	4618      	mov	r0, r3
 8002962:	f008 ff65 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		osDelayUntil(tick);
 8002966:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002968:	f005 fa6f 	bl	8007e4a <osDelayUntil>
		tick += 10000U;
 800296c:	e7c1      	b.n	80028f2 <_Z12SendHTTPTaskPv+0xe>
 800296e:	bf00      	nop
 8002970:	0800e814 	.word	0x0800e814
 8002974:	200004cc 	.word	0x200004cc
 8002978:	20000470 	.word	0x20000470
 800297c:	20000490 	.word	0x20000490

08002980 <_Z15ProcessUartTaskPv>:
	}
}

void ProcessUartTask(void* argument) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
	MSGQUEUE_OBJ_t msg;

	for(;;) {
		osMessageQueueGet(mid_MsgQueue, &msg, NULL, 0U);
 8002988:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <_Z15ProcessUartTaskPv+0x28>)
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	f107 010c 	add.w	r1, r7, #12
 8002990:	2300      	movs	r3, #0
 8002992:	2200      	movs	r2, #0
 8002994:	f005 fc7a 	bl	800828c <osMessageQueueGet>
		esp.process_incoming_bytes(msg.Buf, 4);
 8002998:	f107 030c 	add.w	r3, r7, #12
 800299c:	2204      	movs	r2, #4
 800299e:	4619      	mov	r1, r3
 80029a0:	4802      	ldr	r0, [pc, #8]	; (80029ac <_Z15ProcessUartTaskPv+0x2c>)
 80029a2:	f7fe fb89 	bl	80010b8 <_ZN5ESP3222process_incoming_bytesEPci>
		osMessageQueueGet(mid_MsgQueue, &msg, NULL, 0U);
 80029a6:	e7ef      	b.n	8002988 <_Z15ProcessUartTaskPv+0x8>
 80029a8:	20000520 	.word	0x20000520
 80029ac:	200004cc 	.word	0x200004cc

080029b0 <HAL_UART_RxCpltCallback>:
	}
}

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_UART_RxCpltCallback+0x30>)
 80029ba:	681b      	ldr	r3, [r3, #0]
//  esp.process_incoming_bytes(esp_buf, 4);
  MSGQUEUE_OBJ_t msg;
  memcpy(msg.Buf, esp_buf, 4);
 80029bc:	60fb      	str	r3, [r7, #12]

  osMessageQueuePut(mid_MsgQueue, &msg, 0U, 0U);
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_UART_RxCpltCallback+0x34>)
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	f107 010c 	add.w	r1, r7, #12
 80029c6:	2300      	movs	r3, #0
 80029c8:	2200      	movs	r2, #0
 80029ca:	f005 fbff 	bl	80081cc <osMessageQueuePut>

  HAL_UART_Receive_IT(&huart2, (uint8_t*) esp_buf, 4);
 80029ce:	2204      	movs	r2, #4
 80029d0:	4903      	ldr	r1, [pc, #12]	; (80029e0 <HAL_UART_RxCpltCallback+0x30>)
 80029d2:	4805      	ldr	r0, [pc, #20]	; (80029e8 <HAL_UART_RxCpltCallback+0x38>)
 80029d4:	f004 f97f 	bl	8006cd6 <HAL_UART_Receive_IT>
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000514 	.word	0x20000514
 80029e4:	20000520 	.word	0x20000520
 80029e8:	20000388 	.word	0x20000388

080029ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029f0:	b672      	cpsid	i
}
 80029f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029f4:	e7fe      	b.n	80029f4 <Error_Handler+0x8>

080029f6 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EED1Ev>:
	   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    struct _Hashtable_ebo_helper;

  /// Specialization using EBO.
  template<int _Nm, typename _Tp>
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f906 	bl	8002c10 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEED1Ev>:
  /**
   * This type deals with all allocation and keeps an allocator instance
   * through inheritance to benefit from EBO when possible.
   */
  template<typename _NodeAlloc>
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ffed 	bl	80029f6 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EED1Ev>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSG_>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
    _Hashtable(const _Hashtable& __ht)
    : __hashtable_base(__ht),
      __map_base(__ht),
      __rehash_base(__ht),
      __hashtable_alloc(
	__node_alloc_traits::_S_select_on_copy(__ht._M_node_allocator())),
 8002a30:	6838      	ldr	r0, [r7, #0]
 8002a32:	f000 f8e1 	bl	8002bf8 <_ZNKSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 8002a36:	4602      	mov	r2, r0
      __enable_default_ctor(__ht),
      _M_buckets(nullptr),
      _M_bucket_count(__ht._M_bucket_count),
      _M_element_count(__ht._M_element_count),
      _M_rehash_policy(__ht._M_rehash_policy)
 8002a38:	f107 030c 	add.w	r3, r7, #12
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f8cc 	bl	8002bdc <_ZN9__gnu_cxx14__alloc_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEES7_E17_S_select_on_copyERKS8_>
 8002a44:	f107 030c 	add.w	r3, r7, #12
 8002a48:	4619      	mov	r1, r3
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f8ec 	bl	8002c28 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1IS7_EEOT_>
 8002a50:	f107 030c 	add.w	r3, r7, #12
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 f8db 	bl	8002c10 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>
      _M_buckets(nullptr),
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
      _M_bucket_count(__ht._M_bucket_count),
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	605a      	str	r2, [r3, #4]
      _M_rehash_policy(__ht._M_rehash_policy)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3308      	adds	r3, #8
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fb5d 	bl	800212c <_ZNSt8__detail15_Hash_node_baseC1Ev>
      _M_element_count(__ht._M_element_count),
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	60da      	str	r2, [r3, #12]
      _M_rehash_policy(__ht._M_rehash_policy)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	3310      	adds	r3, #16
 8002a80:	3210      	adds	r2, #16
 8002a82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a86:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
    {
      __alloc_node_gen_t __alloc_node_gen(*this);
 8002a90:	f107 0308 	add.w	r3, r7, #8
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 f8d8 	bl	8002c4c <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1ERNS_16_Hashtable_allocIS7_EE>
      _M_assign(__ht, __alloc_node_gen);
 8002a9c:	f107 0308 	add.w	r3, r7, #8
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	6839      	ldr	r1, [r7, #0]
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f8e0 	bl	8002c6a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_>
    }
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    ~_Hashtable() noexcept
    {
      clear();
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f952 	bl	8002d66 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f96f 	bl	8002da6 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ffa0 	bl	8002a0e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEED1Ev>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      deque() = default;
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 f97b 	bl	8002dde <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEEC1IS8_vEEv>:
	queue()
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
	: c() { }
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4618      	mov	r0, r3
 8002afe:	2328      	movs	r3, #40	; 0x28
 8002b00:	461a      	mov	r2, r3
 8002b02:	2100      	movs	r1, #0
 8002b04:	f009 ff5e 	bl	800c9c4 <memset>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ffe4 	bl	8002ad8 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~deque()
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b08a      	sub	sp, #40	; 0x28
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8002b22:	f107 0308 	add.w	r3, r7, #8
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fe fbca 	bl	80012c2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8002b2e:	f107 0318 	add.w	r3, r7, #24
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 f985 	bl	8002e44 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe fbcf 	bl	80012e0 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f107 0218 	add.w	r2, r7, #24
 8002b48:	f107 0108 	add.w	r1, r7, #8
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f988 	bl	8002e62 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_destroy_dataESt15_Deque_iteratorIS5_RS5_PS5_ESB_RKS6_>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 f953 	bl	8002e00 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3728      	adds	r7, #40	; 0x28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_ZNSaISt4pairIKh11GPIOPortPinEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f997 	bl	8002ea0 <_ZN9__gnu_cxx13new_allocatorISt4pairIKh11GPIOPortPinEEC1Ev>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <_ZNSaISt4pairIKh11GPIOPortPinEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f996 	bl	8002eb6 <_ZN9__gnu_cxx13new_allocatorISt4pairIKh11GPIOPortPinEED1Ev>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEEC1ESt16initializer_listIS7_EjRKS2_RKS4_RKS8_>:
       *  @param  __a  An allocator object.
       *
       *  Create an %unordered_map consisting of copies of the elements in the
       *  list. This is linear in N (where N is @a __l.size()).
       */
      unordered_map(initializer_list<value_type> __l,
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af04      	add	r7, sp, #16
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	1d38      	adds	r0, r7, #4
 8002b9e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002ba2:	603b      	str	r3, [r7, #0]
		    size_type __n = 0,
		    const hasher& __hf = hasher(),
		    const key_equal& __eql = key_equal(),
		    const allocator_type& __a = allocator_type())
      : _M_h(__l, __n, __hf, __eql, __a)
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	9302      	str	r3, [sp, #8]
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	1d3a      	adds	r2, r7, #4
 8002bb6:	ca06      	ldmia	r2, {r1, r2}
 8002bb8:	f000 f988 	bl	8002ecc <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listIS3_EjRKSA_RKS8_RKS4_>
      { }
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <_ZN9__gnu_cxx14__alloc_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEES7_E17_S_select_on_copyERKS8_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6839      	ldr	r1, [r7, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f99e 	bl	8002f2c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE37select_on_container_copy_constructionERKS7_>
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_ZNKSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>:
      __node_alloc_type&
      _M_node_allocator()
      { return __ebo_node_alloc::_M_get(); }

      const __node_alloc_type&
      _M_node_allocator() const
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_cget(); }
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f9ae 	bl	8002f62 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EE7_M_cgetEv>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>:
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f9ad 	bl	8002f78 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1IS7_EEOT_>:
	_Hashtable_alloc(_Alloc&& __a)
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
	: __ebo_node_alloc(std::forward<_Alloc>(__a))
 8002c32:	6838      	ldr	r0, [r7, #0]
 8002c34:	f000 f9ab 	bl	8002f8e <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f9b1 	bl	8002fa4 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EEC1IS7_EEOT_>
	{ }
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1ERNS_16_Hashtable_allocIS7_EE>:
      _AllocNode(__hashtable_alloc& __h)
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
      : _M_h(__h) { }
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b08a      	sub	sp, #40	; 0x28
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
	__buckets_ptr __buckets = nullptr;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
	if (!_M_buckets)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0x2c>
	  _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4619      	mov	r1, r3
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f99d 	bl	8002fc8 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 8002c8e:	61f8      	str	r0, [r7, #28]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	601a      	str	r2, [r3, #0]
	    if (!__ht._M_before_begin._M_nxt)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d05f      	beq.n	8002d5e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0xf4>
	    __node_ptr __ht_n = __ht._M_begin();
 8002c9e:	68b8      	ldr	r0, [r7, #8]
 8002ca0:	f000 f9af 	bl	8003002 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8002ca4:	6278      	str	r0, [r7, #36]	; 0x24
	      = __node_gen(__fwd_value_for<_Ht>(__ht_n->_M_v()));
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	3304      	adds	r3, #4
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f932 	bl	8002f14 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f9b1 	bl	800301a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15__fwd_value_forIRKSG_EENSt11conditionalIXsrSt19is_lvalue_referenceIT_E5valueERKS3_OS3_E4typeERS3_>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4619      	mov	r1, r3
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f9b8 	bl	8003032 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEclIRKS5_EEPS6_OT_>
 8002cc2:	61b8      	str	r0, [r7, #24]
	    this->_M_copy_code(*__this_n, *__ht_n);
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	1d19      	adds	r1, r3, #4
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	3304      	adds	r3, #4
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f9c3 	bl	800305a <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_copy_codeERNS_21_Hash_node_code_cacheILb0EEERKSC_>
	    _M_update_bbegin(__this_n);
 8002cd4:	69b9      	ldr	r1, [r7, #24]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f9cb 	bl	8003072 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEPNS5_10_Hash_nodeIS3_Lb0EEE>
	    __node_ptr __prev_n = __this_n;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	623b      	str	r3, [r7, #32]
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
 8002ce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ce2:	f000 f9d5 	bl	8003090 <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8002ce6:	6278      	str	r0, [r7, #36]	; 0x24
 8002ce8:	e035      	b.n	8002d56 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0xec>
		__this_n = __node_gen(__fwd_value_for<_Ht>(__ht_n->_M_v()));
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	3304      	adds	r3, #4
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f910 	bl	8002f14 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f98f 	bl	800301a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15__fwd_value_forIRKSG_EENSt11conditionalIXsrSt19is_lvalue_referenceIT_E5valueERKS3_OS3_E4typeERS3_>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4619      	mov	r1, r3
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f996 	bl	8003032 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEclIRKS5_EEPS6_OT_>
 8002d06:	61b8      	str	r0, [r7, #24]
		__prev_n->_M_nxt = __this_n;
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	601a      	str	r2, [r3, #0]
		this->_M_copy_code(*__this_n, *__ht_n);
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	1d19      	adds	r1, r3, #4
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	3304      	adds	r3, #4
 8002d16:	461a      	mov	r2, r3
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f99e 	bl	800305a <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_copy_codeERNS_21_Hash_node_code_cacheILb0EEERKSC_>
		size_type __bkt = _M_bucket_index(*__this_n);
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	3304      	adds	r3, #4
 8002d22:	4619      	mov	r1, r3
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 f9bf 	bl	80030a8 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>
 8002d2a:	6178      	str	r0, [r7, #20]
		if (!_M_buckets[__bkt])
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d106      	bne.n	8002d4a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0xe0>
		  _M_buckets[__bkt] = __prev_n;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	6a3a      	ldr	r2, [r7, #32]
 8002d48:	601a      	str	r2, [r3, #0]
		__prev_n = __this_n;
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	623b      	str	r3, [r7, #32]
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
 8002d4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d50:	f000 f99e 	bl	8003090 <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8002d54:	6278      	str	r0, [r7, #36]	; 0x24
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1c6      	bne.n	8002cea <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0x80>
 8002d5c:	e000      	b.n	8002d60 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0xf6>
	      return;
 8002d5e:	bf00      	nop
      }
 8002d60:	3728      	adds	r7, #40	; 0x28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f947 	bl	8003002 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4619      	mov	r1, r3
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f9a6 	bl	80030ca <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_deallocate_nodesEPS6_>
      __builtin_memset(_M_buckets, 0,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4610      	mov	r0, r2
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	f009 fe19 	bl	800c9c4 <memset>
      _M_element_count = 0;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
    }
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6819      	ldr	r1, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	461a      	mov	r2, r3
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f99e 	bl	80030fa <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj>
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f9ba 	bl	8003148 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Deque_base()
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 f99d 	bl	8003128 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002dee:	2100      	movs	r1, #0
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f9b5 	bl	8003160 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d010      	beq.n	8002e32 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002e18:	3304      	adds	r3, #4
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fa05 	bl	800322c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6819      	ldr	r1, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7fe fb0e 	bl	800144e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_deallocate_mapEPPS5_j>
    }
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff ffc6 	bl	8002dc6 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implD1Ev>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	3318      	adds	r3, #24
 8002e52:	4619      	mov	r1, r3
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7fe fa4e 	bl	80012f6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_destroy_dataESt15_Deque_iteratorIS5_RS5_PS5_ESB_RKS6_>:
      _M_destroy_data(iterator __first, iterator __last,
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b08c      	sub	sp, #48	; 0x30
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	603b      	str	r3, [r7, #0]
	  _M_destroy_data_aux(__first, __last);
 8002e70:	f107 0310 	add.w	r3, r7, #16
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe fa3d 	bl	80012f6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 8002e7c:	f107 0320 	add.w	r3, r7, #32
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fa37 	bl	80012f6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 8002e88:	f107 0220 	add.w	r2, r7, #32
 8002e8c:	f107 0310 	add.w	r3, r7, #16
 8002e90:	4619      	mov	r1, r3
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f9e5 	bl	8003262 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_>
      }
 8002e98:	bf00      	nop
 8002e9a:	3730      	adds	r7, #48	; 0x30
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <_ZN9__gnu_cxx13new_allocatorISt4pairIKh11GPIOPortPinEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <_ZN9__gnu_cxx13new_allocatorISt4pairIKh11GPIOPortPinEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listIS3_EjRKSA_RKS8_RKS4_>:
      _Hashtable(initializer_list<value_type> __l,
 8002ecc:	b5b0      	push	{r4, r5, r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af04      	add	r7, sp, #16
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	1d38      	adds	r0, r7, #4
 8002ed6:	e880 0006 	stmia.w	r0, {r1, r2}
 8002eda:	603b      	str	r3, [r7, #0]
		   __hf, __eql, __a, __unique_keys{})
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fa1d 	bl	800331e <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE5beginEv>
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	1d3b      	adds	r3, r7, #4
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 fa24 	bl	8003336 <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE3endEv>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	f88d 500c 	strb.w	r5, [sp, #12]
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	9302      	str	r3, [sp, #8]
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	4621      	mov	r1, r4
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fa2b 	bl	8003360 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS3_EET_SK_jRKSA_RKS8_RKS4_St17integral_constantIbLb1EE>
      { }
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bdb0      	pop	{r4, r5, r7, pc}

08002f14 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>:
      _M_v() noexcept
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fa51 	bl	80033c4 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE37select_on_container_copy_constructionERKS7_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8002f36:	6839      	ldr	r1, [r7, #0]
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f804 	bl	8002f46 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1ERKS6_>
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002f50:	6839      	ldr	r1, [r7, #0]
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fa43 	bl	80033de <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1ERKS8_>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>:
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EEC1IS7_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 8002fae:	6838      	ldr	r0, [r7, #0]
 8002fb0:	f7ff ffed 	bl	8002f8e <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ffc4 	bl	8002f46 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1ERKS6_>
	{ }
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3318      	adds	r3, #24
 8002fec:	e005      	b.n	8002ffa <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 8002fee:	6839      	ldr	r1, [r7, #0]
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fa00 	bl	80033f6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_allocate_bucketsEj>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	bf00      	nop
      }
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15__fwd_value_forIRKSG_EENSt11conditionalIXsrSt19is_lvalue_referenceIT_E5valueERKS3_OS3_E4typeERS3_>:
	__fwd_value_for(value_type& __val) noexcept
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
	{ return std::move(__val); }
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fa14 	bl	8003450 <_ZSt4moveIRSt4pairIKh11GPIOPortPinEEONSt16remove_referenceIT_E4typeEOS6_>
 8003028:	4603      	mov	r3, r0
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEclIRKS5_EEPS6_OT_>:
	operator()(_Arg&& __arg) const
 8003032:	b590      	push	{r4, r7, lr}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
	{ return _M_h._M_allocate_node(std::forward<_Arg>(__arg)); }
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681c      	ldr	r4, [r3, #0]
 8003040:	6838      	ldr	r0, [r7, #0]
 8003042:	f000 fa10 	bl	8003466 <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003046:	4603      	mov	r3, r0
 8003048:	4619      	mov	r1, r3
 800304a:	4620      	mov	r0, r4
 800304c:	f000 fa23 	bl	8003496 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE16_M_allocate_nodeIJRKS5_EEEPS6_DpOT_>
 8003050:	4603      	mov	r3, r0
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bd90      	pop	{r4, r7, pc}

0800305a <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_copy_codeERNS_21_Hash_node_code_cacheILb0EEERKSC_>:
      _M_copy_code(_Hash_node_code_cache<false>&,
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
      { }
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEPNS5_10_Hash_nodeIS3_Lb0EEE>:
      _M_update_bbegin(__node_ptr __n)
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
	_M_before_begin._M_nxt = __n;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	609a      	str	r2, [r3, #8]
	_M_update_bbegin();
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fa3a 	bl	80034fc <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEv>
      }
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>:
      _M_bucket_index(const __node_value_type& __n) const noexcept
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	461a      	mov	r2, r3
 80030b8:	6839      	ldr	r1, [r7, #0]
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fa42 	bl	8003544 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb0EEEj>
 80030c0:	4603      	mov	r3, r0
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_deallocate_nodesEPS6_>:
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
    {
      while (__n)
 80030d4:	e009      	b.n	80030ea <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_deallocate_nodesEPS6_+0x20>
	{
	  __node_ptr __tmp = __n;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 80030da:	6838      	ldr	r0, [r7, #0]
 80030dc:	f7ff ffd8 	bl	8003090 <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 80030e0:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 80030e2:	68f9      	ldr	r1, [r7, #12]
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fa4f 	bl	8003588 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE18_M_deallocate_nodeEPS6_>
      while (__n)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f2      	bne.n	80030d6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_deallocate_nodesEPS6_+0xc>
	}
    }
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 fa58 	bl	80035be <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS5_15_Hash_node_baseE>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 fa68 	bl	80035ee <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 800311e:	e000      	b.n	8003122 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj+0x28>
	  return;
 8003120:	bf00      	nop
      }
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 fa7f 	bl	8003634 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fa87 	bl	800364c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_Deque_impl_dataC1Ev>
	{ }
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fa94 	bl	800367e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b089      	sub	sp, #36	; 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 800316a:	2018      	movs	r0, #24
 800316c:	f7fd fedc 	bl	8000f28 <_ZSt16__deque_buf_sizej>
 8003170:	4602      	mov	r2, r0
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	fbb3 f3f2 	udiv	r3, r3, r2
 8003178:	3301      	adds	r3, #1
 800317a:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800317c:	2308      	movs	r3, #8
 800317e:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	3302      	adds	r3, #2
 8003184:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003186:	f107 0210 	add.w	r2, r7, #16
 800318a:	f107 030c 	add.w	r3, r7, #12
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f7fe f9f7 	bl	8001584 <_ZSt3maxIjERKT_S2_S2_>
 8003196:	4603      	mov	r3, r0
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7fe fa01 	bl	80015ac <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_allocate_mapEj>
 80031aa:	4602      	mov	r2, r0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6859      	ldr	r1, [r3, #4]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	1acb      	subs	r3, r1, r3
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80031c0:	4413      	add	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4413      	add	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	69b9      	ldr	r1, [r7, #24]
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fa5e 	bl	8003694 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3308      	adds	r3, #8
 80031dc:	69b9      	ldr	r1, [r7, #24]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fe fa01 	bl	80015e6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f103 0218 	add.w	r2, r3, #24
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	3b04      	subs	r3, #4
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f7fe f9f8 	bl	80015e6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8003202:	2018      	movs	r0, #24
 8003204:	f7fd fe90 	bl	8000f28 <_ZSt16__deque_buf_sizej>
 8003208:	4602      	mov	r2, r0
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003210:	fb01 f202 	mul.w	r2, r1, r2
 8003214:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8003216:	4613      	mov	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4413      	add	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	619a      	str	r2, [r3, #24]
    }
 8003224:	bf00      	nop
 8003226:	3724      	adds	r7, #36	; 0x24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd90      	pop	{r4, r7, pc}

0800322c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_>:
    _Deque_base<_Tp, _Alloc>::
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e008      	b.n	8003250 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_+0x24>
	_M_deallocate_node(*__n);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4619      	mov	r1, r3
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7fe f9ea 	bl	800161e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE18_M_deallocate_nodeEPS5_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	3304      	adds	r3, #4
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	d3f2      	bcc.n	800323e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_+0x12>
    }
 8003258:	bf00      	nop
 800325a:	bf00      	nop
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_>:
     deque<_Tp, _Alloc>::
 8003262:	b5b0      	push	{r4, r5, r7, lr}
 8003264:	b086      	sub	sp, #24
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
       for (_Map_pointer __node = __first._M_node + 1;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	3304      	adds	r3, #4
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e018      	b.n	80032aa <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x48>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	681d      	ldr	r5, [r3, #0]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	681c      	ldr	r4, [r3, #0]
 8003280:	f000 fa23 	bl	80036ca <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_buffer_sizeEv>
 8003284:	4602      	mov	r2, r0
 8003286:	4613      	mov	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4413      	add	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe f824 	bl	80012e0 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8003298:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 800329a:	461a      	mov	r2, r3
 800329c:	4621      	mov	r1, r4
 800329e:	4628      	mov	r0, r5
 80032a0:	f000 fa1b 	bl	80036da <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	3304      	adds	r3, #4
 80032a8:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d3e1      	bcc.n	8003278 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x16>
       if (__first._M_node != __last._M_node)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d01c      	beq.n	80032fa <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x98>
	   std::_Destroy(__first._M_cur, __first._M_last,
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	681c      	ldr	r4, [r3, #0]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe f808 	bl	80012e0 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80032d0:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 80032d2:	461a      	mov	r2, r3
 80032d4:	4629      	mov	r1, r5
 80032d6:	4620      	mov	r0, r4
 80032d8:	f000 f9ff 	bl	80036da <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685c      	ldr	r4, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd fffa 	bl	80012e0 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80032ec:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 80032ee:	461a      	mov	r2, r3
 80032f0:	4629      	mov	r1, r5
 80032f2:	4620      	mov	r0, r4
 80032f4:	f000 f9f1 	bl	80036da <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
     }
 80032f8:	e00d      	b.n	8003316 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	681c      	ldr	r4, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd ffeb 	bl	80012e0 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800330a:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 800330c:	461a      	mov	r2, r3
 800330e:	4629      	mov	r1, r5
 8003310:	4620      	mov	r0, r4
 8003312:	f000 f9e2 	bl	80036da <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
     }
 8003316:	bf00      	nop
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}

0800331e <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8003336:	b590      	push	{r4, r7, lr}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ffed 	bl	800331e <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE5beginEv>
 8003344:	4604      	mov	r4, r0
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f9d5 	bl	80036f6 <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE4sizeEv>
 800334c:	4602      	mov	r2, r0
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4423      	add	r3, r4
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	bd90      	pop	{r4, r7, pc}

08003360 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS3_EET_SK_jRKSA_RKS8_RKS4_St17integral_constantIbLb1EE>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
 800336c:	603b      	str	r3, [r7, #0]
      : _Hashtable(__bkt_count_hint, __h, __eq, __a)
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	6839      	ldr	r1, [r7, #0]
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f9c8 	bl	800370e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSA_RKS8_RKS4_>
	for (; __f != __l; ++__f)
 800337e:	e009      	b.n	8003394 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS3_EET_SK_jRKSA_RKS8_RKS4_St17integral_constantIbLb1EE+0x34>
	  this->insert(*__f);
 8003380:	f107 0310 	add.w	r3, r7, #16
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	68f9      	ldr	r1, [r7, #12]
 8003388:	4618      	mov	r0, r3
 800338a:	f000 f9e8 	bl	800375e <_ZNSt8__detail12_Insert_baseIhSt4pairIKh11GPIOPortPinESaIS4_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKS4_>
	for (; __f != __l; ++__f)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	330c      	adds	r3, #12
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	429a      	cmp	r2, r3
 800339a:	d1f1      	bne.n	8003380 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS3_EET_SK_jRKSA_RKS8_RKS4_St17integral_constantIbLb1EE+0x20>
      }
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6839      	ldr	r1, [r7, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 f9f0 	bl	800379a <_ZNSt8__detail19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>:
      _M_valptr() noexcept
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f9f2 	bl	80037b8 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE6_M_ptrEv>
 80033d4:	4603      	mov	r3, r0
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1ERKS8_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_allocate_bucketsEj>:

  template<typename _NodeAlloc>
    auto
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 80033f6:	b590      	push	{r4, r7, lr}
 80033f8:	b087      	sub	sp, #28
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
    -> __buckets_ptr
    {
      __buckets_alloc_type __alloc(_M_node_allocator());
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f9e5 	bl	80037d0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 8003406:	4602      	mov	r2, r0
 8003408:	f107 030c 	add.w	r3, r7, #12
 800340c:	4611      	mov	r1, r2
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f9ea 	bl	80037e8 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEERKSaIT_E>

      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
 8003414:	f107 030c 	add.w	r3, r7, #12
 8003418:	6839      	ldr	r1, [r7, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f9fd 	bl	800381a <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 8003420:	6178      	str	r0, [r7, #20]
      __buckets_ptr __p = std::__to_address(__ptr);
 8003422:	6978      	ldr	r0, [r7, #20]
 8003424:	f000 fa08 	bl	8003838 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 8003428:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4610      	mov	r0, r2
 8003432:	461a      	mov	r2, r3
 8003434:	2100      	movs	r1, #0
 8003436:	f009 fac5 	bl	800c9c4 <memset>
      return __p;
 800343a:	693c      	ldr	r4, [r7, #16]
    }
 800343c:	f107 030c 	add.w	r3, r7, #12
 8003440:	4618      	mov	r0, r3
 8003442:	f000 f9de 	bl	8003802 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 8003446:	4623      	mov	r3, r4
    }
 8003448:	4618      	mov	r0, r3
 800344a:	371c      	adds	r7, #28
 800344c:	46bd      	mov	sp, r7
 800344e:	bd90      	pop	{r4, r7, pc}

08003450 <_ZSt4moveIRSt4pairIKh11GPIOPortPinEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <_ZNSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEC1Ev>:
    struct _Hash_node
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe fe50 	bl	800212c <_ZNSt8__detail15_Hash_node_baseC1Ev>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE16_M_allocate_nodeIJRKS5_EEEPS6_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8003496:	b5b0      	push	{r4, r5, r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	6039      	str	r1, [r7, #0]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f995 	bl	80037d0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2101      	movs	r1, #1
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 f9cf 	bl	800384e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE8allocateERS7_j>
 80034b0:	60f8      	str	r0, [r7, #12]
	__node_ptr __n = std::__to_address(__nptr);
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f9da 	bl	800386c <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_S8_>
 80034b8:	60b8      	str	r0, [r7, #8]
	    ::new ((void*)__n) __node_type;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4619      	mov	r1, r3
 80034be:	2010      	movs	r0, #16
 80034c0:	f7fd fd26 	bl	8000f10 <_ZnwjPv>
 80034c4:	4603      	mov	r3, r0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff ffd8 	bl	800347c <_ZNSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f97f 	bl	80037d0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 80034d2:	4604      	mov	r4, r0
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff73 	bl	80033c4 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>
 80034de:	4605      	mov	r5, r0
 80034e0:	6838      	ldr	r0, [r7, #0]
 80034e2:	f7ff ffc0 	bl	8003466 <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 80034e6:	4603      	mov	r3, r0
 80034e8:	461a      	mov	r2, r3
 80034ea:	4629      	mov	r1, r5
 80034ec:	4620      	mov	r0, r4
 80034ee:	f000 f9c8 	bl	8003882 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>
	    return __n;
 80034f2:	68bb      	ldr	r3, [r7, #8]
      }
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bdb0      	pop	{r4, r5, r7, pc}

080034fc <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEv>:
      _M_update_bbegin()
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	if (_M_begin())
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff fd7c 	bl	8003002 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf14      	ite	ne
 8003510:	2301      	movne	r3, #1
 8003512:	2300      	moveq	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d010      	beq.n	800353c <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEv+0x40>
	  _M_buckets[_M_bucket_index(*_M_begin())] = &_M_before_begin;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681c      	ldr	r4, [r3, #0]
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fd6f 	bl	8003002 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8003524:	4603      	mov	r3, r0
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff fdbc 	bl	80030a8 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>
 8003530:	4603      	mov	r3, r0
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4423      	add	r3, r4
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	3208      	adds	r2, #8
 800353a:	601a      	str	r2, [r3, #0]
      }
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	bd90      	pop	{r4, r7, pc}

08003544 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb0EEEj>:
      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4618      	mov	r0, r3
 8003554:	f000 f9cb 	bl	80038ee <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>
 8003558:	4602      	mov	r2, r0
 800355a:	f107 0314 	add.w	r3, r7, #20
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f000 f9d0 	bl	8003906 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKh11GPIOPortPinEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>
 8003566:	4603      	mov	r3, r0
 8003568:	4619      	mov	r1, r3
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f9ab 	bl	80038c6 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 8003570:	4601      	mov	r1, r0
 8003572:	f107 0310 	add.w	r3, r7, #16
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	4618      	mov	r0, r3
 800357a:	f7fe fde5 	bl	8002148 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 800357e:	4603      	mov	r3, r0
      }
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE18_M_deallocate_nodeEPS6_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f91c 	bl	80037d0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 8003598:	4604      	mov	r4, r0
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	3304      	adds	r3, #4
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff ff10 	bl	80033c4 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>
 80035a4:	4603      	mov	r3, r0
 80035a6:	4619      	mov	r1, r3
 80035a8:	4620      	mov	r0, r4
 80035aa:	f000 f9bd 	bl	8003928 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE7destroyIS5_EEvRS7_PT_>
      _M_deallocate_node_ptr(__n);
 80035ae:	6839      	ldr	r1, [r7, #0]
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f9c6 	bl	8003942 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE22_M_deallocate_node_ptrEPS6_>
    }
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd90      	pop	{r4, r7, pc}

080035be <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS5_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3318      	adds	r3, #24
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	bf0c      	ite	eq
 80035d2:	2301      	moveq	r3, #1
 80035d4:	2300      	movne	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	bf14      	ite	ne
 80035dc:	2301      	movne	r3, #1
 80035de:	2300      	moveq	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b086      	sub	sp, #24
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
    _M_deallocate_buckets(__buckets_ptr __bkts,
			  std::size_t __bkt_count)
    {
      typedef typename __buckets_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 80035fa:	68b8      	ldr	r0, [r7, #8]
 80035fc:	f000 f9b7 	bl	800396e <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 8003600:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f8e4 	bl	80037d0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 8003608:	4602      	mov	r2, r0
 800360a:	f107 0310 	add.w	r3, r7, #16
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f000 f8e9 	bl	80037e8 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 8003616:	f107 0310 	add.w	r3, r7, #16
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6979      	ldr	r1, [r7, #20]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 f9b1 	bl	8003986 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 8003624:	f107 0310 	add.w	r3, r7, #16
 8003628:	4618      	mov	r0, r3
 800362a:	f000 f8ea 	bl	8003802 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f9b1 	bl	80039a4 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	605a      	str	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3308      	adds	r3, #8
 8003664:	4618      	mov	r0, r3
 8003666:	f000 f9a8 	bl	80039ba <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3318      	adds	r3, #24
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f9a3 	bl	80039ba <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>
	{ }
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_>:
    _Deque_base<_Tp, _Alloc>::
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	e008      	b.n	80036b8 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_+0x24>
	    *__cur = this->_M_allocate_node();
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f7fe f875 	bl	8001796 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_allocate_nodeEv>
 80036ac:	4602      	mov	r2, r0
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	3304      	adds	r3, #4
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d3f2      	bcc.n	80036a6 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_+0x12>
    }
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80036ca:	b580      	push	{r7, lr}
 80036cc:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80036ce:	2018      	movs	r0, #24
 80036d0:	f7fd fc2a 	bl	8000f28 <_ZSt16__deque_buf_sizej>
 80036d4:	4603      	mov	r3, r0
 80036d6:	4618      	mov	r0, r3
 80036d8:	bd80      	pop	{r7, pc}

080036da <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 f97d 	bl	80039e8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE4sizeEv>:
      size() const noexcept { return _M_len; }
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSA_RKS8_RKS4_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	603b      	str	r3, [r7, #0]
    : _Hashtable(__h, __eq, __a)
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f96d 	bl	8003a02 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSA_RKS8_RKS4_>
      auto __bkt_count = _M_rehash_policy._M_next_bkt(__bkt_count_hint);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3310      	adds	r3, #16
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	4618      	mov	r0, r3
 8003730:	f007 ff02 	bl	800b538 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8003734:	6178      	str	r0, [r7, #20]
      if (__bkt_count > _M_bucket_count)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	429a      	cmp	r2, r3
 800373e:	d909      	bls.n	8003754 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSA_RKS8_RKS4_+0x46>
	  _M_buckets = _M_allocate_buckets(__bkt_count);
 8003740:	6979      	ldr	r1, [r7, #20]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff fc40 	bl	8002fc8 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 8003748:	4602      	mov	r2, r0
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	601a      	str	r2, [r3, #0]
	  _M_bucket_count = __bkt_count;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	605a      	str	r2, [r3, #4]
    }
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <_ZNSt8__detail12_Insert_baseIhSt4pairIKh11GPIOPortPinESaIS4_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKS4_>:
      insert(const value_type& __v)
 800375e:	b590      	push	{r4, r7, lr}
 8003760:	b089      	sub	sp, #36	; 0x24
 8003762:	af02      	add	r7, sp, #8
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
	__hashtable& __h = _M_conjure_hashtable();
 800376a:	68b8      	ldr	r0, [r7, #8]
 800376c:	f000 f989 	bl	8003a82 <_ZNSt8__detail12_Insert_baseIhSt4pairIKh11GPIOPortPinESaIS4_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>
 8003770:	6178      	str	r0, [r7, #20]
	__node_gen_type __node_gen(__h);
 8003772:	f107 0310 	add.w	r3, r7, #16
 8003776:	6979      	ldr	r1, [r7, #20]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fa67 	bl	8002c4c <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1ERNS_16_Hashtable_allocIS7_EE>
	return __h._M_insert(__v, __node_gen, __unique_keys{});
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f107 0310 	add.w	r3, r7, #16
 8003784:	f88d 4000 	strb.w	r4, [sp]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6979      	ldr	r1, [r7, #20]
 800378c:	f000 f984 	bl	8003a98 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS3_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEES0_INS5_14_Node_iteratorIS3_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>
 8003790:	bf00      	nop
      }
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	bd90      	pop	{r4, r7, pc}

0800379a <_ZNSt8__detail19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f9cc 	bl	8003b5e <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE7_M_addrEv>
 80037c6:	4603      	mov	r3, r0
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f9cb 	bl	8003b74 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EE6_M_getEv>
 80037de:	4603      	mov	r3, r0
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f9c9 	bl	8003b8a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f9c8 	bl	8003ba0 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003824:	2200      	movs	r2, #0
 8003826:	6839      	ldr	r1, [r7, #0]
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f9d0 	bl	8003bce <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 800382e:	4603      	mov	r3, r0
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 8003840:	687b      	ldr	r3, [r7, #4]
    }
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003858:	2200      	movs	r2, #0
 800385a:	6839      	ldr	r1, [r7, #0]
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f9eb 	bl	8003c38 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE8allocateEjPKv>
 8003862:	4603      	mov	r3, r0
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_S8_>:
    __to_address(_Tp* __ptr) noexcept
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
      return __ptr;
 8003874:	687b      	ldr	r3, [r7, #4]
    }
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003882:	b580      	push	{r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff fde9 	bl	8003466 <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003894:	4603      	mov	r3, r0
 8003896:	461a      	mov	r2, r3
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f9f5 	bl	8003c8a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>
	}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f9fe 	bl	8003cba <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE10deallocateEPS7_j>
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>:
      _M_hash_code(const _Key& __k) const
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]
	return _M_hash()(__k);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fa02 	bl	8003cda <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 80038d6:	4602      	mov	r2, r0
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f7fe fc17 	bl	8002112 <_ZNKSt4hashIhEclEh>
 80038e4:	4603      	mov	r3, r0
      }
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>:
      _M_v() const noexcept
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f9fb 	bl	8003cf2 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>
 80038fc:	4603      	mov	r3, r0
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKh11GPIOPortPinEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>:
      operator()(_Tp&& __x) const noexcept
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 8003910:	6838      	ldr	r0, [r7, #0]
 8003912:	f7ff fda8 	bl	8003466 <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003916:	4603      	mov	r3, r0
 8003918:	4618      	mov	r0, r3
 800391a:	f000 f9f7 	bl	8003d0c <_ZSt3getILj0EKh11GPIOPortPinERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS6_>
 800391e:	4603      	mov	r3, r0
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8003932:	6839      	ldr	r1, [r7, #0]
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f9f5 	bl	8003d24 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE7destroyIS6_EEvPT_>
	}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE22_M_deallocate_node_ptrEPS6_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 800394c:	6838      	ldr	r0, [r7, #0]
 800394e:	f000 f9f4 	bl	8003d3a <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE10pointer_toERS6_>
 8003952:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ff3b 	bl	80037d0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 800395a:	4603      	mov	r3, r0
 800395c:	2201      	movs	r2, #1
 800395e:	68f9      	ldr	r1, [r7, #12]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ffa1 	bl	80038a8 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE10deallocateERS7_PS6_j>
    }
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f9eb 	bl	8003d52 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 800397c:	4603      	mov	r3, r0
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f9e7 	bl	8003d6a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80039f2:	6839      	ldr	r1, [r7, #0]
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f9c8 	bl	8003d8a <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSA_RKS8_RKS4_>:
      _Hashtable(const _Hash& __h, const _Equal& __eq,
 8003a02:	b590      	push	{r4, r7, lr}
 8003a04:	b087      	sub	sp, #28
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	603b      	str	r3, [r7, #0]
	__enable_default_ctor(_Enable_default_constructor_tag{})
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f9de 	bl	8003dd6 <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKS9_RKS7_>
	__hashtable_alloc(__node_alloc_type(__a)),
 8003a1a:	f107 0314 	add.w	r3, r7, #20
 8003a1e:	6839      	ldr	r1, [r7, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 f9cb 	bl	8003dbc <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1IS4_EERKSaIT_E>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 8003a26:	f107 0314 	add.w	r3, r7, #20
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff f8fb 	bl	8002c28 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1IS7_EEOT_>
	__hashtable_alloc(__node_alloc_type(__a)),
 8003a32:	f107 0314 	add.w	r3, r7, #20
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff f8ea 	bl	8002c10 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f9dc 	bl	8003dfc <_ZNSt27_Enable_default_constructorILb1ENSt8__detail15_Hash_node_baseEEC1ESt31_Enable_default_constructor_tag>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f103 0218 	add.w	r2, r3, #24
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2201      	movs	r2, #1
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	3308      	adds	r3, #8
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fe fb67 	bl	800212c <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	60da      	str	r2, [r3, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3310      	adds	r3, #16
 8003a68:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe fb7f 	bl	8002170 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	619a      	str	r2, [r3, #24]
      { }
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd90      	pop	{r4, r7, pc}

08003a82 <_ZNSt8__detail12_Insert_baseIhSt4pairIKh11GPIOPortPinESaIS4_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>:
      _M_conjure_hashtable()
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
      { return *(static_cast<__hashtable*>(this)); }
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS3_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEES0_INS5_14_Node_iteratorIS3_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b090      	sub	sp, #64	; 0x40
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
	const key_type& __k = _ExtractKey{}(__v);
 8003aa6:	f107 031c 	add.w	r3, r7, #28
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ff2a 	bl	8003906 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKh11GPIOPortPinEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>
 8003ab2:	6378      	str	r0, [r7, #52]	; 0x34
	__hash_code __code = this->_M_hash_code(__k);
 8003ab4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003ab6:	68b8      	ldr	r0, [r7, #8]
 8003ab8:	f7ff ff05 	bl	80038c6 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 8003abc:	6338      	str	r0, [r7, #48]	; 0x30
	size_type __bkt = _M_bucket_index(__code);
 8003abe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ac0:	68b8      	ldr	r0, [r7, #8]
 8003ac2:	f000 f9a7 	bl	8003e14 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8003ac6:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (__node_ptr __node = _M_find_node(__bkt, __k, __code))
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003acc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ace:	68b8      	ldr	r0, [r7, #8]
 8003ad0:	f000 f9b1 	bl	8003e36 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>
 8003ad4:	62b8      	str	r0, [r7, #40]	; 0x28
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d011      	beq.n	8003b00 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS3_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEES0_INS5_14_Node_iteratorIS3_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE+0x68>
	  return { iterator(__node), false };
 8003adc:	f107 0320 	add.w	r3, r7, #32
 8003ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff fc5f 	bl	80033a6 <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003aee:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8003af2:	f107 0320 	add.w	r3, r7, #32
 8003af6:	4619      	mov	r1, r3
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f9b5 	bl	8003e68 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKh11GPIOPortPinELb0ELb0EEEbEC1IS5_bLb1EEEOT_OT0_>
      }
 8003afe:	e02a      	b.n	8003b56 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS3_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEES0_INS5_14_Node_iteratorIS3_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE+0xbe>
	_Scoped_node __node{ __node_gen(std::forward<_Arg>(__v)), this };
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff fcb0 	bl	8003466 <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003b06:	4603      	mov	r3, r0
 8003b08:	4619      	mov	r1, r3
 8003b0a:	6838      	ldr	r0, [r7, #0]
 8003b0c:	f7ff fa91 	bl	8003032 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEclIRKS5_EEPS6_OT_>
 8003b10:	4601      	mov	r1, r0
 8003b12:	f107 0314 	add.w	r3, r7, #20
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 f9be 	bl	8003e9a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNS5_10_Hash_nodeIS3_Lb0EEEPNS5_16_Hashtable_allocISaISJ_EEE>
	  = _M_insert_unique_node(__bkt, __code, __node._M_node);
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2201      	movs	r2, #1
 8003b22:	9200      	str	r2, [sp, #0]
 8003b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b28:	68b8      	ldr	r0, [r7, #8]
 8003b2a:	f000 f9de 	bl	8003eea <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS5_10_Hash_nodeIS3_Lb0EEEj>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	613b      	str	r3, [r7, #16]
	__node._M_node = nullptr;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61bb      	str	r3, [r7, #24]
	return { __pos, true };
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b3c:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8003b40:	f107 0310 	add.w	r3, r7, #16
 8003b44:	4619      	mov	r1, r3
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 fa18 	bl	8003f7c <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKh11GPIOPortPinELb0ELb0EEEbEC1IRS5_bLb1EEEOT_OT0_>
      }
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 f9b5 	bl	8003ec0 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	3738      	adds	r7, #56	; 0x38
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE7_M_addrEv>:
      _M_addr() noexcept
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8003b66:	687b      	ldr	r3, [r7, #4]
      }
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4618      	mov	r0, r3
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003bbe:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f7ff ffeb 	bl	8003bb6 <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 8003be0:	4602      	mov	r2, r0
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	4293      	cmp	r3, r2
 8003be6:	bf8c      	ite	hi
 8003be8:	2301      	movhi	r3, #1
 8003bea:	2300      	movls	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	bf14      	ite	ne
 8003bf2:	2301      	movne	r3, #1
 8003bf4:	2300      	moveq	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d007      	beq.n	8003c0c <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c02:	d301      	bcc.n	8003c08 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003c04:	f007 fc8f 	bl	800b526 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8003c08:	f007 fc8a 	bl	800b520 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f007 fc6f 	bl	800b4f4 <_Znwj>
 8003c16:	4603      	mov	r3, r0
      }
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003c28:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f7ff ffeb 	bl	8003c20 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE11_M_max_sizeEv>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	bf8c      	ite	hi
 8003c52:	2301      	movhi	r3, #1
 8003c54:	2300      	movls	r3, #0
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf14      	ite	ne
 8003c5c:	2301      	movne	r3, #1
 8003c5e:	2300      	moveq	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c6c:	d301      	bcc.n	8003c72 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003c6e:	f007 fc5a 	bl	800b526 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8003c72:	f007 fc55 	bl	800b520 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f007 fc3a 	bl	800b4f4 <_Znwj>
 8003c80:	4603      	mov	r3, r0
      }
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003c8a:	b590      	push	{r4, r7, lr}
 8003c8c:	b085      	sub	sp, #20
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff fbe5 	bl	8003466 <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	200c      	movs	r0, #12
 8003ca4:	f7fd f934 	bl	8000f10 <_ZnwjPv>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4622      	mov	r2, r4
 8003cac:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003cb2:	bf00      	nop
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd90      	pop	{r4, r7, pc}

08003cba <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	4619      	mov	r1, r3
 8003ccc:	68b8      	ldr	r0, [r7, #8]
 8003cce:	f007 fc0d 	bl	800b4ec <_ZdlPvj>
      }
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>:
      _M_hash() const { return __ebo_hash::_M_cget(); }
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f963 	bl	8003fae <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EE7_M_cgetEv>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>:
      _M_valptr() const noexcept
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f961 	bl	8003fc4 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE6_M_ptrEv>
 8003d02:	4603      	mov	r3, r0
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <_ZSt3getILj0EKh11GPIOPortPinERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS6_>:
    get(pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(const pair<_Tp1, _Tp2>& __in) noexcept
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__const_get(__in); }
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f961 	bl	8003fdc <_ZNSt10__pair_getILj0EE11__const_getIKh11GPIOPortPinEERKT_RKSt4pairIS4_T0_E>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE7destroyIS6_EEvPT_>:
	destroy(_Up* __p)
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE10pointer_toERS6_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f955 	bl	8003ff2 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_RS7_>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b082      	sub	sp, #8
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f955 	bl	800400a <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8003d60:	4603      	mov	r3, r0
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	68b8      	ldr	r0, [r7, #8]
 8003d7e:	f007 fbb5 	bl	800b4ec <_ZdlPvj>
      }
 8003d82:	bf00      	nop
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8003d94:	e009      	b.n	8003daa <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f942 	bl	8004020 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f949 	bl	8004036 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3318      	adds	r3, #24
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d1f1      	bne.n	8003d96 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xc>
	}
 8003db2:	bf00      	nop
 8003db4:	bf00      	nop
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1IS4_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f940 	bl	800404c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1Ev>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKS9_RKS7_>:
      _Hashtable_base(const _Hash& __hash, const _Equal& __eq)
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
      : __hash_code_base(__hash), _EqualEBO(__eq)
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f93c 	bl	8004062 <_ZNSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKS7_>
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f946 	bl	800407e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EEC1IRKS2_EEOT_>
      { }
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <_ZNSt27_Enable_default_constructorILb1ENSt8__detail15_Hash_node_baseEEC1ESt31_Enable_default_constructor_tag>:
    _Enable_default_constructor&
    operator=(_Enable_default_constructor&&) noexcept = default;

    // Can be used in other ctors.
    constexpr explicit
    _Enable_default_constructor(_Enable_default_constructor_tag) { }
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	7039      	strb	r1, [r7, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>:
      _M_bucket_index(__hash_code __c) const
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	461a      	mov	r2, r3
 8003e24:	6839      	ldr	r1, [r7, #0]
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f936 	bl	8004098 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b086      	sub	sp, #24
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	607a      	str	r2, [r7, #4]
 8003e42:	603b      	str	r3, [r7, #0]
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f936 	bl	80040bc <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j>
 8003e50:	6178      	str	r0, [r7, #20]
	if (__before_n)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j+0x28>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	e000      	b.n	8003e60 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j+0x2a>
	return nullptr;
 8003e5e:	2300      	movs	r3, #0
      }
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKh11GPIOPortPinELb0ELb0EEEbEC1IS5_bLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8003e74:	68b8      	ldr	r0, [r7, #8]
 8003e76:	f000 f966 	bl	8004146 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fe fe9f 	bl	8002bc6 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	781a      	ldrb	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	711a      	strb	r2, [r3, #4]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNS5_10_Hash_nodeIS3_Lb0EEEPNS5_16_Hashtable_allocISaISJ_EEE>:
	_Scoped_node(__node_ptr __n, __hashtable_alloc* __h)
 8003e9a:	b480      	push	{r7}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
	: _M_h(__h), _M_node(__n) { }
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4610      	mov	r0, r2
 8003edc:	f7ff fb54 	bl	8003588 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE18_M_deallocate_nodeEPS6_>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS5_10_Hash_nodeIS3_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8003eea:	b590      	push	{r4, r7, lr}
 8003eec:	b08d      	sub	sp, #52	; 0x34
 8003eee:	af02      	add	r7, sp, #8
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	607a      	str	r2, [r7, #4]
 8003ef6:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	3310      	adds	r3, #16
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fe f94a 	bl	8002196 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 8003f02:	4603      	mov	r3, r0
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	f107 031c 	add.w	r3, r7, #28
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f103 0110 	add.w	r1, r3, #16
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	68dc      	ldr	r4, [r3, #12]
 8003f1a:	f107 0014 	add.w	r0, r7, #20
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	4623      	mov	r3, r4
 8003f24:	f007 fb4c 	bl	800b5c0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 8003f28:	7d3b      	ldrb	r3, [r7, #20]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS5_10_Hash_nodeIS3_Lb0EEEj+0x5a>
	  _M_rehash(__do_rehash.second, __saved_state);
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f32:	4619      	mov	r1, r3
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f911 	bl	800415c <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__code);
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f7ff ff69 	bl	8003e14 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8003f42:	60b8      	str	r0, [r7, #8]
      this->_M_store_code(*__node, __code);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	3304      	adds	r3, #4
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f914 	bl	800417a <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f91b 	bl	8004192 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE>
      ++_M_element_count;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 8003f66:	f107 0320 	add.w	r3, r7, #32
 8003f6a:	6839      	ldr	r1, [r7, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff fa1a 	bl	80033a6 <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 8003f72:	6a3b      	ldr	r3, [r7, #32]
    }
 8003f74:	4618      	mov	r0, r3
 8003f76:	372c      	adds	r7, #44	; 0x2c
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd90      	pop	{r4, r7, pc}

08003f7c <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKh11GPIOPortPinELb0ELb0EEEbEC1IRS5_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8003f88:	68b8      	ldr	r0, [r7, #8]
 8003f8a:	f000 f949 	bl	8004220 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fe fe15 	bl	8002bc6 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	781a      	ldrb	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	711a      	strb	r2, [r3, #4]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f932 	bl	8004236 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE7_M_addrEv>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <_ZNSt10__pair_getILj0EE11__const_getIKh11GPIOPortPinEERKT_RKSt4pairIS4_T0_E>:
	__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	{ return __pair.first; }
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_RS7_>:
    addressof(_Tp& __r) noexcept
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f926 	bl	800424c <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_RS7_>
 8004000:	4603      	mov	r3, r0
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f007 fbf6 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <_ZNSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKS7_>:
      _Hash_code_base(const _Hash& __hash) : __ebo_hash(__hash) { }
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
 800406c:	6839      	ldr	r1, [r7, #0]
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f8f7 	bl	8004262 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EEC1IRKS2_EEOT_>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EEC1IRKS2_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 8004088:	6838      	ldr	r0, [r7, #0]
 800408a:	f000 f8f7 	bl	800427c <_ZSt7forwardIRKSt8equal_toIhEEOT_RNSt16remove_referenceIS4_E4typeE>
	{ }
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>:
      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__c, __bkt_count); }
 80040a4:	f107 0314 	add.w	r3, r7, #20
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fe f84b 	bl	8002148 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 80040b2:	4603      	mov	r3, r0
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	603b      	str	r3, [r7, #0]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x26>
	return nullptr;
 80040de:	2300      	movs	r3, #0
 80040e0:	e02d      	b.n	800413e <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x82>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	3304      	adds	r3, #4
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f8ce 	bl	8004292 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS4_Lb0EEE>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x44>
	    return __prev_p;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	e01e      	b.n	800413e <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x82>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00c      	beq.n	8004122 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x66>
 8004108:	6938      	ldr	r0, [r7, #16]
 800410a:	f7fe ffc1 	bl	8003090 <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 800410e:	4603      	mov	r3, r0
 8004110:	3304      	adds	r3, #4
 8004112:	4619      	mov	r1, r3
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f7fe ffc7 	bl	80030a8 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>
 800411a:	4602      	mov	r2, r0
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4293      	cmp	r3, r2
 8004120:	d001      	beq.n	8004126 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x6a>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x6c>
 8004126:	2300      	movs	r3, #0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d106      	bne.n	800413a <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x7e>
	  __prev_p = __p;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 8004130:	6938      	ldr	r0, [r7, #16]
 8004132:	f7fe ffad 	bl	8003090 <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8004136:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 8004138:	e7d6      	b.n	80040e8 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x2c>
	    break;
 800413a:	bf00      	nop
      return nullptr;
 800413c:	2300      	movs	r3, #0
    }
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys{});
 8004168:	461a      	mov	r2, r3
 800416a:	68b9      	ldr	r1, [r7, #8]
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 f8bd 	bl	80042ec <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>:
      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
      { }
 8004186:	bf00      	nop
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8004192:	b590      	push	{r4, r7, lr}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d011      	beq.n	80041d2 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	601a      	str	r2, [r3, #0]
    }
 80041d0:	e022      	b.n	8004218 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE+0x86>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00f      	beq.n	8004208 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE+0x76>
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681c      	ldr	r4, [r3, #0]
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7fe ff4f 	bl	8003090 <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 80041f2:	4603      	mov	r3, r0
 80041f4:	3304      	adds	r3, #4
 80041f6:	4619      	mov	r1, r3
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7fe ff55 	bl	80030a8 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>
 80041fe:	4603      	mov	r3, r0
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4423      	add	r3, r4
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	3208      	adds	r2, #8
 8004216:	601a      	str	r2, [r3, #0]
    }
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	bd90      	pop	{r4, r7, pc}

08004220 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4618      	mov	r0, r3
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE7_M_addrEv>:
      _M_addr() const noexcept
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 800423e:	687b      	ldr	r3, [r7, #4]
      }
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4618      	mov	r0, r3
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EEC1IRKS2_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 800426c:	6838      	ldr	r0, [r7, #0]
 800426e:	f000 f8a1 	bl	80043b4 <_ZSt7forwardIRKSt4hashIhEEOT_RNSt16remove_referenceIS4_E4typeE>
	{ }
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <_ZSt7forwardIRKSt8equal_toIhEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS4_Lb0EEE>:
      _M_equals(const _Key& __k, __hash_code __c,
 8004292:	b590      	push	{r4, r7, lr}
 8004294:	b087      	sub	sp, #28
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
 800429e:	603b      	str	r3, [r7, #0]
	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 80042a0:	6839      	ldr	r1, [r7, #0]
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f891 	bl	80043ca <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d019      	beq.n	80042e2 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS4_Lb0EEE+0x50>
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f897 	bl	80043e2 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 80042b4:	4604      	mov	r4, r0
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff fb18 	bl	80038ee <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>
 80042be:	4602      	mov	r2, r0
 80042c0:	f107 0314 	add.w	r3, r7, #20
 80042c4:	4611      	mov	r1, r2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff fb1d 	bl	8003906 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKh11GPIOPortPinEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>
 80042cc:	4603      	mov	r3, r0
 80042ce:	461a      	mov	r2, r3
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4620      	mov	r0, r4
 80042d4:	f000 f891 	bl	80043fa <_ZNKSt8equal_toIhEclERKhS2_>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS4_Lb0EEE+0x50>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS4_Lb0EEE+0x52>
 80042e2:	2300      	movs	r3, #0
      }
 80042e4:	4618      	mov	r0, r3
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd90      	pop	{r4, r7, pc}

080042ec <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08a      	sub	sp, #40	; 0x28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	713a      	strb	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f7fe fe64 	bl	8002fc8 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 8004300:	61f8      	str	r0, [r7, #28]
      __node_ptr __p = _M_begin();
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f7fe fe7d 	bl	8003002 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8004308:	6278      	str	r0, [r7, #36]	; 0x24
      _M_before_begin._M_nxt = nullptr;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	623b      	str	r3, [r7, #32]
      while (__p)
 8004314:	e03e      	b.n	8004394 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa8>
	{
	  __node_ptr __next = __p->_M_next();
 8004316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004318:	f7fe feba 	bl	8003090 <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 800431c:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	3304      	adds	r3, #4
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	4619      	mov	r1, r3
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7ff f90c 	bl	8003544 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb0EEEj>
 800432c:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d11a      	bne.n	8004372 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004348:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	4413      	add	r3, r2
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	3208      	adds	r2, #8
 8004356:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	4413      	add	r3, r2
 8004368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436a:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	623b      	str	r3, [r7, #32]
 8004370:	e00e      	b.n	8004390 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	4413      	add	r3, r2
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438e:	601a      	str	r2, [r3, #0]
	    }

	  __p = __next;
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
      while (__p)
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1bd      	bne.n	8004316 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x2a>
	}

      _M_deallocate_buckets();
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f7fe fd03 	bl	8002da6 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	601a      	str	r2, [r3, #0]
    }
 80043ac:	bf00      	nop
 80043ae:	3728      	adds	r7, #40	; 0x28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <_ZSt7forwardIRKSt4hashIhEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>:
      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	6039      	str	r1, [r7, #0]
      { return true; }
 80043d4:	2301      	movs	r3, #1
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
      _M_eq() const { return _EqualEBO::_M_cget(); }
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f81a 	bl	8004424 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EE7_M_cgetEv>
 80043f0:	4603      	mov	r3, r0
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <_ZNKSt8equal_toIhEclERKhS2_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 80043fa:	b480      	push	{r7}
 80043fc:	b085      	sub	sp, #20
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	781a      	ldrb	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	bf0c      	ite	eq
 8004412:	2301      	moveq	r3, #1
 8004414:	2300      	movne	r3, #0
 8004416:	b2db      	uxtb	r3, r3
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4618      	mov	r0, r3
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <_ZN5ESP32D1Ev>:
class ESP32 {
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	331c      	adds	r3, #28
 8004446:	4618      	mov	r0, r3
 8004448:	f7fd fef6 	bl	8002238 <_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEED1Ev>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3304      	adds	r3, #4
 8004450:	4618      	mov	r0, r3
 8004452:	f007 f9ed 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <_ZN8SelectorD1Ev>:
class Selector {
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4618      	mov	r0, r3
 800446c:	f7fd feaf 	bl	80021ce <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEED1Ev>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <_ZN6LoggerD1Ev>:
class Logger {
 800447a:	b580      	push	{r7, lr}
 800447c:	b082      	sub	sp, #8
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3308      	adds	r3, #8
 8004486:	4618      	mov	r0, r3
 8004488:	f007 f9d2 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004498:	b5b0      	push	{r4, r5, r7, lr}
 800449a:	b0a4      	sub	sp, #144	; 0x90
 800449c:	af04      	add	r7, sp, #16
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	f040 8084 	bne.w	80045b2 <_Z41__static_initialization_and_destruction_0ii+0x11a>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d17e      	bne.n	80045b2 <_Z41__static_initialization_and_destruction_0ii+0x11a>
const std::string ESP_ECHO_OFF_OK = "ATE0\r\n\r\nOK\r\n";
 80044b4:	f107 0308 	add.w	r3, r7, #8
 80044b8:	4618      	mov	r0, r3
 80044ba:	f007 f82e 	bl	800b51a <_ZNSaIcEC1Ev>
 80044be:	f107 0308 	add.w	r3, r7, #8
 80044c2:	461a      	mov	r2, r3
 80044c4:	494a      	ldr	r1, [pc, #296]	; (80045f0 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80044c6:	484b      	ldr	r0, [pc, #300]	; (80045f4 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80044c8:	f007 fb96 	bl	800bbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80044cc:	f107 0308 	add.w	r3, r7, #8
 80044d0:	4618      	mov	r0, r3
 80044d2:	f007 f824 	bl	800b51e <_ZNSaIcED1Ev>
const std::string ESP_OK = "\r\nOK\r\n";
 80044d6:	f107 030c 	add.w	r3, r7, #12
 80044da:	4618      	mov	r0, r3
 80044dc:	f007 f81d 	bl	800b51a <_ZNSaIcEC1Ev>
 80044e0:	f107 030c 	add.w	r3, r7, #12
 80044e4:	461a      	mov	r2, r3
 80044e6:	4944      	ldr	r1, [pc, #272]	; (80045f8 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80044e8:	4844      	ldr	r0, [pc, #272]	; (80045fc <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80044ea:	f007 fb85 	bl	800bbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80044ee:	f107 030c 	add.w	r3, r7, #12
 80044f2:	4618      	mov	r0, r3
 80044f4:	f007 f813 	bl	800b51e <_ZNSaIcED1Ev>
std::unordered_map<uint8_t, GPIOPortPin> panels = {
 80044f8:	4b41      	ldr	r3, [pc, #260]	; (8004600 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80044fa:	f107 0418 	add.w	r4, r7, #24
 80044fe:	461d      	mov	r5, r3
 8004500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	6023      	str	r3, [r4, #0]
 800450c:	f107 0318 	add.w	r3, r7, #24
 8004510:	613b      	str	r3, [r7, #16]
 8004512:	2303      	movs	r3, #3
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe fb22 	bl	8002b64 <_ZNSaISt4pairIKh11GPIOPortPinEEC1Ev>
 8004520:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004524:	9302      	str	r3, [sp, #8]
 8004526:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800452a:	9301      	str	r3, [sp, #4]
 800452c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	2300      	movs	r3, #0
 8004534:	f107 0210 	add.w	r2, r7, #16
 8004538:	ca06      	ldmia	r2, {r1, r2}
 800453a:	4832      	ldr	r0, [pc, #200]	; (8004604 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800453c:	f7fe fb2a 	bl	8002b94 <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEEC1ESt16initializer_listIS7_EjRKS2_RKS4_RKS8_>
 8004540:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004544:	4618      	mov	r0, r3
 8004546:	f7fe fb19 	bl	8002b7c <_ZNSaISt4pairIKh11GPIOPortPinEED1Ev>
Logger logger(huart1, LogLevel::Debug);
 800454a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800454e:	4618      	mov	r0, r3
 8004550:	f006 ffe3 	bl	800b51a <_ZNSaIcEC1Ev>
 8004554:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004558:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800455c:	492a      	ldr	r1, [pc, #168]	; (8004608 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 800455e:	4618      	mov	r0, r3
 8004560:	f007 fb4a 	bl	800bbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004564:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004568:	2200      	movs	r2, #0
 800456a:	4928      	ldr	r1, [pc, #160]	; (800460c <_Z41__static_initialization_and_destruction_0ii+0x174>)
 800456c:	4828      	ldr	r0, [pc, #160]	; (8004610 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 800456e:	f7fd fe4a 	bl	8002206 <_ZN6LoggerC1ER20__UART_HandleTypeDef8LogLevelNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004572:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004576:	4618      	mov	r0, r3
 8004578:	f007 f95a 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800457c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004580:	4618      	mov	r0, r3
 8004582:	f006 ffcc 	bl	800b51e <_ZNSaIcED1Ev>
Selector selector(panels);
 8004586:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800458a:	491e      	ldr	r1, [pc, #120]	; (8004604 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800458c:	4618      	mov	r0, r3
 800458e:	f7fd fe0e 	bl	80021ae <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEEC1ERKS9_>
 8004592:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004596:	4619      	mov	r1, r3
 8004598:	481e      	ldr	r0, [pc, #120]	; (8004614 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 800459a:	f7fd fe25 	bl	80021e8 <_ZN8SelectorC1ESt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS1_EEE>
 800459e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fd fe13 	bl	80021ce <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEED1Ev>
ESP32 esp(huart2, esp_messages_sem);
 80045a8:	4a1b      	ldr	r2, [pc, #108]	; (8004618 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 80045aa:	491c      	ldr	r1, [pc, #112]	; (800461c <_Z41__static_initialization_and_destruction_0ii+0x184>)
 80045ac:	481c      	ldr	r0, [pc, #112]	; (8004620 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 80045ae:	f7fd fe51 	bl	8002254 <_ZN5ESP32C1ER20__UART_HandleTypeDefRPv>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d116      	bne.n	80045e6 <_Z41__static_initialization_and_destruction_0ii+0x14e>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045be:	4293      	cmp	r3, r2
 80045c0:	d111      	bne.n	80045e6 <_Z41__static_initialization_and_destruction_0ii+0x14e>
 80045c2:	4817      	ldr	r0, [pc, #92]	; (8004620 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 80045c4:	f7ff ff39 	bl	800443a <_ZN5ESP32D1Ev>
Selector selector(panels);
 80045c8:	4812      	ldr	r0, [pc, #72]	; (8004614 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 80045ca:	f7ff ff49 	bl	8004460 <_ZN8SelectorD1Ev>
Logger logger(huart1, LogLevel::Debug);
 80045ce:	4810      	ldr	r0, [pc, #64]	; (8004610 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 80045d0:	f7ff ff53 	bl	800447a <_ZN6LoggerD1Ev>
std::unordered_map<uint8_t, GPIOPortPin> panels = {
 80045d4:	480b      	ldr	r0, [pc, #44]	; (8004604 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80045d6:	f7fd fdfa 	bl	80021ce <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEED1Ev>
 80045da:	4808      	ldr	r0, [pc, #32]	; (80045fc <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80045dc:	f007 f928 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string ESP_ECHO_OFF_OK = "ATE0\r\n\r\nOK\r\n";
 80045e0:	4804      	ldr	r0, [pc, #16]	; (80045f4 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80045e2:	f007 f925 	bl	800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80045e6:	bf00      	nop
 80045e8:	3780      	adds	r7, #128	; 0x80
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bdb0      	pop	{r4, r5, r7, pc}
 80045ee:	bf00      	nop
 80045f0:	0800e81c 	.word	0x0800e81c
 80045f4:	20000224 	.word	0x20000224
 80045f8:	0800e82c 	.word	0x0800e82c
 80045fc:	2000023c 	.word	0x2000023c
 8004600:	0800e838 	.word	0x0800e838
 8004604:	20000474 	.word	0x20000474
 8004608:	0800e834 	.word	0x0800e834
 800460c:	20000344 	.word	0x20000344
 8004610:	20000490 	.word	0x20000490
 8004614:	200004b0 	.word	0x200004b0
 8004618:	20000470 	.word	0x20000470
 800461c:	20000388 	.word	0x20000388
 8004620:	200004cc 	.word	0x200004cc

08004624 <_GLOBAL__sub_I_hadc1>:
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
 8004628:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800462c:	2001      	movs	r0, #1
 800462e:	f7ff ff33 	bl	8004498 <_Z41__static_initialization_and_destruction_0ii>
 8004632:	bd80      	pop	{r7, pc}

08004634 <_GLOBAL__sub_D_hadc1>:
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
 8004638:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800463c:	2000      	movs	r0, #0
 800463e:	f7ff ff2b 	bl	8004498 <_Z41__static_initialization_and_destruction_0ii>
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800464a:	2300      	movs	r3, #0
 800464c:	607b      	str	r3, [r7, #4]
 800464e:	4b12      	ldr	r3, [pc, #72]	; (8004698 <HAL_MspInit+0x54>)
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	4a11      	ldr	r2, [pc, #68]	; (8004698 <HAL_MspInit+0x54>)
 8004654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004658:	6453      	str	r3, [r2, #68]	; 0x44
 800465a:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <HAL_MspInit+0x54>)
 800465c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004662:	607b      	str	r3, [r7, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	603b      	str	r3, [r7, #0]
 800466a:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <HAL_MspInit+0x54>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <HAL_MspInit+0x54>)
 8004670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004674:	6413      	str	r3, [r2, #64]	; 0x40
 8004676:	4b08      	ldr	r3, [pc, #32]	; (8004698 <HAL_MspInit+0x54>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004682:	2200      	movs	r2, #0
 8004684:	210f      	movs	r1, #15
 8004686:	f06f 0001 	mvn.w	r0, #1
 800468a:	f000 fe9e 	bl	80053ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40023800 	.word	0x40023800

0800469c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08a      	sub	sp, #40	; 0x28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a4:	f107 0314 	add.w	r3, r7, #20
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	605a      	str	r2, [r3, #4]
 80046ae:	609a      	str	r2, [r3, #8]
 80046b0:	60da      	str	r2, [r3, #12]
 80046b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a17      	ldr	r2, [pc, #92]	; (8004718 <HAL_ADC_MspInit+0x7c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d127      	bne.n	800470e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	4b16      	ldr	r3, [pc, #88]	; (800471c <HAL_ADC_MspInit+0x80>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	4a15      	ldr	r2, [pc, #84]	; (800471c <HAL_ADC_MspInit+0x80>)
 80046c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046cc:	6453      	str	r3, [r2, #68]	; 0x44
 80046ce:	4b13      	ldr	r3, [pc, #76]	; (800471c <HAL_ADC_MspInit+0x80>)
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	4b0f      	ldr	r3, [pc, #60]	; (800471c <HAL_ADC_MspInit+0x80>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	4a0e      	ldr	r2, [pc, #56]	; (800471c <HAL_ADC_MspInit+0x80>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ea:	4b0c      	ldr	r3, [pc, #48]	; (800471c <HAL_ADC_MspInit+0x80>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80046f6:	231f      	movs	r3, #31
 80046f8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046fa:	2303      	movs	r3, #3
 80046fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004702:	f107 0314 	add.w	r3, r7, #20
 8004706:	4619      	mov	r1, r3
 8004708:	4805      	ldr	r0, [pc, #20]	; (8004720 <HAL_ADC_MspInit+0x84>)
 800470a:	f001 fa11 	bl	8005b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800470e:	bf00      	nop
 8004710:	3728      	adds	r7, #40	; 0x28
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40012000 	.word	0x40012000
 800471c:	40023800 	.word	0x40023800
 8004720:	40020000 	.word	0x40020000

08004724 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08c      	sub	sp, #48	; 0x30
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800472c:	f107 031c 	add.w	r3, r7, #28
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	609a      	str	r2, [r3, #8]
 8004738:	60da      	str	r2, [r3, #12]
 800473a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a32      	ldr	r2, [pc, #200]	; (800480c <HAL_I2C_MspInit+0xe8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d12c      	bne.n	80047a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	4b31      	ldr	r3, [pc, #196]	; (8004810 <HAL_I2C_MspInit+0xec>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	4a30      	ldr	r2, [pc, #192]	; (8004810 <HAL_I2C_MspInit+0xec>)
 8004750:	f043 0302 	orr.w	r3, r3, #2
 8004754:	6313      	str	r3, [r2, #48]	; 0x30
 8004756:	4b2e      	ldr	r3, [pc, #184]	; (8004810 <HAL_I2C_MspInit+0xec>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004762:	23c0      	movs	r3, #192	; 0xc0
 8004764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004766:	2312      	movs	r3, #18
 8004768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800476a:	2301      	movs	r3, #1
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800476e:	2303      	movs	r3, #3
 8004770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004772:	2304      	movs	r3, #4
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004776:	f107 031c 	add.w	r3, r7, #28
 800477a:	4619      	mov	r1, r3
 800477c:	4825      	ldr	r0, [pc, #148]	; (8004814 <HAL_I2C_MspInit+0xf0>)
 800477e:	f001 f9d7 	bl	8005b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	4b22      	ldr	r3, [pc, #136]	; (8004810 <HAL_I2C_MspInit+0xec>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	4a21      	ldr	r2, [pc, #132]	; (8004810 <HAL_I2C_MspInit+0xec>)
 800478c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004790:	6413      	str	r3, [r2, #64]	; 0x40
 8004792:	4b1f      	ldr	r3, [pc, #124]	; (8004810 <HAL_I2C_MspInit+0xec>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800479e:	e031      	b.n	8004804 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1c      	ldr	r2, [pc, #112]	; (8004818 <HAL_I2C_MspInit+0xf4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d12c      	bne.n	8004804 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047aa:	2300      	movs	r3, #0
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	4b18      	ldr	r3, [pc, #96]	; (8004810 <HAL_I2C_MspInit+0xec>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	4a17      	ldr	r2, [pc, #92]	; (8004810 <HAL_I2C_MspInit+0xec>)
 80047b4:	f043 0302 	orr.w	r3, r3, #2
 80047b8:	6313      	str	r3, [r2, #48]	; 0x30
 80047ba:	4b15      	ldr	r3, [pc, #84]	; (8004810 <HAL_I2C_MspInit+0xec>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80047c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80047ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047cc:	2312      	movs	r3, #18
 80047ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047d0:	2301      	movs	r3, #1
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047d4:	2303      	movs	r3, #3
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80047d8:	2304      	movs	r3, #4
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047dc:	f107 031c 	add.w	r3, r7, #28
 80047e0:	4619      	mov	r1, r3
 80047e2:	480c      	ldr	r0, [pc, #48]	; (8004814 <HAL_I2C_MspInit+0xf0>)
 80047e4:	f001 f9a4 	bl	8005b30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80047e8:	2300      	movs	r3, #0
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	4b08      	ldr	r3, [pc, #32]	; (8004810 <HAL_I2C_MspInit+0xec>)
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	4a07      	ldr	r2, [pc, #28]	; (8004810 <HAL_I2C_MspInit+0xec>)
 80047f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047f6:	6413      	str	r3, [r2, #64]	; 0x40
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_I2C_MspInit+0xec>)
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	68fb      	ldr	r3, [r7, #12]
}
 8004804:	bf00      	nop
 8004806:	3730      	adds	r7, #48	; 0x30
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40005400 	.word	0x40005400
 8004810:	40023800 	.word	0x40023800
 8004814:	40020400 	.word	0x40020400
 8004818:	40005800 	.word	0x40005800

0800481c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08e      	sub	sp, #56	; 0x38
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	605a      	str	r2, [r3, #4]
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	60da      	str	r2, [r3, #12]
 8004832:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a67      	ldr	r2, [pc, #412]	; (80049d8 <HAL_UART_MspInit+0x1bc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d12d      	bne.n	800489a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800483e:	2300      	movs	r3, #0
 8004840:	623b      	str	r3, [r7, #32]
 8004842:	4b66      	ldr	r3, [pc, #408]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	4a65      	ldr	r2, [pc, #404]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 8004848:	f043 0310 	orr.w	r3, r3, #16
 800484c:	6453      	str	r3, [r2, #68]	; 0x44
 800484e:	4b63      	ldr	r3, [pc, #396]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 8004850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	623b      	str	r3, [r7, #32]
 8004858:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	4b5f      	ldr	r3, [pc, #380]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	4a5e      	ldr	r2, [pc, #376]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	6313      	str	r3, [r2, #48]	; 0x30
 800486a:	4b5c      	ldr	r3, [pc, #368]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004876:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487c:	2302      	movs	r3, #2
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004880:	2300      	movs	r3, #0
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004884:	2303      	movs	r3, #3
 8004886:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004888:	2307      	movs	r3, #7
 800488a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800488c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004890:	4619      	mov	r1, r3
 8004892:	4853      	ldr	r0, [pc, #332]	; (80049e0 <HAL_UART_MspInit+0x1c4>)
 8004894:	f001 f94c 	bl	8005b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004898:	e099      	b.n	80049ce <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a51      	ldr	r2, [pc, #324]	; (80049e4 <HAL_UART_MspInit+0x1c8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d162      	bne.n	800496a <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80048a4:	2300      	movs	r3, #0
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	4b4c      	ldr	r3, [pc, #304]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	4a4b      	ldr	r2, [pc, #300]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 80048ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048b2:	6413      	str	r3, [r2, #64]	; 0x40
 80048b4:	4b49      	ldr	r3, [pc, #292]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	4b45      	ldr	r3, [pc, #276]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	4a44      	ldr	r2, [pc, #272]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 80048ca:	f043 0308 	orr.w	r3, r3, #8
 80048ce:	6313      	str	r3, [r2, #48]	; 0x30
 80048d0:	4b42      	ldr	r3, [pc, #264]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80048dc:	2378      	movs	r3, #120	; 0x78
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e0:	2302      	movs	r3, #2
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e8:	2303      	movs	r3, #3
 80048ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048ec:	2307      	movs	r3, #7
 80048ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048f4:	4619      	mov	r1, r3
 80048f6:	483c      	ldr	r0, [pc, #240]	; (80049e8 <HAL_UART_MspInit+0x1cc>)
 80048f8:	f001 f91a 	bl	8005b30 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80048fc:	4b3b      	ldr	r3, [pc, #236]	; (80049ec <HAL_UART_MspInit+0x1d0>)
 80048fe:	4a3c      	ldr	r2, [pc, #240]	; (80049f0 <HAL_UART_MspInit+0x1d4>)
 8004900:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004902:	4b3a      	ldr	r3, [pc, #232]	; (80049ec <HAL_UART_MspInit+0x1d0>)
 8004904:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004908:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800490a:	4b38      	ldr	r3, [pc, #224]	; (80049ec <HAL_UART_MspInit+0x1d0>)
 800490c:	2200      	movs	r2, #0
 800490e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004910:	4b36      	ldr	r3, [pc, #216]	; (80049ec <HAL_UART_MspInit+0x1d0>)
 8004912:	2200      	movs	r2, #0
 8004914:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004916:	4b35      	ldr	r3, [pc, #212]	; (80049ec <HAL_UART_MspInit+0x1d0>)
 8004918:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800491c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800491e:	4b33      	ldr	r3, [pc, #204]	; (80049ec <HAL_UART_MspInit+0x1d0>)
 8004920:	2200      	movs	r2, #0
 8004922:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004924:	4b31      	ldr	r3, [pc, #196]	; (80049ec <HAL_UART_MspInit+0x1d0>)
 8004926:	2200      	movs	r2, #0
 8004928:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800492a:	4b30      	ldr	r3, [pc, #192]	; (80049ec <HAL_UART_MspInit+0x1d0>)
 800492c:	2200      	movs	r2, #0
 800492e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004930:	4b2e      	ldr	r3, [pc, #184]	; (80049ec <HAL_UART_MspInit+0x1d0>)
 8004932:	2200      	movs	r2, #0
 8004934:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004936:	4b2d      	ldr	r3, [pc, #180]	; (80049ec <HAL_UART_MspInit+0x1d0>)
 8004938:	2200      	movs	r2, #0
 800493a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800493c:	482b      	ldr	r0, [pc, #172]	; (80049ec <HAL_UART_MspInit+0x1d0>)
 800493e:	f000 fd7b 	bl	8005438 <HAL_DMA_Init>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_UART_MspInit+0x130>
      Error_Handler();
 8004948:	f7fe f850 	bl	80029ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a27      	ldr	r2, [pc, #156]	; (80049ec <HAL_UART_MspInit+0x1d0>)
 8004950:	639a      	str	r2, [r3, #56]	; 0x38
 8004952:	4a26      	ldr	r2, [pc, #152]	; (80049ec <HAL_UART_MspInit+0x1d0>)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004958:	2200      	movs	r2, #0
 800495a:	2105      	movs	r1, #5
 800495c:	2026      	movs	r0, #38	; 0x26
 800495e:	f000 fd34 	bl	80053ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004962:	2026      	movs	r0, #38	; 0x26
 8004964:	f000 fd4d 	bl	8005402 <HAL_NVIC_EnableIRQ>
}
 8004968:	e031      	b.n	80049ce <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a21      	ldr	r2, [pc, #132]	; (80049f4 <HAL_UART_MspInit+0x1d8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d12c      	bne.n	80049ce <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004974:	2300      	movs	r3, #0
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	4b18      	ldr	r3, [pc, #96]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	4a17      	ldr	r2, [pc, #92]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 800497e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004982:	6413      	str	r3, [r2, #64]	; 0x40
 8004984:	4b15      	ldr	r3, [pc, #84]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	4b11      	ldr	r3, [pc, #68]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	4a10      	ldr	r2, [pc, #64]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 800499a:	f043 0308 	orr.w	r3, r3, #8
 800499e:	6313      	str	r3, [r2, #48]	; 0x30
 80049a0:	4b0e      	ldr	r3, [pc, #56]	; (80049dc <HAL_UART_MspInit+0x1c0>)
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80049ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b2:	2302      	movs	r3, #2
 80049b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ba:	2303      	movs	r3, #3
 80049bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80049be:	2307      	movs	r3, #7
 80049c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049c6:	4619      	mov	r1, r3
 80049c8:	4807      	ldr	r0, [pc, #28]	; (80049e8 <HAL_UART_MspInit+0x1cc>)
 80049ca:	f001 f8b1 	bl	8005b30 <HAL_GPIO_Init>
}
 80049ce:	bf00      	nop
 80049d0:	3738      	adds	r7, #56	; 0x38
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40011000 	.word	0x40011000
 80049dc:	40023800 	.word	0x40023800
 80049e0:	40020000 	.word	0x40020000
 80049e4:	40004400 	.word	0x40004400
 80049e8:	40020c00 	.word	0x40020c00
 80049ec:	20000410 	.word	0x20000410
 80049f0:	40026088 	.word	0x40026088
 80049f4:	40004800 	.word	0x40004800

080049f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049fc:	e7fe      	b.n	80049fc <NMI_Handler+0x4>

080049fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049fe:	b480      	push	{r7}
 8004a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a02:	e7fe      	b.n	8004a02 <HardFault_Handler+0x4>

08004a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a08:	e7fe      	b.n	8004a08 <MemManage_Handler+0x4>

08004a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a0e:	e7fe      	b.n	8004a0e <BusFault_Handler+0x4>

08004a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a14:	e7fe      	b.n	8004a14 <UsageFault_Handler+0x4>

08004a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a16:	b480      	push	{r7}
 8004a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a1a:	bf00      	nop
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a28:	f000 f972 	bl	8004d10 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004a2c:	f005 fbfc 	bl	800a228 <xTaskGetSchedulerState>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d001      	beq.n	8004a3a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004a36:	f006 fadf 	bl	800aff8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a3a:	bf00      	nop
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004a44:	4802      	ldr	r0, [pc, #8]	; (8004a50 <DMA1_Stream5_IRQHandler+0x10>)
 8004a46:	f000 fe37 	bl	80056b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000410 	.word	0x20000410

08004a54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a58:	4802      	ldr	r0, [pc, #8]	; (8004a64 <USART2_IRQHandler+0x10>)
 8004a5a:	f002 f96d 	bl	8006d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a5e:	bf00      	nop
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000388 	.word	0x20000388

08004a68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
	return 1;
 8004a6c:	2301      	movs	r3, #1
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <_kill>:

int _kill(int pid, int sig)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004a82:	f007 ffff 	bl	800ca84 <__errno>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2216      	movs	r2, #22
 8004a8a:	601a      	str	r2, [r3, #0]
	return -1;
 8004a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <_exit>:

void _exit (int status)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004aa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ffe7 	bl	8004a78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004aaa:	e7fe      	b.n	8004aaa <_exit+0x12>

08004aac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	e00a      	b.n	8004ad4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004abe:	f3af 8000 	nop.w
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	60ba      	str	r2, [r7, #8]
 8004aca:	b2ca      	uxtb	r2, r1
 8004acc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	dbf0      	blt.n	8004abe <_read+0x12>
	}

return len;
 8004adc:	687b      	ldr	r3, [r7, #4]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b086      	sub	sp, #24
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004af2:	2300      	movs	r3, #0
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	e009      	b.n	8004b0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	60ba      	str	r2, [r7, #8]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	dbf1      	blt.n	8004af8 <_write+0x12>
	}
	return len;
 8004b14:	687b      	ldr	r3, [r7, #4]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <_close>:

int _close(int file)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
	return -1;
 8004b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b46:	605a      	str	r2, [r3, #4]
	return 0;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <_isatty>:

int _isatty(int file)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
	return 1;
 8004b5e:	2301      	movs	r3, #1
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
	return 0;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b90:	4a14      	ldr	r2, [pc, #80]	; (8004be4 <_sbrk+0x5c>)
 8004b92:	4b15      	ldr	r3, [pc, #84]	; (8004be8 <_sbrk+0x60>)
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b9c:	4b13      	ldr	r3, [pc, #76]	; (8004bec <_sbrk+0x64>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d102      	bne.n	8004baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ba4:	4b11      	ldr	r3, [pc, #68]	; (8004bec <_sbrk+0x64>)
 8004ba6:	4a12      	ldr	r2, [pc, #72]	; (8004bf0 <_sbrk+0x68>)
 8004ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004baa:	4b10      	ldr	r3, [pc, #64]	; (8004bec <_sbrk+0x64>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d207      	bcs.n	8004bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bb8:	f007 ff64 	bl	800ca84 <__errno>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	220c      	movs	r2, #12
 8004bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bc6:	e009      	b.n	8004bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bc8:	4b08      	ldr	r3, [pc, #32]	; (8004bec <_sbrk+0x64>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bce:	4b07      	ldr	r3, [pc, #28]	; (8004bec <_sbrk+0x64>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	4a05      	ldr	r2, [pc, #20]	; (8004bec <_sbrk+0x64>)
 8004bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004bda:	68fb      	ldr	r3, [r7, #12]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	20020000 	.word	0x20020000
 8004be8:	00000400 	.word	0x00000400
 8004bec:	20000524 	.word	0x20000524
 8004bf0:	20004fd0 	.word	0x20004fd0

08004bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004bf8:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <SystemInit+0x20>)
 8004bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfe:	4a05      	ldr	r2, [pc, #20]	; (8004c14 <SystemInit+0x20>)
 8004c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c08:	bf00      	nop
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	e000ed00 	.word	0xe000ed00

08004c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c1c:	480d      	ldr	r0, [pc, #52]	; (8004c54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c1e:	490e      	ldr	r1, [pc, #56]	; (8004c58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004c20:	4a0e      	ldr	r2, [pc, #56]	; (8004c5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c24:	e002      	b.n	8004c2c <LoopCopyDataInit>

08004c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c2a:	3304      	adds	r3, #4

08004c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c30:	d3f9      	bcc.n	8004c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c32:	4a0b      	ldr	r2, [pc, #44]	; (8004c60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c34:	4c0b      	ldr	r4, [pc, #44]	; (8004c64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c38:	e001      	b.n	8004c3e <LoopFillZerobss>

08004c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c3c:	3204      	adds	r2, #4

08004c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c40:	d3fb      	bcc.n	8004c3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c42:	f7ff ffd7 	bl	8004bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c46:	f007 ff23 	bl	800ca90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c4a:	f7fd fb2f 	bl	80022ac <main>
  bx  lr    
 8004c4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004c50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c58:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8004c5c:	0800f0e8 	.word	0x0800f0e8
  ldr r2, =_sbss
 8004c60:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004c64:	20004fcc 	.word	0x20004fcc

08004c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c68:	e7fe      	b.n	8004c68 <ADC_IRQHandler>
	...

08004c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c70:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <HAL_Init+0x40>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a0d      	ldr	r2, [pc, #52]	; (8004cac <HAL_Init+0x40>)
 8004c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <HAL_Init+0x40>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a0a      	ldr	r2, [pc, #40]	; (8004cac <HAL_Init+0x40>)
 8004c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c88:	4b08      	ldr	r3, [pc, #32]	; (8004cac <HAL_Init+0x40>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a07      	ldr	r2, [pc, #28]	; (8004cac <HAL_Init+0x40>)
 8004c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c94:	2003      	movs	r0, #3
 8004c96:	f000 fb8d 	bl	80053b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c9a:	200f      	movs	r0, #15
 8004c9c:	f000 f808 	bl	8004cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ca0:	f7ff fcd0 	bl	8004644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40023c00 	.word	0x40023c00

08004cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004cb8:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <HAL_InitTick+0x54>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <HAL_InitTick+0x58>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fba5 	bl	800541e <HAL_SYSTICK_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e00e      	b.n	8004cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b0f      	cmp	r3, #15
 8004ce2:	d80a      	bhi.n	8004cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cec:	f000 fb6d 	bl	80053ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cf0:	4a06      	ldr	r2, [pc, #24]	; (8004d0c <HAL_InitTick+0x5c>)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	e000      	b.n	8004cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	20000000 	.word	0x20000000
 8004d08:	20000008 	.word	0x20000008
 8004d0c:	20000004 	.word	0x20000004

08004d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d14:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <HAL_IncTick+0x20>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <HAL_IncTick+0x24>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4413      	add	r3, r2
 8004d20:	4a04      	ldr	r2, [pc, #16]	; (8004d34 <HAL_IncTick+0x24>)
 8004d22:	6013      	str	r3, [r2, #0]
}
 8004d24:	bf00      	nop
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000008 	.word	0x20000008
 8004d34:	20000528 	.word	0x20000528

08004d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8004d3c:	4b03      	ldr	r3, [pc, #12]	; (8004d4c <HAL_GetTick+0x14>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	20000528 	.word	0x20000528

08004d50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e033      	b.n	8004dce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d109      	bne.n	8004d82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff fc94 	bl	800469c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d118      	bne.n	8004dc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004d96:	f023 0302 	bic.w	r3, r3, #2
 8004d9a:	f043 0202 	orr.w	r2, r3, #2
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f93a 	bl	800501c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f023 0303 	bic.w	r3, r3, #3
 8004db6:	f043 0201 	orr.w	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40
 8004dbe:	e001      	b.n	8004dc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_ADC_ConfigChannel+0x1c>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e105      	b.n	8005000 <HAL_ADC_ConfigChannel+0x228>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b09      	cmp	r3, #9
 8004e02:	d925      	bls.n	8004e50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68d9      	ldr	r1, [r3, #12]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	461a      	mov	r2, r3
 8004e12:	4613      	mov	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4413      	add	r3, r2
 8004e18:	3b1e      	subs	r3, #30
 8004e1a:	2207      	movs	r2, #7
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43da      	mvns	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	400a      	ands	r2, r1
 8004e28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68d9      	ldr	r1, [r3, #12]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	4403      	add	r3, r0
 8004e42:	3b1e      	subs	r3, #30
 8004e44:	409a      	lsls	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	60da      	str	r2, [r3, #12]
 8004e4e:	e022      	b.n	8004e96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6919      	ldr	r1, [r3, #16]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4613      	mov	r3, r2
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	4413      	add	r3, r2
 8004e64:	2207      	movs	r2, #7
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43da      	mvns	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	400a      	ands	r2, r1
 8004e72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6919      	ldr	r1, [r3, #16]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	4618      	mov	r0, r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	4403      	add	r3, r0
 8004e8c:	409a      	lsls	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b06      	cmp	r3, #6
 8004e9c:	d824      	bhi.n	8004ee8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	3b05      	subs	r3, #5
 8004eb0:	221f      	movs	r2, #31
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43da      	mvns	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	400a      	ands	r2, r1
 8004ebe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	4618      	mov	r0, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	3b05      	subs	r3, #5
 8004eda:	fa00 f203 	lsl.w	r2, r0, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ee6:	e04c      	b.n	8004f82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b0c      	cmp	r3, #12
 8004eee:	d824      	bhi.n	8004f3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	4613      	mov	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	3b23      	subs	r3, #35	; 0x23
 8004f02:	221f      	movs	r2, #31
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	43da      	mvns	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	400a      	ands	r2, r1
 8004f10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	4618      	mov	r0, r3
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	3b23      	subs	r3, #35	; 0x23
 8004f2c:	fa00 f203 	lsl.w	r2, r0, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	631a      	str	r2, [r3, #48]	; 0x30
 8004f38:	e023      	b.n	8004f82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	3b41      	subs	r3, #65	; 0x41
 8004f4c:	221f      	movs	r2, #31
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43da      	mvns	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	400a      	ands	r2, r1
 8004f5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	4618      	mov	r0, r3
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	3b41      	subs	r3, #65	; 0x41
 8004f76:	fa00 f203 	lsl.w	r2, r0, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f82:	4b22      	ldr	r3, [pc, #136]	; (800500c <HAL_ADC_ConfigChannel+0x234>)
 8004f84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a21      	ldr	r2, [pc, #132]	; (8005010 <HAL_ADC_ConfigChannel+0x238>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d109      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x1cc>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b12      	cmp	r3, #18
 8004f96:	d105      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a19      	ldr	r2, [pc, #100]	; (8005010 <HAL_ADC_ConfigChannel+0x238>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d123      	bne.n	8004ff6 <HAL_ADC_ConfigChannel+0x21e>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b10      	cmp	r3, #16
 8004fb4:	d003      	beq.n	8004fbe <HAL_ADC_ConfigChannel+0x1e6>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b11      	cmp	r3, #17
 8004fbc:	d11b      	bne.n	8004ff6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d111      	bne.n	8004ff6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004fd2:	4b10      	ldr	r3, [pc, #64]	; (8005014 <HAL_ADC_ConfigChannel+0x23c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a10      	ldr	r2, [pc, #64]	; (8005018 <HAL_ADC_ConfigChannel+0x240>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	0c9a      	lsrs	r2, r3, #18
 8004fde:	4613      	mov	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004fe8:	e002      	b.n	8004ff0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	3b01      	subs	r3, #1
 8004fee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f9      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	40012300 	.word	0x40012300
 8005010:	40012000 	.word	0x40012000
 8005014:	20000000 	.word	0x20000000
 8005018:	431bde83 	.word	0x431bde83

0800501c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005024:	4b79      	ldr	r3, [pc, #484]	; (800520c <ADC_Init+0x1f0>)
 8005026:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	431a      	orrs	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005050:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6859      	ldr	r1, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	021a      	lsls	r2, r3, #8
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005074:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6859      	ldr	r1, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005096:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6899      	ldr	r1, [r3, #8]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ae:	4a58      	ldr	r2, [pc, #352]	; (8005210 <ADC_Init+0x1f4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d022      	beq.n	80050fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6899      	ldr	r1, [r3, #8]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80050e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6899      	ldr	r1, [r3, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	609a      	str	r2, [r3, #8]
 80050f8:	e00f      	b.n	800511a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005108:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005118:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0202 	bic.w	r2, r2, #2
 8005128:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6899      	ldr	r1, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	7e1b      	ldrb	r3, [r3, #24]
 8005134:	005a      	lsls	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01b      	beq.n	8005180 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005156:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005166:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6859      	ldr	r1, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	3b01      	subs	r3, #1
 8005174:	035a      	lsls	r2, r3, #13
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	605a      	str	r2, [r3, #4]
 800517e:	e007      	b.n	8005190 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800518e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800519e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	051a      	lsls	r2, r3, #20
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80051c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6899      	ldr	r1, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051d2:	025a      	lsls	r2, r3, #9
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6899      	ldr	r1, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	029a      	lsls	r2, r3, #10
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	609a      	str	r2, [r3, #8]
}
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40012300 	.word	0x40012300
 8005210:	0f000001 	.word	0x0f000001

08005214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005224:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <__NVIC_SetPriorityGrouping+0x44>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005230:	4013      	ands	r3, r2
 8005232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800523c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005246:	4a04      	ldr	r2, [pc, #16]	; (8005258 <__NVIC_SetPriorityGrouping+0x44>)
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	60d3      	str	r3, [r2, #12]
}
 800524c:	bf00      	nop
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	e000ed00 	.word	0xe000ed00

0800525c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005260:	4b04      	ldr	r3, [pc, #16]	; (8005274 <__NVIC_GetPriorityGrouping+0x18>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	0a1b      	lsrs	r3, r3, #8
 8005266:	f003 0307 	and.w	r3, r3, #7
}
 800526a:	4618      	mov	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	e000ed00 	.word	0xe000ed00

08005278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	4603      	mov	r3, r0
 8005280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005286:	2b00      	cmp	r3, #0
 8005288:	db0b      	blt.n	80052a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	f003 021f 	and.w	r2, r3, #31
 8005290:	4907      	ldr	r1, [pc, #28]	; (80052b0 <__NVIC_EnableIRQ+0x38>)
 8005292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005296:	095b      	lsrs	r3, r3, #5
 8005298:	2001      	movs	r0, #1
 800529a:	fa00 f202 	lsl.w	r2, r0, r2
 800529e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	e000e100 	.word	0xe000e100

080052b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4603      	mov	r3, r0
 80052bc:	6039      	str	r1, [r7, #0]
 80052be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	db0a      	blt.n	80052de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	490c      	ldr	r1, [pc, #48]	; (8005300 <__NVIC_SetPriority+0x4c>)
 80052ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d2:	0112      	lsls	r2, r2, #4
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	440b      	add	r3, r1
 80052d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052dc:	e00a      	b.n	80052f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	4908      	ldr	r1, [pc, #32]	; (8005304 <__NVIC_SetPriority+0x50>)
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	3b04      	subs	r3, #4
 80052ec:	0112      	lsls	r2, r2, #4
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	440b      	add	r3, r1
 80052f2:	761a      	strb	r2, [r3, #24]
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	e000e100 	.word	0xe000e100
 8005304:	e000ed00 	.word	0xe000ed00

08005308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005308:	b480      	push	{r7}
 800530a:	b089      	sub	sp, #36	; 0x24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f1c3 0307 	rsb	r3, r3, #7
 8005322:	2b04      	cmp	r3, #4
 8005324:	bf28      	it	cs
 8005326:	2304      	movcs	r3, #4
 8005328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	3304      	adds	r3, #4
 800532e:	2b06      	cmp	r3, #6
 8005330:	d902      	bls.n	8005338 <NVIC_EncodePriority+0x30>
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	3b03      	subs	r3, #3
 8005336:	e000      	b.n	800533a <NVIC_EncodePriority+0x32>
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800533c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	43da      	mvns	r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	401a      	ands	r2, r3
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005350:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	fa01 f303 	lsl.w	r3, r1, r3
 800535a:	43d9      	mvns	r1, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005360:	4313      	orrs	r3, r2
         );
}
 8005362:	4618      	mov	r0, r3
 8005364:	3724      	adds	r7, #36	; 0x24
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3b01      	subs	r3, #1
 800537c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005380:	d301      	bcc.n	8005386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005382:	2301      	movs	r3, #1
 8005384:	e00f      	b.n	80053a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005386:	4a0a      	ldr	r2, [pc, #40]	; (80053b0 <SysTick_Config+0x40>)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3b01      	subs	r3, #1
 800538c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800538e:	210f      	movs	r1, #15
 8005390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005394:	f7ff ff8e 	bl	80052b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <SysTick_Config+0x40>)
 800539a:	2200      	movs	r2, #0
 800539c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800539e:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <SysTick_Config+0x40>)
 80053a0:	2207      	movs	r2, #7
 80053a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	e000e010 	.word	0xe000e010

080053b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff ff29 	bl	8005214 <__NVIC_SetPriorityGrouping>
}
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b086      	sub	sp, #24
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	4603      	mov	r3, r0
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
 80053d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053dc:	f7ff ff3e 	bl	800525c <__NVIC_GetPriorityGrouping>
 80053e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	68b9      	ldr	r1, [r7, #8]
 80053e6:	6978      	ldr	r0, [r7, #20]
 80053e8:	f7ff ff8e 	bl	8005308 <NVIC_EncodePriority>
 80053ec:	4602      	mov	r2, r0
 80053ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053f2:	4611      	mov	r1, r2
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff ff5d 	bl	80052b4 <__NVIC_SetPriority>
}
 80053fa:	bf00      	nop
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b082      	sub	sp, #8
 8005406:	af00      	add	r7, sp, #0
 8005408:	4603      	mov	r3, r0
 800540a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800540c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff ff31 	bl	8005278 <__NVIC_EnableIRQ>
}
 8005416:	bf00      	nop
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff ffa2 	bl	8005370 <SysTick_Config>
 800542c:	4603      	mov	r3, r0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
	...

08005438 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005444:	f7ff fc78 	bl	8004d38 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e099      	b.n	8005588 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0201 	bic.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005474:	e00f      	b.n	8005496 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005476:	f7ff fc5f 	bl	8004d38 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b05      	cmp	r3, #5
 8005482:	d908      	bls.n	8005496 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2203      	movs	r2, #3
 800548e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e078      	b.n	8005588 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1e8      	bne.n	8005476 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4b38      	ldr	r3, [pc, #224]	; (8005590 <HAL_DMA_Init+0x158>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d107      	bne.n	8005500 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	4313      	orrs	r3, r2
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f023 0307 	bic.w	r3, r3, #7
 8005516:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	4313      	orrs	r3, r2
 8005520:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	2b04      	cmp	r3, #4
 8005528:	d117      	bne.n	800555a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00e      	beq.n	800555a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fa7b 	bl	8005a38 <DMA_CheckFifoParam>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d008      	beq.n	800555a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2240      	movs	r2, #64	; 0x40
 800554c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005556:	2301      	movs	r3, #1
 8005558:	e016      	b.n	8005588 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fa32 	bl	80059cc <DMA_CalcBaseAndBitshift>
 8005568:	4603      	mov	r3, r0
 800556a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005570:	223f      	movs	r2, #63	; 0x3f
 8005572:	409a      	lsls	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	f010803f 	.word	0xf010803f

08005594 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80055a2:	f7ff fbc9 	bl	8004d38 <HAL_GetTick>
 80055a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d008      	beq.n	80055c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2280      	movs	r2, #128	; 0x80
 80055b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e052      	b.n	800566c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0216 	bic.w	r2, r2, #22
 80055d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695a      	ldr	r2, [r3, #20]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d103      	bne.n	80055f6 <HAL_DMA_Abort+0x62>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d007      	beq.n	8005606 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0208 	bic.w	r2, r2, #8
 8005604:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0201 	bic.w	r2, r2, #1
 8005614:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005616:	e013      	b.n	8005640 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005618:	f7ff fb8e 	bl	8004d38 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b05      	cmp	r3, #5
 8005624:	d90c      	bls.n	8005640 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2203      	movs	r2, #3
 8005630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e015      	b.n	800566c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e4      	bne.n	8005618 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005652:	223f      	movs	r2, #63	; 0x3f
 8005654:	409a      	lsls	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d004      	beq.n	8005692 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2280      	movs	r2, #128	; 0x80
 800568c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e00c      	b.n	80056ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2205      	movs	r2, #5
 8005696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0201 	bic.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056c4:	4b8e      	ldr	r3, [pc, #568]	; (8005900 <HAL_DMA_IRQHandler+0x248>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a8e      	ldr	r2, [pc, #568]	; (8005904 <HAL_DMA_IRQHandler+0x24c>)
 80056ca:	fba2 2303 	umull	r2, r3, r2, r3
 80056ce:	0a9b      	lsrs	r3, r3, #10
 80056d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e2:	2208      	movs	r2, #8
 80056e4:	409a      	lsls	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d01a      	beq.n	8005724 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d013      	beq.n	8005724 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0204 	bic.w	r2, r2, #4
 800570a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005710:	2208      	movs	r2, #8
 8005712:	409a      	lsls	r2, r3
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571c:	f043 0201 	orr.w	r2, r3, #1
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005728:	2201      	movs	r2, #1
 800572a:	409a      	lsls	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d012      	beq.n	800575a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005746:	2201      	movs	r2, #1
 8005748:	409a      	lsls	r2, r3
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005752:	f043 0202 	orr.w	r2, r3, #2
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575e:	2204      	movs	r2, #4
 8005760:	409a      	lsls	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4013      	ands	r3, r2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d012      	beq.n	8005790 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00b      	beq.n	8005790 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577c:	2204      	movs	r2, #4
 800577e:	409a      	lsls	r2, r3
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005788:	f043 0204 	orr.w	r2, r3, #4
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005794:	2210      	movs	r2, #16
 8005796:	409a      	lsls	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4013      	ands	r3, r2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d043      	beq.n	8005828 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d03c      	beq.n	8005828 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b2:	2210      	movs	r2, #16
 80057b4:	409a      	lsls	r2, r3
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d018      	beq.n	80057fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d108      	bne.n	80057e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d024      	beq.n	8005828 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	4798      	blx	r3
 80057e6:	e01f      	b.n	8005828 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d01b      	beq.n	8005828 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	4798      	blx	r3
 80057f8:	e016      	b.n	8005828 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005804:	2b00      	cmp	r3, #0
 8005806:	d107      	bne.n	8005818 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0208 	bic.w	r2, r2, #8
 8005816:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582c:	2220      	movs	r2, #32
 800582e:	409a      	lsls	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4013      	ands	r3, r2
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 808f 	beq.w	8005958 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 8087 	beq.w	8005958 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584e:	2220      	movs	r2, #32
 8005850:	409a      	lsls	r2, r3
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b05      	cmp	r3, #5
 8005860:	d136      	bne.n	80058d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0216 	bic.w	r2, r2, #22
 8005870:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005880:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d103      	bne.n	8005892 <HAL_DMA_IRQHandler+0x1da>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0208 	bic.w	r2, r2, #8
 80058a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a6:	223f      	movs	r2, #63	; 0x3f
 80058a8:	409a      	lsls	r2, r3
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d07e      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	4798      	blx	r3
        }
        return;
 80058ce:	e079      	b.n	80059c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d01d      	beq.n	800591a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10d      	bne.n	8005908 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d031      	beq.n	8005958 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	4798      	blx	r3
 80058fc:	e02c      	b.n	8005958 <HAL_DMA_IRQHandler+0x2a0>
 80058fe:	bf00      	nop
 8005900:	20000000 	.word	0x20000000
 8005904:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590c:	2b00      	cmp	r3, #0
 800590e:	d023      	beq.n	8005958 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	4798      	blx	r3
 8005918:	e01e      	b.n	8005958 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10f      	bne.n	8005948 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0210 	bic.w	r2, r2, #16
 8005936:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595c:	2b00      	cmp	r3, #0
 800595e:	d032      	beq.n	80059c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d022      	beq.n	80059b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2205      	movs	r2, #5
 8005970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0201 	bic.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	3301      	adds	r3, #1
 8005988:	60bb      	str	r3, [r7, #8]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	429a      	cmp	r2, r3
 800598e:	d307      	bcc.n	80059a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1f2      	bne.n	8005984 <HAL_DMA_IRQHandler+0x2cc>
 800599e:	e000      	b.n	80059a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80059a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d005      	beq.n	80059c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	4798      	blx	r3
 80059c2:	e000      	b.n	80059c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80059c4:	bf00      	nop
    }
  }
}
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	3b10      	subs	r3, #16
 80059dc:	4a14      	ldr	r2, [pc, #80]	; (8005a30 <DMA_CalcBaseAndBitshift+0x64>)
 80059de:	fba2 2303 	umull	r2, r3, r2, r3
 80059e2:	091b      	lsrs	r3, r3, #4
 80059e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059e6:	4a13      	ldr	r2, [pc, #76]	; (8005a34 <DMA_CalcBaseAndBitshift+0x68>)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d909      	bls.n	8005a0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	1d1a      	adds	r2, r3, #4
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	659a      	str	r2, [r3, #88]	; 0x58
 8005a0c:	e007      	b.n	8005a1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	aaaaaaab 	.word	0xaaaaaaab
 8005a34:	0800e8b0 	.word	0x0800e8b0

08005a38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d11f      	bne.n	8005a92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d856      	bhi.n	8005b06 <DMA_CheckFifoParam+0xce>
 8005a58:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <DMA_CheckFifoParam+0x28>)
 8005a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5e:	bf00      	nop
 8005a60:	08005a71 	.word	0x08005a71
 8005a64:	08005a83 	.word	0x08005a83
 8005a68:	08005a71 	.word	0x08005a71
 8005a6c:	08005b07 	.word	0x08005b07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d046      	beq.n	8005b0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a80:	e043      	b.n	8005b0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a8a:	d140      	bne.n	8005b0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a90:	e03d      	b.n	8005b0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a9a:	d121      	bne.n	8005ae0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d837      	bhi.n	8005b12 <DMA_CheckFifoParam+0xda>
 8005aa2:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <DMA_CheckFifoParam+0x70>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005ab9 	.word	0x08005ab9
 8005aac:	08005abf 	.word	0x08005abf
 8005ab0:	08005ab9 	.word	0x08005ab9
 8005ab4:	08005ad1 	.word	0x08005ad1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	73fb      	strb	r3, [r7, #15]
      break;
 8005abc:	e030      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d025      	beq.n	8005b16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ace:	e022      	b.n	8005b16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ad8:	d11f      	bne.n	8005b1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ade:	e01c      	b.n	8005b1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d903      	bls.n	8005aee <DMA_CheckFifoParam+0xb6>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d003      	beq.n	8005af4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005aec:	e018      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	73fb      	strb	r3, [r7, #15]
      break;
 8005af2:	e015      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00e      	beq.n	8005b1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	73fb      	strb	r3, [r7, #15]
      break;
 8005b04:	e00b      	b.n	8005b1e <DMA_CheckFifoParam+0xe6>
      break;
 8005b06:	bf00      	nop
 8005b08:	e00a      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b0a:	bf00      	nop
 8005b0c:	e008      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b0e:	bf00      	nop
 8005b10:	e006      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b12:	bf00      	nop
 8005b14:	e004      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b16:	bf00      	nop
 8005b18:	e002      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;   
 8005b1a:	bf00      	nop
 8005b1c:	e000      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b1e:	bf00      	nop
    }
  } 
  
  return status; 
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop

08005b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b089      	sub	sp, #36	; 0x24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b46:	2300      	movs	r3, #0
 8005b48:	61fb      	str	r3, [r7, #28]
 8005b4a:	e16b      	b.n	8005e24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	f040 815a 	bne.w	8005e1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d005      	beq.n	8005b82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d130      	bne.n	8005be4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	2203      	movs	r2, #3
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	43db      	mvns	r3, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	4013      	ands	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005bb8:	2201      	movs	r2, #1
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	091b      	lsrs	r3, r3, #4
 8005bce:	f003 0201 	and.w	r2, r3, #1
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d017      	beq.n	8005c20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	43db      	mvns	r3, r3
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	4013      	ands	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	fa02 f303 	lsl.w	r3, r2, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f003 0303 	and.w	r3, r3, #3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d123      	bne.n	8005c74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	08da      	lsrs	r2, r3, #3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3208      	adds	r2, #8
 8005c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	220f      	movs	r2, #15
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	08da      	lsrs	r2, r3, #3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3208      	adds	r2, #8
 8005c6e:	69b9      	ldr	r1, [r7, #24]
 8005c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	2203      	movs	r2, #3
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	43db      	mvns	r3, r3
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f003 0203 	and.w	r2, r3, #3
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80b4 	beq.w	8005e1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	4b60      	ldr	r3, [pc, #384]	; (8005e3c <HAL_GPIO_Init+0x30c>)
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbe:	4a5f      	ldr	r2, [pc, #380]	; (8005e3c <HAL_GPIO_Init+0x30c>)
 8005cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8005cc6:	4b5d      	ldr	r3, [pc, #372]	; (8005e3c <HAL_GPIO_Init+0x30c>)
 8005cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cd2:	4a5b      	ldr	r2, [pc, #364]	; (8005e40 <HAL_GPIO_Init+0x310>)
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	089b      	lsrs	r3, r3, #2
 8005cd8:	3302      	adds	r3, #2
 8005cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	220f      	movs	r2, #15
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	43db      	mvns	r3, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a52      	ldr	r2, [pc, #328]	; (8005e44 <HAL_GPIO_Init+0x314>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d02b      	beq.n	8005d56 <HAL_GPIO_Init+0x226>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a51      	ldr	r2, [pc, #324]	; (8005e48 <HAL_GPIO_Init+0x318>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d025      	beq.n	8005d52 <HAL_GPIO_Init+0x222>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a50      	ldr	r2, [pc, #320]	; (8005e4c <HAL_GPIO_Init+0x31c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01f      	beq.n	8005d4e <HAL_GPIO_Init+0x21e>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a4f      	ldr	r2, [pc, #316]	; (8005e50 <HAL_GPIO_Init+0x320>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d019      	beq.n	8005d4a <HAL_GPIO_Init+0x21a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a4e      	ldr	r2, [pc, #312]	; (8005e54 <HAL_GPIO_Init+0x324>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d013      	beq.n	8005d46 <HAL_GPIO_Init+0x216>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a4d      	ldr	r2, [pc, #308]	; (8005e58 <HAL_GPIO_Init+0x328>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00d      	beq.n	8005d42 <HAL_GPIO_Init+0x212>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a4c      	ldr	r2, [pc, #304]	; (8005e5c <HAL_GPIO_Init+0x32c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d007      	beq.n	8005d3e <HAL_GPIO_Init+0x20e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a4b      	ldr	r2, [pc, #300]	; (8005e60 <HAL_GPIO_Init+0x330>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d101      	bne.n	8005d3a <HAL_GPIO_Init+0x20a>
 8005d36:	2307      	movs	r3, #7
 8005d38:	e00e      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d3a:	2308      	movs	r3, #8
 8005d3c:	e00c      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d3e:	2306      	movs	r3, #6
 8005d40:	e00a      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d42:	2305      	movs	r3, #5
 8005d44:	e008      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d46:	2304      	movs	r3, #4
 8005d48:	e006      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e004      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e002      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e000      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d56:	2300      	movs	r3, #0
 8005d58:	69fa      	ldr	r2, [r7, #28]
 8005d5a:	f002 0203 	and.w	r2, r2, #3
 8005d5e:	0092      	lsls	r2, r2, #2
 8005d60:	4093      	lsls	r3, r2
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d68:	4935      	ldr	r1, [pc, #212]	; (8005e40 <HAL_GPIO_Init+0x310>)
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	089b      	lsrs	r3, r3, #2
 8005d6e:	3302      	adds	r3, #2
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d76:	4b3b      	ldr	r3, [pc, #236]	; (8005e64 <HAL_GPIO_Init+0x334>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4013      	ands	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d9a:	4a32      	ldr	r2, [pc, #200]	; (8005e64 <HAL_GPIO_Init+0x334>)
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005da0:	4b30      	ldr	r3, [pc, #192]	; (8005e64 <HAL_GPIO_Init+0x334>)
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	43db      	mvns	r3, r3
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	4013      	ands	r3, r2
 8005dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005dc4:	4a27      	ldr	r2, [pc, #156]	; (8005e64 <HAL_GPIO_Init+0x334>)
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005dca:	4b26      	ldr	r3, [pc, #152]	; (8005e64 <HAL_GPIO_Init+0x334>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005dee:	4a1d      	ldr	r2, [pc, #116]	; (8005e64 <HAL_GPIO_Init+0x334>)
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005df4:	4b1b      	ldr	r3, [pc, #108]	; (8005e64 <HAL_GPIO_Init+0x334>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	43db      	mvns	r3, r3
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	4013      	ands	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e18:	4a12      	ldr	r2, [pc, #72]	; (8005e64 <HAL_GPIO_Init+0x334>)
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	3301      	adds	r3, #1
 8005e22:	61fb      	str	r3, [r7, #28]
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b0f      	cmp	r3, #15
 8005e28:	f67f ae90 	bls.w	8005b4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	bf00      	nop
 8005e30:	3724      	adds	r7, #36	; 0x24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40023800 	.word	0x40023800
 8005e40:	40013800 	.word	0x40013800
 8005e44:	40020000 	.word	0x40020000
 8005e48:	40020400 	.word	0x40020400
 8005e4c:	40020800 	.word	0x40020800
 8005e50:	40020c00 	.word	0x40020c00
 8005e54:	40021000 	.word	0x40021000
 8005e58:	40021400 	.word	0x40021400
 8005e5c:	40021800 	.word	0x40021800
 8005e60:	40021c00 	.word	0x40021c00
 8005e64:	40013c00 	.word	0x40013c00

08005e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	807b      	strh	r3, [r7, #2]
 8005e74:	4613      	mov	r3, r2
 8005e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e78:	787b      	ldrb	r3, [r7, #1]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e7e:	887a      	ldrh	r2, [r7, #2]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005e84:	e003      	b.n	8005e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e86:	887b      	ldrh	r3, [r7, #2]
 8005e88:	041a      	lsls	r2, r3, #16
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	619a      	str	r2, [r3, #24]
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e12b      	b.n	8006106 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fe fc2e 	bl	8004724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2224      	movs	r2, #36	; 0x24
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0201 	bic.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005efe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f00:	f000 fd40 	bl	8006984 <HAL_RCC_GetPCLK1Freq>
 8005f04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	4a81      	ldr	r2, [pc, #516]	; (8006110 <HAL_I2C_Init+0x274>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d807      	bhi.n	8005f20 <HAL_I2C_Init+0x84>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4a80      	ldr	r2, [pc, #512]	; (8006114 <HAL_I2C_Init+0x278>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	bf94      	ite	ls
 8005f18:	2301      	movls	r3, #1
 8005f1a:	2300      	movhi	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	e006      	b.n	8005f2e <HAL_I2C_Init+0x92>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a7d      	ldr	r2, [pc, #500]	; (8006118 <HAL_I2C_Init+0x27c>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	bf94      	ite	ls
 8005f28:	2301      	movls	r3, #1
 8005f2a:	2300      	movhi	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e0e7      	b.n	8006106 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4a78      	ldr	r2, [pc, #480]	; (800611c <HAL_I2C_Init+0x280>)
 8005f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3e:	0c9b      	lsrs	r3, r3, #18
 8005f40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	4a6a      	ldr	r2, [pc, #424]	; (8006110 <HAL_I2C_Init+0x274>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d802      	bhi.n	8005f70 <HAL_I2C_Init+0xd4>
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	e009      	b.n	8005f84 <HAL_I2C_Init+0xe8>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f76:	fb02 f303 	mul.w	r3, r2, r3
 8005f7a:	4a69      	ldr	r2, [pc, #420]	; (8006120 <HAL_I2C_Init+0x284>)
 8005f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f80:	099b      	lsrs	r3, r3, #6
 8005f82:	3301      	adds	r3, #1
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6812      	ldr	r2, [r2, #0]
 8005f88:	430b      	orrs	r3, r1
 8005f8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	495c      	ldr	r1, [pc, #368]	; (8006110 <HAL_I2C_Init+0x274>)
 8005fa0:	428b      	cmp	r3, r1
 8005fa2:	d819      	bhi.n	8005fd8 <HAL_I2C_Init+0x13c>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	1e59      	subs	r1, r3, #1
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fb2:	1c59      	adds	r1, r3, #1
 8005fb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005fb8:	400b      	ands	r3, r1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <HAL_I2C_Init+0x138>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	1e59      	subs	r1, r3, #1
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fcc:	3301      	adds	r3, #1
 8005fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd2:	e051      	b.n	8006078 <HAL_I2C_Init+0x1dc>
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	e04f      	b.n	8006078 <HAL_I2C_Init+0x1dc>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d111      	bne.n	8006004 <HAL_I2C_Init+0x168>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	1e58      	subs	r0, r3, #1
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6859      	ldr	r1, [r3, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	440b      	add	r3, r1
 8005fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	bf0c      	ite	eq
 8005ffc:	2301      	moveq	r3, #1
 8005ffe:	2300      	movne	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	e012      	b.n	800602a <HAL_I2C_Init+0x18e>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	1e58      	subs	r0, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6859      	ldr	r1, [r3, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	440b      	add	r3, r1
 8006012:	0099      	lsls	r1, r3, #2
 8006014:	440b      	add	r3, r1
 8006016:	fbb0 f3f3 	udiv	r3, r0, r3
 800601a:	3301      	adds	r3, #1
 800601c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006020:	2b00      	cmp	r3, #0
 8006022:	bf0c      	ite	eq
 8006024:	2301      	moveq	r3, #1
 8006026:	2300      	movne	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <HAL_I2C_Init+0x196>
 800602e:	2301      	movs	r3, #1
 8006030:	e022      	b.n	8006078 <HAL_I2C_Init+0x1dc>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10e      	bne.n	8006058 <HAL_I2C_Init+0x1bc>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	1e58      	subs	r0, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6859      	ldr	r1, [r3, #4]
 8006042:	460b      	mov	r3, r1
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	440b      	add	r3, r1
 8006048:	fbb0 f3f3 	udiv	r3, r0, r3
 800604c:	3301      	adds	r3, #1
 800604e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006056:	e00f      	b.n	8006078 <HAL_I2C_Init+0x1dc>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	1e58      	subs	r0, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6859      	ldr	r1, [r3, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	440b      	add	r3, r1
 8006066:	0099      	lsls	r1, r3, #2
 8006068:	440b      	add	r3, r1
 800606a:	fbb0 f3f3 	udiv	r3, r0, r3
 800606e:	3301      	adds	r3, #1
 8006070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	6809      	ldr	r1, [r1, #0]
 800607c:	4313      	orrs	r3, r2
 800607e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69da      	ldr	r2, [r3, #28]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80060a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	6911      	ldr	r1, [r2, #16]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	68d2      	ldr	r2, [r2, #12]
 80060b2:	4311      	orrs	r1, r2
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	6812      	ldr	r2, [r2, #0]
 80060b8:	430b      	orrs	r3, r1
 80060ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	695a      	ldr	r2, [r3, #20]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0201 	orr.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	000186a0 	.word	0x000186a0
 8006114:	001e847f 	.word	0x001e847f
 8006118:	003d08ff 	.word	0x003d08ff
 800611c:	431bde83 	.word	0x431bde83
 8006120:	10624dd3 	.word	0x10624dd3

08006124 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e267      	b.n	8006606 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d075      	beq.n	800622e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006142:	4b88      	ldr	r3, [pc, #544]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f003 030c 	and.w	r3, r3, #12
 800614a:	2b04      	cmp	r3, #4
 800614c:	d00c      	beq.n	8006168 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800614e:	4b85      	ldr	r3, [pc, #532]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006156:	2b08      	cmp	r3, #8
 8006158:	d112      	bne.n	8006180 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800615a:	4b82      	ldr	r3, [pc, #520]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006166:	d10b      	bne.n	8006180 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006168:	4b7e      	ldr	r3, [pc, #504]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d05b      	beq.n	800622c <HAL_RCC_OscConfig+0x108>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d157      	bne.n	800622c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e242      	b.n	8006606 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006188:	d106      	bne.n	8006198 <HAL_RCC_OscConfig+0x74>
 800618a:	4b76      	ldr	r3, [pc, #472]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a75      	ldr	r2, [pc, #468]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 8006190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	e01d      	b.n	80061d4 <HAL_RCC_OscConfig+0xb0>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061a0:	d10c      	bne.n	80061bc <HAL_RCC_OscConfig+0x98>
 80061a2:	4b70      	ldr	r3, [pc, #448]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a6f      	ldr	r2, [pc, #444]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 80061a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	4b6d      	ldr	r3, [pc, #436]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a6c      	ldr	r2, [pc, #432]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 80061b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	e00b      	b.n	80061d4 <HAL_RCC_OscConfig+0xb0>
 80061bc:	4b69      	ldr	r3, [pc, #420]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a68      	ldr	r2, [pc, #416]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 80061c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	4b66      	ldr	r3, [pc, #408]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a65      	ldr	r2, [pc, #404]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 80061ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d013      	beq.n	8006204 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061dc:	f7fe fdac 	bl	8004d38 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061e4:	f7fe fda8 	bl	8004d38 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b64      	cmp	r3, #100	; 0x64
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e207      	b.n	8006606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061f6:	4b5b      	ldr	r3, [pc, #364]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0f0      	beq.n	80061e4 <HAL_RCC_OscConfig+0xc0>
 8006202:	e014      	b.n	800622e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006204:	f7fe fd98 	bl	8004d38 <HAL_GetTick>
 8006208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800620c:	f7fe fd94 	bl	8004d38 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b64      	cmp	r3, #100	; 0x64
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e1f3      	b.n	8006606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800621e:	4b51      	ldr	r3, [pc, #324]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1f0      	bne.n	800620c <HAL_RCC_OscConfig+0xe8>
 800622a:	e000      	b.n	800622e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800622c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d063      	beq.n	8006302 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800623a:	4b4a      	ldr	r3, [pc, #296]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f003 030c 	and.w	r3, r3, #12
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00b      	beq.n	800625e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006246:	4b47      	ldr	r3, [pc, #284]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800624e:	2b08      	cmp	r3, #8
 8006250:	d11c      	bne.n	800628c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006252:	4b44      	ldr	r3, [pc, #272]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d116      	bne.n	800628c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800625e:	4b41      	ldr	r3, [pc, #260]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <HAL_RCC_OscConfig+0x152>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d001      	beq.n	8006276 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e1c7      	b.n	8006606 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006276:	4b3b      	ldr	r3, [pc, #236]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	4937      	ldr	r1, [pc, #220]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 8006286:	4313      	orrs	r3, r2
 8006288:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800628a:	e03a      	b.n	8006302 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d020      	beq.n	80062d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006294:	4b34      	ldr	r3, [pc, #208]	; (8006368 <HAL_RCC_OscConfig+0x244>)
 8006296:	2201      	movs	r2, #1
 8006298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800629a:	f7fe fd4d 	bl	8004d38 <HAL_GetTick>
 800629e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062a0:	e008      	b.n	80062b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062a2:	f7fe fd49 	bl	8004d38 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d901      	bls.n	80062b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e1a8      	b.n	8006606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062b4:	4b2b      	ldr	r3, [pc, #172]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0f0      	beq.n	80062a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c0:	4b28      	ldr	r3, [pc, #160]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	4925      	ldr	r1, [pc, #148]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	600b      	str	r3, [r1, #0]
 80062d4:	e015      	b.n	8006302 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062d6:	4b24      	ldr	r3, [pc, #144]	; (8006368 <HAL_RCC_OscConfig+0x244>)
 80062d8:	2200      	movs	r2, #0
 80062da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062dc:	f7fe fd2c 	bl	8004d38 <HAL_GetTick>
 80062e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062e4:	f7fe fd28 	bl	8004d38 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e187      	b.n	8006606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062f6:	4b1b      	ldr	r3, [pc, #108]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f0      	bne.n	80062e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d036      	beq.n	800637c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d016      	beq.n	8006344 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006316:	4b15      	ldr	r3, [pc, #84]	; (800636c <HAL_RCC_OscConfig+0x248>)
 8006318:	2201      	movs	r2, #1
 800631a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800631c:	f7fe fd0c 	bl	8004d38 <HAL_GetTick>
 8006320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006324:	f7fe fd08 	bl	8004d38 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e167      	b.n	8006606 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006336:	4b0b      	ldr	r3, [pc, #44]	; (8006364 <HAL_RCC_OscConfig+0x240>)
 8006338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0f0      	beq.n	8006324 <HAL_RCC_OscConfig+0x200>
 8006342:	e01b      	b.n	800637c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006344:	4b09      	ldr	r3, [pc, #36]	; (800636c <HAL_RCC_OscConfig+0x248>)
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800634a:	f7fe fcf5 	bl	8004d38 <HAL_GetTick>
 800634e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006350:	e00e      	b.n	8006370 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006352:	f7fe fcf1 	bl	8004d38 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d907      	bls.n	8006370 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e150      	b.n	8006606 <HAL_RCC_OscConfig+0x4e2>
 8006364:	40023800 	.word	0x40023800
 8006368:	42470000 	.word	0x42470000
 800636c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006370:	4b88      	ldr	r3, [pc, #544]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 8006372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1ea      	bne.n	8006352 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 8097 	beq.w	80064b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800638a:	2300      	movs	r3, #0
 800638c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800638e:	4b81      	ldr	r3, [pc, #516]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10f      	bne.n	80063ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800639a:	2300      	movs	r3, #0
 800639c:	60bb      	str	r3, [r7, #8]
 800639e:	4b7d      	ldr	r3, [pc, #500]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	4a7c      	ldr	r2, [pc, #496]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 80063a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a8:	6413      	str	r3, [r2, #64]	; 0x40
 80063aa:	4b7a      	ldr	r3, [pc, #488]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b2:	60bb      	str	r3, [r7, #8]
 80063b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063b6:	2301      	movs	r3, #1
 80063b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ba:	4b77      	ldr	r3, [pc, #476]	; (8006598 <HAL_RCC_OscConfig+0x474>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d118      	bne.n	80063f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063c6:	4b74      	ldr	r3, [pc, #464]	; (8006598 <HAL_RCC_OscConfig+0x474>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a73      	ldr	r2, [pc, #460]	; (8006598 <HAL_RCC_OscConfig+0x474>)
 80063cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063d2:	f7fe fcb1 	bl	8004d38 <HAL_GetTick>
 80063d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063d8:	e008      	b.n	80063ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063da:	f7fe fcad 	bl	8004d38 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d901      	bls.n	80063ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e10c      	b.n	8006606 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ec:	4b6a      	ldr	r3, [pc, #424]	; (8006598 <HAL_RCC_OscConfig+0x474>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0f0      	beq.n	80063da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d106      	bne.n	800640e <HAL_RCC_OscConfig+0x2ea>
 8006400:	4b64      	ldr	r3, [pc, #400]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 8006402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006404:	4a63      	ldr	r2, [pc, #396]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	6713      	str	r3, [r2, #112]	; 0x70
 800640c:	e01c      	b.n	8006448 <HAL_RCC_OscConfig+0x324>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	2b05      	cmp	r3, #5
 8006414:	d10c      	bne.n	8006430 <HAL_RCC_OscConfig+0x30c>
 8006416:	4b5f      	ldr	r3, [pc, #380]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 8006418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641a:	4a5e      	ldr	r2, [pc, #376]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 800641c:	f043 0304 	orr.w	r3, r3, #4
 8006420:	6713      	str	r3, [r2, #112]	; 0x70
 8006422:	4b5c      	ldr	r3, [pc, #368]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 8006424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006426:	4a5b      	ldr	r2, [pc, #364]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 8006428:	f043 0301 	orr.w	r3, r3, #1
 800642c:	6713      	str	r3, [r2, #112]	; 0x70
 800642e:	e00b      	b.n	8006448 <HAL_RCC_OscConfig+0x324>
 8006430:	4b58      	ldr	r3, [pc, #352]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 8006432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006434:	4a57      	ldr	r2, [pc, #348]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 8006436:	f023 0301 	bic.w	r3, r3, #1
 800643a:	6713      	str	r3, [r2, #112]	; 0x70
 800643c:	4b55      	ldr	r3, [pc, #340]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 800643e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006440:	4a54      	ldr	r2, [pc, #336]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 8006442:	f023 0304 	bic.w	r3, r3, #4
 8006446:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d015      	beq.n	800647c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006450:	f7fe fc72 	bl	8004d38 <HAL_GetTick>
 8006454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006456:	e00a      	b.n	800646e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006458:	f7fe fc6e 	bl	8004d38 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	f241 3288 	movw	r2, #5000	; 0x1388
 8006466:	4293      	cmp	r3, r2
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e0cb      	b.n	8006606 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800646e:	4b49      	ldr	r3, [pc, #292]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 8006470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0ee      	beq.n	8006458 <HAL_RCC_OscConfig+0x334>
 800647a:	e014      	b.n	80064a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800647c:	f7fe fc5c 	bl	8004d38 <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006482:	e00a      	b.n	800649a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006484:	f7fe fc58 	bl	8004d38 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006492:	4293      	cmp	r3, r2
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e0b5      	b.n	8006606 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800649a:	4b3e      	ldr	r3, [pc, #248]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 800649c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1ee      	bne.n	8006484 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064a6:	7dfb      	ldrb	r3, [r7, #23]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d105      	bne.n	80064b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ac:	4b39      	ldr	r3, [pc, #228]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 80064ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b0:	4a38      	ldr	r2, [pc, #224]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 80064b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 80a1 	beq.w	8006604 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064c2:	4b34      	ldr	r3, [pc, #208]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 030c 	and.w	r3, r3, #12
 80064ca:	2b08      	cmp	r3, #8
 80064cc:	d05c      	beq.n	8006588 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d141      	bne.n	800655a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064d6:	4b31      	ldr	r3, [pc, #196]	; (800659c <HAL_RCC_OscConfig+0x478>)
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064dc:	f7fe fc2c 	bl	8004d38 <HAL_GetTick>
 80064e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064e2:	e008      	b.n	80064f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064e4:	f7fe fc28 	bl	8004d38 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e087      	b.n	8006606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064f6:	4b27      	ldr	r3, [pc, #156]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1f0      	bne.n	80064e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	69da      	ldr	r2, [r3, #28]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	431a      	orrs	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	019b      	lsls	r3, r3, #6
 8006512:	431a      	orrs	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006518:	085b      	lsrs	r3, r3, #1
 800651a:	3b01      	subs	r3, #1
 800651c:	041b      	lsls	r3, r3, #16
 800651e:	431a      	orrs	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	061b      	lsls	r3, r3, #24
 8006526:	491b      	ldr	r1, [pc, #108]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 8006528:	4313      	orrs	r3, r2
 800652a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800652c:	4b1b      	ldr	r3, [pc, #108]	; (800659c <HAL_RCC_OscConfig+0x478>)
 800652e:	2201      	movs	r2, #1
 8006530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006532:	f7fe fc01 	bl	8004d38 <HAL_GetTick>
 8006536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006538:	e008      	b.n	800654c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800653a:	f7fe fbfd 	bl	8004d38 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	2b02      	cmp	r3, #2
 8006546:	d901      	bls.n	800654c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e05c      	b.n	8006606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800654c:	4b11      	ldr	r3, [pc, #68]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d0f0      	beq.n	800653a <HAL_RCC_OscConfig+0x416>
 8006558:	e054      	b.n	8006604 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800655a:	4b10      	ldr	r3, [pc, #64]	; (800659c <HAL_RCC_OscConfig+0x478>)
 800655c:	2200      	movs	r2, #0
 800655e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006560:	f7fe fbea 	bl	8004d38 <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006568:	f7fe fbe6 	bl	8004d38 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e045      	b.n	8006606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800657a:	4b06      	ldr	r3, [pc, #24]	; (8006594 <HAL_RCC_OscConfig+0x470>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f0      	bne.n	8006568 <HAL_RCC_OscConfig+0x444>
 8006586:	e03d      	b.n	8006604 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d107      	bne.n	80065a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e038      	b.n	8006606 <HAL_RCC_OscConfig+0x4e2>
 8006594:	40023800 	.word	0x40023800
 8006598:	40007000 	.word	0x40007000
 800659c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065a0:	4b1b      	ldr	r3, [pc, #108]	; (8006610 <HAL_RCC_OscConfig+0x4ec>)
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d028      	beq.n	8006600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d121      	bne.n	8006600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d11a      	bne.n	8006600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065d0:	4013      	ands	r3, r2
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80065d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065d8:	4293      	cmp	r3, r2
 80065da:	d111      	bne.n	8006600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e6:	085b      	lsrs	r3, r3, #1
 80065e8:	3b01      	subs	r3, #1
 80065ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d107      	bne.n	8006600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d001      	beq.n	8006604 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e000      	b.n	8006606 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	40023800 	.word	0x40023800

08006614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e0cc      	b.n	80067c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006628:	4b68      	ldr	r3, [pc, #416]	; (80067cc <HAL_RCC_ClockConfig+0x1b8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d90c      	bls.n	8006650 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006636:	4b65      	ldr	r3, [pc, #404]	; (80067cc <HAL_RCC_ClockConfig+0x1b8>)
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800663e:	4b63      	ldr	r3, [pc, #396]	; (80067cc <HAL_RCC_ClockConfig+0x1b8>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	429a      	cmp	r2, r3
 800664a:	d001      	beq.n	8006650 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e0b8      	b.n	80067c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d020      	beq.n	800669e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b00      	cmp	r3, #0
 8006666:	d005      	beq.n	8006674 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006668:	4b59      	ldr	r3, [pc, #356]	; (80067d0 <HAL_RCC_ClockConfig+0x1bc>)
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	4a58      	ldr	r2, [pc, #352]	; (80067d0 <HAL_RCC_ClockConfig+0x1bc>)
 800666e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006672:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d005      	beq.n	800668c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006680:	4b53      	ldr	r3, [pc, #332]	; (80067d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	4a52      	ldr	r2, [pc, #328]	; (80067d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006686:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800668a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800668c:	4b50      	ldr	r3, [pc, #320]	; (80067d0 <HAL_RCC_ClockConfig+0x1bc>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	494d      	ldr	r1, [pc, #308]	; (80067d0 <HAL_RCC_ClockConfig+0x1bc>)
 800669a:	4313      	orrs	r3, r2
 800669c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d044      	beq.n	8006734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d107      	bne.n	80066c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066b2:	4b47      	ldr	r3, [pc, #284]	; (80067d0 <HAL_RCC_ClockConfig+0x1bc>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d119      	bne.n	80066f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e07f      	b.n	80067c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d003      	beq.n	80066d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	d107      	bne.n	80066e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066d2:	4b3f      	ldr	r3, [pc, #252]	; (80067d0 <HAL_RCC_ClockConfig+0x1bc>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d109      	bne.n	80066f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e06f      	b.n	80067c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066e2:	4b3b      	ldr	r3, [pc, #236]	; (80067d0 <HAL_RCC_ClockConfig+0x1bc>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e067      	b.n	80067c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066f2:	4b37      	ldr	r3, [pc, #220]	; (80067d0 <HAL_RCC_ClockConfig+0x1bc>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f023 0203 	bic.w	r2, r3, #3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	4934      	ldr	r1, [pc, #208]	; (80067d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006700:	4313      	orrs	r3, r2
 8006702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006704:	f7fe fb18 	bl	8004d38 <HAL_GetTick>
 8006708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800670a:	e00a      	b.n	8006722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800670c:	f7fe fb14 	bl	8004d38 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	f241 3288 	movw	r2, #5000	; 0x1388
 800671a:	4293      	cmp	r3, r2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e04f      	b.n	80067c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006722:	4b2b      	ldr	r3, [pc, #172]	; (80067d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 020c 	and.w	r2, r3, #12
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	429a      	cmp	r2, r3
 8006732:	d1eb      	bne.n	800670c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006734:	4b25      	ldr	r3, [pc, #148]	; (80067cc <HAL_RCC_ClockConfig+0x1b8>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	429a      	cmp	r2, r3
 8006740:	d20c      	bcs.n	800675c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006742:	4b22      	ldr	r3, [pc, #136]	; (80067cc <HAL_RCC_ClockConfig+0x1b8>)
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800674a:	4b20      	ldr	r3, [pc, #128]	; (80067cc <HAL_RCC_ClockConfig+0x1b8>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	429a      	cmp	r2, r3
 8006756:	d001      	beq.n	800675c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e032      	b.n	80067c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	d008      	beq.n	800677a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006768:	4b19      	ldr	r3, [pc, #100]	; (80067d0 <HAL_RCC_ClockConfig+0x1bc>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	4916      	ldr	r1, [pc, #88]	; (80067d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006776:	4313      	orrs	r3, r2
 8006778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0308 	and.w	r3, r3, #8
 8006782:	2b00      	cmp	r3, #0
 8006784:	d009      	beq.n	800679a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006786:	4b12      	ldr	r3, [pc, #72]	; (80067d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	490e      	ldr	r1, [pc, #56]	; (80067d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006796:	4313      	orrs	r3, r2
 8006798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800679a:	f000 f821 	bl	80067e0 <HAL_RCC_GetSysClockFreq>
 800679e:	4602      	mov	r2, r0
 80067a0:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <HAL_RCC_ClockConfig+0x1bc>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	091b      	lsrs	r3, r3, #4
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	490a      	ldr	r1, [pc, #40]	; (80067d4 <HAL_RCC_ClockConfig+0x1c0>)
 80067ac:	5ccb      	ldrb	r3, [r1, r3]
 80067ae:	fa22 f303 	lsr.w	r3, r2, r3
 80067b2:	4a09      	ldr	r2, [pc, #36]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 80067b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067b6:	4b09      	ldr	r3, [pc, #36]	; (80067dc <HAL_RCC_ClockConfig+0x1c8>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe fa78 	bl	8004cb0 <HAL_InitTick>

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	40023c00 	.word	0x40023c00
 80067d0:	40023800 	.word	0x40023800
 80067d4:	0800e898 	.word	0x0800e898
 80067d8:	20000000 	.word	0x20000000
 80067dc:	20000004 	.word	0x20000004

080067e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067e4:	b090      	sub	sp, #64	; 0x40
 80067e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	637b      	str	r3, [r7, #52]	; 0x34
 80067ec:	2300      	movs	r3, #0
 80067ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067f0:	2300      	movs	r3, #0
 80067f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067f8:	4b59      	ldr	r3, [pc, #356]	; (8006960 <HAL_RCC_GetSysClockFreq+0x180>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f003 030c 	and.w	r3, r3, #12
 8006800:	2b08      	cmp	r3, #8
 8006802:	d00d      	beq.n	8006820 <HAL_RCC_GetSysClockFreq+0x40>
 8006804:	2b08      	cmp	r3, #8
 8006806:	f200 80a1 	bhi.w	800694c <HAL_RCC_GetSysClockFreq+0x16c>
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_RCC_GetSysClockFreq+0x34>
 800680e:	2b04      	cmp	r3, #4
 8006810:	d003      	beq.n	800681a <HAL_RCC_GetSysClockFreq+0x3a>
 8006812:	e09b      	b.n	800694c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006814:	4b53      	ldr	r3, [pc, #332]	; (8006964 <HAL_RCC_GetSysClockFreq+0x184>)
 8006816:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006818:	e09b      	b.n	8006952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800681a:	4b53      	ldr	r3, [pc, #332]	; (8006968 <HAL_RCC_GetSysClockFreq+0x188>)
 800681c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800681e:	e098      	b.n	8006952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006820:	4b4f      	ldr	r3, [pc, #316]	; (8006960 <HAL_RCC_GetSysClockFreq+0x180>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006828:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800682a:	4b4d      	ldr	r3, [pc, #308]	; (8006960 <HAL_RCC_GetSysClockFreq+0x180>)
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d028      	beq.n	8006888 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006836:	4b4a      	ldr	r3, [pc, #296]	; (8006960 <HAL_RCC_GetSysClockFreq+0x180>)
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	099b      	lsrs	r3, r3, #6
 800683c:	2200      	movs	r2, #0
 800683e:	623b      	str	r3, [r7, #32]
 8006840:	627a      	str	r2, [r7, #36]	; 0x24
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006848:	2100      	movs	r1, #0
 800684a:	4b47      	ldr	r3, [pc, #284]	; (8006968 <HAL_RCC_GetSysClockFreq+0x188>)
 800684c:	fb03 f201 	mul.w	r2, r3, r1
 8006850:	2300      	movs	r3, #0
 8006852:	fb00 f303 	mul.w	r3, r0, r3
 8006856:	4413      	add	r3, r2
 8006858:	4a43      	ldr	r2, [pc, #268]	; (8006968 <HAL_RCC_GetSysClockFreq+0x188>)
 800685a:	fba0 1202 	umull	r1, r2, r0, r2
 800685e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006860:	460a      	mov	r2, r1
 8006862:	62ba      	str	r2, [r7, #40]	; 0x28
 8006864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006866:	4413      	add	r3, r2
 8006868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800686a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686c:	2200      	movs	r2, #0
 800686e:	61bb      	str	r3, [r7, #24]
 8006870:	61fa      	str	r2, [r7, #28]
 8006872:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006876:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800687a:	f7fa f9b5 	bl	8000be8 <__aeabi_uldivmod>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4613      	mov	r3, r2
 8006884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006886:	e053      	b.n	8006930 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006888:	4b35      	ldr	r3, [pc, #212]	; (8006960 <HAL_RCC_GetSysClockFreq+0x180>)
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	099b      	lsrs	r3, r3, #6
 800688e:	2200      	movs	r2, #0
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	617a      	str	r2, [r7, #20]
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800689a:	f04f 0b00 	mov.w	fp, #0
 800689e:	4652      	mov	r2, sl
 80068a0:	465b      	mov	r3, fp
 80068a2:	f04f 0000 	mov.w	r0, #0
 80068a6:	f04f 0100 	mov.w	r1, #0
 80068aa:	0159      	lsls	r1, r3, #5
 80068ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068b0:	0150      	lsls	r0, r2, #5
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	ebb2 080a 	subs.w	r8, r2, sl
 80068ba:	eb63 090b 	sbc.w	r9, r3, fp
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	f04f 0300 	mov.w	r3, #0
 80068c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80068ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80068ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80068d2:	ebb2 0408 	subs.w	r4, r2, r8
 80068d6:	eb63 0509 	sbc.w	r5, r3, r9
 80068da:	f04f 0200 	mov.w	r2, #0
 80068de:	f04f 0300 	mov.w	r3, #0
 80068e2:	00eb      	lsls	r3, r5, #3
 80068e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068e8:	00e2      	lsls	r2, r4, #3
 80068ea:	4614      	mov	r4, r2
 80068ec:	461d      	mov	r5, r3
 80068ee:	eb14 030a 	adds.w	r3, r4, sl
 80068f2:	603b      	str	r3, [r7, #0]
 80068f4:	eb45 030b 	adc.w	r3, r5, fp
 80068f8:	607b      	str	r3, [r7, #4]
 80068fa:	f04f 0200 	mov.w	r2, #0
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006906:	4629      	mov	r1, r5
 8006908:	028b      	lsls	r3, r1, #10
 800690a:	4621      	mov	r1, r4
 800690c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006910:	4621      	mov	r1, r4
 8006912:	028a      	lsls	r2, r1, #10
 8006914:	4610      	mov	r0, r2
 8006916:	4619      	mov	r1, r3
 8006918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691a:	2200      	movs	r2, #0
 800691c:	60bb      	str	r3, [r7, #8]
 800691e:	60fa      	str	r2, [r7, #12]
 8006920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006924:	f7fa f960 	bl	8000be8 <__aeabi_uldivmod>
 8006928:	4602      	mov	r2, r0
 800692a:	460b      	mov	r3, r1
 800692c:	4613      	mov	r3, r2
 800692e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006930:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <HAL_RCC_GetSysClockFreq+0x180>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	0c1b      	lsrs	r3, r3, #16
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	3301      	adds	r3, #1
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006940:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	fbb2 f3f3 	udiv	r3, r2, r3
 8006948:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800694a:	e002      	b.n	8006952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800694c:	4b05      	ldr	r3, [pc, #20]	; (8006964 <HAL_RCC_GetSysClockFreq+0x184>)
 800694e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006954:	4618      	mov	r0, r3
 8006956:	3740      	adds	r7, #64	; 0x40
 8006958:	46bd      	mov	sp, r7
 800695a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800695e:	bf00      	nop
 8006960:	40023800 	.word	0x40023800
 8006964:	00f42400 	.word	0x00f42400
 8006968:	017d7840 	.word	0x017d7840

0800696c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006970:	4b03      	ldr	r3, [pc, #12]	; (8006980 <HAL_RCC_GetHCLKFreq+0x14>)
 8006972:	681b      	ldr	r3, [r3, #0]
}
 8006974:	4618      	mov	r0, r3
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	20000000 	.word	0x20000000

08006984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006988:	f7ff fff0 	bl	800696c <HAL_RCC_GetHCLKFreq>
 800698c:	4602      	mov	r2, r0
 800698e:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	0a9b      	lsrs	r3, r3, #10
 8006994:	f003 0307 	and.w	r3, r3, #7
 8006998:	4903      	ldr	r1, [pc, #12]	; (80069a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800699a:	5ccb      	ldrb	r3, [r1, r3]
 800699c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	40023800 	.word	0x40023800
 80069a8:	0800e8a8 	.word	0x0800e8a8

080069ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069b0:	f7ff ffdc 	bl	800696c <HAL_RCC_GetHCLKFreq>
 80069b4:	4602      	mov	r2, r0
 80069b6:	4b05      	ldr	r3, [pc, #20]	; (80069cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	0b5b      	lsrs	r3, r3, #13
 80069bc:	f003 0307 	and.w	r3, r3, #7
 80069c0:	4903      	ldr	r1, [pc, #12]	; (80069d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069c2:	5ccb      	ldrb	r3, [r1, r3]
 80069c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	40023800 	.word	0x40023800
 80069d0:	0800e8a8 	.word	0x0800e8a8

080069d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e03f      	b.n	8006a66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d106      	bne.n	8006a00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7fd ff0e 	bl	800481c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2224      	movs	r2, #36	; 0x24
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fe7d 	bl	8007718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	691a      	ldr	r2, [r3, #16]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	695a      	ldr	r2, [r3, #20]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b08a      	sub	sp, #40	; 0x28
 8006a72:	af02      	add	r7, sp, #8
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	603b      	str	r3, [r7, #0]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	d17c      	bne.n	8006b88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <HAL_UART_Transmit+0x2c>
 8006a94:	88fb      	ldrh	r3, [r7, #6]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e075      	b.n	8006b8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d101      	bne.n	8006aac <HAL_UART_Transmit+0x3e>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e06e      	b.n	8006b8a <HAL_UART_Transmit+0x11c>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2221      	movs	r2, #33	; 0x21
 8006abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ac2:	f7fe f939 	bl	8004d38 <HAL_GetTick>
 8006ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	88fa      	ldrh	r2, [r7, #6]
 8006acc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	88fa      	ldrh	r2, [r7, #6]
 8006ad2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006adc:	d108      	bne.n	8006af0 <HAL_UART_Transmit+0x82>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d104      	bne.n	8006af0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	e003      	b.n	8006af8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006af4:	2300      	movs	r3, #0
 8006af6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b00:	e02a      	b.n	8006b58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2180      	movs	r1, #128	; 0x80
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 fbc1 	bl	8007294 <UART_WaitOnFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e036      	b.n	8006b8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10b      	bne.n	8006b3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	3302      	adds	r3, #2
 8006b36:	61bb      	str	r3, [r7, #24]
 8006b38:	e007      	b.n	8006b4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	781a      	ldrb	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	3301      	adds	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1cf      	bne.n	8006b02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2140      	movs	r1, #64	; 0x40
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 fb91 	bl	8007294 <UART_WaitOnFlagUntilTimeout>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e006      	b.n	8006b8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	e000      	b.n	8006b8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006b88:	2302      	movs	r3, #2
  }
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3720      	adds	r7, #32
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b08a      	sub	sp, #40	; 0x28
 8006b96:	af02      	add	r7, sp, #8
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	603b      	str	r3, [r7, #0]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b20      	cmp	r3, #32
 8006bb0:	f040 808c 	bne.w	8006ccc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <HAL_UART_Receive+0x2e>
 8006bba:	88fb      	ldrh	r3, [r7, #6]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e084      	b.n	8006cce <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_UART_Receive+0x40>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e07d      	b.n	8006cce <HAL_UART_Receive+0x13c>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2222      	movs	r2, #34	; 0x22
 8006be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bee:	f7fe f8a3 	bl	8004d38 <HAL_GetTick>
 8006bf2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	88fa      	ldrh	r2, [r7, #6]
 8006bf8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	88fa      	ldrh	r2, [r7, #6]
 8006bfe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c08:	d108      	bne.n	8006c1c <HAL_UART_Receive+0x8a>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d104      	bne.n	8006c1c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	61bb      	str	r3, [r7, #24]
 8006c1a:	e003      	b.n	8006c24 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c20:	2300      	movs	r3, #0
 8006c22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006c2c:	e043      	b.n	8006cb6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2200      	movs	r2, #0
 8006c36:	2120      	movs	r1, #32
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 fb2b 	bl	8007294 <UART_WaitOnFlagUntilTimeout>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e042      	b.n	8006cce <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10c      	bne.n	8006c68 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	3302      	adds	r3, #2
 8006c64:	61bb      	str	r3, [r7, #24]
 8006c66:	e01f      	b.n	8006ca8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c70:	d007      	beq.n	8006c82 <HAL_UART_Receive+0xf0>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10a      	bne.n	8006c90 <HAL_UART_Receive+0xfe>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d106      	bne.n	8006c90 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	e008      	b.n	8006ca2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1b6      	bne.n	8006c2e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	e000      	b.n	8006cce <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006ccc:	2302      	movs	r3, #2
  }
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3720      	adds	r7, #32
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	d11d      	bne.n	8006d2c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <HAL_UART_Receive_IT+0x26>
 8006cf6:	88fb      	ldrh	r3, [r7, #6]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e016      	b.n	8006d2e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d101      	bne.n	8006d0e <HAL_UART_Receive_IT+0x38>
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	e00f      	b.n	8006d2e <HAL_UART_Receive_IT+0x58>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d1c:	88fb      	ldrh	r3, [r7, #6]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68b9      	ldr	r1, [r7, #8]
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 fb24 	bl	8007370 <UART_Start_Receive_IT>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	e000      	b.n	8006d2e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006d2c:	2302      	movs	r3, #2
  }
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
	...

08006d38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b0ba      	sub	sp, #232	; 0xe8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d6e:	f003 030f 	and.w	r3, r3, #15
 8006d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10f      	bne.n	8006d9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d009      	beq.n	8006d9e <HAL_UART_IRQHandler+0x66>
 8006d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fc03 	bl	80075a2 <UART_Receive_IT>
      return;
 8006d9c:	e256      	b.n	800724c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 80de 	beq.w	8006f64 <HAL_UART_IRQHandler+0x22c>
 8006da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d106      	bne.n	8006dc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 80d1 	beq.w	8006f64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <HAL_UART_IRQHandler+0xae>
 8006dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d005      	beq.n	8006de6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	f043 0201 	orr.w	r2, r3, #1
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dea:	f003 0304 	and.w	r3, r3, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00b      	beq.n	8006e0a <HAL_UART_IRQHandler+0xd2>
 8006df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d005      	beq.n	8006e0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	f043 0202 	orr.w	r2, r3, #2
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00b      	beq.n	8006e2e <HAL_UART_IRQHandler+0xf6>
 8006e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d005      	beq.n	8006e2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e26:	f043 0204 	orr.w	r2, r3, #4
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e32:	f003 0308 	and.w	r3, r3, #8
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d011      	beq.n	8006e5e <HAL_UART_IRQHandler+0x126>
 8006e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e3e:	f003 0320 	and.w	r3, r3, #32
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d105      	bne.n	8006e52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d005      	beq.n	8006e5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	f043 0208 	orr.w	r2, r3, #8
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 81ed 	beq.w	8007242 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e6c:	f003 0320 	and.w	r3, r3, #32
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d008      	beq.n	8006e86 <HAL_UART_IRQHandler+0x14e>
 8006e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e78:	f003 0320 	and.w	r3, r3, #32
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fb8e 	bl	80075a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e90:	2b40      	cmp	r3, #64	; 0x40
 8006e92:	bf0c      	ite	eq
 8006e94:	2301      	moveq	r3, #1
 8006e96:	2300      	movne	r3, #0
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	f003 0308 	and.w	r3, r3, #8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d103      	bne.n	8006eb2 <HAL_UART_IRQHandler+0x17a>
 8006eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d04f      	beq.n	8006f52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fa96 	bl	80073e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec2:	2b40      	cmp	r3, #64	; 0x40
 8006ec4:	d141      	bne.n	8006f4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3314      	adds	r3, #20
 8006ecc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3314      	adds	r3, #20
 8006eee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ef2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006efe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1d9      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d013      	beq.n	8006f42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	4a7d      	ldr	r2, [pc, #500]	; (8007114 <HAL_UART_IRQHandler+0x3dc>)
 8006f20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe fba4 	bl	8005674 <HAL_DMA_Abort_IT>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d016      	beq.n	8006f60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f40:	e00e      	b.n	8006f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f990 	bl	8007268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f48:	e00a      	b.n	8006f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f98c 	bl	8007268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f50:	e006      	b.n	8006f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f988 	bl	8007268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006f5e:	e170      	b.n	8007242 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f60:	bf00      	nop
    return;
 8006f62:	e16e      	b.n	8007242 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	f040 814a 	bne.w	8007202 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f72:	f003 0310 	and.w	r3, r3, #16
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 8143 	beq.w	8007202 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f80:	f003 0310 	and.w	r3, r3, #16
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 813c 	beq.w	8007202 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60bb      	str	r3, [r7, #8]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	60bb      	str	r3, [r7, #8]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	60bb      	str	r3, [r7, #8]
 8006f9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006faa:	2b40      	cmp	r3, #64	; 0x40
 8006fac:	f040 80b4 	bne.w	8007118 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 8140 	beq.w	8007246 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	f080 8139 	bcs.w	8007246 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fe6:	f000 8088 	beq.w	80070fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	330c      	adds	r3, #12
 8006ff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007008:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	330c      	adds	r3, #12
 8007012:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007016:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800701a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007022:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800702e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1d9      	bne.n	8006fea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3314      	adds	r3, #20
 800703c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007048:	f023 0301 	bic.w	r3, r3, #1
 800704c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3314      	adds	r3, #20
 8007056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800705a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800705e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007062:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007066:	e841 2300 	strex	r3, r2, [r1]
 800706a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800706c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1e1      	bne.n	8007036 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3314      	adds	r3, #20
 8007078:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007088:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3314      	adds	r3, #20
 8007092:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007096:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007098:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800709c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800709e:	e841 2300 	strex	r3, r2, [r1]
 80070a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1e3      	bne.n	8007072 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2220      	movs	r2, #32
 80070ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	330c      	adds	r3, #12
 80070be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ca:	f023 0310 	bic.w	r3, r3, #16
 80070ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	330c      	adds	r3, #12
 80070d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80070dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80070de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070e4:	e841 2300 	strex	r3, r2, [r1]
 80070e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1e3      	bne.n	80070b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7fe fa4d 	bl	8005594 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007102:	b29b      	uxth	r3, r3
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	b29b      	uxth	r3, r3
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f8b6 	bl	800727c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007110:	e099      	b.n	8007246 <HAL_UART_IRQHandler+0x50e>
 8007112:	bf00      	nop
 8007114:	080074ab 	.word	0x080074ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007120:	b29b      	uxth	r3, r3
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800712c:	b29b      	uxth	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 808b 	beq.w	800724a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 8086 	beq.w	800724a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	330c      	adds	r3, #12
 8007144:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800714e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007154:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	330c      	adds	r3, #12
 800715e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007162:	647a      	str	r2, [r7, #68]	; 0x44
 8007164:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007168:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e3      	bne.n	800713e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3314      	adds	r3, #20
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	623b      	str	r3, [r7, #32]
   return(result);
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	f023 0301 	bic.w	r3, r3, #1
 800718c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3314      	adds	r3, #20
 8007196:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800719a:	633a      	str	r2, [r7, #48]	; 0x30
 800719c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071a2:	e841 2300 	strex	r3, r2, [r1]
 80071a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1e3      	bne.n	8007176 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	330c      	adds	r3, #12
 80071c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	e853 3f00 	ldrex	r3, [r3]
 80071ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0310 	bic.w	r3, r3, #16
 80071d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	330c      	adds	r3, #12
 80071dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80071e0:	61fa      	str	r2, [r7, #28]
 80071e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	69b9      	ldr	r1, [r7, #24]
 80071e6:	69fa      	ldr	r2, [r7, #28]
 80071e8:	e841 2300 	strex	r3, r2, [r1]
 80071ec:	617b      	str	r3, [r7, #20]
   return(result);
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e3      	bne.n	80071bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f83e 	bl	800727c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007200:	e023      	b.n	800724a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800720a:	2b00      	cmp	r3, #0
 800720c:	d009      	beq.n	8007222 <HAL_UART_IRQHandler+0x4ea>
 800720e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f959 	bl	80074d2 <UART_Transmit_IT>
    return;
 8007220:	e014      	b.n	800724c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00e      	beq.n	800724c <HAL_UART_IRQHandler+0x514>
 800722e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007236:	2b00      	cmp	r3, #0
 8007238:	d008      	beq.n	800724c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f999 	bl	8007572 <UART_EndTransmit_IT>
    return;
 8007240:	e004      	b.n	800724c <HAL_UART_IRQHandler+0x514>
    return;
 8007242:	bf00      	nop
 8007244:	e002      	b.n	800724c <HAL_UART_IRQHandler+0x514>
      return;
 8007246:	bf00      	nop
 8007248:	e000      	b.n	800724c <HAL_UART_IRQHandler+0x514>
      return;
 800724a:	bf00      	nop
  }
}
 800724c:	37e8      	adds	r7, #232	; 0xe8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop

08007254 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b090      	sub	sp, #64	; 0x40
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	4613      	mov	r3, r2
 80072a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072a4:	e050      	b.n	8007348 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072ac:	d04c      	beq.n	8007348 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80072ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d007      	beq.n	80072c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80072b4:	f7fd fd40 	bl	8004d38 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d241      	bcs.n	8007348 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	330c      	adds	r3, #12
 80072ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ce:	e853 3f00 	ldrex	r3, [r3]
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	330c      	adds	r3, #12
 80072e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072e4:	637a      	str	r2, [r7, #52]	; 0x34
 80072e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ec:	e841 2300 	strex	r3, r2, [r1]
 80072f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1e5      	bne.n	80072c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3314      	adds	r3, #20
 80072fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	613b      	str	r3, [r7, #16]
   return(result);
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f023 0301 	bic.w	r3, r3, #1
 800730e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3314      	adds	r3, #20
 8007316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007318:	623a      	str	r2, [r7, #32]
 800731a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	69f9      	ldr	r1, [r7, #28]
 800731e:	6a3a      	ldr	r2, [r7, #32]
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	61bb      	str	r3, [r7, #24]
   return(result);
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e5      	bne.n	80072f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2220      	movs	r2, #32
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2220      	movs	r2, #32
 8007338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e00f      	b.n	8007368 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	4013      	ands	r3, r2
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	429a      	cmp	r2, r3
 8007356:	bf0c      	ite	eq
 8007358:	2301      	moveq	r3, #1
 800735a:	2300      	movne	r3, #0
 800735c:	b2db      	uxtb	r3, r3
 800735e:	461a      	mov	r2, r3
 8007360:	79fb      	ldrb	r3, [r7, #7]
 8007362:	429a      	cmp	r2, r3
 8007364:	d09f      	beq.n	80072a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3740      	adds	r7, #64	; 0x40
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	4613      	mov	r3, r2
 800737c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	88fa      	ldrh	r2, [r7, #6]
 8007388:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	88fa      	ldrh	r2, [r7, #6]
 800738e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2222      	movs	r2, #34	; 0x22
 800739a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073b4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	695a      	ldr	r2, [r3, #20]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f042 0201 	orr.w	r2, r2, #1
 80073c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68da      	ldr	r2, [r3, #12]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f042 0220 	orr.w	r2, r2, #32
 80073d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b095      	sub	sp, #84	; 0x54
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	330c      	adds	r3, #12
 80073f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	330c      	adds	r3, #12
 800740a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800740c:	643a      	str	r2, [r7, #64]	; 0x40
 800740e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e5      	bne.n	80073ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3314      	adds	r3, #20
 8007426:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	e853 3f00 	ldrex	r3, [r3]
 800742e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	f023 0301 	bic.w	r3, r3, #1
 8007436:	64bb      	str	r3, [r7, #72]	; 0x48
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3314      	adds	r3, #20
 800743e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007440:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007448:	e841 2300 	strex	r3, r2, [r1]
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e5      	bne.n	8007420 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007458:	2b01      	cmp	r3, #1
 800745a:	d119      	bne.n	8007490 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	330c      	adds	r3, #12
 8007462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	e853 3f00 	ldrex	r3, [r3]
 800746a:	60bb      	str	r3, [r7, #8]
   return(result);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f023 0310 	bic.w	r3, r3, #16
 8007472:	647b      	str	r3, [r7, #68]	; 0x44
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	330c      	adds	r3, #12
 800747a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800747c:	61ba      	str	r2, [r7, #24]
 800747e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007480:	6979      	ldr	r1, [r7, #20]
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	e841 2300 	strex	r3, r2, [r1]
 8007488:	613b      	str	r3, [r7, #16]
   return(result);
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1e5      	bne.n	800745c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2220      	movs	r2, #32
 8007494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800749e:	bf00      	nop
 80074a0:	3754      	adds	r7, #84	; 0x54
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f7ff fecf 	bl	8007268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074ca:	bf00      	nop
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b085      	sub	sp, #20
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b21      	cmp	r3, #33	; 0x21
 80074e4:	d13e      	bne.n	8007564 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ee:	d114      	bne.n	800751a <UART_Transmit_IT+0x48>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d110      	bne.n	800751a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a1b      	ldr	r3, [r3, #32]
 80074fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800750c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	1c9a      	adds	r2, r3, #2
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	621a      	str	r2, [r3, #32]
 8007518:	e008      	b.n	800752c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	1c59      	adds	r1, r3, #1
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6211      	str	r1, [r2, #32]
 8007524:	781a      	ldrb	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	b29b      	uxth	r3, r3
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	4619      	mov	r1, r3
 800753a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10f      	bne.n	8007560 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68da      	ldr	r2, [r3, #12]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800754e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800755e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	e000      	b.n	8007566 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007564:	2302      	movs	r3, #2
  }
}
 8007566:	4618      	mov	r0, r3
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68da      	ldr	r2, [r3, #12]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007588:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2220      	movs	r2, #32
 800758e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff fe5e 	bl	8007254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b08c      	sub	sp, #48	; 0x30
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b22      	cmp	r3, #34	; 0x22
 80075b4:	f040 80ab 	bne.w	800770e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c0:	d117      	bne.n	80075f2 <UART_Receive_IT+0x50>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d113      	bne.n	80075f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	b29b      	uxth	r3, r3
 80075dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ea:	1c9a      	adds	r2, r3, #2
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	629a      	str	r2, [r3, #40]	; 0x28
 80075f0:	e026      	b.n	8007640 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80075f8:	2300      	movs	r3, #0
 80075fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007604:	d007      	beq.n	8007616 <UART_Receive_IT+0x74>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10a      	bne.n	8007624 <UART_Receive_IT+0x82>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d106      	bne.n	8007624 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	b2da      	uxtb	r2, r3
 800761e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	e008      	b.n	8007636 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	b2db      	uxtb	r3, r3
 800762c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007630:	b2da      	uxtb	r2, r3
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007644:	b29b      	uxth	r3, r3
 8007646:	3b01      	subs	r3, #1
 8007648:	b29b      	uxth	r3, r3
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	4619      	mov	r1, r3
 800764e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007650:	2b00      	cmp	r3, #0
 8007652:	d15a      	bne.n	800770a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68da      	ldr	r2, [r3, #12]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 0220 	bic.w	r2, r2, #32
 8007662:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007672:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	695a      	ldr	r2, [r3, #20]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f022 0201 	bic.w	r2, r2, #1
 8007682:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2220      	movs	r2, #32
 8007688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007690:	2b01      	cmp	r3, #1
 8007692:	d135      	bne.n	8007700 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	330c      	adds	r3, #12
 80076a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	e853 3f00 	ldrex	r3, [r3]
 80076a8:	613b      	str	r3, [r7, #16]
   return(result);
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	f023 0310 	bic.w	r3, r3, #16
 80076b0:	627b      	str	r3, [r7, #36]	; 0x24
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	330c      	adds	r3, #12
 80076b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ba:	623a      	str	r2, [r7, #32]
 80076bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	69f9      	ldr	r1, [r7, #28]
 80076c0:	6a3a      	ldr	r2, [r7, #32]
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e5      	bne.n	800769a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0310 	and.w	r3, r3, #16
 80076d8:	2b10      	cmp	r3, #16
 80076da:	d10a      	bne.n	80076f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076dc:	2300      	movs	r3, #0
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff fdbf 	bl	800727c <HAL_UARTEx_RxEventCallback>
 80076fe:	e002      	b.n	8007706 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7fb f955 	bl	80029b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	e002      	b.n	8007710 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	e000      	b.n	8007710 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800770e:	2302      	movs	r3, #2
  }
}
 8007710:	4618      	mov	r0, r3
 8007712:	3730      	adds	r7, #48	; 0x30
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800771c:	b0c0      	sub	sp, #256	; 0x100
 800771e:	af00      	add	r7, sp, #0
 8007720:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007734:	68d9      	ldr	r1, [r3, #12]
 8007736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	ea40 0301 	orr.w	r3, r0, r1
 8007740:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	431a      	orrs	r2, r3
 8007750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	431a      	orrs	r2, r3
 8007758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	4313      	orrs	r3, r2
 8007760:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007770:	f021 010c 	bic.w	r1, r1, #12
 8007774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800777e:	430b      	orrs	r3, r1
 8007780:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800778e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007792:	6999      	ldr	r1, [r3, #24]
 8007794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	ea40 0301 	orr.w	r3, r0, r1
 800779e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	4b8f      	ldr	r3, [pc, #572]	; (80079e4 <UART_SetConfig+0x2cc>)
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d005      	beq.n	80077b8 <UART_SetConfig+0xa0>
 80077ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	4b8d      	ldr	r3, [pc, #564]	; (80079e8 <UART_SetConfig+0x2d0>)
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d104      	bne.n	80077c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077b8:	f7ff f8f8 	bl	80069ac <HAL_RCC_GetPCLK2Freq>
 80077bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80077c0:	e003      	b.n	80077ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077c2:	f7ff f8df 	bl	8006984 <HAL_RCC_GetPCLK1Freq>
 80077c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077d4:	f040 810c 	bne.w	80079f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077dc:	2200      	movs	r2, #0
 80077de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80077e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80077ea:	4622      	mov	r2, r4
 80077ec:	462b      	mov	r3, r5
 80077ee:	1891      	adds	r1, r2, r2
 80077f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80077f2:	415b      	adcs	r3, r3
 80077f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80077fa:	4621      	mov	r1, r4
 80077fc:	eb12 0801 	adds.w	r8, r2, r1
 8007800:	4629      	mov	r1, r5
 8007802:	eb43 0901 	adc.w	r9, r3, r1
 8007806:	f04f 0200 	mov.w	r2, #0
 800780a:	f04f 0300 	mov.w	r3, #0
 800780e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800781a:	4690      	mov	r8, r2
 800781c:	4699      	mov	r9, r3
 800781e:	4623      	mov	r3, r4
 8007820:	eb18 0303 	adds.w	r3, r8, r3
 8007824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007828:	462b      	mov	r3, r5
 800782a:	eb49 0303 	adc.w	r3, r9, r3
 800782e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800783e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007842:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007846:	460b      	mov	r3, r1
 8007848:	18db      	adds	r3, r3, r3
 800784a:	653b      	str	r3, [r7, #80]	; 0x50
 800784c:	4613      	mov	r3, r2
 800784e:	eb42 0303 	adc.w	r3, r2, r3
 8007852:	657b      	str	r3, [r7, #84]	; 0x54
 8007854:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007858:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800785c:	f7f9 f9c4 	bl	8000be8 <__aeabi_uldivmod>
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	4b61      	ldr	r3, [pc, #388]	; (80079ec <UART_SetConfig+0x2d4>)
 8007866:	fba3 2302 	umull	r2, r3, r3, r2
 800786a:	095b      	lsrs	r3, r3, #5
 800786c:	011c      	lsls	r4, r3, #4
 800786e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007872:	2200      	movs	r2, #0
 8007874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007878:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800787c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007880:	4642      	mov	r2, r8
 8007882:	464b      	mov	r3, r9
 8007884:	1891      	adds	r1, r2, r2
 8007886:	64b9      	str	r1, [r7, #72]	; 0x48
 8007888:	415b      	adcs	r3, r3
 800788a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800788c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007890:	4641      	mov	r1, r8
 8007892:	eb12 0a01 	adds.w	sl, r2, r1
 8007896:	4649      	mov	r1, r9
 8007898:	eb43 0b01 	adc.w	fp, r3, r1
 800789c:	f04f 0200 	mov.w	r2, #0
 80078a0:	f04f 0300 	mov.w	r3, #0
 80078a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078b0:	4692      	mov	sl, r2
 80078b2:	469b      	mov	fp, r3
 80078b4:	4643      	mov	r3, r8
 80078b6:	eb1a 0303 	adds.w	r3, sl, r3
 80078ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078be:	464b      	mov	r3, r9
 80078c0:	eb4b 0303 	adc.w	r3, fp, r3
 80078c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80078d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80078dc:	460b      	mov	r3, r1
 80078de:	18db      	adds	r3, r3, r3
 80078e0:	643b      	str	r3, [r7, #64]	; 0x40
 80078e2:	4613      	mov	r3, r2
 80078e4:	eb42 0303 	adc.w	r3, r2, r3
 80078e8:	647b      	str	r3, [r7, #68]	; 0x44
 80078ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80078ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80078f2:	f7f9 f979 	bl	8000be8 <__aeabi_uldivmod>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	4611      	mov	r1, r2
 80078fc:	4b3b      	ldr	r3, [pc, #236]	; (80079ec <UART_SetConfig+0x2d4>)
 80078fe:	fba3 2301 	umull	r2, r3, r3, r1
 8007902:	095b      	lsrs	r3, r3, #5
 8007904:	2264      	movs	r2, #100	; 0x64
 8007906:	fb02 f303 	mul.w	r3, r2, r3
 800790a:	1acb      	subs	r3, r1, r3
 800790c:	00db      	lsls	r3, r3, #3
 800790e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007912:	4b36      	ldr	r3, [pc, #216]	; (80079ec <UART_SetConfig+0x2d4>)
 8007914:	fba3 2302 	umull	r2, r3, r3, r2
 8007918:	095b      	lsrs	r3, r3, #5
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007920:	441c      	add	r4, r3
 8007922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007926:	2200      	movs	r2, #0
 8007928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800792c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007930:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007934:	4642      	mov	r2, r8
 8007936:	464b      	mov	r3, r9
 8007938:	1891      	adds	r1, r2, r2
 800793a:	63b9      	str	r1, [r7, #56]	; 0x38
 800793c:	415b      	adcs	r3, r3
 800793e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007940:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007944:	4641      	mov	r1, r8
 8007946:	1851      	adds	r1, r2, r1
 8007948:	6339      	str	r1, [r7, #48]	; 0x30
 800794a:	4649      	mov	r1, r9
 800794c:	414b      	adcs	r3, r1
 800794e:	637b      	str	r3, [r7, #52]	; 0x34
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	f04f 0300 	mov.w	r3, #0
 8007958:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800795c:	4659      	mov	r1, fp
 800795e:	00cb      	lsls	r3, r1, #3
 8007960:	4651      	mov	r1, sl
 8007962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007966:	4651      	mov	r1, sl
 8007968:	00ca      	lsls	r2, r1, #3
 800796a:	4610      	mov	r0, r2
 800796c:	4619      	mov	r1, r3
 800796e:	4603      	mov	r3, r0
 8007970:	4642      	mov	r2, r8
 8007972:	189b      	adds	r3, r3, r2
 8007974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007978:	464b      	mov	r3, r9
 800797a:	460a      	mov	r2, r1
 800797c:	eb42 0303 	adc.w	r3, r2, r3
 8007980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007990:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007994:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007998:	460b      	mov	r3, r1
 800799a:	18db      	adds	r3, r3, r3
 800799c:	62bb      	str	r3, [r7, #40]	; 0x28
 800799e:	4613      	mov	r3, r2
 80079a0:	eb42 0303 	adc.w	r3, r2, r3
 80079a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80079ae:	f7f9 f91b 	bl	8000be8 <__aeabi_uldivmod>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	4b0d      	ldr	r3, [pc, #52]	; (80079ec <UART_SetConfig+0x2d4>)
 80079b8:	fba3 1302 	umull	r1, r3, r3, r2
 80079bc:	095b      	lsrs	r3, r3, #5
 80079be:	2164      	movs	r1, #100	; 0x64
 80079c0:	fb01 f303 	mul.w	r3, r1, r3
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	00db      	lsls	r3, r3, #3
 80079c8:	3332      	adds	r3, #50	; 0x32
 80079ca:	4a08      	ldr	r2, [pc, #32]	; (80079ec <UART_SetConfig+0x2d4>)
 80079cc:	fba2 2303 	umull	r2, r3, r2, r3
 80079d0:	095b      	lsrs	r3, r3, #5
 80079d2:	f003 0207 	and.w	r2, r3, #7
 80079d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4422      	add	r2, r4
 80079de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079e0:	e106      	b.n	8007bf0 <UART_SetConfig+0x4d8>
 80079e2:	bf00      	nop
 80079e4:	40011000 	.word	0x40011000
 80079e8:	40011400 	.word	0x40011400
 80079ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079f4:	2200      	movs	r2, #0
 80079f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80079fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80079fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007a02:	4642      	mov	r2, r8
 8007a04:	464b      	mov	r3, r9
 8007a06:	1891      	adds	r1, r2, r2
 8007a08:	6239      	str	r1, [r7, #32]
 8007a0a:	415b      	adcs	r3, r3
 8007a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a12:	4641      	mov	r1, r8
 8007a14:	1854      	adds	r4, r2, r1
 8007a16:	4649      	mov	r1, r9
 8007a18:	eb43 0501 	adc.w	r5, r3, r1
 8007a1c:	f04f 0200 	mov.w	r2, #0
 8007a20:	f04f 0300 	mov.w	r3, #0
 8007a24:	00eb      	lsls	r3, r5, #3
 8007a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a2a:	00e2      	lsls	r2, r4, #3
 8007a2c:	4614      	mov	r4, r2
 8007a2e:	461d      	mov	r5, r3
 8007a30:	4643      	mov	r3, r8
 8007a32:	18e3      	adds	r3, r4, r3
 8007a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a38:	464b      	mov	r3, r9
 8007a3a:	eb45 0303 	adc.w	r3, r5, r3
 8007a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a52:	f04f 0200 	mov.w	r2, #0
 8007a56:	f04f 0300 	mov.w	r3, #0
 8007a5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007a5e:	4629      	mov	r1, r5
 8007a60:	008b      	lsls	r3, r1, #2
 8007a62:	4621      	mov	r1, r4
 8007a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a68:	4621      	mov	r1, r4
 8007a6a:	008a      	lsls	r2, r1, #2
 8007a6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007a70:	f7f9 f8ba 	bl	8000be8 <__aeabi_uldivmod>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	4b60      	ldr	r3, [pc, #384]	; (8007bfc <UART_SetConfig+0x4e4>)
 8007a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a7e:	095b      	lsrs	r3, r3, #5
 8007a80:	011c      	lsls	r4, r3, #4
 8007a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a86:	2200      	movs	r2, #0
 8007a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007a90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007a94:	4642      	mov	r2, r8
 8007a96:	464b      	mov	r3, r9
 8007a98:	1891      	adds	r1, r2, r2
 8007a9a:	61b9      	str	r1, [r7, #24]
 8007a9c:	415b      	adcs	r3, r3
 8007a9e:	61fb      	str	r3, [r7, #28]
 8007aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007aa4:	4641      	mov	r1, r8
 8007aa6:	1851      	adds	r1, r2, r1
 8007aa8:	6139      	str	r1, [r7, #16]
 8007aaa:	4649      	mov	r1, r9
 8007aac:	414b      	adcs	r3, r1
 8007aae:	617b      	str	r3, [r7, #20]
 8007ab0:	f04f 0200 	mov.w	r2, #0
 8007ab4:	f04f 0300 	mov.w	r3, #0
 8007ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007abc:	4659      	mov	r1, fp
 8007abe:	00cb      	lsls	r3, r1, #3
 8007ac0:	4651      	mov	r1, sl
 8007ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ac6:	4651      	mov	r1, sl
 8007ac8:	00ca      	lsls	r2, r1, #3
 8007aca:	4610      	mov	r0, r2
 8007acc:	4619      	mov	r1, r3
 8007ace:	4603      	mov	r3, r0
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	189b      	adds	r3, r3, r2
 8007ad4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ad8:	464b      	mov	r3, r9
 8007ada:	460a      	mov	r2, r1
 8007adc:	eb42 0303 	adc.w	r3, r2, r3
 8007ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8007aee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007af0:	f04f 0200 	mov.w	r2, #0
 8007af4:	f04f 0300 	mov.w	r3, #0
 8007af8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007afc:	4649      	mov	r1, r9
 8007afe:	008b      	lsls	r3, r1, #2
 8007b00:	4641      	mov	r1, r8
 8007b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b06:	4641      	mov	r1, r8
 8007b08:	008a      	lsls	r2, r1, #2
 8007b0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007b0e:	f7f9 f86b 	bl	8000be8 <__aeabi_uldivmod>
 8007b12:	4602      	mov	r2, r0
 8007b14:	460b      	mov	r3, r1
 8007b16:	4611      	mov	r1, r2
 8007b18:	4b38      	ldr	r3, [pc, #224]	; (8007bfc <UART_SetConfig+0x4e4>)
 8007b1a:	fba3 2301 	umull	r2, r3, r3, r1
 8007b1e:	095b      	lsrs	r3, r3, #5
 8007b20:	2264      	movs	r2, #100	; 0x64
 8007b22:	fb02 f303 	mul.w	r3, r2, r3
 8007b26:	1acb      	subs	r3, r1, r3
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	3332      	adds	r3, #50	; 0x32
 8007b2c:	4a33      	ldr	r2, [pc, #204]	; (8007bfc <UART_SetConfig+0x4e4>)
 8007b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b32:	095b      	lsrs	r3, r3, #5
 8007b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b38:	441c      	add	r4, r3
 8007b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b3e:	2200      	movs	r2, #0
 8007b40:	673b      	str	r3, [r7, #112]	; 0x70
 8007b42:	677a      	str	r2, [r7, #116]	; 0x74
 8007b44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007b48:	4642      	mov	r2, r8
 8007b4a:	464b      	mov	r3, r9
 8007b4c:	1891      	adds	r1, r2, r2
 8007b4e:	60b9      	str	r1, [r7, #8]
 8007b50:	415b      	adcs	r3, r3
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b58:	4641      	mov	r1, r8
 8007b5a:	1851      	adds	r1, r2, r1
 8007b5c:	6039      	str	r1, [r7, #0]
 8007b5e:	4649      	mov	r1, r9
 8007b60:	414b      	adcs	r3, r1
 8007b62:	607b      	str	r3, [r7, #4]
 8007b64:	f04f 0200 	mov.w	r2, #0
 8007b68:	f04f 0300 	mov.w	r3, #0
 8007b6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b70:	4659      	mov	r1, fp
 8007b72:	00cb      	lsls	r3, r1, #3
 8007b74:	4651      	mov	r1, sl
 8007b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b7a:	4651      	mov	r1, sl
 8007b7c:	00ca      	lsls	r2, r1, #3
 8007b7e:	4610      	mov	r0, r2
 8007b80:	4619      	mov	r1, r3
 8007b82:	4603      	mov	r3, r0
 8007b84:	4642      	mov	r2, r8
 8007b86:	189b      	adds	r3, r3, r2
 8007b88:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b8a:	464b      	mov	r3, r9
 8007b8c:	460a      	mov	r2, r1
 8007b8e:	eb42 0303 	adc.w	r3, r2, r3
 8007b92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8007b9e:	667a      	str	r2, [r7, #100]	; 0x64
 8007ba0:	f04f 0200 	mov.w	r2, #0
 8007ba4:	f04f 0300 	mov.w	r3, #0
 8007ba8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007bac:	4649      	mov	r1, r9
 8007bae:	008b      	lsls	r3, r1, #2
 8007bb0:	4641      	mov	r1, r8
 8007bb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bb6:	4641      	mov	r1, r8
 8007bb8:	008a      	lsls	r2, r1, #2
 8007bba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007bbe:	f7f9 f813 	bl	8000be8 <__aeabi_uldivmod>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	4b0d      	ldr	r3, [pc, #52]	; (8007bfc <UART_SetConfig+0x4e4>)
 8007bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8007bcc:	095b      	lsrs	r3, r3, #5
 8007bce:	2164      	movs	r1, #100	; 0x64
 8007bd0:	fb01 f303 	mul.w	r3, r1, r3
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	3332      	adds	r3, #50	; 0x32
 8007bda:	4a08      	ldr	r2, [pc, #32]	; (8007bfc <UART_SetConfig+0x4e4>)
 8007bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8007be0:	095b      	lsrs	r3, r3, #5
 8007be2:	f003 020f 	and.w	r2, r3, #15
 8007be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4422      	add	r2, r4
 8007bee:	609a      	str	r2, [r3, #8]
}
 8007bf0:	bf00      	nop
 8007bf2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bfc:	51eb851f 	.word	0x51eb851f

08007c00 <__NVIC_SetPriority>:
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	6039      	str	r1, [r7, #0]
 8007c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	db0a      	blt.n	8007c2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	490c      	ldr	r1, [pc, #48]	; (8007c4c <__NVIC_SetPriority+0x4c>)
 8007c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c1e:	0112      	lsls	r2, r2, #4
 8007c20:	b2d2      	uxtb	r2, r2
 8007c22:	440b      	add	r3, r1
 8007c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c28:	e00a      	b.n	8007c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	4908      	ldr	r1, [pc, #32]	; (8007c50 <__NVIC_SetPriority+0x50>)
 8007c30:	79fb      	ldrb	r3, [r7, #7]
 8007c32:	f003 030f 	and.w	r3, r3, #15
 8007c36:	3b04      	subs	r3, #4
 8007c38:	0112      	lsls	r2, r2, #4
 8007c3a:	b2d2      	uxtb	r2, r2
 8007c3c:	440b      	add	r3, r1
 8007c3e:	761a      	strb	r2, [r3, #24]
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	e000e100 	.word	0xe000e100
 8007c50:	e000ed00 	.word	0xe000ed00

08007c54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c54:	b580      	push	{r7, lr}
 8007c56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007c58:	2100      	movs	r1, #0
 8007c5a:	f06f 0004 	mvn.w	r0, #4
 8007c5e:	f7ff ffcf 	bl	8007c00 <__NVIC_SetPriority>
#endif
}
 8007c62:	bf00      	nop
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c6e:	f3ef 8305 	mrs	r3, IPSR
 8007c72:	603b      	str	r3, [r7, #0]
  return(result);
 8007c74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007c7a:	f06f 0305 	mvn.w	r3, #5
 8007c7e:	607b      	str	r3, [r7, #4]
 8007c80:	e00c      	b.n	8007c9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c82:	4b0a      	ldr	r3, [pc, #40]	; (8007cac <osKernelInitialize+0x44>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d105      	bne.n	8007c96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c8a:	4b08      	ldr	r3, [pc, #32]	; (8007cac <osKernelInitialize+0x44>)
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	607b      	str	r3, [r7, #4]
 8007c94:	e002      	b.n	8007c9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c9c:	687b      	ldr	r3, [r7, #4]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	2000052c 	.word	0x2000052c

08007cb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cb6:	f3ef 8305 	mrs	r3, IPSR
 8007cba:	603b      	str	r3, [r7, #0]
  return(result);
 8007cbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <osKernelStart+0x1a>
    stat = osErrorISR;
 8007cc2:	f06f 0305 	mvn.w	r3, #5
 8007cc6:	607b      	str	r3, [r7, #4]
 8007cc8:	e010      	b.n	8007cec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007cca:	4b0b      	ldr	r3, [pc, #44]	; (8007cf8 <osKernelStart+0x48>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d109      	bne.n	8007ce6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007cd2:	f7ff ffbf 	bl	8007c54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007cd6:	4b08      	ldr	r3, [pc, #32]	; (8007cf8 <osKernelStart+0x48>)
 8007cd8:	2202      	movs	r2, #2
 8007cda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007cdc:	f001 fe4a 	bl	8009974 <vTaskStartScheduler>
      stat = osOK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	607b      	str	r3, [r7, #4]
 8007ce4:	e002      	b.n	8007cec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007cec:	687b      	ldr	r3, [r7, #4]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	2000052c 	.word	0x2000052c

08007cfc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d02:	f3ef 8305 	mrs	r3, IPSR
 8007d06:	603b      	str	r3, [r7, #0]
  return(result);
 8007d08:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8007d0e:	f001 ff53 	bl	8009bb8 <xTaskGetTickCountFromISR>
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	e002      	b.n	8007d1c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8007d16:	f001 ff3f 	bl	8009b98 <xTaskGetTickCount>
 8007d1a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8007d1c:	687b      	ldr	r3, [r7, #4]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b08e      	sub	sp, #56	; 0x38
 8007d2a:	af04      	add	r7, sp, #16
 8007d2c:	60f8      	str	r0, [r7, #12]
 8007d2e:	60b9      	str	r1, [r7, #8]
 8007d30:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d36:	f3ef 8305 	mrs	r3, IPSR
 8007d3a:	617b      	str	r3, [r7, #20]
  return(result);
 8007d3c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d17e      	bne.n	8007e40 <osThreadNew+0x11a>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d07b      	beq.n	8007e40 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007d48:	2380      	movs	r3, #128	; 0x80
 8007d4a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007d4c:	2318      	movs	r3, #24
 8007d4e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007d50:	2300      	movs	r3, #0
 8007d52:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d58:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d045      	beq.n	8007dec <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <osThreadNew+0x48>
        name = attr->name;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d002      	beq.n	8007d7c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d008      	beq.n	8007d94 <osThreadNew+0x6e>
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	2b38      	cmp	r3, #56	; 0x38
 8007d86:	d805      	bhi.n	8007d94 <osThreadNew+0x6e>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <osThreadNew+0x72>
        return (NULL);
 8007d94:	2300      	movs	r3, #0
 8007d96:	e054      	b.n	8007e42 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	089b      	lsrs	r3, r3, #2
 8007da6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00e      	beq.n	8007dce <osThreadNew+0xa8>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	2b5b      	cmp	r3, #91	; 0x5b
 8007db6:	d90a      	bls.n	8007dce <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d006      	beq.n	8007dce <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d002      	beq.n	8007dce <osThreadNew+0xa8>
        mem = 1;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	61bb      	str	r3, [r7, #24]
 8007dcc:	e010      	b.n	8007df0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10c      	bne.n	8007df0 <osThreadNew+0xca>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d108      	bne.n	8007df0 <osThreadNew+0xca>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d104      	bne.n	8007df0 <osThreadNew+0xca>
          mem = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	61bb      	str	r3, [r7, #24]
 8007dea:	e001      	b.n	8007df0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d110      	bne.n	8007e18 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007dfe:	9202      	str	r2, [sp, #8]
 8007e00:	9301      	str	r3, [sp, #4]
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	6a3a      	ldr	r2, [r7, #32]
 8007e0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f001 fb91 	bl	8009534 <xTaskCreateStatic>
 8007e12:	4603      	mov	r3, r0
 8007e14:	613b      	str	r3, [r7, #16]
 8007e16:	e013      	b.n	8007e40 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d110      	bne.n	8007e40 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	f107 0310 	add.w	r3, r7, #16
 8007e26:	9301      	str	r3, [sp, #4]
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f001 fbdc 	bl	80095ee <xTaskCreate>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d001      	beq.n	8007e40 <osThreadNew+0x11a>
            hTask = NULL;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e40:	693b      	ldr	r3, [r7, #16]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3728      	adds	r7, #40	; 0x28
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b086      	sub	sp, #24
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e52:	f3ef 8305 	mrs	r3, IPSR
 8007e56:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e58:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8007e5e:	f06f 0305 	mvn.w	r3, #5
 8007e62:	617b      	str	r3, [r7, #20]
 8007e64:	e019      	b.n	8007e9a <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8007e6a:	f001 fe95 	bl	8009b98 <xTaskGetTickCount>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d009      	beq.n	8007e94 <osDelayUntil+0x4a>
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	db06      	blt.n	8007e94 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8007e86:	f107 0308 	add.w	r3, r7, #8
 8007e8a:	6939      	ldr	r1, [r7, #16]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f001 fcf3 	bl	8009878 <vTaskDelayUntil>
 8007e92:	e002      	b.n	8007e9a <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8007e94:	f06f 0303 	mvn.w	r3, #3
 8007e98:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007e9a:	697b      	ldr	r3, [r7, #20]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b08a      	sub	sp, #40	; 0x28
 8007ea8:	af02      	add	r7, sp, #8
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eb4:	f3ef 8305 	mrs	r3, IPSR
 8007eb8:	613b      	str	r3, [r7, #16]
  return(result);
 8007eba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d175      	bne.n	8007fac <osSemaphoreNew+0x108>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d072      	beq.n	8007fac <osSemaphoreNew+0x108>
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d86e      	bhi.n	8007fac <osSemaphoreNew+0x108>
    mem = -1;
 8007ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ed2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d015      	beq.n	8007f06 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d006      	beq.n	8007ef0 <osSemaphoreNew+0x4c>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	2b4f      	cmp	r3, #79	; 0x4f
 8007ee8:	d902      	bls.n	8007ef0 <osSemaphoreNew+0x4c>
        mem = 1;
 8007eea:	2301      	movs	r3, #1
 8007eec:	61bb      	str	r3, [r7, #24]
 8007eee:	e00c      	b.n	8007f0a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d108      	bne.n	8007f0a <osSemaphoreNew+0x66>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d104      	bne.n	8007f0a <osSemaphoreNew+0x66>
          mem = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	61bb      	str	r3, [r7, #24]
 8007f04:	e001      	b.n	8007f0a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007f06:	2300      	movs	r3, #0
 8007f08:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f10:	d04c      	beq.n	8007fac <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d128      	bne.n	8007f6a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d10a      	bne.n	8007f34 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	2203      	movs	r2, #3
 8007f24:	9200      	str	r2, [sp, #0]
 8007f26:	2200      	movs	r2, #0
 8007f28:	2100      	movs	r1, #0
 8007f2a:	2001      	movs	r0, #1
 8007f2c:	f000 fb5c 	bl	80085e8 <xQueueGenericCreateStatic>
 8007f30:	61f8      	str	r0, [r7, #28]
 8007f32:	e005      	b.n	8007f40 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007f34:	2203      	movs	r2, #3
 8007f36:	2100      	movs	r1, #0
 8007f38:	2001      	movs	r0, #1
 8007f3a:	f000 fbcd 	bl	80086d8 <xQueueGenericCreate>
 8007f3e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d022      	beq.n	8007f8c <osSemaphoreNew+0xe8>
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d01f      	beq.n	8007f8c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	2200      	movs	r2, #0
 8007f50:	2100      	movs	r1, #0
 8007f52:	69f8      	ldr	r0, [r7, #28]
 8007f54:	f000 fc88 	bl	8008868 <xQueueGenericSend>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d016      	beq.n	8007f8c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007f5e:	69f8      	ldr	r0, [r7, #28]
 8007f60:	f001 f914 	bl	800918c <vQueueDelete>
            hSemaphore = NULL;
 8007f64:	2300      	movs	r3, #0
 8007f66:	61fb      	str	r3, [r7, #28]
 8007f68:	e010      	b.n	8007f8c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d108      	bne.n	8007f82 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	461a      	mov	r2, r3
 8007f76:	68b9      	ldr	r1, [r7, #8]
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 fc0a 	bl	8008792 <xQueueCreateCountingSemaphoreStatic>
 8007f7e:	61f8      	str	r0, [r7, #28]
 8007f80:	e004      	b.n	8007f8c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007f82:	68b9      	ldr	r1, [r7, #8]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 fc3b 	bl	8008800 <xQueueCreateCountingSemaphore>
 8007f8a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00c      	beq.n	8007fac <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d003      	beq.n	8007fa0 <osSemaphoreNew+0xfc>
          name = attr->name;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	617b      	str	r3, [r7, #20]
 8007f9e:	e001      	b.n	8007fa4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007fa4:	6979      	ldr	r1, [r7, #20]
 8007fa6:	69f8      	ldr	r0, [r7, #28]
 8007fa8:	f001 fa3c 	bl	8009424 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007fac:	69fb      	ldr	r3, [r7, #28]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3720      	adds	r7, #32
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d103      	bne.n	8007fd8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007fd0:	f06f 0303 	mvn.w	r3, #3
 8007fd4:	617b      	str	r3, [r7, #20]
 8007fd6:	e039      	b.n	800804c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fd8:	f3ef 8305 	mrs	r3, IPSR
 8007fdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fde:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d022      	beq.n	800802a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007fea:	f06f 0303 	mvn.w	r3, #3
 8007fee:	617b      	str	r3, [r7, #20]
 8007ff0:	e02c      	b.n	800804c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007ff6:	f107 0308 	add.w	r3, r7, #8
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	6938      	ldr	r0, [r7, #16]
 8008000:	f001 f844 	bl	800908c <xQueueReceiveFromISR>
 8008004:	4603      	mov	r3, r0
 8008006:	2b01      	cmp	r3, #1
 8008008:	d003      	beq.n	8008012 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800800a:	f06f 0302 	mvn.w	r3, #2
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	e01c      	b.n	800804c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d019      	beq.n	800804c <osSemaphoreAcquire+0x94>
 8008018:	4b0f      	ldr	r3, [pc, #60]	; (8008058 <osSemaphoreAcquire+0xa0>)
 800801a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	e010      	b.n	800804c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	6938      	ldr	r0, [r7, #16]
 800802e:	f000 ff21 	bl	8008e74 <xQueueSemaphoreTake>
 8008032:	4603      	mov	r3, r0
 8008034:	2b01      	cmp	r3, #1
 8008036:	d009      	beq.n	800804c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800803e:	f06f 0301 	mvn.w	r3, #1
 8008042:	617b      	str	r3, [r7, #20]
 8008044:	e002      	b.n	800804c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008046:	f06f 0302 	mvn.w	r3, #2
 800804a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800804c:	697b      	ldr	r3, [r7, #20]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3718      	adds	r7, #24
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	e000ed04 	.word	0xe000ed04

0800805c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008068:	2300      	movs	r3, #0
 800806a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d103      	bne.n	800807a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008072:	f06f 0303 	mvn.w	r3, #3
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	e02c      	b.n	80080d4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800807a:	f3ef 8305 	mrs	r3, IPSR
 800807e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008080:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008082:	2b00      	cmp	r3, #0
 8008084:	d01a      	beq.n	80080bc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008086:	2300      	movs	r3, #0
 8008088:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800808a:	f107 0308 	add.w	r3, r7, #8
 800808e:	4619      	mov	r1, r3
 8008090:	6938      	ldr	r0, [r7, #16]
 8008092:	f000 fd82 	bl	8008b9a <xQueueGiveFromISR>
 8008096:	4603      	mov	r3, r0
 8008098:	2b01      	cmp	r3, #1
 800809a:	d003      	beq.n	80080a4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800809c:	f06f 0302 	mvn.w	r3, #2
 80080a0:	617b      	str	r3, [r7, #20]
 80080a2:	e017      	b.n	80080d4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d014      	beq.n	80080d4 <osSemaphoreRelease+0x78>
 80080aa:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <osSemaphoreRelease+0x84>)
 80080ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	e00b      	b.n	80080d4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80080bc:	2300      	movs	r3, #0
 80080be:	2200      	movs	r2, #0
 80080c0:	2100      	movs	r1, #0
 80080c2:	6938      	ldr	r0, [r7, #16]
 80080c4:	f000 fbd0 	bl	8008868 <xQueueGenericSend>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d002      	beq.n	80080d4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80080ce:	f06f 0302 	mvn.w	r3, #2
 80080d2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80080d4:	697b      	ldr	r3, [r7, #20]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	e000ed04 	.word	0xe000ed04

080080e4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b08a      	sub	sp, #40	; 0x28
 80080e8:	af02      	add	r7, sp, #8
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80080f0:	2300      	movs	r3, #0
 80080f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080f4:	f3ef 8305 	mrs	r3, IPSR
 80080f8:	613b      	str	r3, [r7, #16]
  return(result);
 80080fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d15f      	bne.n	80081c0 <osMessageQueueNew+0xdc>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d05c      	beq.n	80081c0 <osMessageQueueNew+0xdc>
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d059      	beq.n	80081c0 <osMessageQueueNew+0xdc>
    mem = -1;
 800810c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008110:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d029      	beq.n	800816c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d012      	beq.n	8008146 <osMessageQueueNew+0x62>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	2b4f      	cmp	r3, #79	; 0x4f
 8008126:	d90e      	bls.n	8008146 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00a      	beq.n	8008146 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	695a      	ldr	r2, [r3, #20]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	68b9      	ldr	r1, [r7, #8]
 8008138:	fb01 f303 	mul.w	r3, r1, r3
 800813c:	429a      	cmp	r2, r3
 800813e:	d302      	bcc.n	8008146 <osMessageQueueNew+0x62>
        mem = 1;
 8008140:	2301      	movs	r3, #1
 8008142:	61bb      	str	r3, [r7, #24]
 8008144:	e014      	b.n	8008170 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d110      	bne.n	8008170 <osMessageQueueNew+0x8c>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10c      	bne.n	8008170 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800815a:	2b00      	cmp	r3, #0
 800815c:	d108      	bne.n	8008170 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d104      	bne.n	8008170 <osMessageQueueNew+0x8c>
          mem = 0;
 8008166:	2300      	movs	r3, #0
 8008168:	61bb      	str	r3, [r7, #24]
 800816a:	e001      	b.n	8008170 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800816c:	2300      	movs	r3, #0
 800816e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d10b      	bne.n	800818e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	691a      	ldr	r2, [r3, #16]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	2100      	movs	r1, #0
 8008180:	9100      	str	r1, [sp, #0]
 8008182:	68b9      	ldr	r1, [r7, #8]
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 fa2f 	bl	80085e8 <xQueueGenericCreateStatic>
 800818a:	61f8      	str	r0, [r7, #28]
 800818c:	e008      	b.n	80081a0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d105      	bne.n	80081a0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008194:	2200      	movs	r2, #0
 8008196:	68b9      	ldr	r1, [r7, #8]
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 fa9d 	bl	80086d8 <xQueueGenericCreate>
 800819e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00c      	beq.n	80081c0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	617b      	str	r3, [r7, #20]
 80081b2:	e001      	b.n	80081b8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80081b4:	2300      	movs	r3, #0
 80081b6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80081b8:	6979      	ldr	r1, [r7, #20]
 80081ba:	69f8      	ldr	r0, [r7, #28]
 80081bc:	f001 f932 	bl	8009424 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80081c0:	69fb      	ldr	r3, [r7, #28]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3720      	adds	r7, #32
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
	...

080081cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b088      	sub	sp, #32
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	4613      	mov	r3, r2
 80081da:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081e4:	f3ef 8305 	mrs	r3, IPSR
 80081e8:	617b      	str	r3, [r7, #20]
  return(result);
 80081ea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d028      	beq.n	8008242 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d005      	beq.n	8008202 <osMessageQueuePut+0x36>
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <osMessageQueuePut+0x36>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008202:	f06f 0303 	mvn.w	r3, #3
 8008206:	61fb      	str	r3, [r7, #28]
 8008208:	e038      	b.n	800827c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800820a:	2300      	movs	r3, #0
 800820c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800820e:	f107 0210 	add.w	r2, r7, #16
 8008212:	2300      	movs	r3, #0
 8008214:	68b9      	ldr	r1, [r7, #8]
 8008216:	69b8      	ldr	r0, [r7, #24]
 8008218:	f000 fc24 	bl	8008a64 <xQueueGenericSendFromISR>
 800821c:	4603      	mov	r3, r0
 800821e:	2b01      	cmp	r3, #1
 8008220:	d003      	beq.n	800822a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008222:	f06f 0302 	mvn.w	r3, #2
 8008226:	61fb      	str	r3, [r7, #28]
 8008228:	e028      	b.n	800827c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d025      	beq.n	800827c <osMessageQueuePut+0xb0>
 8008230:	4b15      	ldr	r3, [pc, #84]	; (8008288 <osMessageQueuePut+0xbc>)
 8008232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	e01c      	b.n	800827c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <osMessageQueuePut+0x82>
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d103      	bne.n	8008256 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800824e:	f06f 0303 	mvn.w	r3, #3
 8008252:	61fb      	str	r3, [r7, #28]
 8008254:	e012      	b.n	800827c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008256:	2300      	movs	r3, #0
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	68b9      	ldr	r1, [r7, #8]
 800825c:	69b8      	ldr	r0, [r7, #24]
 800825e:	f000 fb03 	bl	8008868 <xQueueGenericSend>
 8008262:	4603      	mov	r3, r0
 8008264:	2b01      	cmp	r3, #1
 8008266:	d009      	beq.n	800827c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800826e:	f06f 0301 	mvn.w	r3, #1
 8008272:	61fb      	str	r3, [r7, #28]
 8008274:	e002      	b.n	800827c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008276:	f06f 0302 	mvn.w	r3, #2
 800827a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800827c:	69fb      	ldr	r3, [r7, #28]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3720      	adds	r7, #32
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	e000ed04 	.word	0xe000ed04

0800828c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800828c:	b580      	push	{r7, lr}
 800828e:	b088      	sub	sp, #32
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800829e:	2300      	movs	r3, #0
 80082a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082a2:	f3ef 8305 	mrs	r3, IPSR
 80082a6:	617b      	str	r3, [r7, #20]
  return(result);
 80082a8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d028      	beq.n	8008300 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <osMessageQueueGet+0x34>
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <osMessageQueueGet+0x34>
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80082c0:	f06f 0303 	mvn.w	r3, #3
 80082c4:	61fb      	str	r3, [r7, #28]
 80082c6:	e037      	b.n	8008338 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80082c8:	2300      	movs	r3, #0
 80082ca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80082cc:	f107 0310 	add.w	r3, r7, #16
 80082d0:	461a      	mov	r2, r3
 80082d2:	68b9      	ldr	r1, [r7, #8]
 80082d4:	69b8      	ldr	r0, [r7, #24]
 80082d6:	f000 fed9 	bl	800908c <xQueueReceiveFromISR>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d003      	beq.n	80082e8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80082e0:	f06f 0302 	mvn.w	r3, #2
 80082e4:	61fb      	str	r3, [r7, #28]
 80082e6:	e027      	b.n	8008338 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d024      	beq.n	8008338 <osMessageQueueGet+0xac>
 80082ee:	4b15      	ldr	r3, [pc, #84]	; (8008344 <osMessageQueueGet+0xb8>)
 80082f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	e01b      	b.n	8008338 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d002      	beq.n	800830c <osMessageQueueGet+0x80>
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d103      	bne.n	8008314 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800830c:	f06f 0303 	mvn.w	r3, #3
 8008310:	61fb      	str	r3, [r7, #28]
 8008312:	e011      	b.n	8008338 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	68b9      	ldr	r1, [r7, #8]
 8008318:	69b8      	ldr	r0, [r7, #24]
 800831a:	f000 fccb 	bl	8008cb4 <xQueueReceive>
 800831e:	4603      	mov	r3, r0
 8008320:	2b01      	cmp	r3, #1
 8008322:	d009      	beq.n	8008338 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800832a:	f06f 0301 	mvn.w	r3, #1
 800832e:	61fb      	str	r3, [r7, #28]
 8008330:	e002      	b.n	8008338 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008332:	f06f 0302 	mvn.w	r3, #2
 8008336:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008338:	69fb      	ldr	r3, [r7, #28]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3720      	adds	r7, #32
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	e000ed04 	.word	0xe000ed04

08008348 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	4a07      	ldr	r2, [pc, #28]	; (8008374 <vApplicationGetIdleTaskMemory+0x2c>)
 8008358:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	4a06      	ldr	r2, [pc, #24]	; (8008378 <vApplicationGetIdleTaskMemory+0x30>)
 800835e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2280      	movs	r2, #128	; 0x80
 8008364:	601a      	str	r2, [r3, #0]
}
 8008366:	bf00      	nop
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000530 	.word	0x20000530
 8008378:	2000058c 	.word	0x2000058c

0800837c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	4a07      	ldr	r2, [pc, #28]	; (80083a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800838c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	4a06      	ldr	r2, [pc, #24]	; (80083ac <vApplicationGetTimerTaskMemory+0x30>)
 8008392:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800839a:	601a      	str	r2, [r3, #0]
}
 800839c:	bf00      	nop
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	2000078c 	.word	0x2000078c
 80083ac:	200007e8 	.word	0x200007e8

080083b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f103 0208 	add.w	r2, r3, #8
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f103 0208 	add.w	r2, r3, #8
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f103 0208 	add.w	r2, r3, #8
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083fe:	bf00      	nop
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800840a:	b480      	push	{r7}
 800840c:	b085      	sub	sp, #20
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	601a      	str	r2, [r3, #0]
}
 8008446:	bf00      	nop
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008452:	b480      	push	{r7}
 8008454:	b085      	sub	sp, #20
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008468:	d103      	bne.n	8008472 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	60fb      	str	r3, [r7, #12]
 8008470:	e00c      	b.n	800848c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	3308      	adds	r3, #8
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	e002      	b.n	8008480 <vListInsert+0x2e>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	60fb      	str	r3, [r7, #12]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	429a      	cmp	r2, r3
 800848a:	d2f6      	bcs.n	800847a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	1c5a      	adds	r2, r3, #1
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	601a      	str	r2, [r3, #0]
}
 80084b8:	bf00      	nop
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	6892      	ldr	r2, [r2, #8]
 80084da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	6852      	ldr	r2, [r2, #4]
 80084e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d103      	bne.n	80084f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	1e5a      	subs	r2, r3, #1
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10a      	bne.n	8008542 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008542:	f002 fcc7 	bl	800aed4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800854e:	68f9      	ldr	r1, [r7, #12]
 8008550:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008552:	fb01 f303 	mul.w	r3, r1, r3
 8008556:	441a      	add	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008572:	3b01      	subs	r3, #1
 8008574:	68f9      	ldr	r1, [r7, #12]
 8008576:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008578:	fb01 f303 	mul.w	r3, r1, r3
 800857c:	441a      	add	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	22ff      	movs	r2, #255	; 0xff
 8008586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	22ff      	movs	r2, #255	; 0xff
 800858e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d114      	bne.n	80085c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01a      	beq.n	80085d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	3310      	adds	r3, #16
 80085a4:	4618      	mov	r0, r3
 80085a6:	f001 fc81 	bl	8009eac <xTaskRemoveFromEventList>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d012      	beq.n	80085d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085b0:	4b0c      	ldr	r3, [pc, #48]	; (80085e4 <xQueueGenericReset+0xcc>)
 80085b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	e009      	b.n	80085d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3310      	adds	r3, #16
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7ff fef2 	bl	80083b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3324      	adds	r3, #36	; 0x24
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7ff feed 	bl	80083b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80085d6:	f002 fcad 	bl	800af34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80085da:	2301      	movs	r3, #1
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	e000ed04 	.word	0xe000ed04

080085e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08e      	sub	sp, #56	; 0x38
 80085ec:	af02      	add	r7, sp, #8
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10a      	bne.n	8008612 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800860e:	bf00      	nop
 8008610:	e7fe      	b.n	8008610 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10a      	bne.n	800862e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861c:	f383 8811 	msr	BASEPRI, r3
 8008620:	f3bf 8f6f 	isb	sy
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
}
 800862a:	bf00      	nop
 800862c:	e7fe      	b.n	800862c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d002      	beq.n	800863a <xQueueGenericCreateStatic+0x52>
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <xQueueGenericCreateStatic+0x56>
 800863a:	2301      	movs	r3, #1
 800863c:	e000      	b.n	8008640 <xQueueGenericCreateStatic+0x58>
 800863e:	2300      	movs	r3, #0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10a      	bne.n	800865a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	623b      	str	r3, [r7, #32]
}
 8008656:	bf00      	nop
 8008658:	e7fe      	b.n	8008658 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d102      	bne.n	8008666 <xQueueGenericCreateStatic+0x7e>
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <xQueueGenericCreateStatic+0x82>
 8008666:	2301      	movs	r3, #1
 8008668:	e000      	b.n	800866c <xQueueGenericCreateStatic+0x84>
 800866a:	2300      	movs	r3, #0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10a      	bne.n	8008686 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	61fb      	str	r3, [r7, #28]
}
 8008682:	bf00      	nop
 8008684:	e7fe      	b.n	8008684 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008686:	2350      	movs	r3, #80	; 0x50
 8008688:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b50      	cmp	r3, #80	; 0x50
 800868e:	d00a      	beq.n	80086a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	61bb      	str	r3, [r7, #24]
}
 80086a2:	bf00      	nop
 80086a4:	e7fe      	b.n	80086a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80086a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80086ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00d      	beq.n	80086ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	4613      	mov	r3, r2
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	68b9      	ldr	r1, [r7, #8]
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 f83f 	bl	800874c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3730      	adds	r7, #48	; 0x30
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08a      	sub	sp, #40	; 0x28
 80086dc:	af02      	add	r7, sp, #8
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	4613      	mov	r3, r2
 80086e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10a      	bne.n	8008702 <xQueueGenericCreate+0x2a>
	__asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	613b      	str	r3, [r7, #16]
}
 80086fe:	bf00      	nop
 8008700:	e7fe      	b.n	8008700 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	fb02 f303 	mul.w	r3, r2, r3
 800870a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	3350      	adds	r3, #80	; 0x50
 8008710:	4618      	mov	r0, r3
 8008712:	f002 fd01 	bl	800b118 <pvPortMalloc>
 8008716:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d011      	beq.n	8008742 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	3350      	adds	r3, #80	; 0x50
 8008726:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008730:	79fa      	ldrb	r2, [r7, #7]
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	4613      	mov	r3, r2
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	68b9      	ldr	r1, [r7, #8]
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 f805 	bl	800874c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008742:	69bb      	ldr	r3, [r7, #24]
	}
 8008744:	4618      	mov	r0, r3
 8008746:	3720      	adds	r7, #32
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
 8008758:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d103      	bne.n	8008768 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	e002      	b.n	800876e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800877a:	2101      	movs	r1, #1
 800877c:	69b8      	ldr	r0, [r7, #24]
 800877e:	f7ff fecb 	bl	8008518 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	78fa      	ldrb	r2, [r7, #3]
 8008786:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800878a:	bf00      	nop
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008792:	b580      	push	{r7, lr}
 8008794:	b08a      	sub	sp, #40	; 0x28
 8008796:	af02      	add	r7, sp, #8
 8008798:	60f8      	str	r0, [r7, #12]
 800879a:	60b9      	str	r1, [r7, #8]
 800879c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10a      	bne.n	80087ba <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	61bb      	str	r3, [r7, #24]
}
 80087b6:	bf00      	nop
 80087b8:	e7fe      	b.n	80087b8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d90a      	bls.n	80087d8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	617b      	str	r3, [r7, #20]
}
 80087d4:	bf00      	nop
 80087d6:	e7fe      	b.n	80087d6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80087d8:	2302      	movs	r3, #2
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	2100      	movs	r1, #0
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f7ff ff00 	bl	80085e8 <xQueueGenericCreateStatic>
 80087e8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80087f6:	69fb      	ldr	r3, [r7, #28]
	}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3720      	adds	r7, #32
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10a      	bne.n	8008826 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	613b      	str	r3, [r7, #16]
}
 8008822:	bf00      	nop
 8008824:	e7fe      	b.n	8008824 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	429a      	cmp	r2, r3
 800882c:	d90a      	bls.n	8008844 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	60fb      	str	r3, [r7, #12]
}
 8008840:	bf00      	nop
 8008842:	e7fe      	b.n	8008842 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008844:	2202      	movs	r2, #2
 8008846:	2100      	movs	r1, #0
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7ff ff45 	bl	80086d8 <xQueueGenericCreate>
 800884e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d002      	beq.n	800885c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800885c:	697b      	ldr	r3, [r7, #20]
	}
 800885e:	4618      	mov	r0, r3
 8008860:	3718      	adds	r7, #24
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b08e      	sub	sp, #56	; 0x38
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008876:	2300      	movs	r3, #0
 8008878:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10a      	bne.n	800889a <xQueueGenericSend+0x32>
	__asm volatile
 8008884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008896:	bf00      	nop
 8008898:	e7fe      	b.n	8008898 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d103      	bne.n	80088a8 <xQueueGenericSend+0x40>
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <xQueueGenericSend+0x44>
 80088a8:	2301      	movs	r3, #1
 80088aa:	e000      	b.n	80088ae <xQueueGenericSend+0x46>
 80088ac:	2300      	movs	r3, #0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10a      	bne.n	80088c8 <xQueueGenericSend+0x60>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80088c4:	bf00      	nop
 80088c6:	e7fe      	b.n	80088c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d103      	bne.n	80088d6 <xQueueGenericSend+0x6e>
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d101      	bne.n	80088da <xQueueGenericSend+0x72>
 80088d6:	2301      	movs	r3, #1
 80088d8:	e000      	b.n	80088dc <xQueueGenericSend+0x74>
 80088da:	2300      	movs	r3, #0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10a      	bne.n	80088f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	623b      	str	r3, [r7, #32]
}
 80088f2:	bf00      	nop
 80088f4:	e7fe      	b.n	80088f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088f6:	f001 fc97 	bl	800a228 <xTaskGetSchedulerState>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d102      	bne.n	8008906 <xQueueGenericSend+0x9e>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <xQueueGenericSend+0xa2>
 8008906:	2301      	movs	r3, #1
 8008908:	e000      	b.n	800890c <xQueueGenericSend+0xa4>
 800890a:	2300      	movs	r3, #0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10a      	bne.n	8008926 <xQueueGenericSend+0xbe>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	61fb      	str	r3, [r7, #28]
}
 8008922:	bf00      	nop
 8008924:	e7fe      	b.n	8008924 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008926:	f002 fad5 	bl	800aed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800892a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800892e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008932:	429a      	cmp	r2, r3
 8008934:	d302      	bcc.n	800893c <xQueueGenericSend+0xd4>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	2b02      	cmp	r3, #2
 800893a:	d129      	bne.n	8008990 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800893c:	683a      	ldr	r2, [r7, #0]
 800893e:	68b9      	ldr	r1, [r7, #8]
 8008940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008942:	f000 fc5e 	bl	8009202 <prvCopyDataToQueue>
 8008946:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	2b00      	cmp	r3, #0
 800894e:	d010      	beq.n	8008972 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008952:	3324      	adds	r3, #36	; 0x24
 8008954:	4618      	mov	r0, r3
 8008956:	f001 faa9 	bl	8009eac <xTaskRemoveFromEventList>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d013      	beq.n	8008988 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008960:	4b3f      	ldr	r3, [pc, #252]	; (8008a60 <xQueueGenericSend+0x1f8>)
 8008962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	e00a      	b.n	8008988 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008974:	2b00      	cmp	r3, #0
 8008976:	d007      	beq.n	8008988 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008978:	4b39      	ldr	r3, [pc, #228]	; (8008a60 <xQueueGenericSend+0x1f8>)
 800897a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008988:	f002 fad4 	bl	800af34 <vPortExitCritical>
				return pdPASS;
 800898c:	2301      	movs	r3, #1
 800898e:	e063      	b.n	8008a58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d103      	bne.n	800899e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008996:	f002 facd 	bl	800af34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800899a:	2300      	movs	r3, #0
 800899c:	e05c      	b.n	8008a58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800899e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d106      	bne.n	80089b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089a4:	f107 0314 	add.w	r3, r7, #20
 80089a8:	4618      	mov	r0, r3
 80089aa:	f001 fae3 	bl	8009f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089ae:	2301      	movs	r3, #1
 80089b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089b2:	f002 fabf 	bl	800af34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089b6:	f001 f843 	bl	8009a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089ba:	f002 fa8b 	bl	800aed4 <vPortEnterCritical>
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089c4:	b25b      	sxtb	r3, r3
 80089c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089ca:	d103      	bne.n	80089d4 <xQueueGenericSend+0x16c>
 80089cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089da:	b25b      	sxtb	r3, r3
 80089dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089e0:	d103      	bne.n	80089ea <xQueueGenericSend+0x182>
 80089e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089ea:	f002 faa3 	bl	800af34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089ee:	1d3a      	adds	r2, r7, #4
 80089f0:	f107 0314 	add.w	r3, r7, #20
 80089f4:	4611      	mov	r1, r2
 80089f6:	4618      	mov	r0, r3
 80089f8:	f001 fad2 	bl	8009fa0 <xTaskCheckForTimeOut>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d124      	bne.n	8008a4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a04:	f000 fcf5 	bl	80093f2 <prvIsQueueFull>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d018      	beq.n	8008a40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a10:	3310      	adds	r3, #16
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	4611      	mov	r1, r2
 8008a16:	4618      	mov	r0, r3
 8008a18:	f001 f9f8 	bl	8009e0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a1e:	f000 fc80 	bl	8009322 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a22:	f001 f81b 	bl	8009a5c <xTaskResumeAll>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f47f af7c 	bne.w	8008926 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008a2e:	4b0c      	ldr	r3, [pc, #48]	; (8008a60 <xQueueGenericSend+0x1f8>)
 8008a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	e772      	b.n	8008926 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a42:	f000 fc6e 	bl	8009322 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a46:	f001 f809 	bl	8009a5c <xTaskResumeAll>
 8008a4a:	e76c      	b.n	8008926 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a4e:	f000 fc68 	bl	8009322 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a52:	f001 f803 	bl	8009a5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3738      	adds	r7, #56	; 0x38
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	e000ed04 	.word	0xe000ed04

08008a64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b090      	sub	sp, #64	; 0x40
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
 8008a70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10a      	bne.n	8008a92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a8e:	bf00      	nop
 8008a90:	e7fe      	b.n	8008a90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d103      	bne.n	8008aa0 <xQueueGenericSendFromISR+0x3c>
 8008a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <xQueueGenericSendFromISR+0x40>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e000      	b.n	8008aa6 <xQueueGenericSendFromISR+0x42>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10a      	bne.n	8008ac0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008abc:	bf00      	nop
 8008abe:	e7fe      	b.n	8008abe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d103      	bne.n	8008ace <xQueueGenericSendFromISR+0x6a>
 8008ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d101      	bne.n	8008ad2 <xQueueGenericSendFromISR+0x6e>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e000      	b.n	8008ad4 <xQueueGenericSendFromISR+0x70>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10a      	bne.n	8008aee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	623b      	str	r3, [r7, #32]
}
 8008aea:	bf00      	nop
 8008aec:	e7fe      	b.n	8008aec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008aee:	f002 fad3 	bl	800b098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008af2:	f3ef 8211 	mrs	r2, BASEPRI
 8008af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	61fa      	str	r2, [r7, #28]
 8008b08:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b0c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d302      	bcc.n	8008b20 <xQueueGenericSendFromISR+0xbc>
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d12f      	bne.n	8008b80 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	68b9      	ldr	r1, [r7, #8]
 8008b34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b36:	f000 fb64 	bl	8009202 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b42:	d112      	bne.n	8008b6a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d016      	beq.n	8008b7a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4e:	3324      	adds	r3, #36	; 0x24
 8008b50:	4618      	mov	r0, r3
 8008b52:	f001 f9ab 	bl	8009eac <xTaskRemoveFromEventList>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00e      	beq.n	8008b7a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00b      	beq.n	8008b7a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2201      	movs	r2, #1
 8008b66:	601a      	str	r2, [r3, #0]
 8008b68:	e007      	b.n	8008b7a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008b6e:	3301      	adds	r3, #1
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	b25a      	sxtb	r2, r3
 8008b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008b7e:	e001      	b.n	8008b84 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b80:	2300      	movs	r3, #0
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b86:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3740      	adds	r7, #64	; 0x40
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b08e      	sub	sp, #56	; 0x38
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10a      	bne.n	8008bc4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	623b      	str	r3, [r7, #32]
}
 8008bc0:	bf00      	nop
 8008bc2:	e7fe      	b.n	8008bc2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00a      	beq.n	8008be2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd0:	f383 8811 	msr	BASEPRI, r3
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	61fb      	str	r3, [r7, #28]
}
 8008bde:	bf00      	nop
 8008be0:	e7fe      	b.n	8008be0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d103      	bne.n	8008bf2 <xQueueGiveFromISR+0x58>
 8008bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <xQueueGiveFromISR+0x5c>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e000      	b.n	8008bf8 <xQueueGiveFromISR+0x5e>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10a      	bne.n	8008c12 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	61bb      	str	r3, [r7, #24]
}
 8008c0e:	bf00      	nop
 8008c10:	e7fe      	b.n	8008c10 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c12:	f002 fa41 	bl	800b098 <vPortValidateInterruptPriority>
	__asm volatile
 8008c16:	f3ef 8211 	mrs	r2, BASEPRI
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	617a      	str	r2, [r7, #20]
 8008c2c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008c2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d22b      	bcs.n	8008c9a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c5c:	d112      	bne.n	8008c84 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d016      	beq.n	8008c94 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	3324      	adds	r3, #36	; 0x24
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f001 f91e 	bl	8009eac <xTaskRemoveFromEventList>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00e      	beq.n	8008c94 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00b      	beq.n	8008c94 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	e007      	b.n	8008c94 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c88:	3301      	adds	r3, #1
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	b25a      	sxtb	r2, r3
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c94:	2301      	movs	r3, #1
 8008c96:	637b      	str	r3, [r7, #52]	; 0x34
 8008c98:	e001      	b.n	8008c9e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f383 8811 	msr	BASEPRI, r3
}
 8008ca8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3738      	adds	r7, #56	; 0x38
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b08c      	sub	sp, #48	; 0x30
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10a      	bne.n	8008ce4 <xQueueReceive+0x30>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	623b      	str	r3, [r7, #32]
}
 8008ce0:	bf00      	nop
 8008ce2:	e7fe      	b.n	8008ce2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d103      	bne.n	8008cf2 <xQueueReceive+0x3e>
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <xQueueReceive+0x42>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e000      	b.n	8008cf8 <xQueueReceive+0x44>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10a      	bne.n	8008d12 <xQueueReceive+0x5e>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	61fb      	str	r3, [r7, #28]
}
 8008d0e:	bf00      	nop
 8008d10:	e7fe      	b.n	8008d10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d12:	f001 fa89 	bl	800a228 <xTaskGetSchedulerState>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d102      	bne.n	8008d22 <xQueueReceive+0x6e>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d101      	bne.n	8008d26 <xQueueReceive+0x72>
 8008d22:	2301      	movs	r3, #1
 8008d24:	e000      	b.n	8008d28 <xQueueReceive+0x74>
 8008d26:	2300      	movs	r3, #0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d10a      	bne.n	8008d42 <xQueueReceive+0x8e>
	__asm volatile
 8008d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d30:	f383 8811 	msr	BASEPRI, r3
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	61bb      	str	r3, [r7, #24]
}
 8008d3e:	bf00      	nop
 8008d40:	e7fe      	b.n	8008d40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d42:	f002 f8c7 	bl	800aed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d01f      	beq.n	8008d92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d52:	68b9      	ldr	r1, [r7, #8]
 8008d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d56:	f000 fabe 	bl	80092d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	1e5a      	subs	r2, r3, #1
 8008d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00f      	beq.n	8008d8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6c:	3310      	adds	r3, #16
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f001 f89c 	bl	8009eac <xTaskRemoveFromEventList>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d007      	beq.n	8008d8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d7a:	4b3d      	ldr	r3, [pc, #244]	; (8008e70 <xQueueReceive+0x1bc>)
 8008d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d80:	601a      	str	r2, [r3, #0]
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d8a:	f002 f8d3 	bl	800af34 <vPortExitCritical>
				return pdPASS;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e069      	b.n	8008e66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d103      	bne.n	8008da0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d98:	f002 f8cc 	bl	800af34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	e062      	b.n	8008e66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d106      	bne.n	8008db4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008da6:	f107 0310 	add.w	r3, r7, #16
 8008daa:	4618      	mov	r0, r3
 8008dac:	f001 f8e2 	bl	8009f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008db0:	2301      	movs	r3, #1
 8008db2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008db4:	f002 f8be 	bl	800af34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008db8:	f000 fe42 	bl	8009a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dbc:	f002 f88a 	bl	800aed4 <vPortEnterCritical>
 8008dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dc6:	b25b      	sxtb	r3, r3
 8008dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dcc:	d103      	bne.n	8008dd6 <xQueueReceive+0x122>
 8008dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ddc:	b25b      	sxtb	r3, r3
 8008dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008de2:	d103      	bne.n	8008dec <xQueueReceive+0x138>
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dec:	f002 f8a2 	bl	800af34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008df0:	1d3a      	adds	r2, r7, #4
 8008df2:	f107 0310 	add.w	r3, r7, #16
 8008df6:	4611      	mov	r1, r2
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f001 f8d1 	bl	8009fa0 <xTaskCheckForTimeOut>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d123      	bne.n	8008e4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e06:	f000 fade 	bl	80093c6 <prvIsQueueEmpty>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d017      	beq.n	8008e40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e12:	3324      	adds	r3, #36	; 0x24
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	4611      	mov	r1, r2
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 fff7 	bl	8009e0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e20:	f000 fa7f 	bl	8009322 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e24:	f000 fe1a 	bl	8009a5c <xTaskResumeAll>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d189      	bne.n	8008d42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008e2e:	4b10      	ldr	r3, [pc, #64]	; (8008e70 <xQueueReceive+0x1bc>)
 8008e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e34:	601a      	str	r2, [r3, #0]
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	e780      	b.n	8008d42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e42:	f000 fa6e 	bl	8009322 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e46:	f000 fe09 	bl	8009a5c <xTaskResumeAll>
 8008e4a:	e77a      	b.n	8008d42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e4e:	f000 fa68 	bl	8009322 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e52:	f000 fe03 	bl	8009a5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e58:	f000 fab5 	bl	80093c6 <prvIsQueueEmpty>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f43f af6f 	beq.w	8008d42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3730      	adds	r7, #48	; 0x30
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	e000ed04 	.word	0xe000ed04

08008e74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b08e      	sub	sp, #56	; 0x38
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008e86:	2300      	movs	r3, #0
 8008e88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10a      	bne.n	8008ea6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	623b      	str	r3, [r7, #32]
}
 8008ea2:	bf00      	nop
 8008ea4:	e7fe      	b.n	8008ea4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00a      	beq.n	8008ec4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb2:	f383 8811 	msr	BASEPRI, r3
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	61fb      	str	r3, [r7, #28]
}
 8008ec0:	bf00      	nop
 8008ec2:	e7fe      	b.n	8008ec2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ec4:	f001 f9b0 	bl	800a228 <xTaskGetSchedulerState>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d102      	bne.n	8008ed4 <xQueueSemaphoreTake+0x60>
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d101      	bne.n	8008ed8 <xQueueSemaphoreTake+0x64>
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e000      	b.n	8008eda <xQueueSemaphoreTake+0x66>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10a      	bne.n	8008ef4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	61bb      	str	r3, [r7, #24]
}
 8008ef0:	bf00      	nop
 8008ef2:	e7fe      	b.n	8008ef2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ef4:	f001 ffee 	bl	800aed4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d024      	beq.n	8008f4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f06:	1e5a      	subs	r2, r3, #1
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d104      	bne.n	8008f1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008f14:	f001 fafe 	bl	800a514 <pvTaskIncrementMutexHeldCount>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00f      	beq.n	8008f46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f28:	3310      	adds	r3, #16
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 ffbe 	bl	8009eac <xTaskRemoveFromEventList>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d007      	beq.n	8008f46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f36:	4b54      	ldr	r3, [pc, #336]	; (8009088 <xQueueSemaphoreTake+0x214>)
 8008f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f3c:	601a      	str	r2, [r3, #0]
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f46:	f001 fff5 	bl	800af34 <vPortExitCritical>
				return pdPASS;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e097      	b.n	800907e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d111      	bne.n	8008f78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00a      	beq.n	8008f70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	617b      	str	r3, [r7, #20]
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008f70:	f001 ffe0 	bl	800af34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f74:	2300      	movs	r3, #0
 8008f76:	e082      	b.n	800907e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d106      	bne.n	8008f8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f7e:	f107 030c 	add.w	r3, r7, #12
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 fff6 	bl	8009f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f8c:	f001 ffd2 	bl	800af34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f90:	f000 fd56 	bl	8009a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f94:	f001 ff9e 	bl	800aed4 <vPortEnterCritical>
 8008f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f9e:	b25b      	sxtb	r3, r3
 8008fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fa4:	d103      	bne.n	8008fae <xQueueSemaphoreTake+0x13a>
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fb4:	b25b      	sxtb	r3, r3
 8008fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fba:	d103      	bne.n	8008fc4 <xQueueSemaphoreTake+0x150>
 8008fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fc4:	f001 ffb6 	bl	800af34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fc8:	463a      	mov	r2, r7
 8008fca:	f107 030c 	add.w	r3, r7, #12
 8008fce:	4611      	mov	r1, r2
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 ffe5 	bl	8009fa0 <xTaskCheckForTimeOut>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d132      	bne.n	8009042 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fde:	f000 f9f2 	bl	80093c6 <prvIsQueueEmpty>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d026      	beq.n	8009036 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d109      	bne.n	8009004 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008ff0:	f001 ff70 	bl	800aed4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f001 f933 	bl	800a264 <xTaskPriorityInherit>
 8008ffe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009000:	f001 ff98 	bl	800af34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009006:	3324      	adds	r3, #36	; 0x24
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	4611      	mov	r1, r2
 800900c:	4618      	mov	r0, r3
 800900e:	f000 fefd 	bl	8009e0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009012:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009014:	f000 f985 	bl	8009322 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009018:	f000 fd20 	bl	8009a5c <xTaskResumeAll>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	f47f af68 	bne.w	8008ef4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009024:	4b18      	ldr	r3, [pc, #96]	; (8009088 <xQueueSemaphoreTake+0x214>)
 8009026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800902a:	601a      	str	r2, [r3, #0]
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	e75e      	b.n	8008ef4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009038:	f000 f973 	bl	8009322 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800903c:	f000 fd0e 	bl	8009a5c <xTaskResumeAll>
 8009040:	e758      	b.n	8008ef4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009042:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009044:	f000 f96d 	bl	8009322 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009048:	f000 fd08 	bl	8009a5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800904c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800904e:	f000 f9ba 	bl	80093c6 <prvIsQueueEmpty>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	f43f af4d 	beq.w	8008ef4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800905a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00d      	beq.n	800907c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009060:	f001 ff38 	bl	800aed4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009066:	f000 f8b4 	bl	80091d2 <prvGetDisinheritPriorityAfterTimeout>
 800906a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800906c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009072:	4618      	mov	r0, r3
 8009074:	f001 f9cc 	bl	800a410 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009078:	f001 ff5c 	bl	800af34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800907c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800907e:	4618      	mov	r0, r3
 8009080:	3738      	adds	r7, #56	; 0x38
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	e000ed04 	.word	0xe000ed04

0800908c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b08e      	sub	sp, #56	; 0x38
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800909c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10a      	bne.n	80090b8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	623b      	str	r3, [r7, #32]
}
 80090b4:	bf00      	nop
 80090b6:	e7fe      	b.n	80090b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d103      	bne.n	80090c6 <xQueueReceiveFromISR+0x3a>
 80090be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d101      	bne.n	80090ca <xQueueReceiveFromISR+0x3e>
 80090c6:	2301      	movs	r3, #1
 80090c8:	e000      	b.n	80090cc <xQueueReceiveFromISR+0x40>
 80090ca:	2300      	movs	r3, #0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10a      	bne.n	80090e6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	61fb      	str	r3, [r7, #28]
}
 80090e2:	bf00      	nop
 80090e4:	e7fe      	b.n	80090e4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090e6:	f001 ffd7 	bl	800b098 <vPortValidateInterruptPriority>
	__asm volatile
 80090ea:	f3ef 8211 	mrs	r2, BASEPRI
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	61ba      	str	r2, [r7, #24]
 8009100:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009102:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009104:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800910c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910e:	2b00      	cmp	r3, #0
 8009110:	d02f      	beq.n	8009172 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800911c:	68b9      	ldr	r1, [r7, #8]
 800911e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009120:	f000 f8d9 	bl	80092d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	1e5a      	subs	r2, r3, #1
 8009128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800912c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009134:	d112      	bne.n	800915c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d016      	beq.n	800916c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009140:	3310      	adds	r3, #16
 8009142:	4618      	mov	r0, r3
 8009144:	f000 feb2 	bl	8009eac <xTaskRemoveFromEventList>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00e      	beq.n	800916c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00b      	beq.n	800916c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	601a      	str	r2, [r3, #0]
 800915a:	e007      	b.n	800916c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800915c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009160:	3301      	adds	r3, #1
 8009162:	b2db      	uxtb	r3, r3
 8009164:	b25a      	sxtb	r2, r3
 8009166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800916c:	2301      	movs	r3, #1
 800916e:	637b      	str	r3, [r7, #52]	; 0x34
 8009170:	e001      	b.n	8009176 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009172:	2300      	movs	r3, #0
 8009174:	637b      	str	r3, [r7, #52]	; 0x34
 8009176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009178:	613b      	str	r3, [r7, #16]
	__asm volatile
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	f383 8811 	msr	BASEPRI, r3
}
 8009180:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009184:	4618      	mov	r0, r3
 8009186:	3738      	adds	r7, #56	; 0x38
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10a      	bne.n	80091b4 <vQueueDelete+0x28>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	60bb      	str	r3, [r7, #8]
}
 80091b0:	bf00      	nop
 80091b2:	e7fe      	b.n	80091b2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 f95f 	bl	8009478 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d102      	bne.n	80091ca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f002 f873 	bl	800b2b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80091ca:	bf00      	nop
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80091d2:	b480      	push	{r7}
 80091d4:	b085      	sub	sp, #20
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d006      	beq.n	80091f0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80091ec:	60fb      	str	r3, [r7, #12]
 80091ee:	e001      	b.n	80091f4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80091f0:	2300      	movs	r3, #0
 80091f2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80091f4:	68fb      	ldr	r3, [r7, #12]
	}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b086      	sub	sp, #24
 8009206:	af00      	add	r7, sp, #0
 8009208:	60f8      	str	r0, [r7, #12]
 800920a:	60b9      	str	r1, [r7, #8]
 800920c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800920e:	2300      	movs	r3, #0
 8009210:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009216:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10d      	bne.n	800923c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d14d      	bne.n	80092c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	4618      	mov	r0, r3
 800922e:	f001 f881 	bl	800a334 <xTaskPriorityDisinherit>
 8009232:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	609a      	str	r2, [r3, #8]
 800923a:	e043      	b.n	80092c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d119      	bne.n	8009276 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6858      	ldr	r0, [r3, #4]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924a:	461a      	mov	r2, r3
 800924c:	68b9      	ldr	r1, [r7, #8]
 800924e:	f003 fc46 	bl	800cade <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	685a      	ldr	r2, [r3, #4]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925a:	441a      	add	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	685a      	ldr	r2, [r3, #4]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	429a      	cmp	r2, r3
 800926a:	d32b      	bcc.n	80092c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	605a      	str	r2, [r3, #4]
 8009274:	e026      	b.n	80092c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	68d8      	ldr	r0, [r3, #12]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927e:	461a      	mov	r2, r3
 8009280:	68b9      	ldr	r1, [r7, #8]
 8009282:	f003 fc2c 	bl	800cade <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928e:	425b      	negs	r3, r3
 8009290:	441a      	add	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	68da      	ldr	r2, [r3, #12]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d207      	bcs.n	80092b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	689a      	ldr	r2, [r3, #8]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092aa:	425b      	negs	r3, r3
 80092ac:	441a      	add	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d105      	bne.n	80092c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d002      	beq.n	80092c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	3b01      	subs	r3, #1
 80092c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	1c5a      	adds	r2, r3, #1
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80092cc:	697b      	ldr	r3, [r7, #20]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3718      	adds	r7, #24
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b082      	sub	sp, #8
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d018      	beq.n	800931a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68da      	ldr	r2, [r3, #12]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f0:	441a      	add	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68da      	ldr	r2, [r3, #12]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d303      	bcc.n	800930a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	68d9      	ldr	r1, [r3, #12]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009312:	461a      	mov	r2, r3
 8009314:	6838      	ldr	r0, [r7, #0]
 8009316:	f003 fbe2 	bl	800cade <memcpy>
	}
}
 800931a:	bf00      	nop
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b084      	sub	sp, #16
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800932a:	f001 fdd3 	bl	800aed4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009334:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009336:	e011      	b.n	800935c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933c:	2b00      	cmp	r3, #0
 800933e:	d012      	beq.n	8009366 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3324      	adds	r3, #36	; 0x24
 8009344:	4618      	mov	r0, r3
 8009346:	f000 fdb1 	bl	8009eac <xTaskRemoveFromEventList>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009350:	f000 fe88 	bl	800a064 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009354:	7bfb      	ldrb	r3, [r7, #15]
 8009356:	3b01      	subs	r3, #1
 8009358:	b2db      	uxtb	r3, r3
 800935a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800935c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009360:	2b00      	cmp	r3, #0
 8009362:	dce9      	bgt.n	8009338 <prvUnlockQueue+0x16>
 8009364:	e000      	b.n	8009368 <prvUnlockQueue+0x46>
					break;
 8009366:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	22ff      	movs	r2, #255	; 0xff
 800936c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009370:	f001 fde0 	bl	800af34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009374:	f001 fdae 	bl	800aed4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800937e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009380:	e011      	b.n	80093a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d012      	beq.n	80093b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	3310      	adds	r3, #16
 800938e:	4618      	mov	r0, r3
 8009390:	f000 fd8c 	bl	8009eac <xTaskRemoveFromEventList>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800939a:	f000 fe63 	bl	800a064 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800939e:	7bbb      	ldrb	r3, [r7, #14]
 80093a0:	3b01      	subs	r3, #1
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	dce9      	bgt.n	8009382 <prvUnlockQueue+0x60>
 80093ae:	e000      	b.n	80093b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80093b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	22ff      	movs	r2, #255	; 0xff
 80093b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80093ba:	f001 fdbb 	bl	800af34 <vPortExitCritical>
}
 80093be:	bf00      	nop
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b084      	sub	sp, #16
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093ce:	f001 fd81 	bl	800aed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d102      	bne.n	80093e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80093da:	2301      	movs	r3, #1
 80093dc:	60fb      	str	r3, [r7, #12]
 80093de:	e001      	b.n	80093e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80093e0:	2300      	movs	r3, #0
 80093e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093e4:	f001 fda6 	bl	800af34 <vPortExitCritical>

	return xReturn;
 80093e8:	68fb      	ldr	r3, [r7, #12]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b084      	sub	sp, #16
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093fa:	f001 fd6b 	bl	800aed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009406:	429a      	cmp	r2, r3
 8009408:	d102      	bne.n	8009410 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800940a:	2301      	movs	r3, #1
 800940c:	60fb      	str	r3, [r7, #12]
 800940e:	e001      	b.n	8009414 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009410:	2300      	movs	r3, #0
 8009412:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009414:	f001 fd8e 	bl	800af34 <vPortExitCritical>

	return xReturn;
 8009418:	68fb      	ldr	r3, [r7, #12]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800942e:	2300      	movs	r3, #0
 8009430:	60fb      	str	r3, [r7, #12]
 8009432:	e014      	b.n	800945e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009434:	4a0f      	ldr	r2, [pc, #60]	; (8009474 <vQueueAddToRegistry+0x50>)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10b      	bne.n	8009458 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009440:	490c      	ldr	r1, [pc, #48]	; (8009474 <vQueueAddToRegistry+0x50>)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800944a:	4a0a      	ldr	r2, [pc, #40]	; (8009474 <vQueueAddToRegistry+0x50>)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	00db      	lsls	r3, r3, #3
 8009450:	4413      	add	r3, r2
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009456:	e006      	b.n	8009466 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	3301      	adds	r3, #1
 800945c:	60fb      	str	r3, [r7, #12]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2b07      	cmp	r3, #7
 8009462:	d9e7      	bls.n	8009434 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009464:	bf00      	nop
 8009466:	bf00      	nop
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	20000be8 	.word	0x20000be8

08009478 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009480:	2300      	movs	r3, #0
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	e016      	b.n	80094b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009486:	4a10      	ldr	r2, [pc, #64]	; (80094c8 <vQueueUnregisterQueue+0x50>)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	4413      	add	r3, r2
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	429a      	cmp	r2, r3
 8009494:	d10b      	bne.n	80094ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009496:	4a0c      	ldr	r2, [pc, #48]	; (80094c8 <vQueueUnregisterQueue+0x50>)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2100      	movs	r1, #0
 800949c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80094a0:	4a09      	ldr	r2, [pc, #36]	; (80094c8 <vQueueUnregisterQueue+0x50>)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	00db      	lsls	r3, r3, #3
 80094a6:	4413      	add	r3, r2
 80094a8:	2200      	movs	r2, #0
 80094aa:	605a      	str	r2, [r3, #4]
				break;
 80094ac:	e006      	b.n	80094bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3301      	adds	r3, #1
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2b07      	cmp	r3, #7
 80094b8:	d9e5      	bls.n	8009486 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80094ba:	bf00      	nop
 80094bc:	bf00      	nop
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	20000be8 	.word	0x20000be8

080094cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80094dc:	f001 fcfa 	bl	800aed4 <vPortEnterCritical>
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094e6:	b25b      	sxtb	r3, r3
 80094e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094ec:	d103      	bne.n	80094f6 <vQueueWaitForMessageRestricted+0x2a>
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094fc:	b25b      	sxtb	r3, r3
 80094fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009502:	d103      	bne.n	800950c <vQueueWaitForMessageRestricted+0x40>
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800950c:	f001 fd12 	bl	800af34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009514:	2b00      	cmp	r3, #0
 8009516:	d106      	bne.n	8009526 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	3324      	adds	r3, #36	; 0x24
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	68b9      	ldr	r1, [r7, #8]
 8009520:	4618      	mov	r0, r3
 8009522:	f000 fc97 	bl	8009e54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009526:	6978      	ldr	r0, [r7, #20]
 8009528:	f7ff fefb 	bl	8009322 <prvUnlockQueue>
	}
 800952c:	bf00      	nop
 800952e:	3718      	adds	r7, #24
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009534:	b580      	push	{r7, lr}
 8009536:	b08e      	sub	sp, #56	; 0x38
 8009538:	af04      	add	r7, sp, #16
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
 8009540:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10a      	bne.n	800955e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	623b      	str	r3, [r7, #32]
}
 800955a:	bf00      	nop
 800955c:	e7fe      	b.n	800955c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10a      	bne.n	800957a <xTaskCreateStatic+0x46>
	__asm volatile
 8009564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009568:	f383 8811 	msr	BASEPRI, r3
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	61fb      	str	r3, [r7, #28]
}
 8009576:	bf00      	nop
 8009578:	e7fe      	b.n	8009578 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800957a:	235c      	movs	r3, #92	; 0x5c
 800957c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	2b5c      	cmp	r3, #92	; 0x5c
 8009582:	d00a      	beq.n	800959a <xTaskCreateStatic+0x66>
	__asm volatile
 8009584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009588:	f383 8811 	msr	BASEPRI, r3
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	61bb      	str	r3, [r7, #24]
}
 8009596:	bf00      	nop
 8009598:	e7fe      	b.n	8009598 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800959a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800959c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d01e      	beq.n	80095e0 <xTaskCreateStatic+0xac>
 80095a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d01b      	beq.n	80095e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b4:	2202      	movs	r2, #2
 80095b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095ba:	2300      	movs	r3, #0
 80095bc:	9303      	str	r3, [sp, #12]
 80095be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c0:	9302      	str	r3, [sp, #8]
 80095c2:	f107 0314 	add.w	r3, r7, #20
 80095c6:	9301      	str	r3, [sp, #4]
 80095c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	68b9      	ldr	r1, [r7, #8]
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 f850 	bl	8009678 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095da:	f000 f8dd 	bl	8009798 <prvAddNewTaskToReadyList>
 80095de:	e001      	b.n	80095e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80095e0:	2300      	movs	r3, #0
 80095e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80095e4:	697b      	ldr	r3, [r7, #20]
	}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3728      	adds	r7, #40	; 0x28
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b08c      	sub	sp, #48	; 0x30
 80095f2:	af04      	add	r7, sp, #16
 80095f4:	60f8      	str	r0, [r7, #12]
 80095f6:	60b9      	str	r1, [r7, #8]
 80095f8:	603b      	str	r3, [r7, #0]
 80095fa:	4613      	mov	r3, r2
 80095fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80095fe:	88fb      	ldrh	r3, [r7, #6]
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4618      	mov	r0, r3
 8009604:	f001 fd88 	bl	800b118 <pvPortMalloc>
 8009608:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00e      	beq.n	800962e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009610:	205c      	movs	r0, #92	; 0x5c
 8009612:	f001 fd81 	bl	800b118 <pvPortMalloc>
 8009616:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d003      	beq.n	8009626 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	697a      	ldr	r2, [r7, #20]
 8009622:	631a      	str	r2, [r3, #48]	; 0x30
 8009624:	e005      	b.n	8009632 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009626:	6978      	ldr	r0, [r7, #20]
 8009628:	f001 fe42 	bl	800b2b0 <vPortFree>
 800962c:	e001      	b.n	8009632 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800962e:	2300      	movs	r3, #0
 8009630:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d017      	beq.n	8009668 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009640:	88fa      	ldrh	r2, [r7, #6]
 8009642:	2300      	movs	r3, #0
 8009644:	9303      	str	r3, [sp, #12]
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	9302      	str	r3, [sp, #8]
 800964a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964c:	9301      	str	r3, [sp, #4]
 800964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	68b9      	ldr	r1, [r7, #8]
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f000 f80e 	bl	8009678 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800965c:	69f8      	ldr	r0, [r7, #28]
 800965e:	f000 f89b 	bl	8009798 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009662:	2301      	movs	r3, #1
 8009664:	61bb      	str	r3, [r7, #24]
 8009666:	e002      	b.n	800966e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800966c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800966e:	69bb      	ldr	r3, [r7, #24]
	}
 8009670:	4618      	mov	r0, r3
 8009672:	3720      	adds	r7, #32
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	461a      	mov	r2, r3
 8009690:	21a5      	movs	r1, #165	; 0xa5
 8009692:	f003 f997 	bl	800c9c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80096a0:	3b01      	subs	r3, #1
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	4413      	add	r3, r2
 80096a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	f023 0307 	bic.w	r3, r3, #7
 80096ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	f003 0307 	and.w	r3, r3, #7
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00a      	beq.n	80096d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	617b      	str	r3, [r7, #20]
}
 80096cc:	bf00      	nop
 80096ce:	e7fe      	b.n	80096ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d01f      	beq.n	8009716 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096d6:	2300      	movs	r3, #0
 80096d8:	61fb      	str	r3, [r7, #28]
 80096da:	e012      	b.n	8009702 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	4413      	add	r3, r2
 80096e2:	7819      	ldrb	r1, [r3, #0]
 80096e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	4413      	add	r3, r2
 80096ea:	3334      	adds	r3, #52	; 0x34
 80096ec:	460a      	mov	r2, r1
 80096ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	4413      	add	r3, r2
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d006      	beq.n	800970a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	3301      	adds	r3, #1
 8009700:	61fb      	str	r3, [r7, #28]
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	2b0f      	cmp	r3, #15
 8009706:	d9e9      	bls.n	80096dc <prvInitialiseNewTask+0x64>
 8009708:	e000      	b.n	800970c <prvInitialiseNewTask+0x94>
			{
				break;
 800970a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800970c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970e:	2200      	movs	r2, #0
 8009710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009714:	e003      	b.n	800971e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	2200      	movs	r2, #0
 800971a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800971e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009720:	2b37      	cmp	r3, #55	; 0x37
 8009722:	d901      	bls.n	8009728 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009724:	2337      	movs	r3, #55	; 0x37
 8009726:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800972c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009732:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009736:	2200      	movs	r2, #0
 8009738:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800973a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973c:	3304      	adds	r3, #4
 800973e:	4618      	mov	r0, r3
 8009740:	f7fe fe56 	bl	80083f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009746:	3318      	adds	r3, #24
 8009748:	4618      	mov	r0, r3
 800974a:	f7fe fe51 	bl	80083f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009752:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009756:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800975a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009762:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009766:	2200      	movs	r2, #0
 8009768:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800976a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976c:	2200      	movs	r2, #0
 800976e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009772:	683a      	ldr	r2, [r7, #0]
 8009774:	68f9      	ldr	r1, [r7, #12]
 8009776:	69b8      	ldr	r0, [r7, #24]
 8009778:	f001 fa82 	bl	800ac80 <pxPortInitialiseStack>
 800977c:	4602      	mov	r2, r0
 800977e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009780:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009784:	2b00      	cmp	r3, #0
 8009786:	d002      	beq.n	800978e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800978c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800978e:	bf00      	nop
 8009790:	3720      	adds	r7, #32
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80097a0:	f001 fb98 	bl	800aed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80097a4:	4b2d      	ldr	r3, [pc, #180]	; (800985c <prvAddNewTaskToReadyList+0xc4>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3301      	adds	r3, #1
 80097aa:	4a2c      	ldr	r2, [pc, #176]	; (800985c <prvAddNewTaskToReadyList+0xc4>)
 80097ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80097ae:	4b2c      	ldr	r3, [pc, #176]	; (8009860 <prvAddNewTaskToReadyList+0xc8>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d109      	bne.n	80097ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80097b6:	4a2a      	ldr	r2, [pc, #168]	; (8009860 <prvAddNewTaskToReadyList+0xc8>)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80097bc:	4b27      	ldr	r3, [pc, #156]	; (800985c <prvAddNewTaskToReadyList+0xc4>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d110      	bne.n	80097e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80097c4:	f000 fc72 	bl	800a0ac <prvInitialiseTaskLists>
 80097c8:	e00d      	b.n	80097e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80097ca:	4b26      	ldr	r3, [pc, #152]	; (8009864 <prvAddNewTaskToReadyList+0xcc>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d109      	bne.n	80097e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80097d2:	4b23      	ldr	r3, [pc, #140]	; (8009860 <prvAddNewTaskToReadyList+0xc8>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097dc:	429a      	cmp	r2, r3
 80097de:	d802      	bhi.n	80097e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80097e0:	4a1f      	ldr	r2, [pc, #124]	; (8009860 <prvAddNewTaskToReadyList+0xc8>)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80097e6:	4b20      	ldr	r3, [pc, #128]	; (8009868 <prvAddNewTaskToReadyList+0xd0>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3301      	adds	r3, #1
 80097ec:	4a1e      	ldr	r2, [pc, #120]	; (8009868 <prvAddNewTaskToReadyList+0xd0>)
 80097ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80097f0:	4b1d      	ldr	r3, [pc, #116]	; (8009868 <prvAddNewTaskToReadyList+0xd0>)
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097fc:	4b1b      	ldr	r3, [pc, #108]	; (800986c <prvAddNewTaskToReadyList+0xd4>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	429a      	cmp	r2, r3
 8009802:	d903      	bls.n	800980c <prvAddNewTaskToReadyList+0x74>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009808:	4a18      	ldr	r2, [pc, #96]	; (800986c <prvAddNewTaskToReadyList+0xd4>)
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009810:	4613      	mov	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4a15      	ldr	r2, [pc, #84]	; (8009870 <prvAddNewTaskToReadyList+0xd8>)
 800981a:	441a      	add	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	3304      	adds	r3, #4
 8009820:	4619      	mov	r1, r3
 8009822:	4610      	mov	r0, r2
 8009824:	f7fe fdf1 	bl	800840a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009828:	f001 fb84 	bl	800af34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800982c:	4b0d      	ldr	r3, [pc, #52]	; (8009864 <prvAddNewTaskToReadyList+0xcc>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00e      	beq.n	8009852 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009834:	4b0a      	ldr	r3, [pc, #40]	; (8009860 <prvAddNewTaskToReadyList+0xc8>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983e:	429a      	cmp	r2, r3
 8009840:	d207      	bcs.n	8009852 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009842:	4b0c      	ldr	r3, [pc, #48]	; (8009874 <prvAddNewTaskToReadyList+0xdc>)
 8009844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009848:	601a      	str	r2, [r3, #0]
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009852:	bf00      	nop
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	200010fc 	.word	0x200010fc
 8009860:	20000c28 	.word	0x20000c28
 8009864:	20001108 	.word	0x20001108
 8009868:	20001118 	.word	0x20001118
 800986c:	20001104 	.word	0x20001104
 8009870:	20000c2c 	.word	0x20000c2c
 8009874:	e000ed04 	.word	0xe000ed04

08009878 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009878:	b580      	push	{r7, lr}
 800987a:	b08a      	sub	sp, #40	; 0x28
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009882:	2300      	movs	r3, #0
 8009884:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10a      	bne.n	80098a2 <vTaskDelayUntil+0x2a>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	617b      	str	r3, [r7, #20]
}
 800989e:	bf00      	nop
 80098a0:	e7fe      	b.n	80098a0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10a      	bne.n	80098be <vTaskDelayUntil+0x46>
	__asm volatile
 80098a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ac:	f383 8811 	msr	BASEPRI, r3
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	613b      	str	r3, [r7, #16]
}
 80098ba:	bf00      	nop
 80098bc:	e7fe      	b.n	80098bc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80098be:	4b2a      	ldr	r3, [pc, #168]	; (8009968 <vTaskDelayUntil+0xf0>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00a      	beq.n	80098dc <vTaskDelayUntil+0x64>
	__asm volatile
 80098c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	60fb      	str	r3, [r7, #12]
}
 80098d8:	bf00      	nop
 80098da:	e7fe      	b.n	80098da <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80098dc:	f000 f8b0 	bl	8009a40 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80098e0:	4b22      	ldr	r3, [pc, #136]	; (800996c <vTaskDelayUntil+0xf4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	4413      	add	r3, r2
 80098ee:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6a3a      	ldr	r2, [r7, #32]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d20b      	bcs.n	8009912 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69fa      	ldr	r2, [r7, #28]
 8009900:	429a      	cmp	r2, r3
 8009902:	d211      	bcs.n	8009928 <vTaskDelayUntil+0xb0>
 8009904:	69fa      	ldr	r2, [r7, #28]
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	429a      	cmp	r2, r3
 800990a:	d90d      	bls.n	8009928 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800990c:	2301      	movs	r3, #1
 800990e:	627b      	str	r3, [r7, #36]	; 0x24
 8009910:	e00a      	b.n	8009928 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	69fa      	ldr	r2, [r7, #28]
 8009918:	429a      	cmp	r2, r3
 800991a:	d303      	bcc.n	8009924 <vTaskDelayUntil+0xac>
 800991c:	69fa      	ldr	r2, [r7, #28]
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	429a      	cmp	r2, r3
 8009922:	d901      	bls.n	8009928 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009924:	2301      	movs	r3, #1
 8009926:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	69fa      	ldr	r2, [r7, #28]
 800992c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	2b00      	cmp	r3, #0
 8009932:	d006      	beq.n	8009942 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009934:	69fa      	ldr	r2, [r7, #28]
 8009936:	6a3b      	ldr	r3, [r7, #32]
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	2100      	movs	r1, #0
 800993c:	4618      	mov	r0, r3
 800993e:	f000 fdfd 	bl	800a53c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009942:	f000 f88b 	bl	8009a5c <xTaskResumeAll>
 8009946:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d107      	bne.n	800995e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800994e:	4b08      	ldr	r3, [pc, #32]	; (8009970 <vTaskDelayUntil+0xf8>)
 8009950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800995e:	bf00      	nop
 8009960:	3728      	adds	r7, #40	; 0x28
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20001124 	.word	0x20001124
 800996c:	20001100 	.word	0x20001100
 8009970:	e000ed04 	.word	0xe000ed04

08009974 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b08a      	sub	sp, #40	; 0x28
 8009978:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800997a:	2300      	movs	r3, #0
 800997c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800997e:	2300      	movs	r3, #0
 8009980:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009982:	463a      	mov	r2, r7
 8009984:	1d39      	adds	r1, r7, #4
 8009986:	f107 0308 	add.w	r3, r7, #8
 800998a:	4618      	mov	r0, r3
 800998c:	f7fe fcdc 	bl	8008348 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	9202      	str	r2, [sp, #8]
 8009998:	9301      	str	r3, [sp, #4]
 800999a:	2300      	movs	r3, #0
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	2300      	movs	r3, #0
 80099a0:	460a      	mov	r2, r1
 80099a2:	4921      	ldr	r1, [pc, #132]	; (8009a28 <vTaskStartScheduler+0xb4>)
 80099a4:	4821      	ldr	r0, [pc, #132]	; (8009a2c <vTaskStartScheduler+0xb8>)
 80099a6:	f7ff fdc5 	bl	8009534 <xTaskCreateStatic>
 80099aa:	4603      	mov	r3, r0
 80099ac:	4a20      	ldr	r2, [pc, #128]	; (8009a30 <vTaskStartScheduler+0xbc>)
 80099ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099b0:	4b1f      	ldr	r3, [pc, #124]	; (8009a30 <vTaskStartScheduler+0xbc>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099b8:	2301      	movs	r3, #1
 80099ba:	617b      	str	r3, [r7, #20]
 80099bc:	e001      	b.n	80099c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099be:	2300      	movs	r3, #0
 80099c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d102      	bne.n	80099ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80099c8:	f000 fe0c 	bl	800a5e4 <xTimerCreateTimerTask>
 80099cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d116      	bne.n	8009a02 <vTaskStartScheduler+0x8e>
	__asm volatile
 80099d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	613b      	str	r3, [r7, #16]
}
 80099e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099e8:	4b12      	ldr	r3, [pc, #72]	; (8009a34 <vTaskStartScheduler+0xc0>)
 80099ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099f0:	4b11      	ldr	r3, [pc, #68]	; (8009a38 <vTaskStartScheduler+0xc4>)
 80099f2:	2201      	movs	r2, #1
 80099f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099f6:	4b11      	ldr	r3, [pc, #68]	; (8009a3c <vTaskStartScheduler+0xc8>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099fc:	f001 f9c8 	bl	800ad90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a00:	e00e      	b.n	8009a20 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a08:	d10a      	bne.n	8009a20 <vTaskStartScheduler+0xac>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	60fb      	str	r3, [r7, #12]
}
 8009a1c:	bf00      	nop
 8009a1e:	e7fe      	b.n	8009a1e <vTaskStartScheduler+0xaa>
}
 8009a20:	bf00      	nop
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	0800e85c 	.word	0x0800e85c
 8009a2c:	0800a07d 	.word	0x0800a07d
 8009a30:	20001120 	.word	0x20001120
 8009a34:	2000111c 	.word	0x2000111c
 8009a38:	20001108 	.word	0x20001108
 8009a3c:	20001100 	.word	0x20001100

08009a40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a40:	b480      	push	{r7}
 8009a42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a44:	4b04      	ldr	r3, [pc, #16]	; (8009a58 <vTaskSuspendAll+0x18>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	4a03      	ldr	r2, [pc, #12]	; (8009a58 <vTaskSuspendAll+0x18>)
 8009a4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a4e:	bf00      	nop
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	20001124 	.word	0x20001124

08009a5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a66:	2300      	movs	r3, #0
 8009a68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a6a:	4b42      	ldr	r3, [pc, #264]	; (8009b74 <xTaskResumeAll+0x118>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10a      	bne.n	8009a88 <xTaskResumeAll+0x2c>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	603b      	str	r3, [r7, #0]
}
 8009a84:	bf00      	nop
 8009a86:	e7fe      	b.n	8009a86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a88:	f001 fa24 	bl	800aed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a8c:	4b39      	ldr	r3, [pc, #228]	; (8009b74 <xTaskResumeAll+0x118>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	3b01      	subs	r3, #1
 8009a92:	4a38      	ldr	r2, [pc, #224]	; (8009b74 <xTaskResumeAll+0x118>)
 8009a94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a96:	4b37      	ldr	r3, [pc, #220]	; (8009b74 <xTaskResumeAll+0x118>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d162      	bne.n	8009b64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a9e:	4b36      	ldr	r3, [pc, #216]	; (8009b78 <xTaskResumeAll+0x11c>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d05e      	beq.n	8009b64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009aa6:	e02f      	b.n	8009b08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aa8:	4b34      	ldr	r3, [pc, #208]	; (8009b7c <xTaskResumeAll+0x120>)
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	3318      	adds	r3, #24
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7fe fd05 	bl	80084c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	3304      	adds	r3, #4
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fe fd00 	bl	80084c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac8:	4b2d      	ldr	r3, [pc, #180]	; (8009b80 <xTaskResumeAll+0x124>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d903      	bls.n	8009ad8 <xTaskResumeAll+0x7c>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad4:	4a2a      	ldr	r2, [pc, #168]	; (8009b80 <xTaskResumeAll+0x124>)
 8009ad6:	6013      	str	r3, [r2, #0]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009adc:	4613      	mov	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4a27      	ldr	r2, [pc, #156]	; (8009b84 <xTaskResumeAll+0x128>)
 8009ae6:	441a      	add	r2, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	3304      	adds	r3, #4
 8009aec:	4619      	mov	r1, r3
 8009aee:	4610      	mov	r0, r2
 8009af0:	f7fe fc8b 	bl	800840a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af8:	4b23      	ldr	r3, [pc, #140]	; (8009b88 <xTaskResumeAll+0x12c>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d302      	bcc.n	8009b08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009b02:	4b22      	ldr	r3, [pc, #136]	; (8009b8c <xTaskResumeAll+0x130>)
 8009b04:	2201      	movs	r2, #1
 8009b06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b08:	4b1c      	ldr	r3, [pc, #112]	; (8009b7c <xTaskResumeAll+0x120>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1cb      	bne.n	8009aa8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b16:	f000 fb67 	bl	800a1e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b1a:	4b1d      	ldr	r3, [pc, #116]	; (8009b90 <xTaskResumeAll+0x134>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d010      	beq.n	8009b48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b26:	f000 f859 	bl	8009bdc <xTaskIncrementTick>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009b30:	4b16      	ldr	r3, [pc, #88]	; (8009b8c <xTaskResumeAll+0x130>)
 8009b32:	2201      	movs	r2, #1
 8009b34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1f1      	bne.n	8009b26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009b42:	4b13      	ldr	r3, [pc, #76]	; (8009b90 <xTaskResumeAll+0x134>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b48:	4b10      	ldr	r3, [pc, #64]	; (8009b8c <xTaskResumeAll+0x130>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d009      	beq.n	8009b64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b50:	2301      	movs	r3, #1
 8009b52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b54:	4b0f      	ldr	r3, [pc, #60]	; (8009b94 <xTaskResumeAll+0x138>)
 8009b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b64:	f001 f9e6 	bl	800af34 <vPortExitCritical>

	return xAlreadyYielded;
 8009b68:	68bb      	ldr	r3, [r7, #8]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	20001124 	.word	0x20001124
 8009b78:	200010fc 	.word	0x200010fc
 8009b7c:	200010bc 	.word	0x200010bc
 8009b80:	20001104 	.word	0x20001104
 8009b84:	20000c2c 	.word	0x20000c2c
 8009b88:	20000c28 	.word	0x20000c28
 8009b8c:	20001110 	.word	0x20001110
 8009b90:	2000110c 	.word	0x2000110c
 8009b94:	e000ed04 	.word	0xe000ed04

08009b98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b9e:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <xTaskGetTickCount+0x1c>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ba4:	687b      	ldr	r3, [r7, #4]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	370c      	adds	r7, #12
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	20001100 	.word	0x20001100

08009bb8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bbe:	f001 fa6b 	bl	800b098 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009bc6:	4b04      	ldr	r3, [pc, #16]	; (8009bd8 <xTaskGetTickCountFromISR+0x20>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009bcc:	683b      	ldr	r3, [r7, #0]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20001100 	.word	0x20001100

08009bdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009be2:	2300      	movs	r3, #0
 8009be4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009be6:	4b4f      	ldr	r3, [pc, #316]	; (8009d24 <xTaskIncrementTick+0x148>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f040 808f 	bne.w	8009d0e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009bf0:	4b4d      	ldr	r3, [pc, #308]	; (8009d28 <xTaskIncrementTick+0x14c>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009bf8:	4a4b      	ldr	r2, [pc, #300]	; (8009d28 <xTaskIncrementTick+0x14c>)
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d120      	bne.n	8009c46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c04:	4b49      	ldr	r3, [pc, #292]	; (8009d2c <xTaskIncrementTick+0x150>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00a      	beq.n	8009c24 <xTaskIncrementTick+0x48>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	603b      	str	r3, [r7, #0]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <xTaskIncrementTick+0x46>
 8009c24:	4b41      	ldr	r3, [pc, #260]	; (8009d2c <xTaskIncrementTick+0x150>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	60fb      	str	r3, [r7, #12]
 8009c2a:	4b41      	ldr	r3, [pc, #260]	; (8009d30 <xTaskIncrementTick+0x154>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a3f      	ldr	r2, [pc, #252]	; (8009d2c <xTaskIncrementTick+0x150>)
 8009c30:	6013      	str	r3, [r2, #0]
 8009c32:	4a3f      	ldr	r2, [pc, #252]	; (8009d30 <xTaskIncrementTick+0x154>)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	4b3e      	ldr	r3, [pc, #248]	; (8009d34 <xTaskIncrementTick+0x158>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	4a3d      	ldr	r2, [pc, #244]	; (8009d34 <xTaskIncrementTick+0x158>)
 8009c40:	6013      	str	r3, [r2, #0]
 8009c42:	f000 fad1 	bl	800a1e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c46:	4b3c      	ldr	r3, [pc, #240]	; (8009d38 <xTaskIncrementTick+0x15c>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	693a      	ldr	r2, [r7, #16]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d349      	bcc.n	8009ce4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c50:	4b36      	ldr	r3, [pc, #216]	; (8009d2c <xTaskIncrementTick+0x150>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d104      	bne.n	8009c64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c5a:	4b37      	ldr	r3, [pc, #220]	; (8009d38 <xTaskIncrementTick+0x15c>)
 8009c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c60:	601a      	str	r2, [r3, #0]
					break;
 8009c62:	e03f      	b.n	8009ce4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c64:	4b31      	ldr	r3, [pc, #196]	; (8009d2c <xTaskIncrementTick+0x150>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d203      	bcs.n	8009c84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c7c:	4a2e      	ldr	r2, [pc, #184]	; (8009d38 <xTaskIncrementTick+0x15c>)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c82:	e02f      	b.n	8009ce4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	3304      	adds	r3, #4
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fe fc1b 	bl	80084c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d004      	beq.n	8009ca0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	3318      	adds	r3, #24
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fe fc12 	bl	80084c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca4:	4b25      	ldr	r3, [pc, #148]	; (8009d3c <xTaskIncrementTick+0x160>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d903      	bls.n	8009cb4 <xTaskIncrementTick+0xd8>
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb0:	4a22      	ldr	r2, [pc, #136]	; (8009d3c <xTaskIncrementTick+0x160>)
 8009cb2:	6013      	str	r3, [r2, #0]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb8:	4613      	mov	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4413      	add	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4a1f      	ldr	r2, [pc, #124]	; (8009d40 <xTaskIncrementTick+0x164>)
 8009cc2:	441a      	add	r2, r3
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	4619      	mov	r1, r3
 8009cca:	4610      	mov	r0, r2
 8009ccc:	f7fe fb9d 	bl	800840a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd4:	4b1b      	ldr	r3, [pc, #108]	; (8009d44 <xTaskIncrementTick+0x168>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d3b8      	bcc.n	8009c50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ce2:	e7b5      	b.n	8009c50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ce4:	4b17      	ldr	r3, [pc, #92]	; (8009d44 <xTaskIncrementTick+0x168>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cea:	4915      	ldr	r1, [pc, #84]	; (8009d40 <xTaskIncrementTick+0x164>)
 8009cec:	4613      	mov	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	4413      	add	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	440b      	add	r3, r1
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d901      	bls.n	8009d00 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009d00:	4b11      	ldr	r3, [pc, #68]	; (8009d48 <xTaskIncrementTick+0x16c>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d007      	beq.n	8009d18 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	617b      	str	r3, [r7, #20]
 8009d0c:	e004      	b.n	8009d18 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009d0e:	4b0f      	ldr	r3, [pc, #60]	; (8009d4c <xTaskIncrementTick+0x170>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	3301      	adds	r3, #1
 8009d14:	4a0d      	ldr	r2, [pc, #52]	; (8009d4c <xTaskIncrementTick+0x170>)
 8009d16:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009d18:	697b      	ldr	r3, [r7, #20]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	20001124 	.word	0x20001124
 8009d28:	20001100 	.word	0x20001100
 8009d2c:	200010b4 	.word	0x200010b4
 8009d30:	200010b8 	.word	0x200010b8
 8009d34:	20001114 	.word	0x20001114
 8009d38:	2000111c 	.word	0x2000111c
 8009d3c:	20001104 	.word	0x20001104
 8009d40:	20000c2c 	.word	0x20000c2c
 8009d44:	20000c28 	.word	0x20000c28
 8009d48:	20001110 	.word	0x20001110
 8009d4c:	2000110c 	.word	0x2000110c

08009d50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d56:	4b28      	ldr	r3, [pc, #160]	; (8009df8 <vTaskSwitchContext+0xa8>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d5e:	4b27      	ldr	r3, [pc, #156]	; (8009dfc <vTaskSwitchContext+0xac>)
 8009d60:	2201      	movs	r2, #1
 8009d62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d64:	e041      	b.n	8009dea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009d66:	4b25      	ldr	r3, [pc, #148]	; (8009dfc <vTaskSwitchContext+0xac>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d6c:	4b24      	ldr	r3, [pc, #144]	; (8009e00 <vTaskSwitchContext+0xb0>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	60fb      	str	r3, [r7, #12]
 8009d72:	e010      	b.n	8009d96 <vTaskSwitchContext+0x46>
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d10a      	bne.n	8009d90 <vTaskSwitchContext+0x40>
	__asm volatile
 8009d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7e:	f383 8811 	msr	BASEPRI, r3
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	607b      	str	r3, [r7, #4]
}
 8009d8c:	bf00      	nop
 8009d8e:	e7fe      	b.n	8009d8e <vTaskSwitchContext+0x3e>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	3b01      	subs	r3, #1
 8009d94:	60fb      	str	r3, [r7, #12]
 8009d96:	491b      	ldr	r1, [pc, #108]	; (8009e04 <vTaskSwitchContext+0xb4>)
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	4413      	add	r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	440b      	add	r3, r1
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d0e4      	beq.n	8009d74 <vTaskSwitchContext+0x24>
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	4613      	mov	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	4a13      	ldr	r2, [pc, #76]	; (8009e04 <vTaskSwitchContext+0xb4>)
 8009db6:	4413      	add	r3, r2
 8009db8:	60bb      	str	r3, [r7, #8]
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	685a      	ldr	r2, [r3, #4]
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	605a      	str	r2, [r3, #4]
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	3308      	adds	r3, #8
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d104      	bne.n	8009dda <vTaskSwitchContext+0x8a>
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	685a      	ldr	r2, [r3, #4]
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	605a      	str	r2, [r3, #4]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	4a09      	ldr	r2, [pc, #36]	; (8009e08 <vTaskSwitchContext+0xb8>)
 8009de2:	6013      	str	r3, [r2, #0]
 8009de4:	4a06      	ldr	r2, [pc, #24]	; (8009e00 <vTaskSwitchContext+0xb0>)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6013      	str	r3, [r2, #0]
}
 8009dea:	bf00      	nop
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	20001124 	.word	0x20001124
 8009dfc:	20001110 	.word	0x20001110
 8009e00:	20001104 	.word	0x20001104
 8009e04:	20000c2c 	.word	0x20000c2c
 8009e08:	20000c28 	.word	0x20000c28

08009e0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d10a      	bne.n	8009e32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	60fb      	str	r3, [r7, #12]
}
 8009e2e:	bf00      	nop
 8009e30:	e7fe      	b.n	8009e30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e32:	4b07      	ldr	r3, [pc, #28]	; (8009e50 <vTaskPlaceOnEventList+0x44>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3318      	adds	r3, #24
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7fe fb09 	bl	8008452 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e40:	2101      	movs	r1, #1
 8009e42:	6838      	ldr	r0, [r7, #0]
 8009e44:	f000 fb7a 	bl	800a53c <prvAddCurrentTaskToDelayedList>
}
 8009e48:	bf00      	nop
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	20000c28 	.word	0x20000c28

08009e54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d10a      	bne.n	8009e7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6a:	f383 8811 	msr	BASEPRI, r3
 8009e6e:	f3bf 8f6f 	isb	sy
 8009e72:	f3bf 8f4f 	dsb	sy
 8009e76:	617b      	str	r3, [r7, #20]
}
 8009e78:	bf00      	nop
 8009e7a:	e7fe      	b.n	8009e7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ea8 <vTaskPlaceOnEventListRestricted+0x54>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	3318      	adds	r3, #24
 8009e82:	4619      	mov	r1, r3
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f7fe fac0 	bl	800840a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e96:	6879      	ldr	r1, [r7, #4]
 8009e98:	68b8      	ldr	r0, [r7, #8]
 8009e9a:	f000 fb4f 	bl	800a53c <prvAddCurrentTaskToDelayedList>
	}
 8009e9e:	bf00      	nop
 8009ea0:	3718      	adds	r7, #24
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	20000c28 	.word	0x20000c28

08009eac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d10a      	bne.n	8009ed8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec6:	f383 8811 	msr	BASEPRI, r3
 8009eca:	f3bf 8f6f 	isb	sy
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	60fb      	str	r3, [r7, #12]
}
 8009ed4:	bf00      	nop
 8009ed6:	e7fe      	b.n	8009ed6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	3318      	adds	r3, #24
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fe faf1 	bl	80084c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ee2:	4b1e      	ldr	r3, [pc, #120]	; (8009f5c <xTaskRemoveFromEventList+0xb0>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d11d      	bne.n	8009f26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	3304      	adds	r3, #4
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fe fae8 	bl	80084c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef8:	4b19      	ldr	r3, [pc, #100]	; (8009f60 <xTaskRemoveFromEventList+0xb4>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d903      	bls.n	8009f08 <xTaskRemoveFromEventList+0x5c>
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	4a16      	ldr	r2, [pc, #88]	; (8009f60 <xTaskRemoveFromEventList+0xb4>)
 8009f06:	6013      	str	r3, [r2, #0]
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4a13      	ldr	r2, [pc, #76]	; (8009f64 <xTaskRemoveFromEventList+0xb8>)
 8009f16:	441a      	add	r2, r3
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	4610      	mov	r0, r2
 8009f20:	f7fe fa73 	bl	800840a <vListInsertEnd>
 8009f24:	e005      	b.n	8009f32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	3318      	adds	r3, #24
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	480e      	ldr	r0, [pc, #56]	; (8009f68 <xTaskRemoveFromEventList+0xbc>)
 8009f2e:	f7fe fa6c 	bl	800840a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f36:	4b0d      	ldr	r3, [pc, #52]	; (8009f6c <xTaskRemoveFromEventList+0xc0>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d905      	bls.n	8009f4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f40:	2301      	movs	r3, #1
 8009f42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f44:	4b0a      	ldr	r3, [pc, #40]	; (8009f70 <xTaskRemoveFromEventList+0xc4>)
 8009f46:	2201      	movs	r2, #1
 8009f48:	601a      	str	r2, [r3, #0]
 8009f4a:	e001      	b.n	8009f50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f50:	697b      	ldr	r3, [r7, #20]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3718      	adds	r7, #24
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	20001124 	.word	0x20001124
 8009f60:	20001104 	.word	0x20001104
 8009f64:	20000c2c 	.word	0x20000c2c
 8009f68:	200010bc 	.word	0x200010bc
 8009f6c:	20000c28 	.word	0x20000c28
 8009f70:	20001110 	.word	0x20001110

08009f74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f7c:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <vTaskInternalSetTimeOutState+0x24>)
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f84:	4b05      	ldr	r3, [pc, #20]	; (8009f9c <vTaskInternalSetTimeOutState+0x28>)
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	605a      	str	r2, [r3, #4]
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr
 8009f98:	20001114 	.word	0x20001114
 8009f9c:	20001100 	.word	0x20001100

08009fa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b088      	sub	sp, #32
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10a      	bne.n	8009fc6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	613b      	str	r3, [r7, #16]
}
 8009fc2:	bf00      	nop
 8009fc4:	e7fe      	b.n	8009fc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10a      	bne.n	8009fe2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	60fb      	str	r3, [r7, #12]
}
 8009fde:	bf00      	nop
 8009fe0:	e7fe      	b.n	8009fe0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009fe2:	f000 ff77 	bl	800aed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009fe6:	4b1d      	ldr	r3, [pc, #116]	; (800a05c <xTaskCheckForTimeOut+0xbc>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	69ba      	ldr	r2, [r7, #24]
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ffe:	d102      	bne.n	800a006 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a000:	2300      	movs	r3, #0
 800a002:	61fb      	str	r3, [r7, #28]
 800a004:	e023      	b.n	800a04e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	4b15      	ldr	r3, [pc, #84]	; (800a060 <xTaskCheckForTimeOut+0xc0>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d007      	beq.n	800a022 <xTaskCheckForTimeOut+0x82>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	69ba      	ldr	r2, [r7, #24]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d302      	bcc.n	800a022 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a01c:	2301      	movs	r3, #1
 800a01e:	61fb      	str	r3, [r7, #28]
 800a020:	e015      	b.n	800a04e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d20b      	bcs.n	800a044 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	1ad2      	subs	r2, r2, r3
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f7ff ff9b 	bl	8009f74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a03e:	2300      	movs	r3, #0
 800a040:	61fb      	str	r3, [r7, #28]
 800a042:	e004      	b.n	800a04e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	2200      	movs	r2, #0
 800a048:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a04a:	2301      	movs	r3, #1
 800a04c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a04e:	f000 ff71 	bl	800af34 <vPortExitCritical>

	return xReturn;
 800a052:	69fb      	ldr	r3, [r7, #28]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3720      	adds	r7, #32
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	20001100 	.word	0x20001100
 800a060:	20001114 	.word	0x20001114

0800a064 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a064:	b480      	push	{r7}
 800a066:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a068:	4b03      	ldr	r3, [pc, #12]	; (800a078 <vTaskMissedYield+0x14>)
 800a06a:	2201      	movs	r2, #1
 800a06c:	601a      	str	r2, [r3, #0]
}
 800a06e:	bf00      	nop
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	20001110 	.word	0x20001110

0800a07c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a084:	f000 f852 	bl	800a12c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a088:	4b06      	ldr	r3, [pc, #24]	; (800a0a4 <prvIdleTask+0x28>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d9f9      	bls.n	800a084 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a090:	4b05      	ldr	r3, [pc, #20]	; (800a0a8 <prvIdleTask+0x2c>)
 800a092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a096:	601a      	str	r2, [r3, #0]
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0a0:	e7f0      	b.n	800a084 <prvIdleTask+0x8>
 800a0a2:	bf00      	nop
 800a0a4:	20000c2c 	.word	0x20000c2c
 800a0a8:	e000ed04 	.word	0xe000ed04

0800a0ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	607b      	str	r3, [r7, #4]
 800a0b6:	e00c      	b.n	800a0d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4a12      	ldr	r2, [pc, #72]	; (800a10c <prvInitialiseTaskLists+0x60>)
 800a0c4:	4413      	add	r3, r2
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe f972 	bl	80083b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	607b      	str	r3, [r7, #4]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2b37      	cmp	r3, #55	; 0x37
 800a0d6:	d9ef      	bls.n	800a0b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0d8:	480d      	ldr	r0, [pc, #52]	; (800a110 <prvInitialiseTaskLists+0x64>)
 800a0da:	f7fe f969 	bl	80083b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0de:	480d      	ldr	r0, [pc, #52]	; (800a114 <prvInitialiseTaskLists+0x68>)
 800a0e0:	f7fe f966 	bl	80083b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a0e4:	480c      	ldr	r0, [pc, #48]	; (800a118 <prvInitialiseTaskLists+0x6c>)
 800a0e6:	f7fe f963 	bl	80083b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a0ea:	480c      	ldr	r0, [pc, #48]	; (800a11c <prvInitialiseTaskLists+0x70>)
 800a0ec:	f7fe f960 	bl	80083b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a0f0:	480b      	ldr	r0, [pc, #44]	; (800a120 <prvInitialiseTaskLists+0x74>)
 800a0f2:	f7fe f95d 	bl	80083b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a0f6:	4b0b      	ldr	r3, [pc, #44]	; (800a124 <prvInitialiseTaskLists+0x78>)
 800a0f8:	4a05      	ldr	r2, [pc, #20]	; (800a110 <prvInitialiseTaskLists+0x64>)
 800a0fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a0fc:	4b0a      	ldr	r3, [pc, #40]	; (800a128 <prvInitialiseTaskLists+0x7c>)
 800a0fe:	4a05      	ldr	r2, [pc, #20]	; (800a114 <prvInitialiseTaskLists+0x68>)
 800a100:	601a      	str	r2, [r3, #0]
}
 800a102:	bf00      	nop
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	20000c2c 	.word	0x20000c2c
 800a110:	2000108c 	.word	0x2000108c
 800a114:	200010a0 	.word	0x200010a0
 800a118:	200010bc 	.word	0x200010bc
 800a11c:	200010d0 	.word	0x200010d0
 800a120:	200010e8 	.word	0x200010e8
 800a124:	200010b4 	.word	0x200010b4
 800a128:	200010b8 	.word	0x200010b8

0800a12c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a132:	e019      	b.n	800a168 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a134:	f000 fece 	bl	800aed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a138:	4b10      	ldr	r3, [pc, #64]	; (800a17c <prvCheckTasksWaitingTermination+0x50>)
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	3304      	adds	r3, #4
 800a144:	4618      	mov	r0, r3
 800a146:	f7fe f9bd 	bl	80084c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a14a:	4b0d      	ldr	r3, [pc, #52]	; (800a180 <prvCheckTasksWaitingTermination+0x54>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	3b01      	subs	r3, #1
 800a150:	4a0b      	ldr	r2, [pc, #44]	; (800a180 <prvCheckTasksWaitingTermination+0x54>)
 800a152:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a154:	4b0b      	ldr	r3, [pc, #44]	; (800a184 <prvCheckTasksWaitingTermination+0x58>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	3b01      	subs	r3, #1
 800a15a:	4a0a      	ldr	r2, [pc, #40]	; (800a184 <prvCheckTasksWaitingTermination+0x58>)
 800a15c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a15e:	f000 fee9 	bl	800af34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f810 	bl	800a188 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a168:	4b06      	ldr	r3, [pc, #24]	; (800a184 <prvCheckTasksWaitingTermination+0x58>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1e1      	bne.n	800a134 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a170:	bf00      	nop
 800a172:	bf00      	nop
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	200010d0 	.word	0x200010d0
 800a180:	200010fc 	.word	0x200010fc
 800a184:	200010e4 	.word	0x200010e4

0800a188 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a196:	2b00      	cmp	r3, #0
 800a198:	d108      	bne.n	800a1ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f001 f886 	bl	800b2b0 <vPortFree>
				vPortFree( pxTCB );
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f001 f883 	bl	800b2b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1aa:	e018      	b.n	800a1de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d103      	bne.n	800a1be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f001 f87a 	bl	800b2b0 <vPortFree>
	}
 800a1bc:	e00f      	b.n	800a1de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d00a      	beq.n	800a1de <prvDeleteTCB+0x56>
	__asm volatile
 800a1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1cc:	f383 8811 	msr	BASEPRI, r3
 800a1d0:	f3bf 8f6f 	isb	sy
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	60fb      	str	r3, [r7, #12]
}
 800a1da:	bf00      	nop
 800a1dc:	e7fe      	b.n	800a1dc <prvDeleteTCB+0x54>
	}
 800a1de:	bf00      	nop
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
	...

0800a1e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1ee:	4b0c      	ldr	r3, [pc, #48]	; (800a220 <prvResetNextTaskUnblockTime+0x38>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d104      	bne.n	800a202 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1f8:	4b0a      	ldr	r3, [pc, #40]	; (800a224 <prvResetNextTaskUnblockTime+0x3c>)
 800a1fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a200:	e008      	b.n	800a214 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a202:	4b07      	ldr	r3, [pc, #28]	; (800a220 <prvResetNextTaskUnblockTime+0x38>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	4a04      	ldr	r2, [pc, #16]	; (800a224 <prvResetNextTaskUnblockTime+0x3c>)
 800a212:	6013      	str	r3, [r2, #0]
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	200010b4 	.word	0x200010b4
 800a224:	2000111c 	.word	0x2000111c

0800a228 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a22e:	4b0b      	ldr	r3, [pc, #44]	; (800a25c <xTaskGetSchedulerState+0x34>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d102      	bne.n	800a23c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a236:	2301      	movs	r3, #1
 800a238:	607b      	str	r3, [r7, #4]
 800a23a:	e008      	b.n	800a24e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a23c:	4b08      	ldr	r3, [pc, #32]	; (800a260 <xTaskGetSchedulerState+0x38>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d102      	bne.n	800a24a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a244:	2302      	movs	r3, #2
 800a246:	607b      	str	r3, [r7, #4]
 800a248:	e001      	b.n	800a24e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a24a:	2300      	movs	r3, #0
 800a24c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a24e:	687b      	ldr	r3, [r7, #4]
	}
 800a250:	4618      	mov	r0, r3
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	20001108 	.word	0x20001108
 800a260:	20001124 	.word	0x20001124

0800a264 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a270:	2300      	movs	r3, #0
 800a272:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d051      	beq.n	800a31e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a27e:	4b2a      	ldr	r3, [pc, #168]	; (800a328 <xTaskPriorityInherit+0xc4>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a284:	429a      	cmp	r2, r3
 800a286:	d241      	bcs.n	800a30c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	db06      	blt.n	800a29e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a290:	4b25      	ldr	r3, [pc, #148]	; (800a328 <xTaskPriorityInherit+0xc4>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a296:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	6959      	ldr	r1, [r3, #20]
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	4a1f      	ldr	r2, [pc, #124]	; (800a32c <xTaskPriorityInherit+0xc8>)
 800a2b0:	4413      	add	r3, r2
 800a2b2:	4299      	cmp	r1, r3
 800a2b4:	d122      	bne.n	800a2fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fe f902 	bl	80084c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a2c0:	4b19      	ldr	r3, [pc, #100]	; (800a328 <xTaskPriorityInherit+0xc4>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ce:	4b18      	ldr	r3, [pc, #96]	; (800a330 <xTaskPriorityInherit+0xcc>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d903      	bls.n	800a2de <xTaskPriorityInherit+0x7a>
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2da:	4a15      	ldr	r2, [pc, #84]	; (800a330 <xTaskPriorityInherit+0xcc>)
 800a2dc:	6013      	str	r3, [r2, #0]
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	4413      	add	r3, r2
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4a10      	ldr	r2, [pc, #64]	; (800a32c <xTaskPriorityInherit+0xc8>)
 800a2ec:	441a      	add	r2, r3
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	4610      	mov	r0, r2
 800a2f6:	f7fe f888 	bl	800840a <vListInsertEnd>
 800a2fa:	e004      	b.n	800a306 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a2fc:	4b0a      	ldr	r3, [pc, #40]	; (800a328 <xTaskPriorityInherit+0xc4>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a306:	2301      	movs	r3, #1
 800a308:	60fb      	str	r3, [r7, #12]
 800a30a:	e008      	b.n	800a31e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a310:	4b05      	ldr	r3, [pc, #20]	; (800a328 <xTaskPriorityInherit+0xc4>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a316:	429a      	cmp	r2, r3
 800a318:	d201      	bcs.n	800a31e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a31a:	2301      	movs	r3, #1
 800a31c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a31e:	68fb      	ldr	r3, [r7, #12]
	}
 800a320:	4618      	mov	r0, r3
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	20000c28 	.word	0x20000c28
 800a32c:	20000c2c 	.word	0x20000c2c
 800a330:	20001104 	.word	0x20001104

0800a334 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a340:	2300      	movs	r3, #0
 800a342:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d056      	beq.n	800a3f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a34a:	4b2e      	ldr	r3, [pc, #184]	; (800a404 <xTaskPriorityDisinherit+0xd0>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	429a      	cmp	r2, r3
 800a352:	d00a      	beq.n	800a36a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	60fb      	str	r3, [r7, #12]
}
 800a366:	bf00      	nop
 800a368:	e7fe      	b.n	800a368 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10a      	bne.n	800a388 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	60bb      	str	r3, [r7, #8]
}
 800a384:	bf00      	nop
 800a386:	e7fe      	b.n	800a386 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a38c:	1e5a      	subs	r2, r3, #1
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d02c      	beq.n	800a3f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d128      	bne.n	800a3f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	3304      	adds	r3, #4
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe f88a 	bl	80084c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c8:	4b0f      	ldr	r3, [pc, #60]	; (800a408 <xTaskPriorityDisinherit+0xd4>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d903      	bls.n	800a3d8 <xTaskPriorityDisinherit+0xa4>
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d4:	4a0c      	ldr	r2, [pc, #48]	; (800a408 <xTaskPriorityDisinherit+0xd4>)
 800a3d6:	6013      	str	r3, [r2, #0]
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3dc:	4613      	mov	r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4413      	add	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4a09      	ldr	r2, [pc, #36]	; (800a40c <xTaskPriorityDisinherit+0xd8>)
 800a3e6:	441a      	add	r2, r3
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	3304      	adds	r3, #4
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	4610      	mov	r0, r2
 800a3f0:	f7fe f80b 	bl	800840a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3f8:	697b      	ldr	r3, [r7, #20]
	}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3718      	adds	r7, #24
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	20000c28 	.word	0x20000c28
 800a408:	20001104 	.word	0x20001104
 800a40c:	20000c2c 	.word	0x20000c2c

0800a410 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a410:	b580      	push	{r7, lr}
 800a412:	b088      	sub	sp, #32
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a41e:	2301      	movs	r3, #1
 800a420:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d06a      	beq.n	800a4fe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10a      	bne.n	800a446 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	60fb      	str	r3, [r7, #12]
}
 800a442:	bf00      	nop
 800a444:	e7fe      	b.n	800a444 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d902      	bls.n	800a456 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	61fb      	str	r3, [r7, #28]
 800a454:	e002      	b.n	800a45c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a45a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a460:	69fa      	ldr	r2, [r7, #28]
 800a462:	429a      	cmp	r2, r3
 800a464:	d04b      	beq.n	800a4fe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d146      	bne.n	800a4fe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a470:	4b25      	ldr	r3, [pc, #148]	; (800a508 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	69ba      	ldr	r2, [r7, #24]
 800a476:	429a      	cmp	r2, r3
 800a478:	d10a      	bne.n	800a490 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47e:	f383 8811 	msr	BASEPRI, r3
 800a482:	f3bf 8f6f 	isb	sy
 800a486:	f3bf 8f4f 	dsb	sy
 800a48a:	60bb      	str	r3, [r7, #8]
}
 800a48c:	bf00      	nop
 800a48e:	e7fe      	b.n	800a48e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a494:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	69fa      	ldr	r2, [r7, #28]
 800a49a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	db04      	blt.n	800a4ae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	6959      	ldr	r1, [r3, #20]
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	4613      	mov	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	4413      	add	r3, r2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4a13      	ldr	r2, [pc, #76]	; (800a50c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a4be:	4413      	add	r3, r2
 800a4c0:	4299      	cmp	r1, r3
 800a4c2:	d11c      	bne.n	800a4fe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	3304      	adds	r3, #4
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7fd fffb 	bl	80084c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d2:	4b0f      	ldr	r3, [pc, #60]	; (800a510 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d903      	bls.n	800a4e2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4de:	4a0c      	ldr	r2, [pc, #48]	; (800a510 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a4e0:	6013      	str	r3, [r2, #0]
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4a07      	ldr	r2, [pc, #28]	; (800a50c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a4f0:	441a      	add	r2, r3
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	f7fd ff86 	bl	800840a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4fe:	bf00      	nop
 800a500:	3720      	adds	r7, #32
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	20000c28 	.word	0x20000c28
 800a50c:	20000c2c 	.word	0x20000c2c
 800a510:	20001104 	.word	0x20001104

0800a514 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a514:	b480      	push	{r7}
 800a516:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a518:	4b07      	ldr	r3, [pc, #28]	; (800a538 <pvTaskIncrementMutexHeldCount+0x24>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d004      	beq.n	800a52a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a520:	4b05      	ldr	r3, [pc, #20]	; (800a538 <pvTaskIncrementMutexHeldCount+0x24>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a526:	3201      	adds	r2, #1
 800a528:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a52a:	4b03      	ldr	r3, [pc, #12]	; (800a538 <pvTaskIncrementMutexHeldCount+0x24>)
 800a52c:	681b      	ldr	r3, [r3, #0]
	}
 800a52e:	4618      	mov	r0, r3
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	20000c28 	.word	0x20000c28

0800a53c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a546:	4b21      	ldr	r3, [pc, #132]	; (800a5cc <prvAddCurrentTaskToDelayedList+0x90>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a54c:	4b20      	ldr	r3, [pc, #128]	; (800a5d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	3304      	adds	r3, #4
 800a552:	4618      	mov	r0, r3
 800a554:	f7fd ffb6 	bl	80084c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a55e:	d10a      	bne.n	800a576 <prvAddCurrentTaskToDelayedList+0x3a>
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d007      	beq.n	800a576 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a566:	4b1a      	ldr	r3, [pc, #104]	; (800a5d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	3304      	adds	r3, #4
 800a56c:	4619      	mov	r1, r3
 800a56e:	4819      	ldr	r0, [pc, #100]	; (800a5d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a570:	f7fd ff4b 	bl	800840a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a574:	e026      	b.n	800a5c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4413      	add	r3, r2
 800a57c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a57e:	4b14      	ldr	r3, [pc, #80]	; (800a5d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d209      	bcs.n	800a5a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a58e:	4b12      	ldr	r3, [pc, #72]	; (800a5d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	4b0f      	ldr	r3, [pc, #60]	; (800a5d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	3304      	adds	r3, #4
 800a598:	4619      	mov	r1, r3
 800a59a:	4610      	mov	r0, r2
 800a59c:	f7fd ff59 	bl	8008452 <vListInsert>
}
 800a5a0:	e010      	b.n	800a5c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5a2:	4b0e      	ldr	r3, [pc, #56]	; (800a5dc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	4b0a      	ldr	r3, [pc, #40]	; (800a5d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	4610      	mov	r0, r2
 800a5b0:	f7fd ff4f 	bl	8008452 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a5b4:	4b0a      	ldr	r3, [pc, #40]	; (800a5e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d202      	bcs.n	800a5c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a5be:	4a08      	ldr	r2, [pc, #32]	; (800a5e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	6013      	str	r3, [r2, #0]
}
 800a5c4:	bf00      	nop
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	20001100 	.word	0x20001100
 800a5d0:	20000c28 	.word	0x20000c28
 800a5d4:	200010e8 	.word	0x200010e8
 800a5d8:	200010b8 	.word	0x200010b8
 800a5dc:	200010b4 	.word	0x200010b4
 800a5e0:	2000111c 	.word	0x2000111c

0800a5e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b08a      	sub	sp, #40	; 0x28
 800a5e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5ee:	f000 fb07 	bl	800ac00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5f2:	4b1c      	ldr	r3, [pc, #112]	; (800a664 <xTimerCreateTimerTask+0x80>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d021      	beq.n	800a63e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5fe:	2300      	movs	r3, #0
 800a600:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a602:	1d3a      	adds	r2, r7, #4
 800a604:	f107 0108 	add.w	r1, r7, #8
 800a608:	f107 030c 	add.w	r3, r7, #12
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7fd feb5 	bl	800837c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a612:	6879      	ldr	r1, [r7, #4]
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	9202      	str	r2, [sp, #8]
 800a61a:	9301      	str	r3, [sp, #4]
 800a61c:	2302      	movs	r3, #2
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	2300      	movs	r3, #0
 800a622:	460a      	mov	r2, r1
 800a624:	4910      	ldr	r1, [pc, #64]	; (800a668 <xTimerCreateTimerTask+0x84>)
 800a626:	4811      	ldr	r0, [pc, #68]	; (800a66c <xTimerCreateTimerTask+0x88>)
 800a628:	f7fe ff84 	bl	8009534 <xTaskCreateStatic>
 800a62c:	4603      	mov	r3, r0
 800a62e:	4a10      	ldr	r2, [pc, #64]	; (800a670 <xTimerCreateTimerTask+0x8c>)
 800a630:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a632:	4b0f      	ldr	r3, [pc, #60]	; (800a670 <xTimerCreateTimerTask+0x8c>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d001      	beq.n	800a63e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a63a:	2301      	movs	r3, #1
 800a63c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10a      	bne.n	800a65a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	613b      	str	r3, [r7, #16]
}
 800a656:	bf00      	nop
 800a658:	e7fe      	b.n	800a658 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a65a:	697b      	ldr	r3, [r7, #20]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3718      	adds	r7, #24
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	20001158 	.word	0x20001158
 800a668:	0800e864 	.word	0x0800e864
 800a66c:	0800a7a9 	.word	0x0800a7a9
 800a670:	2000115c 	.word	0x2000115c

0800a674 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b08a      	sub	sp, #40	; 0x28
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	607a      	str	r2, [r7, #4]
 800a680:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a682:	2300      	movs	r3, #0
 800a684:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10a      	bne.n	800a6a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a690:	f383 8811 	msr	BASEPRI, r3
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	623b      	str	r3, [r7, #32]
}
 800a69e:	bf00      	nop
 800a6a0:	e7fe      	b.n	800a6a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a6a2:	4b1a      	ldr	r3, [pc, #104]	; (800a70c <xTimerGenericCommand+0x98>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d02a      	beq.n	800a700 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	2b05      	cmp	r3, #5
 800a6ba:	dc18      	bgt.n	800a6ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a6bc:	f7ff fdb4 	bl	800a228 <xTaskGetSchedulerState>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d109      	bne.n	800a6da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a6c6:	4b11      	ldr	r3, [pc, #68]	; (800a70c <xTimerGenericCommand+0x98>)
 800a6c8:	6818      	ldr	r0, [r3, #0]
 800a6ca:	f107 0110 	add.w	r1, r7, #16
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6d2:	f7fe f8c9 	bl	8008868 <xQueueGenericSend>
 800a6d6:	6278      	str	r0, [r7, #36]	; 0x24
 800a6d8:	e012      	b.n	800a700 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6da:	4b0c      	ldr	r3, [pc, #48]	; (800a70c <xTimerGenericCommand+0x98>)
 800a6dc:	6818      	ldr	r0, [r3, #0]
 800a6de:	f107 0110 	add.w	r1, r7, #16
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f7fe f8bf 	bl	8008868 <xQueueGenericSend>
 800a6ea:	6278      	str	r0, [r7, #36]	; 0x24
 800a6ec:	e008      	b.n	800a700 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a6ee:	4b07      	ldr	r3, [pc, #28]	; (800a70c <xTimerGenericCommand+0x98>)
 800a6f0:	6818      	ldr	r0, [r3, #0]
 800a6f2:	f107 0110 	add.w	r1, r7, #16
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	f7fe f9b3 	bl	8008a64 <xQueueGenericSendFromISR>
 800a6fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a702:	4618      	mov	r0, r3
 800a704:	3728      	adds	r7, #40	; 0x28
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	20001158 	.word	0x20001158

0800a710 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b088      	sub	sp, #32
 800a714:	af02      	add	r7, sp, #8
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a71a:	4b22      	ldr	r3, [pc, #136]	; (800a7a4 <prvProcessExpiredTimer+0x94>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	3304      	adds	r3, #4
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fd fecb 	bl	80084c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a734:	f003 0304 	and.w	r3, r3, #4
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d022      	beq.n	800a782 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	699a      	ldr	r2, [r3, #24]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	18d1      	adds	r1, r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	683a      	ldr	r2, [r7, #0]
 800a748:	6978      	ldr	r0, [r7, #20]
 800a74a:	f000 f8d1 	bl	800a8f0 <prvInsertTimerInActiveList>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d01f      	beq.n	800a794 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a754:	2300      	movs	r3, #0
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	2300      	movs	r3, #0
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	2100      	movs	r1, #0
 800a75e:	6978      	ldr	r0, [r7, #20]
 800a760:	f7ff ff88 	bl	800a674 <xTimerGenericCommand>
 800a764:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d113      	bne.n	800a794 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	60fb      	str	r3, [r7, #12]
}
 800a77e:	bf00      	nop
 800a780:	e7fe      	b.n	800a780 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a788:	f023 0301 	bic.w	r3, r3, #1
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	6a1b      	ldr	r3, [r3, #32]
 800a798:	6978      	ldr	r0, [r7, #20]
 800a79a:	4798      	blx	r3
}
 800a79c:	bf00      	nop
 800a79e:	3718      	adds	r7, #24
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	20001150 	.word	0x20001150

0800a7a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7b0:	f107 0308 	add.w	r3, r7, #8
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f000 f857 	bl	800a868 <prvGetNextExpireTime>
 800a7ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	4619      	mov	r1, r3
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f000 f803 	bl	800a7cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a7c6:	f000 f8d5 	bl	800a974 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7ca:	e7f1      	b.n	800a7b0 <prvTimerTask+0x8>

0800a7cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a7d6:	f7ff f933 	bl	8009a40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7da:	f107 0308 	add.w	r3, r7, #8
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 f866 	bl	800a8b0 <prvSampleTimeNow>
 800a7e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d130      	bne.n	800a84e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d10a      	bne.n	800a808 <prvProcessTimerOrBlockTask+0x3c>
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d806      	bhi.n	800a808 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a7fa:	f7ff f92f 	bl	8009a5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a7fe:	68f9      	ldr	r1, [r7, #12]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f7ff ff85 	bl	800a710 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a806:	e024      	b.n	800a852 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d008      	beq.n	800a820 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a80e:	4b13      	ldr	r3, [pc, #76]	; (800a85c <prvProcessTimerOrBlockTask+0x90>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <prvProcessTimerOrBlockTask+0x50>
 800a818:	2301      	movs	r3, #1
 800a81a:	e000      	b.n	800a81e <prvProcessTimerOrBlockTask+0x52>
 800a81c:	2300      	movs	r3, #0
 800a81e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a820:	4b0f      	ldr	r3, [pc, #60]	; (800a860 <prvProcessTimerOrBlockTask+0x94>)
 800a822:	6818      	ldr	r0, [r3, #0]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	4619      	mov	r1, r3
 800a82e:	f7fe fe4d 	bl	80094cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a832:	f7ff f913 	bl	8009a5c <xTaskResumeAll>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10a      	bne.n	800a852 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a83c:	4b09      	ldr	r3, [pc, #36]	; (800a864 <prvProcessTimerOrBlockTask+0x98>)
 800a83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a842:	601a      	str	r2, [r3, #0]
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	f3bf 8f6f 	isb	sy
}
 800a84c:	e001      	b.n	800a852 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a84e:	f7ff f905 	bl	8009a5c <xTaskResumeAll>
}
 800a852:	bf00      	nop
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	20001154 	.word	0x20001154
 800a860:	20001158 	.word	0x20001158
 800a864:	e000ed04 	.word	0xe000ed04

0800a868 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a870:	4b0e      	ldr	r3, [pc, #56]	; (800a8ac <prvGetNextExpireTime+0x44>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d101      	bne.n	800a87e <prvGetNextExpireTime+0x16>
 800a87a:	2201      	movs	r2, #1
 800a87c:	e000      	b.n	800a880 <prvGetNextExpireTime+0x18>
 800a87e:	2200      	movs	r2, #0
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d105      	bne.n	800a898 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a88c:	4b07      	ldr	r3, [pc, #28]	; (800a8ac <prvGetNextExpireTime+0x44>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	60fb      	str	r3, [r7, #12]
 800a896:	e001      	b.n	800a89c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a898:	2300      	movs	r3, #0
 800a89a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a89c:	68fb      	ldr	r3, [r7, #12]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3714      	adds	r7, #20
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	20001150 	.word	0x20001150

0800a8b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a8b8:	f7ff f96e 	bl	8009b98 <xTaskGetTickCount>
 800a8bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a8be:	4b0b      	ldr	r3, [pc, #44]	; (800a8ec <prvSampleTimeNow+0x3c>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d205      	bcs.n	800a8d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a8c8:	f000 f936 	bl	800ab38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	601a      	str	r2, [r3, #0]
 800a8d2:	e002      	b.n	800a8da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a8da:	4a04      	ldr	r2, [pc, #16]	; (800a8ec <prvSampleTimeNow+0x3c>)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20001160 	.word	0x20001160

0800a8f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a8fe:	2300      	movs	r3, #0
 800a900:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	429a      	cmp	r2, r3
 800a914:	d812      	bhi.n	800a93c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	1ad2      	subs	r2, r2, r3
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	429a      	cmp	r2, r3
 800a922:	d302      	bcc.n	800a92a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a924:	2301      	movs	r3, #1
 800a926:	617b      	str	r3, [r7, #20]
 800a928:	e01b      	b.n	800a962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a92a:	4b10      	ldr	r3, [pc, #64]	; (800a96c <prvInsertTimerInActiveList+0x7c>)
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	3304      	adds	r3, #4
 800a932:	4619      	mov	r1, r3
 800a934:	4610      	mov	r0, r2
 800a936:	f7fd fd8c 	bl	8008452 <vListInsert>
 800a93a:	e012      	b.n	800a962 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	429a      	cmp	r2, r3
 800a942:	d206      	bcs.n	800a952 <prvInsertTimerInActiveList+0x62>
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d302      	bcc.n	800a952 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a94c:	2301      	movs	r3, #1
 800a94e:	617b      	str	r3, [r7, #20]
 800a950:	e007      	b.n	800a962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a952:	4b07      	ldr	r3, [pc, #28]	; (800a970 <prvInsertTimerInActiveList+0x80>)
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	3304      	adds	r3, #4
 800a95a:	4619      	mov	r1, r3
 800a95c:	4610      	mov	r0, r2
 800a95e:	f7fd fd78 	bl	8008452 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a962:	697b      	ldr	r3, [r7, #20]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3718      	adds	r7, #24
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	20001154 	.word	0x20001154
 800a970:	20001150 	.word	0x20001150

0800a974 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b08e      	sub	sp, #56	; 0x38
 800a978:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a97a:	e0ca      	b.n	800ab12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	da18      	bge.n	800a9b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a982:	1d3b      	adds	r3, r7, #4
 800a984:	3304      	adds	r3, #4
 800a986:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10a      	bne.n	800a9a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	61fb      	str	r3, [r7, #28]
}
 800a9a0:	bf00      	nop
 800a9a2:	e7fe      	b.n	800a9a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9aa:	6850      	ldr	r0, [r2, #4]
 800a9ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9ae:	6892      	ldr	r2, [r2, #8]
 800a9b0:	4611      	mov	r1, r2
 800a9b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f2c0 80ab 	blt.w	800ab12 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c2:	695b      	ldr	r3, [r3, #20]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d004      	beq.n	800a9d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ca:	3304      	adds	r3, #4
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7fd fd79 	bl	80084c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9d2:	463b      	mov	r3, r7
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7ff ff6b 	bl	800a8b0 <prvSampleTimeNow>
 800a9da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2b09      	cmp	r3, #9
 800a9e0:	f200 8096 	bhi.w	800ab10 <prvProcessReceivedCommands+0x19c>
 800a9e4:	a201      	add	r2, pc, #4	; (adr r2, 800a9ec <prvProcessReceivedCommands+0x78>)
 800a9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ea:	bf00      	nop
 800a9ec:	0800aa15 	.word	0x0800aa15
 800a9f0:	0800aa15 	.word	0x0800aa15
 800a9f4:	0800aa15 	.word	0x0800aa15
 800a9f8:	0800aa89 	.word	0x0800aa89
 800a9fc:	0800aa9d 	.word	0x0800aa9d
 800aa00:	0800aae7 	.word	0x0800aae7
 800aa04:	0800aa15 	.word	0x0800aa15
 800aa08:	0800aa15 	.word	0x0800aa15
 800aa0c:	0800aa89 	.word	0x0800aa89
 800aa10:	0800aa9d 	.word	0x0800aa9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa1a:	f043 0301 	orr.w	r3, r3, #1
 800aa1e:	b2da      	uxtb	r2, r3
 800aa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	18d1      	adds	r1, r2, r3
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa34:	f7ff ff5c 	bl	800a8f0 <prvInsertTimerInActiveList>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d069      	beq.n	800ab12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa4c:	f003 0304 	and.w	r3, r3, #4
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d05e      	beq.n	800ab12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa54:	68ba      	ldr	r2, [r7, #8]
 800aa56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa58:	699b      	ldr	r3, [r3, #24]
 800aa5a:	441a      	add	r2, r3
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	2300      	movs	r3, #0
 800aa62:	2100      	movs	r1, #0
 800aa64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa66:	f7ff fe05 	bl	800a674 <xTimerGenericCommand>
 800aa6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa6c:	6a3b      	ldr	r3, [r7, #32]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d14f      	bne.n	800ab12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa76:	f383 8811 	msr	BASEPRI, r3
 800aa7a:	f3bf 8f6f 	isb	sy
 800aa7e:	f3bf 8f4f 	dsb	sy
 800aa82:	61bb      	str	r3, [r7, #24]
}
 800aa84:	bf00      	nop
 800aa86:	e7fe      	b.n	800aa86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa8e:	f023 0301 	bic.w	r3, r3, #1
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aa9a:	e03a      	b.n	800ab12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaa2:	f043 0301 	orr.w	r3, r3, #1
 800aaa6:	b2da      	uxtb	r2, r3
 800aaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10a      	bne.n	800aad2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac0:	f383 8811 	msr	BASEPRI, r3
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	f3bf 8f4f 	dsb	sy
 800aacc:	617b      	str	r3, [r7, #20]
}
 800aace:	bf00      	nop
 800aad0:	e7fe      	b.n	800aad0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad4:	699a      	ldr	r2, [r3, #24]
 800aad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad8:	18d1      	adds	r1, r2, r3
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aae0:	f7ff ff06 	bl	800a8f0 <prvInsertTimerInActiveList>
					break;
 800aae4:	e015      	b.n	800ab12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaec:	f003 0302 	and.w	r3, r3, #2
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d103      	bne.n	800aafc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aaf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaf6:	f000 fbdb 	bl	800b2b0 <vPortFree>
 800aafa:	e00a      	b.n	800ab12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab02:	f023 0301 	bic.w	r3, r3, #1
 800ab06:	b2da      	uxtb	r2, r3
 800ab08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab0e:	e000      	b.n	800ab12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800ab10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab12:	4b08      	ldr	r3, [pc, #32]	; (800ab34 <prvProcessReceivedCommands+0x1c0>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	1d39      	adds	r1, r7, #4
 800ab18:	2200      	movs	r2, #0
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fe f8ca 	bl	8008cb4 <xQueueReceive>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	f47f af2a 	bne.w	800a97c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ab28:	bf00      	nop
 800ab2a:	bf00      	nop
 800ab2c:	3730      	adds	r7, #48	; 0x30
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	20001158 	.word	0x20001158

0800ab38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b088      	sub	sp, #32
 800ab3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab3e:	e048      	b.n	800abd2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab40:	4b2d      	ldr	r3, [pc, #180]	; (800abf8 <prvSwitchTimerLists+0xc0>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab4a:	4b2b      	ldr	r3, [pc, #172]	; (800abf8 <prvSwitchTimerLists+0xc0>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	3304      	adds	r3, #4
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7fd fcb3 	bl	80084c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6a1b      	ldr	r3, [r3, #32]
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab6c:	f003 0304 	and.w	r3, r3, #4
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d02e      	beq.n	800abd2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	699b      	ldr	r3, [r3, #24]
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	4413      	add	r3, r2
 800ab7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ab7e:	68ba      	ldr	r2, [r7, #8]
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d90e      	bls.n	800aba4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab92:	4b19      	ldr	r3, [pc, #100]	; (800abf8 <prvSwitchTimerLists+0xc0>)
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	3304      	adds	r3, #4
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	f7fd fc58 	bl	8008452 <vListInsert>
 800aba2:	e016      	b.n	800abd2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aba4:	2300      	movs	r3, #0
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	2300      	movs	r3, #0
 800abaa:	693a      	ldr	r2, [r7, #16]
 800abac:	2100      	movs	r1, #0
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f7ff fd60 	bl	800a674 <xTimerGenericCommand>
 800abb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10a      	bne.n	800abd2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc0:	f383 8811 	msr	BASEPRI, r3
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	603b      	str	r3, [r7, #0]
}
 800abce:	bf00      	nop
 800abd0:	e7fe      	b.n	800abd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abd2:	4b09      	ldr	r3, [pc, #36]	; (800abf8 <prvSwitchTimerLists+0xc0>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1b1      	bne.n	800ab40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800abdc:	4b06      	ldr	r3, [pc, #24]	; (800abf8 <prvSwitchTimerLists+0xc0>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800abe2:	4b06      	ldr	r3, [pc, #24]	; (800abfc <prvSwitchTimerLists+0xc4>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a04      	ldr	r2, [pc, #16]	; (800abf8 <prvSwitchTimerLists+0xc0>)
 800abe8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800abea:	4a04      	ldr	r2, [pc, #16]	; (800abfc <prvSwitchTimerLists+0xc4>)
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	6013      	str	r3, [r2, #0]
}
 800abf0:	bf00      	nop
 800abf2:	3718      	adds	r7, #24
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	20001150 	.word	0x20001150
 800abfc:	20001154 	.word	0x20001154

0800ac00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac06:	f000 f965 	bl	800aed4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac0a:	4b15      	ldr	r3, [pc, #84]	; (800ac60 <prvCheckForValidListAndQueue+0x60>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d120      	bne.n	800ac54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac12:	4814      	ldr	r0, [pc, #80]	; (800ac64 <prvCheckForValidListAndQueue+0x64>)
 800ac14:	f7fd fbcc 	bl	80083b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac18:	4813      	ldr	r0, [pc, #76]	; (800ac68 <prvCheckForValidListAndQueue+0x68>)
 800ac1a:	f7fd fbc9 	bl	80083b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac1e:	4b13      	ldr	r3, [pc, #76]	; (800ac6c <prvCheckForValidListAndQueue+0x6c>)
 800ac20:	4a10      	ldr	r2, [pc, #64]	; (800ac64 <prvCheckForValidListAndQueue+0x64>)
 800ac22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac24:	4b12      	ldr	r3, [pc, #72]	; (800ac70 <prvCheckForValidListAndQueue+0x70>)
 800ac26:	4a10      	ldr	r2, [pc, #64]	; (800ac68 <prvCheckForValidListAndQueue+0x68>)
 800ac28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	9300      	str	r3, [sp, #0]
 800ac2e:	4b11      	ldr	r3, [pc, #68]	; (800ac74 <prvCheckForValidListAndQueue+0x74>)
 800ac30:	4a11      	ldr	r2, [pc, #68]	; (800ac78 <prvCheckForValidListAndQueue+0x78>)
 800ac32:	2110      	movs	r1, #16
 800ac34:	200a      	movs	r0, #10
 800ac36:	f7fd fcd7 	bl	80085e8 <xQueueGenericCreateStatic>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	4a08      	ldr	r2, [pc, #32]	; (800ac60 <prvCheckForValidListAndQueue+0x60>)
 800ac3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac40:	4b07      	ldr	r3, [pc, #28]	; (800ac60 <prvCheckForValidListAndQueue+0x60>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d005      	beq.n	800ac54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac48:	4b05      	ldr	r3, [pc, #20]	; (800ac60 <prvCheckForValidListAndQueue+0x60>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	490b      	ldr	r1, [pc, #44]	; (800ac7c <prvCheckForValidListAndQueue+0x7c>)
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fe fbe8 	bl	8009424 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac54:	f000 f96e 	bl	800af34 <vPortExitCritical>
}
 800ac58:	bf00      	nop
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	20001158 	.word	0x20001158
 800ac64:	20001128 	.word	0x20001128
 800ac68:	2000113c 	.word	0x2000113c
 800ac6c:	20001150 	.word	0x20001150
 800ac70:	20001154 	.word	0x20001154
 800ac74:	20001204 	.word	0x20001204
 800ac78:	20001164 	.word	0x20001164
 800ac7c:	0800e86c 	.word	0x0800e86c

0800ac80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	3b04      	subs	r3, #4
 800ac90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3b04      	subs	r3, #4
 800ac9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	f023 0201 	bic.w	r2, r3, #1
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	3b04      	subs	r3, #4
 800acae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800acb0:	4a0c      	ldr	r2, [pc, #48]	; (800ace4 <pxPortInitialiseStack+0x64>)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	3b14      	subs	r3, #20
 800acba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	3b04      	subs	r3, #4
 800acc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f06f 0202 	mvn.w	r2, #2
 800acce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	3b20      	subs	r3, #32
 800acd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800acd6:	68fb      	ldr	r3, [r7, #12]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3714      	adds	r7, #20
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr
 800ace4:	0800ace9 	.word	0x0800ace9

0800ace8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acf2:	4b12      	ldr	r3, [pc, #72]	; (800ad3c <prvTaskExitError+0x54>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acfa:	d00a      	beq.n	800ad12 <prvTaskExitError+0x2a>
	__asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	60fb      	str	r3, [r7, #12]
}
 800ad0e:	bf00      	nop
 800ad10:	e7fe      	b.n	800ad10 <prvTaskExitError+0x28>
	__asm volatile
 800ad12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad16:	f383 8811 	msr	BASEPRI, r3
 800ad1a:	f3bf 8f6f 	isb	sy
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	60bb      	str	r3, [r7, #8]
}
 800ad24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad26:	bf00      	nop
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d0fc      	beq.n	800ad28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad2e:	bf00      	nop
 800ad30:	bf00      	nop
 800ad32:	3714      	adds	r7, #20
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr
 800ad3c:	2000000c 	.word	0x2000000c

0800ad40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad40:	4b07      	ldr	r3, [pc, #28]	; (800ad60 <pxCurrentTCBConst2>)
 800ad42:	6819      	ldr	r1, [r3, #0]
 800ad44:	6808      	ldr	r0, [r1, #0]
 800ad46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad4a:	f380 8809 	msr	PSP, r0
 800ad4e:	f3bf 8f6f 	isb	sy
 800ad52:	f04f 0000 	mov.w	r0, #0
 800ad56:	f380 8811 	msr	BASEPRI, r0
 800ad5a:	4770      	bx	lr
 800ad5c:	f3af 8000 	nop.w

0800ad60 <pxCurrentTCBConst2>:
 800ad60:	20000c28 	.word	0x20000c28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad64:	bf00      	nop
 800ad66:	bf00      	nop

0800ad68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad68:	4808      	ldr	r0, [pc, #32]	; (800ad8c <prvPortStartFirstTask+0x24>)
 800ad6a:	6800      	ldr	r0, [r0, #0]
 800ad6c:	6800      	ldr	r0, [r0, #0]
 800ad6e:	f380 8808 	msr	MSP, r0
 800ad72:	f04f 0000 	mov.w	r0, #0
 800ad76:	f380 8814 	msr	CONTROL, r0
 800ad7a:	b662      	cpsie	i
 800ad7c:	b661      	cpsie	f
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	df00      	svc	0
 800ad88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad8a:	bf00      	nop
 800ad8c:	e000ed08 	.word	0xe000ed08

0800ad90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad96:	4b46      	ldr	r3, [pc, #280]	; (800aeb0 <xPortStartScheduler+0x120>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a46      	ldr	r2, [pc, #280]	; (800aeb4 <xPortStartScheduler+0x124>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d10a      	bne.n	800adb6 <xPortStartScheduler+0x26>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	613b      	str	r3, [r7, #16]
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800adb6:	4b3e      	ldr	r3, [pc, #248]	; (800aeb0 <xPortStartScheduler+0x120>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a3f      	ldr	r2, [pc, #252]	; (800aeb8 <xPortStartScheduler+0x128>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d10a      	bne.n	800add6 <xPortStartScheduler+0x46>
	__asm volatile
 800adc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	60fb      	str	r3, [r7, #12]
}
 800add2:	bf00      	nop
 800add4:	e7fe      	b.n	800add4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800add6:	4b39      	ldr	r3, [pc, #228]	; (800aebc <xPortStartScheduler+0x12c>)
 800add8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	22ff      	movs	r2, #255	; 0xff
 800ade6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	b2db      	uxtb	r3, r3
 800adee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800adf0:	78fb      	ldrb	r3, [r7, #3]
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800adf8:	b2da      	uxtb	r2, r3
 800adfa:	4b31      	ldr	r3, [pc, #196]	; (800aec0 <xPortStartScheduler+0x130>)
 800adfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800adfe:	4b31      	ldr	r3, [pc, #196]	; (800aec4 <xPortStartScheduler+0x134>)
 800ae00:	2207      	movs	r2, #7
 800ae02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae04:	e009      	b.n	800ae1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ae06:	4b2f      	ldr	r3, [pc, #188]	; (800aec4 <xPortStartScheduler+0x134>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	4a2d      	ldr	r2, [pc, #180]	; (800aec4 <xPortStartScheduler+0x134>)
 800ae0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae10:	78fb      	ldrb	r3, [r7, #3]
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	005b      	lsls	r3, r3, #1
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae1a:	78fb      	ldrb	r3, [r7, #3]
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae22:	2b80      	cmp	r3, #128	; 0x80
 800ae24:	d0ef      	beq.n	800ae06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae26:	4b27      	ldr	r3, [pc, #156]	; (800aec4 <xPortStartScheduler+0x134>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f1c3 0307 	rsb	r3, r3, #7
 800ae2e:	2b04      	cmp	r3, #4
 800ae30:	d00a      	beq.n	800ae48 <xPortStartScheduler+0xb8>
	__asm volatile
 800ae32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae36:	f383 8811 	msr	BASEPRI, r3
 800ae3a:	f3bf 8f6f 	isb	sy
 800ae3e:	f3bf 8f4f 	dsb	sy
 800ae42:	60bb      	str	r3, [r7, #8]
}
 800ae44:	bf00      	nop
 800ae46:	e7fe      	b.n	800ae46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae48:	4b1e      	ldr	r3, [pc, #120]	; (800aec4 <xPortStartScheduler+0x134>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	021b      	lsls	r3, r3, #8
 800ae4e:	4a1d      	ldr	r2, [pc, #116]	; (800aec4 <xPortStartScheduler+0x134>)
 800ae50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae52:	4b1c      	ldr	r3, [pc, #112]	; (800aec4 <xPortStartScheduler+0x134>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae5a:	4a1a      	ldr	r2, [pc, #104]	; (800aec4 <xPortStartScheduler+0x134>)
 800ae5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	b2da      	uxtb	r2, r3
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae66:	4b18      	ldr	r3, [pc, #96]	; (800aec8 <xPortStartScheduler+0x138>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a17      	ldr	r2, [pc, #92]	; (800aec8 <xPortStartScheduler+0x138>)
 800ae6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae72:	4b15      	ldr	r3, [pc, #84]	; (800aec8 <xPortStartScheduler+0x138>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a14      	ldr	r2, [pc, #80]	; (800aec8 <xPortStartScheduler+0x138>)
 800ae78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae7e:	f000 f8dd 	bl	800b03c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae82:	4b12      	ldr	r3, [pc, #72]	; (800aecc <xPortStartScheduler+0x13c>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae88:	f000 f8fc 	bl	800b084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae8c:	4b10      	ldr	r3, [pc, #64]	; (800aed0 <xPortStartScheduler+0x140>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a0f      	ldr	r2, [pc, #60]	; (800aed0 <xPortStartScheduler+0x140>)
 800ae92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ae96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae98:	f7ff ff66 	bl	800ad68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae9c:	f7fe ff58 	bl	8009d50 <vTaskSwitchContext>
	prvTaskExitError();
 800aea0:	f7ff ff22 	bl	800ace8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3718      	adds	r7, #24
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	e000ed00 	.word	0xe000ed00
 800aeb4:	410fc271 	.word	0x410fc271
 800aeb8:	410fc270 	.word	0x410fc270
 800aebc:	e000e400 	.word	0xe000e400
 800aec0:	20001254 	.word	0x20001254
 800aec4:	20001258 	.word	0x20001258
 800aec8:	e000ed20 	.word	0xe000ed20
 800aecc:	2000000c 	.word	0x2000000c
 800aed0:	e000ef34 	.word	0xe000ef34

0800aed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
	__asm volatile
 800aeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aede:	f383 8811 	msr	BASEPRI, r3
 800aee2:	f3bf 8f6f 	isb	sy
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	607b      	str	r3, [r7, #4]
}
 800aeec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aeee:	4b0f      	ldr	r3, [pc, #60]	; (800af2c <vPortEnterCritical+0x58>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	3301      	adds	r3, #1
 800aef4:	4a0d      	ldr	r2, [pc, #52]	; (800af2c <vPortEnterCritical+0x58>)
 800aef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aef8:	4b0c      	ldr	r3, [pc, #48]	; (800af2c <vPortEnterCritical+0x58>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d10f      	bne.n	800af20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af00:	4b0b      	ldr	r3, [pc, #44]	; (800af30 <vPortEnterCritical+0x5c>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	b2db      	uxtb	r3, r3
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00a      	beq.n	800af20 <vPortEnterCritical+0x4c>
	__asm volatile
 800af0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0e:	f383 8811 	msr	BASEPRI, r3
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	603b      	str	r3, [r7, #0]
}
 800af1c:	bf00      	nop
 800af1e:	e7fe      	b.n	800af1e <vPortEnterCritical+0x4a>
	}
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	2000000c 	.word	0x2000000c
 800af30:	e000ed04 	.word	0xe000ed04

0800af34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af3a:	4b12      	ldr	r3, [pc, #72]	; (800af84 <vPortExitCritical+0x50>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10a      	bne.n	800af58 <vPortExitCritical+0x24>
	__asm volatile
 800af42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af46:	f383 8811 	msr	BASEPRI, r3
 800af4a:	f3bf 8f6f 	isb	sy
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	607b      	str	r3, [r7, #4]
}
 800af54:	bf00      	nop
 800af56:	e7fe      	b.n	800af56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af58:	4b0a      	ldr	r3, [pc, #40]	; (800af84 <vPortExitCritical+0x50>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	3b01      	subs	r3, #1
 800af5e:	4a09      	ldr	r2, [pc, #36]	; (800af84 <vPortExitCritical+0x50>)
 800af60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af62:	4b08      	ldr	r3, [pc, #32]	; (800af84 <vPortExitCritical+0x50>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d105      	bne.n	800af76 <vPortExitCritical+0x42>
 800af6a:	2300      	movs	r3, #0
 800af6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	f383 8811 	msr	BASEPRI, r3
}
 800af74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af76:	bf00      	nop
 800af78:	370c      	adds	r7, #12
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	2000000c 	.word	0x2000000c
	...

0800af90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af90:	f3ef 8009 	mrs	r0, PSP
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	4b15      	ldr	r3, [pc, #84]	; (800aff0 <pxCurrentTCBConst>)
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	f01e 0f10 	tst.w	lr, #16
 800afa0:	bf08      	it	eq
 800afa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800afa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afaa:	6010      	str	r0, [r2, #0]
 800afac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800afb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800afb4:	f380 8811 	msr	BASEPRI, r0
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	f3bf 8f6f 	isb	sy
 800afc0:	f7fe fec6 	bl	8009d50 <vTaskSwitchContext>
 800afc4:	f04f 0000 	mov.w	r0, #0
 800afc8:	f380 8811 	msr	BASEPRI, r0
 800afcc:	bc09      	pop	{r0, r3}
 800afce:	6819      	ldr	r1, [r3, #0]
 800afd0:	6808      	ldr	r0, [r1, #0]
 800afd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd6:	f01e 0f10 	tst.w	lr, #16
 800afda:	bf08      	it	eq
 800afdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800afe0:	f380 8809 	msr	PSP, r0
 800afe4:	f3bf 8f6f 	isb	sy
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop
 800afec:	f3af 8000 	nop.w

0800aff0 <pxCurrentTCBConst>:
 800aff0:	20000c28 	.word	0x20000c28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aff4:	bf00      	nop
 800aff6:	bf00      	nop

0800aff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
	__asm volatile
 800affe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	607b      	str	r3, [r7, #4]
}
 800b010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b012:	f7fe fde3 	bl	8009bdc <xTaskIncrementTick>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d003      	beq.n	800b024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b01c:	4b06      	ldr	r3, [pc, #24]	; (800b038 <xPortSysTickHandler+0x40>)
 800b01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b022:	601a      	str	r2, [r3, #0]
 800b024:	2300      	movs	r3, #0
 800b026:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	f383 8811 	msr	BASEPRI, r3
}
 800b02e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b030:	bf00      	nop
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	e000ed04 	.word	0xe000ed04

0800b03c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b03c:	b480      	push	{r7}
 800b03e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b040:	4b0b      	ldr	r3, [pc, #44]	; (800b070 <vPortSetupTimerInterrupt+0x34>)
 800b042:	2200      	movs	r2, #0
 800b044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b046:	4b0b      	ldr	r3, [pc, #44]	; (800b074 <vPortSetupTimerInterrupt+0x38>)
 800b048:	2200      	movs	r2, #0
 800b04a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b04c:	4b0a      	ldr	r3, [pc, #40]	; (800b078 <vPortSetupTimerInterrupt+0x3c>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a0a      	ldr	r2, [pc, #40]	; (800b07c <vPortSetupTimerInterrupt+0x40>)
 800b052:	fba2 2303 	umull	r2, r3, r2, r3
 800b056:	099b      	lsrs	r3, r3, #6
 800b058:	4a09      	ldr	r2, [pc, #36]	; (800b080 <vPortSetupTimerInterrupt+0x44>)
 800b05a:	3b01      	subs	r3, #1
 800b05c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b05e:	4b04      	ldr	r3, [pc, #16]	; (800b070 <vPortSetupTimerInterrupt+0x34>)
 800b060:	2207      	movs	r2, #7
 800b062:	601a      	str	r2, [r3, #0]
}
 800b064:	bf00      	nop
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	e000e010 	.word	0xe000e010
 800b074:	e000e018 	.word	0xe000e018
 800b078:	20000000 	.word	0x20000000
 800b07c:	10624dd3 	.word	0x10624dd3
 800b080:	e000e014 	.word	0xe000e014

0800b084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b094 <vPortEnableVFP+0x10>
 800b088:	6801      	ldr	r1, [r0, #0]
 800b08a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b08e:	6001      	str	r1, [r0, #0]
 800b090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b092:	bf00      	nop
 800b094:	e000ed88 	.word	0xe000ed88

0800b098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b09e:	f3ef 8305 	mrs	r3, IPSR
 800b0a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2b0f      	cmp	r3, #15
 800b0a8:	d914      	bls.n	800b0d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b0aa:	4a17      	ldr	r2, [pc, #92]	; (800b108 <vPortValidateInterruptPriority+0x70>)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b0b4:	4b15      	ldr	r3, [pc, #84]	; (800b10c <vPortValidateInterruptPriority+0x74>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	7afa      	ldrb	r2, [r7, #11]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d20a      	bcs.n	800b0d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	607b      	str	r3, [r7, #4]
}
 800b0d0:	bf00      	nop
 800b0d2:	e7fe      	b.n	800b0d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b0d4:	4b0e      	ldr	r3, [pc, #56]	; (800b110 <vPortValidateInterruptPriority+0x78>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b0dc:	4b0d      	ldr	r3, [pc, #52]	; (800b114 <vPortValidateInterruptPriority+0x7c>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d90a      	bls.n	800b0fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	603b      	str	r3, [r7, #0]
}
 800b0f6:	bf00      	nop
 800b0f8:	e7fe      	b.n	800b0f8 <vPortValidateInterruptPriority+0x60>
	}
 800b0fa:	bf00      	nop
 800b0fc:	3714      	adds	r7, #20
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	e000e3f0 	.word	0xe000e3f0
 800b10c:	20001254 	.word	0x20001254
 800b110:	e000ed0c 	.word	0xe000ed0c
 800b114:	20001258 	.word	0x20001258

0800b118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b08a      	sub	sp, #40	; 0x28
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b120:	2300      	movs	r3, #0
 800b122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b124:	f7fe fc8c 	bl	8009a40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b128:	4b5b      	ldr	r3, [pc, #364]	; (800b298 <pvPortMalloc+0x180>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b130:	f000 f920 	bl	800b374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b134:	4b59      	ldr	r3, [pc, #356]	; (800b29c <pvPortMalloc+0x184>)
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4013      	ands	r3, r2
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f040 8093 	bne.w	800b268 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d01d      	beq.n	800b184 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b148:	2208      	movs	r2, #8
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4413      	add	r3, r2
 800b14e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f003 0307 	and.w	r3, r3, #7
 800b156:	2b00      	cmp	r3, #0
 800b158:	d014      	beq.n	800b184 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f023 0307 	bic.w	r3, r3, #7
 800b160:	3308      	adds	r3, #8
 800b162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f003 0307 	and.w	r3, r3, #7
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00a      	beq.n	800b184 <pvPortMalloc+0x6c>
	__asm volatile
 800b16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	617b      	str	r3, [r7, #20]
}
 800b180:	bf00      	nop
 800b182:	e7fe      	b.n	800b182 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d06e      	beq.n	800b268 <pvPortMalloc+0x150>
 800b18a:	4b45      	ldr	r3, [pc, #276]	; (800b2a0 <pvPortMalloc+0x188>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	429a      	cmp	r2, r3
 800b192:	d869      	bhi.n	800b268 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b194:	4b43      	ldr	r3, [pc, #268]	; (800b2a4 <pvPortMalloc+0x18c>)
 800b196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b198:	4b42      	ldr	r3, [pc, #264]	; (800b2a4 <pvPortMalloc+0x18c>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b19e:	e004      	b.n	800b1aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d903      	bls.n	800b1bc <pvPortMalloc+0xa4>
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1f1      	bne.n	800b1a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b1bc:	4b36      	ldr	r3, [pc, #216]	; (800b298 <pvPortMalloc+0x180>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d050      	beq.n	800b268 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b1c6:	6a3b      	ldr	r3, [r7, #32]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2208      	movs	r2, #8
 800b1cc:	4413      	add	r3, r2
 800b1ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	6a3b      	ldr	r3, [r7, #32]
 800b1d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1da:	685a      	ldr	r2, [r3, #4]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	1ad2      	subs	r2, r2, r3
 800b1e0:	2308      	movs	r3, #8
 800b1e2:	005b      	lsls	r3, r3, #1
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d91f      	bls.n	800b228 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	f003 0307 	and.w	r3, r3, #7
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00a      	beq.n	800b210 <pvPortMalloc+0xf8>
	__asm volatile
 800b1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fe:	f383 8811 	msr	BASEPRI, r3
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	613b      	str	r3, [r7, #16]
}
 800b20c:	bf00      	nop
 800b20e:	e7fe      	b.n	800b20e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b212:	685a      	ldr	r2, [r3, #4]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	1ad2      	subs	r2, r2, r3
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b222:	69b8      	ldr	r0, [r7, #24]
 800b224:	f000 f908 	bl	800b438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b228:	4b1d      	ldr	r3, [pc, #116]	; (800b2a0 <pvPortMalloc+0x188>)
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	1ad3      	subs	r3, r2, r3
 800b232:	4a1b      	ldr	r2, [pc, #108]	; (800b2a0 <pvPortMalloc+0x188>)
 800b234:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b236:	4b1a      	ldr	r3, [pc, #104]	; (800b2a0 <pvPortMalloc+0x188>)
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	4b1b      	ldr	r3, [pc, #108]	; (800b2a8 <pvPortMalloc+0x190>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d203      	bcs.n	800b24a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b242:	4b17      	ldr	r3, [pc, #92]	; (800b2a0 <pvPortMalloc+0x188>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a18      	ldr	r2, [pc, #96]	; (800b2a8 <pvPortMalloc+0x190>)
 800b248:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24c:	685a      	ldr	r2, [r3, #4]
 800b24e:	4b13      	ldr	r3, [pc, #76]	; (800b29c <pvPortMalloc+0x184>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	431a      	orrs	r2, r3
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b256:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25a:	2200      	movs	r2, #0
 800b25c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b25e:	4b13      	ldr	r3, [pc, #76]	; (800b2ac <pvPortMalloc+0x194>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	3301      	adds	r3, #1
 800b264:	4a11      	ldr	r2, [pc, #68]	; (800b2ac <pvPortMalloc+0x194>)
 800b266:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b268:	f7fe fbf8 	bl	8009a5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	f003 0307 	and.w	r3, r3, #7
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00a      	beq.n	800b28c <pvPortMalloc+0x174>
	__asm volatile
 800b276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27a:	f383 8811 	msr	BASEPRI, r3
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	60fb      	str	r3, [r7, #12]
}
 800b288:	bf00      	nop
 800b28a:	e7fe      	b.n	800b28a <pvPortMalloc+0x172>
	return pvReturn;
 800b28c:	69fb      	ldr	r3, [r7, #28]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3728      	adds	r7, #40	; 0x28
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	20004e64 	.word	0x20004e64
 800b29c:	20004e78 	.word	0x20004e78
 800b2a0:	20004e68 	.word	0x20004e68
 800b2a4:	20004e5c 	.word	0x20004e5c
 800b2a8:	20004e6c 	.word	0x20004e6c
 800b2ac:	20004e70 	.word	0x20004e70

0800b2b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d04d      	beq.n	800b35e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b2c2:	2308      	movs	r3, #8
 800b2c4:	425b      	negs	r3, r3
 800b2c6:	697a      	ldr	r2, [r7, #20]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	685a      	ldr	r2, [r3, #4]
 800b2d4:	4b24      	ldr	r3, [pc, #144]	; (800b368 <vPortFree+0xb8>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4013      	ands	r3, r2
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d10a      	bne.n	800b2f4 <vPortFree+0x44>
	__asm volatile
 800b2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	60fb      	str	r3, [r7, #12]
}
 800b2f0:	bf00      	nop
 800b2f2:	e7fe      	b.n	800b2f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00a      	beq.n	800b312 <vPortFree+0x62>
	__asm volatile
 800b2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b300:	f383 8811 	msr	BASEPRI, r3
 800b304:	f3bf 8f6f 	isb	sy
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	60bb      	str	r3, [r7, #8]
}
 800b30e:	bf00      	nop
 800b310:	e7fe      	b.n	800b310 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	4b14      	ldr	r3, [pc, #80]	; (800b368 <vPortFree+0xb8>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4013      	ands	r3, r2
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d01e      	beq.n	800b35e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d11a      	bne.n	800b35e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	685a      	ldr	r2, [r3, #4]
 800b32c:	4b0e      	ldr	r3, [pc, #56]	; (800b368 <vPortFree+0xb8>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	43db      	mvns	r3, r3
 800b332:	401a      	ands	r2, r3
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b338:	f7fe fb82 	bl	8009a40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	685a      	ldr	r2, [r3, #4]
 800b340:	4b0a      	ldr	r3, [pc, #40]	; (800b36c <vPortFree+0xbc>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4413      	add	r3, r2
 800b346:	4a09      	ldr	r2, [pc, #36]	; (800b36c <vPortFree+0xbc>)
 800b348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b34a:	6938      	ldr	r0, [r7, #16]
 800b34c:	f000 f874 	bl	800b438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b350:	4b07      	ldr	r3, [pc, #28]	; (800b370 <vPortFree+0xc0>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	3301      	adds	r3, #1
 800b356:	4a06      	ldr	r2, [pc, #24]	; (800b370 <vPortFree+0xc0>)
 800b358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b35a:	f7fe fb7f 	bl	8009a5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b35e:	bf00      	nop
 800b360:	3718      	adds	r7, #24
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	20004e78 	.word	0x20004e78
 800b36c:	20004e68 	.word	0x20004e68
 800b370:	20004e74 	.word	0x20004e74

0800b374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b374:	b480      	push	{r7}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b37a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b37e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b380:	4b27      	ldr	r3, [pc, #156]	; (800b420 <prvHeapInit+0xac>)
 800b382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f003 0307 	and.w	r3, r3, #7
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00c      	beq.n	800b3a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	3307      	adds	r3, #7
 800b392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f023 0307 	bic.w	r3, r3, #7
 800b39a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b39c:	68ba      	ldr	r2, [r7, #8]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	4a1f      	ldr	r2, [pc, #124]	; (800b420 <prvHeapInit+0xac>)
 800b3a4:	4413      	add	r3, r2
 800b3a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b3ac:	4a1d      	ldr	r2, [pc, #116]	; (800b424 <prvHeapInit+0xb0>)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b3b2:	4b1c      	ldr	r3, [pc, #112]	; (800b424 <prvHeapInit+0xb0>)
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	4413      	add	r3, r2
 800b3be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b3c0:	2208      	movs	r2, #8
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	1a9b      	subs	r3, r3, r2
 800b3c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f023 0307 	bic.w	r3, r3, #7
 800b3ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	4a15      	ldr	r2, [pc, #84]	; (800b428 <prvHeapInit+0xb4>)
 800b3d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b3d6:	4b14      	ldr	r3, [pc, #80]	; (800b428 <prvHeapInit+0xb4>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b3de:	4b12      	ldr	r3, [pc, #72]	; (800b428 <prvHeapInit+0xb4>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	1ad2      	subs	r2, r2, r3
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b3f4:	4b0c      	ldr	r3, [pc, #48]	; (800b428 <prvHeapInit+0xb4>)
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	4a0a      	ldr	r2, [pc, #40]	; (800b42c <prvHeapInit+0xb8>)
 800b402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	4a09      	ldr	r2, [pc, #36]	; (800b430 <prvHeapInit+0xbc>)
 800b40a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b40c:	4b09      	ldr	r3, [pc, #36]	; (800b434 <prvHeapInit+0xc0>)
 800b40e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b412:	601a      	str	r2, [r3, #0]
}
 800b414:	bf00      	nop
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	2000125c 	.word	0x2000125c
 800b424:	20004e5c 	.word	0x20004e5c
 800b428:	20004e64 	.word	0x20004e64
 800b42c:	20004e6c 	.word	0x20004e6c
 800b430:	20004e68 	.word	0x20004e68
 800b434:	20004e78 	.word	0x20004e78

0800b438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b440:	4b28      	ldr	r3, [pc, #160]	; (800b4e4 <prvInsertBlockIntoFreeList+0xac>)
 800b442:	60fb      	str	r3, [r7, #12]
 800b444:	e002      	b.n	800b44c <prvInsertBlockIntoFreeList+0x14>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	60fb      	str	r3, [r7, #12]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	429a      	cmp	r2, r3
 800b454:	d8f7      	bhi.n	800b446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	68ba      	ldr	r2, [r7, #8]
 800b460:	4413      	add	r3, r2
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	429a      	cmp	r2, r3
 800b466:	d108      	bne.n	800b47a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	685a      	ldr	r2, [r3, #4]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	441a      	add	r2, r3
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	68ba      	ldr	r2, [r7, #8]
 800b484:	441a      	add	r2, r3
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d118      	bne.n	800b4c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	4b15      	ldr	r3, [pc, #84]	; (800b4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	429a      	cmp	r2, r3
 800b498:	d00d      	beq.n	800b4b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	685a      	ldr	r2, [r3, #4]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	441a      	add	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	e008      	b.n	800b4c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b4b6:	4b0c      	ldr	r3, [pc, #48]	; (800b4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	601a      	str	r2, [r3, #0]
 800b4be:	e003      	b.n	800b4c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d002      	beq.n	800b4d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4d6:	bf00      	nop
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	20004e5c 	.word	0x20004e5c
 800b4e8:	20004e64 	.word	0x20004e64

0800b4ec <_ZdlPvj>:
 800b4ec:	f000 bb99 	b.w	800bc22 <_ZdlPv>

0800b4f0 <_ZdaPv>:
 800b4f0:	f000 bb97 	b.w	800bc22 <_ZdlPv>

0800b4f4 <_Znwj>:
 800b4f4:	2801      	cmp	r0, #1
 800b4f6:	bf38      	it	cc
 800b4f8:	2001      	movcc	r0, #1
 800b4fa:	b510      	push	{r4, lr}
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	4620      	mov	r0, r4
 800b500:	f000 ff16 	bl	800c330 <malloc>
 800b504:	b100      	cbz	r0, 800b508 <_Znwj+0x14>
 800b506:	bd10      	pop	{r4, pc}
 800b508:	f000 fb8e 	bl	800bc28 <_ZSt15get_new_handlerv>
 800b50c:	b908      	cbnz	r0, 800b512 <_Znwj+0x1e>
 800b50e:	f000 fc13 	bl	800bd38 <abort>
 800b512:	4780      	blx	r0
 800b514:	e7f3      	b.n	800b4fe <_Znwj+0xa>

0800b516 <_Znaj>:
 800b516:	f7ff bfed 	b.w	800b4f4 <_Znwj>

0800b51a <_ZNSaIcEC1Ev>:
 800b51a:	4770      	bx	lr

0800b51c <_ZNSaIcEC1ERKS_>:
 800b51c:	4770      	bx	lr

0800b51e <_ZNSaIcED1Ev>:
 800b51e:	4770      	bx	lr

0800b520 <_ZSt17__throw_bad_allocv>:
 800b520:	b508      	push	{r3, lr}
 800b522:	f000 fc09 	bl	800bd38 <abort>

0800b526 <_ZSt28__throw_bad_array_new_lengthv>:
 800b526:	b508      	push	{r3, lr}
 800b528:	f000 fc06 	bl	800bd38 <abort>

0800b52c <_ZSt19__throw_logic_errorPKc>:
 800b52c:	b508      	push	{r3, lr}
 800b52e:	f000 fc03 	bl	800bd38 <abort>

0800b532 <_ZSt20__throw_length_errorPKc>:
 800b532:	b508      	push	{r3, lr}
 800b534:	f000 fc00 	bl	800bd38 <abort>

0800b538 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 800b538:	290d      	cmp	r1, #13
 800b53a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53c:	4605      	mov	r5, r0
 800b53e:	d81c      	bhi.n	800b57a <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x42>
 800b540:	2900      	cmp	r1, #0
 800b542:	d035      	beq.n	800b5b0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x78>
 800b544:	4b1b      	ldr	r3, [pc, #108]	; (800b5b4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>)
 800b546:	5c5c      	ldrb	r4, [r3, r1]
 800b548:	4620      	mov	r0, r4
 800b54a:	f7f4 ffeb 	bl	8000524 <__aeabi_i2d>
 800b54e:	4606      	mov	r6, r0
 800b550:	6828      	ldr	r0, [r5, #0]
 800b552:	460f      	mov	r7, r1
 800b554:	f7f4 fff8 	bl	8000548 <__aeabi_f2d>
 800b558:	4602      	mov	r2, r0
 800b55a:	460b      	mov	r3, r1
 800b55c:	4630      	mov	r0, r6
 800b55e:	4639      	mov	r1, r7
 800b560:	f7f5 f84a 	bl	80005f8 <__aeabi_dmul>
 800b564:	ec41 0b10 	vmov	d0, r0, r1
 800b568:	f000 fb66 	bl	800bc38 <floor>
 800b56c:	ec51 0b10 	vmov	r0, r1, d0
 800b570:	f7f5 fb1a 	bl	8000ba8 <__aeabi_d2uiz>
 800b574:	6068      	str	r0, [r5, #4]
 800b576:	4620      	mov	r0, r4
 800b578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b57a:	4a0f      	ldr	r2, [pc, #60]	; (800b5b8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x80>)
 800b57c:	23f9      	movs	r3, #249	; 0xf9
 800b57e:	1058      	asrs	r0, r3, #1
 800b580:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800b584:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800b588:	428e      	cmp	r6, r1
 800b58a:	bf3b      	ittet	cc
 800b58c:	1a1b      	subcc	r3, r3, r0
 800b58e:	f103 33ff 	addcc.w	r3, r3, #4294967295	; 0xffffffff
 800b592:	4603      	movcs	r3, r0
 800b594:	1d22      	addcc	r2, r4, #4
 800b596:	2b00      	cmp	r3, #0
 800b598:	dcf1      	bgt.n	800b57e <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x46>
 800b59a:	4b08      	ldr	r3, [pc, #32]	; (800b5bc <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x84>)
 800b59c:	6814      	ldr	r4, [r2, #0]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d003      	beq.n	800b5aa <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x72>
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f7f4 ffae 	bl	8000504 <__aeabi_ui2d>
 800b5a8:	e7d1      	b.n	800b54e <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x16>
 800b5aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5ae:	e7e1      	b.n	800b574 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3c>
 800b5b0:	2401      	movs	r4, #1
 800b5b2:	e7e0      	b.n	800b576 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3e>
 800b5b4:	0800ecbc 	.word	0x0800ecbc
 800b5b8:	0800e8d0 	.word	0x0800e8d0
 800b5bc:	0800ecb4 	.word	0x0800ecb4

0800b5c0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 800b5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c4:	ed2d 8b02 	vpush	{d8}
 800b5c8:	4692      	mov	sl, r2
 800b5ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5cc:	eb03 0802 	add.w	r8, r3, r2
 800b5d0:	684b      	ldr	r3, [r1, #4]
 800b5d2:	4598      	cmp	r8, r3
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	460d      	mov	r5, r1
 800b5d8:	d94d      	bls.n	800b676 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xb6>
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	6808      	ldr	r0, [r1, #0]
 800b5de:	bf14      	ite	ne
 800b5e0:	f04f 0900 	movne.w	r9, #0
 800b5e4:	f04f 090b 	moveq.w	r9, #11
 800b5e8:	f7f4 ffae 	bl	8000548 <__aeabi_f2d>
 800b5ec:	45c8      	cmp	r8, r9
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	460f      	mov	r7, r1
 800b5f2:	4640      	mov	r0, r8
 800b5f4:	bf38      	it	cc
 800b5f6:	4648      	movcc	r0, r9
 800b5f8:	f7f4 ff84 	bl	8000504 <__aeabi_ui2d>
 800b5fc:	4632      	mov	r2, r6
 800b5fe:	463b      	mov	r3, r7
 800b600:	f7f5 f924 	bl	800084c <__aeabi_ddiv>
 800b604:	ec41 0b18 	vmov	d8, r0, r1
 800b608:	4650      	mov	r0, sl
 800b60a:	f7f4 ff7b 	bl	8000504 <__aeabi_ui2d>
 800b60e:	ec53 2b18 	vmov	r2, r3, d8
 800b612:	4680      	mov	r8, r0
 800b614:	4689      	mov	r9, r1
 800b616:	f7f5 fa6b 	bl	8000af0 <__aeabi_dcmple>
 800b61a:	b1e8      	cbz	r0, 800b658 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x98>
 800b61c:	eeb0 0a48 	vmov.f32	s0, s16
 800b620:	eef0 0a68 	vmov.f32	s1, s17
 800b624:	f000 fb08 	bl	800bc38 <floor>
 800b628:	4b15      	ldr	r3, [pc, #84]	; (800b680 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xc0>)
 800b62a:	ec51 0b10 	vmov	r0, r1, d0
 800b62e:	2200      	movs	r2, #0
 800b630:	f7f4 fe2c 	bl	800028c <__adddf3>
 800b634:	f7f5 fab8 	bl	8000ba8 <__aeabi_d2uiz>
 800b638:	ea4f 014a 	mov.w	r1, sl, lsl #1
 800b63c:	4281      	cmp	r1, r0
 800b63e:	bf38      	it	cc
 800b640:	4601      	movcc	r1, r0
 800b642:	4628      	mov	r0, r5
 800b644:	f7ff ff78 	bl	800b538 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 800b648:	2301      	movs	r3, #1
 800b64a:	7023      	strb	r3, [r4, #0]
 800b64c:	6060      	str	r0, [r4, #4]
 800b64e:	ecbd 8b02 	vpop	{d8}
 800b652:	4620      	mov	r0, r4
 800b654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b658:	4642      	mov	r2, r8
 800b65a:	464b      	mov	r3, r9
 800b65c:	4630      	mov	r0, r6
 800b65e:	4639      	mov	r1, r7
 800b660:	f7f4 ffca 	bl	80005f8 <__aeabi_dmul>
 800b664:	ec41 0b10 	vmov	d0, r0, r1
 800b668:	f000 fae6 	bl	800bc38 <floor>
 800b66c:	ec51 0b10 	vmov	r0, r1, d0
 800b670:	f7f5 fa9a 	bl	8000ba8 <__aeabi_d2uiz>
 800b674:	6068      	str	r0, [r5, #4]
 800b676:	2300      	movs	r3, #0
 800b678:	e9c4 3300 	strd	r3, r3, [r4]
 800b67c:	e7e7      	b.n	800b64e <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x8e>
 800b67e:	bf00      	nop
 800b680:	3ff00000 	.word	0x3ff00000

0800b684 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800b684:	b10a      	cbz	r2, 800b68a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800b686:	f001 ba2a 	b.w	800cade <memcpy>
 800b68a:	4770      	bx	lr

0800b68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800b68c:	b508      	push	{r3, lr}
 800b68e:	680b      	ldr	r3, [r1, #0]
 800b690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b694:	d302      	bcc.n	800b69c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800b696:	480d      	ldr	r0, [pc, #52]	; (800b6cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800b698:	f7ff ff4b 	bl	800b532 <_ZSt20__throw_length_errorPKc>
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d90b      	bls.n	800b6b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b6a0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800b6a4:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800b6a8:	d206      	bcs.n	800b6b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b6aa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b6ae:	bf2a      	itet	cs
 800b6b0:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800b6b4:	6008      	strcc	r0, [r1, #0]
 800b6b6:	600b      	strcs	r3, [r1, #0]
 800b6b8:	6808      	ldr	r0, [r1, #0]
 800b6ba:	3001      	adds	r0, #1
 800b6bc:	d501      	bpl.n	800b6c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800b6be:	f7ff ff2f 	bl	800b520 <_ZSt17__throw_bad_allocv>
 800b6c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b6c6:	f7ff bf15 	b.w	800b4f4 <_Znwj>
 800b6ca:	bf00      	nop
 800b6cc:	0800ecca 	.word	0x0800ecca

0800b6d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800b6d0:	f850 3b08 	ldr.w	r3, [r0], #8
 800b6d4:	4283      	cmp	r3, r0
 800b6d6:	d002      	beq.n	800b6de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f000 baa2 	b.w	800bc22 <_ZdlPv>
 800b6de:	4770      	bx	lr

0800b6e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800b6e0:	6840      	ldr	r0, [r0, #4]
 800b6e2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800b6e6:	3901      	subs	r1, #1
 800b6e8:	1a09      	subs	r1, r1, r0
 800b6ea:	4291      	cmp	r1, r2
 800b6ec:	b508      	push	{r3, lr}
 800b6ee:	d202      	bcs.n	800b6f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7ff ff1e 	bl	800b532 <_ZSt20__throw_length_errorPKc>
 800b6f6:	bd08      	pop	{r3, pc}

0800b6f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800b6f8:	6803      	ldr	r3, [r0, #0]
 800b6fa:	428b      	cmp	r3, r1
 800b6fc:	d806      	bhi.n	800b70c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800b6fe:	6842      	ldr	r2, [r0, #4]
 800b700:	4413      	add	r3, r2
 800b702:	4299      	cmp	r1, r3
 800b704:	bf94      	ite	ls
 800b706:	2000      	movls	r0, #0
 800b708:	2001      	movhi	r0, #1
 800b70a:	4770      	bx	lr
 800b70c:	2001      	movs	r0, #1
 800b70e:	4770      	bx	lr

0800b710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800b710:	2a01      	cmp	r2, #1
 800b712:	b410      	push	{r4}
 800b714:	d104      	bne.n	800b720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800b716:	780a      	ldrb	r2, [r1, #0]
 800b718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b71c:	7002      	strb	r2, [r0, #0]
 800b71e:	4770      	bx	lr
 800b720:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b724:	f7ff bfae 	b.w	800b684 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800b728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800b728:	2a01      	cmp	r2, #1
 800b72a:	b430      	push	{r4, r5}
 800b72c:	d103      	bne.n	800b736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800b72e:	780b      	ldrb	r3, [r1, #0]
 800b730:	7003      	strb	r3, [r0, #0]
 800b732:	bc30      	pop	{r4, r5}
 800b734:	4770      	bx	lr
 800b736:	2a00      	cmp	r2, #0
 800b738:	d0fb      	beq.n	800b732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800b73a:	bc30      	pop	{r4, r5}
 800b73c:	f001 b928 	b.w	800c990 <memmove>

0800b740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 800b740:	460b      	mov	r3, r1
 800b742:	2b01      	cmp	r3, #1
 800b744:	b410      	push	{r4}
 800b746:	4611      	mov	r1, r2
 800b748:	4604      	mov	r4, r0
 800b74a:	d103      	bne.n	800b754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 800b74c:	7022      	strb	r2, [r4, #0]
 800b74e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b752:	4770      	bx	lr
 800b754:	2b00      	cmp	r3, #0
 800b756:	d0fa      	beq.n	800b74e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 800b758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b75c:	461a      	mov	r2, r3
 800b75e:	f001 b931 	b.w	800c9c4 <memset>

0800b762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800b762:	b508      	push	{r3, lr}
 800b764:	1a52      	subs	r2, r2, r1
 800b766:	f7ff ffd3 	bl	800b710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b76a:	bd08      	pop	{r3, pc}

0800b76c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800b76c:	b508      	push	{r3, lr}
 800b76e:	1a52      	subs	r2, r2, r1
 800b770:	f7ff ffce 	bl	800b710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b774:	bd08      	pop	{r3, pc}

0800b776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800b776:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b77a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b77c:	461f      	mov	r7, r3
 800b77e:	6843      	ldr	r3, [r0, #4]
 800b780:	eb01 0802 	add.w	r8, r1, r2
 800b784:	1ab2      	subs	r2, r6, r2
 800b786:	441a      	add	r2, r3
 800b788:	eba3 0908 	sub.w	r9, r3, r8
 800b78c:	4603      	mov	r3, r0
 800b78e:	9201      	str	r2, [sp, #4]
 800b790:	f853 2b08 	ldr.w	r2, [r3], #8
 800b794:	429a      	cmp	r2, r3
 800b796:	bf18      	it	ne
 800b798:	6882      	ldrne	r2, [r0, #8]
 800b79a:	460d      	mov	r5, r1
 800b79c:	bf08      	it	eq
 800b79e:	220f      	moveq	r2, #15
 800b7a0:	a901      	add	r1, sp, #4
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	f7ff ff72 	bl	800b68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b7a8:	4682      	mov	sl, r0
 800b7aa:	b11d      	cbz	r5, 800b7b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800b7ac:	6821      	ldr	r1, [r4, #0]
 800b7ae:	462a      	mov	r2, r5
 800b7b0:	f7ff ffae 	bl	800b710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b7b4:	b137      	cbz	r7, 800b7c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800b7b6:	b12e      	cbz	r6, 800b7c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800b7b8:	4632      	mov	r2, r6
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	eb0a 0005 	add.w	r0, sl, r5
 800b7c0:	f7ff ffa6 	bl	800b710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b7c4:	f1b9 0f00 	cmp.w	r9, #0
 800b7c8:	d007      	beq.n	800b7da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800b7ca:	6821      	ldr	r1, [r4, #0]
 800b7cc:	4435      	add	r5, r6
 800b7ce:	464a      	mov	r2, r9
 800b7d0:	4441      	add	r1, r8
 800b7d2:	eb0a 0005 	add.w	r0, sl, r5
 800b7d6:	f7ff ff9b 	bl	800b710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f7ff ff78 	bl	800b6d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b7e0:	9b01      	ldr	r3, [sp, #4]
 800b7e2:	f8c4 a000 	str.w	sl, [r4]
 800b7e6:	60a3      	str	r3, [r4, #8]
 800b7e8:	b002      	add	sp, #8
 800b7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b7ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>:
 800b7ee:	f100 0208 	add.w	r2, r0, #8
 800b7f2:	6002      	str	r2, [r0, #0]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	6042      	str	r2, [r0, #4]
 800b7f8:	7202      	strb	r2, [r0, #8]
 800b7fa:	4770      	bx	lr

0800b7fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800b7fc:	b570      	push	{r4, r5, r6, lr}
 800b7fe:	4604      	mov	r4, r0
 800b800:	460e      	mov	r6, r1
 800b802:	3008      	adds	r0, #8
 800b804:	6020      	str	r0, [r4, #0]
 800b806:	f856 3b08 	ldr.w	r3, [r6], #8
 800b80a:	429e      	cmp	r6, r3
 800b80c:	460d      	mov	r5, r1
 800b80e:	d10b      	bne.n	800b828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800b810:	2210      	movs	r2, #16
 800b812:	4631      	mov	r1, r6
 800b814:	f7ff ff36 	bl	800b684 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 800b818:	686b      	ldr	r3, [r5, #4]
 800b81a:	6063      	str	r3, [r4, #4]
 800b81c:	2300      	movs	r3, #0
 800b81e:	602e      	str	r6, [r5, #0]
 800b820:	606b      	str	r3, [r5, #4]
 800b822:	722b      	strb	r3, [r5, #8]
 800b824:	4620      	mov	r0, r4
 800b826:	bd70      	pop	{r4, r5, r6, pc}
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	688b      	ldr	r3, [r1, #8]
 800b82c:	60a3      	str	r3, [r4, #8]
 800b82e:	e7f3      	b.n	800b818 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800b830:	b510      	push	{r4, lr}
 800b832:	4604      	mov	r4, r0
 800b834:	f7ff ff4c 	bl	800b6d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b838:	4620      	mov	r0, r4
 800b83a:	bd10      	pop	{r4, pc}

0800b83c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800b83c:	6840      	ldr	r0, [r0, #4]
 800b83e:	4770      	bx	lr

0800b840 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800b840:	6840      	ldr	r0, [r0, #4]
 800b842:	4770      	bx	lr

0800b844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 800b844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b846:	4603      	mov	r3, r0
 800b848:	9101      	str	r1, [sp, #4]
 800b84a:	f853 2b08 	ldr.w	r2, [r3], #8
 800b84e:	429a      	cmp	r2, r3
 800b850:	bf18      	it	ne
 800b852:	6882      	ldrne	r2, [r0, #8]
 800b854:	9b01      	ldr	r3, [sp, #4]
 800b856:	bf08      	it	eq
 800b858:	220f      	moveq	r2, #15
 800b85a:	4293      	cmp	r3, r2
 800b85c:	4604      	mov	r4, r0
 800b85e:	d90e      	bls.n	800b87e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x3a>
 800b860:	a901      	add	r1, sp, #4
 800b862:	f7ff ff13 	bl	800b68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b866:	6862      	ldr	r2, [r4, #4]
 800b868:	6821      	ldr	r1, [r4, #0]
 800b86a:	3201      	adds	r2, #1
 800b86c:	4605      	mov	r5, r0
 800b86e:	f7ff ff4f 	bl	800b710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b872:	4620      	mov	r0, r4
 800b874:	f7ff ff2c 	bl	800b6d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b878:	9b01      	ldr	r3, [sp, #4]
 800b87a:	6025      	str	r5, [r4, #0]
 800b87c:	60a3      	str	r3, [r4, #8]
 800b87e:	b003      	add	sp, #12
 800b880:	bd30      	pop	{r4, r5, pc}

0800b882 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>:
 800b882:	6843      	ldr	r3, [r0, #4]
 800b884:	6800      	ldr	r0, [r0, #0]
 800b886:	3b01      	subs	r3, #1
 800b888:	4418      	add	r0, r3
 800b88a:	4770      	bx	lr

0800b88c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 800b88c:	4603      	mov	r3, r0
 800b88e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b890:	f853 2b08 	ldr.w	r2, [r3], #8
 800b894:	6846      	ldr	r6, [r0, #4]
 800b896:	429a      	cmp	r2, r3
 800b898:	bf18      	it	ne
 800b89a:	6883      	ldrne	r3, [r0, #8]
 800b89c:	f106 0501 	add.w	r5, r6, #1
 800b8a0:	bf08      	it	eq
 800b8a2:	230f      	moveq	r3, #15
 800b8a4:	429d      	cmp	r5, r3
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	460f      	mov	r7, r1
 800b8aa:	d906      	bls.n	800b8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	4631      	mov	r1, r6
 800b8b6:	f7ff ff5e 	bl	800b776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800b8ba:	6823      	ldr	r3, [r4, #0]
 800b8bc:	559f      	strb	r7, [r3, r6]
 800b8be:	6823      	ldr	r3, [r4, #0]
 800b8c0:	6065      	str	r5, [r4, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	555a      	strb	r2, [r3, r5]
 800b8c6:	b003      	add	sp, #12
 800b8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b8ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 800b8ca:	b510      	push	{r4, lr}
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	f7ff ffdd 	bl	800b88c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	bd10      	pop	{r4, pc}
	...

0800b8d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 800b8d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b8dc:	4616      	mov	r6, r2
 800b8de:	461d      	mov	r5, r3
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	4b1c      	ldr	r3, [pc, #112]	; (800b954 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x7c>)
 800b8e4:	462a      	mov	r2, r5
 800b8e6:	460f      	mov	r7, r1
 800b8e8:	4631      	mov	r1, r6
 800b8ea:	f7ff fef9 	bl	800b6e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800b8ee:	4623      	mov	r3, r4
 800b8f0:	6862      	ldr	r2, [r4, #4]
 800b8f2:	f853 0b08 	ldr.w	r0, [r3], #8
 800b8f6:	4298      	cmp	r0, r3
 800b8f8:	bf18      	it	ne
 800b8fa:	68a3      	ldrne	r3, [r4, #8]
 800b8fc:	eba5 0806 	sub.w	r8, r5, r6
 800b900:	4490      	add	r8, r2
 800b902:	bf08      	it	eq
 800b904:	230f      	moveq	r3, #15
 800b906:	4543      	cmp	r3, r8
 800b908:	d31b      	bcc.n	800b942 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x6a>
 800b90a:	19f3      	adds	r3, r6, r7
 800b90c:	1ad2      	subs	r2, r2, r3
 800b90e:	d006      	beq.n	800b91e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 800b910:	42ae      	cmp	r6, r5
 800b912:	d004      	beq.n	800b91e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 800b914:	4438      	add	r0, r7
 800b916:	1981      	adds	r1, r0, r6
 800b918:	4428      	add	r0, r5
 800b91a:	f7ff ff05 	bl	800b728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b91e:	b135      	cbz	r5, 800b92e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x56>
 800b920:	6820      	ldr	r0, [r4, #0]
 800b922:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800b926:	4629      	mov	r1, r5
 800b928:	4438      	add	r0, r7
 800b92a:	f7ff ff09 	bl	800b740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 800b92e:	6823      	ldr	r3, [r4, #0]
 800b930:	f8c4 8004 	str.w	r8, [r4, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	4620      	mov	r0, r4
 800b938:	f803 2008 	strb.w	r2, [r3, r8]
 800b93c:	b002      	add	sp, #8
 800b93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b942:	9500      	str	r5, [sp, #0]
 800b944:	2300      	movs	r3, #0
 800b946:	4632      	mov	r2, r6
 800b948:	4639      	mov	r1, r7
 800b94a:	4620      	mov	r0, r4
 800b94c:	f7ff ff13 	bl	800b776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800b950:	e7e5      	b.n	800b91e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 800b952:	bf00      	nop
 800b954:	0800ece2 	.word	0x0800ece2

0800b958 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 800b958:	b507      	push	{r0, r1, r2, lr}
 800b95a:	9200      	str	r2, [sp, #0]
 800b95c:	460b      	mov	r3, r1
 800b95e:	2200      	movs	r2, #0
 800b960:	6841      	ldr	r1, [r0, #4]
 800b962:	f7ff ffb9 	bl	800b8d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 800b966:	b003      	add	sp, #12
 800b968:	f85d fb04 	ldr.w	pc, [sp], #4

0800b96c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800b96c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b970:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b972:	4614      	mov	r4, r2
 800b974:	4680      	mov	r8, r0
 800b976:	462a      	mov	r2, r5
 800b978:	4689      	mov	r9, r1
 800b97a:	461f      	mov	r7, r3
 800b97c:	4621      	mov	r1, r4
 800b97e:	4b39      	ldr	r3, [pc, #228]	; (800ba64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 800b980:	f7ff feae 	bl	800b6e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800b984:	4642      	mov	r2, r8
 800b986:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b98a:	f852 6b08 	ldr.w	r6, [r2], #8
 800b98e:	4296      	cmp	r6, r2
 800b990:	bf18      	it	ne
 800b992:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 800b996:	eba5 0b04 	sub.w	fp, r5, r4
 800b99a:	eb03 0a0b 	add.w	sl, r3, fp
 800b99e:	bf08      	it	eq
 800b9a0:	220f      	moveq	r2, #15
 800b9a2:	4552      	cmp	r2, sl
 800b9a4:	d351      	bcc.n	800ba4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 800b9a6:	444e      	add	r6, r9
 800b9a8:	4639      	mov	r1, r7
 800b9aa:	44a1      	add	r9, r4
 800b9ac:	4640      	mov	r0, r8
 800b9ae:	eba3 0909 	sub.w	r9, r3, r9
 800b9b2:	f7ff fea1 	bl	800b6f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800b9b6:	b180      	cbz	r0, 800b9da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 800b9b8:	f1b9 0f00 	cmp.w	r9, #0
 800b9bc:	d006      	beq.n	800b9cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800b9be:	42ac      	cmp	r4, r5
 800b9c0:	d004      	beq.n	800b9cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800b9c2:	464a      	mov	r2, r9
 800b9c4:	1931      	adds	r1, r6, r4
 800b9c6:	1970      	adds	r0, r6, r5
 800b9c8:	f7ff feae 	bl	800b728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b9cc:	b315      	cbz	r5, 800ba14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b9ce:	462a      	mov	r2, r5
 800b9d0:	4639      	mov	r1, r7
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	f7ff fe9c 	bl	800b710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b9d8:	e01c      	b.n	800ba14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b9da:	b135      	cbz	r5, 800b9ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800b9dc:	42ac      	cmp	r4, r5
 800b9de:	d33c      	bcc.n	800ba5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 800b9e0:	462a      	mov	r2, r5
 800b9e2:	4639      	mov	r1, r7
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	f7ff fe9f 	bl	800b728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b9ea:	f1b9 0f00 	cmp.w	r9, #0
 800b9ee:	d011      	beq.n	800ba14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b9f0:	42ac      	cmp	r4, r5
 800b9f2:	d00f      	beq.n	800ba14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b9f4:	464a      	mov	r2, r9
 800b9f6:	1931      	adds	r1, r6, r4
 800b9f8:	1970      	adds	r0, r6, r5
 800b9fa:	f7ff fe95 	bl	800b728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b9fe:	42ac      	cmp	r4, r5
 800ba00:	d208      	bcs.n	800ba14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800ba02:	4434      	add	r4, r6
 800ba04:	197b      	adds	r3, r7, r5
 800ba06:	429c      	cmp	r4, r3
 800ba08:	d30f      	bcc.n	800ba2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 800ba0a:	462a      	mov	r2, r5
 800ba0c:	4639      	mov	r1, r7
 800ba0e:	4630      	mov	r0, r6
 800ba10:	f7ff fe8a 	bl	800b728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800ba14:	f8d8 3000 	ldr.w	r3, [r8]
 800ba18:	f8c8 a004 	str.w	sl, [r8, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	4640      	mov	r0, r8
 800ba20:	f803 200a 	strb.w	r2, [r3, sl]
 800ba24:	b003      	add	sp, #12
 800ba26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba2a:	42bc      	cmp	r4, r7
 800ba2c:	d803      	bhi.n	800ba36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 800ba2e:	462a      	mov	r2, r5
 800ba30:	eb07 010b 	add.w	r1, r7, fp
 800ba34:	e7cd      	b.n	800b9d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800ba36:	1be4      	subs	r4, r4, r7
 800ba38:	4622      	mov	r2, r4
 800ba3a:	4639      	mov	r1, r7
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	f7ff fe73 	bl	800b728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800ba42:	1b2a      	subs	r2, r5, r4
 800ba44:	1971      	adds	r1, r6, r5
 800ba46:	1930      	adds	r0, r6, r4
 800ba48:	e7c4      	b.n	800b9d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800ba4a:	9500      	str	r5, [sp, #0]
 800ba4c:	463b      	mov	r3, r7
 800ba4e:	4622      	mov	r2, r4
 800ba50:	4649      	mov	r1, r9
 800ba52:	4640      	mov	r0, r8
 800ba54:	f7ff fe8f 	bl	800b776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800ba58:	e7dc      	b.n	800ba14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800ba5a:	f1b9 0f00 	cmp.w	r9, #0
 800ba5e:	d0d0      	beq.n	800ba02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 800ba60:	e7c8      	b.n	800b9f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 800ba62:	bf00      	nop
 800ba64:	0800ecff 	.word	0x0800ecff

0800ba68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 800ba68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	4608      	mov	r0, r1
 800ba6e:	9103      	str	r1, [sp, #12]
 800ba70:	f7f4 fbfe 	bl	8000270 <strlen>
 800ba74:	9b03      	ldr	r3, [sp, #12]
 800ba76:	9000      	str	r0, [sp, #0]
 800ba78:	6862      	ldr	r2, [r4, #4]
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f7ff ff75 	bl	800b96c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800ba82:	b004      	add	sp, #16
 800ba84:	bd10      	pop	{r4, pc}

0800ba86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 800ba86:	b508      	push	{r3, lr}
 800ba88:	f7ff ffee 	bl	800ba68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 800ba8c:	bd08      	pop	{r3, pc}

0800ba8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800ba8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba90:	4604      	mov	r4, r0
 800ba92:	4623      	mov	r3, r4
 800ba94:	6840      	ldr	r0, [r0, #4]
 800ba96:	f853 6b08 	ldr.w	r6, [r3], #8
 800ba9a:	429e      	cmp	r6, r3
 800ba9c:	bf18      	it	ne
 800ba9e:	68a3      	ldrne	r3, [r4, #8]
 800baa0:	eb00 0502 	add.w	r5, r0, r2
 800baa4:	bf08      	it	eq
 800baa6:	230f      	moveq	r3, #15
 800baa8:	429d      	cmp	r5, r3
 800baaa:	d80a      	bhi.n	800bac2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800baac:	b112      	cbz	r2, 800bab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800baae:	4430      	add	r0, r6
 800bab0:	f7ff fe2e 	bl	800b710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800bab4:	6823      	ldr	r3, [r4, #0]
 800bab6:	6065      	str	r5, [r4, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	4620      	mov	r0, r4
 800babc:	555a      	strb	r2, [r3, r5]
 800babe:	b002      	add	sp, #8
 800bac0:	bd70      	pop	{r4, r5, r6, pc}
 800bac2:	9200      	str	r2, [sp, #0]
 800bac4:	460b      	mov	r3, r1
 800bac6:	2200      	movs	r2, #0
 800bac8:	4601      	mov	r1, r0
 800baca:	4620      	mov	r0, r4
 800bacc:	f7ff fe53 	bl	800b776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800bad0:	e7f0      	b.n	800bab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0800bad2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800bad2:	b508      	push	{r3, lr}
 800bad4:	e9d1 1200 	ldrd	r1, r2, [r1]
 800bad8:	f7ff ffd9 	bl	800ba8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800badc:	bd08      	pop	{r3, pc}

0800bade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 800bade:	b508      	push	{r3, lr}
 800bae0:	f7ff fff7 	bl	800bad2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800bae4:	bd08      	pop	{r3, pc}
	...

0800bae8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 800bae8:	b570      	push	{r4, r5, r6, lr}
 800baea:	4b06      	ldr	r3, [pc, #24]	; (800bb04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 800baec:	4604      	mov	r4, r0
 800baee:	460d      	mov	r5, r1
 800baf0:	4616      	mov	r6, r2
 800baf2:	2100      	movs	r1, #0
 800baf4:	f7ff fdf4 	bl	800b6e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800baf8:	4632      	mov	r2, r6
 800bafa:	4629      	mov	r1, r5
 800bafc:	4620      	mov	r0, r4
 800bafe:	f7ff ffc6 	bl	800ba8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800bb02:	bd70      	pop	{r4, r5, r6, pc}
 800bb04:	0800ed18 	.word	0x0800ed18

0800bb08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800bb08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	4608      	mov	r0, r1
 800bb0e:	460d      	mov	r5, r1
 800bb10:	f7f4 fbae 	bl	8000270 <strlen>
 800bb14:	4b06      	ldr	r3, [pc, #24]	; (800bb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800bb16:	9001      	str	r0, [sp, #4]
 800bb18:	4602      	mov	r2, r0
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f7ff fddf 	bl	800b6e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800bb22:	9a01      	ldr	r2, [sp, #4]
 800bb24:	4629      	mov	r1, r5
 800bb26:	4620      	mov	r0, r4
 800bb28:	f7ff ffb1 	bl	800ba8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800bb2c:	b003      	add	sp, #12
 800bb2e:	bd30      	pop	{r4, r5, pc}
 800bb30:	0800ed18 	.word	0x0800ed18

0800bb34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 800bb34:	b508      	push	{r3, lr}
 800bb36:	f7ff ffe7 	bl	800bb08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 800bb3a:	bd08      	pop	{r3, pc}

0800bb3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800bb3c:	6800      	ldr	r0, [r0, #0]
 800bb3e:	4770      	bx	lr

0800bb40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
 800bb40:	6800      	ldr	r0, [r0, #0]
 800bb42:	4770      	bx	lr

0800bb44 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>:
 800bb44:	4770      	bx	lr
	...

0800bb48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800bb48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	4616      	mov	r6, r2
 800bb4e:	460d      	mov	r5, r1
 800bb50:	b919      	cbnz	r1, 800bb5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800bb52:	b112      	cbz	r2, 800bb5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800bb54:	480d      	ldr	r0, [pc, #52]	; (800bb8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800bb56:	f7ff fce9 	bl	800b52c <_ZSt19__throw_logic_errorPKc>
 800bb5a:	1b73      	subs	r3, r6, r5
 800bb5c:	2b0f      	cmp	r3, #15
 800bb5e:	9301      	str	r3, [sp, #4]
 800bb60:	d907      	bls.n	800bb72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800bb62:	2200      	movs	r2, #0
 800bb64:	a901      	add	r1, sp, #4
 800bb66:	4620      	mov	r0, r4
 800bb68:	f7ff fd90 	bl	800b68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800bb6c:	9b01      	ldr	r3, [sp, #4]
 800bb6e:	6020      	str	r0, [r4, #0]
 800bb70:	60a3      	str	r3, [r4, #8]
 800bb72:	4632      	mov	r2, r6
 800bb74:	4629      	mov	r1, r5
 800bb76:	6820      	ldr	r0, [r4, #0]
 800bb78:	f7ff fdf3 	bl	800b762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800bb7c:	9b01      	ldr	r3, [sp, #4]
 800bb7e:	6822      	ldr	r2, [r4, #0]
 800bb80:	6063      	str	r3, [r4, #4]
 800bb82:	2100      	movs	r1, #0
 800bb84:	54d1      	strb	r1, [r2, r3]
 800bb86:	b002      	add	sp, #8
 800bb88:	bd70      	pop	{r4, r5, r6, pc}
 800bb8a:	bf00      	nop
 800bb8c:	0800ed2d 	.word	0x0800ed2d

0800bb90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	f100 0308 	add.w	r3, r0, #8
 800bb96:	6003      	str	r3, [r0, #0]
 800bb98:	e9d1 5200 	ldrd	r5, r2, [r1]
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	f04f 0300 	mov.w	r3, #0
 800bba2:	442a      	add	r2, r5
 800bba4:	4629      	mov	r1, r5
 800bba6:	f7ff ffcf 	bl	800bb48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800bbaa:	4620      	mov	r0, r4
 800bbac:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bbb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800bbb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	4616      	mov	r6, r2
 800bbb6:	460d      	mov	r5, r1
 800bbb8:	b919      	cbnz	r1, 800bbc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800bbba:	b112      	cbz	r2, 800bbc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800bbbc:	480d      	ldr	r0, [pc, #52]	; (800bbf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800bbbe:	f7ff fcb5 	bl	800b52c <_ZSt19__throw_logic_errorPKc>
 800bbc2:	1b73      	subs	r3, r6, r5
 800bbc4:	2b0f      	cmp	r3, #15
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	d907      	bls.n	800bbda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800bbca:	2200      	movs	r2, #0
 800bbcc:	a901      	add	r1, sp, #4
 800bbce:	4620      	mov	r0, r4
 800bbd0:	f7ff fd5c 	bl	800b68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800bbd4:	9b01      	ldr	r3, [sp, #4]
 800bbd6:	6020      	str	r0, [r4, #0]
 800bbd8:	60a3      	str	r3, [r4, #8]
 800bbda:	4632      	mov	r2, r6
 800bbdc:	4629      	mov	r1, r5
 800bbde:	6820      	ldr	r0, [r4, #0]
 800bbe0:	f7ff fdc4 	bl	800b76c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800bbe4:	9b01      	ldr	r3, [sp, #4]
 800bbe6:	6822      	ldr	r2, [r4, #0]
 800bbe8:	6063      	str	r3, [r4, #4]
 800bbea:	2100      	movs	r1, #0
 800bbec:	54d1      	strb	r1, [r2, r3]
 800bbee:	b002      	add	sp, #8
 800bbf0:	bd70      	pop	{r4, r5, r6, pc}
 800bbf2:	bf00      	nop
 800bbf4:	0800ed2d 	.word	0x0800ed2d

0800bbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	f100 0308 	add.w	r3, r0, #8
 800bbfe:	4604      	mov	r4, r0
 800bc00:	6003      	str	r3, [r0, #0]
 800bc02:	460d      	mov	r5, r1
 800bc04:	b159      	cbz	r1, 800bc1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800bc06:	4608      	mov	r0, r1
 800bc08:	f7f4 fb32 	bl	8000270 <strlen>
 800bc0c:	182a      	adds	r2, r5, r0
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f04f 0300 	mov.w	r3, #0
 800bc14:	4629      	mov	r1, r5
 800bc16:	f7ff ffcb 	bl	800bbb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	bd38      	pop	{r3, r4, r5, pc}
 800bc1e:	2201      	movs	r2, #1
 800bc20:	e7f5      	b.n	800bc0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800bc22 <_ZdlPv>:
 800bc22:	f000 bb8d 	b.w	800c340 <free>
	...

0800bc28 <_ZSt15get_new_handlerv>:
 800bc28:	4b02      	ldr	r3, [pc, #8]	; (800bc34 <_ZSt15get_new_handlerv+0xc>)
 800bc2a:	6818      	ldr	r0, [r3, #0]
 800bc2c:	f3bf 8f5b 	dmb	ish
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	20004e7c 	.word	0x20004e7c

0800bc38 <floor>:
 800bc38:	ec51 0b10 	vmov	r0, r1, d0
 800bc3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc44:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800bc48:	2e13      	cmp	r6, #19
 800bc4a:	ee10 5a10 	vmov	r5, s0
 800bc4e:	ee10 8a10 	vmov	r8, s0
 800bc52:	460c      	mov	r4, r1
 800bc54:	dc31      	bgt.n	800bcba <floor+0x82>
 800bc56:	2e00      	cmp	r6, #0
 800bc58:	da14      	bge.n	800bc84 <floor+0x4c>
 800bc5a:	a333      	add	r3, pc, #204	; (adr r3, 800bd28 <floor+0xf0>)
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	f7f4 fb14 	bl	800028c <__adddf3>
 800bc64:	2200      	movs	r2, #0
 800bc66:	2300      	movs	r3, #0
 800bc68:	f7f4 ff56 	bl	8000b18 <__aeabi_dcmpgt>
 800bc6c:	b138      	cbz	r0, 800bc7e <floor+0x46>
 800bc6e:	2c00      	cmp	r4, #0
 800bc70:	da53      	bge.n	800bd1a <floor+0xe2>
 800bc72:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800bc76:	4325      	orrs	r5, r4
 800bc78:	d052      	beq.n	800bd20 <floor+0xe8>
 800bc7a:	4c2d      	ldr	r4, [pc, #180]	; (800bd30 <floor+0xf8>)
 800bc7c:	2500      	movs	r5, #0
 800bc7e:	4621      	mov	r1, r4
 800bc80:	4628      	mov	r0, r5
 800bc82:	e024      	b.n	800bcce <floor+0x96>
 800bc84:	4f2b      	ldr	r7, [pc, #172]	; (800bd34 <floor+0xfc>)
 800bc86:	4137      	asrs	r7, r6
 800bc88:	ea01 0307 	and.w	r3, r1, r7
 800bc8c:	4303      	orrs	r3, r0
 800bc8e:	d01e      	beq.n	800bcce <floor+0x96>
 800bc90:	a325      	add	r3, pc, #148	; (adr r3, 800bd28 <floor+0xf0>)
 800bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc96:	f7f4 faf9 	bl	800028c <__adddf3>
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	f7f4 ff3b 	bl	8000b18 <__aeabi_dcmpgt>
 800bca2:	2800      	cmp	r0, #0
 800bca4:	d0eb      	beq.n	800bc7e <floor+0x46>
 800bca6:	2c00      	cmp	r4, #0
 800bca8:	bfbe      	ittt	lt
 800bcaa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bcae:	4133      	asrlt	r3, r6
 800bcb0:	18e4      	addlt	r4, r4, r3
 800bcb2:	ea24 0407 	bic.w	r4, r4, r7
 800bcb6:	2500      	movs	r5, #0
 800bcb8:	e7e1      	b.n	800bc7e <floor+0x46>
 800bcba:	2e33      	cmp	r6, #51	; 0x33
 800bcbc:	dd0b      	ble.n	800bcd6 <floor+0x9e>
 800bcbe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bcc2:	d104      	bne.n	800bcce <floor+0x96>
 800bcc4:	ee10 2a10 	vmov	r2, s0
 800bcc8:	460b      	mov	r3, r1
 800bcca:	f7f4 fadf 	bl	800028c <__adddf3>
 800bcce:	ec41 0b10 	vmov	d0, r0, r1
 800bcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800bcda:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bcde:	40df      	lsrs	r7, r3
 800bce0:	4238      	tst	r0, r7
 800bce2:	d0f4      	beq.n	800bcce <floor+0x96>
 800bce4:	a310      	add	r3, pc, #64	; (adr r3, 800bd28 <floor+0xf0>)
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7f4 facf 	bl	800028c <__adddf3>
 800bcee:	2200      	movs	r2, #0
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	f7f4 ff11 	bl	8000b18 <__aeabi_dcmpgt>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d0c1      	beq.n	800bc7e <floor+0x46>
 800bcfa:	2c00      	cmp	r4, #0
 800bcfc:	da0a      	bge.n	800bd14 <floor+0xdc>
 800bcfe:	2e14      	cmp	r6, #20
 800bd00:	d101      	bne.n	800bd06 <floor+0xce>
 800bd02:	3401      	adds	r4, #1
 800bd04:	e006      	b.n	800bd14 <floor+0xdc>
 800bd06:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	40b3      	lsls	r3, r6
 800bd0e:	441d      	add	r5, r3
 800bd10:	45a8      	cmp	r8, r5
 800bd12:	d8f6      	bhi.n	800bd02 <floor+0xca>
 800bd14:	ea25 0507 	bic.w	r5, r5, r7
 800bd18:	e7b1      	b.n	800bc7e <floor+0x46>
 800bd1a:	2500      	movs	r5, #0
 800bd1c:	462c      	mov	r4, r5
 800bd1e:	e7ae      	b.n	800bc7e <floor+0x46>
 800bd20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bd24:	e7ab      	b.n	800bc7e <floor+0x46>
 800bd26:	bf00      	nop
 800bd28:	8800759c 	.word	0x8800759c
 800bd2c:	7e37e43c 	.word	0x7e37e43c
 800bd30:	bff00000 	.word	0xbff00000
 800bd34:	000fffff 	.word	0x000fffff

0800bd38 <abort>:
 800bd38:	b508      	push	{r3, lr}
 800bd3a:	2006      	movs	r0, #6
 800bd3c:	f000 fe76 	bl	800ca2c <raise>
 800bd40:	2001      	movs	r0, #1
 800bd42:	f7f8 fea9 	bl	8004a98 <_exit>
	...

0800bd48 <__assert_func>:
 800bd48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd4a:	4614      	mov	r4, r2
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	4b09      	ldr	r3, [pc, #36]	; (800bd74 <__assert_func+0x2c>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4605      	mov	r5, r0
 800bd54:	68d8      	ldr	r0, [r3, #12]
 800bd56:	b14c      	cbz	r4, 800bd6c <__assert_func+0x24>
 800bd58:	4b07      	ldr	r3, [pc, #28]	; (800bd78 <__assert_func+0x30>)
 800bd5a:	9100      	str	r1, [sp, #0]
 800bd5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd60:	4906      	ldr	r1, [pc, #24]	; (800bd7c <__assert_func+0x34>)
 800bd62:	462b      	mov	r3, r5
 800bd64:	f000 fdd4 	bl	800c910 <fiprintf>
 800bd68:	f7ff ffe6 	bl	800bd38 <abort>
 800bd6c:	4b04      	ldr	r3, [pc, #16]	; (800bd80 <__assert_func+0x38>)
 800bd6e:	461c      	mov	r4, r3
 800bd70:	e7f3      	b.n	800bd5a <__assert_func+0x12>
 800bd72:	bf00      	nop
 800bd74:	20000068 	.word	0x20000068
 800bd78:	0800ed57 	.word	0x0800ed57
 800bd7c:	0800ed64 	.word	0x0800ed64
 800bd80:	0800ed92 	.word	0x0800ed92

0800bd84 <__cvt>:
 800bd84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd88:	ec55 4b10 	vmov	r4, r5, d0
 800bd8c:	2d00      	cmp	r5, #0
 800bd8e:	460e      	mov	r6, r1
 800bd90:	4619      	mov	r1, r3
 800bd92:	462b      	mov	r3, r5
 800bd94:	bfbb      	ittet	lt
 800bd96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bd9a:	461d      	movlt	r5, r3
 800bd9c:	2300      	movge	r3, #0
 800bd9e:	232d      	movlt	r3, #45	; 0x2d
 800bda0:	700b      	strb	r3, [r1, #0]
 800bda2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bda4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bda8:	4691      	mov	r9, r2
 800bdaa:	f023 0820 	bic.w	r8, r3, #32
 800bdae:	bfbc      	itt	lt
 800bdb0:	4622      	movlt	r2, r4
 800bdb2:	4614      	movlt	r4, r2
 800bdb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bdb8:	d005      	beq.n	800bdc6 <__cvt+0x42>
 800bdba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bdbe:	d100      	bne.n	800bdc2 <__cvt+0x3e>
 800bdc0:	3601      	adds	r6, #1
 800bdc2:	2102      	movs	r1, #2
 800bdc4:	e000      	b.n	800bdc8 <__cvt+0x44>
 800bdc6:	2103      	movs	r1, #3
 800bdc8:	ab03      	add	r3, sp, #12
 800bdca:	9301      	str	r3, [sp, #4]
 800bdcc:	ab02      	add	r3, sp, #8
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	ec45 4b10 	vmov	d0, r4, r5
 800bdd4:	4653      	mov	r3, sl
 800bdd6:	4632      	mov	r2, r6
 800bdd8:	f000 ff1a 	bl	800cc10 <_dtoa_r>
 800bddc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bde0:	4607      	mov	r7, r0
 800bde2:	d102      	bne.n	800bdea <__cvt+0x66>
 800bde4:	f019 0f01 	tst.w	r9, #1
 800bde8:	d022      	beq.n	800be30 <__cvt+0xac>
 800bdea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bdee:	eb07 0906 	add.w	r9, r7, r6
 800bdf2:	d110      	bne.n	800be16 <__cvt+0x92>
 800bdf4:	783b      	ldrb	r3, [r7, #0]
 800bdf6:	2b30      	cmp	r3, #48	; 0x30
 800bdf8:	d10a      	bne.n	800be10 <__cvt+0x8c>
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	4620      	mov	r0, r4
 800be00:	4629      	mov	r1, r5
 800be02:	f7f4 fe61 	bl	8000ac8 <__aeabi_dcmpeq>
 800be06:	b918      	cbnz	r0, 800be10 <__cvt+0x8c>
 800be08:	f1c6 0601 	rsb	r6, r6, #1
 800be0c:	f8ca 6000 	str.w	r6, [sl]
 800be10:	f8da 3000 	ldr.w	r3, [sl]
 800be14:	4499      	add	r9, r3
 800be16:	2200      	movs	r2, #0
 800be18:	2300      	movs	r3, #0
 800be1a:	4620      	mov	r0, r4
 800be1c:	4629      	mov	r1, r5
 800be1e:	f7f4 fe53 	bl	8000ac8 <__aeabi_dcmpeq>
 800be22:	b108      	cbz	r0, 800be28 <__cvt+0xa4>
 800be24:	f8cd 900c 	str.w	r9, [sp, #12]
 800be28:	2230      	movs	r2, #48	; 0x30
 800be2a:	9b03      	ldr	r3, [sp, #12]
 800be2c:	454b      	cmp	r3, r9
 800be2e:	d307      	bcc.n	800be40 <__cvt+0xbc>
 800be30:	9b03      	ldr	r3, [sp, #12]
 800be32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be34:	1bdb      	subs	r3, r3, r7
 800be36:	4638      	mov	r0, r7
 800be38:	6013      	str	r3, [r2, #0]
 800be3a:	b004      	add	sp, #16
 800be3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be40:	1c59      	adds	r1, r3, #1
 800be42:	9103      	str	r1, [sp, #12]
 800be44:	701a      	strb	r2, [r3, #0]
 800be46:	e7f0      	b.n	800be2a <__cvt+0xa6>

0800be48 <__exponent>:
 800be48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be4a:	4603      	mov	r3, r0
 800be4c:	2900      	cmp	r1, #0
 800be4e:	bfb8      	it	lt
 800be50:	4249      	neglt	r1, r1
 800be52:	f803 2b02 	strb.w	r2, [r3], #2
 800be56:	bfb4      	ite	lt
 800be58:	222d      	movlt	r2, #45	; 0x2d
 800be5a:	222b      	movge	r2, #43	; 0x2b
 800be5c:	2909      	cmp	r1, #9
 800be5e:	7042      	strb	r2, [r0, #1]
 800be60:	dd2a      	ble.n	800beb8 <__exponent+0x70>
 800be62:	f10d 0207 	add.w	r2, sp, #7
 800be66:	4617      	mov	r7, r2
 800be68:	260a      	movs	r6, #10
 800be6a:	4694      	mov	ip, r2
 800be6c:	fb91 f5f6 	sdiv	r5, r1, r6
 800be70:	fb06 1415 	mls	r4, r6, r5, r1
 800be74:	3430      	adds	r4, #48	; 0x30
 800be76:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800be7a:	460c      	mov	r4, r1
 800be7c:	2c63      	cmp	r4, #99	; 0x63
 800be7e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800be82:	4629      	mov	r1, r5
 800be84:	dcf1      	bgt.n	800be6a <__exponent+0x22>
 800be86:	3130      	adds	r1, #48	; 0x30
 800be88:	f1ac 0402 	sub.w	r4, ip, #2
 800be8c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800be90:	1c41      	adds	r1, r0, #1
 800be92:	4622      	mov	r2, r4
 800be94:	42ba      	cmp	r2, r7
 800be96:	d30a      	bcc.n	800beae <__exponent+0x66>
 800be98:	f10d 0209 	add.w	r2, sp, #9
 800be9c:	eba2 020c 	sub.w	r2, r2, ip
 800bea0:	42bc      	cmp	r4, r7
 800bea2:	bf88      	it	hi
 800bea4:	2200      	movhi	r2, #0
 800bea6:	4413      	add	r3, r2
 800bea8:	1a18      	subs	r0, r3, r0
 800beaa:	b003      	add	sp, #12
 800beac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beae:	f812 5b01 	ldrb.w	r5, [r2], #1
 800beb2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800beb6:	e7ed      	b.n	800be94 <__exponent+0x4c>
 800beb8:	2330      	movs	r3, #48	; 0x30
 800beba:	3130      	adds	r1, #48	; 0x30
 800bebc:	7083      	strb	r3, [r0, #2]
 800bebe:	70c1      	strb	r1, [r0, #3]
 800bec0:	1d03      	adds	r3, r0, #4
 800bec2:	e7f1      	b.n	800bea8 <__exponent+0x60>

0800bec4 <_printf_float>:
 800bec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec8:	ed2d 8b02 	vpush	{d8}
 800becc:	b08d      	sub	sp, #52	; 0x34
 800bece:	460c      	mov	r4, r1
 800bed0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bed4:	4616      	mov	r6, r2
 800bed6:	461f      	mov	r7, r3
 800bed8:	4605      	mov	r5, r0
 800beda:	f000 fd7b 	bl	800c9d4 <_localeconv_r>
 800bede:	f8d0 a000 	ldr.w	sl, [r0]
 800bee2:	4650      	mov	r0, sl
 800bee4:	f7f4 f9c4 	bl	8000270 <strlen>
 800bee8:	2300      	movs	r3, #0
 800beea:	930a      	str	r3, [sp, #40]	; 0x28
 800beec:	6823      	ldr	r3, [r4, #0]
 800beee:	9305      	str	r3, [sp, #20]
 800bef0:	f8d8 3000 	ldr.w	r3, [r8]
 800bef4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bef8:	3307      	adds	r3, #7
 800befa:	f023 0307 	bic.w	r3, r3, #7
 800befe:	f103 0208 	add.w	r2, r3, #8
 800bf02:	f8c8 2000 	str.w	r2, [r8]
 800bf06:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf0e:	9307      	str	r3, [sp, #28]
 800bf10:	f8cd 8018 	str.w	r8, [sp, #24]
 800bf14:	ee08 0a10 	vmov	s16, r0
 800bf18:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800bf1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf20:	4b9e      	ldr	r3, [pc, #632]	; (800c19c <_printf_float+0x2d8>)
 800bf22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf26:	f7f4 fe01 	bl	8000b2c <__aeabi_dcmpun>
 800bf2a:	bb88      	cbnz	r0, 800bf90 <_printf_float+0xcc>
 800bf2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf30:	4b9a      	ldr	r3, [pc, #616]	; (800c19c <_printf_float+0x2d8>)
 800bf32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf36:	f7f4 fddb 	bl	8000af0 <__aeabi_dcmple>
 800bf3a:	bb48      	cbnz	r0, 800bf90 <_printf_float+0xcc>
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	2300      	movs	r3, #0
 800bf40:	4640      	mov	r0, r8
 800bf42:	4649      	mov	r1, r9
 800bf44:	f7f4 fdca 	bl	8000adc <__aeabi_dcmplt>
 800bf48:	b110      	cbz	r0, 800bf50 <_printf_float+0x8c>
 800bf4a:	232d      	movs	r3, #45	; 0x2d
 800bf4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf50:	4a93      	ldr	r2, [pc, #588]	; (800c1a0 <_printf_float+0x2dc>)
 800bf52:	4b94      	ldr	r3, [pc, #592]	; (800c1a4 <_printf_float+0x2e0>)
 800bf54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bf58:	bf94      	ite	ls
 800bf5a:	4690      	movls	r8, r2
 800bf5c:	4698      	movhi	r8, r3
 800bf5e:	2303      	movs	r3, #3
 800bf60:	6123      	str	r3, [r4, #16]
 800bf62:	9b05      	ldr	r3, [sp, #20]
 800bf64:	f023 0304 	bic.w	r3, r3, #4
 800bf68:	6023      	str	r3, [r4, #0]
 800bf6a:	f04f 0900 	mov.w	r9, #0
 800bf6e:	9700      	str	r7, [sp, #0]
 800bf70:	4633      	mov	r3, r6
 800bf72:	aa0b      	add	r2, sp, #44	; 0x2c
 800bf74:	4621      	mov	r1, r4
 800bf76:	4628      	mov	r0, r5
 800bf78:	f000 fa8a 	bl	800c490 <_printf_common>
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	f040 8090 	bne.w	800c0a2 <_printf_float+0x1de>
 800bf82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf86:	b00d      	add	sp, #52	; 0x34
 800bf88:	ecbd 8b02 	vpop	{d8}
 800bf8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf90:	4642      	mov	r2, r8
 800bf92:	464b      	mov	r3, r9
 800bf94:	4640      	mov	r0, r8
 800bf96:	4649      	mov	r1, r9
 800bf98:	f7f4 fdc8 	bl	8000b2c <__aeabi_dcmpun>
 800bf9c:	b140      	cbz	r0, 800bfb0 <_printf_float+0xec>
 800bf9e:	464b      	mov	r3, r9
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	bfbc      	itt	lt
 800bfa4:	232d      	movlt	r3, #45	; 0x2d
 800bfa6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bfaa:	4a7f      	ldr	r2, [pc, #508]	; (800c1a8 <_printf_float+0x2e4>)
 800bfac:	4b7f      	ldr	r3, [pc, #508]	; (800c1ac <_printf_float+0x2e8>)
 800bfae:	e7d1      	b.n	800bf54 <_printf_float+0x90>
 800bfb0:	6863      	ldr	r3, [r4, #4]
 800bfb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bfb6:	9206      	str	r2, [sp, #24]
 800bfb8:	1c5a      	adds	r2, r3, #1
 800bfba:	d13f      	bne.n	800c03c <_printf_float+0x178>
 800bfbc:	2306      	movs	r3, #6
 800bfbe:	6063      	str	r3, [r4, #4]
 800bfc0:	9b05      	ldr	r3, [sp, #20]
 800bfc2:	6861      	ldr	r1, [r4, #4]
 800bfc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bfc8:	2300      	movs	r3, #0
 800bfca:	9303      	str	r3, [sp, #12]
 800bfcc:	ab0a      	add	r3, sp, #40	; 0x28
 800bfce:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bfd2:	ab09      	add	r3, sp, #36	; 0x24
 800bfd4:	ec49 8b10 	vmov	d0, r8, r9
 800bfd8:	9300      	str	r3, [sp, #0]
 800bfda:	6022      	str	r2, [r4, #0]
 800bfdc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	f7ff fecf 	bl	800bd84 <__cvt>
 800bfe6:	9b06      	ldr	r3, [sp, #24]
 800bfe8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bfea:	2b47      	cmp	r3, #71	; 0x47
 800bfec:	4680      	mov	r8, r0
 800bfee:	d108      	bne.n	800c002 <_printf_float+0x13e>
 800bff0:	1cc8      	adds	r0, r1, #3
 800bff2:	db02      	blt.n	800bffa <_printf_float+0x136>
 800bff4:	6863      	ldr	r3, [r4, #4]
 800bff6:	4299      	cmp	r1, r3
 800bff8:	dd41      	ble.n	800c07e <_printf_float+0x1ba>
 800bffa:	f1ab 0302 	sub.w	r3, fp, #2
 800bffe:	fa5f fb83 	uxtb.w	fp, r3
 800c002:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c006:	d820      	bhi.n	800c04a <_printf_float+0x186>
 800c008:	3901      	subs	r1, #1
 800c00a:	465a      	mov	r2, fp
 800c00c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c010:	9109      	str	r1, [sp, #36]	; 0x24
 800c012:	f7ff ff19 	bl	800be48 <__exponent>
 800c016:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c018:	1813      	adds	r3, r2, r0
 800c01a:	2a01      	cmp	r2, #1
 800c01c:	4681      	mov	r9, r0
 800c01e:	6123      	str	r3, [r4, #16]
 800c020:	dc02      	bgt.n	800c028 <_printf_float+0x164>
 800c022:	6822      	ldr	r2, [r4, #0]
 800c024:	07d2      	lsls	r2, r2, #31
 800c026:	d501      	bpl.n	800c02c <_printf_float+0x168>
 800c028:	3301      	adds	r3, #1
 800c02a:	6123      	str	r3, [r4, #16]
 800c02c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c030:	2b00      	cmp	r3, #0
 800c032:	d09c      	beq.n	800bf6e <_printf_float+0xaa>
 800c034:	232d      	movs	r3, #45	; 0x2d
 800c036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c03a:	e798      	b.n	800bf6e <_printf_float+0xaa>
 800c03c:	9a06      	ldr	r2, [sp, #24]
 800c03e:	2a47      	cmp	r2, #71	; 0x47
 800c040:	d1be      	bne.n	800bfc0 <_printf_float+0xfc>
 800c042:	2b00      	cmp	r3, #0
 800c044:	d1bc      	bne.n	800bfc0 <_printf_float+0xfc>
 800c046:	2301      	movs	r3, #1
 800c048:	e7b9      	b.n	800bfbe <_printf_float+0xfa>
 800c04a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c04e:	d118      	bne.n	800c082 <_printf_float+0x1be>
 800c050:	2900      	cmp	r1, #0
 800c052:	6863      	ldr	r3, [r4, #4]
 800c054:	dd0b      	ble.n	800c06e <_printf_float+0x1aa>
 800c056:	6121      	str	r1, [r4, #16]
 800c058:	b913      	cbnz	r3, 800c060 <_printf_float+0x19c>
 800c05a:	6822      	ldr	r2, [r4, #0]
 800c05c:	07d0      	lsls	r0, r2, #31
 800c05e:	d502      	bpl.n	800c066 <_printf_float+0x1a2>
 800c060:	3301      	adds	r3, #1
 800c062:	440b      	add	r3, r1
 800c064:	6123      	str	r3, [r4, #16]
 800c066:	65a1      	str	r1, [r4, #88]	; 0x58
 800c068:	f04f 0900 	mov.w	r9, #0
 800c06c:	e7de      	b.n	800c02c <_printf_float+0x168>
 800c06e:	b913      	cbnz	r3, 800c076 <_printf_float+0x1b2>
 800c070:	6822      	ldr	r2, [r4, #0]
 800c072:	07d2      	lsls	r2, r2, #31
 800c074:	d501      	bpl.n	800c07a <_printf_float+0x1b6>
 800c076:	3302      	adds	r3, #2
 800c078:	e7f4      	b.n	800c064 <_printf_float+0x1a0>
 800c07a:	2301      	movs	r3, #1
 800c07c:	e7f2      	b.n	800c064 <_printf_float+0x1a0>
 800c07e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c084:	4299      	cmp	r1, r3
 800c086:	db05      	blt.n	800c094 <_printf_float+0x1d0>
 800c088:	6823      	ldr	r3, [r4, #0]
 800c08a:	6121      	str	r1, [r4, #16]
 800c08c:	07d8      	lsls	r0, r3, #31
 800c08e:	d5ea      	bpl.n	800c066 <_printf_float+0x1a2>
 800c090:	1c4b      	adds	r3, r1, #1
 800c092:	e7e7      	b.n	800c064 <_printf_float+0x1a0>
 800c094:	2900      	cmp	r1, #0
 800c096:	bfd4      	ite	le
 800c098:	f1c1 0202 	rsble	r2, r1, #2
 800c09c:	2201      	movgt	r2, #1
 800c09e:	4413      	add	r3, r2
 800c0a0:	e7e0      	b.n	800c064 <_printf_float+0x1a0>
 800c0a2:	6823      	ldr	r3, [r4, #0]
 800c0a4:	055a      	lsls	r2, r3, #21
 800c0a6:	d407      	bmi.n	800c0b8 <_printf_float+0x1f4>
 800c0a8:	6923      	ldr	r3, [r4, #16]
 800c0aa:	4642      	mov	r2, r8
 800c0ac:	4631      	mov	r1, r6
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	47b8      	blx	r7
 800c0b2:	3001      	adds	r0, #1
 800c0b4:	d12c      	bne.n	800c110 <_printf_float+0x24c>
 800c0b6:	e764      	b.n	800bf82 <_printf_float+0xbe>
 800c0b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c0bc:	f240 80e0 	bls.w	800c280 <_printf_float+0x3bc>
 800c0c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	f7f4 fcfe 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0cc:	2800      	cmp	r0, #0
 800c0ce:	d034      	beq.n	800c13a <_printf_float+0x276>
 800c0d0:	4a37      	ldr	r2, [pc, #220]	; (800c1b0 <_printf_float+0x2ec>)
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	4631      	mov	r1, r6
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	47b8      	blx	r7
 800c0da:	3001      	adds	r0, #1
 800c0dc:	f43f af51 	beq.w	800bf82 <_printf_float+0xbe>
 800c0e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	db02      	blt.n	800c0ee <_printf_float+0x22a>
 800c0e8:	6823      	ldr	r3, [r4, #0]
 800c0ea:	07d8      	lsls	r0, r3, #31
 800c0ec:	d510      	bpl.n	800c110 <_printf_float+0x24c>
 800c0ee:	ee18 3a10 	vmov	r3, s16
 800c0f2:	4652      	mov	r2, sl
 800c0f4:	4631      	mov	r1, r6
 800c0f6:	4628      	mov	r0, r5
 800c0f8:	47b8      	blx	r7
 800c0fa:	3001      	adds	r0, #1
 800c0fc:	f43f af41 	beq.w	800bf82 <_printf_float+0xbe>
 800c100:	f04f 0800 	mov.w	r8, #0
 800c104:	f104 091a 	add.w	r9, r4, #26
 800c108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c10a:	3b01      	subs	r3, #1
 800c10c:	4543      	cmp	r3, r8
 800c10e:	dc09      	bgt.n	800c124 <_printf_float+0x260>
 800c110:	6823      	ldr	r3, [r4, #0]
 800c112:	079b      	lsls	r3, r3, #30
 800c114:	f100 8107 	bmi.w	800c326 <_printf_float+0x462>
 800c118:	68e0      	ldr	r0, [r4, #12]
 800c11a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c11c:	4298      	cmp	r0, r3
 800c11e:	bfb8      	it	lt
 800c120:	4618      	movlt	r0, r3
 800c122:	e730      	b.n	800bf86 <_printf_float+0xc2>
 800c124:	2301      	movs	r3, #1
 800c126:	464a      	mov	r2, r9
 800c128:	4631      	mov	r1, r6
 800c12a:	4628      	mov	r0, r5
 800c12c:	47b8      	blx	r7
 800c12e:	3001      	adds	r0, #1
 800c130:	f43f af27 	beq.w	800bf82 <_printf_float+0xbe>
 800c134:	f108 0801 	add.w	r8, r8, #1
 800c138:	e7e6      	b.n	800c108 <_printf_float+0x244>
 800c13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	dc39      	bgt.n	800c1b4 <_printf_float+0x2f0>
 800c140:	4a1b      	ldr	r2, [pc, #108]	; (800c1b0 <_printf_float+0x2ec>)
 800c142:	2301      	movs	r3, #1
 800c144:	4631      	mov	r1, r6
 800c146:	4628      	mov	r0, r5
 800c148:	47b8      	blx	r7
 800c14a:	3001      	adds	r0, #1
 800c14c:	f43f af19 	beq.w	800bf82 <_printf_float+0xbe>
 800c150:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c154:	4313      	orrs	r3, r2
 800c156:	d102      	bne.n	800c15e <_printf_float+0x29a>
 800c158:	6823      	ldr	r3, [r4, #0]
 800c15a:	07d9      	lsls	r1, r3, #31
 800c15c:	d5d8      	bpl.n	800c110 <_printf_float+0x24c>
 800c15e:	ee18 3a10 	vmov	r3, s16
 800c162:	4652      	mov	r2, sl
 800c164:	4631      	mov	r1, r6
 800c166:	4628      	mov	r0, r5
 800c168:	47b8      	blx	r7
 800c16a:	3001      	adds	r0, #1
 800c16c:	f43f af09 	beq.w	800bf82 <_printf_float+0xbe>
 800c170:	f04f 0900 	mov.w	r9, #0
 800c174:	f104 0a1a 	add.w	sl, r4, #26
 800c178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c17a:	425b      	negs	r3, r3
 800c17c:	454b      	cmp	r3, r9
 800c17e:	dc01      	bgt.n	800c184 <_printf_float+0x2c0>
 800c180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c182:	e792      	b.n	800c0aa <_printf_float+0x1e6>
 800c184:	2301      	movs	r3, #1
 800c186:	4652      	mov	r2, sl
 800c188:	4631      	mov	r1, r6
 800c18a:	4628      	mov	r0, r5
 800c18c:	47b8      	blx	r7
 800c18e:	3001      	adds	r0, #1
 800c190:	f43f aef7 	beq.w	800bf82 <_printf_float+0xbe>
 800c194:	f109 0901 	add.w	r9, r9, #1
 800c198:	e7ee      	b.n	800c178 <_printf_float+0x2b4>
 800c19a:	bf00      	nop
 800c19c:	7fefffff 	.word	0x7fefffff
 800c1a0:	0800ed93 	.word	0x0800ed93
 800c1a4:	0800ed97 	.word	0x0800ed97
 800c1a8:	0800ed9b 	.word	0x0800ed9b
 800c1ac:	0800ed9f 	.word	0x0800ed9f
 800c1b0:	0800eda3 	.word	0x0800eda3
 800c1b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	bfa8      	it	ge
 800c1bc:	461a      	movge	r2, r3
 800c1be:	2a00      	cmp	r2, #0
 800c1c0:	4691      	mov	r9, r2
 800c1c2:	dc37      	bgt.n	800c234 <_printf_float+0x370>
 800c1c4:	f04f 0b00 	mov.w	fp, #0
 800c1c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1cc:	f104 021a 	add.w	r2, r4, #26
 800c1d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1d2:	9305      	str	r3, [sp, #20]
 800c1d4:	eba3 0309 	sub.w	r3, r3, r9
 800c1d8:	455b      	cmp	r3, fp
 800c1da:	dc33      	bgt.n	800c244 <_printf_float+0x380>
 800c1dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	db3b      	blt.n	800c25c <_printf_float+0x398>
 800c1e4:	6823      	ldr	r3, [r4, #0]
 800c1e6:	07da      	lsls	r2, r3, #31
 800c1e8:	d438      	bmi.n	800c25c <_printf_float+0x398>
 800c1ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c1ee:	eba2 0903 	sub.w	r9, r2, r3
 800c1f2:	9b05      	ldr	r3, [sp, #20]
 800c1f4:	1ad2      	subs	r2, r2, r3
 800c1f6:	4591      	cmp	r9, r2
 800c1f8:	bfa8      	it	ge
 800c1fa:	4691      	movge	r9, r2
 800c1fc:	f1b9 0f00 	cmp.w	r9, #0
 800c200:	dc35      	bgt.n	800c26e <_printf_float+0x3aa>
 800c202:	f04f 0800 	mov.w	r8, #0
 800c206:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c20a:	f104 0a1a 	add.w	sl, r4, #26
 800c20e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c212:	1a9b      	subs	r3, r3, r2
 800c214:	eba3 0309 	sub.w	r3, r3, r9
 800c218:	4543      	cmp	r3, r8
 800c21a:	f77f af79 	ble.w	800c110 <_printf_float+0x24c>
 800c21e:	2301      	movs	r3, #1
 800c220:	4652      	mov	r2, sl
 800c222:	4631      	mov	r1, r6
 800c224:	4628      	mov	r0, r5
 800c226:	47b8      	blx	r7
 800c228:	3001      	adds	r0, #1
 800c22a:	f43f aeaa 	beq.w	800bf82 <_printf_float+0xbe>
 800c22e:	f108 0801 	add.w	r8, r8, #1
 800c232:	e7ec      	b.n	800c20e <_printf_float+0x34a>
 800c234:	4613      	mov	r3, r2
 800c236:	4631      	mov	r1, r6
 800c238:	4642      	mov	r2, r8
 800c23a:	4628      	mov	r0, r5
 800c23c:	47b8      	blx	r7
 800c23e:	3001      	adds	r0, #1
 800c240:	d1c0      	bne.n	800c1c4 <_printf_float+0x300>
 800c242:	e69e      	b.n	800bf82 <_printf_float+0xbe>
 800c244:	2301      	movs	r3, #1
 800c246:	4631      	mov	r1, r6
 800c248:	4628      	mov	r0, r5
 800c24a:	9205      	str	r2, [sp, #20]
 800c24c:	47b8      	blx	r7
 800c24e:	3001      	adds	r0, #1
 800c250:	f43f ae97 	beq.w	800bf82 <_printf_float+0xbe>
 800c254:	9a05      	ldr	r2, [sp, #20]
 800c256:	f10b 0b01 	add.w	fp, fp, #1
 800c25a:	e7b9      	b.n	800c1d0 <_printf_float+0x30c>
 800c25c:	ee18 3a10 	vmov	r3, s16
 800c260:	4652      	mov	r2, sl
 800c262:	4631      	mov	r1, r6
 800c264:	4628      	mov	r0, r5
 800c266:	47b8      	blx	r7
 800c268:	3001      	adds	r0, #1
 800c26a:	d1be      	bne.n	800c1ea <_printf_float+0x326>
 800c26c:	e689      	b.n	800bf82 <_printf_float+0xbe>
 800c26e:	9a05      	ldr	r2, [sp, #20]
 800c270:	464b      	mov	r3, r9
 800c272:	4442      	add	r2, r8
 800c274:	4631      	mov	r1, r6
 800c276:	4628      	mov	r0, r5
 800c278:	47b8      	blx	r7
 800c27a:	3001      	adds	r0, #1
 800c27c:	d1c1      	bne.n	800c202 <_printf_float+0x33e>
 800c27e:	e680      	b.n	800bf82 <_printf_float+0xbe>
 800c280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c282:	2a01      	cmp	r2, #1
 800c284:	dc01      	bgt.n	800c28a <_printf_float+0x3c6>
 800c286:	07db      	lsls	r3, r3, #31
 800c288:	d53a      	bpl.n	800c300 <_printf_float+0x43c>
 800c28a:	2301      	movs	r3, #1
 800c28c:	4642      	mov	r2, r8
 800c28e:	4631      	mov	r1, r6
 800c290:	4628      	mov	r0, r5
 800c292:	47b8      	blx	r7
 800c294:	3001      	adds	r0, #1
 800c296:	f43f ae74 	beq.w	800bf82 <_printf_float+0xbe>
 800c29a:	ee18 3a10 	vmov	r3, s16
 800c29e:	4652      	mov	r2, sl
 800c2a0:	4631      	mov	r1, r6
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	47b8      	blx	r7
 800c2a6:	3001      	adds	r0, #1
 800c2a8:	f43f ae6b 	beq.w	800bf82 <_printf_float+0xbe>
 800c2ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c2b8:	f7f4 fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2bc:	b9d8      	cbnz	r0, 800c2f6 <_printf_float+0x432>
 800c2be:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800c2c2:	f108 0201 	add.w	r2, r8, #1
 800c2c6:	4631      	mov	r1, r6
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	47b8      	blx	r7
 800c2cc:	3001      	adds	r0, #1
 800c2ce:	d10e      	bne.n	800c2ee <_printf_float+0x42a>
 800c2d0:	e657      	b.n	800bf82 <_printf_float+0xbe>
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	4652      	mov	r2, sl
 800c2d6:	4631      	mov	r1, r6
 800c2d8:	4628      	mov	r0, r5
 800c2da:	47b8      	blx	r7
 800c2dc:	3001      	adds	r0, #1
 800c2de:	f43f ae50 	beq.w	800bf82 <_printf_float+0xbe>
 800c2e2:	f108 0801 	add.w	r8, r8, #1
 800c2e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	4543      	cmp	r3, r8
 800c2ec:	dcf1      	bgt.n	800c2d2 <_printf_float+0x40e>
 800c2ee:	464b      	mov	r3, r9
 800c2f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c2f4:	e6da      	b.n	800c0ac <_printf_float+0x1e8>
 800c2f6:	f04f 0800 	mov.w	r8, #0
 800c2fa:	f104 0a1a 	add.w	sl, r4, #26
 800c2fe:	e7f2      	b.n	800c2e6 <_printf_float+0x422>
 800c300:	2301      	movs	r3, #1
 800c302:	4642      	mov	r2, r8
 800c304:	e7df      	b.n	800c2c6 <_printf_float+0x402>
 800c306:	2301      	movs	r3, #1
 800c308:	464a      	mov	r2, r9
 800c30a:	4631      	mov	r1, r6
 800c30c:	4628      	mov	r0, r5
 800c30e:	47b8      	blx	r7
 800c310:	3001      	adds	r0, #1
 800c312:	f43f ae36 	beq.w	800bf82 <_printf_float+0xbe>
 800c316:	f108 0801 	add.w	r8, r8, #1
 800c31a:	68e3      	ldr	r3, [r4, #12]
 800c31c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c31e:	1a5b      	subs	r3, r3, r1
 800c320:	4543      	cmp	r3, r8
 800c322:	dcf0      	bgt.n	800c306 <_printf_float+0x442>
 800c324:	e6f8      	b.n	800c118 <_printf_float+0x254>
 800c326:	f04f 0800 	mov.w	r8, #0
 800c32a:	f104 0919 	add.w	r9, r4, #25
 800c32e:	e7f4      	b.n	800c31a <_printf_float+0x456>

0800c330 <malloc>:
 800c330:	4b02      	ldr	r3, [pc, #8]	; (800c33c <malloc+0xc>)
 800c332:	4601      	mov	r1, r0
 800c334:	6818      	ldr	r0, [r3, #0]
 800c336:	f000 b82b 	b.w	800c390 <_malloc_r>
 800c33a:	bf00      	nop
 800c33c:	20000068 	.word	0x20000068

0800c340 <free>:
 800c340:	4b02      	ldr	r3, [pc, #8]	; (800c34c <free+0xc>)
 800c342:	4601      	mov	r1, r0
 800c344:	6818      	ldr	r0, [r3, #0]
 800c346:	f001 ba55 	b.w	800d7f4 <_free_r>
 800c34a:	bf00      	nop
 800c34c:	20000068 	.word	0x20000068

0800c350 <sbrk_aligned>:
 800c350:	b570      	push	{r4, r5, r6, lr}
 800c352:	4e0e      	ldr	r6, [pc, #56]	; (800c38c <sbrk_aligned+0x3c>)
 800c354:	460c      	mov	r4, r1
 800c356:	6831      	ldr	r1, [r6, #0]
 800c358:	4605      	mov	r5, r0
 800c35a:	b911      	cbnz	r1, 800c362 <sbrk_aligned+0x12>
 800c35c:	f000 fb82 	bl	800ca64 <_sbrk_r>
 800c360:	6030      	str	r0, [r6, #0]
 800c362:	4621      	mov	r1, r4
 800c364:	4628      	mov	r0, r5
 800c366:	f000 fb7d 	bl	800ca64 <_sbrk_r>
 800c36a:	1c43      	adds	r3, r0, #1
 800c36c:	d00a      	beq.n	800c384 <sbrk_aligned+0x34>
 800c36e:	1cc4      	adds	r4, r0, #3
 800c370:	f024 0403 	bic.w	r4, r4, #3
 800c374:	42a0      	cmp	r0, r4
 800c376:	d007      	beq.n	800c388 <sbrk_aligned+0x38>
 800c378:	1a21      	subs	r1, r4, r0
 800c37a:	4628      	mov	r0, r5
 800c37c:	f000 fb72 	bl	800ca64 <_sbrk_r>
 800c380:	3001      	adds	r0, #1
 800c382:	d101      	bne.n	800c388 <sbrk_aligned+0x38>
 800c384:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c388:	4620      	mov	r0, r4
 800c38a:	bd70      	pop	{r4, r5, r6, pc}
 800c38c:	20004e84 	.word	0x20004e84

0800c390 <_malloc_r>:
 800c390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c394:	1ccd      	adds	r5, r1, #3
 800c396:	f025 0503 	bic.w	r5, r5, #3
 800c39a:	3508      	adds	r5, #8
 800c39c:	2d0c      	cmp	r5, #12
 800c39e:	bf38      	it	cc
 800c3a0:	250c      	movcc	r5, #12
 800c3a2:	2d00      	cmp	r5, #0
 800c3a4:	4607      	mov	r7, r0
 800c3a6:	db01      	blt.n	800c3ac <_malloc_r+0x1c>
 800c3a8:	42a9      	cmp	r1, r5
 800c3aa:	d905      	bls.n	800c3b8 <_malloc_r+0x28>
 800c3ac:	230c      	movs	r3, #12
 800c3ae:	603b      	str	r3, [r7, #0]
 800c3b0:	2600      	movs	r6, #0
 800c3b2:	4630      	mov	r0, r6
 800c3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c48c <_malloc_r+0xfc>
 800c3bc:	f000 f9f8 	bl	800c7b0 <__malloc_lock>
 800c3c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c3c4:	461c      	mov	r4, r3
 800c3c6:	bb5c      	cbnz	r4, 800c420 <_malloc_r+0x90>
 800c3c8:	4629      	mov	r1, r5
 800c3ca:	4638      	mov	r0, r7
 800c3cc:	f7ff ffc0 	bl	800c350 <sbrk_aligned>
 800c3d0:	1c43      	adds	r3, r0, #1
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	d155      	bne.n	800c482 <_malloc_r+0xf2>
 800c3d6:	f8d8 4000 	ldr.w	r4, [r8]
 800c3da:	4626      	mov	r6, r4
 800c3dc:	2e00      	cmp	r6, #0
 800c3de:	d145      	bne.n	800c46c <_malloc_r+0xdc>
 800c3e0:	2c00      	cmp	r4, #0
 800c3e2:	d048      	beq.n	800c476 <_malloc_r+0xe6>
 800c3e4:	6823      	ldr	r3, [r4, #0]
 800c3e6:	4631      	mov	r1, r6
 800c3e8:	4638      	mov	r0, r7
 800c3ea:	eb04 0903 	add.w	r9, r4, r3
 800c3ee:	f000 fb39 	bl	800ca64 <_sbrk_r>
 800c3f2:	4581      	cmp	r9, r0
 800c3f4:	d13f      	bne.n	800c476 <_malloc_r+0xe6>
 800c3f6:	6821      	ldr	r1, [r4, #0]
 800c3f8:	1a6d      	subs	r5, r5, r1
 800c3fa:	4629      	mov	r1, r5
 800c3fc:	4638      	mov	r0, r7
 800c3fe:	f7ff ffa7 	bl	800c350 <sbrk_aligned>
 800c402:	3001      	adds	r0, #1
 800c404:	d037      	beq.n	800c476 <_malloc_r+0xe6>
 800c406:	6823      	ldr	r3, [r4, #0]
 800c408:	442b      	add	r3, r5
 800c40a:	6023      	str	r3, [r4, #0]
 800c40c:	f8d8 3000 	ldr.w	r3, [r8]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d038      	beq.n	800c486 <_malloc_r+0xf6>
 800c414:	685a      	ldr	r2, [r3, #4]
 800c416:	42a2      	cmp	r2, r4
 800c418:	d12b      	bne.n	800c472 <_malloc_r+0xe2>
 800c41a:	2200      	movs	r2, #0
 800c41c:	605a      	str	r2, [r3, #4]
 800c41e:	e00f      	b.n	800c440 <_malloc_r+0xb0>
 800c420:	6822      	ldr	r2, [r4, #0]
 800c422:	1b52      	subs	r2, r2, r5
 800c424:	d41f      	bmi.n	800c466 <_malloc_r+0xd6>
 800c426:	2a0b      	cmp	r2, #11
 800c428:	d917      	bls.n	800c45a <_malloc_r+0xca>
 800c42a:	1961      	adds	r1, r4, r5
 800c42c:	42a3      	cmp	r3, r4
 800c42e:	6025      	str	r5, [r4, #0]
 800c430:	bf18      	it	ne
 800c432:	6059      	strne	r1, [r3, #4]
 800c434:	6863      	ldr	r3, [r4, #4]
 800c436:	bf08      	it	eq
 800c438:	f8c8 1000 	streq.w	r1, [r8]
 800c43c:	5162      	str	r2, [r4, r5]
 800c43e:	604b      	str	r3, [r1, #4]
 800c440:	4638      	mov	r0, r7
 800c442:	f104 060b 	add.w	r6, r4, #11
 800c446:	f000 f9b9 	bl	800c7bc <__malloc_unlock>
 800c44a:	f026 0607 	bic.w	r6, r6, #7
 800c44e:	1d23      	adds	r3, r4, #4
 800c450:	1af2      	subs	r2, r6, r3
 800c452:	d0ae      	beq.n	800c3b2 <_malloc_r+0x22>
 800c454:	1b9b      	subs	r3, r3, r6
 800c456:	50a3      	str	r3, [r4, r2]
 800c458:	e7ab      	b.n	800c3b2 <_malloc_r+0x22>
 800c45a:	42a3      	cmp	r3, r4
 800c45c:	6862      	ldr	r2, [r4, #4]
 800c45e:	d1dd      	bne.n	800c41c <_malloc_r+0x8c>
 800c460:	f8c8 2000 	str.w	r2, [r8]
 800c464:	e7ec      	b.n	800c440 <_malloc_r+0xb0>
 800c466:	4623      	mov	r3, r4
 800c468:	6864      	ldr	r4, [r4, #4]
 800c46a:	e7ac      	b.n	800c3c6 <_malloc_r+0x36>
 800c46c:	4634      	mov	r4, r6
 800c46e:	6876      	ldr	r6, [r6, #4]
 800c470:	e7b4      	b.n	800c3dc <_malloc_r+0x4c>
 800c472:	4613      	mov	r3, r2
 800c474:	e7cc      	b.n	800c410 <_malloc_r+0x80>
 800c476:	230c      	movs	r3, #12
 800c478:	603b      	str	r3, [r7, #0]
 800c47a:	4638      	mov	r0, r7
 800c47c:	f000 f99e 	bl	800c7bc <__malloc_unlock>
 800c480:	e797      	b.n	800c3b2 <_malloc_r+0x22>
 800c482:	6025      	str	r5, [r4, #0]
 800c484:	e7dc      	b.n	800c440 <_malloc_r+0xb0>
 800c486:	605b      	str	r3, [r3, #4]
 800c488:	deff      	udf	#255	; 0xff
 800c48a:	bf00      	nop
 800c48c:	20004e80 	.word	0x20004e80

0800c490 <_printf_common>:
 800c490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c494:	4616      	mov	r6, r2
 800c496:	4699      	mov	r9, r3
 800c498:	688a      	ldr	r2, [r1, #8]
 800c49a:	690b      	ldr	r3, [r1, #16]
 800c49c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	bfb8      	it	lt
 800c4a4:	4613      	movlt	r3, r2
 800c4a6:	6033      	str	r3, [r6, #0]
 800c4a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4ac:	4607      	mov	r7, r0
 800c4ae:	460c      	mov	r4, r1
 800c4b0:	b10a      	cbz	r2, 800c4b6 <_printf_common+0x26>
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	6033      	str	r3, [r6, #0]
 800c4b6:	6823      	ldr	r3, [r4, #0]
 800c4b8:	0699      	lsls	r1, r3, #26
 800c4ba:	bf42      	ittt	mi
 800c4bc:	6833      	ldrmi	r3, [r6, #0]
 800c4be:	3302      	addmi	r3, #2
 800c4c0:	6033      	strmi	r3, [r6, #0]
 800c4c2:	6825      	ldr	r5, [r4, #0]
 800c4c4:	f015 0506 	ands.w	r5, r5, #6
 800c4c8:	d106      	bne.n	800c4d8 <_printf_common+0x48>
 800c4ca:	f104 0a19 	add.w	sl, r4, #25
 800c4ce:	68e3      	ldr	r3, [r4, #12]
 800c4d0:	6832      	ldr	r2, [r6, #0]
 800c4d2:	1a9b      	subs	r3, r3, r2
 800c4d4:	42ab      	cmp	r3, r5
 800c4d6:	dc26      	bgt.n	800c526 <_printf_common+0x96>
 800c4d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c4dc:	1e13      	subs	r3, r2, #0
 800c4de:	6822      	ldr	r2, [r4, #0]
 800c4e0:	bf18      	it	ne
 800c4e2:	2301      	movne	r3, #1
 800c4e4:	0692      	lsls	r2, r2, #26
 800c4e6:	d42b      	bmi.n	800c540 <_printf_common+0xb0>
 800c4e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4ec:	4649      	mov	r1, r9
 800c4ee:	4638      	mov	r0, r7
 800c4f0:	47c0      	blx	r8
 800c4f2:	3001      	adds	r0, #1
 800c4f4:	d01e      	beq.n	800c534 <_printf_common+0xa4>
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	6922      	ldr	r2, [r4, #16]
 800c4fa:	f003 0306 	and.w	r3, r3, #6
 800c4fe:	2b04      	cmp	r3, #4
 800c500:	bf02      	ittt	eq
 800c502:	68e5      	ldreq	r5, [r4, #12]
 800c504:	6833      	ldreq	r3, [r6, #0]
 800c506:	1aed      	subeq	r5, r5, r3
 800c508:	68a3      	ldr	r3, [r4, #8]
 800c50a:	bf0c      	ite	eq
 800c50c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c510:	2500      	movne	r5, #0
 800c512:	4293      	cmp	r3, r2
 800c514:	bfc4      	itt	gt
 800c516:	1a9b      	subgt	r3, r3, r2
 800c518:	18ed      	addgt	r5, r5, r3
 800c51a:	2600      	movs	r6, #0
 800c51c:	341a      	adds	r4, #26
 800c51e:	42b5      	cmp	r5, r6
 800c520:	d11a      	bne.n	800c558 <_printf_common+0xc8>
 800c522:	2000      	movs	r0, #0
 800c524:	e008      	b.n	800c538 <_printf_common+0xa8>
 800c526:	2301      	movs	r3, #1
 800c528:	4652      	mov	r2, sl
 800c52a:	4649      	mov	r1, r9
 800c52c:	4638      	mov	r0, r7
 800c52e:	47c0      	blx	r8
 800c530:	3001      	adds	r0, #1
 800c532:	d103      	bne.n	800c53c <_printf_common+0xac>
 800c534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c53c:	3501      	adds	r5, #1
 800c53e:	e7c6      	b.n	800c4ce <_printf_common+0x3e>
 800c540:	18e1      	adds	r1, r4, r3
 800c542:	1c5a      	adds	r2, r3, #1
 800c544:	2030      	movs	r0, #48	; 0x30
 800c546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c54a:	4422      	add	r2, r4
 800c54c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c554:	3302      	adds	r3, #2
 800c556:	e7c7      	b.n	800c4e8 <_printf_common+0x58>
 800c558:	2301      	movs	r3, #1
 800c55a:	4622      	mov	r2, r4
 800c55c:	4649      	mov	r1, r9
 800c55e:	4638      	mov	r0, r7
 800c560:	47c0      	blx	r8
 800c562:	3001      	adds	r0, #1
 800c564:	d0e6      	beq.n	800c534 <_printf_common+0xa4>
 800c566:	3601      	adds	r6, #1
 800c568:	e7d9      	b.n	800c51e <_printf_common+0x8e>
	...

0800c56c <_printf_i>:
 800c56c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c570:	7e0f      	ldrb	r7, [r1, #24]
 800c572:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c574:	2f78      	cmp	r7, #120	; 0x78
 800c576:	4691      	mov	r9, r2
 800c578:	4680      	mov	r8, r0
 800c57a:	460c      	mov	r4, r1
 800c57c:	469a      	mov	sl, r3
 800c57e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c582:	d807      	bhi.n	800c594 <_printf_i+0x28>
 800c584:	2f62      	cmp	r7, #98	; 0x62
 800c586:	d80a      	bhi.n	800c59e <_printf_i+0x32>
 800c588:	2f00      	cmp	r7, #0
 800c58a:	f000 80d4 	beq.w	800c736 <_printf_i+0x1ca>
 800c58e:	2f58      	cmp	r7, #88	; 0x58
 800c590:	f000 80c0 	beq.w	800c714 <_printf_i+0x1a8>
 800c594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c59c:	e03a      	b.n	800c614 <_printf_i+0xa8>
 800c59e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5a2:	2b15      	cmp	r3, #21
 800c5a4:	d8f6      	bhi.n	800c594 <_printf_i+0x28>
 800c5a6:	a101      	add	r1, pc, #4	; (adr r1, 800c5ac <_printf_i+0x40>)
 800c5a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5ac:	0800c605 	.word	0x0800c605
 800c5b0:	0800c619 	.word	0x0800c619
 800c5b4:	0800c595 	.word	0x0800c595
 800c5b8:	0800c595 	.word	0x0800c595
 800c5bc:	0800c595 	.word	0x0800c595
 800c5c0:	0800c595 	.word	0x0800c595
 800c5c4:	0800c619 	.word	0x0800c619
 800c5c8:	0800c595 	.word	0x0800c595
 800c5cc:	0800c595 	.word	0x0800c595
 800c5d0:	0800c595 	.word	0x0800c595
 800c5d4:	0800c595 	.word	0x0800c595
 800c5d8:	0800c71d 	.word	0x0800c71d
 800c5dc:	0800c645 	.word	0x0800c645
 800c5e0:	0800c6d7 	.word	0x0800c6d7
 800c5e4:	0800c595 	.word	0x0800c595
 800c5e8:	0800c595 	.word	0x0800c595
 800c5ec:	0800c73f 	.word	0x0800c73f
 800c5f0:	0800c595 	.word	0x0800c595
 800c5f4:	0800c645 	.word	0x0800c645
 800c5f8:	0800c595 	.word	0x0800c595
 800c5fc:	0800c595 	.word	0x0800c595
 800c600:	0800c6df 	.word	0x0800c6df
 800c604:	682b      	ldr	r3, [r5, #0]
 800c606:	1d1a      	adds	r2, r3, #4
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	602a      	str	r2, [r5, #0]
 800c60c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c614:	2301      	movs	r3, #1
 800c616:	e09f      	b.n	800c758 <_printf_i+0x1ec>
 800c618:	6820      	ldr	r0, [r4, #0]
 800c61a:	682b      	ldr	r3, [r5, #0]
 800c61c:	0607      	lsls	r7, r0, #24
 800c61e:	f103 0104 	add.w	r1, r3, #4
 800c622:	6029      	str	r1, [r5, #0]
 800c624:	d501      	bpl.n	800c62a <_printf_i+0xbe>
 800c626:	681e      	ldr	r6, [r3, #0]
 800c628:	e003      	b.n	800c632 <_printf_i+0xc6>
 800c62a:	0646      	lsls	r6, r0, #25
 800c62c:	d5fb      	bpl.n	800c626 <_printf_i+0xba>
 800c62e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c632:	2e00      	cmp	r6, #0
 800c634:	da03      	bge.n	800c63e <_printf_i+0xd2>
 800c636:	232d      	movs	r3, #45	; 0x2d
 800c638:	4276      	negs	r6, r6
 800c63a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c63e:	485a      	ldr	r0, [pc, #360]	; (800c7a8 <_printf_i+0x23c>)
 800c640:	230a      	movs	r3, #10
 800c642:	e012      	b.n	800c66a <_printf_i+0xfe>
 800c644:	682b      	ldr	r3, [r5, #0]
 800c646:	6820      	ldr	r0, [r4, #0]
 800c648:	1d19      	adds	r1, r3, #4
 800c64a:	6029      	str	r1, [r5, #0]
 800c64c:	0605      	lsls	r5, r0, #24
 800c64e:	d501      	bpl.n	800c654 <_printf_i+0xe8>
 800c650:	681e      	ldr	r6, [r3, #0]
 800c652:	e002      	b.n	800c65a <_printf_i+0xee>
 800c654:	0641      	lsls	r1, r0, #25
 800c656:	d5fb      	bpl.n	800c650 <_printf_i+0xe4>
 800c658:	881e      	ldrh	r6, [r3, #0]
 800c65a:	4853      	ldr	r0, [pc, #332]	; (800c7a8 <_printf_i+0x23c>)
 800c65c:	2f6f      	cmp	r7, #111	; 0x6f
 800c65e:	bf0c      	ite	eq
 800c660:	2308      	moveq	r3, #8
 800c662:	230a      	movne	r3, #10
 800c664:	2100      	movs	r1, #0
 800c666:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c66a:	6865      	ldr	r5, [r4, #4]
 800c66c:	60a5      	str	r5, [r4, #8]
 800c66e:	2d00      	cmp	r5, #0
 800c670:	bfa2      	ittt	ge
 800c672:	6821      	ldrge	r1, [r4, #0]
 800c674:	f021 0104 	bicge.w	r1, r1, #4
 800c678:	6021      	strge	r1, [r4, #0]
 800c67a:	b90e      	cbnz	r6, 800c680 <_printf_i+0x114>
 800c67c:	2d00      	cmp	r5, #0
 800c67e:	d04b      	beq.n	800c718 <_printf_i+0x1ac>
 800c680:	4615      	mov	r5, r2
 800c682:	fbb6 f1f3 	udiv	r1, r6, r3
 800c686:	fb03 6711 	mls	r7, r3, r1, r6
 800c68a:	5dc7      	ldrb	r7, [r0, r7]
 800c68c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c690:	4637      	mov	r7, r6
 800c692:	42bb      	cmp	r3, r7
 800c694:	460e      	mov	r6, r1
 800c696:	d9f4      	bls.n	800c682 <_printf_i+0x116>
 800c698:	2b08      	cmp	r3, #8
 800c69a:	d10b      	bne.n	800c6b4 <_printf_i+0x148>
 800c69c:	6823      	ldr	r3, [r4, #0]
 800c69e:	07de      	lsls	r6, r3, #31
 800c6a0:	d508      	bpl.n	800c6b4 <_printf_i+0x148>
 800c6a2:	6923      	ldr	r3, [r4, #16]
 800c6a4:	6861      	ldr	r1, [r4, #4]
 800c6a6:	4299      	cmp	r1, r3
 800c6a8:	bfde      	ittt	le
 800c6aa:	2330      	movle	r3, #48	; 0x30
 800c6ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c6b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c6b4:	1b52      	subs	r2, r2, r5
 800c6b6:	6122      	str	r2, [r4, #16]
 800c6b8:	f8cd a000 	str.w	sl, [sp]
 800c6bc:	464b      	mov	r3, r9
 800c6be:	aa03      	add	r2, sp, #12
 800c6c0:	4621      	mov	r1, r4
 800c6c2:	4640      	mov	r0, r8
 800c6c4:	f7ff fee4 	bl	800c490 <_printf_common>
 800c6c8:	3001      	adds	r0, #1
 800c6ca:	d14a      	bne.n	800c762 <_printf_i+0x1f6>
 800c6cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6d0:	b004      	add	sp, #16
 800c6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6d6:	6823      	ldr	r3, [r4, #0]
 800c6d8:	f043 0320 	orr.w	r3, r3, #32
 800c6dc:	6023      	str	r3, [r4, #0]
 800c6de:	4833      	ldr	r0, [pc, #204]	; (800c7ac <_printf_i+0x240>)
 800c6e0:	2778      	movs	r7, #120	; 0x78
 800c6e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c6e6:	6823      	ldr	r3, [r4, #0]
 800c6e8:	6829      	ldr	r1, [r5, #0]
 800c6ea:	061f      	lsls	r7, r3, #24
 800c6ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800c6f0:	d402      	bmi.n	800c6f8 <_printf_i+0x18c>
 800c6f2:	065f      	lsls	r7, r3, #25
 800c6f4:	bf48      	it	mi
 800c6f6:	b2b6      	uxthmi	r6, r6
 800c6f8:	07df      	lsls	r7, r3, #31
 800c6fa:	bf48      	it	mi
 800c6fc:	f043 0320 	orrmi.w	r3, r3, #32
 800c700:	6029      	str	r1, [r5, #0]
 800c702:	bf48      	it	mi
 800c704:	6023      	strmi	r3, [r4, #0]
 800c706:	b91e      	cbnz	r6, 800c710 <_printf_i+0x1a4>
 800c708:	6823      	ldr	r3, [r4, #0]
 800c70a:	f023 0320 	bic.w	r3, r3, #32
 800c70e:	6023      	str	r3, [r4, #0]
 800c710:	2310      	movs	r3, #16
 800c712:	e7a7      	b.n	800c664 <_printf_i+0xf8>
 800c714:	4824      	ldr	r0, [pc, #144]	; (800c7a8 <_printf_i+0x23c>)
 800c716:	e7e4      	b.n	800c6e2 <_printf_i+0x176>
 800c718:	4615      	mov	r5, r2
 800c71a:	e7bd      	b.n	800c698 <_printf_i+0x12c>
 800c71c:	682b      	ldr	r3, [r5, #0]
 800c71e:	6826      	ldr	r6, [r4, #0]
 800c720:	6961      	ldr	r1, [r4, #20]
 800c722:	1d18      	adds	r0, r3, #4
 800c724:	6028      	str	r0, [r5, #0]
 800c726:	0635      	lsls	r5, r6, #24
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	d501      	bpl.n	800c730 <_printf_i+0x1c4>
 800c72c:	6019      	str	r1, [r3, #0]
 800c72e:	e002      	b.n	800c736 <_printf_i+0x1ca>
 800c730:	0670      	lsls	r0, r6, #25
 800c732:	d5fb      	bpl.n	800c72c <_printf_i+0x1c0>
 800c734:	8019      	strh	r1, [r3, #0]
 800c736:	2300      	movs	r3, #0
 800c738:	6123      	str	r3, [r4, #16]
 800c73a:	4615      	mov	r5, r2
 800c73c:	e7bc      	b.n	800c6b8 <_printf_i+0x14c>
 800c73e:	682b      	ldr	r3, [r5, #0]
 800c740:	1d1a      	adds	r2, r3, #4
 800c742:	602a      	str	r2, [r5, #0]
 800c744:	681d      	ldr	r5, [r3, #0]
 800c746:	6862      	ldr	r2, [r4, #4]
 800c748:	2100      	movs	r1, #0
 800c74a:	4628      	mov	r0, r5
 800c74c:	f7f3 fd40 	bl	80001d0 <memchr>
 800c750:	b108      	cbz	r0, 800c756 <_printf_i+0x1ea>
 800c752:	1b40      	subs	r0, r0, r5
 800c754:	6060      	str	r0, [r4, #4]
 800c756:	6863      	ldr	r3, [r4, #4]
 800c758:	6123      	str	r3, [r4, #16]
 800c75a:	2300      	movs	r3, #0
 800c75c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c760:	e7aa      	b.n	800c6b8 <_printf_i+0x14c>
 800c762:	6923      	ldr	r3, [r4, #16]
 800c764:	462a      	mov	r2, r5
 800c766:	4649      	mov	r1, r9
 800c768:	4640      	mov	r0, r8
 800c76a:	47d0      	blx	sl
 800c76c:	3001      	adds	r0, #1
 800c76e:	d0ad      	beq.n	800c6cc <_printf_i+0x160>
 800c770:	6823      	ldr	r3, [r4, #0]
 800c772:	079b      	lsls	r3, r3, #30
 800c774:	d413      	bmi.n	800c79e <_printf_i+0x232>
 800c776:	68e0      	ldr	r0, [r4, #12]
 800c778:	9b03      	ldr	r3, [sp, #12]
 800c77a:	4298      	cmp	r0, r3
 800c77c:	bfb8      	it	lt
 800c77e:	4618      	movlt	r0, r3
 800c780:	e7a6      	b.n	800c6d0 <_printf_i+0x164>
 800c782:	2301      	movs	r3, #1
 800c784:	4632      	mov	r2, r6
 800c786:	4649      	mov	r1, r9
 800c788:	4640      	mov	r0, r8
 800c78a:	47d0      	blx	sl
 800c78c:	3001      	adds	r0, #1
 800c78e:	d09d      	beq.n	800c6cc <_printf_i+0x160>
 800c790:	3501      	adds	r5, #1
 800c792:	68e3      	ldr	r3, [r4, #12]
 800c794:	9903      	ldr	r1, [sp, #12]
 800c796:	1a5b      	subs	r3, r3, r1
 800c798:	42ab      	cmp	r3, r5
 800c79a:	dcf2      	bgt.n	800c782 <_printf_i+0x216>
 800c79c:	e7eb      	b.n	800c776 <_printf_i+0x20a>
 800c79e:	2500      	movs	r5, #0
 800c7a0:	f104 0619 	add.w	r6, r4, #25
 800c7a4:	e7f5      	b.n	800c792 <_printf_i+0x226>
 800c7a6:	bf00      	nop
 800c7a8:	0800eda5 	.word	0x0800eda5
 800c7ac:	0800edb6 	.word	0x0800edb6

0800c7b0 <__malloc_lock>:
 800c7b0:	4801      	ldr	r0, [pc, #4]	; (800c7b8 <__malloc_lock+0x8>)
 800c7b2:	f000 b992 	b.w	800cada <__retarget_lock_acquire_recursive>
 800c7b6:	bf00      	nop
 800c7b8:	20004fc4 	.word	0x20004fc4

0800c7bc <__malloc_unlock>:
 800c7bc:	4801      	ldr	r0, [pc, #4]	; (800c7c4 <__malloc_unlock+0x8>)
 800c7be:	f000 b98d 	b.w	800cadc <__retarget_lock_release_recursive>
 800c7c2:	bf00      	nop
 800c7c4:	20004fc4 	.word	0x20004fc4

0800c7c8 <std>:
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	b510      	push	{r4, lr}
 800c7cc:	4604      	mov	r4, r0
 800c7ce:	e9c0 3300 	strd	r3, r3, [r0]
 800c7d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c7d6:	6083      	str	r3, [r0, #8]
 800c7d8:	8181      	strh	r1, [r0, #12]
 800c7da:	6643      	str	r3, [r0, #100]	; 0x64
 800c7dc:	81c2      	strh	r2, [r0, #14]
 800c7de:	6183      	str	r3, [r0, #24]
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	2208      	movs	r2, #8
 800c7e4:	305c      	adds	r0, #92	; 0x5c
 800c7e6:	f000 f8ed 	bl	800c9c4 <memset>
 800c7ea:	4b0d      	ldr	r3, [pc, #52]	; (800c820 <std+0x58>)
 800c7ec:	6263      	str	r3, [r4, #36]	; 0x24
 800c7ee:	4b0d      	ldr	r3, [pc, #52]	; (800c824 <std+0x5c>)
 800c7f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c7f2:	4b0d      	ldr	r3, [pc, #52]	; (800c828 <std+0x60>)
 800c7f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c7f6:	4b0d      	ldr	r3, [pc, #52]	; (800c82c <std+0x64>)
 800c7f8:	6323      	str	r3, [r4, #48]	; 0x30
 800c7fa:	4b0d      	ldr	r3, [pc, #52]	; (800c830 <std+0x68>)
 800c7fc:	6224      	str	r4, [r4, #32]
 800c7fe:	429c      	cmp	r4, r3
 800c800:	d006      	beq.n	800c810 <std+0x48>
 800c802:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c806:	4294      	cmp	r4, r2
 800c808:	d002      	beq.n	800c810 <std+0x48>
 800c80a:	33d0      	adds	r3, #208	; 0xd0
 800c80c:	429c      	cmp	r4, r3
 800c80e:	d105      	bne.n	800c81c <std+0x54>
 800c810:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c818:	f000 b95e 	b.w	800cad8 <__retarget_lock_init_recursive>
 800c81c:	bd10      	pop	{r4, pc}
 800c81e:	bf00      	nop
 800c820:	0800e369 	.word	0x0800e369
 800c824:	0800e38b 	.word	0x0800e38b
 800c828:	0800e3c3 	.word	0x0800e3c3
 800c82c:	0800e3e7 	.word	0x0800e3e7
 800c830:	20004e88 	.word	0x20004e88

0800c834 <stdio_exit_handler>:
 800c834:	4a02      	ldr	r2, [pc, #8]	; (800c840 <stdio_exit_handler+0xc>)
 800c836:	4903      	ldr	r1, [pc, #12]	; (800c844 <stdio_exit_handler+0x10>)
 800c838:	4803      	ldr	r0, [pc, #12]	; (800c848 <stdio_exit_handler+0x14>)
 800c83a:	f000 b87b 	b.w	800c934 <_fwalk_sglue>
 800c83e:	bf00      	nop
 800c840:	20000010 	.word	0x20000010
 800c844:	0800dc21 	.word	0x0800dc21
 800c848:	2000001c 	.word	0x2000001c

0800c84c <cleanup_stdio>:
 800c84c:	6841      	ldr	r1, [r0, #4]
 800c84e:	4b0c      	ldr	r3, [pc, #48]	; (800c880 <cleanup_stdio+0x34>)
 800c850:	4299      	cmp	r1, r3
 800c852:	b510      	push	{r4, lr}
 800c854:	4604      	mov	r4, r0
 800c856:	d001      	beq.n	800c85c <cleanup_stdio+0x10>
 800c858:	f001 f9e2 	bl	800dc20 <_fflush_r>
 800c85c:	68a1      	ldr	r1, [r4, #8]
 800c85e:	4b09      	ldr	r3, [pc, #36]	; (800c884 <cleanup_stdio+0x38>)
 800c860:	4299      	cmp	r1, r3
 800c862:	d002      	beq.n	800c86a <cleanup_stdio+0x1e>
 800c864:	4620      	mov	r0, r4
 800c866:	f001 f9db 	bl	800dc20 <_fflush_r>
 800c86a:	68e1      	ldr	r1, [r4, #12]
 800c86c:	4b06      	ldr	r3, [pc, #24]	; (800c888 <cleanup_stdio+0x3c>)
 800c86e:	4299      	cmp	r1, r3
 800c870:	d004      	beq.n	800c87c <cleanup_stdio+0x30>
 800c872:	4620      	mov	r0, r4
 800c874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c878:	f001 b9d2 	b.w	800dc20 <_fflush_r>
 800c87c:	bd10      	pop	{r4, pc}
 800c87e:	bf00      	nop
 800c880:	20004e88 	.word	0x20004e88
 800c884:	20004ef0 	.word	0x20004ef0
 800c888:	20004f58 	.word	0x20004f58

0800c88c <global_stdio_init.part.0>:
 800c88c:	b510      	push	{r4, lr}
 800c88e:	4b0b      	ldr	r3, [pc, #44]	; (800c8bc <global_stdio_init.part.0+0x30>)
 800c890:	4c0b      	ldr	r4, [pc, #44]	; (800c8c0 <global_stdio_init.part.0+0x34>)
 800c892:	4a0c      	ldr	r2, [pc, #48]	; (800c8c4 <global_stdio_init.part.0+0x38>)
 800c894:	601a      	str	r2, [r3, #0]
 800c896:	4620      	mov	r0, r4
 800c898:	2200      	movs	r2, #0
 800c89a:	2104      	movs	r1, #4
 800c89c:	f7ff ff94 	bl	800c7c8 <std>
 800c8a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	2109      	movs	r1, #9
 800c8a8:	f7ff ff8e 	bl	800c7c8 <std>
 800c8ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c8b0:	2202      	movs	r2, #2
 800c8b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8b6:	2112      	movs	r1, #18
 800c8b8:	f7ff bf86 	b.w	800c7c8 <std>
 800c8bc:	20004fc0 	.word	0x20004fc0
 800c8c0:	20004e88 	.word	0x20004e88
 800c8c4:	0800c835 	.word	0x0800c835

0800c8c8 <__sfp_lock_acquire>:
 800c8c8:	4801      	ldr	r0, [pc, #4]	; (800c8d0 <__sfp_lock_acquire+0x8>)
 800c8ca:	f000 b906 	b.w	800cada <__retarget_lock_acquire_recursive>
 800c8ce:	bf00      	nop
 800c8d0:	20004fc5 	.word	0x20004fc5

0800c8d4 <__sfp_lock_release>:
 800c8d4:	4801      	ldr	r0, [pc, #4]	; (800c8dc <__sfp_lock_release+0x8>)
 800c8d6:	f000 b901 	b.w	800cadc <__retarget_lock_release_recursive>
 800c8da:	bf00      	nop
 800c8dc:	20004fc5 	.word	0x20004fc5

0800c8e0 <__sinit>:
 800c8e0:	b510      	push	{r4, lr}
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	f7ff fff0 	bl	800c8c8 <__sfp_lock_acquire>
 800c8e8:	6a23      	ldr	r3, [r4, #32]
 800c8ea:	b11b      	cbz	r3, 800c8f4 <__sinit+0x14>
 800c8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8f0:	f7ff bff0 	b.w	800c8d4 <__sfp_lock_release>
 800c8f4:	4b04      	ldr	r3, [pc, #16]	; (800c908 <__sinit+0x28>)
 800c8f6:	6223      	str	r3, [r4, #32]
 800c8f8:	4b04      	ldr	r3, [pc, #16]	; (800c90c <__sinit+0x2c>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d1f5      	bne.n	800c8ec <__sinit+0xc>
 800c900:	f7ff ffc4 	bl	800c88c <global_stdio_init.part.0>
 800c904:	e7f2      	b.n	800c8ec <__sinit+0xc>
 800c906:	bf00      	nop
 800c908:	0800c84d 	.word	0x0800c84d
 800c90c:	20004fc0 	.word	0x20004fc0

0800c910 <fiprintf>:
 800c910:	b40e      	push	{r1, r2, r3}
 800c912:	b503      	push	{r0, r1, lr}
 800c914:	4601      	mov	r1, r0
 800c916:	ab03      	add	r3, sp, #12
 800c918:	4805      	ldr	r0, [pc, #20]	; (800c930 <fiprintf+0x20>)
 800c91a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c91e:	6800      	ldr	r0, [r0, #0]
 800c920:	9301      	str	r3, [sp, #4]
 800c922:	f000 ffdd 	bl	800d8e0 <_vfiprintf_r>
 800c926:	b002      	add	sp, #8
 800c928:	f85d eb04 	ldr.w	lr, [sp], #4
 800c92c:	b003      	add	sp, #12
 800c92e:	4770      	bx	lr
 800c930:	20000068 	.word	0x20000068

0800c934 <_fwalk_sglue>:
 800c934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c938:	4607      	mov	r7, r0
 800c93a:	4688      	mov	r8, r1
 800c93c:	4614      	mov	r4, r2
 800c93e:	2600      	movs	r6, #0
 800c940:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c944:	f1b9 0901 	subs.w	r9, r9, #1
 800c948:	d505      	bpl.n	800c956 <_fwalk_sglue+0x22>
 800c94a:	6824      	ldr	r4, [r4, #0]
 800c94c:	2c00      	cmp	r4, #0
 800c94e:	d1f7      	bne.n	800c940 <_fwalk_sglue+0xc>
 800c950:	4630      	mov	r0, r6
 800c952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c956:	89ab      	ldrh	r3, [r5, #12]
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d907      	bls.n	800c96c <_fwalk_sglue+0x38>
 800c95c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c960:	3301      	adds	r3, #1
 800c962:	d003      	beq.n	800c96c <_fwalk_sglue+0x38>
 800c964:	4629      	mov	r1, r5
 800c966:	4638      	mov	r0, r7
 800c968:	47c0      	blx	r8
 800c96a:	4306      	orrs	r6, r0
 800c96c:	3568      	adds	r5, #104	; 0x68
 800c96e:	e7e9      	b.n	800c944 <_fwalk_sglue+0x10>

0800c970 <memcmp>:
 800c970:	b510      	push	{r4, lr}
 800c972:	3901      	subs	r1, #1
 800c974:	4402      	add	r2, r0
 800c976:	4290      	cmp	r0, r2
 800c978:	d101      	bne.n	800c97e <memcmp+0xe>
 800c97a:	2000      	movs	r0, #0
 800c97c:	e005      	b.n	800c98a <memcmp+0x1a>
 800c97e:	7803      	ldrb	r3, [r0, #0]
 800c980:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c984:	42a3      	cmp	r3, r4
 800c986:	d001      	beq.n	800c98c <memcmp+0x1c>
 800c988:	1b18      	subs	r0, r3, r4
 800c98a:	bd10      	pop	{r4, pc}
 800c98c:	3001      	adds	r0, #1
 800c98e:	e7f2      	b.n	800c976 <memcmp+0x6>

0800c990 <memmove>:
 800c990:	4288      	cmp	r0, r1
 800c992:	b510      	push	{r4, lr}
 800c994:	eb01 0402 	add.w	r4, r1, r2
 800c998:	d902      	bls.n	800c9a0 <memmove+0x10>
 800c99a:	4284      	cmp	r4, r0
 800c99c:	4623      	mov	r3, r4
 800c99e:	d807      	bhi.n	800c9b0 <memmove+0x20>
 800c9a0:	1e43      	subs	r3, r0, #1
 800c9a2:	42a1      	cmp	r1, r4
 800c9a4:	d008      	beq.n	800c9b8 <memmove+0x28>
 800c9a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9ae:	e7f8      	b.n	800c9a2 <memmove+0x12>
 800c9b0:	4402      	add	r2, r0
 800c9b2:	4601      	mov	r1, r0
 800c9b4:	428a      	cmp	r2, r1
 800c9b6:	d100      	bne.n	800c9ba <memmove+0x2a>
 800c9b8:	bd10      	pop	{r4, pc}
 800c9ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9c2:	e7f7      	b.n	800c9b4 <memmove+0x24>

0800c9c4 <memset>:
 800c9c4:	4402      	add	r2, r0
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d100      	bne.n	800c9ce <memset+0xa>
 800c9cc:	4770      	bx	lr
 800c9ce:	f803 1b01 	strb.w	r1, [r3], #1
 800c9d2:	e7f9      	b.n	800c9c8 <memset+0x4>

0800c9d4 <_localeconv_r>:
 800c9d4:	4800      	ldr	r0, [pc, #0]	; (800c9d8 <_localeconv_r+0x4>)
 800c9d6:	4770      	bx	lr
 800c9d8:	2000015c 	.word	0x2000015c

0800c9dc <_raise_r>:
 800c9dc:	291f      	cmp	r1, #31
 800c9de:	b538      	push	{r3, r4, r5, lr}
 800c9e0:	4604      	mov	r4, r0
 800c9e2:	460d      	mov	r5, r1
 800c9e4:	d904      	bls.n	800c9f0 <_raise_r+0x14>
 800c9e6:	2316      	movs	r3, #22
 800c9e8:	6003      	str	r3, [r0, #0]
 800c9ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9ee:	bd38      	pop	{r3, r4, r5, pc}
 800c9f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c9f2:	b112      	cbz	r2, 800c9fa <_raise_r+0x1e>
 800c9f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c9f8:	b94b      	cbnz	r3, 800ca0e <_raise_r+0x32>
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f000 f830 	bl	800ca60 <_getpid_r>
 800ca00:	462a      	mov	r2, r5
 800ca02:	4601      	mov	r1, r0
 800ca04:	4620      	mov	r0, r4
 800ca06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca0a:	f000 b817 	b.w	800ca3c <_kill_r>
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d00a      	beq.n	800ca28 <_raise_r+0x4c>
 800ca12:	1c59      	adds	r1, r3, #1
 800ca14:	d103      	bne.n	800ca1e <_raise_r+0x42>
 800ca16:	2316      	movs	r3, #22
 800ca18:	6003      	str	r3, [r0, #0]
 800ca1a:	2001      	movs	r0, #1
 800ca1c:	e7e7      	b.n	800c9ee <_raise_r+0x12>
 800ca1e:	2400      	movs	r4, #0
 800ca20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca24:	4628      	mov	r0, r5
 800ca26:	4798      	blx	r3
 800ca28:	2000      	movs	r0, #0
 800ca2a:	e7e0      	b.n	800c9ee <_raise_r+0x12>

0800ca2c <raise>:
 800ca2c:	4b02      	ldr	r3, [pc, #8]	; (800ca38 <raise+0xc>)
 800ca2e:	4601      	mov	r1, r0
 800ca30:	6818      	ldr	r0, [r3, #0]
 800ca32:	f7ff bfd3 	b.w	800c9dc <_raise_r>
 800ca36:	bf00      	nop
 800ca38:	20000068 	.word	0x20000068

0800ca3c <_kill_r>:
 800ca3c:	b538      	push	{r3, r4, r5, lr}
 800ca3e:	4d07      	ldr	r5, [pc, #28]	; (800ca5c <_kill_r+0x20>)
 800ca40:	2300      	movs	r3, #0
 800ca42:	4604      	mov	r4, r0
 800ca44:	4608      	mov	r0, r1
 800ca46:	4611      	mov	r1, r2
 800ca48:	602b      	str	r3, [r5, #0]
 800ca4a:	f7f8 f815 	bl	8004a78 <_kill>
 800ca4e:	1c43      	adds	r3, r0, #1
 800ca50:	d102      	bne.n	800ca58 <_kill_r+0x1c>
 800ca52:	682b      	ldr	r3, [r5, #0]
 800ca54:	b103      	cbz	r3, 800ca58 <_kill_r+0x1c>
 800ca56:	6023      	str	r3, [r4, #0]
 800ca58:	bd38      	pop	{r3, r4, r5, pc}
 800ca5a:	bf00      	nop
 800ca5c:	20004fc8 	.word	0x20004fc8

0800ca60 <_getpid_r>:
 800ca60:	f7f8 b802 	b.w	8004a68 <_getpid>

0800ca64 <_sbrk_r>:
 800ca64:	b538      	push	{r3, r4, r5, lr}
 800ca66:	4d06      	ldr	r5, [pc, #24]	; (800ca80 <_sbrk_r+0x1c>)
 800ca68:	2300      	movs	r3, #0
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	4608      	mov	r0, r1
 800ca6e:	602b      	str	r3, [r5, #0]
 800ca70:	f7f8 f88a 	bl	8004b88 <_sbrk>
 800ca74:	1c43      	adds	r3, r0, #1
 800ca76:	d102      	bne.n	800ca7e <_sbrk_r+0x1a>
 800ca78:	682b      	ldr	r3, [r5, #0]
 800ca7a:	b103      	cbz	r3, 800ca7e <_sbrk_r+0x1a>
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	bd38      	pop	{r3, r4, r5, pc}
 800ca80:	20004fc8 	.word	0x20004fc8

0800ca84 <__errno>:
 800ca84:	4b01      	ldr	r3, [pc, #4]	; (800ca8c <__errno+0x8>)
 800ca86:	6818      	ldr	r0, [r3, #0]
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	20000068 	.word	0x20000068

0800ca90 <__libc_init_array>:
 800ca90:	b570      	push	{r4, r5, r6, lr}
 800ca92:	4d0d      	ldr	r5, [pc, #52]	; (800cac8 <__libc_init_array+0x38>)
 800ca94:	4c0d      	ldr	r4, [pc, #52]	; (800cacc <__libc_init_array+0x3c>)
 800ca96:	1b64      	subs	r4, r4, r5
 800ca98:	10a4      	asrs	r4, r4, #2
 800ca9a:	2600      	movs	r6, #0
 800ca9c:	42a6      	cmp	r6, r4
 800ca9e:	d109      	bne.n	800cab4 <__libc_init_array+0x24>
 800caa0:	4d0b      	ldr	r5, [pc, #44]	; (800cad0 <__libc_init_array+0x40>)
 800caa2:	4c0c      	ldr	r4, [pc, #48]	; (800cad4 <__libc_init_array+0x44>)
 800caa4:	f001 fe38 	bl	800e718 <_init>
 800caa8:	1b64      	subs	r4, r4, r5
 800caaa:	10a4      	asrs	r4, r4, #2
 800caac:	2600      	movs	r6, #0
 800caae:	42a6      	cmp	r6, r4
 800cab0:	d105      	bne.n	800cabe <__libc_init_array+0x2e>
 800cab2:	bd70      	pop	{r4, r5, r6, pc}
 800cab4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cab8:	4798      	blx	r3
 800caba:	3601      	adds	r6, #1
 800cabc:	e7ee      	b.n	800ca9c <__libc_init_array+0xc>
 800cabe:	f855 3b04 	ldr.w	r3, [r5], #4
 800cac2:	4798      	blx	r3
 800cac4:	3601      	adds	r6, #1
 800cac6:	e7f2      	b.n	800caae <__libc_init_array+0x1e>
 800cac8:	0800f0d0 	.word	0x0800f0d0
 800cacc:	0800f0d0 	.word	0x0800f0d0
 800cad0:	0800f0d0 	.word	0x0800f0d0
 800cad4:	0800f0dc 	.word	0x0800f0dc

0800cad8 <__retarget_lock_init_recursive>:
 800cad8:	4770      	bx	lr

0800cada <__retarget_lock_acquire_recursive>:
 800cada:	4770      	bx	lr

0800cadc <__retarget_lock_release_recursive>:
 800cadc:	4770      	bx	lr

0800cade <memcpy>:
 800cade:	440a      	add	r2, r1
 800cae0:	4291      	cmp	r1, r2
 800cae2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cae6:	d100      	bne.n	800caea <memcpy+0xc>
 800cae8:	4770      	bx	lr
 800caea:	b510      	push	{r4, lr}
 800caec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800caf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800caf4:	4291      	cmp	r1, r2
 800caf6:	d1f9      	bne.n	800caec <memcpy+0xe>
 800caf8:	bd10      	pop	{r4, pc}

0800cafa <quorem>:
 800cafa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cafe:	6903      	ldr	r3, [r0, #16]
 800cb00:	690c      	ldr	r4, [r1, #16]
 800cb02:	42a3      	cmp	r3, r4
 800cb04:	4607      	mov	r7, r0
 800cb06:	db7e      	blt.n	800cc06 <quorem+0x10c>
 800cb08:	3c01      	subs	r4, #1
 800cb0a:	f101 0814 	add.w	r8, r1, #20
 800cb0e:	f100 0514 	add.w	r5, r0, #20
 800cb12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb16:	9301      	str	r3, [sp, #4]
 800cb18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb20:	3301      	adds	r3, #1
 800cb22:	429a      	cmp	r2, r3
 800cb24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cb28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb2c:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb30:	d331      	bcc.n	800cb96 <quorem+0x9c>
 800cb32:	f04f 0e00 	mov.w	lr, #0
 800cb36:	4640      	mov	r0, r8
 800cb38:	46ac      	mov	ip, r5
 800cb3a:	46f2      	mov	sl, lr
 800cb3c:	f850 2b04 	ldr.w	r2, [r0], #4
 800cb40:	b293      	uxth	r3, r2
 800cb42:	fb06 e303 	mla	r3, r6, r3, lr
 800cb46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb4a:	0c1a      	lsrs	r2, r3, #16
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	ebaa 0303 	sub.w	r3, sl, r3
 800cb52:	f8dc a000 	ldr.w	sl, [ip]
 800cb56:	fa13 f38a 	uxtah	r3, r3, sl
 800cb5a:	fb06 220e 	mla	r2, r6, lr, r2
 800cb5e:	9300      	str	r3, [sp, #0]
 800cb60:	9b00      	ldr	r3, [sp, #0]
 800cb62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb66:	b292      	uxth	r2, r2
 800cb68:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cb6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb70:	f8bd 3000 	ldrh.w	r3, [sp]
 800cb74:	4581      	cmp	r9, r0
 800cb76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb7a:	f84c 3b04 	str.w	r3, [ip], #4
 800cb7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cb82:	d2db      	bcs.n	800cb3c <quorem+0x42>
 800cb84:	f855 300b 	ldr.w	r3, [r5, fp]
 800cb88:	b92b      	cbnz	r3, 800cb96 <quorem+0x9c>
 800cb8a:	9b01      	ldr	r3, [sp, #4]
 800cb8c:	3b04      	subs	r3, #4
 800cb8e:	429d      	cmp	r5, r3
 800cb90:	461a      	mov	r2, r3
 800cb92:	d32c      	bcc.n	800cbee <quorem+0xf4>
 800cb94:	613c      	str	r4, [r7, #16]
 800cb96:	4638      	mov	r0, r7
 800cb98:	f001 fae6 	bl	800e168 <__mcmp>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	db22      	blt.n	800cbe6 <quorem+0xec>
 800cba0:	3601      	adds	r6, #1
 800cba2:	4629      	mov	r1, r5
 800cba4:	2000      	movs	r0, #0
 800cba6:	f858 2b04 	ldr.w	r2, [r8], #4
 800cbaa:	f8d1 c000 	ldr.w	ip, [r1]
 800cbae:	b293      	uxth	r3, r2
 800cbb0:	1ac3      	subs	r3, r0, r3
 800cbb2:	0c12      	lsrs	r2, r2, #16
 800cbb4:	fa13 f38c 	uxtah	r3, r3, ip
 800cbb8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800cbbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbc6:	45c1      	cmp	r9, r8
 800cbc8:	f841 3b04 	str.w	r3, [r1], #4
 800cbcc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cbd0:	d2e9      	bcs.n	800cba6 <quorem+0xac>
 800cbd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbda:	b922      	cbnz	r2, 800cbe6 <quorem+0xec>
 800cbdc:	3b04      	subs	r3, #4
 800cbde:	429d      	cmp	r5, r3
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	d30a      	bcc.n	800cbfa <quorem+0x100>
 800cbe4:	613c      	str	r4, [r7, #16]
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	b003      	add	sp, #12
 800cbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbee:	6812      	ldr	r2, [r2, #0]
 800cbf0:	3b04      	subs	r3, #4
 800cbf2:	2a00      	cmp	r2, #0
 800cbf4:	d1ce      	bne.n	800cb94 <quorem+0x9a>
 800cbf6:	3c01      	subs	r4, #1
 800cbf8:	e7c9      	b.n	800cb8e <quorem+0x94>
 800cbfa:	6812      	ldr	r2, [r2, #0]
 800cbfc:	3b04      	subs	r3, #4
 800cbfe:	2a00      	cmp	r2, #0
 800cc00:	d1f0      	bne.n	800cbe4 <quorem+0xea>
 800cc02:	3c01      	subs	r4, #1
 800cc04:	e7eb      	b.n	800cbde <quorem+0xe4>
 800cc06:	2000      	movs	r0, #0
 800cc08:	e7ee      	b.n	800cbe8 <quorem+0xee>
 800cc0a:	0000      	movs	r0, r0
 800cc0c:	0000      	movs	r0, r0
	...

0800cc10 <_dtoa_r>:
 800cc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc14:	ed2d 8b04 	vpush	{d8-d9}
 800cc18:	69c5      	ldr	r5, [r0, #28]
 800cc1a:	b093      	sub	sp, #76	; 0x4c
 800cc1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cc20:	ec57 6b10 	vmov	r6, r7, d0
 800cc24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cc28:	9107      	str	r1, [sp, #28]
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	920a      	str	r2, [sp, #40]	; 0x28
 800cc2e:	930d      	str	r3, [sp, #52]	; 0x34
 800cc30:	b975      	cbnz	r5, 800cc50 <_dtoa_r+0x40>
 800cc32:	2010      	movs	r0, #16
 800cc34:	f7ff fb7c 	bl	800c330 <malloc>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	61e0      	str	r0, [r4, #28]
 800cc3c:	b920      	cbnz	r0, 800cc48 <_dtoa_r+0x38>
 800cc3e:	4bae      	ldr	r3, [pc, #696]	; (800cef8 <_dtoa_r+0x2e8>)
 800cc40:	21ef      	movs	r1, #239	; 0xef
 800cc42:	48ae      	ldr	r0, [pc, #696]	; (800cefc <_dtoa_r+0x2ec>)
 800cc44:	f7ff f880 	bl	800bd48 <__assert_func>
 800cc48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cc4c:	6005      	str	r5, [r0, #0]
 800cc4e:	60c5      	str	r5, [r0, #12]
 800cc50:	69e3      	ldr	r3, [r4, #28]
 800cc52:	6819      	ldr	r1, [r3, #0]
 800cc54:	b151      	cbz	r1, 800cc6c <_dtoa_r+0x5c>
 800cc56:	685a      	ldr	r2, [r3, #4]
 800cc58:	604a      	str	r2, [r1, #4]
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	4093      	lsls	r3, r2
 800cc5e:	608b      	str	r3, [r1, #8]
 800cc60:	4620      	mov	r0, r4
 800cc62:	f001 f845 	bl	800dcf0 <_Bfree>
 800cc66:	69e3      	ldr	r3, [r4, #28]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	601a      	str	r2, [r3, #0]
 800cc6c:	1e3b      	subs	r3, r7, #0
 800cc6e:	bfbb      	ittet	lt
 800cc70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cc74:	9303      	strlt	r3, [sp, #12]
 800cc76:	2300      	movge	r3, #0
 800cc78:	2201      	movlt	r2, #1
 800cc7a:	bfac      	ite	ge
 800cc7c:	f8c8 3000 	strge.w	r3, [r8]
 800cc80:	f8c8 2000 	strlt.w	r2, [r8]
 800cc84:	4b9e      	ldr	r3, [pc, #632]	; (800cf00 <_dtoa_r+0x2f0>)
 800cc86:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cc8a:	ea33 0308 	bics.w	r3, r3, r8
 800cc8e:	d11b      	bne.n	800ccc8 <_dtoa_r+0xb8>
 800cc90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc92:	f242 730f 	movw	r3, #9999	; 0x270f
 800cc96:	6013      	str	r3, [r2, #0]
 800cc98:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800cc9c:	4333      	orrs	r3, r6
 800cc9e:	f000 8593 	beq.w	800d7c8 <_dtoa_r+0xbb8>
 800cca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cca4:	b963      	cbnz	r3, 800ccc0 <_dtoa_r+0xb0>
 800cca6:	4b97      	ldr	r3, [pc, #604]	; (800cf04 <_dtoa_r+0x2f4>)
 800cca8:	e027      	b.n	800ccfa <_dtoa_r+0xea>
 800ccaa:	4b97      	ldr	r3, [pc, #604]	; (800cf08 <_dtoa_r+0x2f8>)
 800ccac:	9300      	str	r3, [sp, #0]
 800ccae:	3308      	adds	r3, #8
 800ccb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ccb2:	6013      	str	r3, [r2, #0]
 800ccb4:	9800      	ldr	r0, [sp, #0]
 800ccb6:	b013      	add	sp, #76	; 0x4c
 800ccb8:	ecbd 8b04 	vpop	{d8-d9}
 800ccbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccc0:	4b90      	ldr	r3, [pc, #576]	; (800cf04 <_dtoa_r+0x2f4>)
 800ccc2:	9300      	str	r3, [sp, #0]
 800ccc4:	3303      	adds	r3, #3
 800ccc6:	e7f3      	b.n	800ccb0 <_dtoa_r+0xa0>
 800ccc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cccc:	2200      	movs	r2, #0
 800ccce:	ec51 0b17 	vmov	r0, r1, d7
 800ccd2:	eeb0 8a47 	vmov.f32	s16, s14
 800ccd6:	eef0 8a67 	vmov.f32	s17, s15
 800ccda:	2300      	movs	r3, #0
 800ccdc:	f7f3 fef4 	bl	8000ac8 <__aeabi_dcmpeq>
 800cce0:	4681      	mov	r9, r0
 800cce2:	b160      	cbz	r0, 800ccfe <_dtoa_r+0xee>
 800cce4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cce6:	2301      	movs	r3, #1
 800cce8:	6013      	str	r3, [r2, #0]
 800ccea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	f000 8568 	beq.w	800d7c2 <_dtoa_r+0xbb2>
 800ccf2:	4b86      	ldr	r3, [pc, #536]	; (800cf0c <_dtoa_r+0x2fc>)
 800ccf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ccf6:	6013      	str	r3, [r2, #0]
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	e7da      	b.n	800ccb4 <_dtoa_r+0xa4>
 800ccfe:	aa10      	add	r2, sp, #64	; 0x40
 800cd00:	a911      	add	r1, sp, #68	; 0x44
 800cd02:	4620      	mov	r0, r4
 800cd04:	eeb0 0a48 	vmov.f32	s0, s16
 800cd08:	eef0 0a68 	vmov.f32	s1, s17
 800cd0c:	f001 fad2 	bl	800e2b4 <__d2b>
 800cd10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cd14:	4682      	mov	sl, r0
 800cd16:	2d00      	cmp	r5, #0
 800cd18:	d07f      	beq.n	800ce1a <_dtoa_r+0x20a>
 800cd1a:	ee18 3a90 	vmov	r3, s17
 800cd1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800cd26:	ec51 0b18 	vmov	r0, r1, d8
 800cd2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cd2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cd32:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800cd36:	4619      	mov	r1, r3
 800cd38:	2200      	movs	r2, #0
 800cd3a:	4b75      	ldr	r3, [pc, #468]	; (800cf10 <_dtoa_r+0x300>)
 800cd3c:	f7f3 faa4 	bl	8000288 <__aeabi_dsub>
 800cd40:	a367      	add	r3, pc, #412	; (adr r3, 800cee0 <_dtoa_r+0x2d0>)
 800cd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd46:	f7f3 fc57 	bl	80005f8 <__aeabi_dmul>
 800cd4a:	a367      	add	r3, pc, #412	; (adr r3, 800cee8 <_dtoa_r+0x2d8>)
 800cd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd50:	f7f3 fa9c 	bl	800028c <__adddf3>
 800cd54:	4606      	mov	r6, r0
 800cd56:	4628      	mov	r0, r5
 800cd58:	460f      	mov	r7, r1
 800cd5a:	f7f3 fbe3 	bl	8000524 <__aeabi_i2d>
 800cd5e:	a364      	add	r3, pc, #400	; (adr r3, 800cef0 <_dtoa_r+0x2e0>)
 800cd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd64:	f7f3 fc48 	bl	80005f8 <__aeabi_dmul>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	4630      	mov	r0, r6
 800cd6e:	4639      	mov	r1, r7
 800cd70:	f7f3 fa8c 	bl	800028c <__adddf3>
 800cd74:	4606      	mov	r6, r0
 800cd76:	460f      	mov	r7, r1
 800cd78:	f7f3 feee 	bl	8000b58 <__aeabi_d2iz>
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	4683      	mov	fp, r0
 800cd80:	2300      	movs	r3, #0
 800cd82:	4630      	mov	r0, r6
 800cd84:	4639      	mov	r1, r7
 800cd86:	f7f3 fea9 	bl	8000adc <__aeabi_dcmplt>
 800cd8a:	b148      	cbz	r0, 800cda0 <_dtoa_r+0x190>
 800cd8c:	4658      	mov	r0, fp
 800cd8e:	f7f3 fbc9 	bl	8000524 <__aeabi_i2d>
 800cd92:	4632      	mov	r2, r6
 800cd94:	463b      	mov	r3, r7
 800cd96:	f7f3 fe97 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd9a:	b908      	cbnz	r0, 800cda0 <_dtoa_r+0x190>
 800cd9c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cda0:	f1bb 0f16 	cmp.w	fp, #22
 800cda4:	d857      	bhi.n	800ce56 <_dtoa_r+0x246>
 800cda6:	4b5b      	ldr	r3, [pc, #364]	; (800cf14 <_dtoa_r+0x304>)
 800cda8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb0:	ec51 0b18 	vmov	r0, r1, d8
 800cdb4:	f7f3 fe92 	bl	8000adc <__aeabi_dcmplt>
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	d04e      	beq.n	800ce5a <_dtoa_r+0x24a>
 800cdbc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	930c      	str	r3, [sp, #48]	; 0x30
 800cdc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cdc6:	1b5b      	subs	r3, r3, r5
 800cdc8:	1e5a      	subs	r2, r3, #1
 800cdca:	bf45      	ittet	mi
 800cdcc:	f1c3 0301 	rsbmi	r3, r3, #1
 800cdd0:	9305      	strmi	r3, [sp, #20]
 800cdd2:	2300      	movpl	r3, #0
 800cdd4:	2300      	movmi	r3, #0
 800cdd6:	9206      	str	r2, [sp, #24]
 800cdd8:	bf54      	ite	pl
 800cdda:	9305      	strpl	r3, [sp, #20]
 800cddc:	9306      	strmi	r3, [sp, #24]
 800cdde:	f1bb 0f00 	cmp.w	fp, #0
 800cde2:	db3c      	blt.n	800ce5e <_dtoa_r+0x24e>
 800cde4:	9b06      	ldr	r3, [sp, #24]
 800cde6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800cdea:	445b      	add	r3, fp
 800cdec:	9306      	str	r3, [sp, #24]
 800cdee:	2300      	movs	r3, #0
 800cdf0:	9308      	str	r3, [sp, #32]
 800cdf2:	9b07      	ldr	r3, [sp, #28]
 800cdf4:	2b09      	cmp	r3, #9
 800cdf6:	d868      	bhi.n	800ceca <_dtoa_r+0x2ba>
 800cdf8:	2b05      	cmp	r3, #5
 800cdfa:	bfc4      	itt	gt
 800cdfc:	3b04      	subgt	r3, #4
 800cdfe:	9307      	strgt	r3, [sp, #28]
 800ce00:	9b07      	ldr	r3, [sp, #28]
 800ce02:	f1a3 0302 	sub.w	r3, r3, #2
 800ce06:	bfcc      	ite	gt
 800ce08:	2500      	movgt	r5, #0
 800ce0a:	2501      	movle	r5, #1
 800ce0c:	2b03      	cmp	r3, #3
 800ce0e:	f200 8085 	bhi.w	800cf1c <_dtoa_r+0x30c>
 800ce12:	e8df f003 	tbb	[pc, r3]
 800ce16:	3b2e      	.short	0x3b2e
 800ce18:	5839      	.short	0x5839
 800ce1a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ce1e:	441d      	add	r5, r3
 800ce20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ce24:	2b20      	cmp	r3, #32
 800ce26:	bfc1      	itttt	gt
 800ce28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ce2c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ce30:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ce34:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ce38:	bfd6      	itet	le
 800ce3a:	f1c3 0320 	rsble	r3, r3, #32
 800ce3e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ce42:	fa06 f003 	lslle.w	r0, r6, r3
 800ce46:	f7f3 fb5d 	bl	8000504 <__aeabi_ui2d>
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ce50:	3d01      	subs	r5, #1
 800ce52:	920e      	str	r2, [sp, #56]	; 0x38
 800ce54:	e76f      	b.n	800cd36 <_dtoa_r+0x126>
 800ce56:	2301      	movs	r3, #1
 800ce58:	e7b3      	b.n	800cdc2 <_dtoa_r+0x1b2>
 800ce5a:	900c      	str	r0, [sp, #48]	; 0x30
 800ce5c:	e7b2      	b.n	800cdc4 <_dtoa_r+0x1b4>
 800ce5e:	9b05      	ldr	r3, [sp, #20]
 800ce60:	eba3 030b 	sub.w	r3, r3, fp
 800ce64:	9305      	str	r3, [sp, #20]
 800ce66:	f1cb 0300 	rsb	r3, fp, #0
 800ce6a:	9308      	str	r3, [sp, #32]
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce70:	e7bf      	b.n	800cdf2 <_dtoa_r+0x1e2>
 800ce72:	2300      	movs	r3, #0
 800ce74:	9309      	str	r3, [sp, #36]	; 0x24
 800ce76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	dc52      	bgt.n	800cf22 <_dtoa_r+0x312>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	9301      	str	r3, [sp, #4]
 800ce80:	9304      	str	r3, [sp, #16]
 800ce82:	461a      	mov	r2, r3
 800ce84:	920a      	str	r2, [sp, #40]	; 0x28
 800ce86:	e00b      	b.n	800cea0 <_dtoa_r+0x290>
 800ce88:	2301      	movs	r3, #1
 800ce8a:	e7f3      	b.n	800ce74 <_dtoa_r+0x264>
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce92:	445b      	add	r3, fp
 800ce94:	9301      	str	r3, [sp, #4]
 800ce96:	3301      	adds	r3, #1
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	9304      	str	r3, [sp, #16]
 800ce9c:	bfb8      	it	lt
 800ce9e:	2301      	movlt	r3, #1
 800cea0:	69e0      	ldr	r0, [r4, #28]
 800cea2:	2100      	movs	r1, #0
 800cea4:	2204      	movs	r2, #4
 800cea6:	f102 0614 	add.w	r6, r2, #20
 800ceaa:	429e      	cmp	r6, r3
 800ceac:	d93d      	bls.n	800cf2a <_dtoa_r+0x31a>
 800ceae:	6041      	str	r1, [r0, #4]
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	f000 fedd 	bl	800dc70 <_Balloc>
 800ceb6:	9000      	str	r0, [sp, #0]
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	d139      	bne.n	800cf30 <_dtoa_r+0x320>
 800cebc:	4b16      	ldr	r3, [pc, #88]	; (800cf18 <_dtoa_r+0x308>)
 800cebe:	4602      	mov	r2, r0
 800cec0:	f240 11af 	movw	r1, #431	; 0x1af
 800cec4:	e6bd      	b.n	800cc42 <_dtoa_r+0x32>
 800cec6:	2301      	movs	r3, #1
 800cec8:	e7e1      	b.n	800ce8e <_dtoa_r+0x27e>
 800ceca:	2501      	movs	r5, #1
 800cecc:	2300      	movs	r3, #0
 800cece:	9307      	str	r3, [sp, #28]
 800ced0:	9509      	str	r5, [sp, #36]	; 0x24
 800ced2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ced6:	9301      	str	r3, [sp, #4]
 800ced8:	9304      	str	r3, [sp, #16]
 800ceda:	2200      	movs	r2, #0
 800cedc:	2312      	movs	r3, #18
 800cede:	e7d1      	b.n	800ce84 <_dtoa_r+0x274>
 800cee0:	636f4361 	.word	0x636f4361
 800cee4:	3fd287a7 	.word	0x3fd287a7
 800cee8:	8b60c8b3 	.word	0x8b60c8b3
 800ceec:	3fc68a28 	.word	0x3fc68a28
 800cef0:	509f79fb 	.word	0x509f79fb
 800cef4:	3fd34413 	.word	0x3fd34413
 800cef8:	0800edd4 	.word	0x0800edd4
 800cefc:	0800edeb 	.word	0x0800edeb
 800cf00:	7ff00000 	.word	0x7ff00000
 800cf04:	0800edd0 	.word	0x0800edd0
 800cf08:	0800edc7 	.word	0x0800edc7
 800cf0c:	0800eda4 	.word	0x0800eda4
 800cf10:	3ff80000 	.word	0x3ff80000
 800cf14:	0800eee8 	.word	0x0800eee8
 800cf18:	0800ee43 	.word	0x0800ee43
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	9309      	str	r3, [sp, #36]	; 0x24
 800cf20:	e7d7      	b.n	800ced2 <_dtoa_r+0x2c2>
 800cf22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf24:	9301      	str	r3, [sp, #4]
 800cf26:	9304      	str	r3, [sp, #16]
 800cf28:	e7ba      	b.n	800cea0 <_dtoa_r+0x290>
 800cf2a:	3101      	adds	r1, #1
 800cf2c:	0052      	lsls	r2, r2, #1
 800cf2e:	e7ba      	b.n	800cea6 <_dtoa_r+0x296>
 800cf30:	69e3      	ldr	r3, [r4, #28]
 800cf32:	9a00      	ldr	r2, [sp, #0]
 800cf34:	601a      	str	r2, [r3, #0]
 800cf36:	9b04      	ldr	r3, [sp, #16]
 800cf38:	2b0e      	cmp	r3, #14
 800cf3a:	f200 80a8 	bhi.w	800d08e <_dtoa_r+0x47e>
 800cf3e:	2d00      	cmp	r5, #0
 800cf40:	f000 80a5 	beq.w	800d08e <_dtoa_r+0x47e>
 800cf44:	f1bb 0f00 	cmp.w	fp, #0
 800cf48:	dd38      	ble.n	800cfbc <_dtoa_r+0x3ac>
 800cf4a:	4bc0      	ldr	r3, [pc, #768]	; (800d24c <_dtoa_r+0x63c>)
 800cf4c:	f00b 020f 	and.w	r2, fp, #15
 800cf50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cf58:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cf5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800cf60:	d019      	beq.n	800cf96 <_dtoa_r+0x386>
 800cf62:	4bbb      	ldr	r3, [pc, #748]	; (800d250 <_dtoa_r+0x640>)
 800cf64:	ec51 0b18 	vmov	r0, r1, d8
 800cf68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf6c:	f7f3 fc6e 	bl	800084c <__aeabi_ddiv>
 800cf70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf74:	f008 080f 	and.w	r8, r8, #15
 800cf78:	2503      	movs	r5, #3
 800cf7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d250 <_dtoa_r+0x640>
 800cf7e:	f1b8 0f00 	cmp.w	r8, #0
 800cf82:	d10a      	bne.n	800cf9a <_dtoa_r+0x38a>
 800cf84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf88:	4632      	mov	r2, r6
 800cf8a:	463b      	mov	r3, r7
 800cf8c:	f7f3 fc5e 	bl	800084c <__aeabi_ddiv>
 800cf90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf94:	e02b      	b.n	800cfee <_dtoa_r+0x3de>
 800cf96:	2502      	movs	r5, #2
 800cf98:	e7ef      	b.n	800cf7a <_dtoa_r+0x36a>
 800cf9a:	f018 0f01 	tst.w	r8, #1
 800cf9e:	d008      	beq.n	800cfb2 <_dtoa_r+0x3a2>
 800cfa0:	4630      	mov	r0, r6
 800cfa2:	4639      	mov	r1, r7
 800cfa4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cfa8:	f7f3 fb26 	bl	80005f8 <__aeabi_dmul>
 800cfac:	3501      	adds	r5, #1
 800cfae:	4606      	mov	r6, r0
 800cfb0:	460f      	mov	r7, r1
 800cfb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cfb6:	f109 0908 	add.w	r9, r9, #8
 800cfba:	e7e0      	b.n	800cf7e <_dtoa_r+0x36e>
 800cfbc:	f000 809f 	beq.w	800d0fe <_dtoa_r+0x4ee>
 800cfc0:	f1cb 0600 	rsb	r6, fp, #0
 800cfc4:	4ba1      	ldr	r3, [pc, #644]	; (800d24c <_dtoa_r+0x63c>)
 800cfc6:	4fa2      	ldr	r7, [pc, #648]	; (800d250 <_dtoa_r+0x640>)
 800cfc8:	f006 020f 	and.w	r2, r6, #15
 800cfcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd4:	ec51 0b18 	vmov	r0, r1, d8
 800cfd8:	f7f3 fb0e 	bl	80005f8 <__aeabi_dmul>
 800cfdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfe0:	1136      	asrs	r6, r6, #4
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	2502      	movs	r5, #2
 800cfe6:	2e00      	cmp	r6, #0
 800cfe8:	d17e      	bne.n	800d0e8 <_dtoa_r+0x4d8>
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d1d0      	bne.n	800cf90 <_dtoa_r+0x380>
 800cfee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cff0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	f000 8084 	beq.w	800d102 <_dtoa_r+0x4f2>
 800cffa:	4b96      	ldr	r3, [pc, #600]	; (800d254 <_dtoa_r+0x644>)
 800cffc:	2200      	movs	r2, #0
 800cffe:	4640      	mov	r0, r8
 800d000:	4649      	mov	r1, r9
 800d002:	f7f3 fd6b 	bl	8000adc <__aeabi_dcmplt>
 800d006:	2800      	cmp	r0, #0
 800d008:	d07b      	beq.n	800d102 <_dtoa_r+0x4f2>
 800d00a:	9b04      	ldr	r3, [sp, #16]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d078      	beq.n	800d102 <_dtoa_r+0x4f2>
 800d010:	9b01      	ldr	r3, [sp, #4]
 800d012:	2b00      	cmp	r3, #0
 800d014:	dd39      	ble.n	800d08a <_dtoa_r+0x47a>
 800d016:	4b90      	ldr	r3, [pc, #576]	; (800d258 <_dtoa_r+0x648>)
 800d018:	2200      	movs	r2, #0
 800d01a:	4640      	mov	r0, r8
 800d01c:	4649      	mov	r1, r9
 800d01e:	f7f3 faeb 	bl	80005f8 <__aeabi_dmul>
 800d022:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d026:	9e01      	ldr	r6, [sp, #4]
 800d028:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800d02c:	3501      	adds	r5, #1
 800d02e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d032:	4628      	mov	r0, r5
 800d034:	f7f3 fa76 	bl	8000524 <__aeabi_i2d>
 800d038:	4642      	mov	r2, r8
 800d03a:	464b      	mov	r3, r9
 800d03c:	f7f3 fadc 	bl	80005f8 <__aeabi_dmul>
 800d040:	4b86      	ldr	r3, [pc, #536]	; (800d25c <_dtoa_r+0x64c>)
 800d042:	2200      	movs	r2, #0
 800d044:	f7f3 f922 	bl	800028c <__adddf3>
 800d048:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d04c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d050:	9303      	str	r3, [sp, #12]
 800d052:	2e00      	cmp	r6, #0
 800d054:	d158      	bne.n	800d108 <_dtoa_r+0x4f8>
 800d056:	4b82      	ldr	r3, [pc, #520]	; (800d260 <_dtoa_r+0x650>)
 800d058:	2200      	movs	r2, #0
 800d05a:	4640      	mov	r0, r8
 800d05c:	4649      	mov	r1, r9
 800d05e:	f7f3 f913 	bl	8000288 <__aeabi_dsub>
 800d062:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d066:	4680      	mov	r8, r0
 800d068:	4689      	mov	r9, r1
 800d06a:	f7f3 fd55 	bl	8000b18 <__aeabi_dcmpgt>
 800d06e:	2800      	cmp	r0, #0
 800d070:	f040 8296 	bne.w	800d5a0 <_dtoa_r+0x990>
 800d074:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d078:	4640      	mov	r0, r8
 800d07a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d07e:	4649      	mov	r1, r9
 800d080:	f7f3 fd2c 	bl	8000adc <__aeabi_dcmplt>
 800d084:	2800      	cmp	r0, #0
 800d086:	f040 8289 	bne.w	800d59c <_dtoa_r+0x98c>
 800d08a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d08e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d090:	2b00      	cmp	r3, #0
 800d092:	f2c0 814e 	blt.w	800d332 <_dtoa_r+0x722>
 800d096:	f1bb 0f0e 	cmp.w	fp, #14
 800d09a:	f300 814a 	bgt.w	800d332 <_dtoa_r+0x722>
 800d09e:	4b6b      	ldr	r3, [pc, #428]	; (800d24c <_dtoa_r+0x63c>)
 800d0a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d0a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d0a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	f280 80dc 	bge.w	800d268 <_dtoa_r+0x658>
 800d0b0:	9b04      	ldr	r3, [sp, #16]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	f300 80d8 	bgt.w	800d268 <_dtoa_r+0x658>
 800d0b8:	f040 826f 	bne.w	800d59a <_dtoa_r+0x98a>
 800d0bc:	4b68      	ldr	r3, [pc, #416]	; (800d260 <_dtoa_r+0x650>)
 800d0be:	2200      	movs	r2, #0
 800d0c0:	4640      	mov	r0, r8
 800d0c2:	4649      	mov	r1, r9
 800d0c4:	f7f3 fa98 	bl	80005f8 <__aeabi_dmul>
 800d0c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0cc:	f7f3 fd1a 	bl	8000b04 <__aeabi_dcmpge>
 800d0d0:	9e04      	ldr	r6, [sp, #16]
 800d0d2:	4637      	mov	r7, r6
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	f040 8245 	bne.w	800d564 <_dtoa_r+0x954>
 800d0da:	9d00      	ldr	r5, [sp, #0]
 800d0dc:	2331      	movs	r3, #49	; 0x31
 800d0de:	f805 3b01 	strb.w	r3, [r5], #1
 800d0e2:	f10b 0b01 	add.w	fp, fp, #1
 800d0e6:	e241      	b.n	800d56c <_dtoa_r+0x95c>
 800d0e8:	07f2      	lsls	r2, r6, #31
 800d0ea:	d505      	bpl.n	800d0f8 <_dtoa_r+0x4e8>
 800d0ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0f0:	f7f3 fa82 	bl	80005f8 <__aeabi_dmul>
 800d0f4:	3501      	adds	r5, #1
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	1076      	asrs	r6, r6, #1
 800d0fa:	3708      	adds	r7, #8
 800d0fc:	e773      	b.n	800cfe6 <_dtoa_r+0x3d6>
 800d0fe:	2502      	movs	r5, #2
 800d100:	e775      	b.n	800cfee <_dtoa_r+0x3de>
 800d102:	9e04      	ldr	r6, [sp, #16]
 800d104:	465f      	mov	r7, fp
 800d106:	e792      	b.n	800d02e <_dtoa_r+0x41e>
 800d108:	9900      	ldr	r1, [sp, #0]
 800d10a:	4b50      	ldr	r3, [pc, #320]	; (800d24c <_dtoa_r+0x63c>)
 800d10c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d110:	4431      	add	r1, r6
 800d112:	9102      	str	r1, [sp, #8]
 800d114:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d116:	eeb0 9a47 	vmov.f32	s18, s14
 800d11a:	eef0 9a67 	vmov.f32	s19, s15
 800d11e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d122:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d126:	2900      	cmp	r1, #0
 800d128:	d044      	beq.n	800d1b4 <_dtoa_r+0x5a4>
 800d12a:	494e      	ldr	r1, [pc, #312]	; (800d264 <_dtoa_r+0x654>)
 800d12c:	2000      	movs	r0, #0
 800d12e:	f7f3 fb8d 	bl	800084c <__aeabi_ddiv>
 800d132:	ec53 2b19 	vmov	r2, r3, d9
 800d136:	f7f3 f8a7 	bl	8000288 <__aeabi_dsub>
 800d13a:	9d00      	ldr	r5, [sp, #0]
 800d13c:	ec41 0b19 	vmov	d9, r0, r1
 800d140:	4649      	mov	r1, r9
 800d142:	4640      	mov	r0, r8
 800d144:	f7f3 fd08 	bl	8000b58 <__aeabi_d2iz>
 800d148:	4606      	mov	r6, r0
 800d14a:	f7f3 f9eb 	bl	8000524 <__aeabi_i2d>
 800d14e:	4602      	mov	r2, r0
 800d150:	460b      	mov	r3, r1
 800d152:	4640      	mov	r0, r8
 800d154:	4649      	mov	r1, r9
 800d156:	f7f3 f897 	bl	8000288 <__aeabi_dsub>
 800d15a:	3630      	adds	r6, #48	; 0x30
 800d15c:	f805 6b01 	strb.w	r6, [r5], #1
 800d160:	ec53 2b19 	vmov	r2, r3, d9
 800d164:	4680      	mov	r8, r0
 800d166:	4689      	mov	r9, r1
 800d168:	f7f3 fcb8 	bl	8000adc <__aeabi_dcmplt>
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d164      	bne.n	800d23a <_dtoa_r+0x62a>
 800d170:	4642      	mov	r2, r8
 800d172:	464b      	mov	r3, r9
 800d174:	4937      	ldr	r1, [pc, #220]	; (800d254 <_dtoa_r+0x644>)
 800d176:	2000      	movs	r0, #0
 800d178:	f7f3 f886 	bl	8000288 <__aeabi_dsub>
 800d17c:	ec53 2b19 	vmov	r2, r3, d9
 800d180:	f7f3 fcac 	bl	8000adc <__aeabi_dcmplt>
 800d184:	2800      	cmp	r0, #0
 800d186:	f040 80b6 	bne.w	800d2f6 <_dtoa_r+0x6e6>
 800d18a:	9b02      	ldr	r3, [sp, #8]
 800d18c:	429d      	cmp	r5, r3
 800d18e:	f43f af7c 	beq.w	800d08a <_dtoa_r+0x47a>
 800d192:	4b31      	ldr	r3, [pc, #196]	; (800d258 <_dtoa_r+0x648>)
 800d194:	ec51 0b19 	vmov	r0, r1, d9
 800d198:	2200      	movs	r2, #0
 800d19a:	f7f3 fa2d 	bl	80005f8 <__aeabi_dmul>
 800d19e:	4b2e      	ldr	r3, [pc, #184]	; (800d258 <_dtoa_r+0x648>)
 800d1a0:	ec41 0b19 	vmov	d9, r0, r1
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	4640      	mov	r0, r8
 800d1a8:	4649      	mov	r1, r9
 800d1aa:	f7f3 fa25 	bl	80005f8 <__aeabi_dmul>
 800d1ae:	4680      	mov	r8, r0
 800d1b0:	4689      	mov	r9, r1
 800d1b2:	e7c5      	b.n	800d140 <_dtoa_r+0x530>
 800d1b4:	ec51 0b17 	vmov	r0, r1, d7
 800d1b8:	f7f3 fa1e 	bl	80005f8 <__aeabi_dmul>
 800d1bc:	9b02      	ldr	r3, [sp, #8]
 800d1be:	9d00      	ldr	r5, [sp, #0]
 800d1c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1c2:	ec41 0b19 	vmov	d9, r0, r1
 800d1c6:	4649      	mov	r1, r9
 800d1c8:	4640      	mov	r0, r8
 800d1ca:	f7f3 fcc5 	bl	8000b58 <__aeabi_d2iz>
 800d1ce:	4606      	mov	r6, r0
 800d1d0:	f7f3 f9a8 	bl	8000524 <__aeabi_i2d>
 800d1d4:	3630      	adds	r6, #48	; 0x30
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	460b      	mov	r3, r1
 800d1da:	4640      	mov	r0, r8
 800d1dc:	4649      	mov	r1, r9
 800d1de:	f7f3 f853 	bl	8000288 <__aeabi_dsub>
 800d1e2:	f805 6b01 	strb.w	r6, [r5], #1
 800d1e6:	9b02      	ldr	r3, [sp, #8]
 800d1e8:	429d      	cmp	r5, r3
 800d1ea:	4680      	mov	r8, r0
 800d1ec:	4689      	mov	r9, r1
 800d1ee:	f04f 0200 	mov.w	r2, #0
 800d1f2:	d124      	bne.n	800d23e <_dtoa_r+0x62e>
 800d1f4:	4b1b      	ldr	r3, [pc, #108]	; (800d264 <_dtoa_r+0x654>)
 800d1f6:	ec51 0b19 	vmov	r0, r1, d9
 800d1fa:	f7f3 f847 	bl	800028c <__adddf3>
 800d1fe:	4602      	mov	r2, r0
 800d200:	460b      	mov	r3, r1
 800d202:	4640      	mov	r0, r8
 800d204:	4649      	mov	r1, r9
 800d206:	f7f3 fc87 	bl	8000b18 <__aeabi_dcmpgt>
 800d20a:	2800      	cmp	r0, #0
 800d20c:	d173      	bne.n	800d2f6 <_dtoa_r+0x6e6>
 800d20e:	ec53 2b19 	vmov	r2, r3, d9
 800d212:	4914      	ldr	r1, [pc, #80]	; (800d264 <_dtoa_r+0x654>)
 800d214:	2000      	movs	r0, #0
 800d216:	f7f3 f837 	bl	8000288 <__aeabi_dsub>
 800d21a:	4602      	mov	r2, r0
 800d21c:	460b      	mov	r3, r1
 800d21e:	4640      	mov	r0, r8
 800d220:	4649      	mov	r1, r9
 800d222:	f7f3 fc5b 	bl	8000adc <__aeabi_dcmplt>
 800d226:	2800      	cmp	r0, #0
 800d228:	f43f af2f 	beq.w	800d08a <_dtoa_r+0x47a>
 800d22c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d22e:	1e6b      	subs	r3, r5, #1
 800d230:	930f      	str	r3, [sp, #60]	; 0x3c
 800d232:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d236:	2b30      	cmp	r3, #48	; 0x30
 800d238:	d0f8      	beq.n	800d22c <_dtoa_r+0x61c>
 800d23a:	46bb      	mov	fp, r7
 800d23c:	e04a      	b.n	800d2d4 <_dtoa_r+0x6c4>
 800d23e:	4b06      	ldr	r3, [pc, #24]	; (800d258 <_dtoa_r+0x648>)
 800d240:	f7f3 f9da 	bl	80005f8 <__aeabi_dmul>
 800d244:	4680      	mov	r8, r0
 800d246:	4689      	mov	r9, r1
 800d248:	e7bd      	b.n	800d1c6 <_dtoa_r+0x5b6>
 800d24a:	bf00      	nop
 800d24c:	0800eee8 	.word	0x0800eee8
 800d250:	0800eec0 	.word	0x0800eec0
 800d254:	3ff00000 	.word	0x3ff00000
 800d258:	40240000 	.word	0x40240000
 800d25c:	401c0000 	.word	0x401c0000
 800d260:	40140000 	.word	0x40140000
 800d264:	3fe00000 	.word	0x3fe00000
 800d268:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d26c:	9d00      	ldr	r5, [sp, #0]
 800d26e:	4642      	mov	r2, r8
 800d270:	464b      	mov	r3, r9
 800d272:	4630      	mov	r0, r6
 800d274:	4639      	mov	r1, r7
 800d276:	f7f3 fae9 	bl	800084c <__aeabi_ddiv>
 800d27a:	f7f3 fc6d 	bl	8000b58 <__aeabi_d2iz>
 800d27e:	9001      	str	r0, [sp, #4]
 800d280:	f7f3 f950 	bl	8000524 <__aeabi_i2d>
 800d284:	4642      	mov	r2, r8
 800d286:	464b      	mov	r3, r9
 800d288:	f7f3 f9b6 	bl	80005f8 <__aeabi_dmul>
 800d28c:	4602      	mov	r2, r0
 800d28e:	460b      	mov	r3, r1
 800d290:	4630      	mov	r0, r6
 800d292:	4639      	mov	r1, r7
 800d294:	f7f2 fff8 	bl	8000288 <__aeabi_dsub>
 800d298:	9e01      	ldr	r6, [sp, #4]
 800d29a:	9f04      	ldr	r7, [sp, #16]
 800d29c:	3630      	adds	r6, #48	; 0x30
 800d29e:	f805 6b01 	strb.w	r6, [r5], #1
 800d2a2:	9e00      	ldr	r6, [sp, #0]
 800d2a4:	1bae      	subs	r6, r5, r6
 800d2a6:	42b7      	cmp	r7, r6
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	d134      	bne.n	800d318 <_dtoa_r+0x708>
 800d2ae:	f7f2 ffed 	bl	800028c <__adddf3>
 800d2b2:	4642      	mov	r2, r8
 800d2b4:	464b      	mov	r3, r9
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	460f      	mov	r7, r1
 800d2ba:	f7f3 fc2d 	bl	8000b18 <__aeabi_dcmpgt>
 800d2be:	b9c8      	cbnz	r0, 800d2f4 <_dtoa_r+0x6e4>
 800d2c0:	4642      	mov	r2, r8
 800d2c2:	464b      	mov	r3, r9
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	4639      	mov	r1, r7
 800d2c8:	f7f3 fbfe 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2cc:	b110      	cbz	r0, 800d2d4 <_dtoa_r+0x6c4>
 800d2ce:	9b01      	ldr	r3, [sp, #4]
 800d2d0:	07db      	lsls	r3, r3, #31
 800d2d2:	d40f      	bmi.n	800d2f4 <_dtoa_r+0x6e4>
 800d2d4:	4651      	mov	r1, sl
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	f000 fd0a 	bl	800dcf0 <_Bfree>
 800d2dc:	2300      	movs	r3, #0
 800d2de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d2e0:	702b      	strb	r3, [r5, #0]
 800d2e2:	f10b 0301 	add.w	r3, fp, #1
 800d2e6:	6013      	str	r3, [r2, #0]
 800d2e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	f43f ace2 	beq.w	800ccb4 <_dtoa_r+0xa4>
 800d2f0:	601d      	str	r5, [r3, #0]
 800d2f2:	e4df      	b.n	800ccb4 <_dtoa_r+0xa4>
 800d2f4:	465f      	mov	r7, fp
 800d2f6:	462b      	mov	r3, r5
 800d2f8:	461d      	mov	r5, r3
 800d2fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2fe:	2a39      	cmp	r2, #57	; 0x39
 800d300:	d106      	bne.n	800d310 <_dtoa_r+0x700>
 800d302:	9a00      	ldr	r2, [sp, #0]
 800d304:	429a      	cmp	r2, r3
 800d306:	d1f7      	bne.n	800d2f8 <_dtoa_r+0x6e8>
 800d308:	9900      	ldr	r1, [sp, #0]
 800d30a:	2230      	movs	r2, #48	; 0x30
 800d30c:	3701      	adds	r7, #1
 800d30e:	700a      	strb	r2, [r1, #0]
 800d310:	781a      	ldrb	r2, [r3, #0]
 800d312:	3201      	adds	r2, #1
 800d314:	701a      	strb	r2, [r3, #0]
 800d316:	e790      	b.n	800d23a <_dtoa_r+0x62a>
 800d318:	4ba3      	ldr	r3, [pc, #652]	; (800d5a8 <_dtoa_r+0x998>)
 800d31a:	2200      	movs	r2, #0
 800d31c:	f7f3 f96c 	bl	80005f8 <__aeabi_dmul>
 800d320:	2200      	movs	r2, #0
 800d322:	2300      	movs	r3, #0
 800d324:	4606      	mov	r6, r0
 800d326:	460f      	mov	r7, r1
 800d328:	f7f3 fbce 	bl	8000ac8 <__aeabi_dcmpeq>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	d09e      	beq.n	800d26e <_dtoa_r+0x65e>
 800d330:	e7d0      	b.n	800d2d4 <_dtoa_r+0x6c4>
 800d332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d334:	2a00      	cmp	r2, #0
 800d336:	f000 80ca 	beq.w	800d4ce <_dtoa_r+0x8be>
 800d33a:	9a07      	ldr	r2, [sp, #28]
 800d33c:	2a01      	cmp	r2, #1
 800d33e:	f300 80ad 	bgt.w	800d49c <_dtoa_r+0x88c>
 800d342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d344:	2a00      	cmp	r2, #0
 800d346:	f000 80a5 	beq.w	800d494 <_dtoa_r+0x884>
 800d34a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d34e:	9e08      	ldr	r6, [sp, #32]
 800d350:	9d05      	ldr	r5, [sp, #20]
 800d352:	9a05      	ldr	r2, [sp, #20]
 800d354:	441a      	add	r2, r3
 800d356:	9205      	str	r2, [sp, #20]
 800d358:	9a06      	ldr	r2, [sp, #24]
 800d35a:	2101      	movs	r1, #1
 800d35c:	441a      	add	r2, r3
 800d35e:	4620      	mov	r0, r4
 800d360:	9206      	str	r2, [sp, #24]
 800d362:	f000 fd7b 	bl	800de5c <__i2b>
 800d366:	4607      	mov	r7, r0
 800d368:	b165      	cbz	r5, 800d384 <_dtoa_r+0x774>
 800d36a:	9b06      	ldr	r3, [sp, #24]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	dd09      	ble.n	800d384 <_dtoa_r+0x774>
 800d370:	42ab      	cmp	r3, r5
 800d372:	9a05      	ldr	r2, [sp, #20]
 800d374:	bfa8      	it	ge
 800d376:	462b      	movge	r3, r5
 800d378:	1ad2      	subs	r2, r2, r3
 800d37a:	9205      	str	r2, [sp, #20]
 800d37c:	9a06      	ldr	r2, [sp, #24]
 800d37e:	1aed      	subs	r5, r5, r3
 800d380:	1ad3      	subs	r3, r2, r3
 800d382:	9306      	str	r3, [sp, #24]
 800d384:	9b08      	ldr	r3, [sp, #32]
 800d386:	b1f3      	cbz	r3, 800d3c6 <_dtoa_r+0x7b6>
 800d388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f000 80a3 	beq.w	800d4d6 <_dtoa_r+0x8c6>
 800d390:	2e00      	cmp	r6, #0
 800d392:	dd10      	ble.n	800d3b6 <_dtoa_r+0x7a6>
 800d394:	4639      	mov	r1, r7
 800d396:	4632      	mov	r2, r6
 800d398:	4620      	mov	r0, r4
 800d39a:	f000 fe1f 	bl	800dfdc <__pow5mult>
 800d39e:	4652      	mov	r2, sl
 800d3a0:	4601      	mov	r1, r0
 800d3a2:	4607      	mov	r7, r0
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f000 fd6f 	bl	800de88 <__multiply>
 800d3aa:	4651      	mov	r1, sl
 800d3ac:	4680      	mov	r8, r0
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	f000 fc9e 	bl	800dcf0 <_Bfree>
 800d3b4:	46c2      	mov	sl, r8
 800d3b6:	9b08      	ldr	r3, [sp, #32]
 800d3b8:	1b9a      	subs	r2, r3, r6
 800d3ba:	d004      	beq.n	800d3c6 <_dtoa_r+0x7b6>
 800d3bc:	4651      	mov	r1, sl
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f000 fe0c 	bl	800dfdc <__pow5mult>
 800d3c4:	4682      	mov	sl, r0
 800d3c6:	2101      	movs	r1, #1
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f000 fd47 	bl	800de5c <__i2b>
 800d3ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	4606      	mov	r6, r0
 800d3d4:	f340 8081 	ble.w	800d4da <_dtoa_r+0x8ca>
 800d3d8:	461a      	mov	r2, r3
 800d3da:	4601      	mov	r1, r0
 800d3dc:	4620      	mov	r0, r4
 800d3de:	f000 fdfd 	bl	800dfdc <__pow5mult>
 800d3e2:	9b07      	ldr	r3, [sp, #28]
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	dd7a      	ble.n	800d4e0 <_dtoa_r+0x8d0>
 800d3ea:	f04f 0800 	mov.w	r8, #0
 800d3ee:	6933      	ldr	r3, [r6, #16]
 800d3f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d3f4:	6918      	ldr	r0, [r3, #16]
 800d3f6:	f000 fce3 	bl	800ddc0 <__hi0bits>
 800d3fa:	f1c0 0020 	rsb	r0, r0, #32
 800d3fe:	9b06      	ldr	r3, [sp, #24]
 800d400:	4418      	add	r0, r3
 800d402:	f010 001f 	ands.w	r0, r0, #31
 800d406:	f000 8094 	beq.w	800d532 <_dtoa_r+0x922>
 800d40a:	f1c0 0320 	rsb	r3, r0, #32
 800d40e:	2b04      	cmp	r3, #4
 800d410:	f340 8085 	ble.w	800d51e <_dtoa_r+0x90e>
 800d414:	9b05      	ldr	r3, [sp, #20]
 800d416:	f1c0 001c 	rsb	r0, r0, #28
 800d41a:	4403      	add	r3, r0
 800d41c:	9305      	str	r3, [sp, #20]
 800d41e:	9b06      	ldr	r3, [sp, #24]
 800d420:	4403      	add	r3, r0
 800d422:	4405      	add	r5, r0
 800d424:	9306      	str	r3, [sp, #24]
 800d426:	9b05      	ldr	r3, [sp, #20]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	dd05      	ble.n	800d438 <_dtoa_r+0x828>
 800d42c:	4651      	mov	r1, sl
 800d42e:	461a      	mov	r2, r3
 800d430:	4620      	mov	r0, r4
 800d432:	f000 fe2d 	bl	800e090 <__lshift>
 800d436:	4682      	mov	sl, r0
 800d438:	9b06      	ldr	r3, [sp, #24]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	dd05      	ble.n	800d44a <_dtoa_r+0x83a>
 800d43e:	4631      	mov	r1, r6
 800d440:	461a      	mov	r2, r3
 800d442:	4620      	mov	r0, r4
 800d444:	f000 fe24 	bl	800e090 <__lshift>
 800d448:	4606      	mov	r6, r0
 800d44a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d072      	beq.n	800d536 <_dtoa_r+0x926>
 800d450:	4631      	mov	r1, r6
 800d452:	4650      	mov	r0, sl
 800d454:	f000 fe88 	bl	800e168 <__mcmp>
 800d458:	2800      	cmp	r0, #0
 800d45a:	da6c      	bge.n	800d536 <_dtoa_r+0x926>
 800d45c:	2300      	movs	r3, #0
 800d45e:	4651      	mov	r1, sl
 800d460:	220a      	movs	r2, #10
 800d462:	4620      	mov	r0, r4
 800d464:	f000 fc66 	bl	800dd34 <__multadd>
 800d468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d46a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d46e:	4682      	mov	sl, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	f000 81b0 	beq.w	800d7d6 <_dtoa_r+0xbc6>
 800d476:	2300      	movs	r3, #0
 800d478:	4639      	mov	r1, r7
 800d47a:	220a      	movs	r2, #10
 800d47c:	4620      	mov	r0, r4
 800d47e:	f000 fc59 	bl	800dd34 <__multadd>
 800d482:	9b01      	ldr	r3, [sp, #4]
 800d484:	2b00      	cmp	r3, #0
 800d486:	4607      	mov	r7, r0
 800d488:	f300 8096 	bgt.w	800d5b8 <_dtoa_r+0x9a8>
 800d48c:	9b07      	ldr	r3, [sp, #28]
 800d48e:	2b02      	cmp	r3, #2
 800d490:	dc59      	bgt.n	800d546 <_dtoa_r+0x936>
 800d492:	e091      	b.n	800d5b8 <_dtoa_r+0x9a8>
 800d494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d496:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d49a:	e758      	b.n	800d34e <_dtoa_r+0x73e>
 800d49c:	9b04      	ldr	r3, [sp, #16]
 800d49e:	1e5e      	subs	r6, r3, #1
 800d4a0:	9b08      	ldr	r3, [sp, #32]
 800d4a2:	42b3      	cmp	r3, r6
 800d4a4:	bfbf      	itttt	lt
 800d4a6:	9b08      	ldrlt	r3, [sp, #32]
 800d4a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d4aa:	9608      	strlt	r6, [sp, #32]
 800d4ac:	1af3      	sublt	r3, r6, r3
 800d4ae:	bfb4      	ite	lt
 800d4b0:	18d2      	addlt	r2, r2, r3
 800d4b2:	1b9e      	subge	r6, r3, r6
 800d4b4:	9b04      	ldr	r3, [sp, #16]
 800d4b6:	bfbc      	itt	lt
 800d4b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d4ba:	2600      	movlt	r6, #0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	bfb7      	itett	lt
 800d4c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d4c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d4c8:	1a9d      	sublt	r5, r3, r2
 800d4ca:	2300      	movlt	r3, #0
 800d4cc:	e741      	b.n	800d352 <_dtoa_r+0x742>
 800d4ce:	9e08      	ldr	r6, [sp, #32]
 800d4d0:	9d05      	ldr	r5, [sp, #20]
 800d4d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d4d4:	e748      	b.n	800d368 <_dtoa_r+0x758>
 800d4d6:	9a08      	ldr	r2, [sp, #32]
 800d4d8:	e770      	b.n	800d3bc <_dtoa_r+0x7ac>
 800d4da:	9b07      	ldr	r3, [sp, #28]
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	dc19      	bgt.n	800d514 <_dtoa_r+0x904>
 800d4e0:	9b02      	ldr	r3, [sp, #8]
 800d4e2:	b9bb      	cbnz	r3, 800d514 <_dtoa_r+0x904>
 800d4e4:	9b03      	ldr	r3, [sp, #12]
 800d4e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4ea:	b99b      	cbnz	r3, 800d514 <_dtoa_r+0x904>
 800d4ec:	9b03      	ldr	r3, [sp, #12]
 800d4ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4f2:	0d1b      	lsrs	r3, r3, #20
 800d4f4:	051b      	lsls	r3, r3, #20
 800d4f6:	b183      	cbz	r3, 800d51a <_dtoa_r+0x90a>
 800d4f8:	9b05      	ldr	r3, [sp, #20]
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	9305      	str	r3, [sp, #20]
 800d4fe:	9b06      	ldr	r3, [sp, #24]
 800d500:	3301      	adds	r3, #1
 800d502:	9306      	str	r3, [sp, #24]
 800d504:	f04f 0801 	mov.w	r8, #1
 800d508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	f47f af6f 	bne.w	800d3ee <_dtoa_r+0x7de>
 800d510:	2001      	movs	r0, #1
 800d512:	e774      	b.n	800d3fe <_dtoa_r+0x7ee>
 800d514:	f04f 0800 	mov.w	r8, #0
 800d518:	e7f6      	b.n	800d508 <_dtoa_r+0x8f8>
 800d51a:	4698      	mov	r8, r3
 800d51c:	e7f4      	b.n	800d508 <_dtoa_r+0x8f8>
 800d51e:	d082      	beq.n	800d426 <_dtoa_r+0x816>
 800d520:	9a05      	ldr	r2, [sp, #20]
 800d522:	331c      	adds	r3, #28
 800d524:	441a      	add	r2, r3
 800d526:	9205      	str	r2, [sp, #20]
 800d528:	9a06      	ldr	r2, [sp, #24]
 800d52a:	441a      	add	r2, r3
 800d52c:	441d      	add	r5, r3
 800d52e:	9206      	str	r2, [sp, #24]
 800d530:	e779      	b.n	800d426 <_dtoa_r+0x816>
 800d532:	4603      	mov	r3, r0
 800d534:	e7f4      	b.n	800d520 <_dtoa_r+0x910>
 800d536:	9b04      	ldr	r3, [sp, #16]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	dc37      	bgt.n	800d5ac <_dtoa_r+0x99c>
 800d53c:	9b07      	ldr	r3, [sp, #28]
 800d53e:	2b02      	cmp	r3, #2
 800d540:	dd34      	ble.n	800d5ac <_dtoa_r+0x99c>
 800d542:	9b04      	ldr	r3, [sp, #16]
 800d544:	9301      	str	r3, [sp, #4]
 800d546:	9b01      	ldr	r3, [sp, #4]
 800d548:	b963      	cbnz	r3, 800d564 <_dtoa_r+0x954>
 800d54a:	4631      	mov	r1, r6
 800d54c:	2205      	movs	r2, #5
 800d54e:	4620      	mov	r0, r4
 800d550:	f000 fbf0 	bl	800dd34 <__multadd>
 800d554:	4601      	mov	r1, r0
 800d556:	4606      	mov	r6, r0
 800d558:	4650      	mov	r0, sl
 800d55a:	f000 fe05 	bl	800e168 <__mcmp>
 800d55e:	2800      	cmp	r0, #0
 800d560:	f73f adbb 	bgt.w	800d0da <_dtoa_r+0x4ca>
 800d564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d566:	9d00      	ldr	r5, [sp, #0]
 800d568:	ea6f 0b03 	mvn.w	fp, r3
 800d56c:	f04f 0800 	mov.w	r8, #0
 800d570:	4631      	mov	r1, r6
 800d572:	4620      	mov	r0, r4
 800d574:	f000 fbbc 	bl	800dcf0 <_Bfree>
 800d578:	2f00      	cmp	r7, #0
 800d57a:	f43f aeab 	beq.w	800d2d4 <_dtoa_r+0x6c4>
 800d57e:	f1b8 0f00 	cmp.w	r8, #0
 800d582:	d005      	beq.n	800d590 <_dtoa_r+0x980>
 800d584:	45b8      	cmp	r8, r7
 800d586:	d003      	beq.n	800d590 <_dtoa_r+0x980>
 800d588:	4641      	mov	r1, r8
 800d58a:	4620      	mov	r0, r4
 800d58c:	f000 fbb0 	bl	800dcf0 <_Bfree>
 800d590:	4639      	mov	r1, r7
 800d592:	4620      	mov	r0, r4
 800d594:	f000 fbac 	bl	800dcf0 <_Bfree>
 800d598:	e69c      	b.n	800d2d4 <_dtoa_r+0x6c4>
 800d59a:	2600      	movs	r6, #0
 800d59c:	4637      	mov	r7, r6
 800d59e:	e7e1      	b.n	800d564 <_dtoa_r+0x954>
 800d5a0:	46bb      	mov	fp, r7
 800d5a2:	4637      	mov	r7, r6
 800d5a4:	e599      	b.n	800d0da <_dtoa_r+0x4ca>
 800d5a6:	bf00      	nop
 800d5a8:	40240000 	.word	0x40240000
 800d5ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f000 80c8 	beq.w	800d744 <_dtoa_r+0xb34>
 800d5b4:	9b04      	ldr	r3, [sp, #16]
 800d5b6:	9301      	str	r3, [sp, #4]
 800d5b8:	2d00      	cmp	r5, #0
 800d5ba:	dd05      	ble.n	800d5c8 <_dtoa_r+0x9b8>
 800d5bc:	4639      	mov	r1, r7
 800d5be:	462a      	mov	r2, r5
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f000 fd65 	bl	800e090 <__lshift>
 800d5c6:	4607      	mov	r7, r0
 800d5c8:	f1b8 0f00 	cmp.w	r8, #0
 800d5cc:	d05b      	beq.n	800d686 <_dtoa_r+0xa76>
 800d5ce:	6879      	ldr	r1, [r7, #4]
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f000 fb4d 	bl	800dc70 <_Balloc>
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	b928      	cbnz	r0, 800d5e6 <_dtoa_r+0x9d6>
 800d5da:	4b83      	ldr	r3, [pc, #524]	; (800d7e8 <_dtoa_r+0xbd8>)
 800d5dc:	4602      	mov	r2, r0
 800d5de:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d5e2:	f7ff bb2e 	b.w	800cc42 <_dtoa_r+0x32>
 800d5e6:	693a      	ldr	r2, [r7, #16]
 800d5e8:	3202      	adds	r2, #2
 800d5ea:	0092      	lsls	r2, r2, #2
 800d5ec:	f107 010c 	add.w	r1, r7, #12
 800d5f0:	300c      	adds	r0, #12
 800d5f2:	f7ff fa74 	bl	800cade <memcpy>
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	f000 fd48 	bl	800e090 <__lshift>
 800d600:	9b00      	ldr	r3, [sp, #0]
 800d602:	3301      	adds	r3, #1
 800d604:	9304      	str	r3, [sp, #16]
 800d606:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d60a:	4413      	add	r3, r2
 800d60c:	9308      	str	r3, [sp, #32]
 800d60e:	9b02      	ldr	r3, [sp, #8]
 800d610:	f003 0301 	and.w	r3, r3, #1
 800d614:	46b8      	mov	r8, r7
 800d616:	9306      	str	r3, [sp, #24]
 800d618:	4607      	mov	r7, r0
 800d61a:	9b04      	ldr	r3, [sp, #16]
 800d61c:	4631      	mov	r1, r6
 800d61e:	3b01      	subs	r3, #1
 800d620:	4650      	mov	r0, sl
 800d622:	9301      	str	r3, [sp, #4]
 800d624:	f7ff fa69 	bl	800cafa <quorem>
 800d628:	4641      	mov	r1, r8
 800d62a:	9002      	str	r0, [sp, #8]
 800d62c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d630:	4650      	mov	r0, sl
 800d632:	f000 fd99 	bl	800e168 <__mcmp>
 800d636:	463a      	mov	r2, r7
 800d638:	9005      	str	r0, [sp, #20]
 800d63a:	4631      	mov	r1, r6
 800d63c:	4620      	mov	r0, r4
 800d63e:	f000 fdaf 	bl	800e1a0 <__mdiff>
 800d642:	68c2      	ldr	r2, [r0, #12]
 800d644:	4605      	mov	r5, r0
 800d646:	bb02      	cbnz	r2, 800d68a <_dtoa_r+0xa7a>
 800d648:	4601      	mov	r1, r0
 800d64a:	4650      	mov	r0, sl
 800d64c:	f000 fd8c 	bl	800e168 <__mcmp>
 800d650:	4602      	mov	r2, r0
 800d652:	4629      	mov	r1, r5
 800d654:	4620      	mov	r0, r4
 800d656:	9209      	str	r2, [sp, #36]	; 0x24
 800d658:	f000 fb4a 	bl	800dcf0 <_Bfree>
 800d65c:	9b07      	ldr	r3, [sp, #28]
 800d65e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d660:	9d04      	ldr	r5, [sp, #16]
 800d662:	ea43 0102 	orr.w	r1, r3, r2
 800d666:	9b06      	ldr	r3, [sp, #24]
 800d668:	4319      	orrs	r1, r3
 800d66a:	d110      	bne.n	800d68e <_dtoa_r+0xa7e>
 800d66c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d670:	d029      	beq.n	800d6c6 <_dtoa_r+0xab6>
 800d672:	9b05      	ldr	r3, [sp, #20]
 800d674:	2b00      	cmp	r3, #0
 800d676:	dd02      	ble.n	800d67e <_dtoa_r+0xa6e>
 800d678:	9b02      	ldr	r3, [sp, #8]
 800d67a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d67e:	9b01      	ldr	r3, [sp, #4]
 800d680:	f883 9000 	strb.w	r9, [r3]
 800d684:	e774      	b.n	800d570 <_dtoa_r+0x960>
 800d686:	4638      	mov	r0, r7
 800d688:	e7ba      	b.n	800d600 <_dtoa_r+0x9f0>
 800d68a:	2201      	movs	r2, #1
 800d68c:	e7e1      	b.n	800d652 <_dtoa_r+0xa42>
 800d68e:	9b05      	ldr	r3, [sp, #20]
 800d690:	2b00      	cmp	r3, #0
 800d692:	db04      	blt.n	800d69e <_dtoa_r+0xa8e>
 800d694:	9907      	ldr	r1, [sp, #28]
 800d696:	430b      	orrs	r3, r1
 800d698:	9906      	ldr	r1, [sp, #24]
 800d69a:	430b      	orrs	r3, r1
 800d69c:	d120      	bne.n	800d6e0 <_dtoa_r+0xad0>
 800d69e:	2a00      	cmp	r2, #0
 800d6a0:	dded      	ble.n	800d67e <_dtoa_r+0xa6e>
 800d6a2:	4651      	mov	r1, sl
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	f000 fcf2 	bl	800e090 <__lshift>
 800d6ac:	4631      	mov	r1, r6
 800d6ae:	4682      	mov	sl, r0
 800d6b0:	f000 fd5a 	bl	800e168 <__mcmp>
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	dc03      	bgt.n	800d6c0 <_dtoa_r+0xab0>
 800d6b8:	d1e1      	bne.n	800d67e <_dtoa_r+0xa6e>
 800d6ba:	f019 0f01 	tst.w	r9, #1
 800d6be:	d0de      	beq.n	800d67e <_dtoa_r+0xa6e>
 800d6c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d6c4:	d1d8      	bne.n	800d678 <_dtoa_r+0xa68>
 800d6c6:	9a01      	ldr	r2, [sp, #4]
 800d6c8:	2339      	movs	r3, #57	; 0x39
 800d6ca:	7013      	strb	r3, [r2, #0]
 800d6cc:	462b      	mov	r3, r5
 800d6ce:	461d      	mov	r5, r3
 800d6d0:	3b01      	subs	r3, #1
 800d6d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d6d6:	2a39      	cmp	r2, #57	; 0x39
 800d6d8:	d06c      	beq.n	800d7b4 <_dtoa_r+0xba4>
 800d6da:	3201      	adds	r2, #1
 800d6dc:	701a      	strb	r2, [r3, #0]
 800d6de:	e747      	b.n	800d570 <_dtoa_r+0x960>
 800d6e0:	2a00      	cmp	r2, #0
 800d6e2:	dd07      	ble.n	800d6f4 <_dtoa_r+0xae4>
 800d6e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d6e8:	d0ed      	beq.n	800d6c6 <_dtoa_r+0xab6>
 800d6ea:	9a01      	ldr	r2, [sp, #4]
 800d6ec:	f109 0301 	add.w	r3, r9, #1
 800d6f0:	7013      	strb	r3, [r2, #0]
 800d6f2:	e73d      	b.n	800d570 <_dtoa_r+0x960>
 800d6f4:	9b04      	ldr	r3, [sp, #16]
 800d6f6:	9a08      	ldr	r2, [sp, #32]
 800d6f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d043      	beq.n	800d788 <_dtoa_r+0xb78>
 800d700:	4651      	mov	r1, sl
 800d702:	2300      	movs	r3, #0
 800d704:	220a      	movs	r2, #10
 800d706:	4620      	mov	r0, r4
 800d708:	f000 fb14 	bl	800dd34 <__multadd>
 800d70c:	45b8      	cmp	r8, r7
 800d70e:	4682      	mov	sl, r0
 800d710:	f04f 0300 	mov.w	r3, #0
 800d714:	f04f 020a 	mov.w	r2, #10
 800d718:	4641      	mov	r1, r8
 800d71a:	4620      	mov	r0, r4
 800d71c:	d107      	bne.n	800d72e <_dtoa_r+0xb1e>
 800d71e:	f000 fb09 	bl	800dd34 <__multadd>
 800d722:	4680      	mov	r8, r0
 800d724:	4607      	mov	r7, r0
 800d726:	9b04      	ldr	r3, [sp, #16]
 800d728:	3301      	adds	r3, #1
 800d72a:	9304      	str	r3, [sp, #16]
 800d72c:	e775      	b.n	800d61a <_dtoa_r+0xa0a>
 800d72e:	f000 fb01 	bl	800dd34 <__multadd>
 800d732:	4639      	mov	r1, r7
 800d734:	4680      	mov	r8, r0
 800d736:	2300      	movs	r3, #0
 800d738:	220a      	movs	r2, #10
 800d73a:	4620      	mov	r0, r4
 800d73c:	f000 fafa 	bl	800dd34 <__multadd>
 800d740:	4607      	mov	r7, r0
 800d742:	e7f0      	b.n	800d726 <_dtoa_r+0xb16>
 800d744:	9b04      	ldr	r3, [sp, #16]
 800d746:	9301      	str	r3, [sp, #4]
 800d748:	9d00      	ldr	r5, [sp, #0]
 800d74a:	4631      	mov	r1, r6
 800d74c:	4650      	mov	r0, sl
 800d74e:	f7ff f9d4 	bl	800cafa <quorem>
 800d752:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d756:	9b00      	ldr	r3, [sp, #0]
 800d758:	f805 9b01 	strb.w	r9, [r5], #1
 800d75c:	1aea      	subs	r2, r5, r3
 800d75e:	9b01      	ldr	r3, [sp, #4]
 800d760:	4293      	cmp	r3, r2
 800d762:	dd07      	ble.n	800d774 <_dtoa_r+0xb64>
 800d764:	4651      	mov	r1, sl
 800d766:	2300      	movs	r3, #0
 800d768:	220a      	movs	r2, #10
 800d76a:	4620      	mov	r0, r4
 800d76c:	f000 fae2 	bl	800dd34 <__multadd>
 800d770:	4682      	mov	sl, r0
 800d772:	e7ea      	b.n	800d74a <_dtoa_r+0xb3a>
 800d774:	9b01      	ldr	r3, [sp, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	bfc8      	it	gt
 800d77a:	461d      	movgt	r5, r3
 800d77c:	9b00      	ldr	r3, [sp, #0]
 800d77e:	bfd8      	it	le
 800d780:	2501      	movle	r5, #1
 800d782:	441d      	add	r5, r3
 800d784:	f04f 0800 	mov.w	r8, #0
 800d788:	4651      	mov	r1, sl
 800d78a:	2201      	movs	r2, #1
 800d78c:	4620      	mov	r0, r4
 800d78e:	f000 fc7f 	bl	800e090 <__lshift>
 800d792:	4631      	mov	r1, r6
 800d794:	4682      	mov	sl, r0
 800d796:	f000 fce7 	bl	800e168 <__mcmp>
 800d79a:	2800      	cmp	r0, #0
 800d79c:	dc96      	bgt.n	800d6cc <_dtoa_r+0xabc>
 800d79e:	d102      	bne.n	800d7a6 <_dtoa_r+0xb96>
 800d7a0:	f019 0f01 	tst.w	r9, #1
 800d7a4:	d192      	bne.n	800d6cc <_dtoa_r+0xabc>
 800d7a6:	462b      	mov	r3, r5
 800d7a8:	461d      	mov	r5, r3
 800d7aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7ae:	2a30      	cmp	r2, #48	; 0x30
 800d7b0:	d0fa      	beq.n	800d7a8 <_dtoa_r+0xb98>
 800d7b2:	e6dd      	b.n	800d570 <_dtoa_r+0x960>
 800d7b4:	9a00      	ldr	r2, [sp, #0]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d189      	bne.n	800d6ce <_dtoa_r+0xabe>
 800d7ba:	f10b 0b01 	add.w	fp, fp, #1
 800d7be:	2331      	movs	r3, #49	; 0x31
 800d7c0:	e796      	b.n	800d6f0 <_dtoa_r+0xae0>
 800d7c2:	4b0a      	ldr	r3, [pc, #40]	; (800d7ec <_dtoa_r+0xbdc>)
 800d7c4:	f7ff ba99 	b.w	800ccfa <_dtoa_r+0xea>
 800d7c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	f47f aa6d 	bne.w	800ccaa <_dtoa_r+0x9a>
 800d7d0:	4b07      	ldr	r3, [pc, #28]	; (800d7f0 <_dtoa_r+0xbe0>)
 800d7d2:	f7ff ba92 	b.w	800ccfa <_dtoa_r+0xea>
 800d7d6:	9b01      	ldr	r3, [sp, #4]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	dcb5      	bgt.n	800d748 <_dtoa_r+0xb38>
 800d7dc:	9b07      	ldr	r3, [sp, #28]
 800d7de:	2b02      	cmp	r3, #2
 800d7e0:	f73f aeb1 	bgt.w	800d546 <_dtoa_r+0x936>
 800d7e4:	e7b0      	b.n	800d748 <_dtoa_r+0xb38>
 800d7e6:	bf00      	nop
 800d7e8:	0800ee43 	.word	0x0800ee43
 800d7ec:	0800eda3 	.word	0x0800eda3
 800d7f0:	0800edc7 	.word	0x0800edc7

0800d7f4 <_free_r>:
 800d7f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7f6:	2900      	cmp	r1, #0
 800d7f8:	d044      	beq.n	800d884 <_free_r+0x90>
 800d7fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7fe:	9001      	str	r0, [sp, #4]
 800d800:	2b00      	cmp	r3, #0
 800d802:	f1a1 0404 	sub.w	r4, r1, #4
 800d806:	bfb8      	it	lt
 800d808:	18e4      	addlt	r4, r4, r3
 800d80a:	f7fe ffd1 	bl	800c7b0 <__malloc_lock>
 800d80e:	4a1e      	ldr	r2, [pc, #120]	; (800d888 <_free_r+0x94>)
 800d810:	9801      	ldr	r0, [sp, #4]
 800d812:	6813      	ldr	r3, [r2, #0]
 800d814:	b933      	cbnz	r3, 800d824 <_free_r+0x30>
 800d816:	6063      	str	r3, [r4, #4]
 800d818:	6014      	str	r4, [r2, #0]
 800d81a:	b003      	add	sp, #12
 800d81c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d820:	f7fe bfcc 	b.w	800c7bc <__malloc_unlock>
 800d824:	42a3      	cmp	r3, r4
 800d826:	d908      	bls.n	800d83a <_free_r+0x46>
 800d828:	6825      	ldr	r5, [r4, #0]
 800d82a:	1961      	adds	r1, r4, r5
 800d82c:	428b      	cmp	r3, r1
 800d82e:	bf01      	itttt	eq
 800d830:	6819      	ldreq	r1, [r3, #0]
 800d832:	685b      	ldreq	r3, [r3, #4]
 800d834:	1949      	addeq	r1, r1, r5
 800d836:	6021      	streq	r1, [r4, #0]
 800d838:	e7ed      	b.n	800d816 <_free_r+0x22>
 800d83a:	461a      	mov	r2, r3
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	b10b      	cbz	r3, 800d844 <_free_r+0x50>
 800d840:	42a3      	cmp	r3, r4
 800d842:	d9fa      	bls.n	800d83a <_free_r+0x46>
 800d844:	6811      	ldr	r1, [r2, #0]
 800d846:	1855      	adds	r5, r2, r1
 800d848:	42a5      	cmp	r5, r4
 800d84a:	d10b      	bne.n	800d864 <_free_r+0x70>
 800d84c:	6824      	ldr	r4, [r4, #0]
 800d84e:	4421      	add	r1, r4
 800d850:	1854      	adds	r4, r2, r1
 800d852:	42a3      	cmp	r3, r4
 800d854:	6011      	str	r1, [r2, #0]
 800d856:	d1e0      	bne.n	800d81a <_free_r+0x26>
 800d858:	681c      	ldr	r4, [r3, #0]
 800d85a:	685b      	ldr	r3, [r3, #4]
 800d85c:	6053      	str	r3, [r2, #4]
 800d85e:	440c      	add	r4, r1
 800d860:	6014      	str	r4, [r2, #0]
 800d862:	e7da      	b.n	800d81a <_free_r+0x26>
 800d864:	d902      	bls.n	800d86c <_free_r+0x78>
 800d866:	230c      	movs	r3, #12
 800d868:	6003      	str	r3, [r0, #0]
 800d86a:	e7d6      	b.n	800d81a <_free_r+0x26>
 800d86c:	6825      	ldr	r5, [r4, #0]
 800d86e:	1961      	adds	r1, r4, r5
 800d870:	428b      	cmp	r3, r1
 800d872:	bf04      	itt	eq
 800d874:	6819      	ldreq	r1, [r3, #0]
 800d876:	685b      	ldreq	r3, [r3, #4]
 800d878:	6063      	str	r3, [r4, #4]
 800d87a:	bf04      	itt	eq
 800d87c:	1949      	addeq	r1, r1, r5
 800d87e:	6021      	streq	r1, [r4, #0]
 800d880:	6054      	str	r4, [r2, #4]
 800d882:	e7ca      	b.n	800d81a <_free_r+0x26>
 800d884:	b003      	add	sp, #12
 800d886:	bd30      	pop	{r4, r5, pc}
 800d888:	20004e80 	.word	0x20004e80

0800d88c <__sfputc_r>:
 800d88c:	6893      	ldr	r3, [r2, #8]
 800d88e:	3b01      	subs	r3, #1
 800d890:	2b00      	cmp	r3, #0
 800d892:	b410      	push	{r4}
 800d894:	6093      	str	r3, [r2, #8]
 800d896:	da08      	bge.n	800d8aa <__sfputc_r+0x1e>
 800d898:	6994      	ldr	r4, [r2, #24]
 800d89a:	42a3      	cmp	r3, r4
 800d89c:	db01      	blt.n	800d8a2 <__sfputc_r+0x16>
 800d89e:	290a      	cmp	r1, #10
 800d8a0:	d103      	bne.n	800d8aa <__sfputc_r+0x1e>
 800d8a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8a6:	f000 bda2 	b.w	800e3ee <__swbuf_r>
 800d8aa:	6813      	ldr	r3, [r2, #0]
 800d8ac:	1c58      	adds	r0, r3, #1
 800d8ae:	6010      	str	r0, [r2, #0]
 800d8b0:	7019      	strb	r1, [r3, #0]
 800d8b2:	4608      	mov	r0, r1
 800d8b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8b8:	4770      	bx	lr

0800d8ba <__sfputs_r>:
 800d8ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8bc:	4606      	mov	r6, r0
 800d8be:	460f      	mov	r7, r1
 800d8c0:	4614      	mov	r4, r2
 800d8c2:	18d5      	adds	r5, r2, r3
 800d8c4:	42ac      	cmp	r4, r5
 800d8c6:	d101      	bne.n	800d8cc <__sfputs_r+0x12>
 800d8c8:	2000      	movs	r0, #0
 800d8ca:	e007      	b.n	800d8dc <__sfputs_r+0x22>
 800d8cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8d0:	463a      	mov	r2, r7
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	f7ff ffda 	bl	800d88c <__sfputc_r>
 800d8d8:	1c43      	adds	r3, r0, #1
 800d8da:	d1f3      	bne.n	800d8c4 <__sfputs_r+0xa>
 800d8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d8e0 <_vfiprintf_r>:
 800d8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e4:	460d      	mov	r5, r1
 800d8e6:	b09d      	sub	sp, #116	; 0x74
 800d8e8:	4614      	mov	r4, r2
 800d8ea:	4698      	mov	r8, r3
 800d8ec:	4606      	mov	r6, r0
 800d8ee:	b118      	cbz	r0, 800d8f8 <_vfiprintf_r+0x18>
 800d8f0:	6a03      	ldr	r3, [r0, #32]
 800d8f2:	b90b      	cbnz	r3, 800d8f8 <_vfiprintf_r+0x18>
 800d8f4:	f7fe fff4 	bl	800c8e0 <__sinit>
 800d8f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8fa:	07d9      	lsls	r1, r3, #31
 800d8fc:	d405      	bmi.n	800d90a <_vfiprintf_r+0x2a>
 800d8fe:	89ab      	ldrh	r3, [r5, #12]
 800d900:	059a      	lsls	r2, r3, #22
 800d902:	d402      	bmi.n	800d90a <_vfiprintf_r+0x2a>
 800d904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d906:	f7ff f8e8 	bl	800cada <__retarget_lock_acquire_recursive>
 800d90a:	89ab      	ldrh	r3, [r5, #12]
 800d90c:	071b      	lsls	r3, r3, #28
 800d90e:	d501      	bpl.n	800d914 <_vfiprintf_r+0x34>
 800d910:	692b      	ldr	r3, [r5, #16]
 800d912:	b99b      	cbnz	r3, 800d93c <_vfiprintf_r+0x5c>
 800d914:	4629      	mov	r1, r5
 800d916:	4630      	mov	r0, r6
 800d918:	f000 fda6 	bl	800e468 <__swsetup_r>
 800d91c:	b170      	cbz	r0, 800d93c <_vfiprintf_r+0x5c>
 800d91e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d920:	07dc      	lsls	r4, r3, #31
 800d922:	d504      	bpl.n	800d92e <_vfiprintf_r+0x4e>
 800d924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d928:	b01d      	add	sp, #116	; 0x74
 800d92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d92e:	89ab      	ldrh	r3, [r5, #12]
 800d930:	0598      	lsls	r0, r3, #22
 800d932:	d4f7      	bmi.n	800d924 <_vfiprintf_r+0x44>
 800d934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d936:	f7ff f8d1 	bl	800cadc <__retarget_lock_release_recursive>
 800d93a:	e7f3      	b.n	800d924 <_vfiprintf_r+0x44>
 800d93c:	2300      	movs	r3, #0
 800d93e:	9309      	str	r3, [sp, #36]	; 0x24
 800d940:	2320      	movs	r3, #32
 800d942:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d946:	f8cd 800c 	str.w	r8, [sp, #12]
 800d94a:	2330      	movs	r3, #48	; 0x30
 800d94c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800db00 <_vfiprintf_r+0x220>
 800d950:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d954:	f04f 0901 	mov.w	r9, #1
 800d958:	4623      	mov	r3, r4
 800d95a:	469a      	mov	sl, r3
 800d95c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d960:	b10a      	cbz	r2, 800d966 <_vfiprintf_r+0x86>
 800d962:	2a25      	cmp	r2, #37	; 0x25
 800d964:	d1f9      	bne.n	800d95a <_vfiprintf_r+0x7a>
 800d966:	ebba 0b04 	subs.w	fp, sl, r4
 800d96a:	d00b      	beq.n	800d984 <_vfiprintf_r+0xa4>
 800d96c:	465b      	mov	r3, fp
 800d96e:	4622      	mov	r2, r4
 800d970:	4629      	mov	r1, r5
 800d972:	4630      	mov	r0, r6
 800d974:	f7ff ffa1 	bl	800d8ba <__sfputs_r>
 800d978:	3001      	adds	r0, #1
 800d97a:	f000 80a9 	beq.w	800dad0 <_vfiprintf_r+0x1f0>
 800d97e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d980:	445a      	add	r2, fp
 800d982:	9209      	str	r2, [sp, #36]	; 0x24
 800d984:	f89a 3000 	ldrb.w	r3, [sl]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	f000 80a1 	beq.w	800dad0 <_vfiprintf_r+0x1f0>
 800d98e:	2300      	movs	r3, #0
 800d990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d998:	f10a 0a01 	add.w	sl, sl, #1
 800d99c:	9304      	str	r3, [sp, #16]
 800d99e:	9307      	str	r3, [sp, #28]
 800d9a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9a4:	931a      	str	r3, [sp, #104]	; 0x68
 800d9a6:	4654      	mov	r4, sl
 800d9a8:	2205      	movs	r2, #5
 800d9aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9ae:	4854      	ldr	r0, [pc, #336]	; (800db00 <_vfiprintf_r+0x220>)
 800d9b0:	f7f2 fc0e 	bl	80001d0 <memchr>
 800d9b4:	9a04      	ldr	r2, [sp, #16]
 800d9b6:	b9d8      	cbnz	r0, 800d9f0 <_vfiprintf_r+0x110>
 800d9b8:	06d1      	lsls	r1, r2, #27
 800d9ba:	bf44      	itt	mi
 800d9bc:	2320      	movmi	r3, #32
 800d9be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9c2:	0713      	lsls	r3, r2, #28
 800d9c4:	bf44      	itt	mi
 800d9c6:	232b      	movmi	r3, #43	; 0x2b
 800d9c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d9d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d9d2:	d015      	beq.n	800da00 <_vfiprintf_r+0x120>
 800d9d4:	9a07      	ldr	r2, [sp, #28]
 800d9d6:	4654      	mov	r4, sl
 800d9d8:	2000      	movs	r0, #0
 800d9da:	f04f 0c0a 	mov.w	ip, #10
 800d9de:	4621      	mov	r1, r4
 800d9e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9e4:	3b30      	subs	r3, #48	; 0x30
 800d9e6:	2b09      	cmp	r3, #9
 800d9e8:	d94d      	bls.n	800da86 <_vfiprintf_r+0x1a6>
 800d9ea:	b1b0      	cbz	r0, 800da1a <_vfiprintf_r+0x13a>
 800d9ec:	9207      	str	r2, [sp, #28]
 800d9ee:	e014      	b.n	800da1a <_vfiprintf_r+0x13a>
 800d9f0:	eba0 0308 	sub.w	r3, r0, r8
 800d9f4:	fa09 f303 	lsl.w	r3, r9, r3
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	9304      	str	r3, [sp, #16]
 800d9fc:	46a2      	mov	sl, r4
 800d9fe:	e7d2      	b.n	800d9a6 <_vfiprintf_r+0xc6>
 800da00:	9b03      	ldr	r3, [sp, #12]
 800da02:	1d19      	adds	r1, r3, #4
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	9103      	str	r1, [sp, #12]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	bfbb      	ittet	lt
 800da0c:	425b      	neglt	r3, r3
 800da0e:	f042 0202 	orrlt.w	r2, r2, #2
 800da12:	9307      	strge	r3, [sp, #28]
 800da14:	9307      	strlt	r3, [sp, #28]
 800da16:	bfb8      	it	lt
 800da18:	9204      	strlt	r2, [sp, #16]
 800da1a:	7823      	ldrb	r3, [r4, #0]
 800da1c:	2b2e      	cmp	r3, #46	; 0x2e
 800da1e:	d10c      	bne.n	800da3a <_vfiprintf_r+0x15a>
 800da20:	7863      	ldrb	r3, [r4, #1]
 800da22:	2b2a      	cmp	r3, #42	; 0x2a
 800da24:	d134      	bne.n	800da90 <_vfiprintf_r+0x1b0>
 800da26:	9b03      	ldr	r3, [sp, #12]
 800da28:	1d1a      	adds	r2, r3, #4
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	9203      	str	r2, [sp, #12]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	bfb8      	it	lt
 800da32:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800da36:	3402      	adds	r4, #2
 800da38:	9305      	str	r3, [sp, #20]
 800da3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800db10 <_vfiprintf_r+0x230>
 800da3e:	7821      	ldrb	r1, [r4, #0]
 800da40:	2203      	movs	r2, #3
 800da42:	4650      	mov	r0, sl
 800da44:	f7f2 fbc4 	bl	80001d0 <memchr>
 800da48:	b138      	cbz	r0, 800da5a <_vfiprintf_r+0x17a>
 800da4a:	9b04      	ldr	r3, [sp, #16]
 800da4c:	eba0 000a 	sub.w	r0, r0, sl
 800da50:	2240      	movs	r2, #64	; 0x40
 800da52:	4082      	lsls	r2, r0
 800da54:	4313      	orrs	r3, r2
 800da56:	3401      	adds	r4, #1
 800da58:	9304      	str	r3, [sp, #16]
 800da5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da5e:	4829      	ldr	r0, [pc, #164]	; (800db04 <_vfiprintf_r+0x224>)
 800da60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da64:	2206      	movs	r2, #6
 800da66:	f7f2 fbb3 	bl	80001d0 <memchr>
 800da6a:	2800      	cmp	r0, #0
 800da6c:	d03f      	beq.n	800daee <_vfiprintf_r+0x20e>
 800da6e:	4b26      	ldr	r3, [pc, #152]	; (800db08 <_vfiprintf_r+0x228>)
 800da70:	bb1b      	cbnz	r3, 800daba <_vfiprintf_r+0x1da>
 800da72:	9b03      	ldr	r3, [sp, #12]
 800da74:	3307      	adds	r3, #7
 800da76:	f023 0307 	bic.w	r3, r3, #7
 800da7a:	3308      	adds	r3, #8
 800da7c:	9303      	str	r3, [sp, #12]
 800da7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da80:	443b      	add	r3, r7
 800da82:	9309      	str	r3, [sp, #36]	; 0x24
 800da84:	e768      	b.n	800d958 <_vfiprintf_r+0x78>
 800da86:	fb0c 3202 	mla	r2, ip, r2, r3
 800da8a:	460c      	mov	r4, r1
 800da8c:	2001      	movs	r0, #1
 800da8e:	e7a6      	b.n	800d9de <_vfiprintf_r+0xfe>
 800da90:	2300      	movs	r3, #0
 800da92:	3401      	adds	r4, #1
 800da94:	9305      	str	r3, [sp, #20]
 800da96:	4619      	mov	r1, r3
 800da98:	f04f 0c0a 	mov.w	ip, #10
 800da9c:	4620      	mov	r0, r4
 800da9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800daa2:	3a30      	subs	r2, #48	; 0x30
 800daa4:	2a09      	cmp	r2, #9
 800daa6:	d903      	bls.n	800dab0 <_vfiprintf_r+0x1d0>
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d0c6      	beq.n	800da3a <_vfiprintf_r+0x15a>
 800daac:	9105      	str	r1, [sp, #20]
 800daae:	e7c4      	b.n	800da3a <_vfiprintf_r+0x15a>
 800dab0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dab4:	4604      	mov	r4, r0
 800dab6:	2301      	movs	r3, #1
 800dab8:	e7f0      	b.n	800da9c <_vfiprintf_r+0x1bc>
 800daba:	ab03      	add	r3, sp, #12
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	462a      	mov	r2, r5
 800dac0:	4b12      	ldr	r3, [pc, #72]	; (800db0c <_vfiprintf_r+0x22c>)
 800dac2:	a904      	add	r1, sp, #16
 800dac4:	4630      	mov	r0, r6
 800dac6:	f7fe f9fd 	bl	800bec4 <_printf_float>
 800daca:	4607      	mov	r7, r0
 800dacc:	1c78      	adds	r0, r7, #1
 800dace:	d1d6      	bne.n	800da7e <_vfiprintf_r+0x19e>
 800dad0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dad2:	07d9      	lsls	r1, r3, #31
 800dad4:	d405      	bmi.n	800dae2 <_vfiprintf_r+0x202>
 800dad6:	89ab      	ldrh	r3, [r5, #12]
 800dad8:	059a      	lsls	r2, r3, #22
 800dada:	d402      	bmi.n	800dae2 <_vfiprintf_r+0x202>
 800dadc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dade:	f7fe fffd 	bl	800cadc <__retarget_lock_release_recursive>
 800dae2:	89ab      	ldrh	r3, [r5, #12]
 800dae4:	065b      	lsls	r3, r3, #25
 800dae6:	f53f af1d 	bmi.w	800d924 <_vfiprintf_r+0x44>
 800daea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800daec:	e71c      	b.n	800d928 <_vfiprintf_r+0x48>
 800daee:	ab03      	add	r3, sp, #12
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	462a      	mov	r2, r5
 800daf4:	4b05      	ldr	r3, [pc, #20]	; (800db0c <_vfiprintf_r+0x22c>)
 800daf6:	a904      	add	r1, sp, #16
 800daf8:	4630      	mov	r0, r6
 800dafa:	f7fe fd37 	bl	800c56c <_printf_i>
 800dafe:	e7e4      	b.n	800daca <_vfiprintf_r+0x1ea>
 800db00:	0800ee54 	.word	0x0800ee54
 800db04:	0800ee5e 	.word	0x0800ee5e
 800db08:	0800bec5 	.word	0x0800bec5
 800db0c:	0800d8bb 	.word	0x0800d8bb
 800db10:	0800ee5a 	.word	0x0800ee5a

0800db14 <__sflush_r>:
 800db14:	898a      	ldrh	r2, [r1, #12]
 800db16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db1a:	4605      	mov	r5, r0
 800db1c:	0710      	lsls	r0, r2, #28
 800db1e:	460c      	mov	r4, r1
 800db20:	d458      	bmi.n	800dbd4 <__sflush_r+0xc0>
 800db22:	684b      	ldr	r3, [r1, #4]
 800db24:	2b00      	cmp	r3, #0
 800db26:	dc05      	bgt.n	800db34 <__sflush_r+0x20>
 800db28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	dc02      	bgt.n	800db34 <__sflush_r+0x20>
 800db2e:	2000      	movs	r0, #0
 800db30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db36:	2e00      	cmp	r6, #0
 800db38:	d0f9      	beq.n	800db2e <__sflush_r+0x1a>
 800db3a:	2300      	movs	r3, #0
 800db3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db40:	682f      	ldr	r7, [r5, #0]
 800db42:	6a21      	ldr	r1, [r4, #32]
 800db44:	602b      	str	r3, [r5, #0]
 800db46:	d032      	beq.n	800dbae <__sflush_r+0x9a>
 800db48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db4a:	89a3      	ldrh	r3, [r4, #12]
 800db4c:	075a      	lsls	r2, r3, #29
 800db4e:	d505      	bpl.n	800db5c <__sflush_r+0x48>
 800db50:	6863      	ldr	r3, [r4, #4]
 800db52:	1ac0      	subs	r0, r0, r3
 800db54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db56:	b10b      	cbz	r3, 800db5c <__sflush_r+0x48>
 800db58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db5a:	1ac0      	subs	r0, r0, r3
 800db5c:	2300      	movs	r3, #0
 800db5e:	4602      	mov	r2, r0
 800db60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db62:	6a21      	ldr	r1, [r4, #32]
 800db64:	4628      	mov	r0, r5
 800db66:	47b0      	blx	r6
 800db68:	1c43      	adds	r3, r0, #1
 800db6a:	89a3      	ldrh	r3, [r4, #12]
 800db6c:	d106      	bne.n	800db7c <__sflush_r+0x68>
 800db6e:	6829      	ldr	r1, [r5, #0]
 800db70:	291d      	cmp	r1, #29
 800db72:	d82b      	bhi.n	800dbcc <__sflush_r+0xb8>
 800db74:	4a29      	ldr	r2, [pc, #164]	; (800dc1c <__sflush_r+0x108>)
 800db76:	410a      	asrs	r2, r1
 800db78:	07d6      	lsls	r6, r2, #31
 800db7a:	d427      	bmi.n	800dbcc <__sflush_r+0xb8>
 800db7c:	2200      	movs	r2, #0
 800db7e:	6062      	str	r2, [r4, #4]
 800db80:	04d9      	lsls	r1, r3, #19
 800db82:	6922      	ldr	r2, [r4, #16]
 800db84:	6022      	str	r2, [r4, #0]
 800db86:	d504      	bpl.n	800db92 <__sflush_r+0x7e>
 800db88:	1c42      	adds	r2, r0, #1
 800db8a:	d101      	bne.n	800db90 <__sflush_r+0x7c>
 800db8c:	682b      	ldr	r3, [r5, #0]
 800db8e:	b903      	cbnz	r3, 800db92 <__sflush_r+0x7e>
 800db90:	6560      	str	r0, [r4, #84]	; 0x54
 800db92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db94:	602f      	str	r7, [r5, #0]
 800db96:	2900      	cmp	r1, #0
 800db98:	d0c9      	beq.n	800db2e <__sflush_r+0x1a>
 800db9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db9e:	4299      	cmp	r1, r3
 800dba0:	d002      	beq.n	800dba8 <__sflush_r+0x94>
 800dba2:	4628      	mov	r0, r5
 800dba4:	f7ff fe26 	bl	800d7f4 <_free_r>
 800dba8:	2000      	movs	r0, #0
 800dbaa:	6360      	str	r0, [r4, #52]	; 0x34
 800dbac:	e7c0      	b.n	800db30 <__sflush_r+0x1c>
 800dbae:	2301      	movs	r3, #1
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	47b0      	blx	r6
 800dbb4:	1c41      	adds	r1, r0, #1
 800dbb6:	d1c8      	bne.n	800db4a <__sflush_r+0x36>
 800dbb8:	682b      	ldr	r3, [r5, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d0c5      	beq.n	800db4a <__sflush_r+0x36>
 800dbbe:	2b1d      	cmp	r3, #29
 800dbc0:	d001      	beq.n	800dbc6 <__sflush_r+0xb2>
 800dbc2:	2b16      	cmp	r3, #22
 800dbc4:	d101      	bne.n	800dbca <__sflush_r+0xb6>
 800dbc6:	602f      	str	r7, [r5, #0]
 800dbc8:	e7b1      	b.n	800db2e <__sflush_r+0x1a>
 800dbca:	89a3      	ldrh	r3, [r4, #12]
 800dbcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbd0:	81a3      	strh	r3, [r4, #12]
 800dbd2:	e7ad      	b.n	800db30 <__sflush_r+0x1c>
 800dbd4:	690f      	ldr	r7, [r1, #16]
 800dbd6:	2f00      	cmp	r7, #0
 800dbd8:	d0a9      	beq.n	800db2e <__sflush_r+0x1a>
 800dbda:	0793      	lsls	r3, r2, #30
 800dbdc:	680e      	ldr	r6, [r1, #0]
 800dbde:	bf08      	it	eq
 800dbe0:	694b      	ldreq	r3, [r1, #20]
 800dbe2:	600f      	str	r7, [r1, #0]
 800dbe4:	bf18      	it	ne
 800dbe6:	2300      	movne	r3, #0
 800dbe8:	eba6 0807 	sub.w	r8, r6, r7
 800dbec:	608b      	str	r3, [r1, #8]
 800dbee:	f1b8 0f00 	cmp.w	r8, #0
 800dbf2:	dd9c      	ble.n	800db2e <__sflush_r+0x1a>
 800dbf4:	6a21      	ldr	r1, [r4, #32]
 800dbf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dbf8:	4643      	mov	r3, r8
 800dbfa:	463a      	mov	r2, r7
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	47b0      	blx	r6
 800dc00:	2800      	cmp	r0, #0
 800dc02:	dc06      	bgt.n	800dc12 <__sflush_r+0xfe>
 800dc04:	89a3      	ldrh	r3, [r4, #12]
 800dc06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc0a:	81a3      	strh	r3, [r4, #12]
 800dc0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc10:	e78e      	b.n	800db30 <__sflush_r+0x1c>
 800dc12:	4407      	add	r7, r0
 800dc14:	eba8 0800 	sub.w	r8, r8, r0
 800dc18:	e7e9      	b.n	800dbee <__sflush_r+0xda>
 800dc1a:	bf00      	nop
 800dc1c:	dfbffffe 	.word	0xdfbffffe

0800dc20 <_fflush_r>:
 800dc20:	b538      	push	{r3, r4, r5, lr}
 800dc22:	690b      	ldr	r3, [r1, #16]
 800dc24:	4605      	mov	r5, r0
 800dc26:	460c      	mov	r4, r1
 800dc28:	b913      	cbnz	r3, 800dc30 <_fflush_r+0x10>
 800dc2a:	2500      	movs	r5, #0
 800dc2c:	4628      	mov	r0, r5
 800dc2e:	bd38      	pop	{r3, r4, r5, pc}
 800dc30:	b118      	cbz	r0, 800dc3a <_fflush_r+0x1a>
 800dc32:	6a03      	ldr	r3, [r0, #32]
 800dc34:	b90b      	cbnz	r3, 800dc3a <_fflush_r+0x1a>
 800dc36:	f7fe fe53 	bl	800c8e0 <__sinit>
 800dc3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d0f3      	beq.n	800dc2a <_fflush_r+0xa>
 800dc42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc44:	07d0      	lsls	r0, r2, #31
 800dc46:	d404      	bmi.n	800dc52 <_fflush_r+0x32>
 800dc48:	0599      	lsls	r1, r3, #22
 800dc4a:	d402      	bmi.n	800dc52 <_fflush_r+0x32>
 800dc4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc4e:	f7fe ff44 	bl	800cada <__retarget_lock_acquire_recursive>
 800dc52:	4628      	mov	r0, r5
 800dc54:	4621      	mov	r1, r4
 800dc56:	f7ff ff5d 	bl	800db14 <__sflush_r>
 800dc5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc5c:	07da      	lsls	r2, r3, #31
 800dc5e:	4605      	mov	r5, r0
 800dc60:	d4e4      	bmi.n	800dc2c <_fflush_r+0xc>
 800dc62:	89a3      	ldrh	r3, [r4, #12]
 800dc64:	059b      	lsls	r3, r3, #22
 800dc66:	d4e1      	bmi.n	800dc2c <_fflush_r+0xc>
 800dc68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc6a:	f7fe ff37 	bl	800cadc <__retarget_lock_release_recursive>
 800dc6e:	e7dd      	b.n	800dc2c <_fflush_r+0xc>

0800dc70 <_Balloc>:
 800dc70:	b570      	push	{r4, r5, r6, lr}
 800dc72:	69c6      	ldr	r6, [r0, #28]
 800dc74:	4604      	mov	r4, r0
 800dc76:	460d      	mov	r5, r1
 800dc78:	b976      	cbnz	r6, 800dc98 <_Balloc+0x28>
 800dc7a:	2010      	movs	r0, #16
 800dc7c:	f7fe fb58 	bl	800c330 <malloc>
 800dc80:	4602      	mov	r2, r0
 800dc82:	61e0      	str	r0, [r4, #28]
 800dc84:	b920      	cbnz	r0, 800dc90 <_Balloc+0x20>
 800dc86:	4b18      	ldr	r3, [pc, #96]	; (800dce8 <_Balloc+0x78>)
 800dc88:	4818      	ldr	r0, [pc, #96]	; (800dcec <_Balloc+0x7c>)
 800dc8a:	216b      	movs	r1, #107	; 0x6b
 800dc8c:	f7fe f85c 	bl	800bd48 <__assert_func>
 800dc90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc94:	6006      	str	r6, [r0, #0]
 800dc96:	60c6      	str	r6, [r0, #12]
 800dc98:	69e6      	ldr	r6, [r4, #28]
 800dc9a:	68f3      	ldr	r3, [r6, #12]
 800dc9c:	b183      	cbz	r3, 800dcc0 <_Balloc+0x50>
 800dc9e:	69e3      	ldr	r3, [r4, #28]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dca6:	b9b8      	cbnz	r0, 800dcd8 <_Balloc+0x68>
 800dca8:	2101      	movs	r1, #1
 800dcaa:	fa01 f605 	lsl.w	r6, r1, r5
 800dcae:	1d72      	adds	r2, r6, #5
 800dcb0:	0092      	lsls	r2, r2, #2
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	f000 fcfa 	bl	800e6ac <_calloc_r>
 800dcb8:	b160      	cbz	r0, 800dcd4 <_Balloc+0x64>
 800dcba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dcbe:	e00e      	b.n	800dcde <_Balloc+0x6e>
 800dcc0:	2221      	movs	r2, #33	; 0x21
 800dcc2:	2104      	movs	r1, #4
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	f000 fcf1 	bl	800e6ac <_calloc_r>
 800dcca:	69e3      	ldr	r3, [r4, #28]
 800dccc:	60f0      	str	r0, [r6, #12]
 800dcce:	68db      	ldr	r3, [r3, #12]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d1e4      	bne.n	800dc9e <_Balloc+0x2e>
 800dcd4:	2000      	movs	r0, #0
 800dcd6:	bd70      	pop	{r4, r5, r6, pc}
 800dcd8:	6802      	ldr	r2, [r0, #0]
 800dcda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dcde:	2300      	movs	r3, #0
 800dce0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dce4:	e7f7      	b.n	800dcd6 <_Balloc+0x66>
 800dce6:	bf00      	nop
 800dce8:	0800edd4 	.word	0x0800edd4
 800dcec:	0800ee65 	.word	0x0800ee65

0800dcf0 <_Bfree>:
 800dcf0:	b570      	push	{r4, r5, r6, lr}
 800dcf2:	69c6      	ldr	r6, [r0, #28]
 800dcf4:	4605      	mov	r5, r0
 800dcf6:	460c      	mov	r4, r1
 800dcf8:	b976      	cbnz	r6, 800dd18 <_Bfree+0x28>
 800dcfa:	2010      	movs	r0, #16
 800dcfc:	f7fe fb18 	bl	800c330 <malloc>
 800dd00:	4602      	mov	r2, r0
 800dd02:	61e8      	str	r0, [r5, #28]
 800dd04:	b920      	cbnz	r0, 800dd10 <_Bfree+0x20>
 800dd06:	4b09      	ldr	r3, [pc, #36]	; (800dd2c <_Bfree+0x3c>)
 800dd08:	4809      	ldr	r0, [pc, #36]	; (800dd30 <_Bfree+0x40>)
 800dd0a:	218f      	movs	r1, #143	; 0x8f
 800dd0c:	f7fe f81c 	bl	800bd48 <__assert_func>
 800dd10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd14:	6006      	str	r6, [r0, #0]
 800dd16:	60c6      	str	r6, [r0, #12]
 800dd18:	b13c      	cbz	r4, 800dd2a <_Bfree+0x3a>
 800dd1a:	69eb      	ldr	r3, [r5, #28]
 800dd1c:	6862      	ldr	r2, [r4, #4]
 800dd1e:	68db      	ldr	r3, [r3, #12]
 800dd20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd24:	6021      	str	r1, [r4, #0]
 800dd26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dd2a:	bd70      	pop	{r4, r5, r6, pc}
 800dd2c:	0800edd4 	.word	0x0800edd4
 800dd30:	0800ee65 	.word	0x0800ee65

0800dd34 <__multadd>:
 800dd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd38:	690d      	ldr	r5, [r1, #16]
 800dd3a:	4607      	mov	r7, r0
 800dd3c:	460c      	mov	r4, r1
 800dd3e:	461e      	mov	r6, r3
 800dd40:	f101 0c14 	add.w	ip, r1, #20
 800dd44:	2000      	movs	r0, #0
 800dd46:	f8dc 3000 	ldr.w	r3, [ip]
 800dd4a:	b299      	uxth	r1, r3
 800dd4c:	fb02 6101 	mla	r1, r2, r1, r6
 800dd50:	0c1e      	lsrs	r6, r3, #16
 800dd52:	0c0b      	lsrs	r3, r1, #16
 800dd54:	fb02 3306 	mla	r3, r2, r6, r3
 800dd58:	b289      	uxth	r1, r1
 800dd5a:	3001      	adds	r0, #1
 800dd5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dd60:	4285      	cmp	r5, r0
 800dd62:	f84c 1b04 	str.w	r1, [ip], #4
 800dd66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dd6a:	dcec      	bgt.n	800dd46 <__multadd+0x12>
 800dd6c:	b30e      	cbz	r6, 800ddb2 <__multadd+0x7e>
 800dd6e:	68a3      	ldr	r3, [r4, #8]
 800dd70:	42ab      	cmp	r3, r5
 800dd72:	dc19      	bgt.n	800dda8 <__multadd+0x74>
 800dd74:	6861      	ldr	r1, [r4, #4]
 800dd76:	4638      	mov	r0, r7
 800dd78:	3101      	adds	r1, #1
 800dd7a:	f7ff ff79 	bl	800dc70 <_Balloc>
 800dd7e:	4680      	mov	r8, r0
 800dd80:	b928      	cbnz	r0, 800dd8e <__multadd+0x5a>
 800dd82:	4602      	mov	r2, r0
 800dd84:	4b0c      	ldr	r3, [pc, #48]	; (800ddb8 <__multadd+0x84>)
 800dd86:	480d      	ldr	r0, [pc, #52]	; (800ddbc <__multadd+0x88>)
 800dd88:	21ba      	movs	r1, #186	; 0xba
 800dd8a:	f7fd ffdd 	bl	800bd48 <__assert_func>
 800dd8e:	6922      	ldr	r2, [r4, #16]
 800dd90:	3202      	adds	r2, #2
 800dd92:	f104 010c 	add.w	r1, r4, #12
 800dd96:	0092      	lsls	r2, r2, #2
 800dd98:	300c      	adds	r0, #12
 800dd9a:	f7fe fea0 	bl	800cade <memcpy>
 800dd9e:	4621      	mov	r1, r4
 800dda0:	4638      	mov	r0, r7
 800dda2:	f7ff ffa5 	bl	800dcf0 <_Bfree>
 800dda6:	4644      	mov	r4, r8
 800dda8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ddac:	3501      	adds	r5, #1
 800ddae:	615e      	str	r6, [r3, #20]
 800ddb0:	6125      	str	r5, [r4, #16]
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb8:	0800ee43 	.word	0x0800ee43
 800ddbc:	0800ee65 	.word	0x0800ee65

0800ddc0 <__hi0bits>:
 800ddc0:	0c03      	lsrs	r3, r0, #16
 800ddc2:	041b      	lsls	r3, r3, #16
 800ddc4:	b9d3      	cbnz	r3, 800ddfc <__hi0bits+0x3c>
 800ddc6:	0400      	lsls	r0, r0, #16
 800ddc8:	2310      	movs	r3, #16
 800ddca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ddce:	bf04      	itt	eq
 800ddd0:	0200      	lsleq	r0, r0, #8
 800ddd2:	3308      	addeq	r3, #8
 800ddd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ddd8:	bf04      	itt	eq
 800ddda:	0100      	lsleq	r0, r0, #4
 800dddc:	3304      	addeq	r3, #4
 800ddde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dde2:	bf04      	itt	eq
 800dde4:	0080      	lsleq	r0, r0, #2
 800dde6:	3302      	addeq	r3, #2
 800dde8:	2800      	cmp	r0, #0
 800ddea:	db05      	blt.n	800ddf8 <__hi0bits+0x38>
 800ddec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ddf0:	f103 0301 	add.w	r3, r3, #1
 800ddf4:	bf08      	it	eq
 800ddf6:	2320      	moveq	r3, #32
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	4770      	bx	lr
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	e7e4      	b.n	800ddca <__hi0bits+0xa>

0800de00 <__lo0bits>:
 800de00:	6803      	ldr	r3, [r0, #0]
 800de02:	f013 0207 	ands.w	r2, r3, #7
 800de06:	d00c      	beq.n	800de22 <__lo0bits+0x22>
 800de08:	07d9      	lsls	r1, r3, #31
 800de0a:	d422      	bmi.n	800de52 <__lo0bits+0x52>
 800de0c:	079a      	lsls	r2, r3, #30
 800de0e:	bf49      	itett	mi
 800de10:	085b      	lsrmi	r3, r3, #1
 800de12:	089b      	lsrpl	r3, r3, #2
 800de14:	6003      	strmi	r3, [r0, #0]
 800de16:	2201      	movmi	r2, #1
 800de18:	bf5c      	itt	pl
 800de1a:	6003      	strpl	r3, [r0, #0]
 800de1c:	2202      	movpl	r2, #2
 800de1e:	4610      	mov	r0, r2
 800de20:	4770      	bx	lr
 800de22:	b299      	uxth	r1, r3
 800de24:	b909      	cbnz	r1, 800de2a <__lo0bits+0x2a>
 800de26:	0c1b      	lsrs	r3, r3, #16
 800de28:	2210      	movs	r2, #16
 800de2a:	b2d9      	uxtb	r1, r3
 800de2c:	b909      	cbnz	r1, 800de32 <__lo0bits+0x32>
 800de2e:	3208      	adds	r2, #8
 800de30:	0a1b      	lsrs	r3, r3, #8
 800de32:	0719      	lsls	r1, r3, #28
 800de34:	bf04      	itt	eq
 800de36:	091b      	lsreq	r3, r3, #4
 800de38:	3204      	addeq	r2, #4
 800de3a:	0799      	lsls	r1, r3, #30
 800de3c:	bf04      	itt	eq
 800de3e:	089b      	lsreq	r3, r3, #2
 800de40:	3202      	addeq	r2, #2
 800de42:	07d9      	lsls	r1, r3, #31
 800de44:	d403      	bmi.n	800de4e <__lo0bits+0x4e>
 800de46:	085b      	lsrs	r3, r3, #1
 800de48:	f102 0201 	add.w	r2, r2, #1
 800de4c:	d003      	beq.n	800de56 <__lo0bits+0x56>
 800de4e:	6003      	str	r3, [r0, #0]
 800de50:	e7e5      	b.n	800de1e <__lo0bits+0x1e>
 800de52:	2200      	movs	r2, #0
 800de54:	e7e3      	b.n	800de1e <__lo0bits+0x1e>
 800de56:	2220      	movs	r2, #32
 800de58:	e7e1      	b.n	800de1e <__lo0bits+0x1e>
	...

0800de5c <__i2b>:
 800de5c:	b510      	push	{r4, lr}
 800de5e:	460c      	mov	r4, r1
 800de60:	2101      	movs	r1, #1
 800de62:	f7ff ff05 	bl	800dc70 <_Balloc>
 800de66:	4602      	mov	r2, r0
 800de68:	b928      	cbnz	r0, 800de76 <__i2b+0x1a>
 800de6a:	4b05      	ldr	r3, [pc, #20]	; (800de80 <__i2b+0x24>)
 800de6c:	4805      	ldr	r0, [pc, #20]	; (800de84 <__i2b+0x28>)
 800de6e:	f240 1145 	movw	r1, #325	; 0x145
 800de72:	f7fd ff69 	bl	800bd48 <__assert_func>
 800de76:	2301      	movs	r3, #1
 800de78:	6144      	str	r4, [r0, #20]
 800de7a:	6103      	str	r3, [r0, #16]
 800de7c:	bd10      	pop	{r4, pc}
 800de7e:	bf00      	nop
 800de80:	0800ee43 	.word	0x0800ee43
 800de84:	0800ee65 	.word	0x0800ee65

0800de88 <__multiply>:
 800de88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de8c:	4691      	mov	r9, r2
 800de8e:	690a      	ldr	r2, [r1, #16]
 800de90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de94:	429a      	cmp	r2, r3
 800de96:	bfb8      	it	lt
 800de98:	460b      	movlt	r3, r1
 800de9a:	460c      	mov	r4, r1
 800de9c:	bfbc      	itt	lt
 800de9e:	464c      	movlt	r4, r9
 800dea0:	4699      	movlt	r9, r3
 800dea2:	6927      	ldr	r7, [r4, #16]
 800dea4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dea8:	68a3      	ldr	r3, [r4, #8]
 800deaa:	6861      	ldr	r1, [r4, #4]
 800deac:	eb07 060a 	add.w	r6, r7, sl
 800deb0:	42b3      	cmp	r3, r6
 800deb2:	b085      	sub	sp, #20
 800deb4:	bfb8      	it	lt
 800deb6:	3101      	addlt	r1, #1
 800deb8:	f7ff feda 	bl	800dc70 <_Balloc>
 800debc:	b930      	cbnz	r0, 800decc <__multiply+0x44>
 800debe:	4602      	mov	r2, r0
 800dec0:	4b44      	ldr	r3, [pc, #272]	; (800dfd4 <__multiply+0x14c>)
 800dec2:	4845      	ldr	r0, [pc, #276]	; (800dfd8 <__multiply+0x150>)
 800dec4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800dec8:	f7fd ff3e 	bl	800bd48 <__assert_func>
 800decc:	f100 0514 	add.w	r5, r0, #20
 800ded0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ded4:	462b      	mov	r3, r5
 800ded6:	2200      	movs	r2, #0
 800ded8:	4543      	cmp	r3, r8
 800deda:	d321      	bcc.n	800df20 <__multiply+0x98>
 800dedc:	f104 0314 	add.w	r3, r4, #20
 800dee0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dee4:	f109 0314 	add.w	r3, r9, #20
 800dee8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800deec:	9202      	str	r2, [sp, #8]
 800deee:	1b3a      	subs	r2, r7, r4
 800def0:	3a15      	subs	r2, #21
 800def2:	f022 0203 	bic.w	r2, r2, #3
 800def6:	3204      	adds	r2, #4
 800def8:	f104 0115 	add.w	r1, r4, #21
 800defc:	428f      	cmp	r7, r1
 800defe:	bf38      	it	cc
 800df00:	2204      	movcc	r2, #4
 800df02:	9201      	str	r2, [sp, #4]
 800df04:	9a02      	ldr	r2, [sp, #8]
 800df06:	9303      	str	r3, [sp, #12]
 800df08:	429a      	cmp	r2, r3
 800df0a:	d80c      	bhi.n	800df26 <__multiply+0x9e>
 800df0c:	2e00      	cmp	r6, #0
 800df0e:	dd03      	ble.n	800df18 <__multiply+0x90>
 800df10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800df14:	2b00      	cmp	r3, #0
 800df16:	d05b      	beq.n	800dfd0 <__multiply+0x148>
 800df18:	6106      	str	r6, [r0, #16]
 800df1a:	b005      	add	sp, #20
 800df1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df20:	f843 2b04 	str.w	r2, [r3], #4
 800df24:	e7d8      	b.n	800ded8 <__multiply+0x50>
 800df26:	f8b3 a000 	ldrh.w	sl, [r3]
 800df2a:	f1ba 0f00 	cmp.w	sl, #0
 800df2e:	d024      	beq.n	800df7a <__multiply+0xf2>
 800df30:	f104 0e14 	add.w	lr, r4, #20
 800df34:	46a9      	mov	r9, r5
 800df36:	f04f 0c00 	mov.w	ip, #0
 800df3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800df3e:	f8d9 1000 	ldr.w	r1, [r9]
 800df42:	fa1f fb82 	uxth.w	fp, r2
 800df46:	b289      	uxth	r1, r1
 800df48:	fb0a 110b 	mla	r1, sl, fp, r1
 800df4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800df50:	f8d9 2000 	ldr.w	r2, [r9]
 800df54:	4461      	add	r1, ip
 800df56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df5a:	fb0a c20b 	mla	r2, sl, fp, ip
 800df5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800df62:	b289      	uxth	r1, r1
 800df64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df68:	4577      	cmp	r7, lr
 800df6a:	f849 1b04 	str.w	r1, [r9], #4
 800df6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df72:	d8e2      	bhi.n	800df3a <__multiply+0xb2>
 800df74:	9a01      	ldr	r2, [sp, #4]
 800df76:	f845 c002 	str.w	ip, [r5, r2]
 800df7a:	9a03      	ldr	r2, [sp, #12]
 800df7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800df80:	3304      	adds	r3, #4
 800df82:	f1b9 0f00 	cmp.w	r9, #0
 800df86:	d021      	beq.n	800dfcc <__multiply+0x144>
 800df88:	6829      	ldr	r1, [r5, #0]
 800df8a:	f104 0c14 	add.w	ip, r4, #20
 800df8e:	46ae      	mov	lr, r5
 800df90:	f04f 0a00 	mov.w	sl, #0
 800df94:	f8bc b000 	ldrh.w	fp, [ip]
 800df98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800df9c:	fb09 220b 	mla	r2, r9, fp, r2
 800dfa0:	4452      	add	r2, sl
 800dfa2:	b289      	uxth	r1, r1
 800dfa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dfa8:	f84e 1b04 	str.w	r1, [lr], #4
 800dfac:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dfb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dfb4:	f8be 1000 	ldrh.w	r1, [lr]
 800dfb8:	fb09 110a 	mla	r1, r9, sl, r1
 800dfbc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dfc0:	4567      	cmp	r7, ip
 800dfc2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dfc6:	d8e5      	bhi.n	800df94 <__multiply+0x10c>
 800dfc8:	9a01      	ldr	r2, [sp, #4]
 800dfca:	50a9      	str	r1, [r5, r2]
 800dfcc:	3504      	adds	r5, #4
 800dfce:	e799      	b.n	800df04 <__multiply+0x7c>
 800dfd0:	3e01      	subs	r6, #1
 800dfd2:	e79b      	b.n	800df0c <__multiply+0x84>
 800dfd4:	0800ee43 	.word	0x0800ee43
 800dfd8:	0800ee65 	.word	0x0800ee65

0800dfdc <__pow5mult>:
 800dfdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfe0:	4615      	mov	r5, r2
 800dfe2:	f012 0203 	ands.w	r2, r2, #3
 800dfe6:	4606      	mov	r6, r0
 800dfe8:	460f      	mov	r7, r1
 800dfea:	d007      	beq.n	800dffc <__pow5mult+0x20>
 800dfec:	4c25      	ldr	r4, [pc, #148]	; (800e084 <__pow5mult+0xa8>)
 800dfee:	3a01      	subs	r2, #1
 800dff0:	2300      	movs	r3, #0
 800dff2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dff6:	f7ff fe9d 	bl	800dd34 <__multadd>
 800dffa:	4607      	mov	r7, r0
 800dffc:	10ad      	asrs	r5, r5, #2
 800dffe:	d03d      	beq.n	800e07c <__pow5mult+0xa0>
 800e000:	69f4      	ldr	r4, [r6, #28]
 800e002:	b97c      	cbnz	r4, 800e024 <__pow5mult+0x48>
 800e004:	2010      	movs	r0, #16
 800e006:	f7fe f993 	bl	800c330 <malloc>
 800e00a:	4602      	mov	r2, r0
 800e00c:	61f0      	str	r0, [r6, #28]
 800e00e:	b928      	cbnz	r0, 800e01c <__pow5mult+0x40>
 800e010:	4b1d      	ldr	r3, [pc, #116]	; (800e088 <__pow5mult+0xac>)
 800e012:	481e      	ldr	r0, [pc, #120]	; (800e08c <__pow5mult+0xb0>)
 800e014:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e018:	f7fd fe96 	bl	800bd48 <__assert_func>
 800e01c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e020:	6004      	str	r4, [r0, #0]
 800e022:	60c4      	str	r4, [r0, #12]
 800e024:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e028:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e02c:	b94c      	cbnz	r4, 800e042 <__pow5mult+0x66>
 800e02e:	f240 2171 	movw	r1, #625	; 0x271
 800e032:	4630      	mov	r0, r6
 800e034:	f7ff ff12 	bl	800de5c <__i2b>
 800e038:	2300      	movs	r3, #0
 800e03a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e03e:	4604      	mov	r4, r0
 800e040:	6003      	str	r3, [r0, #0]
 800e042:	f04f 0900 	mov.w	r9, #0
 800e046:	07eb      	lsls	r3, r5, #31
 800e048:	d50a      	bpl.n	800e060 <__pow5mult+0x84>
 800e04a:	4639      	mov	r1, r7
 800e04c:	4622      	mov	r2, r4
 800e04e:	4630      	mov	r0, r6
 800e050:	f7ff ff1a 	bl	800de88 <__multiply>
 800e054:	4639      	mov	r1, r7
 800e056:	4680      	mov	r8, r0
 800e058:	4630      	mov	r0, r6
 800e05a:	f7ff fe49 	bl	800dcf0 <_Bfree>
 800e05e:	4647      	mov	r7, r8
 800e060:	106d      	asrs	r5, r5, #1
 800e062:	d00b      	beq.n	800e07c <__pow5mult+0xa0>
 800e064:	6820      	ldr	r0, [r4, #0]
 800e066:	b938      	cbnz	r0, 800e078 <__pow5mult+0x9c>
 800e068:	4622      	mov	r2, r4
 800e06a:	4621      	mov	r1, r4
 800e06c:	4630      	mov	r0, r6
 800e06e:	f7ff ff0b 	bl	800de88 <__multiply>
 800e072:	6020      	str	r0, [r4, #0]
 800e074:	f8c0 9000 	str.w	r9, [r0]
 800e078:	4604      	mov	r4, r0
 800e07a:	e7e4      	b.n	800e046 <__pow5mult+0x6a>
 800e07c:	4638      	mov	r0, r7
 800e07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e082:	bf00      	nop
 800e084:	0800efb0 	.word	0x0800efb0
 800e088:	0800edd4 	.word	0x0800edd4
 800e08c:	0800ee65 	.word	0x0800ee65

0800e090 <__lshift>:
 800e090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e094:	460c      	mov	r4, r1
 800e096:	6849      	ldr	r1, [r1, #4]
 800e098:	6923      	ldr	r3, [r4, #16]
 800e09a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e09e:	68a3      	ldr	r3, [r4, #8]
 800e0a0:	4607      	mov	r7, r0
 800e0a2:	4691      	mov	r9, r2
 800e0a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e0a8:	f108 0601 	add.w	r6, r8, #1
 800e0ac:	42b3      	cmp	r3, r6
 800e0ae:	db0b      	blt.n	800e0c8 <__lshift+0x38>
 800e0b0:	4638      	mov	r0, r7
 800e0b2:	f7ff fddd 	bl	800dc70 <_Balloc>
 800e0b6:	4605      	mov	r5, r0
 800e0b8:	b948      	cbnz	r0, 800e0ce <__lshift+0x3e>
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	4b28      	ldr	r3, [pc, #160]	; (800e160 <__lshift+0xd0>)
 800e0be:	4829      	ldr	r0, [pc, #164]	; (800e164 <__lshift+0xd4>)
 800e0c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e0c4:	f7fd fe40 	bl	800bd48 <__assert_func>
 800e0c8:	3101      	adds	r1, #1
 800e0ca:	005b      	lsls	r3, r3, #1
 800e0cc:	e7ee      	b.n	800e0ac <__lshift+0x1c>
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	f100 0114 	add.w	r1, r0, #20
 800e0d4:	f100 0210 	add.w	r2, r0, #16
 800e0d8:	4618      	mov	r0, r3
 800e0da:	4553      	cmp	r3, sl
 800e0dc:	db33      	blt.n	800e146 <__lshift+0xb6>
 800e0de:	6920      	ldr	r0, [r4, #16]
 800e0e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e0e4:	f104 0314 	add.w	r3, r4, #20
 800e0e8:	f019 091f 	ands.w	r9, r9, #31
 800e0ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e0f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e0f4:	d02b      	beq.n	800e14e <__lshift+0xbe>
 800e0f6:	f1c9 0e20 	rsb	lr, r9, #32
 800e0fa:	468a      	mov	sl, r1
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	6818      	ldr	r0, [r3, #0]
 800e100:	fa00 f009 	lsl.w	r0, r0, r9
 800e104:	4310      	orrs	r0, r2
 800e106:	f84a 0b04 	str.w	r0, [sl], #4
 800e10a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e10e:	459c      	cmp	ip, r3
 800e110:	fa22 f20e 	lsr.w	r2, r2, lr
 800e114:	d8f3      	bhi.n	800e0fe <__lshift+0x6e>
 800e116:	ebac 0304 	sub.w	r3, ip, r4
 800e11a:	3b15      	subs	r3, #21
 800e11c:	f023 0303 	bic.w	r3, r3, #3
 800e120:	3304      	adds	r3, #4
 800e122:	f104 0015 	add.w	r0, r4, #21
 800e126:	4584      	cmp	ip, r0
 800e128:	bf38      	it	cc
 800e12a:	2304      	movcc	r3, #4
 800e12c:	50ca      	str	r2, [r1, r3]
 800e12e:	b10a      	cbz	r2, 800e134 <__lshift+0xa4>
 800e130:	f108 0602 	add.w	r6, r8, #2
 800e134:	3e01      	subs	r6, #1
 800e136:	4638      	mov	r0, r7
 800e138:	612e      	str	r6, [r5, #16]
 800e13a:	4621      	mov	r1, r4
 800e13c:	f7ff fdd8 	bl	800dcf0 <_Bfree>
 800e140:	4628      	mov	r0, r5
 800e142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e146:	f842 0f04 	str.w	r0, [r2, #4]!
 800e14a:	3301      	adds	r3, #1
 800e14c:	e7c5      	b.n	800e0da <__lshift+0x4a>
 800e14e:	3904      	subs	r1, #4
 800e150:	f853 2b04 	ldr.w	r2, [r3], #4
 800e154:	f841 2f04 	str.w	r2, [r1, #4]!
 800e158:	459c      	cmp	ip, r3
 800e15a:	d8f9      	bhi.n	800e150 <__lshift+0xc0>
 800e15c:	e7ea      	b.n	800e134 <__lshift+0xa4>
 800e15e:	bf00      	nop
 800e160:	0800ee43 	.word	0x0800ee43
 800e164:	0800ee65 	.word	0x0800ee65

0800e168 <__mcmp>:
 800e168:	b530      	push	{r4, r5, lr}
 800e16a:	6902      	ldr	r2, [r0, #16]
 800e16c:	690c      	ldr	r4, [r1, #16]
 800e16e:	1b12      	subs	r2, r2, r4
 800e170:	d10e      	bne.n	800e190 <__mcmp+0x28>
 800e172:	f100 0314 	add.w	r3, r0, #20
 800e176:	3114      	adds	r1, #20
 800e178:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e17c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e180:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e184:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e188:	42a5      	cmp	r5, r4
 800e18a:	d003      	beq.n	800e194 <__mcmp+0x2c>
 800e18c:	d305      	bcc.n	800e19a <__mcmp+0x32>
 800e18e:	2201      	movs	r2, #1
 800e190:	4610      	mov	r0, r2
 800e192:	bd30      	pop	{r4, r5, pc}
 800e194:	4283      	cmp	r3, r0
 800e196:	d3f3      	bcc.n	800e180 <__mcmp+0x18>
 800e198:	e7fa      	b.n	800e190 <__mcmp+0x28>
 800e19a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e19e:	e7f7      	b.n	800e190 <__mcmp+0x28>

0800e1a0 <__mdiff>:
 800e1a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a4:	460c      	mov	r4, r1
 800e1a6:	4606      	mov	r6, r0
 800e1a8:	4611      	mov	r1, r2
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	4690      	mov	r8, r2
 800e1ae:	f7ff ffdb 	bl	800e168 <__mcmp>
 800e1b2:	1e05      	subs	r5, r0, #0
 800e1b4:	d110      	bne.n	800e1d8 <__mdiff+0x38>
 800e1b6:	4629      	mov	r1, r5
 800e1b8:	4630      	mov	r0, r6
 800e1ba:	f7ff fd59 	bl	800dc70 <_Balloc>
 800e1be:	b930      	cbnz	r0, 800e1ce <__mdiff+0x2e>
 800e1c0:	4b3a      	ldr	r3, [pc, #232]	; (800e2ac <__mdiff+0x10c>)
 800e1c2:	4602      	mov	r2, r0
 800e1c4:	f240 2137 	movw	r1, #567	; 0x237
 800e1c8:	4839      	ldr	r0, [pc, #228]	; (800e2b0 <__mdiff+0x110>)
 800e1ca:	f7fd fdbd 	bl	800bd48 <__assert_func>
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e1d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d8:	bfa4      	itt	ge
 800e1da:	4643      	movge	r3, r8
 800e1dc:	46a0      	movge	r8, r4
 800e1de:	4630      	mov	r0, r6
 800e1e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e1e4:	bfa6      	itte	ge
 800e1e6:	461c      	movge	r4, r3
 800e1e8:	2500      	movge	r5, #0
 800e1ea:	2501      	movlt	r5, #1
 800e1ec:	f7ff fd40 	bl	800dc70 <_Balloc>
 800e1f0:	b920      	cbnz	r0, 800e1fc <__mdiff+0x5c>
 800e1f2:	4b2e      	ldr	r3, [pc, #184]	; (800e2ac <__mdiff+0x10c>)
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	f240 2145 	movw	r1, #581	; 0x245
 800e1fa:	e7e5      	b.n	800e1c8 <__mdiff+0x28>
 800e1fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e200:	6926      	ldr	r6, [r4, #16]
 800e202:	60c5      	str	r5, [r0, #12]
 800e204:	f104 0914 	add.w	r9, r4, #20
 800e208:	f108 0514 	add.w	r5, r8, #20
 800e20c:	f100 0e14 	add.w	lr, r0, #20
 800e210:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e214:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e218:	f108 0210 	add.w	r2, r8, #16
 800e21c:	46f2      	mov	sl, lr
 800e21e:	2100      	movs	r1, #0
 800e220:	f859 3b04 	ldr.w	r3, [r9], #4
 800e224:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e228:	fa11 f88b 	uxtah	r8, r1, fp
 800e22c:	b299      	uxth	r1, r3
 800e22e:	0c1b      	lsrs	r3, r3, #16
 800e230:	eba8 0801 	sub.w	r8, r8, r1
 800e234:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e238:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e23c:	fa1f f888 	uxth.w	r8, r8
 800e240:	1419      	asrs	r1, r3, #16
 800e242:	454e      	cmp	r6, r9
 800e244:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e248:	f84a 3b04 	str.w	r3, [sl], #4
 800e24c:	d8e8      	bhi.n	800e220 <__mdiff+0x80>
 800e24e:	1b33      	subs	r3, r6, r4
 800e250:	3b15      	subs	r3, #21
 800e252:	f023 0303 	bic.w	r3, r3, #3
 800e256:	3304      	adds	r3, #4
 800e258:	3415      	adds	r4, #21
 800e25a:	42a6      	cmp	r6, r4
 800e25c:	bf38      	it	cc
 800e25e:	2304      	movcc	r3, #4
 800e260:	441d      	add	r5, r3
 800e262:	4473      	add	r3, lr
 800e264:	469e      	mov	lr, r3
 800e266:	462e      	mov	r6, r5
 800e268:	4566      	cmp	r6, ip
 800e26a:	d30e      	bcc.n	800e28a <__mdiff+0xea>
 800e26c:	f10c 0203 	add.w	r2, ip, #3
 800e270:	1b52      	subs	r2, r2, r5
 800e272:	f022 0203 	bic.w	r2, r2, #3
 800e276:	3d03      	subs	r5, #3
 800e278:	45ac      	cmp	ip, r5
 800e27a:	bf38      	it	cc
 800e27c:	2200      	movcc	r2, #0
 800e27e:	4413      	add	r3, r2
 800e280:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e284:	b17a      	cbz	r2, 800e2a6 <__mdiff+0x106>
 800e286:	6107      	str	r7, [r0, #16]
 800e288:	e7a4      	b.n	800e1d4 <__mdiff+0x34>
 800e28a:	f856 8b04 	ldr.w	r8, [r6], #4
 800e28e:	fa11 f288 	uxtah	r2, r1, r8
 800e292:	1414      	asrs	r4, r2, #16
 800e294:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e298:	b292      	uxth	r2, r2
 800e29a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e29e:	f84e 2b04 	str.w	r2, [lr], #4
 800e2a2:	1421      	asrs	r1, r4, #16
 800e2a4:	e7e0      	b.n	800e268 <__mdiff+0xc8>
 800e2a6:	3f01      	subs	r7, #1
 800e2a8:	e7ea      	b.n	800e280 <__mdiff+0xe0>
 800e2aa:	bf00      	nop
 800e2ac:	0800ee43 	.word	0x0800ee43
 800e2b0:	0800ee65 	.word	0x0800ee65

0800e2b4 <__d2b>:
 800e2b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e2b8:	460f      	mov	r7, r1
 800e2ba:	2101      	movs	r1, #1
 800e2bc:	ec59 8b10 	vmov	r8, r9, d0
 800e2c0:	4616      	mov	r6, r2
 800e2c2:	f7ff fcd5 	bl	800dc70 <_Balloc>
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	b930      	cbnz	r0, 800e2d8 <__d2b+0x24>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	4b24      	ldr	r3, [pc, #144]	; (800e360 <__d2b+0xac>)
 800e2ce:	4825      	ldr	r0, [pc, #148]	; (800e364 <__d2b+0xb0>)
 800e2d0:	f240 310f 	movw	r1, #783	; 0x30f
 800e2d4:	f7fd fd38 	bl	800bd48 <__assert_func>
 800e2d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e2dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e2e0:	bb2d      	cbnz	r5, 800e32e <__d2b+0x7a>
 800e2e2:	9301      	str	r3, [sp, #4]
 800e2e4:	f1b8 0300 	subs.w	r3, r8, #0
 800e2e8:	d026      	beq.n	800e338 <__d2b+0x84>
 800e2ea:	4668      	mov	r0, sp
 800e2ec:	9300      	str	r3, [sp, #0]
 800e2ee:	f7ff fd87 	bl	800de00 <__lo0bits>
 800e2f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e2f6:	b1e8      	cbz	r0, 800e334 <__d2b+0x80>
 800e2f8:	f1c0 0320 	rsb	r3, r0, #32
 800e2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800e300:	430b      	orrs	r3, r1
 800e302:	40c2      	lsrs	r2, r0
 800e304:	6163      	str	r3, [r4, #20]
 800e306:	9201      	str	r2, [sp, #4]
 800e308:	9b01      	ldr	r3, [sp, #4]
 800e30a:	61a3      	str	r3, [r4, #24]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	bf14      	ite	ne
 800e310:	2202      	movne	r2, #2
 800e312:	2201      	moveq	r2, #1
 800e314:	6122      	str	r2, [r4, #16]
 800e316:	b1bd      	cbz	r5, 800e348 <__d2b+0x94>
 800e318:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e31c:	4405      	add	r5, r0
 800e31e:	603d      	str	r5, [r7, #0]
 800e320:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e324:	6030      	str	r0, [r6, #0]
 800e326:	4620      	mov	r0, r4
 800e328:	b003      	add	sp, #12
 800e32a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e32e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e332:	e7d6      	b.n	800e2e2 <__d2b+0x2e>
 800e334:	6161      	str	r1, [r4, #20]
 800e336:	e7e7      	b.n	800e308 <__d2b+0x54>
 800e338:	a801      	add	r0, sp, #4
 800e33a:	f7ff fd61 	bl	800de00 <__lo0bits>
 800e33e:	9b01      	ldr	r3, [sp, #4]
 800e340:	6163      	str	r3, [r4, #20]
 800e342:	3020      	adds	r0, #32
 800e344:	2201      	movs	r2, #1
 800e346:	e7e5      	b.n	800e314 <__d2b+0x60>
 800e348:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e34c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e350:	6038      	str	r0, [r7, #0]
 800e352:	6918      	ldr	r0, [r3, #16]
 800e354:	f7ff fd34 	bl	800ddc0 <__hi0bits>
 800e358:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e35c:	e7e2      	b.n	800e324 <__d2b+0x70>
 800e35e:	bf00      	nop
 800e360:	0800ee43 	.word	0x0800ee43
 800e364:	0800ee65 	.word	0x0800ee65

0800e368 <__sread>:
 800e368:	b510      	push	{r4, lr}
 800e36a:	460c      	mov	r4, r1
 800e36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e370:	f000 f978 	bl	800e664 <_read_r>
 800e374:	2800      	cmp	r0, #0
 800e376:	bfab      	itete	ge
 800e378:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e37a:	89a3      	ldrhlt	r3, [r4, #12]
 800e37c:	181b      	addge	r3, r3, r0
 800e37e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e382:	bfac      	ite	ge
 800e384:	6563      	strge	r3, [r4, #84]	; 0x54
 800e386:	81a3      	strhlt	r3, [r4, #12]
 800e388:	bd10      	pop	{r4, pc}

0800e38a <__swrite>:
 800e38a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e38e:	461f      	mov	r7, r3
 800e390:	898b      	ldrh	r3, [r1, #12]
 800e392:	05db      	lsls	r3, r3, #23
 800e394:	4605      	mov	r5, r0
 800e396:	460c      	mov	r4, r1
 800e398:	4616      	mov	r6, r2
 800e39a:	d505      	bpl.n	800e3a8 <__swrite+0x1e>
 800e39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3a0:	2302      	movs	r3, #2
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f000 f94c 	bl	800e640 <_lseek_r>
 800e3a8:	89a3      	ldrh	r3, [r4, #12]
 800e3aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3b2:	81a3      	strh	r3, [r4, #12]
 800e3b4:	4632      	mov	r2, r6
 800e3b6:	463b      	mov	r3, r7
 800e3b8:	4628      	mov	r0, r5
 800e3ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3be:	f000 b963 	b.w	800e688 <_write_r>

0800e3c2 <__sseek>:
 800e3c2:	b510      	push	{r4, lr}
 800e3c4:	460c      	mov	r4, r1
 800e3c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3ca:	f000 f939 	bl	800e640 <_lseek_r>
 800e3ce:	1c43      	adds	r3, r0, #1
 800e3d0:	89a3      	ldrh	r3, [r4, #12]
 800e3d2:	bf15      	itete	ne
 800e3d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e3d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e3da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e3de:	81a3      	strheq	r3, [r4, #12]
 800e3e0:	bf18      	it	ne
 800e3e2:	81a3      	strhne	r3, [r4, #12]
 800e3e4:	bd10      	pop	{r4, pc}

0800e3e6 <__sclose>:
 800e3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3ea:	f000 b8f7 	b.w	800e5dc <_close_r>

0800e3ee <__swbuf_r>:
 800e3ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3f0:	460e      	mov	r6, r1
 800e3f2:	4614      	mov	r4, r2
 800e3f4:	4605      	mov	r5, r0
 800e3f6:	b118      	cbz	r0, 800e400 <__swbuf_r+0x12>
 800e3f8:	6a03      	ldr	r3, [r0, #32]
 800e3fa:	b90b      	cbnz	r3, 800e400 <__swbuf_r+0x12>
 800e3fc:	f7fe fa70 	bl	800c8e0 <__sinit>
 800e400:	69a3      	ldr	r3, [r4, #24]
 800e402:	60a3      	str	r3, [r4, #8]
 800e404:	89a3      	ldrh	r3, [r4, #12]
 800e406:	071a      	lsls	r2, r3, #28
 800e408:	d525      	bpl.n	800e456 <__swbuf_r+0x68>
 800e40a:	6923      	ldr	r3, [r4, #16]
 800e40c:	b31b      	cbz	r3, 800e456 <__swbuf_r+0x68>
 800e40e:	6823      	ldr	r3, [r4, #0]
 800e410:	6922      	ldr	r2, [r4, #16]
 800e412:	1a98      	subs	r0, r3, r2
 800e414:	6963      	ldr	r3, [r4, #20]
 800e416:	b2f6      	uxtb	r6, r6
 800e418:	4283      	cmp	r3, r0
 800e41a:	4637      	mov	r7, r6
 800e41c:	dc04      	bgt.n	800e428 <__swbuf_r+0x3a>
 800e41e:	4621      	mov	r1, r4
 800e420:	4628      	mov	r0, r5
 800e422:	f7ff fbfd 	bl	800dc20 <_fflush_r>
 800e426:	b9e0      	cbnz	r0, 800e462 <__swbuf_r+0x74>
 800e428:	68a3      	ldr	r3, [r4, #8]
 800e42a:	3b01      	subs	r3, #1
 800e42c:	60a3      	str	r3, [r4, #8]
 800e42e:	6823      	ldr	r3, [r4, #0]
 800e430:	1c5a      	adds	r2, r3, #1
 800e432:	6022      	str	r2, [r4, #0]
 800e434:	701e      	strb	r6, [r3, #0]
 800e436:	6962      	ldr	r2, [r4, #20]
 800e438:	1c43      	adds	r3, r0, #1
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d004      	beq.n	800e448 <__swbuf_r+0x5a>
 800e43e:	89a3      	ldrh	r3, [r4, #12]
 800e440:	07db      	lsls	r3, r3, #31
 800e442:	d506      	bpl.n	800e452 <__swbuf_r+0x64>
 800e444:	2e0a      	cmp	r6, #10
 800e446:	d104      	bne.n	800e452 <__swbuf_r+0x64>
 800e448:	4621      	mov	r1, r4
 800e44a:	4628      	mov	r0, r5
 800e44c:	f7ff fbe8 	bl	800dc20 <_fflush_r>
 800e450:	b938      	cbnz	r0, 800e462 <__swbuf_r+0x74>
 800e452:	4638      	mov	r0, r7
 800e454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e456:	4621      	mov	r1, r4
 800e458:	4628      	mov	r0, r5
 800e45a:	f000 f805 	bl	800e468 <__swsetup_r>
 800e45e:	2800      	cmp	r0, #0
 800e460:	d0d5      	beq.n	800e40e <__swbuf_r+0x20>
 800e462:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e466:	e7f4      	b.n	800e452 <__swbuf_r+0x64>

0800e468 <__swsetup_r>:
 800e468:	b538      	push	{r3, r4, r5, lr}
 800e46a:	4b2a      	ldr	r3, [pc, #168]	; (800e514 <__swsetup_r+0xac>)
 800e46c:	4605      	mov	r5, r0
 800e46e:	6818      	ldr	r0, [r3, #0]
 800e470:	460c      	mov	r4, r1
 800e472:	b118      	cbz	r0, 800e47c <__swsetup_r+0x14>
 800e474:	6a03      	ldr	r3, [r0, #32]
 800e476:	b90b      	cbnz	r3, 800e47c <__swsetup_r+0x14>
 800e478:	f7fe fa32 	bl	800c8e0 <__sinit>
 800e47c:	89a3      	ldrh	r3, [r4, #12]
 800e47e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e482:	0718      	lsls	r0, r3, #28
 800e484:	d422      	bmi.n	800e4cc <__swsetup_r+0x64>
 800e486:	06d9      	lsls	r1, r3, #27
 800e488:	d407      	bmi.n	800e49a <__swsetup_r+0x32>
 800e48a:	2309      	movs	r3, #9
 800e48c:	602b      	str	r3, [r5, #0]
 800e48e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e492:	81a3      	strh	r3, [r4, #12]
 800e494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e498:	e034      	b.n	800e504 <__swsetup_r+0x9c>
 800e49a:	0758      	lsls	r0, r3, #29
 800e49c:	d512      	bpl.n	800e4c4 <__swsetup_r+0x5c>
 800e49e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4a0:	b141      	cbz	r1, 800e4b4 <__swsetup_r+0x4c>
 800e4a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4a6:	4299      	cmp	r1, r3
 800e4a8:	d002      	beq.n	800e4b0 <__swsetup_r+0x48>
 800e4aa:	4628      	mov	r0, r5
 800e4ac:	f7ff f9a2 	bl	800d7f4 <_free_r>
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	6363      	str	r3, [r4, #52]	; 0x34
 800e4b4:	89a3      	ldrh	r3, [r4, #12]
 800e4b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e4ba:	81a3      	strh	r3, [r4, #12]
 800e4bc:	2300      	movs	r3, #0
 800e4be:	6063      	str	r3, [r4, #4]
 800e4c0:	6923      	ldr	r3, [r4, #16]
 800e4c2:	6023      	str	r3, [r4, #0]
 800e4c4:	89a3      	ldrh	r3, [r4, #12]
 800e4c6:	f043 0308 	orr.w	r3, r3, #8
 800e4ca:	81a3      	strh	r3, [r4, #12]
 800e4cc:	6923      	ldr	r3, [r4, #16]
 800e4ce:	b94b      	cbnz	r3, 800e4e4 <__swsetup_r+0x7c>
 800e4d0:	89a3      	ldrh	r3, [r4, #12]
 800e4d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e4d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4da:	d003      	beq.n	800e4e4 <__swsetup_r+0x7c>
 800e4dc:	4621      	mov	r1, r4
 800e4de:	4628      	mov	r0, r5
 800e4e0:	f000 f840 	bl	800e564 <__smakebuf_r>
 800e4e4:	89a0      	ldrh	r0, [r4, #12]
 800e4e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4ea:	f010 0301 	ands.w	r3, r0, #1
 800e4ee:	d00a      	beq.n	800e506 <__swsetup_r+0x9e>
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	60a3      	str	r3, [r4, #8]
 800e4f4:	6963      	ldr	r3, [r4, #20]
 800e4f6:	425b      	negs	r3, r3
 800e4f8:	61a3      	str	r3, [r4, #24]
 800e4fa:	6923      	ldr	r3, [r4, #16]
 800e4fc:	b943      	cbnz	r3, 800e510 <__swsetup_r+0xa8>
 800e4fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e502:	d1c4      	bne.n	800e48e <__swsetup_r+0x26>
 800e504:	bd38      	pop	{r3, r4, r5, pc}
 800e506:	0781      	lsls	r1, r0, #30
 800e508:	bf58      	it	pl
 800e50a:	6963      	ldrpl	r3, [r4, #20]
 800e50c:	60a3      	str	r3, [r4, #8]
 800e50e:	e7f4      	b.n	800e4fa <__swsetup_r+0x92>
 800e510:	2000      	movs	r0, #0
 800e512:	e7f7      	b.n	800e504 <__swsetup_r+0x9c>
 800e514:	20000068 	.word	0x20000068

0800e518 <__swhatbuf_r>:
 800e518:	b570      	push	{r4, r5, r6, lr}
 800e51a:	460c      	mov	r4, r1
 800e51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e520:	2900      	cmp	r1, #0
 800e522:	b096      	sub	sp, #88	; 0x58
 800e524:	4615      	mov	r5, r2
 800e526:	461e      	mov	r6, r3
 800e528:	da0d      	bge.n	800e546 <__swhatbuf_r+0x2e>
 800e52a:	89a3      	ldrh	r3, [r4, #12]
 800e52c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e530:	f04f 0100 	mov.w	r1, #0
 800e534:	bf0c      	ite	eq
 800e536:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e53a:	2340      	movne	r3, #64	; 0x40
 800e53c:	2000      	movs	r0, #0
 800e53e:	6031      	str	r1, [r6, #0]
 800e540:	602b      	str	r3, [r5, #0]
 800e542:	b016      	add	sp, #88	; 0x58
 800e544:	bd70      	pop	{r4, r5, r6, pc}
 800e546:	466a      	mov	r2, sp
 800e548:	f000 f858 	bl	800e5fc <_fstat_r>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	dbec      	blt.n	800e52a <__swhatbuf_r+0x12>
 800e550:	9901      	ldr	r1, [sp, #4]
 800e552:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e556:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e55a:	4259      	negs	r1, r3
 800e55c:	4159      	adcs	r1, r3
 800e55e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e562:	e7eb      	b.n	800e53c <__swhatbuf_r+0x24>

0800e564 <__smakebuf_r>:
 800e564:	898b      	ldrh	r3, [r1, #12]
 800e566:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e568:	079d      	lsls	r5, r3, #30
 800e56a:	4606      	mov	r6, r0
 800e56c:	460c      	mov	r4, r1
 800e56e:	d507      	bpl.n	800e580 <__smakebuf_r+0x1c>
 800e570:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e574:	6023      	str	r3, [r4, #0]
 800e576:	6123      	str	r3, [r4, #16]
 800e578:	2301      	movs	r3, #1
 800e57a:	6163      	str	r3, [r4, #20]
 800e57c:	b002      	add	sp, #8
 800e57e:	bd70      	pop	{r4, r5, r6, pc}
 800e580:	ab01      	add	r3, sp, #4
 800e582:	466a      	mov	r2, sp
 800e584:	f7ff ffc8 	bl	800e518 <__swhatbuf_r>
 800e588:	9900      	ldr	r1, [sp, #0]
 800e58a:	4605      	mov	r5, r0
 800e58c:	4630      	mov	r0, r6
 800e58e:	f7fd feff 	bl	800c390 <_malloc_r>
 800e592:	b948      	cbnz	r0, 800e5a8 <__smakebuf_r+0x44>
 800e594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e598:	059a      	lsls	r2, r3, #22
 800e59a:	d4ef      	bmi.n	800e57c <__smakebuf_r+0x18>
 800e59c:	f023 0303 	bic.w	r3, r3, #3
 800e5a0:	f043 0302 	orr.w	r3, r3, #2
 800e5a4:	81a3      	strh	r3, [r4, #12]
 800e5a6:	e7e3      	b.n	800e570 <__smakebuf_r+0xc>
 800e5a8:	89a3      	ldrh	r3, [r4, #12]
 800e5aa:	6020      	str	r0, [r4, #0]
 800e5ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5b0:	81a3      	strh	r3, [r4, #12]
 800e5b2:	9b00      	ldr	r3, [sp, #0]
 800e5b4:	6163      	str	r3, [r4, #20]
 800e5b6:	9b01      	ldr	r3, [sp, #4]
 800e5b8:	6120      	str	r0, [r4, #16]
 800e5ba:	b15b      	cbz	r3, 800e5d4 <__smakebuf_r+0x70>
 800e5bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5c0:	4630      	mov	r0, r6
 800e5c2:	f000 f82d 	bl	800e620 <_isatty_r>
 800e5c6:	b128      	cbz	r0, 800e5d4 <__smakebuf_r+0x70>
 800e5c8:	89a3      	ldrh	r3, [r4, #12]
 800e5ca:	f023 0303 	bic.w	r3, r3, #3
 800e5ce:	f043 0301 	orr.w	r3, r3, #1
 800e5d2:	81a3      	strh	r3, [r4, #12]
 800e5d4:	89a3      	ldrh	r3, [r4, #12]
 800e5d6:	431d      	orrs	r5, r3
 800e5d8:	81a5      	strh	r5, [r4, #12]
 800e5da:	e7cf      	b.n	800e57c <__smakebuf_r+0x18>

0800e5dc <_close_r>:
 800e5dc:	b538      	push	{r3, r4, r5, lr}
 800e5de:	4d06      	ldr	r5, [pc, #24]	; (800e5f8 <_close_r+0x1c>)
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	4604      	mov	r4, r0
 800e5e4:	4608      	mov	r0, r1
 800e5e6:	602b      	str	r3, [r5, #0]
 800e5e8:	f7f6 fa99 	bl	8004b1e <_close>
 800e5ec:	1c43      	adds	r3, r0, #1
 800e5ee:	d102      	bne.n	800e5f6 <_close_r+0x1a>
 800e5f0:	682b      	ldr	r3, [r5, #0]
 800e5f2:	b103      	cbz	r3, 800e5f6 <_close_r+0x1a>
 800e5f4:	6023      	str	r3, [r4, #0]
 800e5f6:	bd38      	pop	{r3, r4, r5, pc}
 800e5f8:	20004fc8 	.word	0x20004fc8

0800e5fc <_fstat_r>:
 800e5fc:	b538      	push	{r3, r4, r5, lr}
 800e5fe:	4d07      	ldr	r5, [pc, #28]	; (800e61c <_fstat_r+0x20>)
 800e600:	2300      	movs	r3, #0
 800e602:	4604      	mov	r4, r0
 800e604:	4608      	mov	r0, r1
 800e606:	4611      	mov	r1, r2
 800e608:	602b      	str	r3, [r5, #0]
 800e60a:	f7f6 fa94 	bl	8004b36 <_fstat>
 800e60e:	1c43      	adds	r3, r0, #1
 800e610:	d102      	bne.n	800e618 <_fstat_r+0x1c>
 800e612:	682b      	ldr	r3, [r5, #0]
 800e614:	b103      	cbz	r3, 800e618 <_fstat_r+0x1c>
 800e616:	6023      	str	r3, [r4, #0]
 800e618:	bd38      	pop	{r3, r4, r5, pc}
 800e61a:	bf00      	nop
 800e61c:	20004fc8 	.word	0x20004fc8

0800e620 <_isatty_r>:
 800e620:	b538      	push	{r3, r4, r5, lr}
 800e622:	4d06      	ldr	r5, [pc, #24]	; (800e63c <_isatty_r+0x1c>)
 800e624:	2300      	movs	r3, #0
 800e626:	4604      	mov	r4, r0
 800e628:	4608      	mov	r0, r1
 800e62a:	602b      	str	r3, [r5, #0]
 800e62c:	f7f6 fa93 	bl	8004b56 <_isatty>
 800e630:	1c43      	adds	r3, r0, #1
 800e632:	d102      	bne.n	800e63a <_isatty_r+0x1a>
 800e634:	682b      	ldr	r3, [r5, #0]
 800e636:	b103      	cbz	r3, 800e63a <_isatty_r+0x1a>
 800e638:	6023      	str	r3, [r4, #0]
 800e63a:	bd38      	pop	{r3, r4, r5, pc}
 800e63c:	20004fc8 	.word	0x20004fc8

0800e640 <_lseek_r>:
 800e640:	b538      	push	{r3, r4, r5, lr}
 800e642:	4d07      	ldr	r5, [pc, #28]	; (800e660 <_lseek_r+0x20>)
 800e644:	4604      	mov	r4, r0
 800e646:	4608      	mov	r0, r1
 800e648:	4611      	mov	r1, r2
 800e64a:	2200      	movs	r2, #0
 800e64c:	602a      	str	r2, [r5, #0]
 800e64e:	461a      	mov	r2, r3
 800e650:	f7f6 fa8c 	bl	8004b6c <_lseek>
 800e654:	1c43      	adds	r3, r0, #1
 800e656:	d102      	bne.n	800e65e <_lseek_r+0x1e>
 800e658:	682b      	ldr	r3, [r5, #0]
 800e65a:	b103      	cbz	r3, 800e65e <_lseek_r+0x1e>
 800e65c:	6023      	str	r3, [r4, #0]
 800e65e:	bd38      	pop	{r3, r4, r5, pc}
 800e660:	20004fc8 	.word	0x20004fc8

0800e664 <_read_r>:
 800e664:	b538      	push	{r3, r4, r5, lr}
 800e666:	4d07      	ldr	r5, [pc, #28]	; (800e684 <_read_r+0x20>)
 800e668:	4604      	mov	r4, r0
 800e66a:	4608      	mov	r0, r1
 800e66c:	4611      	mov	r1, r2
 800e66e:	2200      	movs	r2, #0
 800e670:	602a      	str	r2, [r5, #0]
 800e672:	461a      	mov	r2, r3
 800e674:	f7f6 fa1a 	bl	8004aac <_read>
 800e678:	1c43      	adds	r3, r0, #1
 800e67a:	d102      	bne.n	800e682 <_read_r+0x1e>
 800e67c:	682b      	ldr	r3, [r5, #0]
 800e67e:	b103      	cbz	r3, 800e682 <_read_r+0x1e>
 800e680:	6023      	str	r3, [r4, #0]
 800e682:	bd38      	pop	{r3, r4, r5, pc}
 800e684:	20004fc8 	.word	0x20004fc8

0800e688 <_write_r>:
 800e688:	b538      	push	{r3, r4, r5, lr}
 800e68a:	4d07      	ldr	r5, [pc, #28]	; (800e6a8 <_write_r+0x20>)
 800e68c:	4604      	mov	r4, r0
 800e68e:	4608      	mov	r0, r1
 800e690:	4611      	mov	r1, r2
 800e692:	2200      	movs	r2, #0
 800e694:	602a      	str	r2, [r5, #0]
 800e696:	461a      	mov	r2, r3
 800e698:	f7f6 fa25 	bl	8004ae6 <_write>
 800e69c:	1c43      	adds	r3, r0, #1
 800e69e:	d102      	bne.n	800e6a6 <_write_r+0x1e>
 800e6a0:	682b      	ldr	r3, [r5, #0]
 800e6a2:	b103      	cbz	r3, 800e6a6 <_write_r+0x1e>
 800e6a4:	6023      	str	r3, [r4, #0]
 800e6a6:	bd38      	pop	{r3, r4, r5, pc}
 800e6a8:	20004fc8 	.word	0x20004fc8

0800e6ac <_calloc_r>:
 800e6ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6ae:	fba1 2402 	umull	r2, r4, r1, r2
 800e6b2:	b94c      	cbnz	r4, 800e6c8 <_calloc_r+0x1c>
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	9201      	str	r2, [sp, #4]
 800e6b8:	f7fd fe6a 	bl	800c390 <_malloc_r>
 800e6bc:	9a01      	ldr	r2, [sp, #4]
 800e6be:	4605      	mov	r5, r0
 800e6c0:	b930      	cbnz	r0, 800e6d0 <_calloc_r+0x24>
 800e6c2:	4628      	mov	r0, r5
 800e6c4:	b003      	add	sp, #12
 800e6c6:	bd30      	pop	{r4, r5, pc}
 800e6c8:	220c      	movs	r2, #12
 800e6ca:	6002      	str	r2, [r0, #0]
 800e6cc:	2500      	movs	r5, #0
 800e6ce:	e7f8      	b.n	800e6c2 <_calloc_r+0x16>
 800e6d0:	4621      	mov	r1, r4
 800e6d2:	f7fe f977 	bl	800c9c4 <memset>
 800e6d6:	e7f4      	b.n	800e6c2 <_calloc_r+0x16>

0800e6d8 <__ascii_mbtowc>:
 800e6d8:	b082      	sub	sp, #8
 800e6da:	b901      	cbnz	r1, 800e6de <__ascii_mbtowc+0x6>
 800e6dc:	a901      	add	r1, sp, #4
 800e6de:	b142      	cbz	r2, 800e6f2 <__ascii_mbtowc+0x1a>
 800e6e0:	b14b      	cbz	r3, 800e6f6 <__ascii_mbtowc+0x1e>
 800e6e2:	7813      	ldrb	r3, [r2, #0]
 800e6e4:	600b      	str	r3, [r1, #0]
 800e6e6:	7812      	ldrb	r2, [r2, #0]
 800e6e8:	1e10      	subs	r0, r2, #0
 800e6ea:	bf18      	it	ne
 800e6ec:	2001      	movne	r0, #1
 800e6ee:	b002      	add	sp, #8
 800e6f0:	4770      	bx	lr
 800e6f2:	4610      	mov	r0, r2
 800e6f4:	e7fb      	b.n	800e6ee <__ascii_mbtowc+0x16>
 800e6f6:	f06f 0001 	mvn.w	r0, #1
 800e6fa:	e7f8      	b.n	800e6ee <__ascii_mbtowc+0x16>

0800e6fc <__ascii_wctomb>:
 800e6fc:	b149      	cbz	r1, 800e712 <__ascii_wctomb+0x16>
 800e6fe:	2aff      	cmp	r2, #255	; 0xff
 800e700:	bf85      	ittet	hi
 800e702:	238a      	movhi	r3, #138	; 0x8a
 800e704:	6003      	strhi	r3, [r0, #0]
 800e706:	700a      	strbls	r2, [r1, #0]
 800e708:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e70c:	bf98      	it	ls
 800e70e:	2001      	movls	r0, #1
 800e710:	4770      	bx	lr
 800e712:	4608      	mov	r0, r1
 800e714:	4770      	bx	lr
	...

0800e718 <_init>:
 800e718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e71a:	bf00      	nop
 800e71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e71e:	bc08      	pop	{r3}
 800e720:	469e      	mov	lr, r3
 800e722:	4770      	bx	lr

0800e724 <_fini>:
 800e724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e726:	bf00      	nop
 800e728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e72a:	bc08      	pop	{r3}
 800e72c:	469e      	mov	lr, r3
 800e72e:	4770      	bx	lr
