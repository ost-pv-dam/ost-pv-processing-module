
ost-pv-processing-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020640  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c84  080207d0  080207d0  000307d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000001a0  08023454  08023454  00033454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000002d0  080235f4  080235f4  000335f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080238c4  080238c4  000401f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000028  080238c4  080238c4  000338c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  080238ec  080238ec  000338ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080238f8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005968  200001f8  08023aec  000401f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005b60  08023aec  00045b60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040224  2**0
                  CONTENTS, READONLY
 13 .debug_info   00068020  00000000  00000000  00040267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000077e6  00000000  00000000  000a8287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000037d8  00000000  00000000  000afa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002ab3  00000000  00000000  000b3248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e2af  00000000  00000000  000b5cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000302f5  00000000  00000000  000e3faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00137e63  00000000  00000000  0011429f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0001c6f8  00000000  00000000  0024c104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  002687fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080207b8 	.word	0x080207b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	080207b8 	.word	0x080207b8

080001d0 <d_make_comp>:
 80001d0:	2931      	cmp	r1, #49	; 0x31
 80001d2:	b570      	push	{r4, r5, r6, lr}
 80001d4:	4686      	mov	lr, r0
 80001d6:	d845      	bhi.n	8000264 <d_make_comp+0x94>
 80001d8:	2928      	cmp	r1, #40	; 0x28
 80001da:	d82a      	bhi.n	8000232 <d_make_comp+0x62>
 80001dc:	290a      	cmp	r1, #10
 80001de:	d920      	bls.n	8000222 <d_make_comp+0x52>
 80001e0:	f1a1 0c0b 	sub.w	ip, r1, #11
 80001e4:	4c32      	ldr	r4, [pc, #200]	; (80002b0 <d_make_comp+0xe0>)
 80001e6:	fa5f fc8c 	uxtb.w	ip, ip
 80001ea:	2001      	movs	r0, #1
 80001ec:	fa00 f00c 	lsl.w	r0, r0, ip
 80001f0:	4004      	ands	r4, r0
 80001f2:	2c00      	cmp	r4, #0
 80001f4:	d04d      	beq.n	8000292 <d_make_comp+0xc2>
 80001f6:	b1d2      	cbz	r2, 800022e <d_make_comp+0x5e>
 80001f8:	e9de 4005 	ldrd	r4, r0, [lr, #20]
 80001fc:	4284      	cmp	r4, r0
 80001fe:	da16      	bge.n	800022e <d_make_comp+0x5e>
 8000200:	f8de 5010 	ldr.w	r5, [lr, #16]
 8000204:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8000208:	eb05 008c 	add.w	r0, r5, ip, lsl #2
 800020c:	3401      	adds	r4, #1
 800020e:	2600      	movs	r6, #0
 8000210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8000214:	f8ce 4014 	str.w	r4, [lr, #20]
 8000218:	f805 102c 	strb.w	r1, [r5, ip, lsl #2]
 800021c:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8000220:	bd70      	pop	{r4, r5, r6, pc}
 8000222:	2904      	cmp	r1, #4
 8000224:	d930      	bls.n	8000288 <d_make_comp+0xb8>
 8000226:	f1a1 0009 	sub.w	r0, r1, #9
 800022a:	2801      	cmp	r0, #1
 800022c:	d9e3      	bls.n	80001f6 <d_make_comp+0x26>
 800022e:	2000      	movs	r0, #0
 8000230:	bd70      	pop	{r4, r5, r6, pc}
 8000232:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 8000236:	2808      	cmp	r0, #8
 8000238:	d8f9      	bhi.n	800022e <d_make_comp+0x5e>
 800023a:	a401      	add	r4, pc, #4	; (adr r4, 8000240 <d_make_comp+0x70>)
 800023c:	f854 f020 	ldr.w	pc, [r4, r0, lsl #2]
 8000240:	080001f9 	.word	0x080001f9
 8000244:	0800028d 	.word	0x0800028d
 8000248:	08000289 	.word	0x08000289
 800024c:	0800022f 	.word	0x0800022f
 8000250:	08000289 	.word	0x08000289
 8000254:	080001f9 	.word	0x080001f9
 8000258:	080001f9 	.word	0x080001f9
 800025c:	080001f7 	.word	0x080001f7
 8000260:	0800028d 	.word	0x0800028d
 8000264:	f1a1 0034 	sub.w	r0, r1, #52	; 0x34
 8000268:	b2c0      	uxtb	r0, r0
 800026a:	281d      	cmp	r0, #29
 800026c:	d8df      	bhi.n	800022e <d_make_comp+0x5e>
 800026e:	4c11      	ldr	r4, [pc, #68]	; (80002b4 <d_make_comp+0xe4>)
 8000270:	f04f 0c01 	mov.w	ip, #1
 8000274:	fa0c fc00 	lsl.w	ip, ip, r0
 8000278:	ea0c 0404 	and.w	r4, ip, r4
 800027c:	2c00      	cmp	r4, #0
 800027e:	d1ba      	bne.n	80001f6 <d_make_comp+0x26>
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <d_make_comp+0xe8>)
 8000282:	ea0c 0000 	and.w	r0, ip, r0
 8000286:	b170      	cbz	r0, 80002a6 <d_make_comp+0xd6>
 8000288:	2a00      	cmp	r2, #0
 800028a:	d0d0      	beq.n	800022e <d_make_comp+0x5e>
 800028c:	2b00      	cmp	r3, #0
 800028e:	d1b3      	bne.n	80001f8 <d_make_comp+0x28>
 8000290:	e7cd      	b.n	800022e <d_make_comp+0x5e>
 8000292:	f410 1f7f 	tst.w	r0, #4177920	; 0x3fc000
 8000296:	d1af      	bne.n	80001f8 <d_make_comp+0x28>
 8000298:	4c08      	ldr	r4, [pc, #32]	; (80002bc <d_make_comp+0xec>)
 800029a:	4004      	ands	r4, r0
 800029c:	2c00      	cmp	r4, #0
 800029e:	d0c6      	beq.n	800022e <d_make_comp+0x5e>
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	d1f3      	bne.n	800028c <d_make_comp+0xbc>
 80002a4:	e7c3      	b.n	800022e <d_make_comp+0x5e>
 80002a6:	f01c 5c50 	ands.w	ip, ip, #872415232	; 0x34000000
 80002aa:	d0c0      	beq.n	800022e <d_make_comp+0x5e>
 80002ac:	e7a4      	b.n	80001f8 <d_make_comp+0x28>
 80002ae:	bf00      	nop
 80002b0:	2f801ffe 	.word	0x2f801ffe
 80002b4:	01c71107 	.word	0x01c71107
 80002b8:	0a002ef8 	.word	0x0a002ef8
 80002bc:	00400001 	.word	0x00400001

080002c0 <d_number>:
 80002c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c2:	68c2      	ldr	r2, [r0, #12]
 80002c4:	7811      	ldrb	r1, [r2, #0]
 80002c6:	296e      	cmp	r1, #110	; 0x6e
 80002c8:	4686      	mov	lr, r0
 80002ca:	d025      	beq.n	8000318 <d_number+0x58>
 80002cc:	3930      	subs	r1, #48	; 0x30
 80002ce:	b2cb      	uxtb	r3, r1
 80002d0:	2b09      	cmp	r3, #9
 80002d2:	d82b      	bhi.n	800032c <d_number+0x6c>
 80002d4:	2600      	movs	r6, #0
 80002d6:	4d16      	ldr	r5, [pc, #88]	; (8000330 <d_number+0x70>)
 80002d8:	2000      	movs	r0, #0
 80002da:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80002de:	e002      	b.n	80002e6 <d_number+0x26>
 80002e0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
 80002e4:	dc15      	bgt.n	8000312 <d_number+0x52>
 80002e6:	3201      	adds	r2, #1
 80002e8:	f8ce 200c 	str.w	r2, [lr, #12]
 80002ec:	7813      	ldrb	r3, [r2, #0]
 80002ee:	3b30      	subs	r3, #48	; 0x30
 80002f0:	fa5f fc83 	uxtb.w	ip, r3
 80002f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80002f8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80002fc:	f1bc 0f09 	cmp.w	ip, #9
 8000300:	4619      	mov	r1, r3
 8000302:	eba4 0303 	sub.w	r3, r4, r3
 8000306:	fba5 7303 	umull	r7, r3, r5, r3
 800030a:	d9e9      	bls.n	80002e0 <d_number+0x20>
 800030c:	b106      	cbz	r6, 8000310 <d_number+0x50>
 800030e:	4240      	negs	r0, r0
 8000310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000312:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000318:	1c53      	adds	r3, r2, #1
 800031a:	60c3      	str	r3, [r0, #12]
 800031c:	7851      	ldrb	r1, [r2, #1]
 800031e:	3930      	subs	r1, #48	; 0x30
 8000320:	b2ca      	uxtb	r2, r1
 8000322:	2a09      	cmp	r2, #9
 8000324:	d802      	bhi.n	800032c <d_number+0x6c>
 8000326:	461a      	mov	r2, r3
 8000328:	2601      	movs	r6, #1
 800032a:	e7d4      	b.n	80002d6 <d_number+0x16>
 800032c:	2000      	movs	r0, #0
 800032e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000330:	cccccccd 	.word	0xcccccccd

08000334 <d_call_offset>:
 8000334:	b510      	push	{r4, lr}
 8000336:	4604      	mov	r4, r0
 8000338:	b929      	cbnz	r1, 8000346 <d_call_offset+0x12>
 800033a:	68c3      	ldr	r3, [r0, #12]
 800033c:	781a      	ldrb	r2, [r3, #0]
 800033e:	b16a      	cbz	r2, 800035c <d_call_offset+0x28>
 8000340:	1c5a      	adds	r2, r3, #1
 8000342:	60c2      	str	r2, [r0, #12]
 8000344:	7819      	ldrb	r1, [r3, #0]
 8000346:	2968      	cmp	r1, #104	; 0x68
 8000348:	d00c      	beq.n	8000364 <d_call_offset+0x30>
 800034a:	2976      	cmp	r1, #118	; 0x76
 800034c:	d106      	bne.n	800035c <d_call_offset+0x28>
 800034e:	4620      	mov	r0, r4
 8000350:	f7ff ffb6 	bl	80002c0 <d_number>
 8000354:	68e3      	ldr	r3, [r4, #12]
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	2a5f      	cmp	r2, #95	; 0x5f
 800035a:	d001      	beq.n	8000360 <d_call_offset+0x2c>
 800035c:	2000      	movs	r0, #0
 800035e:	bd10      	pop	{r4, pc}
 8000360:	3301      	adds	r3, #1
 8000362:	60e3      	str	r3, [r4, #12]
 8000364:	4620      	mov	r0, r4
 8000366:	f7ff ffab 	bl	80002c0 <d_number>
 800036a:	68e3      	ldr	r3, [r4, #12]
 800036c:	781a      	ldrb	r2, [r3, #0]
 800036e:	2a5f      	cmp	r2, #95	; 0x5f
 8000370:	d1f4      	bne.n	800035c <d_call_offset+0x28>
 8000372:	3301      	adds	r3, #1
 8000374:	60e3      	str	r3, [r4, #12]
 8000376:	2001      	movs	r0, #1
 8000378:	bd10      	pop	{r4, pc}
 800037a:	bf00      	nop

0800037c <d_ref_qualifier>:
 800037c:	b410      	push	{r4}
 800037e:	68c3      	ldr	r3, [r0, #12]
 8000380:	460a      	mov	r2, r1
 8000382:	7819      	ldrb	r1, [r3, #0]
 8000384:	2952      	cmp	r1, #82	; 0x52
 8000386:	d00f      	beq.n	80003a8 <d_ref_qualifier+0x2c>
 8000388:	294f      	cmp	r1, #79	; 0x4f
 800038a:	d003      	beq.n	8000394 <d_ref_qualifier+0x18>
 800038c:	4610      	mov	r0, r2
 800038e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8000396:	2120      	movs	r1, #32
 8000398:	3403      	adds	r4, #3
 800039a:	3301      	adds	r3, #1
 800039c:	62c4      	str	r4, [r0, #44]	; 0x2c
 800039e:	60c3      	str	r3, [r0, #12]
 80003a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003a4:	2300      	movs	r3, #0
 80003a6:	e713      	b.n	80001d0 <d_make_comp>
 80003a8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80003aa:	211f      	movs	r1, #31
 80003ac:	3402      	adds	r4, #2
 80003ae:	e7f4      	b.n	800039a <d_ref_qualifier+0x1e>

080003b0 <d_count_templates_scopes>:
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d066      	beq.n	8000482 <d_count_templates_scopes+0xd2>
 80003b4:	b538      	push	{r3, r4, r5, lr}
 80003b6:	4605      	mov	r5, r0
 80003b8:	460c      	mov	r4, r1
 80003ba:	68a3      	ldr	r3, [r4, #8]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	dc39      	bgt.n	8000434 <d_count_templates_scopes+0x84>
 80003c0:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
 80003c4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80003c8:	f103 0301 	add.w	r3, r3, #1
 80003cc:	dc32      	bgt.n	8000434 <d_count_templates_scopes+0x84>
 80003ce:	7822      	ldrb	r2, [r4, #0]
 80003d0:	60a3      	str	r3, [r4, #8]
 80003d2:	1e53      	subs	r3, r2, #1
 80003d4:	2b50      	cmp	r3, #80	; 0x50
 80003d6:	d82d      	bhi.n	8000434 <d_count_templates_scopes+0x84>
 80003d8:	e8df f003 	tbb	[pc, r3]
 80003dc:	4c313131 	.word	0x4c313131
 80003e0:	2d2d2c2c 	.word	0x2d2d2c2c
 80003e4:	31313131 	.word	0x31313131
 80003e8:	31313131 	.word	0x31313131
 80003ec:	31313131 	.word	0x31313131
 80003f0:	2c313131 	.word	0x2c313131
 80003f4:	31313131 	.word	0x31313131
 80003f8:	31313131 	.word	0x31313131
 80003fc:	42423131 	.word	0x42423131
 8000400:	312c3131 	.word	0x312c3131
 8000404:	29313131 	.word	0x29313131
 8000408:	31313131 	.word	0x31313131
 800040c:	312d2c31 	.word	0x312d2c31
 8000410:	31313131 	.word	0x31313131
 8000414:	31313131 	.word	0x31313131
 8000418:	31313131 	.word	0x31313131
 800041c:	312c2c31 	.word	0x312c2c31
 8000420:	29292929 	.word	0x29292929
 8000424:	3131312c 	.word	0x3131312c
 8000428:	31313131 	.word	0x31313131
 800042c:	31          	.byte	0x31
 800042d:	00          	.byte	0x00
 800042e:	68e4      	ldr	r4, [r4, #12]
 8000430:	2c00      	cmp	r4, #0
 8000432:	d1c2      	bne.n	80003ba <d_count_templates_scopes+0xa>
 8000434:	bd38      	pop	{r3, r4, r5, pc}
 8000436:	6924      	ldr	r4, [r4, #16]
 8000438:	2c00      	cmp	r4, #0
 800043a:	d1be      	bne.n	80003ba <d_count_templates_scopes+0xa>
 800043c:	e7fa      	b.n	8000434 <d_count_templates_scopes+0x84>
 800043e:	68e1      	ldr	r1, [r4, #12]
 8000440:	1c43      	adds	r3, r0, #1
 8000442:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
 8000446:	4628      	mov	r0, r5
 8000448:	f7ff ffb2 	bl	80003b0 <d_count_templates_scopes>
 800044c:	6921      	ldr	r1, [r4, #16]
 800044e:	4628      	mov	r0, r5
 8000450:	f7ff ffae 	bl	80003b0 <d_count_templates_scopes>
 8000454:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 8000458:	3b01      	subs	r3, #1
 800045a:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
 800045e:	bd38      	pop	{r3, r4, r5, pc}
 8000460:	68e1      	ldr	r1, [r4, #12]
 8000462:	780b      	ldrb	r3, [r1, #0]
 8000464:	2b05      	cmp	r3, #5
 8000466:	d1eb      	bne.n	8000440 <d_count_templates_scopes+0x90>
 8000468:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
 800046c:	3301      	adds	r3, #1
 800046e:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
 8000472:	e7e5      	b.n	8000440 <d_count_templates_scopes+0x90>
 8000474:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
 8000478:	68e1      	ldr	r1, [r4, #12]
 800047a:	3301      	adds	r3, #1
 800047c:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
 8000480:	e7de      	b.n	8000440 <d_count_templates_scopes+0x90>
 8000482:	4770      	bx	lr

08000484 <d_pack_length>:
 8000484:	4603      	mov	r3, r0
 8000486:	b148      	cbz	r0, 800049c <d_pack_length+0x18>
 8000488:	2300      	movs	r3, #0
 800048a:	e004      	b.n	8000496 <d_pack_length+0x12>
 800048c:	68c2      	ldr	r2, [r0, #12]
 800048e:	b12a      	cbz	r2, 800049c <d_pack_length+0x18>
 8000490:	6900      	ldr	r0, [r0, #16]
 8000492:	3301      	adds	r3, #1
 8000494:	b110      	cbz	r0, 800049c <d_pack_length+0x18>
 8000496:	7802      	ldrb	r2, [r0, #0]
 8000498:	2a2f      	cmp	r2, #47	; 0x2f
 800049a:	d0f7      	beq.n	800048c <d_pack_length+0x8>
 800049c:	4618      	mov	r0, r3
 800049e:	4770      	bx	lr

080004a0 <d_discriminator>:
 80004a0:	68c3      	ldr	r3, [r0, #12]
 80004a2:	781a      	ldrb	r2, [r3, #0]
 80004a4:	2a5f      	cmp	r2, #95	; 0x5f
 80004a6:	d001      	beq.n	80004ac <d_discriminator+0xc>
 80004a8:	2001      	movs	r0, #1
 80004aa:	4770      	bx	lr
 80004ac:	b510      	push	{r4, lr}
 80004ae:	1c5a      	adds	r2, r3, #1
 80004b0:	60c2      	str	r2, [r0, #12]
 80004b2:	785a      	ldrb	r2, [r3, #1]
 80004b4:	2a5f      	cmp	r2, #95	; 0x5f
 80004b6:	4604      	mov	r4, r0
 80004b8:	d004      	beq.n	80004c4 <d_discriminator+0x24>
 80004ba:	f7ff ff01 	bl	80002c0 <d_number>
 80004be:	43c0      	mvns	r0, r0
 80004c0:	0fc0      	lsrs	r0, r0, #31
 80004c2:	bd10      	pop	{r4, pc}
 80004c4:	3302      	adds	r3, #2
 80004c6:	60c3      	str	r3, [r0, #12]
 80004c8:	f7ff fefa 	bl	80002c0 <d_number>
 80004cc:	2800      	cmp	r0, #0
 80004ce:	db09      	blt.n	80004e4 <d_discriminator+0x44>
 80004d0:	2809      	cmp	r0, #9
 80004d2:	dd05      	ble.n	80004e0 <d_discriminator+0x40>
 80004d4:	68e3      	ldr	r3, [r4, #12]
 80004d6:	781a      	ldrb	r2, [r3, #0]
 80004d8:	2a5f      	cmp	r2, #95	; 0x5f
 80004da:	d103      	bne.n	80004e4 <d_discriminator+0x44>
 80004dc:	3301      	adds	r3, #1
 80004de:	60e3      	str	r3, [r4, #12]
 80004e0:	2001      	movs	r0, #1
 80004e2:	bd10      	pop	{r4, pc}
 80004e4:	2000      	movs	r0, #0
 80004e6:	bd10      	pop	{r4, pc}

080004e8 <d_index_template_argument.part.0>:
 80004e8:	b920      	cbnz	r0, 80004f4 <d_index_template_argument.part.0+0xc>
 80004ea:	e009      	b.n	8000500 <d_index_template_argument.part.0+0x18>
 80004ec:	b139      	cbz	r1, 80004fe <d_index_template_argument.part.0+0x16>
 80004ee:	6900      	ldr	r0, [r0, #16]
 80004f0:	3901      	subs	r1, #1
 80004f2:	b130      	cbz	r0, 8000502 <d_index_template_argument.part.0+0x1a>
 80004f4:	7803      	ldrb	r3, [r0, #0]
 80004f6:	2b2f      	cmp	r3, #47	; 0x2f
 80004f8:	d0f8      	beq.n	80004ec <d_index_template_argument.part.0+0x4>
 80004fa:	2000      	movs	r0, #0
 80004fc:	4770      	bx	lr
 80004fe:	68c0      	ldr	r0, [r0, #12]
 8000500:	4770      	bx	lr
 8000502:	4770      	bx	lr

08000504 <d_growable_string_callback_adapter>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	4614      	mov	r4, r2
 8000508:	6852      	ldr	r2, [r2, #4]
 800050a:	68a5      	ldr	r5, [r4, #8]
 800050c:	1c4b      	adds	r3, r1, #1
 800050e:	4413      	add	r3, r2
 8000510:	42ab      	cmp	r3, r5
 8000512:	b083      	sub	sp, #12
 8000514:	460e      	mov	r6, r1
 8000516:	4607      	mov	r7, r0
 8000518:	d811      	bhi.n	800053e <d_growable_string_callback_adapter+0x3a>
 800051a:	68e5      	ldr	r5, [r4, #12]
 800051c:	b96d      	cbnz	r5, 800053a <d_growable_string_callback_adapter+0x36>
 800051e:	6863      	ldr	r3, [r4, #4]
 8000520:	6820      	ldr	r0, [r4, #0]
 8000522:	4632      	mov	r2, r6
 8000524:	4418      	add	r0, r3
 8000526:	4639      	mov	r1, r7
 8000528:	f01e fb66 	bl	801ebf8 <memcpy>
 800052c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8000530:	4433      	add	r3, r6
 8000532:	549d      	strb	r5, [r3, r2]
 8000534:	6863      	ldr	r3, [r4, #4]
 8000536:	4433      	add	r3, r6
 8000538:	6063      	str	r3, [r4, #4]
 800053a:	b003      	add	sp, #12
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	68e2      	ldr	r2, [r4, #12]
 8000540:	2a00      	cmp	r2, #0
 8000542:	d1fa      	bne.n	800053a <d_growable_string_callback_adapter+0x36>
 8000544:	b155      	cbz	r5, 800055c <d_growable_string_callback_adapter+0x58>
 8000546:	006d      	lsls	r5, r5, #1
 8000548:	42ab      	cmp	r3, r5
 800054a:	d8fc      	bhi.n	8000546 <d_growable_string_callback_adapter+0x42>
 800054c:	6820      	ldr	r0, [r4, #0]
 800054e:	4629      	mov	r1, r5
 8000550:	f01d fd0a 	bl	801df68 <realloc>
 8000554:	b138      	cbz	r0, 8000566 <d_growable_string_callback_adapter+0x62>
 8000556:	6020      	str	r0, [r4, #0]
 8000558:	60a5      	str	r5, [r4, #8]
 800055a:	e7de      	b.n	800051a <d_growable_string_callback_adapter+0x16>
 800055c:	2b02      	cmp	r3, #2
 800055e:	f04f 0502 	mov.w	r5, #2
 8000562:	d8f0      	bhi.n	8000546 <d_growable_string_callback_adapter+0x42>
 8000564:	e7f2      	b.n	800054c <d_growable_string_callback_adapter+0x48>
 8000566:	9001      	str	r0, [sp, #4]
 8000568:	6820      	ldr	r0, [r4, #0]
 800056a:	f01d fa55 	bl	801da18 <free>
 800056e:	9b01      	ldr	r3, [sp, #4]
 8000570:	2201      	movs	r2, #1
 8000572:	e9c4 3300 	strd	r3, r3, [r4]
 8000576:	e9c4 3202 	strd	r3, r2, [r4, #8]
 800057a:	e7de      	b.n	800053a <d_growable_string_callback_adapter+0x36>

0800057c <next_is_type_qual.isra.0>:
 800057c:	7803      	ldrb	r3, [r0, #0]
 800057e:	2b72      	cmp	r3, #114	; 0x72
 8000580:	d007      	beq.n	8000592 <next_is_type_qual.isra.0+0x16>
 8000582:	2b56      	cmp	r3, #86	; 0x56
 8000584:	d005      	beq.n	8000592 <next_is_type_qual.isra.0+0x16>
 8000586:	2b4b      	cmp	r3, #75	; 0x4b
 8000588:	d003      	beq.n	8000592 <next_is_type_qual.isra.0+0x16>
 800058a:	2b44      	cmp	r3, #68	; 0x44
 800058c:	d003      	beq.n	8000596 <next_is_type_qual.isra.0+0x1a>
 800058e:	2000      	movs	r0, #0
 8000590:	4770      	bx	lr
 8000592:	2001      	movs	r0, #1
 8000594:	4770      	bx	lr
 8000596:	7840      	ldrb	r0, [r0, #1]
 8000598:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 800059c:	2b4f      	cmp	r3, #79	; 0x4f
 800059e:	d0f8      	beq.n	8000592 <next_is_type_qual.isra.0+0x16>
 80005a0:	3877      	subs	r0, #119	; 0x77
 80005a2:	2801      	cmp	r0, #1
 80005a4:	bf8c      	ite	hi
 80005a6:	2000      	movhi	r0, #0
 80005a8:	2001      	movls	r0, #1
 80005aa:	4770      	bx	lr

080005ac <d_append_char>:
 80005ac:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80005b0:	2bff      	cmp	r3, #255	; 0xff
 80005b2:	b570      	push	{r4, r5, r6, lr}
 80005b4:	4604      	mov	r4, r0
 80005b6:	460d      	mov	r5, r1
 80005b8:	d006      	beq.n	80005c8 <d_append_char+0x1c>
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80005c0:	54e5      	strb	r5, [r4, r3]
 80005c2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	2600      	movs	r6, #0
 80005ca:	4619      	mov	r1, r3
 80005cc:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80005d0:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
 80005d4:	4798      	blx	r3
 80005d6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80005da:	2201      	movs	r2, #1
 80005dc:	4413      	add	r3, r2
 80005de:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80005e2:	4633      	mov	r3, r6
 80005e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80005e8:	54e5      	strb	r5, [r4, r3]
 80005ea:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80005ee:	bd70      	pop	{r4, r5, r6, pc}

080005f0 <d_lookup_template_argument>:
 80005f0:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80005f4:	b19b      	cbz	r3, 800061e <d_lookup_template_argument+0x2e>
 80005f6:	68ca      	ldr	r2, [r1, #12]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	2a00      	cmp	r2, #0
 80005fc:	691b      	ldr	r3, [r3, #16]
 80005fe:	db09      	blt.n	8000614 <d_lookup_template_argument+0x24>
 8000600:	b923      	cbnz	r3, 800060c <d_lookup_template_argument+0x1c>
 8000602:	e007      	b.n	8000614 <d_lookup_template_argument+0x24>
 8000604:	b142      	cbz	r2, 8000618 <d_lookup_template_argument+0x28>
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	3a01      	subs	r2, #1
 800060a:	b11b      	cbz	r3, 8000614 <d_lookup_template_argument+0x24>
 800060c:	7819      	ldrb	r1, [r3, #0]
 800060e:	292f      	cmp	r1, #47	; 0x2f
 8000610:	d0f8      	beq.n	8000604 <d_lookup_template_argument+0x14>
 8000612:	2300      	movs	r3, #0
 8000614:	4618      	mov	r0, r3
 8000616:	4770      	bx	lr
 8000618:	68db      	ldr	r3, [r3, #12]
 800061a:	4618      	mov	r0, r3
 800061c:	4770      	bx	lr
 800061e:	2201      	movs	r2, #1
 8000620:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 8000624:	e7f6      	b.n	8000614 <d_lookup_template_argument+0x24>
 8000626:	bf00      	nop

08000628 <d_find_pack>:
 8000628:	2900      	cmp	r1, #0
 800062a:	d040      	beq.n	80006ae <d_find_pack+0x86>
 800062c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000630:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80006b8 <d_find_pack+0x90>
 8000634:	4f1f      	ldr	r7, [pc, #124]	; (80006b4 <d_find_pack+0x8c>)
 8000636:	4605      	mov	r5, r0
 8000638:	460c      	mov	r4, r1
 800063a:	2601      	movs	r6, #1
 800063c:	7823      	ldrb	r3, [r4, #0]
 800063e:	2b08      	cmp	r3, #8
 8000640:	d813      	bhi.n	800066a <d_find_pack+0x42>
 8000642:	2b08      	cmp	r3, #8
 8000644:	d81e      	bhi.n	8000684 <d_find_pack+0x5c>
 8000646:	e8df f003 	tbb	[pc, r3]
 800064a:	1d0d      	.short	0x1d0d
 800064c:	271d1d1d 	.word	0x271d1d1d
 8000650:	230d      	.short	0x230d
 8000652:	23          	.byte	0x23
 8000653:	00          	.byte	0x00
 8000654:	2b17      	cmp	r3, #23
 8000656:	d915      	bls.n	8000684 <d_find_pack+0x5c>
 8000658:	3b18      	subs	r3, #24
 800065a:	b2db      	uxtb	r3, r3
 800065c:	fa27 f303 	lsr.w	r3, r7, r3
 8000660:	07db      	lsls	r3, r3, #31
 8000662:	d50f      	bpl.n	8000684 <d_find_pack+0x5c>
 8000664:	2000      	movs	r0, #0
 8000666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800066a:	2b2c      	cmp	r3, #44	; 0x2c
 800066c:	d9f2      	bls.n	8000654 <d_find_pack+0x2c>
 800066e:	3b32      	subs	r3, #50	; 0x32
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b1b      	cmp	r3, #27
 8000674:	d806      	bhi.n	8000684 <d_find_pack+0x5c>
 8000676:	fa06 f203 	lsl.w	r2, r6, r3
 800067a:	ea12 0f08 	tst.w	r2, r8
 800067e:	d1f1      	bne.n	8000664 <d_find_pack+0x3c>
 8000680:	2b01      	cmp	r3, #1
 8000682:	d005      	beq.n	8000690 <d_find_pack+0x68>
 8000684:	68e1      	ldr	r1, [r4, #12]
 8000686:	4628      	mov	r0, r5
 8000688:	f7ff ffce 	bl	8000628 <d_find_pack>
 800068c:	2800      	cmp	r0, #0
 800068e:	d1ea      	bne.n	8000666 <d_find_pack+0x3e>
 8000690:	6924      	ldr	r4, [r4, #16]
 8000692:	2c00      	cmp	r4, #0
 8000694:	d1d2      	bne.n	800063c <d_find_pack+0x14>
 8000696:	e7e5      	b.n	8000664 <d_find_pack+0x3c>
 8000698:	4621      	mov	r1, r4
 800069a:	4628      	mov	r0, r5
 800069c:	f7ff ffa8 	bl	80005f0 <d_lookup_template_argument>
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d0df      	beq.n	8000664 <d_find_pack+0x3c>
 80006a4:	7803      	ldrb	r3, [r0, #0]
 80006a6:	2b2f      	cmp	r3, #47	; 0x2f
 80006a8:	d1dc      	bne.n	8000664 <d_find_pack+0x3c>
 80006aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006ae:	2000      	movs	r0, #0
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	00108001 	.word	0x00108001
 80006b8:	0ce30001 	.word	0x0ce30001

080006bc <d_append_string>:
 80006bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006c0:	4604      	mov	r4, r0
 80006c2:	4608      	mov	r0, r1
 80006c4:	460d      	mov	r5, r1
 80006c6:	f005 fdab 	bl	8006220 <strlen>
 80006ca:	b340      	cbz	r0, 800071e <d_append_string+0x62>
 80006cc:	3d01      	subs	r5, #1
 80006ce:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80006d2:	182f      	adds	r7, r5, r0
 80006d4:	f04f 0800 	mov.w	r8, #0
 80006d8:	e009      	b.n	80006ee <d_append_string+0x32>
 80006da:	460b      	mov	r3, r1
 80006dc:	42bd      	cmp	r5, r7
 80006de:	f101 0101 	add.w	r1, r1, #1
 80006e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80006e6:	54e6      	strb	r6, [r4, r3]
 80006e8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80006ec:	d017      	beq.n	800071e <d_append_string+0x62>
 80006ee:	29ff      	cmp	r1, #255	; 0xff
 80006f0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80006f4:	d1f1      	bne.n	80006da <d_append_string+0x1e>
 80006f6:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80006fa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80006fe:	4620      	mov	r0, r4
 8000700:	4798      	blx	r3
 8000702:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8000706:	2101      	movs	r1, #1
 8000708:	440b      	add	r3, r1
 800070a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800070e:	2300      	movs	r3, #0
 8000710:	42bd      	cmp	r5, r7
 8000712:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000716:	54e6      	strb	r6, [r4, r3]
 8000718:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800071c:	d1e7      	bne.n	80006ee <d_append_string+0x32>
 800071e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000722:	bf00      	nop

08000724 <d_template_param>:
 8000724:	b538      	push	{r3, r4, r5, lr}
 8000726:	68c3      	ldr	r3, [r0, #12]
 8000728:	781a      	ldrb	r2, [r3, #0]
 800072a:	2a54      	cmp	r2, #84	; 0x54
 800072c:	d124      	bne.n	8000778 <d_template_param+0x54>
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	60c2      	str	r2, [r0, #12]
 8000732:	785a      	ldrb	r2, [r3, #1]
 8000734:	2a5f      	cmp	r2, #95	; 0x5f
 8000736:	4604      	mov	r4, r0
 8000738:	d020      	beq.n	800077c <d_template_param+0x58>
 800073a:	2a6e      	cmp	r2, #110	; 0x6e
 800073c:	d01c      	beq.n	8000778 <d_template_param+0x54>
 800073e:	f7ff fdbf 	bl	80002c0 <d_number>
 8000742:	1c41      	adds	r1, r0, #1
 8000744:	d418      	bmi.n	8000778 <d_template_param+0x54>
 8000746:	68e3      	ldr	r3, [r4, #12]
 8000748:	781a      	ldrb	r2, [r3, #0]
 800074a:	2a5f      	cmp	r2, #95	; 0x5f
 800074c:	d114      	bne.n	8000778 <d_template_param+0x54>
 800074e:	3301      	adds	r3, #1
 8000750:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8000754:	4282      	cmp	r2, r0
 8000756:	60e3      	str	r3, [r4, #12]
 8000758:	da0e      	bge.n	8000778 <d_template_param+0x54>
 800075a:	6923      	ldr	r3, [r4, #16]
 800075c:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8000760:	eb03 008c 	add.w	r0, r3, ip, lsl #2
 8000764:	3201      	adds	r2, #1
 8000766:	2500      	movs	r5, #0
 8000768:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800076c:	6162      	str	r2, [r4, #20]
 800076e:	2205      	movs	r2, #5
 8000770:	f803 202c 	strb.w	r2, [r3, ip, lsl #2]
 8000774:	60c1      	str	r1, [r0, #12]
 8000776:	bd38      	pop	{r3, r4, r5, pc}
 8000778:	2000      	movs	r0, #0
 800077a:	bd38      	pop	{r3, r4, r5, pc}
 800077c:	3302      	adds	r3, #2
 800077e:	2100      	movs	r1, #0
 8000780:	e7e6      	b.n	8000750 <d_template_param+0x2c>
 8000782:	bf00      	nop

08000784 <d_append_num>:
 8000784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000788:	b088      	sub	sp, #32
 800078a:	460a      	mov	r2, r1
 800078c:	4604      	mov	r4, r0
 800078e:	491a      	ldr	r1, [pc, #104]	; (80007f8 <d_append_num+0x74>)
 8000790:	a801      	add	r0, sp, #4
 8000792:	f01d fb85 	bl	801dea0 <siprintf>
 8000796:	a801      	add	r0, sp, #4
 8000798:	f005 fd42 	bl	8006220 <strlen>
 800079c:	b340      	cbz	r0, 80007f0 <d_append_num+0x6c>
 800079e:	ad01      	add	r5, sp, #4
 80007a0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80007a4:	182f      	adds	r7, r5, r0
 80007a6:	f04f 0800 	mov.w	r8, #0
 80007aa:	e009      	b.n	80007c0 <d_append_num+0x3c>
 80007ac:	460b      	mov	r3, r1
 80007ae:	42bd      	cmp	r5, r7
 80007b0:	f101 0101 	add.w	r1, r1, #1
 80007b4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80007b8:	54e6      	strb	r6, [r4, r3]
 80007ba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80007be:	d017      	beq.n	80007f0 <d_append_num+0x6c>
 80007c0:	29ff      	cmp	r1, #255	; 0xff
 80007c2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80007c6:	d1f1      	bne.n	80007ac <d_append_num+0x28>
 80007c8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80007cc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80007d0:	4620      	mov	r0, r4
 80007d2:	4798      	blx	r3
 80007d4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80007d8:	2101      	movs	r1, #1
 80007da:	440b      	add	r3, r1
 80007dc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80007e0:	2300      	movs	r3, #0
 80007e2:	42bd      	cmp	r5, r7
 80007e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80007e8:	54e6      	strb	r6, [r4, r3]
 80007ea:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80007ee:	d1e7      	bne.n	80007c0 <d_append_num+0x3c>
 80007f0:	b008      	add	sp, #32
 80007f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007f6:	bf00      	nop
 80007f8:	08021fec 	.word	0x08021fec

080007fc <d_source_name>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	4604      	mov	r4, r0
 8000800:	f7ff fd5e 	bl	80002c0 <d_number>
 8000804:	1e05      	subs	r5, r0, #0
 8000806:	dd46      	ble.n	8000896 <d_source_name+0x9a>
 8000808:	68e6      	ldr	r6, [r4, #12]
 800080a:	6863      	ldr	r3, [r4, #4]
 800080c:	1b9b      	subs	r3, r3, r6
 800080e:	429d      	cmp	r5, r3
 8000810:	dc3e      	bgt.n	8000890 <d_source_name+0x94>
 8000812:	68a2      	ldr	r2, [r4, #8]
 8000814:	1973      	adds	r3, r6, r5
 8000816:	0752      	lsls	r2, r2, #29
 8000818:	60e3      	str	r3, [r4, #12]
 800081a:	d504      	bpl.n	8000826 <d_source_name+0x2a>
 800081c:	5d72      	ldrb	r2, [r6, r5]
 800081e:	2a24      	cmp	r2, #36	; 0x24
 8000820:	bf04      	itt	eq
 8000822:	3301      	addeq	r3, #1
 8000824:	60e3      	streq	r3, [r4, #12]
 8000826:	2d09      	cmp	r5, #9
 8000828:	dd22      	ble.n	8000870 <d_source_name+0x74>
 800082a:	492a      	ldr	r1, [pc, #168]	; (80008d4 <d_source_name+0xd8>)
 800082c:	2208      	movs	r2, #8
 800082e:	4630      	mov	r0, r6
 8000830:	f01e f8b4 	bl	801e99c <memcmp>
 8000834:	b930      	cbnz	r0, 8000844 <d_source_name+0x48>
 8000836:	7a33      	ldrb	r3, [r6, #8]
 8000838:	2b2e      	cmp	r3, #46	; 0x2e
 800083a:	d02e      	beq.n	800089a <d_source_name+0x9e>
 800083c:	2b5f      	cmp	r3, #95	; 0x5f
 800083e:	d02c      	beq.n	800089a <d_source_name+0x9e>
 8000840:	2b24      	cmp	r3, #36	; 0x24
 8000842:	d02a      	beq.n	800089a <d_source_name+0x9e>
 8000844:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000848:	4293      	cmp	r3, r2
 800084a:	da21      	bge.n	8000890 <d_source_name+0x94>
 800084c:	6920      	ldr	r0, [r4, #16]
 800084e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000852:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000856:	3301      	adds	r3, #1
 8000858:	2200      	movs	r2, #0
 800085a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800085e:	6163      	str	r3, [r4, #20]
 8000860:	2300      	movs	r3, #0
 8000862:	7003      	strb	r3, [r0, #0]
 8000864:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8000868:	e9c0 6503 	strd	r6, r5, [r0, #12]
 800086c:	62a0      	str	r0, [r4, #40]	; 0x28
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000874:	4293      	cmp	r3, r2
 8000876:	da0b      	bge.n	8000890 <d_source_name+0x94>
 8000878:	6920      	ldr	r0, [r4, #16]
 800087a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800087e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000882:	3301      	adds	r3, #1
 8000884:	2200      	movs	r2, #0
 8000886:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800088a:	6163      	str	r3, [r4, #20]
 800088c:	2e00      	cmp	r6, #0
 800088e:	d1e7      	bne.n	8000860 <d_source_name+0x64>
 8000890:	2000      	movs	r0, #0
 8000892:	62a0      	str	r0, [r4, #40]	; 0x28
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	2000      	movs	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	7a73      	ldrb	r3, [r6, #9]
 800089c:	2b4e      	cmp	r3, #78	; 0x4e
 800089e:	d1d1      	bne.n	8000844 <d_source_name+0x48>
 80008a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80008a2:	6963      	ldr	r3, [r4, #20]
 80008a4:	69a1      	ldr	r1, [r4, #24]
 80008a6:	3216      	adds	r2, #22
 80008a8:	1b52      	subs	r2, r2, r5
 80008aa:	428b      	cmp	r3, r1
 80008ac:	62e2      	str	r2, [r4, #44]	; 0x2c
 80008ae:	daef      	bge.n	8000890 <d_source_name+0x94>
 80008b0:	6922      	ldr	r2, [r4, #16]
 80008b2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80008b6:	0081      	lsls	r1, r0, #2
 80008b8:	3301      	adds	r3, #1
 80008ba:	6163      	str	r3, [r4, #20]
 80008bc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80008c0:	2300      	movs	r3, #0
 80008c2:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80008c6:	5453      	strb	r3, [r2, r1]
 80008c8:	4a03      	ldr	r2, [pc, #12]	; (80008d8 <d_source_name+0xdc>)
 80008ca:	2315      	movs	r3, #21
 80008cc:	e9c0 2303 	strd	r2, r3, [r0, #12]
 80008d0:	e7df      	b.n	8000892 <d_source_name+0x96>
 80008d2:	bf00      	nop
 80008d4:	08021ff0 	.word	0x08021ff0
 80008d8:	08021ffc 	.word	0x08021ffc

080008dc <d_substitution>:
 80008dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008e0:	68c3      	ldr	r3, [r0, #12]
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	2a53      	cmp	r2, #83	; 0x53
 80008e6:	d131      	bne.n	800094c <d_substitution+0x70>
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	60c2      	str	r2, [r0, #12]
 80008ec:	785a      	ldrb	r2, [r3, #1]
 80008ee:	4604      	mov	r4, r0
 80008f0:	b3a2      	cbz	r2, 800095c <d_substitution+0x80>
 80008f2:	1c9a      	adds	r2, r3, #2
 80008f4:	60c2      	str	r2, [r0, #12]
 80008f6:	785a      	ldrb	r2, [r3, #1]
 80008f8:	2a5f      	cmp	r2, #95	; 0x5f
 80008fa:	d044      	beq.n	8000986 <d_substitution+0xaa>
 80008fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8000900:	b2d8      	uxtb	r0, r3
 8000902:	2809      	cmp	r0, #9
 8000904:	d826      	bhi.n	8000954 <d_substitution+0x78>
 8000906:	2100      	movs	r1, #0
 8000908:	e00d      	b.n	8000926 <d_substitution+0x4a>
 800090a:	3b30      	subs	r3, #48	; 0x30
 800090c:	4299      	cmp	r1, r3
 800090e:	d81d      	bhi.n	800094c <d_substitution+0x70>
 8000910:	68e0      	ldr	r0, [r4, #12]
 8000912:	7802      	ldrb	r2, [r0, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	1c45      	adds	r5, r0, #1
 8000918:	b11a      	cbz	r2, 8000922 <d_substitution+0x46>
 800091a:	60e5      	str	r5, [r4, #12]
 800091c:	7802      	ldrb	r2, [r0, #0]
 800091e:	2a5f      	cmp	r2, #95	; 0x5f
 8000920:	d03b      	beq.n	800099a <d_substitution+0xbe>
 8000922:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8000926:	b2d8      	uxtb	r0, r3
 8000928:	2809      	cmp	r0, #9
 800092a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800092e:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
 8000932:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000936:	d9e8      	bls.n	800090a <d_substitution+0x2e>
 8000938:	f1bc 0f19 	cmp.w	ip, #25
 800093c:	d806      	bhi.n	800094c <d_substitution+0x70>
 800093e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000942:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000946:	3b37      	subs	r3, #55	; 0x37
 8000948:	4299      	cmp	r1, r3
 800094a:	d9e1      	bls.n	8000910 <d_substitution+0x34>
 800094c:	2500      	movs	r5, #0
 800094e:	4628      	mov	r0, r5
 8000950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000954:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 8000958:	2819      	cmp	r0, #25
 800095a:	d9d4      	bls.n	8000906 <d_substitution+0x2a>
 800095c:	68a3      	ldr	r3, [r4, #8]
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	2b00      	cmp	r3, #0
 8000964:	bf14      	ite	ne
 8000966:	2501      	movne	r5, #1
 8000968:	2500      	moveq	r5, #0
 800096a:	d100      	bne.n	800096e <d_substitution+0x92>
 800096c:	b9b9      	cbnz	r1, 800099e <d_substitution+0xc2>
 800096e:	4b3f      	ldr	r3, [pc, #252]	; (8000a6c <d_substitution+0x190>)
 8000970:	2174      	movs	r1, #116	; 0x74
 8000972:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 8000976:	e001      	b.n	800097c <d_substitution+0xa0>
 8000978:	f813 1f1c 	ldrb.w	r1, [r3, #28]!
 800097c:	4291      	cmp	r1, r2
 800097e:	d015      	beq.n	80009ac <d_substitution+0xd0>
 8000980:	4283      	cmp	r3, r0
 8000982:	d1f9      	bne.n	8000978 <d_substitution+0x9c>
 8000984:	e7e2      	b.n	800094c <d_substitution+0x70>
 8000986:	2300      	movs	r3, #0
 8000988:	6a22      	ldr	r2, [r4, #32]
 800098a:	429a      	cmp	r2, r3
 800098c:	d9de      	bls.n	800094c <d_substitution+0x70>
 800098e:	69e2      	ldr	r2, [r4, #28]
 8000990:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8000994:	4628      	mov	r0, r5
 8000996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800099a:	3301      	adds	r3, #1
 800099c:	e7f4      	b.n	8000988 <d_substitution+0xac>
 800099e:	68e3      	ldr	r3, [r4, #12]
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	3b43      	subs	r3, #67	; 0x43
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	bf98      	it	ls
 80009a8:	460d      	movls	r5, r1
 80009aa:	e7e0      	b.n	800096e <d_substitution+0x92>
 80009ac:	695e      	ldr	r6, [r3, #20]
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d054      	beq.n	8000a5c <d_substitution+0x180>
 80009b2:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 80009b6:	4282      	cmp	r2, r0
 80009b8:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80009bc:	da53      	bge.n	8000a66 <d_substitution+0x18a>
 80009be:	6927      	ldr	r7, [r4, #16]
 80009c0:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 80009c4:	eb07 018c 	add.w	r1, r7, ip, lsl #2
 80009c8:	f04f 0e00 	mov.w	lr, #0
 80009cc:	e9c1 ee01 	strd	lr, lr, [r1, #4]
 80009d0:	3201      	adds	r2, #1
 80009d2:	f04f 0e18 	mov.w	lr, #24
 80009d6:	6162      	str	r2, [r4, #20]
 80009d8:	f807 e02c 	strb.w	lr, [r7, ip, lsl #2]
 80009dc:	e9c1 6803 	strd	r6, r8, [r1, #12]
 80009e0:	62a1      	str	r1, [r4, #40]	; 0x28
 80009e2:	2d00      	cmp	r5, #0
 80009e4:	d037      	beq.n	8000a56 <d_substitution+0x17a>
 80009e6:	e9d3 7103 	ldrd	r7, r1, [r3, #12]
 80009ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009ec:	4282      	cmp	r2, r0
 80009ee:	440b      	add	r3, r1
 80009f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009f2:	da36      	bge.n	8000a62 <d_substitution+0x186>
 80009f4:	6923      	ldr	r3, [r4, #16]
 80009f6:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80009fa:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 80009fe:	3201      	adds	r2, #1
 8000a00:	2600      	movs	r6, #0
 8000a02:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8000a06:	6162      	str	r2, [r4, #20]
 8000a08:	2218      	movs	r2, #24
 8000a0a:	f803 2020 	strb.w	r2, [r3, r0, lsl #2]
 8000a0e:	e9c5 7103 	strd	r7, r1, [r5, #12]
 8000a12:	68e3      	ldr	r3, [r4, #12]
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	2a42      	cmp	r2, #66	; 0x42
 8000a18:	d199      	bne.n	800094e <d_substitution+0x72>
 8000a1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	60e3      	str	r3, [r4, #12]
 8000a20:	4620      	mov	r0, r4
 8000a22:	f7ff feeb 	bl	80007fc <d_source_name>
 8000a26:	462a      	mov	r2, r5
 8000a28:	4603      	mov	r3, r0
 8000a2a:	214d      	movs	r1, #77	; 0x4d
 8000a2c:	4620      	mov	r0, r4
 8000a2e:	f7ff fbcf 	bl	80001d0 <d_make_comp>
 8000a32:	68e3      	ldr	r3, [r4, #12]
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	2a42      	cmp	r2, #66	; 0x42
 8000a38:	4605      	mov	r5, r0
 8000a3a:	d0ef      	beq.n	8000a1c <d_substitution+0x140>
 8000a3c:	62a6      	str	r6, [r4, #40]	; 0x28
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	d084      	beq.n	800094c <d_substitution+0x70>
 8000a42:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8000a46:	4293      	cmp	r3, r2
 8000a48:	da80      	bge.n	800094c <d_substitution+0x70>
 8000a4a:	69e1      	ldr	r1, [r4, #28]
 8000a4c:	1c5a      	adds	r2, r3, #1
 8000a4e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8000a52:	6222      	str	r2, [r4, #32]
 8000a54:	e77b      	b.n	800094e <d_substitution+0x72>
 8000a56:	e9d3 7101 	ldrd	r7, r1, [r3, #4]
 8000a5a:	e7c6      	b.n	80009ea <d_substitution+0x10e>
 8000a5c:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8000a60:	e7bf      	b.n	80009e2 <d_substitution+0x106>
 8000a62:	2500      	movs	r5, #0
 8000a64:	e7d5      	b.n	8000a12 <d_substitution+0x136>
 8000a66:	2100      	movs	r1, #0
 8000a68:	e7ba      	b.n	80009e0 <d_substitution+0x104>
 8000a6a:	bf00      	nop
 8000a6c:	08020d24 	.word	0x08020d24

08000a70 <d_type>:
 8000a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a74:	68c2      	ldr	r2, [r0, #12]
 8000a76:	b083      	sub	sp, #12
 8000a78:	4604      	mov	r4, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	f7ff fd7e 	bl	800057c <next_is_type_qual.isra.0>
 8000a80:	2800      	cmp	r0, #0
 8000a82:	d166      	bne.n	8000b52 <d_type+0xe2>
 8000a84:	7813      	ldrb	r3, [r2, #0]
 8000a86:	2b5a      	cmp	r3, #90	; 0x5a
 8000a88:	d831      	bhi.n	8000aee <d_type+0x7e>
 8000a8a:	2b2f      	cmp	r3, #47	; 0x2f
 8000a8c:	d95c      	bls.n	8000b48 <d_type+0xd8>
 8000a8e:	3b30      	subs	r3, #48	; 0x30
 8000a90:	2b2a      	cmp	r3, #42	; 0x2a
 8000a92:	d859      	bhi.n	8000b48 <d_type+0xd8>
 8000a94:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000a98:	008c008c 	.word	0x008c008c
 8000a9c:	008c008c 	.word	0x008c008c
 8000aa0:	008c008c 	.word	0x008c008c
 8000aa4:	008c008c 	.word	0x008c008c
 8000aa8:	008c008c 	.word	0x008c008c
 8000aac:	00580058 	.word	0x00580058
 8000ab0:	00580058 	.word	0x00580058
 8000ab4:	00580058 	.word	0x00580058
 8000ab8:	01d60058 	.word	0x01d60058
 8000abc:	00d90058 	.word	0x00d90058
 8000ac0:	005800ed 	.word	0x005800ed
 8000ac4:	016000e7 	.word	0x016000e7
 8000ac8:	00580058 	.word	0x00580058
 8000acc:	00580058 	.word	0x00580058
 8000ad0:	02180058 	.word	0x02180058
 8000ad4:	00cb008c 	.word	0x00cb008c
 8000ad8:	005800bd 	.word	0x005800bd
 8000adc:	019500af 	.word	0x019500af
 8000ae0:	01be016e 	.word	0x01be016e
 8000ae4:	00580058 	.word	0x00580058
 8000ae8:	00580058 	.word	0x00580058
 8000aec:	008c      	.short	0x008c
 8000aee:	3b61      	subs	r3, #97	; 0x61
 8000af0:	fa5f fc83 	uxtb.w	ip, r3
 8000af4:	f1bc 0f19 	cmp.w	ip, #25
 8000af8:	d826      	bhi.n	8000b48 <d_type+0xd8>
 8000afa:	4dc4      	ldr	r5, [pc, #784]	; (8000e0c <d_type+0x39c>)
 8000afc:	2101      	movs	r1, #1
 8000afe:	fa01 f10c 	lsl.w	r1, r1, ip
 8000b02:	400d      	ands	r5, r1
 8000b04:	b1ed      	cbz	r5, 8000b42 <d_type+0xd2>
 8000b06:	49c2      	ldr	r1, [pc, #776]	; (8000e10 <d_type+0x3a0>)
 8000b08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b0c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8000b10:	e9d4 3505 	ldrd	r3, r5, [r4, #20]
 8000b14:	42ab      	cmp	r3, r5
 8000b16:	f280 83c5 	bge.w	80012a4 <d_type+0x834>
 8000b1a:	6926      	ldr	r6, [r4, #16]
 8000b1c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8000b20:	eb06 058c 	add.w	r5, r6, ip, lsl #2
 8000b24:	3301      	adds	r3, #1
 8000b26:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8000b2a:	6163      	str	r3, [r4, #20]
 8000b2c:	2327      	movs	r3, #39	; 0x27
 8000b2e:	f806 302c 	strb.w	r3, [r6, ip, lsl #2]
 8000b32:	60e9      	str	r1, [r5, #12]
 8000b34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b36:	6849      	ldr	r1, [r1, #4]
 8000b38:	3201      	adds	r2, #1
 8000b3a:	440b      	add	r3, r1
 8000b3c:	60e2      	str	r2, [r4, #12]
 8000b3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b40:	e003      	b.n	8000b4a <d_type+0xda>
 8000b42:	f1bc 0f14 	cmp.w	ip, #20
 8000b46:	d048      	beq.n	8000bda <d_type+0x16a>
 8000b48:	2500      	movs	r5, #0
 8000b4a:	4628      	mov	r0, r5
 8000b4c:	b003      	add	sp, #12
 8000b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b52:	2200      	movs	r2, #0
 8000b54:	a901      	add	r1, sp, #4
 8000b56:	4620      	mov	r0, r4
 8000b58:	f001 fab4 	bl	80020c4 <d_cv_qualifiers>
 8000b5c:	4605      	mov	r5, r0
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	d0f2      	beq.n	8000b48 <d_type+0xd8>
 8000b62:	68e3      	ldr	r3, [r4, #12]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b46      	cmp	r3, #70	; 0x46
 8000b68:	4620      	mov	r0, r4
 8000b6a:	d01e      	beq.n	8000baa <d_type+0x13a>
 8000b6c:	f7ff ff80 	bl	8000a70 <d_type>
 8000b70:	6028      	str	r0, [r5, #0]
 8000b72:	2800      	cmp	r0, #0
 8000b74:	d0e8      	beq.n	8000b48 <d_type+0xd8>
 8000b76:	7803      	ldrb	r3, [r0, #0]
 8000b78:	3b1f      	subs	r3, #31
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d805      	bhi.n	8000b8a <d_type+0x11a>
 8000b7e:	9a01      	ldr	r2, [sp, #4]
 8000b80:	68c3      	ldr	r3, [r0, #12]
 8000b82:	60c2      	str	r2, [r0, #12]
 8000b84:	682a      	ldr	r2, [r5, #0]
 8000b86:	9201      	str	r2, [sp, #4]
 8000b88:	602b      	str	r3, [r5, #0]
 8000b8a:	9d01      	ldr	r5, [sp, #4]
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d0db      	beq.n	8000b48 <d_type+0xd8>
 8000b90:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8000b94:	4293      	cmp	r3, r2
 8000b96:	dad7      	bge.n	8000b48 <d_type+0xd8>
 8000b98:	69e1      	ldr	r1, [r4, #28]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8000ba2:	6222      	str	r2, [r4, #32]
 8000ba4:	b003      	add	sp, #12
 8000ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000baa:	f000 fbfd 	bl	80013a8 <d_function_type>
 8000bae:	e7df      	b.n	8000b70 <d_type+0x100>
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f001 fd6b 	bl	800268c <d_name>
 8000bb6:	4605      	mov	r5, r0
 8000bb8:	9001      	str	r0, [sp, #4]
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d0c4      	beq.n	8000b48 <d_type+0xd8>
 8000bbe:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	dac0      	bge.n	8000b48 <d_type+0xd8>
 8000bc6:	69e1      	ldr	r1, [r4, #28]
 8000bc8:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8000bcc:	9d01      	ldr	r5, [sp, #4]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	6222      	str	r2, [r4, #32]
 8000bd4:	b003      	add	sp, #12
 8000bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bda:	3201      	adds	r2, #1
 8000bdc:	60e2      	str	r2, [r4, #12]
 8000bde:	4620      	mov	r0, r4
 8000be0:	f7ff fe0c 	bl	80007fc <d_source_name>
 8000be4:	462b      	mov	r3, r5
 8000be6:	4602      	mov	r2, r0
 8000be8:	2128      	movs	r1, #40	; 0x28
 8000bea:	4620      	mov	r0, r4
 8000bec:	f7ff faf0 	bl	80001d0 <d_make_comp>
 8000bf0:	4605      	mov	r5, r0
 8000bf2:	9001      	str	r0, [sp, #4]
 8000bf4:	e7e1      	b.n	8000bba <d_type+0x14a>
 8000bf6:	3201      	adds	r2, #1
 8000bf8:	60e2      	str	r2, [r4, #12]
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	f7ff ff38 	bl	8000a70 <d_type>
 8000c00:	2300      	movs	r3, #0
 8000c02:	4602      	mov	r2, r0
 8000c04:	2123      	movs	r1, #35	; 0x23
 8000c06:	4620      	mov	r0, r4
 8000c08:	f7ff fae2 	bl	80001d0 <d_make_comp>
 8000c0c:	4605      	mov	r5, r0
 8000c0e:	9001      	str	r0, [sp, #4]
 8000c10:	e7d3      	b.n	8000bba <d_type+0x14a>
 8000c12:	3201      	adds	r2, #1
 8000c14:	60e2      	str	r2, [r4, #12]
 8000c16:	4620      	mov	r0, r4
 8000c18:	f7ff ff2a 	bl	8000a70 <d_type>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4602      	mov	r2, r0
 8000c20:	2122      	movs	r1, #34	; 0x22
 8000c22:	4620      	mov	r0, r4
 8000c24:	f7ff fad4 	bl	80001d0 <d_make_comp>
 8000c28:	4605      	mov	r5, r0
 8000c2a:	9001      	str	r0, [sp, #4]
 8000c2c:	e7c5      	b.n	8000bba <d_type+0x14a>
 8000c2e:	3201      	adds	r2, #1
 8000c30:	60e2      	str	r2, [r4, #12]
 8000c32:	4620      	mov	r0, r4
 8000c34:	f7ff ff1c 	bl	8000a70 <d_type>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	2124      	movs	r1, #36	; 0x24
 8000c3e:	4620      	mov	r0, r4
 8000c40:	f7ff fac6 	bl	80001d0 <d_make_comp>
 8000c44:	4605      	mov	r5, r0
 8000c46:	9001      	str	r0, [sp, #4]
 8000c48:	e7b7      	b.n	8000bba <d_type+0x14a>
 8000c4a:	3201      	adds	r2, #1
 8000c4c:	60e2      	str	r2, [r4, #12]
 8000c4e:	4620      	mov	r0, r4
 8000c50:	f7ff ff0e 	bl	8000a70 <d_type>
 8000c54:	2300      	movs	r3, #0
 8000c56:	4602      	mov	r2, r0
 8000c58:	2125      	movs	r1, #37	; 0x25
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f7ff fab8 	bl	80001d0 <d_make_comp>
 8000c60:	4605      	mov	r5, r0
 8000c62:	9001      	str	r0, [sp, #4]
 8000c64:	e7a9      	b.n	8000bba <d_type+0x14a>
 8000c66:	4620      	mov	r0, r4
 8000c68:	f000 fb9e 	bl	80013a8 <d_function_type>
 8000c6c:	4605      	mov	r5, r0
 8000c6e:	9001      	str	r0, [sp, #4]
 8000c70:	e7a3      	b.n	8000bba <d_type+0x14a>
 8000c72:	1c53      	adds	r3, r2, #1
 8000c74:	60e3      	str	r3, [r4, #12]
 8000c76:	7853      	ldrb	r3, [r2, #1]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f43f af65 	beq.w	8000b48 <d_type+0xd8>
 8000c7e:	1c93      	adds	r3, r2, #2
 8000c80:	60e3      	str	r3, [r4, #12]
 8000c82:	7853      	ldrb	r3, [r2, #1]
 8000c84:	3b46      	subs	r3, #70	; 0x46
 8000c86:	2b30      	cmp	r3, #48	; 0x30
 8000c88:	f63f af5e 	bhi.w	8000b48 <d_type+0xd8>
 8000c8c:	a101      	add	r1, pc, #4	; (adr r1, 8000c94 <d_type+0x224>)
 8000c8e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c92:	bf00      	nop
 8000c94:	08000f35 	.word	0x08000f35
 8000c98:	08000b49 	.word	0x08000b49
 8000c9c:	08000b49 	.word	0x08000b49
 8000ca0:	08000b49 	.word	0x08000b49
 8000ca4:	08000b49 	.word	0x08000b49
 8000ca8:	08000b49 	.word	0x08000b49
 8000cac:	08000b49 	.word	0x08000b49
 8000cb0:	08000b49 	.word	0x08000b49
 8000cb4:	08000b49 	.word	0x08000b49
 8000cb8:	08000b49 	.word	0x08000b49
 8000cbc:	08000b49 	.word	0x08000b49
 8000cc0:	08000b49 	.word	0x08000b49
 8000cc4:	08000b49 	.word	0x08000b49
 8000cc8:	08000b49 	.word	0x08000b49
 8000ccc:	08000ef9 	.word	0x08000ef9
 8000cd0:	08000b49 	.word	0x08000b49
 8000cd4:	08000b49 	.word	0x08000b49
 8000cd8:	08000b49 	.word	0x08000b49
 8000cdc:	08000b49 	.word	0x08000b49
 8000ce0:	08000b49 	.word	0x08000b49
 8000ce4:	08000b49 	.word	0x08000b49
 8000ce8:	08000b49 	.word	0x08000b49
 8000cec:	08000b49 	.word	0x08000b49
 8000cf0:	08000b49 	.word	0x08000b49
 8000cf4:	08000b49 	.word	0x08000b49
 8000cf8:	08000b49 	.word	0x08000b49
 8000cfc:	08000b49 	.word	0x08000b49
 8000d00:	08000fcd 	.word	0x08000fcd
 8000d04:	08000b49 	.word	0x08000b49
 8000d08:	08000fa1 	.word	0x08000fa1
 8000d0c:	080011bb 	.word	0x080011bb
 8000d10:	0800118b 	.word	0x0800118b
 8000d14:	08001029 	.word	0x08001029
 8000d18:	08000b49 	.word	0x08000b49
 8000d1c:	08000ff9 	.word	0x08000ff9
 8000d20:	0800115b 	.word	0x0800115b
 8000d24:	08000b49 	.word	0x08000b49
 8000d28:	08000b49 	.word	0x08000b49
 8000d2c:	08000b49 	.word	0x08000b49
 8000d30:	08000b49 	.word	0x08000b49
 8000d34:	0800112b 	.word	0x0800112b
 8000d38:	08000b49 	.word	0x08000b49
 8000d3c:	08001113 	.word	0x08001113
 8000d40:	08000b49 	.word	0x08000b49
 8000d44:	08000b49 	.word	0x08000b49
 8000d48:	080010e3 	.word	0x080010e3
 8000d4c:	08000ef9 	.word	0x08000ef9
 8000d50:	080010b3 	.word	0x080010b3
 8000d54:	08001059 	.word	0x08001059
 8000d58:	3201      	adds	r2, #1
 8000d5a:	60e2      	str	r2, [r4, #12]
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	f7ff fe87 	bl	8000a70 <d_type>
 8000d62:	2300      	movs	r3, #0
 8000d64:	4602      	mov	r2, r0
 8000d66:	2126      	movs	r1, #38	; 0x26
 8000d68:	4620      	mov	r0, r4
 8000d6a:	f7ff fa31 	bl	80001d0 <d_make_comp>
 8000d6e:	4605      	mov	r5, r0
 8000d70:	9001      	str	r0, [sp, #4]
 8000d72:	e722      	b.n	8000bba <d_type+0x14a>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f7ff fcd5 	bl	8000724 <d_template_param>
 8000d7a:	68e6      	ldr	r6, [r4, #12]
 8000d7c:	9001      	str	r0, [sp, #4]
 8000d7e:	7833      	ldrb	r3, [r6, #0]
 8000d80:	2b49      	cmp	r3, #73	; 0x49
 8000d82:	4605      	mov	r5, r0
 8000d84:	f47f af19 	bne.w	8000bba <d_type+0x14a>
 8000d88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 8257 	bne.w	800123e <d_type+0x7ce>
 8000d90:	2800      	cmp	r0, #0
 8000d92:	f43f aed9 	beq.w	8000b48 <d_type+0xd8>
 8000d96:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8000d9a:	428a      	cmp	r2, r1
 8000d9c:	f6bf aed4 	bge.w	8000b48 <d_type+0xd8>
 8000da0:	69e1      	ldr	r1, [r4, #28]
 8000da2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8000da6:	3201      	adds	r2, #1
 8000da8:	6222      	str	r2, [r4, #32]
 8000daa:	7832      	ldrb	r2, [r6, #0]
 8000dac:	3a49      	subs	r2, #73	; 0x49
 8000dae:	2a01      	cmp	r2, #1
 8000db0:	d805      	bhi.n	8000dbe <d_type+0x34e>
 8000db2:	3601      	adds	r6, #1
 8000db4:	60e6      	str	r6, [r4, #12]
 8000db6:	4620      	mov	r0, r4
 8000db8:	f000 fe0a 	bl	80019d0 <d_template_args_1>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	462a      	mov	r2, r5
 8000dc0:	e01c      	b.n	8000dfc <d_type+0x38c>
 8000dc2:	7853      	ldrb	r3, [r2, #1]
 8000dc4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000dc8:	2a09      	cmp	r2, #9
 8000dca:	d905      	bls.n	8000dd8 <d_type+0x368>
 8000dcc:	2b5f      	cmp	r3, #95	; 0x5f
 8000dce:	d003      	beq.n	8000dd8 <d_type+0x368>
 8000dd0:	3b41      	subs	r3, #65	; 0x41
 8000dd2:	2b19      	cmp	r3, #25
 8000dd4:	f200 8226 	bhi.w	8001224 <d_type+0x7b4>
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f7ff fd7e 	bl	80008dc <d_substitution>
 8000de0:	68e3      	ldr	r3, [r4, #12]
 8000de2:	9001      	str	r0, [sp, #4]
 8000de4:	781a      	ldrb	r2, [r3, #0]
 8000de6:	2a49      	cmp	r2, #73	; 0x49
 8000de8:	4605      	mov	r5, r0
 8000dea:	f47f aeae 	bne.w	8000b4a <d_type+0xda>
 8000dee:	3301      	adds	r3, #1
 8000df0:	60e3      	str	r3, [r4, #12]
 8000df2:	4620      	mov	r0, r4
 8000df4:	f000 fdec 	bl	80019d0 <d_template_args_1>
 8000df8:	462a      	mov	r2, r5
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	4620      	mov	r0, r4
 8000e00:	f7ff f9e6 	bl	80001d0 <d_make_comp>
 8000e04:	4605      	mov	r5, r0
 8000e06:	9001      	str	r0, [sp, #4]
 8000e08:	e6d7      	b.n	8000bba <d_type+0x14a>
 8000e0a:	bf00      	nop
 8000e0c:	03ec7bff 	.word	0x03ec7bff
 8000e10:	08020de8 	.word	0x08020de8
 8000e14:	3201      	adds	r2, #1
 8000e16:	60e2      	str	r2, [r4, #12]
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f7ff fcef 	bl	80007fc <d_source_name>
 8000e1e:	68e3      	ldr	r3, [r4, #12]
 8000e20:	9001      	str	r0, [sp, #4]
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	2a49      	cmp	r2, #73	; 0x49
 8000e26:	4605      	mov	r5, r0
 8000e28:	f000 81e1 	beq.w	80011ee <d_type+0x77e>
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f7ff fe1f 	bl	8000a70 <d_type>
 8000e32:	462b      	mov	r3, r5
 8000e34:	4602      	mov	r2, r0
 8000e36:	2121      	movs	r1, #33	; 0x21
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f7ff f9c9 	bl	80001d0 <d_make_comp>
 8000e3e:	4605      	mov	r5, r0
 8000e40:	9001      	str	r0, [sp, #4]
 8000e42:	e6ba      	b.n	8000bba <d_type+0x14a>
 8000e44:	1c55      	adds	r5, r2, #1
 8000e46:	60e5      	str	r5, [r4, #12]
 8000e48:	7853      	ldrb	r3, [r2, #1]
 8000e4a:	2b5f      	cmp	r3, #95	; 0x5f
 8000e4c:	f000 81cd 	beq.w	80011ea <d_type+0x77a>
 8000e50:	3b30      	subs	r3, #48	; 0x30
 8000e52:	2b09      	cmp	r3, #9
 8000e54:	f200 81d8 	bhi.w	8001208 <d_type+0x798>
 8000e58:	462b      	mov	r3, r5
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	60e3      	str	r3, [r4, #12]
 8000e60:	7819      	ldrb	r1, [r3, #0]
 8000e62:	3930      	subs	r1, #48	; 0x30
 8000e64:	2909      	cmp	r1, #9
 8000e66:	d9f8      	bls.n	8000e5a <d_type+0x3ea>
 8000e68:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
 8000e6c:	4281      	cmp	r1, r0
 8000e6e:	ebac 0202 	sub.w	r2, ip, r2
 8000e72:	f6bf ae69 	bge.w	8000b48 <d_type+0xd8>
 8000e76:	6927      	ldr	r7, [r4, #16]
 8000e78:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8000e7c:	eb07 0680 	add.w	r6, r7, r0, lsl #2
 8000e80:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 8000e84:	2000      	movs	r0, #0
 8000e86:	3101      	adds	r1, #1
 8000e88:	4282      	cmp	r2, r0
 8000e8a:	e9c6 0001 	strd	r0, r0, [r6, #4]
 8000e8e:	6161      	str	r1, [r4, #20]
 8000e90:	f77f ae5a 	ble.w	8000b48 <d_type+0xd8>
 8000e94:	e9c6 0001 	strd	r0, r0, [r6, #4]
 8000e98:	f807 000e 	strb.w	r0, [r7, lr]
 8000e9c:	e9c6 5203 	strd	r5, r2, [r6, #12]
 8000ea0:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8000ea4:	461d      	mov	r5, r3
 8000ea6:	2a5f      	cmp	r2, #95	; 0x5f
 8000ea8:	f47f ae4e 	bne.w	8000b48 <d_type+0xd8>
 8000eac:	3501      	adds	r5, #1
 8000eae:	60e5      	str	r5, [r4, #12]
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f7ff fddd 	bl	8000a70 <d_type>
 8000eb6:	4632      	mov	r2, r6
 8000eb8:	4603      	mov	r3, r0
 8000eba:	212a      	movs	r1, #42	; 0x2a
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f7ff f987 	bl	80001d0 <d_make_comp>
 8000ec2:	4605      	mov	r5, r0
 8000ec4:	9001      	str	r0, [sp, #4]
 8000ec6:	e678      	b.n	8000bba <d_type+0x14a>
 8000ec8:	3201      	adds	r2, #1
 8000eca:	60e2      	str	r2, [r4, #12]
 8000ecc:	4620      	mov	r0, r4
 8000ece:	f7ff fdcf 	bl	8000a70 <d_type>
 8000ed2:	4605      	mov	r5, r0
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	f43f ae37 	beq.w	8000b48 <d_type+0xd8>
 8000eda:	4620      	mov	r0, r4
 8000edc:	f7ff fdc8 	bl	8000a70 <d_type>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	f43f ae30 	beq.w	8000b48 <d_type+0xd8>
 8000ee8:	462a      	mov	r2, r5
 8000eea:	212b      	movs	r1, #43	; 0x2b
 8000eec:	4620      	mov	r0, r4
 8000eee:	f7ff f96f 	bl	80001d0 <d_make_comp>
 8000ef2:	4605      	mov	r5, r0
 8000ef4:	9001      	str	r0, [sp, #4]
 8000ef6:	e660      	b.n	8000bba <d_type+0x14a>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000efc:	6323      	str	r3, [r4, #48]	; 0x30
 8000efe:	4620      	mov	r0, r4
 8000f00:	f000 fe2e 	bl	8001b60 <d_expression_1>
 8000f04:	6325      	str	r5, [r4, #48]	; 0x30
 8000f06:	4602      	mov	r2, r0
 8000f08:	2300      	movs	r3, #0
 8000f0a:	2144      	movs	r1, #68	; 0x44
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f7ff f95f 	bl	80001d0 <d_make_comp>
 8000f12:	4605      	mov	r5, r0
 8000f14:	9001      	str	r0, [sp, #4]
 8000f16:	2800      	cmp	r0, #0
 8000f18:	f43f ae16 	beq.w	8000b48 <d_type+0xd8>
 8000f1c:	68e3      	ldr	r3, [r4, #12]
 8000f1e:	781a      	ldrb	r2, [r3, #0]
 8000f20:	2a00      	cmp	r2, #0
 8000f22:	f43f ae11 	beq.w	8000b48 <d_type+0xd8>
 8000f26:	1c5a      	adds	r2, r3, #1
 8000f28:	60e2      	str	r2, [r4, #12]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b45      	cmp	r3, #69	; 0x45
 8000f2e:	f47f ae0b 	bne.w	8000b48 <d_type+0xd8>
 8000f32:	e644      	b.n	8000bbe <d_type+0x14e>
 8000f34:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	f280 81b5 	bge.w	80012a8 <d_type+0x838>
 8000f3e:	6921      	ldr	r1, [r4, #16]
 8000f40:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8000f44:	eb01 0580 	add.w	r5, r1, r0, lsl #2
 8000f48:	3301      	adds	r3, #1
 8000f4a:	2600      	movs	r6, #0
 8000f4c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8000f50:	6163      	str	r3, [r4, #20]
 8000f52:	232c      	movs	r3, #44	; 0x2c
 8000f54:	f801 3020 	strb.w	r3, [r1, r0, lsl #2]
 8000f58:	7893      	ldrb	r3, [r2, #2]
 8000f5a:	9501      	str	r5, [sp, #4]
 8000f5c:	3b30      	subs	r3, #48	; 0x30
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b09      	cmp	r3, #9
 8000f62:	bf94      	ite	ls
 8000f64:	2301      	movls	r3, #1
 8000f66:	4633      	movhi	r3, r6
 8000f68:	822b      	strh	r3, [r5, #16]
 8000f6a:	d802      	bhi.n	8000f72 <d_type+0x502>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff f9a7 	bl	80002c0 <d_number>
 8000f72:	4620      	mov	r0, r4
 8000f74:	f7ff fd7c 	bl	8000a70 <d_type>
 8000f78:	60e8      	str	r0, [r5, #12]
 8000f7a:	2800      	cmp	r0, #0
 8000f7c:	f43f ade4 	beq.w	8000b48 <d_type+0xd8>
 8000f80:	4620      	mov	r0, r4
 8000f82:	f7ff f99d 	bl	80002c0 <d_number>
 8000f86:	68e2      	ldr	r2, [r4, #12]
 8000f88:	7813      	ldrb	r3, [r2, #0]
 8000f8a:	b113      	cbz	r3, 8000f92 <d_type+0x522>
 8000f8c:	1c53      	adds	r3, r2, #1
 8000f8e:	60e3      	str	r3, [r4, #12]
 8000f90:	7813      	ldrb	r3, [r2, #0]
 8000f92:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
 8000f96:	fab3 f383 	clz	r3, r3
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	826b      	strh	r3, [r5, #18]
 8000f9e:	e5d4      	b.n	8000b4a <d_type+0xda>
 8000fa0:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	f6bf adcf 	bge.w	8000b48 <d_type+0xd8>
 8000faa:	6922      	ldr	r2, [r4, #16]
 8000fac:	49c0      	ldr	r1, [pc, #768]	; (80012b0 <d_type+0x840>)
 8000fae:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8000fb2:	00a8      	lsls	r0, r5, #2
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	6163      	str	r3, [r4, #20]
 8000fb8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8000fc2:	5413      	strb	r3, [r2, r0]
 8000fc4:	230e      	movs	r3, #14
 8000fc6:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8000fca:	e5be      	b.n	8000b4a <d_type+0xda>
 8000fcc:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	f6bf adb9 	bge.w	8000b48 <d_type+0xd8>
 8000fd6:	6922      	ldr	r2, [r4, #16]
 8000fd8:	49b6      	ldr	r1, [pc, #728]	; (80012b4 <d_type+0x844>)
 8000fda:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8000fde:	00a8      	lsls	r0, r5, #2
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	6163      	str	r3, [r4, #20]
 8000fe4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8000fee:	5413      	strb	r3, [r2, r0]
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8000ff6:	e5a8      	b.n	8000b4a <d_type+0xda>
 8000ff8:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	f280 816b 	bge.w	80012d8 <d_type+0x868>
 8001002:	6922      	ldr	r2, [r4, #16]
 8001004:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001008:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800100c:	3301      	adds	r3, #1
 800100e:	2000      	movs	r0, #0
 8001010:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001014:	6163      	str	r3, [r4, #20]
 8001016:	2327      	movs	r3, #39	; 0x27
 8001018:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 800101c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800101e:	4aa6      	ldr	r2, [pc, #664]	; (80012b8 <d_type+0x848>)
 8001020:	60ea      	str	r2, [r5, #12]
 8001022:	3304      	adds	r3, #4
 8001024:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001026:	e590      	b.n	8000b4a <d_type+0xda>
 8001028:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800102c:	4293      	cmp	r3, r2
 800102e:	f280 8153 	bge.w	80012d8 <d_type+0x868>
 8001032:	6922      	ldr	r2, [r4, #16]
 8001034:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001038:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800103c:	3301      	adds	r3, #1
 800103e:	2000      	movs	r0, #0
 8001040:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001044:	6163      	str	r3, [r4, #20]
 8001046:	2327      	movs	r3, #39	; 0x27
 8001048:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 800104c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800104e:	4a9b      	ldr	r2, [pc, #620]	; (80012bc <d_type+0x84c>)
 8001050:	60ea      	str	r2, [r5, #12]
 8001052:	3309      	adds	r3, #9
 8001054:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001056:	e578      	b.n	8000b4a <d_type+0xda>
 8001058:	7893      	ldrb	r3, [r2, #2]
 800105a:	2b5f      	cmp	r3, #95	; 0x5f
 800105c:	f000 8114 	beq.w	8001288 <d_type+0x818>
 8001060:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001064:	4293      	cmp	r3, r2
 8001066:	f6bf ad6f 	bge.w	8000b48 <d_type+0xd8>
 800106a:	6922      	ldr	r2, [r4, #16]
 800106c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001070:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8001074:	3301      	adds	r3, #1
 8001076:	2000      	movs	r0, #0
 8001078:	e9c5 0001 	strd	r0, r0, [r5, #4]
 800107c:	6163      	str	r3, [r4, #20]
 800107e:	2343      	movs	r3, #67	; 0x43
 8001080:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 8001084:	4620      	mov	r0, r4
 8001086:	f7ff f91b 	bl	80002c0 <d_number>
 800108a:	60e8      	str	r0, [r5, #12]
 800108c:	68e3      	ldr	r3, [r4, #12]
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	2a5f      	cmp	r2, #95	; 0x5f
 8001092:	f47f ad59 	bne.w	8000b48 <d_type+0xd8>
 8001096:	3301      	adds	r3, #1
 8001098:	60e3      	str	r3, [r4, #12]
 800109a:	4620      	mov	r0, r4
 800109c:	f7ff fce8 	bl	8000a70 <d_type>
 80010a0:	462a      	mov	r2, r5
 80010a2:	4603      	mov	r3, r0
 80010a4:	212d      	movs	r1, #45	; 0x2d
 80010a6:	4620      	mov	r0, r4
 80010a8:	f7ff f892 	bl	80001d0 <d_make_comp>
 80010ac:	4605      	mov	r5, r0
 80010ae:	9001      	str	r0, [sp, #4]
 80010b0:	e583      	b.n	8000bba <d_type+0x14a>
 80010b2:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80010b6:	4293      	cmp	r3, r2
 80010b8:	f280 810e 	bge.w	80012d8 <d_type+0x868>
 80010bc:	6922      	ldr	r2, [r4, #16]
 80010be:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80010c2:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80010c6:	3301      	adds	r3, #1
 80010c8:	2000      	movs	r0, #0
 80010ca:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80010ce:	6163      	str	r3, [r4, #20]
 80010d0:	2327      	movs	r3, #39	; 0x27
 80010d2:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 80010d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80010d8:	4a79      	ldr	r2, [pc, #484]	; (80012c0 <d_type+0x850>)
 80010da:	60ea      	str	r2, [r5, #12]
 80010dc:	3307      	adds	r3, #7
 80010de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010e0:	e533      	b.n	8000b4a <d_type+0xda>
 80010e2:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80010e6:	4293      	cmp	r3, r2
 80010e8:	f280 80f6 	bge.w	80012d8 <d_type+0x868>
 80010ec:	6922      	ldr	r2, [r4, #16]
 80010ee:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80010f2:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80010f6:	3301      	adds	r3, #1
 80010f8:	2000      	movs	r0, #0
 80010fa:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80010fe:	6163      	str	r3, [r4, #20]
 8001100:	2327      	movs	r3, #39	; 0x27
 8001102:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 8001106:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001108:	4a6e      	ldr	r2, [pc, #440]	; (80012c4 <d_type+0x854>)
 800110a:	60ea      	str	r2, [r5, #12]
 800110c:	3308      	adds	r3, #8
 800110e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001110:	e51b      	b.n	8000b4a <d_type+0xda>
 8001112:	4620      	mov	r0, r4
 8001114:	f7ff fcac 	bl	8000a70 <d_type>
 8001118:	2300      	movs	r3, #0
 800111a:	4602      	mov	r2, r0
 800111c:	214c      	movs	r1, #76	; 0x4c
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff f856 	bl	80001d0 <d_make_comp>
 8001124:	4605      	mov	r5, r0
 8001126:	9001      	str	r0, [sp, #4]
 8001128:	e547      	b.n	8000bba <d_type+0x14a>
 800112a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800112e:	4293      	cmp	r3, r2
 8001130:	f280 80d2 	bge.w	80012d8 <d_type+0x868>
 8001134:	6922      	ldr	r2, [r4, #16]
 8001136:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800113a:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800113e:	3301      	adds	r3, #1
 8001140:	2000      	movs	r0, #0
 8001142:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001146:	6163      	str	r3, [r4, #20]
 8001148:	2327      	movs	r3, #39	; 0x27
 800114a:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 800114e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001150:	4a5d      	ldr	r2, [pc, #372]	; (80012c8 <d_type+0x858>)
 8001152:	60ea      	str	r2, [r5, #12]
 8001154:	3311      	adds	r3, #17
 8001156:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001158:	e4f7      	b.n	8000b4a <d_type+0xda>
 800115a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800115e:	4293      	cmp	r3, r2
 8001160:	f280 80ba 	bge.w	80012d8 <d_type+0x868>
 8001164:	6922      	ldr	r2, [r4, #16]
 8001166:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800116a:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800116e:	3301      	adds	r3, #1
 8001170:	2000      	movs	r0, #0
 8001172:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001176:	6163      	str	r3, [r4, #20]
 8001178:	2327      	movs	r3, #39	; 0x27
 800117a:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 800117e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001180:	4a52      	ldr	r2, [pc, #328]	; (80012cc <d_type+0x85c>)
 8001182:	60ea      	str	r2, [r5, #12]
 8001184:	3308      	adds	r3, #8
 8001186:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001188:	e4df      	b.n	8000b4a <d_type+0xda>
 800118a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800118e:	4293      	cmp	r3, r2
 8001190:	f280 80a2 	bge.w	80012d8 <d_type+0x868>
 8001194:	6922      	ldr	r2, [r4, #16]
 8001196:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800119a:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800119e:	3301      	adds	r3, #1
 80011a0:	2000      	movs	r0, #0
 80011a2:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80011a6:	6163      	str	r3, [r4, #20]
 80011a8:	2327      	movs	r3, #39	; 0x27
 80011aa:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 80011ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011b0:	4a47      	ldr	r2, [pc, #284]	; (80012d0 <d_type+0x860>)
 80011b2:	60ea      	str	r2, [r5, #12]
 80011b4:	330a      	adds	r3, #10
 80011b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011b8:	e4c7      	b.n	8000b4a <d_type+0xda>
 80011ba:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80011be:	4293      	cmp	r3, r2
 80011c0:	f280 808a 	bge.w	80012d8 <d_type+0x868>
 80011c4:	6922      	ldr	r2, [r4, #16]
 80011c6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80011ca:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80011ce:	3301      	adds	r3, #1
 80011d0:	2000      	movs	r0, #0
 80011d2:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80011d6:	6163      	str	r3, [r4, #20]
 80011d8:	2327      	movs	r3, #39	; 0x27
 80011da:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 80011de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011e0:	4a3c      	ldr	r2, [pc, #240]	; (80012d4 <d_type+0x864>)
 80011e2:	60ea      	str	r2, [r5, #12]
 80011e4:	3309      	adds	r3, #9
 80011e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011e8:	e4af      	b.n	8000b4a <d_type+0xda>
 80011ea:	2600      	movs	r6, #0
 80011ec:	e65e      	b.n	8000eac <d_type+0x43c>
 80011ee:	3301      	adds	r3, #1
 80011f0:	60e3      	str	r3, [r4, #12]
 80011f2:	4620      	mov	r0, r4
 80011f4:	f000 fbec 	bl	80019d0 <d_template_args_1>
 80011f8:	462a      	mov	r2, r5
 80011fa:	4603      	mov	r3, r0
 80011fc:	2104      	movs	r1, #4
 80011fe:	4620      	mov	r0, r4
 8001200:	f7fe ffe6 	bl	80001d0 <d_make_comp>
 8001204:	4605      	mov	r5, r0
 8001206:	e611      	b.n	8000e2c <d_type+0x3bc>
 8001208:	2301      	movs	r3, #1
 800120a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800120c:	6323      	str	r3, [r4, #48]	; 0x30
 800120e:	4620      	mov	r0, r4
 8001210:	f000 fca6 	bl	8001b60 <d_expression_1>
 8001214:	6325      	str	r5, [r4, #48]	; 0x30
 8001216:	4606      	mov	r6, r0
 8001218:	2800      	cmp	r0, #0
 800121a:	f43f ac95 	beq.w	8000b48 <d_type+0xd8>
 800121e:	68e5      	ldr	r5, [r4, #12]
 8001220:	782a      	ldrb	r2, [r5, #0]
 8001222:	e640      	b.n	8000ea6 <d_type+0x436>
 8001224:	4620      	mov	r0, r4
 8001226:	f001 fa31 	bl	800268c <d_name>
 800122a:	4605      	mov	r5, r0
 800122c:	9001      	str	r0, [sp, #4]
 800122e:	2800      	cmp	r0, #0
 8001230:	f43f ac8a 	beq.w	8000b48 <d_type+0xd8>
 8001234:	7803      	ldrb	r3, [r0, #0]
 8001236:	2b18      	cmp	r3, #24
 8001238:	f47f acc1 	bne.w	8000bbe <d_type+0x14e>
 800123c:	e485      	b.n	8000b4a <d_type+0xda>
 800123e:	1c73      	adds	r3, r6, #1
 8001240:	60e3      	str	r3, [r4, #12]
 8001242:	4620      	mov	r0, r4
 8001244:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001248:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800124c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800124e:	f000 fbbf 	bl	80019d0 <d_template_args_1>
 8001252:	68e3      	ldr	r3, [r4, #12]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b49      	cmp	r3, #73	; 0x49
 8001258:	d006      	beq.n	8001268 <d_type+0x7f8>
 800125a:	60e6      	str	r6, [r4, #12]
 800125c:	f8c4 9014 	str.w	r9, [r4, #20]
 8001260:	f8c4 8020 	str.w	r8, [r4, #32]
 8001264:	62e7      	str	r7, [r4, #44]	; 0x2c
 8001266:	e4a8      	b.n	8000bba <d_type+0x14a>
 8001268:	2d00      	cmp	r5, #0
 800126a:	f43f ac6d 	beq.w	8000b48 <d_type+0xd8>
 800126e:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8001272:	4299      	cmp	r1, r3
 8001274:	f6bf ac68 	bge.w	8000b48 <d_type+0xd8>
 8001278:	69e2      	ldr	r2, [r4, #28]
 800127a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800127e:	3101      	adds	r1, #1
 8001280:	4603      	mov	r3, r0
 8001282:	462a      	mov	r2, r5
 8001284:	6221      	str	r1, [r4, #32]
 8001286:	e5b9      	b.n	8000dfc <d_type+0x38c>
 8001288:	3203      	adds	r2, #3
 800128a:	2301      	movs	r3, #1
 800128c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800128e:	60e2      	str	r2, [r4, #12]
 8001290:	6323      	str	r3, [r4, #48]	; 0x30
 8001292:	4620      	mov	r0, r4
 8001294:	f000 fc64 	bl	8001b60 <d_expression_1>
 8001298:	6325      	str	r5, [r4, #48]	; 0x30
 800129a:	4605      	mov	r5, r0
 800129c:	2800      	cmp	r0, #0
 800129e:	f47f aef5 	bne.w	800108c <d_type+0x61c>
 80012a2:	e451      	b.n	8000b48 <d_type+0xd8>
 80012a4:	68c3      	ldr	r3, [r0, #12]
 80012a6:	deff      	udf	#255	; 0xff
 80012a8:	2300      	movs	r3, #0
 80012aa:	701b      	strb	r3, [r3, #0]
 80012ac:	deff      	udf	#255	; 0xff
 80012ae:	bf00      	nop
 80012b0:	0802201c 	.word	0x0802201c
 80012b4:	08022014 	.word	0x08022014
 80012b8:	0802102c 	.word	0x0802102c
 80012bc:	08020ff0 	.word	0x08020ff0
 80012c0:	08021040 	.word	0x08021040
 80012c4:	08021054 	.word	0x08021054
 80012c8:	0802107c 	.word	0x0802107c
 80012cc:	08021068 	.word	0x08021068
 80012d0:	08021018 	.word	0x08021018
 80012d4:	08021004 	.word	0x08021004
 80012d8:	2300      	movs	r3, #0
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	deff      	udf	#255	; 0xff
 80012de:	bf00      	nop

080012e0 <d_parmlist>:
 80012e0:	b530      	push	{r4, r5, lr}
 80012e2:	68c2      	ldr	r2, [r0, #12]
 80012e4:	b083      	sub	sp, #12
 80012e6:	2300      	movs	r3, #0
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	7813      	ldrb	r3, [r2, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d034      	beq.n	800135a <d_parmlist+0x7a>
 80012f0:	4604      	mov	r4, r0
 80012f2:	ad01      	add	r5, sp, #4
 80012f4:	2b4f      	cmp	r3, #79	; 0x4f
 80012f6:	d00c      	beq.n	8001312 <d_parmlist+0x32>
 80012f8:	d809      	bhi.n	800130e <d_parmlist+0x2e>
 80012fa:	2b2e      	cmp	r3, #46	; 0x2e
 80012fc:	d001      	beq.n	8001302 <d_parmlist+0x22>
 80012fe:	2b45      	cmp	r3, #69	; 0x45
 8001300:	d10a      	bne.n	8001318 <d_parmlist+0x38>
 8001302:	9801      	ldr	r0, [sp, #4]
 8001304:	b348      	cbz	r0, 800135a <d_parmlist+0x7a>
 8001306:	6903      	ldr	r3, [r0, #16]
 8001308:	b1cb      	cbz	r3, 800133e <d_parmlist+0x5e>
 800130a:	b003      	add	sp, #12
 800130c:	bd30      	pop	{r4, r5, pc}
 800130e:	2b52      	cmp	r3, #82	; 0x52
 8001310:	d102      	bne.n	8001318 <d_parmlist+0x38>
 8001312:	7853      	ldrb	r3, [r2, #1]
 8001314:	2b45      	cmp	r3, #69	; 0x45
 8001316:	d0f4      	beq.n	8001302 <d_parmlist+0x22>
 8001318:	4620      	mov	r0, r4
 800131a:	f7ff fba9 	bl	8000a70 <d_type>
 800131e:	4602      	mov	r2, r0
 8001320:	2300      	movs	r3, #0
 8001322:	212e      	movs	r1, #46	; 0x2e
 8001324:	4620      	mov	r0, r4
 8001326:	b1c2      	cbz	r2, 800135a <d_parmlist+0x7a>
 8001328:	f7fe ff52 	bl	80001d0 <d_make_comp>
 800132c:	6028      	str	r0, [r5, #0]
 800132e:	b1a0      	cbz	r0, 800135a <d_parmlist+0x7a>
 8001330:	68e2      	ldr	r2, [r4, #12]
 8001332:	7813      	ldrb	r3, [r2, #0]
 8001334:	f100 0510 	add.w	r5, r0, #16
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1db      	bne.n	80012f4 <d_parmlist+0x14>
 800133c:	e7e1      	b.n	8001302 <d_parmlist+0x22>
 800133e:	68c2      	ldr	r2, [r0, #12]
 8001340:	7811      	ldrb	r1, [r2, #0]
 8001342:	2927      	cmp	r1, #39	; 0x27
 8001344:	d1e1      	bne.n	800130a <d_parmlist+0x2a>
 8001346:	68d2      	ldr	r2, [r2, #12]
 8001348:	7c11      	ldrb	r1, [r2, #16]
 800134a:	2909      	cmp	r1, #9
 800134c:	d1dd      	bne.n	800130a <d_parmlist+0x2a>
 800134e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001350:	6852      	ldr	r2, [r2, #4]
 8001352:	1a89      	subs	r1, r1, r2
 8001354:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001356:	60c3      	str	r3, [r0, #12]
 8001358:	e7d7      	b.n	800130a <d_parmlist+0x2a>
 800135a:	2000      	movs	r0, #0
 800135c:	b003      	add	sp, #12
 800135e:	bd30      	pop	{r4, r5, pc}

08001360 <d_bare_function_type>:
 8001360:	b570      	push	{r4, r5, r6, lr}
 8001362:	68c3      	ldr	r3, [r0, #12]
 8001364:	781a      	ldrb	r2, [r3, #0]
 8001366:	2a4a      	cmp	r2, #74	; 0x4a
 8001368:	4605      	mov	r5, r0
 800136a:	d01a      	beq.n	80013a2 <d_bare_function_type+0x42>
 800136c:	b181      	cbz	r1, 8001390 <d_bare_function_type+0x30>
 800136e:	4628      	mov	r0, r5
 8001370:	f7ff fb7e 	bl	8000a70 <d_type>
 8001374:	4604      	mov	r4, r0
 8001376:	b190      	cbz	r0, 800139e <d_bare_function_type+0x3e>
 8001378:	4628      	mov	r0, r5
 800137a:	f7ff ffb1 	bl	80012e0 <d_parmlist>
 800137e:	4603      	mov	r3, r0
 8001380:	b168      	cbz	r0, 800139e <d_bare_function_type+0x3e>
 8001382:	4622      	mov	r2, r4
 8001384:	4628      	mov	r0, r5
 8001386:	2129      	movs	r1, #41	; 0x29
 8001388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800138c:	f7fe bf20 	b.w	80001d0 <d_make_comp>
 8001390:	4628      	mov	r0, r5
 8001392:	460c      	mov	r4, r1
 8001394:	f7ff ffa4 	bl	80012e0 <d_parmlist>
 8001398:	4603      	mov	r3, r0
 800139a:	2800      	cmp	r0, #0
 800139c:	d1f1      	bne.n	8001382 <d_bare_function_type+0x22>
 800139e:	2000      	movs	r0, #0
 80013a0:	bd70      	pop	{r4, r5, r6, pc}
 80013a2:	3301      	adds	r3, #1
 80013a4:	60c3      	str	r3, [r0, #12]
 80013a6:	e7e2      	b.n	800136e <d_bare_function_type+0xe>

080013a8 <d_function_type>:
 80013a8:	b510      	push	{r4, lr}
 80013aa:	4604      	mov	r4, r0
 80013ac:	6880      	ldr	r0, [r0, #8]
 80013ae:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
 80013b2:	d10b      	bne.n	80013cc <d_function_type+0x24>
 80013b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80013b6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80013ba:	d806      	bhi.n	80013ca <d_function_type+0x22>
 80013bc:	1c51      	adds	r1, r2, #1
 80013be:	68e3      	ldr	r3, [r4, #12]
 80013c0:	63e1      	str	r1, [r4, #60]	; 0x3c
 80013c2:	7819      	ldrb	r1, [r3, #0]
 80013c4:	2946      	cmp	r1, #70	; 0x46
 80013c6:	d007      	beq.n	80013d8 <d_function_type+0x30>
 80013c8:	63e2      	str	r2, [r4, #60]	; 0x3c
 80013ca:	bd10      	pop	{r4, pc}
 80013cc:	68e3      	ldr	r3, [r4, #12]
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	2a46      	cmp	r2, #70	; 0x46
 80013d2:	d001      	beq.n	80013d8 <d_function_type+0x30>
 80013d4:	2000      	movs	r0, #0
 80013d6:	bd10      	pop	{r4, pc}
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	60e2      	str	r2, [r4, #12]
 80013dc:	785a      	ldrb	r2, [r3, #1]
 80013de:	2a59      	cmp	r2, #89	; 0x59
 80013e0:	bf04      	itt	eq
 80013e2:	3302      	addeq	r3, #2
 80013e4:	60e3      	streq	r3, [r4, #12]
 80013e6:	2101      	movs	r1, #1
 80013e8:	4620      	mov	r0, r4
 80013ea:	f7ff ffb9 	bl	8001360 <d_bare_function_type>
 80013ee:	4601      	mov	r1, r0
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7fe ffc3 	bl	800037c <d_ref_qualifier>
 80013f6:	68e3      	ldr	r3, [r4, #12]
 80013f8:	781a      	ldrb	r2, [r3, #0]
 80013fa:	2a45      	cmp	r2, #69	; 0x45
 80013fc:	bf04      	itt	eq
 80013fe:	3301      	addeq	r3, #1
 8001400:	60e3      	streq	r3, [r4, #12]
 8001402:	68a3      	ldr	r3, [r4, #8]
 8001404:	bf18      	it	ne
 8001406:	2000      	movne	r0, #0
 8001408:	035b      	lsls	r3, r3, #13
 800140a:	d4de      	bmi.n	80013ca <d_function_type+0x22>
 800140c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800140e:	3a01      	subs	r2, #1
 8001410:	e7da      	b.n	80013c8 <d_function_type+0x20>
 8001412:	bf00      	nop

08001414 <d_operator_name>:
 8001414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001416:	68c3      	ldr	r3, [r0, #12]
 8001418:	781f      	ldrb	r7, [r3, #0]
 800141a:	4606      	mov	r6, r0
 800141c:	bb77      	cbnz	r7, 800147c <d_operator_name+0x68>
 800141e:	f04f 0e00 	mov.w	lr, #0
 8001422:	4d3d      	ldr	r5, [pc, #244]	; (8001518 <d_operator_name+0x104>)
 8001424:	2148      	movs	r1, #72	; 0x48
 8001426:	2200      	movs	r2, #0
 8001428:	1a8b      	subs	r3, r1, r2
 800142a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800142e:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8001432:	0118      	lsls	r0, r3, #4
 8001434:	eb05 1c03 	add.w	ip, r5, r3, lsl #4
 8001438:	582c      	ldr	r4, [r5, r0]
 800143a:	7820      	ldrb	r0, [r4, #0]
 800143c:	42b8      	cmp	r0, r7
 800143e:	d006      	beq.n	800144e <d_operator_name+0x3a>
 8001440:	bf94      	ite	ls
 8001442:	1c5a      	addls	r2, r3, #1
 8001444:	4619      	movhi	r1, r3
 8001446:	428a      	cmp	r2, r1
 8001448:	d1ee      	bne.n	8001428 <d_operator_name+0x14>
 800144a:	2000      	movs	r0, #0
 800144c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800144e:	7860      	ldrb	r0, [r4, #1]
 8001450:	4570      	cmp	r0, lr
 8001452:	d1f5      	bne.n	8001440 <d_operator_name+0x2c>
 8001454:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
 8001458:	4293      	cmp	r3, r2
 800145a:	daf6      	bge.n	800144a <d_operator_name+0x36>
 800145c:	6932      	ldr	r2, [r6, #16]
 800145e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001462:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8001466:	3301      	adds	r3, #1
 8001468:	2400      	movs	r4, #0
 800146a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800146e:	6173      	str	r3, [r6, #20]
 8001470:	2332      	movs	r3, #50	; 0x32
 8001472:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 8001476:	f8c0 c00c 	str.w	ip, [r0, #12]
 800147a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	60c2      	str	r2, [r0, #12]
 8001480:	f893 e001 	ldrb.w	lr, [r3, #1]
 8001484:	781f      	ldrb	r7, [r3, #0]
 8001486:	f1be 0f00 	cmp.w	lr, #0
 800148a:	d102      	bne.n	8001492 <d_operator_name+0x7e>
 800148c:	2f76      	cmp	r7, #118	; 0x76
 800148e:	d0c8      	beq.n	8001422 <d_operator_name+0xe>
 8001490:	e7c5      	b.n	800141e <d_operator_name+0xa>
 8001492:	1c9a      	adds	r2, r3, #2
 8001494:	60c2      	str	r2, [r0, #12]
 8001496:	2f76      	cmp	r7, #118	; 0x76
 8001498:	f893 e001 	ldrb.w	lr, [r3, #1]
 800149c:	d11f      	bne.n	80014de <d_operator_name+0xca>
 800149e:	f1ae 0430 	sub.w	r4, lr, #48	; 0x30
 80014a2:	b2e3      	uxtb	r3, r4
 80014a4:	2b09      	cmp	r3, #9
 80014a6:	d8bc      	bhi.n	8001422 <d_operator_name+0xe>
 80014a8:	f7ff f9a8 	bl	80007fc <d_source_name>
 80014ac:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
 80014b0:	428b      	cmp	r3, r1
 80014b2:	4602      	mov	r2, r0
 80014b4:	dac9      	bge.n	800144a <d_operator_name+0x36>
 80014b6:	6937      	ldr	r7, [r6, #16]
 80014b8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80014bc:	eb07 0081 	add.w	r0, r7, r1, lsl #2
 80014c0:	3301      	adds	r3, #1
 80014c2:	2500      	movs	r5, #0
 80014c4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80014c8:	0089      	lsls	r1, r1, #2
 80014ca:	6173      	str	r3, [r6, #20]
 80014cc:	2a00      	cmp	r2, #0
 80014ce:	d0bc      	beq.n	800144a <d_operator_name+0x36>
 80014d0:	2333      	movs	r3, #51	; 0x33
 80014d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80014d6:	547b      	strb	r3, [r7, r1]
 80014d8:	e9c0 4203 	strd	r4, r2, [r0, #12]
 80014dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014de:	2f63      	cmp	r7, #99	; 0x63
 80014e0:	d19f      	bne.n	8001422 <d_operator_name+0xe>
 80014e2:	f1be 0f76 	cmp.w	lr, #118	; 0x76
 80014e6:	d19c      	bne.n	8001422 <d_operator_name+0xe>
 80014e8:	e9d0 340c 	ldrd	r3, r4, [r0, #48]	; 0x30
 80014ec:	fab3 f383 	clz	r3, r3
 80014f0:	095b      	lsrs	r3, r3, #5
 80014f2:	6343      	str	r3, [r0, #52]	; 0x34
 80014f4:	f7ff fabc 	bl	8000a70 <d_type>
 80014f8:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80014fa:	4602      	mov	r2, r0
 80014fc:	b133      	cbz	r3, 800150c <d_operator_name+0xf8>
 80014fe:	2300      	movs	r3, #0
 8001500:	2135      	movs	r1, #53	; 0x35
 8001502:	4630      	mov	r0, r6
 8001504:	f7fe fe64 	bl	80001d0 <d_make_comp>
 8001508:	6374      	str	r4, [r6, #52]	; 0x34
 800150a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800150c:	2134      	movs	r1, #52	; 0x34
 800150e:	4630      	mov	r0, r6
 8001510:	f7fe fe5e 	bl	80001d0 <d_make_comp>
 8001514:	e7f8      	b.n	8001508 <d_operator_name+0xf4>
 8001516:	bf00      	nop
 8001518:	08021090 	.word	0x08021090

0800151c <d_unqualified_name>:
 800151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800151e:	68c3      	ldr	r3, [r0, #12]
 8001520:	781a      	ldrb	r2, [r3, #0]
 8001522:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8001526:	2909      	cmp	r1, #9
 8001528:	4604      	mov	r4, r0
 800152a:	d965      	bls.n	80015f8 <d_unqualified_name+0xdc>
 800152c:	2a55      	cmp	r2, #85	; 0x55
 800152e:	d06c      	beq.n	800160a <d_unqualified_name+0xee>
 8001530:	d838      	bhi.n	80015a4 <d_unqualified_name+0x88>
 8001532:	2a44      	cmp	r2, #68	; 0x44
 8001534:	d90f      	bls.n	8001556 <d_unqualified_name+0x3a>
 8001536:	2a4c      	cmp	r2, #76	; 0x4c
 8001538:	d10a      	bne.n	8001550 <d_unqualified_name+0x34>
 800153a:	3301      	adds	r3, #1
 800153c:	60c3      	str	r3, [r0, #12]
 800153e:	f7ff f95d 	bl	80007fc <d_source_name>
 8001542:	4605      	mov	r5, r0
 8001544:	b120      	cbz	r0, 8001550 <d_unqualified_name+0x34>
 8001546:	4620      	mov	r0, r4
 8001548:	f7fe ffaa 	bl	80004a0 <d_discriminator>
 800154c:	2800      	cmp	r0, #0
 800154e:	d13b      	bne.n	80015c8 <d_unqualified_name+0xac>
 8001550:	2500      	movs	r5, #0
 8001552:	4628      	mov	r0, r5
 8001554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001556:	2a42      	cmp	r2, #66	; 0x42
 8001558:	d9fa      	bls.n	8001550 <d_unqualified_name+0x34>
 800155a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800155c:	b141      	cbz	r1, 8001570 <d_unqualified_name+0x54>
 800155e:	7808      	ldrb	r0, [r1, #0]
 8001560:	2800      	cmp	r0, #0
 8001562:	f040 8091 	bne.w	8001688 <d_unqualified_name+0x16c>
 8001566:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001568:	6908      	ldr	r0, [r1, #16]
 800156a:	4402      	add	r2, r0
 800156c:	62e2      	str	r2, [r4, #44]	; 0x2c
 800156e:	781a      	ldrb	r2, [r3, #0]
 8001570:	2a43      	cmp	r2, #67	; 0x43
 8001572:	f000 80c8 	beq.w	8001706 <d_unqualified_name+0x1ea>
 8001576:	2a44      	cmp	r2, #68	; 0x44
 8001578:	f040 8084 	bne.w	8001684 <d_unqualified_name+0x168>
 800157c:	785a      	ldrb	r2, [r3, #1]
 800157e:	3a30      	subs	r2, #48	; 0x30
 8001580:	2a05      	cmp	r2, #5
 8001582:	d8e5      	bhi.n	8001550 <d_unqualified_name+0x34>
 8001584:	a001      	add	r0, pc, #4	; (adr r0, 800158c <d_unqualified_name+0x70>)
 8001586:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800158a:	bf00      	nop
 800158c:	08001697 	.word	0x08001697
 8001590:	080016ef 	.word	0x080016ef
 8001594:	080016dd 	.word	0x080016dd
 8001598:	08001551 	.word	0x08001551
 800159c:	080016e9 	.word	0x080016e9
 80015a0:	080016e3 	.word	0x080016e3
 80015a4:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 80015a8:	2919      	cmp	r1, #25
 80015aa:	d8d1      	bhi.n	8001550 <d_unqualified_name+0x34>
 80015ac:	2a6f      	cmp	r2, #111	; 0x6f
 80015ae:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80015b0:	f000 80a0 	beq.w	80016f4 <d_unqualified_name+0x1d8>
 80015b4:	4620      	mov	r0, r4
 80015b6:	f7ff ff2d 	bl	8001414 <d_operator_name>
 80015ba:	6325      	str	r5, [r4, #48]	; 0x30
 80015bc:	4605      	mov	r5, r0
 80015be:	b118      	cbz	r0, 80015c8 <d_unqualified_name+0xac>
 80015c0:	7803      	ldrb	r3, [r0, #0]
 80015c2:	2b32      	cmp	r3, #50	; 0x32
 80015c4:	f000 80c6 	beq.w	8001754 <d_unqualified_name+0x238>
 80015c8:	68e3      	ldr	r3, [r4, #12]
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	2a42      	cmp	r2, #66	; 0x42
 80015ce:	d1c0      	bne.n	8001552 <d_unqualified_name+0x36>
 80015d0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80015d2:	3301      	adds	r3, #1
 80015d4:	60e3      	str	r3, [r4, #12]
 80015d6:	4620      	mov	r0, r4
 80015d8:	f7ff f910 	bl	80007fc <d_source_name>
 80015dc:	462a      	mov	r2, r5
 80015de:	4603      	mov	r3, r0
 80015e0:	214d      	movs	r1, #77	; 0x4d
 80015e2:	4620      	mov	r0, r4
 80015e4:	f7fe fdf4 	bl	80001d0 <d_make_comp>
 80015e8:	68e3      	ldr	r3, [r4, #12]
 80015ea:	781a      	ldrb	r2, [r3, #0]
 80015ec:	2a42      	cmp	r2, #66	; 0x42
 80015ee:	4605      	mov	r5, r0
 80015f0:	d0ef      	beq.n	80015d2 <d_unqualified_name+0xb6>
 80015f2:	62a6      	str	r6, [r4, #40]	; 0x28
 80015f4:	4628      	mov	r0, r5
 80015f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015f8:	f7ff f900 	bl	80007fc <d_source_name>
 80015fc:	68e3      	ldr	r3, [r4, #12]
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	4605      	mov	r5, r0
 8001602:	2a42      	cmp	r2, #66	; 0x42
 8001604:	d0e4      	beq.n	80015d0 <d_unqualified_name+0xb4>
 8001606:	4628      	mov	r0, r5
 8001608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800160a:	785a      	ldrb	r2, [r3, #1]
 800160c:	2a6c      	cmp	r2, #108	; 0x6c
 800160e:	f000 80c1 	beq.w	8001794 <d_unqualified_name+0x278>
 8001612:	2a74      	cmp	r2, #116	; 0x74
 8001614:	d19c      	bne.n	8001550 <d_unqualified_name+0x34>
 8001616:	1c59      	adds	r1, r3, #1
 8001618:	60c1      	str	r1, [r0, #12]
 800161a:	785a      	ldrb	r2, [r3, #1]
 800161c:	2a74      	cmp	r2, #116	; 0x74
 800161e:	d137      	bne.n	8001690 <d_unqualified_name+0x174>
 8001620:	1c9a      	adds	r2, r3, #2
 8001622:	60c2      	str	r2, [r0, #12]
 8001624:	789a      	ldrb	r2, [r3, #2]
 8001626:	2a5f      	cmp	r2, #95	; 0x5f
 8001628:	f000 8108 	beq.w	800183c <d_unqualified_name+0x320>
 800162c:	2a6e      	cmp	r2, #110	; 0x6e
 800162e:	d08f      	beq.n	8001550 <d_unqualified_name+0x34>
 8001630:	f7fe fe46 	bl	80002c0 <d_number>
 8001634:	3001      	adds	r0, #1
 8001636:	68e3      	ldr	r3, [r4, #12]
 8001638:	f100 80fd 	bmi.w	8001836 <d_unqualified_name+0x31a>
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	2a5f      	cmp	r2, #95	; 0x5f
 8001640:	d120      	bne.n	8001684 <d_unqualified_name+0x168>
 8001642:	3301      	adds	r3, #1
 8001644:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8001648:	428a      	cmp	r2, r1
 800164a:	60e3      	str	r3, [r4, #12]
 800164c:	f280 8100 	bge.w	8001850 <d_unqualified_name+0x334>
 8001650:	6926      	ldr	r6, [r4, #16]
 8001652:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 8001656:	eb06 0587 	add.w	r5, r6, r7, lsl #2
 800165a:	3201      	adds	r2, #1
 800165c:	2100      	movs	r1, #0
 800165e:	e9c5 1101 	strd	r1, r1, [r5, #4]
 8001662:	6162      	str	r2, [r4, #20]
 8001664:	2249      	movs	r2, #73	; 0x49
 8001666:	f806 2027 	strb.w	r2, [r6, r7, lsl #2]
 800166a:	60e8      	str	r0, [r5, #12]
 800166c:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
 8001670:	4282      	cmp	r2, r0
 8001672:	f280 80ea 	bge.w	800184a <d_unqualified_name+0x32e>
 8001676:	69e1      	ldr	r1, [r4, #28]
 8001678:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 800167c:	3201      	adds	r2, #1
 800167e:	6222      	str	r2, [r4, #32]
 8001680:	781a      	ldrb	r2, [r3, #0]
 8001682:	e7be      	b.n	8001602 <d_unqualified_name+0xe6>
 8001684:	2500      	movs	r5, #0
 8001686:	e7bc      	b.n	8001602 <d_unqualified_name+0xe6>
 8001688:	2818      	cmp	r0, #24
 800168a:	f47f af71 	bne.w	8001570 <d_unqualified_name+0x54>
 800168e:	e76a      	b.n	8001566 <d_unqualified_name+0x4a>
 8001690:	460b      	mov	r3, r1
 8001692:	2500      	movs	r5, #0
 8001694:	e7b5      	b.n	8001602 <d_unqualified_name+0xe6>
 8001696:	f04f 0e01 	mov.w	lr, #1
 800169a:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 800169e:	1c9f      	adds	r7, r3, #2
 80016a0:	4282      	cmp	r2, r0
 80016a2:	60e7      	str	r7, [r4, #12]
 80016a4:	f280 80c2 	bge.w	800182c <d_unqualified_name+0x310>
 80016a8:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80016ac:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80016b0:	eb0c 0580 	add.w	r5, ip, r0, lsl #2
 80016b4:	3201      	adds	r2, #1
 80016b6:	2600      	movs	r6, #0
 80016b8:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80016bc:	0080      	lsls	r0, r0, #2
 80016be:	6162      	str	r2, [r4, #20]
 80016c0:	2900      	cmp	r1, #0
 80016c2:	f000 80b3 	beq.w	800182c <d_unqualified_name+0x310>
 80016c6:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80016ca:	2208      	movs	r2, #8
 80016cc:	f80c 2000 	strb.w	r2, [ip, r0]
 80016d0:	f885 e00c 	strb.w	lr, [r5, #12]
 80016d4:	6129      	str	r1, [r5, #16]
 80016d6:	789a      	ldrb	r2, [r3, #2]
 80016d8:	463b      	mov	r3, r7
 80016da:	e792      	b.n	8001602 <d_unqualified_name+0xe6>
 80016dc:	f04f 0e03 	mov.w	lr, #3
 80016e0:	e7db      	b.n	800169a <d_unqualified_name+0x17e>
 80016e2:	f04f 0e05 	mov.w	lr, #5
 80016e6:	e7d8      	b.n	800169a <d_unqualified_name+0x17e>
 80016e8:	f04f 0e04 	mov.w	lr, #4
 80016ec:	e7d5      	b.n	800169a <d_unqualified_name+0x17e>
 80016ee:	f04f 0e02 	mov.w	lr, #2
 80016f2:	e7d2      	b.n	800169a <d_unqualified_name+0x17e>
 80016f4:	785a      	ldrb	r2, [r3, #1]
 80016f6:	2a6e      	cmp	r2, #110	; 0x6e
 80016f8:	f47f af5c 	bne.w	80015b4 <d_unqualified_name+0x98>
 80016fc:	3302      	adds	r3, #2
 80016fe:	2200      	movs	r2, #0
 8001700:	60c3      	str	r3, [r0, #12]
 8001702:	6302      	str	r2, [r0, #48]	; 0x30
 8001704:	e756      	b.n	80015b4 <d_unqualified_name+0x98>
 8001706:	785a      	ldrb	r2, [r3, #1]
 8001708:	2a49      	cmp	r2, #73	; 0x49
 800170a:	d07f      	beq.n	800180c <d_unqualified_name+0x2f0>
 800170c:	f1a2 0031 	sub.w	r0, r2, #49	; 0x31
 8001710:	2804      	cmp	r0, #4
 8001712:	f63f af1d 	bhi.w	8001550 <d_unqualified_name+0x34>
 8001716:	3a30      	subs	r2, #48	; 0x30
 8001718:	3302      	adds	r3, #2
 800171a:	b2d6      	uxtb	r6, r2
 800171c:	60e3      	str	r3, [r4, #12]
 800171e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001722:	4293      	cmp	r3, r2
 8001724:	f280 8086 	bge.w	8001834 <d_unqualified_name+0x318>
 8001728:	6927      	ldr	r7, [r4, #16]
 800172a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800172e:	eb07 0582 	add.w	r5, r7, r2, lsl #2
 8001732:	3301      	adds	r3, #1
 8001734:	2000      	movs	r0, #0
 8001736:	e9c5 0001 	strd	r0, r0, [r5, #4]
 800173a:	0092      	lsls	r2, r2, #2
 800173c:	6163      	str	r3, [r4, #20]
 800173e:	2900      	cmp	r1, #0
 8001740:	d078      	beq.n	8001834 <d_unqualified_name+0x318>
 8001742:	2307      	movs	r3, #7
 8001744:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001748:	54bb      	strb	r3, [r7, r2]
 800174a:	68e3      	ldr	r3, [r4, #12]
 800174c:	732e      	strb	r6, [r5, #12]
 800174e:	6129      	str	r1, [r5, #16]
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	e756      	b.n	8001602 <d_unqualified_name+0xe6>
 8001754:	68c2      	ldr	r2, [r0, #12]
 8001756:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001758:	6891      	ldr	r1, [r2, #8]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	3307      	adds	r3, #7
 800175e:	440b      	add	r3, r1
 8001760:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001762:	7813      	ldrb	r3, [r2, #0]
 8001764:	2b6c      	cmp	r3, #108	; 0x6c
 8001766:	f47f af2f 	bne.w	80015c8 <d_unqualified_name+0xac>
 800176a:	7853      	ldrb	r3, [r2, #1]
 800176c:	2b69      	cmp	r3, #105	; 0x69
 800176e:	f47f af2b 	bne.w	80015c8 <d_unqualified_name+0xac>
 8001772:	7893      	ldrb	r3, [r2, #2]
 8001774:	2b00      	cmp	r3, #0
 8001776:	f47f af27 	bne.w	80015c8 <d_unqualified_name+0xac>
 800177a:	4620      	mov	r0, r4
 800177c:	f7ff f83e 	bl	80007fc <d_source_name>
 8001780:	462a      	mov	r2, r5
 8001782:	4603      	mov	r3, r0
 8001784:	2137      	movs	r1, #55	; 0x37
 8001786:	4620      	mov	r0, r4
 8001788:	f7fe fd22 	bl	80001d0 <d_make_comp>
 800178c:	68e3      	ldr	r3, [r4, #12]
 800178e:	4605      	mov	r5, r0
 8001790:	781a      	ldrb	r2, [r3, #0]
 8001792:	e736      	b.n	8001602 <d_unqualified_name+0xe6>
 8001794:	1c59      	adds	r1, r3, #1
 8001796:	60c1      	str	r1, [r0, #12]
 8001798:	785a      	ldrb	r2, [r3, #1]
 800179a:	2a6c      	cmp	r2, #108	; 0x6c
 800179c:	f47f af78 	bne.w	8001690 <d_unqualified_name+0x174>
 80017a0:	3302      	adds	r3, #2
 80017a2:	60c3      	str	r3, [r0, #12]
 80017a4:	f7ff fd9c 	bl	80012e0 <d_parmlist>
 80017a8:	68e3      	ldr	r3, [r4, #12]
 80017aa:	4606      	mov	r6, r0
 80017ac:	2800      	cmp	r0, #0
 80017ae:	d042      	beq.n	8001836 <d_unqualified_name+0x31a>
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	2a45      	cmp	r2, #69	; 0x45
 80017b4:	f47f af66 	bne.w	8001684 <d_unqualified_name+0x168>
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	60e2      	str	r2, [r4, #12]
 80017bc:	785a      	ldrb	r2, [r3, #1]
 80017be:	2a5f      	cmp	r2, #95	; 0x5f
 80017c0:	d049      	beq.n	8001856 <d_unqualified_name+0x33a>
 80017c2:	2a6e      	cmp	r2, #110	; 0x6e
 80017c4:	f43f aec4 	beq.w	8001550 <d_unqualified_name+0x34>
 80017c8:	4620      	mov	r0, r4
 80017ca:	f7fe fd79 	bl	80002c0 <d_number>
 80017ce:	3001      	adds	r0, #1
 80017d0:	68e3      	ldr	r3, [r4, #12]
 80017d2:	d430      	bmi.n	8001836 <d_unqualified_name+0x31a>
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	2a5f      	cmp	r2, #95	; 0x5f
 80017d8:	f47f af54 	bne.w	8001684 <d_unqualified_name+0x168>
 80017dc:	3301      	adds	r3, #1
 80017de:	6962      	ldr	r2, [r4, #20]
 80017e0:	69a1      	ldr	r1, [r4, #24]
 80017e2:	60e3      	str	r3, [r4, #12]
 80017e4:	428a      	cmp	r2, r1
 80017e6:	da33      	bge.n	8001850 <d_unqualified_name+0x334>
 80017e8:	6921      	ldr	r1, [r4, #16]
 80017ea:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 80017ee:	eb01 0587 	add.w	r5, r1, r7, lsl #2
 80017f2:	3201      	adds	r2, #1
 80017f4:	f04f 0c00 	mov.w	ip, #0
 80017f8:	e9c5 cc01 	strd	ip, ip, [r5, #4]
 80017fc:	6162      	str	r2, [r4, #20]
 80017fe:	2247      	movs	r2, #71	; 0x47
 8001800:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
 8001804:	e9c5 6003 	strd	r6, r0, [r5, #12]
 8001808:	781a      	ldrb	r2, [r3, #0]
 800180a:	e6fa      	b.n	8001602 <d_unqualified_name+0xe6>
 800180c:	1c59      	adds	r1, r3, #1
 800180e:	60e1      	str	r1, [r4, #12]
 8001810:	789a      	ldrb	r2, [r3, #2]
 8001812:	f1a2 0031 	sub.w	r0, r2, #49	; 0x31
 8001816:	2804      	cmp	r0, #4
 8001818:	d813      	bhi.n	8001842 <d_unqualified_name+0x326>
 800181a:	3303      	adds	r3, #3
 800181c:	3a30      	subs	r2, #48	; 0x30
 800181e:	60e3      	str	r3, [r4, #12]
 8001820:	4620      	mov	r0, r4
 8001822:	b2d6      	uxtb	r6, r2
 8001824:	f7ff f924 	bl	8000a70 <d_type>
 8001828:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800182a:	e778      	b.n	800171e <d_unqualified_name+0x202>
 800182c:	789a      	ldrb	r2, [r3, #2]
 800182e:	2500      	movs	r5, #0
 8001830:	463b      	mov	r3, r7
 8001832:	e6e6      	b.n	8001602 <d_unqualified_name+0xe6>
 8001834:	68e3      	ldr	r3, [r4, #12]
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	2500      	movs	r5, #0
 800183a:	e6e2      	b.n	8001602 <d_unqualified_name+0xe6>
 800183c:	3303      	adds	r3, #3
 800183e:	2000      	movs	r0, #0
 8001840:	e700      	b.n	8001644 <d_unqualified_name+0x128>
 8001842:	785a      	ldrb	r2, [r3, #1]
 8001844:	2500      	movs	r5, #0
 8001846:	460b      	mov	r3, r1
 8001848:	e6db      	b.n	8001602 <d_unqualified_name+0xe6>
 800184a:	781a      	ldrb	r2, [r3, #0]
 800184c:	460d      	mov	r5, r1
 800184e:	e6d8      	b.n	8001602 <d_unqualified_name+0xe6>
 8001850:	781a      	ldrb	r2, [r3, #0]
 8001852:	2500      	movs	r5, #0
 8001854:	e6d5      	b.n	8001602 <d_unqualified_name+0xe6>
 8001856:	3302      	adds	r3, #2
 8001858:	2000      	movs	r0, #0
 800185a:	e7c0      	b.n	80017de <d_unqualified_name+0x2c2>

0800185c <d_expr_primary>:
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185e:	68c2      	ldr	r2, [r0, #12]
 8001860:	7813      	ldrb	r3, [r2, #0]
 8001862:	2b4c      	cmp	r3, #76	; 0x4c
 8001864:	d132      	bne.n	80018cc <d_expr_primary+0x70>
 8001866:	1c53      	adds	r3, r2, #1
 8001868:	60c3      	str	r3, [r0, #12]
 800186a:	7851      	ldrb	r1, [r2, #1]
 800186c:	295f      	cmp	r1, #95	; 0x5f
 800186e:	4604      	mov	r4, r0
 8001870:	d051      	beq.n	8001916 <d_expr_primary+0xba>
 8001872:	295a      	cmp	r1, #90	; 0x5a
 8001874:	d113      	bne.n	800189e <d_expr_primary+0x42>
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	60e2      	str	r2, [r4, #12]
 800187a:	785b      	ldrb	r3, [r3, #1]
 800187c:	2b47      	cmp	r3, #71	; 0x47
 800187e:	d043      	beq.n	8001908 <d_expr_primary+0xac>
 8001880:	2b54      	cmp	r3, #84	; 0x54
 8001882:	d041      	beq.n	8001908 <d_expr_primary+0xac>
 8001884:	2100      	movs	r1, #0
 8001886:	4620      	mov	r0, r4
 8001888:	f001 f84e 	bl	8002928 <d_encoding.part.0>
 800188c:	68e3      	ldr	r3, [r4, #12]
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	4606      	mov	r6, r0
 8001892:	2a45      	cmp	r2, #69	; 0x45
 8001894:	d11a      	bne.n	80018cc <d_expr_primary+0x70>
 8001896:	3301      	adds	r3, #1
 8001898:	60e3      	str	r3, [r4, #12]
 800189a:	4630      	mov	r0, r6
 800189c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800189e:	f7ff f8e7 	bl	8000a70 <d_type>
 80018a2:	4606      	mov	r6, r0
 80018a4:	b190      	cbz	r0, 80018cc <d_expr_primary+0x70>
 80018a6:	7803      	ldrb	r3, [r0, #0]
 80018a8:	2b27      	cmp	r3, #39	; 0x27
 80018aa:	d012      	beq.n	80018d2 <d_expr_primary+0x76>
 80018ac:	68e2      	ldr	r2, [r4, #12]
 80018ae:	7815      	ldrb	r5, [r2, #0]
 80018b0:	2d6e      	cmp	r5, #110	; 0x6e
 80018b2:	d023      	beq.n	80018fc <d_expr_primary+0xa0>
 80018b4:	213d      	movs	r1, #61	; 0x3d
 80018b6:	2d45      	cmp	r5, #69	; 0x45
 80018b8:	d059      	beq.n	800196e <d_expr_primary+0x112>
 80018ba:	4613      	mov	r3, r2
 80018bc:	e003      	b.n	80018c6 <d_expr_primary+0x6a>
 80018be:	60e3      	str	r3, [r4, #12]
 80018c0:	781d      	ldrb	r5, [r3, #0]
 80018c2:	2d45      	cmp	r5, #69	; 0x45
 80018c4:	d02f      	beq.n	8001926 <d_expr_primary+0xca>
 80018c6:	3301      	adds	r3, #1
 80018c8:	2d00      	cmp	r5, #0
 80018ca:	d1f8      	bne.n	80018be <d_expr_primary+0x62>
 80018cc:	2600      	movs	r6, #0
 80018ce:	4630      	mov	r0, r6
 80018d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018d2:	68c3      	ldr	r3, [r0, #12]
 80018d4:	7c1a      	ldrb	r2, [r3, #16]
 80018d6:	b11a      	cbz	r2, 80018e0 <d_expr_primary+0x84>
 80018d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	1a52      	subs	r2, r2, r1
 80018de:	62e2      	str	r2, [r4, #44]	; 0x2c
 80018e0:	4925      	ldr	r1, [pc, #148]	; (8001978 <d_expr_primary+0x11c>)
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	f004 fca4 	bl	8006230 <strcmp>
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d1df      	bne.n	80018ac <d_expr_primary+0x50>
 80018ec:	68e2      	ldr	r2, [r4, #12]
 80018ee:	7815      	ldrb	r5, [r2, #0]
 80018f0:	2d45      	cmp	r5, #69	; 0x45
 80018f2:	d03e      	beq.n	8001972 <d_expr_primary+0x116>
 80018f4:	2d6e      	cmp	r5, #110	; 0x6e
 80018f6:	d001      	beq.n	80018fc <d_expr_primary+0xa0>
 80018f8:	213d      	movs	r1, #61	; 0x3d
 80018fa:	e7de      	b.n	80018ba <d_expr_primary+0x5e>
 80018fc:	1c53      	adds	r3, r2, #1
 80018fe:	60e3      	str	r3, [r4, #12]
 8001900:	7855      	ldrb	r5, [r2, #1]
 8001902:	213e      	movs	r1, #62	; 0x3e
 8001904:	461a      	mov	r2, r3
 8001906:	e7d6      	b.n	80018b6 <d_expr_primary+0x5a>
 8001908:	4620      	mov	r0, r4
 800190a:	f000 fc85 	bl	8002218 <d_special_name>
 800190e:	68e3      	ldr	r3, [r4, #12]
 8001910:	4606      	mov	r6, r0
 8001912:	781a      	ldrb	r2, [r3, #0]
 8001914:	e7bd      	b.n	8001892 <d_expr_primary+0x36>
 8001916:	1c93      	adds	r3, r2, #2
 8001918:	60c3      	str	r3, [r0, #12]
 800191a:	7892      	ldrb	r2, [r2, #2]
 800191c:	2a5a      	cmp	r2, #90	; 0x5a
 800191e:	bf18      	it	ne
 8001920:	2600      	movne	r6, #0
 8001922:	d1b6      	bne.n	8001892 <d_expr_primary+0x36>
 8001924:	e7a7      	b.n	8001876 <d_expr_primary+0x1a>
 8001926:	1a9d      	subs	r5, r3, r2
 8001928:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
 800192c:	4298      	cmp	r0, r3
 800192e:	da1c      	bge.n	800196a <d_expr_primary+0x10e>
 8001930:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001934:	eb00 0780 	add.w	r7, r0, r0, lsl #2
 8001938:	eb0e 0387 	add.w	r3, lr, r7, lsl #2
 800193c:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8001940:	2700      	movs	r7, #0
 8001942:	3001      	adds	r0, #1
 8001944:	42bd      	cmp	r5, r7
 8001946:	e9c3 7701 	strd	r7, r7, [r3, #4]
 800194a:	6160      	str	r0, [r4, #20]
 800194c:	dd0d      	ble.n	800196a <d_expr_primary+0x10e>
 800194e:	e9c3 7701 	strd	r7, r7, [r3, #4]
 8001952:	f80e 700c 	strb.w	r7, [lr, ip]
 8001956:	e9c3 2503 	strd	r2, r5, [r3, #12]
 800195a:	4632      	mov	r2, r6
 800195c:	4620      	mov	r0, r4
 800195e:	f7fe fc37 	bl	80001d0 <d_make_comp>
 8001962:	68e3      	ldr	r3, [r4, #12]
 8001964:	4606      	mov	r6, r0
 8001966:	781a      	ldrb	r2, [r3, #0]
 8001968:	e793      	b.n	8001892 <d_expr_primary+0x36>
 800196a:	2300      	movs	r3, #0
 800196c:	e7f5      	b.n	800195a <d_expr_primary+0xfe>
 800196e:	2500      	movs	r5, #0
 8001970:	e7da      	b.n	8001928 <d_expr_primary+0xcc>
 8001972:	3201      	adds	r2, #1
 8001974:	60e2      	str	r2, [r4, #12]
 8001976:	e7aa      	b.n	80018ce <d_expr_primary+0x72>
 8001978:	0802202c 	.word	0x0802202c

0800197c <d_template_arg>:
 800197c:	b538      	push	{r3, r4, r5, lr}
 800197e:	68c2      	ldr	r2, [r0, #12]
 8001980:	7813      	ldrb	r3, [r2, #0]
 8001982:	2b4c      	cmp	r3, #76	; 0x4c
 8001984:	d01f      	beq.n	80019c6 <d_template_arg+0x4a>
 8001986:	4604      	mov	r4, r0
 8001988:	d807      	bhi.n	800199a <d_template_arg+0x1e>
 800198a:	3b49      	subs	r3, #73	; 0x49
 800198c:	2b01      	cmp	r3, #1
 800198e:	d815      	bhi.n	80019bc <d_template_arg+0x40>
 8001990:	3201      	adds	r2, #1
 8001992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001996:	60c2      	str	r2, [r0, #12]
 8001998:	e01a      	b.n	80019d0 <d_template_args_1>
 800199a:	2b58      	cmp	r3, #88	; 0x58
 800199c:	d10e      	bne.n	80019bc <d_template_arg+0x40>
 800199e:	3201      	adds	r2, #1
 80019a0:	2301      	movs	r3, #1
 80019a2:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80019a4:	60c2      	str	r2, [r0, #12]
 80019a6:	6303      	str	r3, [r0, #48]	; 0x30
 80019a8:	f000 f8da 	bl	8001b60 <d_expression_1>
 80019ac:	68e3      	ldr	r3, [r4, #12]
 80019ae:	6325      	str	r5, [r4, #48]	; 0x30
 80019b0:	781a      	ldrb	r2, [r3, #0]
 80019b2:	2a45      	cmp	r2, #69	; 0x45
 80019b4:	d10a      	bne.n	80019cc <d_template_arg+0x50>
 80019b6:	3301      	adds	r3, #1
 80019b8:	60e3      	str	r3, [r4, #12]
 80019ba:	bd38      	pop	{r3, r4, r5, pc}
 80019bc:	4620      	mov	r0, r4
 80019be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019c2:	f7ff b855 	b.w	8000a70 <d_type>
 80019c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019ca:	e747      	b.n	800185c <d_expr_primary>
 80019cc:	2000      	movs	r0, #0
 80019ce:	bd38      	pop	{r3, r4, r5, pc}

080019d0 <d_template_args_1>:
 80019d0:	b570      	push	{r4, r5, r6, lr}
 80019d2:	68c3      	ldr	r3, [r0, #12]
 80019d4:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	2a45      	cmp	r2, #69	; 0x45
 80019da:	b082      	sub	sp, #8
 80019dc:	4604      	mov	r4, r0
 80019de:	d01f      	beq.n	8001a20 <d_template_args_1+0x50>
 80019e0:	2300      	movs	r3, #0
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	ad01      	add	r5, sp, #4
 80019e6:	e009      	b.n	80019fc <d_template_args_1+0x2c>
 80019e8:	f7fe fbf2 	bl	80001d0 <d_make_comp>
 80019ec:	6028      	str	r0, [r5, #0]
 80019ee:	f100 0510 	add.w	r5, r0, #16
 80019f2:	b160      	cbz	r0, 8001a0e <d_template_args_1+0x3e>
 80019f4:	68e3      	ldr	r3, [r4, #12]
 80019f6:	781a      	ldrb	r2, [r3, #0]
 80019f8:	2a45      	cmp	r2, #69	; 0x45
 80019fa:	d00b      	beq.n	8001a14 <d_template_args_1+0x44>
 80019fc:	4620      	mov	r0, r4
 80019fe:	f7ff ffbd 	bl	800197c <d_template_arg>
 8001a02:	4602      	mov	r2, r0
 8001a04:	2300      	movs	r3, #0
 8001a06:	212f      	movs	r1, #47	; 0x2f
 8001a08:	4620      	mov	r0, r4
 8001a0a:	2a00      	cmp	r2, #0
 8001a0c:	d1ec      	bne.n	80019e8 <d_template_args_1+0x18>
 8001a0e:	2000      	movs	r0, #0
 8001a10:	b002      	add	sp, #8
 8001a12:	bd70      	pop	{r4, r5, r6, pc}
 8001a14:	9801      	ldr	r0, [sp, #4]
 8001a16:	62a6      	str	r6, [r4, #40]	; 0x28
 8001a18:	3301      	adds	r3, #1
 8001a1a:	60e3      	str	r3, [r4, #12]
 8001a1c:	b002      	add	sp, #8
 8001a1e:	bd70      	pop	{r4, r5, r6, pc}
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	2300      	movs	r3, #0
 8001a24:	60c2      	str	r2, [r0, #12]
 8001a26:	212f      	movs	r1, #47	; 0x2f
 8001a28:	461a      	mov	r2, r3
 8001a2a:	b002      	add	sp, #8
 8001a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001a30:	f7fe bbce 	b.w	80001d0 <d_make_comp>

08001a34 <d_prefix>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	68c2      	ldr	r2, [r0, #12]
 8001a38:	7814      	ldrb	r4, [r2, #0]
 8001a3a:	b394      	cbz	r4, 8001aa2 <d_prefix+0x6e>
 8001a3c:	4606      	mov	r6, r0
 8001a3e:	460f      	mov	r7, r1
 8001a40:	2500      	movs	r5, #0
 8001a42:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8001a46:	2b4a      	cmp	r3, #74	; 0x4a
 8001a48:	d82b      	bhi.n	8001aa2 <d_prefix+0x6e>
 8001a4a:	e8df f003 	tbb	[pc, r3]
 8001a4e:	2d2d      	.short	0x2d2d
 8001a50:	2d2d2d2d 	.word	0x2d2d2d2d
 8001a54:	2d2d2d2d 	.word	0x2d2d2d2d
 8001a58:	2a2a2a2a 	.word	0x2a2a2a2a
 8001a5c:	2a2a2a2a 	.word	0x2a2a2a2a
 8001a60:	2b772d2a 	.word	0x2b772d2a
 8001a64:	682a2a2a 	.word	0x682a2a2a
 8001a68:	5f2d2a2a 	.word	0x5f2d2a2a
 8001a6c:	2a2a2a2a 	.word	0x2a2a2a2a
 8001a70:	2d4b532a 	.word	0x2d4b532a
 8001a74:	2a2a2a2a 	.word	0x2a2a2a2a
 8001a78:	2a2a2a2a 	.word	0x2a2a2a2a
 8001a7c:	2d2a2a2a 	.word	0x2d2a2a2a
 8001a80:	2d2d2d2d 	.word	0x2d2d2d2d
 8001a84:	2d2d2d2d 	.word	0x2d2d2d2d
 8001a88:	2d2d2d2d 	.word	0x2d2d2d2d
 8001a8c:	2d2d2d2d 	.word	0x2d2d2d2d
 8001a90:	2d2d2d2d 	.word	0x2d2d2d2d
 8001a94:	2d2d2d2d 	.word	0x2d2d2d2d
 8001a98:	2d          	.byte	0x2d
 8001a99:	00          	.byte	0x00
 8001a9a:	68f2      	ldr	r2, [r6, #12]
 8001a9c:	7814      	ldrb	r4, [r2, #0]
 8001a9e:	2c00      	cmp	r4, #0
 8001aa0:	d1cf      	bne.n	8001a42 <d_prefix+0xe>
 8001aa2:	2500      	movs	r5, #0
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aa8:	4630      	mov	r0, r6
 8001aaa:	f7ff fd37 	bl	800151c <d_unqualified_name>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2d00      	cmp	r5, #0
 8001ab2:	d14e      	bne.n	8001b52 <d_prefix+0x11e>
 8001ab4:	4605      	mov	r5, r0
 8001ab6:	2c53      	cmp	r4, #83	; 0x53
 8001ab8:	d0ef      	beq.n	8001a9a <d_prefix+0x66>
 8001aba:	68f2      	ldr	r2, [r6, #12]
 8001abc:	7814      	ldrb	r4, [r2, #0]
 8001abe:	2c45      	cmp	r4, #69	; 0x45
 8001ac0:	d0f0      	beq.n	8001aa4 <d_prefix+0x70>
 8001ac2:	2f00      	cmp	r7, #0
 8001ac4:	d0eb      	beq.n	8001a9e <d_prefix+0x6a>
 8001ac6:	2d00      	cmp	r5, #0
 8001ac8:	d0eb      	beq.n	8001aa2 <d_prefix+0x6e>
 8001aca:	e9d6 3108 	ldrd	r3, r1, [r6, #32]
 8001ace:	428b      	cmp	r3, r1
 8001ad0:	dae7      	bge.n	8001aa2 <d_prefix+0x6e>
 8001ad2:	69f1      	ldr	r1, [r6, #28]
 8001ad4:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	6233      	str	r3, [r6, #32]
 8001adc:	7814      	ldrb	r4, [r2, #0]
 8001ade:	2c00      	cmp	r4, #0
 8001ae0:	d1af      	bne.n	8001a42 <d_prefix+0xe>
 8001ae2:	e7de      	b.n	8001aa2 <d_prefix+0x6e>
 8001ae4:	4630      	mov	r0, r6
 8001ae6:	f7fe fe1d 	bl	8000724 <d_template_param>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2d00      	cmp	r5, #0
 8001aee:	d130      	bne.n	8001b52 <d_prefix+0x11e>
 8001af0:	461d      	mov	r5, r3
 8001af2:	e7e2      	b.n	8001aba <d_prefix+0x86>
 8001af4:	2101      	movs	r1, #1
 8001af6:	4630      	mov	r0, r6
 8001af8:	f7fe fef0 	bl	80008dc <d_substitution>
 8001afc:	4603      	mov	r3, r0
 8001afe:	bb45      	cbnz	r5, 8001b52 <d_prefix+0x11e>
 8001b00:	68f2      	ldr	r2, [r6, #12]
 8001b02:	7814      	ldrb	r4, [r2, #0]
 8001b04:	461d      	mov	r5, r3
 8001b06:	2c00      	cmp	r4, #0
 8001b08:	d19b      	bne.n	8001a42 <d_prefix+0xe>
 8001b0a:	e7ca      	b.n	8001aa2 <d_prefix+0x6e>
 8001b0c:	2d00      	cmp	r5, #0
 8001b0e:	d0c8      	beq.n	8001aa2 <d_prefix+0x6e>
 8001b10:	1c53      	adds	r3, r2, #1
 8001b12:	60f3      	str	r3, [r6, #12]
 8001b14:	7854      	ldrb	r4, [r2, #1]
 8001b16:	461a      	mov	r2, r3
 8001b18:	2c00      	cmp	r4, #0
 8001b1a:	d192      	bne.n	8001a42 <d_prefix+0xe>
 8001b1c:	e7c1      	b.n	8001aa2 <d_prefix+0x6e>
 8001b1e:	2d00      	cmp	r5, #0
 8001b20:	d0bf      	beq.n	8001aa2 <d_prefix+0x6e>
 8001b22:	3201      	adds	r2, #1
 8001b24:	60f2      	str	r2, [r6, #12]
 8001b26:	4630      	mov	r0, r6
 8001b28:	f7ff ff52 	bl	80019d0 <d_template_args_1>
 8001b2c:	2104      	movs	r1, #4
 8001b2e:	4603      	mov	r3, r0
 8001b30:	462a      	mov	r2, r5
 8001b32:	4630      	mov	r0, r6
 8001b34:	f7fe fb4c 	bl	80001d0 <d_make_comp>
 8001b38:	4605      	mov	r5, r0
 8001b3a:	e7bc      	b.n	8001ab6 <d_prefix+0x82>
 8001b3c:	7853      	ldrb	r3, [r2, #1]
 8001b3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001b42:	2b54      	cmp	r3, #84	; 0x54
 8001b44:	4630      	mov	r0, r6
 8001b46:	d006      	beq.n	8001b56 <d_prefix+0x122>
 8001b48:	f7ff fce8 	bl	800151c <d_unqualified_name>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2d00      	cmp	r5, #0
 8001b50:	d0ce      	beq.n	8001af0 <d_prefix+0xbc>
 8001b52:	2101      	movs	r1, #1
 8001b54:	e7ec      	b.n	8001b30 <d_prefix+0xfc>
 8001b56:	f7fe ff8b 	bl	8000a70 <d_type>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	e7c6      	b.n	8001aec <d_prefix+0xb8>
 8001b5e:	bf00      	nop

08001b60 <d_expression_1>:
 8001b60:	68c2      	ldr	r2, [r0, #12]
 8001b62:	7813      	ldrb	r3, [r2, #0]
 8001b64:	2b4c      	cmp	r3, #76	; 0x4c
 8001b66:	f000 8089 	beq.w	8001c7c <d_expression_1+0x11c>
 8001b6a:	2b54      	cmp	r3, #84	; 0x54
 8001b6c:	f000 8087 	beq.w	8001c7e <d_expression_1+0x11e>
 8001b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b72:	2b73      	cmp	r3, #115	; 0x73
 8001b74:	b083      	sub	sp, #12
 8001b76:	4604      	mov	r4, r0
 8001b78:	d05a      	beq.n	8001c30 <d_expression_1+0xd0>
 8001b7a:	2b66      	cmp	r3, #102	; 0x66
 8001b7c:	d028      	beq.n	8001bd0 <d_expression_1+0x70>
 8001b7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001b82:	2909      	cmp	r1, #9
 8001b84:	d80c      	bhi.n	8001ba0 <d_expression_1+0x40>
 8001b86:	4620      	mov	r0, r4
 8001b88:	f7ff fcc8 	bl	800151c <d_unqualified_name>
 8001b8c:	4605      	mov	r5, r0
 8001b8e:	2800      	cmp	r0, #0
 8001b90:	d070      	beq.n	8001c74 <d_expression_1+0x114>
 8001b92:	68e3      	ldr	r3, [r4, #12]
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	2a49      	cmp	r2, #73	; 0x49
 8001b98:	d073      	beq.n	8001c82 <d_expression_1+0x122>
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	b003      	add	sp, #12
 8001b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba0:	2b6f      	cmp	r3, #111	; 0x6f
 8001ba2:	d061      	beq.n	8001c68 <d_expression_1+0x108>
 8001ba4:	2b69      	cmp	r3, #105	; 0x69
 8001ba6:	d17a      	bne.n	8001c9e <d_expression_1+0x13e>
 8001ba8:	7853      	ldrb	r3, [r2, #1]
 8001baa:	2b6c      	cmp	r3, #108	; 0x6c
 8001bac:	d147      	bne.n	8001c3e <d_expression_1+0xde>
 8001bae:	3202      	adds	r2, #2
 8001bb0:	60e2      	str	r2, [r4, #12]
 8001bb2:	2500      	movs	r5, #0
 8001bb4:	7811      	ldrb	r1, [r2, #0]
 8001bb6:	2900      	cmp	r1, #0
 8001bb8:	d05c      	beq.n	8001c74 <d_expression_1+0x114>
 8001bba:	7853      	ldrb	r3, [r2, #1]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d059      	beq.n	8001c74 <d_expression_1+0x114>
 8001bc0:	2145      	movs	r1, #69	; 0x45
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f000 fa44 	bl	8002050 <d_exprlist>
 8001bc8:	462a      	mov	r2, r5
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2131      	movs	r1, #49	; 0x31
 8001bce:	e060      	b.n	8001c92 <d_expression_1+0x132>
 8001bd0:	7853      	ldrb	r3, [r2, #1]
 8001bd2:	2b70      	cmp	r3, #112	; 0x70
 8001bd4:	d133      	bne.n	8001c3e <d_expression_1+0xde>
 8001bd6:	1c93      	adds	r3, r2, #2
 8001bd8:	60c3      	str	r3, [r0, #12]
 8001bda:	7893      	ldrb	r3, [r2, #2]
 8001bdc:	2b54      	cmp	r3, #84	; 0x54
 8001bde:	f000 8147 	beq.w	8001e70 <d_expression_1+0x310>
 8001be2:	2b5f      	cmp	r3, #95	; 0x5f
 8001be4:	f000 8085 	beq.w	8001cf2 <d_expression_1+0x192>
 8001be8:	2b6e      	cmp	r3, #110	; 0x6e
 8001bea:	d043      	beq.n	8001c74 <d_expression_1+0x114>
 8001bec:	f7fe fb68 	bl	80002c0 <d_number>
 8001bf0:	1c41      	adds	r1, r0, #1
 8001bf2:	d43f      	bmi.n	8001c74 <d_expression_1+0x114>
 8001bf4:	68e3      	ldr	r3, [r4, #12]
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	2a5f      	cmp	r2, #95	; 0x5f
 8001bfa:	d13b      	bne.n	8001c74 <d_expression_1+0x114>
 8001bfc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c00:	3301      	adds	r3, #1
 8001c02:	4291      	cmp	r1, r2
 8001c04:	60e3      	str	r3, [r4, #12]
 8001c06:	d035      	beq.n	8001c74 <d_expression_1+0x114>
 8001c08:	3002      	adds	r0, #2
 8001c0a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	da30      	bge.n	8001c74 <d_expression_1+0x114>
 8001c12:	6922      	ldr	r2, [r4, #16]
 8001c14:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001c18:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	2600      	movs	r6, #0
 8001c20:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8001c24:	6163      	str	r3, [r4, #20]
 8001c26:	2306      	movs	r3, #6
 8001c28:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 8001c2c:	60e8      	str	r0, [r5, #12]
 8001c2e:	e7b4      	b.n	8001b9a <d_expression_1+0x3a>
 8001c30:	7853      	ldrb	r3, [r2, #1]
 8001c32:	2b72      	cmp	r3, #114	; 0x72
 8001c34:	f000 80f7 	beq.w	8001e26 <d_expression_1+0x2c6>
 8001c38:	2b70      	cmp	r3, #112	; 0x70
 8001c3a:	f000 8111 	beq.w	8001e60 <d_expression_1+0x300>
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f7ff fbe8 	bl	8001414 <d_operator_name>
 8001c44:	4605      	mov	r5, r0
 8001c46:	b1a8      	cbz	r0, 8001c74 <d_expression_1+0x114>
 8001c48:	7803      	ldrb	r3, [r0, #0]
 8001c4a:	2b32      	cmp	r3, #50	; 0x32
 8001c4c:	d034      	beq.n	8001cb8 <d_expression_1+0x158>
 8001c4e:	2b34      	cmp	r3, #52	; 0x34
 8001c50:	f000 819a 	beq.w	8001f88 <d_expression_1+0x428>
 8001c54:	d80e      	bhi.n	8001c74 <d_expression_1+0x114>
 8001c56:	2b33      	cmp	r3, #51	; 0x33
 8001c58:	d10c      	bne.n	8001c74 <d_expression_1+0x114>
 8001c5a:	68c3      	ldr	r3, [r0, #12]
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d809      	bhi.n	8001c74 <d_expression_1+0x114>
 8001c60:	e8df f003 	tbb	[pc, r3]
 8001c64:	0808cd6c 	.word	0x0808cd6c
 8001c68:	7853      	ldrb	r3, [r2, #1]
 8001c6a:	2b6e      	cmp	r3, #110	; 0x6e
 8001c6c:	d1e7      	bne.n	8001c3e <d_expression_1+0xde>
 8001c6e:	3202      	adds	r2, #2
 8001c70:	60c2      	str	r2, [r0, #12]
 8001c72:	e788      	b.n	8001b86 <d_expression_1+0x26>
 8001c74:	2500      	movs	r5, #0
 8001c76:	4628      	mov	r0, r5
 8001c78:	b003      	add	sp, #12
 8001c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c7c:	e5ee      	b.n	800185c <d_expr_primary>
 8001c7e:	f7fe bd51 	b.w	8000724 <d_template_param>
 8001c82:	3301      	adds	r3, #1
 8001c84:	60e3      	str	r3, [r4, #12]
 8001c86:	4620      	mov	r0, r4
 8001c88:	f7ff fea2 	bl	80019d0 <d_template_args_1>
 8001c8c:	462a      	mov	r2, r5
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2104      	movs	r1, #4
 8001c92:	4620      	mov	r0, r4
 8001c94:	b003      	add	sp, #12
 8001c96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001c9a:	f7fe ba99 	b.w	80001d0 <d_make_comp>
 8001c9e:	2b74      	cmp	r3, #116	; 0x74
 8001ca0:	f040 80b2 	bne.w	8001e08 <d_expression_1+0x2a8>
 8001ca4:	7853      	ldrb	r3, [r2, #1]
 8001ca6:	2b6c      	cmp	r3, #108	; 0x6c
 8001ca8:	d1c9      	bne.n	8001c3e <d_expression_1+0xde>
 8001caa:	3202      	adds	r2, #2
 8001cac:	60e2      	str	r2, [r4, #12]
 8001cae:	f7fe fedf 	bl	8000a70 <d_type>
 8001cb2:	68e2      	ldr	r2, [r4, #12]
 8001cb4:	4605      	mov	r5, r0
 8001cb6:	e77d      	b.n	8001bb4 <d_expression_1+0x54>
 8001cb8:	68c1      	ldr	r1, [r0, #12]
 8001cba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cbc:	688a      	ldr	r2, [r1, #8]
 8001cbe:	680e      	ldr	r6, [r1, #0]
 8001cc0:	3a02      	subs	r2, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001cc6:	7833      	ldrb	r3, [r6, #0]
 8001cc8:	2b73      	cmp	r3, #115	; 0x73
 8001cca:	d10b      	bne.n	8001ce4 <d_expression_1+0x184>
 8001ccc:	7872      	ldrb	r2, [r6, #1]
 8001cce:	2a74      	cmp	r2, #116	; 0x74
 8001cd0:	d108      	bne.n	8001ce4 <d_expression_1+0x184>
 8001cd2:	78b2      	ldrb	r2, [r6, #2]
 8001cd4:	b932      	cbnz	r2, 8001ce4 <d_expression_1+0x184>
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	f7fe feca 	bl	8000a70 <d_type>
 8001cdc:	462a      	mov	r2, r5
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2137      	movs	r1, #55	; 0x37
 8001ce2:	e7d6      	b.n	8001c92 <d_expression_1+0x132>
 8001ce4:	68cf      	ldr	r7, [r1, #12]
 8001ce6:	2f03      	cmp	r7, #3
 8001ce8:	d8c4      	bhi.n	8001c74 <d_expression_1+0x114>
 8001cea:	e8df f007 	tbb	[pc, r7]
 8001cee:	0627      	.short	0x0627
 8001cf0:	2b54      	.short	0x2b54
 8001cf2:	3203      	adds	r2, #3
 8001cf4:	60c2      	str	r2, [r0, #12]
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	e787      	b.n	8001c0a <d_expression_1+0xaa>
 8001cfa:	7832      	ldrb	r2, [r6, #0]
 8001cfc:	2a70      	cmp	r2, #112	; 0x70
 8001cfe:	f000 80c0 	beq.w	8001e82 <d_expression_1+0x322>
 8001d02:	2a6d      	cmp	r2, #109	; 0x6d
 8001d04:	f000 80bd 	beq.w	8001e82 <d_expression_1+0x322>
 8001d08:	2700      	movs	r7, #0
 8001d0a:	2b73      	cmp	r3, #115	; 0x73
 8001d0c:	f040 80b4 	bne.w	8001e78 <d_expression_1+0x318>
 8001d10:	7873      	ldrb	r3, [r6, #1]
 8001d12:	2b50      	cmp	r3, #80	; 0x50
 8001d14:	f040 80b0 	bne.w	8001e78 <d_expression_1+0x318>
 8001d18:	78b3      	ldrb	r3, [r6, #2]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f040 80ac 	bne.w	8001e78 <d_expression_1+0x318>
 8001d20:	4620      	mov	r0, r4
 8001d22:	f7ff fe55 	bl	80019d0 <d_template_args_1>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b12f      	cbz	r7, 8001d36 <d_expression_1+0x1d6>
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2139      	movs	r1, #57	; 0x39
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f7fe fa4e 	bl	80001d0 <d_make_comp>
 8001d34:	4603      	mov	r3, r0
 8001d36:	462a      	mov	r2, r5
 8001d38:	2137      	movs	r1, #55	; 0x37
 8001d3a:	e7aa      	b.n	8001c92 <d_expression_1+0x132>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	462a      	mov	r2, r5
 8001d40:	2136      	movs	r1, #54	; 0x36
 8001d42:	e7a6      	b.n	8001c92 <d_expression_1+0x132>
 8001d44:	2b71      	cmp	r3, #113	; 0x71
 8001d46:	f040 80c4 	bne.w	8001ed2 <d_expression_1+0x372>
 8001d4a:	7872      	ldrb	r2, [r6, #1]
 8001d4c:	2a75      	cmp	r2, #117	; 0x75
 8001d4e:	f040 80c0 	bne.w	8001ed2 <d_expression_1+0x372>
 8001d52:	78b2      	ldrb	r2, [r6, #2]
 8001d54:	2a00      	cmp	r2, #0
 8001d56:	f040 80bc 	bne.w	8001ed2 <d_expression_1+0x372>
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f7ff ff00 	bl	8001b60 <d_expression_1>
 8001d60:	4606      	mov	r6, r0
 8001d62:	4620      	mov	r0, r4
 8001d64:	f7ff fefc 	bl	8001b60 <d_expression_1>
 8001d68:	4607      	mov	r7, r0
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f7ff fef8 	bl	8001b60 <d_expression_1>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2800      	cmp	r0, #0
 8001d74:	f43f af7e 	beq.w	8001c74 <d_expression_1+0x114>
 8001d78:	463a      	mov	r2, r7
 8001d7a:	213c      	movs	r1, #60	; 0x3c
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	f7fe fa27 	bl	80001d0 <d_make_comp>
 8001d82:	4632      	mov	r2, r6
 8001d84:	4603      	mov	r3, r0
 8001d86:	213b      	movs	r1, #59	; 0x3b
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f7fe fa21 	bl	80001d0 <d_make_comp>
 8001d8e:	462a      	mov	r2, r5
 8001d90:	4603      	mov	r3, r0
 8001d92:	213a      	movs	r1, #58	; 0x3a
 8001d94:	e77d      	b.n	8001c92 <d_expression_1+0x132>
 8001d96:	68eb      	ldr	r3, [r5, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	785a      	ldrb	r2, [r3, #1]
 8001d9c:	2a63      	cmp	r2, #99	; 0x63
 8001d9e:	f000 810e 	beq.w	8001fbe <d_expression_1+0x45e>
 8001da2:	7833      	ldrb	r3, [r6, #0]
 8001da4:	2b66      	cmp	r3, #102	; 0x66
 8001da6:	f000 8135 	beq.w	8002014 <d_expression_1+0x4b4>
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	f040 8129 	bne.w	8002002 <d_expression_1+0x4a2>
 8001db0:	7873      	ldrb	r3, [r6, #1]
 8001db2:	2b69      	cmp	r3, #105	; 0x69
 8001db4:	f040 8125 	bne.w	8002002 <d_expression_1+0x4a2>
 8001db8:	78b3      	ldrb	r3, [r6, #2]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 8121 	bne.w	8002002 <d_expression_1+0x4a2>
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f7ff fbab 	bl	800151c <d_unqualified_name>
 8001dc6:	4607      	mov	r7, r0
 8001dc8:	7833      	ldrb	r3, [r6, #0]
 8001dca:	2b63      	cmp	r3, #99	; 0x63
 8001dcc:	f040 80b4 	bne.w	8001f38 <d_expression_1+0x3d8>
 8001dd0:	7872      	ldrb	r2, [r6, #1]
 8001dd2:	2a6c      	cmp	r2, #108	; 0x6c
 8001dd4:	f040 80b0 	bne.w	8001f38 <d_expression_1+0x3d8>
 8001dd8:	78b2      	ldrb	r2, [r6, #2]
 8001dda:	2a00      	cmp	r2, #0
 8001ddc:	f040 80ac 	bne.w	8001f38 <d_expression_1+0x3d8>
 8001de0:	2145      	movs	r1, #69	; 0x45
 8001de2:	4620      	mov	r0, r4
 8001de4:	f000 f934 	bl	8002050 <d_exprlist>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4613      	mov	r3, r2
 8001dec:	2139      	movs	r1, #57	; 0x39
 8001dee:	463a      	mov	r2, r7
 8001df0:	4620      	mov	r0, r4
 8001df2:	f7fe f9ed 	bl	80001d0 <d_make_comp>
 8001df6:	462a      	mov	r2, r5
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2138      	movs	r1, #56	; 0x38
 8001dfc:	e749      	b.n	8001c92 <d_expression_1+0x132>
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7ff feae 	bl	8001b60 <d_expression_1>
 8001e04:	4603      	mov	r3, r0
 8001e06:	e796      	b.n	8001d36 <d_expression_1+0x1d6>
 8001e08:	2b75      	cmp	r3, #117	; 0x75
 8001e0a:	f47f af18 	bne.w	8001c3e <d_expression_1+0xde>
 8001e0e:	3201      	adds	r2, #1
 8001e10:	60c2      	str	r2, [r0, #12]
 8001e12:	f7fe fcf3 	bl	80007fc <d_source_name>
 8001e16:	9001      	str	r0, [sp, #4]
 8001e18:	4620      	mov	r0, r4
 8001e1a:	f7ff fdd9 	bl	80019d0 <d_template_args_1>
 8001e1e:	9a01      	ldr	r2, [sp, #4]
 8001e20:	4603      	mov	r3, r0
 8001e22:	213f      	movs	r1, #63	; 0x3f
 8001e24:	e735      	b.n	8001c92 <d_expression_1+0x132>
 8001e26:	1c93      	adds	r3, r2, #2
 8001e28:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001e2a:	60c3      	str	r3, [r0, #12]
 8001e2c:	7893      	ldrb	r3, [r2, #2]
 8001e2e:	b131      	cbz	r1, 8001e3e <d_expression_1+0x2de>
 8001e30:	2b55      	cmp	r3, #85	; 0x55
 8001e32:	d84a      	bhi.n	8001eca <d_expression_1+0x36a>
 8001e34:	2b42      	cmp	r3, #66	; 0x42
 8001e36:	d832      	bhi.n	8001e9e <d_expression_1+0x33e>
 8001e38:	3b30      	subs	r3, #48	; 0x30
 8001e3a:	2b09      	cmp	r3, #9
 8001e3c:	d936      	bls.n	8001eac <d_expression_1+0x34c>
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f7fe fe16 	bl	8000a70 <d_type>
 8001e44:	4605      	mov	r5, r0
 8001e46:	4620      	mov	r0, r4
 8001e48:	f7ff fb68 	bl	800151c <d_unqualified_name>
 8001e4c:	68e3      	ldr	r3, [r4, #12]
 8001e4e:	7819      	ldrb	r1, [r3, #0]
 8001e50:	2949      	cmp	r1, #73	; 0x49
 8001e52:	4602      	mov	r2, r0
 8001e54:	f000 80a5 	beq.w	8001fa2 <d_expression_1+0x442>
 8001e58:	4613      	mov	r3, r2
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	462a      	mov	r2, r5
 8001e5e:	e718      	b.n	8001c92 <d_expression_1+0x132>
 8001e60:	3202      	adds	r2, #2
 8001e62:	60c2      	str	r2, [r0, #12]
 8001e64:	f7ff fe7c 	bl	8001b60 <d_expression_1>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	214c      	movs	r1, #76	; 0x4c
 8001e6e:	e710      	b.n	8001c92 <d_expression_1+0x132>
 8001e70:	3203      	adds	r2, #3
 8001e72:	60c2      	str	r2, [r0, #12]
 8001e74:	2000      	movs	r0, #0
 8001e76:	e6c8      	b.n	8001c0a <d_expression_1+0xaa>
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f7ff fe71 	bl	8001b60 <d_expression_1>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	e752      	b.n	8001d28 <d_expression_1+0x1c8>
 8001e82:	7871      	ldrb	r1, [r6, #1]
 8001e84:	4291      	cmp	r1, r2
 8001e86:	f47f af3f 	bne.w	8001d08 <d_expression_1+0x1a8>
 8001e8a:	68e2      	ldr	r2, [r4, #12]
 8001e8c:	7811      	ldrb	r1, [r2, #0]
 8001e8e:	295f      	cmp	r1, #95	; 0x5f
 8001e90:	f47f af3b 	bne.w	8001d0a <d_expression_1+0x1aa>
 8001e94:	3201      	adds	r2, #1
 8001e96:	60e2      	str	r2, [r4, #12]
 8001e98:	7833      	ldrb	r3, [r6, #0]
 8001e9a:	2700      	movs	r7, #0
 8001e9c:	e735      	b.n	8001d0a <d_expression_1+0x1aa>
 8001e9e:	4a6a      	ldr	r2, [pc, #424]	; (8002048 <d_expression_1+0x4e8>)
 8001ea0:	3b43      	subs	r3, #67	; 0x43
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea8:	07db      	lsls	r3, r3, #31
 8001eaa:	d5c8      	bpl.n	8001e3e <d_expression_1+0x2de>
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eb0:	63a3      	str	r3, [r4, #56]	; 0x38
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	f7ff fdbd 	bl	8001a34 <d_prefix>
 8001eba:	68e3      	ldr	r3, [r4, #12]
 8001ebc:	781a      	ldrb	r2, [r3, #0]
 8001ebe:	2a45      	cmp	r2, #69	; 0x45
 8001ec0:	4605      	mov	r5, r0
 8001ec2:	d1c0      	bne.n	8001e46 <d_expression_1+0x2e6>
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	60e3      	str	r3, [r4, #12]
 8001ec8:	e7bd      	b.n	8001e46 <d_expression_1+0x2e6>
 8001eca:	3b61      	subs	r3, #97	; 0x61
 8001ecc:	2b19      	cmp	r3, #25
 8001ece:	d8b6      	bhi.n	8001e3e <d_expression_1+0x2de>
 8001ed0:	e7ec      	b.n	8001eac <d_expression_1+0x34c>
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d106      	bne.n	8001ee4 <d_expression_1+0x384>
 8001ed6:	7873      	ldrb	r3, [r6, #1]
 8001ed8:	2b58      	cmp	r3, #88	; 0x58
 8001eda:	d103      	bne.n	8001ee4 <d_expression_1+0x384>
 8001edc:	78b3      	ldrb	r3, [r6, #2]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f43f af3b 	beq.w	8001d5a <d_expression_1+0x1fa>
 8001ee4:	7833      	ldrb	r3, [r6, #0]
 8001ee6:	2b66      	cmp	r3, #102	; 0x66
 8001ee8:	f000 8099 	beq.w	800201e <d_expression_1+0x4be>
 8001eec:	2b6e      	cmp	r3, #110	; 0x6e
 8001eee:	f47f aec1 	bne.w	8001c74 <d_expression_1+0x114>
 8001ef2:	7873      	ldrb	r3, [r6, #1]
 8001ef4:	2b77      	cmp	r3, #119	; 0x77
 8001ef6:	d002      	beq.n	8001efe <d_expression_1+0x39e>
 8001ef8:	2b61      	cmp	r3, #97	; 0x61
 8001efa:	f47f aebb 	bne.w	8001c74 <d_expression_1+0x114>
 8001efe:	215f      	movs	r1, #95	; 0x5f
 8001f00:	4620      	mov	r0, r4
 8001f02:	f000 f8a5 	bl	8002050 <d_exprlist>
 8001f06:	4606      	mov	r6, r0
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7fe fdb1 	bl	8000a70 <d_type>
 8001f0e:	68e3      	ldr	r3, [r4, #12]
 8001f10:	781a      	ldrb	r2, [r3, #0]
 8001f12:	2a45      	cmp	r2, #69	; 0x45
 8001f14:	4607      	mov	r7, r0
 8001f16:	f000 8092 	beq.w	800203e <d_expression_1+0x4de>
 8001f1a:	2a70      	cmp	r2, #112	; 0x70
 8001f1c:	f000 8083 	beq.w	8002026 <d_expression_1+0x4c6>
 8001f20:	2a69      	cmp	r2, #105	; 0x69
 8001f22:	f47f aea7 	bne.w	8001c74 <d_expression_1+0x114>
 8001f26:	785b      	ldrb	r3, [r3, #1]
 8001f28:	2b6c      	cmp	r3, #108	; 0x6c
 8001f2a:	f47f aea3 	bne.w	8001c74 <d_expression_1+0x114>
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f7ff fe16 	bl	8001b60 <d_expression_1>
 8001f34:	4603      	mov	r3, r0
 8001f36:	e71f      	b.n	8001d78 <d_expression_1+0x218>
 8001f38:	2b64      	cmp	r3, #100	; 0x64
 8001f3a:	d155      	bne.n	8001fe8 <d_expression_1+0x488>
 8001f3c:	7872      	ldrb	r2, [r6, #1]
 8001f3e:	2a74      	cmp	r2, #116	; 0x74
 8001f40:	d152      	bne.n	8001fe8 <d_expression_1+0x488>
 8001f42:	78b2      	ldrb	r2, [r6, #2]
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	d14f      	bne.n	8001fe8 <d_expression_1+0x488>
 8001f48:	68e3      	ldr	r3, [r4, #12]
 8001f4a:	781a      	ldrb	r2, [r3, #0]
 8001f4c:	2a67      	cmp	r2, #103	; 0x67
 8001f4e:	d05d      	beq.n	800200c <d_expression_1+0x4ac>
 8001f50:	2a73      	cmp	r2, #115	; 0x73
 8001f52:	d102      	bne.n	8001f5a <d_expression_1+0x3fa>
 8001f54:	785b      	ldrb	r3, [r3, #1]
 8001f56:	2b72      	cmp	r3, #114	; 0x72
 8001f58:	d04e      	beq.n	8001ff8 <d_expression_1+0x498>
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f7ff fade 	bl	800151c <d_unqualified_name>
 8001f60:	68e3      	ldr	r3, [r4, #12]
 8001f62:	7819      	ldrb	r1, [r3, #0]
 8001f64:	2949      	cmp	r1, #73	; 0x49
 8001f66:	4602      	mov	r2, r0
 8001f68:	f47f af3f 	bne.w	8001dea <d_expression_1+0x28a>
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	60e3      	str	r3, [r4, #12]
 8001f70:	4620      	mov	r0, r4
 8001f72:	9201      	str	r2, [sp, #4]
 8001f74:	f7ff fd2c 	bl	80019d0 <d_template_args_1>
 8001f78:	9a01      	ldr	r2, [sp, #4]
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f7fe f926 	bl	80001d0 <d_make_comp>
 8001f84:	4602      	mov	r2, r0
 8001f86:	e730      	b.n	8001dea <d_expression_1+0x28a>
 8001f88:	68e3      	ldr	r3, [r4, #12]
 8001f8a:	781a      	ldrb	r2, [r3, #0]
 8001f8c:	2a5f      	cmp	r2, #95	; 0x5f
 8001f8e:	f47f af36 	bne.w	8001dfe <d_expression_1+0x29e>
 8001f92:	3301      	adds	r3, #1
 8001f94:	60e3      	str	r3, [r4, #12]
 8001f96:	2145      	movs	r1, #69	; 0x45
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f000 f859 	bl	8002050 <d_exprlist>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	e6c9      	b.n	8001d36 <d_expression_1+0x1d6>
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	60e3      	str	r3, [r4, #12]
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	9201      	str	r2, [sp, #4]
 8001faa:	f7ff fd11 	bl	80019d0 <d_template_args_1>
 8001fae:	9a01      	ldr	r2, [sp, #4]
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f7fe f90b 	bl	80001d0 <d_make_comp>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	e74c      	b.n	8001e58 <d_expression_1+0x2f8>
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b73      	cmp	r3, #115	; 0x73
 8001fc2:	d00c      	beq.n	8001fde <d_expression_1+0x47e>
 8001fc4:	3b63      	subs	r3, #99	; 0x63
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b0f      	cmp	r3, #15
 8001fca:	f63f aeea 	bhi.w	8001da2 <d_expression_1+0x242>
 8001fce:	4a1f      	ldr	r2, [pc, #124]	; (800204c <d_expression_1+0x4ec>)
 8001fd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001fd4:	f8d3 37fc 	ldr.w	r3, [r3, #2044]	; 0x7fc
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f43f aee2 	beq.w	8001da2 <d_expression_1+0x242>
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f7fe fd46 	bl	8000a70 <d_type>
 8001fe4:	4607      	mov	r7, r0
 8001fe6:	e6ef      	b.n	8001dc8 <d_expression_1+0x268>
 8001fe8:	2b70      	cmp	r3, #112	; 0x70
 8001fea:	d105      	bne.n	8001ff8 <d_expression_1+0x498>
 8001fec:	7873      	ldrb	r3, [r6, #1]
 8001fee:	2b74      	cmp	r3, #116	; 0x74
 8001ff0:	d102      	bne.n	8001ff8 <d_expression_1+0x498>
 8001ff2:	78b3      	ldrb	r3, [r6, #2]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0a7      	beq.n	8001f48 <d_expression_1+0x3e8>
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f7ff fdb1 	bl	8001b60 <d_expression_1>
 8001ffe:	4602      	mov	r2, r0
 8002000:	e6f3      	b.n	8001dea <d_expression_1+0x28a>
 8002002:	4620      	mov	r0, r4
 8002004:	f7ff fdac 	bl	8001b60 <d_expression_1>
 8002008:	4607      	mov	r7, r0
 800200a:	e6dd      	b.n	8001dc8 <d_expression_1+0x268>
 800200c:	785b      	ldrb	r3, [r3, #1]
 800200e:	2b73      	cmp	r3, #115	; 0x73
 8002010:	d1a3      	bne.n	8001f5a <d_expression_1+0x3fa>
 8002012:	e7f1      	b.n	8001ff8 <d_expression_1+0x498>
 8002014:	4620      	mov	r0, r4
 8002016:	f7ff f9fd 	bl	8001414 <d_operator_name>
 800201a:	4607      	mov	r7, r0
 800201c:	e6d4      	b.n	8001dc8 <d_expression_1+0x268>
 800201e:	4620      	mov	r0, r4
 8002020:	f7ff f9f8 	bl	8001414 <d_operator_name>
 8002024:	e69c      	b.n	8001d60 <d_expression_1+0x200>
 8002026:	785a      	ldrb	r2, [r3, #1]
 8002028:	2a69      	cmp	r2, #105	; 0x69
 800202a:	f47f ae23 	bne.w	8001c74 <d_expression_1+0x114>
 800202e:	3302      	adds	r3, #2
 8002030:	60e3      	str	r3, [r4, #12]
 8002032:	2145      	movs	r1, #69	; 0x45
 8002034:	4620      	mov	r0, r4
 8002036:	f000 f80b 	bl	8002050 <d_exprlist>
 800203a:	4603      	mov	r3, r0
 800203c:	e69c      	b.n	8001d78 <d_expression_1+0x218>
 800203e:	3301      	adds	r3, #1
 8002040:	60e3      	str	r3, [r4, #12]
 8002042:	2300      	movs	r3, #0
 8002044:	e698      	b.n	8001d78 <d_expression_1+0x218>
 8002046:	bf00      	nop
 8002048:	00040201 	.word	0x00040201
 800204c:	08020d24 	.word	0x08020d24

08002050 <d_exprlist>:
 8002050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002054:	68c2      	ldr	r2, [r0, #12]
 8002056:	460e      	mov	r6, r1
 8002058:	7811      	ldrb	r1, [r2, #0]
 800205a:	b082      	sub	sp, #8
 800205c:	2300      	movs	r3, #0
 800205e:	42b1      	cmp	r1, r6
 8002060:	4604      	mov	r4, r0
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	d024      	beq.n	80020b0 <d_exprlist+0x60>
 8002066:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
 800206a:	ad01      	add	r5, sp, #4
 800206c:	2701      	movs	r7, #1
 800206e:	e009      	b.n	8002084 <d_exprlist+0x34>
 8002070:	f7fe f8ae 	bl	80001d0 <d_make_comp>
 8002074:	6028      	str	r0, [r5, #0]
 8002076:	f100 0510 	add.w	r5, r0, #16
 800207a:	b178      	cbz	r0, 800209c <d_exprlist+0x4c>
 800207c:	68e3      	ldr	r3, [r4, #12]
 800207e:	781a      	ldrb	r2, [r3, #0]
 8002080:	42b2      	cmp	r2, r6
 8002082:	d00f      	beq.n	80020a4 <d_exprlist+0x54>
 8002084:	6327      	str	r7, [r4, #48]	; 0x30
 8002086:	4620      	mov	r0, r4
 8002088:	f7ff fd6a 	bl	8001b60 <d_expression_1>
 800208c:	4602      	mov	r2, r0
 800208e:	2300      	movs	r3, #0
 8002090:	212e      	movs	r1, #46	; 0x2e
 8002092:	4620      	mov	r0, r4
 8002094:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8002098:	2a00      	cmp	r2, #0
 800209a:	d1e9      	bne.n	8002070 <d_exprlist+0x20>
 800209c:	2000      	movs	r0, #0
 800209e:	b002      	add	sp, #8
 80020a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020a4:	9801      	ldr	r0, [sp, #4]
 80020a6:	3301      	adds	r3, #1
 80020a8:	60e3      	str	r3, [r4, #12]
 80020aa:	b002      	add	sp, #8
 80020ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020b0:	3201      	adds	r2, #1
 80020b2:	60c2      	str	r2, [r0, #12]
 80020b4:	212e      	movs	r1, #46	; 0x2e
 80020b6:	461a      	mov	r2, r3
 80020b8:	b002      	add	sp, #8
 80020ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020be:	f7fe b887 	b.w	80001d0 <d_make_comp>
 80020c2:	bf00      	nop

080020c4 <d_cv_qualifiers>:
 80020c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020c8:	460f      	mov	r7, r1
 80020ca:	68c1      	ldr	r1, [r0, #12]
 80020cc:	f1b2 0900 	subs.w	r9, r2, #0
 80020d0:	b083      	sub	sp, #12
 80020d2:	780a      	ldrb	r2, [r1, #0]
 80020d4:	4604      	mov	r4, r0
 80020d6:	bf15      	itete	ne
 80020d8:	f04f 0a1e 	movne.w	sl, #30
 80020dc:	f04f 0a1b 	moveq.w	sl, #27
 80020e0:	f04f 081d 	movne.w	r8, #29
 80020e4:	f04f 081a 	moveq.w	r8, #26
 80020e8:	bf14      	ite	ne
 80020ea:	261c      	movne	r6, #28
 80020ec:	2619      	moveq	r6, #25
 80020ee:	463d      	mov	r5, r7
 80020f0:	f04f 0b01 	mov.w	fp, #1
 80020f4:	e01b      	b.n	800212e <d_cv_qualifiers+0x6a>
 80020f6:	2a56      	cmp	r2, #86	; 0x56
 80020f8:	d033      	beq.n	8002162 <d_cv_qualifiers+0x9e>
 80020fa:	2a4b      	cmp	r2, #75	; 0x4b
 80020fc:	d037      	beq.n	800216e <d_cv_qualifiers+0xaa>
 80020fe:	784b      	ldrb	r3, [r1, #1]
 8002100:	b353      	cbz	r3, 8002158 <d_cv_qualifiers+0x94>
 8002102:	1c8b      	adds	r3, r1, #2
 8002104:	60e3      	str	r3, [r4, #12]
 8002106:	784b      	ldrb	r3, [r1, #1]
 8002108:	2b78      	cmp	r3, #120	; 0x78
 800210a:	d04f      	beq.n	80021ac <d_cv_qualifiers+0xe8>
 800210c:	2b6f      	cmp	r3, #111	; 0x6f
 800210e:	d134      	bne.n	800217a <d_cv_qualifiers+0xb6>
 8002110:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002112:	3309      	adds	r3, #9
 8002114:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002116:	2150      	movs	r1, #80	; 0x50
 8002118:	2300      	movs	r3, #0
 800211a:	2200      	movs	r2, #0
 800211c:	4620      	mov	r0, r4
 800211e:	f7fe f857 	bl	80001d0 <d_make_comp>
 8002122:	6028      	str	r0, [r5, #0]
 8002124:	b1c0      	cbz	r0, 8002158 <d_cv_qualifiers+0x94>
 8002126:	68e1      	ldr	r1, [r4, #12]
 8002128:	780a      	ldrb	r2, [r1, #0]
 800212a:	f100 050c 	add.w	r5, r0, #12
 800212e:	4608      	mov	r0, r1
 8002130:	f7fe fa24 	bl	800057c <next_is_type_qual.isra.0>
 8002134:	2800      	cmp	r0, #0
 8002136:	d03f      	beq.n	80021b8 <d_cv_qualifiers+0xf4>
 8002138:	1c4b      	adds	r3, r1, #1
 800213a:	2a72      	cmp	r2, #114	; 0x72
 800213c:	60e3      	str	r3, [r4, #12]
 800213e:	d1da      	bne.n	80020f6 <d_cv_qualifiers+0x32>
 8002140:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002142:	3309      	adds	r3, #9
 8002144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002146:	4631      	mov	r1, r6
 8002148:	2300      	movs	r3, #0
 800214a:	2200      	movs	r2, #0
 800214c:	4620      	mov	r0, r4
 800214e:	f7fe f83f 	bl	80001d0 <d_make_comp>
 8002152:	6028      	str	r0, [r5, #0]
 8002154:	2800      	cmp	r0, #0
 8002156:	d1e6      	bne.n	8002126 <d_cv_qualifiers+0x62>
 8002158:	2500      	movs	r5, #0
 800215a:	4628      	mov	r0, r5
 800215c:	b003      	add	sp, #12
 800215e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002162:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002164:	3309      	adds	r3, #9
 8002166:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002168:	4641      	mov	r1, r8
 800216a:	2300      	movs	r3, #0
 800216c:	e7d5      	b.n	800211a <d_cv_qualifiers+0x56>
 800216e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002170:	3306      	adds	r3, #6
 8002172:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002174:	4651      	mov	r1, sl
 8002176:	2300      	movs	r3, #0
 8002178:	e7cf      	b.n	800211a <d_cv_qualifiers+0x56>
 800217a:	2b4f      	cmp	r3, #79	; 0x4f
 800217c:	d138      	bne.n	80021f0 <d_cv_qualifiers+0x12c>
 800217e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002180:	3309      	adds	r3, #9
 8002182:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002184:	4620      	mov	r0, r4
 8002186:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002188:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	f7ff fce7 	bl	8001b60 <d_expression_1>
 8002192:	9b01      	ldr	r3, [sp, #4]
 8002194:	6323      	str	r3, [r4, #48]	; 0x30
 8002196:	4603      	mov	r3, r0
 8002198:	2800      	cmp	r0, #0
 800219a:	d0dd      	beq.n	8002158 <d_cv_qualifiers+0x94>
 800219c:	68e2      	ldr	r2, [r4, #12]
 800219e:	7811      	ldrb	r1, [r2, #0]
 80021a0:	2945      	cmp	r1, #69	; 0x45
 80021a2:	d1d9      	bne.n	8002158 <d_cv_qualifiers+0x94>
 80021a4:	3201      	adds	r2, #1
 80021a6:	60e2      	str	r2, [r4, #12]
 80021a8:	2150      	movs	r1, #80	; 0x50
 80021aa:	e7b6      	b.n	800211a <d_cv_qualifiers+0x56>
 80021ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021ae:	3311      	adds	r3, #17
 80021b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021b2:	214e      	movs	r1, #78	; 0x4e
 80021b4:	2300      	movs	r3, #0
 80021b6:	e7b0      	b.n	800211a <d_cv_qualifiers+0x56>
 80021b8:	f1b9 0f00 	cmp.w	r9, #0
 80021bc:	d1cd      	bne.n	800215a <d_cv_qualifiers+0x96>
 80021be:	2a46      	cmp	r2, #70	; 0x46
 80021c0:	d1cb      	bne.n	800215a <d_cv_qualifiers+0x96>
 80021c2:	42bd      	cmp	r5, r7
 80021c4:	d0c9      	beq.n	800215a <d_cv_qualifiers+0x96>
 80021c6:	201d      	movs	r0, #29
 80021c8:	211e      	movs	r1, #30
 80021ca:	221c      	movs	r2, #28
 80021cc:	e004      	b.n	80021d8 <d_cv_qualifiers+0x114>
 80021ce:	2b19      	cmp	r3, #25
 80021d0:	d00c      	beq.n	80021ec <d_cv_qualifiers+0x128>
 80021d2:	370c      	adds	r7, #12
 80021d4:	42bd      	cmp	r5, r7
 80021d6:	d0c0      	beq.n	800215a <d_cv_qualifiers+0x96>
 80021d8:	683f      	ldr	r7, [r7, #0]
 80021da:	783b      	ldrb	r3, [r7, #0]
 80021dc:	2b1a      	cmp	r3, #26
 80021de:	d003      	beq.n	80021e8 <d_cv_qualifiers+0x124>
 80021e0:	2b1b      	cmp	r3, #27
 80021e2:	d1f4      	bne.n	80021ce <d_cv_qualifiers+0x10a>
 80021e4:	7039      	strb	r1, [r7, #0]
 80021e6:	e7f4      	b.n	80021d2 <d_cv_qualifiers+0x10e>
 80021e8:	7038      	strb	r0, [r7, #0]
 80021ea:	e7f2      	b.n	80021d2 <d_cv_qualifiers+0x10e>
 80021ec:	703a      	strb	r2, [r7, #0]
 80021ee:	e7f0      	b.n	80021d2 <d_cv_qualifiers+0x10e>
 80021f0:	2b77      	cmp	r3, #119	; 0x77
 80021f2:	d1b1      	bne.n	8002158 <d_cv_qualifiers+0x94>
 80021f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021f6:	3306      	adds	r3, #6
 80021f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7ff f870 	bl	80012e0 <d_parmlist>
 8002200:	4603      	mov	r3, r0
 8002202:	2800      	cmp	r0, #0
 8002204:	d0a8      	beq.n	8002158 <d_cv_qualifiers+0x94>
 8002206:	68e2      	ldr	r2, [r4, #12]
 8002208:	7811      	ldrb	r1, [r2, #0]
 800220a:	2945      	cmp	r1, #69	; 0x45
 800220c:	d1a4      	bne.n	8002158 <d_cv_qualifiers+0x94>
 800220e:	3201      	adds	r2, #1
 8002210:	60e2      	str	r2, [r4, #12]
 8002212:	2151      	movs	r1, #81	; 0x51
 8002214:	e781      	b.n	800211a <d_cv_qualifiers+0x56>
 8002216:	bf00      	nop

08002218 <d_special_name>:
 8002218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800221c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800221e:	68c3      	ldr	r3, [r0, #12]
 8002220:	f101 0214 	add.w	r2, r1, #20
 8002224:	62c2      	str	r2, [r0, #44]	; 0x2c
 8002226:	781a      	ldrb	r2, [r3, #0]
 8002228:	2a54      	cmp	r2, #84	; 0x54
 800222a:	b082      	sub	sp, #8
 800222c:	4604      	mov	r4, r0
 800222e:	d075      	beq.n	800231c <d_special_name+0x104>
 8002230:	2a47      	cmp	r2, #71	; 0x47
 8002232:	d128      	bne.n	8002286 <d_special_name+0x6e>
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	60c2      	str	r2, [r0, #12]
 8002238:	785a      	ldrb	r2, [r3, #1]
 800223a:	b322      	cbz	r2, 8002286 <d_special_name+0x6e>
 800223c:	1c9a      	adds	r2, r3, #2
 800223e:	60c2      	str	r2, [r0, #12]
 8002240:	785a      	ldrb	r2, [r3, #1]
 8002242:	2a56      	cmp	r2, #86	; 0x56
 8002244:	d823      	bhi.n	800228e <d_special_name+0x76>
 8002246:	2a40      	cmp	r2, #64	; 0x40
 8002248:	d91d      	bls.n	8002286 <d_special_name+0x6e>
 800224a:	3a41      	subs	r2, #65	; 0x41
 800224c:	2a15      	cmp	r2, #21
 800224e:	d81a      	bhi.n	8002286 <d_special_name+0x6e>
 8002250:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002254:	0019011d 	.word	0x0019011d
 8002258:	00190019 	.word	0x00190019
 800225c:	00190019 	.word	0x00190019
 8002260:	00190019 	.word	0x00190019
 8002264:	00190019 	.word	0x00190019
 8002268:	00190019 	.word	0x00190019
 800226c:	00190019 	.word	0x00190019
 8002270:	00190019 	.word	0x00190019
 8002274:	00ff0019 	.word	0x00ff0019
 8002278:	00e90019 	.word	0x00e90019
 800227c:	00de0019 	.word	0x00de0019
 8002280:	68e3      	ldr	r3, [r4, #12]
 8002282:	3302      	adds	r3, #2
 8002284:	60e3      	str	r3, [r4, #12]
 8002286:	2000      	movs	r0, #0
 8002288:	b002      	add	sp, #8
 800228a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800228e:	2a72      	cmp	r2, #114	; 0x72
 8002290:	d1f9      	bne.n	8002286 <d_special_name+0x6e>
 8002292:	f7fe f815 	bl	80002c0 <d_number>
 8002296:	2801      	cmp	r0, #1
 8002298:	ddf5      	ble.n	8002286 <d_special_name+0x6e>
 800229a:	68e3      	ldr	r3, [r4, #12]
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	2a00      	cmp	r2, #0
 80022a0:	d0f1      	beq.n	8002286 <d_special_name+0x6e>
 80022a2:	1c5e      	adds	r6, r3, #1
 80022a4:	60e6      	str	r6, [r4, #12]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b5f      	cmp	r3, #95	; 0x5f
 80022aa:	d1ec      	bne.n	8002286 <d_special_name+0x6e>
 80022ac:	2200      	movs	r2, #0
 80022ae:	1e45      	subs	r5, r0, #1
 80022b0:	4617      	mov	r7, r2
 80022b2:	f04f 0842 	mov.w	r8, #66	; 0x42
 80022b6:	7833      	ldrb	r3, [r6, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0e4      	beq.n	8002286 <d_special_name+0x6e>
 80022bc:	2b24      	cmp	r3, #36	; 0x24
 80022be:	f040 819f 	bne.w	8002600 <d_special_name+0x3e8>
 80022c2:	7873      	ldrb	r3, [r6, #1]
 80022c4:	2b53      	cmp	r3, #83	; 0x53
 80022c6:	f000 81bf 	beq.w	8002648 <d_special_name+0x430>
 80022ca:	2b5f      	cmp	r3, #95	; 0x5f
 80022cc:	f000 81ba 	beq.w	8002644 <d_special_name+0x42c>
 80022d0:	2b24      	cmp	r3, #36	; 0x24
 80022d2:	d1d8      	bne.n	8002286 <d_special_name+0x6e>
 80022d4:	4619      	mov	r1, r3
 80022d6:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
 80022da:	4298      	cmp	r0, r3
 80022dc:	dad0      	bge.n	8002280 <d_special_name+0x68>
 80022de:	6926      	ldr	r6, [r4, #16]
 80022e0:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
 80022e4:	eb06 038c 	add.w	r3, r6, ip, lsl #2
 80022e8:	3001      	adds	r0, #1
 80022ea:	e9c3 7701 	strd	r7, r7, [r3, #4]
 80022ee:	6160      	str	r0, [r4, #20]
 80022f0:	f806 802c 	strb.w	r8, [r6, ip, lsl #2]
 80022f4:	68e6      	ldr	r6, [r4, #12]
 80022f6:	60d9      	str	r1, [r3, #12]
 80022f8:	3d02      	subs	r5, #2
 80022fa:	3602      	adds	r6, #2
 80022fc:	60e6      	str	r6, [r4, #12]
 80022fe:	2a00      	cmp	r2, #0
 8002300:	f000 819e 	beq.w	8002640 <d_special_name+0x428>
 8002304:	2141      	movs	r1, #65	; 0x41
 8002306:	4620      	mov	r0, r4
 8002308:	f7fd ff62 	bl	80001d0 <d_make_comp>
 800230c:	4602      	mov	r2, r0
 800230e:	2800      	cmp	r0, #0
 8002310:	d0b9      	beq.n	8002286 <d_special_name+0x6e>
 8002312:	2d00      	cmp	r5, #0
 8002314:	dccf      	bgt.n	80022b6 <d_special_name+0x9e>
 8002316:	2300      	movs	r3, #0
 8002318:	2140      	movs	r1, #64	; 0x40
 800231a:	e07e      	b.n	800241a <d_special_name+0x202>
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	60c2      	str	r2, [r0, #12]
 8002320:	785a      	ldrb	r2, [r3, #1]
 8002322:	2a00      	cmp	r2, #0
 8002324:	d0af      	beq.n	8002286 <d_special_name+0x6e>
 8002326:	1c9a      	adds	r2, r3, #2
 8002328:	60c2      	str	r2, [r0, #12]
 800232a:	785b      	ldrb	r3, [r3, #1]
 800232c:	3b41      	subs	r3, #65	; 0x41
 800232e:	2b35      	cmp	r3, #53	; 0x35
 8002330:	d8a9      	bhi.n	8002286 <d_special_name+0x6e>
 8002332:	a201      	add	r2, pc, #4	; (adr r2, 8002338 <d_special_name+0x120>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	080024ff 	.word	0x080024ff
 800233c:	08002287 	.word	0x08002287
 8002340:	080024cb 	.word	0x080024cb
 8002344:	08002287 	.word	0x08002287
 8002348:	08002287 	.word	0x08002287
 800234c:	0800250b 	.word	0x0800250b
 8002350:	08002287 	.word	0x08002287
 8002354:	0800256f 	.word	0x0800256f
 8002358:	080025e9 	.word	0x080025e9
 800235c:	080025dd 	.word	0x080025dd
 8002360:	08002287 	.word	0x08002287
 8002364:	08002287 	.word	0x08002287
 8002368:	08002287 	.word	0x08002287
 800236c:	08002287 	.word	0x08002287
 8002370:	08002287 	.word	0x08002287
 8002374:	08002287 	.word	0x08002287
 8002378:	08002287 	.word	0x08002287
 800237c:	08002287 	.word	0x08002287
 8002380:	080025f5 	.word	0x080025f5
 8002384:	0800257b 	.word	0x0800257b
 8002388:	08002287 	.word	0x08002287
 800238c:	0800258b 	.word	0x0800258b
 8002390:	0800259b 	.word	0x0800259b
 8002394:	08002287 	.word	0x08002287
 8002398:	08002287 	.word	0x08002287
 800239c:	08002287 	.word	0x08002287
 80023a0:	08002287 	.word	0x08002287
 80023a4:	08002287 	.word	0x08002287
 80023a8:	08002287 	.word	0x08002287
 80023ac:	08002287 	.word	0x08002287
 80023b0:	08002287 	.word	0x08002287
 80023b4:	08002287 	.word	0x08002287
 80023b8:	08002287 	.word	0x08002287
 80023bc:	08002287 	.word	0x08002287
 80023c0:	080025a7 	.word	0x080025a7
 80023c4:	08002287 	.word	0x08002287
 80023c8:	08002287 	.word	0x08002287
 80023cc:	08002287 	.word	0x08002287
 80023d0:	08002287 	.word	0x08002287
 80023d4:	08002517 	.word	0x08002517
 80023d8:	08002287 	.word	0x08002287
 80023dc:	08002287 	.word	0x08002287
 80023e0:	08002287 	.word	0x08002287
 80023e4:	08002287 	.word	0x08002287
 80023e8:	08002287 	.word	0x08002287
 80023ec:	08002287 	.word	0x08002287
 80023f0:	08002287 	.word	0x08002287
 80023f4:	08002287 	.word	0x08002287
 80023f8:	08002287 	.word	0x08002287
 80023fc:	08002287 	.word	0x08002287
 8002400:	08002287 	.word	0x08002287
 8002404:	08002287 	.word	0x08002287
 8002408:	08002287 	.word	0x08002287
 800240c:	08002543 	.word	0x08002543
 8002410:	f000 f93c 	bl	800268c <d_name>
 8002414:	2300      	movs	r3, #0
 8002416:	4602      	mov	r2, r0
 8002418:	2113      	movs	r1, #19
 800241a:	4620      	mov	r0, r4
 800241c:	b002      	add	sp, #8
 800241e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002422:	f7fd bed5 	b.w	80001d0 <d_make_comp>
 8002426:	789a      	ldrb	r2, [r3, #2]
 8002428:	2a00      	cmp	r2, #0
 800242a:	f000 810f 	beq.w	800264c <d_special_name+0x434>
 800242e:	1cda      	adds	r2, r3, #3
 8002430:	60c2      	str	r2, [r0, #12]
 8002432:	789a      	ldrb	r2, [r3, #2]
 8002434:	78db      	ldrb	r3, [r3, #3]
 8002436:	2a6e      	cmp	r2, #110	; 0x6e
 8002438:	d03a      	beq.n	80024b0 <d_special_name+0x298>
 800243a:	2b47      	cmp	r3, #71	; 0x47
 800243c:	d002      	beq.n	8002444 <d_special_name+0x22c>
 800243e:	2b54      	cmp	r3, #84	; 0x54
 8002440:	f040 8104 	bne.w	800264c <d_special_name+0x434>
 8002444:	4620      	mov	r0, r4
 8002446:	f7ff fee7 	bl	8002218 <d_special_name>
 800244a:	4602      	mov	r2, r0
 800244c:	2300      	movs	r3, #0
 800244e:	214a      	movs	r1, #74	; 0x4a
 8002450:	e7e3      	b.n	800241a <d_special_name+0x202>
 8002452:	f000 f91b 	bl	800268c <d_name>
 8002456:	e9d4 1305 	ldrd	r1, r3, [r4, #20]
 800245a:	4299      	cmp	r1, r3
 800245c:	4602      	mov	r2, r0
 800245e:	f280 80ff 	bge.w	8002660 <d_special_name+0x448>
 8002462:	9001      	str	r0, [sp, #4]
 8002464:	6920      	ldr	r0, [r4, #16]
 8002466:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 800246a:	eb00 0586 	add.w	r5, r0, r6, lsl #2
 800246e:	2300      	movs	r3, #0
 8002470:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8002474:	3101      	adds	r1, #1
 8002476:	2343      	movs	r3, #67	; 0x43
 8002478:	6161      	str	r1, [r4, #20]
 800247a:	f800 3026 	strb.w	r3, [r0, r6, lsl #2]
 800247e:	4620      	mov	r0, r4
 8002480:	f7fd ff1e 	bl	80002c0 <d_number>
 8002484:	9a01      	ldr	r2, [sp, #4]
 8002486:	60e8      	str	r0, [r5, #12]
 8002488:	462b      	mov	r3, r5
 800248a:	2116      	movs	r1, #22
 800248c:	e7c5      	b.n	800241a <d_special_name+0x202>
 800248e:	789b      	ldrb	r3, [r3, #2]
 8002490:	2b47      	cmp	r3, #71	; 0x47
 8002492:	d001      	beq.n	8002498 <d_special_name+0x280>
 8002494:	2b54      	cmp	r3, #84	; 0x54
 8002496:	d106      	bne.n	80024a6 <d_special_name+0x28e>
 8002498:	4620      	mov	r0, r4
 800249a:	f7ff febd 	bl	8002218 <d_special_name>
 800249e:	4602      	mov	r2, r0
 80024a0:	2300      	movs	r3, #0
 80024a2:	2117      	movs	r1, #23
 80024a4:	e7b9      	b.n	800241a <d_special_name+0x202>
 80024a6:	2100      	movs	r1, #0
 80024a8:	f000 fa3e 	bl	8002928 <d_encoding.part.0>
 80024ac:	4602      	mov	r2, r0
 80024ae:	e7f7      	b.n	80024a0 <d_special_name+0x288>
 80024b0:	2b47      	cmp	r3, #71	; 0x47
 80024b2:	f000 80e1 	beq.w	8002678 <d_special_name+0x460>
 80024b6:	2b54      	cmp	r3, #84	; 0x54
 80024b8:	f000 80de 	beq.w	8002678 <d_special_name+0x460>
 80024bc:	2100      	movs	r1, #0
 80024be:	f000 fa33 	bl	8002928 <d_encoding.part.0>
 80024c2:	4602      	mov	r2, r0
 80024c4:	2300      	movs	r3, #0
 80024c6:	214b      	movs	r1, #75	; 0x4b
 80024c8:	e7a7      	b.n	800241a <d_special_name+0x202>
 80024ca:	f7fe fad1 	bl	8000a70 <d_type>
 80024ce:	4605      	mov	r5, r0
 80024d0:	4620      	mov	r0, r4
 80024d2:	f7fd fef5 	bl	80002c0 <d_number>
 80024d6:	2800      	cmp	r0, #0
 80024d8:	f6ff aed5 	blt.w	8002286 <d_special_name+0x6e>
 80024dc:	68e3      	ldr	r3, [r4, #12]
 80024de:	781a      	ldrb	r2, [r3, #0]
 80024e0:	2a5f      	cmp	r2, #95	; 0x5f
 80024e2:	f47f aed0 	bne.w	8002286 <d_special_name+0x6e>
 80024e6:	3301      	adds	r3, #1
 80024e8:	60e3      	str	r3, [r4, #12]
 80024ea:	4620      	mov	r0, r4
 80024ec:	f7fe fac0 	bl	8000a70 <d_type>
 80024f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80024f2:	3105      	adds	r1, #5
 80024f4:	62e1      	str	r1, [r4, #44]	; 0x2c
 80024f6:	4602      	mov	r2, r0
 80024f8:	462b      	mov	r3, r5
 80024fa:	210b      	movs	r1, #11
 80024fc:	e78d      	b.n	800241a <d_special_name+0x202>
 80024fe:	f7ff fa3d 	bl	800197c <d_template_arg>
 8002502:	2300      	movs	r3, #0
 8002504:	4602      	mov	r2, r0
 8002506:	2130      	movs	r1, #48	; 0x30
 8002508:	e787      	b.n	800241a <d_special_name+0x202>
 800250a:	f7fe fab1 	bl	8000a70 <d_type>
 800250e:	2300      	movs	r3, #0
 8002510:	4602      	mov	r2, r0
 8002512:	210e      	movs	r1, #14
 8002514:	e781      	b.n	800241a <d_special_name+0x202>
 8002516:	2168      	movs	r1, #104	; 0x68
 8002518:	f7fd ff0c 	bl	8000334 <d_call_offset>
 800251c:	2800      	cmp	r0, #0
 800251e:	f43f aeb2 	beq.w	8002286 <d_special_name+0x6e>
 8002522:	68e3      	ldr	r3, [r4, #12]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b47      	cmp	r3, #71	; 0x47
 8002528:	f000 80a1 	beq.w	800266e <d_special_name+0x456>
 800252c:	2b54      	cmp	r3, #84	; 0x54
 800252e:	f000 809e 	beq.w	800266e <d_special_name+0x456>
 8002532:	2100      	movs	r1, #0
 8002534:	4620      	mov	r0, r4
 8002536:	f000 f9f7 	bl	8002928 <d_encoding.part.0>
 800253a:	4602      	mov	r2, r0
 800253c:	2300      	movs	r3, #0
 800253e:	210f      	movs	r1, #15
 8002540:	e76b      	b.n	800241a <d_special_name+0x202>
 8002542:	2176      	movs	r1, #118	; 0x76
 8002544:	f7fd fef6 	bl	8000334 <d_call_offset>
 8002548:	2800      	cmp	r0, #0
 800254a:	f43f ae9c 	beq.w	8002286 <d_special_name+0x6e>
 800254e:	68e3      	ldr	r3, [r4, #12]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b47      	cmp	r3, #71	; 0x47
 8002554:	f000 8086 	beq.w	8002664 <d_special_name+0x44c>
 8002558:	2b54      	cmp	r3, #84	; 0x54
 800255a:	f000 8083 	beq.w	8002664 <d_special_name+0x44c>
 800255e:	2100      	movs	r1, #0
 8002560:	4620      	mov	r0, r4
 8002562:	f000 f9e1 	bl	8002928 <d_encoding.part.0>
 8002566:	4602      	mov	r2, r0
 8002568:	2300      	movs	r3, #0
 800256a:	2110      	movs	r1, #16
 800256c:	e755      	b.n	800241a <d_special_name+0x202>
 800256e:	f000 f88d 	bl	800268c <d_name>
 8002572:	2300      	movs	r3, #0
 8002574:	4602      	mov	r2, r0
 8002576:	2114      	movs	r1, #20
 8002578:	e74f      	b.n	800241a <d_special_name+0x202>
 800257a:	310a      	adds	r1, #10
 800257c:	62c1      	str	r1, [r0, #44]	; 0x2c
 800257e:	f7fe fa77 	bl	8000a70 <d_type>
 8002582:	2300      	movs	r3, #0
 8002584:	4602      	mov	r2, r0
 8002586:	210a      	movs	r1, #10
 8002588:	e747      	b.n	800241a <d_special_name+0x202>
 800258a:	310f      	adds	r1, #15
 800258c:	62c1      	str	r1, [r0, #44]	; 0x2c
 800258e:	f7fe fa6f 	bl	8000a70 <d_type>
 8002592:	2300      	movs	r3, #0
 8002594:	4602      	mov	r2, r0
 8002596:	2109      	movs	r1, #9
 8002598:	e73f      	b.n	800241a <d_special_name+0x202>
 800259a:	f000 f877 	bl	800268c <d_name>
 800259e:	2300      	movs	r3, #0
 80025a0:	4602      	mov	r2, r0
 80025a2:	2115      	movs	r1, #21
 80025a4:	e739      	b.n	800241a <d_special_name+0x202>
 80025a6:	2100      	movs	r1, #0
 80025a8:	f7fd fec4 	bl	8000334 <d_call_offset>
 80025ac:	2800      	cmp	r0, #0
 80025ae:	f43f ae6a 	beq.w	8002286 <d_special_name+0x6e>
 80025b2:	2100      	movs	r1, #0
 80025b4:	4620      	mov	r0, r4
 80025b6:	f7fd febd 	bl	8000334 <d_call_offset>
 80025ba:	2800      	cmp	r0, #0
 80025bc:	f43f ae63 	beq.w	8002286 <d_special_name+0x6e>
 80025c0:	68e3      	ldr	r3, [r4, #12]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b47      	cmp	r3, #71	; 0x47
 80025c6:	d05c      	beq.n	8002682 <d_special_name+0x46a>
 80025c8:	2b54      	cmp	r3, #84	; 0x54
 80025ca:	d05a      	beq.n	8002682 <d_special_name+0x46a>
 80025cc:	2100      	movs	r1, #0
 80025ce:	4620      	mov	r0, r4
 80025d0:	f000 f9aa 	bl	8002928 <d_encoding.part.0>
 80025d4:	4602      	mov	r2, r0
 80025d6:	2300      	movs	r3, #0
 80025d8:	2111      	movs	r1, #17
 80025da:	e71e      	b.n	800241a <d_special_name+0x202>
 80025dc:	f7fe fa48 	bl	8000a70 <d_type>
 80025e0:	2300      	movs	r3, #0
 80025e2:	4602      	mov	r2, r0
 80025e4:	2112      	movs	r1, #18
 80025e6:	e718      	b.n	800241a <d_special_name+0x202>
 80025e8:	f7fe fa42 	bl	8000a70 <d_type>
 80025ec:	2300      	movs	r3, #0
 80025ee:	4602      	mov	r2, r0
 80025f0:	210c      	movs	r1, #12
 80025f2:	e712      	b.n	800241a <d_special_name+0x202>
 80025f4:	f7fe fa3c 	bl	8000a70 <d_type>
 80025f8:	2300      	movs	r3, #0
 80025fa:	4602      	mov	r2, r0
 80025fc:	210d      	movs	r1, #13
 80025fe:	e70c      	b.n	800241a <d_special_name+0x202>
 8002600:	46b4      	mov	ip, r6
 8002602:	2100      	movs	r1, #0
 8002604:	e004      	b.n	8002610 <d_special_name+0x3f8>
 8002606:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800260a:	b123      	cbz	r3, 8002616 <d_special_name+0x3fe>
 800260c:	2b24      	cmp	r3, #36	; 0x24
 800260e:	d002      	beq.n	8002616 <d_special_name+0x3fe>
 8002610:	3101      	adds	r1, #1
 8002612:	42a9      	cmp	r1, r5
 8002614:	dbf7      	blt.n	8002606 <d_special_name+0x3ee>
 8002616:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800261a:	4283      	cmp	r3, r0
 800261c:	da1c      	bge.n	8002658 <d_special_name+0x440>
 800261e:	6920      	ldr	r0, [r4, #16]
 8002620:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8002624:	3301      	adds	r3, #1
 8002626:	6163      	str	r3, [r4, #20]
 8002628:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 800262c:	e9c3 7701 	strd	r7, r7, [r3, #4]
 8002630:	f800 702c 	strb.w	r7, [r0, ip, lsl #2]
 8002634:	e9c3 6103 	strd	r6, r1, [r3, #12]
 8002638:	68e6      	ldr	r6, [r4, #12]
 800263a:	1a6d      	subs	r5, r5, r1
 800263c:	440e      	add	r6, r1
 800263e:	e65d      	b.n	80022fc <d_special_name+0xe4>
 8002640:	461a      	mov	r2, r3
 8002642:	e666      	b.n	8002312 <d_special_name+0xfa>
 8002644:	212e      	movs	r1, #46	; 0x2e
 8002646:	e646      	b.n	80022d6 <d_special_name+0xbe>
 8002648:	212f      	movs	r1, #47	; 0x2f
 800264a:	e644      	b.n	80022d6 <d_special_name+0xbe>
 800264c:	2100      	movs	r1, #0
 800264e:	4620      	mov	r0, r4
 8002650:	f000 f96a 	bl	8002928 <d_encoding.part.0>
 8002654:	4602      	mov	r2, r0
 8002656:	e6f9      	b.n	800244c <d_special_name+0x234>
 8002658:	68e3      	ldr	r3, [r4, #12]
 800265a:	440b      	add	r3, r1
 800265c:	60e3      	str	r3, [r4, #12]
 800265e:	e612      	b.n	8002286 <d_special_name+0x6e>
 8002660:	2500      	movs	r5, #0
 8002662:	e711      	b.n	8002488 <d_special_name+0x270>
 8002664:	4620      	mov	r0, r4
 8002666:	f7ff fdd7 	bl	8002218 <d_special_name>
 800266a:	4602      	mov	r2, r0
 800266c:	e77c      	b.n	8002568 <d_special_name+0x350>
 800266e:	4620      	mov	r0, r4
 8002670:	f7ff fdd2 	bl	8002218 <d_special_name>
 8002674:	4602      	mov	r2, r0
 8002676:	e761      	b.n	800253c <d_special_name+0x324>
 8002678:	4620      	mov	r0, r4
 800267a:	f7ff fdcd 	bl	8002218 <d_special_name>
 800267e:	4602      	mov	r2, r0
 8002680:	e720      	b.n	80024c4 <d_special_name+0x2ac>
 8002682:	4620      	mov	r0, r4
 8002684:	f7ff fdc8 	bl	8002218 <d_special_name>
 8002688:	4602      	mov	r2, r0
 800268a:	e7a4      	b.n	80025d6 <d_special_name+0x3be>

0800268c <d_name>:
 800268c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268e:	68c2      	ldr	r2, [r0, #12]
 8002690:	7813      	ldrb	r3, [r2, #0]
 8002692:	3b4e      	subs	r3, #78	; 0x4e
 8002694:	b083      	sub	sp, #12
 8002696:	4604      	mov	r4, r0
 8002698:	2b0c      	cmp	r3, #12
 800269a:	d808      	bhi.n	80026ae <d_name+0x22>
 800269c:	e8df f003 	tbb	[pc, r3]
 80026a0:	07070731 	.word	0x07070731
 80026a4:	12071707 	.word	0x12071707
 80026a8:	07070707 	.word	0x07070707
 80026ac:	55          	.byte	0x55
 80026ad:	00          	.byte	0x00
 80026ae:	f7fe ff35 	bl	800151c <d_unqualified_name>
 80026b2:	68e3      	ldr	r3, [r4, #12]
 80026b4:	781a      	ldrb	r2, [r3, #0]
 80026b6:	2a49      	cmp	r2, #73	; 0x49
 80026b8:	4605      	mov	r5, r0
 80026ba:	f000 80d2 	beq.w	8002862 <d_name+0x1d6>
 80026be:	4628      	mov	r0, r5
 80026c0:	b003      	add	sp, #12
 80026c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026c4:	b003      	add	sp, #12
 80026c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80026ca:	f7fe bf27 	b.w	800151c <d_unqualified_name>
 80026ce:	7853      	ldrb	r3, [r2, #1]
 80026d0:	2b74      	cmp	r3, #116	; 0x74
 80026d2:	f000 808e 	beq.w	80027f2 <d_name+0x166>
 80026d6:	2100      	movs	r1, #0
 80026d8:	f7fe f900 	bl	80008dc <d_substitution>
 80026dc:	68e3      	ldr	r3, [r4, #12]
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	2a49      	cmp	r2, #73	; 0x49
 80026e2:	4605      	mov	r5, r0
 80026e4:	d1eb      	bne.n	80026be <d_name+0x32>
 80026e6:	3301      	adds	r3, #1
 80026e8:	60e3      	str	r3, [r4, #12]
 80026ea:	4620      	mov	r0, r4
 80026ec:	f7ff f970 	bl	80019d0 <d_template_args_1>
 80026f0:	4603      	mov	r3, r0
 80026f2:	462a      	mov	r2, r5
 80026f4:	2104      	movs	r1, #4
 80026f6:	4620      	mov	r0, r4
 80026f8:	b003      	add	sp, #12
 80026fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80026fe:	f7fd bd67 	b.w	80001d0 <d_make_comp>
 8002702:	3201      	adds	r2, #1
 8002704:	60c2      	str	r2, [r0, #12]
 8002706:	a901      	add	r1, sp, #4
 8002708:	2201      	movs	r2, #1
 800270a:	f7ff fcdb 	bl	80020c4 <d_cv_qualifiers>
 800270e:	4605      	mov	r5, r0
 8002710:	2800      	cmp	r0, #0
 8002712:	f000 80b7 	beq.w	8002884 <d_name+0x1f8>
 8002716:	2100      	movs	r1, #0
 8002718:	4620      	mov	r0, r4
 800271a:	f7fd fe2f 	bl	800037c <d_ref_qualifier>
 800271e:	2101      	movs	r1, #1
 8002720:	4606      	mov	r6, r0
 8002722:	4620      	mov	r0, r4
 8002724:	f7ff f986 	bl	8001a34 <d_prefix>
 8002728:	6028      	str	r0, [r5, #0]
 800272a:	2800      	cmp	r0, #0
 800272c:	f000 80aa 	beq.w	8002884 <d_name+0x1f8>
 8002730:	b116      	cbz	r6, 8002738 <d_name+0xac>
 8002732:	9b01      	ldr	r3, [sp, #4]
 8002734:	60f3      	str	r3, [r6, #12]
 8002736:	9601      	str	r6, [sp, #4]
 8002738:	68e3      	ldr	r3, [r4, #12]
 800273a:	781a      	ldrb	r2, [r3, #0]
 800273c:	2a45      	cmp	r2, #69	; 0x45
 800273e:	f040 80a1 	bne.w	8002884 <d_name+0x1f8>
 8002742:	3301      	adds	r3, #1
 8002744:	9d01      	ldr	r5, [sp, #4]
 8002746:	60e3      	str	r3, [r4, #12]
 8002748:	e7b9      	b.n	80026be <d_name+0x32>
 800274a:	1c53      	adds	r3, r2, #1
 800274c:	60c3      	str	r3, [r0, #12]
 800274e:	7853      	ldrb	r3, [r2, #1]
 8002750:	2b47      	cmp	r3, #71	; 0x47
 8002752:	d002      	beq.n	800275a <d_name+0xce>
 8002754:	2b54      	cmp	r3, #84	; 0x54
 8002756:	f040 8099 	bne.w	800288c <d_name+0x200>
 800275a:	4620      	mov	r0, r4
 800275c:	f7ff fd5c 	bl	8002218 <d_special_name>
 8002760:	4605      	mov	r5, r0
 8002762:	2d00      	cmp	r5, #0
 8002764:	f000 808e 	beq.w	8002884 <d_name+0x1f8>
 8002768:	68e3      	ldr	r3, [r4, #12]
 800276a:	781a      	ldrb	r2, [r3, #0]
 800276c:	2a45      	cmp	r2, #69	; 0x45
 800276e:	f040 8089 	bne.w	8002884 <d_name+0x1f8>
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	60e2      	str	r2, [r4, #12]
 8002776:	785a      	ldrb	r2, [r3, #1]
 8002778:	2a73      	cmp	r2, #115	; 0x73
 800277a:	f000 80ad 	beq.w	80028d8 <d_name+0x24c>
 800277e:	2a64      	cmp	r2, #100	; 0x64
 8002780:	f000 8089 	beq.w	8002896 <d_name+0x20a>
 8002784:	4620      	mov	r0, r4
 8002786:	f7ff ff81 	bl	800268c <d_name>
 800278a:	4603      	mov	r3, r0
 800278c:	b328      	cbz	r0, 80027da <d_name+0x14e>
 800278e:	7802      	ldrb	r2, [r0, #0]
 8002790:	2a47      	cmp	r2, #71	; 0x47
 8002792:	d022      	beq.n	80027da <d_name+0x14e>
 8002794:	2a49      	cmp	r2, #73	; 0x49
 8002796:	d020      	beq.n	80027da <d_name+0x14e>
 8002798:	461f      	mov	r7, r3
 800279a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800279e:	4620      	mov	r0, r4
 80027a0:	f7fd fe7e 	bl	80004a0 <d_discriminator>
 80027a4:	2800      	cmp	r0, #0
 80027a6:	d06d      	beq.n	8002884 <d_name+0x1f8>
 80027a8:	1c73      	adds	r3, r6, #1
 80027aa:	bf08      	it	eq
 80027ac:	463b      	moveq	r3, r7
 80027ae:	d014      	beq.n	80027da <d_name+0x14e>
 80027b0:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	f280 80b0 	bge.w	800291a <d_name+0x28e>
 80027ba:	6921      	ldr	r1, [r4, #16]
 80027bc:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80027c0:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 80027c4:	3201      	adds	r2, #1
 80027c6:	f04f 0c00 	mov.w	ip, #0
 80027ca:	e9c3 cc01 	strd	ip, ip, [r3, #4]
 80027ce:	6162      	str	r2, [r4, #20]
 80027d0:	2248      	movs	r2, #72	; 0x48
 80027d2:	f801 2020 	strb.w	r2, [r1, r0, lsl #2]
 80027d6:	e9c3 7603 	strd	r7, r6, [r3, #12]
 80027da:	782a      	ldrb	r2, [r5, #0]
 80027dc:	2a03      	cmp	r2, #3
 80027de:	d105      	bne.n	80027ec <d_name+0x160>
 80027e0:	692a      	ldr	r2, [r5, #16]
 80027e2:	7811      	ldrb	r1, [r2, #0]
 80027e4:	2929      	cmp	r1, #41	; 0x29
 80027e6:	bf04      	itt	eq
 80027e8:	2100      	moveq	r1, #0
 80027ea:	60d1      	streq	r1, [r2, #12]
 80027ec:	462a      	mov	r2, r5
 80027ee:	2102      	movs	r1, #2
 80027f0:	e781      	b.n	80026f6 <d_name+0x6a>
 80027f2:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 80027f6:	3202      	adds	r2, #2
 80027f8:	428b      	cmp	r3, r1
 80027fa:	60c2      	str	r2, [r0, #12]
 80027fc:	f280 8088 	bge.w	8002910 <d_name+0x284>
 8002800:	6902      	ldr	r2, [r0, #16]
 8002802:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8002806:	00a9      	lsls	r1, r5, #2
 8002808:	3301      	adds	r3, #1
 800280a:	6143      	str	r3, [r0, #20]
 800280c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8002810:	2300      	movs	r3, #0
 8002812:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8002816:	5453      	strb	r3, [r2, r1]
 8002818:	4a41      	ldr	r2, [pc, #260]	; (8002920 <d_name+0x294>)
 800281a:	2303      	movs	r3, #3
 800281c:	e9c5 2303 	strd	r2, r3, [r5, #12]
 8002820:	4620      	mov	r0, r4
 8002822:	f7fe fe7b 	bl	800151c <d_unqualified_name>
 8002826:	462a      	mov	r2, r5
 8002828:	4603      	mov	r3, r0
 800282a:	2101      	movs	r1, #1
 800282c:	4620      	mov	r0, r4
 800282e:	f7fd fccf 	bl	80001d0 <d_make_comp>
 8002832:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002834:	68e3      	ldr	r3, [r4, #12]
 8002836:	3203      	adds	r2, #3
 8002838:	62e2      	str	r2, [r4, #44]	; 0x2c
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	2a49      	cmp	r2, #73	; 0x49
 800283e:	4605      	mov	r5, r0
 8002840:	f47f af3d 	bne.w	80026be <d_name+0x32>
 8002844:	b1f0      	cbz	r0, 8002884 <d_name+0x1f8>
 8002846:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 800284a:	428a      	cmp	r2, r1
 800284c:	da1a      	bge.n	8002884 <d_name+0x1f8>
 800284e:	69e1      	ldr	r1, [r4, #28]
 8002850:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8002854:	3201      	adds	r2, #1
 8002856:	6222      	str	r2, [r4, #32]
 8002858:	781a      	ldrb	r2, [r3, #0]
 800285a:	3a49      	subs	r2, #73	; 0x49
 800285c:	2a01      	cmp	r2, #1
 800285e:	d80f      	bhi.n	8002880 <d_name+0x1f4>
 8002860:	e741      	b.n	80026e6 <d_name+0x5a>
 8002862:	b178      	cbz	r0, 8002884 <d_name+0x1f8>
 8002864:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8002868:	428a      	cmp	r2, r1
 800286a:	da0b      	bge.n	8002884 <d_name+0x1f8>
 800286c:	69e1      	ldr	r1, [r4, #28]
 800286e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8002872:	3201      	adds	r2, #1
 8002874:	6222      	str	r2, [r4, #32]
 8002876:	781a      	ldrb	r2, [r3, #0]
 8002878:	3a49      	subs	r2, #73	; 0x49
 800287a:	2a01      	cmp	r2, #1
 800287c:	f67f af33 	bls.w	80026e6 <d_name+0x5a>
 8002880:	2300      	movs	r3, #0
 8002882:	e736      	b.n	80026f2 <d_name+0x66>
 8002884:	2500      	movs	r5, #0
 8002886:	4628      	mov	r0, r5
 8002888:	b003      	add	sp, #12
 800288a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800288c:	2100      	movs	r1, #0
 800288e:	f000 f84b 	bl	8002928 <d_encoding.part.0>
 8002892:	4605      	mov	r5, r0
 8002894:	e765      	b.n	8002762 <d_name+0xd6>
 8002896:	1c9a      	adds	r2, r3, #2
 8002898:	60e2      	str	r2, [r4, #12]
 800289a:	789a      	ldrb	r2, [r3, #2]
 800289c:	2a5f      	cmp	r2, #95	; 0x5f
 800289e:	d039      	beq.n	8002914 <d_name+0x288>
 80028a0:	2a6e      	cmp	r2, #110	; 0x6e
 80028a2:	d0ef      	beq.n	8002884 <d_name+0x1f8>
 80028a4:	4620      	mov	r0, r4
 80028a6:	f7fd fd0b 	bl	80002c0 <d_number>
 80028aa:	1c46      	adds	r6, r0, #1
 80028ac:	d4ea      	bmi.n	8002884 <d_name+0x1f8>
 80028ae:	68e3      	ldr	r3, [r4, #12]
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	2a5f      	cmp	r2, #95	; 0x5f
 80028b4:	d1e6      	bne.n	8002884 <d_name+0x1f8>
 80028b6:	3301      	adds	r3, #1
 80028b8:	60e3      	str	r3, [r4, #12]
 80028ba:	4620      	mov	r0, r4
 80028bc:	f7ff fee6 	bl	800268c <d_name>
 80028c0:	4607      	mov	r7, r0
 80028c2:	2800      	cmp	r0, #0
 80028c4:	f43f af74 	beq.w	80027b0 <d_name+0x124>
 80028c8:	783b      	ldrb	r3, [r7, #0]
 80028ca:	2b47      	cmp	r3, #71	; 0x47
 80028cc:	f43f af70 	beq.w	80027b0 <d_name+0x124>
 80028d0:	2b49      	cmp	r3, #73	; 0x49
 80028d2:	f43f af6d 	beq.w	80027b0 <d_name+0x124>
 80028d6:	e762      	b.n	800279e <d_name+0x112>
 80028d8:	3302      	adds	r3, #2
 80028da:	60e3      	str	r3, [r4, #12]
 80028dc:	4620      	mov	r0, r4
 80028de:	f7fd fddf 	bl	80004a0 <d_discriminator>
 80028e2:	2800      	cmp	r0, #0
 80028e4:	d0ce      	beq.n	8002884 <d_name+0x1f8>
 80028e6:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	da15      	bge.n	800291a <d_name+0x28e>
 80028ee:	6921      	ldr	r1, [r4, #16]
 80028f0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80028f4:	0098      	lsls	r0, r3, #2
 80028f6:	3201      	adds	r2, #1
 80028f8:	6162      	str	r2, [r4, #20]
 80028fa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80028fe:	2200      	movs	r2, #0
 8002900:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8002904:	540a      	strb	r2, [r1, r0]
 8002906:	4907      	ldr	r1, [pc, #28]	; (8002924 <d_name+0x298>)
 8002908:	220e      	movs	r2, #14
 800290a:	e9c3 1203 	strd	r1, r2, [r3, #12]
 800290e:	e764      	b.n	80027da <d_name+0x14e>
 8002910:	2500      	movs	r5, #0
 8002912:	e785      	b.n	8002820 <d_name+0x194>
 8002914:	3303      	adds	r3, #3
 8002916:	2600      	movs	r6, #0
 8002918:	e7ce      	b.n	80028b8 <d_name+0x22c>
 800291a:	2300      	movs	r3, #0
 800291c:	e75d      	b.n	80027da <d_name+0x14e>
 800291e:	bf00      	nop
 8002920:	08022050 	.word	0x08022050
 8002924:	08022040 	.word	0x08022040

08002928 <d_encoding.part.0>:
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	4605      	mov	r5, r0
 800292c:	460e      	mov	r6, r1
 800292e:	f7ff fead 	bl	800268c <d_name>
 8002932:	b300      	cbz	r0, 8002976 <d_encoding.part.0+0x4e>
 8002934:	4604      	mov	r4, r0
 8002936:	b30e      	cbz	r6, 800297c <d_encoding.part.0+0x54>
 8002938:	68ab      	ldr	r3, [r5, #8]
 800293a:	07db      	lsls	r3, r3, #31
 800293c:	d41e      	bmi.n	800297c <d_encoding.part.0+0x54>
 800293e:	7823      	ldrb	r3, [r4, #0]
 8002940:	2b4e      	cmp	r3, #78	; 0x4e
 8002942:	f1a3 011c 	sub.w	r1, r3, #28
 8002946:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
 800294a:	d03a      	beq.n	80029c2 <d_encoding.part.0+0x9a>
 800294c:	d837      	bhi.n	80029be <d_encoding.part.0+0x96>
 800294e:	2904      	cmp	r1, #4
 8002950:	d937      	bls.n	80029c2 <d_encoding.part.0+0x9a>
 8002952:	2b02      	cmp	r3, #2
 8002954:	d110      	bne.n	8002978 <d_encoding.part.0+0x50>
 8002956:	6923      	ldr	r3, [r4, #16]
 8002958:	b16b      	cbz	r3, 8002976 <d_encoding.part.0+0x4e>
 800295a:	781a      	ldrb	r2, [r3, #0]
 800295c:	2a4e      	cmp	r2, #78	; 0x4e
 800295e:	f1a2 001c 	sub.w	r0, r2, #28
 8002962:	f1a2 0150 	sub.w	r1, r2, #80	; 0x50
 8002966:	d002      	beq.n	800296e <d_encoding.part.0+0x46>
 8002968:	d83d      	bhi.n	80029e6 <d_encoding.part.0+0xbe>
 800296a:	2804      	cmp	r0, #4
 800296c:	d804      	bhi.n	8002978 <d_encoding.part.0+0x50>
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	6123      	str	r3, [r4, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f1      	bne.n	800295a <d_encoding.part.0+0x32>
 8002976:	2400      	movs	r4, #0
 8002978:	4620      	mov	r0, r4
 800297a:	bd70      	pop	{r4, r5, r6, pc}
 800297c:	68eb      	ldr	r3, [r5, #12]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f9      	beq.n	8002978 <d_encoding.part.0+0x50>
 8002984:	2b45      	cmp	r3, #69	; 0x45
 8002986:	d0f7      	beq.n	8002978 <d_encoding.part.0+0x50>
 8002988:	4621      	mov	r1, r4
 800298a:	780b      	ldrb	r3, [r1, #0]
 800298c:	2b04      	cmp	r3, #4
 800298e:	d02d      	beq.n	80029ec <d_encoding.part.0+0xc4>
 8002990:	d81e      	bhi.n	80029d0 <d_encoding.part.0+0xa8>
 8002992:	2b02      	cmp	r3, #2
 8002994:	d11a      	bne.n	80029cc <d_encoding.part.0+0xa4>
 8002996:	6909      	ldr	r1, [r1, #16]
 8002998:	2900      	cmp	r1, #0
 800299a:	d1f6      	bne.n	800298a <d_encoding.part.0+0x62>
 800299c:	4628      	mov	r0, r5
 800299e:	f7fe fcdf 	bl	8001360 <d_bare_function_type>
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d0e7      	beq.n	8002976 <d_encoding.part.0+0x4e>
 80029a6:	b916      	cbnz	r6, 80029ae <d_encoding.part.0+0x86>
 80029a8:	7823      	ldrb	r3, [r4, #0]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d032      	beq.n	8002a14 <d_encoding.part.0+0xec>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4622      	mov	r2, r4
 80029b2:	4628      	mov	r0, r5
 80029b4:	2103      	movs	r1, #3
 80029b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80029ba:	f7fd bc09 	b.w	80001d0 <d_make_comp>
 80029be:	2a01      	cmp	r2, #1
 80029c0:	d8da      	bhi.n	8002978 <d_encoding.part.0+0x50>
 80029c2:	68e4      	ldr	r4, [r4, #12]
 80029c4:	e7bb      	b.n	800293e <d_encoding.part.0+0x16>
 80029c6:	3b1c      	subs	r3, #28
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d908      	bls.n	80029de <d_encoding.part.0+0xb6>
 80029cc:	2100      	movs	r1, #0
 80029ce:	e7e5      	b.n	800299c <d_encoding.part.0+0x74>
 80029d0:	2b4e      	cmp	r3, #78	; 0x4e
 80029d2:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
 80029d6:	d002      	beq.n	80029de <d_encoding.part.0+0xb6>
 80029d8:	d9f5      	bls.n	80029c6 <d_encoding.part.0+0x9e>
 80029da:	2a01      	cmp	r2, #1
 80029dc:	d8f6      	bhi.n	80029cc <d_encoding.part.0+0xa4>
 80029de:	68c9      	ldr	r1, [r1, #12]
 80029e0:	2900      	cmp	r1, #0
 80029e2:	d1d2      	bne.n	800298a <d_encoding.part.0+0x62>
 80029e4:	e7da      	b.n	800299c <d_encoding.part.0+0x74>
 80029e6:	2901      	cmp	r1, #1
 80029e8:	d8c6      	bhi.n	8002978 <d_encoding.part.0+0x50>
 80029ea:	e7c0      	b.n	800296e <d_encoding.part.0+0x46>
 80029ec:	68cb      	ldr	r3, [r1, #12]
 80029ee:	b15b      	cbz	r3, 8002a08 <d_encoding.part.0+0xe0>
 80029f0:	7819      	ldrb	r1, [r3, #0]
 80029f2:	2908      	cmp	r1, #8
 80029f4:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80029f8:	d808      	bhi.n	8002a0c <d_encoding.part.0+0xe4>
 80029fa:	2906      	cmp	r1, #6
 80029fc:	d8e6      	bhi.n	80029cc <d_encoding.part.0+0xa4>
 80029fe:	2a01      	cmp	r2, #1
 8002a00:	d802      	bhi.n	8002a08 <d_encoding.part.0+0xe0>
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f3      	bne.n	80029f0 <d_encoding.part.0+0xc8>
 8002a08:	2101      	movs	r1, #1
 8002a0a:	e7c7      	b.n	800299c <d_encoding.part.0+0x74>
 8002a0c:	3935      	subs	r1, #53	; 0x35
 8002a0e:	bf18      	it	ne
 8002a10:	2101      	movne	r1, #1
 8002a12:	e7c3      	b.n	800299c <d_encoding.part.0+0x74>
 8002a14:	7803      	ldrb	r3, [r0, #0]
 8002a16:	2b29      	cmp	r3, #41	; 0x29
 8002a18:	bf08      	it	eq
 8002a1a:	60c6      	streq	r6, [r0, #12]
 8002a1c:	e7c7      	b.n	80029ae <d_encoding.part.0+0x86>
 8002a1e:	bf00      	nop

08002a20 <d_print_comp_inner>:
 8002a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a24:	4604      	mov	r4, r0
 8002a26:	b095      	sub	sp, #84	; 0x54
 8002a28:	2a00      	cmp	r2, #0
 8002a2a:	d066      	beq.n	8002afa <d_print_comp_inner+0xda>
 8002a2c:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
 8002a30:	2d00      	cmp	r5, #0
 8002a32:	d165      	bne.n	8002b00 <d_print_comp_inner+0xe0>
 8002a34:	7817      	ldrb	r7, [r2, #0]
 8002a36:	4616      	mov	r6, r2
 8002a38:	2f51      	cmp	r7, #81	; 0x51
 8002a3a:	d85e      	bhi.n	8002afa <d_print_comp_inner+0xda>
 8002a3c:	e8df f017 	tbh	[pc, r7, lsl #1]
 8002a40:	011b095c 	.word	0x011b095c
 8002a44:	04ee011b 	.word	0x04ee011b
 8002a48:	02de0898 	.word	0x02de0898
 8002a4c:	0097044a 	.word	0x0097044a
 8002a50:	08f9008b 	.word	0x08f9008b
 8002a54:	03a608d2 	.word	0x03a608d2
 8002a58:	019101b8 	.word	0x019101b8
 8002a5c:	0747016a 	.word	0x0747016a
 8002a60:	06f90720 	.word	0x06f90720
 8002a64:	07bc07e3 	.word	0x07bc07e3
 8002a68:	076e0795 	.word	0x076e0795
 8002a6c:	0423037f 	.word	0x0423037f
 8002a70:	009903f8 	.word	0x009903f8
 8002a74:	00990099 	.word	0x00990099
 8002a78:	00630063 	.word	0x00630063
 8002a7c:	00630063 	.word	0x00630063
 8002a80:	00630063 	.word	0x00630063
 8002a84:	00c50063 	.word	0x00c50063
 8002a88:	006300c5 	.word	0x006300c5
 8002a8c:	09870063 	.word	0x09870063
 8002a90:	04c80083 	.word	0x04c80083
 8002a94:	00af068d 	.word	0x00af068d
 8002a98:	00af066b 	.word	0x00af066b
 8002a9c:	00e600e6 	.word	0x00e600e6
 8002aa0:	03340358 	.word	0x03340358
 8002aa4:	0831030a 	.word	0x0831030a
 8002aa8:	080a005d 	.word	0x080a005d
 8002aac:	06460663 	.word	0x06460663
 8002ab0:	005d05eb 	.word	0x005d05eb
 8002ab4:	005d0920 	.word	0x005d0920
 8002ab8:	012a005d 	.word	0x012a005d
 8002abc:	0455012a 	.word	0x0455012a
 8002ac0:	0858085e 	.word	0x0858085e
 8002ac4:	047804ba 	.word	0x047804ba
 8002ac8:	05c4054f 	.word	0x05c4054f
 8002acc:	0576059d 	.word	0x0576059d
 8002ad0:	02a4005d 	.word	0x02a4005d
 8002ad4:	0256027d 	.word	0x0256027d
 8002ad8:	01df020a 	.word	0x01df020a
 8002adc:	03cd0063 	.word	0x03cd0063
 8002ae0:	00630063 	.word	0x00630063
 8002ae4:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
 8002ae8:	2900      	cmp	r1, #0
 8002aea:	f2c1 8425 	blt.w	8004338 <d_print_comp_inner+0x1918>
 8002aee:	f7fd fcfb 	bl	80004e8 <d_index_template_argument.part.0>
 8002af2:	4602      	mov	r2, r0
 8002af4:	2800      	cmp	r0, #0
 8002af6:	f041 841f 	bne.w	8004338 <d_print_comp_inner+0x1918>
 8002afa:	2301      	movs	r3, #1
 8002afc:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8002b00:	b015      	add	sp, #84	; 0x54
 8002b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b06:	2200      	movs	r2, #0
 8002b08:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8002b0c:	9304      	str	r3, [sp, #16]
 8002b0e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8002b12:	9307      	str	r3, [sp, #28]
 8002b14:	ab04      	add	r3, sp, #16
 8002b16:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	9605      	str	r6, [sp, #20]
 8002b1e:	9306      	str	r3, [sp, #24]
 8002b20:	2a00      	cmp	r2, #0
 8002b22:	f001 87e8 	beq.w	8004af6 <d_print_comp_inner+0x20d6>
 8002b26:	2111      	movs	r1, #17
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f001 fff5 	bl	8004b18 <d_print_comp>
 8002b2e:	9b06      	ldr	r3, [sp, #24]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f001 82e9 	beq.w	8004108 <d_print_comp_inner+0x16e8>
 8002b36:	9b04      	ldr	r3, [sp, #16]
 8002b38:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002b3c:	2d00      	cmp	r5, #0
 8002b3e:	d0df      	beq.n	8002b00 <d_print_comp_inner+0xe0>
 8002b40:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 8002b44:	e7dc      	b.n	8002b00 <d_print_comp_inner+0xe0>
 8002b46:	68f2      	ldr	r2, [r6, #12]
 8002b48:	2111      	movs	r1, #17
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	b015      	add	sp, #84	; 0x54
 8002b4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b52:	f001 bfe1 	b.w	8004b18 <d_print_comp>
 8002b56:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002b5a:	29ff      	cmp	r1, #255	; 0xff
 8002b5c:	f001 855f 	beq.w	800461e <d_print_comp_inner+0x1bfe>
 8002b60:	1c4a      	adds	r2, r1, #1
 8002b62:	237e      	movs	r3, #126	; 0x7e
 8002b64:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002b68:	5463      	strb	r3, [r4, r1]
 8002b6a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002b6e:	6932      	ldr	r2, [r6, #16]
 8002b70:	e7ea      	b.n	8002b48 <d_print_comp_inner+0x128>
 8002b72:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 8002b76:	f1bc 0f00 	cmp.w	ip, #0
 8002b7a:	d00e      	beq.n	8002b9a <d_print_comp_inner+0x17a>
 8002b7c:	4663      	mov	r3, ip
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	b941      	cbnz	r1, 8002b94 <d_print_comp_inner+0x174>
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	7812      	ldrb	r2, [r2, #0]
 8002b86:	f1a2 0019 	sub.w	r0, r2, #25
 8002b8a:	2802      	cmp	r0, #2
 8002b8c:	f201 84ef 	bhi.w	800456e <d_print_comp_inner+0x1b4e>
 8002b90:	4297      	cmp	r7, r2
 8002b92:	d0d8      	beq.n	8002b46 <d_print_comp_inner+0x126>
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f1      	bne.n	8002b7e <d_print_comp_inner+0x15e>
 8002b9a:	68f2      	ldr	r2, [r6, #12]
 8002b9c:	e02b      	b.n	8002bf6 <d_print_comp_inner+0x1d6>
 8002b9e:	e9d0 3144 	ldrd	r3, r1, [r0, #272]	; 0x110
 8002ba2:	aa04      	add	r2, sp, #16
 8002ba4:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8002ba8:	2200      	movs	r2, #0
 8002baa:	e9cd 1604 	strd	r1, r6, [sp, #16]
 8002bae:	9206      	str	r2, [sp, #24]
 8002bb0:	2111      	movs	r1, #17
 8002bb2:	6932      	ldr	r2, [r6, #16]
 8002bb4:	9307      	str	r3, [sp, #28]
 8002bb6:	f001 ffaf 	bl	8004b18 <d_print_comp>
 8002bba:	9b06      	ldr	r3, [sp, #24]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f001 84c3 	beq.w	8004548 <d_print_comp_inner+0x1b28>
 8002bc2:	9b04      	ldr	r3, [sp, #16]
 8002bc4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002bc8:	e79a      	b.n	8002b00 <d_print_comp_inner+0xe0>
 8002bca:	68d2      	ldr	r2, [r2, #12]
 8002bcc:	f8d0 5120 	ldr.w	r5, [r0, #288]	; 0x120
 8002bd0:	7813      	ldrb	r3, [r2, #0]
 8002bd2:	2d00      	cmp	r5, #0
 8002bd4:	f041 8370 	bne.w	80042b8 <d_print_comp_inner+0x1898>
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	f001 85d4 	beq.w	8004786 <d_print_comp_inner+0x1d66>
 8002bde:	4610      	mov	r0, r2
 8002be0:	2b23      	cmp	r3, #35	; 0x23
 8002be2:	f001 82d8 	beq.w	8004196 <d_print_comp_inner+0x1776>
 8002be6:	429f      	cmp	r7, r3
 8002be8:	f001 82d5 	beq.w	8004196 <d_print_comp_inner+0x1776>
 8002bec:	2b24      	cmp	r3, #36	; 0x24
 8002bee:	f001 860c 	beq.w	800480a <d_print_comp_inner+0x1dea>
 8002bf2:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8002bf6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8002bfa:	9307      	str	r3, [sp, #28]
 8002bfc:	ab04      	add	r3, sp, #16
 8002bfe:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002c02:	2300      	movs	r3, #0
 8002c04:	e9cd c604 	strd	ip, r6, [sp, #16]
 8002c08:	9306      	str	r3, [sp, #24]
 8002c0a:	e78c      	b.n	8002b26 <d_print_comp_inner+0x106>
 8002c0c:	68d2      	ldr	r2, [r2, #12]
 8002c0e:	b112      	cbz	r2, 8002c16 <d_print_comp_inner+0x1f6>
 8002c10:	2111      	movs	r1, #17
 8002c12:	f001 ff81 	bl	8004b18 <d_print_comp>
 8002c16:	6933      	ldr	r3, [r6, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f43f af71 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8002c1e:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
 8002c22:	2dfd      	cmp	r5, #253	; 0xfd
 8002c24:	f201 84a7 	bhi.w	8004576 <d_print_comp_inner+0x1b56>
 8002c28:	f8df 8384 	ldr.w	r8, [pc, #900]	; 8002fb0 <d_print_comp_inner+0x590>
 8002c2c:	272c      	movs	r7, #44	; 0x2c
 8002c2e:	f108 0a01 	add.w	sl, r8, #1
 8002c32:	f04f 0900 	mov.w	r9, #0
 8002c36:	4629      	mov	r1, r5
 8002c38:	e00b      	b.n	8002c52 <d_print_comp_inner+0x232>
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	3101      	adds	r1, #1
 8002c3e:	45d0      	cmp	r8, sl
 8002c40:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002c44:	54e7      	strb	r7, [r4, r3]
 8002c46:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002c4a:	f001 8264 	beq.w	8004116 <d_print_comp_inner+0x16f6>
 8002c4e:	f818 7f01 	ldrb.w	r7, [r8, #1]!
 8002c52:	29ff      	cmp	r1, #255	; 0xff
 8002c54:	d1f1      	bne.n	8002c3a <d_print_comp_inner+0x21a>
 8002c56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c5e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002c62:	4620      	mov	r0, r4
 8002c64:	4798      	blx	r3
 8002c66:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002c70:	2101      	movs	r1, #1
 8002c72:	2300      	movs	r3, #0
 8002c74:	e7e3      	b.n	8002c3e <d_print_comp_inner+0x21e>
 8002c76:	68d2      	ldr	r2, [r2, #12]
 8002c78:	2111      	movs	r1, #17
 8002c7a:	f001 ff4d 	bl	8004b18 <d_print_comp>
 8002c7e:	49c7      	ldr	r1, [pc, #796]	; (8002f9c <d_print_comp_inner+0x57c>)
 8002c80:	4620      	mov	r0, r4
 8002c82:	f7fd fd1b 	bl	80006bc <d_append_string>
 8002c86:	6937      	ldr	r7, [r6, #16]
 8002c88:	783b      	ldrb	r3, [r7, #0]
 8002c8a:	2b48      	cmp	r3, #72	; 0x48
 8002c8c:	f001 808b 	beq.w	8003da6 <d_print_comp_inner+0x1386>
 8002c90:	463a      	mov	r2, r7
 8002c92:	e759      	b.n	8002b48 <d_print_comp_inner+0x128>
 8002c94:	68d2      	ldr	r2, [r2, #12]
 8002c96:	7813      	ldrb	r3, [r2, #0]
 8002c98:	2b27      	cmp	r3, #39	; 0x27
 8002c9a:	f041 835a 	bne.w	8004352 <d_print_comp_inner+0x1932>
 8002c9e:	68d3      	ldr	r3, [r2, #12]
 8002ca0:	7c1d      	ldrb	r5, [r3, #16]
 8002ca2:	2d06      	cmp	r5, #6
 8002ca4:	f201 827d 	bhi.w	80041a2 <d_print_comp_inner+0x1782>
 8002ca8:	2d00      	cmp	r5, #0
 8002caa:	f041 851c 	bne.w	80046e6 <d_print_comp_inner+0x1cc6>
 8002cae:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002cb2:	29ff      	cmp	r1, #255	; 0xff
 8002cb4:	f001 84f0 	beq.w	8004698 <d_print_comp_inner+0x1c78>
 8002cb8:	1c4b      	adds	r3, r1, #1
 8002cba:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002cbe:	2328      	movs	r3, #40	; 0x28
 8002cc0:	5463      	strb	r3, [r4, r1]
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	2111      	movs	r1, #17
 8002cc6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002cca:	f001 ff25 	bl	8004b18 <d_print_comp>
 8002cce:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002cd2:	29ff      	cmp	r1, #255	; 0xff
 8002cd4:	f001 84f7 	beq.w	80046c6 <d_print_comp_inner+0x1ca6>
 8002cd8:	1c4b      	adds	r3, r1, #1
 8002cda:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002cde:	2329      	movs	r3, #41	; 0x29
 8002ce0:	5463      	strb	r3, [r4, r1]
 8002ce2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002ce6:	7833      	ldrb	r3, [r6, #0]
 8002ce8:	2b3e      	cmp	r3, #62	; 0x3e
 8002cea:	f001 84e6 	beq.w	80046ba <d_print_comp_inner+0x1c9a>
 8002cee:	2d08      	cmp	r5, #8
 8002cf0:	f47f af3d 	bne.w	8002b6e <d_print_comp_inner+0x14e>
 8002cf4:	215b      	movs	r1, #91	; 0x5b
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	f7fd fc58 	bl	80005ac <d_append_char>
 8002cfc:	2111      	movs	r1, #17
 8002cfe:	6932      	ldr	r2, [r6, #16]
 8002d00:	4620      	mov	r0, r4
 8002d02:	f001 ff09 	bl	8004b18 <d_print_comp>
 8002d06:	215d      	movs	r1, #93	; 0x5d
 8002d08:	4620      	mov	r0, r4
 8002d0a:	b015      	add	sp, #84	; 0x54
 8002d0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d10:	f7fd bc4c 	b.w	80005ac <d_append_char>
 8002d14:	4fa2      	ldr	r7, [pc, #648]	; (8002fa0 <d_print_comp_inner+0x580>)
 8002d16:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002d1a:	f107 090f 	add.w	r9, r7, #15
 8002d1e:	2574      	movs	r5, #116	; 0x74
 8002d20:	f04f 0800 	mov.w	r8, #0
 8002d24:	e00b      	b.n	8002d3e <d_print_comp_inner+0x31e>
 8002d26:	460b      	mov	r3, r1
 8002d28:	3101      	adds	r1, #1
 8002d2a:	454f      	cmp	r7, r9
 8002d2c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002d30:	54e5      	strb	r5, [r4, r3]
 8002d32:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002d36:	f43f af06 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8002d3a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002d3e:	29ff      	cmp	r1, #255	; 0xff
 8002d40:	d1f1      	bne.n	8002d26 <d_print_comp_inner+0x306>
 8002d42:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d46:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d4a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002d4e:	4620      	mov	r0, r4
 8002d50:	4798      	blx	r3
 8002d52:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002d56:	3301      	adds	r3, #1
 8002d58:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e7e3      	b.n	8002d2a <d_print_comp_inner+0x30a>
 8002d62:	4f90      	ldr	r7, [pc, #576]	; (8002fa4 <d_print_comp_inner+0x584>)
 8002d64:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002d68:	f107 0911 	add.w	r9, r7, #17
 8002d6c:	2574      	movs	r5, #116	; 0x74
 8002d6e:	f04f 0800 	mov.w	r8, #0
 8002d72:	e00b      	b.n	8002d8c <d_print_comp_inner+0x36c>
 8002d74:	460b      	mov	r3, r1
 8002d76:	3101      	adds	r1, #1
 8002d78:	45b9      	cmp	r9, r7
 8002d7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002d7e:	54e5      	strb	r5, [r4, r3]
 8002d80:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002d84:	f43f aedf 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8002d88:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002d8c:	29ff      	cmp	r1, #255	; 0xff
 8002d8e:	d1f1      	bne.n	8002d74 <d_print_comp_inner+0x354>
 8002d90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d98:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	4798      	blx	r3
 8002da0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002da4:	3301      	adds	r3, #1
 8002da6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002daa:	2101      	movs	r1, #1
 8002dac:	2300      	movs	r3, #0
 8002dae:	e7e3      	b.n	8002d78 <d_print_comp_inner+0x358>
 8002db0:	4f7d      	ldr	r7, [pc, #500]	; (8002fa8 <d_print_comp_inner+0x588>)
 8002db2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002db6:	f107 090c 	add.w	r9, r7, #12
 8002dba:	2574      	movs	r5, #116	; 0x74
 8002dbc:	f04f 0800 	mov.w	r8, #0
 8002dc0:	e00b      	b.n	8002dda <d_print_comp_inner+0x3ba>
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	3101      	adds	r1, #1
 8002dc6:	454f      	cmp	r7, r9
 8002dc8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002dcc:	54e5      	strb	r5, [r4, r3]
 8002dce:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002dd2:	f43f aeb8 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8002dd6:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002dda:	29ff      	cmp	r1, #255	; 0xff
 8002ddc:	d1f1      	bne.n	8002dc2 <d_print_comp_inner+0x3a2>
 8002dde:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002de2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002de6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002dea:	4620      	mov	r0, r4
 8002dec:	4798      	blx	r3
 8002dee:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002df2:	3301      	adds	r3, #1
 8002df4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002df8:	2101      	movs	r1, #1
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e7e3      	b.n	8002dc6 <d_print_comp_inner+0x3a6>
 8002dfe:	4f6b      	ldr	r7, [pc, #428]	; (8002fac <d_print_comp_inner+0x58c>)
 8002e00:	68d2      	ldr	r2, [r2, #12]
 8002e02:	2111      	movs	r1, #17
 8002e04:	f001 fe88 	bl	8004b18 <d_print_comp>
 8002e08:	f107 0904 	add.w	r9, r7, #4
 8002e0c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002e10:	255b      	movs	r5, #91	; 0x5b
 8002e12:	f04f 0800 	mov.w	r8, #0
 8002e16:	e00b      	b.n	8002e30 <d_print_comp_inner+0x410>
 8002e18:	460b      	mov	r3, r1
 8002e1a:	3101      	adds	r1, #1
 8002e1c:	45b9      	cmp	r9, r7
 8002e1e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002e22:	54e5      	strb	r5, [r4, r3]
 8002e24:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002e28:	f000 87f3 	beq.w	8003e12 <d_print_comp_inner+0x13f2>
 8002e2c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002e30:	29ff      	cmp	r1, #255	; 0xff
 8002e32:	d1f1      	bne.n	8002e18 <d_print_comp_inner+0x3f8>
 8002e34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e38:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e3c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002e40:	4620      	mov	r0, r4
 8002e42:	4798      	blx	r3
 8002e44:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002e48:	3301      	adds	r3, #1
 8002e4a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002e4e:	2101      	movs	r1, #1
 8002e50:	2300      	movs	r3, #0
 8002e52:	e7e3      	b.n	8002e1c <d_print_comp_inner+0x3fc>
 8002e54:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 8002e58:	4651      	mov	r1, sl
 8002e5a:	f7fd fbe5 	bl	8000628 <d_find_pack>
 8002e5e:	f04f 0800 	mov.w	r8, #0
 8002e62:	b910      	cbnz	r0, 8002e6a <d_print_comp_inner+0x44a>
 8002e64:	f001 bd22 	b.w	80048ac <d_print_comp_inner+0x1e8c>
 8002e68:	46c8      	mov	r8, r9
 8002e6a:	7803      	ldrb	r3, [r0, #0]
 8002e6c:	2b2f      	cmp	r3, #47	; 0x2f
 8002e6e:	f108 0901 	add.w	r9, r8, #1
 8002e72:	f041 8187 	bne.w	8004184 <d_print_comp_inner+0x1764>
 8002e76:	68c3      	ldr	r3, [r0, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f001 8183 	beq.w	8004184 <d_print_comp_inner+0x1764>
 8002e7e:	6900      	ldr	r0, [r0, #16]
 8002e80:	2800      	cmp	r0, #0
 8002e82:	d1f1      	bne.n	8002e68 <d_print_comp_inner+0x448>
 8002e84:	e003      	b.n	8002e8e <d_print_comp_inner+0x46e>
 8002e86:	3501      	adds	r5, #1
 8002e88:	454d      	cmp	r5, r9
 8002e8a:	f6bf ae39 	bge.w	8002b00 <d_print_comp_inner+0xe0>
 8002e8e:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 8002e92:	4652      	mov	r2, sl
 8002e94:	2111      	movs	r1, #17
 8002e96:	4620      	mov	r0, r4
 8002e98:	f001 fe3e 	bl	8004b18 <d_print_comp>
 8002e9c:	45a8      	cmp	r8, r5
 8002e9e:	ddf2      	ble.n	8002e86 <d_print_comp_inner+0x466>
 8002ea0:	4f43      	ldr	r7, [pc, #268]	; (8002fb0 <d_print_comp_inner+0x590>)
 8002ea2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002ea6:	f107 0b01 	add.w	fp, r7, #1
 8002eaa:	262c      	movs	r6, #44	; 0x2c
 8002eac:	e00a      	b.n	8002ec4 <d_print_comp_inner+0x4a4>
 8002eae:	460b      	mov	r3, r1
 8002eb0:	3101      	adds	r1, #1
 8002eb2:	45bb      	cmp	fp, r7
 8002eb4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002eb8:	54e6      	strb	r6, [r4, r3]
 8002eba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8002ebe:	d0e2      	beq.n	8002e86 <d_print_comp_inner+0x466>
 8002ec0:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8002ec4:	29ff      	cmp	r1, #255	; 0xff
 8002ec6:	d1f2      	bne.n	8002eae <d_print_comp_inner+0x48e>
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ed0:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002eda:	4798      	blx	r3
 8002edc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e7e2      	b.n	8002eb2 <d_print_comp_inner+0x492>
 8002eec:	4f31      	ldr	r7, [pc, #196]	; (8002fb4 <d_print_comp_inner+0x594>)
 8002eee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002ef2:	f107 0919 	add.w	r9, r7, #25
 8002ef6:	256e      	movs	r5, #110	; 0x6e
 8002ef8:	f04f 0800 	mov.w	r8, #0
 8002efc:	e00b      	b.n	8002f16 <d_print_comp_inner+0x4f6>
 8002efe:	460b      	mov	r3, r1
 8002f00:	3101      	adds	r1, #1
 8002f02:	45b9      	cmp	r9, r7
 8002f04:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f08:	54e5      	strb	r5, [r4, r3]
 8002f0a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002f0e:	f43f ae1a 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8002f12:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002f16:	29ff      	cmp	r1, #255	; 0xff
 8002f18:	d1f1      	bne.n	8002efe <d_print_comp_inner+0x4de>
 8002f1a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f1e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f22:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002f26:	4620      	mov	r0, r4
 8002f28:	4798      	blx	r3
 8002f2a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002f34:	2101      	movs	r1, #1
 8002f36:	2300      	movs	r3, #0
 8002f38:	e7e3      	b.n	8002f02 <d_print_comp_inner+0x4e2>
 8002f3a:	4f1f      	ldr	r7, [pc, #124]	; (8002fb8 <d_print_comp_inner+0x598>)
 8002f3c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f40:	f107 0915 	add.w	r9, r7, #21
 8002f44:	2574      	movs	r5, #116	; 0x74
 8002f46:	f04f 0800 	mov.w	r8, #0
 8002f4a:	e00b      	b.n	8002f64 <d_print_comp_inner+0x544>
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	3101      	adds	r1, #1
 8002f50:	45b9      	cmp	r9, r7
 8002f52:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f56:	54e5      	strb	r5, [r4, r3]
 8002f58:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002f5c:	f43f adf3 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8002f60:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002f64:	29ff      	cmp	r1, #255	; 0xff
 8002f66:	d1f1      	bne.n	8002f4c <d_print_comp_inner+0x52c>
 8002f68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f70:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002f74:	4620      	mov	r0, r4
 8002f76:	4798      	blx	r3
 8002f78:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002f82:	2101      	movs	r1, #1
 8002f84:	2300      	movs	r3, #0
 8002f86:	e7e3      	b.n	8002f50 <d_print_comp_inner+0x530>
 8002f88:	4f0c      	ldr	r7, [pc, #48]	; (8002fbc <d_print_comp_inner+0x59c>)
 8002f8a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f8e:	f107 090d 	add.w	r9, r7, #13
 8002f92:	257b      	movs	r5, #123	; 0x7b
 8002f94:	f04f 0800 	mov.w	r8, #0
 8002f98:	e01e      	b.n	8002fd8 <d_print_comp_inner+0x5b8>
 8002f9a:	bf00      	nop
 8002f9c:	0802205c 	.word	0x0802205c
 8002fa0:	080220fc 	.word	0x080220fc
 8002fa4:	080220e8 	.word	0x080220e8
 8002fa8:	080220d8 	.word	0x080220d8
 8002fac:	08022054 	.word	0x08022054
 8002fb0:	080221fc 	.word	0x080221fc
 8002fb4:	080221c8 	.word	0x080221c8
 8002fb8:	080221cc 	.word	0x080221cc
 8002fbc:	080222d0 	.word	0x080222d0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	3101      	adds	r1, #1
 8002fc4:	454f      	cmp	r7, r9
 8002fc6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002fca:	54e5      	strb	r5, [r4, r3]
 8002fcc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002fd0:	f000 8739 	beq.w	8003e46 <d_print_comp_inner+0x1426>
 8002fd4:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002fd8:	29ff      	cmp	r1, #255	; 0xff
 8002fda:	d1f1      	bne.n	8002fc0 <d_print_comp_inner+0x5a0>
 8002fdc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fe0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fe4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002fe8:	4620      	mov	r0, r4
 8002fea:	4798      	blx	r3
 8002fec:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e7e3      	b.n	8002fc4 <d_print_comp_inner+0x5a4>
 8002ffc:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 8003000:	2b00      	cmp	r3, #0
 8003002:	f001 818e 	beq.w	8004322 <d_print_comp_inner+0x1902>
 8003006:	4fd3      	ldr	r7, [pc, #844]	; (8003354 <d_print_comp_inner+0x934>)
 8003008:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800300c:	f107 0904 	add.w	r9, r7, #4
 8003010:	2561      	movs	r5, #97	; 0x61
 8003012:	f04f 0800 	mov.w	r8, #0
 8003016:	e00b      	b.n	8003030 <d_print_comp_inner+0x610>
 8003018:	460b      	mov	r3, r1
 800301a:	3101      	adds	r1, #1
 800301c:	45b9      	cmp	r9, r7
 800301e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003022:	54e5      	strb	r5, [r4, r3]
 8003024:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003028:	f001 814a 	beq.w	80042c0 <d_print_comp_inner+0x18a0>
 800302c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003030:	29ff      	cmp	r1, #255	; 0xff
 8003032:	d1f1      	bne.n	8003018 <d_print_comp_inner+0x5f8>
 8003034:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003038:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800303c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003040:	4620      	mov	r0, r4
 8003042:	4798      	blx	r3
 8003044:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003048:	3301      	adds	r3, #1
 800304a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800304e:	2101      	movs	r1, #1
 8003050:	2300      	movs	r3, #0
 8003052:	e7e3      	b.n	800301c <d_print_comp_inner+0x5fc>
 8003054:	68d7      	ldr	r7, [r2, #12]
 8003056:	4ec0      	ldr	r6, [pc, #768]	; (8003358 <d_print_comp_inner+0x938>)
 8003058:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800305c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003060:	f106 0a07 	add.w	sl, r6, #7
 8003064:	256f      	movs	r5, #111	; 0x6f
 8003066:	f04f 0900 	mov.w	r9, #0
 800306a:	e00b      	b.n	8003084 <d_print_comp_inner+0x664>
 800306c:	460b      	mov	r3, r1
 800306e:	3101      	adds	r1, #1
 8003070:	45b2      	cmp	sl, r6
 8003072:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003076:	54e5      	strb	r5, [r4, r3]
 8003078:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800307c:	f000 8726 	beq.w	8003ecc <d_print_comp_inner+0x14ac>
 8003080:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8003084:	29ff      	cmp	r1, #255	; 0xff
 8003086:	d1f1      	bne.n	800306c <d_print_comp_inner+0x64c>
 8003088:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800308c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003090:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003094:	4620      	mov	r0, r4
 8003096:	4798      	blx	r3
 8003098:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800309c:	3301      	adds	r3, #1
 800309e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80030a2:	2101      	movs	r1, #1
 80030a4:	2300      	movs	r3, #0
 80030a6:	e7e3      	b.n	8003070 <d_print_comp_inner+0x650>
 80030a8:	e9d2 2503 	ldrd	r2, r5, [r2, #12]
 80030ac:	b112      	cbz	r2, 80030b4 <d_print_comp_inner+0x694>
 80030ae:	2111      	movs	r1, #17
 80030b0:	f001 fd32 	bl	8004b18 <d_print_comp>
 80030b4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80030b8:	29ff      	cmp	r1, #255	; 0xff
 80030ba:	f001 826d 	beq.w	8004598 <d_print_comp_inner+0x1b78>
 80030be:	1c4a      	adds	r2, r1, #1
 80030c0:	237b      	movs	r3, #123	; 0x7b
 80030c2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80030c6:	4620      	mov	r0, r4
 80030c8:	5463      	strb	r3, [r4, r1]
 80030ca:	462a      	mov	r2, r5
 80030cc:	2111      	movs	r1, #17
 80030ce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80030d2:	f001 fd21 	bl	8004b18 <d_print_comp>
 80030d6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80030da:	29ff      	cmp	r1, #255	; 0xff
 80030dc:	f000 86e6 	beq.w	8003eac <d_print_comp_inner+0x148c>
 80030e0:	1c4a      	adds	r2, r1, #1
 80030e2:	237d      	movs	r3, #125	; 0x7d
 80030e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80030e8:	5463      	strb	r3, [r4, r1]
 80030ea:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80030ee:	e507      	b.n	8002b00 <d_print_comp_inner+0xe0>
 80030f0:	4f9a      	ldr	r7, [pc, #616]	; (800335c <d_print_comp_inner+0x93c>)
 80030f2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80030f6:	f107 091d 	add.w	r9, r7, #29
 80030fa:	2574      	movs	r5, #116	; 0x74
 80030fc:	f04f 0800 	mov.w	r8, #0
 8003100:	e00b      	b.n	800311a <d_print_comp_inner+0x6fa>
 8003102:	460b      	mov	r3, r1
 8003104:	3101      	adds	r1, #1
 8003106:	45b9      	cmp	r9, r7
 8003108:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800310c:	54e5      	strb	r5, [r4, r3]
 800310e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003112:	f43f ad18 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003116:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 800311a:	29ff      	cmp	r1, #255	; 0xff
 800311c:	d1f1      	bne.n	8003102 <d_print_comp_inner+0x6e2>
 800311e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003122:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003126:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800312a:	4620      	mov	r0, r4
 800312c:	4798      	blx	r3
 800312e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003132:	3301      	adds	r3, #1
 8003134:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003138:	2101      	movs	r1, #1
 800313a:	2300      	movs	r3, #0
 800313c:	e7e3      	b.n	8003106 <d_print_comp_inner+0x6e6>
 800313e:	4f88      	ldr	r7, [pc, #544]	; (8003360 <d_print_comp_inner+0x940>)
 8003140:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003144:	f107 0914 	add.w	r9, r7, #20
 8003148:	2572      	movs	r5, #114	; 0x72
 800314a:	f04f 0800 	mov.w	r8, #0
 800314e:	e00b      	b.n	8003168 <d_print_comp_inner+0x748>
 8003150:	460b      	mov	r3, r1
 8003152:	3101      	adds	r1, #1
 8003154:	45b9      	cmp	r9, r7
 8003156:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800315a:	54e5      	strb	r5, [r4, r3]
 800315c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003160:	f000 86f4 	beq.w	8003f4c <d_print_comp_inner+0x152c>
 8003164:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003168:	29ff      	cmp	r1, #255	; 0xff
 800316a:	d1f1      	bne.n	8003150 <d_print_comp_inner+0x730>
 800316c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003170:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003174:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003178:	4620      	mov	r0, r4
 800317a:	4798      	blx	r3
 800317c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003180:	3301      	adds	r3, #1
 8003182:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003186:	2101      	movs	r1, #1
 8003188:	2300      	movs	r3, #0
 800318a:	e7e3      	b.n	8003154 <d_print_comp_inner+0x734>
 800318c:	4f75      	ldr	r7, [pc, #468]	; (8003364 <d_print_comp_inner+0x944>)
 800318e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003192:	f107 0917 	add.w	r9, r7, #23
 8003196:	2563      	movs	r5, #99	; 0x63
 8003198:	f04f 0800 	mov.w	r8, #0
 800319c:	e00b      	b.n	80031b6 <d_print_comp_inner+0x796>
 800319e:	460b      	mov	r3, r1
 80031a0:	3101      	adds	r1, #1
 80031a2:	454f      	cmp	r7, r9
 80031a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80031a8:	54e5      	strb	r5, [r4, r3]
 80031aa:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80031ae:	f000 877c 	beq.w	80040aa <d_print_comp_inner+0x168a>
 80031b2:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80031b6:	29ff      	cmp	r1, #255	; 0xff
 80031b8:	d1f1      	bne.n	800319e <d_print_comp_inner+0x77e>
 80031ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80031be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80031c2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80031c6:	4620      	mov	r0, r4
 80031c8:	4798      	blx	r3
 80031ca:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80031ce:	3301      	adds	r3, #1
 80031d0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80031d4:	2101      	movs	r1, #1
 80031d6:	2300      	movs	r3, #0
 80031d8:	e7e3      	b.n	80031a2 <d_print_comp_inner+0x782>
 80031da:	4f63      	ldr	r7, [pc, #396]	; (8003368 <d_print_comp_inner+0x948>)
 80031dc:	68d2      	ldr	r2, [r2, #12]
 80031de:	2111      	movs	r1, #17
 80031e0:	f001 fc9a 	bl	8004b18 <d_print_comp>
 80031e4:	f107 0907 	add.w	r9, r7, #7
 80031e8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80031ec:	2520      	movs	r5, #32
 80031ee:	f04f 0800 	mov.w	r8, #0
 80031f2:	e00b      	b.n	800320c <d_print_comp_inner+0x7ec>
 80031f4:	460b      	mov	r3, r1
 80031f6:	3101      	adds	r1, #1
 80031f8:	45b9      	cmp	r9, r7
 80031fa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80031fe:	54e5      	strb	r5, [r4, r3]
 8003200:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003204:	f000 8605 	beq.w	8003e12 <d_print_comp_inner+0x13f2>
 8003208:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 800320c:	29ff      	cmp	r1, #255	; 0xff
 800320e:	d1f1      	bne.n	80031f4 <d_print_comp_inner+0x7d4>
 8003210:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003214:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003218:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800321c:	4620      	mov	r0, r4
 800321e:	4798      	blx	r3
 8003220:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003224:	3301      	adds	r3, #1
 8003226:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800322a:	2101      	movs	r1, #1
 800322c:	2300      	movs	r3, #0
 800322e:	e7e3      	b.n	80031f8 <d_print_comp_inner+0x7d8>
 8003230:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	f43f ac63 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 800323a:	442b      	add	r3, r5
 800323c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003240:	3d01      	subs	r5, #1
 8003242:	1e5f      	subs	r7, r3, #1
 8003244:	f04f 0800 	mov.w	r8, #0
 8003248:	e009      	b.n	800325e <d_print_comp_inner+0x83e>
 800324a:	460b      	mov	r3, r1
 800324c:	3101      	adds	r1, #1
 800324e:	42af      	cmp	r7, r5
 8003250:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003254:	54e6      	strb	r6, [r4, r3]
 8003256:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800325a:	f43f ac51 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 800325e:	29ff      	cmp	r1, #255	; 0xff
 8003260:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003264:	d1f1      	bne.n	800324a <d_print_comp_inner+0x82a>
 8003266:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800326a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800326e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003272:	4620      	mov	r0, r4
 8003274:	4798      	blx	r3
 8003276:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800327a:	3301      	adds	r3, #1
 800327c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003280:	2101      	movs	r1, #1
 8003282:	2300      	movs	r3, #0
 8003284:	e7e3      	b.n	800324e <d_print_comp_inner+0x82e>
 8003286:	4f39      	ldr	r7, [pc, #228]	; (800336c <d_print_comp_inner+0x94c>)
 8003288:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800328c:	f107 0910 	add.w	r9, r7, #16
 8003290:	2568      	movs	r5, #104	; 0x68
 8003292:	f04f 0800 	mov.w	r8, #0
 8003296:	e00b      	b.n	80032b0 <d_print_comp_inner+0x890>
 8003298:	460b      	mov	r3, r1
 800329a:	3101      	adds	r1, #1
 800329c:	45b9      	cmp	r9, r7
 800329e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80032a2:	54e5      	strb	r5, [r4, r3]
 80032a4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80032a8:	f43f ac4d 	beq.w	8002b46 <d_print_comp_inner+0x126>
 80032ac:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80032b0:	29ff      	cmp	r1, #255	; 0xff
 80032b2:	d1f1      	bne.n	8003298 <d_print_comp_inner+0x878>
 80032b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032bc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80032c0:	4620      	mov	r0, r4
 80032c2:	4798      	blx	r3
 80032c4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80032c8:	3301      	adds	r3, #1
 80032ca:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80032ce:	2101      	movs	r1, #1
 80032d0:	2300      	movs	r3, #0
 80032d2:	e7e3      	b.n	800329c <d_print_comp_inner+0x87c>
 80032d4:	68d5      	ldr	r5, [r2, #12]
 80032d6:	2d00      	cmp	r5, #0
 80032d8:	f040 87a1 	bne.w	800421e <d_print_comp_inner+0x17fe>
 80032dc:	4924      	ldr	r1, [pc, #144]	; (8003370 <d_print_comp_inner+0x950>)
 80032de:	4620      	mov	r0, r4
 80032e0:	b015      	add	sp, #84	; 0x54
 80032e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e6:	f7fd b9e9 	b.w	80006bc <d_append_string>
 80032ea:	2111      	movs	r1, #17
 80032ec:	68d2      	ldr	r2, [r2, #12]
 80032ee:	f001 fc13 	bl	8004b18 <d_print_comp>
 80032f2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80032f6:	29ff      	cmp	r1, #255	; 0xff
 80032f8:	f001 816e 	beq.w	80045d8 <d_print_comp_inner+0x1bb8>
 80032fc:	1c4a      	adds	r2, r1, #1
 80032fe:	2328      	movs	r3, #40	; 0x28
 8003300:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003304:	5463      	strb	r3, [r4, r1]
 8003306:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800330a:	6932      	ldr	r2, [r6, #16]
 800330c:	2111      	movs	r1, #17
 800330e:	4620      	mov	r0, r4
 8003310:	f001 fc02 	bl	8004b18 <d_print_comp>
 8003314:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003318:	29ff      	cmp	r1, #255	; 0xff
 800331a:	f001 802c 	beq.w	8004376 <d_print_comp_inner+0x1956>
 800331e:	1c4a      	adds	r2, r1, #1
 8003320:	2329      	movs	r3, #41	; 0x29
 8003322:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003326:	5463      	strb	r3, [r4, r1]
 8003328:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800332c:	f7ff bbe8 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8003330:	68d2      	ldr	r2, [r2, #12]
 8003332:	4910      	ldr	r1, [pc, #64]	; (8003374 <d_print_comp_inner+0x954>)
 8003334:	a804      	add	r0, sp, #16
 8003336:	f01a fdb3 	bl	801dea0 <siprintf>
 800333a:	a804      	add	r0, sp, #16
 800333c:	f002 ff70 	bl	8006220 <strlen>
 8003340:	2800      	cmp	r0, #0
 8003342:	f43f abdd 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8003346:	ad04      	add	r5, sp, #16
 8003348:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800334c:	182f      	adds	r7, r5, r0
 800334e:	f04f 0800 	mov.w	r8, #0
 8003352:	e01b      	b.n	800338c <d_print_comp_inner+0x96c>
 8003354:	08022074 	.word	0x08022074
 8003358:	08022200 	.word	0x08022200
 800335c:	0802207c 	.word	0x0802207c
 8003360:	0802219c 	.word	0x0802219c
 8003364:	080220b4 	.word	0x080220b4
 8003368:	080222e0 	.word	0x080222e0
 800336c:	080221b4 	.word	0x080221b4
 8003370:	08022270 	.word	0x08022270
 8003374:	08021fec 	.word	0x08021fec
 8003378:	460b      	mov	r3, r1
 800337a:	3101      	adds	r1, #1
 800337c:	42af      	cmp	r7, r5
 800337e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003382:	54e6      	strb	r6, [r4, r3]
 8003384:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003388:	f43f abba 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 800338c:	29ff      	cmp	r1, #255	; 0xff
 800338e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003392:	d1f1      	bne.n	8003378 <d_print_comp_inner+0x958>
 8003394:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003398:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800339c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80033a0:	4620      	mov	r0, r4
 80033a2:	4798      	blx	r3
 80033a4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80033a8:	3301      	adds	r3, #1
 80033aa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80033ae:	2101      	movs	r1, #1
 80033b0:	2300      	movs	r3, #0
 80033b2:	e7e3      	b.n	800337c <d_print_comp_inner+0x95c>
 80033b4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80033b8:	7b15      	ldrb	r5, [r2, #12]
 80033ba:	29ff      	cmp	r1, #255	; 0xff
 80033bc:	f001 811e 	beq.w	80045fc <d_print_comp_inner+0x1bdc>
 80033c0:	1c4b      	adds	r3, r1, #1
 80033c2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80033c6:	5465      	strb	r5, [r4, r1]
 80033c8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80033cc:	f7ff bb98 	b.w	8002b00 <d_print_comp_inner+0xe0>
 80033d0:	68d2      	ldr	r2, [r2, #12]
 80033d2:	b1ca      	cbz	r2, 8003408 <d_print_comp_inner+0x9e8>
 80033d4:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
 80033d8:	ab04      	add	r3, sp, #16
 80033da:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 80033de:	2300      	movs	r3, #0
 80033e0:	e9cd 1604 	strd	r1, r6, [sp, #16]
 80033e4:	9306      	str	r3, [sp, #24]
 80033e6:	2111      	movs	r1, #17
 80033e8:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80033ec:	9307      	str	r3, [sp, #28]
 80033ee:	f001 fb93 	bl	8004b18 <d_print_comp>
 80033f2:	9b06      	ldr	r3, [sp, #24]
 80033f4:	9a04      	ldr	r2, [sp, #16]
 80033f6:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f47f ab80 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 8003400:	2120      	movs	r1, #32
 8003402:	4620      	mov	r0, r4
 8003404:	f7fd f8d2 	bl	80005ac <d_append_char>
 8003408:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800340c:	4632      	mov	r2, r6
 800340e:	2111      	movs	r1, #17
 8003410:	4620      	mov	r0, r4
 8003412:	b015      	add	sp, #84	; 0x54
 8003414:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003418:	f001 bec4 	b.w	80051a4 <d_print_function_type>
 800341c:	68d7      	ldr	r7, [r2, #12]
 800341e:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
 8003422:	2200      	movs	r2, #0
 8003424:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8003428:	2f00      	cmp	r7, #0
 800342a:	f43f ab66 	beq.w	8002afa <d_print_comp_inner+0xda>
 800342e:	f10d 0810 	add.w	r8, sp, #16
 8003432:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
 8003436:	4643      	mov	r3, r8
 8003438:	4611      	mov	r1, r2
 800343a:	4696      	mov	lr, r2
 800343c:	e9c3 2700 	strd	r2, r7, [r3]
 8003440:	e9c3 ec02 	strd	lr, ip, [r3, #8]
 8003444:	783a      	ldrb	r2, [r7, #0]
 8003446:	2a4e      	cmp	r2, #78	; 0x4e
 8003448:	469a      	mov	sl, r3
 800344a:	f1a2 0b1c 	sub.w	fp, r2, #28
 800344e:	f1a2 0050 	sub.w	r0, r2, #80	; 0x50
 8003452:	f101 0501 	add.w	r5, r1, #1
 8003456:	f000 8688 	beq.w	800416a <d_print_comp_inner+0x174a>
 800345a:	f200 84ed 	bhi.w	8003e38 <d_print_comp_inner+0x1418>
 800345e:	f1bb 0f04 	cmp.w	fp, #4
 8003462:	f240 8682 	bls.w	800416a <d_print_comp_inner+0x174a>
 8003466:	2a02      	cmp	r2, #2
 8003468:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800346c:	d114      	bne.n	8003498 <d_print_comp_inner+0xa78>
 800346e:	693f      	ldr	r7, [r7, #16]
 8003470:	783a      	ldrb	r2, [r7, #0]
 8003472:	2a48      	cmp	r2, #72	; 0x48
 8003474:	f001 8252 	beq.w	800491c <d_print_comp_inner+0x1efc>
 8003478:	eb08 1101 	add.w	r1, r8, r1, lsl #4
 800347c:	f04f 0a00 	mov.w	sl, #0
 8003480:	2a4e      	cmp	r2, #78	; 0x4e
 8003482:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
 8003486:	f1a2 001c 	sub.w	r0, r2, #28
 800348a:	f000 8787 	beq.w	800439c <d_print_comp_inner+0x197c>
 800348e:	f200 8782 	bhi.w	8004396 <d_print_comp_inner+0x1976>
 8003492:	2804      	cmp	r0, #4
 8003494:	f240 8782 	bls.w	800439c <d_print_comp_inner+0x197c>
 8003498:	2a04      	cmp	r2, #4
 800349a:	d104      	bne.n	80034a6 <d_print_comp_inner+0xa86>
 800349c:	e9cd c702 	strd	ip, r7, [sp, #8]
 80034a0:	ab02      	add	r3, sp, #8
 80034a2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80034a6:	6932      	ldr	r2, [r6, #16]
 80034a8:	2111      	movs	r1, #17
 80034aa:	4620      	mov	r0, r4
 80034ac:	f001 fb34 	bl	8004b18 <d_print_comp>
 80034b0:	783b      	ldrb	r3, [r7, #0]
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d102      	bne.n	80034bc <d_print_comp_inner+0xa9c>
 80034b6:	9b02      	ldr	r3, [sp, #8]
 80034b8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80034bc:	eb08 1805 	add.w	r8, r8, r5, lsl #4
 80034c0:	2720      	movs	r7, #32
 80034c2:	f858 6c08 	ldr.w	r6, [r8, #-8]
 80034c6:	3d01      	subs	r5, #1
 80034c8:	2e00      	cmp	r6, #0
 80034ca:	f000 863b 	beq.w	8004144 <d_print_comp_inner+0x1724>
 80034ce:	f1a8 0810 	sub.w	r8, r8, #16
 80034d2:	2d00      	cmp	r5, #0
 80034d4:	d1f5      	bne.n	80034c2 <d_print_comp_inner+0xaa2>
 80034d6:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80034da:	f7ff bb11 	b.w	8002b00 <d_print_comp_inner+0xe0>
 80034de:	4fab      	ldr	r7, [pc, #684]	; (800378c <d_print_comp_inner+0xd6c>)
 80034e0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80034e4:	f107 0909 	add.w	r9, r7, #9
 80034e8:	2564      	movs	r5, #100	; 0x64
 80034ea:	f04f 0800 	mov.w	r8, #0
 80034ee:	e00b      	b.n	8003508 <d_print_comp_inner+0xae8>
 80034f0:	460b      	mov	r3, r1
 80034f2:	3101      	adds	r1, #1
 80034f4:	454f      	cmp	r7, r9
 80034f6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80034fa:	54e5      	strb	r5, [r4, r3]
 80034fc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003500:	f000 85ff 	beq.w	8004102 <d_print_comp_inner+0x16e2>
 8003504:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003508:	29ff      	cmp	r1, #255	; 0xff
 800350a:	d1f1      	bne.n	80034f0 <d_print_comp_inner+0xad0>
 800350c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003510:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003514:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003518:	4620      	mov	r0, r4
 800351a:	4798      	blx	r3
 800351c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003520:	3301      	adds	r3, #1
 8003522:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003526:	2101      	movs	r1, #1
 8003528:	2300      	movs	r3, #0
 800352a:	e7e3      	b.n	80034f4 <d_print_comp_inner+0xad4>
 800352c:	4f98      	ldr	r7, [pc, #608]	; (8003790 <d_print_comp_inner+0xd70>)
 800352e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003532:	f107 0907 	add.w	r9, r7, #7
 8003536:	257b      	movs	r5, #123	; 0x7b
 8003538:	f04f 0800 	mov.w	r8, #0
 800353c:	e00b      	b.n	8003556 <d_print_comp_inner+0xb36>
 800353e:	460b      	mov	r3, r1
 8003540:	3101      	adds	r1, #1
 8003542:	454f      	cmp	r7, r9
 8003544:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003548:	54e5      	strb	r5, [r4, r3]
 800354a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800354e:	f000 8546 	beq.w	8003fde <d_print_comp_inner+0x15be>
 8003552:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003556:	29ff      	cmp	r1, #255	; 0xff
 8003558:	d1f1      	bne.n	800353e <d_print_comp_inner+0xb1e>
 800355a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800355e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003562:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003566:	4620      	mov	r0, r4
 8003568:	4798      	blx	r3
 800356a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800356e:	3301      	adds	r3, #1
 8003570:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003574:	2101      	movs	r1, #1
 8003576:	2300      	movs	r3, #0
 8003578:	e7e3      	b.n	8003542 <d_print_comp_inner+0xb22>
 800357a:	4f86      	ldr	r7, [pc, #536]	; (8003794 <d_print_comp_inner+0xd74>)
 800357c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003580:	f107 091b 	add.w	r9, r7, #27
 8003584:	2567      	movs	r5, #103	; 0x67
 8003586:	f04f 0800 	mov.w	r8, #0
 800358a:	e00b      	b.n	80035a4 <d_print_comp_inner+0xb84>
 800358c:	460b      	mov	r3, r1
 800358e:	3101      	adds	r1, #1
 8003590:	45b9      	cmp	r9, r7
 8003592:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003596:	54e5      	strb	r5, [r4, r3]
 8003598:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800359c:	f43f aad3 	beq.w	8002b46 <d_print_comp_inner+0x126>
 80035a0:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80035a4:	29ff      	cmp	r1, #255	; 0xff
 80035a6:	d1f1      	bne.n	800358c <d_print_comp_inner+0xb6c>
 80035a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035b0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80035b4:	4620      	mov	r0, r4
 80035b6:	4798      	blx	r3
 80035b8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80035bc:	3301      	adds	r3, #1
 80035be:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80035c2:	2101      	movs	r1, #1
 80035c4:	2300      	movs	r3, #0
 80035c6:	e7e3      	b.n	8003590 <d_print_comp_inner+0xb70>
 80035c8:	4f73      	ldr	r7, [pc, #460]	; (8003798 <d_print_comp_inner+0xd78>)
 80035ca:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80035ce:	f107 091c 	add.w	r9, r7, #28
 80035d2:	2567      	movs	r5, #103	; 0x67
 80035d4:	f04f 0800 	mov.w	r8, #0
 80035d8:	e00b      	b.n	80035f2 <d_print_comp_inner+0xbd2>
 80035da:	460b      	mov	r3, r1
 80035dc:	3101      	adds	r1, #1
 80035de:	45b9      	cmp	r9, r7
 80035e0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80035e4:	54e5      	strb	r5, [r4, r3]
 80035e6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80035ea:	f43f aaac 	beq.w	8002b46 <d_print_comp_inner+0x126>
 80035ee:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80035f2:	29ff      	cmp	r1, #255	; 0xff
 80035f4:	d1f1      	bne.n	80035da <d_print_comp_inner+0xbba>
 80035f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035fe:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003602:	4620      	mov	r0, r4
 8003604:	4798      	blx	r3
 8003606:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800360a:	3301      	adds	r3, #1
 800360c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003610:	2101      	movs	r1, #1
 8003612:	2300      	movs	r3, #0
 8003614:	e7e3      	b.n	80035de <d_print_comp_inner+0xbbe>
 8003616:	6913      	ldr	r3, [r2, #16]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b39      	cmp	r3, #57	; 0x39
 800361c:	f47f aa6d 	bne.w	8002afa <d_print_comp_inner+0xda>
 8003620:	68d2      	ldr	r2, [r2, #12]
 8003622:	68d3      	ldr	r3, [r2, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	7859      	ldrb	r1, [r3, #1]
 8003628:	2963      	cmp	r1, #99	; 0x63
 800362a:	f001 8081 	beq.w	8004730 <d_print_comp_inner+0x1d10>
 800362e:	4632      	mov	r2, r6
 8003630:	2111      	movs	r1, #17
 8003632:	4620      	mov	r0, r4
 8003634:	f002 fb14 	bl	8005c60 <d_maybe_print_fold_expression>
 8003638:	2800      	cmp	r0, #0
 800363a:	f47f aa61 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 800363e:	4632      	mov	r2, r6
 8003640:	2111      	movs	r1, #17
 8003642:	4620      	mov	r0, r4
 8003644:	f002 fc36 	bl	8005eb4 <d_maybe_print_designated_init>
 8003648:	2800      	cmp	r0, #0
 800364a:	f47f aa59 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 800364e:	68f3      	ldr	r3, [r6, #12]
 8003650:	781a      	ldrb	r2, [r3, #0]
 8003652:	2a32      	cmp	r2, #50	; 0x32
 8003654:	f001 81df 	beq.w	8004a16 <d_print_comp_inner+0x1ff6>
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	4950      	ldr	r1, [pc, #320]	; (800379c <d_print_comp_inner+0xd7c>)
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	f002 fde7 	bl	8006230 <strcmp>
 8003662:	6933      	ldr	r3, [r6, #16]
 8003664:	b920      	cbnz	r0, 8003670 <d_print_comp_inner+0xc50>
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	7811      	ldrb	r1, [r2, #0]
 800366a:	2903      	cmp	r1, #3
 800366c:	f001 8202 	beq.w	8004a74 <d_print_comp_inner+0x2054>
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	2111      	movs	r1, #17
 8003674:	4620      	mov	r0, r4
 8003676:	f002 fa85 	bl	8005b84 <d_print_subexpr>
 800367a:	68f5      	ldr	r5, [r6, #12]
 800367c:	4948      	ldr	r1, [pc, #288]	; (80037a0 <d_print_comp_inner+0xd80>)
 800367e:	68eb      	ldr	r3, [r5, #12]
 8003680:	681f      	ldr	r7, [r3, #0]
 8003682:	4638      	mov	r0, r7
 8003684:	f002 fdd4 	bl	8006230 <strcmp>
 8003688:	2800      	cmp	r0, #0
 800368a:	f001 81e3 	beq.w	8004a54 <d_print_comp_inner+0x2034>
 800368e:	4943      	ldr	r1, [pc, #268]	; (800379c <d_print_comp_inner+0xd7c>)
 8003690:	4638      	mov	r0, r7
 8003692:	f002 fdcd 	bl	8006230 <strcmp>
 8003696:	2800      	cmp	r0, #0
 8003698:	f041 81fa 	bne.w	8004a90 <d_print_comp_inner+0x2070>
 800369c:	6933      	ldr	r3, [r6, #16]
 800369e:	2111      	movs	r1, #17
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	4620      	mov	r0, r4
 80036a4:	f002 fa6e 	bl	8005b84 <d_print_subexpr>
 80036a8:	68f3      	ldr	r3, [r6, #12]
 80036aa:	781a      	ldrb	r2, [r3, #0]
 80036ac:	2a32      	cmp	r2, #50	; 0x32
 80036ae:	f47f aa27 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	2a01      	cmp	r2, #1
 80036b8:	f47f aa22 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b3e      	cmp	r3, #62	; 0x3e
 80036c2:	f47f aa1d 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 80036c6:	2129      	movs	r1, #41	; 0x29
 80036c8:	f7ff bb1e 	b.w	8002d08 <d_print_comp_inner+0x2e8>
 80036cc:	e9d2 7503 	ldrd	r7, r5, [r2, #12]
 80036d0:	783b      	ldrb	r3, [r7, #0]
 80036d2:	2b32      	cmp	r3, #50	; 0x32
 80036d4:	f000 86b1 	beq.w	800443a <d_print_comp_inner+0x1a1a>
 80036d8:	2b34      	cmp	r3, #52	; 0x34
 80036da:	f041 820f 	bne.w	8004afc <d_print_comp_inner+0x20dc>
 80036de:	2128      	movs	r1, #40	; 0x28
 80036e0:	f7fc ff64 	bl	80005ac <d_append_char>
 80036e4:	4620      	mov	r0, r4
 80036e6:	2111      	movs	r1, #17
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	f001 fa15 	bl	8004b18 <d_print_comp>
 80036ee:	2129      	movs	r1, #41	; 0x29
 80036f0:	4620      	mov	r0, r4
 80036f2:	f7fc ff5b 	bl	80005ac <d_append_char>
 80036f6:	462a      	mov	r2, r5
 80036f8:	2111      	movs	r1, #17
 80036fa:	4620      	mov	r0, r4
 80036fc:	b015      	add	sp, #84	; 0x54
 80036fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003702:	f002 ba3f 	b.w	8005b84 <d_print_subexpr>
 8003706:	68d2      	ldr	r2, [r2, #12]
 8003708:	2111      	movs	r1, #17
 800370a:	4620      	mov	r0, r4
 800370c:	b015      	add	sp, #84	; 0x54
 800370e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003712:	f002 b83b 	b.w	800578c <d_print_expr_op>
 8003716:	f9b2 3012 	ldrsh.w	r3, [r2, #18]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f040 871b 	bne.w	8004556 <d_print_comp_inner+0x1b36>
 8003720:	68f2      	ldr	r2, [r6, #12]
 8003722:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <d_print_comp_inner+0xd84>)
 8003724:	68d1      	ldr	r1, [r2, #12]
 8003726:	4299      	cmp	r1, r3
 8003728:	d00f      	beq.n	800374a <d_print_comp_inner+0xd2a>
 800372a:	2111      	movs	r1, #17
 800372c:	4620      	mov	r0, r4
 800372e:	f001 f9f3 	bl	8004b18 <d_print_comp>
 8003732:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003736:	29ff      	cmp	r1, #255	; 0xff
 8003738:	f001 80c0 	beq.w	80048bc <d_print_comp_inner+0x1e9c>
 800373c:	2320      	movs	r3, #32
 800373e:	1c4a      	adds	r2, r1, #1
 8003740:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003744:	5463      	strb	r3, [r4, r1]
 8003746:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800374a:	f9b6 8010 	ldrsh.w	r8, [r6, #16]
 800374e:	f1b8 0f00 	cmp.w	r8, #0
 8003752:	f000 8540 	beq.w	80041d6 <d_print_comp_inner+0x17b6>
 8003756:	4914      	ldr	r1, [pc, #80]	; (80037a8 <d_print_comp_inner+0xd88>)
 8003758:	e5c1      	b.n	80032de <d_print_comp_inner+0x8be>
 800375a:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 800375e:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8003762:	9307      	str	r3, [sp, #28]
 8003764:	f10d 0810 	add.w	r8, sp, #16
 8003768:	2300      	movs	r3, #0
 800376a:	46e1      	mov	r9, ip
 800376c:	f8cd c010 	str.w	ip, [sp, #16]
 8003770:	f8c0 8114 	str.w	r8, [r0, #276]	; 0x114
 8003774:	9205      	str	r2, [sp, #20]
 8003776:	9306      	str	r3, [sp, #24]
 8003778:	f1bc 0f00 	cmp.w	ip, #0
 800377c:	f001 813f 	beq.w	80049fe <d_print_comp_inner+0x1fde>
 8003780:	2701      	movs	r7, #1
 8003782:	4665      	mov	r5, ip
 8003784:	46be      	mov	lr, r7
 8003786:	4694      	mov	ip, r2
 8003788:	4646      	mov	r6, r8
 800378a:	e028      	b.n	80037de <d_print_comp_inner+0xdbe>
 800378c:	08022260 	.word	0x08022260
 8003790:	080222c0 	.word	0x080222c0
 8003794:	080222a0 	.word	0x080222a0
 8003798:	08022280 	.word	0x08022280
 800379c:	0802221c 	.word	0x0802221c
 80037a0:	08022220 	.word	0x08022220
 80037a4:	08020e88 	.word	0x08020e88
 80037a8:	080221ec 	.word	0x080221ec
 80037ac:	68ab      	ldr	r3, [r5, #8]
 80037ae:	b9a3      	cbnz	r3, 80037da <d_print_comp_inner+0xdba>
 80037b0:	2f03      	cmp	r7, #3
 80037b2:	f63f a9a2 	bhi.w	8002afa <d_print_comp_inner+0xda>
 80037b6:	ab14      	add	r3, sp, #80	; 0x50
 80037b8:	eb03 1b07 	add.w	fp, r3, r7, lsl #4
 80037bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80037c0:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
 80037c4:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 80037c8:	f84b 6c40 	str.w	r6, [fp, #-64]
 80037cc:	eb08 1607 	add.w	r6, r8, r7, lsl #4
 80037d0:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
 80037d4:	3701      	adds	r7, #1
 80037d6:	f8c5 e008 	str.w	lr, [r5, #8]
 80037da:	682d      	ldr	r5, [r5, #0]
 80037dc:	b125      	cbz	r5, 80037e8 <d_print_comp_inner+0xdc8>
 80037de:	686b      	ldr	r3, [r5, #4]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	3b19      	subs	r3, #25
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d9e1      	bls.n	80037ac <d_print_comp_inner+0xd8c>
 80037e8:	f8dc 2010 	ldr.w	r2, [ip, #16]
 80037ec:	2111      	movs	r1, #17
 80037ee:	4620      	mov	r0, r4
 80037f0:	4666      	mov	r6, ip
 80037f2:	f001 f991 	bl	8004b18 <d_print_comp>
 80037f6:	9b06      	ldr	r3, [sp, #24]
 80037f8:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f47f a97f 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 8003802:	2f01      	cmp	r7, #1
 8003804:	d00c      	beq.n	8003820 <d_print_comp_inner+0xe00>
 8003806:	eb08 1807 	add.w	r8, r8, r7, lsl #4
 800380a:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 800380e:	3f01      	subs	r7, #1
 8003810:	2111      	movs	r1, #17
 8003812:	4620      	mov	r0, r4
 8003814:	f001 f9ae 	bl	8004b74 <d_print_mod>
 8003818:	2f01      	cmp	r7, #1
 800381a:	f1a8 0810 	sub.w	r8, r8, #16
 800381e:	d1f4      	bne.n	800380a <d_print_comp_inner+0xdea>
 8003820:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003824:	4632      	mov	r2, r6
 8003826:	2111      	movs	r1, #17
 8003828:	4620      	mov	r0, r4
 800382a:	f001 fecb 	bl	80055c4 <d_print_array_type>
 800382e:	f7ff b967 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8003832:	4fc6      	ldr	r7, [pc, #792]	; (8003b4c <d_print_comp_inner+0x112c>)
 8003834:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003838:	f107 0919 	add.w	r9, r7, #25
 800383c:	2563      	movs	r5, #99	; 0x63
 800383e:	f04f 0800 	mov.w	r8, #0
 8003842:	e00b      	b.n	800385c <d_print_comp_inner+0xe3c>
 8003844:	460b      	mov	r3, r1
 8003846:	3101      	adds	r1, #1
 8003848:	45b9      	cmp	r9, r7
 800384a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800384e:	54e5      	strb	r5, [r4, r3]
 8003850:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003854:	f43f a977 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003858:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 800385c:	29ff      	cmp	r1, #255	; 0xff
 800385e:	d1f1      	bne.n	8003844 <d_print_comp_inner+0xe24>
 8003860:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003864:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003868:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800386c:	4620      	mov	r0, r4
 800386e:	4798      	blx	r3
 8003870:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003874:	3301      	adds	r3, #1
 8003876:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800387a:	2101      	movs	r1, #1
 800387c:	2300      	movs	r3, #0
 800387e:	e7e3      	b.n	8003848 <d_print_comp_inner+0xe28>
 8003880:	4fb3      	ldr	r7, [pc, #716]	; (8003b50 <d_print_comp_inner+0x1130>)
 8003882:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003886:	f107 0910 	add.w	r9, r7, #16
 800388a:	2576      	movs	r5, #118	; 0x76
 800388c:	f04f 0800 	mov.w	r8, #0
 8003890:	e00b      	b.n	80038aa <d_print_comp_inner+0xe8a>
 8003892:	460b      	mov	r3, r1
 8003894:	3101      	adds	r1, #1
 8003896:	45b9      	cmp	r9, r7
 8003898:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800389c:	54e5      	strb	r5, [r4, r3]
 800389e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80038a2:	f43f a950 	beq.w	8002b46 <d_print_comp_inner+0x126>
 80038a6:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80038aa:	29ff      	cmp	r1, #255	; 0xff
 80038ac:	d1f1      	bne.n	8003892 <d_print_comp_inner+0xe72>
 80038ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80038b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80038b6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80038ba:	4620      	mov	r0, r4
 80038bc:	4798      	blx	r3
 80038be:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80038c2:	3301      	adds	r3, #1
 80038c4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80038c8:	2101      	movs	r1, #1
 80038ca:	2300      	movs	r3, #0
 80038cc:	e7e3      	b.n	8003896 <d_print_comp_inner+0xe76>
 80038ce:	4fa1      	ldr	r7, [pc, #644]	; (8003b54 <d_print_comp_inner+0x1134>)
 80038d0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80038d4:	f107 0914 	add.w	r9, r7, #20
 80038d8:	256e      	movs	r5, #110	; 0x6e
 80038da:	f04f 0800 	mov.w	r8, #0
 80038de:	e00b      	b.n	80038f8 <d_print_comp_inner+0xed8>
 80038e0:	460b      	mov	r3, r1
 80038e2:	3101      	adds	r1, #1
 80038e4:	45b9      	cmp	r9, r7
 80038e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80038ea:	54e5      	strb	r5, [r4, r3]
 80038ec:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80038f0:	f43f a929 	beq.w	8002b46 <d_print_comp_inner+0x126>
 80038f4:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80038f8:	29ff      	cmp	r1, #255	; 0xff
 80038fa:	d1f1      	bne.n	80038e0 <d_print_comp_inner+0xec0>
 80038fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003900:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003904:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003908:	4620      	mov	r0, r4
 800390a:	4798      	blx	r3
 800390c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003910:	3301      	adds	r3, #1
 8003912:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003916:	2101      	movs	r1, #1
 8003918:	2300      	movs	r3, #0
 800391a:	e7e3      	b.n	80038e4 <d_print_comp_inner+0xec4>
 800391c:	4f8e      	ldr	r7, [pc, #568]	; (8003b58 <d_print_comp_inner+0x1138>)
 800391e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003922:	f107 0918 	add.w	r9, r7, #24
 8003926:	2554      	movs	r5, #84	; 0x54
 8003928:	f04f 0800 	mov.w	r8, #0
 800392c:	e00b      	b.n	8003946 <d_print_comp_inner+0xf26>
 800392e:	460b      	mov	r3, r1
 8003930:	3101      	adds	r1, #1
 8003932:	45b9      	cmp	r9, r7
 8003934:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003938:	54e5      	strb	r5, [r4, r3]
 800393a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800393e:	f43f a902 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003942:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003946:	29ff      	cmp	r1, #255	; 0xff
 8003948:	d1f1      	bne.n	800392e <d_print_comp_inner+0xf0e>
 800394a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800394e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003952:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003956:	4620      	mov	r0, r4
 8003958:	4798      	blx	r3
 800395a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800395e:	3301      	adds	r3, #1
 8003960:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003964:	2101      	movs	r1, #1
 8003966:	2300      	movs	r3, #0
 8003968:	e7e3      	b.n	8003932 <d_print_comp_inner+0xf12>
 800396a:	4f7c      	ldr	r7, [pc, #496]	; (8003b5c <d_print_comp_inner+0x113c>)
 800396c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003970:	f107 0915 	add.w	r9, r7, #21
 8003974:	2554      	movs	r5, #84	; 0x54
 8003976:	f04f 0800 	mov.w	r8, #0
 800397a:	e00b      	b.n	8003994 <d_print_comp_inner+0xf74>
 800397c:	460b      	mov	r3, r1
 800397e:	3101      	adds	r1, #1
 8003980:	45b9      	cmp	r9, r7
 8003982:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003986:	54e5      	strb	r5, [r4, r3]
 8003988:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800398c:	f43f a8db 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003990:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003994:	29ff      	cmp	r1, #255	; 0xff
 8003996:	d1f1      	bne.n	800397c <d_print_comp_inner+0xf5c>
 8003998:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800399c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039a0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80039a4:	4620      	mov	r0, r4
 80039a6:	4798      	blx	r3
 80039a8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80039ac:	3301      	adds	r3, #1
 80039ae:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80039b2:	2101      	movs	r1, #1
 80039b4:	2300      	movs	r3, #0
 80039b6:	e7e3      	b.n	8003980 <d_print_comp_inner+0xf60>
 80039b8:	4f69      	ldr	r7, [pc, #420]	; (8003b60 <d_print_comp_inner+0x1140>)
 80039ba:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80039be:	f107 0912 	add.w	r9, r7, #18
 80039c2:	2567      	movs	r5, #103	; 0x67
 80039c4:	f04f 0800 	mov.w	r8, #0
 80039c8:	e00b      	b.n	80039e2 <d_print_comp_inner+0xfc2>
 80039ca:	460b      	mov	r3, r1
 80039cc:	3101      	adds	r1, #1
 80039ce:	45b9      	cmp	r9, r7
 80039d0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80039d4:	54e5      	strb	r5, [r4, r3]
 80039d6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80039da:	f43f a8b4 	beq.w	8002b46 <d_print_comp_inner+0x126>
 80039de:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80039e2:	29ff      	cmp	r1, #255	; 0xff
 80039e4:	d1f1      	bne.n	80039ca <d_print_comp_inner+0xfaa>
 80039e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039ee:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80039f2:	4620      	mov	r0, r4
 80039f4:	4798      	blx	r3
 80039f6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80039fa:	3301      	adds	r3, #1
 80039fc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003a00:	2101      	movs	r1, #1
 8003a02:	2300      	movs	r3, #0
 8003a04:	e7e3      	b.n	80039ce <d_print_comp_inner+0xfae>
 8003a06:	4f57      	ldr	r7, [pc, #348]	; (8003b64 <d_print_comp_inner+0x1144>)
 8003a08:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003a0c:	f107 090e 	add.w	r9, r7, #14
 8003a10:	256a      	movs	r5, #106	; 0x6a
 8003a12:	f04f 0800 	mov.w	r8, #0
 8003a16:	e00b      	b.n	8003a30 <d_print_comp_inner+0x1010>
 8003a18:	460b      	mov	r3, r1
 8003a1a:	3101      	adds	r1, #1
 8003a1c:	45b9      	cmp	r9, r7
 8003a1e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a22:	54e5      	strb	r5, [r4, r3]
 8003a24:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003a28:	f43f a88d 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003a2c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003a30:	29ff      	cmp	r1, #255	; 0xff
 8003a32:	d1f1      	bne.n	8003a18 <d_print_comp_inner+0xff8>
 8003a34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a38:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a3c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003a40:	4620      	mov	r0, r4
 8003a42:	4798      	blx	r3
 8003a44:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003a4e:	2101      	movs	r1, #1
 8003a50:	2300      	movs	r3, #0
 8003a52:	e7e3      	b.n	8003a1c <d_print_comp_inner+0xffc>
 8003a54:	4f44      	ldr	r7, [pc, #272]	; (8003b68 <d_print_comp_inner+0x1148>)
 8003a56:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003a5a:	f107 0908 	add.w	r9, r7, #8
 8003a5e:	256f      	movs	r5, #111	; 0x6f
 8003a60:	f04f 0800 	mov.w	r8, #0
 8003a64:	e00b      	b.n	8003a7e <d_print_comp_inner+0x105e>
 8003a66:	460b      	mov	r3, r1
 8003a68:	3101      	adds	r1, #1
 8003a6a:	45b9      	cmp	r9, r7
 8003a6c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a70:	54e5      	strb	r5, [r4, r3]
 8003a72:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003a76:	f000 8295 	beq.w	8003fa4 <d_print_comp_inner+0x1584>
 8003a7a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003a7e:	29ff      	cmp	r1, #255	; 0xff
 8003a80:	d1f1      	bne.n	8003a66 <d_print_comp_inner+0x1046>
 8003a82:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a86:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a8a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003a8e:	4620      	mov	r0, r4
 8003a90:	4798      	blx	r3
 8003a92:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003a96:	3301      	adds	r3, #1
 8003a98:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	e7e3      	b.n	8003a6a <d_print_comp_inner+0x104a>
 8003aa2:	4f31      	ldr	r7, [pc, #196]	; (8003b68 <d_print_comp_inner+0x1148>)
 8003aa4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003aa8:	f107 0908 	add.w	r9, r7, #8
 8003aac:	256f      	movs	r5, #111	; 0x6f
 8003aae:	f04f 0800 	mov.w	r8, #0
 8003ab2:	e00b      	b.n	8003acc <d_print_comp_inner+0x10ac>
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	3101      	adds	r1, #1
 8003ab8:	45b9      	cmp	r9, r7
 8003aba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003abe:	54e5      	strb	r5, [r4, r3]
 8003ac0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003ac4:	f43f a853 	beq.w	8002b6e <d_print_comp_inner+0x14e>
 8003ac8:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003acc:	29ff      	cmp	r1, #255	; 0xff
 8003ace:	d1f1      	bne.n	8003ab4 <d_print_comp_inner+0x1094>
 8003ad0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ad4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003ad8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003adc:	4620      	mov	r0, r4
 8003ade:	4798      	blx	r3
 8003ae0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003aea:	2101      	movs	r1, #1
 8003aec:	2300      	movs	r3, #0
 8003aee:	e7e3      	b.n	8003ab8 <d_print_comp_inner+0x1098>
 8003af0:	68d2      	ldr	r2, [r2, #12]
 8003af2:	2111      	movs	r1, #17
 8003af4:	f001 f810 	bl	8004b18 <d_print_comp>
 8003af8:	f7ff b839 	b.w	8002b6e <d_print_comp_inner+0x14e>
 8003afc:	4f1b      	ldr	r7, [pc, #108]	; (8003b6c <d_print_comp_inner+0x114c>)
 8003afe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003b02:	f107 090d 	add.w	r9, r7, #13
 8003b06:	256a      	movs	r5, #106	; 0x6a
 8003b08:	f04f 0800 	mov.w	r8, #0
 8003b0c:	e00b      	b.n	8003b26 <d_print_comp_inner+0x1106>
 8003b0e:	460b      	mov	r3, r1
 8003b10:	3101      	adds	r1, #1
 8003b12:	45b9      	cmp	r9, r7
 8003b14:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b18:	54e5      	strb	r5, [r4, r3]
 8003b1a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003b1e:	f43f a812 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003b22:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003b26:	29ff      	cmp	r1, #255	; 0xff
 8003b28:	d1f1      	bne.n	8003b0e <d_print_comp_inner+0x10ee>
 8003b2a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b32:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003b36:	4620      	mov	r0, r4
 8003b38:	4798      	blx	r3
 8003b3a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003b44:	2101      	movs	r1, #1
 8003b46:	2300      	movs	r3, #0
 8003b48:	e7e3      	b.n	8003b12 <d_print_comp_inner+0x10f2>
 8003b4a:	bf00      	nop
 8003b4c:	08022128 	.word	0x08022128
 8003b50:	08022114 	.word	0x08022114
 8003b54:	08022110 	.word	0x08022110
 8003b58:	08022180 	.word	0x08022180
 8003b5c:	08022168 	.word	0x08022168
 8003b60:	08022154 	.word	0x08022154
 8003b64:	08022144 	.word	0x08022144
 8003b68:	0802220c 	.word	0x0802220c
 8003b6c:	08022250 	.word	0x08022250
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
 8003b76:	f8d0 7148 	ldr.w	r7, [r0, #328]	; 0x148
 8003b7a:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
 8003b7e:	2111      	movs	r1, #17
 8003b80:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8003b84:	68d2      	ldr	r2, [r2, #12]
 8003b86:	f000 ffc7 	bl	8004b18 <d_print_comp>
 8003b8a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003b8e:	2b3c      	cmp	r3, #60	; 0x3c
 8003b90:	f000 857c 	beq.w	800468c <d_print_comp_inner+0x1c6c>
 8003b94:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003b98:	29ff      	cmp	r1, #255	; 0xff
 8003b9a:	f000 8567 	beq.w	800466c <d_print_comp_inner+0x1c4c>
 8003b9e:	1c4b      	adds	r3, r1, #1
 8003ba0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ba4:	233c      	movs	r3, #60	; 0x3c
 8003ba6:	5463      	strb	r3, [r4, r1]
 8003ba8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003bac:	6932      	ldr	r2, [r6, #16]
 8003bae:	2111      	movs	r1, #17
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f000 ffb1 	bl	8004b18 <d_print_comp>
 8003bb6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003bba:	2b3e      	cmp	r3, #62	; 0x3e
 8003bbc:	f000 8550 	beq.w	8004660 <d_print_comp_inner+0x1c40>
 8003bc0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003bc4:	29ff      	cmp	r1, #255	; 0xff
 8003bc6:	f000 853b 	beq.w	8004640 <d_print_comp_inner+0x1c20>
 8003bca:	1c4b      	adds	r3, r1, #1
 8003bcc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003bd0:	233e      	movs	r3, #62	; 0x3e
 8003bd2:	5463      	strb	r3, [r4, r1]
 8003bd4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003bd8:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8003bdc:	f8c4 7148 	str.w	r7, [r4, #328]	; 0x148
 8003be0:	f7fe bf8e 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8003be4:	4fc4      	ldr	r7, [pc, #784]	; (8003ef8 <d_print_comp_inner+0x14d8>)
 8003be6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003bea:	f107 0907 	add.w	r9, r7, #7
 8003bee:	2556      	movs	r5, #86	; 0x56
 8003bf0:	f04f 0800 	mov.w	r8, #0
 8003bf4:	e00b      	b.n	8003c0e <d_print_comp_inner+0x11ee>
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	3101      	adds	r1, #1
 8003bfa:	454f      	cmp	r7, r9
 8003bfc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003c00:	54e5      	strb	r5, [r4, r3]
 8003c02:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003c06:	f43e af9e 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003c0a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003c0e:	29ff      	cmp	r1, #255	; 0xff
 8003c10:	d1f1      	bne.n	8003bf6 <d_print_comp_inner+0x11d6>
 8003c12:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c16:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c1a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003c1e:	4620      	mov	r0, r4
 8003c20:	4798      	blx	r3
 8003c22:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003c26:	3301      	adds	r3, #1
 8003c28:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e7e3      	b.n	8003bfa <d_print_comp_inner+0x11da>
 8003c32:	4fb2      	ldr	r7, [pc, #712]	; (8003efc <d_print_comp_inner+0x14dc>)
 8003c34:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003c38:	f107 090a 	add.w	r9, r7, #10
 8003c3c:	2576      	movs	r5, #118	; 0x76
 8003c3e:	f04f 0800 	mov.w	r8, #0
 8003c42:	e00b      	b.n	8003c5c <d_print_comp_inner+0x123c>
 8003c44:	460b      	mov	r3, r1
 8003c46:	3101      	adds	r1, #1
 8003c48:	45b9      	cmp	r9, r7
 8003c4a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003c4e:	54e5      	strb	r5, [r4, r3]
 8003c50:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003c54:	f43e af77 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003c58:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003c5c:	29ff      	cmp	r1, #255	; 0xff
 8003c5e:	d1f1      	bne.n	8003c44 <d_print_comp_inner+0x1224>
 8003c60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c64:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c68:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	4798      	blx	r3
 8003c70:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003c74:	3301      	adds	r3, #1
 8003c76:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e7e3      	b.n	8003c48 <d_print_comp_inner+0x1228>
 8003c80:	6913      	ldr	r3, [r2, #16]
 8003c82:	781a      	ldrb	r2, [r3, #0]
 8003c84:	2a3b      	cmp	r2, #59	; 0x3b
 8003c86:	f47e af38 	bne.w	8002afa <d_print_comp_inner+0xda>
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b3c      	cmp	r3, #60	; 0x3c
 8003c90:	f47e af33 	bne.w	8002afa <d_print_comp_inner+0xda>
 8003c94:	4632      	mov	r2, r6
 8003c96:	2111      	movs	r1, #17
 8003c98:	f001 ffe2 	bl	8005c60 <d_maybe_print_fold_expression>
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	f47e af2f 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 8003ca2:	4632      	mov	r2, r6
 8003ca4:	2111      	movs	r1, #17
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f002 f904 	bl	8005eb4 <d_maybe_print_designated_init>
 8003cac:	2800      	cmp	r0, #0
 8003cae:	f47e af27 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 8003cb2:	e9d6 8303 	ldrd	r8, r3, [r6, #12]
 8003cb6:	e9d3 6303 	ldrd	r6, r3, [r3, #12]
 8003cba:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8003cbe:	4990      	ldr	r1, [pc, #576]	; (8003f00 <d_print_comp_inner+0x14e0>)
 8003cc0:	6810      	ldr	r0, [r2, #0]
 8003cc2:	e9d3 7503 	ldrd	r7, r5, [r3, #12]
 8003cc6:	f002 fab3 	bl	8006230 <strcmp>
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	f040 86e7 	bne.w	8004a9e <d_print_comp_inner+0x207e>
 8003cd0:	4632      	mov	r2, r6
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	2111      	movs	r1, #17
 8003cd6:	f001 ff55 	bl	8005b84 <d_print_subexpr>
 8003cda:	4642      	mov	r2, r8
 8003cdc:	4620      	mov	r0, r4
 8003cde:	2111      	movs	r1, #17
 8003ce0:	f001 fd54 	bl	800578c <d_print_expr_op>
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	463a      	mov	r2, r7
 8003ce8:	2111      	movs	r1, #17
 8003cea:	f001 ff4b 	bl	8005b84 <d_print_subexpr>
 8003cee:	4985      	ldr	r1, [pc, #532]	; (8003f04 <d_print_comp_inner+0x14e4>)
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f7fc fce3 	bl	80006bc <d_append_string>
 8003cf6:	e4fe      	b.n	80036f6 <d_print_comp_inner+0xcd6>
 8003cf8:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f43e aeff 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8003d02:	442b      	add	r3, r5
 8003d04:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003d08:	3d01      	subs	r5, #1
 8003d0a:	1e5f      	subs	r7, r3, #1
 8003d0c:	f04f 0800 	mov.w	r8, #0
 8003d10:	e009      	b.n	8003d26 <d_print_comp_inner+0x1306>
 8003d12:	460b      	mov	r3, r1
 8003d14:	3101      	adds	r1, #1
 8003d16:	42af      	cmp	r7, r5
 8003d18:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003d1c:	54e6      	strb	r6, [r4, r3]
 8003d1e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003d22:	f43e aeed 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8003d26:	29ff      	cmp	r1, #255	; 0xff
 8003d28:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003d2c:	d1f1      	bne.n	8003d12 <d_print_comp_inner+0x12f2>
 8003d2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d32:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d36:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	4798      	blx	r3
 8003d3e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003d42:	3301      	adds	r3, #1
 8003d44:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003d48:	2101      	movs	r1, #1
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e7e3      	b.n	8003d16 <d_print_comp_inner+0x12f6>
 8003d4e:	68d2      	ldr	r2, [r2, #12]
 8003d50:	e9d2 5300 	ldrd	r5, r3, [r2]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f43e aed3 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8003d5a:	442b      	add	r3, r5
 8003d5c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003d60:	3d01      	subs	r5, #1
 8003d62:	1e5f      	subs	r7, r3, #1
 8003d64:	f04f 0800 	mov.w	r8, #0
 8003d68:	e009      	b.n	8003d7e <d_print_comp_inner+0x135e>
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	3101      	adds	r1, #1
 8003d6e:	42af      	cmp	r7, r5
 8003d70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003d74:	54e6      	strb	r6, [r4, r3]
 8003d76:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003d7a:	f43e aec1 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8003d7e:	29ff      	cmp	r1, #255	; 0xff
 8003d80:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003d84:	d1f1      	bne.n	8003d6a <d_print_comp_inner+0x134a>
 8003d86:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d8a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d8e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003d92:	4620      	mov	r0, r4
 8003d94:	4798      	blx	r3
 8003d96:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003da0:	2101      	movs	r1, #1
 8003da2:	2300      	movs	r3, #0
 8003da4:	e7e3      	b.n	8003d6e <d_print_comp_inner+0x134e>
 8003da6:	4958      	ldr	r1, [pc, #352]	; (8003f08 <d_print_comp_inner+0x14e8>)
 8003da8:	4620      	mov	r0, r4
 8003daa:	f7fc fc87 	bl	80006bc <d_append_string>
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4956      	ldr	r1, [pc, #344]	; (8003f0c <d_print_comp_inner+0x14ec>)
 8003db2:	3201      	adds	r2, #1
 8003db4:	a804      	add	r0, sp, #16
 8003db6:	f01a f873 	bl	801dea0 <siprintf>
 8003dba:	a804      	add	r0, sp, #16
 8003dbc:	f002 fa30 	bl	8006220 <strlen>
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	f000 83fb 	beq.w	80045bc <d_print_comp_inner+0x1b9c>
 8003dc6:	ad04      	add	r5, sp, #16
 8003dc8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003dcc:	eb05 0900 	add.w	r9, r5, r0
 8003dd0:	f04f 0800 	mov.w	r8, #0
 8003dd4:	e009      	b.n	8003dea <d_print_comp_inner+0x13ca>
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	3101      	adds	r1, #1
 8003dda:	45a9      	cmp	r9, r5
 8003ddc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003de0:	54e6      	strb	r6, [r4, r3]
 8003de2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003de6:	f000 83e9 	beq.w	80045bc <d_print_comp_inner+0x1b9c>
 8003dea:	29ff      	cmp	r1, #255	; 0xff
 8003dec:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003df0:	d1f1      	bne.n	8003dd6 <d_print_comp_inner+0x13b6>
 8003df2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003df6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003dfa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003dfe:	4620      	mov	r0, r4
 8003e00:	4798      	blx	r3
 8003e02:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003e06:	3301      	adds	r3, #1
 8003e08:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e7e3      	b.n	8003dda <d_print_comp_inner+0x13ba>
 8003e12:	2111      	movs	r1, #17
 8003e14:	6932      	ldr	r2, [r6, #16]
 8003e16:	4620      	mov	r0, r4
 8003e18:	f000 fe7e 	bl	8004b18 <d_print_comp>
 8003e1c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003e20:	29ff      	cmp	r1, #255	; 0xff
 8003e22:	f000 8299 	beq.w	8004358 <d_print_comp_inner+0x1938>
 8003e26:	1c4a      	adds	r2, r1, #1
 8003e28:	235d      	movs	r3, #93	; 0x5d
 8003e2a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003e2e:	5463      	strb	r3, [r4, r1]
 8003e30:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003e34:	f7fe be64 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8003e38:	2801      	cmp	r0, #1
 8003e3a:	f240 8196 	bls.w	800416a <d_print_comp_inner+0x174a>
 8003e3e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003e42:	f7ff bb30 	b.w	80034a6 <d_print_comp_inner+0xa86>
 8003e46:	68f2      	ldr	r2, [r6, #12]
 8003e48:	4930      	ldr	r1, [pc, #192]	; (8003f0c <d_print_comp_inner+0x14ec>)
 8003e4a:	3201      	adds	r2, #1
 8003e4c:	a804      	add	r0, sp, #16
 8003e4e:	f01a f827 	bl	801dea0 <siprintf>
 8003e52:	a804      	add	r0, sp, #16
 8003e54:	f002 f9e4 	bl	8006220 <strlen>
 8003e58:	b318      	cbz	r0, 8003ea2 <d_print_comp_inner+0x1482>
 8003e5a:	ad04      	add	r5, sp, #16
 8003e5c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003e60:	182f      	adds	r7, r5, r0
 8003e62:	f04f 0800 	mov.w	r8, #0
 8003e66:	e008      	b.n	8003e7a <d_print_comp_inner+0x145a>
 8003e68:	460b      	mov	r3, r1
 8003e6a:	3101      	adds	r1, #1
 8003e6c:	42af      	cmp	r7, r5
 8003e6e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003e72:	54e6      	strb	r6, [r4, r3]
 8003e74:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003e78:	d015      	beq.n	8003ea6 <d_print_comp_inner+0x1486>
 8003e7a:	29ff      	cmp	r1, #255	; 0xff
 8003e7c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003e80:	d1f2      	bne.n	8003e68 <d_print_comp_inner+0x1448>
 8003e82:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e86:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e8a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003e8e:	4620      	mov	r0, r4
 8003e90:	4798      	blx	r3
 8003e92:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003e96:	3301      	adds	r3, #1
 8003e98:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e7e4      	b.n	8003e6c <d_print_comp_inner+0x144c>
 8003ea2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003ea6:	29ff      	cmp	r1, #255	; 0xff
 8003ea8:	f47f a91a 	bne.w	80030e0 <d_print_comp_inner+0x6c0>
 8003eac:	2500      	movs	r5, #0
 8003eae:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8003eb2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	4798      	blx	r3
 8003eba:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	f7ff b90b 	b.w	80030e2 <d_print_comp_inner+0x6c2>
 8003ecc:	687d      	ldr	r5, [r7, #4]
 8003ece:	782b      	ldrb	r3, [r5, #0]
 8003ed0:	3b61      	subs	r3, #97	; 0x61
 8003ed2:	2b19      	cmp	r3, #25
 8003ed4:	f240 832d 	bls.w	8004532 <d_print_comp_inner+0x1b12>
 8003ed8:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8003edc:	5deb      	ldrb	r3, [r5, r7]
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	bf18      	it	ne
 8003ee2:	4647      	movne	r7, r8
 8003ee4:	2f00      	cmp	r7, #0
 8003ee6:	f43e ae0b 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8003eea:	3d01      	subs	r5, #1
 8003eec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003ef0:	442f      	add	r7, r5
 8003ef2:	f04f 0800 	mov.w	r8, #0
 8003ef6:	e015      	b.n	8003f24 <d_print_comp_inner+0x1504>
 8003ef8:	080220a8 	.word	0x080220a8
 8003efc:	0802209c 	.word	0x0802209c
 8003f00:	08022224 	.word	0x08022224
 8003f04:	08022228 	.word	0x08022228
 8003f08:	08022060 	.word	0x08022060
 8003f0c:	08021fec 	.word	0x08021fec
 8003f10:	460b      	mov	r3, r1
 8003f12:	3101      	adds	r1, #1
 8003f14:	42af      	cmp	r7, r5
 8003f16:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003f1a:	54e6      	strb	r6, [r4, r3]
 8003f1c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003f20:	f43e adee 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8003f24:	29ff      	cmp	r1, #255	; 0xff
 8003f26:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003f2a:	d1f1      	bne.n	8003f10 <d_print_comp_inner+0x14f0>
 8003f2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f34:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003f38:	4620      	mov	r0, r4
 8003f3a:	4798      	blx	r3
 8003f3c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003f40:	3301      	adds	r3, #1
 8003f42:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003f46:	2101      	movs	r1, #1
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e7e3      	b.n	8003f14 <d_print_comp_inner+0x14f4>
 8003f4c:	4fcc      	ldr	r7, [pc, #816]	; (8004280 <d_print_comp_inner+0x1860>)
 8003f4e:	6932      	ldr	r2, [r6, #16]
 8003f50:	2111      	movs	r1, #17
 8003f52:	4620      	mov	r0, r4
 8003f54:	f000 fde0 	bl	8004b18 <d_print_comp>
 8003f58:	f107 0904 	add.w	r9, r7, #4
 8003f5c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f60:	2520      	movs	r5, #32
 8003f62:	f04f 0800 	mov.w	r8, #0
 8003f66:	e00b      	b.n	8003f80 <d_print_comp_inner+0x1560>
 8003f68:	460b      	mov	r3, r1
 8003f6a:	3101      	adds	r1, #1
 8003f6c:	45b9      	cmp	r9, r7
 8003f6e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003f72:	54e5      	strb	r5, [r4, r3]
 8003f74:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003f78:	f43e ade5 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003f7c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003f80:	29ff      	cmp	r1, #255	; 0xff
 8003f82:	d1f1      	bne.n	8003f68 <d_print_comp_inner+0x1548>
 8003f84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f88:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f8c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003f90:	4620      	mov	r0, r4
 8003f92:	4798      	blx	r3
 8003f94:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003f98:	3301      	adds	r3, #1
 8003f9a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e7e3      	b.n	8003f6c <d_print_comp_inner+0x154c>
 8003fa4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8003fa8:	b133      	cbz	r3, 8003fb8 <d_print_comp_inner+0x1598>
 8003faa:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8003fae:	9104      	str	r1, [sp, #16]
 8003fb0:	aa04      	add	r2, sp, #16
 8003fb2:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
 8003fb6:	9305      	str	r3, [sp, #20]
 8003fb8:	68f2      	ldr	r2, [r6, #12]
 8003fba:	7813      	ldrb	r3, [r2, #0]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	f000 8207 	beq.w	80043d0 <d_print_comp_inner+0x19b0>
 8003fc2:	2111      	movs	r1, #17
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f000 fda7 	bl	8004b18 <d_print_comp>
 8003fca:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f43e ad96 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8003fd4:	9b04      	ldr	r3, [sp, #16]
 8003fd6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003fda:	f7fe bd91 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8003fde:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003fe2:	68f2      	ldr	r2, [r6, #12]
 8003fe4:	4fa7      	ldr	r7, [pc, #668]	; (8004284 <d_print_comp_inner+0x1864>)
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003fec:	2111      	movs	r1, #17
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f000 fd92 	bl	8004b18 <d_print_comp>
 8003ff4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003ff8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004002:	f107 0901 	add.w	r9, r7, #1
 8004006:	2529      	movs	r5, #41	; 0x29
 8004008:	f04f 0800 	mov.w	r8, #0
 800400c:	e00a      	b.n	8004024 <d_print_comp_inner+0x1604>
 800400e:	460b      	mov	r3, r1
 8004010:	3101      	adds	r1, #1
 8004012:	454f      	cmp	r7, r9
 8004014:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004018:	54e5      	strb	r5, [r4, r3]
 800401a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800401e:	d013      	beq.n	8004048 <d_print_comp_inner+0x1628>
 8004020:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8004024:	29ff      	cmp	r1, #255	; 0xff
 8004026:	d1f2      	bne.n	800400e <d_print_comp_inner+0x15ee>
 8004028:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800402c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004030:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004034:	4620      	mov	r0, r4
 8004036:	4798      	blx	r3
 8004038:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800403c:	3301      	adds	r3, #1
 800403e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004042:	2101      	movs	r1, #1
 8004044:	2300      	movs	r3, #0
 8004046:	e7e4      	b.n	8004012 <d_print_comp_inner+0x15f2>
 8004048:	6932      	ldr	r2, [r6, #16]
 800404a:	498f      	ldr	r1, [pc, #572]	; (8004288 <d_print_comp_inner+0x1868>)
 800404c:	3201      	adds	r2, #1
 800404e:	a804      	add	r0, sp, #16
 8004050:	f019 ff26 	bl	801dea0 <siprintf>
 8004054:	a804      	add	r0, sp, #16
 8004056:	f002 f8e3 	bl	8006220 <strlen>
 800405a:	2800      	cmp	r0, #0
 800405c:	f43f af21 	beq.w	8003ea2 <d_print_comp_inner+0x1482>
 8004060:	ad04      	add	r5, sp, #16
 8004062:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004066:	182f      	adds	r7, r5, r0
 8004068:	f04f 0800 	mov.w	r8, #0
 800406c:	e009      	b.n	8004082 <d_print_comp_inner+0x1662>
 800406e:	460b      	mov	r3, r1
 8004070:	3101      	adds	r1, #1
 8004072:	42bd      	cmp	r5, r7
 8004074:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004078:	54e6      	strb	r6, [r4, r3]
 800407a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800407e:	f43f af12 	beq.w	8003ea6 <d_print_comp_inner+0x1486>
 8004082:	29ff      	cmp	r1, #255	; 0xff
 8004084:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004088:	d1f1      	bne.n	800406e <d_print_comp_inner+0x164e>
 800408a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800408e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004092:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004096:	4620      	mov	r0, r4
 8004098:	4798      	blx	r3
 800409a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800409e:	3301      	adds	r3, #1
 80040a0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80040a4:	2101      	movs	r1, #1
 80040a6:	2300      	movs	r3, #0
 80040a8:	e7e3      	b.n	8004072 <d_print_comp_inner+0x1652>
 80040aa:	4f78      	ldr	r7, [pc, #480]	; (800428c <d_print_comp_inner+0x186c>)
 80040ac:	68f2      	ldr	r2, [r6, #12]
 80040ae:	2111      	movs	r1, #17
 80040b0:	4620      	mov	r0, r4
 80040b2:	f000 fd31 	bl	8004b18 <d_print_comp>
 80040b6:	f107 0903 	add.w	r9, r7, #3
 80040ba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80040be:	252d      	movs	r5, #45	; 0x2d
 80040c0:	f04f 0800 	mov.w	r8, #0
 80040c4:	e00b      	b.n	80040de <d_print_comp_inner+0x16be>
 80040c6:	460b      	mov	r3, r1
 80040c8:	3101      	adds	r1, #1
 80040ca:	45b9      	cmp	r9, r7
 80040cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80040d0:	54e5      	strb	r5, [r4, r3]
 80040d2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80040d6:	f43e ad4a 	beq.w	8002b6e <d_print_comp_inner+0x14e>
 80040da:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80040de:	29ff      	cmp	r1, #255	; 0xff
 80040e0:	d1f1      	bne.n	80040c6 <d_print_comp_inner+0x16a6>
 80040e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80040e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80040ea:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80040ee:	4620      	mov	r0, r4
 80040f0:	4798      	blx	r3
 80040f2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80040f6:	3301      	adds	r3, #1
 80040f8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80040fc:	2101      	movs	r1, #1
 80040fe:	2300      	movs	r3, #0
 8004100:	e7e3      	b.n	80040ca <d_print_comp_inner+0x16aa>
 8004102:	68f2      	ldr	r2, [r6, #12]
 8004104:	f7ff b902 	b.w	800330c <d_print_comp_inner+0x8ec>
 8004108:	4632      	mov	r2, r6
 800410a:	2111      	movs	r1, #17
 800410c:	4620      	mov	r0, r4
 800410e:	f000 fd31 	bl	8004b74 <d_print_mod>
 8004112:	f7fe bd10 	b.w	8002b36 <d_print_comp_inner+0x116>
 8004116:	6932      	ldr	r2, [r6, #16]
 8004118:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
 800411c:	460d      	mov	r5, r1
 800411e:	4620      	mov	r0, r4
 8004120:	2111      	movs	r1, #17
 8004122:	f000 fcf9 	bl	8004b18 <d_print_comp>
 8004126:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800412a:	42b3      	cmp	r3, r6
 800412c:	f47e ace8 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 8004130:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004134:	429d      	cmp	r5, r3
 8004136:	f47e ace3 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 800413a:	3d02      	subs	r5, #2
 800413c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8004140:	f7fe bcde 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8004144:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004148:	29ff      	cmp	r1, #255	; 0xff
 800414a:	f000 8361 	beq.w	8004810 <d_print_comp_inner+0x1df0>
 800414e:	1c4b      	adds	r3, r1, #1
 8004150:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004154:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 8004158:	5467      	strb	r7, [r4, r1]
 800415a:	4620      	mov	r0, r4
 800415c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004160:	2111      	movs	r1, #17
 8004162:	f000 fd07 	bl	8004b74 <d_print_mod>
 8004166:	f7ff b9b2 	b.w	80034ce <d_print_comp_inner+0xaae>
 800416a:	68ff      	ldr	r7, [r7, #12]
 800416c:	4652      	mov	r2, sl
 800416e:	2f00      	cmp	r7, #0
 8004170:	f000 84ae 	beq.w	8004ad0 <d_print_comp_inner+0x20b0>
 8004174:	2d04      	cmp	r5, #4
 8004176:	f103 0310 	add.w	r3, r3, #16
 800417a:	f000 81f1 	beq.w	8004560 <d_print_comp_inner+0x1b40>
 800417e:	4629      	mov	r1, r5
 8004180:	f7ff b95c 	b.w	800343c <d_print_comp_inner+0xa1c>
 8004184:	f1b8 0f00 	cmp.w	r8, #0
 8004188:	f43e acba 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 800418c:	46c1      	mov	r9, r8
 800418e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004192:	f7fe be7c 	b.w	8002e8e <d_print_comp_inner+0x46e>
 8004196:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 800419a:	68c2      	ldr	r2, [r0, #12]
 800419c:	4606      	mov	r6, r0
 800419e:	f7fe bd2a 	b.w	8002bf6 <d_print_comp_inner+0x1d6>
 80041a2:	2d07      	cmp	r5, #7
 80041a4:	f47e ad83 	bne.w	8002cae <d_print_comp_inner+0x28e>
 80041a8:	6933      	ldr	r3, [r6, #16]
 80041aa:	7819      	ldrb	r1, [r3, #0]
 80041ac:	2900      	cmp	r1, #0
 80041ae:	f47e ad7e 	bne.w	8002cae <d_print_comp_inner+0x28e>
 80041b2:	6919      	ldr	r1, [r3, #16]
 80041b4:	2901      	cmp	r1, #1
 80041b6:	f47e ad7a 	bne.w	8002cae <d_print_comp_inner+0x28e>
 80041ba:	2f3d      	cmp	r7, #61	; 0x3d
 80041bc:	f47e ad77 	bne.w	8002cae <d_print_comp_inner+0x28e>
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b30      	cmp	r3, #48	; 0x30
 80041c6:	f000 849f 	beq.w	8004b08 <d_print_comp_inner+0x20e8>
 80041ca:	2b31      	cmp	r3, #49	; 0x31
 80041cc:	f47e ad6f 	bne.w	8002cae <d_print_comp_inner+0x28e>
 80041d0:	492f      	ldr	r1, [pc, #188]	; (8004290 <d_print_comp_inner+0x1870>)
 80041d2:	f7ff b884 	b.w	80032de <d_print_comp_inner+0x8be>
 80041d6:	4e2f      	ldr	r6, [pc, #188]	; (8004294 <d_print_comp_inner+0x1874>)
 80041d8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80041dc:	1d77      	adds	r7, r6, #5
 80041de:	255f      	movs	r5, #95	; 0x5f
 80041e0:	e00b      	b.n	80041fa <d_print_comp_inner+0x17da>
 80041e2:	460b      	mov	r3, r1
 80041e4:	3101      	adds	r1, #1
 80041e6:	42b7      	cmp	r7, r6
 80041e8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80041ec:	54e5      	strb	r5, [r4, r3]
 80041ee:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80041f2:	f43e ac85 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 80041f6:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 80041fa:	29ff      	cmp	r1, #255	; 0xff
 80041fc:	d1f1      	bne.n	80041e2 <d_print_comp_inner+0x17c2>
 80041fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004202:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004206:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800420a:	4620      	mov	r0, r4
 800420c:	4798      	blx	r3
 800420e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004212:	3301      	adds	r3, #1
 8004214:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004218:	2101      	movs	r1, #1
 800421a:	2300      	movs	r3, #0
 800421c:	e7e3      	b.n	80041e6 <d_print_comp_inner+0x17c6>
 800421e:	491e      	ldr	r1, [pc, #120]	; (8004298 <d_print_comp_inner+0x1878>)
 8004220:	f7fc fa4c 	bl	80006bc <d_append_string>
 8004224:	4918      	ldr	r1, [pc, #96]	; (8004288 <d_print_comp_inner+0x1868>)
 8004226:	462a      	mov	r2, r5
 8004228:	a804      	add	r0, sp, #16
 800422a:	f019 fe39 	bl	801dea0 <siprintf>
 800422e:	a804      	add	r0, sp, #16
 8004230:	f001 fff6 	bl	8006220 <strlen>
 8004234:	b390      	cbz	r0, 800429c <d_print_comp_inner+0x187c>
 8004236:	ad04      	add	r5, sp, #16
 8004238:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800423c:	182f      	adds	r7, r5, r0
 800423e:	f04f 0800 	mov.w	r8, #0
 8004242:	e008      	b.n	8004256 <d_print_comp_inner+0x1836>
 8004244:	460b      	mov	r3, r1
 8004246:	3101      	adds	r1, #1
 8004248:	42bd      	cmp	r5, r7
 800424a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800424e:	54e6      	strb	r6, [r4, r3]
 8004250:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004254:	d024      	beq.n	80042a0 <d_print_comp_inner+0x1880>
 8004256:	29ff      	cmp	r1, #255	; 0xff
 8004258:	f815 6b01 	ldrb.w	r6, [r5], #1
 800425c:	d1f2      	bne.n	8004244 <d_print_comp_inner+0x1824>
 800425e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004262:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004266:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800426a:	4620      	mov	r0, r4
 800426c:	4798      	blx	r3
 800426e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004272:	3301      	adds	r3, #1
 8004274:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004278:	2101      	movs	r1, #1
 800427a:	2300      	movs	r3, #0
 800427c:	e7e4      	b.n	8004248 <d_print_comp_inner+0x1828>
 800427e:	bf00      	nop
 8004280:	08022194 	.word	0x08022194
 8004284:	080222cc 	.word	0x080222cc
 8004288:	08021fec 	.word	0x08021fec
 800428c:	080220d0 	.word	0x080220d0
 8004290:	08022248 	.word	0x08022248
 8004294:	080221f4 	.word	0x080221f4
 8004298:	08022278 	.word	0x08022278
 800429c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80042a0:	29ff      	cmp	r1, #255	; 0xff
 80042a2:	f000 82f5 	beq.w	8004890 <d_print_comp_inner+0x1e70>
 80042a6:	237d      	movs	r3, #125	; 0x7d
 80042a8:	1c4a      	adds	r2, r1, #1
 80042aa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80042ae:	5463      	strb	r3, [r4, r1]
 80042b0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80042b4:	f7fe bc24 	b.w	8002b00 <d_print_comp_inner+0xe0>
 80042b8:	4610      	mov	r0, r2
 80042ba:	2500      	movs	r5, #0
 80042bc:	f7fe bc90 	b.w	8002be0 <d_print_comp_inner+0x1c0>
 80042c0:	68f2      	ldr	r2, [r6, #12]
 80042c2:	49c2      	ldr	r1, [pc, #776]	; (80045cc <d_print_comp_inner+0x1bac>)
 80042c4:	3201      	adds	r2, #1
 80042c6:	a804      	add	r0, sp, #16
 80042c8:	f019 fdea 	bl	801dea0 <siprintf>
 80042cc:	a804      	add	r0, sp, #16
 80042ce:	f001 ffa7 	bl	8006220 <strlen>
 80042d2:	2800      	cmp	r0, #0
 80042d4:	f43e ac14 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 80042d8:	ad04      	add	r5, sp, #16
 80042da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80042de:	182f      	adds	r7, r5, r0
 80042e0:	f04f 0800 	mov.w	r8, #0
 80042e4:	e009      	b.n	80042fa <d_print_comp_inner+0x18da>
 80042e6:	460b      	mov	r3, r1
 80042e8:	3101      	adds	r1, #1
 80042ea:	42bd      	cmp	r5, r7
 80042ec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80042f0:	54e6      	strb	r6, [r4, r3]
 80042f2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80042f6:	f43e ac03 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 80042fa:	29ff      	cmp	r1, #255	; 0xff
 80042fc:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004300:	d1f1      	bne.n	80042e6 <d_print_comp_inner+0x18c6>
 8004302:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004306:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800430a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800430e:	4620      	mov	r0, r4
 8004310:	4798      	blx	r3
 8004312:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004316:	3301      	adds	r3, #1
 8004318:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800431c:	2101      	movs	r1, #1
 800431e:	2300      	movs	r3, #0
 8004320:	e7e3      	b.n	80042ea <d_print_comp_inner+0x18ca>
 8004322:	4611      	mov	r1, r2
 8004324:	f7fc f964 	bl	80005f0 <d_lookup_template_argument>
 8004328:	4602      	mov	r2, r0
 800432a:	2800      	cmp	r0, #0
 800432c:	f43e abe5 	beq.w	8002afa <d_print_comp_inner+0xda>
 8004330:	7803      	ldrb	r3, [r0, #0]
 8004332:	2b2f      	cmp	r3, #47	; 0x2f
 8004334:	f43e abd6 	beq.w	8002ae4 <d_print_comp_inner+0xc4>
 8004338:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 800433c:	682b      	ldr	r3, [r5, #0]
 800433e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004342:	2111      	movs	r1, #17
 8004344:	4620      	mov	r0, r4
 8004346:	f000 fbe7 	bl	8004b18 <d_print_comp>
 800434a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 800434e:	f7fe bbd7 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8004352:	2500      	movs	r5, #0
 8004354:	f7fe bcab 	b.w	8002cae <d_print_comp_inner+0x28e>
 8004358:	2500      	movs	r5, #0
 800435a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800435e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004362:	4620      	mov	r0, r4
 8004364:	4798      	blx	r3
 8004366:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800436a:	2201      	movs	r2, #1
 800436c:	4413      	add	r3, r2
 800436e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004372:	4629      	mov	r1, r5
 8004374:	e558      	b.n	8003e28 <d_print_comp_inner+0x1408>
 8004376:	2500      	movs	r5, #0
 8004378:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800437c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004380:	4620      	mov	r0, r4
 8004382:	4798      	blx	r3
 8004384:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004388:	2201      	movs	r2, #1
 800438a:	4413      	add	r3, r2
 800438c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004390:	4629      	mov	r1, r5
 8004392:	f7fe bfc5 	b.w	8003320 <d_print_comp_inner+0x900>
 8004396:	2b01      	cmp	r3, #1
 8004398:	f63f a885 	bhi.w	80034a6 <d_print_comp_inner+0xa86>
 800439c:	2d04      	cmp	r5, #4
 800439e:	f43e abac 	beq.w	8002afa <d_print_comp_inner+0xda>
 80043a2:	468e      	mov	lr, r1
 80043a4:	f101 0b10 	add.w	fp, r1, #16
 80043a8:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 80043aa:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
 80043ae:	e9ce 7a01 	strd	r7, sl, [lr, #4]
 80043b2:	68ff      	ldr	r7, [r7, #12]
 80043b4:	f8ce e010 	str.w	lr, [lr, #16]
 80043b8:	3501      	adds	r5, #1
 80043ba:	f8ce c00c 	str.w	ip, [lr, #12]
 80043be:	4659      	mov	r1, fp
 80043c0:	f8c4 b114 	str.w	fp, [r4, #276]	; 0x114
 80043c4:	2f00      	cmp	r7, #0
 80043c6:	f43e ab98 	beq.w	8002afa <d_print_comp_inner+0xda>
 80043ca:	783a      	ldrb	r2, [r7, #0]
 80043cc:	f7ff b858 	b.w	8003480 <d_print_comp_inner+0xa60>
 80043d0:	68d2      	ldr	r2, [r2, #12]
 80043d2:	2111      	movs	r1, #17
 80043d4:	4620      	mov	r0, r4
 80043d6:	f000 fb9f 	bl	8004b18 <d_print_comp>
 80043da:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 80043de:	b113      	cbz	r3, 80043e6 <d_print_comp_inner+0x19c6>
 80043e0:	9b04      	ldr	r3, [sp, #16]
 80043e2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80043e6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80043ea:	2b3c      	cmp	r3, #60	; 0x3c
 80043ec:	f000 82c0 	beq.w	8004970 <d_print_comp_inner+0x1f50>
 80043f0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80043f4:	29ff      	cmp	r1, #255	; 0xff
 80043f6:	f000 82ab 	beq.w	8004950 <d_print_comp_inner+0x1f30>
 80043fa:	1c4a      	adds	r2, r1, #1
 80043fc:	233c      	movs	r3, #60	; 0x3c
 80043fe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004402:	5463      	strb	r3, [r4, r1]
 8004404:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004408:	68f3      	ldr	r3, [r6, #12]
 800440a:	2111      	movs	r1, #17
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	4620      	mov	r0, r4
 8004410:	f000 fb82 	bl	8004b18 <d_print_comp>
 8004414:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004418:	2b3e      	cmp	r3, #62	; 0x3e
 800441a:	f000 8294 	beq.w	8004946 <d_print_comp_inner+0x1f26>
 800441e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004422:	29ff      	cmp	r1, #255	; 0xff
 8004424:	f000 8281 	beq.w	800492a <d_print_comp_inner+0x1f0a>
 8004428:	233e      	movs	r3, #62	; 0x3e
 800442a:	1c4a      	adds	r2, r1, #1
 800442c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004430:	5463      	strb	r3, [r4, r1]
 8004432:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004436:	f7fe bb63 	b.w	8002b00 <d_print_comp_inner+0xe0>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681e      	ldr	r6, [r3, #0]
 800443e:	7833      	ldrb	r3, [r6, #0]
 8004440:	2b61      	cmp	r3, #97	; 0x61
 8004442:	f040 8092 	bne.w	800456a <d_print_comp_inner+0x1b4a>
 8004446:	7872      	ldrb	r2, [r6, #1]
 8004448:	2a64      	cmp	r2, #100	; 0x64
 800444a:	f040 808e 	bne.w	800456a <d_print_comp_inner+0x1b4a>
 800444e:	78b2      	ldrb	r2, [r6, #2]
 8004450:	2a00      	cmp	r2, #0
 8004452:	f040 808a 	bne.w	800456a <d_print_comp_inner+0x1b4a>
 8004456:	782a      	ldrb	r2, [r5, #0]
 8004458:	2a03      	cmp	r2, #3
 800445a:	f000 828e 	beq.w	800497a <d_print_comp_inner+0x1f5a>
 800445e:	2a39      	cmp	r2, #57	; 0x39
 8004460:	f000 8296 	beq.w	8004990 <d_print_comp_inner+0x1f70>
 8004464:	2b73      	cmp	r3, #115	; 0x73
 8004466:	d111      	bne.n	800448c <d_print_comp_inner+0x1a6c>
 8004468:	7872      	ldrb	r2, [r6, #1]
 800446a:	2a5a      	cmp	r2, #90	; 0x5a
 800446c:	d135      	bne.n	80044da <d_print_comp_inner+0x1aba>
 800446e:	78b2      	ldrb	r2, [r6, #2]
 8004470:	bb9a      	cbnz	r2, 80044da <d_print_comp_inner+0x1aba>
 8004472:	4629      	mov	r1, r5
 8004474:	4620      	mov	r0, r4
 8004476:	f7fc f8d7 	bl	8000628 <d_find_pack>
 800447a:	f7fc f803 	bl	8000484 <d_pack_length>
 800447e:	4601      	mov	r1, r0
 8004480:	4620      	mov	r0, r4
 8004482:	b015      	add	sp, #84	; 0x54
 8004484:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004488:	f7fc b97c 	b.w	8000784 <d_append_num>
 800448c:	463a      	mov	r2, r7
 800448e:	2111      	movs	r1, #17
 8004490:	4620      	mov	r0, r4
 8004492:	f001 f97b 	bl	800578c <d_print_expr_op>
 8004496:	7833      	ldrb	r3, [r6, #0]
 8004498:	2b67      	cmp	r3, #103	; 0x67
 800449a:	d107      	bne.n	80044ac <d_print_comp_inner+0x1a8c>
 800449c:	7872      	ldrb	r2, [r6, #1]
 800449e:	2a73      	cmp	r2, #115	; 0x73
 80044a0:	d104      	bne.n	80044ac <d_print_comp_inner+0x1a8c>
 80044a2:	78b2      	ldrb	r2, [r6, #2]
 80044a4:	b912      	cbnz	r2, 80044ac <d_print_comp_inner+0x1a8c>
 80044a6:	462a      	mov	r2, r5
 80044a8:	f7fe bb4e 	b.w	8002b48 <d_print_comp_inner+0x128>
 80044ac:	2b73      	cmp	r3, #115	; 0x73
 80044ae:	f47f a922 	bne.w	80036f6 <d_print_comp_inner+0xcd6>
 80044b2:	7873      	ldrb	r3, [r6, #1]
 80044b4:	2b74      	cmp	r3, #116	; 0x74
 80044b6:	f47f a91e 	bne.w	80036f6 <d_print_comp_inner+0xcd6>
 80044ba:	78b3      	ldrb	r3, [r6, #2]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f47f a91a 	bne.w	80036f6 <d_print_comp_inner+0xcd6>
 80044c2:	2128      	movs	r1, #40	; 0x28
 80044c4:	4620      	mov	r0, r4
 80044c6:	f7fc f871 	bl	80005ac <d_append_char>
 80044ca:	2111      	movs	r1, #17
 80044cc:	462a      	mov	r2, r5
 80044ce:	4620      	mov	r0, r4
 80044d0:	f000 fb22 	bl	8004b18 <d_print_comp>
 80044d4:	2129      	movs	r1, #41	; 0x29
 80044d6:	f7fe bc17 	b.w	8002d08 <d_print_comp_inner+0x2e8>
 80044da:	2b73      	cmp	r3, #115	; 0x73
 80044dc:	d1d6      	bne.n	800448c <d_print_comp_inner+0x1a6c>
 80044de:	7873      	ldrb	r3, [r6, #1]
 80044e0:	2b50      	cmp	r3, #80	; 0x50
 80044e2:	d1d3      	bne.n	800448c <d_print_comp_inner+0x1a6c>
 80044e4:	78b3      	ldrb	r3, [r6, #2]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1d0      	bne.n	800448c <d_print_comp_inner+0x1a6c>
 80044ea:	461e      	mov	r6, r3
 80044ec:	e004      	b.n	80044f8 <d_print_comp_inner+0x1ad8>
 80044ee:	3601      	adds	r6, #1
 80044f0:	692d      	ldr	r5, [r5, #16]
 80044f2:	2d00      	cmp	r5, #0
 80044f4:	f000 819c 	beq.w	8004830 <d_print_comp_inner+0x1e10>
 80044f8:	782b      	ldrb	r3, [r5, #0]
 80044fa:	2b2f      	cmp	r3, #47	; 0x2f
 80044fc:	f040 8198 	bne.w	8004830 <d_print_comp_inner+0x1e10>
 8004500:	68eb      	ldr	r3, [r5, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8194 	beq.w	8004830 <d_print_comp_inner+0x1e10>
 8004508:	781a      	ldrb	r2, [r3, #0]
 800450a:	2a4c      	cmp	r2, #76	; 0x4c
 800450c:	d1ef      	bne.n	80044ee <d_print_comp_inner+0x1ace>
 800450e:	68d9      	ldr	r1, [r3, #12]
 8004510:	4620      	mov	r0, r4
 8004512:	f7fc f889 	bl	8000628 <d_find_pack>
 8004516:	4603      	mov	r3, r0
 8004518:	b148      	cbz	r0, 800452e <d_print_comp_inner+0x1b0e>
 800451a:	2300      	movs	r3, #0
 800451c:	e004      	b.n	8004528 <d_print_comp_inner+0x1b08>
 800451e:	68c2      	ldr	r2, [r0, #12]
 8004520:	b12a      	cbz	r2, 800452e <d_print_comp_inner+0x1b0e>
 8004522:	6900      	ldr	r0, [r0, #16]
 8004524:	3301      	adds	r3, #1
 8004526:	b110      	cbz	r0, 800452e <d_print_comp_inner+0x1b0e>
 8004528:	7802      	ldrb	r2, [r0, #0]
 800452a:	2a2f      	cmp	r2, #47	; 0x2f
 800452c:	d0f7      	beq.n	800451e <d_print_comp_inner+0x1afe>
 800452e:	441e      	add	r6, r3
 8004530:	e7de      	b.n	80044f0 <d_print_comp_inner+0x1ad0>
 8004532:	29ff      	cmp	r1, #255	; 0xff
 8004534:	f000 81d3 	beq.w	80048de <d_print_comp_inner+0x1ebe>
 8004538:	1c4b      	adds	r3, r1, #1
 800453a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800453e:	2320      	movs	r3, #32
 8004540:	5463      	strb	r3, [r4, r1]
 8004542:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004546:	e4c7      	b.n	8003ed8 <d_print_comp_inner+0x14b8>
 8004548:	4632      	mov	r2, r6
 800454a:	2111      	movs	r1, #17
 800454c:	4620      	mov	r0, r4
 800454e:	f000 fb11 	bl	8004b74 <d_print_mod>
 8004552:	f7fe bb36 	b.w	8002bc2 <d_print_comp_inner+0x1a2>
 8004556:	491e      	ldr	r1, [pc, #120]	; (80045d0 <d_print_comp_inner+0x1bb0>)
 8004558:	f7fc f8b0 	bl	80006bc <d_append_string>
 800455c:	f7ff b8e0 	b.w	8003720 <d_print_comp_inner+0xd00>
 8004560:	2301      	movs	r3, #1
 8004562:	e9c4 a345 	strd	sl, r3, [r4, #276]	; 0x114
 8004566:	f7fe bacb 	b.w	8002b00 <d_print_comp_inner+0xe0>
 800456a:	782a      	ldrb	r2, [r5, #0]
 800456c:	e777      	b.n	800445e <d_print_comp_inner+0x1a3e>
 800456e:	68f2      	ldr	r2, [r6, #12]
 8004570:	460d      	mov	r5, r1
 8004572:	f7fe bb40 	b.w	8002bf6 <d_print_comp_inner+0x1d6>
 8004576:	2700      	movs	r7, #0
 8004578:	5567      	strb	r7, [r4, r5]
 800457a:	4629      	mov	r1, r5
 800457c:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8004580:	4620      	mov	r0, r4
 8004582:	4798      	blx	r3
 8004584:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004588:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 800458c:	3301      	adds	r3, #1
 800458e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004592:	463d      	mov	r5, r7
 8004594:	f7fe bb48 	b.w	8002c28 <d_print_comp_inner+0x208>
 8004598:	2600      	movs	r6, #0
 800459a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800459e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80045a2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80045a6:	4620      	mov	r0, r4
 80045a8:	4798      	blx	r3
 80045aa:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80045ae:	2201      	movs	r2, #1
 80045b0:	4413      	add	r3, r2
 80045b2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80045b6:	4631      	mov	r1, r6
 80045b8:	f7fe bd82 	b.w	80030c0 <d_print_comp_inner+0x6a0>
 80045bc:	4905      	ldr	r1, [pc, #20]	; (80045d4 <d_print_comp_inner+0x1bb4>)
 80045be:	4620      	mov	r0, r4
 80045c0:	f7fc f87c 	bl	80006bc <d_append_string>
 80045c4:	68ff      	ldr	r7, [r7, #12]
 80045c6:	463a      	mov	r2, r7
 80045c8:	f7fe babe 	b.w	8002b48 <d_print_comp_inner+0x128>
 80045cc:	08021fec 	.word	0x08021fec
 80045d0:	080221e4 	.word	0x080221e4
 80045d4:	08022070 	.word	0x08022070
 80045d8:	2500      	movs	r5, #0
 80045da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80045de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80045e2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80045e6:	4620      	mov	r0, r4
 80045e8:	4798      	blx	r3
 80045ea:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80045ee:	2201      	movs	r2, #1
 80045f0:	4413      	add	r3, r2
 80045f2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80045f6:	4629      	mov	r1, r5
 80045f8:	f7fe be81 	b.w	80032fe <d_print_comp_inner+0x8de>
 80045fc:	2600      	movs	r6, #0
 80045fe:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004602:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004606:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 800460a:	4798      	blx	r3
 800460c:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8004610:	2301      	movs	r3, #1
 8004612:	441a      	add	r2, r3
 8004614:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8004618:	4631      	mov	r1, r6
 800461a:	f7fe bed2 	b.w	80033c2 <d_print_comp_inner+0x9a2>
 800461e:	2500      	movs	r5, #0
 8004620:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004624:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004628:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 800462c:	4798      	blx	r3
 800462e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004632:	2201      	movs	r2, #1
 8004634:	4413      	add	r3, r2
 8004636:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800463a:	4629      	mov	r1, r5
 800463c:	f7fe ba91 	b.w	8002b62 <d_print_comp_inner+0x142>
 8004640:	2500      	movs	r5, #0
 8004642:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8004646:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800464a:	4620      	mov	r0, r4
 800464c:	4798      	blx	r3
 800464e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004652:	3301      	adds	r3, #1
 8004654:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004658:	4629      	mov	r1, r5
 800465a:	2301      	movs	r3, #1
 800465c:	f7ff bab6 	b.w	8003bcc <d_print_comp_inner+0x11ac>
 8004660:	2120      	movs	r1, #32
 8004662:	4620      	mov	r0, r4
 8004664:	f7fb ffa2 	bl	80005ac <d_append_char>
 8004668:	f7ff baaa 	b.w	8003bc0 <d_print_comp_inner+0x11a0>
 800466c:	2500      	movs	r5, #0
 800466e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8004672:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004676:	4620      	mov	r0, r4
 8004678:	4798      	blx	r3
 800467a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800467e:	3301      	adds	r3, #1
 8004680:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004684:	4629      	mov	r1, r5
 8004686:	2301      	movs	r3, #1
 8004688:	f7ff ba8a 	b.w	8003ba0 <d_print_comp_inner+0x1180>
 800468c:	2120      	movs	r1, #32
 800468e:	4620      	mov	r0, r4
 8004690:	f7fb ff8c 	bl	80005ac <d_append_char>
 8004694:	f7ff ba7e 	b.w	8003b94 <d_print_comp_inner+0x1174>
 8004698:	2700      	movs	r7, #0
 800469a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800469e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80046a2:	4620      	mov	r0, r4
 80046a4:	4798      	blx	r3
 80046a6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80046aa:	68f2      	ldr	r2, [r6, #12]
 80046ac:	3301      	adds	r3, #1
 80046ae:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80046b2:	4639      	mov	r1, r7
 80046b4:	2301      	movs	r3, #1
 80046b6:	f7fe bb00 	b.w	8002cba <d_print_comp_inner+0x29a>
 80046ba:	212d      	movs	r1, #45	; 0x2d
 80046bc:	4620      	mov	r0, r4
 80046be:	f7fb ff75 	bl	80005ac <d_append_char>
 80046c2:	f7fe bb14 	b.w	8002cee <d_print_comp_inner+0x2ce>
 80046c6:	2700      	movs	r7, #0
 80046c8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80046cc:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80046d0:	4620      	mov	r0, r4
 80046d2:	4798      	blx	r3
 80046d4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80046d8:	3301      	adds	r3, #1
 80046da:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80046de:	4639      	mov	r1, r7
 80046e0:	2301      	movs	r3, #1
 80046e2:	f7fe bafa 	b.w	8002cda <d_print_comp_inner+0x2ba>
 80046e6:	6933      	ldr	r3, [r6, #16]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f47e aadf 	bne.w	8002cae <d_print_comp_inner+0x28e>
 80046f0:	2f3e      	cmp	r7, #62	; 0x3e
 80046f2:	f000 81f8 	beq.w	8004ae6 <d_print_comp_inner+0x20c6>
 80046f6:	6932      	ldr	r2, [r6, #16]
 80046f8:	2111      	movs	r1, #17
 80046fa:	4620      	mov	r0, r4
 80046fc:	3d02      	subs	r5, #2
 80046fe:	f000 fa0b 	bl	8004b18 <d_print_comp>
 8004702:	2d04      	cmp	r5, #4
 8004704:	f63e a9fc 	bhi.w	8002b00 <d_print_comp_inner+0xe0>
 8004708:	e8df f005 	tbb	[pc, r5]
 800470c:	06090c0f 	.word	0x06090c0f
 8004710:	03          	.byte	0x03
 8004711:	00          	.byte	0x00
 8004712:	49c9      	ldr	r1, [pc, #804]	; (8004a38 <d_print_comp_inner+0x2018>)
 8004714:	f7fe bde3 	b.w	80032de <d_print_comp_inner+0x8be>
 8004718:	49c8      	ldr	r1, [pc, #800]	; (8004a3c <d_print_comp_inner+0x201c>)
 800471a:	f7fe bde0 	b.w	80032de <d_print_comp_inner+0x8be>
 800471e:	49c8      	ldr	r1, [pc, #800]	; (8004a40 <d_print_comp_inner+0x2020>)
 8004720:	f7fe bddd 	b.w	80032de <d_print_comp_inner+0x8be>
 8004724:	216c      	movs	r1, #108	; 0x6c
 8004726:	f7fe baef 	b.w	8002d08 <d_print_comp_inner+0x2e8>
 800472a:	2175      	movs	r1, #117	; 0x75
 800472c:	f7fe baec 	b.w	8002d08 <d_print_comp_inner+0x2e8>
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b73      	cmp	r3, #115	; 0x73
 8004734:	d00c      	beq.n	8004750 <d_print_comp_inner+0x1d30>
 8004736:	3b63      	subs	r3, #99	; 0x63
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b0f      	cmp	r3, #15
 800473c:	f63e af77 	bhi.w	800362e <d_print_comp_inner+0xc0e>
 8004740:	49c0      	ldr	r1, [pc, #768]	; (8004a44 <d_print_comp_inner+0x2024>)
 8004742:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004746:	f8d3 37fc 	ldr.w	r3, [r3, #2044]	; 0x7fc
 800474a:	2b00      	cmp	r3, #0
 800474c:	f43e af6f 	beq.w	800362e <d_print_comp_inner+0xc0e>
 8004750:	2111      	movs	r1, #17
 8004752:	4620      	mov	r0, r4
 8004754:	f001 f81a 	bl	800578c <d_print_expr_op>
 8004758:	213c      	movs	r1, #60	; 0x3c
 800475a:	4620      	mov	r0, r4
 800475c:	f7fb ff26 	bl	80005ac <d_append_char>
 8004760:	6933      	ldr	r3, [r6, #16]
 8004762:	2111      	movs	r1, #17
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	4620      	mov	r0, r4
 8004768:	f000 f9d6 	bl	8004b18 <d_print_comp>
 800476c:	49b6      	ldr	r1, [pc, #728]	; (8004a48 <d_print_comp_inner+0x2028>)
 800476e:	4620      	mov	r0, r4
 8004770:	f7fb ffa4 	bl	80006bc <d_append_string>
 8004774:	6933      	ldr	r3, [r6, #16]
 8004776:	2111      	movs	r1, #17
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	4620      	mov	r0, r4
 800477c:	f000 f9cc 	bl	8004b18 <d_print_comp>
 8004780:	2129      	movs	r1, #41	; 0x29
 8004782:	f7fe bac1 	b.w	8002d08 <d_print_comp_inner+0x2e8>
 8004786:	f8d0 c134 	ldr.w	ip, [r0, #308]	; 0x134
 800478a:	f1bc 0f00 	cmp.w	ip, #0
 800478e:	f340 8107 	ble.w	80049a0 <d_print_comp_inner+0x1f80>
 8004792:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
 8004796:	462b      	mov	r3, r5
 8004798:	4670      	mov	r0, lr
 800479a:	e004      	b.n	80047a6 <d_print_comp_inner+0x1d86>
 800479c:	4563      	cmp	r3, ip
 800479e:	f100 0008 	add.w	r0, r0, #8
 80047a2:	f000 80fd 	beq.w	80049a0 <d_print_comp_inner+0x1f80>
 80047a6:	f85e 1033 	ldr.w	r1, [lr, r3, lsl #3]
 80047aa:	428a      	cmp	r2, r1
 80047ac:	f103 0301 	add.w	r3, r3, #1
 80047b0:	d1f4      	bne.n	800479c <d_print_comp_inner+0x1d7c>
 80047b2:	f8d4 c12c 	ldr.w	ip, [r4, #300]	; 0x12c
 80047b6:	4663      	mov	r3, ip
 80047b8:	f1bc 0f00 	cmp.w	ip, #0
 80047bc:	d104      	bne.n	80047c8 <d_print_comp_inner+0x1da8>
 80047be:	e09d      	b.n	80048fc <d_print_comp_inner+0x1edc>
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 809a 	beq.w	80048fc <d_print_comp_inner+0x1edc>
 80047c8:	6819      	ldr	r1, [r3, #0]
 80047ca:	4291      	cmp	r1, r2
 80047cc:	d003      	beq.n	80047d6 <d_print_comp_inner+0x1db6>
 80047ce:	42b1      	cmp	r1, r6
 80047d0:	d1f6      	bne.n	80047c0 <d_print_comp_inner+0x1da0>
 80047d2:	459c      	cmp	ip, r3
 80047d4:	d0f4      	beq.n	80047c0 <d_print_comp_inner+0x1da0>
 80047d6:	4611      	mov	r1, r2
 80047d8:	4620      	mov	r0, r4
 80047da:	9201      	str	r2, [sp, #4]
 80047dc:	f7fb ff08 	bl	80005f0 <d_lookup_template_argument>
 80047e0:	9a01      	ldr	r2, [sp, #4]
 80047e2:	2800      	cmp	r0, #0
 80047e4:	f43e a989 	beq.w	8002afa <d_print_comp_inner+0xda>
 80047e8:	7803      	ldrb	r3, [r0, #0]
 80047ea:	2b2f      	cmp	r3, #47	; 0x2f
 80047ec:	f47e a9f8 	bne.w	8002be0 <d_print_comp_inner+0x1c0>
 80047f0:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
 80047f4:	2900      	cmp	r1, #0
 80047f6:	f6fe a9fc 	blt.w	8002bf2 <d_print_comp_inner+0x1d2>
 80047fa:	f7fb fe75 	bl	80004e8 <d_index_template_argument.part.0>
 80047fe:	2800      	cmp	r0, #0
 8004800:	f000 816a 	beq.w	8004ad8 <d_print_comp_inner+0x20b8>
 8004804:	7803      	ldrb	r3, [r0, #0]
 8004806:	f7fe b9eb 	b.w	8002be0 <d_print_comp_inner+0x1c0>
 800480a:	68c2      	ldr	r2, [r0, #12]
 800480c:	f7fe b97c 	b.w	8002b08 <d_print_comp_inner+0xe8>
 8004810:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004814:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004818:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800481c:	4620      	mov	r0, r4
 800481e:	4798      	blx	r3
 8004820:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004824:	3301      	adds	r3, #1
 8004826:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800482a:	4631      	mov	r1, r6
 800482c:	2301      	movs	r3, #1
 800482e:	e48f      	b.n	8004150 <d_print_comp_inner+0x1730>
 8004830:	4986      	ldr	r1, [pc, #536]	; (8004a4c <d_print_comp_inner+0x202c>)
 8004832:	4632      	mov	r2, r6
 8004834:	a804      	add	r0, sp, #16
 8004836:	f019 fb33 	bl	801dea0 <siprintf>
 800483a:	a804      	add	r0, sp, #16
 800483c:	f001 fcf0 	bl	8006220 <strlen>
 8004840:	2800      	cmp	r0, #0
 8004842:	f43e a95d 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8004846:	ad04      	add	r5, sp, #16
 8004848:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800484c:	182f      	adds	r7, r5, r0
 800484e:	f04f 0800 	mov.w	r8, #0
 8004852:	e009      	b.n	8004868 <d_print_comp_inner+0x1e48>
 8004854:	460b      	mov	r3, r1
 8004856:	3101      	adds	r1, #1
 8004858:	42af      	cmp	r7, r5
 800485a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800485e:	54e6      	strb	r6, [r4, r3]
 8004860:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004864:	f43e a94c 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8004868:	29ff      	cmp	r1, #255	; 0xff
 800486a:	f815 6b01 	ldrb.w	r6, [r5], #1
 800486e:	d1f1      	bne.n	8004854 <d_print_comp_inner+0x1e34>
 8004870:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004874:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004878:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800487c:	4620      	mov	r0, r4
 800487e:	4798      	blx	r3
 8004880:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004884:	3301      	adds	r3, #1
 8004886:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800488a:	2101      	movs	r1, #1
 800488c:	2300      	movs	r3, #0
 800488e:	e7e3      	b.n	8004858 <d_print_comp_inner+0x1e38>
 8004890:	2500      	movs	r5, #0
 8004892:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8004896:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800489a:	4620      	mov	r0, r4
 800489c:	4798      	blx	r3
 800489e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80048a2:	3301      	adds	r3, #1
 80048a4:	4629      	mov	r1, r5
 80048a6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80048aa:	e4fc      	b.n	80042a6 <d_print_comp_inner+0x1886>
 80048ac:	2111      	movs	r1, #17
 80048ae:	4620      	mov	r0, r4
 80048b0:	4652      	mov	r2, sl
 80048b2:	f001 f967 	bl	8005b84 <d_print_subexpr>
 80048b6:	4966      	ldr	r1, [pc, #408]	; (8004a50 <d_print_comp_inner+0x2030>)
 80048b8:	f7fe bd11 	b.w	80032de <d_print_comp_inner+0x8be>
 80048bc:	2500      	movs	r5, #0
 80048be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80048c6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80048ca:	4620      	mov	r0, r4
 80048cc:	4798      	blx	r3
 80048ce:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80048d2:	3301      	adds	r3, #1
 80048d4:	4629      	mov	r1, r5
 80048d6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80048da:	f7fe bf2f 	b.w	800373c <d_print_comp_inner+0xd1c>
 80048de:	2600      	movs	r6, #0
 80048e0:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80048e4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80048e8:	4620      	mov	r0, r4
 80048ea:	4798      	blx	r3
 80048ec:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80048f0:	687d      	ldr	r5, [r7, #4]
 80048f2:	3301      	adds	r3, #1
 80048f4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80048f8:	4631      	mov	r1, r6
 80048fa:	e61d      	b.n	8004538 <d_print_comp_inner+0x1b18>
 80048fc:	6843      	ldr	r3, [r0, #4]
 80048fe:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 8004902:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004906:	4611      	mov	r1, r2
 8004908:	4620      	mov	r0, r4
 800490a:	9201      	str	r2, [sp, #4]
 800490c:	f7fb fe70 	bl	80005f0 <d_lookup_template_argument>
 8004910:	9a01      	ldr	r2, [sp, #4]
 8004912:	2800      	cmp	r0, #0
 8004914:	f000 80e3 	beq.w	8004ade <d_print_comp_inner+0x20be>
 8004918:	2501      	movs	r5, #1
 800491a:	e765      	b.n	80047e8 <d_print_comp_inner+0x1dc8>
 800491c:	68ff      	ldr	r7, [r7, #12]
 800491e:	2f00      	cmp	r7, #0
 8004920:	f43e a8eb 	beq.w	8002afa <d_print_comp_inner+0xda>
 8004924:	783a      	ldrb	r2, [r7, #0]
 8004926:	f7fe bda7 	b.w	8003478 <d_print_comp_inner+0xa58>
 800492a:	2500      	movs	r5, #0
 800492c:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8004930:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004934:	4620      	mov	r0, r4
 8004936:	4798      	blx	r3
 8004938:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800493c:	3301      	adds	r3, #1
 800493e:	4629      	mov	r1, r5
 8004940:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004944:	e570      	b.n	8004428 <d_print_comp_inner+0x1a08>
 8004946:	2120      	movs	r1, #32
 8004948:	4620      	mov	r0, r4
 800494a:	f7fb fe2f 	bl	80005ac <d_append_char>
 800494e:	e566      	b.n	800441e <d_print_comp_inner+0x19fe>
 8004950:	2500      	movs	r5, #0
 8004952:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004956:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800495a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800495e:	4620      	mov	r0, r4
 8004960:	4798      	blx	r3
 8004962:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004966:	3301      	adds	r3, #1
 8004968:	4629      	mov	r1, r5
 800496a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800496e:	e544      	b.n	80043fa <d_print_comp_inner+0x19da>
 8004970:	2120      	movs	r1, #32
 8004972:	4620      	mov	r0, r4
 8004974:	f7fb fe1a 	bl	80005ac <d_append_char>
 8004978:	e53a      	b.n	80043f0 <d_print_comp_inner+0x19d0>
 800497a:	68ea      	ldr	r2, [r5, #12]
 800497c:	7811      	ldrb	r1, [r2, #0]
 800497e:	2901      	cmp	r1, #1
 8004980:	f47f ad70 	bne.w	8004464 <d_print_comp_inner+0x1a44>
 8004984:	6929      	ldr	r1, [r5, #16]
 8004986:	7809      	ldrb	r1, [r1, #0]
 8004988:	2929      	cmp	r1, #41	; 0x29
 800498a:	bf08      	it	eq
 800498c:	4615      	moveq	r5, r2
 800498e:	e569      	b.n	8004464 <d_print_comp_inner+0x1a44>
 8004990:	68ea      	ldr	r2, [r5, #12]
 8004992:	2111      	movs	r1, #17
 8004994:	4620      	mov	r0, r4
 8004996:	f001 f8f5 	bl	8005b84 <d_print_subexpr>
 800499a:	463a      	mov	r2, r7
 800499c:	f7fe beb4 	b.w	8003708 <d_print_comp_inner+0xce8>
 80049a0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80049a4:	4563      	cmp	r3, ip
 80049a6:	f77e a8a8 	ble.w	8002afa <d_print_comp_inner+0xda>
 80049aa:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
 80049ae:	f8d4 e110 	ldr.w	lr, [r4, #272]	; 0x110
 80049b2:	eb01 03cc 	add.w	r3, r1, ip, lsl #3
 80049b6:	f10c 0001 	add.w	r0, ip, #1
 80049ba:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
 80049be:	3304      	adds	r3, #4
 80049c0:	f841 203c 	str.w	r2, [r1, ip, lsl #3]
 80049c4:	f1be 0f00 	cmp.w	lr, #0
 80049c8:	f000 8092 	beq.w	8004af0 <d_print_comp_inner+0x20d0>
 80049cc:	e9d4 0950 	ldrd	r0, r9, [r4, #320]	; 0x140
 80049d0:	4694      	mov	ip, r2
 80049d2:	e010      	b.n	80049f6 <d_print_comp_inner+0x1fd6>
 80049d4:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 80049d8:	f8de 2004 	ldr.w	r2, [lr, #4]
 80049dc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80049e0:	3001      	adds	r0, #1
 80049e2:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
 80049e6:	604a      	str	r2, [r1, #4]
 80049e8:	6019      	str	r1, [r3, #0]
 80049ea:	f8de e000 	ldr.w	lr, [lr]
 80049ee:	460b      	mov	r3, r1
 80049f0:	f1be 0f00 	cmp.w	lr, #0
 80049f4:	d07b      	beq.n	8004aee <d_print_comp_inner+0x20ce>
 80049f6:	4581      	cmp	r9, r0
 80049f8:	dcec      	bgt.n	80049d4 <d_print_comp_inner+0x1fb4>
 80049fa:	f7fe b87e 	b.w	8002afa <d_print_comp_inner+0xda>
 80049fe:	6912      	ldr	r2, [r2, #16]
 8004a00:	2111      	movs	r1, #17
 8004a02:	f000 f889 	bl	8004b18 <d_print_comp>
 8004a06:	9b06      	ldr	r3, [sp, #24]
 8004a08:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f43e af07 	beq.w	8003820 <d_print_comp_inner+0xe00>
 8004a12:	f7fe b875 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	6891      	ldr	r1, [r2, #8]
 8004a1a:	2901      	cmp	r1, #1
 8004a1c:	f47e ae1c 	bne.w	8003658 <d_print_comp_inner+0xc38>
 8004a20:	6852      	ldr	r2, [r2, #4]
 8004a22:	7812      	ldrb	r2, [r2, #0]
 8004a24:	2a3e      	cmp	r2, #62	; 0x3e
 8004a26:	f47e ae17 	bne.w	8003658 <d_print_comp_inner+0xc38>
 8004a2a:	2128      	movs	r1, #40	; 0x28
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f7fb fdbd 	bl	80005ac <d_append_char>
 8004a32:	68f3      	ldr	r3, [r6, #12]
 8004a34:	f7fe be10 	b.w	8003658 <d_print_comp_inner+0xc38>
 8004a38:	0802223c 	.word	0x0802223c
 8004a3c:	08022238 	.word	0x08022238
 8004a40:	08022234 	.word	0x08022234
 8004a44:	08020d24 	.word	0x08020d24
 8004a48:	08022218 	.word	0x08022218
 8004a4c:	08021fec 	.word	0x08021fec
 8004a50:	0802226c 	.word	0x0802226c
 8004a54:	4620      	mov	r0, r4
 8004a56:	215b      	movs	r1, #91	; 0x5b
 8004a58:	f7fb fda8 	bl	80005ac <d_append_char>
 8004a5c:	6933      	ldr	r3, [r6, #16]
 8004a5e:	4620      	mov	r0, r4
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	2111      	movs	r1, #17
 8004a64:	f000 f858 	bl	8004b18 <d_print_comp>
 8004a68:	215d      	movs	r1, #93	; 0x5d
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f7fb fd9e 	bl	80005ac <d_append_char>
 8004a70:	f7fe be1a 	b.w	80036a8 <d_print_comp_inner+0xc88>
 8004a74:	6913      	ldr	r3, [r2, #16]
 8004a76:	68d2      	ldr	r2, [r2, #12]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b29      	cmp	r3, #41	; 0x29
 8004a7c:	bf1c      	itt	ne
 8004a7e:	2301      	movne	r3, #1
 8004a80:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 8004a84:	2111      	movs	r1, #17
 8004a86:	4620      	mov	r0, r4
 8004a88:	f001 f87c 	bl	8005b84 <d_print_subexpr>
 8004a8c:	f7fe bdf5 	b.w	800367a <d_print_comp_inner+0xc5a>
 8004a90:	462a      	mov	r2, r5
 8004a92:	2111      	movs	r1, #17
 8004a94:	4620      	mov	r0, r4
 8004a96:	f000 fe79 	bl	800578c <d_print_expr_op>
 8004a9a:	f7fe bdff 	b.w	800369c <d_print_comp_inner+0xc7c>
 8004a9e:	491c      	ldr	r1, [pc, #112]	; (8004b10 <d_print_comp_inner+0x20f0>)
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f7fb fe0b 	bl	80006bc <d_append_string>
 8004aa6:	68f3      	ldr	r3, [r6, #12]
 8004aa8:	b143      	cbz	r3, 8004abc <d_print_comp_inner+0x209c>
 8004aaa:	2111      	movs	r1, #17
 8004aac:	4620      	mov	r0, r4
 8004aae:	4632      	mov	r2, r6
 8004ab0:	f001 f868 	bl	8005b84 <d_print_subexpr>
 8004ab4:	2120      	movs	r1, #32
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f7fb fd78 	bl	80005ac <d_append_char>
 8004abc:	463a      	mov	r2, r7
 8004abe:	2111      	movs	r1, #17
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f000 f829 	bl	8004b18 <d_print_comp>
 8004ac6:	2d00      	cmp	r5, #0
 8004ac8:	f47e ae15 	bne.w	80036f6 <d_print_comp_inner+0xcd6>
 8004acc:	f7fe b818 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8004ad0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8004ad4:	f7fe b811 	b.w	8002afa <d_print_comp_inner+0xda>
 8004ad8:	2d00      	cmp	r5, #0
 8004ada:	f43e a80e 	beq.w	8002afa <d_print_comp_inner+0xda>
 8004ade:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 8004ae2:	f7fe b80a 	b.w	8002afa <d_print_comp_inner+0xda>
 8004ae6:	212d      	movs	r1, #45	; 0x2d
 8004ae8:	f7fb fd60 	bl	80005ac <d_append_char>
 8004aec:	e603      	b.n	80046f6 <d_print_comp_inner+0x1cd6>
 8004aee:	4662      	mov	r2, ip
 8004af0:	2100      	movs	r1, #0
 8004af2:	6019      	str	r1, [r3, #0]
 8004af4:	e66f      	b.n	80047d6 <d_print_comp_inner+0x1db6>
 8004af6:	68f2      	ldr	r2, [r6, #12]
 8004af8:	f7fe b815 	b.w	8002b26 <d_print_comp_inner+0x106>
 8004afc:	463a      	mov	r2, r7
 8004afe:	2111      	movs	r1, #17
 8004b00:	f000 fe44 	bl	800578c <d_print_expr_op>
 8004b04:	f7fe bdf7 	b.w	80036f6 <d_print_comp_inner+0xcd6>
 8004b08:	4902      	ldr	r1, [pc, #8]	; (8004b14 <d_print_comp_inner+0x20f4>)
 8004b0a:	f7fe bbe8 	b.w	80032de <d_print_comp_inner+0x8be>
 8004b0e:	bf00      	nop
 8004b10:	0802222c 	.word	0x0802222c
 8004b14:	08022240 	.word	0x08022240

08004b18 <d_print_comp>:
 8004b18:	b530      	push	{r4, r5, lr}
 8004b1a:	4605      	mov	r5, r0
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	b31a      	cbz	r2, 8004b68 <d_print_comp+0x50>
 8004b20:	6853      	ldr	r3, [r2, #4]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	4614      	mov	r4, r2
 8004b26:	dc1f      	bgt.n	8004b68 <d_print_comp+0x50>
 8004b28:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
 8004b2c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004b30:	dc1a      	bgt.n	8004b68 <d_print_comp+0x50>
 8004b32:	3301      	adds	r3, #1
 8004b34:	6053      	str	r3, [r2, #4]
 8004b36:	3101      	adds	r1, #1
 8004b38:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8004b3c:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
 8004b40:	f8c0 d12c 	str.w	sp, [r0, #300]	; 0x12c
 8004b44:	2111      	movs	r1, #17
 8004b46:	e9cd 2300 	strd	r2, r3, [sp]
 8004b4a:	f7fd ff69 	bl	8002a20 <d_print_comp_inner>
 8004b4e:	6862      	ldr	r2, [r4, #4]
 8004b50:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 8004b54:	9901      	ldr	r1, [sp, #4]
 8004b56:	f8c5 112c 	str.w	r1, [r5, #300]	; 0x12c
 8004b5a:	3a01      	subs	r2, #1
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	6062      	str	r2, [r4, #4]
 8004b60:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
 8004b64:	b003      	add	sp, #12
 8004b66:	bd30      	pop	{r4, r5, pc}
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
 8004b6e:	b003      	add	sp, #12
 8004b70:	bd30      	pop	{r4, r5, pc}
 8004b72:	bf00      	nop

08004b74 <d_print_mod>:
 8004b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b78:	7813      	ldrb	r3, [r2, #0]
 8004b7a:	3b03      	subs	r3, #3
 8004b7c:	4615      	mov	r5, r2
 8004b7e:	4604      	mov	r4, r0
 8004b80:	2b4e      	cmp	r3, #78	; 0x4e
 8004b82:	d850      	bhi.n	8004c26 <d_print_mod+0xb2>
 8004b84:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b88:	004f011a 	.word	0x004f011a
 8004b8c:	004f004f 	.word	0x004f004f
 8004b90:	004f004f 	.word	0x004f004f
 8004b94:	004f004f 	.word	0x004f004f
 8004b98:	004f004f 	.word	0x004f004f
 8004b9c:	004f004f 	.word	0x004f004f
 8004ba0:	004f004f 	.word	0x004f004f
 8004ba4:	004f004f 	.word	0x004f004f
 8004ba8:	004f004f 	.word	0x004f004f
 8004bac:	004f004f 	.word	0x004f004f
 8004bb0:	004f004f 	.word	0x004f004f
 8004bb4:	007b0054 	.word	0x007b0054
 8004bb8:	005400a2 	.word	0x005400a2
 8004bbc:	00a2007b 	.word	0x00a2007b
 8004bc0:	00fb00ee 	.word	0x00fb00ee
 8004bc4:	02830108 	.word	0x02830108
 8004bc8:	012d011f 	.word	0x012d011f
 8004bcc:	01780152 	.word	0x01780152
 8004bd0:	004f004f 	.word	0x004f004f
 8004bd4:	004f004f 	.word	0x004f004f
 8004bd8:	004f019e 	.word	0x004f019e
 8004bdc:	004f01ce 	.word	0x004f01ce
 8004be0:	004f004f 	.word	0x004f004f
 8004be4:	004f004f 	.word	0x004f004f
 8004be8:	004f004f 	.word	0x004f004f
 8004bec:	004f004f 	.word	0x004f004f
 8004bf0:	004f004f 	.word	0x004f004f
 8004bf4:	004f004f 	.word	0x004f004f
 8004bf8:	004f004f 	.word	0x004f004f
 8004bfc:	004f004f 	.word	0x004f004f
 8004c00:	004f004f 	.word	0x004f004f
 8004c04:	004f004f 	.word	0x004f004f
 8004c08:	004f004f 	.word	0x004f004f
 8004c0c:	004f004f 	.word	0x004f004f
 8004c10:	004f004f 	.word	0x004f004f
 8004c14:	004f004f 	.word	0x004f004f
 8004c18:	004f004f 	.word	0x004f004f
 8004c1c:	01f5004f 	.word	0x01f5004f
 8004c20:	0230004f 	.word	0x0230004f
 8004c24:	00c7      	.short	0x00c7
 8004c26:	462a      	mov	r2, r5
 8004c28:	2111      	movs	r1, #17
 8004c2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c2e:	e773      	b.n	8004b18 <d_print_comp>
 8004c30:	4ed4      	ldr	r6, [pc, #848]	; (8004f84 <d_print_mod+0x410>)
 8004c32:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004c36:	f106 0708 	add.w	r7, r6, #8
 8004c3a:	2520      	movs	r5, #32
 8004c3c:	f04f 0800 	mov.w	r8, #0
 8004c40:	e00b      	b.n	8004c5a <d_print_mod+0xe6>
 8004c42:	460b      	mov	r3, r1
 8004c44:	3101      	adds	r1, #1
 8004c46:	42be      	cmp	r6, r7
 8004c48:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004c4c:	54e5      	strb	r5, [r4, r3]
 8004c4e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004c52:	f000 80c4 	beq.w	8004dde <d_print_mod+0x26a>
 8004c56:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8004c5a:	29ff      	cmp	r1, #255	; 0xff
 8004c5c:	d1f1      	bne.n	8004c42 <d_print_mod+0xce>
 8004c5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c62:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c66:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	4798      	blx	r3
 8004c6e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004c72:	3301      	adds	r3, #1
 8004c74:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004c78:	2101      	movs	r1, #1
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e7e3      	b.n	8004c46 <d_print_mod+0xd2>
 8004c7e:	4ec2      	ldr	r6, [pc, #776]	; (8004f88 <d_print_mod+0x414>)
 8004c80:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004c84:	f106 0708 	add.w	r7, r6, #8
 8004c88:	2520      	movs	r5, #32
 8004c8a:	f04f 0800 	mov.w	r8, #0
 8004c8e:	e00b      	b.n	8004ca8 <d_print_mod+0x134>
 8004c90:	460b      	mov	r3, r1
 8004c92:	3101      	adds	r1, #1
 8004c94:	42b7      	cmp	r7, r6
 8004c96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004c9a:	54e5      	strb	r5, [r4, r3]
 8004c9c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004ca0:	f000 809d 	beq.w	8004dde <d_print_mod+0x26a>
 8004ca4:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8004ca8:	29ff      	cmp	r1, #255	; 0xff
 8004caa:	d1f1      	bne.n	8004c90 <d_print_mod+0x11c>
 8004cac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cb0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cb4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004cb8:	4620      	mov	r0, r4
 8004cba:	4798      	blx	r3
 8004cbc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	2300      	movs	r3, #0
 8004cca:	e7e3      	b.n	8004c94 <d_print_mod+0x120>
 8004ccc:	4eaf      	ldr	r6, [pc, #700]	; (8004f8c <d_print_mod+0x418>)
 8004cce:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004cd2:	1d77      	adds	r7, r6, #5
 8004cd4:	2520      	movs	r5, #32
 8004cd6:	f04f 0800 	mov.w	r8, #0
 8004cda:	e00a      	b.n	8004cf2 <d_print_mod+0x17e>
 8004cdc:	460b      	mov	r3, r1
 8004cde:	3101      	adds	r1, #1
 8004ce0:	42b7      	cmp	r7, r6
 8004ce2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004ce6:	54e5      	strb	r5, [r4, r3]
 8004ce8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004cec:	d077      	beq.n	8004dde <d_print_mod+0x26a>
 8004cee:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8004cf2:	29ff      	cmp	r1, #255	; 0xff
 8004cf4:	d1f2      	bne.n	8004cdc <d_print_mod+0x168>
 8004cf6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cfa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cfe:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004d02:	4620      	mov	r0, r4
 8004d04:	4798      	blx	r3
 8004d06:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004d10:	2101      	movs	r1, #1
 8004d12:	2300      	movs	r3, #0
 8004d14:	e7e4      	b.n	8004ce0 <d_print_mod+0x16c>
 8004d16:	4f9e      	ldr	r7, [pc, #632]	; (8004f90 <d_print_mod+0x41c>)
 8004d18:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004d1c:	f107 0905 	add.w	r9, r7, #5
 8004d20:	2620      	movs	r6, #32
 8004d22:	f04f 0800 	mov.w	r8, #0
 8004d26:	e00b      	b.n	8004d40 <d_print_mod+0x1cc>
 8004d28:	460b      	mov	r3, r1
 8004d2a:	3101      	adds	r1, #1
 8004d2c:	45b9      	cmp	r9, r7
 8004d2e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004d32:	54e6      	strb	r6, [r4, r3]
 8004d34:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004d38:	f000 817c 	beq.w	8005034 <d_print_mod+0x4c0>
 8004d3c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8004d40:	29ff      	cmp	r1, #255	; 0xff
 8004d42:	d1f1      	bne.n	8004d28 <d_print_mod+0x1b4>
 8004d44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d4c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004d50:	4620      	mov	r0, r4
 8004d52:	4798      	blx	r3
 8004d54:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004d58:	3301      	adds	r3, #1
 8004d5a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004d5e:	2101      	movs	r1, #1
 8004d60:	2300      	movs	r3, #0
 8004d62:	e7e3      	b.n	8004d2c <d_print_mod+0x1b8>
 8004d64:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8004d68:	2bff      	cmp	r3, #255	; 0xff
 8004d6a:	f000 81cd 	beq.w	8005108 <d_print_mod+0x594>
 8004d6e:	2220      	movs	r2, #32
 8004d70:	1c59      	adds	r1, r3, #1
 8004d72:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 8004d76:	54c2      	strb	r2, [r0, r3]
 8004d78:	f880 2104 	strb.w	r2, [r0, #260]	; 0x104
 8004d7c:	e025      	b.n	8004dca <d_print_mod+0x256>
 8004d7e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8004d82:	2bff      	cmp	r3, #255	; 0xff
 8004d84:	f000 81b1 	beq.w	80050ea <d_print_mod+0x576>
 8004d88:	1c59      	adds	r1, r3, #1
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004d90:	54e2      	strb	r2, [r4, r3]
 8004d92:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004d96:	e026      	b.n	8004de6 <d_print_mod+0x272>
 8004d98:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004d9c:	29ff      	cmp	r1, #255	; 0xff
 8004d9e:	f000 8194 	beq.w	80050ca <d_print_mod+0x556>
 8004da2:	1c4a      	adds	r2, r1, #1
 8004da4:	2320      	movs	r3, #32
 8004da6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004daa:	5463      	strb	r3, [r4, r1]
 8004dac:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004db0:	692a      	ldr	r2, [r5, #16]
 8004db2:	4620      	mov	r0, r4
 8004db4:	2111      	movs	r1, #17
 8004db6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dba:	e6ad      	b.n	8004b18 <d_print_comp>
 8004dbc:	68ea      	ldr	r2, [r5, #12]
 8004dbe:	2111      	movs	r1, #17
 8004dc0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dc4:	e6a8      	b.n	8004b18 <d_print_comp>
 8004dc6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004dca:	29ff      	cmp	r1, #255	; 0xff
 8004dcc:	f000 81bb 	beq.w	8005146 <d_print_mod+0x5d2>
 8004dd0:	1c4a      	adds	r2, r1, #1
 8004dd2:	2326      	movs	r3, #38	; 0x26
 8004dd4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004dd8:	5463      	strb	r3, [r4, r1]
 8004dda:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004de2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004de6:	4d6b      	ldr	r5, [pc, #428]	; (8004f94 <d_print_mod+0x420>)
 8004de8:	2626      	movs	r6, #38	; 0x26
 8004dea:	1c6f      	adds	r7, r5, #1
 8004dec:	f04f 0800 	mov.w	r8, #0
 8004df0:	e00a      	b.n	8004e08 <d_print_mod+0x294>
 8004df2:	460b      	mov	r3, r1
 8004df4:	3101      	adds	r1, #1
 8004df6:	42bd      	cmp	r5, r7
 8004df8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004dfc:	54e6      	strb	r6, [r4, r3]
 8004dfe:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004e02:	d0ec      	beq.n	8004dde <d_print_mod+0x26a>
 8004e04:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004e08:	29ff      	cmp	r1, #255	; 0xff
 8004e0a:	d1f2      	bne.n	8004df2 <d_print_mod+0x27e>
 8004e0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e14:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004e18:	4620      	mov	r0, r4
 8004e1a:	4798      	blx	r3
 8004e1c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004e20:	3301      	adds	r3, #1
 8004e22:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004e26:	2101      	movs	r1, #1
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e7e4      	b.n	8004df6 <d_print_mod+0x282>
 8004e2c:	4e5a      	ldr	r6, [pc, #360]	; (8004f98 <d_print_mod+0x424>)
 8004e2e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004e32:	f106 0708 	add.w	r7, r6, #8
 8004e36:	2520      	movs	r5, #32
 8004e38:	f04f 0800 	mov.w	r8, #0
 8004e3c:	e00a      	b.n	8004e54 <d_print_mod+0x2e0>
 8004e3e:	460b      	mov	r3, r1
 8004e40:	3101      	adds	r1, #1
 8004e42:	42b7      	cmp	r7, r6
 8004e44:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e48:	54e5      	strb	r5, [r4, r3]
 8004e4a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004e4e:	d0c6      	beq.n	8004dde <d_print_mod+0x26a>
 8004e50:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8004e54:	29ff      	cmp	r1, #255	; 0xff
 8004e56:	d1f2      	bne.n	8004e3e <d_print_mod+0x2ca>
 8004e58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e60:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004e64:	4620      	mov	r0, r4
 8004e66:	4798      	blx	r3
 8004e68:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004e72:	2101      	movs	r1, #1
 8004e74:	2300      	movs	r3, #0
 8004e76:	e7e4      	b.n	8004e42 <d_print_mod+0x2ce>
 8004e78:	4e48      	ldr	r6, [pc, #288]	; (8004f9c <d_print_mod+0x428>)
 8004e7a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004e7e:	f106 070a 	add.w	r7, r6, #10
 8004e82:	2520      	movs	r5, #32
 8004e84:	f04f 0800 	mov.w	r8, #0
 8004e88:	e00a      	b.n	8004ea0 <d_print_mod+0x32c>
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	3101      	adds	r1, #1
 8004e8e:	42b7      	cmp	r7, r6
 8004e90:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e94:	54e5      	strb	r5, [r4, r3]
 8004e96:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004e9a:	d0a0      	beq.n	8004dde <d_print_mod+0x26a>
 8004e9c:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8004ea0:	29ff      	cmp	r1, #255	; 0xff
 8004ea2:	d1f2      	bne.n	8004e8a <d_print_mod+0x316>
 8004ea4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ea8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004eac:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	4798      	blx	r3
 8004eb4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004eb8:	3301      	adds	r3, #1
 8004eba:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e7e4      	b.n	8004e8e <d_print_mod+0x31a>
 8004ec4:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8004ec8:	2b28      	cmp	r3, #40	; 0x28
 8004eca:	f040 80d4 	bne.w	8005076 <d_print_mod+0x502>
 8004ece:	4e34      	ldr	r6, [pc, #208]	; (8004fa0 <d_print_mod+0x42c>)
 8004ed0:	68ea      	ldr	r2, [r5, #12]
 8004ed2:	2111      	movs	r1, #17
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	f7ff fe1f 	bl	8004b18 <d_print_comp>
 8004eda:	1cb7      	adds	r7, r6, #2
 8004edc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004ee0:	253a      	movs	r5, #58	; 0x3a
 8004ee2:	f04f 0800 	mov.w	r8, #0
 8004ee6:	e00b      	b.n	8004f00 <d_print_mod+0x38c>
 8004ee8:	460b      	mov	r3, r1
 8004eea:	3101      	adds	r1, #1
 8004eec:	42b7      	cmp	r7, r6
 8004eee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004ef2:	54e5      	strb	r5, [r4, r3]
 8004ef4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004ef8:	f43f af71 	beq.w	8004dde <d_print_mod+0x26a>
 8004efc:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8004f00:	29ff      	cmp	r1, #255	; 0xff
 8004f02:	d1f1      	bne.n	8004ee8 <d_print_mod+0x374>
 8004f04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f08:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f0c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004f10:	4620      	mov	r0, r4
 8004f12:	4798      	blx	r3
 8004f14:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004f18:	3301      	adds	r3, #1
 8004f1a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004f1e:	2101      	movs	r1, #1
 8004f20:	2300      	movs	r3, #0
 8004f22:	e7e3      	b.n	8004eec <d_print_mod+0x378>
 8004f24:	4f1f      	ldr	r7, [pc, #124]	; (8004fa4 <d_print_mod+0x430>)
 8004f26:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004f2a:	f107 0909 	add.w	r9, r7, #9
 8004f2e:	2620      	movs	r6, #32
 8004f30:	f04f 0800 	mov.w	r8, #0
 8004f34:	e00b      	b.n	8004f4e <d_print_mod+0x3da>
 8004f36:	460b      	mov	r3, r1
 8004f38:	3101      	adds	r1, #1
 8004f3a:	454f      	cmp	r7, r9
 8004f3c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004f40:	54e6      	strb	r6, [r4, r3]
 8004f42:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004f46:	f000 8084 	beq.w	8005052 <d_print_mod+0x4de>
 8004f4a:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8004f4e:	29ff      	cmp	r1, #255	; 0xff
 8004f50:	d1f1      	bne.n	8004f36 <d_print_mod+0x3c2>
 8004f52:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f56:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f5a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004f5e:	4620      	mov	r0, r4
 8004f60:	4798      	blx	r3
 8004f62:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004f66:	3301      	adds	r3, #1
 8004f68:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	2300      	movs	r3, #0
 8004f70:	e7e3      	b.n	8004f3a <d_print_mod+0x3c6>
 8004f72:	4e0d      	ldr	r6, [pc, #52]	; (8004fa8 <d_print_mod+0x434>)
 8004f74:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004f78:	f106 0710 	add.w	r7, r6, #16
 8004f7c:	2520      	movs	r5, #32
 8004f7e:	f04f 0800 	mov.w	r8, #0
 8004f82:	e01f      	b.n	8004fc4 <d_print_mod+0x450>
 8004f84:	080222ec 	.word	0x080222ec
 8004f88:	080222f8 	.word	0x080222f8
 8004f8c:	08022304 	.word	0x08022304
 8004f90:	0802232c 	.word	0x0802232c
 8004f94:	08022334 	.word	0x08022334
 8004f98:	08022338 	.word	0x08022338
 8004f9c:	08022344 	.word	0x08022344
 8004fa0:	08022350 	.word	0x08022350
 8004fa4:	08022354 	.word	0x08022354
 8004fa8:	0802230c 	.word	0x0802230c
 8004fac:	460b      	mov	r3, r1
 8004fae:	3101      	adds	r1, #1
 8004fb0:	42b7      	cmp	r7, r6
 8004fb2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004fb6:	54e5      	strb	r5, [r4, r3]
 8004fb8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004fbc:	f43f af0f 	beq.w	8004dde <d_print_mod+0x26a>
 8004fc0:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8004fc4:	29ff      	cmp	r1, #255	; 0xff
 8004fc6:	d1f1      	bne.n	8004fac <d_print_mod+0x438>
 8004fc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004fcc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004fd0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	4798      	blx	r3
 8004fd8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004fdc:	3301      	adds	r3, #1
 8004fde:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e7e3      	b.n	8004fb0 <d_print_mod+0x43c>
 8004fe8:	4f6d      	ldr	r7, [pc, #436]	; (80051a0 <d_print_mod+0x62c>)
 8004fea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004fee:	f107 0908 	add.w	r9, r7, #8
 8004ff2:	2620      	movs	r6, #32
 8004ff4:	f04f 0800 	mov.w	r8, #0
 8004ff8:	e00a      	b.n	8005010 <d_print_mod+0x49c>
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	3101      	adds	r1, #1
 8004ffe:	45b9      	cmp	r9, r7
 8005000:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005004:	54e6      	strb	r6, [r4, r3]
 8005006:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800500a:	d013      	beq.n	8005034 <d_print_mod+0x4c0>
 800500c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8005010:	29ff      	cmp	r1, #255	; 0xff
 8005012:	d1f2      	bne.n	8004ffa <d_print_mod+0x486>
 8005014:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005018:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800501c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005020:	4620      	mov	r0, r4
 8005022:	4798      	blx	r3
 8005024:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005028:	3301      	adds	r3, #1
 800502a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800502e:	2101      	movs	r1, #1
 8005030:	2300      	movs	r3, #0
 8005032:	e7e4      	b.n	8004ffe <d_print_mod+0x48a>
 8005034:	692a      	ldr	r2, [r5, #16]
 8005036:	2a00      	cmp	r2, #0
 8005038:	f43f aed1 	beq.w	8004dde <d_print_mod+0x26a>
 800503c:	29ff      	cmp	r1, #255	; 0xff
 800503e:	d032      	beq.n	80050a6 <d_print_mod+0x532>
 8005040:	1c48      	adds	r0, r1, #1
 8005042:	2328      	movs	r3, #40	; 0x28
 8005044:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8005048:	5463      	strb	r3, [r4, r1]
 800504a:	2111      	movs	r1, #17
 800504c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005050:	e001      	b.n	8005056 <d_print_mod+0x4e2>
 8005052:	68ea      	ldr	r2, [r5, #12]
 8005054:	2111      	movs	r1, #17
 8005056:	4620      	mov	r0, r4
 8005058:	f7ff fd5e 	bl	8004b18 <d_print_comp>
 800505c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005060:	29ff      	cmp	r1, #255	; 0xff
 8005062:	d061      	beq.n	8005128 <d_print_mod+0x5b4>
 8005064:	1c4a      	adds	r2, r1, #1
 8005066:	2329      	movs	r3, #41	; 0x29
 8005068:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800506c:	5463      	strb	r3, [r4, r1]
 800506e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005076:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800507a:	29ff      	cmp	r1, #255	; 0xff
 800507c:	d072      	beq.n	8005164 <d_print_mod+0x5f0>
 800507e:	1c4a      	adds	r2, r1, #1
 8005080:	2320      	movs	r3, #32
 8005082:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005086:	5463      	strb	r3, [r4, r1]
 8005088:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800508c:	e71f      	b.n	8004ece <d_print_mod+0x35a>
 800508e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005092:	29ff      	cmp	r1, #255	; 0xff
 8005094:	d076      	beq.n	8005184 <d_print_mod+0x610>
 8005096:	1c4a      	adds	r2, r1, #1
 8005098:	232a      	movs	r3, #42	; 0x2a
 800509a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800509e:	5463      	strb	r3, [r4, r1]
 80050a0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80050a4:	e69b      	b.n	8004dde <d_print_mod+0x26a>
 80050a6:	2600      	movs	r6, #0
 80050a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80050ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80050b0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80050b4:	4620      	mov	r0, r4
 80050b6:	4798      	blx	r3
 80050b8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80050bc:	692a      	ldr	r2, [r5, #16]
 80050be:	3301      	adds	r3, #1
 80050c0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80050c4:	2001      	movs	r0, #1
 80050c6:	4631      	mov	r1, r6
 80050c8:	e7bb      	b.n	8005042 <d_print_mod+0x4ce>
 80050ca:	2600      	movs	r6, #0
 80050cc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80050d0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80050d4:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80050d8:	4798      	blx	r3
 80050da:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80050de:	2201      	movs	r2, #1
 80050e0:	4413      	add	r3, r2
 80050e2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80050e6:	4631      	mov	r1, r6
 80050e8:	e65c      	b.n	8004da4 <d_print_mod+0x230>
 80050ea:	2500      	movs	r5, #0
 80050ec:	4619      	mov	r1, r3
 80050ee:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 80050f2:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
 80050f6:	4798      	blx	r3
 80050f8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80050fc:	2101      	movs	r1, #1
 80050fe:	440b      	add	r3, r1
 8005100:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005104:	462b      	mov	r3, r5
 8005106:	e640      	b.n	8004d8a <d_print_mod+0x216>
 8005108:	2100      	movs	r1, #0
 800510a:	e9d0 5242 	ldrd	r5, r2, [r0, #264]	; 0x108
 800510e:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
 8005112:	4619      	mov	r1, r3
 8005114:	47a8      	blx	r5
 8005116:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800511a:	2220      	movs	r2, #32
 800511c:	3301      	adds	r3, #1
 800511e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005122:	7022      	strb	r2, [r4, #0]
 8005124:	2101      	movs	r1, #1
 8005126:	e653      	b.n	8004dd0 <d_print_mod+0x25c>
 8005128:	2500      	movs	r5, #0
 800512a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800512e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005132:	4620      	mov	r0, r4
 8005134:	4798      	blx	r3
 8005136:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800513a:	2201      	movs	r2, #1
 800513c:	4413      	add	r3, r2
 800513e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005142:	4629      	mov	r1, r5
 8005144:	e78f      	b.n	8005066 <d_print_mod+0x4f2>
 8005146:	2500      	movs	r5, #0
 8005148:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800514c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005150:	4620      	mov	r0, r4
 8005152:	4798      	blx	r3
 8005154:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005158:	2201      	movs	r2, #1
 800515a:	4413      	add	r3, r2
 800515c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005160:	4629      	mov	r1, r5
 8005162:	e636      	b.n	8004dd2 <d_print_mod+0x25e>
 8005164:	2600      	movs	r6, #0
 8005166:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800516a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800516e:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005172:	4798      	blx	r3
 8005174:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005178:	2201      	movs	r2, #1
 800517a:	4413      	add	r3, r2
 800517c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005180:	4631      	mov	r1, r6
 8005182:	e77d      	b.n	8005080 <d_print_mod+0x50c>
 8005184:	2500      	movs	r5, #0
 8005186:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
 800518a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 800518e:	4798      	blx	r3
 8005190:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005194:	2201      	movs	r2, #1
 8005196:	4413      	add	r3, r2
 8005198:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800519c:	4629      	mov	r1, r5
 800519e:	e77b      	b.n	8005098 <d_print_mod+0x524>
 80051a0:	08022320 	.word	0x08022320

080051a4 <d_print_function_type>:
 80051a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051a8:	4604      	mov	r4, r0
 80051aa:	4616      	mov	r6, r2
 80051ac:	461d      	mov	r5, r3
 80051ae:	b19b      	cbz	r3, 80051d8 <d_print_function_type+0x34>
 80051b0:	4f71      	ldr	r7, [pc, #452]	; (8005378 <d_print_function_type+0x1d4>)
 80051b2:	2001      	movs	r0, #1
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	b97a      	cbnz	r2, 80051d8 <d_print_function_type+0x34>
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	7811      	ldrb	r1, [r2, #0]
 80051bc:	3919      	subs	r1, #25
 80051be:	b2c9      	uxtb	r1, r1
 80051c0:	2912      	cmp	r1, #18
 80051c2:	fa00 f201 	lsl.w	r2, r0, r1
 80051c6:	d804      	bhi.n	80051d2 <d_print_function_type+0x2e>
 80051c8:	423a      	tst	r2, r7
 80051ca:	d135      	bne.n	8005238 <d_print_function_type+0x94>
 80051cc:	f412 6f60 	tst.w	r2, #3584	; 0xe00
 80051d0:	d174      	bne.n	80052bc <d_print_function_type+0x118>
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1ed      	bne.n	80051b4 <d_print_function_type+0x10>
 80051d8:	2300      	movs	r3, #0
 80051da:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
 80051de:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80051e2:	462a      	mov	r2, r5
 80051e4:	2111      	movs	r1, #17
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 f8c8 	bl	800537c <d_print_mod_list>
 80051ec:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80051f0:	2bff      	cmp	r3, #255	; 0xff
 80051f2:	d04b      	beq.n	800528c <d_print_function_type+0xe8>
 80051f4:	2228      	movs	r2, #40	; 0x28
 80051f6:	1c59      	adds	r1, r3, #1
 80051f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80051fc:	54e2      	strb	r2, [r4, r3]
 80051fe:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005202:	6932      	ldr	r2, [r6, #16]
 8005204:	b12a      	cbz	r2, 8005212 <d_print_function_type+0x6e>
 8005206:	2111      	movs	r1, #17
 8005208:	4620      	mov	r0, r4
 800520a:	f7ff fc85 	bl	8004b18 <d_print_comp>
 800520e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005212:	29ff      	cmp	r1, #255	; 0xff
 8005214:	d076      	beq.n	8005304 <d_print_function_type+0x160>
 8005216:	1c4b      	adds	r3, r1, #1
 8005218:	2229      	movs	r2, #41	; 0x29
 800521a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800521e:	4620      	mov	r0, r4
 8005220:	5462      	strb	r2, [r4, r1]
 8005222:	2301      	movs	r3, #1
 8005224:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005228:	2111      	movs	r1, #17
 800522a:	462a      	mov	r2, r5
 800522c:	f000 f8a6 	bl	800537c <d_print_mod_list>
 8005230:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
 8005234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005238:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800523c:	2b20      	cmp	r3, #32
 800523e:	d145      	bne.n	80052cc <d_print_function_type+0x128>
 8005240:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005244:	29ff      	cmp	r1, #255	; 0xff
 8005246:	d04e      	beq.n	80052e6 <d_print_function_type+0x142>
 8005248:	1c4b      	adds	r3, r1, #1
 800524a:	f04f 0828 	mov.w	r8, #40	; 0x28
 800524e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005252:	f804 8001 	strb.w	r8, [r4, r1]
 8005256:	f04f 0900 	mov.w	r9, #0
 800525a:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
 800525e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005262:	2111      	movs	r1, #17
 8005264:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8005268:	464b      	mov	r3, r9
 800526a:	462a      	mov	r2, r5
 800526c:	4620      	mov	r0, r4
 800526e:	f000 f885 	bl	800537c <d_print_mod_list>
 8005272:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005276:	29ff      	cmp	r1, #255	; 0xff
 8005278:	d053      	beq.n	8005322 <d_print_function_type+0x17e>
 800527a:	1c4b      	adds	r3, r1, #1
 800527c:	2229      	movs	r2, #41	; 0x29
 800527e:	2bff      	cmp	r3, #255	; 0xff
 8005280:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005284:	5462      	strb	r2, [r4, r1]
 8005286:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800528a:	d1b3      	bne.n	80051f4 <d_print_function_type+0x50>
 800528c:	4619      	mov	r1, r3
 800528e:	2300      	movs	r3, #0
 8005290:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8005294:	4620      	mov	r0, r4
 8005296:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800529a:	4798      	blx	r3
 800529c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80052a0:	3301      	adds	r3, #1
 80052a2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80052a6:	2328      	movs	r3, #40	; 0x28
 80052a8:	7023      	strb	r3, [r4, #0]
 80052aa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80052ae:	6932      	ldr	r2, [r6, #16]
 80052b0:	2101      	movs	r1, #1
 80052b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80052b6:	2a00      	cmp	r2, #0
 80052b8:	d1a5      	bne.n	8005206 <d_print_function_type+0x62>
 80052ba:	e7ac      	b.n	8005216 <d_print_function_type+0x72>
 80052bc:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80052c0:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80052c4:	2a28      	cmp	r2, #40	; 0x28
 80052c6:	d0bb      	beq.n	8005240 <d_print_function_type+0x9c>
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	d0b9      	beq.n	8005240 <d_print_function_type+0x9c>
 80052cc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80052d0:	2bff      	cmp	r3, #255	; 0xff
 80052d2:	d03e      	beq.n	8005352 <d_print_function_type+0x1ae>
 80052d4:	1c59      	adds	r1, r3, #1
 80052d6:	2220      	movs	r2, #32
 80052d8:	29ff      	cmp	r1, #255	; 0xff
 80052da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80052de:	54e2      	strb	r2, [r4, r3]
 80052e0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80052e4:	d1b0      	bne.n	8005248 <d_print_function_type+0xa4>
 80052e6:	2700      	movs	r7, #0
 80052e8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80052ec:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80052f0:	4620      	mov	r0, r4
 80052f2:	4798      	blx	r3
 80052f4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80052f8:	3301      	adds	r3, #1
 80052fa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80052fe:	4639      	mov	r1, r7
 8005300:	2301      	movs	r3, #1
 8005302:	e7a2      	b.n	800524a <d_print_function_type+0xa6>
 8005304:	2600      	movs	r6, #0
 8005306:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800530a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800530e:	4620      	mov	r0, r4
 8005310:	4798      	blx	r3
 8005312:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005316:	3301      	adds	r3, #1
 8005318:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800531c:	4631      	mov	r1, r6
 800531e:	2301      	movs	r3, #1
 8005320:	e77a      	b.n	8005218 <d_print_function_type+0x74>
 8005322:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8005326:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800532a:	4620      	mov	r0, r4
 800532c:	4798      	blx	r3
 800532e:	f642 0329 	movw	r3, #10281	; 0x2829
 8005332:	8023      	strh	r3, [r4, #0]
 8005334:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005338:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800533c:	6932      	ldr	r2, [r6, #16]
 800533e:	3301      	adds	r3, #1
 8005340:	2102      	movs	r1, #2
 8005342:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005346:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800534a:	2a00      	cmp	r2, #0
 800534c:	f47f af5b 	bne.w	8005206 <d_print_function_type+0x62>
 8005350:	e761      	b.n	8005216 <d_print_function_type+0x72>
 8005352:	2200      	movs	r2, #0
 8005354:	4619      	mov	r1, r3
 8005356:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800535a:	f8d4 7108 	ldr.w	r7, [r4, #264]	; 0x108
 800535e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005362:	4620      	mov	r0, r4
 8005364:	47b8      	blx	r7
 8005366:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800536a:	2220      	movs	r2, #32
 800536c:	3301      	adds	r3, #1
 800536e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005372:	7022      	strb	r2, [r4, #0]
 8005374:	2101      	movs	r1, #1
 8005376:	e767      	b.n	8005248 <d_print_function_type+0xa4>
 8005378:	00043107 	.word	0x00043107

0800537c <d_print_mod_list>:
 800537c:	2a00      	cmp	r2, #0
 800537e:	f000 80c2 	beq.w	8005506 <d_print_mod_list+0x18a>
 8005382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005386:	4605      	mov	r5, r0
 8005388:	b088      	sub	sp, #32
 800538a:	461e      	mov	r6, r3
 800538c:	4614      	mov	r4, r2
 800538e:	2701      	movs	r7, #1
 8005390:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8005394:	b9ca      	cbnz	r2, 80053ca <d_print_mod_list+0x4e>
 8005396:	68a2      	ldr	r2, [r4, #8]
 8005398:	bb0a      	cbnz	r2, 80053de <d_print_mod_list+0x62>
 800539a:	6862      	ldr	r2, [r4, #4]
 800539c:	7811      	ldrb	r1, [r2, #0]
 800539e:	b1be      	cbz	r6, 80053d0 <d_print_mod_list+0x54>
 80053a0:	68e3      	ldr	r3, [r4, #12]
 80053a2:	f8d5 8110 	ldr.w	r8, [r5, #272]	; 0x110
 80053a6:	60a7      	str	r7, [r4, #8]
 80053a8:	2929      	cmp	r1, #41	; 0x29
 80053aa:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 80053ae:	d024      	beq.n	80053fa <d_print_mod_list+0x7e>
 80053b0:	292a      	cmp	r1, #42	; 0x2a
 80053b2:	d02c      	beq.n	800540e <d_print_mod_list+0x92>
 80053b4:	2902      	cmp	r1, #2
 80053b6:	d034      	beq.n	8005422 <d_print_mod_list+0xa6>
 80053b8:	2111      	movs	r1, #17
 80053ba:	4628      	mov	r0, r5
 80053bc:	f7ff fbda 	bl	8004b74 <d_print_mod>
 80053c0:	6824      	ldr	r4, [r4, #0]
 80053c2:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
 80053c6:	2c00      	cmp	r4, #0
 80053c8:	d1e2      	bne.n	8005390 <d_print_mod_list+0x14>
 80053ca:	b008      	add	sp, #32
 80053cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d0:	294e      	cmp	r1, #78	; 0x4e
 80053d2:	d004      	beq.n	80053de <d_print_mod_list+0x62>
 80053d4:	d807      	bhi.n	80053e6 <d_print_mod_list+0x6a>
 80053d6:	f1a1 031c 	sub.w	r3, r1, #28
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d8e0      	bhi.n	80053a0 <d_print_mod_list+0x24>
 80053de:	6824      	ldr	r4, [r4, #0]
 80053e0:	2c00      	cmp	r4, #0
 80053e2:	d1d5      	bne.n	8005390 <d_print_mod_list+0x14>
 80053e4:	e7f1      	b.n	80053ca <d_print_mod_list+0x4e>
 80053e6:	3950      	subs	r1, #80	; 0x50
 80053e8:	2901      	cmp	r1, #1
 80053ea:	d9f8      	bls.n	80053de <d_print_mod_list+0x62>
 80053ec:	68e3      	ldr	r3, [r4, #12]
 80053ee:	f8d5 8110 	ldr.w	r8, [r5, #272]	; 0x110
 80053f2:	60a7      	str	r7, [r4, #8]
 80053f4:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 80053f8:	e7de      	b.n	80053b8 <d_print_mod_list+0x3c>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	2111      	movs	r1, #17
 80053fe:	4628      	mov	r0, r5
 8005400:	f7ff fed0 	bl	80051a4 <d_print_function_type>
 8005404:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
 8005408:	b008      	add	sp, #32
 800540a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	2111      	movs	r1, #17
 8005412:	4628      	mov	r0, r5
 8005414:	f000 f8d6 	bl	80055c4 <d_print_array_type>
 8005418:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
 800541c:	b008      	add	sp, #32
 800541e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005422:	4e64      	ldr	r6, [pc, #400]	; (80055b4 <d_print_mod_list+0x238>)
 8005424:	f8d5 7114 	ldr.w	r7, [r5, #276]	; 0x114
 8005428:	68d2      	ldr	r2, [r2, #12]
 800542a:	f04f 0900 	mov.w	r9, #0
 800542e:	2111      	movs	r1, #17
 8005430:	f8c5 9114 	str.w	r9, [r5, #276]	; 0x114
 8005434:	4628      	mov	r0, r5
 8005436:	f7ff fb6f 	bl	8004b18 <d_print_comp>
 800543a:	f106 0a01 	add.w	sl, r6, #1
 800543e:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
 8005442:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005446:	273a      	movs	r7, #58	; 0x3a
 8005448:	e00a      	b.n	8005460 <d_print_mod_list+0xe4>
 800544a:	460b      	mov	r3, r1
 800544c:	3101      	adds	r1, #1
 800544e:	4556      	cmp	r6, sl
 8005450:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005454:	54ef      	strb	r7, [r5, r3]
 8005456:	f885 7104 	strb.w	r7, [r5, #260]	; 0x104
 800545a:	d013      	beq.n	8005484 <d_print_mod_list+0x108>
 800545c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8005460:	29ff      	cmp	r1, #255	; 0xff
 8005462:	d1f2      	bne.n	800544a <d_print_mod_list+0xce>
 8005464:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005468:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800546c:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 8005470:	4628      	mov	r0, r5
 8005472:	4798      	blx	r3
 8005474:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 8005478:	3301      	adds	r3, #1
 800547a:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
 800547e:	2101      	movs	r1, #1
 8005480:	2300      	movs	r3, #0
 8005482:	e7e4      	b.n	800544e <d_print_mod_list+0xd2>
 8005484:	6863      	ldr	r3, [r4, #4]
 8005486:	691c      	ldr	r4, [r3, #16]
 8005488:	7823      	ldrb	r3, [r4, #0]
 800548a:	2b48      	cmp	r3, #72	; 0x48
 800548c:	d017      	beq.n	80054be <d_print_mod_list+0x142>
 800548e:	2b4e      	cmp	r3, #78	; 0x4e
 8005490:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
 8005494:	f1a3 011c 	sub.w	r1, r3, #28
 8005498:	d00e      	beq.n	80054b8 <d_print_mod_list+0x13c>
 800549a:	d80b      	bhi.n	80054b4 <d_print_mod_list+0x138>
 800549c:	2904      	cmp	r1, #4
 800549e:	d90b      	bls.n	80054b8 <d_print_mod_list+0x13c>
 80054a0:	4622      	mov	r2, r4
 80054a2:	2111      	movs	r1, #17
 80054a4:	4628      	mov	r0, r5
 80054a6:	f7ff fb37 	bl	8004b18 <d_print_comp>
 80054aa:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
 80054ae:	b008      	add	sp, #32
 80054b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b4:	2a01      	cmp	r2, #1
 80054b6:	d8f3      	bhi.n	80054a0 <d_print_mod_list+0x124>
 80054b8:	68e4      	ldr	r4, [r4, #12]
 80054ba:	7823      	ldrb	r3, [r4, #0]
 80054bc:	e7e7      	b.n	800548e <d_print_mod_list+0x112>
 80054be:	4f3e      	ldr	r7, [pc, #248]	; (80055b8 <d_print_mod_list+0x23c>)
 80054c0:	267b      	movs	r6, #123	; 0x7b
 80054c2:	f107 0a0c 	add.w	sl, r7, #12
 80054c6:	f04f 0900 	mov.w	r9, #0
 80054ca:	e00a      	b.n	80054e2 <d_print_mod_list+0x166>
 80054cc:	460b      	mov	r3, r1
 80054ce:	3101      	adds	r1, #1
 80054d0:	4557      	cmp	r7, sl
 80054d2:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 80054d6:	54ee      	strb	r6, [r5, r3]
 80054d8:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
 80054dc:	d014      	beq.n	8005508 <d_print_mod_list+0x18c>
 80054de:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 80054e2:	29ff      	cmp	r1, #255	; 0xff
 80054e4:	d1f2      	bne.n	80054cc <d_print_mod_list+0x150>
 80054e6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80054ea:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80054ee:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 80054f2:	4628      	mov	r0, r5
 80054f4:	4798      	blx	r3
 80054f6:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 80054fa:	3301      	adds	r3, #1
 80054fc:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
 8005500:	2101      	movs	r1, #1
 8005502:	2300      	movs	r3, #0
 8005504:	e7e4      	b.n	80054d0 <d_print_mod_list+0x154>
 8005506:	4770      	bx	lr
 8005508:	6922      	ldr	r2, [r4, #16]
 800550a:	492c      	ldr	r1, [pc, #176]	; (80055bc <d_print_mod_list+0x240>)
 800550c:	3201      	adds	r2, #1
 800550e:	a801      	add	r0, sp, #4
 8005510:	f018 fcc6 	bl	801dea0 <siprintf>
 8005514:	a801      	add	r0, sp, #4
 8005516:	f000 fe83 	bl	8006220 <strlen>
 800551a:	b320      	cbz	r0, 8005566 <d_print_mod_list+0x1ea>
 800551c:	ae01      	add	r6, sp, #4
 800551e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005522:	eb06 0a00 	add.w	sl, r6, r0
 8005526:	f04f 0900 	mov.w	r9, #0
 800552a:	e008      	b.n	800553e <d_print_mod_list+0x1c2>
 800552c:	460b      	mov	r3, r1
 800552e:	3101      	adds	r1, #1
 8005530:	4556      	cmp	r6, sl
 8005532:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005536:	54ef      	strb	r7, [r5, r3]
 8005538:	f885 7104 	strb.w	r7, [r5, #260]	; 0x104
 800553c:	d015      	beq.n	800556a <d_print_mod_list+0x1ee>
 800553e:	29ff      	cmp	r1, #255	; 0xff
 8005540:	f816 7b01 	ldrb.w	r7, [r6], #1
 8005544:	d1f2      	bne.n	800552c <d_print_mod_list+0x1b0>
 8005546:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800554a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800554e:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 8005552:	4628      	mov	r0, r5
 8005554:	4798      	blx	r3
 8005556:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 800555a:	3301      	adds	r3, #1
 800555c:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
 8005560:	2101      	movs	r1, #1
 8005562:	2300      	movs	r3, #0
 8005564:	e7e4      	b.n	8005530 <d_print_mod_list+0x1b4>
 8005566:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800556a:	4f15      	ldr	r7, [pc, #84]	; (80055c0 <d_print_mod_list+0x244>)
 800556c:	267d      	movs	r6, #125	; 0x7d
 800556e:	f107 0a02 	add.w	sl, r7, #2
 8005572:	f04f 0900 	mov.w	r9, #0
 8005576:	e00a      	b.n	800558e <d_print_mod_list+0x212>
 8005578:	460b      	mov	r3, r1
 800557a:	3101      	adds	r1, #1
 800557c:	4557      	cmp	r7, sl
 800557e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005582:	54ee      	strb	r6, [r5, r3]
 8005584:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
 8005588:	d096      	beq.n	80054b8 <d_print_mod_list+0x13c>
 800558a:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800558e:	29ff      	cmp	r1, #255	; 0xff
 8005590:	d1f2      	bne.n	8005578 <d_print_mod_list+0x1fc>
 8005592:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005596:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800559a:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 800559e:	4628      	mov	r0, r5
 80055a0:	4798      	blx	r3
 80055a2:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 80055a6:	3301      	adds	r3, #1
 80055a8:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
 80055ac:	2101      	movs	r1, #1
 80055ae:	2300      	movs	r3, #0
 80055b0:	e7e4      	b.n	800557c <d_print_mod_list+0x200>
 80055b2:	bf00      	nop
 80055b4:	0802205c 	.word	0x0802205c
 80055b8:	08022060 	.word	0x08022060
 80055bc:	08021fec 	.word	0x08021fec
 80055c0:	08022070 	.word	0x08022070

080055c4 <d_print_array_type>:
 80055c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c8:	4604      	mov	r4, r0
 80055ca:	4617      	mov	r7, r2
 80055cc:	b153      	cbz	r3, 80055e4 <d_print_array_type+0x20>
 80055ce:	461e      	mov	r6, r3
 80055d0:	689d      	ldr	r5, [r3, #8]
 80055d2:	b37d      	cbz	r5, 8005634 <d_print_array_type+0x70>
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1fa      	bne.n	80055d0 <d_print_array_type+0xc>
 80055da:	4632      	mov	r2, r6
 80055dc:	2111      	movs	r1, #17
 80055de:	4620      	mov	r0, r4
 80055e0:	f7ff fecc 	bl	800537c <d_print_mod_list>
 80055e4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80055e8:	2bff      	cmp	r3, #255	; 0xff
 80055ea:	f000 809d 	beq.w	8005728 <d_print_array_type+0x164>
 80055ee:	1c59      	adds	r1, r3, #1
 80055f0:	2220      	movs	r2, #32
 80055f2:	29ff      	cmp	r1, #255	; 0xff
 80055f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80055f8:	54e2      	strb	r2, [r4, r3]
 80055fa:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80055fe:	d027      	beq.n	8005650 <d_print_array_type+0x8c>
 8005600:	225b      	movs	r2, #91	; 0x5b
 8005602:	1c4b      	adds	r3, r1, #1
 8005604:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005608:	5462      	strb	r2, [r4, r1]
 800560a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	b12a      	cbz	r2, 800561e <d_print_array_type+0x5a>
 8005612:	2111      	movs	r1, #17
 8005614:	4620      	mov	r0, r4
 8005616:	f7ff fa7f 	bl	8004b18 <d_print_comp>
 800561a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800561e:	2bff      	cmp	r3, #255	; 0xff
 8005620:	d02f      	beq.n	8005682 <d_print_array_type+0xbe>
 8005622:	1c59      	adds	r1, r3, #1
 8005624:	225d      	movs	r2, #93	; 0x5d
 8005626:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800562a:	54e2      	strb	r2, [r4, r3]
 800562c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b2a      	cmp	r3, #42	; 0x2a
 800563a:	d132      	bne.n	80056a2 <d_print_array_type+0xde>
 800563c:	2111      	movs	r1, #17
 800563e:	462b      	mov	r3, r5
 8005640:	4632      	mov	r2, r6
 8005642:	4620      	mov	r0, r4
 8005644:	f7ff fe9a 	bl	800537c <d_print_mod_list>
 8005648:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800564c:	29ff      	cmp	r1, #255	; 0xff
 800564e:	d1d7      	bne.n	8005600 <d_print_array_type+0x3c>
 8005650:	2200      	movs	r2, #0
 8005652:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005656:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800565a:	4620      	mov	r0, r4
 800565c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005660:	4798      	blx	r3
 8005662:	225b      	movs	r2, #91	; 0x5b
 8005664:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005668:	7022      	strb	r2, [r4, #0]
 800566a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	1c59      	adds	r1, r3, #1
 8005672:	2301      	movs	r3, #1
 8005674:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
 8005678:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800567c:	2a00      	cmp	r2, #0
 800567e:	d1c8      	bne.n	8005612 <d_print_array_type+0x4e>
 8005680:	e7cf      	b.n	8005622 <d_print_array_type+0x5e>
 8005682:	2500      	movs	r5, #0
 8005684:	4619      	mov	r1, r3
 8005686:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800568a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800568e:	4620      	mov	r0, r4
 8005690:	4798      	blx	r3
 8005692:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005696:	2101      	movs	r1, #1
 8005698:	440b      	add	r3, r1
 800569a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800569e:	462b      	mov	r3, r5
 80056a0:	e7c0      	b.n	8005624 <d_print_array_type+0x60>
 80056a2:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8005788 <d_print_array_type+0x1c4>
 80056a6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80056aa:	f04f 0920 	mov.w	r9, #32
 80056ae:	f108 0a01 	add.w	sl, r8, #1
 80056b2:	e00c      	b.n	80056ce <d_print_array_type+0x10a>
 80056b4:	460b      	mov	r3, r1
 80056b6:	45d0      	cmp	r8, sl
 80056b8:	f101 0101 	add.w	r1, r1, #1
 80056bc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80056c0:	f804 9003 	strb.w	r9, [r4, r3]
 80056c4:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80056c8:	d01a      	beq.n	8005700 <d_print_array_type+0x13c>
 80056ca:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 80056ce:	29ff      	cmp	r1, #255	; 0xff
 80056d0:	d1f0      	bne.n	80056b4 <d_print_array_type+0xf0>
 80056d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80056d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80056da:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80056de:	4620      	mov	r0, r4
 80056e0:	4798      	blx	r3
 80056e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80056e6:	3301      	adds	r3, #1
 80056e8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80056ec:	2300      	movs	r3, #0
 80056ee:	2101      	movs	r1, #1
 80056f0:	45d0      	cmp	r8, sl
 80056f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80056f6:	f804 9003 	strb.w	r9, [r4, r3]
 80056fa:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80056fe:	d1e4      	bne.n	80056ca <d_print_array_type+0x106>
 8005700:	2111      	movs	r1, #17
 8005702:	2300      	movs	r3, #0
 8005704:	4632      	mov	r2, r6
 8005706:	4620      	mov	r0, r4
 8005708:	f7ff fe38 	bl	800537c <d_print_mod_list>
 800570c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005710:	29ff      	cmp	r1, #255	; 0xff
 8005712:	d026      	beq.n	8005762 <d_print_array_type+0x19e>
 8005714:	1c4b      	adds	r3, r1, #1
 8005716:	2229      	movs	r2, #41	; 0x29
 8005718:	2bff      	cmp	r3, #255	; 0xff
 800571a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800571e:	5462      	strb	r2, [r4, r1]
 8005720:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005724:	f47f af63 	bne.w	80055ee <d_print_array_type+0x2a>
 8005728:	2200      	movs	r2, #0
 800572a:	4619      	mov	r1, r3
 800572c:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8005730:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
 8005734:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005738:	4620      	mov	r0, r4
 800573a:	47a8      	blx	r5
 800573c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005740:	225b      	movs	r2, #91	; 0x5b
 8005742:	f645 3120 	movw	r1, #23328	; 0x5b20
 8005746:	8021      	strh	r1, [r4, #0]
 8005748:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	3301      	adds	r3, #1
 8005750:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005754:	2302      	movs	r3, #2
 8005756:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800575a:	2a00      	cmp	r2, #0
 800575c:	f47f af59 	bne.w	8005612 <d_print_array_type+0x4e>
 8005760:	e75f      	b.n	8005622 <d_print_array_type+0x5e>
 8005762:	2200      	movs	r2, #0
 8005764:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005768:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800576c:	4620      	mov	r0, r4
 800576e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005772:	4798      	blx	r3
 8005774:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005778:	2229      	movs	r2, #41	; 0x29
 800577a:	3301      	adds	r3, #1
 800577c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005780:	7022      	strb	r2, [r4, #0]
 8005782:	2301      	movs	r3, #1
 8005784:	e733      	b.n	80055ee <d_print_array_type+0x2a>
 8005786:	bf00      	nop
 8005788:	08022268 	.word	0x08022268

0800578c <d_print_expr_op>:
 800578c:	7811      	ldrb	r1, [r2, #0]
 800578e:	2932      	cmp	r1, #50	; 0x32
 8005790:	d002      	beq.n	8005798 <d_print_expr_op+0xc>
 8005792:	2111      	movs	r1, #17
 8005794:	f7ff b9c0 	b.w	8004b18 <d_print_comp>
 8005798:	68d3      	ldr	r3, [r2, #12]
 800579a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800579e:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
 80057a2:	b367      	cbz	r7, 80057fe <d_print_expr_op+0x72>
 80057a4:	442f      	add	r7, r5
 80057a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80057aa:	4604      	mov	r4, r0
 80057ac:	3d01      	subs	r5, #1
 80057ae:	3f01      	subs	r7, #1
 80057b0:	f04f 0800 	mov.w	r8, #0
 80057b4:	e009      	b.n	80057ca <d_print_expr_op+0x3e>
 80057b6:	460b      	mov	r3, r1
 80057b8:	42bd      	cmp	r5, r7
 80057ba:	f101 0101 	add.w	r1, r1, #1
 80057be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80057c2:	54e6      	strb	r6, [r4, r3]
 80057c4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80057c8:	d019      	beq.n	80057fe <d_print_expr_op+0x72>
 80057ca:	29ff      	cmp	r1, #255	; 0xff
 80057cc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80057d0:	d1f1      	bne.n	80057b6 <d_print_expr_op+0x2a>
 80057d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80057d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057da:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80057de:	4620      	mov	r0, r4
 80057e0:	4798      	blx	r3
 80057e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80057e6:	3301      	adds	r3, #1
 80057e8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80057ec:	2300      	movs	r3, #0
 80057ee:	2101      	movs	r1, #1
 80057f0:	42bd      	cmp	r5, r7
 80057f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80057f6:	54e6      	strb	r6, [r4, r3]
 80057f8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80057fc:	d1e5      	bne.n	80057ca <d_print_expr_op+0x3e>
 80057fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005802:	bf00      	nop

08005804 <d_demangle_callback.constprop.0>:
 8005804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005808:	ed2d 8b02 	vpush	{d8}
 800580c:	b0e7      	sub	sp, #412	; 0x19c
 800580e:	7803      	ldrb	r3, [r0, #0]
 8005810:	af00      	add	r7, sp, #0
 8005812:	2b5f      	cmp	r3, #95	; 0x5f
 8005814:	e9c7 2100 	strd	r2, r1, [r7]
 8005818:	4605      	mov	r5, r0
 800581a:	f000 8144 	beq.w	8005aa6 <d_demangle_callback.constprop.0+0x2a2>
 800581e:	49a9      	ldr	r1, [pc, #676]	; (8005ac4 <d_demangle_callback.constprop.0+0x2c0>)
 8005820:	2208      	movs	r2, #8
 8005822:	4628      	mov	r0, r5
 8005824:	f019 f8a6 	bl	801e974 <strncmp>
 8005828:	2800      	cmp	r0, #0
 800582a:	f000 8107 	beq.w	8005a3c <d_demangle_callback.constprop.0+0x238>
 800582e:	f04f 0900 	mov.w	r9, #0
 8005832:	2301      	movs	r3, #1
 8005834:	f1b9 0f02 	cmp.w	r9, #2
 8005838:	647b      	str	r3, [r7, #68]	; 0x44
 800583a:	bf0c      	ite	eq
 800583c:	2345      	moveq	r3, #69	; 0x45
 800583e:	2346      	movne	r3, #70	; 0x46
 8005840:	f1a9 0a02 	sub.w	sl, r9, #2
 8005844:	ee08 3a10 	vmov	s16, r3
 8005848:	fa5f fa8a 	uxtb.w	sl, sl
 800584c:	4628      	mov	r0, r5
 800584e:	f000 fce7 	bl	8006220 <strlen>
 8005852:	182b      	adds	r3, r5, r0
 8005854:	0042      	lsls	r2, r0, #1
 8005856:	2100      	movs	r1, #0
 8005858:	e9c7 5303 	strd	r5, r3, [r7, #12]
 800585c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005860:	f04f 0311 	mov.w	r3, #17
 8005864:	e9c7 3505 	strd	r3, r5, [r7, #20]
 8005868:	e9c7 1208 	strd	r1, r2, [r7, #32]
 800586c:	e9c7 100b 	strd	r1, r0, [r7, #44]	; 0x2c
 8005870:	e9c7 110d 	strd	r1, r1, [r7, #52]	; 0x34
 8005874:	e9c7 110f 	strd	r1, r1, [r7, #60]	; 0x3c
 8005878:	64b9      	str	r1, [r7, #72]	; 0x48
 800587a:	f200 811b 	bhi.w	8005ab4 <d_demangle_callback.constprop.0+0x2b0>
 800587e:	0083      	lsls	r3, r0, #2
 8005880:	46e8      	mov	r8, sp
 8005882:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005886:	3307      	adds	r3, #7
 8005888:	eba8 00c0 	sub.w	r0, r8, r0, lsl #3
 800588c:	4685      	mov	sp, r0
 800588e:	f023 0307 	bic.w	r3, r3, #7
 8005892:	466e      	mov	r6, sp
 8005894:	f1b9 0f01 	cmp.w	r9, #1
 8005898:	ebad 0d03 	sub.w	sp, sp, r3
 800589c:	61fe      	str	r6, [r7, #28]
 800589e:	f8c7 d028 	str.w	sp, [r7, #40]	; 0x28
 80058a2:	d040      	beq.n	8005926 <d_demangle_callback.constprop.0+0x122>
 80058a4:	f1ba 0f01 	cmp.w	sl, #1
 80058a8:	d835      	bhi.n	8005916 <d_demangle_callback.constprop.0+0x112>
 80058aa:	7aeb      	ldrb	r3, [r5, #11]
 80058ac:	f105 040b 	add.w	r4, r5, #11
 80058b0:	2b5f      	cmp	r3, #95	; 0x5f
 80058b2:	61bc      	str	r4, [r7, #24]
 80058b4:	d103      	bne.n	80058be <d_demangle_callback.constprop.0+0xba>
 80058b6:	7b2b      	ldrb	r3, [r5, #12]
 80058b8:	2b5a      	cmp	r3, #90	; 0x5a
 80058ba:	f000 80b0 	beq.w	8005a1e <d_demangle_callback.constprop.0+0x21a>
 80058be:	2a00      	cmp	r2, #0
 80058c0:	f340 80ab 	ble.w	8005a1a <d_demangle_callback.constprop.0+0x216>
 80058c4:	4620      	mov	r0, r4
 80058c6:	f000 fcab 	bl	8006220 <strlen>
 80058ca:	2300      	movs	r3, #0
 80058cc:	2201      	movs	r2, #1
 80058ce:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80058d2:	623a      	str	r2, [r7, #32]
 80058d4:	2800      	cmp	r0, #0
 80058d6:	f000 80a0 	beq.w	8005a1a <d_demangle_callback.constprop.0+0x216>
 80058da:	e9c6 4003 	strd	r4, r0, [r6, #12]
 80058de:	7033      	strb	r3, [r6, #0]
 80058e0:	2300      	movs	r3, #0
 80058e2:	4632      	mov	r2, r6
 80058e4:	ee18 1a10 	vmov	r1, s16
 80058e8:	f107 000c 	add.w	r0, r7, #12
 80058ec:	f7fa fc70 	bl	80001d0 <d_make_comp>
 80058f0:	4606      	mov	r6, r0
 80058f2:	4620      	mov	r0, r4
 80058f4:	f000 fc94 	bl	8006220 <strlen>
 80058f8:	1823      	adds	r3, r4, r0
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	5c23      	ldrb	r3, [r4, r0]
 80058fe:	b913      	cbnz	r3, 8005906 <d_demangle_callback.constprop.0+0x102>
 8005900:	2e00      	cmp	r6, #0
 8005902:	f040 80e1 	bne.w	8005ac8 <d_demangle_callback.constprop.0+0x2c4>
 8005906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005908:	3301      	adds	r3, #1
 800590a:	f040 80c3 	bne.w	8005a94 <d_demangle_callback.constprop.0+0x290>
 800590e:	2300      	movs	r3, #0
 8005910:	647b      	str	r3, [r7, #68]	; 0x44
 8005912:	46c5      	mov	sp, r8
 8005914:	e79a      	b.n	800584c <d_demangle_callback.constprop.0+0x48>
 8005916:	f107 000c 	add.w	r0, r7, #12
 800591a:	f7fb f8a9 	bl	8000a70 <d_type>
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	4606      	mov	r6, r0
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	e7eb      	b.n	80058fe <d_demangle_callback.constprop.0+0xfa>
 8005926:	782b      	ldrb	r3, [r5, #0]
 8005928:	2b5f      	cmp	r3, #95	; 0x5f
 800592a:	d1ec      	bne.n	8005906 <d_demangle_callback.constprop.0+0x102>
 800592c:	786b      	ldrb	r3, [r5, #1]
 800592e:	1c6a      	adds	r2, r5, #1
 8005930:	2b5a      	cmp	r3, #90	; 0x5a
 8005932:	61ba      	str	r2, [r7, #24]
 8005934:	d1e7      	bne.n	8005906 <d_demangle_callback.constprop.0+0x102>
 8005936:	78ab      	ldrb	r3, [r5, #2]
 8005938:	1caa      	adds	r2, r5, #2
 800593a:	2b47      	cmp	r3, #71	; 0x47
 800593c:	61ba      	str	r2, [r7, #24]
 800593e:	f000 809b 	beq.w	8005a78 <d_demangle_callback.constprop.0+0x274>
 8005942:	2b54      	cmp	r3, #84	; 0x54
 8005944:	f000 8098 	beq.w	8005a78 <d_demangle_callback.constprop.0+0x274>
 8005948:	4649      	mov	r1, r9
 800594a:	f107 000c 	add.w	r0, r7, #12
 800594e:	f7fc ffeb 	bl	8002928 <d_encoding.part.0>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	07db      	lsls	r3, r3, #31
 8005956:	4606      	mov	r6, r0
 8005958:	f140 8097 	bpl.w	8005a8a <d_demangle_callback.constprop.0+0x286>
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	7813      	ldrb	r3, [r2, #0]
 8005960:	2b2e      	cmp	r3, #46	; 0x2e
 8005962:	d1cc      	bne.n	80058fe <d_demangle_callback.constprop.0+0xfa>
 8005964:	4633      	mov	r3, r6
 8005966:	4616      	mov	r6, r2
 8005968:	461a      	mov	r2, r3
 800596a:	7873      	ldrb	r3, [r6, #1]
 800596c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8005970:	2919      	cmp	r1, #25
 8005972:	f04f 0b00 	mov.w	fp, #0
 8005976:	d945      	bls.n	8005a04 <d_demangle_callback.constprop.0+0x200>
 8005978:	2b5f      	cmp	r3, #95	; 0x5f
 800597a:	d043      	beq.n	8005a04 <d_demangle_callback.constprop.0+0x200>
 800597c:	3b30      	subs	r3, #48	; 0x30
 800597e:	2b09      	cmp	r3, #9
 8005980:	f200 80fd 	bhi.w	8005b7e <d_demangle_callback.constprop.0+0x37a>
 8005984:	7831      	ldrb	r1, [r6, #0]
 8005986:	4634      	mov	r4, r6
 8005988:	292e      	cmp	r1, #46	; 0x2e
 800598a:	d112      	bne.n	80059b2 <d_demangle_callback.constprop.0+0x1ae>
 800598c:	7863      	ldrb	r3, [r4, #1]
 800598e:	3b30      	subs	r3, #48	; 0x30
 8005990:	2b09      	cmp	r3, #9
 8005992:	d80e      	bhi.n	80059b2 <d_demangle_callback.constprop.0+0x1ae>
 8005994:	78a3      	ldrb	r3, [r4, #2]
 8005996:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800599a:	1ca0      	adds	r0, r4, #2
 800599c:	2909      	cmp	r1, #9
 800599e:	4604      	mov	r4, r0
 80059a0:	d805      	bhi.n	80059ae <d_demangle_callback.constprop.0+0x1aa>
 80059a2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80059a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80059aa:	2909      	cmp	r1, #9
 80059ac:	d9f9      	bls.n	80059a2 <d_demangle_callback.constprop.0+0x19e>
 80059ae:	2b2e      	cmp	r3, #46	; 0x2e
 80059b0:	d0ec      	beq.n	800598c <d_demangle_callback.constprop.0+0x188>
 80059b2:	e9d7 1308 	ldrd	r1, r3, [r7, #32]
 80059b6:	4299      	cmp	r1, r3
 80059b8:	61bc      	str	r4, [r7, #24]
 80059ba:	eba4 0006 	sub.w	r0, r4, r6
 80059be:	da67      	bge.n	8005a90 <d_demangle_callback.constprop.0+0x28c>
 80059c0:	f8d7 c01c 	ldr.w	ip, [r7, #28]
 80059c4:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 80059c8:	eb0c 038e 	add.w	r3, ip, lr, lsl #2
 80059cc:	3101      	adds	r1, #1
 80059ce:	2800      	cmp	r0, #0
 80059d0:	e9c3 bb01 	strd	fp, fp, [r3, #4]
 80059d4:	6239      	str	r1, [r7, #32]
 80059d6:	dd5b      	ble.n	8005a90 <d_demangle_callback.constprop.0+0x28c>
 80059d8:	e9c3 bb01 	strd	fp, fp, [r3, #4]
 80059dc:	f80c b02e 	strb.w	fp, [ip, lr, lsl #2]
 80059e0:	e9c3 6003 	strd	r6, r0, [r3, #12]
 80059e4:	214f      	movs	r1, #79	; 0x4f
 80059e6:	f107 000c 	add.w	r0, r7, #12
 80059ea:	f7fa fbf1 	bl	80001d0 <d_make_comp>
 80059ee:	7823      	ldrb	r3, [r4, #0]
 80059f0:	2b2e      	cmp	r3, #46	; 0x2e
 80059f2:	4602      	mov	r2, r0
 80059f4:	f040 80c1 	bne.w	8005b7a <d_demangle_callback.constprop.0+0x376>
 80059f8:	4626      	mov	r6, r4
 80059fa:	7873      	ldrb	r3, [r6, #1]
 80059fc:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8005a00:	2919      	cmp	r1, #25
 8005a02:	d8b9      	bhi.n	8005978 <d_demangle_callback.constprop.0+0x174>
 8005a04:	1cb3      	adds	r3, r6, #2
 8005a06:	461c      	mov	r4, r3
 8005a08:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005a0c:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
 8005a10:	2819      	cmp	r0, #25
 8005a12:	d9f8      	bls.n	8005a06 <d_demangle_callback.constprop.0+0x202>
 8005a14:	295f      	cmp	r1, #95	; 0x5f
 8005a16:	d0f6      	beq.n	8005a06 <d_demangle_callback.constprop.0+0x202>
 8005a18:	e7b6      	b.n	8005988 <d_demangle_callback.constprop.0+0x184>
 8005a1a:	2600      	movs	r6, #0
 8005a1c:	e760      	b.n	80058e0 <d_demangle_callback.constprop.0+0xdc>
 8005a1e:	7b6b      	ldrb	r3, [r5, #13]
 8005a20:	f105 020d 	add.w	r2, r5, #13
 8005a24:	2b47      	cmp	r3, #71	; 0x47
 8005a26:	61ba      	str	r2, [r7, #24]
 8005a28:	f107 000c 	add.w	r0, r7, #12
 8005a2c:	d001      	beq.n	8005a32 <d_demangle_callback.constprop.0+0x22e>
 8005a2e:	2b54      	cmp	r3, #84	; 0x54
 8005a30:	d11d      	bne.n	8005a6e <d_demangle_callback.constprop.0+0x26a>
 8005a32:	f7fc fbf1 	bl	8002218 <d_special_name>
 8005a36:	69bc      	ldr	r4, [r7, #24]
 8005a38:	4606      	mov	r6, r0
 8005a3a:	e751      	b.n	80058e0 <d_demangle_callback.constprop.0+0xdc>
 8005a3c:	7a2b      	ldrb	r3, [r5, #8]
 8005a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a40:	d004      	beq.n	8005a4c <d_demangle_callback.constprop.0+0x248>
 8005a42:	2b5f      	cmp	r3, #95	; 0x5f
 8005a44:	d002      	beq.n	8005a4c <d_demangle_callback.constprop.0+0x248>
 8005a46:	2b24      	cmp	r3, #36	; 0x24
 8005a48:	f47f aef1 	bne.w	800582e <d_demangle_callback.constprop.0+0x2a>
 8005a4c:	7a6b      	ldrb	r3, [r5, #9]
 8005a4e:	2b44      	cmp	r3, #68	; 0x44
 8005a50:	d002      	beq.n	8005a58 <d_demangle_callback.constprop.0+0x254>
 8005a52:	2b49      	cmp	r3, #73	; 0x49
 8005a54:	f47f aeeb 	bne.w	800582e <d_demangle_callback.constprop.0+0x2a>
 8005a58:	7aaa      	ldrb	r2, [r5, #10]
 8005a5a:	2a5f      	cmp	r2, #95	; 0x5f
 8005a5c:	f47f aee7 	bne.w	800582e <d_demangle_callback.constprop.0+0x2a>
 8005a60:	2b49      	cmp	r3, #73	; 0x49
 8005a62:	bf0c      	ite	eq
 8005a64:	f04f 0902 	moveq.w	r9, #2
 8005a68:	f04f 0903 	movne.w	r9, #3
 8005a6c:	e6e1      	b.n	8005832 <d_demangle_callback.constprop.0+0x2e>
 8005a6e:	f7fc ff5b 	bl	8002928 <d_encoding.part.0>
 8005a72:	69bc      	ldr	r4, [r7, #24]
 8005a74:	4606      	mov	r6, r0
 8005a76:	e733      	b.n	80058e0 <d_demangle_callback.constprop.0+0xdc>
 8005a78:	f107 000c 	add.w	r0, r7, #12
 8005a7c:	f7fc fbcc 	bl	8002218 <d_special_name>
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	07db      	lsls	r3, r3, #31
 8005a84:	4606      	mov	r6, r0
 8005a86:	f53f af69 	bmi.w	800595c <d_demangle_callback.constprop.0+0x158>
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	e736      	b.n	80058fe <d_demangle_callback.constprop.0+0xfa>
 8005a90:	2300      	movs	r3, #0
 8005a92:	e7a7      	b.n	80059e4 <d_demangle_callback.constprop.0+0x1e0>
 8005a94:	2000      	movs	r0, #0
 8005a96:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8005a9a:	46c5      	mov	sp, r8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	ecbd 8b02 	vpop	{d8}
 8005aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa6:	7843      	ldrb	r3, [r0, #1]
 8005aa8:	2b5a      	cmp	r3, #90	; 0x5a
 8005aaa:	f47f aeb8 	bne.w	800581e <d_demangle_callback.constprop.0+0x1a>
 8005aae:	f04f 0901 	mov.w	r9, #1
 8005ab2:	e6be      	b.n	8005832 <d_demangle_callback.constprop.0+0x2e>
 8005ab4:	4608      	mov	r0, r1
 8005ab6:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8005aba:	46bd      	mov	sp, r7
 8005abc:	ecbd 8b02 	vpop	{d8}
 8005ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac4:	08021ff0 	.word	0x08021ff0
 8005ac8:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 8005ada:	4620      	mov	r0, r4
 8005adc:	e9c4 3344 	strd	r3, r3, [r4, #272]	; 0x110
 8005ae0:	e9c4 3349 	strd	r3, r3, [r4, #292]	; 0x124
 8005ae4:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
 8005ae8:	e9c4 334d 	strd	r3, r3, [r4, #308]	; 0x134
 8005aec:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
 8005af0:	607b      	str	r3, [r7, #4]
 8005af2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005af6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005afa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005afe:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 8005b02:	f7fa fc55 	bl	80003b0 <d_count_templates_scopes>
 8005b06:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005b10:	da01      	bge.n	8005b16 <d_demangle_callback.constprop.0+0x312>
 8005b12:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8005b16:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 8005b1a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8005b1e:	2901      	cmp	r1, #1
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	4632      	mov	r2, r6
 8005b26:	bfb8      	it	lt
 8005b28:	2101      	movlt	r1, #1
 8005b2a:	466e      	mov	r6, sp
 8005b2c:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	468d      	mov	sp, r1
 8005b34:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 8005b38:	4668      	mov	r0, sp
 8005b3a:	bfb8      	it	lt
 8005b3c:	2301      	movlt	r3, #1
 8005b3e:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
 8005b42:	469d      	mov	sp, r3
 8005b44:	2500      	movs	r5, #0
 8005b46:	f8c4 1130 	str.w	r1, [r4, #304]	; 0x130
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	2111      	movs	r1, #17
 8005b4e:	f8c4 d13c 	str.w	sp, [r4, #316]	; 0x13c
 8005b52:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 8005b56:	f7fe ffdf 	bl	8004b18 <d_print_comp>
 8005b5a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005b5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005b62:	5465      	strb	r5, [r4, r1]
 8005b64:	4620      	mov	r0, r4
 8005b66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005b6a:	46b5      	mov	sp, r6
 8005b6c:	4798      	blx	r3
 8005b6e:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 8005b72:	fab0 f080 	clz	r0, r0
 8005b76:	0940      	lsrs	r0, r0, #5
 8005b78:	e78d      	b.n	8005a96 <d_demangle_callback.constprop.0+0x292>
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	e6bf      	b.n	80058fe <d_demangle_callback.constprop.0+0xfa>
 8005b7e:	4616      	mov	r6, r2
 8005b80:	e783      	b.n	8005a8a <d_demangle_callback.constprop.0+0x286>
 8005b82:	bf00      	nop

08005b84 <d_print_subexpr>:
 8005b84:	b570      	push	{r4, r5, r6, lr}
 8005b86:	7813      	ldrb	r3, [r2, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	4615      	mov	r5, r2
 8005b8e:	4604      	mov	r4, r0
 8005b90:	d903      	bls.n	8005b9a <d_print_subexpr+0x16>
 8005b92:	2b31      	cmp	r3, #49	; 0x31
 8005b94:	d001      	beq.n	8005b9a <d_print_subexpr+0x16>
 8005b96:	2b06      	cmp	r3, #6
 8005b98:	d138      	bne.n	8005c0c <d_print_subexpr+0x88>
 8005b9a:	2601      	movs	r6, #1
 8005b9c:	686b      	ldr	r3, [r5, #4]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	dc22      	bgt.n	8005be8 <d_print_subexpr+0x64>
 8005ba2:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8005ba6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005baa:	dc1d      	bgt.n	8005be8 <d_print_subexpr+0x64>
 8005bac:	3301      	adds	r3, #1
 8005bae:	3201      	adds	r2, #1
 8005bb0:	606b      	str	r3, [r5, #4]
 8005bb2:	2111      	movs	r1, #17
 8005bb4:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8005bb8:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
 8005bbc:	f8c4 d12c 	str.w	sp, [r4, #300]	; 0x12c
 8005bc0:	462a      	mov	r2, r5
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	9301      	str	r3, [sp, #4]
 8005bc6:	9500      	str	r5, [sp, #0]
 8005bc8:	f7fc ff2a 	bl	8002a20 <d_print_comp_inner>
 8005bcc:	686a      	ldr	r2, [r5, #4]
 8005bce:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8005bd2:	9901      	ldr	r1, [sp, #4]
 8005bd4:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 8005bd8:	3a01      	subs	r2, #1
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	606a      	str	r2, [r5, #4]
 8005bde:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8005be2:	b136      	cbz	r6, 8005bf2 <d_print_subexpr+0x6e>
 8005be4:	b002      	add	sp, #8
 8005be6:	bd70      	pop	{r4, r5, r6, pc}
 8005be8:	2301      	movs	r3, #1
 8005bea:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005bee:	2e00      	cmp	r6, #0
 8005bf0:	d1f8      	bne.n	8005be4 <d_print_subexpr+0x60>
 8005bf2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005bf6:	29ff      	cmp	r1, #255	; 0xff
 8005bf8:	d015      	beq.n	8005c26 <d_print_subexpr+0xa2>
 8005bfa:	1c4a      	adds	r2, r1, #1
 8005bfc:	2329      	movs	r3, #41	; 0x29
 8005bfe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005c02:	5463      	strb	r3, [r4, r1]
 8005c04:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005c08:	b002      	add	sp, #8
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}
 8005c0c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005c10:	29ff      	cmp	r1, #255	; 0xff
 8005c12:	d016      	beq.n	8005c42 <d_print_subexpr+0xbe>
 8005c14:	1c4a      	adds	r2, r1, #1
 8005c16:	2328      	movs	r3, #40	; 0x28
 8005c18:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005c1c:	2600      	movs	r6, #0
 8005c1e:	5463      	strb	r3, [r4, r1]
 8005c20:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005c24:	e7ba      	b.n	8005b9c <d_print_subexpr+0x18>
 8005c26:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8005c2a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005c2e:	4620      	mov	r0, r4
 8005c30:	4798      	blx	r3
 8005c32:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005c36:	2201      	movs	r2, #1
 8005c38:	4413      	add	r3, r2
 8005c3a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005c3e:	4631      	mov	r1, r6
 8005c40:	e7dc      	b.n	8005bfc <d_print_subexpr+0x78>
 8005c42:	2600      	movs	r6, #0
 8005c44:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
 8005c48:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005c4c:	4798      	blx	r3
 8005c4e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005c52:	2201      	movs	r2, #1
 8005c54:	4413      	add	r3, r2
 8005c56:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005c5a:	4631      	mov	r1, r6
 8005c5c:	e7db      	b.n	8005c16 <d_print_subexpr+0x92>
 8005c5e:	bf00      	nop

08005c60 <d_maybe_print_fold_expression>:
 8005c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	68d3      	ldr	r3, [r2, #12]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	7819      	ldrb	r1, [r3, #0]
 8005c6c:	2966      	cmp	r1, #102	; 0x66
 8005c6e:	d178      	bne.n	8005d62 <d_maybe_print_fold_expression+0x102>
 8005c70:	6912      	ldr	r2, [r2, #16]
 8005c72:	f8d0 7124 	ldr.w	r7, [r0, #292]	; 0x124
 8005c76:	e9d2 8a03 	ldrd	r8, sl, [r2, #12]
 8005c7a:	f89a 2000 	ldrb.w	r2, [sl]
 8005c7e:	2a3c      	cmp	r2, #60	; 0x3c
 8005c80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c84:	bf08      	it	eq
 8005c86:	e9da a903 	ldrdeq	sl, r9, [sl, #12]
 8005c8a:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
 8005c8e:	785b      	ldrb	r3, [r3, #1]
 8005c90:	bf18      	it	ne
 8005c92:	f04f 0900 	movne.w	r9, #0
 8005c96:	2b6c      	cmp	r3, #108	; 0x6c
 8005c98:	4604      	mov	r4, r0
 8005c9a:	f000 80a2 	beq.w	8005de2 <d_maybe_print_fold_expression+0x182>
 8005c9e:	d863      	bhi.n	8005d68 <d_maybe_print_fold_expression+0x108>
 8005ca0:	2b4c      	cmp	r3, #76	; 0x4c
 8005ca2:	d001      	beq.n	8005ca8 <d_maybe_print_fold_expression+0x48>
 8005ca4:	2b52      	cmp	r3, #82	; 0x52
 8005ca6:	d157      	bne.n	8005d58 <d_maybe_print_fold_expression+0xf8>
 8005ca8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005cac:	29ff      	cmp	r1, #255	; 0xff
 8005cae:	f000 80eb 	beq.w	8005e88 <d_maybe_print_fold_expression+0x228>
 8005cb2:	1c4b      	adds	r3, r1, #1
 8005cb4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005cb8:	2328      	movs	r3, #40	; 0x28
 8005cba:	5463      	strb	r3, [r4, r1]
 8005cbc:	4652      	mov	r2, sl
 8005cbe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005cc2:	2111      	movs	r1, #17
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	4e78      	ldr	r6, [pc, #480]	; (8005ea8 <d_maybe_print_fold_expression+0x248>)
 8005cc8:	f7ff ff5c 	bl	8005b84 <d_print_subexpr>
 8005ccc:	2111      	movs	r1, #17
 8005cce:	4642      	mov	r2, r8
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f7ff fd5b 	bl	800578c <d_print_expr_op>
 8005cd6:	f106 0b02 	add.w	fp, r6, #2
 8005cda:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005cde:	252e      	movs	r5, #46	; 0x2e
 8005ce0:	f04f 0a00 	mov.w	sl, #0
 8005ce4:	e00b      	b.n	8005cfe <d_maybe_print_fold_expression+0x9e>
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	455e      	cmp	r6, fp
 8005cea:	f101 0101 	add.w	r1, r1, #1
 8005cee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005cf2:	54e5      	strb	r5, [r4, r3]
 8005cf4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005cf8:	d019      	beq.n	8005d2e <d_maybe_print_fold_expression+0xce>
 8005cfa:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8005cfe:	29ff      	cmp	r1, #255	; 0xff
 8005d00:	d1f1      	bne.n	8005ce6 <d_maybe_print_fold_expression+0x86>
 8005d02:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d06:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d0a:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8005d0e:	4620      	mov	r0, r4
 8005d10:	4798      	blx	r3
 8005d12:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005d16:	3301      	adds	r3, #1
 8005d18:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	2101      	movs	r1, #1
 8005d20:	455e      	cmp	r6, fp
 8005d22:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005d26:	54e5      	strb	r5, [r4, r3]
 8005d28:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005d2c:	d1e5      	bne.n	8005cfa <d_maybe_print_fold_expression+0x9a>
 8005d2e:	4642      	mov	r2, r8
 8005d30:	2111      	movs	r1, #17
 8005d32:	4620      	mov	r0, r4
 8005d34:	f7ff fd2a 	bl	800578c <d_print_expr_op>
 8005d38:	464a      	mov	r2, r9
 8005d3a:	2111      	movs	r1, #17
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f7ff ff21 	bl	8005b84 <d_print_subexpr>
 8005d42:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005d46:	29ff      	cmp	r1, #255	; 0xff
 8005d48:	d07f      	beq.n	8005e4a <d_maybe_print_fold_expression+0x1ea>
 8005d4a:	1c4a      	adds	r2, r1, #1
 8005d4c:	2329      	movs	r3, #41	; 0x29
 8005d4e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005d52:	5463      	strb	r3, [r4, r1]
 8005d54:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005d58:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d62:	2000      	movs	r0, #0
 8005d64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d68:	2b72      	cmp	r3, #114	; 0x72
 8005d6a:	d1f5      	bne.n	8005d58 <d_maybe_print_fold_expression+0xf8>
 8005d6c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005d70:	29ff      	cmp	r1, #255	; 0xff
 8005d72:	d07b      	beq.n	8005e6c <d_maybe_print_fold_expression+0x20c>
 8005d74:	1c4b      	adds	r3, r1, #1
 8005d76:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d7a:	2328      	movs	r3, #40	; 0x28
 8005d7c:	5463      	strb	r3, [r4, r1]
 8005d7e:	4652      	mov	r2, sl
 8005d80:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005d84:	2111      	movs	r1, #17
 8005d86:	4620      	mov	r0, r4
 8005d88:	4e48      	ldr	r6, [pc, #288]	; (8005eac <d_maybe_print_fold_expression+0x24c>)
 8005d8a:	f7ff fefb 	bl	8005b84 <d_print_subexpr>
 8005d8e:	4642      	mov	r2, r8
 8005d90:	2111      	movs	r1, #17
 8005d92:	4620      	mov	r0, r4
 8005d94:	f7ff fcfa 	bl	800578c <d_print_expr_op>
 8005d98:	f106 0903 	add.w	r9, r6, #3
 8005d9c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005da0:	252e      	movs	r5, #46	; 0x2e
 8005da2:	f04f 0800 	mov.w	r8, #0
 8005da6:	e00a      	b.n	8005dbe <d_maybe_print_fold_expression+0x15e>
 8005da8:	460b      	mov	r3, r1
 8005daa:	3101      	adds	r1, #1
 8005dac:	454e      	cmp	r6, r9
 8005dae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005db2:	54e5      	strb	r5, [r4, r3]
 8005db4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005db8:	d0ce      	beq.n	8005d58 <d_maybe_print_fold_expression+0xf8>
 8005dba:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8005dbe:	29ff      	cmp	r1, #255	; 0xff
 8005dc0:	d1f2      	bne.n	8005da8 <d_maybe_print_fold_expression+0x148>
 8005dc2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005dc6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005dca:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005dce:	4620      	mov	r0, r4
 8005dd0:	4798      	blx	r3
 8005dd2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005ddc:	2101      	movs	r1, #1
 8005dde:	2300      	movs	r3, #0
 8005de0:	e7e4      	b.n	8005dac <d_maybe_print_fold_expression+0x14c>
 8005de2:	4d33      	ldr	r5, [pc, #204]	; (8005eb0 <d_maybe_print_fold_expression+0x250>)
 8005de4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005de8:	2628      	movs	r6, #40	; 0x28
 8005dea:	f105 0b03 	add.w	fp, r5, #3
 8005dee:	f04f 0900 	mov.w	r9, #0
 8005df2:	e00b      	b.n	8005e0c <d_maybe_print_fold_expression+0x1ac>
 8005df4:	460b      	mov	r3, r1
 8005df6:	45ab      	cmp	fp, r5
 8005df8:	f101 0101 	add.w	r1, r1, #1
 8005dfc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e00:	54e6      	strb	r6, [r4, r3]
 8005e02:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005e06:	d019      	beq.n	8005e3c <d_maybe_print_fold_expression+0x1dc>
 8005e08:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005e0c:	29ff      	cmp	r1, #255	; 0xff
 8005e0e:	d1f1      	bne.n	8005df4 <d_maybe_print_fold_expression+0x194>
 8005e10:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e14:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e18:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	4798      	blx	r3
 8005e20:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005e24:	3301      	adds	r3, #1
 8005e26:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	45ab      	cmp	fp, r5
 8005e30:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e34:	54e6      	strb	r6, [r4, r3]
 8005e36:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005e3a:	d1e5      	bne.n	8005e08 <d_maybe_print_fold_expression+0x1a8>
 8005e3c:	4642      	mov	r2, r8
 8005e3e:	2111      	movs	r1, #17
 8005e40:	4620      	mov	r0, r4
 8005e42:	f7ff fca3 	bl	800578c <d_print_expr_op>
 8005e46:	4652      	mov	r2, sl
 8005e48:	e777      	b.n	8005d3a <d_maybe_print_fold_expression+0xda>
 8005e4a:	2500      	movs	r5, #0
 8005e4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e54:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005e58:	4620      	mov	r0, r4
 8005e5a:	4798      	blx	r3
 8005e5c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005e60:	2201      	movs	r2, #1
 8005e62:	4413      	add	r3, r2
 8005e64:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005e68:	4629      	mov	r1, r5
 8005e6a:	e76f      	b.n	8005d4c <d_maybe_print_fold_expression+0xec>
 8005e6c:	2500      	movs	r5, #0
 8005e6e:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
 8005e72:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005e76:	4798      	blx	r3
 8005e78:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005e82:	4629      	mov	r1, r5
 8005e84:	2301      	movs	r3, #1
 8005e86:	e776      	b.n	8005d76 <d_maybe_print_fold_expression+0x116>
 8005e88:	2500      	movs	r5, #0
 8005e8a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8005e8e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005e92:	4620      	mov	r0, r4
 8005e94:	4798      	blx	r3
 8005e96:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e706      	b.n	8005cb4 <d_maybe_print_fold_expression+0x54>
 8005ea6:	bf00      	nop
 8005ea8:	0802226c 	.word	0x0802226c
 8005eac:	08022368 	.word	0x08022368
 8005eb0:	08022360 	.word	0x08022360

08005eb4 <d_maybe_print_designated_init>:
 8005eb4:	7813      	ldrb	r3, [r2, #0]
 8005eb6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8005eba:	2b38      	cmp	r3, #56	; 0x38
 8005ebc:	d001      	beq.n	8005ec2 <d_maybe_print_designated_init+0xe>
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	4770      	bx	lr
 8005ec2:	68d3      	ldr	r3, [r2, #12]
 8005ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	681f      	ldr	r7, [r3, #0]
 8005ecc:	783b      	ldrb	r3, [r7, #0]
 8005ece:	2b64      	cmp	r3, #100	; 0x64
 8005ed0:	d002      	beq.n	8005ed8 <d_maybe_print_designated_init+0x24>
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed8:	787b      	ldrb	r3, [r7, #1]
 8005eda:	2b69      	cmp	r3, #105	; 0x69
 8005edc:	4604      	mov	r4, r0
 8005ede:	d011      	beq.n	8005f04 <d_maybe_print_designated_init+0x50>
 8005ee0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005ee4:	2b58      	cmp	r3, #88	; 0x58
 8005ee6:	d1f4      	bne.n	8005ed2 <d_maybe_print_designated_init+0x1e>
 8005ee8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005eec:	6913      	ldr	r3, [r2, #16]
 8005eee:	29ff      	cmp	r1, #255	; 0xff
 8005ef0:	e9d3 5603 	ldrd	r5, r6, [r3, #12]
 8005ef4:	f000 808e 	beq.w	8006014 <d_maybe_print_designated_init+0x160>
 8005ef8:	1c4b      	adds	r3, r1, #1
 8005efa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005efe:	235b      	movs	r3, #91	; 0x5b
 8005f00:	5463      	strb	r3, [r4, r1]
 8005f02:	e00c      	b.n	8005f1e <d_maybe_print_designated_init+0x6a>
 8005f04:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005f08:	6913      	ldr	r3, [r2, #16]
 8005f0a:	29ff      	cmp	r1, #255	; 0xff
 8005f0c:	e9d3 5603 	ldrd	r5, r6, [r3, #12]
 8005f10:	f000 80b1 	beq.w	8006076 <d_maybe_print_designated_init+0x1c2>
 8005f14:	1c4b      	adds	r3, r1, #1
 8005f16:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005f1a:	232e      	movs	r3, #46	; 0x2e
 8005f1c:	5463      	strb	r3, [r4, r1]
 8005f1e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005f22:	462a      	mov	r2, r5
 8005f24:	2111      	movs	r1, #17
 8005f26:	4620      	mov	r0, r4
 8005f28:	f7fe fdf6 	bl	8004b18 <d_print_comp>
 8005f2c:	787b      	ldrb	r3, [r7, #1]
 8005f2e:	2b58      	cmp	r3, #88	; 0x58
 8005f30:	d03a      	beq.n	8005fa8 <d_maybe_print_designated_init+0xf4>
 8005f32:	2b69      	cmp	r3, #105	; 0x69
 8005f34:	d00b      	beq.n	8005f4e <d_maybe_print_designated_init+0x9a>
 8005f36:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f3a:	29ff      	cmp	r1, #255	; 0xff
 8005f3c:	f000 808a 	beq.w	8006054 <d_maybe_print_designated_init+0x1a0>
 8005f40:	1c4a      	adds	r2, r1, #1
 8005f42:	235d      	movs	r3, #93	; 0x5d
 8005f44:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005f48:	5463      	strb	r3, [r4, r1]
 8005f4a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005f4e:	7833      	ldrb	r3, [r6, #0]
 8005f50:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8005f54:	2b38      	cmp	r3, #56	; 0x38
 8005f56:	d012      	beq.n	8005f7e <d_maybe_print_designated_init+0xca>
 8005f58:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f5c:	29ff      	cmp	r1, #255	; 0xff
 8005f5e:	d068      	beq.n	8006032 <d_maybe_print_designated_init+0x17e>
 8005f60:	1c4a      	adds	r2, r1, #1
 8005f62:	233d      	movs	r3, #61	; 0x3d
 8005f64:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005f68:	4620      	mov	r0, r4
 8005f6a:	5463      	strb	r3, [r4, r1]
 8005f6c:	4632      	mov	r2, r6
 8005f6e:	2111      	movs	r1, #17
 8005f70:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005f74:	f7ff fe06 	bl	8005b84 <d_print_subexpr>
 8005f78:	2001      	movs	r0, #1
 8005f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f7e:	68f3      	ldr	r3, [r6, #12]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	781a      	ldrb	r2, [r3, #0]
 8005f86:	2a64      	cmp	r2, #100	; 0x64
 8005f88:	d1e6      	bne.n	8005f58 <d_maybe_print_designated_init+0xa4>
 8005f8a:	785b      	ldrb	r3, [r3, #1]
 8005f8c:	2b69      	cmp	r3, #105	; 0x69
 8005f8e:	d003      	beq.n	8005f98 <d_maybe_print_designated_init+0xe4>
 8005f90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005f94:	2b58      	cmp	r3, #88	; 0x58
 8005f96:	d1df      	bne.n	8005f58 <d_maybe_print_designated_init+0xa4>
 8005f98:	4620      	mov	r0, r4
 8005f9a:	4632      	mov	r2, r6
 8005f9c:	2111      	movs	r1, #17
 8005f9e:	f7fe fdbb 	bl	8004b18 <d_print_comp>
 8005fa2:	2001      	movs	r0, #1
 8005fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa8:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8006094 <d_maybe_print_designated_init+0x1e0>
 8005fac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005fb0:	f108 0a04 	add.w	sl, r8, #4
 8005fb4:	2520      	movs	r5, #32
 8005fb6:	f04f 0900 	mov.w	r9, #0
 8005fba:	e00b      	b.n	8005fd4 <d_maybe_print_designated_init+0x120>
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	45c2      	cmp	sl, r8
 8005fc0:	f101 0101 	add.w	r1, r1, #1
 8005fc4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005fc8:	54e5      	strb	r5, [r4, r3]
 8005fca:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005fce:	d019      	beq.n	8006004 <d_maybe_print_designated_init+0x150>
 8005fd0:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 8005fd4:	29ff      	cmp	r1, #255	; 0xff
 8005fd6:	d1f1      	bne.n	8005fbc <d_maybe_print_designated_init+0x108>
 8005fd8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005fdc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005fe0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	4798      	blx	r3
 8005fe8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005fec:	3301      	adds	r3, #1
 8005fee:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	45c2      	cmp	sl, r8
 8005ff8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005ffc:	54e5      	strb	r5, [r4, r3]
 8005ffe:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8006002:	d1e5      	bne.n	8005fd0 <d_maybe_print_designated_init+0x11c>
 8006004:	68f2      	ldr	r2, [r6, #12]
 8006006:	2111      	movs	r1, #17
 8006008:	4620      	mov	r0, r4
 800600a:	f7fe fd85 	bl	8004b18 <d_print_comp>
 800600e:	6936      	ldr	r6, [r6, #16]
 8006010:	787b      	ldrb	r3, [r7, #1]
 8006012:	e78e      	b.n	8005f32 <d_maybe_print_designated_init+0x7e>
 8006014:	f04f 0800 	mov.w	r8, #0
 8006018:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800601c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006020:	4798      	blx	r3
 8006022:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006026:	3301      	adds	r3, #1
 8006028:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800602c:	4641      	mov	r1, r8
 800602e:	2301      	movs	r3, #1
 8006030:	e763      	b.n	8005efa <d_maybe_print_designated_init+0x46>
 8006032:	2500      	movs	r5, #0
 8006034:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006038:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800603c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006040:	4620      	mov	r0, r4
 8006042:	4798      	blx	r3
 8006044:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006048:	2201      	movs	r2, #1
 800604a:	4413      	add	r3, r2
 800604c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8006050:	4629      	mov	r1, r5
 8006052:	e786      	b.n	8005f62 <d_maybe_print_designated_init+0xae>
 8006054:	2500      	movs	r5, #0
 8006056:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800605a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800605e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006062:	4620      	mov	r0, r4
 8006064:	4798      	blx	r3
 8006066:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800606a:	2201      	movs	r2, #1
 800606c:	4413      	add	r3, r2
 800606e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8006072:	4629      	mov	r1, r5
 8006074:	e765      	b.n	8005f42 <d_maybe_print_designated_init+0x8e>
 8006076:	f04f 0800 	mov.w	r8, #0
 800607a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800607e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006082:	4798      	blx	r3
 8006084:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006088:	3301      	adds	r3, #1
 800608a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800608e:	4641      	mov	r1, r8
 8006090:	2301      	movs	r3, #1
 8006092:	e740      	b.n	8005f16 <d_maybe_print_designated_init+0x62>
 8006094:	08022370 	.word	0x08022370

08006098 <__cxa_demangle>:
 8006098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800609c:	461e      	mov	r6, r3
 800609e:	b084      	sub	sp, #16
 80060a0:	2800      	cmp	r0, #0
 80060a2:	d040      	beq.n	8006126 <__cxa_demangle+0x8e>
 80060a4:	460c      	mov	r4, r1
 80060a6:	4615      	mov	r5, r2
 80060a8:	b109      	cbz	r1, 80060ae <__cxa_demangle+0x16>
 80060aa:	2a00      	cmp	r2, #0
 80060ac:	d03b      	beq.n	8006126 <__cxa_demangle+0x8e>
 80060ae:	2300      	movs	r3, #0
 80060b0:	4929      	ldr	r1, [pc, #164]	; (8006158 <__cxa_demangle+0xc0>)
 80060b2:	466a      	mov	r2, sp
 80060b4:	e9cd 3300 	strd	r3, r3, [sp]
 80060b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060bc:	f7ff fba2 	bl	8005804 <d_demangle_callback.constprop.0>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d039      	beq.n	8006138 <__cxa_demangle+0xa0>
 80060c4:	9b03      	ldr	r3, [sp, #12]
 80060c6:	9f00      	ldr	r7, [sp, #0]
 80060c8:	b9d3      	cbnz	r3, 8006100 <__cxa_demangle+0x68>
 80060ca:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80060ce:	2f00      	cmp	r7, #0
 80060d0:	d03c      	beq.n	800614c <__cxa_demangle+0xb4>
 80060d2:	b32c      	cbz	r4, 8006120 <__cxa_demangle+0x88>
 80060d4:	4638      	mov	r0, r7
 80060d6:	f000 f8a3 	bl	8006220 <strlen>
 80060da:	682b      	ldr	r3, [r5, #0]
 80060dc:	4298      	cmp	r0, r3
 80060de:	d219      	bcs.n	8006114 <__cxa_demangle+0x7c>
 80060e0:	4639      	mov	r1, r7
 80060e2:	1c42      	adds	r2, r0, #1
 80060e4:	4620      	mov	r0, r4
 80060e6:	f018 fd87 	bl	801ebf8 <memcpy>
 80060ea:	4638      	mov	r0, r7
 80060ec:	f017 fc94 	bl	801da18 <free>
 80060f0:	4627      	mov	r7, r4
 80060f2:	b10e      	cbz	r6, 80060f8 <__cxa_demangle+0x60>
 80060f4:	2300      	movs	r3, #0
 80060f6:	6033      	str	r3, [r6, #0]
 80060f8:	4638      	mov	r0, r7
 80060fa:	b004      	add	sp, #16
 80060fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006100:	f04f 0801 	mov.w	r8, #1
 8006104:	2f00      	cmp	r7, #0
 8006106:	d1e4      	bne.n	80060d2 <__cxa_demangle+0x3a>
 8006108:	b18e      	cbz	r6, 800612e <__cxa_demangle+0x96>
 800610a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800610e:	6033      	str	r3, [r6, #0]
 8006110:	2700      	movs	r7, #0
 8006112:	e7f1      	b.n	80060f8 <__cxa_demangle+0x60>
 8006114:	4620      	mov	r0, r4
 8006116:	f017 fc7f 	bl	801da18 <free>
 800611a:	f8c5 8000 	str.w	r8, [r5]
 800611e:	e7e8      	b.n	80060f2 <__cxa_demangle+0x5a>
 8006120:	2d00      	cmp	r5, #0
 8006122:	d1fa      	bne.n	800611a <__cxa_demangle+0x82>
 8006124:	e7e5      	b.n	80060f2 <__cxa_demangle+0x5a>
 8006126:	b116      	cbz	r6, 800612e <__cxa_demangle+0x96>
 8006128:	f06f 0302 	mvn.w	r3, #2
 800612c:	6033      	str	r3, [r6, #0]
 800612e:	2700      	movs	r7, #0
 8006130:	4638      	mov	r0, r7
 8006132:	b004      	add	sp, #16
 8006134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006138:	9800      	ldr	r0, [sp, #0]
 800613a:	f017 fc6d 	bl	801da18 <free>
 800613e:	2e00      	cmp	r6, #0
 8006140:	d0f5      	beq.n	800612e <__cxa_demangle+0x96>
 8006142:	f06f 0301 	mvn.w	r3, #1
 8006146:	6033      	str	r3, [r6, #0]
 8006148:	2700      	movs	r7, #0
 800614a:	e7d5      	b.n	80060f8 <__cxa_demangle+0x60>
 800614c:	2e00      	cmp	r6, #0
 800614e:	d0ee      	beq.n	800612e <__cxa_demangle+0x96>
 8006150:	f1b8 0f01 	cmp.w	r8, #1
 8006154:	d0d9      	beq.n	800610a <__cxa_demangle+0x72>
 8006156:	e7f4      	b.n	8006142 <__cxa_demangle+0xaa>
 8006158:	08000505 	.word	0x08000505

0800615c <__gcclibcxx_demangle_callback>:
 800615c:	b160      	cbz	r0, 8006178 <__gcclibcxx_demangle_callback+0x1c>
 800615e:	b508      	push	{r3, lr}
 8006160:	b139      	cbz	r1, 8006172 <__gcclibcxx_demangle_callback+0x16>
 8006162:	f7ff fb4f 	bl	8005804 <d_demangle_callback.constprop.0>
 8006166:	2800      	cmp	r0, #0
 8006168:	bf14      	ite	ne
 800616a:	2000      	movne	r0, #0
 800616c:	f06f 0001 	mvneq.w	r0, #1
 8006170:	bd08      	pop	{r3, pc}
 8006172:	f06f 0002 	mvn.w	r0, #2
 8006176:	bd08      	pop	{r3, pc}
 8006178:	f06f 0002 	mvn.w	r0, #2
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop

08006180 <memchr>:
 8006180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006184:	2a10      	cmp	r2, #16
 8006186:	db2b      	blt.n	80061e0 <memchr+0x60>
 8006188:	f010 0f07 	tst.w	r0, #7
 800618c:	d008      	beq.n	80061a0 <memchr+0x20>
 800618e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006192:	3a01      	subs	r2, #1
 8006194:	428b      	cmp	r3, r1
 8006196:	d02d      	beq.n	80061f4 <memchr+0x74>
 8006198:	f010 0f07 	tst.w	r0, #7
 800619c:	b342      	cbz	r2, 80061f0 <memchr+0x70>
 800619e:	d1f6      	bne.n	800618e <memchr+0xe>
 80061a0:	b4f0      	push	{r4, r5, r6, r7}
 80061a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80061a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80061aa:	f022 0407 	bic.w	r4, r2, #7
 80061ae:	f07f 0700 	mvns.w	r7, #0
 80061b2:	2300      	movs	r3, #0
 80061b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80061b8:	3c08      	subs	r4, #8
 80061ba:	ea85 0501 	eor.w	r5, r5, r1
 80061be:	ea86 0601 	eor.w	r6, r6, r1
 80061c2:	fa85 f547 	uadd8	r5, r5, r7
 80061c6:	faa3 f587 	sel	r5, r3, r7
 80061ca:	fa86 f647 	uadd8	r6, r6, r7
 80061ce:	faa5 f687 	sel	r6, r5, r7
 80061d2:	b98e      	cbnz	r6, 80061f8 <memchr+0x78>
 80061d4:	d1ee      	bne.n	80061b4 <memchr+0x34>
 80061d6:	bcf0      	pop	{r4, r5, r6, r7}
 80061d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80061dc:	f002 0207 	and.w	r2, r2, #7
 80061e0:	b132      	cbz	r2, 80061f0 <memchr+0x70>
 80061e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80061e6:	3a01      	subs	r2, #1
 80061e8:	ea83 0301 	eor.w	r3, r3, r1
 80061ec:	b113      	cbz	r3, 80061f4 <memchr+0x74>
 80061ee:	d1f8      	bne.n	80061e2 <memchr+0x62>
 80061f0:	2000      	movs	r0, #0
 80061f2:	4770      	bx	lr
 80061f4:	3801      	subs	r0, #1
 80061f6:	4770      	bx	lr
 80061f8:	2d00      	cmp	r5, #0
 80061fa:	bf06      	itte	eq
 80061fc:	4635      	moveq	r5, r6
 80061fe:	3803      	subeq	r0, #3
 8006200:	3807      	subne	r0, #7
 8006202:	f015 0f01 	tst.w	r5, #1
 8006206:	d107      	bne.n	8006218 <memchr+0x98>
 8006208:	3001      	adds	r0, #1
 800620a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800620e:	bf02      	ittt	eq
 8006210:	3001      	addeq	r0, #1
 8006212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006216:	3001      	addeq	r0, #1
 8006218:	bcf0      	pop	{r4, r5, r6, r7}
 800621a:	3801      	subs	r0, #1
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop

08006220 <strlen>:
 8006220:	4603      	mov	r3, r0
 8006222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006226:	2a00      	cmp	r2, #0
 8006228:	d1fb      	bne.n	8006222 <strlen+0x2>
 800622a:	1a18      	subs	r0, r3, r0
 800622c:	3801      	subs	r0, #1
 800622e:	4770      	bx	lr

08006230 <strcmp>:
 8006230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006238:	2a01      	cmp	r2, #1
 800623a:	bf28      	it	cs
 800623c:	429a      	cmpcs	r2, r3
 800623e:	d0f7      	beq.n	8006230 <strcmp>
 8006240:	1ad0      	subs	r0, r2, r3
 8006242:	4770      	bx	lr

08006244 <__aeabi_drsub>:
 8006244:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006248:	e002      	b.n	8006250 <__adddf3>
 800624a:	bf00      	nop

0800624c <__aeabi_dsub>:
 800624c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006250 <__adddf3>:
 8006250:	b530      	push	{r4, r5, lr}
 8006252:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006256:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800625a:	ea94 0f05 	teq	r4, r5
 800625e:	bf08      	it	eq
 8006260:	ea90 0f02 	teqeq	r0, r2
 8006264:	bf1f      	itttt	ne
 8006266:	ea54 0c00 	orrsne.w	ip, r4, r0
 800626a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800626e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006276:	f000 80e2 	beq.w	800643e <__adddf3+0x1ee>
 800627a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800627e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006282:	bfb8      	it	lt
 8006284:	426d      	neglt	r5, r5
 8006286:	dd0c      	ble.n	80062a2 <__adddf3+0x52>
 8006288:	442c      	add	r4, r5
 800628a:	ea80 0202 	eor.w	r2, r0, r2
 800628e:	ea81 0303 	eor.w	r3, r1, r3
 8006292:	ea82 0000 	eor.w	r0, r2, r0
 8006296:	ea83 0101 	eor.w	r1, r3, r1
 800629a:	ea80 0202 	eor.w	r2, r0, r2
 800629e:	ea81 0303 	eor.w	r3, r1, r3
 80062a2:	2d36      	cmp	r5, #54	; 0x36
 80062a4:	bf88      	it	hi
 80062a6:	bd30      	pophi	{r4, r5, pc}
 80062a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80062ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80062b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80062b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80062b8:	d002      	beq.n	80062c0 <__adddf3+0x70>
 80062ba:	4240      	negs	r0, r0
 80062bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80062c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80062c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80062c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80062cc:	d002      	beq.n	80062d4 <__adddf3+0x84>
 80062ce:	4252      	negs	r2, r2
 80062d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80062d4:	ea94 0f05 	teq	r4, r5
 80062d8:	f000 80a7 	beq.w	800642a <__adddf3+0x1da>
 80062dc:	f1a4 0401 	sub.w	r4, r4, #1
 80062e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80062e4:	db0d      	blt.n	8006302 <__adddf3+0xb2>
 80062e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80062ea:	fa22 f205 	lsr.w	r2, r2, r5
 80062ee:	1880      	adds	r0, r0, r2
 80062f0:	f141 0100 	adc.w	r1, r1, #0
 80062f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80062f8:	1880      	adds	r0, r0, r2
 80062fa:	fa43 f305 	asr.w	r3, r3, r5
 80062fe:	4159      	adcs	r1, r3
 8006300:	e00e      	b.n	8006320 <__adddf3+0xd0>
 8006302:	f1a5 0520 	sub.w	r5, r5, #32
 8006306:	f10e 0e20 	add.w	lr, lr, #32
 800630a:	2a01      	cmp	r2, #1
 800630c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006310:	bf28      	it	cs
 8006312:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006316:	fa43 f305 	asr.w	r3, r3, r5
 800631a:	18c0      	adds	r0, r0, r3
 800631c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006324:	d507      	bpl.n	8006336 <__adddf3+0xe6>
 8006326:	f04f 0e00 	mov.w	lr, #0
 800632a:	f1dc 0c00 	rsbs	ip, ip, #0
 800632e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006332:	eb6e 0101 	sbc.w	r1, lr, r1
 8006336:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800633a:	d31b      	bcc.n	8006374 <__adddf3+0x124>
 800633c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006340:	d30c      	bcc.n	800635c <__adddf3+0x10c>
 8006342:	0849      	lsrs	r1, r1, #1
 8006344:	ea5f 0030 	movs.w	r0, r0, rrx
 8006348:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800634c:	f104 0401 	add.w	r4, r4, #1
 8006350:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006354:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006358:	f080 809a 	bcs.w	8006490 <__adddf3+0x240>
 800635c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006360:	bf08      	it	eq
 8006362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006366:	f150 0000 	adcs.w	r0, r0, #0
 800636a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800636e:	ea41 0105 	orr.w	r1, r1, r5
 8006372:	bd30      	pop	{r4, r5, pc}
 8006374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006378:	4140      	adcs	r0, r0
 800637a:	eb41 0101 	adc.w	r1, r1, r1
 800637e:	3c01      	subs	r4, #1
 8006380:	bf28      	it	cs
 8006382:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8006386:	d2e9      	bcs.n	800635c <__adddf3+0x10c>
 8006388:	f091 0f00 	teq	r1, #0
 800638c:	bf04      	itt	eq
 800638e:	4601      	moveq	r1, r0
 8006390:	2000      	moveq	r0, #0
 8006392:	fab1 f381 	clz	r3, r1
 8006396:	bf08      	it	eq
 8006398:	3320      	addeq	r3, #32
 800639a:	f1a3 030b 	sub.w	r3, r3, #11
 800639e:	f1b3 0220 	subs.w	r2, r3, #32
 80063a2:	da0c      	bge.n	80063be <__adddf3+0x16e>
 80063a4:	320c      	adds	r2, #12
 80063a6:	dd08      	ble.n	80063ba <__adddf3+0x16a>
 80063a8:	f102 0c14 	add.w	ip, r2, #20
 80063ac:	f1c2 020c 	rsb	r2, r2, #12
 80063b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80063b4:	fa21 f102 	lsr.w	r1, r1, r2
 80063b8:	e00c      	b.n	80063d4 <__adddf3+0x184>
 80063ba:	f102 0214 	add.w	r2, r2, #20
 80063be:	bfd8      	it	le
 80063c0:	f1c2 0c20 	rsble	ip, r2, #32
 80063c4:	fa01 f102 	lsl.w	r1, r1, r2
 80063c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80063cc:	bfdc      	itt	le
 80063ce:	ea41 010c 	orrle.w	r1, r1, ip
 80063d2:	4090      	lslle	r0, r2
 80063d4:	1ae4      	subs	r4, r4, r3
 80063d6:	bfa2      	ittt	ge
 80063d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80063dc:	4329      	orrge	r1, r5
 80063de:	bd30      	popge	{r4, r5, pc}
 80063e0:	ea6f 0404 	mvn.w	r4, r4
 80063e4:	3c1f      	subs	r4, #31
 80063e6:	da1c      	bge.n	8006422 <__adddf3+0x1d2>
 80063e8:	340c      	adds	r4, #12
 80063ea:	dc0e      	bgt.n	800640a <__adddf3+0x1ba>
 80063ec:	f104 0414 	add.w	r4, r4, #20
 80063f0:	f1c4 0220 	rsb	r2, r4, #32
 80063f4:	fa20 f004 	lsr.w	r0, r0, r4
 80063f8:	fa01 f302 	lsl.w	r3, r1, r2
 80063fc:	ea40 0003 	orr.w	r0, r0, r3
 8006400:	fa21 f304 	lsr.w	r3, r1, r4
 8006404:	ea45 0103 	orr.w	r1, r5, r3
 8006408:	bd30      	pop	{r4, r5, pc}
 800640a:	f1c4 040c 	rsb	r4, r4, #12
 800640e:	f1c4 0220 	rsb	r2, r4, #32
 8006412:	fa20 f002 	lsr.w	r0, r0, r2
 8006416:	fa01 f304 	lsl.w	r3, r1, r4
 800641a:	ea40 0003 	orr.w	r0, r0, r3
 800641e:	4629      	mov	r1, r5
 8006420:	bd30      	pop	{r4, r5, pc}
 8006422:	fa21 f004 	lsr.w	r0, r1, r4
 8006426:	4629      	mov	r1, r5
 8006428:	bd30      	pop	{r4, r5, pc}
 800642a:	f094 0f00 	teq	r4, #0
 800642e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006432:	bf06      	itte	eq
 8006434:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006438:	3401      	addeq	r4, #1
 800643a:	3d01      	subne	r5, #1
 800643c:	e74e      	b.n	80062dc <__adddf3+0x8c>
 800643e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006442:	bf18      	it	ne
 8006444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006448:	d029      	beq.n	800649e <__adddf3+0x24e>
 800644a:	ea94 0f05 	teq	r4, r5
 800644e:	bf08      	it	eq
 8006450:	ea90 0f02 	teqeq	r0, r2
 8006454:	d005      	beq.n	8006462 <__adddf3+0x212>
 8006456:	ea54 0c00 	orrs.w	ip, r4, r0
 800645a:	bf04      	itt	eq
 800645c:	4619      	moveq	r1, r3
 800645e:	4610      	moveq	r0, r2
 8006460:	bd30      	pop	{r4, r5, pc}
 8006462:	ea91 0f03 	teq	r1, r3
 8006466:	bf1e      	ittt	ne
 8006468:	2100      	movne	r1, #0
 800646a:	2000      	movne	r0, #0
 800646c:	bd30      	popne	{r4, r5, pc}
 800646e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006472:	d105      	bne.n	8006480 <__adddf3+0x230>
 8006474:	0040      	lsls	r0, r0, #1
 8006476:	4149      	adcs	r1, r1
 8006478:	bf28      	it	cs
 800647a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800647e:	bd30      	pop	{r4, r5, pc}
 8006480:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006484:	bf3c      	itt	cc
 8006486:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800648a:	bd30      	popcc	{r4, r5, pc}
 800648c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006490:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006494:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006498:	f04f 0000 	mov.w	r0, #0
 800649c:	bd30      	pop	{r4, r5, pc}
 800649e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80064a2:	bf1a      	itte	ne
 80064a4:	4619      	movne	r1, r3
 80064a6:	4610      	movne	r0, r2
 80064a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80064ac:	bf1c      	itt	ne
 80064ae:	460b      	movne	r3, r1
 80064b0:	4602      	movne	r2, r0
 80064b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80064b6:	bf06      	itte	eq
 80064b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80064bc:	ea91 0f03 	teqeq	r1, r3
 80064c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80064c4:	bd30      	pop	{r4, r5, pc}
 80064c6:	bf00      	nop

080064c8 <__aeabi_ui2d>:
 80064c8:	f090 0f00 	teq	r0, #0
 80064cc:	bf04      	itt	eq
 80064ce:	2100      	moveq	r1, #0
 80064d0:	4770      	bxeq	lr
 80064d2:	b530      	push	{r4, r5, lr}
 80064d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80064d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80064dc:	f04f 0500 	mov.w	r5, #0
 80064e0:	f04f 0100 	mov.w	r1, #0
 80064e4:	e750      	b.n	8006388 <__adddf3+0x138>
 80064e6:	bf00      	nop

080064e8 <__aeabi_i2d>:
 80064e8:	f090 0f00 	teq	r0, #0
 80064ec:	bf04      	itt	eq
 80064ee:	2100      	moveq	r1, #0
 80064f0:	4770      	bxeq	lr
 80064f2:	b530      	push	{r4, r5, lr}
 80064f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80064f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80064fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006500:	bf48      	it	mi
 8006502:	4240      	negmi	r0, r0
 8006504:	f04f 0100 	mov.w	r1, #0
 8006508:	e73e      	b.n	8006388 <__adddf3+0x138>
 800650a:	bf00      	nop

0800650c <__aeabi_f2d>:
 800650c:	0042      	lsls	r2, r0, #1
 800650e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006512:	ea4f 0131 	mov.w	r1, r1, rrx
 8006516:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800651a:	bf1f      	itttt	ne
 800651c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006524:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006528:	4770      	bxne	lr
 800652a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800652e:	bf08      	it	eq
 8006530:	4770      	bxeq	lr
 8006532:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8006536:	bf04      	itt	eq
 8006538:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800653c:	4770      	bxeq	lr
 800653e:	b530      	push	{r4, r5, lr}
 8006540:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800654c:	e71c      	b.n	8006388 <__adddf3+0x138>
 800654e:	bf00      	nop

08006550 <__aeabi_ul2d>:
 8006550:	ea50 0201 	orrs.w	r2, r0, r1
 8006554:	bf08      	it	eq
 8006556:	4770      	bxeq	lr
 8006558:	b530      	push	{r4, r5, lr}
 800655a:	f04f 0500 	mov.w	r5, #0
 800655e:	e00a      	b.n	8006576 <__aeabi_l2d+0x16>

08006560 <__aeabi_l2d>:
 8006560:	ea50 0201 	orrs.w	r2, r0, r1
 8006564:	bf08      	it	eq
 8006566:	4770      	bxeq	lr
 8006568:	b530      	push	{r4, r5, lr}
 800656a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800656e:	d502      	bpl.n	8006576 <__aeabi_l2d+0x16>
 8006570:	4240      	negs	r0, r0
 8006572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006576:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800657a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800657e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006582:	f43f aed8 	beq.w	8006336 <__adddf3+0xe6>
 8006586:	f04f 0203 	mov.w	r2, #3
 800658a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800658e:	bf18      	it	ne
 8006590:	3203      	addne	r2, #3
 8006592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006596:	bf18      	it	ne
 8006598:	3203      	addne	r2, #3
 800659a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800659e:	f1c2 0320 	rsb	r3, r2, #32
 80065a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80065a6:	fa20 f002 	lsr.w	r0, r0, r2
 80065aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80065ae:	ea40 000e 	orr.w	r0, r0, lr
 80065b2:	fa21 f102 	lsr.w	r1, r1, r2
 80065b6:	4414      	add	r4, r2
 80065b8:	e6bd      	b.n	8006336 <__adddf3+0xe6>
 80065ba:	bf00      	nop

080065bc <__aeabi_dmul>:
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80065c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80065c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80065ca:	bf1d      	ittte	ne
 80065cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80065d0:	ea94 0f0c 	teqne	r4, ip
 80065d4:	ea95 0f0c 	teqne	r5, ip
 80065d8:	f000 f8de 	bleq	8006798 <__aeabi_dmul+0x1dc>
 80065dc:	442c      	add	r4, r5
 80065de:	ea81 0603 	eor.w	r6, r1, r3
 80065e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80065e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80065ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80065ee:	bf18      	it	ne
 80065f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80065f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80065f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065fc:	d038      	beq.n	8006670 <__aeabi_dmul+0xb4>
 80065fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8006602:	f04f 0500 	mov.w	r5, #0
 8006606:	fbe1 e502 	umlal	lr, r5, r1, r2
 800660a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800660e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006612:	f04f 0600 	mov.w	r6, #0
 8006616:	fbe1 5603 	umlal	r5, r6, r1, r3
 800661a:	f09c 0f00 	teq	ip, #0
 800661e:	bf18      	it	ne
 8006620:	f04e 0e01 	orrne.w	lr, lr, #1
 8006624:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006628:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800662c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006630:	d204      	bcs.n	800663c <__aeabi_dmul+0x80>
 8006632:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006636:	416d      	adcs	r5, r5
 8006638:	eb46 0606 	adc.w	r6, r6, r6
 800663c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006640:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006644:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006648:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800664c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006650:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006654:	bf88      	it	hi
 8006656:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800665a:	d81e      	bhi.n	800669a <__aeabi_dmul+0xde>
 800665c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006660:	bf08      	it	eq
 8006662:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006666:	f150 0000 	adcs.w	r0, r0, #0
 800666a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800666e:	bd70      	pop	{r4, r5, r6, pc}
 8006670:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006674:	ea46 0101 	orr.w	r1, r6, r1
 8006678:	ea40 0002 	orr.w	r0, r0, r2
 800667c:	ea81 0103 	eor.w	r1, r1, r3
 8006680:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006684:	bfc2      	ittt	gt
 8006686:	ebd4 050c 	rsbsgt	r5, r4, ip
 800668a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800668e:	bd70      	popgt	{r4, r5, r6, pc}
 8006690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006694:	f04f 0e00 	mov.w	lr, #0
 8006698:	3c01      	subs	r4, #1
 800669a:	f300 80ab 	bgt.w	80067f4 <__aeabi_dmul+0x238>
 800669e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80066a2:	bfde      	ittt	le
 80066a4:	2000      	movle	r0, #0
 80066a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80066aa:	bd70      	pople	{r4, r5, r6, pc}
 80066ac:	f1c4 0400 	rsb	r4, r4, #0
 80066b0:	3c20      	subs	r4, #32
 80066b2:	da35      	bge.n	8006720 <__aeabi_dmul+0x164>
 80066b4:	340c      	adds	r4, #12
 80066b6:	dc1b      	bgt.n	80066f0 <__aeabi_dmul+0x134>
 80066b8:	f104 0414 	add.w	r4, r4, #20
 80066bc:	f1c4 0520 	rsb	r5, r4, #32
 80066c0:	fa00 f305 	lsl.w	r3, r0, r5
 80066c4:	fa20 f004 	lsr.w	r0, r0, r4
 80066c8:	fa01 f205 	lsl.w	r2, r1, r5
 80066cc:	ea40 0002 	orr.w	r0, r0, r2
 80066d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80066d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80066d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80066dc:	fa21 f604 	lsr.w	r6, r1, r4
 80066e0:	eb42 0106 	adc.w	r1, r2, r6
 80066e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80066e8:	bf08      	it	eq
 80066ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80066ee:	bd70      	pop	{r4, r5, r6, pc}
 80066f0:	f1c4 040c 	rsb	r4, r4, #12
 80066f4:	f1c4 0520 	rsb	r5, r4, #32
 80066f8:	fa00 f304 	lsl.w	r3, r0, r4
 80066fc:	fa20 f005 	lsr.w	r0, r0, r5
 8006700:	fa01 f204 	lsl.w	r2, r1, r4
 8006704:	ea40 0002 	orr.w	r0, r0, r2
 8006708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800670c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006710:	f141 0100 	adc.w	r1, r1, #0
 8006714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006718:	bf08      	it	eq
 800671a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	f1c4 0520 	rsb	r5, r4, #32
 8006724:	fa00 f205 	lsl.w	r2, r0, r5
 8006728:	ea4e 0e02 	orr.w	lr, lr, r2
 800672c:	fa20 f304 	lsr.w	r3, r0, r4
 8006730:	fa01 f205 	lsl.w	r2, r1, r5
 8006734:	ea43 0302 	orr.w	r3, r3, r2
 8006738:	fa21 f004 	lsr.w	r0, r1, r4
 800673c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006740:	fa21 f204 	lsr.w	r2, r1, r4
 8006744:	ea20 0002 	bic.w	r0, r0, r2
 8006748:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800674c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006750:	bf08      	it	eq
 8006752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006756:	bd70      	pop	{r4, r5, r6, pc}
 8006758:	f094 0f00 	teq	r4, #0
 800675c:	d10f      	bne.n	800677e <__aeabi_dmul+0x1c2>
 800675e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006762:	0040      	lsls	r0, r0, #1
 8006764:	eb41 0101 	adc.w	r1, r1, r1
 8006768:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800676c:	bf08      	it	eq
 800676e:	3c01      	subeq	r4, #1
 8006770:	d0f7      	beq.n	8006762 <__aeabi_dmul+0x1a6>
 8006772:	ea41 0106 	orr.w	r1, r1, r6
 8006776:	f095 0f00 	teq	r5, #0
 800677a:	bf18      	it	ne
 800677c:	4770      	bxne	lr
 800677e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8006782:	0052      	lsls	r2, r2, #1
 8006784:	eb43 0303 	adc.w	r3, r3, r3
 8006788:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800678c:	bf08      	it	eq
 800678e:	3d01      	subeq	r5, #1
 8006790:	d0f7      	beq.n	8006782 <__aeabi_dmul+0x1c6>
 8006792:	ea43 0306 	orr.w	r3, r3, r6
 8006796:	4770      	bx	lr
 8006798:	ea94 0f0c 	teq	r4, ip
 800679c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80067a0:	bf18      	it	ne
 80067a2:	ea95 0f0c 	teqne	r5, ip
 80067a6:	d00c      	beq.n	80067c2 <__aeabi_dmul+0x206>
 80067a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80067ac:	bf18      	it	ne
 80067ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80067b2:	d1d1      	bne.n	8006758 <__aeabi_dmul+0x19c>
 80067b4:	ea81 0103 	eor.w	r1, r1, r3
 80067b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80067bc:	f04f 0000 	mov.w	r0, #0
 80067c0:	bd70      	pop	{r4, r5, r6, pc}
 80067c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80067c6:	bf06      	itte	eq
 80067c8:	4610      	moveq	r0, r2
 80067ca:	4619      	moveq	r1, r3
 80067cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80067d0:	d019      	beq.n	8006806 <__aeabi_dmul+0x24a>
 80067d2:	ea94 0f0c 	teq	r4, ip
 80067d6:	d102      	bne.n	80067de <__aeabi_dmul+0x222>
 80067d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80067dc:	d113      	bne.n	8006806 <__aeabi_dmul+0x24a>
 80067de:	ea95 0f0c 	teq	r5, ip
 80067e2:	d105      	bne.n	80067f0 <__aeabi_dmul+0x234>
 80067e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80067e8:	bf1c      	itt	ne
 80067ea:	4610      	movne	r0, r2
 80067ec:	4619      	movne	r1, r3
 80067ee:	d10a      	bne.n	8006806 <__aeabi_dmul+0x24a>
 80067f0:	ea81 0103 	eor.w	r1, r1, r3
 80067f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80067f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80067fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006800:	f04f 0000 	mov.w	r0, #0
 8006804:	bd70      	pop	{r4, r5, r6, pc}
 8006806:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800680a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800680e:	bd70      	pop	{r4, r5, r6, pc}

08006810 <__aeabi_ddiv>:
 8006810:	b570      	push	{r4, r5, r6, lr}
 8006812:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006816:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800681a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800681e:	bf1d      	ittte	ne
 8006820:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006824:	ea94 0f0c 	teqne	r4, ip
 8006828:	ea95 0f0c 	teqne	r5, ip
 800682c:	f000 f8a7 	bleq	800697e <__aeabi_ddiv+0x16e>
 8006830:	eba4 0405 	sub.w	r4, r4, r5
 8006834:	ea81 0e03 	eor.w	lr, r1, r3
 8006838:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800683c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006840:	f000 8088 	beq.w	8006954 <__aeabi_ddiv+0x144>
 8006844:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006848:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800684c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006850:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006854:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006858:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800685c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006860:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006864:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006868:	429d      	cmp	r5, r3
 800686a:	bf08      	it	eq
 800686c:	4296      	cmpeq	r6, r2
 800686e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8006872:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8006876:	d202      	bcs.n	800687e <__aeabi_ddiv+0x6e>
 8006878:	085b      	lsrs	r3, r3, #1
 800687a:	ea4f 0232 	mov.w	r2, r2, rrx
 800687e:	1ab6      	subs	r6, r6, r2
 8006880:	eb65 0503 	sbc.w	r5, r5, r3
 8006884:	085b      	lsrs	r3, r3, #1
 8006886:	ea4f 0232 	mov.w	r2, r2, rrx
 800688a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800688e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006892:	ebb6 0e02 	subs.w	lr, r6, r2
 8006896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800689a:	bf22      	ittt	cs
 800689c:	1ab6      	subcs	r6, r6, r2
 800689e:	4675      	movcs	r5, lr
 80068a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80068a4:	085b      	lsrs	r3, r3, #1
 80068a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80068aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80068ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80068b2:	bf22      	ittt	cs
 80068b4:	1ab6      	subcs	r6, r6, r2
 80068b6:	4675      	movcs	r5, lr
 80068b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80068bc:	085b      	lsrs	r3, r3, #1
 80068be:	ea4f 0232 	mov.w	r2, r2, rrx
 80068c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80068c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80068ca:	bf22      	ittt	cs
 80068cc:	1ab6      	subcs	r6, r6, r2
 80068ce:	4675      	movcs	r5, lr
 80068d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80068d4:	085b      	lsrs	r3, r3, #1
 80068d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80068da:	ebb6 0e02 	subs.w	lr, r6, r2
 80068de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80068e2:	bf22      	ittt	cs
 80068e4:	1ab6      	subcs	r6, r6, r2
 80068e6:	4675      	movcs	r5, lr
 80068e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80068ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80068f0:	d018      	beq.n	8006924 <__aeabi_ddiv+0x114>
 80068f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80068f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80068fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80068fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006902:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006906:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800690a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800690e:	d1c0      	bne.n	8006892 <__aeabi_ddiv+0x82>
 8006910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006914:	d10b      	bne.n	800692e <__aeabi_ddiv+0x11e>
 8006916:	ea41 0100 	orr.w	r1, r1, r0
 800691a:	f04f 0000 	mov.w	r0, #0
 800691e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006922:	e7b6      	b.n	8006892 <__aeabi_ddiv+0x82>
 8006924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006928:	bf04      	itt	eq
 800692a:	4301      	orreq	r1, r0
 800692c:	2000      	moveq	r0, #0
 800692e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006932:	bf88      	it	hi
 8006934:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006938:	f63f aeaf 	bhi.w	800669a <__aeabi_dmul+0xde>
 800693c:	ebb5 0c03 	subs.w	ip, r5, r3
 8006940:	bf04      	itt	eq
 8006942:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800694a:	f150 0000 	adcs.w	r0, r0, #0
 800694e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006952:	bd70      	pop	{r4, r5, r6, pc}
 8006954:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006958:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800695c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006960:	bfc2      	ittt	gt
 8006962:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800696a:	bd70      	popgt	{r4, r5, r6, pc}
 800696c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006970:	f04f 0e00 	mov.w	lr, #0
 8006974:	3c01      	subs	r4, #1
 8006976:	e690      	b.n	800669a <__aeabi_dmul+0xde>
 8006978:	ea45 0e06 	orr.w	lr, r5, r6
 800697c:	e68d      	b.n	800669a <__aeabi_dmul+0xde>
 800697e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006982:	ea94 0f0c 	teq	r4, ip
 8006986:	bf08      	it	eq
 8006988:	ea95 0f0c 	teqeq	r5, ip
 800698c:	f43f af3b 	beq.w	8006806 <__aeabi_dmul+0x24a>
 8006990:	ea94 0f0c 	teq	r4, ip
 8006994:	d10a      	bne.n	80069ac <__aeabi_ddiv+0x19c>
 8006996:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800699a:	f47f af34 	bne.w	8006806 <__aeabi_dmul+0x24a>
 800699e:	ea95 0f0c 	teq	r5, ip
 80069a2:	f47f af25 	bne.w	80067f0 <__aeabi_dmul+0x234>
 80069a6:	4610      	mov	r0, r2
 80069a8:	4619      	mov	r1, r3
 80069aa:	e72c      	b.n	8006806 <__aeabi_dmul+0x24a>
 80069ac:	ea95 0f0c 	teq	r5, ip
 80069b0:	d106      	bne.n	80069c0 <__aeabi_ddiv+0x1b0>
 80069b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80069b6:	f43f aefd 	beq.w	80067b4 <__aeabi_dmul+0x1f8>
 80069ba:	4610      	mov	r0, r2
 80069bc:	4619      	mov	r1, r3
 80069be:	e722      	b.n	8006806 <__aeabi_dmul+0x24a>
 80069c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80069c4:	bf18      	it	ne
 80069c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80069ca:	f47f aec5 	bne.w	8006758 <__aeabi_dmul+0x19c>
 80069ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80069d2:	f47f af0d 	bne.w	80067f0 <__aeabi_dmul+0x234>
 80069d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80069da:	f47f aeeb 	bne.w	80067b4 <__aeabi_dmul+0x1f8>
 80069de:	e712      	b.n	8006806 <__aeabi_dmul+0x24a>

080069e0 <__gedf2>:
 80069e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80069e4:	e006      	b.n	80069f4 <__cmpdf2+0x4>
 80069e6:	bf00      	nop

080069e8 <__ledf2>:
 80069e8:	f04f 0c01 	mov.w	ip, #1
 80069ec:	e002      	b.n	80069f4 <__cmpdf2+0x4>
 80069ee:	bf00      	nop

080069f0 <__cmpdf2>:
 80069f0:	f04f 0c01 	mov.w	ip, #1
 80069f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80069f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80069fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006a04:	bf18      	it	ne
 8006a06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006a0a:	d01b      	beq.n	8006a44 <__cmpdf2+0x54>
 8006a0c:	b001      	add	sp, #4
 8006a0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006a12:	bf0c      	ite	eq
 8006a14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006a18:	ea91 0f03 	teqne	r1, r3
 8006a1c:	bf02      	ittt	eq
 8006a1e:	ea90 0f02 	teqeq	r0, r2
 8006a22:	2000      	moveq	r0, #0
 8006a24:	4770      	bxeq	lr
 8006a26:	f110 0f00 	cmn.w	r0, #0
 8006a2a:	ea91 0f03 	teq	r1, r3
 8006a2e:	bf58      	it	pl
 8006a30:	4299      	cmppl	r1, r3
 8006a32:	bf08      	it	eq
 8006a34:	4290      	cmpeq	r0, r2
 8006a36:	bf2c      	ite	cs
 8006a38:	17d8      	asrcs	r0, r3, #31
 8006a3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006a3e:	f040 0001 	orr.w	r0, r0, #1
 8006a42:	4770      	bx	lr
 8006a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006a4c:	d102      	bne.n	8006a54 <__cmpdf2+0x64>
 8006a4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006a52:	d107      	bne.n	8006a64 <__cmpdf2+0x74>
 8006a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006a5c:	d1d6      	bne.n	8006a0c <__cmpdf2+0x1c>
 8006a5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006a62:	d0d3      	beq.n	8006a0c <__cmpdf2+0x1c>
 8006a64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop

08006a6c <__aeabi_cdrcmple>:
 8006a6c:	4684      	mov	ip, r0
 8006a6e:	4610      	mov	r0, r2
 8006a70:	4662      	mov	r2, ip
 8006a72:	468c      	mov	ip, r1
 8006a74:	4619      	mov	r1, r3
 8006a76:	4663      	mov	r3, ip
 8006a78:	e000      	b.n	8006a7c <__aeabi_cdcmpeq>
 8006a7a:	bf00      	nop

08006a7c <__aeabi_cdcmpeq>:
 8006a7c:	b501      	push	{r0, lr}
 8006a7e:	f7ff ffb7 	bl	80069f0 <__cmpdf2>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	bf48      	it	mi
 8006a86:	f110 0f00 	cmnmi.w	r0, #0
 8006a8a:	bd01      	pop	{r0, pc}

08006a8c <__aeabi_dcmpeq>:
 8006a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006a90:	f7ff fff4 	bl	8006a7c <__aeabi_cdcmpeq>
 8006a94:	bf0c      	ite	eq
 8006a96:	2001      	moveq	r0, #1
 8006a98:	2000      	movne	r0, #0
 8006a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8006a9e:	bf00      	nop

08006aa0 <__aeabi_dcmplt>:
 8006aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006aa4:	f7ff ffea 	bl	8006a7c <__aeabi_cdcmpeq>
 8006aa8:	bf34      	ite	cc
 8006aaa:	2001      	movcc	r0, #1
 8006aac:	2000      	movcs	r0, #0
 8006aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8006ab2:	bf00      	nop

08006ab4 <__aeabi_dcmple>:
 8006ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006ab8:	f7ff ffe0 	bl	8006a7c <__aeabi_cdcmpeq>
 8006abc:	bf94      	ite	ls
 8006abe:	2001      	movls	r0, #1
 8006ac0:	2000      	movhi	r0, #0
 8006ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8006ac6:	bf00      	nop

08006ac8 <__aeabi_dcmpge>:
 8006ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006acc:	f7ff ffce 	bl	8006a6c <__aeabi_cdrcmple>
 8006ad0:	bf94      	ite	ls
 8006ad2:	2001      	movls	r0, #1
 8006ad4:	2000      	movhi	r0, #0
 8006ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8006ada:	bf00      	nop

08006adc <__aeabi_dcmpgt>:
 8006adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006ae0:	f7ff ffc4 	bl	8006a6c <__aeabi_cdrcmple>
 8006ae4:	bf34      	ite	cc
 8006ae6:	2001      	movcc	r0, #1
 8006ae8:	2000      	movcs	r0, #0
 8006aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8006aee:	bf00      	nop

08006af0 <__aeabi_dcmpun>:
 8006af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006af8:	d102      	bne.n	8006b00 <__aeabi_dcmpun+0x10>
 8006afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006afe:	d10a      	bne.n	8006b16 <__aeabi_dcmpun+0x26>
 8006b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b08:	d102      	bne.n	8006b10 <__aeabi_dcmpun+0x20>
 8006b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006b0e:	d102      	bne.n	8006b16 <__aeabi_dcmpun+0x26>
 8006b10:	f04f 0000 	mov.w	r0, #0
 8006b14:	4770      	bx	lr
 8006b16:	f04f 0001 	mov.w	r0, #1
 8006b1a:	4770      	bx	lr

08006b1c <__aeabi_d2iz>:
 8006b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006b24:	d215      	bcs.n	8006b52 <__aeabi_d2iz+0x36>
 8006b26:	d511      	bpl.n	8006b4c <__aeabi_d2iz+0x30>
 8006b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006b30:	d912      	bls.n	8006b58 <__aeabi_d2iz+0x3c>
 8006b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006b42:	fa23 f002 	lsr.w	r0, r3, r2
 8006b46:	bf18      	it	ne
 8006b48:	4240      	negne	r0, r0
 8006b4a:	4770      	bx	lr
 8006b4c:	f04f 0000 	mov.w	r0, #0
 8006b50:	4770      	bx	lr
 8006b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006b56:	d105      	bne.n	8006b64 <__aeabi_d2iz+0x48>
 8006b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006b5c:	bf08      	it	eq
 8006b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006b62:	4770      	bx	lr
 8006b64:	f04f 0000 	mov.w	r0, #0
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop

08006b6c <__aeabi_d2uiz>:
 8006b6c:	004a      	lsls	r2, r1, #1
 8006b6e:	d211      	bcs.n	8006b94 <__aeabi_d2uiz+0x28>
 8006b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006b74:	d211      	bcs.n	8006b9a <__aeabi_d2uiz+0x2e>
 8006b76:	d50d      	bpl.n	8006b94 <__aeabi_d2uiz+0x28>
 8006b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006b80:	d40e      	bmi.n	8006ba0 <__aeabi_d2uiz+0x34>
 8006b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8006b92:	4770      	bx	lr
 8006b94:	f04f 0000 	mov.w	r0, #0
 8006b98:	4770      	bx	lr
 8006b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006b9e:	d102      	bne.n	8006ba6 <__aeabi_d2uiz+0x3a>
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ba4:	4770      	bx	lr
 8006ba6:	f04f 0000 	mov.w	r0, #0
 8006baa:	4770      	bx	lr

08006bac <__aeabi_uldivmod>:
 8006bac:	b953      	cbnz	r3, 8006bc4 <__aeabi_uldivmod+0x18>
 8006bae:	b94a      	cbnz	r2, 8006bc4 <__aeabi_uldivmod+0x18>
 8006bb0:	2900      	cmp	r1, #0
 8006bb2:	bf08      	it	eq
 8006bb4:	2800      	cmpeq	r0, #0
 8006bb6:	bf1c      	itt	ne
 8006bb8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8006bbc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8006bc0:	f001 b8de 	b.w	8007d80 <__aeabi_idiv0>
 8006bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8006bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006bcc:	f000 f806 	bl	8006bdc <__udivmoddi4>
 8006bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bd8:	b004      	add	sp, #16
 8006bda:	4770      	bx	lr

08006bdc <__udivmoddi4>:
 8006bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be0:	9e08      	ldr	r6, [sp, #32]
 8006be2:	460d      	mov	r5, r1
 8006be4:	4604      	mov	r4, r0
 8006be6:	460f      	mov	r7, r1
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d14a      	bne.n	8006c82 <__udivmoddi4+0xa6>
 8006bec:	428a      	cmp	r2, r1
 8006bee:	4694      	mov	ip, r2
 8006bf0:	d965      	bls.n	8006cbe <__udivmoddi4+0xe2>
 8006bf2:	fab2 f382 	clz	r3, r2
 8006bf6:	b143      	cbz	r3, 8006c0a <__udivmoddi4+0x2e>
 8006bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8006bfc:	f1c3 0220 	rsb	r2, r3, #32
 8006c00:	409f      	lsls	r7, r3
 8006c02:	fa20 f202 	lsr.w	r2, r0, r2
 8006c06:	4317      	orrs	r7, r2
 8006c08:	409c      	lsls	r4, r3
 8006c0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8006c0e:	fa1f f58c 	uxth.w	r5, ip
 8006c12:	fbb7 f1fe 	udiv	r1, r7, lr
 8006c16:	0c22      	lsrs	r2, r4, #16
 8006c18:	fb0e 7711 	mls	r7, lr, r1, r7
 8006c1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8006c20:	fb01 f005 	mul.w	r0, r1, r5
 8006c24:	4290      	cmp	r0, r2
 8006c26:	d90a      	bls.n	8006c3e <__udivmoddi4+0x62>
 8006c28:	eb1c 0202 	adds.w	r2, ip, r2
 8006c2c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8006c30:	f080 811c 	bcs.w	8006e6c <__udivmoddi4+0x290>
 8006c34:	4290      	cmp	r0, r2
 8006c36:	f240 8119 	bls.w	8006e6c <__udivmoddi4+0x290>
 8006c3a:	3902      	subs	r1, #2
 8006c3c:	4462      	add	r2, ip
 8006c3e:	1a12      	subs	r2, r2, r0
 8006c40:	b2a4      	uxth	r4, r4
 8006c42:	fbb2 f0fe 	udiv	r0, r2, lr
 8006c46:	fb0e 2210 	mls	r2, lr, r0, r2
 8006c4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006c4e:	fb00 f505 	mul.w	r5, r0, r5
 8006c52:	42a5      	cmp	r5, r4
 8006c54:	d90a      	bls.n	8006c6c <__udivmoddi4+0x90>
 8006c56:	eb1c 0404 	adds.w	r4, ip, r4
 8006c5a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8006c5e:	f080 8107 	bcs.w	8006e70 <__udivmoddi4+0x294>
 8006c62:	42a5      	cmp	r5, r4
 8006c64:	f240 8104 	bls.w	8006e70 <__udivmoddi4+0x294>
 8006c68:	4464      	add	r4, ip
 8006c6a:	3802      	subs	r0, #2
 8006c6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8006c70:	1b64      	subs	r4, r4, r5
 8006c72:	2100      	movs	r1, #0
 8006c74:	b11e      	cbz	r6, 8006c7e <__udivmoddi4+0xa2>
 8006c76:	40dc      	lsrs	r4, r3
 8006c78:	2300      	movs	r3, #0
 8006c7a:	e9c6 4300 	strd	r4, r3, [r6]
 8006c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c82:	428b      	cmp	r3, r1
 8006c84:	d908      	bls.n	8006c98 <__udivmoddi4+0xbc>
 8006c86:	2e00      	cmp	r6, #0
 8006c88:	f000 80ed 	beq.w	8006e66 <__udivmoddi4+0x28a>
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	e9c6 0500 	strd	r0, r5, [r6]
 8006c92:	4608      	mov	r0, r1
 8006c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c98:	fab3 f183 	clz	r1, r3
 8006c9c:	2900      	cmp	r1, #0
 8006c9e:	d149      	bne.n	8006d34 <__udivmoddi4+0x158>
 8006ca0:	42ab      	cmp	r3, r5
 8006ca2:	d302      	bcc.n	8006caa <__udivmoddi4+0xce>
 8006ca4:	4282      	cmp	r2, r0
 8006ca6:	f200 80f8 	bhi.w	8006e9a <__udivmoddi4+0x2be>
 8006caa:	1a84      	subs	r4, r0, r2
 8006cac:	eb65 0203 	sbc.w	r2, r5, r3
 8006cb0:	2001      	movs	r0, #1
 8006cb2:	4617      	mov	r7, r2
 8006cb4:	2e00      	cmp	r6, #0
 8006cb6:	d0e2      	beq.n	8006c7e <__udivmoddi4+0xa2>
 8006cb8:	e9c6 4700 	strd	r4, r7, [r6]
 8006cbc:	e7df      	b.n	8006c7e <__udivmoddi4+0xa2>
 8006cbe:	b902      	cbnz	r2, 8006cc2 <__udivmoddi4+0xe6>
 8006cc0:	deff      	udf	#255	; 0xff
 8006cc2:	fab2 f382 	clz	r3, r2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f040 8090 	bne.w	8006dec <__udivmoddi4+0x210>
 8006ccc:	1a8a      	subs	r2, r1, r2
 8006cce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006cd2:	fa1f fe8c 	uxth.w	lr, ip
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8006cdc:	fb07 2015 	mls	r0, r7, r5, r2
 8006ce0:	0c22      	lsrs	r2, r4, #16
 8006ce2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006ce6:	fb0e f005 	mul.w	r0, lr, r5
 8006cea:	4290      	cmp	r0, r2
 8006cec:	d908      	bls.n	8006d00 <__udivmoddi4+0x124>
 8006cee:	eb1c 0202 	adds.w	r2, ip, r2
 8006cf2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8006cf6:	d202      	bcs.n	8006cfe <__udivmoddi4+0x122>
 8006cf8:	4290      	cmp	r0, r2
 8006cfa:	f200 80cb 	bhi.w	8006e94 <__udivmoddi4+0x2b8>
 8006cfe:	4645      	mov	r5, r8
 8006d00:	1a12      	subs	r2, r2, r0
 8006d02:	b2a4      	uxth	r4, r4
 8006d04:	fbb2 f0f7 	udiv	r0, r2, r7
 8006d08:	fb07 2210 	mls	r2, r7, r0, r2
 8006d0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006d10:	fb0e fe00 	mul.w	lr, lr, r0
 8006d14:	45a6      	cmp	lr, r4
 8006d16:	d908      	bls.n	8006d2a <__udivmoddi4+0x14e>
 8006d18:	eb1c 0404 	adds.w	r4, ip, r4
 8006d1c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8006d20:	d202      	bcs.n	8006d28 <__udivmoddi4+0x14c>
 8006d22:	45a6      	cmp	lr, r4
 8006d24:	f200 80bb 	bhi.w	8006e9e <__udivmoddi4+0x2c2>
 8006d28:	4610      	mov	r0, r2
 8006d2a:	eba4 040e 	sub.w	r4, r4, lr
 8006d2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8006d32:	e79f      	b.n	8006c74 <__udivmoddi4+0x98>
 8006d34:	f1c1 0720 	rsb	r7, r1, #32
 8006d38:	408b      	lsls	r3, r1
 8006d3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8006d3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8006d42:	fa05 f401 	lsl.w	r4, r5, r1
 8006d46:	fa20 f307 	lsr.w	r3, r0, r7
 8006d4a:	40fd      	lsrs	r5, r7
 8006d4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8006d50:	4323      	orrs	r3, r4
 8006d52:	fbb5 f8f9 	udiv	r8, r5, r9
 8006d56:	fa1f fe8c 	uxth.w	lr, ip
 8006d5a:	fb09 5518 	mls	r5, r9, r8, r5
 8006d5e:	0c1c      	lsrs	r4, r3, #16
 8006d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006d64:	fb08 f50e 	mul.w	r5, r8, lr
 8006d68:	42a5      	cmp	r5, r4
 8006d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8006d6e:	fa00 f001 	lsl.w	r0, r0, r1
 8006d72:	d90b      	bls.n	8006d8c <__udivmoddi4+0x1b0>
 8006d74:	eb1c 0404 	adds.w	r4, ip, r4
 8006d78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8006d7c:	f080 8088 	bcs.w	8006e90 <__udivmoddi4+0x2b4>
 8006d80:	42a5      	cmp	r5, r4
 8006d82:	f240 8085 	bls.w	8006e90 <__udivmoddi4+0x2b4>
 8006d86:	f1a8 0802 	sub.w	r8, r8, #2
 8006d8a:	4464      	add	r4, ip
 8006d8c:	1b64      	subs	r4, r4, r5
 8006d8e:	b29d      	uxth	r5, r3
 8006d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8006d94:	fb09 4413 	mls	r4, r9, r3, r4
 8006d98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8006d9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8006da0:	45a6      	cmp	lr, r4
 8006da2:	d908      	bls.n	8006db6 <__udivmoddi4+0x1da>
 8006da4:	eb1c 0404 	adds.w	r4, ip, r4
 8006da8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8006dac:	d26c      	bcs.n	8006e88 <__udivmoddi4+0x2ac>
 8006dae:	45a6      	cmp	lr, r4
 8006db0:	d96a      	bls.n	8006e88 <__udivmoddi4+0x2ac>
 8006db2:	3b02      	subs	r3, #2
 8006db4:	4464      	add	r4, ip
 8006db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006dba:	fba3 9502 	umull	r9, r5, r3, r2
 8006dbe:	eba4 040e 	sub.w	r4, r4, lr
 8006dc2:	42ac      	cmp	r4, r5
 8006dc4:	46c8      	mov	r8, r9
 8006dc6:	46ae      	mov	lr, r5
 8006dc8:	d356      	bcc.n	8006e78 <__udivmoddi4+0x29c>
 8006dca:	d053      	beq.n	8006e74 <__udivmoddi4+0x298>
 8006dcc:	b156      	cbz	r6, 8006de4 <__udivmoddi4+0x208>
 8006dce:	ebb0 0208 	subs.w	r2, r0, r8
 8006dd2:	eb64 040e 	sbc.w	r4, r4, lr
 8006dd6:	fa04 f707 	lsl.w	r7, r4, r7
 8006dda:	40ca      	lsrs	r2, r1
 8006ddc:	40cc      	lsrs	r4, r1
 8006dde:	4317      	orrs	r7, r2
 8006de0:	e9c6 7400 	strd	r7, r4, [r6]
 8006de4:	4618      	mov	r0, r3
 8006de6:	2100      	movs	r1, #0
 8006de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dec:	f1c3 0120 	rsb	r1, r3, #32
 8006df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8006df4:	fa20 f201 	lsr.w	r2, r0, r1
 8006df8:	fa25 f101 	lsr.w	r1, r5, r1
 8006dfc:	409d      	lsls	r5, r3
 8006dfe:	432a      	orrs	r2, r5
 8006e00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006e04:	fa1f fe8c 	uxth.w	lr, ip
 8006e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8006e0c:	fb07 1510 	mls	r5, r7, r0, r1
 8006e10:	0c11      	lsrs	r1, r2, #16
 8006e12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8006e16:	fb00 f50e 	mul.w	r5, r0, lr
 8006e1a:	428d      	cmp	r5, r1
 8006e1c:	fa04 f403 	lsl.w	r4, r4, r3
 8006e20:	d908      	bls.n	8006e34 <__udivmoddi4+0x258>
 8006e22:	eb1c 0101 	adds.w	r1, ip, r1
 8006e26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8006e2a:	d22f      	bcs.n	8006e8c <__udivmoddi4+0x2b0>
 8006e2c:	428d      	cmp	r5, r1
 8006e2e:	d92d      	bls.n	8006e8c <__udivmoddi4+0x2b0>
 8006e30:	3802      	subs	r0, #2
 8006e32:	4461      	add	r1, ip
 8006e34:	1b49      	subs	r1, r1, r5
 8006e36:	b292      	uxth	r2, r2
 8006e38:	fbb1 f5f7 	udiv	r5, r1, r7
 8006e3c:	fb07 1115 	mls	r1, r7, r5, r1
 8006e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006e44:	fb05 f10e 	mul.w	r1, r5, lr
 8006e48:	4291      	cmp	r1, r2
 8006e4a:	d908      	bls.n	8006e5e <__udivmoddi4+0x282>
 8006e4c:	eb1c 0202 	adds.w	r2, ip, r2
 8006e50:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8006e54:	d216      	bcs.n	8006e84 <__udivmoddi4+0x2a8>
 8006e56:	4291      	cmp	r1, r2
 8006e58:	d914      	bls.n	8006e84 <__udivmoddi4+0x2a8>
 8006e5a:	3d02      	subs	r5, #2
 8006e5c:	4462      	add	r2, ip
 8006e5e:	1a52      	subs	r2, r2, r1
 8006e60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8006e64:	e738      	b.n	8006cd8 <__udivmoddi4+0xfc>
 8006e66:	4631      	mov	r1, r6
 8006e68:	4630      	mov	r0, r6
 8006e6a:	e708      	b.n	8006c7e <__udivmoddi4+0xa2>
 8006e6c:	4639      	mov	r1, r7
 8006e6e:	e6e6      	b.n	8006c3e <__udivmoddi4+0x62>
 8006e70:	4610      	mov	r0, r2
 8006e72:	e6fb      	b.n	8006c6c <__udivmoddi4+0x90>
 8006e74:	4548      	cmp	r0, r9
 8006e76:	d2a9      	bcs.n	8006dcc <__udivmoddi4+0x1f0>
 8006e78:	ebb9 0802 	subs.w	r8, r9, r2
 8006e7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8006e80:	3b01      	subs	r3, #1
 8006e82:	e7a3      	b.n	8006dcc <__udivmoddi4+0x1f0>
 8006e84:	4645      	mov	r5, r8
 8006e86:	e7ea      	b.n	8006e5e <__udivmoddi4+0x282>
 8006e88:	462b      	mov	r3, r5
 8006e8a:	e794      	b.n	8006db6 <__udivmoddi4+0x1da>
 8006e8c:	4640      	mov	r0, r8
 8006e8e:	e7d1      	b.n	8006e34 <__udivmoddi4+0x258>
 8006e90:	46d0      	mov	r8, sl
 8006e92:	e77b      	b.n	8006d8c <__udivmoddi4+0x1b0>
 8006e94:	3d02      	subs	r5, #2
 8006e96:	4462      	add	r2, ip
 8006e98:	e732      	b.n	8006d00 <__udivmoddi4+0x124>
 8006e9a:	4608      	mov	r0, r1
 8006e9c:	e70a      	b.n	8006cb4 <__udivmoddi4+0xd8>
 8006e9e:	4464      	add	r4, ip
 8006ea0:	3802      	subs	r0, #2
 8006ea2:	e742      	b.n	8006d2a <__udivmoddi4+0x14e>

08006ea4 <selfrel_offset31>:
 8006ea4:	6803      	ldr	r3, [r0, #0]
 8006ea6:	005a      	lsls	r2, r3, #1
 8006ea8:	bf4c      	ite	mi
 8006eaa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006eae:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8006eb2:	4418      	add	r0, r3
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop

08006eb8 <search_EIT_table>:
 8006eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ebc:	b329      	cbz	r1, 8006f0a <search_EIT_table+0x52>
 8006ebe:	1e4f      	subs	r7, r1, #1
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	4615      	mov	r5, r2
 8006ec4:	463e      	mov	r6, r7
 8006ec6:	f04f 0800 	mov.w	r8, #0
 8006eca:	eb08 0106 	add.w	r1, r8, r6
 8006ece:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8006ed2:	1049      	asrs	r1, r1, #1
 8006ed4:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8006ed8:	4648      	mov	r0, r9
 8006eda:	f7ff ffe3 	bl	8006ea4 <selfrel_offset31>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	00c8      	lsls	r0, r1, #3
 8006ee2:	3008      	adds	r0, #8
 8006ee4:	428f      	cmp	r7, r1
 8006ee6:	4420      	add	r0, r4
 8006ee8:	d009      	beq.n	8006efe <search_EIT_table+0x46>
 8006eea:	42ab      	cmp	r3, r5
 8006eec:	d809      	bhi.n	8006f02 <search_EIT_table+0x4a>
 8006eee:	f7ff ffd9 	bl	8006ea4 <selfrel_offset31>
 8006ef2:	3801      	subs	r0, #1
 8006ef4:	42a8      	cmp	r0, r5
 8006ef6:	d20a      	bcs.n	8006f0e <search_EIT_table+0x56>
 8006ef8:	f101 0801 	add.w	r8, r1, #1
 8006efc:	e7e5      	b.n	8006eca <search_EIT_table+0x12>
 8006efe:	42ab      	cmp	r3, r5
 8006f00:	d905      	bls.n	8006f0e <search_EIT_table+0x56>
 8006f02:	4588      	cmp	r8, r1
 8006f04:	d001      	beq.n	8006f0a <search_EIT_table+0x52>
 8006f06:	1e4e      	subs	r6, r1, #1
 8006f08:	e7df      	b.n	8006eca <search_EIT_table+0x12>
 8006f0a:	f04f 0900 	mov.w	r9, #0
 8006f0e:	4648      	mov	r0, r9
 8006f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006f14 <__gnu_unwind_get_pr_addr>:
 8006f14:	2801      	cmp	r0, #1
 8006f16:	d007      	beq.n	8006f28 <__gnu_unwind_get_pr_addr+0x14>
 8006f18:	2802      	cmp	r0, #2
 8006f1a:	d007      	beq.n	8006f2c <__gnu_unwind_get_pr_addr+0x18>
 8006f1c:	4b04      	ldr	r3, [pc, #16]	; (8006f30 <__gnu_unwind_get_pr_addr+0x1c>)
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	bf0c      	ite	eq
 8006f22:	4618      	moveq	r0, r3
 8006f24:	2000      	movne	r0, #0
 8006f26:	4770      	bx	lr
 8006f28:	4802      	ldr	r0, [pc, #8]	; (8006f34 <__gnu_unwind_get_pr_addr+0x20>)
 8006f2a:	4770      	bx	lr
 8006f2c:	4802      	ldr	r0, [pc, #8]	; (8006f38 <__gnu_unwind_get_pr_addr+0x24>)
 8006f2e:	4770      	bx	lr
 8006f30:	080075e9 	.word	0x080075e9
 8006f34:	080075ed 	.word	0x080075ed
 8006f38:	080075f1 	.word	0x080075f1

08006f3c <get_eit_entry>:
 8006f3c:	b530      	push	{r4, r5, lr}
 8006f3e:	4b22      	ldr	r3, [pc, #136]	; (8006fc8 <get_eit_entry+0x8c>)
 8006f40:	b083      	sub	sp, #12
 8006f42:	4604      	mov	r4, r0
 8006f44:	1e8d      	subs	r5, r1, #2
 8006f46:	b343      	cbz	r3, 8006f9a <get_eit_entry+0x5e>
 8006f48:	a901      	add	r1, sp, #4
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	f3af 8000 	nop.w
 8006f50:	b1f0      	cbz	r0, 8006f90 <get_eit_entry+0x54>
 8006f52:	9901      	ldr	r1, [sp, #4]
 8006f54:	462a      	mov	r2, r5
 8006f56:	f7ff ffaf 	bl	8006eb8 <search_EIT_table>
 8006f5a:	4601      	mov	r1, r0
 8006f5c:	b1c0      	cbz	r0, 8006f90 <get_eit_entry+0x54>
 8006f5e:	f7ff ffa1 	bl	8006ea4 <selfrel_offset31>
 8006f62:	684b      	ldr	r3, [r1, #4]
 8006f64:	64a0      	str	r0, [r4, #72]	; 0x48
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d02b      	beq.n	8006fc2 <get_eit_entry+0x86>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f101 0004 	add.w	r0, r1, #4
 8006f70:	db25      	blt.n	8006fbe <get_eit_entry+0x82>
 8006f72:	f7ff ff97 	bl	8006ea4 <selfrel_offset31>
 8006f76:	2300      	movs	r3, #0
 8006f78:	6523      	str	r3, [r4, #80]	; 0x50
 8006f7a:	6803      	ldr	r3, [r0, #0]
 8006f7c:	64e0      	str	r0, [r4, #76]	; 0x4c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	db12      	blt.n	8006fa8 <get_eit_entry+0x6c>
 8006f82:	f7ff ff8f 	bl	8006ea4 <selfrel_offset31>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2000      	movs	r0, #0
 8006f8a:	6123      	str	r3, [r4, #16]
 8006f8c:	b003      	add	sp, #12
 8006f8e:	bd30      	pop	{r4, r5, pc}
 8006f90:	2300      	movs	r3, #0
 8006f92:	2009      	movs	r0, #9
 8006f94:	6123      	str	r3, [r4, #16]
 8006f96:	b003      	add	sp, #12
 8006f98:	bd30      	pop	{r4, r5, pc}
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	; (8006fcc <get_eit_entry+0x90>)
 8006f9c:	490c      	ldr	r1, [pc, #48]	; (8006fd0 <get_eit_entry+0x94>)
 8006f9e:	1ac9      	subs	r1, r1, r3
 8006fa0:	10c9      	asrs	r1, r1, #3
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	9101      	str	r1, [sp, #4]
 8006fa6:	e7d5      	b.n	8006f54 <get_eit_entry+0x18>
 8006fa8:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8006fac:	f7ff ffb2 	bl	8006f14 <__gnu_unwind_get_pr_addr>
 8006fb0:	1e03      	subs	r3, r0, #0
 8006fb2:	bf0c      	ite	eq
 8006fb4:	2009      	moveq	r0, #9
 8006fb6:	2000      	movne	r0, #0
 8006fb8:	6123      	str	r3, [r4, #16]
 8006fba:	b003      	add	sp, #12
 8006fbc:	bd30      	pop	{r4, r5, pc}
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e7da      	b.n	8006f78 <get_eit_entry+0x3c>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	2005      	movs	r0, #5
 8006fc6:	e7e0      	b.n	8006f8a <get_eit_entry+0x4e>
 8006fc8:	00000000 	.word	0x00000000
 8006fcc:	080235f4 	.word	0x080235f4
 8006fd0:	080238c4 	.word	0x080238c4

08006fd4 <restore_non_core_regs>:
 8006fd4:	6803      	ldr	r3, [r0, #0]
 8006fd6:	07da      	lsls	r2, r3, #31
 8006fd8:	b510      	push	{r4, lr}
 8006fda:	4604      	mov	r4, r0
 8006fdc:	d406      	bmi.n	8006fec <restore_non_core_regs+0x18>
 8006fde:	079b      	lsls	r3, r3, #30
 8006fe0:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8006fe4:	d509      	bpl.n	8006ffa <restore_non_core_regs+0x26>
 8006fe6:	f000 fc71 	bl	80078cc <__gnu_Unwind_Restore_VFP_D>
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	0759      	lsls	r1, r3, #29
 8006fee:	d509      	bpl.n	8007004 <restore_non_core_regs+0x30>
 8006ff0:	071a      	lsls	r2, r3, #28
 8006ff2:	d50e      	bpl.n	8007012 <restore_non_core_regs+0x3e>
 8006ff4:	06db      	lsls	r3, r3, #27
 8006ff6:	d513      	bpl.n	8007020 <restore_non_core_regs+0x4c>
 8006ff8:	bd10      	pop	{r4, pc}
 8006ffa:	f000 fc5f 	bl	80078bc <__gnu_Unwind_Restore_VFP>
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	0759      	lsls	r1, r3, #29
 8007002:	d4f5      	bmi.n	8006ff0 <restore_non_core_regs+0x1c>
 8007004:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007008:	f000 fc68 	bl	80078dc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	071a      	lsls	r2, r3, #28
 8007010:	d4f0      	bmi.n	8006ff4 <restore_non_core_regs+0x20>
 8007012:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8007016:	f000 fc69 	bl	80078ec <__gnu_Unwind_Restore_WMMXD>
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	06db      	lsls	r3, r3, #27
 800701e:	d4eb      	bmi.n	8006ff8 <restore_non_core_regs+0x24>
 8007020:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8007024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007028:	f000 bca4 	b.w	8007974 <__gnu_Unwind_Restore_WMMXC>

0800702c <__gnu_unwind_24bit.constprop.0>:
 800702c:	2009      	movs	r0, #9
 800702e:	4770      	bx	lr

08007030 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8007030:	4603      	mov	r3, r0
 8007032:	6800      	ldr	r0, [r0, #0]
 8007034:	b100      	cbz	r0, 8007038 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8007036:	4418      	add	r0, r3
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop

0800703c <_Unwind_DebugHook>:
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop

08007040 <unwind_phase2>:
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	4604      	mov	r4, r0
 8007044:	460e      	mov	r6, r1
 8007046:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8007048:	4620      	mov	r0, r4
 800704a:	f7ff ff77 	bl	8006f3c <get_eit_entry>
 800704e:	4605      	mov	r5, r0
 8007050:	b988      	cbnz	r0, 8007076 <unwind_phase2+0x36>
 8007052:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8007054:	6162      	str	r2, [r4, #20]
 8007056:	6923      	ldr	r3, [r4, #16]
 8007058:	4632      	mov	r2, r6
 800705a:	4621      	mov	r1, r4
 800705c:	2001      	movs	r0, #1
 800705e:	4798      	blx	r3
 8007060:	2808      	cmp	r0, #8
 8007062:	d0f0      	beq.n	8007046 <unwind_phase2+0x6>
 8007064:	2807      	cmp	r0, #7
 8007066:	d106      	bne.n	8007076 <unwind_phase2+0x36>
 8007068:	4628      	mov	r0, r5
 800706a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800706c:	f7ff ffe6 	bl	800703c <_Unwind_DebugHook>
 8007070:	1d30      	adds	r0, r6, #4
 8007072:	f000 fc17 	bl	80078a4 <__restore_core_regs>
 8007076:	f016 f9cb 	bl	801d410 <abort>
 800707a:	bf00      	nop

0800707c <unwind_phase2_forced>:
 800707c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007080:	1d0d      	adds	r5, r1, #4
 8007082:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8007086:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800708a:	4607      	mov	r7, r0
 800708c:	4614      	mov	r4, r2
 800708e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007090:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8007094:	f10d 0c0c 	add.w	ip, sp, #12
 8007098:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800709c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800709e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80070a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80070a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80070ac:	ae02      	add	r6, sp, #8
 80070ae:	f04f 0e00 	mov.w	lr, #0
 80070b2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80070b6:	f8c6 e000 	str.w	lr, [r6]
 80070ba:	e020      	b.n	80070fe <unwind_phase2_forced+0x82>
 80070bc:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80070c4:	4631      	mov	r1, r6
 80070c6:	a87a      	add	r0, sp, #488	; 0x1e8
 80070c8:	f017 fd96 	bl	801ebf8 <memcpy>
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	aa7a      	add	r2, sp, #488	; 0x1e8
 80070d0:	4639      	mov	r1, r7
 80070d2:	4650      	mov	r0, sl
 80070d4:	4798      	blx	r3
 80070d6:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80070d8:	6473      	str	r3, [r6, #68]	; 0x44
 80070da:	4621      	mov	r1, r4
 80070dc:	e9cd 6900 	strd	r6, r9, [sp]
 80070e0:	4605      	mov	r5, r0
 80070e2:	463b      	mov	r3, r7
 80070e4:	463a      	mov	r2, r7
 80070e6:	2001      	movs	r0, #1
 80070e8:	47c0      	blx	r8
 80070ea:	4604      	mov	r4, r0
 80070ec:	b9e0      	cbnz	r0, 8007128 <unwind_phase2_forced+0xac>
 80070ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80070f2:	a97a      	add	r1, sp, #488	; 0x1e8
 80070f4:	4630      	mov	r0, r6
 80070f6:	f017 fd7f 	bl	801ebf8 <memcpy>
 80070fa:	2d08      	cmp	r5, #8
 80070fc:	d11a      	bne.n	8007134 <unwind_phase2_forced+0xb8>
 80070fe:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8007100:	4638      	mov	r0, r7
 8007102:	f7ff ff1b 	bl	8006f3c <get_eit_entry>
 8007106:	3409      	adds	r4, #9
 8007108:	fa5f fa84 	uxtb.w	sl, r4
 800710c:	4605      	mov	r5, r0
 800710e:	2800      	cmp	r0, #0
 8007110:	d0d4      	beq.n	80070bc <unwind_phase2_forced+0x40>
 8007112:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8007114:	6473      	str	r3, [r6, #68]	; 0x44
 8007116:	463a      	mov	r2, r7
 8007118:	e9cd 6900 	strd	r6, r9, [sp]
 800711c:	463b      	mov	r3, r7
 800711e:	f04a 0110 	orr.w	r1, sl, #16
 8007122:	2001      	movs	r0, #1
 8007124:	47c0      	blx	r8
 8007126:	b100      	cbz	r0, 800712a <unwind_phase2_forced+0xae>
 8007128:	2509      	movs	r5, #9
 800712a:	4628      	mov	r0, r5
 800712c:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8007130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007134:	2d07      	cmp	r5, #7
 8007136:	d1f7      	bne.n	8007128 <unwind_phase2_forced+0xac>
 8007138:	4620      	mov	r0, r4
 800713a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800713c:	f7ff ff7e 	bl	800703c <_Unwind_DebugHook>
 8007140:	a803      	add	r0, sp, #12
 8007142:	f000 fbaf 	bl	80078a4 <__restore_core_regs>
 8007146:	bf00      	nop

08007148 <_Unwind_GetCFA>:
 8007148:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800714a:	4770      	bx	lr

0800714c <__gnu_Unwind_RaiseException>:
 800714c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800714e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007150:	640b      	str	r3, [r1, #64]	; 0x40
 8007152:	f101 0c04 	add.w	ip, r1, #4
 8007156:	460e      	mov	r6, r1
 8007158:	4605      	mov	r5, r0
 800715a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800715e:	b0f9      	sub	sp, #484	; 0x1e4
 8007160:	ac01      	add	r4, sp, #4
 8007162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007164:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800716a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800716e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007170:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8007174:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007178:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800717c:	9700      	str	r7, [sp, #0]
 800717e:	e006      	b.n	800718e <__gnu_Unwind_RaiseException+0x42>
 8007180:	692b      	ldr	r3, [r5, #16]
 8007182:	466a      	mov	r2, sp
 8007184:	4629      	mov	r1, r5
 8007186:	4798      	blx	r3
 8007188:	2808      	cmp	r0, #8
 800718a:	4604      	mov	r4, r0
 800718c:	d108      	bne.n	80071a0 <__gnu_Unwind_RaiseException+0x54>
 800718e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007190:	4628      	mov	r0, r5
 8007192:	f7ff fed3 	bl	8006f3c <get_eit_entry>
 8007196:	2800      	cmp	r0, #0
 8007198:	d0f2      	beq.n	8007180 <__gnu_Unwind_RaiseException+0x34>
 800719a:	2009      	movs	r0, #9
 800719c:	b079      	add	sp, #484	; 0x1e4
 800719e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071a0:	4668      	mov	r0, sp
 80071a2:	f7ff ff17 	bl	8006fd4 <restore_non_core_regs>
 80071a6:	2c06      	cmp	r4, #6
 80071a8:	d1f7      	bne.n	800719a <__gnu_Unwind_RaiseException+0x4e>
 80071aa:	4631      	mov	r1, r6
 80071ac:	4628      	mov	r0, r5
 80071ae:	f7ff ff47 	bl	8007040 <unwind_phase2>
 80071b2:	bf00      	nop

080071b4 <__gnu_Unwind_ForcedUnwind>:
 80071b4:	60c1      	str	r1, [r0, #12]
 80071b6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80071b8:	6182      	str	r2, [r0, #24]
 80071ba:	6419      	str	r1, [r3, #64]	; 0x40
 80071bc:	2200      	movs	r2, #0
 80071be:	4619      	mov	r1, r3
 80071c0:	e75c      	b.n	800707c <unwind_phase2_forced>
 80071c2:	bf00      	nop

080071c4 <__gnu_Unwind_Resume>:
 80071c4:	b570      	push	{r4, r5, r6, lr}
 80071c6:	68c6      	ldr	r6, [r0, #12]
 80071c8:	6943      	ldr	r3, [r0, #20]
 80071ca:	640b      	str	r3, [r1, #64]	; 0x40
 80071cc:	b9ae      	cbnz	r6, 80071fa <__gnu_Unwind_Resume+0x36>
 80071ce:	6903      	ldr	r3, [r0, #16]
 80071d0:	460a      	mov	r2, r1
 80071d2:	4604      	mov	r4, r0
 80071d4:	460d      	mov	r5, r1
 80071d6:	4601      	mov	r1, r0
 80071d8:	2002      	movs	r0, #2
 80071da:	4798      	blx	r3
 80071dc:	2807      	cmp	r0, #7
 80071de:	d005      	beq.n	80071ec <__gnu_Unwind_Resume+0x28>
 80071e0:	2808      	cmp	r0, #8
 80071e2:	d10f      	bne.n	8007204 <__gnu_Unwind_Resume+0x40>
 80071e4:	4629      	mov	r1, r5
 80071e6:	4620      	mov	r0, r4
 80071e8:	f7ff ff2a 	bl	8007040 <unwind_phase2>
 80071ec:	4630      	mov	r0, r6
 80071ee:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80071f0:	f7ff ff24 	bl	800703c <_Unwind_DebugHook>
 80071f4:	1d28      	adds	r0, r5, #4
 80071f6:	f000 fb55 	bl	80078a4 <__restore_core_regs>
 80071fa:	2201      	movs	r2, #1
 80071fc:	f7ff ff3e 	bl	800707c <unwind_phase2_forced>
 8007200:	f016 f906 	bl	801d410 <abort>
 8007204:	f016 f904 	bl	801d410 <abort>

08007208 <__gnu_Unwind_Resume_or_Rethrow>:
 8007208:	68c2      	ldr	r2, [r0, #12]
 800720a:	b11a      	cbz	r2, 8007214 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 800720c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800720e:	640a      	str	r2, [r1, #64]	; 0x40
 8007210:	2200      	movs	r2, #0
 8007212:	e733      	b.n	800707c <unwind_phase2_forced>
 8007214:	e79a      	b.n	800714c <__gnu_Unwind_RaiseException>
 8007216:	bf00      	nop

08007218 <_Unwind_Complete>:
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop

0800721c <_Unwind_DeleteException>:
 800721c:	6883      	ldr	r3, [r0, #8]
 800721e:	4601      	mov	r1, r0
 8007220:	b10b      	cbz	r3, 8007226 <_Unwind_DeleteException+0xa>
 8007222:	2001      	movs	r0, #1
 8007224:	4718      	bx	r3
 8007226:	4770      	bx	lr

08007228 <_Unwind_VRS_Get>:
 8007228:	2901      	cmp	r1, #1
 800722a:	d012      	beq.n	8007252 <_Unwind_VRS_Get+0x2a>
 800722c:	d809      	bhi.n	8007242 <_Unwind_VRS_Get+0x1a>
 800722e:	b973      	cbnz	r3, 800724e <_Unwind_VRS_Get+0x26>
 8007230:	2a0f      	cmp	r2, #15
 8007232:	d80c      	bhi.n	800724e <_Unwind_VRS_Get+0x26>
 8007234:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007238:	4618      	mov	r0, r3
 800723a:	6853      	ldr	r3, [r2, #4]
 800723c:	9a00      	ldr	r2, [sp, #0]
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	4770      	bx	lr
 8007242:	3903      	subs	r1, #3
 8007244:	2901      	cmp	r1, #1
 8007246:	bf94      	ite	ls
 8007248:	2001      	movls	r0, #1
 800724a:	2002      	movhi	r0, #2
 800724c:	4770      	bx	lr
 800724e:	2002      	movs	r0, #2
 8007250:	4770      	bx	lr
 8007252:	4608      	mov	r0, r1
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop

08007258 <_Unwind_GetGR>:
 8007258:	b500      	push	{lr}
 800725a:	b085      	sub	sp, #20
 800725c:	460a      	mov	r2, r1
 800725e:	2300      	movs	r3, #0
 8007260:	a903      	add	r1, sp, #12
 8007262:	9100      	str	r1, [sp, #0]
 8007264:	4619      	mov	r1, r3
 8007266:	f7ff ffdf 	bl	8007228 <_Unwind_VRS_Get>
 800726a:	9803      	ldr	r0, [sp, #12]
 800726c:	b005      	add	sp, #20
 800726e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007272:	bf00      	nop

08007274 <_Unwind_VRS_Set>:
 8007274:	2901      	cmp	r1, #1
 8007276:	d012      	beq.n	800729e <_Unwind_VRS_Set+0x2a>
 8007278:	d809      	bhi.n	800728e <_Unwind_VRS_Set+0x1a>
 800727a:	b973      	cbnz	r3, 800729a <_Unwind_VRS_Set+0x26>
 800727c:	2a0f      	cmp	r2, #15
 800727e:	d80c      	bhi.n	800729a <_Unwind_VRS_Set+0x26>
 8007280:	9900      	ldr	r1, [sp, #0]
 8007282:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007286:	6809      	ldr	r1, [r1, #0]
 8007288:	6051      	str	r1, [r2, #4]
 800728a:	4618      	mov	r0, r3
 800728c:	4770      	bx	lr
 800728e:	3903      	subs	r1, #3
 8007290:	2901      	cmp	r1, #1
 8007292:	bf94      	ite	ls
 8007294:	2001      	movls	r0, #1
 8007296:	2002      	movhi	r0, #2
 8007298:	4770      	bx	lr
 800729a:	2002      	movs	r0, #2
 800729c:	4770      	bx	lr
 800729e:	4608      	mov	r0, r1
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop

080072a4 <_Unwind_SetGR>:
 80072a4:	b510      	push	{r4, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	2300      	movs	r3, #0
 80072aa:	ac03      	add	r4, sp, #12
 80072ac:	9203      	str	r2, [sp, #12]
 80072ae:	9400      	str	r4, [sp, #0]
 80072b0:	460a      	mov	r2, r1
 80072b2:	4619      	mov	r1, r3
 80072b4:	f7ff ffde 	bl	8007274 <_Unwind_VRS_Set>
 80072b8:	b004      	add	sp, #16
 80072ba:	bd10      	pop	{r4, pc}

080072bc <__gnu_Unwind_Backtrace>:
 80072bc:	b570      	push	{r4, r5, r6, lr}
 80072be:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80072c0:	6413      	str	r3, [r2, #64]	; 0x40
 80072c2:	f102 0c04 	add.w	ip, r2, #4
 80072c6:	4605      	mov	r5, r0
 80072c8:	460c      	mov	r4, r1
 80072ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80072ce:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80072d2:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 80072d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80072da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80072de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80072e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80072e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80072ea:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80072ee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80072f2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80072f6:	9616      	str	r6, [sp, #88]	; 0x58
 80072f8:	e010      	b.n	800731c <__gnu_Unwind_Backtrace+0x60>
 80072fa:	f7ff ffd3 	bl	80072a4 <_Unwind_SetGR>
 80072fe:	4621      	mov	r1, r4
 8007300:	a816      	add	r0, sp, #88	; 0x58
 8007302:	47a8      	blx	r5
 8007304:	4603      	mov	r3, r0
 8007306:	aa16      	add	r2, sp, #88	; 0x58
 8007308:	4669      	mov	r1, sp
 800730a:	2008      	movs	r0, #8
 800730c:	b983      	cbnz	r3, 8007330 <__gnu_Unwind_Backtrace+0x74>
 800730e:	9b04      	ldr	r3, [sp, #16]
 8007310:	4798      	blx	r3
 8007312:	2805      	cmp	r0, #5
 8007314:	4606      	mov	r6, r0
 8007316:	d00c      	beq.n	8007332 <__gnu_Unwind_Backtrace+0x76>
 8007318:	2809      	cmp	r0, #9
 800731a:	d009      	beq.n	8007330 <__gnu_Unwind_Backtrace+0x74>
 800731c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800731e:	4668      	mov	r0, sp
 8007320:	f7ff fe0c 	bl	8006f3c <get_eit_entry>
 8007324:	4603      	mov	r3, r0
 8007326:	466a      	mov	r2, sp
 8007328:	210c      	movs	r1, #12
 800732a:	a816      	add	r0, sp, #88	; 0x58
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0e4      	beq.n	80072fa <__gnu_Unwind_Backtrace+0x3e>
 8007330:	2609      	movs	r6, #9
 8007332:	a816      	add	r0, sp, #88	; 0x58
 8007334:	f7ff fe4e 	bl	8006fd4 <restore_non_core_regs>
 8007338:	4630      	mov	r0, r6
 800733a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800733e:	bd70      	pop	{r4, r5, r6, pc}

08007340 <__gnu_unwind_pr_common>:
 8007340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007344:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8007346:	b089      	sub	sp, #36	; 0x24
 8007348:	461e      	mov	r6, r3
 800734a:	f854 3b04 	ldr.w	r3, [r4], #4
 800734e:	9406      	str	r4, [sp, #24]
 8007350:	460d      	mov	r5, r1
 8007352:	4617      	mov	r7, r2
 8007354:	f000 0803 	and.w	r8, r0, #3
 8007358:	2e00      	cmp	r6, #0
 800735a:	d079      	beq.n	8007450 <__gnu_unwind_pr_common+0x110>
 800735c:	0c1a      	lsrs	r2, r3, #16
 800735e:	f88d 201d 	strb.w	r2, [sp, #29]
 8007362:	041b      	lsls	r3, r3, #16
 8007364:	b2d2      	uxtb	r2, r2
 8007366:	9305      	str	r3, [sp, #20]
 8007368:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800736c:	2302      	movs	r3, #2
 800736e:	f88d 301c 	strb.w	r3, [sp, #28]
 8007372:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007374:	f1b8 0f02 	cmp.w	r8, #2
 8007378:	bf08      	it	eq
 800737a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800737c:	f013 0301 	ands.w	r3, r3, #1
 8007380:	d00c      	beq.n	800739c <__gnu_unwind_pr_common+0x5c>
 8007382:	a905      	add	r1, sp, #20
 8007384:	4638      	mov	r0, r7
 8007386:	f000 fb8f 	bl	8007aa8 <__gnu_unwind_execute>
 800738a:	b918      	cbnz	r0, 8007394 <__gnu_unwind_pr_common+0x54>
 800738c:	2008      	movs	r0, #8
 800738e:	b009      	add	sp, #36	; 0x24
 8007390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007394:	2009      	movs	r0, #9
 8007396:	b009      	add	sp, #36	; 0x24
 8007398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739c:	f8d4 a000 	ldr.w	sl, [r4]
 80073a0:	f1ba 0f00 	cmp.w	sl, #0
 80073a4:	d0ed      	beq.n	8007382 <__gnu_unwind_pr_common+0x42>
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	f000 0308 	and.w	r3, r0, #8
 80073ac:	9302      	str	r3, [sp, #8]
 80073ae:	2e02      	cmp	r6, #2
 80073b0:	d04a      	beq.n	8007448 <__gnu_unwind_pr_common+0x108>
 80073b2:	f8b4 a000 	ldrh.w	sl, [r4]
 80073b6:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80073ba:	3404      	adds	r4, #4
 80073bc:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80073be:	f029 0b01 	bic.w	fp, r9, #1
 80073c2:	210f      	movs	r1, #15
 80073c4:	4638      	mov	r0, r7
 80073c6:	449b      	add	fp, r3
 80073c8:	f7ff ff46 	bl	8007258 <_Unwind_GetGR>
 80073cc:	4583      	cmp	fp, r0
 80073ce:	d839      	bhi.n	8007444 <__gnu_unwind_pr_common+0x104>
 80073d0:	f02a 0201 	bic.w	r2, sl, #1
 80073d4:	445a      	add	r2, fp
 80073d6:	4282      	cmp	r2, r0
 80073d8:	bf94      	ite	ls
 80073da:	2200      	movls	r2, #0
 80073dc:	2201      	movhi	r2, #1
 80073de:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	f00a 0a01 	and.w	sl, sl, #1
 80073ea:	ea43 030a 	orr.w	r3, r3, sl
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d04b      	beq.n	800748a <__gnu_unwind_pr_common+0x14a>
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d032      	beq.n	800745c <__gnu_unwind_pr_common+0x11c>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1cc      	bne.n	8007394 <__gnu_unwind_pr_common+0x54>
 80073fa:	f1b8 0f00 	cmp.w	r8, #0
 80073fe:	d002      	beq.n	8007406 <__gnu_unwind_pr_common+0xc6>
 8007400:	2a00      	cmp	r2, #0
 8007402:	f040 80cd 	bne.w	80075a0 <__gnu_unwind_pr_common+0x260>
 8007406:	3404      	adds	r4, #4
 8007408:	f8d4 a000 	ldr.w	sl, [r4]
 800740c:	f1ba 0f00 	cmp.w	sl, #0
 8007410:	d1cd      	bne.n	80073ae <__gnu_unwind_pr_common+0x6e>
 8007412:	a905      	add	r1, sp, #20
 8007414:	4638      	mov	r0, r7
 8007416:	f000 fb47 	bl	8007aa8 <__gnu_unwind_execute>
 800741a:	2800      	cmp	r0, #0
 800741c:	d1ba      	bne.n	8007394 <__gnu_unwind_pr_common+0x54>
 800741e:	9b01      	ldr	r3, [sp, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0b3      	beq.n	800738c <__gnu_unwind_pr_common+0x4c>
 8007424:	210f      	movs	r1, #15
 8007426:	4638      	mov	r0, r7
 8007428:	f7ff ff16 	bl	8007258 <_Unwind_GetGR>
 800742c:	210e      	movs	r1, #14
 800742e:	4602      	mov	r2, r0
 8007430:	4638      	mov	r0, r7
 8007432:	f7ff ff37 	bl	80072a4 <_Unwind_SetGR>
 8007436:	4638      	mov	r0, r7
 8007438:	4a6a      	ldr	r2, [pc, #424]	; (80075e4 <__gnu_unwind_pr_common+0x2a4>)
 800743a:	210f      	movs	r1, #15
 800743c:	f7ff ff32 	bl	80072a4 <_Unwind_SetGR>
 8007440:	2007      	movs	r0, #7
 8007442:	e7a8      	b.n	8007396 <__gnu_unwind_pr_common+0x56>
 8007444:	2200      	movs	r2, #0
 8007446:	e7ca      	b.n	80073de <__gnu_unwind_pr_common+0x9e>
 8007448:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800744c:	3408      	adds	r4, #8
 800744e:	e7b5      	b.n	80073bc <__gnu_unwind_pr_common+0x7c>
 8007450:	021b      	lsls	r3, r3, #8
 8007452:	9305      	str	r3, [sp, #20]
 8007454:	f88d 601d 	strb.w	r6, [sp, #29]
 8007458:	2303      	movs	r3, #3
 800745a:	e788      	b.n	800736e <__gnu_unwind_pr_common+0x2e>
 800745c:	f8d4 9000 	ldr.w	r9, [r4]
 8007460:	f029 4b00 	bic.w	fp, r9, #2147483648	; 0x80000000
 8007464:	f1b8 0f00 	cmp.w	r8, #0
 8007468:	d146      	bne.n	80074f8 <__gnu_unwind_pr_common+0x1b8>
 800746a:	b12a      	cbz	r2, 8007478 <__gnu_unwind_pr_common+0x138>
 800746c:	9b02      	ldr	r3, [sp, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d05b      	beq.n	800752a <__gnu_unwind_pr_common+0x1ea>
 8007472:	f1bb 0f00 	cmp.w	fp, #0
 8007476:	d073      	beq.n	8007560 <__gnu_unwind_pr_common+0x220>
 8007478:	f1b9 0f00 	cmp.w	r9, #0
 800747c:	da00      	bge.n	8007480 <__gnu_unwind_pr_common+0x140>
 800747e:	3404      	adds	r4, #4
 8007480:	f10b 0b01 	add.w	fp, fp, #1
 8007484:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8007488:	e7be      	b.n	8007408 <__gnu_unwind_pr_common+0xc8>
 800748a:	f1b8 0f00 	cmp.w	r8, #0
 800748e:	d119      	bne.n	80074c4 <__gnu_unwind_pr_common+0x184>
 8007490:	b1b2      	cbz	r2, 80074c0 <__gnu_unwind_pr_common+0x180>
 8007492:	6861      	ldr	r1, [r4, #4]
 8007494:	6822      	ldr	r2, [r4, #0]
 8007496:	1c88      	adds	r0, r1, #2
 8007498:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800749c:	f43f af7a 	beq.w	8007394 <__gnu_unwind_pr_common+0x54>
 80074a0:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80074a4:	3101      	adds	r1, #1
 80074a6:	9304      	str	r3, [sp, #16]
 80074a8:	f000 808e 	beq.w	80075c8 <__gnu_unwind_pr_common+0x288>
 80074ac:	1d20      	adds	r0, r4, #4
 80074ae:	f7ff fdbf 	bl	8007030 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80074b2:	ab04      	add	r3, sp, #16
 80074b4:	4601      	mov	r1, r0
 80074b6:	4628      	mov	r0, r5
 80074b8:	f014 fb86 	bl	801bbc8 <__cxa_type_match>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d159      	bne.n	8007574 <__gnu_unwind_pr_common+0x234>
 80074c0:	3408      	adds	r4, #8
 80074c2:	e7a1      	b.n	8007408 <__gnu_unwind_pr_common+0xc8>
 80074c4:	210d      	movs	r1, #13
 80074c6:	4638      	mov	r0, r7
 80074c8:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80074cc:	f7ff fec4 	bl	8007258 <_Unwind_GetGR>
 80074d0:	4581      	cmp	r9, r0
 80074d2:	d1f5      	bne.n	80074c0 <__gnu_unwind_pr_common+0x180>
 80074d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80074d6:	429c      	cmp	r4, r3
 80074d8:	d1f2      	bne.n	80074c0 <__gnu_unwind_pr_common+0x180>
 80074da:	4620      	mov	r0, r4
 80074dc:	f7ff fce2 	bl	8006ea4 <selfrel_offset31>
 80074e0:	210f      	movs	r1, #15
 80074e2:	4602      	mov	r2, r0
 80074e4:	4638      	mov	r0, r7
 80074e6:	f7ff fedd 	bl	80072a4 <_Unwind_SetGR>
 80074ea:	4638      	mov	r0, r7
 80074ec:	462a      	mov	r2, r5
 80074ee:	2100      	movs	r1, #0
 80074f0:	f7ff fed8 	bl	80072a4 <_Unwind_SetGR>
 80074f4:	2007      	movs	r0, #7
 80074f6:	e74e      	b.n	8007396 <__gnu_unwind_pr_common+0x56>
 80074f8:	210d      	movs	r1, #13
 80074fa:	4638      	mov	r0, r7
 80074fc:	f8d5 a020 	ldr.w	sl, [r5, #32]
 8007500:	f7ff feaa 	bl	8007258 <_Unwind_GetGR>
 8007504:	4582      	cmp	sl, r0
 8007506:	d1b7      	bne.n	8007478 <__gnu_unwind_pr_common+0x138>
 8007508:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800750a:	429c      	cmp	r4, r3
 800750c:	d1b4      	bne.n	8007478 <__gnu_unwind_pr_common+0x138>
 800750e:	2304      	movs	r3, #4
 8007510:	2200      	movs	r2, #0
 8007512:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8007516:	18e3      	adds	r3, r4, r3
 8007518:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 800751c:	636b      	str	r3, [r5, #52]	; 0x34
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	db59      	blt.n	80075d8 <__gnu_unwind_pr_common+0x298>
 8007524:	2301      	movs	r3, #1
 8007526:	9301      	str	r3, [sp, #4]
 8007528:	e7aa      	b.n	8007480 <__gnu_unwind_pr_common+0x140>
 800752a:	4699      	mov	r9, r3
 800752c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8007530:	f8cd 800c 	str.w	r8, [sp, #12]
 8007534:	f104 0a04 	add.w	sl, r4, #4
 8007538:	46b0      	mov	r8, r6
 800753a:	461e      	mov	r6, r3
 800753c:	e00e      	b.n	800755c <__gnu_unwind_pr_common+0x21c>
 800753e:	4650      	mov	r0, sl
 8007540:	9604      	str	r6, [sp, #16]
 8007542:	f7ff fd75 	bl	8007030 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8007546:	2200      	movs	r2, #0
 8007548:	4601      	mov	r1, r0
 800754a:	ab04      	add	r3, sp, #16
 800754c:	4628      	mov	r0, r5
 800754e:	f109 0901 	add.w	r9, r9, #1
 8007552:	f10a 0a04 	add.w	sl, sl, #4
 8007556:	f014 fb37 	bl	801bbc8 <__cxa_type_match>
 800755a:	b9d8      	cbnz	r0, 8007594 <__gnu_unwind_pr_common+0x254>
 800755c:	45d9      	cmp	r9, fp
 800755e:	d1ee      	bne.n	800753e <__gnu_unwind_pr_common+0x1fe>
 8007560:	210d      	movs	r1, #13
 8007562:	4638      	mov	r0, r7
 8007564:	f7ff fe78 	bl	8007258 <_Unwind_GetGR>
 8007568:	9b04      	ldr	r3, [sp, #16]
 800756a:	6228      	str	r0, [r5, #32]
 800756c:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8007570:	2006      	movs	r0, #6
 8007572:	e710      	b.n	8007396 <__gnu_unwind_pr_common+0x56>
 8007574:	4681      	mov	r9, r0
 8007576:	210d      	movs	r1, #13
 8007578:	4638      	mov	r0, r7
 800757a:	f7ff fe6d 	bl	8007258 <_Unwind_GetGR>
 800757e:	f1b9 0f02 	cmp.w	r9, #2
 8007582:	bf04      	itt	eq
 8007584:	462b      	moveq	r3, r5
 8007586:	9a04      	ldreq	r2, [sp, #16]
 8007588:	6228      	str	r0, [r5, #32]
 800758a:	bf14      	ite	ne
 800758c:	9b04      	ldrne	r3, [sp, #16]
 800758e:	f843 2f2c 	streq.w	r2, [r3, #44]!
 8007592:	e7eb      	b.n	800756c <__gnu_unwind_pr_common+0x22c>
 8007594:	4646      	mov	r6, r8
 8007596:	f8d4 9000 	ldr.w	r9, [r4]
 800759a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800759e:	e76b      	b.n	8007478 <__gnu_unwind_pr_common+0x138>
 80075a0:	4620      	mov	r0, r4
 80075a2:	f7ff fc7f 	bl	8006ea4 <selfrel_offset31>
 80075a6:	3404      	adds	r4, #4
 80075a8:	4602      	mov	r2, r0
 80075aa:	63ac      	str	r4, [r5, #56]	; 0x38
 80075ac:	4628      	mov	r0, r5
 80075ae:	4614      	mov	r4, r2
 80075b0:	f014 fb62 	bl	801bc78 <__cxa_begin_cleanup>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	f43f aeed 	beq.w	8007394 <__gnu_unwind_pr_common+0x54>
 80075ba:	4638      	mov	r0, r7
 80075bc:	4622      	mov	r2, r4
 80075be:	210f      	movs	r1, #15
 80075c0:	f7ff fe70 	bl	80072a4 <_Unwind_SetGR>
 80075c4:	2007      	movs	r0, #7
 80075c6:	e6e6      	b.n	8007396 <__gnu_unwind_pr_common+0x56>
 80075c8:	210d      	movs	r1, #13
 80075ca:	4638      	mov	r0, r7
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	f7ff fe43 	bl	8007258 <_Unwind_GetGR>
 80075d2:	9b01      	ldr	r3, [sp, #4]
 80075d4:	6228      	str	r0, [r5, #32]
 80075d6:	e7c9      	b.n	800756c <__gnu_unwind_pr_common+0x22c>
 80075d8:	f10b 0001 	add.w	r0, fp, #1
 80075dc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80075e0:	e77c      	b.n	80074dc <__gnu_unwind_pr_common+0x19c>
 80075e2:	bf00      	nop
 80075e4:	0801ced9 	.word	0x0801ced9

080075e8 <__aeabi_unwind_cpp_pr0>:
 80075e8:	2300      	movs	r3, #0
 80075ea:	e6a9      	b.n	8007340 <__gnu_unwind_pr_common>

080075ec <__aeabi_unwind_cpp_pr1>:
 80075ec:	2301      	movs	r3, #1
 80075ee:	e6a7      	b.n	8007340 <__gnu_unwind_pr_common>

080075f0 <__aeabi_unwind_cpp_pr2>:
 80075f0:	2302      	movs	r3, #2
 80075f2:	e6a5      	b.n	8007340 <__gnu_unwind_pr_common>

080075f4 <_Unwind_VRS_Pop>:
 80075f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075f8:	4606      	mov	r6, r0
 80075fa:	b0c3      	sub	sp, #268	; 0x10c
 80075fc:	4691      	mov	r9, r2
 80075fe:	461c      	mov	r4, r3
 8007600:	2904      	cmp	r1, #4
 8007602:	f200 809b 	bhi.w	800773c <_Unwind_VRS_Pop+0x148>
 8007606:	e8df f001 	tbb	[pc, r1]
 800760a:	567b      	.short	0x567b
 800760c:	2e99      	.short	0x2e99
 800760e:	03          	.byte	0x03
 800760f:	00          	.byte	0x00
 8007610:	2c00      	cmp	r4, #0
 8007612:	f040 8093 	bne.w	800773c <_Unwind_VRS_Pop+0x148>
 8007616:	2a10      	cmp	r2, #16
 8007618:	f200 8090 	bhi.w	800773c <_Unwind_VRS_Pop+0x148>
 800761c:	6803      	ldr	r3, [r0, #0]
 800761e:	06dc      	lsls	r4, r3, #27
 8007620:	f100 80f3 	bmi.w	800780a <_Unwind_VRS_Pop+0x216>
 8007624:	af20      	add	r7, sp, #128	; 0x80
 8007626:	4638      	mov	r0, r7
 8007628:	f000 f9ae 	bl	8007988 <__gnu_Unwind_Save_WMMXC>
 800762c:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 800762e:	4639      	mov	r1, r7
 8007630:	2300      	movs	r3, #0
 8007632:	f04f 0c01 	mov.w	ip, #1
 8007636:	fa0c f203 	lsl.w	r2, ip, r3
 800763a:	ea12 0f09 	tst.w	r2, r9
 800763e:	4620      	mov	r0, r4
 8007640:	f103 0301 	add.w	r3, r3, #1
 8007644:	d003      	beq.n	800764e <_Unwind_VRS_Pop+0x5a>
 8007646:	f850 2b04 	ldr.w	r2, [r0], #4
 800764a:	600a      	str	r2, [r1, #0]
 800764c:	4604      	mov	r4, r0
 800764e:	2b04      	cmp	r3, #4
 8007650:	f101 0104 	add.w	r1, r1, #4
 8007654:	d1ef      	bne.n	8007636 <_Unwind_VRS_Pop+0x42>
 8007656:	4638      	mov	r0, r7
 8007658:	63b4      	str	r4, [r6, #56]	; 0x38
 800765a:	f000 f98b 	bl	8007974 <__gnu_Unwind_Restore_WMMXC>
 800765e:	2000      	movs	r0, #0
 8007660:	b043      	add	sp, #268	; 0x10c
 8007662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007666:	2c03      	cmp	r4, #3
 8007668:	d168      	bne.n	800773c <_Unwind_VRS_Pop+0x148>
 800766a:	b294      	uxth	r4, r2
 800766c:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8007670:	2b10      	cmp	r3, #16
 8007672:	ea4f 4912 	mov.w	r9, r2, lsr #16
 8007676:	d861      	bhi.n	800773c <_Unwind_VRS_Pop+0x148>
 8007678:	6803      	ldr	r3, [r0, #0]
 800767a:	071d      	lsls	r5, r3, #28
 800767c:	f100 80cd 	bmi.w	800781a <_Unwind_VRS_Pop+0x226>
 8007680:	af20      	add	r7, sp, #128	; 0x80
 8007682:	4638      	mov	r0, r7
 8007684:	f000 f954 	bl	8007930 <__gnu_Unwind_Save_WMMXD>
 8007688:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800768a:	eb07 01c9 	add.w	r1, r7, r9, lsl #3
 800768e:	b154      	cbz	r4, 80076a6 <_Unwind_VRS_Pop+0xb2>
 8007690:	460b      	mov	r3, r1
 8007692:	1ad0      	subs	r0, r2, r3
 8007694:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007698:	00e4      	lsls	r4, r4, #3
 800769a:	581d      	ldr	r5, [r3, r0]
 800769c:	f843 5b04 	str.w	r5, [r3], #4
 80076a0:	428b      	cmp	r3, r1
 80076a2:	d1fa      	bne.n	800769a <_Unwind_VRS_Pop+0xa6>
 80076a4:	4422      	add	r2, r4
 80076a6:	4638      	mov	r0, r7
 80076a8:	63b2      	str	r2, [r6, #56]	; 0x38
 80076aa:	f000 f91f 	bl	80078ec <__gnu_Unwind_Restore_WMMXD>
 80076ae:	2000      	movs	r0, #0
 80076b0:	b043      	add	sp, #268	; 0x10c
 80076b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076b6:	2c01      	cmp	r4, #1
 80076b8:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80076bc:	fa1f f982 	uxth.w	r9, r2
 80076c0:	d038      	beq.n	8007734 <_Unwind_VRS_Pop+0x140>
 80076c2:	2c05      	cmp	r4, #5
 80076c4:	d13a      	bne.n	800773c <_Unwind_VRS_Pop+0x148>
 80076c6:	eb08 0309 	add.w	r3, r8, r9
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	d836      	bhi.n	800773c <_Unwind_VRS_Pop+0x148>
 80076ce:	f1b8 0f0f 	cmp.w	r8, #15
 80076d2:	d976      	bls.n	80077c2 <_Unwind_VRS_Pop+0x1ce>
 80076d4:	f1b9 0f00 	cmp.w	r9, #0
 80076d8:	f040 8083 	bne.w	80077e2 <_Unwind_VRS_Pop+0x1ee>
 80076dc:	2b0f      	cmp	r3, #15
 80076de:	d80b      	bhi.n	80076f8 <_Unwind_VRS_Pop+0x104>
 80076e0:	6833      	ldr	r3, [r6, #0]
 80076e2:	07d8      	lsls	r0, r3, #31
 80076e4:	d508      	bpl.n	80076f8 <_Unwind_VRS_Pop+0x104>
 80076e6:	4630      	mov	r0, r6
 80076e8:	f023 0301 	bic.w	r3, r3, #1
 80076ec:	f043 0302 	orr.w	r3, r3, #2
 80076f0:	f840 3b48 	str.w	r3, [r0], #72
 80076f4:	f000 f8ee 	bl	80078d4 <__gnu_Unwind_Save_VFP_D>
 80076f8:	2000      	movs	r0, #0
 80076fa:	b043      	add	sp, #268	; 0x10c
 80076fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007700:	b9e4      	cbnz	r4, 800773c <_Unwind_VRS_Pop+0x148>
 8007702:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8007704:	4623      	mov	r3, r4
 8007706:	fa1f fc82 	uxth.w	ip, r2
 800770a:	2001      	movs	r0, #1
 800770c:	1d34      	adds	r4, r6, #4
 800770e:	fa00 f203 	lsl.w	r2, r0, r3
 8007712:	ea12 0f0c 	tst.w	r2, ip
 8007716:	4639      	mov	r1, r7
 8007718:	d004      	beq.n	8007724 <_Unwind_VRS_Pop+0x130>
 800771a:	f851 2b04 	ldr.w	r2, [r1], #4
 800771e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8007722:	460f      	mov	r7, r1
 8007724:	3301      	adds	r3, #1
 8007726:	2b10      	cmp	r3, #16
 8007728:	d1f1      	bne.n	800770e <_Unwind_VRS_Pop+0x11a>
 800772a:	f419 5000 	ands.w	r0, r9, #8192	; 0x2000
 800772e:	d1e3      	bne.n	80076f8 <_Unwind_VRS_Pop+0x104>
 8007730:	63b7      	str	r7, [r6, #56]	; 0x38
 8007732:	e004      	b.n	800773e <_Unwind_VRS_Pop+0x14a>
 8007734:	eb08 0309 	add.w	r3, r8, r9
 8007738:	2b10      	cmp	r3, #16
 800773a:	d903      	bls.n	8007744 <_Unwind_VRS_Pop+0x150>
 800773c:	2002      	movs	r0, #2
 800773e:	b043      	add	sp, #268	; 0x10c
 8007740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007744:	f1b8 0f0f 	cmp.w	r8, #15
 8007748:	d8f8      	bhi.n	800773c <_Unwind_VRS_Pop+0x148>
 800774a:	6833      	ldr	r3, [r6, #0]
 800774c:	07da      	lsls	r2, r3, #31
 800774e:	d506      	bpl.n	800775e <_Unwind_VRS_Pop+0x16a>
 8007750:	4630      	mov	r0, r6
 8007752:	f023 0303 	bic.w	r3, r3, #3
 8007756:	f840 3b48 	str.w	r3, [r0], #72
 800775a:	f000 f8b3 	bl	80078c4 <__gnu_Unwind_Save_VFP>
 800775e:	af20      	add	r7, sp, #128	; 0x80
 8007760:	4638      	mov	r0, r7
 8007762:	464d      	mov	r5, r9
 8007764:	f000 f8ae 	bl	80078c4 <__gnu_Unwind_Save_VFP>
 8007768:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800776a:	2d00      	cmp	r5, #0
 800776c:	d05e      	beq.n	800782c <_Unwind_VRS_Pop+0x238>
 800776e:	f04f 0900 	mov.w	r9, #0
 8007772:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8007776:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
 800777a:	3904      	subs	r1, #4
 800777c:	f852 0b04 	ldr.w	r0, [r2], #4
 8007780:	f841 0f04 	str.w	r0, [r1, #4]!
 8007784:	429a      	cmp	r2, r3
 8007786:	d1f9      	bne.n	800777c <_Unwind_VRS_Pop+0x188>
 8007788:	f1b9 0f00 	cmp.w	r9, #0
 800778c:	d054      	beq.n	8007838 <_Unwind_VRS_Pop+0x244>
 800778e:	466f      	mov	r7, sp
 8007790:	4641      	mov	r1, r8
 8007792:	2910      	cmp	r1, #16
 8007794:	bf38      	it	cc
 8007796:	2110      	movcc	r1, #16
 8007798:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800779c:	3984      	subs	r1, #132	; 0x84
 800779e:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
 80077a2:	f853 5b04 	ldr.w	r5, [r3], #4
 80077a6:	f841 5f04 	str.w	r5, [r1, #4]!
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d1f9      	bne.n	80077a2 <_Unwind_VRS_Pop+0x1ae>
 80077ae:	2c01      	cmp	r4, #1
 80077b0:	d03b      	beq.n	800782a <_Unwind_VRS_Pop+0x236>
 80077b2:	f1b8 0f0f 	cmp.w	r8, #15
 80077b6:	63b2      	str	r2, [r6, #56]	; 0x38
 80077b8:	d958      	bls.n	800786c <_Unwind_VRS_Pop+0x278>
 80077ba:	4638      	mov	r0, r7
 80077bc:	f000 f88e 	bl	80078dc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80077c0:	e79a      	b.n	80076f8 <_Unwind_VRS_Pop+0x104>
 80077c2:	2b10      	cmp	r3, #16
 80077c4:	d954      	bls.n	8007870 <_Unwind_VRS_Pop+0x27c>
 80077c6:	6832      	ldr	r2, [r6, #0]
 80077c8:	07d7      	lsls	r7, r2, #31
 80077ca:	f1a3 0910 	sub.w	r9, r3, #16
 80077ce:	d509      	bpl.n	80077e4 <_Unwind_VRS_Pop+0x1f0>
 80077d0:	f022 0301 	bic.w	r3, r2, #1
 80077d4:	4630      	mov	r0, r6
 80077d6:	f043 0302 	orr.w	r3, r3, #2
 80077da:	f840 3b48 	str.w	r3, [r0], #72
 80077de:	f000 f879 	bl	80078d4 <__gnu_Unwind_Save_VFP_D>
 80077e2:	6832      	ldr	r2, [r6, #0]
 80077e4:	0753      	lsls	r3, r2, #29
 80077e6:	d439      	bmi.n	800785c <_Unwind_VRS_Pop+0x268>
 80077e8:	f1b8 0f0f 	cmp.w	r8, #15
 80077ec:	d802      	bhi.n	80077f4 <_Unwind_VRS_Pop+0x200>
 80077ee:	a820      	add	r0, sp, #128	; 0x80
 80077f0:	f000 f870 	bl	80078d4 <__gnu_Unwind_Save_VFP_D>
 80077f4:	466f      	mov	r7, sp
 80077f6:	4638      	mov	r0, r7
 80077f8:	f1c8 0510 	rsb	r5, r8, #16
 80077fc:	f000 f872 	bl	80078e4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007800:	2d00      	cmp	r5, #0
 8007802:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8007804:	dd28      	ble.n	8007858 <_Unwind_VRS_Pop+0x264>
 8007806:	af20      	add	r7, sp, #128	; 0x80
 8007808:	e7b3      	b.n	8007772 <_Unwind_VRS_Pop+0x17e>
 800780a:	f023 0310 	bic.w	r3, r3, #16
 800780e:	6003      	str	r3, [r0, #0]
 8007810:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 8007814:	f000 f8b8 	bl	8007988 <__gnu_Unwind_Save_WMMXC>
 8007818:	e704      	b.n	8007624 <_Unwind_VRS_Pop+0x30>
 800781a:	f023 0308 	bic.w	r3, r3, #8
 800781e:	6003      	str	r3, [r0, #0]
 8007820:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8007824:	f000 f884 	bl	8007930 <__gnu_Unwind_Save_WMMXD>
 8007828:	e72a      	b.n	8007680 <_Unwind_VRS_Pop+0x8c>
 800782a:	af20      	add	r7, sp, #128	; 0x80
 800782c:	3204      	adds	r2, #4
 800782e:	63b2      	str	r2, [r6, #56]	; 0x38
 8007830:	4638      	mov	r0, r7
 8007832:	f000 f843 	bl	80078bc <__gnu_Unwind_Restore_VFP>
 8007836:	e75f      	b.n	80076f8 <_Unwind_VRS_Pop+0x104>
 8007838:	2c01      	cmp	r4, #1
 800783a:	d0f7      	beq.n	800782c <_Unwind_VRS_Pop+0x238>
 800783c:	f1b8 0f0f 	cmp.w	r8, #15
 8007840:	63b2      	str	r2, [r6, #56]	; 0x38
 8007842:	f63f af59 	bhi.w	80076f8 <_Unwind_VRS_Pop+0x104>
 8007846:	4638      	mov	r0, r7
 8007848:	f000 f840 	bl	80078cc <__gnu_Unwind_Restore_VFP_D>
 800784c:	f1b9 0f00 	cmp.w	r9, #0
 8007850:	f43f af52 	beq.w	80076f8 <_Unwind_VRS_Pop+0x104>
 8007854:	466f      	mov	r7, sp
 8007856:	e7b0      	b.n	80077ba <_Unwind_VRS_Pop+0x1c6>
 8007858:	4613      	mov	r3, r2
 800785a:	e799      	b.n	8007790 <_Unwind_VRS_Pop+0x19c>
 800785c:	4630      	mov	r0, r6
 800785e:	f022 0204 	bic.w	r2, r2, #4
 8007862:	f840 2bd0 	str.w	r2, [r0], #208
 8007866:	f000 f83d 	bl	80078e4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800786a:	e7bd      	b.n	80077e8 <_Unwind_VRS_Pop+0x1f4>
 800786c:	af20      	add	r7, sp, #128	; 0x80
 800786e:	e7ea      	b.n	8007846 <_Unwind_VRS_Pop+0x252>
 8007870:	6833      	ldr	r3, [r6, #0]
 8007872:	07d9      	lsls	r1, r3, #31
 8007874:	d508      	bpl.n	8007888 <_Unwind_VRS_Pop+0x294>
 8007876:	f023 0301 	bic.w	r3, r3, #1
 800787a:	4630      	mov	r0, r6
 800787c:	f043 0302 	orr.w	r3, r3, #2
 8007880:	f840 3b48 	str.w	r3, [r0], #72
 8007884:	f000 f826 	bl	80078d4 <__gnu_Unwind_Save_VFP_D>
 8007888:	af20      	add	r7, sp, #128	; 0x80
 800788a:	4638      	mov	r0, r7
 800788c:	464d      	mov	r5, r9
 800788e:	f000 f821 	bl	80078d4 <__gnu_Unwind_Save_VFP_D>
 8007892:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8007894:	2d00      	cmp	r5, #0
 8007896:	f47f af6a 	bne.w	800776e <_Unwind_VRS_Pop+0x17a>
 800789a:	4638      	mov	r0, r7
 800789c:	f000 f816 	bl	80078cc <__gnu_Unwind_Restore_VFP_D>
 80078a0:	e72a      	b.n	80076f8 <_Unwind_VRS_Pop+0x104>
 80078a2:	bf00      	nop

080078a4 <__restore_core_regs>:
 80078a4:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80078a8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80078ac:	469c      	mov	ip, r3
 80078ae:	46a6      	mov	lr, r4
 80078b0:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80078b4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80078b8:	46e5      	mov	sp, ip
 80078ba:	bd00      	pop	{pc}

080078bc <__gnu_Unwind_Restore_VFP>:
 80078bc:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop

080078c4 <__gnu_Unwind_Save_VFP>:
 80078c4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop

080078cc <__gnu_Unwind_Restore_VFP_D>:
 80078cc:	ec90 0b20 	vldmia	r0, {d0-d15}
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop

080078d4 <__gnu_Unwind_Save_VFP_D>:
 80078d4:	ec80 0b20 	vstmia	r0, {d0-d15}
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop

080078dc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80078dc:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop

080078e4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80078e4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop

080078ec <__gnu_Unwind_Restore_WMMXD>:
 80078ec:	ecf0 0102 	ldfe	f0, [r0], #8
 80078f0:	ecf0 1102 	ldfe	f1, [r0], #8
 80078f4:	ecf0 2102 	ldfe	f2, [r0], #8
 80078f8:	ecf0 3102 	ldfe	f3, [r0], #8
 80078fc:	ecf0 4102 	ldfe	f4, [r0], #8
 8007900:	ecf0 5102 	ldfe	f5, [r0], #8
 8007904:	ecf0 6102 	ldfe	f6, [r0], #8
 8007908:	ecf0 7102 	ldfe	f7, [r0], #8
 800790c:	ecf0 8102 	ldfp	f0, [r0], #8
 8007910:	ecf0 9102 	ldfp	f1, [r0], #8
 8007914:	ecf0 a102 	ldfp	f2, [r0], #8
 8007918:	ecf0 b102 	ldfp	f3, [r0], #8
 800791c:	ecf0 c102 	ldfp	f4, [r0], #8
 8007920:	ecf0 d102 	ldfp	f5, [r0], #8
 8007924:	ecf0 e102 	ldfp	f6, [r0], #8
 8007928:	ecf0 f102 	ldfp	f7, [r0], #8
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop

08007930 <__gnu_Unwind_Save_WMMXD>:
 8007930:	ece0 0102 	stfe	f0, [r0], #8
 8007934:	ece0 1102 	stfe	f1, [r0], #8
 8007938:	ece0 2102 	stfe	f2, [r0], #8
 800793c:	ece0 3102 	stfe	f3, [r0], #8
 8007940:	ece0 4102 	stfe	f4, [r0], #8
 8007944:	ece0 5102 	stfe	f5, [r0], #8
 8007948:	ece0 6102 	stfe	f6, [r0], #8
 800794c:	ece0 7102 	stfe	f7, [r0], #8
 8007950:	ece0 8102 	stfp	f0, [r0], #8
 8007954:	ece0 9102 	stfp	f1, [r0], #8
 8007958:	ece0 a102 	stfp	f2, [r0], #8
 800795c:	ece0 b102 	stfp	f3, [r0], #8
 8007960:	ece0 c102 	stfp	f4, [r0], #8
 8007964:	ece0 d102 	stfp	f5, [r0], #8
 8007968:	ece0 e102 	stfp	f6, [r0], #8
 800796c:	ece0 f102 	stfp	f7, [r0], #8
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop

08007974 <__gnu_Unwind_Restore_WMMXC>:
 8007974:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8007978:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 800797c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8007980:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop

08007988 <__gnu_Unwind_Save_WMMXC>:
 8007988:	fca0 8101 	stc2	1, cr8, [r0], #4
 800798c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8007990:	fca0 a101 	stc2	1, cr10, [r0], #4
 8007994:	fca0 b101 	stc2	1, cr11, [r0], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop

0800799c <_Unwind_RaiseException>:
 800799c:	46ec      	mov	ip, sp
 800799e:	b500      	push	{lr}
 80079a0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80079a4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80079a8:	f04f 0300 	mov.w	r3, #0
 80079ac:	e92d 000c 	stmdb	sp!, {r2, r3}
 80079b0:	a901      	add	r1, sp, #4
 80079b2:	f7ff fbcb 	bl	800714c <__gnu_Unwind_RaiseException>
 80079b6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80079ba:	b012      	add	sp, #72	; 0x48
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop

080079c0 <_Unwind_Resume>:
 80079c0:	46ec      	mov	ip, sp
 80079c2:	b500      	push	{lr}
 80079c4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80079c8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80079cc:	f04f 0300 	mov.w	r3, #0
 80079d0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80079d4:	a901      	add	r1, sp, #4
 80079d6:	f7ff fbf5 	bl	80071c4 <__gnu_Unwind_Resume>
 80079da:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80079de:	b012      	add	sp, #72	; 0x48
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop

080079e4 <_Unwind_Resume_or_Rethrow>:
 80079e4:	46ec      	mov	ip, sp
 80079e6:	b500      	push	{lr}
 80079e8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80079ec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80079f0:	f04f 0300 	mov.w	r3, #0
 80079f4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80079f8:	a901      	add	r1, sp, #4
 80079fa:	f7ff fc05 	bl	8007208 <__gnu_Unwind_Resume_or_Rethrow>
 80079fe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007a02:	b012      	add	sp, #72	; 0x48
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop

08007a08 <_Unwind_ForcedUnwind>:
 8007a08:	46ec      	mov	ip, sp
 8007a0a:	b500      	push	{lr}
 8007a0c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007a10:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007a14:	f04f 0300 	mov.w	r3, #0
 8007a18:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007a1c:	ab01      	add	r3, sp, #4
 8007a1e:	f7ff fbc9 	bl	80071b4 <__gnu_Unwind_ForcedUnwind>
 8007a22:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007a26:	b012      	add	sp, #72	; 0x48
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop

08007a2c <_Unwind_Backtrace>:
 8007a2c:	46ec      	mov	ip, sp
 8007a2e:	b500      	push	{lr}
 8007a30:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007a34:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007a38:	f04f 0300 	mov.w	r3, #0
 8007a3c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007a40:	aa01      	add	r2, sp, #4
 8007a42:	f7ff fc3b 	bl	80072bc <__gnu_Unwind_Backtrace>
 8007a46:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007a4a:	b012      	add	sp, #72	; 0x48
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop

08007a50 <next_unwind_byte>:
 8007a50:	7a02      	ldrb	r2, [r0, #8]
 8007a52:	4603      	mov	r3, r0
 8007a54:	b97a      	cbnz	r2, 8007a76 <next_unwind_byte+0x26>
 8007a56:	7a42      	ldrb	r2, [r0, #9]
 8007a58:	b1a2      	cbz	r2, 8007a84 <next_unwind_byte+0x34>
 8007a5a:	6841      	ldr	r1, [r0, #4]
 8007a5c:	3a01      	subs	r2, #1
 8007a5e:	b410      	push	{r4}
 8007a60:	7242      	strb	r2, [r0, #9]
 8007a62:	6808      	ldr	r0, [r1, #0]
 8007a64:	2203      	movs	r2, #3
 8007a66:	1d0c      	adds	r4, r1, #4
 8007a68:	721a      	strb	r2, [r3, #8]
 8007a6a:	0202      	lsls	r2, r0, #8
 8007a6c:	605c      	str	r4, [r3, #4]
 8007a6e:	0e00      	lsrs	r0, r0, #24
 8007a70:	bc10      	pop	{r4}
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	4770      	bx	lr
 8007a76:	6800      	ldr	r0, [r0, #0]
 8007a78:	3a01      	subs	r2, #1
 8007a7a:	721a      	strb	r2, [r3, #8]
 8007a7c:	0202      	lsls	r2, r0, #8
 8007a7e:	601a      	str	r2, [r3, #0]
 8007a80:	0e00      	lsrs	r0, r0, #24
 8007a82:	4770      	bx	lr
 8007a84:	20b0      	movs	r0, #176	; 0xb0
 8007a86:	4770      	bx	lr

08007a88 <_Unwind_GetGR.constprop.0>:
 8007a88:	b500      	push	{lr}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	aa03      	add	r2, sp, #12
 8007a90:	9200      	str	r2, [sp, #0]
 8007a92:	4619      	mov	r1, r3
 8007a94:	220c      	movs	r2, #12
 8007a96:	f7ff fbc7 	bl	8007228 <_Unwind_VRS_Get>
 8007a9a:	9803      	ldr	r0, [sp, #12]
 8007a9c:	b005      	add	sp, #20
 8007a9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007aa2:	bf00      	nop

08007aa4 <unwind_UCB_from_context>:
 8007aa4:	e7f0      	b.n	8007a88 <_Unwind_GetGR.constprop.0>
 8007aa6:	bf00      	nop

08007aa8 <__gnu_unwind_execute>:
 8007aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007aac:	b085      	sub	sp, #20
 8007aae:	4607      	mov	r7, r0
 8007ab0:	460e      	mov	r6, r1
 8007ab2:	f04f 0800 	mov.w	r8, #0
 8007ab6:	ad03      	add	r5, sp, #12
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f7ff ffc9 	bl	8007a50 <next_unwind_byte>
 8007abe:	28b0      	cmp	r0, #176	; 0xb0
 8007ac0:	4604      	mov	r4, r0
 8007ac2:	f000 80cb 	beq.w	8007c5c <__gnu_unwind_execute+0x1b4>
 8007ac6:	0603      	lsls	r3, r0, #24
 8007ac8:	d540      	bpl.n	8007b4c <__gnu_unwind_execute+0xa4>
 8007aca:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8007ace:	2b80      	cmp	r3, #128	; 0x80
 8007ad0:	d056      	beq.n	8007b80 <__gnu_unwind_execute+0xd8>
 8007ad2:	2bb0      	cmp	r3, #176	; 0xb0
 8007ad4:	d07d      	beq.n	8007bd2 <__gnu_unwind_execute+0x12a>
 8007ad6:	d81c      	bhi.n	8007b12 <__gnu_unwind_execute+0x6a>
 8007ad8:	2b90      	cmp	r3, #144	; 0x90
 8007ada:	f000 8093 	beq.w	8007c04 <__gnu_unwind_execute+0x15c>
 8007ade:	2ba0      	cmp	r3, #160	; 0xa0
 8007ae0:	d113      	bne.n	8007b0a <__gnu_unwind_execute+0x62>
 8007ae2:	43c3      	mvns	r3, r0
 8007ae4:	f003 0307 	and.w	r3, r3, #7
 8007ae8:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8007aec:	411a      	asrs	r2, r3
 8007aee:	0701      	lsls	r1, r0, #28
 8007af0:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8007af4:	f04f 0300 	mov.w	r3, #0
 8007af8:	bf48      	it	mi
 8007afa:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8007afe:	4619      	mov	r1, r3
 8007b00:	4638      	mov	r0, r7
 8007b02:	f7ff fd77 	bl	80075f4 <_Unwind_VRS_Pop>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d0d6      	beq.n	8007ab8 <__gnu_unwind_execute+0x10>
 8007b0a:	2009      	movs	r0, #9
 8007b0c:	b005      	add	sp, #20
 8007b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b12:	2bc0      	cmp	r3, #192	; 0xc0
 8007b14:	d14b      	bne.n	8007bae <__gnu_unwind_execute+0x106>
 8007b16:	28c6      	cmp	r0, #198	; 0xc6
 8007b18:	f000 8089 	beq.w	8007c2e <__gnu_unwind_execute+0x186>
 8007b1c:	28c7      	cmp	r0, #199	; 0xc7
 8007b1e:	f000 80a2 	beq.w	8007c66 <__gnu_unwind_execute+0x1be>
 8007b22:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8007b26:	2bc0      	cmp	r3, #192	; 0xc0
 8007b28:	f000 80bc 	beq.w	8007ca4 <__gnu_unwind_execute+0x1fc>
 8007b2c:	28c8      	cmp	r0, #200	; 0xc8
 8007b2e:	f000 80bf 	beq.w	8007cb0 <__gnu_unwind_execute+0x208>
 8007b32:	28c9      	cmp	r0, #201	; 0xc9
 8007b34:	d1e9      	bne.n	8007b0a <__gnu_unwind_execute+0x62>
 8007b36:	4630      	mov	r0, r6
 8007b38:	f7ff ff8a 	bl	8007a50 <next_unwind_byte>
 8007b3c:	0302      	lsls	r2, r0, #12
 8007b3e:	f000 000f 	and.w	r0, r0, #15
 8007b42:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8007b46:	3001      	adds	r0, #1
 8007b48:	4302      	orrs	r2, r0
 8007b4a:	e039      	b.n	8007bc0 <__gnu_unwind_execute+0x118>
 8007b4c:	0083      	lsls	r3, r0, #2
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	f103 0904 	add.w	r9, r3, #4
 8007b54:	2300      	movs	r3, #0
 8007b56:	4619      	mov	r1, r3
 8007b58:	9500      	str	r5, [sp, #0]
 8007b5a:	220d      	movs	r2, #13
 8007b5c:	4638      	mov	r0, r7
 8007b5e:	f7ff fb63 	bl	8007228 <_Unwind_VRS_Get>
 8007b62:	9b03      	ldr	r3, [sp, #12]
 8007b64:	0660      	lsls	r0, r4, #25
 8007b66:	bf4c      	ite	mi
 8007b68:	eba3 0309 	submi.w	r3, r3, r9
 8007b6c:	444b      	addpl	r3, r9
 8007b6e:	9303      	str	r3, [sp, #12]
 8007b70:	2300      	movs	r3, #0
 8007b72:	9500      	str	r5, [sp, #0]
 8007b74:	220d      	movs	r2, #13
 8007b76:	4619      	mov	r1, r3
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f7ff fb7b 	bl	8007274 <_Unwind_VRS_Set>
 8007b7e:	e79b      	b.n	8007ab8 <__gnu_unwind_execute+0x10>
 8007b80:	0204      	lsls	r4, r0, #8
 8007b82:	4630      	mov	r0, r6
 8007b84:	f7ff ff64 	bl	8007a50 <next_unwind_byte>
 8007b88:	4320      	orrs	r0, r4
 8007b8a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007b8e:	d0bc      	beq.n	8007b0a <__gnu_unwind_execute+0x62>
 8007b90:	0104      	lsls	r4, r0, #4
 8007b92:	2300      	movs	r3, #0
 8007b94:	b2a2      	uxth	r2, r4
 8007b96:	4619      	mov	r1, r3
 8007b98:	4638      	mov	r0, r7
 8007b9a:	f7ff fd2b 	bl	80075f4 <_Unwind_VRS_Pop>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d1b3      	bne.n	8007b0a <__gnu_unwind_execute+0x62>
 8007ba2:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8007ba6:	bf18      	it	ne
 8007ba8:	f04f 0801 	movne.w	r8, #1
 8007bac:	e784      	b.n	8007ab8 <__gnu_unwind_execute+0x10>
 8007bae:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8007bb2:	2bd0      	cmp	r3, #208	; 0xd0
 8007bb4:	d1a9      	bne.n	8007b0a <__gnu_unwind_execute+0x62>
 8007bb6:	f000 0207 	and.w	r2, r0, #7
 8007bba:	3201      	adds	r2, #1
 8007bbc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007bc0:	2305      	movs	r3, #5
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	f7ff fd15 	bl	80075f4 <_Unwind_VRS_Pop>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	f43f af74 	beq.w	8007ab8 <__gnu_unwind_execute+0x10>
 8007bd0:	e79b      	b.n	8007b0a <__gnu_unwind_execute+0x62>
 8007bd2:	28b1      	cmp	r0, #177	; 0xb1
 8007bd4:	d037      	beq.n	8007c46 <__gnu_unwind_execute+0x19e>
 8007bd6:	28b2      	cmp	r0, #178	; 0xb2
 8007bd8:	f000 8087 	beq.w	8007cea <__gnu_unwind_execute+0x242>
 8007bdc:	28b3      	cmp	r0, #179	; 0xb3
 8007bde:	d056      	beq.n	8007c8e <__gnu_unwind_execute+0x1e6>
 8007be0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8007be4:	2bb4      	cmp	r3, #180	; 0xb4
 8007be6:	d090      	beq.n	8007b0a <__gnu_unwind_execute+0x62>
 8007be8:	f000 0207 	and.w	r2, r0, #7
 8007bec:	3201      	adds	r2, #1
 8007bee:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	f7ff fcfc 	bl	80075f4 <_Unwind_VRS_Pop>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f43f af5b 	beq.w	8007ab8 <__gnu_unwind_execute+0x10>
 8007c02:	e782      	b.n	8007b0a <__gnu_unwind_execute+0x62>
 8007c04:	f000 030d 	and.w	r3, r0, #13
 8007c08:	2b0d      	cmp	r3, #13
 8007c0a:	f43f af7e 	beq.w	8007b0a <__gnu_unwind_execute+0x62>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	f000 020f 	and.w	r2, r0, #15
 8007c14:	4619      	mov	r1, r3
 8007c16:	9500      	str	r5, [sp, #0]
 8007c18:	4638      	mov	r0, r7
 8007c1a:	f7ff fb05 	bl	8007228 <_Unwind_VRS_Get>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9500      	str	r5, [sp, #0]
 8007c22:	220d      	movs	r2, #13
 8007c24:	4619      	mov	r1, r3
 8007c26:	4638      	mov	r0, r7
 8007c28:	f7ff fb24 	bl	8007274 <_Unwind_VRS_Set>
 8007c2c:	e744      	b.n	8007ab8 <__gnu_unwind_execute+0x10>
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f7ff ff0e 	bl	8007a50 <next_unwind_byte>
 8007c34:	0302      	lsls	r2, r0, #12
 8007c36:	f000 000f 	and.w	r0, r0, #15
 8007c3a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8007c3e:	3001      	adds	r0, #1
 8007c40:	4302      	orrs	r2, r0
 8007c42:	2303      	movs	r3, #3
 8007c44:	e7d6      	b.n	8007bf4 <__gnu_unwind_execute+0x14c>
 8007c46:	4630      	mov	r0, r6
 8007c48:	f7ff ff02 	bl	8007a50 <next_unwind_byte>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f43f af5b 	beq.w	8007b0a <__gnu_unwind_execute+0x62>
 8007c54:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8007c58:	d0cc      	beq.n	8007bf4 <__gnu_unwind_execute+0x14c>
 8007c5a:	e756      	b.n	8007b0a <__gnu_unwind_execute+0x62>
 8007c5c:	f1b8 0f00 	cmp.w	r8, #0
 8007c60:	d032      	beq.n	8007cc8 <__gnu_unwind_execute+0x220>
 8007c62:	2000      	movs	r0, #0
 8007c64:	e752      	b.n	8007b0c <__gnu_unwind_execute+0x64>
 8007c66:	4630      	mov	r0, r6
 8007c68:	f7ff fef2 	bl	8007a50 <next_unwind_byte>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	f43f af4b 	beq.w	8007b0a <__gnu_unwind_execute+0x62>
 8007c74:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 8007c78:	f47f af47 	bne.w	8007b0a <__gnu_unwind_execute+0x62>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	2104      	movs	r1, #4
 8007c80:	4638      	mov	r0, r7
 8007c82:	f7ff fcb7 	bl	80075f4 <_Unwind_VRS_Pop>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	f43f af16 	beq.w	8007ab8 <__gnu_unwind_execute+0x10>
 8007c8c:	e73d      	b.n	8007b0a <__gnu_unwind_execute+0x62>
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f7ff fede 	bl	8007a50 <next_unwind_byte>
 8007c94:	0302      	lsls	r2, r0, #12
 8007c96:	f000 000f 	and.w	r0, r0, #15
 8007c9a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	4302      	orrs	r2, r0
 8007ca2:	e7a6      	b.n	8007bf2 <__gnu_unwind_execute+0x14a>
 8007ca4:	f000 020f 	and.w	r2, r0, #15
 8007ca8:	3201      	adds	r2, #1
 8007caa:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8007cae:	e7c8      	b.n	8007c42 <__gnu_unwind_execute+0x19a>
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	f7ff fecd 	bl	8007a50 <next_unwind_byte>
 8007cb6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8007cba:	f000 030f 	and.w	r3, r0, #15
 8007cbe:	3210      	adds	r2, #16
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8007cc6:	e77b      	b.n	8007bc0 <__gnu_unwind_execute+0x118>
 8007cc8:	ac03      	add	r4, sp, #12
 8007cca:	4643      	mov	r3, r8
 8007ccc:	220e      	movs	r2, #14
 8007cce:	4641      	mov	r1, r8
 8007cd0:	9400      	str	r4, [sp, #0]
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	f7ff faa8 	bl	8007228 <_Unwind_VRS_Get>
 8007cd8:	9400      	str	r4, [sp, #0]
 8007cda:	4643      	mov	r3, r8
 8007cdc:	220f      	movs	r2, #15
 8007cde:	4641      	mov	r1, r8
 8007ce0:	4638      	mov	r0, r7
 8007ce2:	f7ff fac7 	bl	8007274 <_Unwind_VRS_Set>
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	e710      	b.n	8007b0c <__gnu_unwind_execute+0x64>
 8007cea:	2300      	movs	r3, #0
 8007cec:	220d      	movs	r2, #13
 8007cee:	4619      	mov	r1, r3
 8007cf0:	9500      	str	r5, [sp, #0]
 8007cf2:	4638      	mov	r0, r7
 8007cf4:	f7ff fa98 	bl	8007228 <_Unwind_VRS_Get>
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	f7ff fea9 	bl	8007a50 <next_unwind_byte>
 8007cfe:	0602      	lsls	r2, r0, #24
 8007d00:	9c03      	ldr	r4, [sp, #12]
 8007d02:	f04f 0902 	mov.w	r9, #2
 8007d06:	d50c      	bpl.n	8007d22 <__gnu_unwind_execute+0x27a>
 8007d08:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007d0c:	fa00 f009 	lsl.w	r0, r0, r9
 8007d10:	4404      	add	r4, r0
 8007d12:	4630      	mov	r0, r6
 8007d14:	9403      	str	r4, [sp, #12]
 8007d16:	f7ff fe9b 	bl	8007a50 <next_unwind_byte>
 8007d1a:	0603      	lsls	r3, r0, #24
 8007d1c:	f109 0907 	add.w	r9, r9, #7
 8007d20:	d4f2      	bmi.n	8007d08 <__gnu_unwind_execute+0x260>
 8007d22:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8007d26:	fa03 f309 	lsl.w	r3, r3, r9
 8007d2a:	f504 7401 	add.w	r4, r4, #516	; 0x204
 8007d2e:	4423      	add	r3, r4
 8007d30:	e71d      	b.n	8007b6e <__gnu_unwind_execute+0xc6>
 8007d32:	bf00      	nop

08007d34 <__gnu_unwind_frame>:
 8007d34:	b510      	push	{r4, lr}
 8007d36:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007d38:	6853      	ldr	r3, [r2, #4]
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	f04f 0c03 	mov.w	ip, #3
 8007d40:	3208      	adds	r2, #8
 8007d42:	021c      	lsls	r4, r3, #8
 8007d44:	4608      	mov	r0, r1
 8007d46:	0e1b      	lsrs	r3, r3, #24
 8007d48:	a901      	add	r1, sp, #4
 8007d4a:	9401      	str	r4, [sp, #4]
 8007d4c:	9202      	str	r2, [sp, #8]
 8007d4e:	f88d c00c 	strb.w	ip, [sp, #12]
 8007d52:	f88d 300d 	strb.w	r3, [sp, #13]
 8007d56:	f7ff fea7 	bl	8007aa8 <__gnu_unwind_execute>
 8007d5a:	b004      	add	sp, #16
 8007d5c:	bd10      	pop	{r4, pc}
 8007d5e:	bf00      	nop

08007d60 <_Unwind_GetRegionStart>:
 8007d60:	b508      	push	{r3, lr}
 8007d62:	f7ff fe9f 	bl	8007aa4 <unwind_UCB_from_context>
 8007d66:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8007d68:	bd08      	pop	{r3, pc}
 8007d6a:	bf00      	nop

08007d6c <_Unwind_GetLanguageSpecificData>:
 8007d6c:	b508      	push	{r3, lr}
 8007d6e:	f7ff fe99 	bl	8007aa4 <unwind_UCB_from_context>
 8007d72:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8007d74:	79c3      	ldrb	r3, [r0, #7]
 8007d76:	3302      	adds	r3, #2
 8007d78:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007d7c:	bd08      	pop	{r3, pc}
 8007d7e:	bf00      	nop

08007d80 <__aeabi_idiv0>:
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop

08007d84 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	60fb      	str	r3, [r7, #12]
      return __builtin_is_constant_evaluated();
 8007d90:	2300      	movs	r3, #0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d004      	beq.n	8007da0 <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fba2 	bl	80084e0 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	e004      	b.n	8007daa <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7fe fa3d 	bl	8006220 <strlen>
 8007da6:	4603      	mov	r3, r0
 8007da8:	bf00      	nop
      }
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	6039      	str	r1, [r7, #0]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <_ZNSt7__cxx119to_stringEj>:
    return __str;
  }

  inline string
  to_string(unsigned __val)
  {
 8007dca:	b590      	push	{r4, r7, lr}
 8007dcc:	b085      	sub	sp, #20
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	6039      	str	r1, [r7, #0]
    string __str(__detail::__to_chars_len(__val), '\0');
 8007dd4:	210a      	movs	r1, #10
 8007dd6:	6838      	ldr	r0, [r7, #0]
 8007dd8:	f000 fba2 	bl	8008520 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 8007ddc:	4604      	mov	r4, r0
 8007dde:	f107 030c 	add.w	r3, r7, #12
 8007de2:	4618      	mov	r0, r3
 8007de4:	f012 ffe6 	bl	801adb4 <_ZNSaIcEC1Ev>
 8007de8:	f107 030c 	add.w	r3, r7, #12
 8007dec:	2200      	movs	r2, #0
 8007dee:	4621      	mov	r1, r4
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fbd4 	bl	800859e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEjcRKS3_>
 8007df6:	f107 030c 	add.w	r3, r7, #12
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f012 ffde 	bl	801adbc <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
 8007e00:	2100      	movs	r1, #0
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f013 fb5a 	bl	801b4bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8007e08:	4604      	mov	r4, r0
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f013 fb26 	bl	801b45c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8007e10:	4603      	mov	r3, r0
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	4619      	mov	r1, r3
 8007e16:	4620      	mov	r0, r4
 8007e18:	f000 fbde 	bl	80085d8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 8007e1c:	bf00      	nop
  }
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd90      	pop	{r4, r7, pc}

08007e26 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8007e26:	b480      	push	{r7}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e34:	d205      	bcs.n	8007e42 <_ZSt16__deque_buf_sizej+0x1c>
 8007e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e40:	e000      	b.n	8007e44 <_ZSt16__deque_buf_sizej+0x1e>
 8007e42:	2301      	movs	r3, #1
 8007e44:	4618      	mov	r0, r3
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d201      	bcs.n	8007e6a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	e000      	b.n	8007e6c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007e6a:	687b      	ldr	r3, [r7, #4]
    }
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <_ZN6Logger11getInstanceEv>:

	static void registerInstance(Logger* inst) {
		instance = inst;
	}

	static Logger* getInstance() {
 8007e78:	b480      	push	{r7}
 8007e7a:	af00      	add	r7, sp, #0
		return instance;
 8007e7c:	4b03      	ldr	r3, [pc, #12]	; (8007e8c <_ZN6Logger11getInstanceEv+0x14>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
	}
 8007e80:	4618      	mov	r0, r3
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	20000244 	.word	0x20000244

08007e90 <_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 fcb9 	bl	8008812 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
	...

08007eac <_ZN5ESP328send_cmdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>:
#include "ESP32.hpp"

void ESP32::send_cmd(const std::string& cmd, bool crlf) {
 8007eac:	b5b0      	push	{r4, r5, r7, lr}
 8007eae:	b08a      	sub	sp, #40	; 0x28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	71fb      	strb	r3, [r7, #7]
	if (crlf) {
 8007eba:	79fb      	ldrb	r3, [r7, #7]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d020      	beq.n	8007f02 <_ZN5ESP328send_cmdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x56>
		std::string cmd_crlf = cmd + "\r\n";
 8007ec0:	f107 0310 	add.w	r3, r7, #16
 8007ec4:	4a28      	ldr	r2, [pc, #160]	; (8007f68 <_ZN5ESP328send_cmdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0xbc>)
 8007ec6:	68b9      	ldr	r1, [r7, #8]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 fbef 	bl	80086ac <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
		HAL_UART_Transmit(&huart, (uint8_t*) cmd_crlf.c_str(), cmd_crlf.length(), 100);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681c      	ldr	r4, [r3, #0]
 8007ed2:	f107 0310 	add.w	r3, r7, #16
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f013 fc6a 	bl	801b7b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8007edc:	4605      	mov	r5, r0
 8007ede:	f107 0310 	add.w	r3, r7, #16
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f013 fabc 	bl	801b460 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	2364      	movs	r3, #100	; 0x64
 8007eee:	4629      	mov	r1, r5
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f00a fd19 	bl	8012928 <HAL_UART_Transmit>
	} else {
 8007ef6:	f107 0310 	add.w	r3, r7, #16
 8007efa:	4618      	mov	r0, r3
 8007efc:	f013 fa5e 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			HAL_UART_Transmit(&huart, (uint8_t*) cmd.c_str(), cmd.length(), HAL_MAX_DELAY);
		} else {
			HAL_UART_Transmit(&huart, (uint8_t*) cmd.c_str(), cmd.length(), 100);
		}
	}
}
 8007f00:	e02d      	b.n	8007f5e <_ZN5ESP328send_cmdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0xb2>
		if (cmd.length() > LONG_CMD_THRESHOLD) {
 8007f02:	68b8      	ldr	r0, [r7, #8]
 8007f04:	f013 faac 	bl	801b460 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f0e:	bf8c      	ite	hi
 8007f10:	2301      	movhi	r3, #1
 8007f12:	2300      	movls	r3, #0
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d011      	beq.n	8007f3e <_ZN5ESP328send_cmdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x92>
			HAL_UART_Transmit(&huart, (uint8_t*) cmd.c_str(), cmd.length(), HAL_MAX_DELAY);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681c      	ldr	r4, [r3, #0]
 8007f1e:	68b8      	ldr	r0, [r7, #8]
 8007f20:	f013 fc46 	bl	801b7b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8007f24:	4605      	mov	r5, r0
 8007f26:	68b8      	ldr	r0, [r7, #8]
 8007f28:	f013 fa9a 	bl	801b460 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f34:	4629      	mov	r1, r5
 8007f36:	4620      	mov	r0, r4
 8007f38:	f00a fcf6 	bl	8012928 <HAL_UART_Transmit>
}
 8007f3c:	e00f      	b.n	8007f5e <_ZN5ESP328send_cmdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0xb2>
			HAL_UART_Transmit(&huart, (uint8_t*) cmd.c_str(), cmd.length(), 100);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681c      	ldr	r4, [r3, #0]
 8007f42:	68b8      	ldr	r0, [r7, #8]
 8007f44:	f013 fc34 	bl	801b7b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8007f48:	4605      	mov	r5, r0
 8007f4a:	68b8      	ldr	r0, [r7, #8]
 8007f4c:	f013 fa88 	bl	801b460 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8007f50:	4603      	mov	r3, r0
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	2364      	movs	r3, #100	; 0x64
 8007f56:	4629      	mov	r1, r5
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f00a fce5 	bl	8012928 <HAL_UART_Transmit>
}
 8007f5e:	bf00      	nop
 8007f60:	3728      	adds	r7, #40	; 0x28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bdb0      	pop	{r4, r5, r7, pc}
 8007f66:	bf00      	nop
 8007f68:	080207dc 	.word	0x080207dc

08007f6c <_ZN5ESP324initEv>:

int ESP32::init() {
 8007f6c:	b590      	push	{r4, r7, lr}
 8007f6e:	b0ed      	sub	sp, #436	; 0x1b4
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007f76:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007f7a:	6018      	str	r0, [r3, #0]
	// AT+RESTORE restarts the module, so the timing is hard to get right
	// will not include for now

	send_cmd("ATE0"); // disable echo
 8007f7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007f80:	4618      	mov	r0, r3
 8007f82:	f012 ff17 	bl	801adb4 <_ZNSaIcEC1Ev>
 8007f86:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007f8a:	f107 0320 	add.w	r3, r7, #32
 8007f8e:	49da      	ldr	r1, [pc, #872]	; (80082f8 <_ZN5ESP324initEv+0x38c>)
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 fbf6 	bl	8008782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8007f96:	f107 0120 	add.w	r1, r7, #32
 8007f9a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007f9e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	6818      	ldr	r0, [r3, #0]
 8007fa6:	f7ff ff81 	bl	8007eac <_ZN5ESP328send_cmdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8007faa:	f107 0320 	add.w	r3, r7, #32
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f013 fa04 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007fb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f012 feff 	bl	801adbc <_ZNSaIcED1Ev>

	std::string resp = poll(ESP_RESP_LEN);
 8007fbe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007fc2:	f5a3 70d4 	sub.w	r0, r3, #424	; 0x1a8
 8007fc6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007fca:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 8007fce:	2364      	movs	r3, #100	; 0x64
 8007fd0:	2232      	movs	r2, #50	; 0x32
 8007fd2:	6809      	ldr	r1, [r1, #0]
 8007fd4:	f000 fa1e 	bl	8008414 <_ZN5ESP324pollB5cxx11Eim>
	if (resp.find(ESP_OK) == std::string::npos) {
 8007fd8:	f107 0308 	add.w	r3, r7, #8
 8007fdc:	2200      	movs	r2, #0
 8007fde:	49c7      	ldr	r1, [pc, #796]	; (80082fc <_ZN5ESP324initEv+0x390>)
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f013 fc29 	bl	801b838 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fec:	bf0c      	ite	eq
 8007fee:	2301      	moveq	r3, #1
 8007ff0:	2300      	movne	r3, #0
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d019      	beq.n	800802c <_ZN5ESP324initEv+0xc0>
		Logger::getInstance()->error("ATE0: " + resp);
 8007ff8:	f7ff ff3e 	bl	8007e78 <_ZN6Logger11getInstanceEv>
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8008002:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008006:	f107 0208 	add.w	r2, r7, #8
 800800a:	49bd      	ldr	r1, [pc, #756]	; (8008300 <_ZN5ESP324initEv+0x394>)
 800800c:	4618      	mov	r0, r3
 800800e:	f000 fb78 	bl	8008702 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8008012:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008016:	4619      	mov	r1, r3
 8008018:	4620      	mov	r0, r4
 800801a:	f002 fce3 	bl	800a9e4 <_ZN6Logger5errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800801e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008022:	4618      	mov	r0, r3
 8008024:	f013 f9ca 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		return 0; // init FAIL
 8008028:	2400      	movs	r4, #0
 800802a:	e1e1      	b.n	80083f0 <_ZN5ESP324initEv+0x484>
	}

	HAL_Delay(100);
 800802c:	2064      	movs	r0, #100	; 0x64
 800802e:	f006 fea3 	bl	800ed78 <HAL_Delay>

	// set UART parameters
	// NOTE: if you change the baud rate, you will need to change the STM baudrate too
	send_cmd("AT+UART_CUR=115200,8,1,0,0");
 8008032:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008036:	4618      	mov	r0, r3
 8008038:	f012 febc 	bl	801adb4 <_ZNSaIcEC1Ev>
 800803c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8008040:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008044:	49af      	ldr	r1, [pc, #700]	; (8008304 <_ZN5ESP324initEv+0x398>)
 8008046:	4618      	mov	r0, r3
 8008048:	f000 fb9b 	bl	8008782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800804c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8008050:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8008054:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008058:	2201      	movs	r2, #1
 800805a:	6818      	ldr	r0, [r3, #0]
 800805c:	f7ff ff26 	bl	8007eac <_ZN5ESP328send_cmdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8008060:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008064:	4618      	mov	r0, r3
 8008066:	f013 f9a9 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800806a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800806e:	4618      	mov	r0, r3
 8008070:	f012 fea4 	bl	801adbc <_ZNSaIcED1Ev>
	resp = poll(ESP_RESP_LEN);
 8008074:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8008078:	f5a3 70a0 	sub.w	r0, r3, #320	; 0x140
 800807c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8008080:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 8008084:	2364      	movs	r3, #100	; 0x64
 8008086:	2232      	movs	r2, #50	; 0x32
 8008088:	6809      	ldr	r1, [r1, #0]
 800808a:	f000 f9c3 	bl	8008414 <_ZN5ESP324pollB5cxx11Eim>
 800808e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008092:	f107 0308 	add.w	r3, r7, #8
 8008096:	4611      	mov	r1, r2
 8008098:	4618      	mov	r0, r3
 800809a:	f013 f99b 	bl	801b3d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800809e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80080a2:	4618      	mov	r0, r3
 80080a4:	f013 f98a 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	if (resp.find(ESP_OK) == std::string::npos) {
 80080a8:	f107 0308 	add.w	r3, r7, #8
 80080ac:	2200      	movs	r2, #0
 80080ae:	4993      	ldr	r1, [pc, #588]	; (80082fc <_ZN5ESP324initEv+0x390>)
 80080b0:	4618      	mov	r0, r3
 80080b2:	f013 fbc1 	bl	801b838 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080bc:	bf0c      	ite	eq
 80080be:	2301      	moveq	r3, #1
 80080c0:	2300      	movne	r3, #0
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d019      	beq.n	80080fc <_ZN5ESP324initEv+0x190>
		Logger::getInstance()->error("UART_CUR: " + resp);
 80080c8:	f7ff fed6 	bl	8007e78 <_ZN6Logger11getInstanceEv>
 80080cc:	4604      	mov	r4, r0
 80080ce:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80080d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80080d6:	f107 0208 	add.w	r2, r7, #8
 80080da:	498b      	ldr	r1, [pc, #556]	; (8008308 <_ZN5ESP324initEv+0x39c>)
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fb10 	bl	8008702 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 80080e2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80080e6:	4619      	mov	r1, r3
 80080e8:	4620      	mov	r0, r4
 80080ea:	f002 fc7b 	bl	800a9e4 <_ZN6Logger5errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80080ee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80080f2:	4618      	mov	r0, r3
 80080f4:	f013 f962 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		return 0; // init FAIL
 80080f8:	2400      	movs	r4, #0
 80080fa:	e179      	b.n	80083f0 <_ZN5ESP324initEv+0x484>
	}


	HAL_Delay(100);
 80080fc:	2064      	movs	r0, #100	; 0x64
 80080fe:	f006 fe3b 	bl	800ed78 <HAL_Delay>

	send_cmd("AT+HTTPCHEAD=" + std::to_string(ESP_API_HEADER.length()));
 8008102:	4882      	ldr	r0, [pc, #520]	; (800830c <_ZN5ESP324initEv+0x3a0>)
 8008104:	f013 f9ac 	bl	801b460 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8008108:	4602      	mov	r2, r0
 800810a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800810e:	4611      	mov	r1, r2
 8008110:	4618      	mov	r0, r3
 8008112:	f7ff fe5a 	bl	8007dca <_ZNSt7__cxx119to_stringEj>
 8008116:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800811a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800811e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8008122:	497b      	ldr	r1, [pc, #492]	; (8008310 <_ZN5ESP324initEv+0x3a4>)
 8008124:	4618      	mov	r0, r3
 8008126:	f000 fad4 	bl	80086d2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800812a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800812e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8008132:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008136:	2201      	movs	r2, #1
 8008138:	6818      	ldr	r0, [r3, #0]
 800813a:	f7ff feb7 	bl	8007eac <_ZN5ESP328send_cmdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 800813e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008142:	4618      	mov	r0, r3
 8008144:	f013 f93a 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008148:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800814c:	4618      	mov	r0, r3
 800814e:	f013 f935 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	resp = poll(ESP_RESP_LEN);
 8008152:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8008156:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800815a:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 800815e:	2364      	movs	r3, #100	; 0x64
 8008160:	2232      	movs	r2, #50	; 0x32
 8008162:	6809      	ldr	r1, [r1, #0]
 8008164:	f000 f956 	bl	8008414 <_ZN5ESP324pollB5cxx11Eim>
 8008168:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800816c:	f107 0308 	add.w	r3, r7, #8
 8008170:	4611      	mov	r1, r2
 8008172:	4618      	mov	r0, r3
 8008174:	f013 f92e 	bl	801b3d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008178:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800817c:	4618      	mov	r0, r3
 800817e:	f013 f91d 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	if (resp.back() != '>') {
 8008182:	f107 0308 	add.w	r3, r7, #8
 8008186:	4618      	mov	r0, r3
 8008188:	f013 f99c 	bl	801b4c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 800818c:	4603      	mov	r3, r0
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	2b3e      	cmp	r3, #62	; 0x3e
 8008192:	bf14      	ite	ne
 8008194:	2301      	movne	r3, #1
 8008196:	2300      	moveq	r3, #0
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d017      	beq.n	80081ce <_ZN5ESP324initEv+0x262>
		Logger::getInstance()->error("AT+HTTPCHEAD: " + resp);
 800819e:	f7ff fe6b 	bl	8007e78 <_ZN6Logger11getInstanceEv>
 80081a2:	4604      	mov	r4, r0
 80081a4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80081a8:	f107 0208 	add.w	r2, r7, #8
 80081ac:	4959      	ldr	r1, [pc, #356]	; (8008314 <_ZN5ESP324initEv+0x3a8>)
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 faa7 	bl	8008702 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 80081b4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80081b8:	4619      	mov	r1, r3
 80081ba:	4620      	mov	r0, r4
 80081bc:	f002 fc12 	bl	800a9e4 <_ZN6Logger5errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80081c0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80081c4:	4618      	mov	r0, r3
 80081c6:	f013 f8f9 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		return 0; // init FAIL
 80081ca:	2400      	movs	r4, #0
 80081cc:	e110      	b.n	80083f0 <_ZN5ESP324initEv+0x484>
	}

	send_cmd(ESP_API_HEADER, false);
 80081ce:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80081d2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80081d6:	2200      	movs	r2, #0
 80081d8:	494c      	ldr	r1, [pc, #304]	; (800830c <_ZN5ESP324initEv+0x3a0>)
 80081da:	6818      	ldr	r0, [r3, #0]
 80081dc:	f7ff fe66 	bl	8007eac <_ZN5ESP328send_cmdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
	if (resp.find(ESP_OK) == std::string::npos) {
 80081e0:	f107 0308 	add.w	r3, r7, #8
 80081e4:	2200      	movs	r2, #0
 80081e6:	4945      	ldr	r1, [pc, #276]	; (80082fc <_ZN5ESP324initEv+0x390>)
 80081e8:	4618      	mov	r0, r3
 80081ea:	f013 fb25 	bl	801b838 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 80081ee:	4603      	mov	r3, r0
 80081f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081f4:	bf0c      	ite	eq
 80081f6:	2301      	moveq	r3, #1
 80081f8:	2300      	movne	r3, #0
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d017      	beq.n	8008230 <_ZN5ESP324initEv+0x2c4>
		Logger::getInstance()->error("Couldn't set header: " + resp);
 8008200:	f7ff fe3a 	bl	8007e78 <_ZN6Logger11getInstanceEv>
 8008204:	4604      	mov	r4, r0
 8008206:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800820a:	f107 0208 	add.w	r2, r7, #8
 800820e:	4942      	ldr	r1, [pc, #264]	; (8008318 <_ZN5ESP324initEv+0x3ac>)
 8008210:	4618      	mov	r0, r3
 8008212:	f000 fa76 	bl	8008702 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8008216:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800821a:	4619      	mov	r1, r3
 800821c:	4620      	mov	r0, r4
 800821e:	f002 fbe1 	bl	800a9e4 <_ZN6Logger5errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8008222:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008226:	4618      	mov	r0, r3
 8008228:	f013 f8c8 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		return 0; // init FAIL
 800822c:	2400      	movs	r4, #0
 800822e:	e0df      	b.n	80083f0 <_ZN5ESP324initEv+0x484>
	}

	HAL_Delay(100);
 8008230:	2064      	movs	r0, #100	; 0x64
 8008232:	f006 fda1 	bl	800ed78 <HAL_Delay>

	send_cmd("AT+CWMODE=1"); // set WiFi mode
 8008236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800823a:	4618      	mov	r0, r3
 800823c:	f012 fdba 	bl	801adb4 <_ZNSaIcEC1Ev>
 8008240:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008244:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008248:	4934      	ldr	r1, [pc, #208]	; (800831c <_ZN5ESP324initEv+0x3b0>)
 800824a:	4618      	mov	r0, r3
 800824c:	f000 fa99 	bl	8008782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8008250:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8008254:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8008258:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800825c:	2201      	movs	r2, #1
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	f7ff fe24 	bl	8007eac <_ZN5ESP328send_cmdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8008264:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008268:	4618      	mov	r0, r3
 800826a:	f013 f8a7 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800826e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008272:	4618      	mov	r0, r3
 8008274:	f012 fda2 	bl	801adbc <_ZNSaIcED1Ev>
	resp = poll(ESP_RESP_LEN);
 8008278:	f507 709a 	add.w	r0, r7, #308	; 0x134
 800827c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8008280:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 8008284:	2364      	movs	r3, #100	; 0x64
 8008286:	2232      	movs	r2, #50	; 0x32
 8008288:	6809      	ldr	r1, [r1, #0]
 800828a:	f000 f8c3 	bl	8008414 <_ZN5ESP324pollB5cxx11Eim>
 800828e:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8008292:	f107 0308 	add.w	r3, r7, #8
 8008296:	4611      	mov	r1, r2
 8008298:	4618      	mov	r0, r3
 800829a:	f013 f89b 	bl	801b3d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800829e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80082a2:	4618      	mov	r0, r3
 80082a4:	f013 f88a 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	if (resp.find(ESP_OK) == std::string::npos) {
 80082a8:	f107 0308 	add.w	r3, r7, #8
 80082ac:	2200      	movs	r2, #0
 80082ae:	4913      	ldr	r1, [pc, #76]	; (80082fc <_ZN5ESP324initEv+0x390>)
 80082b0:	4618      	mov	r0, r3
 80082b2:	f013 fac1 	bl	801b838 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 80082b6:	4603      	mov	r3, r0
 80082b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082bc:	bf0c      	ite	eq
 80082be:	2301      	moveq	r3, #1
 80082c0:	2300      	movne	r3, #0
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d02d      	beq.n	8008324 <_ZN5ESP324initEv+0x3b8>
		Logger::getInstance()->error("CWMODE: " + resp);
 80082c8:	f7ff fdd6 	bl	8007e78 <_ZN6Logger11getInstanceEv>
 80082cc:	4604      	mov	r4, r0
 80082ce:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80082d2:	f107 0208 	add.w	r2, r7, #8
 80082d6:	4912      	ldr	r1, [pc, #72]	; (8008320 <_ZN5ESP324initEv+0x3b4>)
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 fa12 	bl	8008702 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 80082de:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80082e2:	4619      	mov	r1, r3
 80082e4:	4620      	mov	r0, r4
 80082e6:	f002 fb7d 	bl	800a9e4 <_ZN6Logger5errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80082ea:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80082ee:	4618      	mov	r0, r3
 80082f0:	f013 f864 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		return 0; // init FAIL
 80082f4:	2400      	movs	r4, #0
 80082f6:	e07b      	b.n	80083f0 <_ZN5ESP324initEv+0x484>
 80082f8:	080207e0 	.word	0x080207e0
 80082fc:	080207d0 	.word	0x080207d0
 8008300:	080207e8 	.word	0x080207e8
 8008304:	080207f0 	.word	0x080207f0
 8008308:	0802080c 	.word	0x0802080c
 800830c:	2000022c 	.word	0x2000022c
 8008310:	08020818 	.word	0x08020818
 8008314:	08020828 	.word	0x08020828
 8008318:	08020838 	.word	0x08020838
 800831c:	08020850 	.word	0x08020850
 8008320:	0802085c 	.word	0x0802085c
	}

	HAL_Delay(100);
 8008324:	2064      	movs	r0, #100	; 0x64
 8008326:	f006 fd27 	bl	800ed78 <HAL_Delay>

	send_cmd("AT+CWJAP=\"MSetup\",\"\""); // connect to MSetup
 800832a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800832e:	4618      	mov	r0, r3
 8008330:	f012 fd40 	bl	801adb4 <_ZNSaIcEC1Ev>
 8008334:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8008338:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800833c:	4932      	ldr	r1, [pc, #200]	; (8008408 <_ZN5ESP324initEv+0x49c>)
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fa1f 	bl	8008782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8008344:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 8008348:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800834c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008350:	2201      	movs	r2, #1
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	f7ff fdaa 	bl	8007eac <_ZN5ESP328send_cmdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8008358:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800835c:	4618      	mov	r0, r3
 800835e:	f013 f82d 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008362:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8008366:	4618      	mov	r0, r3
 8008368:	f012 fd28 	bl	801adbc <_ZNSaIcED1Ev>
	resp = poll(ESP_RESP_LEN, 5000);
 800836c:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8008370:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8008374:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 8008378:	f241 3388 	movw	r3, #5000	; 0x1388
 800837c:	2232      	movs	r2, #50	; 0x32
 800837e:	6809      	ldr	r1, [r1, #0]
 8008380:	f000 f848 	bl	8008414 <_ZN5ESP324pollB5cxx11Eim>
 8008384:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8008388:	f107 0308 	add.w	r3, r7, #8
 800838c:	4611      	mov	r1, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f013 f820 	bl	801b3d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008394:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8008398:	4618      	mov	r0, r3
 800839a:	f013 f80f 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	if (resp.find(ESP_WIFI_OK) == std::string::npos) {
 800839e:	f107 0308 	add.w	r3, r7, #8
 80083a2:	2200      	movs	r2, #0
 80083a4:	4919      	ldr	r1, [pc, #100]	; (800840c <_ZN5ESP324initEv+0x4a0>)
 80083a6:	4618      	mov	r0, r3
 80083a8:	f013 fa40 	bl	801b82c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 80083ac:	4603      	mov	r3, r0
 80083ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083b2:	bf0c      	ite	eq
 80083b4:	2301      	moveq	r3, #1
 80083b6:	2300      	movne	r3, #0
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d017      	beq.n	80083ee <_ZN5ESP324initEv+0x482>
		Logger::getInstance()->error("CWJAP: " + resp);
 80083be:	f7ff fd5b 	bl	8007e78 <_ZN6Logger11getInstanceEv>
 80083c2:	4604      	mov	r4, r0
 80083c4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80083c8:	f107 0208 	add.w	r2, r7, #8
 80083cc:	4910      	ldr	r1, [pc, #64]	; (8008410 <_ZN5ESP324initEv+0x4a4>)
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 f997 	bl	8008702 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 80083d4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80083d8:	4619      	mov	r1, r3
 80083da:	4620      	mov	r0, r4
 80083dc:	f002 fb02 	bl	800a9e4 <_ZN6Logger5errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80083e0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80083e4:	4618      	mov	r0, r3
 80083e6:	f012 ffe9 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		return 0; // init FAIL
 80083ea:	2400      	movs	r4, #0
 80083ec:	e000      	b.n	80083f0 <_ZN5ESP324initEv+0x484>
	}


	return 1;
 80083ee:	2401      	movs	r4, #1
}
 80083f0:	f107 0308 	add.w	r3, r7, #8
 80083f4:	4618      	mov	r0, r3
 80083f6:	f012 ffe1 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80083fa:	4623      	mov	r3, r4
 80083fc:	4618      	mov	r0, r3
 80083fe:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8008402:	46bd      	mov	sp, r7
 8008404:	bd90      	pop	{r4, r7, pc}
 8008406:	bf00      	nop
 8008408:	08020868 	.word	0x08020868
 800840c:	20000214 	.word	0x20000214
 8008410:	08020880 	.word	0x08020880

08008414 <_ZN5ESP324pollB5cxx11Eim>:

std::string ESP32::poll(int num_bytes, uint32_t timeout) {
 8008414:	b590      	push	{r4, r7, lr}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	603b      	str	r3, [r7, #0]
	char* buf = new char[num_bytes+1]();
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	3301      	adds	r3, #1
 8008426:	461c      	mov	r4, r3
 8008428:	4620      	mov	r0, r4
 800842a:	f012 fcc1 	bl	801adb0 <_Znaj>
 800842e:	4603      	mov	r3, r0
 8008430:	4619      	mov	r1, r3
 8008432:	460a      	mov	r2, r1
 8008434:	1e63      	subs	r3, r4, #1
 8008436:	e003      	b.n	8008440 <_ZN5ESP324pollB5cxx11Eim+0x2c>
 8008438:	2000      	movs	r0, #0
 800843a:	7010      	strb	r0, [r2, #0]
 800843c:	3201      	adds	r2, #1
 800843e:	3b01      	subs	r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	daf9      	bge.n	8008438 <_ZN5ESP324pollB5cxx11Eim+0x24>
 8008444:	6179      	str	r1, [r7, #20]
	HAL_UART_Receive(&huart, (uint8_t*) buf, num_bytes, timeout);
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	6818      	ldr	r0, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	b29a      	uxth	r2, r3
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	6979      	ldr	r1, [r7, #20]
 8008452:	f00a fafb 	bl	8012a4c <HAL_UART_Receive>
	std::string ret(buf);
 8008456:	f107 0310 	add.w	r3, r7, #16
 800845a:	4618      	mov	r0, r3
 800845c:	f012 fcaa 	bl	801adb4 <_ZNSaIcEC1Ev>
 8008460:	f107 0310 	add.w	r3, r7, #16
 8008464:	461a      	mov	r2, r3
 8008466:	6979      	ldr	r1, [r7, #20]
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 f98a 	bl	8008782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800846e:	f107 0310 	add.w	r3, r7, #16
 8008472:	4618      	mov	r0, r3
 8008474:	f012 fca2 	bl	801adbc <_ZNSaIcED1Ev>
	delete[] buf;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d002      	beq.n	8008484 <_ZN5ESP324pollB5cxx11Eim+0x70>
 800847e:	6978      	ldr	r0, [r7, #20]
 8008480:	f012 fc76 	bl	801ad70 <_ZdaPv>

	return ret;
 8008484:	bf00      	nop
}
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	371c      	adds	r7, #28
 800848a:	46bd      	mov	sp, r7
 800848c:	bd90      	pop	{r4, r7, pc}

0800848e <_ZN5ESP3212push_messageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	postCmd << ",2,\"connection: keep-alive\",\"content-type: application/json\"";

	send_cmd(postCmd.str());
}

void ESP32::push_message(std::string msg) {
 800848e:	b580      	push	{r7, lr}
 8008490:	b082      	sub	sp, #8
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	6039      	str	r1, [r7, #0]
	messages.push(msg);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	3304      	adds	r3, #4
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 f9e7 	bl	8008872 <_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEE4pushERKS5_>
	osSemaphoreRelease(external_queue);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f00f f9fe 	bl	80178ac <osSemaphoreRelease>
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	781a      	ldrb	r2, [r3, #0]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	bf0c      	ite	eq
 80084ce:	2301      	moveq	r3, #1
 80084d0:	2300      	movne	r3, #0
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	4618      	mov	r0, r3
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 80084e8:	2300      	movs	r3, #0
 80084ea:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80084ec:	e002      	b.n	80084f4 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3301      	adds	r3, #1
 80084f2:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4413      	add	r3, r2
 80084fa:	2200      	movs	r2, #0
 80084fc:	72fa      	strb	r2, [r7, #11]
 80084fe:	f107 020b 	add.w	r2, r7, #11
 8008502:	4611      	mov	r1, r2
 8008504:	4618      	mov	r0, r3
 8008506:	f7ff ffd7 	bl	80084b8 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 800850a:	4603      	mov	r3, r0
 800850c:	f083 0301 	eor.w	r3, r3, #1
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1eb      	bne.n	80084ee <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 8008516:	68fb      	ldr	r3, [r7, #12]
    }
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8008520:	b480      	push	{r7}
 8008522:	b087      	sub	sp, #28
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 800852a:	2301      	movs	r3, #1
 800852c:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	fb03 f303 	mul.w	r3, r3, r3
 8008534:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	fb02 f303 	mul.w	r3, r2, r3
 800853e:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	fb02 f303 	mul.w	r3, r2, r3
 8008548:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	429a      	cmp	r2, r3
 8008550:	d201      	bcs.n	8008556 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	e01d      	b.n	8008592 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	429a      	cmp	r2, r3
 800855c:	d202      	bcs.n	8008564 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	3301      	adds	r3, #1
 8008562:	e016      	b.n	8008592 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	429a      	cmp	r2, r3
 800856a:	d202      	bcs.n	8008572 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	3302      	adds	r3, #2
 8008570:	e00f      	b.n	8008592 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	429a      	cmp	r2, r3
 8008578:	d202      	bcs.n	8008580 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	3303      	adds	r3, #3
 800857e:	e008      	b.n	8008592 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	fbb2 f3f3 	udiv	r3, r2, r3
 8008588:	607b      	str	r3, [r7, #4]
	  __n += 4;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	3304      	adds	r3, #4
 800858e:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8008590:	e7db      	b.n	800854a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8008592:	4618      	mov	r0, r3
 8008594:	371c      	adds	r7, #28
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEjcRKS3_>:
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
 800859e:	b590      	push	{r4, r7, lr}
 80085a0:	b085      	sub	sp, #20
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	60f8      	str	r0, [r7, #12]
 80085a6:	60b9      	str	r1, [r7, #8]
 80085a8:	603b      	str	r3, [r7, #0]
 80085aa:	4613      	mov	r3, r2
 80085ac:	71fb      	strb	r3, [r7, #7]
      : _M_dataplus(_M_local_data(), __a)
 80085ae:	68fc      	ldr	r4, [r7, #12]
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f012 fdf3 	bl	801b19c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80085b6:	4603      	mov	r3, r0
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	4619      	mov	r1, r3
 80085bc:	4620      	mov	r0, r4
 80085be:	f013 f95b 	bl	801b878 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      { _M_construct(__n, __c); }
 80085c2:	79fb      	ldrb	r3, [r7, #7]
 80085c4:	461a      	mov	r2, r3
 80085c6:	68b9      	ldr	r1, [r7, #8]
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f012 fe15 	bl	801b1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd90      	pop	{r4, r7, pc}

080085d8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 80085d8:	b480      	push	{r7}
 80085da:	b089      	sub	sp, #36	; 0x24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	3b01      	subs	r3, #1
 80085e8:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 80085ea:	e024      	b.n	8008636 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x5e>
	{
	  auto const __num = (__val % 100) * 2;
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	4b23      	ldr	r3, [pc, #140]	; (800867c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 80085f0:	fba3 1302 	umull	r1, r3, r3, r2
 80085f4:	095b      	lsrs	r3, r3, #5
 80085f6:	2164      	movs	r1, #100	; 0x64
 80085f8:	fb01 f303 	mul.w	r3, r1, r3
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	005b      	lsls	r3, r3, #1
 8008600:	617b      	str	r3, [r7, #20]
	  __val /= 100;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a1d      	ldr	r2, [pc, #116]	; (800867c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8008606:	fba2 2303 	umull	r2, r3, r2, r3
 800860a:	095b      	lsrs	r3, r3, #5
 800860c:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	1c5a      	adds	r2, r3, #1
 8008612:	68f9      	ldr	r1, [r7, #12]
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	440b      	add	r3, r1
 8008618:	4919      	ldr	r1, [pc, #100]	; (8008680 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 800861a:	5c8a      	ldrb	r2, [r1, r2]
 800861c:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	3b01      	subs	r3, #1
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	4413      	add	r3, r2
 8008626:	4916      	ldr	r1, [pc, #88]	; (8008680 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	440a      	add	r2, r1
 800862c:	7812      	ldrb	r2, [r2, #0]
 800862e:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	3b02      	subs	r3, #2
 8008634:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b63      	cmp	r3, #99	; 0x63
 800863a:	d8d7      	bhi.n	80085ec <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x14>
	}
      if (__val >= 10)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b09      	cmp	r3, #9
 8008640:	d910      	bls.n	8008664 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	61bb      	str	r3, [r7, #24]
	  __first[1] = __digits[__num + 1];
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	1c5a      	adds	r2, r3, #1
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3301      	adds	r3, #1
 8008650:	490b      	ldr	r1, [pc, #44]	; (8008680 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8008652:	5c8a      	ldrb	r2, [r1, r2]
 8008654:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 8008656:	4a0a      	ldr	r2, [pc, #40]	; (8008680 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	4413      	add	r3, r2
 800865c:	781a      	ldrb	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 8008662:	e005      	b.n	8008670 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	b2db      	uxtb	r3, r3
 8008668:	3330      	adds	r3, #48	; 0x30
 800866a:	b2da      	uxtb	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	701a      	strb	r2, [r3, #0]
    }
 8008670:	bf00      	nop
 8008672:	3724      	adds	r7, #36	; 0x24
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	51eb851f 	.word	0x51eb851f
 8008680:	08021560 	.word	0x08021560

08008684 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d201      	bcs.n	800869e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	e000      	b.n	80086a0 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800869e:	687b      	ldr	r3, [r7, #4]
    }
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 80086b8:	68b9      	ldr	r1, [r7, #8]
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f013 f8de 	bl	801b87c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 80086c0:	6879      	ldr	r1, [r7, #4]
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f013 f85a 	bl	801b77c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 80086c8:	bf00      	nop
    }
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b084      	sub	sp, #16
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	60f8      	str	r0, [r7, #12]
 80086da:	60b9      	str	r1, [r7, #8]
 80086dc:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	2100      	movs	r1, #0
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f012 ffe6 	bl	801b6b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 80086e8:	4603      	mov	r3, r0
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 f8cf 	bl	800888e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80086f0:	4603      	mov	r3, r0
 80086f2:	4619      	mov	r1, r3
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f012 fe41 	bl	801b37c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 8008702:	b580      	push	{r7, lr}
 8008704:	b088      	sub	sp, #32
 8008706:	af00      	add	r7, sp, #0
 8008708:	60f8      	str	r0, [r7, #12]
 800870a:	60b9      	str	r1, [r7, #8]
 800870c:	607a      	str	r2, [r7, #4]
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
	rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      const __size_type __len = _Traits::length(__lhs);
 800870e:	68b8      	ldr	r0, [r7, #8]
 8008710:	f7ff fb38 	bl	8007d84 <_ZNSt11char_traitsIcE6lengthEPKc>
 8008714:	61f8      	str	r0, [r7, #28]
      __string_type __str(_Alloc_traits::_S_select_on_copy(
 8008716:	f107 0318 	add.w	r3, r7, #24
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	4618      	mov	r0, r3
 800871e:	f013 f849 	bl	801b7b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8008722:	f107 0314 	add.w	r3, r7, #20
 8008726:	f107 0218 	add.w	r2, r7, #24
 800872a:	4611      	mov	r1, r2
 800872c:	4618      	mov	r0, r3
 800872e:	f000 f8b9 	bl	80088a4 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 8008732:	f107 0314 	add.w	r3, r7, #20
 8008736:	4619      	mov	r1, r3
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f012 fe17 	bl	801b36c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>
 800873e:	f107 0314 	add.w	r3, r7, #20
 8008742:	4618      	mov	r0, r3
 8008744:	f012 fb3a 	bl	801adbc <_ZNSaIcED1Ev>
 8008748:	f107 0318 	add.w	r3, r7, #24
 800874c:	4618      	mov	r0, r3
 800874e:	f012 fb35 	bl	801adbc <_ZNSaIcED1Ev>
          __rhs.get_allocator()));
      __str.reserve(__len + __rhs.size());
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f012 fe82 	bl	801b45c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8008758:	4602      	mov	r2, r0
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	4413      	add	r3, r2
 800875e:	4619      	mov	r1, r3
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f012 fe7f 	bl	801b464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 8008766:	69fa      	ldr	r2, [r7, #28]
 8008768:	68b9      	ldr	r1, [r7, #8]
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f012 fff6 	bl	801b75c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f012 ffe6 	bl	801b744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 8008778:	bf00      	nop
    }
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	3720      	adds	r7, #32
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8008782:	b5b0      	push	{r4, r5, r7, lr}
 8008784:	b086      	sub	sp, #24
 8008786:	af00      	add	r7, sp, #0
 8008788:	60f8      	str	r0, [r7, #12]
 800878a:	60b9      	str	r1, [r7, #8]
 800878c:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 800878e:	68fc      	ldr	r4, [r7, #12]
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f012 fd03 	bl	801b19c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8008796:	4603      	mov	r3, r0
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	4619      	mov	r1, r3
 800879c:	4620      	mov	r0, r4
 800879e:	f013 f86b 	bl	801b878 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	const _CharT* __end = __s ? __s + traits_type::length(__s)
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d006      	beq.n	80087b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x34>
 80087a8:	68b8      	ldr	r0, [r7, #8]
 80087aa:	f7ff faeb 	bl	8007d84 <_ZNSt11char_traitsIcE6lengthEPKc>
 80087ae:	4602      	mov	r2, r0
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	4413      	add	r3, r2
 80087b4:	e000      	b.n	80087b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x36>
 80087b6:	2301      	movs	r3, #1
 80087b8:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, random_access_iterator_tag());
 80087ba:	462b      	mov	r3, r5
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	68b9      	ldr	r1, [r7, #8]
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 f891 	bl	80088e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	4618      	mov	r0, r3
 80087ca:	3718      	adds	r7, #24
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bdb0      	pop	{r4, r5, r7, pc}

080087d0 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 f8d8 	bl	8008990 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEEC1IS8_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b082      	sub	sp, #8
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
	: c() { }
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4618      	mov	r0, r3
 80087f6:	2328      	movs	r3, #40	; 0x28
 80087f8:	461a      	mov	r2, r3
 80087fa:	2100      	movs	r1, #0
 80087fc:	f016 f8f8 	bl	801e9f0 <memset>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4618      	mov	r0, r3
 8008804:	f7ff ffe4 	bl	80087d0 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8008812:	b580      	push	{r7, lr}
 8008814:	b08a      	sub	sp, #40	; 0x28
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800881a:	f107 0308 	add.w	r3, r7, #8
 800881e:	6879      	ldr	r1, [r7, #4]
 8008820:	4618      	mov	r0, r3
 8008822:	f000 f8e8 	bl	80089f6 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8008826:	f107 0318 	add.w	r3, r7, #24
 800882a:	6879      	ldr	r1, [r7, #4]
 800882c:	4618      	mov	r0, r3
 800882e:	f000 f8f1 	bl	8008a14 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4618      	mov	r0, r3
 8008836:	f000 f8fc 	bl	8008a32 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800883a:	4603      	mov	r3, r0
 800883c:	f107 0218 	add.w	r2, r7, #24
 8008840:	f107 0108 	add.w	r1, r7, #8
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f8ff 	bl	8008a48 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_destroy_dataESt15_Deque_iteratorIS5_RS5_PS5_ESB_RKS6_>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4618      	mov	r0, r3
 800884e:	f000 f8b0 	bl	80089b2 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4618      	mov	r0, r3
 8008856:	3728      	adds	r7, #40	; 0x28
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4618      	mov	r0, r3
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEE4pushERKS5_>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	4618      	mov	r0, r3
 8008882:	f000 f900 	bl	8008a86 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>
 8008886:	bf00      	nop
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800888e:	b480      	push	{r7}
 8008890:	b083      	sub	sp, #12
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4618      	mov	r0, r3
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 f909 	bl	8008aca <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80088c0:	b5b0      	push	{r4, r5, r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80088ca:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80088cc:	1d3b      	adds	r3, r7, #4
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 f918 	bl	8008b04 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 80088d4:	462a      	mov	r2, r5
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	4620      	mov	r0, r4
 80088da:	f000 f91d 	bl	8008b18 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80088de:	4603      	mov	r3, r0
    }
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bdb0      	pop	{r4, r5, r7, pc}

080088e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
 80088f4:	703b      	strb	r3, [r7, #0]
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 80088f6:	68b8      	ldr	r0, [r7, #8]
 80088f8:	f000 f8f4 	bl	8008ae4 <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d005      	beq.n	800890e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	429a      	cmp	r2, r3
 8008908:	d001      	beq.n	800890e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 800890a:	2301      	movs	r3, #1
 800890c:	e000      	b.n	8008910 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x28>
 800890e:	2300      	movs	r3, #0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d002      	beq.n	800891a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8008914:	4817      	ldr	r0, [pc, #92]	; (8008974 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x8c>)
 8008916:	f012 fa73 	bl	801ae00 <_ZSt19__throw_logic_errorPKc>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	68b8      	ldr	r0, [r7, #8]
 800891e:	f7ff ffcf 	bl	80088c0 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8008922:	4603      	mov	r3, r0
 8008924:	617b      	str	r3, [r7, #20]
	if (__dnew > size_type(_S_local_capacity))
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2b0f      	cmp	r3, #15
 800892a:	d910      	bls.n	800894e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x66>
	    _M_data(_M_create(__dnew, size_type(0)));
 800892c:	f107 0314 	add.w	r3, r7, #20
 8008930:	2200      	movs	r2, #0
 8008932:	4619      	mov	r1, r3
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f012 fc3b 	bl	801b1b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800893a:	4603      	mov	r3, r0
 800893c:	4619      	mov	r1, r3
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f012 fc28 	bl	801b194 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	4619      	mov	r1, r3
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f012 fc29 	bl	801b1a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f012 fc22 	bl	801b198 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8008954:	4603      	mov	r3, r0
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	68b9      	ldr	r1, [r7, #8]
 800895a:	4618      	mov	r0, r3
 800895c:	f012 fc7e 	bl	801b25c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	_M_set_length(__dnew);
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	4619      	mov	r1, r3
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f012 fc1d 	bl	801b1a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800896a:	bf00      	nop
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	0802091c 	.word	0x0802091c

08008978 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f8e8 	bl	8008b56 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Deque_base()
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4618      	mov	r0, r3
 800899c:	f000 f8cb 	bl	8008b36 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80089a0:	2100      	movs	r1, #0
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f8e3 	bl	8008b6e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d010      	beq.n	80089e4 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80089ca:	3304      	adds	r3, #4
 80089cc:	461a      	mov	r2, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f933 	bl	8008c3a <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6819      	ldr	r1, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	461a      	mov	r2, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f946 	bl	8008c70 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_deallocate_mapEPPS5_j>
    }
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7ff ffc6 	bl	8008978 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implD1Ev>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b082      	sub	sp, #8
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	3308      	adds	r3, #8
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f94d 	bl	8008ca6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	3318      	adds	r3, #24
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f93e 	bl	8008ca6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008a32:	b480      	push	{r7}
 8008a34:	b083      	sub	sp, #12
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_destroy_dataESt15_Deque_iteratorIS5_RS5_PS5_ESB_RKS6_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08c      	sub	sp, #48	; 0x30
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
 8008a54:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 8008a56:	f107 0310 	add.w	r3, r7, #16
 8008a5a:	68b9      	ldr	r1, [r7, #8]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 f922 	bl	8008ca6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 8008a62:	f107 0320 	add.w	r3, r7, #32
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 f91c 	bl	8008ca6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 8008a6e:	f107 0220 	add.w	r2, r7, #32
 8008a72:	f107 0310 	add.w	r3, r7, #16
 8008a76:	4619      	mov	r1, r3
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 f930 	bl	8008cde <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_>
      }
 8008a7e:	bf00      	nop
 8008a80:	3730      	adds	r7, #48	; 0x30
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>:
      push_back(const value_type& __x)
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b082      	sub	sp, #8
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a1b      	ldr	r3, [r3, #32]
 8008a98:	3b18      	subs	r3, #24
	if (this->_M_impl._M_finish._M_cur
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d00d      	beq.n	8008aba <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x34>
	    _Alloc_traits::construct(this->_M_impl,
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	f000 f977 	bl	8008d9a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	f103 0218 	add.w	r2, r3, #24
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	619a      	str	r2, [r3, #24]
      }
 8008ab8:	e003      	b.n	8008ac2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x3c>
	  _M_push_back_aux(__x);
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f97f 	bl	8008dc0 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_>
      }
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static _GLIBCXX20_CONSTEXPR allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f012 f96e 	bl	801adb8 <_ZNSaIcEC1ERKS_>
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	bf0c      	ite	eq
 8008af2:	2301      	moveq	r3, #1
 8008af4:	2300      	movne	r3, #0
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	4618      	mov	r0, r3
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	1ad3      	subs	r3, r2, r3
    }
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b082      	sub	sp, #8
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f982 	bl	8008e48 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 f98a 	bl	8008e60 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_Deque_impl_dataC1Ev>
	{ }
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b082      	sub	sp, #8
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f997 	bl	8008e92 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4618      	mov	r0, r3
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8008b6e:	b590      	push	{r4, r7, lr}
 8008b70:	b089      	sub	sp, #36	; 0x24
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8008b78:	2018      	movs	r0, #24
 8008b7a:	f7ff f954 	bl	8007e26 <_ZSt16__deque_buf_sizej>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b86:	3301      	adds	r3, #1
 8008b88:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8008b8a:	2308      	movs	r3, #8
 8008b8c:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	3302      	adds	r3, #2
 8008b92:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8008b94:	f107 0210 	add.w	r2, r7, #16
 8008b98:	f107 030c 	add.w	r3, r7, #12
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7ff fd70 	bl	8008684 <_ZSt3maxIjERKT_S2_S2_>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f978 	bl	8008ea8 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_allocate_mapEj>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6859      	ldr	r1, [r3, #4]
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	1acb      	subs	r3, r1, r3
 8008bca:	085b      	lsrs	r3, r3, #1
 8008bcc:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8008bce:	4413      	add	r3, r2
 8008bd0:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	4413      	add	r3, r2
 8008bda:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	69b9      	ldr	r1, [r7, #24]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f97e 	bl	8008ee2 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	3308      	adds	r3, #8
 8008bea:	69b9      	ldr	r1, [r7, #24]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 f993 	bl	8008f18 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f103 0218 	add.w	r2, r3, #24
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	3b04      	subs	r3, #4
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4610      	mov	r0, r2
 8008c00:	f000 f98a 	bl	8008f18 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68da      	ldr	r2, [r3, #12]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8008c10:	2018      	movs	r0, #24
 8008c12:	f7ff f908 	bl	8007e26 <_ZSt16__deque_buf_sizej>
 8008c16:	4602      	mov	r2, r0
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c1e:	fb01 f202 	mul.w	r2, r1, r2
 8008c22:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8008c24:	4613      	mov	r3, r2
 8008c26:	005b      	lsls	r3, r3, #1
 8008c28:	4413      	add	r3, r2
 8008c2a:	00db      	lsls	r3, r3, #3
 8008c2c:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	619a      	str	r2, [r3, #24]
    }
 8008c32:	bf00      	nop
 8008c34:	3724      	adds	r7, #36	; 0x24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd90      	pop	{r4, r7, pc}

08008c3a <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_>:
    _Deque_base<_Tp, _Alloc>::
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b086      	sub	sp, #24
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	60f8      	str	r0, [r7, #12]
 8008c42:	60b9      	str	r1, [r7, #8]
 8008c44:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	617b      	str	r3, [r7, #20]
 8008c4a:	e008      	b.n	8008c5e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_+0x24>
	_M_deallocate_node(*__n);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4619      	mov	r1, r3
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f000 f97c 	bl	8008f50 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE18_M_deallocate_nodeEPS5_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	617b      	str	r3, [r7, #20]
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d3f2      	bcc.n	8008c4c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_+0x12>
    }
 8008c66:	bf00      	nop
 8008c68:	bf00      	nop
 8008c6a:	3718      	adds	r7, #24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_deallocate_mapEPPS5_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8008c7c:	f107 0314 	add.w	r3, r7, #20
 8008c80:	68f9      	ldr	r1, [r7, #12]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 f977 	bl	8008f76 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8008c88:	f107 0314 	add.w	r3, r7, #20
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	68b9      	ldr	r1, [r7, #8]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 f98d 	bl	8008fb0 <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS7_PS6_j>
      }
 8008c96:	f107 0314 	add.w	r3, r7, #20
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 f97c 	bl	8008f98 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8008ca0:	3718      	adds	r7, #24
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8008ca6:	b480      	push	{r7}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	689a      	ldr	r2, [r3, #8]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	609a      	str	r2, [r3, #8]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	68da      	ldr	r2, [r3, #12]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	60da      	str	r2, [r3, #12]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_>:
	}
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 8008cde:	b5b0      	push	{r4, r5, r7, lr}
 8008ce0:	b086      	sub	sp, #24
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	60f8      	str	r0, [r7, #12]
 8008ce6:	60b9      	str	r1, [r7, #8]
 8008ce8:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	3304      	adds	r3, #4
 8008cf0:	617b      	str	r3, [r7, #20]
 8008cf2:	e018      	b.n	8008d26 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x48>
	    __node < __last._M_node; ++__node)
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	681d      	ldr	r5, [r3, #0]
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	681c      	ldr	r4, [r3, #0]
 8008cfc:	f000 f967 	bl	8008fce <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_buffer_sizeEv>
 8008d00:	4602      	mov	r2, r0
 8008d02:	4613      	mov	r3, r2
 8008d04:	005b      	lsls	r3, r3, #1
 8008d06:	4413      	add	r3, r2
 8008d08:	00db      	lsls	r3, r3, #3
 8008d0a:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7ff fe8f 	bl	8008a32 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8008d14:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8008d16:	461a      	mov	r2, r3
 8008d18:	4621      	mov	r1, r4
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	f000 f95f 	bl	8008fde <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	3304      	adds	r3, #4
 8008d24:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d3e1      	bcc.n	8008cf4 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x16>

       if (__first._M_node != __last._M_node)
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	68da      	ldr	r2, [r3, #12]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d01c      	beq.n	8008d76 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	681c      	ldr	r4, [r3, #0]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7ff fe73 	bl	8008a32 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8008d4c:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 8008d4e:	461a      	mov	r2, r3
 8008d50:	4629      	mov	r1, r5
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 f943 	bl	8008fde <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685c      	ldr	r4, [r3, #4]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7ff fe65 	bl	8008a32 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8008d68:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f000 f935 	bl	8008fde <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 8008d74:	e00d      	b.n	8008d92 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	681c      	ldr	r4, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7ff fe56 	bl	8008a32 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8008d86:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8008d88:	461a      	mov	r2, r3
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f000 f926 	bl	8008fde <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
     }
 8008d92:	bf00      	nop
 8008d94:	3718      	adds	r7, #24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bdb0      	pop	{r4, r5, r7, pc}

08008d9a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f927 	bl	8008ffa <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8008dac:	4603      	mov	r3, r0
 8008dae:	461a      	mov	r2, r3
 8008db0:	68b9      	ldr	r1, [r7, #8]
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f000 f92c 	bl	8009010 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>
	}
 8008db8:	bf00      	nop
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8008dc0:	b5b0      	push	{r4, r5, r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f938 	bl	8009040 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8008dd0:	4604      	mov	r4, r0
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f946 	bl	8009064 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	429c      	cmp	r4, r3
 8008ddc:	bf0c      	ite	eq
 8008dde:	2301      	moveq	r3, #1
 8008de0:	2300      	movne	r3, #0
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d002      	beq.n	8008dee <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8008de8:	4816      	ldr	r0, [pc, #88]	; (8008e44 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_+0x84>)
 8008dea:	f012 f821 	bl	801ae30 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8008dee:	2101      	movs	r1, #1
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f948 	bl	8009086 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfc:	1d1c      	adds	r4, r3, #4
 8008dfe:	4610      	mov	r0, r2
 8008e00:	f000 f95c 	bl	80090bc <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_allocate_nodeEv>
 8008e04:	4603      	mov	r3, r0
 8008e06:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8008e08:	687c      	ldr	r4, [r7, #4]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	699d      	ldr	r5, [r3, #24]
 8008e0e:	6838      	ldr	r0, [r7, #0]
 8008e10:	f000 f8f3 	bl	8008ffa <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8008e14:	4603      	mov	r3, r0
 8008e16:	461a      	mov	r2, r3
 8008e18:	4629      	mov	r1, r5
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f7ff ffbd 	bl	8008d9a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f103 0218 	add.w	r2, r3, #24
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2a:	3304      	adds	r3, #4
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	4610      	mov	r0, r2
 8008e30:	f000 f872 	bl	8008f18 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	69da      	ldr	r2, [r3, #28]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	619a      	str	r2, [r3, #24]
      }
 8008e3c:	bf00      	nop
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bdb0      	pop	{r4, r5, r7, pc}
 8008e44:	08020948 	.word	0x08020948

08008e48 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f945 	bl	80090e0 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	605a      	str	r2, [r3, #4]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3308      	adds	r3, #8
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f000 f93c 	bl	80090f6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	3318      	adds	r3, #24
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 f937 	bl	80090f6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>
	{ }
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008e92:	b480      	push	{r7}
 8008e94:	b083      	sub	sp, #12
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8008ea8:	b590      	push	{r4, r7, lr}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8008eb2:	f107 030c 	add.w	r3, r7, #12
 8008eb6:	6879      	ldr	r1, [r7, #4]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 f85c 	bl	8008f76 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8008ebe:	f107 030c 	add.w	r3, r7, #12
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f000 f92d 	bl	8009124 <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS7_j>
 8008eca:	4604      	mov	r4, r0
 8008ecc:	bf00      	nop
      }
 8008ece:	f107 030c 	add.w	r3, r7, #12
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 f860 	bl	8008f98 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8008ed8:	4623      	mov	r3, r4
      }
 8008eda:	4618      	mov	r0, r3
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd90      	pop	{r4, r7, pc}

08008ee2 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_>:
    _Deque_base<_Tp, _Alloc>::
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b086      	sub	sp, #24
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	60f8      	str	r0, [r7, #12]
 8008eea:	60b9      	str	r1, [r7, #8]
 8008eec:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	617b      	str	r3, [r7, #20]
 8008ef2:	e008      	b.n	8008f06 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_+0x24>
	    *__cur = this->_M_allocate_node();
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f000 f8e1 	bl	80090bc <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_allocate_nodeEv>
 8008efa:	4602      	mov	r2, r0
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	3304      	adds	r3, #4
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d3f2      	bcc.n	8008ef4 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_+0x12>
    }
 8008f0e:	bf00      	nop
 8008f10:	bf00      	nop
 8008f12:	3718      	adds	r7, #24
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8008f18:	b590      	push	{r4, r7, lr}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685c      	ldr	r4, [r3, #4]
 8008f34:	f000 f905 	bl	8009142 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	4413      	add	r3, r2
 8008f40:	00db      	lsls	r3, r3, #3
 8008f42:	18e2      	adds	r2, r4, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	609a      	str	r2, [r3, #8]
      }
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd90      	pop	{r4, r7, pc}

08008f50 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE18_M_deallocate_nodeEPS5_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8008f50:	b590      	push	{r4, r7, lr}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8008f5a:	687c      	ldr	r4, [r7, #4]
 8008f5c:	2018      	movs	r0, #24
 8008f5e:	f7fe ff62 	bl	8007e26 <_ZSt16__deque_buf_sizej>
 8008f62:	4603      	mov	r3, r0
 8008f64:	461a      	mov	r2, r3
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f000 f8f2 	bl	8009152 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8008f6e:	bf00      	nop
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd90      	pop	{r4, r7, pc}

08008f76 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b082      	sub	sp, #8
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8008f80:	6838      	ldr	r0, [r7, #0]
 8008f82:	f000 f8f5 	bl	8009170 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8008f86:	4603      	mov	r3, r0
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f8fb 	bl	8009186 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS4_EERKSaIT_E>
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f8fd 	bl	80091a0 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	68b9      	ldr	r1, [r7, #8]
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 f8f8 	bl	80091b6 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS7_j>
 8008fc6:	bf00      	nop
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8008fd2:	2018      	movs	r0, #24
 8008fd4:	f7fe ff27 	bl	8007e26 <_ZSt16__deque_buf_sizej>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	4618      	mov	r0, r3
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	60b9      	str	r1, [r7, #8]
 8008fe8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f000 f8f1 	bl	80091d4 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 8008ff2:	bf00      	nop
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008ffa:	b480      	push	{r7}
 8008ffc:	b083      	sub	sp, #12
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8009010:	b590      	push	{r4, r7, lr}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7ff ffec 	bl	8008ffa <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8009022:	4604      	mov	r4, r0
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	4619      	mov	r1, r3
 8009028:	2018      	movs	r0, #24
 800902a:	f7fe fec2 	bl	8007db2 <_ZnwjPv>
 800902e:	4603      	mov	r3, r0
 8009030:	4621      	mov	r1, r4
 8009032:	4618      	mov	r0, r3
 8009034:	f012 fc22 	bl	801b87c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009038:	bf00      	nop
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	bd90      	pop	{r4, r7, pc}

08009040 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f103 0218 	add.w	r2, r3, #24
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	3308      	adds	r3, #8
 8009052:	4619      	mov	r1, r3
 8009054:	4610      	mov	r0, r2
 8009056:	f000 f8cb 	bl	80091f0 <_ZStmiRKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ESA_>
 800905a:	4603      	mov	r3, r0
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4618      	mov	r0, r3
 8009070:	f000 f87e 	bl	8009170 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009074:	4603      	mov	r3, r0
 8009076:	4618      	mov	r0, r3
 8009078:	f000 f8ee 	bl	8009258 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>
 800907c:	4603      	mov	r3, r0
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8009086:	b580      	push	{r7, lr}
 8009088:	b082      	sub	sp, #8
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8009098:	6879      	ldr	r1, [r7, #4]
 800909a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800909c:	6879      	ldr	r1, [r7, #4]
 800909e:	6809      	ldr	r1, [r1, #0]
 80090a0:	1a41      	subs	r1, r0, r1
 80090a2:	1089      	asrs	r1, r1, #2
 80090a4:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d904      	bls.n	80090b4 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80090aa:	2200      	movs	r2, #0
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f8ec 	bl	800928c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb>
      }
 80090b4:	bf00      	nop
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80090bc:	b590      	push	{r4, r7, lr}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80090c4:	687c      	ldr	r4, [r7, #4]
 80090c6:	2018      	movs	r0, #24
 80090c8:	f7fe fead 	bl	8007e26 <_ZSt16__deque_buf_sizej>
 80090cc:	4603      	mov	r3, r0
 80090ce:	4619      	mov	r1, r3
 80090d0:	4620      	mov	r0, r4
 80090d2:	f000 f975 	bl	80093c0 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 80090d6:	4603      	mov	r3, r0
      }
 80090d8:	4618      	mov	r0, r3
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd90      	pop	{r4, r7, pc}

080090e0 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4618      	mov	r0, r3
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80090f6:	b480      	push	{r7}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	605a      	str	r2, [r3, #4]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	609a      	str	r2, [r3, #8]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	60da      	str	r2, [r3, #12]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800912e:	2200      	movs	r2, #0
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f95f 	bl	80093f6 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 8009138:	4603      	mov	r3, r0
 800913a:	4618      	mov	r0, r3
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8009142:	b580      	push	{r7, lr}
 8009144:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8009146:	2018      	movs	r0, #24
 8009148:	f7fe fe6d 	bl	8007e26 <_ZSt16__deque_buf_sizej>
 800914c:	4603      	mov	r3, r0
 800914e:	4618      	mov	r0, r3
 8009150:	bd80      	pop	{r7, pc}

08009152 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009152:	b580      	push	{r7, lr}
 8009154:	b084      	sub	sp, #16
 8009156:	af00      	add	r7, sp, #0
 8009158:	60f8      	str	r0, [r7, #12]
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	68b9      	ldr	r1, [r7, #8]
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f000 f971 	bl	800944a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 8009168:	bf00      	nop
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS4_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	6039      	str	r1, [r7, #0]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 f96c 	bl	800946e <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4618      	mov	r0, r3
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4618      	mov	r0, r3
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	60f8      	str	r0, [r7, #12]
 80091be:	60b9      	str	r1, [r7, #8]
 80091c0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4619      	mov	r1, r3
 80091c8:	68b8      	ldr	r0, [r7, #8]
 80091ca:	f011 fdcf 	bl	801ad6c <_ZdlPvj>
      }
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f94f 	bl	8009484 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 80091e6:	bf00      	nop
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
	...

080091f0 <_ZStmiRKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ESA_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80091fa:	f7ff ffa2 	bl	8009142 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>
 80091fe:	4603      	mov	r3, r0
 8009200:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	68da      	ldr	r2, [r3, #12]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	109b      	asrs	r3, r3, #2
 800920e:	461a      	mov	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	bf14      	ite	ne
 8009218:	2301      	movne	r3, #1
 800921a:	2300      	moveq	r3, #0
 800921c:	b2db      	uxtb	r3, r3
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	fb01 f303 	mul.w	r3, r1, r3
	  + (__x._M_cur - __x._M_first)
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	6811      	ldr	r1, [r2, #0]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	6852      	ldr	r2, [r2, #4]
 800922c:	1a8a      	subs	r2, r1, r2
 800922e:	10d2      	asrs	r2, r2, #3
 8009230:	4908      	ldr	r1, [pc, #32]	; (8009254 <_ZStmiRKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ESA_+0x64>)
 8009232:	fb01 f202 	mul.w	r2, r1, r2
 8009236:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	6891      	ldr	r1, [r2, #8]
 800923c:	683a      	ldr	r2, [r7, #0]
 800923e:	6812      	ldr	r2, [r2, #0]
 8009240:	1a8a      	subs	r2, r1, r2
 8009242:	10d2      	asrs	r2, r2, #3
 8009244:	4903      	ldr	r1, [pc, #12]	; (8009254 <_ZStmiRKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ESA_+0x64>)
 8009246:	fb01 f202 	mul.w	r2, r1, r2
 800924a:	4413      	add	r3, r2
      }
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	aaaaaaab 	.word	0xaaaaaaab

08009258 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8009260:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009264:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f925 	bl	80094b6 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 800926c:	4603      	mov	r3, r0
 800926e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8009270:	f107 0208 	add.w	r2, r7, #8
 8009274:	f107 030c 	add.w	r3, r7, #12
 8009278:	4611      	mov	r1, r2
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe fde8 	bl	8007e50 <_ZSt3minIjERKT_S2_S2_>
 8009280:	4603      	mov	r3, r0
 8009282:	681b      	ldr	r3, [r3, #0]
      }
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800928c:	b590      	push	{r4, r7, lr}
 800928e:	b08b      	sub	sp, #44	; 0x2c
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	4613      	mov	r3, r2
 8009298:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	109b      	asrs	r3, r3, #2
 80092a6:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80092a8:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	6a3a      	ldr	r2, [r7, #32]
 80092ae:	4413      	add	r3, r2
 80092b0:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d92d      	bls.n	800931a <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	1acb      	subs	r3, r1, r3
 80092ca:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80092cc:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80092ce:	79fb      	ldrb	r3, [r7, #7]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x4e>
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	e000      	b.n	80092dc <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x50>
 80092da:	2300      	movs	r3, #0
 80092dc:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80092de:	4413      	add	r3, r2
 80092e0:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	695b      	ldr	r3, [r3, #20]
 80092e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d209      	bcs.n	8009300 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80092f4:	3304      	adds	r3, #4
 80092f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092f8:	4619      	mov	r1, r3
 80092fa:	f000 f8e8 	bl	80094ce <_ZSt4copyIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>
 80092fe:	e048      	b.n	8009392 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8009308:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800930a:	6a3b      	ldr	r3, [r7, #32]
 800930c:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800930e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009310:	4413      	add	r3, r2
 8009312:	461a      	mov	r2, r3
 8009314:	f000 f8f3 	bl	80094fe <_ZSt13copy_backwardIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>
 8009318:	e03b      	b.n	8009392 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3304      	adds	r3, #4
 8009322:	f107 0208 	add.w	r2, r7, #8
 8009326:	4611      	mov	r1, r2
 8009328:	4618      	mov	r0, r3
 800932a:	f7ff f9ab 	bl	8008684 <_ZSt3maxIjERKT_S2_S2_>
 800932e:	4603      	mov	r3, r0
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8009334:	3302      	adds	r3, #2
 8009336:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	69b9      	ldr	r1, [r7, #24]
 800933c:	4618      	mov	r0, r3
 800933e:	f7ff fdb3 	bl	8008ea8 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_allocate_mapEj>
 8009342:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8009344:	69ba      	ldr	r2, [r7, #24]
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	085b      	lsrs	r3, r3, #1
 800934c:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800934e:	79fb      	ldrb	r3, [r7, #7]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d002      	beq.n	800935a <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0xce>
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	e000      	b.n	800935c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0xd0>
 800935a:	2300      	movs	r3, #0
 800935c:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	4413      	add	r3, r2
 8009362:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800936c:	3304      	adds	r3, #4
 800936e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009370:	4619      	mov	r1, r3
 8009372:	f000 f8ac 	bl	80094ce <_ZSt4copyIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6819      	ldr	r1, [r3, #0]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	461a      	mov	r2, r3
 8009382:	f7ff fc75 	bl	8008c70 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_deallocate_mapEPPS5_j>

	  this->_M_impl._M_map = __new_map;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	69ba      	ldr	r2, [r7, #24]
 8009390:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3308      	adds	r3, #8
 8009396:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff fdbd 	bl	8008f18 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f103 0018 	add.w	r0, r3, #24
 80093a4:	6a3b      	ldr	r3, [r7, #32]
 80093a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80093aa:	3b01      	subs	r3, #1
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093b0:	4413      	add	r3, r2
 80093b2:	4619      	mov	r1, r3
 80093b4:	f7ff fdb0 	bl	8008f18 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
    }
 80093b8:	bf00      	nop
 80093ba:	372c      	adds	r7, #44	; 0x2c
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd90      	pop	{r4, r7, pc}

080093c0 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80093ca:	2200      	movs	r2, #0
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f8bc 	bl	800954c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 80093d4:	4603      	mov	r3, r0
 80093d6:	4618      	mov	r0, r3
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <_ZNK9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80093de:	b480      	push	{r7}
 80093e0:	b083      	sub	sp, #12
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80093e6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80093ea:	4618      	mov	r0, r3
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	60f8      	str	r0, [r7, #12]
 80093fe:	60b9      	str	r1, [r7, #8]
 8009400:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f7ff ffeb 	bl	80093de <_ZNK9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 8009408:	4602      	mov	r2, r0
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	4293      	cmp	r3, r2
 800940e:	bf8c      	ite	hi
 8009410:	2301      	movhi	r3, #1
 8009412:	2300      	movls	r3, #0
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	bf14      	ite	ne
 800941a:	2301      	movne	r3, #1
 800941c:	2300      	moveq	r3, #0
 800941e:	b2db      	uxtb	r3, r3
 8009420:	2b00      	cmp	r3, #0
 8009422:	d007      	beq.n	8009434 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800942a:	d301      	bcc.n	8009430 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800942c:	f011 fcd8 	bl	801ade0 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8009430:	f011 fcc6 	bl	801adc0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4618      	mov	r0, r3
 800943a:	f011 fc9b 	bl	801ad74 <_Znwj>
 800943e:	4603      	mov	r3, r0
 8009440:	bf00      	nop
      }
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800944a:	b580      	push	{r7, lr}
 800944c:	b084      	sub	sp, #16
 800944e:	af00      	add	r7, sp, #0
 8009450:	60f8      	str	r0, [r7, #12]
 8009452:	60b9      	str	r1, [r7, #8]
 8009454:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	4613      	mov	r3, r2
 800945a:	005b      	lsls	r3, r3, #1
 800945c:	4413      	add	r3, r2
 800945e:	00db      	lsls	r3, r3, #3
 8009460:	4619      	mov	r1, r3
 8009462:	68b8      	ldr	r0, [r7, #8]
 8009464:	f011 fc82 	bl	801ad6c <_ZdlPvj>
      }
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800946e:	b480      	push	{r7}
 8009470:	b083      	sub	sp, #12
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800948e:	e009      	b.n	80094a4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7ff f9e3 	bl	800885c <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8009496:	4603      	mov	r3, r0
 8009498:	4618      	mov	r0, r3
 800949a:	f000 f887 	bl	80095ac <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	3318      	adds	r3, #24
 80094a2:	607b      	str	r3, [r7, #4]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d1f1      	bne.n	8009490 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xc>
	}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b082      	sub	sp, #8
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f87f 	bl	80095c2 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 80094c4:	4603      	mov	r3, r0
      }
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <_ZSt4copyIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80094ce:	b590      	push	{r4, r7, lr}
 80094d0:	b085      	sub	sp, #20
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 f87d 	bl	80095da <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 80094e0:	4604      	mov	r4, r0
 80094e2:	68b8      	ldr	r0, [r7, #8]
 80094e4:	f000 f879 	bl	80095da <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 80094e8:	4603      	mov	r3, r0
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	4619      	mov	r1, r3
 80094ee:	4620      	mov	r0, r4
 80094f0:	f000 f87e 	bl	80095f0 <_ZSt13__copy_move_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 80094f4:	4603      	mov	r3, r0
    }
 80094f6:	4618      	mov	r0, r3
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd90      	pop	{r4, r7, pc}

080094fe <_ZSt13copy_backwardIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80094fe:	b590      	push	{r4, r7, lr}
 8009500:	b085      	sub	sp, #20
 8009502:	af00      	add	r7, sp, #0
 8009504:	60f8      	str	r0, [r7, #12]
 8009506:	60b9      	str	r1, [r7, #8]
 8009508:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 f865 	bl	80095da <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8009510:	4604      	mov	r4, r0
 8009512:	68b8      	ldr	r0, [r7, #8]
 8009514:	f000 f861 	bl	80095da <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8009518:	4603      	mov	r3, r0
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	4619      	mov	r1, r3
 800951e:	4620      	mov	r0, r4
 8009520:	f000 f889 	bl	8009636 <_ZSt22__copy_move_backward_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 8009524:	4603      	mov	r3, r0
    }
 8009526:	4618      	mov	r0, r3
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	bd90      	pop	{r4, r7, pc}
	...

08009530 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8009538:	4b03      	ldr	r3, [pc, #12]	; (8009548 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv+0x18>)
      }
 800953a:	4618      	mov	r0, r3
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	05555555 	.word	0x05555555

0800954c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f7ff ffe9 	bl	8009530 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 800955e:	4602      	mov	r2, r0
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	4293      	cmp	r3, r2
 8009564:	bf8c      	ite	hi
 8009566:	2301      	movhi	r3, #1
 8009568:	2300      	movls	r3, #0
 800956a:	b2db      	uxtb	r3, r3
 800956c:	2b00      	cmp	r3, #0
 800956e:	bf14      	ite	ne
 8009570:	2301      	movne	r3, #1
 8009572:	2300      	moveq	r3, #0
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d007      	beq.n	800958a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	4a0a      	ldr	r2, [pc, #40]	; (80095a8 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x5c>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d901      	bls.n	8009586 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8009582:	f011 fc2d 	bl	801ade0 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8009586:	f011 fc1b 	bl	801adc0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	4613      	mov	r3, r2
 800958e:	005b      	lsls	r3, r3, #1
 8009590:	4413      	add	r3, r2
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	4618      	mov	r0, r3
 8009596:	f011 fbed 	bl	801ad74 <_Znwj>
 800959a:	4603      	mov	r3, r0
 800959c:	bf00      	nop
      }
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	0aaaaaaa 	.word	0x0aaaaaaa

080095ac <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f011 ff01 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 80095ba:	bf00      	nop
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b082      	sub	sp, #8
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff ffb0 	bl	8009530 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 80095d0:	4603      	mov	r3, r0
 80095d2:	4618      	mov	r0, r3
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80095da:	b480      	push	{r7}
 80095dc:	b083      	sub	sp, #12
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4618      	mov	r0, r3
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <_ZSt13__copy_move_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80095f0:	b5b0      	push	{r4, r5, r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f000 f83d 	bl	800967c <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8009602:	4604      	mov	r4, r0
 8009604:	68b8      	ldr	r0, [r7, #8]
 8009606:	f000 f839 	bl	800967c <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800960a:	4605      	mov	r5, r0
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4618      	mov	r0, r3
 8009610:	f000 f834 	bl	800967c <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8009614:	4603      	mov	r3, r0
 8009616:	461a      	mov	r2, r3
 8009618:	4629      	mov	r1, r5
 800961a:	4620      	mov	r0, r4
 800961c:	f000 f839 	bl	8009692 <_ZSt14__copy_move_a1ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 8009620:	4602      	mov	r2, r0
 8009622:	1d3b      	adds	r3, r7, #4
 8009624:	4611      	mov	r1, r2
 8009626:	4618      	mov	r0, r3
 8009628:	f000 f843 	bl	80096b2 <_ZSt12__niter_wrapIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_RKS8_S8_>
 800962c:	4603      	mov	r3, r0
    }
 800962e:	4618      	mov	r0, r3
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bdb0      	pop	{r4, r5, r7, pc}

08009636 <_ZSt22__copy_move_backward_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8009636:	b5b0      	push	{r4, r5, r7, lr}
 8009638:	b084      	sub	sp, #16
 800963a:	af00      	add	r7, sp, #0
 800963c:	60f8      	str	r0, [r7, #12]
 800963e:	60b9      	str	r1, [r7, #8]
 8009640:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 f81a 	bl	800967c <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8009648:	4604      	mov	r4, r0
 800964a:	68b8      	ldr	r0, [r7, #8]
 800964c:	f000 f816 	bl	800967c <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 8009650:	4605      	mov	r5, r0
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4618      	mov	r0, r3
 8009656:	f000 f811 	bl	800967c <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800965a:	4603      	mov	r3, r0
 800965c:	461a      	mov	r2, r3
 800965e:	4629      	mov	r1, r5
 8009660:	4620      	mov	r0, r4
 8009662:	f000 f832 	bl	80096ca <_ZSt23__copy_move_backward_a1ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 8009666:	4602      	mov	r2, r0
 8009668:	1d3b      	adds	r3, r7, #4
 800966a:	4611      	mov	r1, r2
 800966c:	4618      	mov	r0, r3
 800966e:	f000 f820 	bl	80096b2 <_ZSt12__niter_wrapIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_RKS8_S8_>
 8009672:	4603      	mov	r3, r0
    }
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bdb0      	pop	{r4, r5, r7, pc}

0800967c <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>:
    __niter_base(_Iterator __it)
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4618      	mov	r0, r3
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <_ZSt14__copy_move_a1ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8009692:	b580      	push	{r7, lr}
 8009694:	b084      	sub	sp, #16
 8009696:	af00      	add	r7, sp, #0
 8009698:	60f8      	str	r0, [r7, #12]
 800969a:	60b9      	str	r1, [r7, #8]
 800969c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	68b9      	ldr	r1, [r7, #8]
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f000 f821 	bl	80096ea <_ZSt14__copy_move_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 80096a8:	4603      	mov	r3, r0
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <_ZSt12__niter_wrapIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_RKS8_S8_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80096b2:	b480      	push	{r7}
 80096b4:	b083      	sub	sp, #12
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	6039      	str	r1, [r7, #0]
    { return __res; }
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	4618      	mov	r0, r3
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <_ZSt23__copy_move_backward_a1ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b084      	sub	sp, #16
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	60f8      	str	r0, [r7, #12]
 80096d2:	60b9      	str	r1, [r7, #8]
 80096d4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	68b9      	ldr	r1, [r7, #8]
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f000 f815 	bl	800970a <_ZSt23__copy_move_backward_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 80096e0:	4603      	mov	r3, r0
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <_ZSt14__copy_move_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	60f8      	str	r0, [r7, #12]
 80096f2:	60b9      	str	r1, [r7, #8]
 80096f4:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	68b9      	ldr	r1, [r7, #8]
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f000 f815 	bl	800972a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>
 8009700:	4603      	mov	r3, r0
    }
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <_ZSt23__copy_move_backward_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800970a:	b580      	push	{r7, lr}
 800970c:	b084      	sub	sp, #16
 800970e:	af00      	add	r7, sp, #0
 8009710:	60f8      	str	r0, [r7, #12]
 8009712:	60b9      	str	r1, [r7, #8]
 8009714:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	68b9      	ldr	r1, [r7, #8]
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f000 f822 	bl	8009764 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>
 8009720:	4603      	mov	r3, r0
    }
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800972a:	b580      	push	{r7, lr}
 800972c:	b086      	sub	sp, #24
 800972e:	af00      	add	r7, sp, #0
 8009730:	60f8      	str	r0, [r7, #12]
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	109b      	asrs	r3, r3, #2
 800973e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d006      	beq.n	8009754 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	461a      	mov	r2, r3
 800974c:	68f9      	ldr	r1, [r7, #12]
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f015 f934 	bl	801e9bc <memmove>
	  return __result + _Num;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	4413      	add	r3, r2
	}
 800975c:	4618      	mov	r0, r3
 800975e:	3718      	adds	r7, #24
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	109b      	asrs	r3, r3, #2
 8009778:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00a      	beq.n	8009796 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	425b      	negs	r3, r3
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	18d0      	adds	r0, r2, r3
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	461a      	mov	r2, r3
 8009790:	68f9      	ldr	r1, [r7, #12]
 8009792:	f015 f913 	bl	801e9bc <memmove>
	  return __result - _Num;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	425b      	negs	r3, r3
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	4413      	add	r3, r2
	}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3718      	adds	r7, #24
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <_Z41__static_initialization_and_destruction_0ii>:
}

void ESP32::flush() {
	osMessageQueueReset(external_queue);
	std::queue<std::string>().swap(messages);
}
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d126      	bne.n	8009806 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097be:	4293      	cmp	r3, r2
 80097c0:	d121      	bne.n	8009806 <_Z41__static_initialization_and_destruction_0ii+0x5e>
#include "data.hpp"
#include "logger.hpp"
#include <sstream>

constexpr const char* ESP_OK = "OK\r\n";
const std::string ESP_WIFI_OK = "WIFI GOT IP\r\n";
 80097c2:	f107 0308 	add.w	r3, r7, #8
 80097c6:	4618      	mov	r0, r3
 80097c8:	f011 faf4 	bl	801adb4 <_ZNSaIcEC1Ev>
 80097cc:	f107 0308 	add.w	r3, r7, #8
 80097d0:	461a      	mov	r2, r3
 80097d2:	4916      	ldr	r1, [pc, #88]	; (800982c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80097d4:	4816      	ldr	r0, [pc, #88]	; (8009830 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80097d6:	f7fe ffd4 	bl	8008782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80097da:	f107 0308 	add.w	r3, r7, #8
 80097de:	4618      	mov	r0, r3
 80097e0:	f011 faec 	bl	801adbc <_ZNSaIcED1Ev>
constexpr uint16_t ESP_RESP_LEN = 50;
constexpr size_t LONG_CMD_THRESHOLD = 1000;
const std::string ESP_API_HEADER = "x-api-key: test";
 80097e4:	f107 030c 	add.w	r3, r7, #12
 80097e8:	4618      	mov	r0, r3
 80097ea:	f011 fae3 	bl	801adb4 <_ZNSaIcEC1Ev>
 80097ee:	f107 030c 	add.w	r3, r7, #12
 80097f2:	461a      	mov	r2, r3
 80097f4:	490f      	ldr	r1, [pc, #60]	; (8009834 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80097f6:	4810      	ldr	r0, [pc, #64]	; (8009838 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80097f8:	f7fe ffc3 	bl	8008782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80097fc:	f107 030c 	add.w	r3, r7, #12
 8009800:	4618      	mov	r0, r3
 8009802:	f011 fadb 	bl	801adbc <_ZNSaIcED1Ev>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10a      	bne.n	8009822 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009812:	4293      	cmp	r3, r2
 8009814:	d105      	bne.n	8009822 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8009816:	4808      	ldr	r0, [pc, #32]	; (8009838 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8009818:	f011 fdd0 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string ESP_WIFI_OK = "WIFI GOT IP\r\n";
 800981c:	4804      	ldr	r0, [pc, #16]	; (8009830 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800981e:	f011 fdcd 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009822:	bf00      	nop
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	08020978 	.word	0x08020978
 8009830:	20000214 	.word	0x20000214
 8009834:	08020988 	.word	0x08020988
 8009838:	2000022c 	.word	0x2000022c

0800983c <_GLOBAL__sub_I__ZN5ESP328send_cmdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>:
 800983c:	b580      	push	{r7, lr}
 800983e:	af00      	add	r7, sp, #0
 8009840:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009844:	2001      	movs	r0, #1
 8009846:	f7ff ffaf 	bl	80097a8 <_Z41__static_initialization_and_destruction_0ii>
 800984a:	bd80      	pop	{r7, pc}

0800984c <_GLOBAL__sub_D__ZN5ESP328send_cmdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>:
 800984c:	b580      	push	{r7, lr}
 800984e:	af00      	add	r7, sp, #0
 8009850:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009854:	2000      	movs	r0, #0
 8009856:	f7ff ffa7 	bl	80097a8 <_Z41__static_initialization_and_destruction_0ii>
 800985a:	bd80      	pop	{r7, pc}

0800985c <_ZNKSt4hashIhEclEh>:

  /// Explicit specialization for signed char.
  _Cxx_hashtable_define_trivial_hash(signed char)

  /// Explicit specialization for unsigned char.
  _Cxx_hashtable_define_trivial_hash(unsigned char)
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	70fb      	strb	r3, [r7, #3]
 8009868:	78fb      	ldrb	r3, [r7, #3]
 800986a:	4618      	mov	r0, r3
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 8009876:	b480      	push	{r7}
 8009878:	b083      	sub	sp, #12
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	601a      	str	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4618      	mov	r0, r3
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 8009892:	b480      	push	{r7}
 8009894:	b085      	sub	sp, #20
 8009896:	af00      	add	r7, sp, #0
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80098a6:	6879      	ldr	r1, [r7, #4]
 80098a8:	fb01 f202 	mul.w	r2, r1, r2
 80098ac:	1a9b      	subs	r3, r3, r2
 80098ae:	4618      	mov	r0, r3
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
 80098ba:	b480      	push	{r7}
 80098bc:	b083      	sub	sp, #12
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	ed87 0a00 	vstr	s0, [r7]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	601a      	str	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	605a      	str	r2, [r3, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f959 	bl	8009ba0 <_ZNSaI18CurrentVoltagePairED1Ev>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4618      	mov	r0, r3
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4618      	mov	r0, r3
 8009904:	f000 f93c 	bl	8009b80 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE12_Vector_implC1Ev>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4618      	mov	r0, r3
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8009912:	b580      	push	{r7, lr}
 8009914:	b082      	sub	sp, #8
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff ffeb 	bl	80098f8 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EEC1Ev>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4618      	mov	r0, r3
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <_ZNSt8__detail15_Hash_code_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1Ev>:
    protected:
      typedef std::size_t 				__hash_code;

      // We need the default constructor for the local iterators and _Hashtable
      // default constructor.
      _Hash_code_base() = default;
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f978 	bl	8009c2a <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EEC1Ev>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4618      	mov	r0, r3
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
      _S_node_equals(const _Hash_node_code_cache<true>& __lhn,
		     const _Hash_node_code_cache<true>& __rhn)
      { return __lhn._M_hash_code == __rhn._M_hash_code; }

    protected:
      _Hashtable_base() = default;
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff ffed 	bl	800992c <_ZNSt8__detail15_Hash_code_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1Ev>
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f974 	bl	8009c40 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EEC1Ev>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4618      	mov	r0, r3
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 8009962:	b580      	push	{r7, lr}
 8009964:	b082      	sub	sp, #8
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f97f 	bl	8009c6e <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0EEEED1Ev>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEEC1Ev>:
      using __buckets_alloc_type =
	__alloc_rebind<__node_alloc_type, __node_base_ptr>;
      using __buckets_alloc_traits = std::allocator_traits<__buckets_alloc_type>;
      using __buckets_ptr = __node_base_ptr*;

      _Hashtable_alloc() = default;
 800997a:	b580      	push	{r7, lr}
 800997c:	b082      	sub	sp, #8
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f967 	bl	8009c56 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEELb1EEC1Ev>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8009992:	b580      	push	{r7, lr}
 8009994:	b082      	sub	sp, #8
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7ff ffe1 	bl	8009962 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEELb1EED1Ev>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4618      	mov	r0, r3
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
		   const _Hash&, const _Equal&, const allocator_type&,
		   false_type __uks);

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b082      	sub	sp, #8
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7ff ffc6 	bl	8009944 <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7ff ffde 	bl	800997a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEEC1Ev>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f103 0218 	add.w	r2, r3, #24
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	601a      	str	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	605a      	str	r2, [r3, #4]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	3308      	adds	r3, #8
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7ff ff4f 	bl	8009876 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	60da      	str	r2, [r3, #12]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	3310      	adds	r3, #16
 80099e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7ff ff67 	bl	80098ba <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	619a      	str	r2, [r3, #24]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4618      	mov	r0, r3
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <_ZNSt13unordered_mapIhSt6vectorI18CurrentVoltagePairSaIS1_EESt4hashIhESt8equal_toIhESaISt4pairIKhS3_EEEC1Ev>:
#endif

      //construct/destroy/copy

      /// Default constructor.
      unordered_map() = default;
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7ff ffcf 	bl	80099aa <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <_ZNSt13unordered_mapIhSt6vectorI18CurrentVoltagePairSaIS1_EESt4hashIhESt8equal_toIhESaISt4pairIKhS3_EEED1Ev>:
    class unordered_map
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b082      	sub	sp, #8
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 f930 	bl	8009c86 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <_ZNSt8__detail15_Hash_code_baseIhSt4pairIKhdENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1Ev>:
      _Hash_code_base() = default;
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f8f6 	bl	8009c2a <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EEC1Ev>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4618      	mov	r0, r3
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKhdENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
      _Hashtable_base() = default;
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f7ff ffed 	bl	8009a30 <_ZNSt8__detail15_Hash_code_baseIhSt4pairIKhdENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1Ev>
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f8f2 	bl	8009c40 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EEC1Ev>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhdELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b082      	sub	sp, #8
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f927 	bl	8009cc2 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEED1Ev>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4618      	mov	r0, r3
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEEC1Ev>:
      _Hashtable_alloc() = default;
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b082      	sub	sp, #8
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f90f 	bl	8009caa <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhdELb0EEEELb1EEC1Ev>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b082      	sub	sp, #8
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7ff ffe1 	bl	8009a66 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhdELb0EEEELb1EED1Ev>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <_ZNSt10_HashtableIhSt4pairIKhdESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b082      	sub	sp, #8
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f7ff ffc6 	bl	8009a48 <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKhdENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff ffde 	bl	8009a7e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEEC1Ev>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f103 0218 	add.w	r2, r3, #24
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	601a      	str	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	605a      	str	r2, [r3, #4]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7ff fecd 	bl	8009876 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	60da      	str	r2, [r3, #12]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	3310      	adds	r3, #16
 8009ae6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7ff fee5 	bl	80098ba <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	619a      	str	r2, [r3, #24]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4618      	mov	r0, r3
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <_ZNSt13unordered_mapIhdSt4hashIhESt8equal_toIhESaISt4pairIKhdEEEC1Ev>:
      unordered_map() = default;
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7ff ffcf 	bl	8009aae <_ZNSt10_HashtableIhSt4pairIKhdESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4618      	mov	r0, r3
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <_ZNSt13unordered_mapIhdSt4hashIhESt8equal_toIhESaISt4pairIKhdEEED1Ev>:
    class unordered_map
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 f8d8 	bl	8009cda <_ZNSt10_HashtableIhSt4pairIKhdESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <_ZNKSt8__detail14_Node_iteratorISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0ELb0EEptEv>:
      operator->() const noexcept
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_valptr(); }
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	3304      	adds	r3, #4
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 f8db 	bl	8009cfe <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE9_M_valptrEv>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
	...

08009b54 <_ZNKSt6vectorI18CurrentVoltagePairSaIS0_EE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685a      	ldr	r2, [r3, #4]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	111b      	asrs	r3, r3, #4
 8009b68:	4a04      	ldr	r2, [pc, #16]	; (8009b7c <_ZNKSt6vectorI18CurrentVoltagePairSaIS0_EE4sizeEv+0x28>)
 8009b6a:	fb02 f303 	mul.w	r3, r2, r3
 8009b6e:	4618      	mov	r0, r3
 8009b70:	370c      	adds	r7, #12
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	aaaaaaab 	.word	0xaaaaaaab

08009b80 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f8c5 	bl	8009d18 <_ZNSaI18CurrentVoltagePairEC1Ev>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f000 f8cd 	bl	8009d30 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <_ZNSaI18CurrentVoltagePairED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f8d5 	bl	8009d58 <_ZN9__gnu_cxx13new_allocatorI18CurrentVoltagePairED1Ev>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	689a      	ldr	r2, [r3, #8]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	111b      	asrs	r3, r3, #4
 8009bd0:	4a07      	ldr	r2, [pc, #28]	; (8009bf0 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EED1Ev+0x38>)
 8009bd2:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f8c8 	bl	8009d6e <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE13_M_deallocateEPS0_j>
      }
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7ff fe7d 	bl	80098e0 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE12_Vector_implD1Ev>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4618      	mov	r0, r3
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	aaaaaaab 	.word	0xaaaaaaab

08009bf4 <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009bf4:	b5b0      	push	{r4, r5, r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681c      	ldr	r4, [r3, #0]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 f8c4 	bl	8009d94 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE19_M_get_Tp_allocatorEv>
 8009c0c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009c0e:	461a      	mov	r2, r3
 8009c10:	4629      	mov	r1, r5
 8009c12:	4620      	mov	r0, r4
 8009c14:	f000 f8c9 	bl	8009daa <_ZSt8_DestroyIP18CurrentVoltagePairS0_EvT_S2_RSaIT0_E>
      }
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff ffcc 	bl	8009bb8 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EED1Ev>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4618      	mov	r0, r3
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bdb0      	pop	{r4, r5, r7, pc}

08009c2a <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EEC1Ev>:
      _Hashtable_ebo_helper() noexcept(noexcept(_Tp())) : _Tp() { }
 8009c2a:	b480      	push	{r7}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4618      	mov	r0, r3
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EEC1Ev>:
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	370c      	adds	r7, #12
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr

08009c56 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEELb1EEC1Ev>:
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b082      	sub	sp, #8
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f8be 	bl	8009de0 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0EEEEC1Ev>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4618      	mov	r0, r3
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0EEEED1Ev>:
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b082      	sub	sp, #8
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f8be 	bl	8009df8 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEED1Ev>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b082      	sub	sp, #8
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    ~_Hashtable() noexcept
    {
      clear();
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f8bd 	bl	8009e0e <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f8da 	bl	8009e4e <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7ff fe79 	bl	8009992 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEED1Ev>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhdELb0EEEELb1EEC1Ev>:
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b082      	sub	sp, #8
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f8db 	bl	8009e6e <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEEC1Ev>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3708      	adds	r7, #8
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEED1Ev>:
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b082      	sub	sp, #8
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f8db 	bl	8009e86 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEED1Ev>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <_ZNSt10_HashtableIhSt4pairIKhdESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b082      	sub	sp, #8
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
      clear();
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f8da 	bl	8009e9c <_ZNSt10_HashtableIhSt4pairIKhdESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f8f7 	bl	8009edc <_ZNSt10_HashtableIhSt4pairIKhdESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7ff fed1 	bl	8009a96 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEED1Ev>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE9_M_valptrEv>:
      _M_valptr() noexcept
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b082      	sub	sp, #8
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 f91e 	bl	8009f4a <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE6_M_ptrEv>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	4618      	mov	r0, r3
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <_ZNSaI18CurrentVoltagePairEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f91e 	bl	8009f62 <_ZN9__gnu_cxx13new_allocatorI18CurrentVoltagePairEC1Ev>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	601a      	str	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	605a      	str	r2, [r3, #4]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	609a      	str	r2, [r3, #8]
	{ }
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <_ZN9__gnu_cxx13new_allocatorI18CurrentVoltagePairED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4618      	mov	r0, r3
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	60f8      	str	r0, [r7, #12]
 8009d76:	60b9      	str	r1, [r7, #8]
 8009d78:	607a      	str	r2, [r7, #4]
	if (__p)
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d005      	beq.n	8009d8c <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	68b9      	ldr	r1, [r7, #8]
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 f8f6 	bl	8009f78 <_ZNSt16allocator_traitsISaI18CurrentVoltagePairEE10deallocateERS1_PS0_j>
      }
 8009d8c:	bf00      	nop
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4618      	mov	r0, r3
 8009da0:	370c      	adds	r7, #12
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <_ZSt8_DestroyIP18CurrentVoltagePairS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	60f8      	str	r0, [r7, #12]
 8009db2:	60b9      	str	r1, [r7, #8]
 8009db4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8009db6:	68b9      	ldr	r1, [r7, #8]
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f000 f8ec 	bl	8009f96 <_ZSt8_DestroyIP18CurrentVoltagePairEvT_S2_>
    }
 8009dbe:	bf00      	nop
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhdEE9_M_valptrEv>:
      _M_valptr() noexcept
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b082      	sub	sp, #8
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f000 f905 	bl	8009fe0 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhdEE6_M_ptrEv>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0EEEEC1Ev>:
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 f905 	bl	8009ff8 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEEC1Ev>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEED1Ev>:
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4618      	mov	r0, r3
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b082      	sub	sp, #8
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f870 	bl	8009efc <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 f8f4 	bl	800a00e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE19_M_deallocate_nodesEPS9_>
      __builtin_memset(_M_buckets, 0,
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	4610      	mov	r0, r2
 8009e32:	461a      	mov	r2, r3
 8009e34:	2100      	movs	r1, #0
 8009e36:	f014 fddb 	bl	801e9f0 <memset>
      _M_element_count = 0;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	609a      	str	r2, [r3, #8]
    }
 8009e46:	bf00      	nop
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b082      	sub	sp, #8
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6819      	ldr	r1, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 f8ec 	bl	800a03e <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS8_15_Hash_node_baseEj>
 8009e66:	bf00      	nop
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEEC1Ev>:
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b082      	sub	sp, #8
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f904 	bl	800a084 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEEC1Ev>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3708      	adds	r7, #8
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEED1Ev>:
 8009e86:	b480      	push	{r7}
 8009e88:	b083      	sub	sp, #12
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4618      	mov	r0, r3
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <_ZNSt10_HashtableIhSt4pairIKhdESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
      this->_M_deallocate_nodes(_M_begin());
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f883 	bl	8009fb0 <_ZNKSt10_HashtableIhSt4pairIKhdESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	4619      	mov	r1, r3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f8f3 	bl	800a09a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEE19_M_deallocate_nodesEPS5_>
      __builtin_memset(_M_buckets, 0,
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	f014 fd94 	bl	801e9f0 <memset>
      _M_element_count = 0;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	609a      	str	r2, [r3, #8]
    }
 8009ed4:	bf00      	nop
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <_ZNSt10_HashtableIhSt4pairIKhdESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6819      	ldr	r1, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	461a      	mov	r2, r3
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f8eb 	bl	800a0ca <_ZNSt10_HashtableIhSt4pairIKhdESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS4_15_Hash_node_baseEj>
 8009ef4:	bf00      	nop
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <_ZNSt8__detail14_Node_iteratorISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0ELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6839      	ldr	r1, [r7, #0]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f000 f8f4 	bl	800a110 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8009f32:	b480      	push	{r7}
 8009f34:	b083      	sub	sp, #12
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b082      	sub	sp, #8
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f8eb 	bl	800a12e <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE7_M_addrEv>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <_ZN9__gnu_cxx13new_allocatorI18CurrentVoltagePairEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009f62:	b480      	push	{r7}
 8009f64:	b083      	sub	sp, #12
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <_ZNSt16allocator_traitsISaI18CurrentVoltagePairEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	68b9      	ldr	r1, [r7, #8]
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 f8db 	bl	800a144 <_ZN9__gnu_cxx13new_allocatorI18CurrentVoltagePairE10deallocateEPS1_j>
 8009f8e:	bf00      	nop
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <_ZSt8_DestroyIP18CurrentVoltagePairEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b082      	sub	sp, #8
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f8e0 	bl	800a168 <_ZNSt12_Destroy_auxILb0EE9__destroyIP18CurrentVoltagePairEEvT_S4_>
    }
 8009fa8:	bf00      	nop
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <_ZNKSt10_HashtableIhSt4pairIKhdESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhdELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhdEE6_M_ptrEv>:
      _M_ptr() noexcept
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f8e1 	bl	800a1b0 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhdEE7_M_addrEv>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3708      	adds	r7, #8
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEEC1Ev>:
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4618      	mov	r0, r3
 800a004:	370c      	adds	r7, #12
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE19_M_deallocate_nodesEPS9_>:
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 800a00e:	b580      	push	{r7, lr}
 800a010:	b084      	sub	sp, #16
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	6039      	str	r1, [r7, #0]
    {
      while (__n)
 800a018:	e009      	b.n	800a02e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE19_M_deallocate_nodesEPS9_+0x20>
	{
	  __node_ptr __tmp = __n;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 800a01e:	6838      	ldr	r0, [r7, #0]
 800a020:	f7ff ff87 	bl	8009f32 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0EE7_M_nextEv>
 800a024:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 800a026:	68f9      	ldr	r1, [r7, #12]
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f8cc 	bl	800a1c6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE18_M_deallocate_nodeEPS9_>
      while (__n)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1f2      	bne.n	800a01a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE19_M_deallocate_nodesEPS9_+0xc>
	}
    }
 800a034:	bf00      	nop
 800a036:	bf00      	nop
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS8_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 800a03e:	b580      	push	{r7, lr}
 800a040:	b084      	sub	sp, #16
 800a042:	af00      	add	r7, sp, #0
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	60b9      	str	r1, [r7, #8]
 800a048:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 800a04a:	68b9      	ldr	r1, [r7, #8]
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 f8d5 	bl	800a1fc <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS8_15_Hash_node_baseE>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d105      	bne.n	800a064 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS8_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	68b9      	ldr	r1, [r7, #8]
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f000 f8e5 	bl	800a22c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 800a062:	e000      	b.n	800a066 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS8_15_Hash_node_baseEj+0x28>
	  return;
 800a064:	bf00      	nop
      }
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f8fc 	bl	800a272 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEELb1EE6_M_getEv>
 800a07a:	4603      	mov	r3, r0
 800a07c:	4618      	mov	r0, r3
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEEC1Ev>:
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4618      	mov	r0, r3
 800a090:	370c      	adds	r7, #12
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEE19_M_deallocate_nodesEPS5_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b084      	sub	sp, #16
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	6039      	str	r1, [r7, #0]
      while (__n)
 800a0a4:	e009      	b.n	800a0ba <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEE19_M_deallocate_nodesEPS5_+0x20>
	  __node_ptr __tmp = __n;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 800a0aa:	6838      	ldr	r0, [r7, #0]
 800a0ac:	f7ff ff8c 	bl	8009fc8 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhdELb0EE7_M_nextEv>
 800a0b0:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 800a0b2:	68f9      	ldr	r1, [r7, #12]
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 f8f8 	bl	800a2aa <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEE18_M_deallocate_nodeEPS5_>
      while (__n)
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1f2      	bne.n	800a0a6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEE19_M_deallocate_nodesEPS5_+0xc>
    }
 800a0c0:	bf00      	nop
 800a0c2:	bf00      	nop
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <_ZNSt10_HashtableIhSt4pairIKhdESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS4_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b084      	sub	sp, #16
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	60f8      	str	r0, [r7, #12]
 800a0d2:	60b9      	str	r1, [r7, #8]
 800a0d4:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 800a0d6:	68b9      	ldr	r1, [r7, #8]
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f000 f901 	bl	800a2e0 <_ZNKSt10_HashtableIhSt4pairIKhdESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS4_15_Hash_node_baseE>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d105      	bne.n	800a0f0 <_ZNSt10_HashtableIhSt4pairIKhdESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS4_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	68b9      	ldr	r1, [r7, #8]
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 f911 	bl	800a310 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 800a0ee:	e000      	b.n	800a0f2 <_ZNSt10_HashtableIhSt4pairIKhdESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS4_15_Hash_node_baseEj+0x28>
	  return;
 800a0f0:	bf00      	nop
      }
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 f928 	bl	800a356 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhdELb0EEEELb1EE6_M_getEv>
 800a106:	4603      	mov	r3, r0
 800a108:	4618      	mov	r0, r3
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	601a      	str	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4618      	mov	r0, r3
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE7_M_addrEv>:
      _M_addr() noexcept
 800a12e:	b480      	push	{r7}
 800a130:	b083      	sub	sp, #12
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800a136:	687b      	ldr	r3, [r7, #4]
      }
 800a138:	4618      	mov	r0, r3
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <_ZN9__gnu_cxx13new_allocatorI18CurrentVoltagePairE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	4613      	mov	r3, r2
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	4413      	add	r3, r2
 800a158:	011b      	lsls	r3, r3, #4
 800a15a:	4619      	mov	r1, r3
 800a15c:	68b8      	ldr	r0, [r7, #8]
 800a15e:	f010 fe05 	bl	801ad6c <_ZdlPvj>
      }
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <_ZNSt12_Destroy_auxILb0EE9__destroyIP18CurrentVoltagePairEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800a172:	e009      	b.n	800a188 <_ZNSt12_Destroy_auxILb0EE9__destroyIP18CurrentVoltagePairEEvT_S4_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f955 	bl	800a424 <_ZSt11__addressofI18CurrentVoltagePairEPT_RS1_>
 800a17a:	4603      	mov	r3, r0
 800a17c:	4618      	mov	r0, r3
 800a17e:	f000 f96e 	bl	800a45e <_ZSt8_DestroyI18CurrentVoltagePairEvPT_>
	  for (; __first != __last; ++__first)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	3330      	adds	r3, #48	; 0x30
 800a186:	607b      	str	r3, [r7, #4]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d1f1      	bne.n	800a174 <_ZNSt12_Destroy_auxILb0EE9__destroyIP18CurrentVoltagePairEEvT_S4_+0xc>
	}
 800a190:	bf00      	nop
 800a192:	bf00      	nop
 800a194:	3708      	adds	r7, #8
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <_ZNKSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800a19a:	b480      	push	{r7}
 800a19c:	b083      	sub	sp, #12
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhdEE7_M_addrEv>:
      _M_addr() noexcept
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800a1b8:	687b      	ldr	r3, [r7, #4]
      }
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	370c      	adds	r7, #12
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE18_M_deallocate_nodeEPS9_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 800a1c6:	b590      	push	{r4, r7, lr}
 800a1c8:	b083      	sub	sp, #12
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
 800a1ce:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f7ff ff4b 	bl	800a06c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE17_M_node_allocatorEv>
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	3304      	adds	r3, #4
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7ff fd8e 	bl	8009cfe <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE9_M_valptrEv>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f000 f944 	bl	800a474 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE7destroyIS8_EEvRSA_PT_>
      _M_deallocate_node_ptr(__n);
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f94d 	bl	800a48e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE22_M_deallocate_node_ptrEPS9_>
    }
 800a1f4:	bf00      	nop
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd90      	pop	{r4, r7, pc}

0800a1fc <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS8_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	3318      	adds	r3, #24
 800a20a:	683a      	ldr	r2, [r7, #0]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	bf0c      	ite	eq
 800a210:	2301      	moveq	r3, #1
 800a212:	2300      	movne	r3, #0
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b00      	cmp	r3, #0
 800a218:	bf14      	ite	ne
 800a21a:	2301      	movne	r3, #1
 800a21c:	2300      	moveq	r3, #0
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	4618      	mov	r0, r3
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
      return __p;
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
    _M_deallocate_buckets(__buckets_ptr __bkts,
			  std::size_t __bkt_count)
    {
      typedef typename __buckets_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 800a238:	68b8      	ldr	r0, [r7, #8]
 800a23a:	f000 f93e 	bl	800a4ba <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 800a23e:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f7ff ff13 	bl	800a06c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE17_M_node_allocatorEv>
 800a246:	4602      	mov	r2, r0
 800a248:	f107 0310 	add.w	r3, r7, #16
 800a24c:	4611      	mov	r1, r2
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 f93f 	bl	800a4d2 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS8_EEELb0EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 800a254:	f107 0310 	add.w	r3, r7, #16
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	6979      	ldr	r1, [r7, #20]
 800a25c:	4618      	mov	r0, r3
 800a25e:	f000 f951 	bl	800a504 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 800a262:	f107 0310 	add.w	r3, r7, #16
 800a266:	4618      	mov	r0, r3
 800a268:	f000 f940 	bl	800a4ec <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 800a26c:	3718      	adds	r7, #24
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 800a272:	b480      	push	{r7}
 800a274:	b083      	sub	sp, #12
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4618      	mov	r0, r3
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS8_16_Hash_node_valueIS6_Lb0EEE>:
      _M_bucket_index(const __node_value_type& __n) const noexcept
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	461a      	mov	r2, r3
 800a298:	6839      	ldr	r1, [r7, #0]
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f941 	bl	800a522 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS7_Lb0EEEj>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEE18_M_deallocate_nodeEPS5_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 800a2aa:	b590      	push	{r4, r7, lr}
 800a2ac:	b083      	sub	sp, #12
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f7ff ff1f 	bl	800a0f8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEE17_M_node_allocatorEv>
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	3308      	adds	r3, #8
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff fd80 	bl	8009dc6 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhdEE9_M_valptrEv>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f000 f94b 	bl	800a566 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEEE7destroyIS4_EEvRS6_PT_>
      _M_deallocate_node_ptr(__n);
 800a2d0:	6839      	ldr	r1, [r7, #0]
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 f954 	bl	800a580 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEE22_M_deallocate_node_ptrEPS5_>
    }
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd90      	pop	{r4, r7, pc}

0800a2e0 <_ZNKSt10_HashtableIhSt4pairIKhdESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS4_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3318      	adds	r3, #24
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	bf0c      	ite	eq
 800a2f4:	2301      	moveq	r3, #1
 800a2f6:	2300      	movne	r3, #0
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	bf14      	ite	ne
 800a2fe:	2301      	movne	r3, #1
 800a300:	2300      	moveq	r3, #0
 800a302:	b2db      	uxtb	r3, r3
 800a304:	4618      	mov	r0, r3
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
    _Hashtable_alloc<_NodeAlloc>::
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 800a31c:	68b8      	ldr	r0, [r7, #8]
 800a31e:	f000 f8cc 	bl	800a4ba <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 800a322:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f7ff fee7 	bl	800a0f8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEE17_M_node_allocatorEv>
 800a32a:	4602      	mov	r2, r0
 800a32c:	f107 0310 	add.w	r3, r7, #16
 800a330:	4611      	mov	r1, r2
 800a332:	4618      	mov	r0, r3
 800a334:	f000 f93a 	bl	800a5ac <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKhdELb0EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 800a338:	f107 0310 	add.w	r3, r7, #16
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	6979      	ldr	r1, [r7, #20]
 800a340:	4618      	mov	r0, r3
 800a342:	f000 f8df 	bl	800a504 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 800a346:	f107 0310 	add.w	r3, r7, #16
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 f8ce 	bl	800a4ec <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 800a350:	3718      	adds	r7, #24
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhdELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 800a356:	b480      	push	{r7}
 800a358:	b083      	sub	sp, #12
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4618      	mov	r0, r3
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 800a36c:	b5b0      	push	{r4, r5, r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800a376:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800a378:	1d3b      	adds	r3, r7, #4
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 f933 	bl	800a5e6 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 800a380:	462a      	mov	r2, r5
 800a382:	6839      	ldr	r1, [r7, #0]
 800a384:	4620      	mov	r0, r4
 800a386:	f000 f938 	bl	800a5fa <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800a38a:	4603      	mov	r3, r0
    }
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bdb0      	pop	{r4, r5, r7, pc}

0800a394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	703b      	strb	r3, [r7, #0]
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800a3a2:	68b8      	ldr	r0, [r7, #8]
 800a3a4:	f000 f90f 	bl	800a5c6 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d005      	beq.n	800a3ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d001      	beq.n	800a3ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e000      	b.n	800a3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 800a3c0:	4817      	ldr	r0, [pc, #92]	; (800a420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 800a3c2:	f010 fd1d 	bl	801ae00 <_ZSt19__throw_logic_errorPKc>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800a3c6:	6879      	ldr	r1, [r7, #4]
 800a3c8:	68b8      	ldr	r0, [r7, #8]
 800a3ca:	f7ff ffcf 	bl	800a36c <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	617b      	str	r3, [r7, #20]
	if (__dnew > size_type(_S_local_capacity))
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	2b0f      	cmp	r3, #15
 800a3d6:	d910      	bls.n	800a3fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	    _M_data(_M_create(__dnew, size_type(0)));
 800a3d8:	f107 0314 	add.w	r3, r7, #20
 800a3dc:	2200      	movs	r2, #0
 800a3de:	4619      	mov	r1, r3
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f010 fee5 	bl	801b1b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f010 fed2 	bl	801b194 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f010 fed3 	bl	801b1a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f010 fecc 	bl	801b198 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800a400:	4603      	mov	r3, r0
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	68b9      	ldr	r1, [r7, #8]
 800a406:	4618      	mov	r0, r3
 800a408:	f010 ff1e 	bl	801b248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	4619      	mov	r1, r3
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f010 fec7 	bl	801b1a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800a416:	bf00      	nop
 800a418:	3718      	adds	r7, #24
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	08020a20 	.word	0x08020a20

0800a424 <_ZSt11__addressofI18CurrentVoltagePairEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4618      	mov	r0, r3
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr

0800a43a <_ZN18CurrentVoltagePairD1Ev>:
#include <unordered_map>
#include <vector>
#include <sstream>

/* measured cell voltage for the supplied current */
struct CurrentVoltagePair {
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b082      	sub	sp, #8
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	3318      	adds	r3, #24
 800a446:	4618      	mov	r0, r3
 800a448:	f010 ffb8 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4618      	mov	r0, r3
 800a450:	f010 ffb4 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4618      	mov	r0, r3
 800a458:	3708      	adds	r7, #8
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <_ZSt8_DestroyI18CurrentVoltagePairEvPT_>:
    _Destroy(_Tp* __pointer)
 800a45e:	b580      	push	{r7, lr}
 800a460:	b082      	sub	sp, #8
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f7ff ffe7 	bl	800a43a <_ZN18CurrentVoltagePairD1Ev>
    }
 800a46c:	bf00      	nop
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE7destroyIS8_EEvRSA_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800a47e:	6839      	ldr	r1, [r7, #0]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 f8d7 	bl	800a634 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEE7destroyIS9_EEvPT_>
	}
 800a486:	bf00      	nop
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE22_M_deallocate_node_ptrEPS9_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 800a48e:	b580      	push	{r7, lr}
 800a490:	b084      	sub	sp, #16
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 800a498:	6838      	ldr	r0, [r7, #0]
 800a49a:	f000 f8d7 	bl	800a64c <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEE10pointer_toERS9_>
 800a49e:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7ff fde3 	bl	800a06c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE17_M_node_allocatorEv>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	68f9      	ldr	r1, [r7, #12]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f000 f8d9 	bl	800a664 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE10deallocateERSA_PS9_j>
    }
 800a4b2:	bf00      	nop
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type @c element_type
       *  @return @c addressof(__r)
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b082      	sub	sp, #8
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f8dd 	bl	800a682 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS8_EEELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b082      	sub	sp, #8
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	6039      	str	r1, [r7, #0]
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f8dc 	bl	800a69a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f8db 	bl	800a6b0 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f000 f8d6 	bl	800a6c6 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>
 800a51a:	bf00      	nop
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS7_Lb0EEEj>:
      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
 800a522:	b580      	push	{r7, lr}
 800a524:	b086      	sub	sp, #24
 800a526:	af00      	add	r7, sp, #0
 800a528:	60f8      	str	r0, [r7, #12]
 800a52a:	60b9      	str	r1, [r7, #8]
 800a52c:	607a      	str	r2, [r7, #4]
	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	4618      	mov	r0, r3
 800a532:	f000 f8eb 	bl	800a70c <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE4_M_vEv>
 800a536:	4602      	mov	r2, r0
 800a538:	f107 0314 	add.w	r3, r7, #20
 800a53c:	4611      	mov	r1, r2
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 f8f0 	bl	800a724 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSB_>
 800a544:	4603      	mov	r3, r0
 800a546:	4619      	mov	r1, r3
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f000 f8cb 	bl	800a6e4 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 800a54e:	4601      	mov	r1, r0
 800a550:	f107 0310 	add.w	r3, r7, #16
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	4618      	mov	r0, r3
 800a558:	f7ff f99b 	bl	8009892 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 800a55c:	4603      	mov	r3, r0
      }
 800a55e:	4618      	mov	r0, r3
 800a560:	3718      	adds	r7, #24
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800a566:	b580      	push	{r7, lr}
 800a568:	b082      	sub	sp, #8
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f8e7 	bl	800a746 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEE7destroyIS5_EEvPT_>
	}
 800a578:	bf00      	nop
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEE22_M_deallocate_node_ptrEPS5_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 800a58a:	6838      	ldr	r0, [r7, #0]
 800a58c:	f000 f8e6 	bl	800a75c <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEE10pointer_toERS5_>
 800a590:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f7ff fdb0 	bl	800a0f8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhdELb0EEEEE17_M_node_allocatorEv>
 800a598:	4603      	mov	r3, r0
 800a59a:	2201      	movs	r2, #1
 800a59c:	68f9      	ldr	r1, [r7, #12]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 f8e8 	bl	800a774 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEEE10deallocateERS6_PS5_j>
    }
 800a5a4:	bf00      	nop
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKhdELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f86f 	bl	800a69a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:
    __is_null_pointer(_Type* __ptr)
 800a5c6:	b480      	push	{r7}
 800a5c8:	b083      	sub	sp, #12
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	bf0c      	ite	eq
 800a5d4:	2301      	moveq	r3, #1
 800a5d6:	2300      	movne	r3, #0
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	4618      	mov	r0, r3
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr

0800a5e6 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 800a5e6:	b480      	push	{r7}
 800a5e8:	b083      	sub	sp, #12
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	370c      	adds	r7, #12
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr

0800a5fa <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800a5fa:	b480      	push	{r7}
 800a5fc:	b085      	sub	sp, #20
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	60f8      	str	r0, [r7, #12]
 800a602:	60b9      	str	r1, [r7, #8]
 800a604:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	1ad3      	subs	r3, r2, r3
    }
 800a60c:	4618      	mov	r0, r3
 800a60e:	3714      	adds	r7, #20
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <_ZNSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS2_EEED1Ev>:
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	3304      	adds	r3, #4
 800a624:	4618      	mov	r0, r3
 800a626:	f7ff fae5 	bl	8009bf4 <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EED1Ev>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4618      	mov	r0, r3
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEE7destroyIS9_EEvPT_>:
	destroy(_Up* __p)
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800a63e:	6838      	ldr	r0, [r7, #0]
 800a640:	f7ff ffea 	bl	800a618 <_ZNSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS2_EEED1Ev>
 800a644:	bf00      	nop
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEE10pointer_toERS9_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 f89c 	bl	800a792 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEPT_RSA_>
 800a65a:	4603      	mov	r3, r0
 800a65c:	4618      	mov	r0, r3
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE10deallocateERSA_PS9_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	68b9      	ldr	r1, [r7, #8]
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 f898 	bl	800a7aa <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEE10deallocateEPSA_j>
 800a67a:	bf00      	nop
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 800a682:	b580      	push	{r7, lr}
 800a684:	b082      	sub	sp, #8
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f89f 	bl	800a7ce <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 800a690:	4603      	mov	r3, r0
 800a692:	4618      	mov	r0, r3
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a69a:	b480      	push	{r7}
 800a69c:	b083      	sub	sp, #12
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	60f8      	str	r0, [r7, #12]
 800a6ce:	60b9      	str	r1, [r7, #8]
 800a6d0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	68b8      	ldr	r0, [r7, #8]
 800a6da:	f010 fb47 	bl	801ad6c <_ZdlPvj>
      }
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>:
      _M_hash_code(const _Key& __k) const
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
	return _M_hash()(__k);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f878 	bl	800a7e4 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	4610      	mov	r0, r2
 800a6fe:	f7ff f8ad 	bl	800985c <_ZNKSt4hashIhEclEh>
 800a702:	4603      	mov	r3, r0
      }
 800a704:	4618      	mov	r0, r3
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE4_M_vEv>:
      _M_v() const noexcept
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 f871 	bl	800a7fc <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE9_M_valptrEv>
 800a71a:	4603      	mov	r3, r0
 800a71c:	4618      	mov	r0, r3
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSB_>:
      operator()(_Tp&& __x) const noexcept
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 800a72e:	6838      	ldr	r0, [r7, #0]
 800a730:	f000 f871 	bl	800a816 <_ZSt7forwardIRKSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800a734:	4603      	mov	r3, r0
 800a736:	4618      	mov	r0, r3
 800a738:	f000 f878 	bl	800a82c <_ZSt3getILj0EKhSt6vectorI18CurrentVoltagePairSaIS2_EEERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS9_>
 800a73c:	4603      	mov	r3, r0
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEE7destroyIS5_EEvPT_>:
	destroy(_Up* __p)
 800a746:	b480      	push	{r7}
 800a748:	b083      	sub	sp, #12
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800a750:	bf00      	nop
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEE10pointer_toERS5_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 f86d 	bl	800a844 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEEPT_RS6_>
 800a76a:	4603      	mov	r3, r0
 800a76c:	4618      	mov	r0, r3
 800a76e:	3708      	adds	r7, #8
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	68b9      	ldr	r1, [r7, #8]
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f000 f869 	bl	800a85c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEE10deallocateEPS6_j>
 800a78a:	bf00      	nop
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEPT_RSA_>:
    addressof(_Tp& __r) noexcept
 800a792:	b580      	push	{r7, lr}
 800a794:	b082      	sub	sp, #8
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 f870 	bl	800a880 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEPT_RSA_>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEE10deallocateEPSA_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b084      	sub	sp, #16
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	60b9      	str	r1, [r7, #8]
 800a7b4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	4413      	add	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	68b8      	ldr	r0, [r7, #8]
 800a7c4:	f010 fad2 	bl	801ad6c <_ZdlPvj>
      }
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800a7ce:	b480      	push	{r7}
 800a7d0:	b083      	sub	sp, #12
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>:
      _M_hash() const { return __ebo_hash::_M_cget(); }
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f852 	bl	800a896 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EE7_M_cgetEv>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE9_M_valptrEv>:
      _M_valptr() const noexcept
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4618      	mov	r0, r3
 800a808:	f000 f850 	bl	800a8ac <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE6_M_ptrEv>
 800a80c:	4603      	mov	r3, r0
 800a80e:	4618      	mov	r0, r3
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <_ZSt7forwardIRKSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a816:	b480      	push	{r7}
 800a818:	b083      	sub	sp, #12
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4618      	mov	r0, r3
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <_ZSt3getILj0EKhSt6vectorI18CurrentVoltagePairSaIS2_EEERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS9_>:
    get(pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(const pair<_Tp1, _Tp2>& __in) noexcept
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__const_get(__in); }
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f845 	bl	800a8c4 <_ZNSt10__pair_getILj0EE11__const_getIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEERKT_RKSt4pairIS7_T0_E>
 800a83a:	4603      	mov	r3, r0
 800a83c:	4618      	mov	r0, r3
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEEPT_RS6_>:
    addressof(_Tp& __r) noexcept
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f844 	bl	800a8da <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEEPT_RS6_>
 800a852:	4603      	mov	r3, r0
 800a854:	4618      	mov	r0, r3
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	4613      	mov	r3, r2
 800a86c:	005b      	lsls	r3, r3, #1
 800a86e:	4413      	add	r3, r2
 800a870:	00db      	lsls	r3, r3, #3
 800a872:	4619      	mov	r1, r3
 800a874:	68b8      	ldr	r0, [r7, #8]
 800a876:	f010 fa79 	bl	801ad6c <_ZdlPvj>
      }
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800a880:	b480      	push	{r7}
 800a882:	b083      	sub	sp, #12
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4618      	mov	r0, r3
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 800a896:	b480      	push	{r7}
 800a898:	b083      	sub	sp, #12
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 f81b 	bl	800a8f0 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE7_M_addrEv>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <_ZNSt10__pair_getILj0EE11__const_getIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEERKT_RKSt4pairIS7_T0_E>:
	__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
	{ return __pair.first; }
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKhdELb0EEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800a8da:	b480      	push	{r7}
 800a8dc:	b083      	sub	sp, #12
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE7_M_addrEv>:
      _M_addr() const noexcept
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 800a8f8:	687b      	ldr	r3, [r7, #4]
      }
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800a906:	b480      	push	{r7}
 800a908:	b083      	sub	sp, #12
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	xTask;
}
 800a910:	bf00      	nop
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <_ZN6Logger3logE8LogLevelNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
#include "Logger.hpp"

Logger* Logger::instance = nullptr;

void Logger::log(LogLevel level, std::string msg) {
 800a91c:	b5b0      	push	{r4, r5, r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	460b      	mov	r3, r1
 800a926:	607a      	str	r2, [r7, #4]
 800a928:	72fb      	strb	r3, [r7, #11]
	if (level >= logLevel) {
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	791b      	ldrb	r3, [r3, #4]
 800a92e:	7afa      	ldrb	r2, [r7, #11]
 800a930:	429a      	cmp	r2, r3
 800a932:	d316      	bcc.n	800a962 <_ZN6Logger3logE8LogLevelNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x46>
		msg += newline;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	3308      	adds	r3, #8
 800a938:	4619      	mov	r1, r3
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f010 ff08 	bl	801b750 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
		HAL_UART_Transmit(&huart, (uint8_t*) msg.c_str(), msg.length(), 2000);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681c      	ldr	r4, [r3, #0]
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f010 ff33 	bl	801b7b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800a94a:	4605      	mov	r5, r0
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f010 fd87 	bl	801b460 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800a952:	4603      	mov	r3, r0
 800a954:	b29a      	uxth	r2, r3
 800a956:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a95a:	4629      	mov	r1, r5
 800a95c:	4620      	mov	r0, r4
 800a95e:	f007 ffe3 	bl	8012928 <HAL_UART_Transmit>
		// TODO: write to SD log file
	}
}
 800a962:	bf00      	nop
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a96c <_ZN6Logger5debugENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Logger::debug(std::string msg) {
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
	log(LogLevel::Debug, "[DEBUG] " + msg);
 800a976:	f107 0308 	add.w	r3, r7, #8
 800a97a:	683a      	ldr	r2, [r7, #0]
 800a97c:	4909      	ldr	r1, [pc, #36]	; (800a9a4 <_ZN6Logger5debugENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>)
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fd febf 	bl	8008702 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800a984:	f107 0308 	add.w	r3, r7, #8
 800a988:	461a      	mov	r2, r3
 800a98a:	2100      	movs	r1, #0
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f7ff ffc5 	bl	800a91c <_ZN6Logger3logE8LogLevelNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a992:	f107 0308 	add.w	r3, r7, #8
 800a996:	4618      	mov	r0, r3
 800a998:	f010 fd10 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800a99c:	bf00      	nop
 800a99e:	3720      	adds	r7, #32
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	08020a4c 	.word	0x08020a4c

0800a9a8 <_ZN6Logger4infoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Logger::info(std::string msg) {
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b088      	sub	sp, #32
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
	log(LogLevel::Info, "[INFO] " + msg);
 800a9b2:	f107 0308 	add.w	r3, r7, #8
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	4909      	ldr	r1, [pc, #36]	; (800a9e0 <_ZN6Logger4infoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>)
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fd fea1 	bl	8008702 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800a9c0:	f107 0308 	add.w	r3, r7, #8
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f7ff ffa7 	bl	800a91c <_ZN6Logger3logE8LogLevelNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a9ce:	f107 0308 	add.w	r3, r7, #8
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f010 fcf2 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800a9d8:	bf00      	nop
 800a9da:	3720      	adds	r7, #32
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	08020a58 	.word	0x08020a58

0800a9e4 <_ZN6Logger5errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void Logger::warn(std::string msg) {
	log(LogLevel::Warn, "[WARN] " + msg);
}

void Logger::error(std::string msg) {
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b088      	sub	sp, #32
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
	log(LogLevel::Error, "[ERROR] " + msg);
 800a9ee:	f107 0308 	add.w	r3, r7, #8
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	4909      	ldr	r1, [pc, #36]	; (800aa1c <_ZN6Logger5errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>)
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fd fe83 	bl	8008702 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800a9fc:	f107 0308 	add.w	r3, r7, #8
 800aa00:	461a      	mov	r2, r3
 800aa02:	2103      	movs	r1, #3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7ff ff89 	bl	800a91c <_ZN6Logger3logE8LogLevelNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800aa0a:	f107 0308 	add.w	r3, r7, #8
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f010 fcd4 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800aa14:	bf00      	nop
 800aa16:	3720      	adds	r7, #32
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	08020a68 	.word	0x08020a68

0800aa20 <_ZN5SHT30C1ER17I2C_HandleTypeDef>:
constexpr uint16_t SHT30_COMMAND_MEASURE_HIGHREP_STRETCH = 0x2c06;
constexpr uint16_t SHT30_COMMAND_READ_STATUS = 0xf32d;

class SHT30 {
public:
	SHT30(I2C_HandleTypeDef& hi2c) : hi2c(hi2c) {}
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	683a      	ldr	r2, [r7, #0]
 800aa2e:	601a      	str	r2, [r3, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4618      	mov	r0, r3
 800aa34:	370c      	adds	r7, #12
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
    _M_state() const
 800aa3e:	b480      	push	{r7}
 800aa40:	b083      	sub	sp, #12
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <_ZNSt13unordered_mapIhhSt4hashIhESt8equal_toIhESaISt4pairIKhhEEEC1ERKS8_>:
		      const allocator_type& __a = allocator_type())
	: _M_h(__first, __last, __n, __hf, __eql, __a)
	{ }

      /// Copy constructor.
      unordered_map(const unordered_map&) = default;
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b082      	sub	sp, #8
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
 800aa5e:	6039      	str	r1, [r7, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	683a      	ldr	r2, [r7, #0]
 800aa64:	4611      	mov	r1, r2
 800aa66:	4618      	mov	r0, r3
 800aa68:	f001 f934 	bl	800bcd4 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSF_>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <_ZNSt13unordered_mapIhhSt4hashIhESt8equal_toIhESaISt4pairIKhhEEED1Ev>:
    class unordered_map
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b082      	sub	sp, #8
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f001 f96e 	bl	800bd62 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3708      	adds	r7, #8
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <_ZN8SelectorC1ESt13unordered_mapIhhSt4hashIhESt8equal_toIhESaISt4pairIKhhEEEh11GPIOPortPinSA_SA_>:
	uint16_t pin;
};

class Selector {
public:
	Selector(const std::unordered_map<uint8_t, uint8_t> panel_outputs, uint8_t deselect_output,
 800aa90:	b082      	sub	sp, #8
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b084      	sub	sp, #16
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	60f8      	str	r0, [r7, #12]
 800aa9a:	60b9      	str	r1, [r7, #8]
 800aa9c:	61fb      	str	r3, [r7, #28]
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	71fb      	strb	r3, [r7, #7]
			GPIOPortPin decoder_bit_0,
			GPIOPortPin decoder_bit_1,
			GPIOPortPin decoder_bit_2) :
				panel_outputs(panel_outputs),
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	68b9      	ldr	r1, [r7, #8]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7ff ffd5 	bl	800aa56 <_ZNSt13unordered_mapIhhSt4hashIhESt8equal_toIhESaISt4pairIKhhEEEC1ERKS8_>
				deselect_output(deselect_output),
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	79fa      	ldrb	r2, [r7, #7]
 800aab0:	771a      	strb	r2, [r3, #28]
				decoder_bit_0(decoder_bit_0),
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	3320      	adds	r3, #32
 800aab6:	f107 021c 	add.w	r2, r7, #28
 800aaba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aabe:	e883 0003 	stmia.w	r3, {r0, r1}
				decoder_bit_1(decoder_bit_1),
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	3328      	adds	r3, #40	; 0x28
 800aac6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800aaca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aace:	e883 0003 	stmia.w	r3, {r0, r1}
				decoder_bit_2(decoder_bit_2) {}
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	3330      	adds	r3, #48	; 0x30
 800aad6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800aada:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aade:	e883 0003 	stmia.w	r3, {r0, r1}
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	4618      	mov	r0, r3
 800aae6:	3710      	adds	r7, #16
 800aae8:	46bd      	mov	sp, r7
 800aaea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aaee:	b002      	add	sp, #8
 800aaf0:	4770      	bx	lr

0800aaf2 <_ZN6LoggerC1ER20__UART_HandleTypeDef8LogLevelNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	Logger(UART_HandleTypeDef& huart, LogLevel level = Info, std::string newline = "\n") :
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b084      	sub	sp, #16
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	60f8      	str	r0, [r7, #12]
 800aafa:	60b9      	str	r1, [r7, #8]
 800aafc:	603b      	str	r3, [r7, #0]
 800aafe:	4613      	mov	r3, r2
 800ab00:	71fb      	strb	r3, [r7, #7]
		huart(huart), logLevel(level), newline(newline) {}
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	79fa      	ldrb	r2, [r7, #7]
 800ab0c:	711a      	strb	r2, [r3, #4]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	3308      	adds	r3, #8
 800ab12:	6839      	ldr	r1, [r7, #0]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f010 feb1 	bl	801b87c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <_ZN6Logger16registerInstanceEPS_>:
	static void registerInstance(Logger* inst) {
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
		instance = inst;
 800ab2c:	4a04      	ldr	r2, [pc, #16]	; (800ab40 <_ZN6Logger16registerInstanceEPS_+0x1c>)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6013      	str	r3, [r2, #0]
	}
 800ab32:	bf00      	nop
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	20000244 	.word	0x20000244

0800ab44 <_ZN5ESP32C1ER20__UART_HandleTypeDefRPvS3_>:

constexpr size_t ESP_MAX_RESP_LENGTH = 512; // probably good enough?

class ESP32 {
public:
	ESP32(UART_HandleTypeDef& huart, osMessageQueueId_t& external_queue, osSemaphoreId_t& data_ready_sem) :
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
 800ab50:	603b      	str	r3, [r7, #0]
		huart(huart), external_queue(external_queue), data_ready_sem(data_ready_sem) {}
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	601a      	str	r2, [r3, #0]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	3304      	adds	r3, #4
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fd fe44 	bl	80087ea <_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEEC1IS8_vEEv>
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	62da      	str	r2, [r3, #44]	; 0x2c
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	631a      	str	r2, [r3, #48]	; 0x30
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	4618      	mov	r0, r3
 800ab72:	3710      	adds	r7, #16
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <_ZN5ESP3215get_uart_handleEv>:

	void push_message(std::string msg);
	std::string consume_message();
	void flush();

	UART_HandleTypeDef& get_uart_handle() {
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
		return huart;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
	}
 800ab84:	4618      	mov	r0, r3
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <_ZN3SMUC1ER20__UART_HandleTypeDef>:

#define SMU_BUFFER_LENGTH 512

class SMU {
public:
	SMU(UART_HandleTypeDef& huart) : huart(huart) {}
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	601a      	str	r2, [r3, #0]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4618      	mov	r0, r3
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr

0800abae <_ZN3SMU15get_uart_handleEv>:
	void config_voltage_sweep();
	void run_voltage_sweep();

	void send_scpi(std::string scpi);

	UART_HandleTypeDef& get_uart_handle() {
 800abae:	b480      	push	{r7}
 800abb0:	b083      	sub	sp, #12
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
		return huart;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
	}
 800abba:	4618      	mov	r0, r3
 800abbc:	370c      	adds	r7, #12
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <_ZN13RealTimeClockC1ER17RTC_HandleTypeDef>:
#include <time.h>
#include <vector>

class RealTimeClock {
public:
	RealTimeClock(RTC_HandleTypeDef& hrtc) : hrtc(hrtc) {}
 800abc6:	b480      	push	{r7}
 800abc8:	b083      	sub	sp, #12
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
 800abce:	6039      	str	r1, [r7, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4618      	mov	r0, r3
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <_ZN9MPL3115A2C1ER17I2C_HandleTypeDef>:
#define PRESSURE_CSB    0x02
#define PRESSURE_LSB    0x03

class MPL3115A2 {
public:
	MPL3115A2(I2C_HandleTypeDef &i2c_device) : i2c_device(i2c_device) {}
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	683a      	ldr	r2, [r7, #0]
 800abf2:	601a      	str	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4618      	mov	r0, r3
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <_ZN10DataPacketC1Ev>:
};


/* contains an entire data record with I-V curves for each cell and
   environmental data. Will be transmitted and logged all together */
struct DataPacket {
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b082      	sub	sp, #8
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	3320      	adds	r3, #32
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7fe fef4 	bl	80099fc <_ZNSt13unordered_mapIhSt6vectorI18CurrentVoltagePairSaIS1_EESt4hashIhESt8equal_toIhESaISt4pairIKhS3_EEEC1Ev>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	333c      	adds	r3, #60	; 0x3c
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7fe ff71 	bl	8009b00 <_ZNSt13unordered_mapIhdSt4hashIhESt8equal_toIhESaISt4pairIKhdEEEC1Ev>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	3358      	adds	r3, #88	; 0x58
 800ac22:	4618      	mov	r0, r3
 800ac24:	f010 fb9a 	bl	801b35c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
	...

0800ac34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ac34:	b590      	push	{r4, r7, lr}
 800ac36:	b0b3      	sub	sp, #204	; 0xcc
 800ac38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ac3a:	f004 f82b 	bl	800ec94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ac3e:	f000 f953 	bl	800aee8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ac42:	f000 fc0b 	bl	800b45c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800ac46:	f000 fbe1 	bl	800b40c <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 800ac4a:	f000 fa37 	bl	800b0bc <_ZL12MX_I2C1_Initv>
  MX_USART1_UART_Init();
 800ac4e:	f000 fb53 	bl	800b2f8 <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 800ac52:	f000 f9d7 	bl	800b004 <_ZL12MX_ADC1_Initv>
  MX_I2C2_Init();
 800ac56:	f000 fa65 	bl	800b124 <_ZL12MX_I2C2_Initv>
  MX_SDIO_SD_Init();
 800ac5a:	f000 faff 	bl	800b25c <_ZL15MX_SDIO_SD_Initv>
  MX_USART2_UART_Init();
 800ac5e:	f000 fb79 	bl	800b354 <_ZL19MX_USART2_UART_Initv>
  MX_RTC_Init();
 800ac62:	f000 fa93 	bl	800b18c <_ZL11MX_RTC_Initv>
  MX_UART4_Init();
 800ac66:	f000 fb19 	bl	800b29c <_ZL13MX_UART4_Initv>
  MX_USART6_UART_Init();
 800ac6a:	f000 fba1 	bl	800b3b0 <_ZL19MX_USART6_UART_Initv>
  MX_FATFS_Init();
 800ac6e:	f009 fc97 	bl	80145a0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  Logger::registerInstance(&logger);
 800ac72:	4888      	ldr	r0, [pc, #544]	; (800ae94 <main+0x260>)
 800ac74:	f7ff ff56 	bl	800ab24 <_ZN6Logger16registerInstanceEPS_>
  logger.debug("Init");
 800ac78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f010 f899 	bl	801adb4 <_ZNSaIcEC1Ev>
 800ac82:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800ac86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ac8a:	4983      	ldr	r1, [pc, #524]	; (800ae98 <main+0x264>)
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7fd fd78 	bl	8008782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800ac92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ac96:	4619      	mov	r1, r3
 800ac98:	487e      	ldr	r0, [pc, #504]	; (800ae94 <main+0x260>)
 800ac9a:	f7ff fe67 	bl	800a96c <_ZN6Logger5debugENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800ac9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aca2:	4618      	mov	r0, r3
 800aca4:	f010 fb8a 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800aca8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800acac:	4618      	mov	r0, r3
 800acae:	f010 f885 	bl	801adbc <_ZNSaIcED1Ev>

#ifdef ESP32_D
  HAL_Delay(500); // allow ESP to finish any commands from before reset
 800acb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800acb6:	f004 f85f 	bl	800ed78 <HAL_Delay>
  if (!esp.init()) {
 800acba:	4878      	ldr	r0, [pc, #480]	; (800ae9c <main+0x268>)
 800acbc:	f7fd f956 	bl	8007f6c <_ZN5ESP324initEv>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	bf0c      	ite	eq
 800acc6:	2301      	moveq	r3, #1
 800acc8:	2300      	movne	r3, #0
 800acca:	b2db      	uxtb	r3, r3
 800accc:	2b00      	cmp	r3, #0
 800acce:	d01d      	beq.n	800ad0c <main+0xd8>
	  logger.error("ESP32 init FAIL!");
 800acd0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800acd4:	4618      	mov	r0, r3
 800acd6:	f010 f86d 	bl	801adb4 <_ZNSaIcEC1Ev>
 800acda:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800acde:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ace2:	496f      	ldr	r1, [pc, #444]	; (800aea0 <main+0x26c>)
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7fd fd4c 	bl	8008782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800acea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800acee:	4619      	mov	r1, r3
 800acf0:	4868      	ldr	r0, [pc, #416]	; (800ae94 <main+0x260>)
 800acf2:	f7ff fe77 	bl	800a9e4 <_ZN6Logger5errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800acf6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800acfa:	4618      	mov	r0, r3
 800acfc:	f010 fb5e 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ad00:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ad04:	4618      	mov	r0, r3
 800ad06:	f010 f859 	bl	801adbc <_ZNSaIcED1Ev>
 800ad0a:	e01c      	b.n	800ad46 <main+0x112>
  } else {
	  logger.info("ESP32 init SUCCESS");
 800ad0c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800ad10:	4618      	mov	r0, r3
 800ad12:	f010 f84f 	bl	801adb4 <_ZNSaIcEC1Ev>
 800ad16:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800ad1a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800ad1e:	4961      	ldr	r1, [pc, #388]	; (800aea4 <main+0x270>)
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fd fd2e 	bl	8008782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800ad26:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	4859      	ldr	r0, [pc, #356]	; (800ae94 <main+0x260>)
 800ad2e:	f7ff fe3b 	bl	800a9a8 <_ZN6Logger4infoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800ad32:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800ad36:	4618      	mov	r0, r3
 800ad38:	f010 fb40 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ad3c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800ad40:	4618      	mov	r0, r3
 800ad42:	f010 f83b 	bl	801adbc <_ZNSaIcED1Ev>
  }

  HAL_Delay(500);
 800ad46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ad4a:	f004 f815 	bl	800ed78 <HAL_Delay>

#ifdef SMU_D
  smu.config_voltage_sweep();
#endif

  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800ad4e:	2200      	movs	r2, #0
 800ad50:	2105      	movs	r1, #5
 800ad52:	2026      	movs	r0, #38	; 0x26
 800ad54:	f004 fb71 	bl	800f43a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ad58:	2026      	movs	r0, #38	; 0x26
 800ad5a:	f004 fb8a 	bl	800f472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800ad5e:	2200      	movs	r2, #0
 800ad60:	2105      	movs	r1, #5
 800ad62:	2027      	movs	r0, #39	; 0x27
 800ad64:	f004 fb69 	bl	800f43a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 800ad68:	2027      	movs	r0, #39	; 0x27
 800ad6a:	f004 fb82 	bl	800f472 <HAL_NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800ad6e:	f00c fb29 	bl	80173c4 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  const osMutexAttr_t DataPacket_Mutex_attr = {
 800ad72:	4b4d      	ldr	r3, [pc, #308]	; (800aea8 <main+0x274>)
 800ad74:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800ad78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    osMutexPrioInherit,    // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };

  data_packet_mutex = osMutexNew(&DataPacket_Mutex_attr);
 800ad7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ad82:	4618      	mov	r0, r3
 800ad84:	f00c fc31 	bl	80175ea <osMutexNew>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	4a48      	ldr	r2, [pc, #288]	; (800aeac <main+0x278>)
 800ad8c:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  esp_messages_sem = osSemaphoreNew(10U, 0U, NULL);
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2100      	movs	r1, #0
 800ad92:	200a      	movs	r0, #10
 800ad94:	f00c fcaf 	bl	80176f6 <osSemaphoreNew>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	4a45      	ldr	r2, [pc, #276]	; (800aeb0 <main+0x27c>)
 800ad9c:	6013      	str	r3, [r2, #0]
  esp_data_ready_sem = osSemaphoreNew(1U, 0U, NULL);
 800ad9e:	2200      	movs	r2, #0
 800ada0:	2100      	movs	r1, #0
 800ada2:	2001      	movs	r0, #1
 800ada4:	f00c fca7 	bl	80176f6 <osSemaphoreNew>
 800ada8:	4603      	mov	r3, r0
 800adaa:	4a42      	ldr	r2, [pc, #264]	; (800aeb4 <main+0x280>)
 800adac:	6013      	str	r3, [r2, #0]
  smu_done_sem = osSemaphoreNew(1U, 0U, NULL);
 800adae:	2200      	movs	r2, #0
 800adb0:	2100      	movs	r1, #0
 800adb2:	2001      	movs	r0, #1
 800adb4:	f00c fc9f 	bl	80176f6 <osSemaphoreNew>
 800adb8:	4603      	mov	r3, r0
 800adba:	4a3f      	ldr	r2, [pc, #252]	; (800aeb8 <main+0x284>)
 800adbc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  esp_msg_rx_queue = osMessageQueueNew(10U, sizeof(BufferRange), NULL);
 800adbe:	2200      	movs	r2, #0
 800adc0:	2108      	movs	r1, #8
 800adc2:	200a      	movs	r0, #10
 800adc4:	f00c fdda 	bl	801797c <osMessageQueueNew>
 800adc8:	4603      	mov	r3, r0
 800adca:	4a3c      	ldr	r2, [pc, #240]	; (800aebc <main+0x288>)
 800adcc:	6013      	str	r3, [r2, #0]
  smu_data_rx_queue = osMessageQueueNew(100U, sizeof(BufferRange), NULL);
 800adce:	2200      	movs	r2, #0
 800add0:	2108      	movs	r1, #8
 800add2:	2064      	movs	r0, #100	; 0x64
 800add4:	f00c fdd2 	bl	801797c <osMessageQueueNew>
 800add8:	4603      	mov	r3, r0
 800adda:	4a39      	ldr	r2, [pc, #228]	; (800aec0 <main+0x28c>)
 800addc:	6013      	str	r3, [r2, #0]

  if (esp_msg_rx_queue == NULL) {
 800adde:	4b37      	ldr	r3, [pc, #220]	; (800aebc <main+0x288>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d11c      	bne.n	800ae20 <main+0x1ec>
       logger.error("Queue creation failed"); // Message Queue object not created, handle failure
 800ade6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800adea:	4618      	mov	r0, r3
 800adec:	f00f ffe2 	bl	801adb4 <_ZNSaIcEC1Ev>
 800adf0:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800adf4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800adf8:	4932      	ldr	r1, [pc, #200]	; (800aec4 <main+0x290>)
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fd fcc1 	bl	8008782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800ae00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ae04:	4619      	mov	r1, r3
 800ae06:	4823      	ldr	r0, [pc, #140]	; (800ae94 <main+0x260>)
 800ae08:	f7ff fdec 	bl	800a9e4 <_ZN6Logger5errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800ae0c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ae10:	4618      	mov	r0, r3
 800ae12:	f010 fad3 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ae16:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f00f ffce 	bl	801adbc <_ZNSaIcED1Ev>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800ae20:	4a29      	ldr	r2, [pc, #164]	; (800aec8 <main+0x294>)
 800ae22:	2100      	movs	r1, #0
 800ae24:	4829      	ldr	r0, [pc, #164]	; (800aecc <main+0x298>)
 800ae26:	f00c fb4e 	bl	80174c6 <osThreadNew>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	4a28      	ldr	r2, [pc, #160]	; (800aed0 <main+0x29c>)
 800ae2e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
#ifdef SELECTOR_D
  selectorTaskHandle = osThreadNew(SelectorCycleTask, NULL, &defaultTask_attributes);
#endif

  const osThreadAttr_t processTask_attributes = {
 800ae30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae34:	2224      	movs	r2, #36	; 0x24
 800ae36:	2100      	movs	r1, #0
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f013 fdd9 	bl	801e9f0 <memset>
 800ae3e:	4b25      	ldr	r3, [pc, #148]	; (800aed4 <main+0x2a0>)
 800ae40:	627b      	str	r3, [r7, #36]	; 0x24
 800ae42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae46:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae48:	2328      	movs	r3, #40	; 0x28
 800ae4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    .name = "processTask",
    .stack_size = 128 * 4,
    .priority = (osPriority_t) osPriorityHigh,
  };

  processHandle = osThreadNew(EspUsartRxTask, NULL, &processTask_attributes);
 800ae4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae50:	461a      	mov	r2, r3
 800ae52:	2100      	movs	r1, #0
 800ae54:	4820      	ldr	r0, [pc, #128]	; (800aed8 <main+0x2a4>)
 800ae56:	f00c fb36 	bl	80174c6 <osThreadNew>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	4a1f      	ldr	r2, [pc, #124]	; (800aedc <main+0x2a8>)
 800ae5e:	6013      	str	r3, [r2, #0]

  const osThreadAttr_t smu_processTask_attributes = {
 800ae60:	463b      	mov	r3, r7
 800ae62:	2224      	movs	r2, #36	; 0x24
 800ae64:	2100      	movs	r1, #0
 800ae66:	4618      	mov	r0, r3
 800ae68:	f013 fdc2 	bl	801e9f0 <memset>
 800ae6c:	4b19      	ldr	r3, [pc, #100]	; (800aed4 <main+0x2a0>)
 800ae6e:	603b      	str	r3, [r7, #0]
 800ae70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae74:	617b      	str	r3, [r7, #20]
 800ae76:	2328      	movs	r3, #40	; 0x28
 800ae78:	61bb      	str	r3, [r7, #24]
      .name = "processTask",
      .stack_size = 128 * 16,
      .priority = (osPriority_t) osPriorityHigh,
  };

  smuProcessHandle = osThreadNew(SmuUsartRxTask, NULL, &smu_processTask_attributes);
 800ae7a:	463b      	mov	r3, r7
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	2100      	movs	r1, #0
 800ae80:	4817      	ldr	r0, [pc, #92]	; (800aee0 <main+0x2ac>)
 800ae82:	f00c fb20 	bl	80174c6 <osThreadNew>
 800ae86:	4603      	mov	r3, r0
 800ae88:	4a16      	ldr	r2, [pc, #88]	; (800aee4 <main+0x2b0>)
 800ae8a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800ae8c:	f00c fae0 	bl	8017450 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800ae90:	e7fe      	b.n	800ae90 <main+0x25c>
 800ae92:	bf00      	nop
 800ae94:	2000061c 	.word	0x2000061c
 800ae98:	08020a98 	.word	0x08020a98
 800ae9c:	2000067c 	.word	0x2000067c
 800aea0:	08020aa0 	.word	0x08020aa0
 800aea4:	08020ab4 	.word	0x08020ab4
 800aea8:	08020afc 	.word	0x08020afc
 800aeac:	200005fc 	.word	0x200005fc
 800aeb0:	200005f4 	.word	0x200005f4
 800aeb4:	200005f0 	.word	0x200005f0
 800aeb8:	200005f8 	.word	0x200005f8
 800aebc:	200005e8 	.word	0x200005e8
 800aec0:	200005ec 	.word	0x200005ec
 800aec4:	08020ac8 	.word	0x08020ac8
 800aec8:	08021630 	.word	0x08021630
 800aecc:	0800bc8d 	.word	0x0800bc8d
 800aed0:	200005dc 	.word	0x200005dc
 800aed4:	08020ae0 	.word	0x08020ae0
 800aed8:	0800b53d 	.word	0x0800b53d
 800aedc:	200005e0 	.word	0x200005e0
 800aee0:	0800b659 	.word	0x0800b659
 800aee4:	200005e4 	.word	0x200005e4

0800aee8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b098      	sub	sp, #96	; 0x60
 800aeec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800aeee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aef2:	2230      	movs	r2, #48	; 0x30
 800aef4:	2100      	movs	r1, #0
 800aef6:	4618      	mov	r0, r3
 800aef8:	f013 fd7a 	bl	801e9f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800aefc:	f107 031c 	add.w	r3, r7, #28
 800af00:	2200      	movs	r2, #0
 800af02:	601a      	str	r2, [r3, #0]
 800af04:	605a      	str	r2, [r3, #4]
 800af06:	609a      	str	r2, [r3, #8]
 800af08:	60da      	str	r2, [r3, #12]
 800af0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800af0c:	f107 030c 	add.w	r3, r7, #12
 800af10:	2200      	movs	r2, #0
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	605a      	str	r2, [r3, #4]
 800af16:	609a      	str	r2, [r3, #8]
 800af18:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800af1a:	2300      	movs	r3, #0
 800af1c:	60bb      	str	r3, [r7, #8]
 800af1e:	4b37      	ldr	r3, [pc, #220]	; (800affc <_Z18SystemClock_Configv+0x114>)
 800af20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af22:	4a36      	ldr	r2, [pc, #216]	; (800affc <_Z18SystemClock_Configv+0x114>)
 800af24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af28:	6413      	str	r3, [r2, #64]	; 0x40
 800af2a:	4b34      	ldr	r3, [pc, #208]	; (800affc <_Z18SystemClock_Configv+0x114>)
 800af2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af32:	60bb      	str	r3, [r7, #8]
 800af34:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800af36:	2300      	movs	r3, #0
 800af38:	607b      	str	r3, [r7, #4]
 800af3a:	4b31      	ldr	r3, [pc, #196]	; (800b000 <_Z18SystemClock_Configv+0x118>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a30      	ldr	r2, [pc, #192]	; (800b000 <_Z18SystemClock_Configv+0x118>)
 800af40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af44:	6013      	str	r3, [r2, #0]
 800af46:	4b2e      	ldr	r3, [pc, #184]	; (800b000 <_Z18SystemClock_Configv+0x118>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af4e:	607b      	str	r3, [r7, #4]
 800af50:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800af52:	230a      	movs	r3, #10
 800af54:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800af56:	2301      	movs	r3, #1
 800af58:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800af5a:	2310      	movs	r3, #16
 800af5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800af5e:	2301      	movs	r3, #1
 800af60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800af62:	2302      	movs	r3, #2
 800af64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800af66:	2300      	movs	r3, #0
 800af68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800af6a:	2310      	movs	r3, #16
 800af6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 800af6e:	23c0      	movs	r3, #192	; 0xc0
 800af70:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800af72:	2302      	movs	r3, #2
 800af74:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800af76:	2304      	movs	r3, #4
 800af78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800af7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af7e:	4618      	mov	r0, r3
 800af80:	f005 f9b2 	bl	80102e8 <HAL_RCC_OscConfig>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	bf14      	ite	ne
 800af8a:	2301      	movne	r3, #1
 800af8c:	2300      	moveq	r3, #0
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b00      	cmp	r3, #0
 800af92:	d001      	beq.n	800af98 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 800af94:	f000 fe81 	bl	800bc9a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800af98:	230f      	movs	r3, #15
 800af9a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800af9c:	2300      	movs	r3, #0
 800af9e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800afa0:	2300      	movs	r3, #0
 800afa2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800afa4:	2300      	movs	r3, #0
 800afa6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800afa8:	2300      	movs	r3, #0
 800afaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800afac:	f107 031c 	add.w	r3, r7, #28
 800afb0:	2100      	movs	r1, #0
 800afb2:	4618      	mov	r0, r3
 800afb4:	f005 fc10 	bl	80107d8 <HAL_RCC_ClockConfig>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	bf14      	ite	ne
 800afbe:	2301      	movne	r3, #1
 800afc0:	2300      	moveq	r3, #0
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d001      	beq.n	800afcc <_Z18SystemClock_Configv+0xe4>
  {
    Error_Handler();
 800afc8:	f000 fe67 	bl	800bc9a <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800afcc:	2302      	movs	r3, #2
 800afce:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800afd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afd4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800afd6:	f107 030c 	add.w	r3, r7, #12
 800afda:	4618      	mov	r0, r3
 800afdc:	f005 fddc 	bl	8010b98 <HAL_RCCEx_PeriphCLKConfig>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	bf14      	ite	ne
 800afe6:	2301      	movne	r3, #1
 800afe8:	2300      	moveq	r3, #0
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b00      	cmp	r3, #0
 800afee:	d001      	beq.n	800aff4 <_Z18SystemClock_Configv+0x10c>
  {
    Error_Handler();
 800aff0:	f000 fe53 	bl	800bc9a <Error_Handler>
  }
}
 800aff4:	bf00      	nop
 800aff6:	3760      	adds	r7, #96	; 0x60
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	40023800 	.word	0x40023800
 800b000:	40007000 	.word	0x40007000

0800b004 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800b00a:	463b      	mov	r3, r7
 800b00c:	2200      	movs	r2, #0
 800b00e:	601a      	str	r2, [r3, #0]
 800b010:	605a      	str	r2, [r3, #4]
 800b012:	609a      	str	r2, [r3, #8]
 800b014:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800b016:	4b26      	ldr	r3, [pc, #152]	; (800b0b0 <_ZL12MX_ADC1_Initv+0xac>)
 800b018:	4a26      	ldr	r2, [pc, #152]	; (800b0b4 <_ZL12MX_ADC1_Initv+0xb0>)
 800b01a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800b01c:	4b24      	ldr	r3, [pc, #144]	; (800b0b0 <_ZL12MX_ADC1_Initv+0xac>)
 800b01e:	2200      	movs	r2, #0
 800b020:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800b022:	4b23      	ldr	r3, [pc, #140]	; (800b0b0 <_ZL12MX_ADC1_Initv+0xac>)
 800b024:	2200      	movs	r2, #0
 800b026:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800b028:	4b21      	ldr	r3, [pc, #132]	; (800b0b0 <_ZL12MX_ADC1_Initv+0xac>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b02e:	4b20      	ldr	r3, [pc, #128]	; (800b0b0 <_ZL12MX_ADC1_Initv+0xac>)
 800b030:	2200      	movs	r2, #0
 800b032:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b034:	4b1e      	ldr	r3, [pc, #120]	; (800b0b0 <_ZL12MX_ADC1_Initv+0xac>)
 800b036:	2200      	movs	r2, #0
 800b038:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b03c:	4b1c      	ldr	r3, [pc, #112]	; (800b0b0 <_ZL12MX_ADC1_Initv+0xac>)
 800b03e:	2200      	movs	r2, #0
 800b040:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b042:	4b1b      	ldr	r3, [pc, #108]	; (800b0b0 <_ZL12MX_ADC1_Initv+0xac>)
 800b044:	4a1c      	ldr	r2, [pc, #112]	; (800b0b8 <_ZL12MX_ADC1_Initv+0xb4>)
 800b046:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b048:	4b19      	ldr	r3, [pc, #100]	; (800b0b0 <_ZL12MX_ADC1_Initv+0xac>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800b04e:	4b18      	ldr	r3, [pc, #96]	; (800b0b0 <_ZL12MX_ADC1_Initv+0xac>)
 800b050:	2201      	movs	r2, #1
 800b052:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800b054:	4b16      	ldr	r3, [pc, #88]	; (800b0b0 <_ZL12MX_ADC1_Initv+0xac>)
 800b056:	2200      	movs	r2, #0
 800b058:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b05c:	4b14      	ldr	r3, [pc, #80]	; (800b0b0 <_ZL12MX_ADC1_Initv+0xac>)
 800b05e:	2201      	movs	r2, #1
 800b060:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b062:	4813      	ldr	r0, [pc, #76]	; (800b0b0 <_ZL12MX_ADC1_Initv+0xac>)
 800b064:	f003 feac 	bl	800edc0 <HAL_ADC_Init>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	bf14      	ite	ne
 800b06e:	2301      	movne	r3, #1
 800b070:	2300      	moveq	r3, #0
 800b072:	b2db      	uxtb	r3, r3
 800b074:	2b00      	cmp	r3, #0
 800b076:	d001      	beq.n	800b07c <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 800b078:	f000 fe0f 	bl	800bc9a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800b07c:	2304      	movs	r3, #4
 800b07e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800b080:	2301      	movs	r3, #1
 800b082:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800b084:	2300      	movs	r3, #0
 800b086:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b088:	463b      	mov	r3, r7
 800b08a:	4619      	mov	r1, r3
 800b08c:	4808      	ldr	r0, [pc, #32]	; (800b0b0 <_ZL12MX_ADC1_Initv+0xac>)
 800b08e:	f003 fedb 	bl	800ee48 <HAL_ADC_ConfigChannel>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	bf14      	ite	ne
 800b098:	2301      	movne	r3, #1
 800b09a:	2300      	moveq	r3, #0
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d001      	beq.n	800b0a6 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800b0a2:	f000 fdfa 	bl	800bc9a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800b0a6:	bf00      	nop
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	20000278 	.word	0x20000278
 800b0b4:	40012000 	.word	0x40012000
 800b0b8:	0f000001 	.word	0x0f000001

0800b0bc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800b0c0:	4b15      	ldr	r3, [pc, #84]	; (800b118 <_ZL12MX_I2C1_Initv+0x5c>)
 800b0c2:	4a16      	ldr	r2, [pc, #88]	; (800b11c <_ZL12MX_I2C1_Initv+0x60>)
 800b0c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800b0c6:	4b14      	ldr	r3, [pc, #80]	; (800b118 <_ZL12MX_I2C1_Initv+0x5c>)
 800b0c8:	4a15      	ldr	r2, [pc, #84]	; (800b120 <_ZL12MX_I2C1_Initv+0x64>)
 800b0ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b0cc:	4b12      	ldr	r3, [pc, #72]	; (800b118 <_ZL12MX_I2C1_Initv+0x5c>)
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800b0d2:	4b11      	ldr	r3, [pc, #68]	; (800b118 <_ZL12MX_I2C1_Initv+0x5c>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b0d8:	4b0f      	ldr	r3, [pc, #60]	; (800b118 <_ZL12MX_I2C1_Initv+0x5c>)
 800b0da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b0de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b0e0:	4b0d      	ldr	r3, [pc, #52]	; (800b118 <_ZL12MX_I2C1_Initv+0x5c>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800b0e6:	4b0c      	ldr	r3, [pc, #48]	; (800b118 <_ZL12MX_I2C1_Initv+0x5c>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b0ec:	4b0a      	ldr	r3, [pc, #40]	; (800b118 <_ZL12MX_I2C1_Initv+0x5c>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b0f2:	4b09      	ldr	r3, [pc, #36]	; (800b118 <_ZL12MX_I2C1_Initv+0x5c>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b0f8:	4807      	ldr	r0, [pc, #28]	; (800b118 <_ZL12MX_I2C1_Initv+0x5c>)
 800b0fa:	f004 ffb1 	bl	8010060 <HAL_I2C_Init>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	bf14      	ite	ne
 800b104:	2301      	movne	r3, #1
 800b106:	2300      	moveq	r3, #0
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d001      	beq.n	800b112 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800b10e:	f000 fdc4 	bl	800bc9a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800b112:	bf00      	nop
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	200002c0 	.word	0x200002c0
 800b11c:	40005400 	.word	0x40005400
 800b120:	000186a0 	.word	0x000186a0

0800b124 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800b128:	4b15      	ldr	r3, [pc, #84]	; (800b180 <_ZL12MX_I2C2_Initv+0x5c>)
 800b12a:	4a16      	ldr	r2, [pc, #88]	; (800b184 <_ZL12MX_I2C2_Initv+0x60>)
 800b12c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800b12e:	4b14      	ldr	r3, [pc, #80]	; (800b180 <_ZL12MX_I2C2_Initv+0x5c>)
 800b130:	4a15      	ldr	r2, [pc, #84]	; (800b188 <_ZL12MX_I2C2_Initv+0x64>)
 800b132:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b134:	4b12      	ldr	r3, [pc, #72]	; (800b180 <_ZL12MX_I2C2_Initv+0x5c>)
 800b136:	2200      	movs	r2, #0
 800b138:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800b13a:	4b11      	ldr	r3, [pc, #68]	; (800b180 <_ZL12MX_I2C2_Initv+0x5c>)
 800b13c:	2200      	movs	r2, #0
 800b13e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b140:	4b0f      	ldr	r3, [pc, #60]	; (800b180 <_ZL12MX_I2C2_Initv+0x5c>)
 800b142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b146:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b148:	4b0d      	ldr	r3, [pc, #52]	; (800b180 <_ZL12MX_I2C2_Initv+0x5c>)
 800b14a:	2200      	movs	r2, #0
 800b14c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800b14e:	4b0c      	ldr	r3, [pc, #48]	; (800b180 <_ZL12MX_I2C2_Initv+0x5c>)
 800b150:	2200      	movs	r2, #0
 800b152:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b154:	4b0a      	ldr	r3, [pc, #40]	; (800b180 <_ZL12MX_I2C2_Initv+0x5c>)
 800b156:	2200      	movs	r2, #0
 800b158:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b15a:	4b09      	ldr	r3, [pc, #36]	; (800b180 <_ZL12MX_I2C2_Initv+0x5c>)
 800b15c:	2200      	movs	r2, #0
 800b15e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b160:	4807      	ldr	r0, [pc, #28]	; (800b180 <_ZL12MX_I2C2_Initv+0x5c>)
 800b162:	f004 ff7d 	bl	8010060 <HAL_I2C_Init>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	bf14      	ite	ne
 800b16c:	2301      	movne	r3, #1
 800b16e:	2300      	moveq	r3, #0
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 800b176:	f000 fd90 	bl	800bc9a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800b17a:	bf00      	nop
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	20000314 	.word	0x20000314
 800b184:	40005800 	.word	0x40005800
 800b188:	000186a0 	.word	0x000186a0

0800b18c <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800b192:	1d3b      	adds	r3, r7, #4
 800b194:	2200      	movs	r2, #0
 800b196:	601a      	str	r2, [r3, #0]
 800b198:	605a      	str	r2, [r3, #4]
 800b19a:	609a      	str	r2, [r3, #8]
 800b19c:	60da      	str	r2, [r3, #12]
 800b19e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800b1a4:	4b2b      	ldr	r3, [pc, #172]	; (800b254 <_ZL11MX_RTC_Initv+0xc8>)
 800b1a6:	4a2c      	ldr	r2, [pc, #176]	; (800b258 <_ZL11MX_RTC_Initv+0xcc>)
 800b1a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800b1aa:	4b2a      	ldr	r3, [pc, #168]	; (800b254 <_ZL11MX_RTC_Initv+0xc8>)
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800b1b0:	4b28      	ldr	r3, [pc, #160]	; (800b254 <_ZL11MX_RTC_Initv+0xc8>)
 800b1b2:	227f      	movs	r2, #127	; 0x7f
 800b1b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800b1b6:	4b27      	ldr	r3, [pc, #156]	; (800b254 <_ZL11MX_RTC_Initv+0xc8>)
 800b1b8:	22ff      	movs	r2, #255	; 0xff
 800b1ba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800b1bc:	4b25      	ldr	r3, [pc, #148]	; (800b254 <_ZL11MX_RTC_Initv+0xc8>)
 800b1be:	2200      	movs	r2, #0
 800b1c0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800b1c2:	4b24      	ldr	r3, [pc, #144]	; (800b254 <_ZL11MX_RTC_Initv+0xc8>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800b1c8:	4b22      	ldr	r3, [pc, #136]	; (800b254 <_ZL11MX_RTC_Initv+0xc8>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800b1ce:	4821      	ldr	r0, [pc, #132]	; (800b254 <_ZL11MX_RTC_Initv+0xc8>)
 800b1d0:	f005 fdc4 	bl	8010d5c <HAL_RTC_Init>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	bf14      	ite	ne
 800b1da:	2301      	movne	r3, #1
 800b1dc:	2300      	moveq	r3, #0
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d001      	beq.n	800b1e8 <_ZL11MX_RTC_Initv+0x5c>
  {
    Error_Handler();
 800b1e4:	f000 fd59 	bl	800bc9a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800b1fc:	1d3b      	adds	r3, r7, #4
 800b1fe:	2201      	movs	r2, #1
 800b200:	4619      	mov	r1, r3
 800b202:	4814      	ldr	r0, [pc, #80]	; (800b254 <_ZL11MX_RTC_Initv+0xc8>)
 800b204:	f005 fe3b 	bl	8010e7e <HAL_RTC_SetTime>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	bf14      	ite	ne
 800b20e:	2301      	movne	r3, #1
 800b210:	2300      	moveq	r3, #0
 800b212:	b2db      	uxtb	r3, r3
 800b214:	2b00      	cmp	r3, #0
 800b216:	d001      	beq.n	800b21c <_ZL11MX_RTC_Initv+0x90>
  {
    Error_Handler();
 800b218:	f000 fd3f 	bl	800bc9a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800b21c:	2301      	movs	r3, #1
 800b21e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800b220:	2301      	movs	r3, #1
 800b222:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800b224:	2301      	movs	r3, #1
 800b226:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800b228:	2300      	movs	r3, #0
 800b22a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800b22c:	463b      	mov	r3, r7
 800b22e:	2201      	movs	r2, #1
 800b230:	4619      	mov	r1, r3
 800b232:	4808      	ldr	r0, [pc, #32]	; (800b254 <_ZL11MX_RTC_Initv+0xc8>)
 800b234:	f005 fee0 	bl	8010ff8 <HAL_RTC_SetDate>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	bf14      	ite	ne
 800b23e:	2301      	movne	r3, #1
 800b240:	2300      	moveq	r3, #0
 800b242:	b2db      	uxtb	r3, r3
 800b244:	2b00      	cmp	r3, #0
 800b246:	d001      	beq.n	800b24c <_ZL11MX_RTC_Initv+0xc0>
  {
    Error_Handler();
 800b248:	f000 fd27 	bl	800bc9a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800b24c:	bf00      	nop
 800b24e:	3718      	adds	r7, #24
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	20000368 	.word	0x20000368
 800b258:	40002800 	.word	0x40002800

0800b25c <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800b25c:	b480      	push	{r7}
 800b25e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800b260:	4b0c      	ldr	r3, [pc, #48]	; (800b294 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800b262:	4a0d      	ldr	r2, [pc, #52]	; (800b298 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 800b264:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800b266:	4b0b      	ldr	r3, [pc, #44]	; (800b294 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800b268:	2200      	movs	r2, #0
 800b26a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800b26c:	4b09      	ldr	r3, [pc, #36]	; (800b294 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800b26e:	2200      	movs	r2, #0
 800b270:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b272:	4b08      	ldr	r3, [pc, #32]	; (800b294 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800b274:	2200      	movs	r2, #0
 800b276:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800b278:	4b06      	ldr	r3, [pc, #24]	; (800b294 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800b27a:	2200      	movs	r2, #0
 800b27c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b27e:	4b05      	ldr	r3, [pc, #20]	; (800b294 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800b280:	2200      	movs	r2, #0
 800b282:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 127;
 800b284:	4b03      	ldr	r3, [pc, #12]	; (800b294 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800b286:	227f      	movs	r2, #127	; 0x7f
 800b288:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800b28a:	bf00      	nop
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	20000388 	.word	0x20000388
 800b298:	40012c00 	.word	0x40012c00

0800b29c <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800b2a0:	4b13      	ldr	r3, [pc, #76]	; (800b2f0 <_ZL13MX_UART4_Initv+0x54>)
 800b2a2:	4a14      	ldr	r2, [pc, #80]	; (800b2f4 <_ZL13MX_UART4_Initv+0x58>)
 800b2a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b2a6:	4b12      	ldr	r3, [pc, #72]	; (800b2f0 <_ZL13MX_UART4_Initv+0x54>)
 800b2a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b2ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b2ae:	4b10      	ldr	r3, [pc, #64]	; (800b2f0 <_ZL13MX_UART4_Initv+0x54>)
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b2b4:	4b0e      	ldr	r3, [pc, #56]	; (800b2f0 <_ZL13MX_UART4_Initv+0x54>)
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b2ba:	4b0d      	ldr	r3, [pc, #52]	; (800b2f0 <_ZL13MX_UART4_Initv+0x54>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b2c0:	4b0b      	ldr	r3, [pc, #44]	; (800b2f0 <_ZL13MX_UART4_Initv+0x54>)
 800b2c2:	220c      	movs	r2, #12
 800b2c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b2c6:	4b0a      	ldr	r3, [pc, #40]	; (800b2f0 <_ZL13MX_UART4_Initv+0x54>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b2cc:	4b08      	ldr	r3, [pc, #32]	; (800b2f0 <_ZL13MX_UART4_Initv+0x54>)
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b2d2:	4807      	ldr	r0, [pc, #28]	; (800b2f0 <_ZL13MX_UART4_Initv+0x54>)
 800b2d4:	f007 fadb 	bl	801288e <HAL_UART_Init>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	bf14      	ite	ne
 800b2de:	2301      	movne	r3, #1
 800b2e0:	2300      	moveq	r3, #0
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d001      	beq.n	800b2ec <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 800b2e8:	f000 fcd7 	bl	800bc9a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800b2ec:	bf00      	nop
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	200004cc 	.word	0x200004cc
 800b2f4:	40004c00 	.word	0x40004c00

0800b2f8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b2fc:	4b13      	ldr	r3, [pc, #76]	; (800b34c <_ZL19MX_USART1_UART_Initv+0x54>)
 800b2fe:	4a14      	ldr	r2, [pc, #80]	; (800b350 <_ZL19MX_USART1_UART_Initv+0x58>)
 800b300:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800b302:	4b12      	ldr	r3, [pc, #72]	; (800b34c <_ZL19MX_USART1_UART_Initv+0x54>)
 800b304:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800b308:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b30a:	4b10      	ldr	r3, [pc, #64]	; (800b34c <_ZL19MX_USART1_UART_Initv+0x54>)
 800b30c:	2200      	movs	r2, #0
 800b30e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b310:	4b0e      	ldr	r3, [pc, #56]	; (800b34c <_ZL19MX_USART1_UART_Initv+0x54>)
 800b312:	2200      	movs	r2, #0
 800b314:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b316:	4b0d      	ldr	r3, [pc, #52]	; (800b34c <_ZL19MX_USART1_UART_Initv+0x54>)
 800b318:	2200      	movs	r2, #0
 800b31a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b31c:	4b0b      	ldr	r3, [pc, #44]	; (800b34c <_ZL19MX_USART1_UART_Initv+0x54>)
 800b31e:	220c      	movs	r2, #12
 800b320:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b322:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <_ZL19MX_USART1_UART_Initv+0x54>)
 800b324:	2200      	movs	r2, #0
 800b326:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b328:	4b08      	ldr	r3, [pc, #32]	; (800b34c <_ZL19MX_USART1_UART_Initv+0x54>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b32e:	4807      	ldr	r0, [pc, #28]	; (800b34c <_ZL19MX_USART1_UART_Initv+0x54>)
 800b330:	f007 faad 	bl	801288e <HAL_UART_Init>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	bf14      	ite	ne
 800b33a:	2301      	movne	r3, #1
 800b33c:	2300      	moveq	r3, #0
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	2b00      	cmp	r3, #0
 800b342:	d001      	beq.n	800b348 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800b344:	f000 fca9 	bl	800bc9a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b348:	bf00      	nop
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	20000510 	.word	0x20000510
 800b350:	40011000 	.word	0x40011000

0800b354 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800b358:	4b13      	ldr	r3, [pc, #76]	; (800b3a8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800b35a:	4a14      	ldr	r2, [pc, #80]	; (800b3ac <_ZL19MX_USART2_UART_Initv+0x58>)
 800b35c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800b35e:	4b12      	ldr	r3, [pc, #72]	; (800b3a8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800b360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b366:	4b10      	ldr	r3, [pc, #64]	; (800b3a8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800b368:	2200      	movs	r2, #0
 800b36a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b36c:	4b0e      	ldr	r3, [pc, #56]	; (800b3a8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800b36e:	2200      	movs	r2, #0
 800b370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b372:	4b0d      	ldr	r3, [pc, #52]	; (800b3a8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800b374:	2200      	movs	r2, #0
 800b376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b378:	4b0b      	ldr	r3, [pc, #44]	; (800b3a8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800b37a:	220c      	movs	r2, #12
 800b37c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b37e:	4b0a      	ldr	r3, [pc, #40]	; (800b3a8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800b380:	2200      	movs	r2, #0
 800b382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b384:	4b08      	ldr	r3, [pc, #32]	; (800b3a8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800b386:	2200      	movs	r2, #0
 800b388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b38a:	4807      	ldr	r0, [pc, #28]	; (800b3a8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800b38c:	f007 fa7f 	bl	801288e <HAL_UART_Init>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	bf14      	ite	ne
 800b396:	2301      	movne	r3, #1
 800b398:	2300      	moveq	r3, #0
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d001      	beq.n	800b3a4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800b3a0:	f000 fc7b 	bl	800bc9a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800b3a4:	bf00      	nop
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	20000554 	.word	0x20000554
 800b3ac:	40004400 	.word	0x40004400

0800b3b0 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800b3b4:	4b13      	ldr	r3, [pc, #76]	; (800b404 <_ZL19MX_USART6_UART_Initv+0x54>)
 800b3b6:	4a14      	ldr	r2, [pc, #80]	; (800b408 <_ZL19MX_USART6_UART_Initv+0x58>)
 800b3b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800b3ba:	4b12      	ldr	r3, [pc, #72]	; (800b404 <_ZL19MX_USART6_UART_Initv+0x54>)
 800b3bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b3c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800b3c2:	4b10      	ldr	r3, [pc, #64]	; (800b404 <_ZL19MX_USART6_UART_Initv+0x54>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800b3c8:	4b0e      	ldr	r3, [pc, #56]	; (800b404 <_ZL19MX_USART6_UART_Initv+0x54>)
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800b3ce:	4b0d      	ldr	r3, [pc, #52]	; (800b404 <_ZL19MX_USART6_UART_Initv+0x54>)
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800b3d4:	4b0b      	ldr	r3, [pc, #44]	; (800b404 <_ZL19MX_USART6_UART_Initv+0x54>)
 800b3d6:	220c      	movs	r2, #12
 800b3d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b3da:	4b0a      	ldr	r3, [pc, #40]	; (800b404 <_ZL19MX_USART6_UART_Initv+0x54>)
 800b3dc:	2200      	movs	r2, #0
 800b3de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800b3e0:	4b08      	ldr	r3, [pc, #32]	; (800b404 <_ZL19MX_USART6_UART_Initv+0x54>)
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800b3e6:	4807      	ldr	r0, [pc, #28]	; (800b404 <_ZL19MX_USART6_UART_Initv+0x54>)
 800b3e8:	f007 fa51 	bl	801288e <HAL_UART_Init>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	bf14      	ite	ne
 800b3f2:	2301      	movne	r3, #1
 800b3f4:	2300      	moveq	r3, #0
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d001      	beq.n	800b400 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 800b3fc:	f000 fc4d 	bl	800bc9a <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800b400:	bf00      	nop
 800b402:	bd80      	pop	{r7, pc}
 800b404:	20000598 	.word	0x20000598
 800b408:	40011400 	.word	0x40011400

0800b40c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800b412:	2300      	movs	r3, #0
 800b414:	607b      	str	r3, [r7, #4]
 800b416:	4b10      	ldr	r3, [pc, #64]	; (800b458 <_ZL11MX_DMA_Initv+0x4c>)
 800b418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b41a:	4a0f      	ldr	r2, [pc, #60]	; (800b458 <_ZL11MX_DMA_Initv+0x4c>)
 800b41c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b420:	6313      	str	r3, [r2, #48]	; 0x30
 800b422:	4b0d      	ldr	r3, [pc, #52]	; (800b458 <_ZL11MX_DMA_Initv+0x4c>)
 800b424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b42a:	607b      	str	r3, [r7, #4]
 800b42c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800b42e:	2200      	movs	r2, #0
 800b430:	2105      	movs	r1, #5
 800b432:	203b      	movs	r0, #59	; 0x3b
 800b434:	f004 f801 	bl	800f43a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800b438:	203b      	movs	r0, #59	; 0x3b
 800b43a:	f004 f81a 	bl	800f472 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800b43e:	2200      	movs	r2, #0
 800b440:	2105      	movs	r1, #5
 800b442:	2045      	movs	r0, #69	; 0x45
 800b444:	f003 fff9 	bl	800f43a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800b448:	2045      	movs	r0, #69	; 0x45
 800b44a:	f004 f812 	bl	800f472 <HAL_NVIC_EnableIRQ>

}
 800b44e:	bf00      	nop
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	40023800 	.word	0x40023800

0800b45c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08a      	sub	sp, #40	; 0x28
 800b460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b462:	f107 0314 	add.w	r3, r7, #20
 800b466:	2200      	movs	r2, #0
 800b468:	601a      	str	r2, [r3, #0]
 800b46a:	605a      	str	r2, [r3, #4]
 800b46c:	609a      	str	r2, [r3, #8]
 800b46e:	60da      	str	r2, [r3, #12]
 800b470:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b472:	2300      	movs	r3, #0
 800b474:	613b      	str	r3, [r7, #16]
 800b476:	4b2e      	ldr	r3, [pc, #184]	; (800b530 <_ZL12MX_GPIO_Initv+0xd4>)
 800b478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b47a:	4a2d      	ldr	r2, [pc, #180]	; (800b530 <_ZL12MX_GPIO_Initv+0xd4>)
 800b47c:	f043 0301 	orr.w	r3, r3, #1
 800b480:	6313      	str	r3, [r2, #48]	; 0x30
 800b482:	4b2b      	ldr	r3, [pc, #172]	; (800b530 <_ZL12MX_GPIO_Initv+0xd4>)
 800b484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b486:	f003 0301 	and.w	r3, r3, #1
 800b48a:	613b      	str	r3, [r7, #16]
 800b48c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b48e:	2300      	movs	r3, #0
 800b490:	60fb      	str	r3, [r7, #12]
 800b492:	4b27      	ldr	r3, [pc, #156]	; (800b530 <_ZL12MX_GPIO_Initv+0xd4>)
 800b494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b496:	4a26      	ldr	r2, [pc, #152]	; (800b530 <_ZL12MX_GPIO_Initv+0xd4>)
 800b498:	f043 0302 	orr.w	r3, r3, #2
 800b49c:	6313      	str	r3, [r2, #48]	; 0x30
 800b49e:	4b24      	ldr	r3, [pc, #144]	; (800b530 <_ZL12MX_GPIO_Initv+0xd4>)
 800b4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a2:	f003 0302 	and.w	r3, r3, #2
 800b4a6:	60fb      	str	r3, [r7, #12]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	60bb      	str	r3, [r7, #8]
 800b4ae:	4b20      	ldr	r3, [pc, #128]	; (800b530 <_ZL12MX_GPIO_Initv+0xd4>)
 800b4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b2:	4a1f      	ldr	r2, [pc, #124]	; (800b530 <_ZL12MX_GPIO_Initv+0xd4>)
 800b4b4:	f043 0308 	orr.w	r3, r3, #8
 800b4b8:	6313      	str	r3, [r2, #48]	; 0x30
 800b4ba:	4b1d      	ldr	r3, [pc, #116]	; (800b530 <_ZL12MX_GPIO_Initv+0xd4>)
 800b4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4be:	f003 0308 	and.w	r3, r3, #8
 800b4c2:	60bb      	str	r3, [r7, #8]
 800b4c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	607b      	str	r3, [r7, #4]
 800b4ca:	4b19      	ldr	r3, [pc, #100]	; (800b530 <_ZL12MX_GPIO_Initv+0xd4>)
 800b4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ce:	4a18      	ldr	r2, [pc, #96]	; (800b530 <_ZL12MX_GPIO_Initv+0xd4>)
 800b4d0:	f043 0304 	orr.w	r3, r3, #4
 800b4d4:	6313      	str	r3, [r2, #48]	; 0x30
 800b4d6:	4b16      	ldr	r3, [pc, #88]	; (800b530 <_ZL12MX_GPIO_Initv+0xd4>)
 800b4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4da:	f003 0304 	and.w	r3, r3, #4
 800b4de:	607b      	str	r3, [r7, #4]
 800b4e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|Panel0_Pin|Panel1_Pin|Panel2_Pin, GPIO_PIN_RESET);
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f44f 41e4 	mov.w	r1, #29184	; 0x7200
 800b4e8:	4812      	ldr	r0, [pc, #72]	; (800b534 <_ZL12MX_GPIO_Initv+0xd8>)
 800b4ea:	f004 fd9f 	bl	801002c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD9 Panel0_Pin Panel1_Pin Panel2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|Panel0_Pin|Panel1_Pin|Panel2_Pin;
 800b4ee:	f44f 43e4 	mov.w	r3, #29184	; 0x7200
 800b4f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b500:	f107 0314 	add.w	r3, r7, #20
 800b504:	4619      	mov	r1, r3
 800b506:	480b      	ldr	r0, [pc, #44]	; (800b534 <_ZL12MX_GPIO_Initv+0xd8>)
 800b508:	f004 fbdc 	bl	800fcc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800b50c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b512:	2300      	movs	r3, #0
 800b514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b516:	2300      	movs	r3, #0
 800b518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b51a:	f107 0314 	add.w	r3, r7, #20
 800b51e:	4619      	mov	r1, r3
 800b520:	4805      	ldr	r0, [pc, #20]	; (800b538 <_ZL12MX_GPIO_Initv+0xdc>)
 800b522:	f004 fbcf 	bl	800fcc4 <HAL_GPIO_Init>

}
 800b526:	bf00      	nop
 800b528:	3728      	adds	r7, #40	; 0x28
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	40023800 	.word	0x40023800
 800b534:	40020c00 	.word	0x40020c00
 800b538:	40020000 	.word	0x40020000

0800b53c <_Z14EspUsartRxTaskPv>:

		osDelayUntil(tick);
	}
}

void EspUsartRxTask(void* arg) {
 800b53c:	b5b0      	push	{r4, r5, r7, lr}
 800b53e:	b0a0      	sub	sp, #128	; 0x80
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
	BufferRange buffer_range;

	for(;;) {
		osMessageQueueGet(esp_msg_rx_queue, &buffer_range, NULL, osWaitForever);
 800b544:	4b41      	ldr	r3, [pc, #260]	; (800b64c <_Z14EspUsartRxTaskPv+0x110>)
 800b546:	6818      	ldr	r0, [r3, #0]
 800b548:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800b54c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b550:	2200      	movs	r2, #0
 800b552:	f00c fae7 	bl	8017b24 <osMessageQueueGet>

		if (buffer_range.start <= buffer_range.end) {
 800b556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d824      	bhi.n	800b5a8 <_Z14EspUsartRxTaskPv+0x6c>
			esp.push_message(std::string((char*) &esp_usart_rx_buffer[buffer_range.start],
 800b55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b560:	4a3b      	ldr	r2, [pc, #236]	; (800b650 <_Z14EspUsartRxTaskPv+0x114>)
 800b562:	189c      	adds	r4, r3, r2
					buffer_range.end + 1 - buffer_range.start));
 800b564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b568:	1ad3      	subs	r3, r2, r3
			esp.push_message(std::string((char*) &esp_usart_rx_buffer[buffer_range.start],
 800b56a:	1c5d      	adds	r5, r3, #1
 800b56c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b570:	4618      	mov	r0, r3
 800b572:	f00f fc1f 	bl	801adb4 <_ZNSaIcEC1Ev>
 800b576:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b57a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800b57e:	462a      	mov	r2, r5
 800b580:	4621      	mov	r1, r4
 800b582:	f010 f98b 	bl	801b89c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 800b586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b58a:	4619      	mov	r1, r3
 800b58c:	4831      	ldr	r0, [pc, #196]	; (800b654 <_Z14EspUsartRxTaskPv+0x118>)
 800b58e:	f7fc ff7e 	bl	800848e <_ZN5ESP3212push_messageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b596:	4618      	mov	r0, r3
 800b598:	f00f ff10 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b59c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f00f fc0b 	bl	801adbc <_ZNSaIcED1Ev>
 800b5a6:	e7cd      	b.n	800b544 <_Z14EspUsartRxTaskPv+0x8>
		} else {
			std::string res((char*) &esp_usart_rx_buffer[buffer_range.start],
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5aa:	4a29      	ldr	r2, [pc, #164]	; (800b650 <_Z14EspUsartRxTaskPv+0x114>)
 800b5ac:	189c      	adds	r4, r3, r2
					ESP_MAX_RESP_LENGTH - buffer_range.start);
 800b5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b0:	f5c3 7500 	rsb	r5, r3, #512	; 0x200
 800b5b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f00f fbfb 	bl	801adb4 <_ZNSaIcEC1Ev>
 800b5be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b5c2:	f107 000c 	add.w	r0, r7, #12
 800b5c6:	462a      	mov	r2, r5
 800b5c8:	4621      	mov	r1, r4
 800b5ca:	f010 f967 	bl	801b89c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 800b5ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f00f fbf2 	bl	801adbc <_ZNSaIcED1Ev>

			res += std::string((char*) &esp_usart_rx_buffer[0], buffer_range.end+1);
 800b5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5da:	1c5c      	adds	r4, r3, #1
 800b5dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f00f fbe7 	bl	801adb4 <_ZNSaIcEC1Ev>
 800b5e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b5ea:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800b5ee:	4622      	mov	r2, r4
 800b5f0:	4917      	ldr	r1, [pc, #92]	; (800b650 <_Z14EspUsartRxTaskPv+0x114>)
 800b5f2:	f010 f953 	bl	801b89c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 800b5f6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800b5fa:	f107 030c 	add.w	r3, r7, #12
 800b5fe:	4611      	mov	r1, r2
 800b600:	4618      	mov	r0, r3
 800b602:	f010 f8a5 	bl	801b750 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800b606:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b60a:	4618      	mov	r0, r3
 800b60c:	f00f fed6 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b610:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b614:	4618      	mov	r0, r3
 800b616:	f00f fbd1 	bl	801adbc <_ZNSaIcED1Ev>
			esp.push_message(res);
 800b61a:	f107 020c 	add.w	r2, r7, #12
 800b61e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b622:	4611      	mov	r1, r2
 800b624:	4618      	mov	r0, r3
 800b626:	f010 f929 	bl	801b87c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800b62a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b62e:	4619      	mov	r1, r3
 800b630:	4808      	ldr	r0, [pc, #32]	; (800b654 <_Z14EspUsartRxTaskPv+0x118>)
 800b632:	f7fc ff2c 	bl	800848e <_ZN5ESP3212push_messageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b636:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b63a:	4618      	mov	r0, r3
 800b63c:	f00f febe 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
 800b640:	f107 030c 	add.w	r3, r7, #12
 800b644:	4618      	mov	r0, r3
 800b646:	f00f feb9 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
 800b64a:	e77b      	b.n	800b544 <_Z14EspUsartRxTaskPv+0x8>
 800b64c:	200005e8 	.word	0x200005e8
 800b650:	20000734 	.word	0x20000734
 800b654:	2000067c 	.word	0x2000067c

0800b658 <_Z14SmuUsartRxTaskPv>:
}

void SmuUsartRxTask(void* arg) {
 800b658:	b5b0      	push	{r4, r5, r7, lr}
 800b65a:	b0c4      	sub	sp, #272	; 0x110
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b662:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b666:	6018      	str	r0, [r3, #0]
	BufferRange buffer_range;

	for(;;) {
		osMessageQueueGet(smu_data_rx_queue, &buffer_range, NULL, osWaitForever);
 800b668:	4ba1      	ldr	r3, [pc, #644]	; (800b8f0 <_Z14SmuUsartRxTaskPv+0x298>)
 800b66a:	6818      	ldr	r0, [r3, #0]
 800b66c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800b670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b674:	2200      	movs	r2, #0
 800b676:	f00c fa55 	bl	8017b24 <osMessageQueueGet>
		std::string data_str;
 800b67a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b67e:	4618      	mov	r0, r3
 800b680:	f00f fe6c 	bl	801b35c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>

		if (buffer_range.start <= buffer_range.end) {
 800b684:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d829      	bhi.n	800b6e4 <_Z14SmuUsartRxTaskPv+0x8c>
			data_str = std::string((char*)&smu_usart_rx_buffer[buffer_range.start],
 800b690:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b694:	4a97      	ldr	r2, [pc, #604]	; (800b8f4 <_Z14SmuUsartRxTaskPv+0x29c>)
 800b696:	189c      	adds	r4, r3, r2
				buffer_range.end + 1 - buffer_range.start);
 800b698:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b69c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b6a0:	1ad3      	subs	r3, r2, r3
			data_str = std::string((char*)&smu_usart_rx_buffer[buffer_range.start],
 800b6a2:	1c5d      	adds	r5, r3, #1
 800b6a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f00f fb83 	bl	801adb4 <_ZNSaIcEC1Ev>
 800b6ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800b6b2:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800b6b6:	462a      	mov	r2, r5
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	f010 f8ef 	bl	801b89c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
				buffer_range.end + 1 - buffer_range.start);
 800b6be:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800b6c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f00f fe83 	bl	801b3d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
			data_str = std::string((char*)&smu_usart_rx_buffer[buffer_range.start],
 800b6ce:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f00f fe72 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b6d8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f00f fb6d 	bl	801adbc <_ZNSaIcED1Ev>
 800b6e2:	e048      	b.n	800b776 <_Z14SmuUsartRxTaskPv+0x11e>
		} else {
			// the buffer wrapped around
			data_str = std::string((char*) &smu_usart_rx_buffer[buffer_range.start],
 800b6e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b6e8:	4a82      	ldr	r2, [pc, #520]	; (800b8f4 <_Z14SmuUsartRxTaskPv+0x29c>)
 800b6ea:	189c      	adds	r4, r3, r2
								SMU_BUFFER_LENGTH - buffer_range.start);
 800b6ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
			data_str = std::string((char*) &smu_usart_rx_buffer[buffer_range.start],
 800b6f0:	f5c3 7500 	rsb	r5, r3, #512	; 0x200
 800b6f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f00f fb5b 	bl	801adb4 <_ZNSaIcEC1Ev>
 800b6fe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800b702:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800b706:	462a      	mov	r2, r5
 800b708:	4621      	mov	r1, r4
 800b70a:	f010 f8c7 	bl	801b89c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
								SMU_BUFFER_LENGTH - buffer_range.start);
 800b70e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800b712:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b716:	4611      	mov	r1, r2
 800b718:	4618      	mov	r0, r3
 800b71a:	f00f fe5b 	bl	801b3d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
			data_str = std::string((char*) &smu_usart_rx_buffer[buffer_range.start],
 800b71e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b722:	4618      	mov	r0, r3
 800b724:	f00f fe4a 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b728:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800b72c:	4618      	mov	r0, r3
 800b72e:	f00f fb45 	bl	801adbc <_ZNSaIcED1Ev>

			data_str += std::string((char*) &smu_usart_rx_buffer[0], buffer_range.end+1);
 800b732:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b736:	1c5c      	adds	r4, r3, #1
 800b738:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800b73c:	4618      	mov	r0, r3
 800b73e:	f00f fb39 	bl	801adb4 <_ZNSaIcEC1Ev>
 800b742:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800b746:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 800b74a:	4622      	mov	r2, r4
 800b74c:	4969      	ldr	r1, [pc, #420]	; (800b8f4 <_Z14SmuUsartRxTaskPv+0x29c>)
 800b74e:	f010 f8a5 	bl	801b89c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 800b752:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800b756:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b75a:	4611      	mov	r1, r2
 800b75c:	4618      	mov	r0, r3
 800b75e:	f00f fff7 	bl	801b750 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800b762:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800b766:	4618      	mov	r0, r3
 800b768:	f00f fe28 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b76c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800b770:	4618      	mov	r0, r3
 800b772:	f00f fb23 	bl	801adbc <_ZNSaIcED1Ev>
		}

		logger.debug(data_str);
 800b776:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800b77a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800b77e:	4611      	mov	r1, r2
 800b780:	4618      	mov	r0, r3
 800b782:	f010 f87b 	bl	801b87c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800b786:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800b78a:	4619      	mov	r1, r3
 800b78c:	485a      	ldr	r0, [pc, #360]	; (800b8f8 <_Z14SmuUsartRxTaskPv+0x2a0>)
 800b78e:	f7ff f8ed 	bl	800a96c <_ZN6Logger5debugENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b792:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800b796:	4618      	mov	r0, r3
 800b798:	f00f fe10 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		// find the position of the comma
		size_t comma_pos = data_str.find(',');
 800b79c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	212c      	movs	r1, #44	; 0x2c
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f010 f857 	bl	801b858 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 800b7aa:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

		if (comma_pos != std::string::npos) {
 800b7ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7b6:	f000 8081 	beq.w	800b8bc <_Z14SmuUsartRxTaskPv+0x264>
			// extract the current and voltage substrings
			std::string voltage = data_str.substr(0, comma_pos);
 800b7ba:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800b7be:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800b7c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f010 f874 	bl	801b8b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
			std::string current = data_str.substr(comma_pos + 1);
 800b7cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7d0:	1c5a      	adds	r2, r3, #1
 800b7d2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800b7d6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800b7da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7de:	f010 f869 	bl	801b8b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>

			if (voltage[0] == '+') {
 800b7e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f00f fe67 	bl	801b4bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	2b2b      	cmp	r3, #43	; 0x2b
 800b7f4:	bf0c      	ite	eq
 800b7f6:	2301      	moveq	r3, #1
 800b7f8:	2300      	movne	r3, #0
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d006      	beq.n	800b80e <_Z14SmuUsartRxTaskPv+0x1b6>
				voltage.erase(0,1);
 800b800:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b804:	2201      	movs	r2, #1
 800b806:	2100      	movs	r1, #0
 800b808:	4618      	mov	r0, r3
 800b80a:	f00f fe61 	bl	801b4d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>
			}

			if (current[0] == '+') {
 800b80e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b812:	2100      	movs	r1, #0
 800b814:	4618      	mov	r0, r3
 800b816:	f00f fe51 	bl	801b4bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800b81a:	4603      	mov	r3, r0
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	2b2b      	cmp	r3, #43	; 0x2b
 800b820:	bf0c      	ite	eq
 800b822:	2301      	moveq	r3, #1
 800b824:	2300      	movne	r3, #0
 800b826:	b2db      	uxtb	r3, r3
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d006      	beq.n	800b83a <_Z14SmuUsartRxTaskPv+0x1e2>
				current.erase(0,1);
 800b82c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b830:	2201      	movs	r2, #1
 800b832:	2100      	movs	r1, #0
 800b834:	4618      	mov	r0, r3
 800b836:	f00f fe4b 	bl	801b4d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>
			}

			// create a CurrentVoltagePair using the current and voltage values
			CurrentVoltagePair pair {current, voltage};
 800b83a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b83e:	f107 0308 	add.w	r3, r7, #8
 800b842:	4611      	mov	r1, r2
 800b844:	4618      	mov	r0, r3
 800b846:	f010 f819 	bl	801b87c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800b84a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b84e:	f107 0308 	add.w	r3, r7, #8
 800b852:	3318      	adds	r3, #24
 800b854:	4611      	mov	r1, r2
 800b856:	4618      	mov	r0, r3
 800b858:	f010 f810 	bl	801b87c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>

			// push the CurrentVoltagePair to your data structure
			data_packet.iv_curves[curr_cell_id].push_back(pair);
 800b85c:	4927      	ldr	r1, [pc, #156]	; (800b8fc <_Z14SmuUsartRxTaskPv+0x2a4>)
 800b85e:	4828      	ldr	r0, [pc, #160]	; (800b900 <_Z14SmuUsartRxTaskPv+0x2a8>)
 800b860:	f000 fac2 	bl	800bde8 <_ZNSt13unordered_mapIhSt6vectorI18CurrentVoltagePairSaIS1_EESt4hashIhESt8equal_toIhESaISt4pairIKhS3_EEEixERS9_>
 800b864:	4602      	mov	r2, r0
 800b866:	f107 0308 	add.w	r3, r7, #8
 800b86a:	4619      	mov	r1, r3
 800b86c:	4610      	mov	r0, r2
 800b86e:	f000 faca 	bl	800be06 <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE9push_backERKS0_>
			if (data_packet.iv_curves[curr_cell_id].size() == 141) {
 800b872:	4922      	ldr	r1, [pc, #136]	; (800b8fc <_Z14SmuUsartRxTaskPv+0x2a4>)
 800b874:	4822      	ldr	r0, [pc, #136]	; (800b900 <_Z14SmuUsartRxTaskPv+0x2a8>)
 800b876:	f000 fab7 	bl	800bde8 <_ZNSt13unordered_mapIhSt6vectorI18CurrentVoltagePairSaIS1_EESt4hashIhESt8equal_toIhESaISt4pairIKhS3_EEEixERS9_>
 800b87a:	4603      	mov	r3, r0
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fe f969 	bl	8009b54 <_ZNKSt6vectorI18CurrentVoltagePairSaIS0_EE4sizeEv>
 800b882:	4603      	mov	r3, r0
 800b884:	2b8d      	cmp	r3, #141	; 0x8d
 800b886:	bf0c      	ite	eq
 800b888:	2301      	moveq	r3, #1
 800b88a:	2300      	movne	r3, #0
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d004      	beq.n	800b89c <_Z14SmuUsartRxTaskPv+0x244>
				osSemaphoreRelease(smu_done_sem);
 800b892:	4b1c      	ldr	r3, [pc, #112]	; (800b904 <_Z14SmuUsartRxTaskPv+0x2ac>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4618      	mov	r0, r3
 800b898:	f00c f808 	bl	80178ac <osSemaphoreRelease>
			}
		} else {
 800b89c:	f107 0308 	add.w	r3, r7, #8
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7fe fdca 	bl	800a43a <_ZN18CurrentVoltagePairD1Ev>
 800b8a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f00f fd86 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b8b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f00f fd81 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b8ba:	e012      	b.n	800b8e2 <_Z14SmuUsartRxTaskPv+0x28a>
			logger.error("Invalid SMU data sent to rx thread: " + data_str);
 800b8bc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800b8c0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800b8c4:	4910      	ldr	r1, [pc, #64]	; (800b908 <_Z14SmuUsartRxTaskPv+0x2b0>)
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fc ff1b 	bl	8008702 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800b8cc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	4809      	ldr	r0, [pc, #36]	; (800b8f8 <_Z14SmuUsartRxTaskPv+0x2a0>)
 800b8d4:	f7ff f886 	bl	800a9e4 <_ZN6Logger5errorENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b8d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f00f fd6d 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
 800b8e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f00f fd68 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b8ec:	e6bc      	b.n	800b668 <_Z14SmuUsartRxTaskPv+0x10>
 800b8ee:	bf00      	nop
 800b8f0:	200005ec 	.word	0x200005ec
 800b8f4:	20000938 	.word	0x20000938
 800b8f8:	2000061c 	.word	0x2000061c
 800b8fc:	20000b38 	.word	0x20000b38
 800b900:	200006d8 	.word	0x200006d8
 800b904:	200005f8 	.word	0x200005f8
 800b908:	08020b40 	.word	0x08020b40

0800b90c <_Z7sd_testv>:
#endif

	osMutexRelease(data_packet_mutex);
}

void sd_test() {
 800b90c:	b5b0      	push	{r4, r5, r7, lr}
 800b90e:	b0ac      	sub	sp, #176	; 0xb0
 800b910:	af00      	add	r7, sp, #0
	FRESULT res;                                          /* FatFs function common result code */
	  uint32_t byteswritten, bytesread;                     /* File write/read counts */
	  uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 800b912:	4b49      	ldr	r3, [pc, #292]	; (800ba38 <_Z7sd_testv+0x12c>)
 800b914:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800b918:	461d      	mov	r5, r3
 800b91a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b91c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b91e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b922:	682b      	ldr	r3, [r5, #0]
 800b924:	7023      	strb	r3, [r4, #0]
	  uint8_t rtext[100];                                   /* File read buffer */

	  /*##-1- Link the micro SD disk I/O driver ##################################*/

	    /*##-2- Register the file system object to the FatFs module ##############*/
	    if(res = f_mount(&SDFatFs, (TCHAR const*)SDPath, 1); res != FR_OK)
 800b926:	2201      	movs	r2, #1
 800b928:	4944      	ldr	r1, [pc, #272]	; (800ba3c <_Z7sd_testv+0x130>)
 800b92a:	4845      	ldr	r0, [pc, #276]	; (800ba40 <_Z7sd_testv+0x134>)
 800b92c:	f00a fe3a 	bl	80165a4 <f_mount>
 800b930:	4603      	mov	r3, r0
 800b932:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800b936:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d002      	beq.n	800b944 <_Z7sd_testv+0x38>
	    {
	      /* FatFs Initialization Error */
	      Error_Handler();
 800b93e:	f000 f9ac 	bl	800bc9a <Error_Handler>
 800b942:	e074      	b.n	800ba2e <_Z7sd_testv+0x122>
//	        Error_Handler();
//	      }
//	      else
//	      {
	        /*##-4- Create and Open a new text file object with write access #####*/
	        if(res = f_open(&MyFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE); res != FR_OK)
 800b944:	220a      	movs	r2, #10
 800b946:	493f      	ldr	r1, [pc, #252]	; (800ba44 <_Z7sd_testv+0x138>)
 800b948:	483f      	ldr	r0, [pc, #252]	; (800ba48 <_Z7sd_testv+0x13c>)
 800b94a:	f00a fe8f 	bl	801666c <f_open>
 800b94e:	4603      	mov	r3, r0
 800b950:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800b954:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d002      	beq.n	800b962 <_Z7sd_testv+0x56>
	        {
	          /* 'STM32.TXT' file Open for write Error */
	          Error_Handler();
 800b95c:	f000 f99d 	bl	800bc9a <Error_Handler>
 800b960:	e065      	b.n	800ba2e <_Z7sd_testv+0x122>
	        }
	        else
	        {
	          /*##-5- Write data to the text file ################################*/
	          res = f_write(&MyFile, wtext, sizeof(wtext), reinterpret_cast<UINT*>(&byteswritten));
 800b962:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b966:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800b96a:	2221      	movs	r2, #33	; 0x21
 800b96c:	4836      	ldr	r0, [pc, #216]	; (800ba48 <_Z7sd_testv+0x13c>)
 800b96e:	f00b f9b0 	bl	8016cd2 <f_write>
 800b972:	4603      	mov	r3, r0
 800b974:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

	          if((byteswritten == 0) || (res != FR_OK))
 800b978:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d003      	beq.n	800b988 <_Z7sd_testv+0x7c>
 800b980:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b984:	2b00      	cmp	r3, #0
 800b986:	d002      	beq.n	800b98e <_Z7sd_testv+0x82>
	          {
	            /* 'STM32.TXT' file Write or EOF Error */
	            Error_Handler();
 800b988:	f000 f987 	bl	800bc9a <Error_Handler>
 800b98c:	e04f      	b.n	800ba2e <_Z7sd_testv+0x122>
	          }
	          else
	          {
	            /*##-6- Close the open text file #################################*/
	            f_close(&MyFile);
 800b98e:	482e      	ldr	r0, [pc, #184]	; (800ba48 <_Z7sd_testv+0x13c>)
 800b990:	f00b fbcc 	bl	801712c <f_close>

	            /*##-7- Open the text file object with read access ###############*/
	            if(res = f_open(&MyFile, "STM32.TXT", FA_READ); res != FR_OK)
 800b994:	2201      	movs	r2, #1
 800b996:	492b      	ldr	r1, [pc, #172]	; (800ba44 <_Z7sd_testv+0x138>)
 800b998:	482b      	ldr	r0, [pc, #172]	; (800ba48 <_Z7sd_testv+0x13c>)
 800b99a:	f00a fe67 	bl	801666c <f_open>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800b9a4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d002      	beq.n	800b9b2 <_Z7sd_testv+0xa6>
	            {
	              /* 'STM32.TXT' file Open for read Error */
	              Error_Handler();
 800b9ac:	f000 f975 	bl	800bc9a <Error_Handler>
 800b9b0:	e03d      	b.n	800ba2e <_Z7sd_testv+0x122>
	            }
	            else
	            {
	              /*##-8- Read data from the text file ###########################*/
	              res = f_read(&MyFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 800b9b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b9b6:	1d39      	adds	r1, r7, #4
 800b9b8:	2264      	movs	r2, #100	; 0x64
 800b9ba:	4823      	ldr	r0, [pc, #140]	; (800ba48 <_Z7sd_testv+0x13c>)
 800b9bc:	f00b f81b 	bl	80169f6 <f_read>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

	              if((bytesread == 0) || (res != FR_OK))
 800b9c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <_Z7sd_testv+0xca>
 800b9ce:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d002      	beq.n	800b9dc <_Z7sd_testv+0xd0>
	              {
	                /* 'STM32.TXT' file Read or EOF Error */
	                Error_Handler();
 800b9d6:	f000 f960 	bl	800bc9a <Error_Handler>
 800b9da:	e028      	b.n	800ba2e <_Z7sd_testv+0x122>
	              }
	              else
	              {
	                /*##-9- Close the open text file #############################*/
	                f_close(&MyFile);
 800b9dc:	481a      	ldr	r0, [pc, #104]	; (800ba48 <_Z7sd_testv+0x13c>)
 800b9de:	f00b fba5 	bl	801712c <f_close>

	                /*##-10- Compare read data with the expected data ############*/
	                if((bytesread != byteswritten))
 800b9e2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b9e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d002      	beq.n	800b9f4 <_Z7sd_testv+0xe8>
	                {
	                  /* Read data is different from the expected data */
	                  Error_Handler();
 800b9ee:	f000 f954 	bl	800bc9a <Error_Handler>
 800b9f2:	e01c      	b.n	800ba2e <_Z7sd_testv+0x122>
	                }
	                else
	                {
	                  /* Success of the demo: no error occurrence */
	                  logger.info("SD card success!");
 800b9f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f00f f9db 	bl	801adb4 <_ZNSaIcEC1Ev>
 800b9fe:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800ba02:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ba06:	4911      	ldr	r1, [pc, #68]	; (800ba4c <_Z7sd_testv+0x140>)
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7fc feba 	bl	8008782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800ba0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ba12:	4619      	mov	r1, r3
 800ba14:	480e      	ldr	r0, [pc, #56]	; (800ba50 <_Z7sd_testv+0x144>)
 800ba16:	f7fe ffc7 	bl	800a9a8 <_ZN6Logger4infoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800ba1a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f00f fccc 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ba24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f00f f9c7 	bl	801adbc <_ZNSaIcED1Ev>
	      }



	  /*##-11- Unlink the RAM disk I/O driver ####################################*/
	  FATFS_UnLinkDriver(SDPath);
 800ba2e:	4803      	ldr	r0, [pc, #12]	; (800ba3c <_Z7sd_testv+0x130>)
 800ba30:	f00b fc40 	bl	80172b4 <FATFS_UnLinkDriver>

	  /* Infinite Loop */
	  for( ;; )
 800ba34:	e7fe      	b.n	800ba34 <_Z7sd_testv+0x128>
 800ba36:	bf00      	nop
 800ba38:	08020c20 	.word	0x08020c20
 800ba3c:	20000fb4 	.word	0x20000fb4
 800ba40:	20000b3c 	.word	0x20000b3c
 800ba44:	08020c00 	.word	0x08020c00
 800ba48:	20000d70 	.word	0x20000d70
 800ba4c:	08020c0c 	.word	0x08020c0c
 800ba50:	2000061c 	.word	0x2000061c

0800ba54 <HAL_UART_RxCpltCallback>:
	  {
	  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
	if (huart == &esp.get_uart_handle()) {
 800ba5c:	487e      	ldr	r0, [pc, #504]	; (800bc58 <HAL_UART_RxCpltCallback+0x204>)
 800ba5e:	f7ff f88b 	bl	800ab78 <_ZN5ESP3215get_uart_handleEv>
 800ba62:	4602      	mov	r2, r0
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	4293      	cmp	r3, r2
 800ba68:	bf0c      	ite	eq
 800ba6a:	2301      	moveq	r3, #1
 800ba6c:	2300      	movne	r3, #0
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f000 8091 	beq.w	800bb98 <HAL_UART_RxCpltCallback+0x144>
		// short circuit to avoid unnecessary strncmp() calls
		if (esp_usart_rx_buffer[esp_usart_pos] == '\n') {
 800ba76:	4b79      	ldr	r3, [pc, #484]	; (800bc5c <HAL_UART_RxCpltCallback+0x208>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a79      	ldr	r2, [pc, #484]	; (800bc60 <HAL_UART_RxCpltCallback+0x20c>)
 800ba7c:	5cd3      	ldrb	r3, [r2, r3]
 800ba7e:	2b0a      	cmp	r3, #10
 800ba80:	d164      	bne.n	800bb4c <HAL_UART_RxCpltCallback+0xf8>
			if (esp_usart_pos >= 3 &&
 800ba82:	4b76      	ldr	r3, [pc, #472]	; (800bc5c <HAL_UART_RxCpltCallback+0x208>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	d927      	bls.n	800bada <HAL_UART_RxCpltCallback+0x86>
					!strncmp((char*) &esp_usart_rx_buffer[esp_usart_pos-3], ESP_OK, 4)) {
 800ba8a:	4b74      	ldr	r3, [pc, #464]	; (800bc5c <HAL_UART_RxCpltCallback+0x208>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	3b03      	subs	r3, #3
 800ba90:	4a73      	ldr	r2, [pc, #460]	; (800bc60 <HAL_UART_RxCpltCallback+0x20c>)
 800ba92:	4413      	add	r3, r2
 800ba94:	2204      	movs	r2, #4
 800ba96:	4973      	ldr	r1, [pc, #460]	; (800bc64 <HAL_UART_RxCpltCallback+0x210>)
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f012 ff6b 	bl	801e974 <strncmp>
 800ba9e:	4603      	mov	r3, r0
			if (esp_usart_pos >= 3 &&
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d11a      	bne.n	800bada <HAL_UART_RxCpltCallback+0x86>
				esp_buffer_range.end = esp_usart_pos;
 800baa4:	4b6d      	ldr	r3, [pc, #436]	; (800bc5c <HAL_UART_RxCpltCallback+0x208>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a6f      	ldr	r2, [pc, #444]	; (800bc68 <HAL_UART_RxCpltCallback+0x214>)
 800baaa:	6053      	str	r3, [r2, #4]
				osMessageQueuePut(esp_msg_rx_queue, &esp_buffer_range, 0U, 0U);
 800baac:	4b6f      	ldr	r3, [pc, #444]	; (800bc6c <HAL_UART_RxCpltCallback+0x218>)
 800baae:	6818      	ldr	r0, [r3, #0]
 800bab0:	2300      	movs	r3, #0
 800bab2:	2200      	movs	r2, #0
 800bab4:	496c      	ldr	r1, [pc, #432]	; (800bc68 <HAL_UART_RxCpltCallback+0x214>)
 800bab6:	f00b ffd5 	bl	8017a64 <osMessageQueuePut>

				if (esp_usart_pos == ESP_MAX_RESP_LENGTH-1) {
 800baba:	4b68      	ldr	r3, [pc, #416]	; (800bc5c <HAL_UART_RxCpltCallback+0x208>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d103      	bne.n	800bace <HAL_UART_RxCpltCallback+0x7a>
					esp_buffer_range.start = 0;
 800bac6:	4b68      	ldr	r3, [pc, #416]	; (800bc68 <HAL_UART_RxCpltCallback+0x214>)
 800bac8:	2200      	movs	r2, #0
 800baca:	601a      	str	r2, [r3, #0]
				if (esp_usart_pos == ESP_MAX_RESP_LENGTH-1) {
 800bacc:	e049      	b.n	800bb62 <HAL_UART_RxCpltCallback+0x10e>
				} else {
					esp_buffer_range.start = esp_usart_pos+1;
 800bace:	4b63      	ldr	r3, [pc, #396]	; (800bc5c <HAL_UART_RxCpltCallback+0x208>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	3301      	adds	r3, #1
 800bad4:	4a64      	ldr	r2, [pc, #400]	; (800bc68 <HAL_UART_RxCpltCallback+0x214>)
 800bad6:	6013      	str	r3, [r2, #0]
				if (esp_usart_pos == ESP_MAX_RESP_LENGTH-1) {
 800bad8:	e043      	b.n	800bb62 <HAL_UART_RxCpltCallback+0x10e>
				}
			} else {
				// circular buffer look back
				size_t idx = esp_usart_pos;
 800bada:	4b60      	ldr	r3, [pc, #384]	; (800bc5c <HAL_UART_RxCpltCallback+0x208>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	617b      	str	r3, [r7, #20]
				bool match = true;
 800bae0:	2301      	movs	r3, #1
 800bae2:	74fb      	strb	r3, [r7, #19]
				for (int i = 3; i >= 0; i--) {// ESP_OK length
 800bae4:	2303      	movs	r3, #3
 800bae6:	60fb      	str	r3, [r7, #12]
 800bae8:	e019      	b.n	800bb1e <HAL_UART_RxCpltCallback+0xca>
					if (ESP_OK[i] != (char) esp_usart_rx_buffer[idx]) {
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	4a5d      	ldr	r2, [pc, #372]	; (800bc64 <HAL_UART_RxCpltCallback+0x210>)
 800baee:	4413      	add	r3, r2
 800baf0:	781a      	ldrb	r2, [r3, #0]
 800baf2:	495b      	ldr	r1, [pc, #364]	; (800bc60 <HAL_UART_RxCpltCallback+0x20c>)
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	440b      	add	r3, r1
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d002      	beq.n	800bb04 <HAL_UART_RxCpltCallback+0xb0>
						match = false;
 800bafe:	2300      	movs	r3, #0
 800bb00:	74fb      	strb	r3, [r7, #19]
						break;
 800bb02:	e00f      	b.n	800bb24 <HAL_UART_RxCpltCallback+0xd0>
					}

					if (idx == 0) {
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d103      	bne.n	800bb12 <HAL_UART_RxCpltCallback+0xbe>
						idx = ESP_MAX_RESP_LENGTH-1;
 800bb0a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800bb0e:	617b      	str	r3, [r7, #20]
 800bb10:	e002      	b.n	800bb18 <HAL_UART_RxCpltCallback+0xc4>
					} else {
						--idx;
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	3b01      	subs	r3, #1
 800bb16:	617b      	str	r3, [r7, #20]
				for (int i = 3; i >= 0; i--) {// ESP_OK length
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	60fb      	str	r3, [r7, #12]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	dae2      	bge.n	800baea <HAL_UART_RxCpltCallback+0x96>
					}
				}

				if (match) {
 800bb24:	7cfb      	ldrb	r3, [r7, #19]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d01b      	beq.n	800bb62 <HAL_UART_RxCpltCallback+0x10e>
					esp_buffer_range.end = esp_usart_pos;
 800bb2a:	4b4c      	ldr	r3, [pc, #304]	; (800bc5c <HAL_UART_RxCpltCallback+0x208>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a4e      	ldr	r2, [pc, #312]	; (800bc68 <HAL_UART_RxCpltCallback+0x214>)
 800bb30:	6053      	str	r3, [r2, #4]
					osMessageQueuePut(esp_msg_rx_queue, &esp_buffer_range, 0U, 0U);
 800bb32:	4b4e      	ldr	r3, [pc, #312]	; (800bc6c <HAL_UART_RxCpltCallback+0x218>)
 800bb34:	6818      	ldr	r0, [r3, #0]
 800bb36:	2300      	movs	r3, #0
 800bb38:	2200      	movs	r2, #0
 800bb3a:	494b      	ldr	r1, [pc, #300]	; (800bc68 <HAL_UART_RxCpltCallback+0x214>)
 800bb3c:	f00b ff92 	bl	8017a64 <osMessageQueuePut>
					esp_buffer_range.start = esp_usart_pos+1;
 800bb40:	4b46      	ldr	r3, [pc, #280]	; (800bc5c <HAL_UART_RxCpltCallback+0x208>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	3301      	adds	r3, #1
 800bb46:	4a48      	ldr	r2, [pc, #288]	; (800bc68 <HAL_UART_RxCpltCallback+0x214>)
 800bb48:	6013      	str	r3, [r2, #0]
 800bb4a:	e00a      	b.n	800bb62 <HAL_UART_RxCpltCallback+0x10e>
				}
			}
		} else if (esp_usart_rx_buffer[esp_usart_pos] == '>') {
 800bb4c:	4b43      	ldr	r3, [pc, #268]	; (800bc5c <HAL_UART_RxCpltCallback+0x208>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a43      	ldr	r2, [pc, #268]	; (800bc60 <HAL_UART_RxCpltCallback+0x20c>)
 800bb52:	5cd3      	ldrb	r3, [r2, r3]
 800bb54:	2b3e      	cmp	r3, #62	; 0x3e
 800bb56:	d104      	bne.n	800bb62 <HAL_UART_RxCpltCallback+0x10e>
			osSemaphoreRelease(esp_data_ready_sem);
 800bb58:	4b45      	ldr	r3, [pc, #276]	; (800bc70 <HAL_UART_RxCpltCallback+0x21c>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f00b fea5 	bl	80178ac <osSemaphoreRelease>
		}

		if (esp_usart_pos == ESP_MAX_RESP_LENGTH-1) {
 800bb62:	4b3e      	ldr	r3, [pc, #248]	; (800bc5c <HAL_UART_RxCpltCallback+0x208>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d103      	bne.n	800bb76 <HAL_UART_RxCpltCallback+0x122>
			esp_usart_pos = 0;
 800bb6e:	4b3b      	ldr	r3, [pc, #236]	; (800bc5c <HAL_UART_RxCpltCallback+0x208>)
 800bb70:	2200      	movs	r2, #0
 800bb72:	601a      	str	r2, [r3, #0]
 800bb74:	e004      	b.n	800bb80 <HAL_UART_RxCpltCallback+0x12c>
		} else {
			++esp_usart_pos;
 800bb76:	4b39      	ldr	r3, [pc, #228]	; (800bc5c <HAL_UART_RxCpltCallback+0x208>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	4a37      	ldr	r2, [pc, #220]	; (800bc5c <HAL_UART_RxCpltCallback+0x208>)
 800bb7e:	6013      	str	r3, [r2, #0]
		}

		HAL_UART_Receive_IT(&esp.get_uart_handle(), &esp_usart_rx_buffer[esp_usart_pos], 1);
 800bb80:	4835      	ldr	r0, [pc, #212]	; (800bc58 <HAL_UART_RxCpltCallback+0x204>)
 800bb82:	f7fe fff9 	bl	800ab78 <_ZN5ESP3215get_uart_handleEv>
 800bb86:	4b35      	ldr	r3, [pc, #212]	; (800bc5c <HAL_UART_RxCpltCallback+0x208>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a35      	ldr	r2, [pc, #212]	; (800bc60 <HAL_UART_RxCpltCallback+0x20c>)
 800bb8c:	4413      	add	r3, r2
 800bb8e:	2201      	movs	r2, #1
 800bb90:	4619      	mov	r1, r3
 800bb92:	f006 fffd 	bl	8012b90 <HAL_UART_Receive_IT>
			++smu_usart_pos;
		}

		HAL_UART_Receive_IT(&smu.get_uart_handle(), &smu_usart_rx_buffer[smu_usart_pos], 1);
	}
}
 800bb96:	e05a      	b.n	800bc4e <HAL_UART_RxCpltCallback+0x1fa>
	} else if (huart == &smu.get_uart_handle()) {
 800bb98:	4836      	ldr	r0, [pc, #216]	; (800bc74 <HAL_UART_RxCpltCallback+0x220>)
 800bb9a:	f7ff f808 	bl	800abae <_ZN3SMU15get_uart_handleEv>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	4293      	cmp	r3, r2
 800bba4:	bf0c      	ite	eq
 800bba6:	2301      	moveq	r3, #1
 800bba8:	2300      	movne	r3, #0
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d04e      	beq.n	800bc4e <HAL_UART_RxCpltCallback+0x1fa>
		if (isValVoltage && smu_usart_rx_buffer[smu_usart_pos] == ',') {
 800bbb0:	4b31      	ldr	r3, [pc, #196]	; (800bc78 <HAL_UART_RxCpltCallback+0x224>)
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d009      	beq.n	800bbcc <HAL_UART_RxCpltCallback+0x178>
 800bbb8:	4b30      	ldr	r3, [pc, #192]	; (800bc7c <HAL_UART_RxCpltCallback+0x228>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a30      	ldr	r2, [pc, #192]	; (800bc80 <HAL_UART_RxCpltCallback+0x22c>)
 800bbbe:	5cd3      	ldrb	r3, [r2, r3]
 800bbc0:	2b2c      	cmp	r3, #44	; 0x2c
 800bbc2:	d103      	bne.n	800bbcc <HAL_UART_RxCpltCallback+0x178>
			isValVoltage = false;
 800bbc4:	4b2c      	ldr	r3, [pc, #176]	; (800bc78 <HAL_UART_RxCpltCallback+0x224>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	701a      	strb	r2, [r3, #0]
 800bbca:	e026      	b.n	800bc1a <HAL_UART_RxCpltCallback+0x1c6>
		} else if (!isValVoltage && (smu_usart_rx_buffer[smu_usart_pos] == ',' || smu_usart_rx_buffer[smu_usart_pos] == '\r')) {
 800bbcc:	4b2a      	ldr	r3, [pc, #168]	; (800bc78 <HAL_UART_RxCpltCallback+0x224>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	f083 0301 	eor.w	r3, r3, #1
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d01f      	beq.n	800bc1a <HAL_UART_RxCpltCallback+0x1c6>
 800bbda:	4b28      	ldr	r3, [pc, #160]	; (800bc7c <HAL_UART_RxCpltCallback+0x228>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a28      	ldr	r2, [pc, #160]	; (800bc80 <HAL_UART_RxCpltCallback+0x22c>)
 800bbe0:	5cd3      	ldrb	r3, [r2, r3]
 800bbe2:	2b2c      	cmp	r3, #44	; 0x2c
 800bbe4:	d005      	beq.n	800bbf2 <HAL_UART_RxCpltCallback+0x19e>
 800bbe6:	4b25      	ldr	r3, [pc, #148]	; (800bc7c <HAL_UART_RxCpltCallback+0x228>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a25      	ldr	r2, [pc, #148]	; (800bc80 <HAL_UART_RxCpltCallback+0x22c>)
 800bbec:	5cd3      	ldrb	r3, [r2, r3]
 800bbee:	2b0d      	cmp	r3, #13
 800bbf0:	d113      	bne.n	800bc1a <HAL_UART_RxCpltCallback+0x1c6>
			smu_buffer_range.end = smu_usart_pos-1; // don't include comma
 800bbf2:	4b22      	ldr	r3, [pc, #136]	; (800bc7c <HAL_UART_RxCpltCallback+0x228>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	4a22      	ldr	r2, [pc, #136]	; (800bc84 <HAL_UART_RxCpltCallback+0x230>)
 800bbfa:	6053      	str	r3, [r2, #4]
			osMessageQueuePut(smu_data_rx_queue, &smu_buffer_range, 0U, 0U);
 800bbfc:	4b22      	ldr	r3, [pc, #136]	; (800bc88 <HAL_UART_RxCpltCallback+0x234>)
 800bbfe:	6818      	ldr	r0, [r3, #0]
 800bc00:	2300      	movs	r3, #0
 800bc02:	2200      	movs	r2, #0
 800bc04:	491f      	ldr	r1, [pc, #124]	; (800bc84 <HAL_UART_RxCpltCallback+0x230>)
 800bc06:	f00b ff2d 	bl	8017a64 <osMessageQueuePut>
			isValVoltage = true;
 800bc0a:	4b1b      	ldr	r3, [pc, #108]	; (800bc78 <HAL_UART_RxCpltCallback+0x224>)
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	701a      	strb	r2, [r3, #0]
			smu_buffer_range.start = smu_usart_pos + 1;
 800bc10:	4b1a      	ldr	r3, [pc, #104]	; (800bc7c <HAL_UART_RxCpltCallback+0x228>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	3301      	adds	r3, #1
 800bc16:	4a1b      	ldr	r2, [pc, #108]	; (800bc84 <HAL_UART_RxCpltCallback+0x230>)
 800bc18:	6013      	str	r3, [r2, #0]
		if (smu_usart_pos == SMU_BUFFER_LENGTH - 1) {
 800bc1a:	4b18      	ldr	r3, [pc, #96]	; (800bc7c <HAL_UART_RxCpltCallback+0x228>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d103      	bne.n	800bc2e <HAL_UART_RxCpltCallback+0x1da>
			smu_usart_pos = 0;
 800bc26:	4b15      	ldr	r3, [pc, #84]	; (800bc7c <HAL_UART_RxCpltCallback+0x228>)
 800bc28:	2200      	movs	r2, #0
 800bc2a:	601a      	str	r2, [r3, #0]
 800bc2c:	e004      	b.n	800bc38 <HAL_UART_RxCpltCallback+0x1e4>
			++smu_usart_pos;
 800bc2e:	4b13      	ldr	r3, [pc, #76]	; (800bc7c <HAL_UART_RxCpltCallback+0x228>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	3301      	adds	r3, #1
 800bc34:	4a11      	ldr	r2, [pc, #68]	; (800bc7c <HAL_UART_RxCpltCallback+0x228>)
 800bc36:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&smu.get_uart_handle(), &smu_usart_rx_buffer[smu_usart_pos], 1);
 800bc38:	480e      	ldr	r0, [pc, #56]	; (800bc74 <HAL_UART_RxCpltCallback+0x220>)
 800bc3a:	f7fe ffb8 	bl	800abae <_ZN3SMU15get_uart_handleEv>
 800bc3e:	4b0f      	ldr	r3, [pc, #60]	; (800bc7c <HAL_UART_RxCpltCallback+0x228>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a0f      	ldr	r2, [pc, #60]	; (800bc80 <HAL_UART_RxCpltCallback+0x22c>)
 800bc44:	4413      	add	r3, r2
 800bc46:	2201      	movs	r2, #1
 800bc48:	4619      	mov	r1, r3
 800bc4a:	f006 ffa1 	bl	8012b90 <HAL_UART_Receive_IT>
}
 800bc4e:	bf00      	nop
 800bc50:	3718      	adds	r7, #24
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	2000067c 	.word	0x2000067c
 800bc5c:	20000730 	.word	0x20000730
 800bc60:	20000734 	.word	0x20000734
 800bc64:	08020a74 	.word	0x08020a74
 800bc68:	20000728 	.word	0x20000728
 800bc6c:	200005e8 	.word	0x200005e8
 800bc70:	200005f0 	.word	0x200005f0
 800bc74:	200006b0 	.word	0x200006b0
 800bc78:	20000004 	.word	0x20000004
 800bc7c:	20000934 	.word	0x20000934
 800bc80:	20000938 	.word	0x20000938
 800bc84:	20000fa0 	.word	0x20000fa0
 800bc88:	200005ec 	.word	0x200005ec

0800bc8c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b0a8      	sub	sp, #160	; 0xa0
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for (;;) {

	  sd_test();
 800bc94:	f7ff fe3a 	bl	800b90c <_Z7sd_testv>

	  while (1) {}
 800bc98:	e7fe      	b.n	800bc98 <_Z16StartDefaultTaskPv+0xc>

0800bc9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800bc9a:	b480      	push	{r7}
 800bc9c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800bc9e:	b672      	cpsid	i
}
 800bca0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800bca2:	e7fe      	b.n	800bca2 <Error_Handler+0x8>

0800bca4 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhhELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 f8f5 	bl	800be9c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEED1Ev>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3708      	adds	r7, #8
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f7ff ffed 	bl	800bca4 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhhELb0EEEELb1EED1Ev>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	4618      	mov	r0, r3
 800bcce:	3708      	adds	r7, #8
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSF_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
	__node_alloc_traits::_S_select_on_copy(__ht._M_node_allocator())),
 800bcde:	6838      	ldr	r0, [r7, #0]
 800bce0:	f000 f8d0 	bl	800be84 <_ZNKSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE17_M_node_allocatorEv>
 800bce4:	4602      	mov	r2, r0
      _M_rehash_policy(__ht._M_rehash_policy)
 800bce6:	f107 030c 	add.w	r3, r7, #12
 800bcea:	4611      	mov	r1, r2
 800bcec:	4618      	mov	r0, r3
 800bcee:	f000 f8bb 	bl	800be68 <_ZN9__gnu_cxx14__alloc_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEES6_E17_S_select_on_copyERKS7_>
 800bcf2:	f107 030c 	add.w	r3, r7, #12
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f8db 	bl	800beb4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEEC1IS6_EEOT_>
 800bcfe:	f107 030c 	add.w	r3, r7, #12
 800bd02:	4618      	mov	r0, r3
 800bd04:	f000 f8ca 	bl	800be9c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEED1Ev>
      _M_buckets(nullptr),
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	601a      	str	r2, [r3, #0]
      _M_bucket_count(__ht._M_bucket_count),
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	685a      	ldr	r2, [r3, #4]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	605a      	str	r2, [r3, #4]
      _M_rehash_policy(__ht._M_rehash_policy)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	3308      	adds	r3, #8
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7fd fdab 	bl	8009876 <_ZNSt8__detail15_Hash_node_baseC1Ev>
      _M_element_count(__ht._M_element_count),
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	68da      	ldr	r2, [r3, #12]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	60da      	str	r2, [r3, #12]
      _M_rehash_policy(__ht._M_rehash_policy)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	3310      	adds	r3, #16
 800bd2e:	3210      	adds	r2, #16
 800bd30:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd34:	e883 0003 	stmia.w	r3, {r0, r1}
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	619a      	str	r2, [r3, #24]
      __alloc_node_gen_t __alloc_node_gen(*this);
 800bd3e:	f107 0308 	add.w	r3, r7, #8
 800bd42:	6879      	ldr	r1, [r7, #4]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f000 f8c7 	bl	800bed8 <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEEC1ERNS_16_Hashtable_allocIS6_EE>
      _M_assign(__ht, __alloc_node_gen);
 800bd4a:	f107 0308 	add.w	r3, r7, #8
 800bd4e:	461a      	mov	r2, r3
 800bd50:	6839      	ldr	r1, [r7, #0]
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 f8cf 	bl	800bef6 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSF_NS4_10_AllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEEvOT_RKT0_>
    }
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b082      	sub	sp, #8
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
      clear();
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 f941 	bl	800bff2 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 f95e 	bl	800c032 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f7ff ffa0 	bl	800bcbc <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEED1Ev>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <_ZNSaISt4pairIKhhEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b082      	sub	sp, #8
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 f95f 	bl	800c052 <_ZN9__gnu_cxx13new_allocatorISt4pairIKhhEEC1Ev>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4618      	mov	r0, r3
 800bd98:	3708      	adds	r7, #8
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <_ZNSaISt4pairIKhhEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b082      	sub	sp, #8
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 f95e 	bl	800c068 <_ZN9__gnu_cxx13new_allocatorISt4pairIKhhEED1Ev>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3708      	adds	r7, #8
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <_ZNSt13unordered_mapIhhSt4hashIhESt8equal_toIhESaISt4pairIKhhEEEC1ESt16initializer_listIS6_EjRKS1_RKS3_RKS7_>:
       *  @param  __a  An allocator object.
       *
       *  Create an %unordered_map consisting of copies of the elements in the
       *  list. This is linear in N (where N is @a __l.size()).
       */
      unordered_map(initializer_list<value_type> __l,
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b088      	sub	sp, #32
 800bdba:	af04      	add	r7, sp, #16
 800bdbc:	60f8      	str	r0, [r7, #12]
 800bdbe:	1d38      	adds	r0, r7, #4
 800bdc0:	e880 0006 	stmia.w	r0, {r1, r2}
 800bdc4:	603b      	str	r3, [r7, #0]
		    size_type __n = 0,
		    const hasher& __hf = hasher(),
		    const key_equal& __eql = key_equal(),
		    const allocator_type& __a = allocator_type())
      : _M_h(__l, __n, __hf, __eql, __a)
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	6a3b      	ldr	r3, [r7, #32]
 800bdca:	9302      	str	r3, [sp, #8]
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	9301      	str	r3, [sp, #4]
 800bdd0:	69bb      	ldr	r3, [r7, #24]
 800bdd2:	9300      	str	r3, [sp, #0]
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	1d3a      	adds	r2, r7, #4
 800bdd8:	ca06      	ldmia	r2, {r1, r2}
 800bdda:	f000 f950 	bl	800c07e <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listIS2_EjRKS9_RKS7_RKS3_>
      { }
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <_ZNSt13unordered_mapIhSt6vectorI18CurrentVoltagePairSaIS1_EESt4hashIhESt8equal_toIhESaISt4pairIKhS3_EEEixERS9_>:
       *  is then returned.
       *
       *  Lookup requires constant time.
       */
      mapped_type&
      operator[](const key_type& __k)
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
      { return _M_h[__k]; }
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6839      	ldr	r1, [r7, #0]
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f000 f966 	bl	800c0c8 <_ZNSt8__detail9_Map_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEESaIS7_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	4618      	mov	r0, r3
 800be00:	3708      	adds	r7, #8
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800be06:	b580      	push	{r7, lr}
 800be08:	b082      	sub	sp, #8
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
 800be0e:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	685a      	ldr	r2, [r3, #4]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	689b      	ldr	r3, [r3, #8]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d00d      	beq.n	800be38 <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	683a      	ldr	r2, [r7, #0]
 800be24:	4619      	mov	r1, r3
 800be26:	f000 f9a5 	bl	800c174 <_ZNSt16allocator_traitsISaI18CurrentVoltagePairEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800be36:	e008      	b.n	800be4a <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 f9ae 	bl	800c19a <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE3endEv>
 800be3e:	4603      	mov	r3, r0
 800be40:	683a      	ldr	r2, [r7, #0]
 800be42:	4619      	mov	r1, r3
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 f9b9 	bl	800c1bc <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 800be4a:	bf00      	nop
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800be52:	b480      	push	{r7}
 800be54:	b083      	sub	sp, #12
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4618      	mov	r0, r3
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <_ZN9__gnu_cxx14__alloc_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEES6_E17_S_select_on_copyERKS7_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6839      	ldr	r1, [r7, #0]
 800be76:	4618      	mov	r0, r3
 800be78:	f000 fa41 	bl	800c2fe <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEE37select_on_container_copy_constructionERKS6_>
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <_ZNKSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator() const
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_cget(); }
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fa43 	bl	800c318 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhhELb0EEEELb1EE7_M_cgetEv>
 800be92:	4603      	mov	r3, r0
 800be94:	4618      	mov	r0, r3
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEED1Ev>:
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 fa42 	bl	800c32e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEED1Ev>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4618      	mov	r0, r3
 800beae:	3708      	adds	r7, #8
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEEC1IS6_EEOT_>:
	_Hashtable_alloc(_Alloc&& __a)
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	6039      	str	r1, [r7, #0]
	: __ebo_node_alloc(std::forward<_Alloc>(__a))
 800bebe:	6838      	ldr	r0, [r7, #0]
 800bec0:	f000 fa40 	bl	800c344 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800bec4:	4603      	mov	r3, r0
 800bec6:	4619      	mov	r1, r3
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 fa46 	bl	800c35a <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhhELb0EEEELb1EEC1IS6_EEOT_>
	{ }
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4618      	mov	r0, r3
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEEC1ERNS_16_Hashtable_allocIS6_EE>:
      _AllocNode(__hashtable_alloc& __h)
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
      : _M_h(__h) { }
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	683a      	ldr	r2, [r7, #0]
 800bee6:	601a      	str	r2, [r3, #0]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4618      	mov	r0, r3
 800beec:	370c      	adds	r7, #12
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr

0800bef6 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSF_NS4_10_AllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEEvOT_RKT0_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800bef6:	b580      	push	{r7, lr}
 800bef8:	b08a      	sub	sp, #40	; 0x28
 800befa:	af00      	add	r7, sp, #0
 800befc:	60f8      	str	r0, [r7, #12]
 800befe:	60b9      	str	r1, [r7, #8]
 800bf00:	607a      	str	r2, [r7, #4]
	__buckets_ptr __buckets = nullptr;
 800bf02:	2300      	movs	r3, #0
 800bf04:	61fb      	str	r3, [r7, #28]
	if (!_M_buckets)
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d109      	bne.n	800bf22 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSF_NS4_10_AllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEEvOT_RKT0_+0x2c>
	  _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	4619      	mov	r1, r3
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f000 fa32 	bl	800c37e <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 800bf1a:	61f8      	str	r0, [r7, #28]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	69fa      	ldr	r2, [r7, #28]
 800bf20:	601a      	str	r2, [r3, #0]
	    if (!__ht._M_before_begin._M_nxt)
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d05f      	beq.n	800bfea <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSF_NS4_10_AllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEEvOT_RKT0_+0xf4>
	    __node_ptr __ht_n = __ht._M_begin();
 800bf2a:	68b8      	ldr	r0, [r7, #8]
 800bf2c:	f000 fa44 	bl	800c3b8 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 800bf30:	6278      	str	r0, [r7, #36]	; 0x24
	      = __node_gen(__fwd_value_for<_Ht>(__ht_n->_M_v()));
 800bf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf34:	3304      	adds	r3, #4
 800bf36:	4618      	mov	r0, r3
 800bf38:	f000 f9ca 	bl	800c2d0 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhhEE4_M_vEv>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f000 fa46 	bl	800c3d0 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE15__fwd_value_forIRKSF_EENSt11conditionalIXsrSt19is_lvalue_referenceIT_E5valueERKS2_OS2_E4typeERS2_>
 800bf44:	4603      	mov	r3, r0
 800bf46:	4619      	mov	r1, r3
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 fa4d 	bl	800c3e8 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEEclIRKS4_EEPS5_OT_>
 800bf4e:	61b8      	str	r0, [r7, #24]
	    this->_M_copy_code(*__this_n, *__ht_n);
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	1d19      	adds	r1, r3, #4
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	3304      	adds	r3, #4
 800bf58:	461a      	mov	r2, r3
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	f000 fa58 	bl	800c410 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhhENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_copy_codeERNS_21_Hash_node_code_cacheILb0EEERKSB_>
	    _M_update_bbegin(__this_n);
 800bf60:	69b9      	ldr	r1, [r7, #24]
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f000 fa60 	bl	800c428 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEPNS4_10_Hash_nodeIS2_Lb0EEE>
	    __node_ptr __prev_n = __this_n;
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	623b      	str	r3, [r7, #32]
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
 800bf6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf6e:	f000 fa6a 	bl	800c446 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhhELb0EE7_M_nextEv>
 800bf72:	6278      	str	r0, [r7, #36]	; 0x24
 800bf74:	e035      	b.n	800bfe2 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSF_NS4_10_AllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEEvOT_RKT0_+0xec>
		__this_n = __node_gen(__fwd_value_for<_Ht>(__ht_n->_M_v()));
 800bf76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf78:	3304      	adds	r3, #4
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f000 f9a8 	bl	800c2d0 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhhEE4_M_vEv>
 800bf80:	4603      	mov	r3, r0
 800bf82:	4618      	mov	r0, r3
 800bf84:	f000 fa24 	bl	800c3d0 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE15__fwd_value_forIRKSF_EENSt11conditionalIXsrSt19is_lvalue_referenceIT_E5valueERKS2_OS2_E4typeERS2_>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 fa2b 	bl	800c3e8 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEEclIRKS4_EEPS5_OT_>
 800bf92:	61b8      	str	r0, [r7, #24]
		__prev_n->_M_nxt = __this_n;
 800bf94:	6a3b      	ldr	r3, [r7, #32]
 800bf96:	69ba      	ldr	r2, [r7, #24]
 800bf98:	601a      	str	r2, [r3, #0]
		this->_M_copy_code(*__this_n, *__ht_n);
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	1d19      	adds	r1, r3, #4
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f000 fa33 	bl	800c410 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhhENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_copy_codeERNS_21_Hash_node_code_cacheILb0EEERKSB_>
		size_type __bkt = _M_bucket_index(*__this_n);
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	3304      	adds	r3, #4
 800bfae:	4619      	mov	r1, r3
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	f000 fa54 	bl	800c45e <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS4_16_Hash_node_valueIS2_Lb0EEE>
 800bfb6:	6178      	str	r0, [r7, #20]
		if (!_M_buckets[__bkt])
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4413      	add	r3, r2
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d106      	bne.n	800bfd6 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSF_NS4_10_AllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEEvOT_RKT0_+0xe0>
		  _M_buckets[__bkt] = __prev_n;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681a      	ldr	r2, [r3, #0]
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	4413      	add	r3, r2
 800bfd2:	6a3a      	ldr	r2, [r7, #32]
 800bfd4:	601a      	str	r2, [r3, #0]
		__prev_n = __this_n;
 800bfd6:	69bb      	ldr	r3, [r7, #24]
 800bfd8:	623b      	str	r3, [r7, #32]
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
 800bfda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfdc:	f000 fa33 	bl	800c446 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhhELb0EE7_M_nextEv>
 800bfe0:	6278      	str	r0, [r7, #36]	; 0x24
 800bfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1c6      	bne.n	800bf76 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSF_NS4_10_AllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEEvOT_RKT0_+0x80>
 800bfe8:	e000      	b.n	800bfec <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSF_NS4_10_AllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEEvOT_RKT0_+0xf6>
	      return;
 800bfea:	bf00      	nop
      }
 800bfec:	3728      	adds	r7, #40	; 0x28
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b082      	sub	sp, #8
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
      this->_M_deallocate_nodes(_M_begin());
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 f9dc 	bl	800c3b8 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 800c000:	4603      	mov	r3, r0
 800c002:	4619      	mov	r1, r3
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fa3b 	bl	800c480 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE19_M_deallocate_nodesEPS5_>
      __builtin_memset(_M_buckets, 0,
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	4610      	mov	r0, r2
 800c016:	461a      	mov	r2, r3
 800c018:	2100      	movs	r1, #0
 800c01a:	f012 fce9 	bl	801e9f0 <memset>
      _M_element_count = 0;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	609a      	str	r2, [r3, #8]
    }
 800c02a:	bf00      	nop
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 800c032:	b580      	push	{r7, lr}
 800c034:	b082      	sub	sp, #8
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6819      	ldr	r1, [r3, #0]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	461a      	mov	r2, r3
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 fa33 	bl	800c4b0 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS4_15_Hash_node_baseEj>
 800c04a:	bf00      	nop
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <_ZN9__gnu_cxx13new_allocatorISt4pairIKhhEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c052:	b480      	push	{r7}
 800c054:	b083      	sub	sp, #12
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	4618      	mov	r0, r3
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <_ZN9__gnu_cxx13new_allocatorISt4pairIKhhEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	4618      	mov	r0, r3
 800c074:	370c      	adds	r7, #12
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr

0800c07e <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listIS2_EjRKS9_RKS7_RKS3_>:
      _Hashtable(initializer_list<value_type> __l,
 800c07e:	b5b0      	push	{r4, r5, r7, lr}
 800c080:	b088      	sub	sp, #32
 800c082:	af04      	add	r7, sp, #16
 800c084:	60f8      	str	r0, [r7, #12]
 800c086:	1d38      	adds	r0, r7, #4
 800c088:	e880 0006 	stmia.w	r0, {r1, r2}
 800c08c:	603b      	str	r3, [r7, #0]
		   __hf, __eql, __a, __unique_keys{})
 800c08e:	1d3b      	adds	r3, r7, #4
 800c090:	4618      	mov	r0, r3
 800c092:	f000 fa24 	bl	800c4de <_ZNKSt16initializer_listISt4pairIKhhEE5beginEv>
 800c096:	4604      	mov	r4, r0
 800c098:	1d3b      	adds	r3, r7, #4
 800c09a:	4618      	mov	r0, r3
 800c09c:	f000 fa2b 	bl	800c4f6 <_ZNKSt16initializer_listISt4pairIKhhEE3endEv>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	f88d 500c 	strb.w	r5, [sp, #12]
 800c0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a8:	9302      	str	r3, [sp, #8]
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ac:	9301      	str	r3, [sp, #4]
 800c0ae:	6a3b      	ldr	r3, [r7, #32]
 800c0b0:	9300      	str	r3, [sp, #0]
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	4621      	mov	r1, r4
 800c0b6:	68f8      	ldr	r0, [r7, #12]
 800c0b8:	f000 fa2f 	bl	800c51a <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS2_EET_SJ_jRKS9_RKS7_RKS3_St17integral_constantIbLb1EE>
      { }
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c0c8 <_ZNSt8__detail9_Map_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEESaIS7_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_>:
    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
 800c0c8:	b590      	push	{r4, r7, lr}
 800c0ca:	b08f      	sub	sp, #60	; 0x3c
 800c0cc:	af02      	add	r7, sp, #8
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
      __hashtable* __h = static_cast<__hashtable*>(this);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      __hash_code __code = __h->_M_hash_code(__k);
 800c0d6:	6839      	ldr	r1, [r7, #0]
 800c0d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0da:	f7fe fb03 	bl	800a6e4 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 800c0de:	62b8      	str	r0, [r7, #40]	; 0x28
      std::size_t __bkt = __h->_M_bucket_index(__code);
 800c0e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0e4:	f000 fa3c 	bl	800c560 <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 800c0e8:	6278      	str	r0, [r7, #36]	; 0x24
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
 800c0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ec:	683a      	ldr	r2, [r7, #0]
 800c0ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0f2:	f000 fa46 	bl	800c582 <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>
 800c0f6:	6238      	str	r0, [r7, #32]
 800c0f8:	6a3b      	ldr	r3, [r7, #32]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d007      	beq.n	800c10e <_ZNSt8__detail9_Map_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEESaIS7_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_+0x46>
	return __node->_M_v().second;
 800c0fe:	6a3b      	ldr	r3, [r7, #32]
 800c100:	3304      	adds	r3, #4
 800c102:	4618      	mov	r0, r3
 800c104:	f000 fa56 	bl	800c5b4 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE4_M_vEv>
 800c108:	4603      	mov	r3, r0
 800c10a:	1d1c      	adds	r4, r3, #4
 800c10c:	e02a      	b.n	800c164 <_ZNSt8__detail9_Map_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEESaIS7_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_+0x9c>
      typename __hashtable::_Scoped_node __node {
 800c10e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	std::tuple<const key_type&>(__k),
 800c110:	f107 0318 	add.w	r3, r7, #24
 800c114:	6839      	ldr	r1, [r7, #0]
 800c116:	4618      	mov	r0, r3
 800c118:	f000 fa58 	bl	800c5cc <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>
      typename __hashtable::_Scoped_node __node {
 800c11c:	f107 0218 	add.w	r2, r7, #24
 800c120:	f107 0010 	add.w	r0, r7, #16
 800c124:	f107 031c 	add.w	r3, r7, #28
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	4613      	mov	r3, r2
 800c12c:	4a10      	ldr	r2, [pc, #64]	; (800c170 <_ZNSt8__detail9_Map_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEESaIS7_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_+0xa8>)
 800c12e:	4621      	mov	r1, r4
 800c130:	f000 fa5b 	bl	800c5ea <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS1_EESP_IJEEEEEPNS8_16_Hashtable_allocISaINS8_10_Hash_nodeIS6_Lb0EEEEEEDpOT_>
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	2201      	movs	r2, #1
 800c138:	9200      	str	r2, [sp, #0]
 800c13a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c13c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c13e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c140:	f000 fa8c 	bl	800c65c <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS8_10_Hash_nodeIS6_Lb0EEEj>
 800c144:	4603      	mov	r3, r0
 800c146:	60fb      	str	r3, [r7, #12]
      __node._M_node = nullptr;
 800c148:	2300      	movs	r3, #0
 800c14a:	617b      	str	r3, [r7, #20]
      return __pos->second;
 800c14c:	f107 030c 	add.w	r3, r7, #12
 800c150:	4618      	mov	r0, r3
 800c152:	f7fd fcef 	bl	8009b34 <_ZNKSt8__detail14_Node_iteratorISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0ELb0EEptEv>
 800c156:	4603      	mov	r3, r0
 800c158:	1d1c      	adds	r4, r3, #4
    }
 800c15a:	f107 0310 	add.w	r3, r7, #16
 800c15e:	4618      	mov	r0, r3
 800c160:	f000 fa67 	bl	800c632 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 800c164:	4623      	mov	r3, r4
 800c166:	4618      	mov	r0, r3
 800c168:	3734      	adds	r7, #52	; 0x34
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd90      	pop	{r4, r7, pc}
 800c16e:	bf00      	nop
 800c170:	0802162c 	.word	0x0802162c

0800c174 <_ZNSt16allocator_traitsISaI18CurrentVoltagePairEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	60b9      	str	r1, [r7, #8]
 800c17e:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fab4 	bl	800c6ee <_ZSt7forwardIRK18CurrentVoltagePairEOT_RNSt16remove_referenceIS3_E4typeE>
 800c186:	4603      	mov	r3, r0
 800c188:	461a      	mov	r2, r3
 800c18a:	68b9      	ldr	r1, [r7, #8]
 800c18c:	68f8      	ldr	r0, [r7, #12]
 800c18e:	f000 fad2 	bl	800c736 <_ZN9__gnu_cxx13new_allocatorI18CurrentVoltagePairE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 800c192:	bf00      	nop
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b084      	sub	sp, #16
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	1d1a      	adds	r2, r3, #4
 800c1a6:	f107 030c 	add.w	r3, r7, #12
 800c1aa:	4611      	mov	r1, r2
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f000 fada 	bl	800c766 <_ZN9__gnu_cxx17__normal_iteratorIP18CurrentVoltagePairSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800c1bc:	b5b0      	push	{r4, r5, r7, lr}
 800c1be:	b08c      	sub	sp, #48	; 0x30
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800c1c8:	4a3f      	ldr	r2, [pc, #252]	; (800c2c8 <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x10c>)
 800c1ca:	2101      	movs	r1, #1
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f000 fada 	bl	800c786 <_ZNKSt6vectorI18CurrentVoltagePairSaIS0_EE12_M_check_lenEjPKc>
 800c1d2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	f000 fb17 	bl	800c814 <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE5beginEv>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	617b      	str	r3, [r7, #20]
 800c1ea:	f107 0214 	add.w	r2, r7, #20
 800c1ee:	f107 0308 	add.w	r3, r7, #8
 800c1f2:	4611      	mov	r1, r2
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f000 fb1d 	bl	800c834 <_ZN9__gnu_cxxmiIP18CurrentVoltagePairSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c202:	4618      	mov	r0, r3
 800c204:	f000 fb30 	bl	800c868 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE11_M_allocateEj>
 800c208:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800c20e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800c210:	6a3a      	ldr	r2, [r7, #32]
 800c212:	4613      	mov	r3, r2
 800c214:	005b      	lsls	r3, r3, #1
 800c216:	4413      	add	r3, r2
 800c218:	011b      	lsls	r3, r3, #4
 800c21a:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	189d      	adds	r5, r3, r2
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 fa64 	bl	800c6ee <_ZSt7forwardIRK18CurrentVoltagePairEOT_RNSt16remove_referenceIS3_E4typeE>
 800c226:	4603      	mov	r3, r0
 800c228:	461a      	mov	r2, r3
 800c22a:	4629      	mov	r1, r5
 800c22c:	4620      	mov	r0, r4
 800c22e:	f7ff ffa1 	bl	800c174 <_ZNSt16allocator_traitsISaI18CurrentVoltagePairEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800c232:	2300      	movs	r3, #0
 800c234:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c236:	f107 0308 	add.w	r3, r7, #8
 800c23a:	4618      	mov	r0, r3
 800c23c:	f000 fb3c 	bl	800c8b8 <_ZNK9__gnu_cxx17__normal_iteratorIP18CurrentVoltagePairSt6vectorIS1_SaIS1_EEE4baseEv>
 800c240:	4603      	mov	r3, r0
 800c242:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	4618      	mov	r0, r3
 800c248:	f7fd fda4 	bl	8009d94 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE19_M_get_Tp_allocatorEv>
 800c24c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c24e:	69fa      	ldr	r2, [r7, #28]
 800c250:	4621      	mov	r1, r4
 800c252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c254:	f000 fb1c 	bl	800c890 <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 800c258:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	3330      	adds	r3, #48	; 0x30
 800c25e:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c260:	f107 0308 	add.w	r3, r7, #8
 800c264:	4618      	mov	r0, r3
 800c266:	f000 fb27 	bl	800c8b8 <_ZNK9__gnu_cxx17__normal_iteratorIP18CurrentVoltagePairSt6vectorIS1_SaIS1_EEE4baseEv>
 800c26a:	4603      	mov	r3, r0
 800c26c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	4618      	mov	r0, r3
 800c272:	f7fd fd8f 	bl	8009d94 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE19_M_get_Tp_allocatorEv>
 800c276:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c278:	69ba      	ldr	r2, [r7, #24]
 800c27a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c27c:	4620      	mov	r0, r4
 800c27e:	f000 fb07 	bl	800c890 <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 800c282:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800c284:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	689a      	ldr	r2, [r3, #8]
 800c28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28c:	1ad3      	subs	r3, r2, r3
 800c28e:	111b      	asrs	r3, r3, #4
 800c290:	4a0e      	ldr	r2, [pc, #56]	; (800c2cc <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x110>)
 800c292:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800c296:	461a      	mov	r2, r3
 800c298:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c29a:	f7fd fd68 	bl	8009d6e <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	69fa      	ldr	r2, [r7, #28]
 800c2a2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	69ba      	ldr	r2, [r7, #24]
 800c2a8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800c2aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	005b      	lsls	r3, r3, #1
 800c2b0:	4413      	add	r3, r2
 800c2b2:	011b      	lsls	r3, r3, #4
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	441a      	add	r2, r3
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	609a      	str	r2, [r3, #8]
    }
 800c2be:	bf00      	nop
 800c2c0:	3730      	adds	r7, #48	; 0x30
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bdb0      	pop	{r4, r5, r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	08020c70 	.word	0x08020c70
 800c2cc:	aaaaaaab 	.word	0xaaaaaaab

0800c2d0 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhhEE4_M_vEv>:
      _M_v() noexcept
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 fb14 	bl	800c906 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhhEE9_M_valptrEv>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3708      	adds	r7, #8
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <_ZSt4moveIR18CurrentVoltagePairEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	370c      	adds	r7, #12
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr

0800c2fe <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEE37select_on_container_copy_constructionERKS6_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b082      	sub	sp, #8
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
 800c306:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800c308:	6839      	ldr	r1, [r7, #0]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 fb26 	bl	800c95c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEC1ERKS5_>
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhhELb0EEEELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	4618      	mov	r0, r3
 800c324:	370c      	adds	r7, #12
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr

0800c32e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEED1Ev>:
 800c32e:	b480      	push	{r7}
 800c330:	b083      	sub	sp, #12
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4618      	mov	r0, r3
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4618      	mov	r0, r3
 800c350:	370c      	adds	r7, #12
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr

0800c35a <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhhELb0EEEELb1EEC1IS6_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b082      	sub	sp, #8
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
 800c362:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 800c364:	6838      	ldr	r0, [r7, #0]
 800c366:	f7ff ffed 	bl	800c344 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800c36a:	4603      	mov	r3, r0
 800c36c:	4619      	mov	r1, r3
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 faf4 	bl	800c95c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEC1ERKS5_>
	{ }
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	4618      	mov	r0, r3
 800c378:	3708      	adds	r7, #8
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 800c37e:	b580      	push	{r7, lr}
 800c380:	b082      	sub	sp, #8
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	bf0c      	ite	eq
 800c38e:	2301      	moveq	r3, #1
 800c390:	2300      	movne	r3, #0
 800c392:	b2db      	uxtb	r3, r3
 800c394:	2b00      	cmp	r3, #0
 800c396:	d005      	beq.n	800c3a4 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	3318      	adds	r3, #24
 800c3a2:	e005      	b.n	800c3b0 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 800c3a4:	6839      	ldr	r1, [r7, #0]
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 fae6 	bl	800c978 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE19_M_allocate_bucketsEj>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	bf00      	nop
      }
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE15__fwd_value_forIRKSF_EENSt11conditionalIXsrSt19is_lvalue_referenceIT_E5valueERKS2_OS2_E4typeERS2_>:
	__fwd_value_for(value_type& __val) noexcept
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
	{ return std::move(__val); }
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 fafa 	bl	800c9d2 <_ZSt4moveIRSt4pairIKhhEEONSt16remove_referenceIT_E4typeEOS5_>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3708      	adds	r7, #8
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEEclIRKS4_EEPS5_OT_>:
	operator()(_Arg&& __arg) const
 800c3e8:	b590      	push	{r4, r7, lr}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
	{ return _M_h._M_allocate_node(std::forward<_Arg>(__arg)); }
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681c      	ldr	r4, [r3, #0]
 800c3f6:	6838      	ldr	r0, [r7, #0]
 800c3f8:	f000 faf6 	bl	800c9e8 <_ZSt7forwardIRKSt4pairIKhhEEOT_RNSt16remove_referenceIS5_E4typeE>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	4619      	mov	r1, r3
 800c400:	4620      	mov	r0, r4
 800c402:	f000 fb09 	bl	800ca18 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE16_M_allocate_nodeIJRKS4_EEEPS5_DpOT_>
 800c406:	4603      	mov	r3, r0
 800c408:	4618      	mov	r0, r3
 800c40a:	370c      	adds	r7, #12
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd90      	pop	{r4, r7, pc}

0800c410 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhhENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_copy_codeERNS_21_Hash_node_code_cacheILb0EEERKSB_>:
      _M_copy_code(_Hash_node_code_cache<false>&,
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
      { }
 800c41c:	bf00      	nop
 800c41e:	3714      	adds	r7, #20
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEPNS4_10_Hash_nodeIS2_Lb0EEE>:
      _M_update_bbegin(__node_ptr __n)
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
	_M_before_begin._M_nxt = __n;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	683a      	ldr	r2, [r7, #0]
 800c436:	609a      	str	r2, [r3, #8]
	_M_update_bbegin();
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 fb20 	bl	800ca7e <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEv>
      }
 800c43e:	bf00      	nop
 800c440:	3708      	adds	r7, #8
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhhELb0EE7_M_nextEv>:
      _M_next() const noexcept
 800c446:	b480      	push	{r7}
 800c448:	b083      	sub	sp, #12
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4618      	mov	r0, r3
 800c454:	370c      	adds	r7, #12
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr

0800c45e <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS4_16_Hash_node_valueIS2_Lb0EEE>:
      _M_bucket_index(const __node_value_type& __n) const noexcept
 800c45e:	b580      	push	{r7, lr}
 800c460:	b082      	sub	sp, #8
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	461a      	mov	r2, r3
 800c46e:	6839      	ldr	r1, [r7, #0]
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 fb29 	bl	800cac8 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhhENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS3_Lb0EEEj>
 800c476:	4603      	mov	r3, r0
 800c478:	4618      	mov	r0, r3
 800c47a:	3708      	adds	r7, #8
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE19_M_deallocate_nodesEPS5_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
      while (__n)
 800c48a:	e009      	b.n	800c4a0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE19_M_deallocate_nodesEPS5_+0x20>
	  __node_ptr __tmp = __n;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 800c490:	6838      	ldr	r0, [r7, #0]
 800c492:	f7ff ffd8 	bl	800c446 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhhELb0EE7_M_nextEv>
 800c496:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 800c498:	68f9      	ldr	r1, [r7, #12]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 fb36 	bl	800cb0c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE18_M_deallocate_nodeEPS5_>
      while (__n)
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1f2      	bne.n	800c48c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE19_M_deallocate_nodesEPS5_+0xc>
    }
 800c4a6:	bf00      	nop
 800c4a8:	bf00      	nop
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS4_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 800c4bc:	68b9      	ldr	r1, [r7, #8]
 800c4be:	68f8      	ldr	r0, [r7, #12]
 800c4c0:	f000 fb3f 	bl	800cb42 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS4_15_Hash_node_baseE>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d105      	bne.n	800c4d6 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS4_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	68b9      	ldr	r1, [r7, #8]
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f000 fb4f 	bl	800cb72 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 800c4d4:	e000      	b.n	800c4d8 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS4_15_Hash_node_baseEj+0x28>
	  return;
 800c4d6:	bf00      	nop
      }
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <_ZNKSt16initializer_listISt4pairIKhhEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800c4de:	b480      	push	{r7}
 800c4e0:	b083      	sub	sp, #12
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <_ZNKSt16initializer_listISt4pairIKhhEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800c4f6:	b590      	push	{r4, r7, lr}
 800c4f8:	b083      	sub	sp, #12
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f7ff ffed 	bl	800c4de <_ZNKSt16initializer_listISt4pairIKhhEE5beginEv>
 800c504:	4604      	mov	r4, r0
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fb56 	bl	800cbb8 <_ZNKSt16initializer_listISt4pairIKhhEE4sizeEv>
 800c50c:	4603      	mov	r3, r0
 800c50e:	005b      	lsls	r3, r3, #1
 800c510:	4423      	add	r3, r4
 800c512:	4618      	mov	r0, r3
 800c514:	370c      	adds	r7, #12
 800c516:	46bd      	mov	sp, r7
 800c518:	bd90      	pop	{r4, r7, pc}

0800c51a <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS2_EET_SJ_jRKS9_RKS7_RKS3_St17integral_constantIbLb1EE>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800c51a:	b580      	push	{r7, lr}
 800c51c:	b088      	sub	sp, #32
 800c51e:	af02      	add	r7, sp, #8
 800c520:	60f8      	str	r0, [r7, #12]
 800c522:	60b9      	str	r1, [r7, #8]
 800c524:	607a      	str	r2, [r7, #4]
 800c526:	603b      	str	r3, [r7, #0]
      : _Hashtable(__bkt_count_hint, __h, __eq, __a)
 800c528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52e:	6a3a      	ldr	r2, [r7, #32]
 800c530:	6839      	ldr	r1, [r7, #0]
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	f000 fb4c 	bl	800cbd0 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKS9_RKS7_RKS3_>
	for (; __f != __l; ++__f)
 800c538:	e009      	b.n	800c54e <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS2_EET_SJ_jRKS9_RKS7_RKS3_St17integral_constantIbLb1EE+0x34>
	  this->insert(*__f);
 800c53a:	f107 0310 	add.w	r3, r7, #16
 800c53e:	68ba      	ldr	r2, [r7, #8]
 800c540:	68f9      	ldr	r1, [r7, #12]
 800c542:	4618      	mov	r0, r3
 800c544:	f000 fb6c 	bl	800cc20 <_ZNSt8__detail12_Insert_baseIhSt4pairIKhhESaIS3_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKS3_>
	for (; __f != __l; ++__f)
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	3302      	adds	r3, #2
 800c54c:	60bb      	str	r3, [r7, #8]
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	429a      	cmp	r2, r3
 800c554:	d1f1      	bne.n	800c53a <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS2_EET_SJ_jRKS9_RKS7_RKS3_St17integral_constantIbLb1EE+0x20>
      }
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	4618      	mov	r0, r3
 800c55a:	3718      	adds	r7, #24
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>:
      _M_bucket_index(__hash_code __c) const
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	461a      	mov	r2, r3
 800c570:	6839      	ldr	r1, [r7, #0]
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 fb72 	bl	800cc5c <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>
 800c578:	4603      	mov	r3, r0
 800c57a:	4618      	mov	r0, r3
 800c57c:	3708      	adds	r7, #8
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 800c582:	b580      	push	{r7, lr}
 800c584:	b086      	sub	sp, #24
 800c586:	af00      	add	r7, sp, #0
 800c588:	60f8      	str	r0, [r7, #12]
 800c58a:	60b9      	str	r1, [r7, #8]
 800c58c:	607a      	str	r2, [r7, #4]
 800c58e:	603b      	str	r3, [r7, #0]
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	68b9      	ldr	r1, [r7, #8]
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	f000 fb72 	bl	800cc80 <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j>
 800c59c:	6178      	str	r0, [r7, #20]
	if (__before_n)
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d002      	beq.n	800c5aa <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j+0x28>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	e000      	b.n	800c5ac <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j+0x2a>
	return nullptr;
 800c5aa:	2300      	movs	r3, #0
      }
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3718      	adds	r7, #24
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE4_M_vEv>:
      _M_v() noexcept
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f7fd fb9e 	bl	8009cfe <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE9_M_valptrEv>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f000 fb95 	bl	800cd0a <_ZNSt11_Tuple_implILj0EJRKhEEC1ES1_>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3708      	adds	r7, #8
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS1_EESP_IJEEEEEPNS8_16_Hashtable_allocISaINS8_10_Hash_nodeIS6_Lb0EEEEEEDpOT_>:
	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 800c5ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5ec:	b085      	sub	sp, #20
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	60f8      	str	r0, [r7, #12]
 800c5f2:	60b9      	str	r1, [r7, #8]
 800c5f4:	607a      	str	r2, [r7, #4]
 800c5f6:	603b      	str	r3, [r7, #0]
	  : _M_h(__h),
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	68ba      	ldr	r2, [r7, #8]
 800c5fc:	601a      	str	r2, [r3, #0]
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
 800c5fe:	68bc      	ldr	r4, [r7, #8]
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 fb91 	bl	800cd28 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800c606:	4605      	mov	r5, r0
 800c608:	6838      	ldr	r0, [r7, #0]
 800c60a:	f000 fb98 	bl	800cd3e <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c60e:	4606      	mov	r6, r0
 800c610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c612:	f000 fb9f 	bl	800cd54 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c616:	4603      	mov	r3, r0
 800c618:	4632      	mov	r2, r6
 800c61a:	4629      	mov	r1, r5
 800c61c:	4620      	mov	r0, r4
 800c61e:	f000 fbb1 	bl	800cd84 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPS9_DpOT_>
 800c622:	4602      	mov	r2, r0
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	605a      	str	r2, [r3, #4]
	  { }
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	4618      	mov	r0, r3
 800c62c:	3714      	adds	r7, #20
 800c62e:	46bd      	mov	sp, r7
 800c630:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c632 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 800c632:	b580      	push	{r7, lr}
 800c634:	b082      	sub	sp, #8
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d007      	beq.n	800c652 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	4619      	mov	r1, r3
 800c64c:	4610      	mov	r0, r2
 800c64e:	f7fd fdba 	bl	800a1c6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE18_M_deallocate_nodeEPS9_>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4618      	mov	r0, r3
 800c656:	3708      	adds	r7, #8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS8_10_Hash_nodeIS6_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800c65c:	b590      	push	{r4, r7, lr}
 800c65e:	b08d      	sub	sp, #52	; 0x34
 800c660:	af02      	add	r7, sp, #8
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
 800c668:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	3310      	adds	r3, #16
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fe f9e5 	bl	800aa3e <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 800c674:	4603      	mov	r3, r0
 800c676:	61fb      	str	r3, [r7, #28]
 800c678:	f107 031c 	add.w	r3, r7, #28
 800c67c:	627b      	str	r3, [r7, #36]	; 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f103 0110 	add.w	r1, r3, #16
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	685a      	ldr	r2, [r3, #4]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	68dc      	ldr	r4, [r3, #12]
 800c68c:	f107 0014 	add.w	r0, r7, #20
 800c690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c692:	9300      	str	r3, [sp, #0]
 800c694:	4623      	mov	r3, r4
 800c696:	f00e fc6f 	bl	801af78 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 800c69a:	7d3b      	ldrb	r3, [r7, #20]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d00a      	beq.n	800c6b6 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS8_10_Hash_nodeIS6_Lb0EEEj+0x5a>
	  _M_rehash(__do_rehash.second, __saved_state);
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	68f8      	ldr	r0, [r7, #12]
 800c6a8:	f000 fbad 	bl	800ce06 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__code);
 800c6ac:	6879      	ldr	r1, [r7, #4]
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f7ff ff56 	bl	800c560 <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 800c6b4:	60b8      	str	r0, [r7, #8]
      this->_M_store_code(*__node, __code);
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	3304      	adds	r3, #4
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	4619      	mov	r1, r3
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f000 fbb0 	bl	800ce24 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 800c6c4:	683a      	ldr	r2, [r7, #0]
 800c6c6:	68b9      	ldr	r1, [r7, #8]
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	f000 fbb7 	bl	800ce3c <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE>
      ++_M_element_count;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	68db      	ldr	r3, [r3, #12]
 800c6d2:	1c5a      	adds	r2, r3, #1
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 800c6d8:	f107 0320 	add.w	r3, r7, #32
 800c6dc:	6839      	ldr	r1, [r7, #0]
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7fd fc18 	bl	8009f14 <_ZNSt8__detail14_Node_iteratorISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0ELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>
 800c6e4:	6a3b      	ldr	r3, [r7, #32]
    }
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	372c      	adds	r7, #44	; 0x2c
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd90      	pop	{r4, r7, pc}

0800c6ee <_ZSt7forwardIRK18CurrentVoltagePairEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c6ee:	b480      	push	{r7}
 800c6f0:	b083      	sub	sp, #12
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <_ZN18CurrentVoltagePairC1ERKS_>:
struct CurrentVoltagePair {
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	683a      	ldr	r2, [r7, #0]
 800c712:	4611      	mov	r1, r2
 800c714:	4618      	mov	r0, r3
 800c716:	f00f f8b1 	bl	801b87c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f103 0218 	add.w	r2, r3, #24
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	3318      	adds	r3, #24
 800c724:	4619      	mov	r1, r3
 800c726:	4610      	mov	r0, r2
 800c728:	f00f f8a8 	bl	801b87c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4618      	mov	r0, r3
 800c730:	3708      	adds	r7, #8
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <_ZN9__gnu_cxx13new_allocatorI18CurrentVoltagePairE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800c736:	b590      	push	{r4, r7, lr}
 800c738:	b085      	sub	sp, #20
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	60f8      	str	r0, [r7, #12]
 800c73e:	60b9      	str	r1, [r7, #8]
 800c740:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7ff ffd3 	bl	800c6ee <_ZSt7forwardIRK18CurrentVoltagePairEOT_RNSt16remove_referenceIS3_E4typeE>
 800c748:	4604      	mov	r4, r0
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	4619      	mov	r1, r3
 800c74e:	2030      	movs	r0, #48	; 0x30
 800c750:	f7fb fb2f 	bl	8007db2 <_ZnwjPv>
 800c754:	4603      	mov	r3, r0
 800c756:	4621      	mov	r1, r4
 800c758:	4618      	mov	r0, r3
 800c75a:	f7ff ffd3 	bl	800c704 <_ZN18CurrentVoltagePairC1ERKS_>
 800c75e:	bf00      	nop
 800c760:	3714      	adds	r7, #20
 800c762:	46bd      	mov	sp, r7
 800c764:	bd90      	pop	{r4, r7, pc}

0800c766 <_ZN9__gnu_cxx17__normal_iteratorIP18CurrentVoltagePairSt6vectorIS1_SaIS1_EEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c766:	b480      	push	{r7}
 800c768:	b083      	sub	sp, #12
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
 800c76e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	601a      	str	r2, [r3, #0]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	4618      	mov	r0, r3
 800c77c:	370c      	adds	r7, #12
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr

0800c786 <_ZNKSt6vectorI18CurrentVoltagePairSaIS0_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800c786:	b590      	push	{r4, r7, lr}
 800c788:	b087      	sub	sp, #28
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	60f8      	str	r0, [r7, #12]
 800c78e:	60b9      	str	r1, [r7, #8]
 800c790:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800c792:	68f8      	ldr	r0, [r7, #12]
 800c794:	f000 fb99 	bl	800ceca <_ZNKSt6vectorI18CurrentVoltagePairSaIS0_EE8max_sizeEv>
 800c798:	4604      	mov	r4, r0
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f7fd f9da 	bl	8009b54 <_ZNKSt6vectorI18CurrentVoltagePairSaIS0_EE4sizeEv>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	1ae2      	subs	r2, r4, r3
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	bf34      	ite	cc
 800c7aa:	2301      	movcc	r3, #1
 800c7ac:	2300      	movcs	r3, #0
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d002      	beq.n	800c7ba <_ZNKSt6vectorI18CurrentVoltagePairSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f00e fb3b 	bl	801ae30 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f7fd f9ca 	bl	8009b54 <_ZNKSt6vectorI18CurrentVoltagePairSaIS0_EE4sizeEv>
 800c7c0:	4604      	mov	r4, r0
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f7fd f9c6 	bl	8009b54 <_ZNKSt6vectorI18CurrentVoltagePairSaIS0_EE4sizeEv>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	613b      	str	r3, [r7, #16]
 800c7cc:	f107 0208 	add.w	r2, r7, #8
 800c7d0:	f107 0310 	add.w	r3, r7, #16
 800c7d4:	4611      	mov	r1, r2
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7fb ff54 	bl	8008684 <_ZSt3maxIjERKT_S2_S2_>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4423      	add	r3, r4
 800c7e2:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f7fd f9b5 	bl	8009b54 <_ZNKSt6vectorI18CurrentVoltagePairSaIS0_EE4sizeEv>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d306      	bcc.n	800c800 <_ZNKSt6vectorI18CurrentVoltagePairSaIS0_EE12_M_check_lenEjPKc+0x7a>
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f000 fb69 	bl	800ceca <_ZNKSt6vectorI18CurrentVoltagePairSaIS0_EE8max_sizeEv>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d904      	bls.n	800c80a <_ZNKSt6vectorI18CurrentVoltagePairSaIS0_EE12_M_check_lenEjPKc+0x84>
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	f000 fb62 	bl	800ceca <_ZNKSt6vectorI18CurrentVoltagePairSaIS0_EE8max_sizeEv>
 800c806:	4603      	mov	r3, r0
 800c808:	e000      	b.n	800c80c <_ZNKSt6vectorI18CurrentVoltagePairSaIS0_EE12_M_check_lenEjPKc+0x86>
 800c80a:	697b      	ldr	r3, [r7, #20]
      }
 800c80c:	4618      	mov	r0, r3
 800c80e:	371c      	adds	r7, #28
 800c810:	46bd      	mov	sp, r7
 800c812:	bd90      	pop	{r4, r7, pc}

0800c814 <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	f107 030c 	add.w	r3, r7, #12
 800c822:	4611      	mov	r1, r2
 800c824:	4618      	mov	r0, r3
 800c826:	f7ff ff9e 	bl	800c766 <_ZN9__gnu_cxx17__normal_iteratorIP18CurrentVoltagePairSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	4618      	mov	r0, r3
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <_ZN9__gnu_cxxmiIP18CurrentVoltagePairSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c834:	b590      	push	{r4, r7, lr}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 f83a 	bl	800c8b8 <_ZNK9__gnu_cxx17__normal_iteratorIP18CurrentVoltagePairSt6vectorIS1_SaIS1_EEE4baseEv>
 800c844:	4603      	mov	r3, r0
 800c846:	681c      	ldr	r4, [r3, #0]
 800c848:	6838      	ldr	r0, [r7, #0]
 800c84a:	f000 f835 	bl	800c8b8 <_ZNK9__gnu_cxx17__normal_iteratorIP18CurrentVoltagePairSt6vectorIS1_SaIS1_EEE4baseEv>
 800c84e:	4603      	mov	r3, r0
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	1ae3      	subs	r3, r4, r3
 800c854:	111b      	asrs	r3, r3, #4
 800c856:	4a03      	ldr	r2, [pc, #12]	; (800c864 <_ZN9__gnu_cxxmiIP18CurrentVoltagePairSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 800c858:	fb02 f303 	mul.w	r3, r2, r3
 800c85c:	4618      	mov	r0, r3
 800c85e:	370c      	adds	r7, #12
 800c860:	46bd      	mov	sp, r7
 800c862:	bd90      	pop	{r4, r7, pc}
 800c864:	aaaaaaab 	.word	0xaaaaaaab

0800c868 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d006      	beq.n	800c886 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE11_M_allocateEj+0x1e>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6839      	ldr	r1, [r7, #0]
 800c87c:	4618      	mov	r0, r3
 800c87e:	f000 fb35 	bl	800ceec <_ZNSt16allocator_traitsISaI18CurrentVoltagePairEE8allocateERS1_j>
 800c882:	4603      	mov	r3, r0
 800c884:	e000      	b.n	800c888 <_ZNSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE11_M_allocateEj+0x20>
 800c886:	2300      	movs	r3, #0
      }
 800c888:	4618      	mov	r0, r3
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800c890:	b590      	push	{r4, r7, lr}
 800c892:	b087      	sub	sp, #28
 800c894:	af02      	add	r7, sp, #8
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	607a      	str	r2, [r7, #4]
 800c89c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800c89e:	f88d 4000 	strb.w	r4, [sp]
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	68b9      	ldr	r1, [r7, #8]
 800c8a8:	68f8      	ldr	r0, [r7, #12]
 800c8aa:	f000 fb2e 	bl	800cf0a <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 800c8ae:	4603      	mov	r3, r0
      }
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3714      	adds	r7, #20
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd90      	pop	{r4, r7, pc}

0800c8b8 <_ZNK9__gnu_cxx17__normal_iteratorIP18CurrentVoltagePairSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	370c      	adds	r7, #12
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr

0800c8ce <_ZNSt16allocator_traitsISaI18CurrentVoltagePairEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b082      	sub	sp, #8
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
 800c8d6:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800c8d8:	6839      	ldr	r1, [r7, #0]
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 fb27 	bl	800cf2e <_ZN9__gnu_cxx13new_allocatorI18CurrentVoltagePairE7destroyIS1_EEvPT_>
	}
 800c8e0:	bf00      	nop
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <_ZNSt8__detail14_Node_iteratorISt4pairIKhhELb0ELb0EEC1EPNS_10_Hash_nodeIS3_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6839      	ldr	r1, [r7, #0]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f000 fb25 	bl	800cf46 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKhhELb0EEC1EPNS_10_Hash_nodeIS3_Lb0EEE>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4618      	mov	r0, r3
 800c900:	3708      	adds	r7, #8
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhhEE9_M_valptrEv>:
      _M_valptr() noexcept
 800c906:	b580      	push	{r7, lr}
 800c908:	b082      	sub	sp, #8
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4618      	mov	r0, r3
 800c912:	f000 fb27 	bl	800cf64 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhhEE6_M_ptrEv>
 800c916:	4603      	mov	r3, r0
 800c918:	4618      	mov	r0, r3
 800c91a:	3708      	adds	r7, #8
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <_ZSt7forwardI18CurrentVoltagePairEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	4618      	mov	r0, r3
 800c92c:	370c      	adds	r7, #12
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr

0800c936 <_ZNSt16allocator_traitsISaI18CurrentVoltagePairEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800c936:	b580      	push	{r7, lr}
 800c938:	b084      	sub	sp, #16
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	60f8      	str	r0, [r7, #12]
 800c93e:	60b9      	str	r1, [r7, #8]
 800c940:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f7ff ffec 	bl	800c920 <_ZSt7forwardI18CurrentVoltagePairEOT_RNSt16remove_referenceIS1_E4typeE>
 800c948:	4603      	mov	r3, r0
 800c94a:	461a      	mov	r2, r3
 800c94c:	68b9      	ldr	r1, [r7, #8]
 800c94e:	68f8      	ldr	r0, [r7, #12]
 800c950:	f000 fb2d 	bl	800cfae <_ZN9__gnu_cxx13new_allocatorI18CurrentVoltagePairE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 800c954:	bf00      	nop
 800c956:	3710      	adds	r7, #16
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800c966:	6839      	ldr	r1, [r7, #0]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fb38 	bl	800cfde <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEC1ERKS7_>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4618      	mov	r0, r3
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 800c978:	b590      	push	{r4, r7, lr}
 800c97a:	b087      	sub	sp, #28
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
      __buckets_alloc_type __alloc(_M_node_allocator());
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 fb37 	bl	800cff6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE17_M_node_allocatorEv>
 800c988:	4602      	mov	r2, r0
 800c98a:	f107 030c 	add.w	r3, r7, #12
 800c98e:	4611      	mov	r1, r2
 800c990:	4618      	mov	r0, r3
 800c992:	f000 fb3c 	bl	800d00e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKhhELb0EEEEERKSaIT_E>
      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
 800c996:	f107 030c 	add.w	r3, r7, #12
 800c99a:	6839      	ldr	r1, [r7, #0]
 800c99c:	4618      	mov	r0, r3
 800c99e:	f000 fb43 	bl	800d028 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 800c9a2:	6178      	str	r0, [r7, #20]
      __buckets_ptr __p = std::__to_address(__ptr);
 800c9a4:	6978      	ldr	r0, [r7, #20]
 800c9a6:	f000 fb4e 	bl	800d046 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 800c9aa:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	009b      	lsls	r3, r3, #2
 800c9b0:	693a      	ldr	r2, [r7, #16]
 800c9b2:	4610      	mov	r0, r2
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	f012 f81a 	bl	801e9f0 <memset>
      return __p;
 800c9bc:	693c      	ldr	r4, [r7, #16]
    }
 800c9be:	f107 030c 	add.w	r3, r7, #12
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fd fd92 	bl	800a4ec <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 800c9c8:	4623      	mov	r3, r4
    }
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	371c      	adds	r7, #28
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd90      	pop	{r4, r7, pc}

0800c9d2 <_ZSt4moveIRSt4pairIKhhEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800c9d2:	b480      	push	{r7}
 800c9d4:	b083      	sub	sp, #12
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4618      	mov	r0, r3
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <_ZSt7forwardIRKSt4pairIKhhEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	370c      	adds	r7, #12
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr

0800c9fe <_ZNSt8__detail10_Hash_nodeISt4pairIKhhELb0EEC1Ev>:
    struct _Hash_node
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b082      	sub	sp, #8
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7fc ff34 	bl	8009876 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4618      	mov	r0, r3
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE16_M_allocate_nodeIJRKS4_EEEPS5_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 800ca18:	b5b0      	push	{r4, r5, r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fae7 	bl	800cff6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE17_M_node_allocatorEv>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	2101      	movs	r1, #1
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f000 fb15 	bl	800d05c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEE8allocateERS6_j>
 800ca32:	60f8      	str	r0, [r7, #12]
	__node_ptr __n = std::__to_address(__nptr);
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f000 fb20 	bl	800d07a <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEPT_S7_>
 800ca3a:	60b8      	str	r0, [r7, #8]
	    ::new ((void*)__n) __node_type;
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	4619      	mov	r1, r3
 800ca40:	2008      	movs	r0, #8
 800ca42:	f7fb f9b6 	bl	8007db2 <_ZnwjPv>
 800ca46:	4603      	mov	r3, r0
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7ff ffd8 	bl	800c9fe <_ZNSt8__detail10_Hash_nodeISt4pairIKhhELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 fad1 	bl	800cff6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE17_M_node_allocatorEv>
 800ca54:	4604      	mov	r4, r0
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	3304      	adds	r3, #4
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7ff ff53 	bl	800c906 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhhEE9_M_valptrEv>
 800ca60:	4605      	mov	r5, r0
 800ca62:	6838      	ldr	r0, [r7, #0]
 800ca64:	f7ff ffc0 	bl	800c9e8 <_ZSt7forwardIRKSt4pairIKhhEEOT_RNSt16remove_referenceIS5_E4typeE>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	4629      	mov	r1, r5
 800ca6e:	4620      	mov	r0, r4
 800ca70:	f000 fb0e 	bl	800d090 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	    return __n;
 800ca74:	68bb      	ldr	r3, [r7, #8]
      }
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bdb0      	pop	{r4, r5, r7, pc}

0800ca7e <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEv>:
      _M_update_bbegin()
 800ca7e:	b5b0      	push	{r4, r5, r7, lr}
 800ca80:	b082      	sub	sp, #8
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
	if (_M_begin())
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f7ff fc96 	bl	800c3b8 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	bf14      	ite	ne
 800ca92:	2301      	movne	r3, #1
 800ca94:	2300      	moveq	r3, #0
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d011      	beq.n	800cac0 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEv+0x42>
	  _M_buckets[_M_bucket_index(*_M_begin())] = &_M_before_begin;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f103 0408 	add.w	r4, r3, #8
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681d      	ldr	r5, [r3, #0]
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f7ff fc86 	bl	800c3b8 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 800caac:	4603      	mov	r3, r0
 800caae:	3304      	adds	r3, #4
 800cab0:	4619      	mov	r1, r3
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7ff fcd3 	bl	800c45e <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS4_16_Hash_node_valueIS2_Lb0EEE>
 800cab8:	4603      	mov	r3, r0
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	442b      	add	r3, r5
 800cabe:	601c      	str	r4, [r3, #0]
      }
 800cac0:	bf00      	nop
 800cac2:	3708      	adds	r7, #8
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bdb0      	pop	{r4, r5, r7, pc}

0800cac8 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhhENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS3_Lb0EEEj>:
      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
 800cac8:	b580      	push	{r7, lr}
 800caca:	b086      	sub	sp, #24
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	607a      	str	r2, [r7, #4]
	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	4618      	mov	r0, r3
 800cad8:	f000 fb10 	bl	800d0fc <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKhhEE4_M_vEv>
 800cadc:	4602      	mov	r2, r0
 800cade:	f107 0314 	add.w	r3, r7, #20
 800cae2:	4611      	mov	r1, r2
 800cae4:	4618      	mov	r0, r3
 800cae6:	f000 fb15 	bl	800d114 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKhhEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS7_>
 800caea:	4603      	mov	r3, r0
 800caec:	4619      	mov	r1, r3
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	f000 faf0 	bl	800d0d4 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhhENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 800caf4:	4601      	mov	r1, r0
 800caf6:	f107 0310 	add.w	r3, r7, #16
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fc fec8 	bl	8009892 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 800cb02:	4603      	mov	r3, r0
      }
 800cb04:	4618      	mov	r0, r3
 800cb06:	3718      	adds	r7, #24
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE18_M_deallocate_nodeEPS5_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 800cb0c:	b590      	push	{r4, r7, lr}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 fa6d 	bl	800cff6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE17_M_node_allocatorEv>
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	3304      	adds	r3, #4
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7ff feef 	bl	800c906 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhhEE9_M_valptrEv>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f000 fb02 	bl	800d136 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEE7destroyIS4_EEvRS6_PT_>
      _M_deallocate_node_ptr(__n);
 800cb32:	6839      	ldr	r1, [r7, #0]
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 fb0b 	bl	800d150 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE22_M_deallocate_node_ptrEPS5_>
    }
 800cb3a:	bf00      	nop
 800cb3c:	370c      	adds	r7, #12
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd90      	pop	{r4, r7, pc}

0800cb42 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS4_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 800cb42:	b480      	push	{r7}
 800cb44:	b083      	sub	sp, #12
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	6078      	str	r0, [r7, #4]
 800cb4a:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	3318      	adds	r3, #24
 800cb50:	683a      	ldr	r2, [r7, #0]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	bf0c      	ite	eq
 800cb56:	2301      	moveq	r3, #1
 800cb58:	2300      	movne	r3, #0
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	bf14      	ite	ne
 800cb60:	2301      	movne	r3, #1
 800cb62:	2300      	moveq	r3, #0
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	4618      	mov	r0, r3
 800cb68:	370c      	adds	r7, #12
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr

0800cb72 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
    _Hashtable_alloc<_NodeAlloc>::
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b086      	sub	sp, #24
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	60f8      	str	r0, [r7, #12]
 800cb7a:	60b9      	str	r1, [r7, #8]
 800cb7c:	607a      	str	r2, [r7, #4]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 800cb7e:	68b8      	ldr	r0, [r7, #8]
 800cb80:	f7fd fc9b 	bl	800a4ba <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 800cb84:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 800cb86:	68f8      	ldr	r0, [r7, #12]
 800cb88:	f000 fa35 	bl	800cff6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE17_M_node_allocatorEv>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	f107 0310 	add.w	r3, r7, #16
 800cb92:	4611      	mov	r1, r2
 800cb94:	4618      	mov	r0, r3
 800cb96:	f000 fa3a 	bl	800d00e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKhhELb0EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 800cb9a:	f107 0310 	add.w	r3, r7, #16
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	6979      	ldr	r1, [r7, #20]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fd fcae 	bl	800a504 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 800cba8:	f107 0310 	add.w	r3, r7, #16
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7fd fc9d 	bl	800a4ec <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 800cbb2:	3718      	adds	r7, #24
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <_ZNKSt16initializer_listISt4pairIKhhEE4sizeEv>:
      size() const noexcept { return _M_len; }
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKS9_RKS7_RKS3_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	60b9      	str	r1, [r7, #8]
 800cbda:	607a      	str	r2, [r7, #4]
 800cbdc:	603b      	str	r3, [r7, #0]
    : _Hashtable(__h, __eq, __a)
 800cbde:	6a3b      	ldr	r3, [r7, #32]
 800cbe0:	683a      	ldr	r2, [r7, #0]
 800cbe2:	6879      	ldr	r1, [r7, #4]
 800cbe4:	68f8      	ldr	r0, [r7, #12]
 800cbe6:	f000 fac9 	bl	800d17c <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKS9_RKS7_RKS3_>
      auto __bkt_count = _M_rehash_policy._M_next_bkt(__bkt_count_hint);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	3310      	adds	r3, #16
 800cbee:	68b9      	ldr	r1, [r7, #8]
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f00e f965 	bl	801aec0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 800cbf6:	6178      	str	r0, [r7, #20]
      if (__bkt_count > _M_bucket_count)
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	697a      	ldr	r2, [r7, #20]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d909      	bls.n	800cc16 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKS9_RKS7_RKS3_+0x46>
	  _M_buckets = _M_allocate_buckets(__bkt_count);
 800cc02:	6979      	ldr	r1, [r7, #20]
 800cc04:	68f8      	ldr	r0, [r7, #12]
 800cc06:	f7ff fbba 	bl	800c37e <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	601a      	str	r2, [r3, #0]
	  _M_bucket_count = __bkt_count;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	697a      	ldr	r2, [r7, #20]
 800cc14:	605a      	str	r2, [r3, #4]
    }
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3718      	adds	r7, #24
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <_ZNSt8__detail12_Insert_baseIhSt4pairIKhhESaIS3_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKS3_>:
      insert(const value_type& __v)
 800cc20:	b590      	push	{r4, r7, lr}
 800cc22:	b089      	sub	sp, #36	; 0x24
 800cc24:	af02      	add	r7, sp, #8
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
	__hashtable& __h = _M_conjure_hashtable();
 800cc2c:	68b8      	ldr	r0, [r7, #8]
 800cc2e:	f000 fae5 	bl	800d1fc <_ZNSt8__detail12_Insert_baseIhSt4pairIKhhESaIS3_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>
 800cc32:	6178      	str	r0, [r7, #20]
	__node_gen_type __node_gen(__h);
 800cc34:	f107 0310 	add.w	r3, r7, #16
 800cc38:	6979      	ldr	r1, [r7, #20]
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7ff f94c 	bl	800bed8 <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEEC1ERNS_16_Hashtable_allocIS6_EE>
	return __h._M_insert(__v, __node_gen, __unique_keys{});
 800cc40:	68f8      	ldr	r0, [r7, #12]
 800cc42:	f107 0310 	add.w	r3, r7, #16
 800cc46:	f88d 4000 	strb.w	r4, [sp]
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	6979      	ldr	r1, [r7, #20]
 800cc4e:	f000 fae0 	bl	800d212 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS2_NS4_10_AllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEES0_INS4_14_Node_iteratorIS2_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>
 800cc52:	bf00      	nop
      }
 800cc54:	68f8      	ldr	r0, [r7, #12]
 800cc56:	371c      	adds	r7, #28
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd90      	pop	{r4, r7, pc}

0800cc5c <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>:
      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b086      	sub	sp, #24
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__c, __bkt_count); }
 800cc68:	f107 0314 	add.w	r3, r7, #20
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	68b9      	ldr	r1, [r7, #8]
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7fc fe0e 	bl	8009892 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 800cc76:	4603      	mov	r3, r0
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3718      	adds	r7, #24
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b086      	sub	sp, #24
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	607a      	str	r2, [r7, #4]
 800cc8c:	603b      	str	r3, [r7, #0]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681a      	ldr	r2, [r3, #0]
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	4413      	add	r3, r2
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d101      	bne.n	800cca6 <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x26>
	return nullptr;
 800cca2:	2300      	movs	r3, #0
 800cca4:	e02d      	b.n	800cd02 <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x82>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	3304      	adds	r3, #4
 800ccb0:	683a      	ldr	r2, [r7, #0]
 800ccb2:	6879      	ldr	r1, [r7, #4]
 800ccb4:	68f8      	ldr	r0, [r7, #12]
 800ccb6:	f000 fb0f 	bl	800d2d8 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS7_Lb0EEE>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d001      	beq.n	800ccc4 <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x44>
	    return __prev_p;
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	e01e      	b.n	800cd02 <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x82>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00c      	beq.n	800cce6 <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x66>
 800cccc:	6938      	ldr	r0, [r7, #16]
 800ccce:	f7fd f930 	bl	8009f32 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0EE7_M_nextEv>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	3304      	adds	r3, #4
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	68f8      	ldr	r0, [r7, #12]
 800ccda:	f7fd fad5 	bl	800a288 <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS8_16_Hash_node_valueIS6_Lb0EEE>
 800ccde:	4602      	mov	r2, r0
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d001      	beq.n	800ccea <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x6a>
 800cce6:	2301      	movs	r3, #1
 800cce8:	e000      	b.n	800ccec <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x6c>
 800ccea:	2300      	movs	r3, #0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d106      	bne.n	800ccfe <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x7e>
	  __prev_p = __p;
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 800ccf4:	6938      	ldr	r0, [r7, #16]
 800ccf6:	f7fd f91c 	bl	8009f32 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0EE7_M_nextEv>
 800ccfa:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 800ccfc:	e7d6      	b.n	800ccac <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x2c>
	    break;
 800ccfe:	bf00      	nop
      return nullptr;
 800cd00:	2300      	movs	r3, #0
    }
 800cd02:	4618      	mov	r0, r3
 800cd04:	3718      	adds	r7, #24
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}

0800cd0a <_ZNSt11_Tuple_implILj0EJRKhEEC1ES1_>:
      _Tuple_impl(const _Head& __head)
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b082      	sub	sp, #8
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
 800cd12:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6839      	ldr	r1, [r7, #0]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f000 fb0a 	bl	800d332 <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>
      { }
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4618      	mov	r0, r3
 800cd22:	3708      	adds	r7, #8
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cd28:	b480      	push	{r7}
 800cd2a:	b083      	sub	sp, #12
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4618      	mov	r0, r3
 800cd34:	370c      	adds	r7, #12
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr

0800cd3e <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cd3e:	b480      	push	{r7}
 800cd40:	b083      	sub	sp, #12
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4618      	mov	r0, r3
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	4618      	mov	r0, r3
 800cd60:	370c      	adds	r7, #12
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <_ZNSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0EEC1Ev>:
    struct _Hash_node
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b082      	sub	sp, #8
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7fc fd7e 	bl	8009876 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3708      	adds	r7, #8
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPS9_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 800cd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd88:	b088      	sub	sp, #32
 800cd8a:	af02      	add	r7, sp, #8
 800cd8c:	60f8      	str	r0, [r7, #12]
 800cd8e:	60b9      	str	r1, [r7, #8]
 800cd90:	607a      	str	r2, [r7, #4]
 800cd92:	603b      	str	r3, [r7, #0]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f7fd f969 	bl	800a06c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE17_M_node_allocatorEv>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2101      	movs	r1, #1
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f000 fad6 	bl	800d350 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE8allocateERSA_j>
 800cda4:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 800cda6:	6978      	ldr	r0, [r7, #20]
 800cda8:	f000 fae1 	bl	800d36e <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEPT_SB_>
 800cdac:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	2014      	movs	r0, #20
 800cdb4:	f7fa fffd 	bl	8007db2 <_ZnwjPv>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7ff ffd5 	bl	800cd6a <_ZNSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f7fd f953 	bl	800a06c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE17_M_node_allocatorEv>
 800cdc6:	4604      	mov	r4, r0
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	3304      	adds	r3, #4
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7fc ff96 	bl	8009cfe <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE9_M_valptrEv>
 800cdd2:	4605      	mov	r5, r0
 800cdd4:	68b8      	ldr	r0, [r7, #8]
 800cdd6:	f7ff ffa7 	bl	800cd28 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800cdda:	4606      	mov	r6, r0
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f7ff ffae 	bl	800cd3e <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800cde2:	4680      	mov	r8, r0
 800cde4:	6838      	ldr	r0, [r7, #0]
 800cde6:	f7ff ffb5 	bl	800cd54 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800cdea:	4603      	mov	r3, r0
 800cdec:	9300      	str	r3, [sp, #0]
 800cdee:	4643      	mov	r3, r8
 800cdf0:	4632      	mov	r2, r6
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	f000 fac5 	bl	800d384 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE9constructIS8_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvRSA_PT_DpOT0_>
	    return __n;
 800cdfa:	693b      	ldr	r3, [r7, #16]
      }
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3718      	adds	r7, #24
 800ce00:	46bd      	mov	sp, r7
 800ce02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ce06 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b084      	sub	sp, #16
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	60f8      	str	r0, [r7, #12]
 800ce0e:	60b9      	str	r1, [r7, #8]
 800ce10:	607a      	str	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys{});
 800ce12:	461a      	mov	r2, r3
 800ce14:	68b9      	ldr	r1, [r7, #8]
 800ce16:	68f8      	ldr	r0, [r7, #12]
 800ce18:	f000 fad2 	bl	800d3c0 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 800ce1c:	bf00      	nop
 800ce1e:	3710      	adds	r7, #16
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>:
      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
      { }
 800ce30:	bf00      	nop
 800ce32:	3714      	adds	r7, #20
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr

0800ce3c <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800ce3c:	b5b0      	push	{r4, r5, r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	009b      	lsls	r3, r3, #2
 800ce50:	4413      	add	r3, r2
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d011      	beq.n	800ce7c <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	4413      	add	r3, r2
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	4413      	add	r3, r2
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	601a      	str	r2, [r3, #0]
    }
 800ce7a:	e022      	b.n	800cec2 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE+0x86>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	689a      	ldr	r2, [r3, #8]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d00f      	beq.n	800ceb2 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE+0x76>
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
 800ce92:	687c      	ldr	r4, [r7, #4]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681d      	ldr	r5, [r3, #0]
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f7fd f84a 	bl	8009f32 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0EE7_M_nextEv>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	3304      	adds	r3, #4
 800cea2:	4619      	mov	r1, r3
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f7fd f9ef 	bl	800a288 <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS8_16_Hash_node_valueIS6_Lb0EEE>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	442b      	add	r3, r5
 800ceb0:	601c      	str	r4, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	4413      	add	r3, r2
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	3208      	adds	r2, #8
 800cec0:	601a      	str	r2, [r3, #0]
    }
 800cec2:	bf00      	nop
 800cec4:	3710      	adds	r7, #16
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bdb0      	pop	{r4, r5, r7, pc}

0800ceca <_ZNKSt6vectorI18CurrentVoltagePairSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ceca:	b580      	push	{r7, lr}
 800cecc:	b082      	sub	sp, #8
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4618      	mov	r0, r3
 800ced6:	f7fd f960 	bl	800a19a <_ZNKSt12_Vector_baseI18CurrentVoltagePairSaIS0_EE19_M_get_Tp_allocatorEv>
 800ceda:	4603      	mov	r3, r0
 800cedc:	4618      	mov	r0, r3
 800cede:	f000 fad3 	bl	800d488 <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE11_S_max_sizeERKS1_>
 800cee2:	4603      	mov	r3, r0
 800cee4:	4618      	mov	r0, r3
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <_ZNSt16allocator_traitsISaI18CurrentVoltagePairEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800cef6:	2200      	movs	r2, #0
 800cef8:	6839      	ldr	r1, [r7, #0]
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 faee 	bl	800d4dc <_ZN9__gnu_cxx13new_allocatorI18CurrentVoltagePairE8allocateEjPKv>
 800cf00:	4603      	mov	r3, r0
 800cf02:	4618      	mov	r0, r3
 800cf04:	3708      	adds	r7, #8
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b084      	sub	sp, #16
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	60f8      	str	r0, [r7, #12]
 800cf12:	60b9      	str	r1, [r7, #8]
 800cf14:	607a      	str	r2, [r7, #4]
 800cf16:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	68b9      	ldr	r1, [r7, #8]
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f000 fb0c 	bl	800d53c <_ZSt12__relocate_aIP18CurrentVoltagePairS1_SaIS0_EET0_T_S4_S3_RT1_>
 800cf24:	4603      	mov	r3, r0
      }
 800cf26:	4618      	mov	r0, r3
 800cf28:	3710      	adds	r7, #16
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <_ZN9__gnu_cxx13new_allocatorI18CurrentVoltagePairE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b082      	sub	sp, #8
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
 800cf36:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800cf38:	6838      	ldr	r0, [r7, #0]
 800cf3a:	f7fd fa7e 	bl	800a43a <_ZN18CurrentVoltagePairD1Ev>
 800cf3e:	bf00      	nop
 800cf40:	3708      	adds	r7, #8
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKhhELb0EEC1EPNS_10_Hash_nodeIS3_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 800cf46:	b480      	push	{r7}
 800cf48:	b083      	sub	sp, #12
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
 800cf4e:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	683a      	ldr	r2, [r7, #0]
 800cf54:	601a      	str	r2, [r3, #0]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4618      	mov	r0, r3
 800cf5a:	370c      	adds	r7, #12
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhhEE6_M_ptrEv>:
      _M_ptr() noexcept
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 fb02 	bl	800d576 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhhEE7_M_addrEv>
 800cf72:	4603      	mov	r3, r0
 800cf74:	4618      	mov	r0, r3
 800cf76:	3708      	adds	r7, #8
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <_ZN18CurrentVoltagePairC1EOS_>:
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	683a      	ldr	r2, [r7, #0]
 800cf8a:	4611      	mov	r1, r2
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f00e f9f5 	bl	801b37c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f103 0218 	add.w	r2, r3, #24
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	3318      	adds	r3, #24
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	4610      	mov	r0, r2
 800cfa0:	f00e f9ec 	bl	801b37c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3708      	adds	r7, #8
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}

0800cfae <_ZN9__gnu_cxx13new_allocatorI18CurrentVoltagePairE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800cfae:	b590      	push	{r4, r7, lr}
 800cfb0:	b085      	sub	sp, #20
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	60f8      	str	r0, [r7, #12]
 800cfb6:	60b9      	str	r1, [r7, #8]
 800cfb8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f7ff fcb0 	bl	800c920 <_ZSt7forwardI18CurrentVoltagePairEOT_RNSt16remove_referenceIS1_E4typeE>
 800cfc0:	4604      	mov	r4, r0
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	2030      	movs	r0, #48	; 0x30
 800cfc8:	f7fa fef3 	bl	8007db2 <_ZnwjPv>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	4621      	mov	r1, r4
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7ff ffd3 	bl	800cf7c <_ZN18CurrentVoltagePairC1EOS_>
 800cfd6:	bf00      	nop
 800cfd8:	3714      	adds	r7, #20
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd90      	pop	{r4, r7, pc}

0800cfde <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800cfde:	b480      	push	{r7}
 800cfe0:	b083      	sub	sp, #12
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
 800cfe6:	6039      	str	r1, [r7, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4618      	mov	r0, r3
 800cfec:	370c      	adds	r7, #12
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr

0800cff6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 800cff6:	b580      	push	{r7, lr}
 800cff8:	b082      	sub	sp, #8
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 fac4 	bl	800d58c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhhELb0EEEELb1EE6_M_getEv>
 800d004:	4603      	mov	r3, r0
 800d006:	4618      	mov	r0, r3
 800d008:	3708      	adds	r7, #8
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKhhELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800d00e:	b580      	push	{r7, lr}
 800d010:	b082      	sub	sp, #8
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
 800d016:	6039      	str	r1, [r7, #0]
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f7fd fb3e 	bl	800a69a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	4618      	mov	r0, r3
 800d022:	3708      	adds	r7, #8
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d032:	2200      	movs	r2, #0
 800d034:	6839      	ldr	r1, [r7, #0]
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 fabf 	bl	800d5ba <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 800d03c:	4603      	mov	r3, r0
 800d03e:	4618      	mov	r0, r3
 800d040:	3708      	adds	r7, #8
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800d046:	b480      	push	{r7}
 800d048:	b083      	sub	sp, #12
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800d04e:	687b      	ldr	r3, [r7, #4]
    }
 800d050:	4618      	mov	r0, r3
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr

0800d05c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d066:	2200      	movs	r2, #0
 800d068:	6839      	ldr	r1, [r7, #0]
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 fadb 	bl	800d626 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEE8allocateEjPKv>
 800d070:	4603      	mov	r3, r0
 800d072:	4618      	mov	r0, r3
 800d074:	3708      	adds	r7, #8
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}

0800d07a <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 800d07a:	b480      	push	{r7}
 800d07c:	b083      	sub	sp, #12
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
      return __ptr;
 800d082:	687b      	ldr	r3, [r7, #4]
    }
 800d084:	4618      	mov	r0, r3
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	60f8      	str	r0, [r7, #12]
 800d098:	60b9      	str	r1, [r7, #8]
 800d09a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f7ff fca3 	bl	800c9e8 <_ZSt7forwardIRKSt4pairIKhhEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	68b9      	ldr	r1, [r7, #8]
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f000 fae6 	bl	800d67a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>
	}
 800d0ae:	bf00      	nop
 800d0b0:	3710      	adds	r7, #16
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}

0800d0b6 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b084      	sub	sp, #16
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	60f8      	str	r0, [r7, #12]
 800d0be:	60b9      	str	r1, [r7, #8]
 800d0c0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	68b9      	ldr	r1, [r7, #8]
 800d0c6:	68f8      	ldr	r0, [r7, #12]
 800d0c8:	f000 faef 	bl	800d6aa <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEE10deallocateEPS6_j>
 800d0cc:	bf00      	nop
 800d0ce:	3710      	adds	r7, #16
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhhENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>:
      _M_hash_code(const _Key& __k) const
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
	return _M_hash()(__k);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 faf2 	bl	800d6c8 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhhENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	4610      	mov	r0, r2
 800d0ee:	f7fc fbb5 	bl	800985c <_ZNKSt4hashIhEclEh>
 800d0f2:	4603      	mov	r3, r0
      }
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKhhEE4_M_vEv>:
      _M_v() const noexcept
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 faeb 	bl	800d6e0 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKhhEE9_M_valptrEv>
 800d10a:	4603      	mov	r3, r0
 800d10c:	4618      	mov	r0, r3
 800d10e:	3708      	adds	r7, #8
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKhhEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS7_>:
      operator()(_Tp&& __x) const noexcept
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 800d11e:	6838      	ldr	r0, [r7, #0]
 800d120:	f7ff fc62 	bl	800c9e8 <_ZSt7forwardIRKSt4pairIKhhEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d124:	4603      	mov	r3, r0
 800d126:	4618      	mov	r0, r3
 800d128:	f000 fae7 	bl	800d6fa <_ZSt3getILj0EKhhERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS5_>
 800d12c:	4603      	mov	r3, r0
 800d12e:	4618      	mov	r0, r3
 800d130:	3708      	adds	r7, #8
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800d136:	b580      	push	{r7, lr}
 800d138:	b082      	sub	sp, #8
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
 800d13e:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800d140:	6839      	ldr	r1, [r7, #0]
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 fae5 	bl	800d712 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEE7destroyIS5_EEvPT_>
	}
 800d148:	bf00      	nop
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE22_M_deallocate_node_ptrEPS5_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 800d150:	b580      	push	{r7, lr}
 800d152:	b084      	sub	sp, #16
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 800d15a:	6838      	ldr	r0, [r7, #0]
 800d15c:	f000 fae4 	bl	800d728 <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEE10pointer_toERS5_>
 800d160:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7ff ff47 	bl	800cff6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE17_M_node_allocatorEv>
 800d168:	4603      	mov	r3, r0
 800d16a:	2201      	movs	r2, #1
 800d16c:	68f9      	ldr	r1, [r7, #12]
 800d16e:	4618      	mov	r0, r3
 800d170:	f7ff ffa1 	bl	800d0b6 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEE10deallocateERS6_PS5_j>
    }
 800d174:	bf00      	nop
 800d176:	3710      	adds	r7, #16
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKS9_RKS7_RKS3_>:
      _Hashtable(const _Hash& __h, const _Equal& __eq,
 800d17c:	b590      	push	{r4, r7, lr}
 800d17e:	b087      	sub	sp, #28
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	607a      	str	r2, [r7, #4]
 800d188:	603b      	str	r3, [r7, #0]
	__enable_default_ctor(_Enable_default_constructor_tag{})
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	68b9      	ldr	r1, [r7, #8]
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	f000 fae3 	bl	800d75a <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKhhENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKS8_RKS6_>
	__hashtable_alloc(__node_alloc_type(__a)),
 800d194:	f107 0314 	add.w	r3, r7, #20
 800d198:	6839      	ldr	r1, [r7, #0]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f000 fad0 	bl	800d740 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEC1IS3_EERKSaIT_E>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 800d1a0:	f107 0314 	add.w	r3, r7, #20
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	68f8      	ldr	r0, [r7, #12]
 800d1a8:	f7fe fe84 	bl	800beb4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEEC1IS6_EEOT_>
	__hashtable_alloc(__node_alloc_type(__a)),
 800d1ac:	f107 0314 	add.w	r3, r7, #20
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7fe fe73 	bl	800be9c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEED1Ev>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 800d1b6:	4621      	mov	r1, r4
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f000 fae1 	bl	800d780 <_ZNSt27_Enable_default_constructorILb1ENSt8__detail15_Hash_node_baseEEC1ESt31_Enable_default_constructor_tag>
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f103 0218 	add.w	r2, r3, #24
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	601a      	str	r2, [r3, #0]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	605a      	str	r2, [r3, #4]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	3308      	adds	r3, #8
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fc fb4f 	bl	8009876 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	60da      	str	r2, [r3, #12]
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	3310      	adds	r3, #16
 800d1e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7fc fb67 	bl	80098ba <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	619a      	str	r2, [r3, #24]
      { }
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	371c      	adds	r7, #28
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd90      	pop	{r4, r7, pc}

0800d1fc <_ZNSt8__detail12_Insert_baseIhSt4pairIKhhESaIS3_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>:
      _M_conjure_hashtable()
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
      { return *(static_cast<__hashtable*>(this)); }
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4618      	mov	r0, r3
 800d208:	370c      	adds	r7, #12
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr

0800d212 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS2_NS4_10_AllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEES0_INS4_14_Node_iteratorIS2_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800d212:	b580      	push	{r7, lr}
 800d214:	b090      	sub	sp, #64	; 0x40
 800d216:	af02      	add	r7, sp, #8
 800d218:	60f8      	str	r0, [r7, #12]
 800d21a:	60b9      	str	r1, [r7, #8]
 800d21c:	607a      	str	r2, [r7, #4]
 800d21e:	603b      	str	r3, [r7, #0]
	const key_type& __k = _ExtractKey{}(__v);
 800d220:	f107 031c 	add.w	r3, r7, #28
 800d224:	6879      	ldr	r1, [r7, #4]
 800d226:	4618      	mov	r0, r3
 800d228:	f7ff ff74 	bl	800d114 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKhhEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS7_>
 800d22c:	6378      	str	r0, [r7, #52]	; 0x34
	__hash_code __code = this->_M_hash_code(__k);
 800d22e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d230:	68b8      	ldr	r0, [r7, #8]
 800d232:	f7ff ff4f 	bl	800d0d4 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhhENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 800d236:	6338      	str	r0, [r7, #48]	; 0x30
	size_type __bkt = _M_bucket_index(__code);
 800d238:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d23a:	68b8      	ldr	r0, [r7, #8]
 800d23c:	f000 faac 	bl	800d798 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 800d240:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (__node_ptr __node = _M_find_node(__bkt, __k, __code))
 800d242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d244:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d248:	68b8      	ldr	r0, [r7, #8]
 800d24a:	f000 fab6 	bl	800d7ba <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>
 800d24e:	62b8      	str	r0, [r7, #40]	; 0x28
 800d250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d252:	2b00      	cmp	r3, #0
 800d254:	d011      	beq.n	800d27a <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS2_NS4_10_AllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEES0_INS4_14_Node_iteratorIS2_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE+0x68>
	  return { iterator(__node), false };
 800d256:	f107 0320 	add.w	r3, r7, #32
 800d25a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7ff fb43 	bl	800c8e8 <_ZNSt8__detail14_Node_iteratorISt4pairIKhhELb0ELb0EEC1EPNS_10_Hash_nodeIS3_Lb0EEE>
 800d262:	2300      	movs	r3, #0
 800d264:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d268:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800d26c:	f107 0320 	add.w	r3, r7, #32
 800d270:	4619      	mov	r1, r3
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	f000 faba 	bl	800d7ec <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKhhELb0ELb0EEEbEC1IS4_bLb1EEEOT_OT0_>
      }
 800d278:	e02a      	b.n	800d2d0 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS2_NS4_10_AllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEES0_INS4_14_Node_iteratorIS2_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE+0xbe>
	_Scoped_node __node{ __node_gen(std::forward<_Arg>(__v)), this };
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f7ff fbb4 	bl	800c9e8 <_ZSt7forwardIRKSt4pairIKhhEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d280:	4603      	mov	r3, r0
 800d282:	4619      	mov	r1, r3
 800d284:	6838      	ldr	r0, [r7, #0]
 800d286:	f7ff f8af 	bl	800c3e8 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEEclIRKS4_EEPS5_OT_>
 800d28a:	4601      	mov	r1, r0
 800d28c:	f107 0314 	add.w	r3, r7, #20
 800d290:	68ba      	ldr	r2, [r7, #8]
 800d292:	4618      	mov	r0, r3
 800d294:	f000 fac3 	bl	800d81e <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNS4_10_Hash_nodeIS2_Lb0EEEPNS4_16_Hashtable_allocISaISI_EEE>
	  = _M_insert_unique_node(__bkt, __code, __node._M_node);
 800d298:	69bb      	ldr	r3, [r7, #24]
 800d29a:	2201      	movs	r2, #1
 800d29c:	9200      	str	r2, [sp, #0]
 800d29e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2a2:	68b8      	ldr	r0, [r7, #8]
 800d2a4:	f000 fae3 	bl	800d86e <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS4_10_Hash_nodeIS2_Lb0EEEj>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	613b      	str	r3, [r7, #16]
	__node._M_node = nullptr;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	61bb      	str	r3, [r7, #24]
	return { __pos, true };
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2b6:	f107 0227 	add.w	r2, r7, #39	; 0x27
 800d2ba:	f107 0310 	add.w	r3, r7, #16
 800d2be:	4619      	mov	r1, r3
 800d2c0:	68f8      	ldr	r0, [r7, #12]
 800d2c2:	f000 fb1d 	bl	800d900 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKhhELb0ELb0EEEbEC1IRS4_bLb1EEEOT_OT0_>
      }
 800d2c6:	f107 0314 	add.w	r3, r7, #20
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f000 faba 	bl	800d844 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 800d2d0:	68f8      	ldr	r0, [r7, #12]
 800d2d2:	3738      	adds	r7, #56	; 0x38
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS7_Lb0EEE>:
      _M_equals(const _Key& __k, __hash_code __c,
 800d2d8:	b590      	push	{r4, r7, lr}
 800d2da:	b087      	sub	sp, #28
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	60b9      	str	r1, [r7, #8]
 800d2e2:	607a      	str	r2, [r7, #4]
 800d2e4:	603b      	str	r3, [r7, #0]
	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 800d2e6:	6839      	ldr	r1, [r7, #0]
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 fb22 	bl	800d932 <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d019      	beq.n	800d328 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS7_Lb0EEE+0x50>
 800d2f4:	68f8      	ldr	r0, [r7, #12]
 800d2f6:	f000 fb28 	bl	800d94a <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 800d2fa:	4604      	mov	r4, r0
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7fd fa04 	bl	800a70c <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEEE4_M_vEv>
 800d304:	4602      	mov	r2, r0
 800d306:	f107 0314 	add.w	r3, r7, #20
 800d30a:	4611      	mov	r1, r2
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7fd fa09 	bl	800a724 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSB_>
 800d312:	4603      	mov	r3, r0
 800d314:	461a      	mov	r2, r3
 800d316:	68b9      	ldr	r1, [r7, #8]
 800d318:	4620      	mov	r0, r4
 800d31a:	f000 fb22 	bl	800d962 <_ZNKSt8equal_toIhEclERKhS2_>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d001      	beq.n	800d328 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS7_Lb0EEE+0x50>
 800d324:	2301      	movs	r3, #1
 800d326:	e000      	b.n	800d32a <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS7_Lb0EEE+0x52>
 800d328:	2300      	movs	r3, #0
      }
 800d32a:	4618      	mov	r0, r3
 800d32c:	371c      	adds	r7, #28
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd90      	pop	{r4, r7, pc}

0800d332 <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 800d332:	b480      	push	{r7}
 800d334:	b083      	sub	sp, #12
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
 800d33a:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	683a      	ldr	r2, [r7, #0]
 800d340:	601a      	str	r2, [r3, #0]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	4618      	mov	r0, r3
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr

0800d350 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE8allocateERSA_j>:
      allocate(allocator_type& __a, size_type __n)
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d35a:	2200      	movs	r2, #0
 800d35c:	6839      	ldr	r1, [r7, #0]
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f000 fb22 	bl	800d9a8 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEE8allocateEjPKv>
 800d364:	4603      	mov	r3, r0
 800d366:	4618      	mov	r0, r3
 800d368:	3708      	adds	r7, #8
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEPT_SB_>:
    __to_address(_Tp* __ptr) noexcept
 800d36e:	b480      	push	{r7}
 800d370:	b083      	sub	sp, #12
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
      return __ptr;
 800d376:	687b      	ldr	r3, [r7, #4]
    }
 800d378:	4618      	mov	r0, r3
 800d37a:	370c      	adds	r7, #12
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE9constructIS8_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvRSA_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800d384:	b5b0      	push	{r4, r5, r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af02      	add	r7, sp, #8
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
 800d390:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f7ff fcc8 	bl	800cd28 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800d398:	4604      	mov	r4, r0
 800d39a:	6838      	ldr	r0, [r7, #0]
 800d39c:	f7ff fccf 	bl	800cd3e <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	6a38      	ldr	r0, [r7, #32]
 800d3a4:	f7ff fcd6 	bl	800cd54 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	9300      	str	r3, [sp, #0]
 800d3ac:	462b      	mov	r3, r5
 800d3ae:	4622      	mov	r2, r4
 800d3b0:	68b9      	ldr	r1, [r7, #8]
 800d3b2:	68f8      	ldr	r0, [r7, #12]
 800d3b4:	f000 fb38 	bl	800da28 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESG_IJEEEEEvPT_DpOT0_>
	}
 800d3b8:	bf00      	nop
 800d3ba:	3710      	adds	r7, #16
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bdb0      	pop	{r4, r5, r7, pc}

0800d3c0 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b08a      	sub	sp, #40	; 0x28
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	713a      	strb	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
 800d3cc:	68b9      	ldr	r1, [r7, #8]
 800d3ce:	68f8      	ldr	r0, [r7, #12]
 800d3d0:	f000 fb51 	bl	800da76 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 800d3d4:	61f8      	str	r0, [r7, #28]
      __node_ptr __p = _M_begin();
 800d3d6:	68f8      	ldr	r0, [r7, #12]
 800d3d8:	f7fc fd90 	bl	8009efc <_ZNKSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 800d3dc:	6278      	str	r0, [r7, #36]	; 0x24
      _M_before_begin._M_nxt = nullptr;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	623b      	str	r3, [r7, #32]
      while (__p)
 800d3e8:	e03e      	b.n	800d468 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa8>
	{
	  __node_ptr __next = __p->_M_next();
 800d3ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3ec:	f7fc fda1 	bl	8009f32 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEELb0EE7_M_nextEv>
 800d3f0:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
 800d3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f4:	3304      	adds	r3, #4
 800d3f6:	68ba      	ldr	r2, [r7, #8]
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	f7fd f891 	bl	800a522 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS7_Lb0EEEj>
 800d400:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	009b      	lsls	r3, r3, #2
 800d406:	69fa      	ldr	r2, [r7, #28]
 800d408:	4413      	add	r3, r2
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d11a      	bne.n	800d446 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	689a      	ldr	r2, [r3, #8]
 800d414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d416:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d41c:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	69fa      	ldr	r2, [r7, #28]
 800d424:	4413      	add	r3, r2
 800d426:	68fa      	ldr	r2, [r7, #12]
 800d428:	3208      	adds	r2, #8
 800d42a:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 800d42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d005      	beq.n	800d440 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 800d434:	6a3b      	ldr	r3, [r7, #32]
 800d436:	009b      	lsls	r3, r3, #2
 800d438:	69fa      	ldr	r2, [r7, #28]
 800d43a:	4413      	add	r3, r2
 800d43c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d43e:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	623b      	str	r3, [r7, #32]
 800d444:	e00e      	b.n	800d464 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	009b      	lsls	r3, r3, #2
 800d44a:	69fa      	ldr	r2, [r7, #28]
 800d44c:	4413      	add	r3, r2
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d454:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	009b      	lsls	r3, r3, #2
 800d45a:	69fa      	ldr	r2, [r7, #28]
 800d45c:	4413      	add	r3, r2
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d462:	601a      	str	r2, [r3, #0]
	    }

	  __p = __next;
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	627b      	str	r3, [r7, #36]	; 0x24
      while (__p)
 800d468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d1bd      	bne.n	800d3ea <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x2a>
	}

      _M_deallocate_buckets();
 800d46e:	68f8      	ldr	r0, [r7, #12]
 800d470:	f7fc fced 	bl	8009e4e <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	68ba      	ldr	r2, [r7, #8]
 800d478:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	69fa      	ldr	r2, [r7, #28]
 800d47e:	601a      	str	r2, [r3, #0]
    }
 800d480:	bf00      	nop
 800d482:	3728      	adds	r7, #40	; 0x28
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800d488:	b580      	push	{r7, lr}
 800d48a:	b084      	sub	sp, #16
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800d490:	4b0a      	ldr	r3, [pc, #40]	; (800d4bc <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 800d492:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 fb0b 	bl	800dab0 <_ZNSt16allocator_traitsISaI18CurrentVoltagePairEE8max_sizeERKS1_>
 800d49a:	4603      	mov	r3, r0
 800d49c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800d49e:	f107 0208 	add.w	r2, r7, #8
 800d4a2:	f107 030c 	add.w	r3, r7, #12
 800d4a6:	4611      	mov	r1, r2
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7fa fcd1 	bl	8007e50 <_ZSt3minIjERKT_S2_S2_>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	681b      	ldr	r3, [r3, #0]
      }
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	02aaaaaa 	.word	0x02aaaaaa

0800d4c0 <_ZNK9__gnu_cxx13new_allocatorI18CurrentVoltagePairE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800d4c8:	4b03      	ldr	r3, [pc, #12]	; (800d4d8 <_ZNK9__gnu_cxx13new_allocatorI18CurrentVoltagePairE11_M_max_sizeEv+0x18>)
      }
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	370c      	adds	r7, #12
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop
 800d4d8:	02aaaaaa 	.word	0x02aaaaaa

0800d4dc <_ZN9__gnu_cxx13new_allocatorI18CurrentVoltagePairE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	60f8      	str	r0, [r7, #12]
 800d4e4:	60b9      	str	r1, [r7, #8]
 800d4e6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800d4e8:	68f8      	ldr	r0, [r7, #12]
 800d4ea:	f7ff ffe9 	bl	800d4c0 <_ZNK9__gnu_cxx13new_allocatorI18CurrentVoltagePairE11_M_max_sizeEv>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	bf8c      	ite	hi
 800d4f6:	2301      	movhi	r3, #1
 800d4f8:	2300      	movls	r3, #0
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	bf14      	ite	ne
 800d500:	2301      	movne	r3, #1
 800d502:	2300      	moveq	r3, #0
 800d504:	b2db      	uxtb	r3, r3
 800d506:	2b00      	cmp	r3, #0
 800d508:	d007      	beq.n	800d51a <_ZN9__gnu_cxx13new_allocatorI18CurrentVoltagePairE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	4a0a      	ldr	r2, [pc, #40]	; (800d538 <_ZN9__gnu_cxx13new_allocatorI18CurrentVoltagePairE8allocateEjPKv+0x5c>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d901      	bls.n	800d516 <_ZN9__gnu_cxx13new_allocatorI18CurrentVoltagePairE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800d512:	f00d fc65 	bl	801ade0 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800d516:	f00d fc53 	bl	801adc0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d51a:	68ba      	ldr	r2, [r7, #8]
 800d51c:	4613      	mov	r3, r2
 800d51e:	005b      	lsls	r3, r3, #1
 800d520:	4413      	add	r3, r2
 800d522:	011b      	lsls	r3, r3, #4
 800d524:	4618      	mov	r0, r3
 800d526:	f00d fc25 	bl	801ad74 <_Znwj>
 800d52a:	4603      	mov	r3, r0
 800d52c:	bf00      	nop
      }
 800d52e:	4618      	mov	r0, r3
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	05555555 	.word	0x05555555

0800d53c <_ZSt12__relocate_aIP18CurrentVoltagePairS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800d53c:	b5b0      	push	{r4, r5, r7, lr}
 800d53e:	b084      	sub	sp, #16
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
 800d548:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f000 fabc 	bl	800dac8 <_ZSt12__niter_baseIP18CurrentVoltagePairET_S2_>
 800d550:	4604      	mov	r4, r0
 800d552:	68b8      	ldr	r0, [r7, #8]
 800d554:	f000 fab8 	bl	800dac8 <_ZSt12__niter_baseIP18CurrentVoltagePairET_S2_>
 800d558:	4605      	mov	r5, r0
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 fab4 	bl	800dac8 <_ZSt12__niter_baseIP18CurrentVoltagePairET_S2_>
 800d560:	4602      	mov	r2, r0
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	4629      	mov	r1, r5
 800d566:	4620      	mov	r0, r4
 800d568:	f000 fab9 	bl	800dade <_ZSt14__relocate_a_1IP18CurrentVoltagePairS1_SaIS0_EET0_T_S4_S3_RT1_>
 800d56c:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800d56e:	4618      	mov	r0, r3
 800d570:	3710      	adds	r7, #16
 800d572:	46bd      	mov	sp, r7
 800d574:	bdb0      	pop	{r4, r5, r7, pc}

0800d576 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhhEE7_M_addrEv>:
      _M_addr() noexcept
 800d576:	b480      	push	{r7}
 800d578:	b083      	sub	sp, #12
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800d57e:	687b      	ldr	r3, [r7, #4]
      }
 800d580:	4618      	mov	r0, r3
 800d582:	370c      	adds	r7, #12
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhhELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	4618      	mov	r0, r3
 800d598:	370c      	adds	r7, #12
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr

0800d5a2 <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800d5a2:	b480      	push	{r7}
 800d5a4:	b083      	sub	sp, #12
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800d5aa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	370c      	adds	r7, #12
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b8:	4770      	bx	lr

0800d5ba <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b084      	sub	sp, #16
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	60f8      	str	r0, [r7, #12]
 800d5c2:	60b9      	str	r1, [r7, #8]
 800d5c4:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800d5c6:	68f8      	ldr	r0, [r7, #12]
 800d5c8:	f7ff ffeb 	bl	800d5a2 <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	bf8c      	ite	hi
 800d5d4:	2301      	movhi	r3, #1
 800d5d6:	2300      	movls	r3, #0
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	bf14      	ite	ne
 800d5de:	2301      	movne	r3, #1
 800d5e0:	2300      	moveq	r3, #0
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d007      	beq.n	800d5f8 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5ee:	d301      	bcc.n	800d5f4 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800d5f0:	f00d fbf6 	bl	801ade0 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800d5f4:	f00d fbe4 	bl	801adc0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f00d fbb9 	bl	801ad74 <_Znwj>
 800d602:	4603      	mov	r3, r0
 800d604:	bf00      	nop
      }
 800d606:	4618      	mov	r0, r3
 800d608:	3710      	adds	r7, #16
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}

0800d60e <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800d60e:	b480      	push	{r7}
 800d610:	b083      	sub	sp, #12
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800d616:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 800d61a:	4618      	mov	r0, r3
 800d61c:	370c      	adds	r7, #12
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr

0800d626 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d626:	b580      	push	{r7, lr}
 800d628:	b084      	sub	sp, #16
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	60f8      	str	r0, [r7, #12]
 800d62e:	60b9      	str	r1, [r7, #8]
 800d630:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800d632:	68f8      	ldr	r0, [r7, #12]
 800d634:	f7ff ffeb 	bl	800d60e <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEE11_M_max_sizeEv>
 800d638:	4602      	mov	r2, r0
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	4293      	cmp	r3, r2
 800d63e:	bf8c      	ite	hi
 800d640:	2301      	movhi	r3, #1
 800d642:	2300      	movls	r3, #0
 800d644:	b2db      	uxtb	r3, r3
 800d646:	2b00      	cmp	r3, #0
 800d648:	bf14      	ite	ne
 800d64a:	2301      	movne	r3, #1
 800d64c:	2300      	moveq	r3, #0
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	2b00      	cmp	r3, #0
 800d652:	d007      	beq.n	800d664 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d65a:	d301      	bcc.n	800d660 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800d65c:	f00d fbc0 	bl	801ade0 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800d660:	f00d fbae 	bl	801adc0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	00db      	lsls	r3, r3, #3
 800d668:	4618      	mov	r0, r3
 800d66a:	f00d fb83 	bl	801ad74 <_Znwj>
 800d66e:	4603      	mov	r3, r0
 800d670:	bf00      	nop
      }
 800d672:	4618      	mov	r0, r3
 800d674:	3710      	adds	r7, #16
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800d67a:	b590      	push	{r4, r7, lr}
 800d67c:	b085      	sub	sp, #20
 800d67e:	af00      	add	r7, sp, #0
 800d680:	60f8      	str	r0, [r7, #12]
 800d682:	60b9      	str	r1, [r7, #8]
 800d684:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7ff f9ae 	bl	800c9e8 <_ZSt7forwardIRKSt4pairIKhhEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d68c:	4604      	mov	r4, r0
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	4619      	mov	r1, r3
 800d692:	2002      	movs	r0, #2
 800d694:	f7fa fb8d 	bl	8007db2 <_ZnwjPv>
 800d698:	4603      	mov	r3, r0
 800d69a:	461a      	mov	r2, r3
 800d69c:	4623      	mov	r3, r4
 800d69e:	881b      	ldrh	r3, [r3, #0]
 800d6a0:	8013      	strh	r3, [r2, #0]
 800d6a2:	bf00      	nop
 800d6a4:	3714      	adds	r7, #20
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd90      	pop	{r4, r7, pc}

0800d6aa <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800d6aa:	b580      	push	{r7, lr}
 800d6ac:	b084      	sub	sp, #16
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	60f8      	str	r0, [r7, #12]
 800d6b2:	60b9      	str	r1, [r7, #8]
 800d6b4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	00db      	lsls	r3, r3, #3
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	68b8      	ldr	r0, [r7, #8]
 800d6be:	f00d fb55 	bl	801ad6c <_ZdlPvj>
      }
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhhENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>:
      _M_hash() const { return __ebo_hash::_M_cget(); }
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7fd f8e0 	bl	800a896 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EE7_M_cgetEv>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3708      	adds	r7, #8
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKhhEE9_M_valptrEv>:
      _M_valptr() const noexcept
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f000 fa1d 	bl	800db2a <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKhhEE6_M_ptrEv>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3708      	adds	r7, #8
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}

0800d6fa <_ZSt3getILj0EKhhERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS5_>:
    get(const pair<_Tp1, _Tp2>& __in) noexcept
 800d6fa:	b580      	push	{r7, lr}
 800d6fc:	b082      	sub	sp, #8
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__const_get(__in); }
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 fa1d 	bl	800db42 <_ZNSt10__pair_getILj0EE11__const_getIKhhEERKT_RKSt4pairIS3_T0_E>
 800d708:	4603      	mov	r3, r0
 800d70a:	4618      	mov	r0, r3
 800d70c:	3708      	adds	r7, #8
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}

0800d712 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEE7destroyIS5_EEvPT_>:
	destroy(_Up* __p)
 800d712:	b480      	push	{r7}
 800d714:	b083      	sub	sp, #12
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
 800d71a:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800d71c:	bf00      	nop
 800d71e:	370c      	adds	r7, #12
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr

0800d728 <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEE10pointer_toERS5_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f000 fa11 	bl	800db58 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEPT_RS6_>
 800d736:	4603      	mov	r3, r0
 800d738:	4618      	mov	r0, r3
 800d73a:	3708      	adds	r7, #8
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEC1IS3_EERKSaIT_E>:
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 fa10 	bl	800db70 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEC1Ev>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4618      	mov	r0, r3
 800d754:	3708      	adds	r7, #8
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}

0800d75a <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKhhENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKS8_RKS6_>:
      _Hashtable_base(const _Hash& __hash, const _Equal& __eq)
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b084      	sub	sp, #16
 800d75e:	af00      	add	r7, sp, #0
 800d760:	60f8      	str	r0, [r7, #12]
 800d762:	60b9      	str	r1, [r7, #8]
 800d764:	607a      	str	r2, [r7, #4]
      : __hash_code_base(__hash), _EqualEBO(__eq)
 800d766:	68b9      	ldr	r1, [r7, #8]
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	f000 fa0c 	bl	800db86 <_ZNSt8__detail15_Hash_code_baseIhSt4pairIKhhENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKS6_>
 800d76e:	6879      	ldr	r1, [r7, #4]
 800d770:	68f8      	ldr	r0, [r7, #12]
 800d772:	f000 fa16 	bl	800dba2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EEC1IRKS2_EEOT_>
      { }
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	4618      	mov	r0, r3
 800d77a:	3710      	adds	r7, #16
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <_ZNSt27_Enable_default_constructorILb1ENSt8__detail15_Hash_node_baseEEC1ESt31_Enable_default_constructor_tag>:
    _Enable_default_constructor&
    operator=(_Enable_default_constructor&&) noexcept = default;

    // Can be used in other ctors.
    constexpr explicit
    _Enable_default_constructor(_Enable_default_constructor_tag) { }
 800d780:	b480      	push	{r7}
 800d782:	b083      	sub	sp, #12
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	7039      	strb	r1, [r7, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	4618      	mov	r0, r3
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>:
      _M_bucket_index(__hash_code __c) const
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	6839      	ldr	r1, [r7, #0]
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 fa06 	bl	800dbbc <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhhENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3708      	adds	r7, #8
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b086      	sub	sp, #24
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	60f8      	str	r0, [r7, #12]
 800d7c2:	60b9      	str	r1, [r7, #8]
 800d7c4:	607a      	str	r2, [r7, #4]
 800d7c6:	603b      	str	r3, [r7, #0]
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	68b9      	ldr	r1, [r7, #8]
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f000 fa06 	bl	800dbe0 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j>
 800d7d4:	6178      	str	r0, [r7, #20]
	if (__before_n)
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j+0x28>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	e000      	b.n	800d7e4 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j+0x2a>
	return nullptr;
 800d7e2:	2300      	movs	r3, #0
      }
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3718      	adds	r7, #24
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKhhELb0ELb0EEEbEC1IS4_bLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800d7f8:	68b8      	ldr	r0, [r7, #8]
 800d7fa:	f000 fa36 	bl	800dc6a <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKhhELb0ELb0EEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800d7fe:	4602      	mov	r2, r0
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6812      	ldr	r2, [r2, #0]
 800d804:	601a      	str	r2, [r3, #0]
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f7fe fb23 	bl	800be52 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800d80c:	4603      	mov	r3, r0
 800d80e:	781a      	ldrb	r2, [r3, #0]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	711a      	strb	r2, [r3, #4]
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	4618      	mov	r0, r3
 800d818:	3710      	adds	r7, #16
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNS4_10_Hash_nodeIS2_Lb0EEEPNS4_16_Hashtable_allocISaISI_EEE>:
	_Scoped_node(__node_ptr __n, __hashtable_alloc* __h)
 800d81e:	b480      	push	{r7}
 800d820:	b085      	sub	sp, #20
 800d822:	af00      	add	r7, sp, #0
 800d824:	60f8      	str	r0, [r7, #12]
 800d826:	60b9      	str	r1, [r7, #8]
 800d828:	607a      	str	r2, [r7, #4]
	: _M_h(__h), _M_node(__n) { }
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	601a      	str	r2, [r3, #0]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	68ba      	ldr	r2, [r7, #8]
 800d834:	605a      	str	r2, [r3, #4]
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	4618      	mov	r0, r3
 800d83a:	3714      	adds	r7, #20
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d007      	beq.n	800d864 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	685b      	ldr	r3, [r3, #4]
 800d85c:	4619      	mov	r1, r3
 800d85e:	4610      	mov	r0, r2
 800d860:	f7ff f954 	bl	800cb0c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhhELb0EEEEE18_M_deallocate_nodeEPS5_>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4618      	mov	r0, r3
 800d868:	3708      	adds	r7, #8
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS4_10_Hash_nodeIS2_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800d86e:	b590      	push	{r4, r7, lr}
 800d870:	b08d      	sub	sp, #52	; 0x34
 800d872:	af02      	add	r7, sp, #8
 800d874:	60f8      	str	r0, [r7, #12]
 800d876:	60b9      	str	r1, [r7, #8]
 800d878:	607a      	str	r2, [r7, #4]
 800d87a:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	3310      	adds	r3, #16
 800d880:	4618      	mov	r0, r3
 800d882:	f7fd f8dc 	bl	800aa3e <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 800d886:	4603      	mov	r3, r0
 800d888:	61fb      	str	r3, [r7, #28]
 800d88a:	f107 031c 	add.w	r3, r7, #28
 800d88e:	627b      	str	r3, [r7, #36]	; 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f103 0110 	add.w	r1, r3, #16
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	685a      	ldr	r2, [r3, #4]
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	68dc      	ldr	r4, [r3, #12]
 800d89e:	f107 0014 	add.w	r0, r7, #20
 800d8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a4:	9300      	str	r3, [sp, #0]
 800d8a6:	4623      	mov	r3, r4
 800d8a8:	f00d fb66 	bl	801af78 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 800d8ac:	7d3b      	ldrb	r3, [r7, #20]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d00a      	beq.n	800d8c8 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS4_10_Hash_nodeIS2_Lb0EEEj+0x5a>
	  _M_rehash(__do_rehash.second, __saved_state);
 800d8b2:	69bb      	ldr	r3, [r7, #24]
 800d8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f000 f9e1 	bl	800dc80 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__code);
 800d8be:	6879      	ldr	r1, [r7, #4]
 800d8c0:	68f8      	ldr	r0, [r7, #12]
 800d8c2:	f7ff ff69 	bl	800d798 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 800d8c6:	60b8      	str	r0, [r7, #8]
      this->_M_store_code(*__node, __code);
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	3304      	adds	r3, #4
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	68f8      	ldr	r0, [r7, #12]
 800d8d2:	f000 f9e4 	bl	800dc9e <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhhENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 800d8d6:	683a      	ldr	r2, [r7, #0]
 800d8d8:	68b9      	ldr	r1, [r7, #8]
 800d8da:	68f8      	ldr	r0, [r7, #12]
 800d8dc:	f000 f9eb 	bl	800dcb6 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS4_10_Hash_nodeIS2_Lb0EEE>
      ++_M_element_count;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	68db      	ldr	r3, [r3, #12]
 800d8e4:	1c5a      	adds	r2, r3, #1
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 800d8ea:	f107 0320 	add.w	r3, r7, #32
 800d8ee:	6839      	ldr	r1, [r7, #0]
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7fe fff9 	bl	800c8e8 <_ZNSt8__detail14_Node_iteratorISt4pairIKhhELb0ELb0EEC1EPNS_10_Hash_nodeIS3_Lb0EEE>
 800d8f6:	6a3b      	ldr	r3, [r7, #32]
    }
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	372c      	adds	r7, #44	; 0x2c
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd90      	pop	{r4, r7, pc}

0800d900 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKhhELb0ELb0EEEbEC1IRS4_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800d90c:	68b8      	ldr	r0, [r7, #8]
 800d90e:	f000 fa19 	bl	800dd44 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKhhELb0ELb0EEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800d912:	4602      	mov	r2, r0
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	6812      	ldr	r2, [r2, #0]
 800d918:	601a      	str	r2, [r3, #0]
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f7fe fa99 	bl	800be52 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800d920:	4603      	mov	r3, r0
 800d922:	781a      	ldrb	r2, [r3, #0]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	711a      	strb	r2, [r3, #4]
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	4618      	mov	r0, r3
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>:
      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
 800d932:	b480      	push	{r7}
 800d934:	b083      	sub	sp, #12
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
 800d93a:	6039      	str	r1, [r7, #0]
      { return true; }
 800d93c:	2301      	movs	r3, #1
 800d93e:	4618      	mov	r0, r3
 800d940:	370c      	adds	r7, #12
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr

0800d94a <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS4_EEENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
      _M_eq() const { return _EqualEBO::_M_cget(); }
 800d94a:	b580      	push	{r7, lr}
 800d94c:	b082      	sub	sp, #8
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 fa01 	bl	800dd5a <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EE7_M_cgetEv>
 800d958:	4603      	mov	r3, r0
 800d95a:	4618      	mov	r0, r3
 800d95c:	3708      	adds	r7, #8
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}

0800d962 <_ZNKSt8equal_toIhEclERKhS2_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 800d962:	b480      	push	{r7}
 800d964:	b085      	sub	sp, #20
 800d966:	af00      	add	r7, sp, #0
 800d968:	60f8      	str	r0, [r7, #12]
 800d96a:	60b9      	str	r1, [r7, #8]
 800d96c:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	781a      	ldrb	r2, [r3, #0]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	429a      	cmp	r2, r3
 800d978:	bf0c      	ite	eq
 800d97a:	2301      	moveq	r3, #1
 800d97c:	2300      	movne	r3, #0
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	4618      	mov	r0, r3
 800d982:	3714      	adds	r7, #20
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800d994:	4b03      	ldr	r3, [pc, #12]	; (800d9a4 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEE11_M_max_sizeEv+0x18>)
      }
 800d996:	4618      	mov	r0, r3
 800d998:	370c      	adds	r7, #12
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop
 800d9a4:	06666666 	.word	0x06666666

0800d9a8 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800d9b4:	68f8      	ldr	r0, [r7, #12]
 800d9b6:	f7ff ffe9 	bl	800d98c <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEE11_M_max_sizeEv>
 800d9ba:	4602      	mov	r2, r0
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	bf8c      	ite	hi
 800d9c2:	2301      	movhi	r3, #1
 800d9c4:	2300      	movls	r3, #0
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	bf14      	ite	ne
 800d9cc:	2301      	movne	r3, #1
 800d9ce:	2300      	moveq	r3, #0
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d007      	beq.n	800d9e6 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	4a0a      	ldr	r2, [pc, #40]	; (800da04 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEE8allocateEjPKv+0x5c>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d901      	bls.n	800d9e2 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800d9de:	f00d f9ff 	bl	801ade0 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800d9e2:	f00d f9ed 	bl	801adc0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d9e6:	68ba      	ldr	r2, [r7, #8]
 800d9e8:	4613      	mov	r3, r2
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	4413      	add	r3, r2
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f00d f9bf 	bl	801ad74 <_Znwj>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	bf00      	nop
      }
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3710      	adds	r7, #16
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
 800da02:	bf00      	nop
 800da04:	0ccccccc 	.word	0x0ccccccc

0800da08 <_ZNSt5tupleIJRKhEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	683a      	ldr	r2, [r7, #0]
 800da16:	4611      	mov	r1, r2
 800da18:	4618      	mov	r0, r3
 800da1a:	f000 f9a9 	bl	800dd70 <_ZNSt11_Tuple_implILj0EJRKhEEC1EOS2_>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	4618      	mov	r0, r3
 800da22:	3708      	adds	r7, #8
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS6_EEELb0EEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESG_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800da28:	b590      	push	{r4, r7, lr}
 800da2a:	b089      	sub	sp, #36	; 0x24
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]
 800da34:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f7ff f976 	bl	800cd28 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800da3c:	6838      	ldr	r0, [r7, #0]
 800da3e:	f7ff f97e 	bl	800cd3e <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800da42:	4602      	mov	r2, r0
 800da44:	f107 0318 	add.w	r3, r7, #24
 800da48:	4611      	mov	r1, r2
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7ff ffdc 	bl	800da08 <_ZNSt5tupleIJRKhEEC1EOS2_>
 800da50:	f107 0418 	add.w	r4, r7, #24
 800da54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da56:	f7ff f97d 	bl	800cd54 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	4619      	mov	r1, r3
 800da5e:	2010      	movs	r0, #16
 800da60:	f7fa f9a7 	bl	8007db2 <_ZnwjPv>
 800da64:	7f3b      	ldrb	r3, [r7, #28]
 800da66:	4622      	mov	r2, r4
 800da68:	7d39      	ldrb	r1, [r7, #20]
 800da6a:	f000 f991 	bl	800dd90 <_ZNSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS2_EEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 800da6e:	bf00      	nop
 800da70:	3724      	adds	r7, #36	; 0x24
 800da72:	46bd      	mov	sp, r7
 800da74:	bd90      	pop	{r4, r7, pc}

0800da76 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 800da76:	b580      	push	{r7, lr}
 800da78:	b082      	sub	sp, #8
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
 800da7e:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	2b01      	cmp	r3, #1
 800da84:	bf0c      	ite	eq
 800da86:	2301      	moveq	r3, #1
 800da88:	2300      	movne	r3, #0
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d005      	beq.n	800da9c <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	3318      	adds	r3, #24
 800da9a:	e005      	b.n	800daa8 <_ZNSt10_HashtableIhSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS3_EEESaIS6_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 800da9c:	6839      	ldr	r1, [r7, #0]
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 f98a 	bl	800ddb8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE19_M_allocate_bucketsEj>
 800daa4:	4603      	mov	r3, r0
 800daa6:	bf00      	nop
      }
 800daa8:	4618      	mov	r0, r3
 800daaa:	3708      	adds	r7, #8
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <_ZNSt16allocator_traitsISaI18CurrentVoltagePairEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f000 f9aa 	bl	800de12 <_ZNK9__gnu_cxx13new_allocatorI18CurrentVoltagePairE8max_sizeEv>
 800dabe:	4603      	mov	r3, r0
      }
 800dac0:	4618      	mov	r0, r3
 800dac2:	3708      	adds	r7, #8
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <_ZSt12__niter_baseIP18CurrentVoltagePairET_S2_>:
    __niter_base(_Iterator __it)
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
    { return __it; }
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	4618      	mov	r0, r3
 800dad4:	370c      	adds	r7, #12
 800dad6:	46bd      	mov	sp, r7
 800dad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dadc:	4770      	bx	lr

0800dade <_ZSt14__relocate_a_1IP18CurrentVoltagePairS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800dade:	b590      	push	{r4, r7, lr}
 800dae0:	b087      	sub	sp, #28
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	60f8      	str	r0, [r7, #12]
 800dae6:	60b9      	str	r1, [r7, #8]
 800dae8:	607a      	str	r2, [r7, #4]
 800daea:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800daf0:	e012      	b.n	800db18 <_ZSt14__relocate_a_1IP18CurrentVoltagePairS1_SaIS0_EET0_T_S4_S3_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800daf2:	6978      	ldr	r0, [r7, #20]
 800daf4:	f7fc fc96 	bl	800a424 <_ZSt11__addressofI18CurrentVoltagePairEPT_RS1_>
 800daf8:	4604      	mov	r4, r0
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	f7fc fc92 	bl	800a424 <_ZSt11__addressofI18CurrentVoltagePairEPT_RS1_>
 800db00:	4603      	mov	r3, r0
 800db02:	683a      	ldr	r2, [r7, #0]
 800db04:	4619      	mov	r1, r3
 800db06:	4620      	mov	r0, r4
 800db08:	f000 f98f 	bl	800de2a <_ZSt19__relocate_object_aI18CurrentVoltagePairS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	3330      	adds	r3, #48	; 0x30
 800db10:	60fb      	str	r3, [r7, #12]
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	3330      	adds	r3, #48	; 0x30
 800db16:	617b      	str	r3, [r7, #20]
 800db18:	68fa      	ldr	r2, [r7, #12]
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d1e8      	bne.n	800daf2 <_ZSt14__relocate_a_1IP18CurrentVoltagePairS1_SaIS0_EET0_T_S4_S3_RT1_+0x14>
      return __cur;
 800db20:	697b      	ldr	r3, [r7, #20]
    }
 800db22:	4618      	mov	r0, r3
 800db24:	371c      	adds	r7, #28
 800db26:	46bd      	mov	sp, r7
 800db28:	bd90      	pop	{r4, r7, pc}

0800db2a <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKhhEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b082      	sub	sp, #8
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 f994 	bl	800de60 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKhhEE7_M_addrEv>
 800db38:	4603      	mov	r3, r0
 800db3a:	4618      	mov	r0, r3
 800db3c:	3708      	adds	r7, #8
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}

0800db42 <_ZNSt10__pair_getILj0EE11__const_getIKhhEERKT_RKSt4pairIS3_T0_E>:
	__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept
 800db42:	b480      	push	{r7}
 800db44:	b083      	sub	sp, #12
 800db46:	af00      	add	r7, sp, #0
 800db48:	6078      	str	r0, [r7, #4]
	{ return __pair.first; }
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	4618      	mov	r0, r3
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr

0800db58 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEPT_RS6_>:
    addressof(_Tp& __r) noexcept
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f000 f988 	bl	800de76 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEPT_RS6_>
 800db66:	4603      	mov	r3, r0
 800db68:	4618      	mov	r0, r3
 800db6a:	3708      	adds	r7, #8
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	4618      	mov	r0, r3
 800db7c:	370c      	adds	r7, #12
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr

0800db86 <_ZNSt8__detail15_Hash_code_baseIhSt4pairIKhhENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKS6_>:
      _Hash_code_base(const _Hash& __hash) : __ebo_hash(__hash) { }
 800db86:	b580      	push	{r7, lr}
 800db88:	b082      	sub	sp, #8
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
 800db8e:	6039      	str	r1, [r7, #0]
 800db90:	6839      	ldr	r1, [r7, #0]
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 f97a 	bl	800de8c <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EEC1IRKS2_EEOT_>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	4618      	mov	r0, r3
 800db9c:	3708      	adds	r7, #8
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EEC1IRKS2_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 800dba2:	b580      	push	{r7, lr}
 800dba4:	b082      	sub	sp, #8
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	6078      	str	r0, [r7, #4]
 800dbaa:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 800dbac:	6838      	ldr	r0, [r7, #0]
 800dbae:	f000 f97a 	bl	800dea6 <_ZSt7forwardIRKSt8equal_toIhEEOT_RNSt16remove_referenceIS4_E4typeE>
	{ }
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3708      	adds	r7, #8
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhhENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>:
      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b086      	sub	sp, #24
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__c, __bkt_count); }
 800dbc8:	f107 0314 	add.w	r3, r7, #20
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	68b9      	ldr	r1, [r7, #8]
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7fb fe5e 	bl	8009892 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3718      	adds	r7, #24
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b086      	sub	sp, #24
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	60f8      	str	r0, [r7, #12]
 800dbe8:	60b9      	str	r1, [r7, #8]
 800dbea:	607a      	str	r2, [r7, #4]
 800dbec:	603b      	str	r3, [r7, #0]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	009b      	lsls	r3, r3, #2
 800dbf6:	4413      	add	r3, r2
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d101      	bne.n	800dc06 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x26>
	return nullptr;
 800dc02:	2300      	movs	r3, #0
 800dc04:	e02d      	b.n	800dc62 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x82>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	3304      	adds	r3, #4
 800dc10:	683a      	ldr	r2, [r7, #0]
 800dc12:	6879      	ldr	r1, [r7, #4]
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	f000 f951 	bl	800debc <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKhhENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS3_Lb0EEE>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d001      	beq.n	800dc24 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x44>
	    return __prev_p;
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	e01e      	b.n	800dc62 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x82>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d00c      	beq.n	800dc46 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x66>
 800dc2c:	6938      	ldr	r0, [r7, #16]
 800dc2e:	f7fe fc0a 	bl	800c446 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhhELb0EE7_M_nextEv>
 800dc32:	4603      	mov	r3, r0
 800dc34:	3304      	adds	r3, #4
 800dc36:	4619      	mov	r1, r3
 800dc38:	68f8      	ldr	r0, [r7, #12]
 800dc3a:	f7fe fc10 	bl	800c45e <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS4_16_Hash_node_valueIS2_Lb0EEE>
 800dc3e:	4602      	mov	r2, r0
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d001      	beq.n	800dc4a <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x6a>
 800dc46:	2301      	movs	r3, #1
 800dc48:	e000      	b.n	800dc4c <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x6c>
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d106      	bne.n	800dc5e <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x7e>
	  __prev_p = __p;
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 800dc54:	6938      	ldr	r0, [r7, #16]
 800dc56:	f7fe fbf6 	bl	800c446 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhhELb0EE7_M_nextEv>
 800dc5a:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 800dc5c:	e7d6      	b.n	800dc0c <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x2c>
	    break;
 800dc5e:	bf00      	nop
      return nullptr;
 800dc60:	2300      	movs	r3, #0
    }
 800dc62:	4618      	mov	r0, r3
 800dc64:	3718      	adds	r7, #24
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}

0800dc6a <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKhhELb0ELb0EEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800dc6a:	b480      	push	{r7}
 800dc6c:	b083      	sub	sp, #12
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	4618      	mov	r0, r3
 800dc76:	370c      	adds	r7, #12
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr

0800dc80 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	607a      	str	r2, [r7, #4]
	  _M_rehash_aux(__bkt_count, __unique_keys{});
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	68b9      	ldr	r1, [r7, #8]
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f000 f940 	bl	800df16 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
    }
 800dc96:	bf00      	nop
 800dc98:	3710      	adds	r7, #16
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhhENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>:
      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
 800dc9e:	b480      	push	{r7}
 800dca0:	b085      	sub	sp, #20
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	60f8      	str	r0, [r7, #12]
 800dca6:	60b9      	str	r1, [r7, #8]
 800dca8:	607a      	str	r2, [r7, #4]
      { }
 800dcaa:	bf00      	nop
 800dcac:	3714      	adds	r7, #20
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS4_10_Hash_nodeIS2_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800dcb6:	b5b0      	push	{r4, r5, r7, lr}
 800dcb8:	b084      	sub	sp, #16
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	60f8      	str	r0, [r7, #12]
 800dcbe:	60b9      	str	r1, [r7, #8]
 800dcc0:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	4413      	add	r3, r2
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d011      	beq.n	800dcf6 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS4_10_Hash_nodeIS2_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	009b      	lsls	r3, r3, #2
 800dcda:	4413      	add	r3, r2
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	681a      	ldr	r2, [r3, #0]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	009b      	lsls	r3, r3, #2
 800dcec:	4413      	add	r3, r2
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	601a      	str	r2, [r3, #0]
    }
 800dcf4:	e022      	b.n	800dd3c <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS4_10_Hash_nodeIS2_Lb0EEE+0x86>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	689a      	ldr	r2, [r3, #8]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	687a      	ldr	r2, [r7, #4]
 800dd02:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d00f      	beq.n	800dd2c <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS4_10_Hash_nodeIS2_Lb0EEE+0x76>
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
 800dd0c:	687c      	ldr	r4, [r7, #4]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681d      	ldr	r5, [r3, #0]
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f7fe fb97 	bl	800c446 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhhELb0EE7_M_nextEv>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	3304      	adds	r3, #4
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	68f8      	ldr	r0, [r7, #12]
 800dd20:	f7fe fb9d 	bl	800c45e <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS4_16_Hash_node_valueIS2_Lb0EEE>
 800dd24:	4603      	mov	r3, r0
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	442b      	add	r3, r5
 800dd2a:	601c      	str	r4, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	4413      	add	r3, r2
 800dd36:	68fa      	ldr	r2, [r7, #12]
 800dd38:	3208      	adds	r2, #8
 800dd3a:	601a      	str	r2, [r3, #0]
    }
 800dd3c:	bf00      	nop
 800dd3e:	3710      	adds	r7, #16
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bdb0      	pop	{r4, r5, r7, pc}

0800dd44 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKhhELb0ELb0EEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	370c      	adds	r7, #12
 800dd52:	46bd      	mov	sp, r7
 800dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd58:	4770      	bx	lr

0800dd5a <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 800dd5a:	b480      	push	{r7}
 800dd5c:	b083      	sub	sp, #12
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	4618      	mov	r0, r3
 800dd66:	370c      	adds	r7, #12
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr

0800dd70 <_ZNSt11_Tuple_implILj0EJRKhEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	683a      	ldr	r2, [r7, #0]
 800dd7e:	6812      	ldr	r2, [r2, #0]
 800dd80:	601a      	str	r2, [r3, #0]
      { }
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	4618      	mov	r0, r3
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr

0800dd90 <_ZNSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS2_EEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 800dd90:	b5b0      	push	{r4, r5, r7, lr}
 800dd92:	b086      	sub	sp, #24
 800dd94:	af02      	add	r7, sp, #8
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	7239      	strb	r1, [r7, #8]
 800dd9a:	607a      	str	r2, [r7, #4]
 800dd9c:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800dd9e:	463a      	mov	r2, r7
 800dda0:	f88d 4000 	strb.w	r4, [sp]
 800dda4:	462b      	mov	r3, r5
 800dda6:	6879      	ldr	r1, [r7, #4]
 800dda8:	68f8      	ldr	r0, [r7, #12]
 800ddaa:	f000 f918 	bl	800dfde <_ZNSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS2_EEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3710      	adds	r7, #16
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bdb0      	pop	{r4, r5, r7, pc}

0800ddb8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 800ddb8:	b590      	push	{r4, r7, lr}
 800ddba:	b087      	sub	sp, #28
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
      __buckets_alloc_type __alloc(_M_node_allocator());
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f7fc f952 	bl	800a06c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS5_EEELb0EEEEE17_M_node_allocatorEv>
 800ddc8:	4602      	mov	r2, r0
 800ddca:	f107 030c 	add.w	r3, r7, #12
 800ddce:	4611      	mov	r1, r2
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7fc fb7e 	bl	800a4d2 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKhSt6vectorI18CurrentVoltagePairSaIS8_EEELb0EEEEERKSaIT_E>
      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
 800ddd6:	f107 030c 	add.w	r3, r7, #12
 800ddda:	6839      	ldr	r1, [r7, #0]
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7ff f923 	bl	800d028 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 800dde2:	6178      	str	r0, [r7, #20]
      __buckets_ptr __p = std::__to_address(__ptr);
 800dde4:	6978      	ldr	r0, [r7, #20]
 800dde6:	f7ff f92e 	bl	800d046 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 800ddea:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	009b      	lsls	r3, r3, #2
 800ddf0:	693a      	ldr	r2, [r7, #16]
 800ddf2:	4610      	mov	r0, r2
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	f010 fdfa 	bl	801e9f0 <memset>
      return __p;
 800ddfc:	693c      	ldr	r4, [r7, #16]
    }
 800ddfe:	f107 030c 	add.w	r3, r7, #12
 800de02:	4618      	mov	r0, r3
 800de04:	f7fc fb72 	bl	800a4ec <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 800de08:	4623      	mov	r3, r4
    }
 800de0a:	4618      	mov	r0, r3
 800de0c:	371c      	adds	r7, #28
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd90      	pop	{r4, r7, pc}

0800de12 <_ZNK9__gnu_cxx13new_allocatorI18CurrentVoltagePairE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800de12:	b580      	push	{r7, lr}
 800de14:	b082      	sub	sp, #8
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f7ff fb50 	bl	800d4c0 <_ZNK9__gnu_cxx13new_allocatorI18CurrentVoltagePairE11_M_max_sizeEv>
 800de20:	4603      	mov	r3, r0
 800de22:	4618      	mov	r0, r3
 800de24:	3708      	adds	r7, #8
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}

0800de2a <_ZSt19__relocate_object_aI18CurrentVoltagePairS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b084      	sub	sp, #16
 800de2e:	af00      	add	r7, sp, #0
 800de30:	60f8      	str	r0, [r7, #12]
 800de32:	60b9      	str	r1, [r7, #8]
 800de34:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800de36:	68b8      	ldr	r0, [r7, #8]
 800de38:	f7fe fa56 	bl	800c2e8 <_ZSt4moveIR18CurrentVoltagePairEONSt16remove_referenceIT_E4typeEOS3_>
 800de3c:	4603      	mov	r3, r0
 800de3e:	461a      	mov	r2, r3
 800de40:	68f9      	ldr	r1, [r7, #12]
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f7fe fd77 	bl	800c936 <_ZNSt16allocator_traitsISaI18CurrentVoltagePairEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800de48:	68b8      	ldr	r0, [r7, #8]
 800de4a:	f7fc faeb 	bl	800a424 <_ZSt11__addressofI18CurrentVoltagePairEPT_RS1_>
 800de4e:	4603      	mov	r3, r0
 800de50:	4619      	mov	r1, r3
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f7fe fd3b 	bl	800c8ce <_ZNSt16allocator_traitsISaI18CurrentVoltagePairEE7destroyIS0_EEvRS1_PT_>
    }
 800de58:	bf00      	nop
 800de5a:	3710      	adds	r7, #16
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKhhEE7_M_addrEv>:
      _M_addr() const noexcept
 800de60:	b480      	push	{r7}
 800de62:	b083      	sub	sp, #12
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 800de68:	687b      	ldr	r3, [r7, #4]
      }
 800de6a:	4618      	mov	r0, r3
 800de6c:	370c      	adds	r7, #12
 800de6e:	46bd      	mov	sp, r7
 800de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de74:	4770      	bx	lr

0800de76 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKhhELb0EEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800de76:	b480      	push	{r7}
 800de78:	b083      	sub	sp, #12
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4618      	mov	r0, r3
 800de82:	370c      	adds	r7, #12
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EEC1IRKS2_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 800de96:	6838      	ldr	r0, [r7, #0]
 800de98:	f000 f8c3 	bl	800e022 <_ZSt7forwardIRKSt4hashIhEEOT_RNSt16remove_referenceIS4_E4typeE>
	{ }
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	4618      	mov	r0, r3
 800dea0:	3708      	adds	r7, #8
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <_ZSt7forwardIRKSt8equal_toIhEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800dea6:	b480      	push	{r7}
 800dea8:	b083      	sub	sp, #12
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	4618      	mov	r0, r3
 800deb2:	370c      	adds	r7, #12
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKhhENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS3_Lb0EEE>:
      _M_equals(const _Key& __k, __hash_code __c,
 800debc:	b590      	push	{r4, r7, lr}
 800debe:	b087      	sub	sp, #28
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	607a      	str	r2, [r7, #4]
 800dec8:	603b      	str	r3, [r7, #0]
	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 800deca:	6839      	ldr	r1, [r7, #0]
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 f8b3 	bl	800e038 <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKhhENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d019      	beq.n	800df0c <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKhhENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS3_Lb0EEE+0x50>
 800ded8:	68f8      	ldr	r0, [r7, #12]
 800deda:	f000 f8b9 	bl	800e050 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKhhENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 800dede:	4604      	mov	r4, r0
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7ff f90a 	bl	800d0fc <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKhhEE4_M_vEv>
 800dee8:	4602      	mov	r2, r0
 800deea:	f107 0314 	add.w	r3, r7, #20
 800deee:	4611      	mov	r1, r2
 800def0:	4618      	mov	r0, r3
 800def2:	f7ff f90f 	bl	800d114 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKhhEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS7_>
 800def6:	4603      	mov	r3, r0
 800def8:	461a      	mov	r2, r3
 800defa:	68b9      	ldr	r1, [r7, #8]
 800defc:	4620      	mov	r0, r4
 800defe:	f7ff fd30 	bl	800d962 <_ZNKSt8equal_toIhEclERKhS2_>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d001      	beq.n	800df0c <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKhhENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS3_Lb0EEE+0x50>
 800df08:	2301      	movs	r3, #1
 800df0a:	e000      	b.n	800df0e <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKhhENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS3_Lb0EEE+0x52>
 800df0c:	2300      	movs	r3, #0
      }
 800df0e:	4618      	mov	r0, r3
 800df10:	371c      	adds	r7, #28
 800df12:	46bd      	mov	sp, r7
 800df14:	bd90      	pop	{r4, r7, pc}

0800df16 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800df16:	b580      	push	{r7, lr}
 800df18:	b08a      	sub	sp, #40	; 0x28
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	60f8      	str	r0, [r7, #12]
 800df1e:	60b9      	str	r1, [r7, #8]
 800df20:	713a      	strb	r2, [r7, #4]
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
 800df22:	68b9      	ldr	r1, [r7, #8]
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f7fe fa2a 	bl	800c37e <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 800df2a:	61f8      	str	r0, [r7, #28]
      __node_ptr __p = _M_begin();
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f7fe fa43 	bl	800c3b8 <_ZNKSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 800df32:	6278      	str	r0, [r7, #36]	; 0x24
      _M_before_begin._M_nxt = nullptr;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2200      	movs	r2, #0
 800df38:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 800df3a:	2300      	movs	r3, #0
 800df3c:	623b      	str	r3, [r7, #32]
      while (__p)
 800df3e:	e03e      	b.n	800dfbe <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa8>
	  __node_ptr __next = __p->_M_next();
 800df40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df42:	f7fe fa80 	bl	800c446 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhhELb0EE7_M_nextEv>
 800df46:	61b8      	str	r0, [r7, #24]
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
 800df48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4a:	3304      	adds	r3, #4
 800df4c:	68ba      	ldr	r2, [r7, #8]
 800df4e:	4619      	mov	r1, r3
 800df50:	68f8      	ldr	r0, [r7, #12]
 800df52:	f7fe fdb9 	bl	800cac8 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKhhENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS3_Lb0EEEj>
 800df56:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	69fa      	ldr	r2, [r7, #28]
 800df5e:	4413      	add	r3, r2
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d11a      	bne.n	800df9c <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	      __p->_M_nxt = _M_before_begin._M_nxt;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	689a      	ldr	r2, [r3, #8]
 800df6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6c:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df72:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	69fa      	ldr	r2, [r7, #28]
 800df7a:	4413      	add	r3, r2
 800df7c:	68fa      	ldr	r2, [r7, #12]
 800df7e:	3208      	adds	r2, #8
 800df80:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d005      	beq.n	800df96 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 800df8a:	6a3b      	ldr	r3, [r7, #32]
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	69fa      	ldr	r2, [r7, #28]
 800df90:	4413      	add	r3, r2
 800df92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df94:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	623b      	str	r3, [r7, #32]
 800df9a:	e00e      	b.n	800dfba <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	69fa      	ldr	r2, [r7, #28]
 800dfa2:	4413      	add	r3, r2
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	681a      	ldr	r2, [r3, #0]
 800dfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfaa:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	009b      	lsls	r3, r3, #2
 800dfb0:	69fa      	ldr	r2, [r7, #28]
 800dfb2:	4413      	add	r3, r2
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfb8:	601a      	str	r2, [r3, #0]
	  __p = __next;
 800dfba:	69bb      	ldr	r3, [r7, #24]
 800dfbc:	627b      	str	r3, [r7, #36]	; 0x24
      while (__p)
 800dfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d1bd      	bne.n	800df40 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x2a>
      _M_deallocate_buckets();
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f7fe f834 	bl	800c032 <_ZNSt10_HashtableIhSt4pairIKhhESaIS2_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	68ba      	ldr	r2, [r7, #8]
 800dfce:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	69fa      	ldr	r2, [r7, #28]
 800dfd4:	601a      	str	r2, [r3, #0]
    }
 800dfd6:	bf00      	nop
 800dfd8:	3728      	adds	r7, #40	; 0x28
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <_ZNSt4pairIKhSt6vectorI18CurrentVoltagePairSaIS2_EEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 800dfde:	b580      	push	{r7, lr}
 800dfe0:	b084      	sub	sp, #16
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	60f8      	str	r0, [r7, #12]
 800dfe6:	60b9      	str	r1, [r7, #8]
 800dfe8:	607a      	str	r2, [r7, #4]
 800dfea:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800dfec:	68b8      	ldr	r0, [r7, #8]
 800dfee:	f000 f83b 	bl	800e068 <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 800dff2:	4603      	mov	r3, r0
 800dff4:	4618      	mov	r0, r3
 800dff6:	f000 f844 	bl	800e082 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800dffa:	4603      	mov	r3, r0
 800dffc:	781a      	ldrb	r2, [r3, #0]
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	3304      	adds	r3, #4
 800e006:	2200      	movs	r2, #0
 800e008:	601a      	str	r2, [r3, #0]
 800e00a:	605a      	str	r2, [r3, #4]
 800e00c:	609a      	str	r2, [r3, #8]
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	3304      	adds	r3, #4
 800e012:	4618      	mov	r0, r3
 800e014:	f7fb fc7d 	bl	8009912 <_ZNSt6vectorI18CurrentVoltagePairSaIS0_EEC1Ev>
      { }
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	4618      	mov	r0, r3
 800e01c:	3710      	adds	r7, #16
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}

0800e022 <_ZSt7forwardIRKSt4hashIhEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e022:	b480      	push	{r7}
 800e024:	b083      	sub	sp, #12
 800e026:	af00      	add	r7, sp, #0
 800e028:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	4618      	mov	r0, r3
 800e02e:	370c      	adds	r7, #12
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr

0800e038 <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKhhENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>:
      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
      { return true; }
 800e042:	2301      	movs	r3, #1
 800e044:	4618      	mov	r0, r3
 800e046:	370c      	adds	r7, #12
 800e048:	46bd      	mov	sp, r7
 800e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04e:	4770      	bx	lr

0800e050 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKhhENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
      _M_eq() const { return _EqualEBO::_M_cget(); }
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f7ff fe7e 	bl	800dd5a <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EE7_M_cgetEv>
 800e05e:	4603      	mov	r3, r0
 800e060:	4618      	mov	r0, r3
 800e062:	3708      	adds	r7, #8
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	4618      	mov	r0, r3
 800e074:	f000 f810 	bl	800e098 <_ZSt12__get_helperILj0ERKhJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 800e078:	4603      	mov	r3, r0
 800e07a:	4618      	mov	r0, r3
 800e07c:	3708      	adds	r7, #8
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}

0800e082 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e082:	b480      	push	{r7}
 800e084:	b083      	sub	sp, #12
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4618      	mov	r0, r3
 800e08e:	370c      	adds	r7, #12
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr

0800e098 <_ZSt12__get_helperILj0ERKhJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 f805 	bl	800e0b0 <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f000 f805 	bl	800e0ca <_ZNSt10_Head_baseILj0ERKhLb0EE7_M_headERS2_>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3708      	adds	r7, #8
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}

0800e0ca <_ZNSt10_Head_baseILj0ERKhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e0ca:	b480      	push	{r7}
 800e0cc:	b083      	sub	sp, #12
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	6078      	str	r0, [r7, #4]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	370c      	adds	r7, #12
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e0:	4770      	bx	lr

0800e0e2 <_ZN10DataPacketD1Ev>:
struct DataPacket {
 800e0e2:	b580      	push	{r7, lr}
 800e0e4:	b082      	sub	sp, #8
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	6078      	str	r0, [r7, #4]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	3358      	adds	r3, #88	; 0x58
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f00d f964 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	333c      	adds	r3, #60	; 0x3c
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7fb fd0e 	bl	8009b1a <_ZNSt13unordered_mapIhdSt4hashIhESt8equal_toIhESaISt4pairIKhdEEED1Ev>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	3320      	adds	r3, #32
 800e102:	4618      	mov	r0, r3
 800e104:	f7fb fc87 	bl	8009a16 <_ZNSt13unordered_mapIhSt6vectorI18CurrentVoltagePairSaIS1_EESt4hashIhESt8equal_toIhESaISt4pairIKhS3_EEED1Ev>
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	4618      	mov	r0, r3
 800e10c:	3708      	adds	r7, #8
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}

0800e112 <_ZN5ESP32D1Ev>:
class ESP32 {
 800e112:	b580      	push	{r7, lr}
 800e114:	b082      	sub	sp, #8
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	3304      	adds	r3, #4
 800e11e:	4618      	mov	r0, r3
 800e120:	f7f9 feb6 	bl	8007e90 <_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEED1Ev>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	4618      	mov	r0, r3
 800e128:	3708      	adds	r7, #8
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <_ZN8SelectorD1Ev>:
class Selector {
 800e12e:	b580      	push	{r7, lr}
 800e130:	b082      	sub	sp, #8
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	4618      	mov	r0, r3
 800e13a:	f7fc fc9c 	bl	800aa76 <_ZNSt13unordered_mapIhhSt4hashIhESt8equal_toIhESaISt4pairIKhhEEED1Ev>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	4618      	mov	r0, r3
 800e142:	3708      	adds	r7, #8
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <_ZN6LoggerD1Ev>:
class Logger {
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	3308      	adds	r3, #8
 800e154:	4618      	mov	r0, r3
 800e156:	f00d f931 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	4618      	mov	r0, r3
 800e15e:	3708      	adds	r7, #8
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800e164:	b590      	push	{r4, r7, lr}
 800e166:	b0a7      	sub	sp, #156	; 0x9c
 800e168:	af06      	add	r7, sp, #24
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2b01      	cmp	r3, #1
 800e172:	f040 80ce 	bne.w	800e312 <_Z41__static_initialization_and_destruction_0ii+0x1ae>
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e17c:	4293      	cmp	r3, r2
 800e17e:	f040 80c8 	bne.w	800e312 <_Z41__static_initialization_and_destruction_0ii+0x1ae>
const std::string ESP_WIFI_OK = "WIFI GOT IP\r\n";
 800e182:	f107 0308 	add.w	r3, r7, #8
 800e186:	4618      	mov	r0, r3
 800e188:	f00c fe14 	bl	801adb4 <_ZNSaIcEC1Ev>
 800e18c:	f107 0308 	add.w	r3, r7, #8
 800e190:	461a      	mov	r2, r3
 800e192:	4970      	ldr	r1, [pc, #448]	; (800e354 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 800e194:	4870      	ldr	r0, [pc, #448]	; (800e358 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 800e196:	f7fa faf4 	bl	8008782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800e19a:	f107 0308 	add.w	r3, r7, #8
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f00c fe0c 	bl	801adbc <_ZNSaIcED1Ev>
const std::string ESP_API_HEADER = "x-api-key: test";
 800e1a4:	f107 030c 	add.w	r3, r7, #12
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f00c fe03 	bl	801adb4 <_ZNSaIcEC1Ev>
 800e1ae:	f107 030c 	add.w	r3, r7, #12
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	4969      	ldr	r1, [pc, #420]	; (800e35c <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800e1b6:	486a      	ldr	r0, [pc, #424]	; (800e360 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 800e1b8:	f7fa fae3 	bl	8008782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800e1bc:	f107 030c 	add.w	r3, r7, #12
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f00c fdfb 	bl	801adbc <_ZNSaIcED1Ev>
std::unordered_map<uint8_t, uint8_t> panels = {
 800e1c6:	f107 0318 	add.w	r3, r7, #24
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	601a      	str	r2, [r3, #0]
 800e1ce:	605a      	str	r2, [r3, #4]
 800e1d0:	811a      	strh	r2, [r3, #8]
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	76bb      	strb	r3, [r7, #26]
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	76fb      	strb	r3, [r7, #27]
 800e1da:	2302      	movs	r3, #2
 800e1dc:	773b      	strb	r3, [r7, #28]
 800e1de:	2302      	movs	r3, #2
 800e1e0:	777b      	strb	r3, [r7, #29]
 800e1e2:	2303      	movs	r3, #3
 800e1e4:	77bb      	strb	r3, [r7, #30]
 800e1e6:	2303      	movs	r3, #3
 800e1e8:	77fb      	strb	r3, [r7, #31]
 800e1ea:	2304      	movs	r3, #4
 800e1ec:	f887 3020 	strb.w	r3, [r7, #32]
 800e1f0:	2304      	movs	r3, #4
 800e1f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800e1f6:	f107 0318 	add.w	r3, r7, #24
 800e1fa:	613b      	str	r3, [r7, #16]
 800e1fc:	2305      	movs	r3, #5
 800e1fe:	617b      	str	r3, [r7, #20]
 800e200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e204:	4618      	mov	r0, r3
 800e206:	f7fd fdbe 	bl	800bd86 <_ZNSaISt4pairIKhhEEC1Ev>
 800e20a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e20e:	9302      	str	r3, [sp, #8]
 800e210:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e214:	9301      	str	r3, [sp, #4]
 800e216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e21a:	9300      	str	r3, [sp, #0]
 800e21c:	2300      	movs	r3, #0
 800e21e:	f107 0210 	add.w	r2, r7, #16
 800e222:	ca06      	ldmia	r2, {r1, r2}
 800e224:	484f      	ldr	r0, [pc, #316]	; (800e364 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 800e226:	f7fd fdc6 	bl	800bdb6 <_ZNSt13unordered_mapIhhSt4hashIhESt8equal_toIhESaISt4pairIKhhEEEC1ESt16initializer_listIS6_EjRKS1_RKS3_RKS7_>
 800e22a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fd fdb5 	bl	800bd9e <_ZNSaISt4pairIKhhEED1Ev>
Logger logger(huart4, LogLevel::Debug);
 800e234:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e238:	4618      	mov	r0, r3
 800e23a:	f00c fdbb 	bl	801adb4 <_ZNSaIcEC1Ev>
 800e23e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e242:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e246:	4948      	ldr	r1, [pc, #288]	; (800e368 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 800e248:	4618      	mov	r0, r3
 800e24a:	f7fa fa9a 	bl	8008782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800e24e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e252:	2200      	movs	r2, #0
 800e254:	4945      	ldr	r1, [pc, #276]	; (800e36c <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800e256:	4846      	ldr	r0, [pc, #280]	; (800e370 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 800e258:	f7fc fc4b 	bl	800aaf2 <_ZN6LoggerC1ER20__UART_HandleTypeDef8LogLevelNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800e25c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e260:	4618      	mov	r0, r3
 800e262:	f00d f8ab 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e266:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e26a:	4618      	mov	r0, r3
 800e26c:	f00c fda6 	bl	801adbc <_ZNSaIcED1Ev>
SHT30 sht(hi2c1);
 800e270:	4940      	ldr	r1, [pc, #256]	; (800e374 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 800e272:	4841      	ldr	r0, [pc, #260]	; (800e378 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 800e274:	f7fc fbd4 	bl	800aa20 <_ZN5SHT30C1ER17I2C_HandleTypeDef>
MPL3115A2 pressure_sensor(hi2c2);
 800e278:	4940      	ldr	r1, [pc, #256]	; (800e37c <_Z41__static_initialization_and_destruction_0ii+0x218>)
 800e27a:	4841      	ldr	r0, [pc, #260]	; (800e380 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 800e27c:	f7fc fcb2 	bl	800abe4 <_ZN9MPL3115A2C1ER17I2C_HandleTypeDef>
Selector selector(panels, 7U, {GPIOD, GPIO_PIN_12}, {GPIOD, GPIO_PIN_13}, {GPIOD, GPIO_PIN_14});
 800e280:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e284:	4937      	ldr	r1, [pc, #220]	; (800e364 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 800e286:	4618      	mov	r0, r3
 800e288:	f7fc fbe5 	bl	800aa56 <_ZNSt13unordered_mapIhhSt4hashIhESt8equal_toIhESaISt4pairIKhhEEEC1ERKS8_>
 800e28c:	4a3d      	ldr	r2, [pc, #244]	; (800e384 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 800e28e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e292:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e296:	e883 0003 	stmia.w	r3, {r0, r1}
 800e29a:	4a3b      	ldr	r2, [pc, #236]	; (800e388 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 800e29c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800e2a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e2a4:	e883 0003 	stmia.w	r3, {r0, r1}
 800e2a8:	4a38      	ldr	r2, [pc, #224]	; (800e38c <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800e2aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800e2ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e2b2:	e883 0003 	stmia.w	r3, {r0, r1}
 800e2b6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800e2ba:	aa03      	add	r2, sp, #12
 800e2bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800e2c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e2c4:	e882 0003 	stmia.w	r2, {r0, r1}
 800e2c8:	aa01      	add	r2, sp, #4
 800e2ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800e2ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e2d2:	e882 0003 	stmia.w	r2, {r0, r1}
 800e2d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2d8:	9300      	str	r3, [sp, #0]
 800e2da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e2dc:	2207      	movs	r2, #7
 800e2de:	4621      	mov	r1, r4
 800e2e0:	482b      	ldr	r0, [pc, #172]	; (800e390 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 800e2e2:	f7fc fbd5 	bl	800aa90 <_ZN8SelectorC1ESt13unordered_mapIhhSt4hashIhESt8equal_toIhESaISt4pairIKhhEEEh11GPIOPortPinSA_SA_>
 800e2e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7fc fbc3 	bl	800aa76 <_ZNSt13unordered_mapIhhSt4hashIhESt8equal_toIhESaISt4pairIKhhEEED1Ev>
ESP32 esp(huart2, esp_messages_sem, esp_data_ready_sem);
 800e2f0:	4b28      	ldr	r3, [pc, #160]	; (800e394 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 800e2f2:	4a29      	ldr	r2, [pc, #164]	; (800e398 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800e2f4:	4929      	ldr	r1, [pc, #164]	; (800e39c <_Z41__static_initialization_and_destruction_0ii+0x238>)
 800e2f6:	482a      	ldr	r0, [pc, #168]	; (800e3a0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 800e2f8:	f7fc fc24 	bl	800ab44 <_ZN5ESP32C1ER20__UART_HandleTypeDefRPvS3_>
SMU smu(huart6);
 800e2fc:	4929      	ldr	r1, [pc, #164]	; (800e3a4 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 800e2fe:	482a      	ldr	r0, [pc, #168]	; (800e3a8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800e300:	f7fc fc46 	bl	800ab90 <_ZN3SMUC1ER20__UART_HandleTypeDef>
RealTimeClock rtc(hrtc);
 800e304:	4929      	ldr	r1, [pc, #164]	; (800e3ac <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800e306:	482a      	ldr	r0, [pc, #168]	; (800e3b0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800e308:	f7fc fc5d 	bl	800abc6 <_ZN13RealTimeClockC1ER17RTC_HandleTypeDef>
DataPacket data_packet;
 800e30c:	4829      	ldr	r0, [pc, #164]	; (800e3b4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800e30e:	f7fc fc78 	bl	800ac02 <_ZN10DataPacketC1Ev>
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d119      	bne.n	800e34c <_Z41__static_initialization_and_destruction_0ii+0x1e8>
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e31e:	4293      	cmp	r3, r2
 800e320:	d114      	bne.n	800e34c <_Z41__static_initialization_and_destruction_0ii+0x1e8>
 800e322:	4824      	ldr	r0, [pc, #144]	; (800e3b4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800e324:	f7ff fedd 	bl	800e0e2 <_ZN10DataPacketD1Ev>
ESP32 esp(huart2, esp_messages_sem, esp_data_ready_sem);
 800e328:	481d      	ldr	r0, [pc, #116]	; (800e3a0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 800e32a:	f7ff fef2 	bl	800e112 <_ZN5ESP32D1Ev>
Selector selector(panels, 7U, {GPIOD, GPIO_PIN_12}, {GPIOD, GPIO_PIN_13}, {GPIOD, GPIO_PIN_14});
 800e32e:	4818      	ldr	r0, [pc, #96]	; (800e390 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 800e330:	f7ff fefd 	bl	800e12e <_ZN8SelectorD1Ev>
Logger logger(huart4, LogLevel::Debug);
 800e334:	480e      	ldr	r0, [pc, #56]	; (800e370 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 800e336:	f7ff ff07 	bl	800e148 <_ZN6LoggerD1Ev>
std::unordered_map<uint8_t, uint8_t> panels = {
 800e33a:	480a      	ldr	r0, [pc, #40]	; (800e364 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 800e33c:	f7fc fb9b 	bl	800aa76 <_ZNSt13unordered_mapIhhSt4hashIhESt8equal_toIhESaISt4pairIKhhEEED1Ev>
 800e340:	4807      	ldr	r0, [pc, #28]	; (800e360 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 800e342:	f00d f83b 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string ESP_WIFI_OK = "WIFI GOT IP\r\n";
 800e346:	4804      	ldr	r0, [pc, #16]	; (800e358 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 800e348:	f00d f838 	bl	801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800e34c:	bf00      	nop
 800e34e:	3784      	adds	r7, #132	; 0x84
 800e350:	46bd      	mov	sp, r7
 800e352:	bd90      	pop	{r4, r7, pc}
 800e354:	08020c8c 	.word	0x08020c8c
 800e358:	20000248 	.word	0x20000248
 800e35c:	08020c9c 	.word	0x08020c9c
 800e360:	20000260 	.word	0x20000260
 800e364:	20000600 	.word	0x20000600
 800e368:	08020cac 	.word	0x08020cac
 800e36c:	200004cc 	.word	0x200004cc
 800e370:	2000061c 	.word	0x2000061c
 800e374:	200002c0 	.word	0x200002c0
 800e378:	2000063c 	.word	0x2000063c
 800e37c:	20000314 	.word	0x20000314
 800e380:	20000640 	.word	0x20000640
 800e384:	08020cb0 	.word	0x08020cb0
 800e388:	08020cb8 	.word	0x08020cb8
 800e38c:	08020cc0 	.word	0x08020cc0
 800e390:	20000644 	.word	0x20000644
 800e394:	200005f0 	.word	0x200005f0
 800e398:	200005f4 	.word	0x200005f4
 800e39c:	20000554 	.word	0x20000554
 800e3a0:	2000067c 	.word	0x2000067c
 800e3a4:	20000598 	.word	0x20000598
 800e3a8:	200006b0 	.word	0x200006b0
 800e3ac:	20000368 	.word	0x20000368
 800e3b0:	200006b4 	.word	0x200006b4
 800e3b4:	200006b8 	.word	0x200006b8

0800e3b8 <_GLOBAL__sub_I_hadc1>:
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e3c0:	2001      	movs	r0, #1
 800e3c2:	f7ff fecf 	bl	800e164 <_Z41__static_initialization_and_destruction_0ii>
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <_GLOBAL__sub_D_hadc1>:
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e3d0:	2000      	movs	r0, #0
 800e3d2:	f7ff fec7 	bl	800e164 <_Z41__static_initialization_and_destruction_0ii>
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e3de:	2300      	movs	r3, #0
 800e3e0:	607b      	str	r3, [r7, #4]
 800e3e2:	4b12      	ldr	r3, [pc, #72]	; (800e42c <HAL_MspInit+0x54>)
 800e3e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3e6:	4a11      	ldr	r2, [pc, #68]	; (800e42c <HAL_MspInit+0x54>)
 800e3e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e3ec:	6453      	str	r3, [r2, #68]	; 0x44
 800e3ee:	4b0f      	ldr	r3, [pc, #60]	; (800e42c <HAL_MspInit+0x54>)
 800e3f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3f6:	607b      	str	r3, [r7, #4]
 800e3f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	603b      	str	r3, [r7, #0]
 800e3fe:	4b0b      	ldr	r3, [pc, #44]	; (800e42c <HAL_MspInit+0x54>)
 800e400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e402:	4a0a      	ldr	r2, [pc, #40]	; (800e42c <HAL_MspInit+0x54>)
 800e404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e408:	6413      	str	r3, [r2, #64]	; 0x40
 800e40a:	4b08      	ldr	r3, [pc, #32]	; (800e42c <HAL_MspInit+0x54>)
 800e40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e40e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e412:	603b      	str	r3, [r7, #0]
 800e414:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e416:	2200      	movs	r2, #0
 800e418:	210f      	movs	r1, #15
 800e41a:	f06f 0001 	mvn.w	r0, #1
 800e41e:	f001 f80c 	bl	800f43a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e422:	bf00      	nop
 800e424:	3708      	adds	r7, #8
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	40023800 	.word	0x40023800

0800e430 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b08a      	sub	sp, #40	; 0x28
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e438:	f107 0314 	add.w	r3, r7, #20
 800e43c:	2200      	movs	r2, #0
 800e43e:	601a      	str	r2, [r3, #0]
 800e440:	605a      	str	r2, [r3, #4]
 800e442:	609a      	str	r2, [r3, #8]
 800e444:	60da      	str	r2, [r3, #12]
 800e446:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4a24      	ldr	r2, [pc, #144]	; (800e4e0 <HAL_ADC_MspInit+0xb0>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d141      	bne.n	800e4d6 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e452:	2300      	movs	r3, #0
 800e454:	613b      	str	r3, [r7, #16]
 800e456:	4b23      	ldr	r3, [pc, #140]	; (800e4e4 <HAL_ADC_MspInit+0xb4>)
 800e458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e45a:	4a22      	ldr	r2, [pc, #136]	; (800e4e4 <HAL_ADC_MspInit+0xb4>)
 800e45c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e460:	6453      	str	r3, [r2, #68]	; 0x44
 800e462:	4b20      	ldr	r3, [pc, #128]	; (800e4e4 <HAL_ADC_MspInit+0xb4>)
 800e464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e46a:	613b      	str	r3, [r7, #16]
 800e46c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e46e:	2300      	movs	r3, #0
 800e470:	60fb      	str	r3, [r7, #12]
 800e472:	4b1c      	ldr	r3, [pc, #112]	; (800e4e4 <HAL_ADC_MspInit+0xb4>)
 800e474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e476:	4a1b      	ldr	r2, [pc, #108]	; (800e4e4 <HAL_ADC_MspInit+0xb4>)
 800e478:	f043 0301 	orr.w	r3, r3, #1
 800e47c:	6313      	str	r3, [r2, #48]	; 0x30
 800e47e:	4b19      	ldr	r3, [pc, #100]	; (800e4e4 <HAL_ADC_MspInit+0xb4>)
 800e480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e482:	f003 0301 	and.w	r3, r3, #1
 800e486:	60fb      	str	r3, [r7, #12]
 800e488:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e48a:	2300      	movs	r3, #0
 800e48c:	60bb      	str	r3, [r7, #8]
 800e48e:	4b15      	ldr	r3, [pc, #84]	; (800e4e4 <HAL_ADC_MspInit+0xb4>)
 800e490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e492:	4a14      	ldr	r2, [pc, #80]	; (800e4e4 <HAL_ADC_MspInit+0xb4>)
 800e494:	f043 0302 	orr.w	r3, r3, #2
 800e498:	6313      	str	r3, [r2, #48]	; 0x30
 800e49a:	4b12      	ldr	r3, [pc, #72]	; (800e4e4 <HAL_ADC_MspInit+0xb4>)
 800e49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e49e:	f003 0302 	and.w	r3, r3, #2
 800e4a2:	60bb      	str	r3, [r7, #8]
 800e4a4:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800e4a6:	23f0      	movs	r3, #240	; 0xf0
 800e4a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e4aa:	2303      	movs	r3, #3
 800e4ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e4b2:	f107 0314 	add.w	r3, r7, #20
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	480b      	ldr	r0, [pc, #44]	; (800e4e8 <HAL_ADC_MspInit+0xb8>)
 800e4ba:	f001 fc03 	bl	800fcc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800e4be:	2301      	movs	r3, #1
 800e4c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e4c2:	2303      	movs	r3, #3
 800e4c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e4ca:	f107 0314 	add.w	r3, r7, #20
 800e4ce:	4619      	mov	r1, r3
 800e4d0:	4806      	ldr	r0, [pc, #24]	; (800e4ec <HAL_ADC_MspInit+0xbc>)
 800e4d2:	f001 fbf7 	bl	800fcc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e4d6:	bf00      	nop
 800e4d8:	3728      	adds	r7, #40	; 0x28
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	40012000 	.word	0x40012000
 800e4e4:	40023800 	.word	0x40023800
 800e4e8:	40020000 	.word	0x40020000
 800e4ec:	40020400 	.word	0x40020400

0800e4f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b08c      	sub	sp, #48	; 0x30
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e4f8:	f107 031c 	add.w	r3, r7, #28
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	601a      	str	r2, [r3, #0]
 800e500:	605a      	str	r2, [r3, #4]
 800e502:	609a      	str	r2, [r3, #8]
 800e504:	60da      	str	r2, [r3, #12]
 800e506:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4a32      	ldr	r2, [pc, #200]	; (800e5d8 <HAL_I2C_MspInit+0xe8>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d12c      	bne.n	800e56c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e512:	2300      	movs	r3, #0
 800e514:	61bb      	str	r3, [r7, #24]
 800e516:	4b31      	ldr	r3, [pc, #196]	; (800e5dc <HAL_I2C_MspInit+0xec>)
 800e518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e51a:	4a30      	ldr	r2, [pc, #192]	; (800e5dc <HAL_I2C_MspInit+0xec>)
 800e51c:	f043 0302 	orr.w	r3, r3, #2
 800e520:	6313      	str	r3, [r2, #48]	; 0x30
 800e522:	4b2e      	ldr	r3, [pc, #184]	; (800e5dc <HAL_I2C_MspInit+0xec>)
 800e524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e526:	f003 0302 	and.w	r3, r3, #2
 800e52a:	61bb      	str	r3, [r7, #24]
 800e52c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e52e:	23c0      	movs	r3, #192	; 0xc0
 800e530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e532:	2312      	movs	r3, #18
 800e534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e536:	2301      	movs	r3, #1
 800e538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e53a:	2303      	movs	r3, #3
 800e53c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e53e:	2304      	movs	r3, #4
 800e540:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e542:	f107 031c 	add.w	r3, r7, #28
 800e546:	4619      	mov	r1, r3
 800e548:	4825      	ldr	r0, [pc, #148]	; (800e5e0 <HAL_I2C_MspInit+0xf0>)
 800e54a:	f001 fbbb 	bl	800fcc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e54e:	2300      	movs	r3, #0
 800e550:	617b      	str	r3, [r7, #20]
 800e552:	4b22      	ldr	r3, [pc, #136]	; (800e5dc <HAL_I2C_MspInit+0xec>)
 800e554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e556:	4a21      	ldr	r2, [pc, #132]	; (800e5dc <HAL_I2C_MspInit+0xec>)
 800e558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e55c:	6413      	str	r3, [r2, #64]	; 0x40
 800e55e:	4b1f      	ldr	r3, [pc, #124]	; (800e5dc <HAL_I2C_MspInit+0xec>)
 800e560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e566:	617b      	str	r3, [r7, #20]
 800e568:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800e56a:	e031      	b.n	800e5d0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4a1c      	ldr	r2, [pc, #112]	; (800e5e4 <HAL_I2C_MspInit+0xf4>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d12c      	bne.n	800e5d0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e576:	2300      	movs	r3, #0
 800e578:	613b      	str	r3, [r7, #16]
 800e57a:	4b18      	ldr	r3, [pc, #96]	; (800e5dc <HAL_I2C_MspInit+0xec>)
 800e57c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e57e:	4a17      	ldr	r2, [pc, #92]	; (800e5dc <HAL_I2C_MspInit+0xec>)
 800e580:	f043 0302 	orr.w	r3, r3, #2
 800e584:	6313      	str	r3, [r2, #48]	; 0x30
 800e586:	4b15      	ldr	r3, [pc, #84]	; (800e5dc <HAL_I2C_MspInit+0xec>)
 800e588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e58a:	f003 0302 	and.w	r3, r3, #2
 800e58e:	613b      	str	r3, [r7, #16]
 800e590:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800e592:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800e596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e598:	2312      	movs	r3, #18
 800e59a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e59c:	2301      	movs	r3, #1
 800e59e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e5a0:	2303      	movs	r3, #3
 800e5a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800e5a4:	2304      	movs	r3, #4
 800e5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e5a8:	f107 031c 	add.w	r3, r7, #28
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	480c      	ldr	r0, [pc, #48]	; (800e5e0 <HAL_I2C_MspInit+0xf0>)
 800e5b0:	f001 fb88 	bl	800fcc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	60fb      	str	r3, [r7, #12]
 800e5b8:	4b08      	ldr	r3, [pc, #32]	; (800e5dc <HAL_I2C_MspInit+0xec>)
 800e5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5bc:	4a07      	ldr	r2, [pc, #28]	; (800e5dc <HAL_I2C_MspInit+0xec>)
 800e5be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e5c2:	6413      	str	r3, [r2, #64]	; 0x40
 800e5c4:	4b05      	ldr	r3, [pc, #20]	; (800e5dc <HAL_I2C_MspInit+0xec>)
 800e5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e5cc:	60fb      	str	r3, [r7, #12]
 800e5ce:	68fb      	ldr	r3, [r7, #12]
}
 800e5d0:	bf00      	nop
 800e5d2:	3730      	adds	r7, #48	; 0x30
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	40005400 	.word	0x40005400
 800e5dc:	40023800 	.word	0x40023800
 800e5e0:	40020400 	.word	0x40020400
 800e5e4:	40005800 	.word	0x40005800

0800e5e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a05      	ldr	r2, [pc, #20]	; (800e60c <HAL_RTC_MspInit+0x24>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d102      	bne.n	800e600 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e5fa:	4b05      	ldr	r3, [pc, #20]	; (800e610 <HAL_RTC_MspInit+0x28>)
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800e600:	bf00      	nop
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr
 800e60c:	40002800 	.word	0x40002800
 800e610:	42470e3c 	.word	0x42470e3c

0800e614 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b08a      	sub	sp, #40	; 0x28
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e61c:	f107 0314 	add.w	r3, r7, #20
 800e620:	2200      	movs	r2, #0
 800e622:	601a      	str	r2, [r3, #0]
 800e624:	605a      	str	r2, [r3, #4]
 800e626:	609a      	str	r2, [r3, #8]
 800e628:	60da      	str	r2, [r3, #12]
 800e62a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4a71      	ldr	r2, [pc, #452]	; (800e7f8 <HAL_SD_MspInit+0x1e4>)
 800e632:	4293      	cmp	r3, r2
 800e634:	f040 80dc 	bne.w	800e7f0 <HAL_SD_MspInit+0x1dc>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800e638:	2300      	movs	r3, #0
 800e63a:	613b      	str	r3, [r7, #16]
 800e63c:	4b6f      	ldr	r3, [pc, #444]	; (800e7fc <HAL_SD_MspInit+0x1e8>)
 800e63e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e640:	4a6e      	ldr	r2, [pc, #440]	; (800e7fc <HAL_SD_MspInit+0x1e8>)
 800e642:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e646:	6453      	str	r3, [r2, #68]	; 0x44
 800e648:	4b6c      	ldr	r3, [pc, #432]	; (800e7fc <HAL_SD_MspInit+0x1e8>)
 800e64a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e64c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e650:	613b      	str	r3, [r7, #16]
 800e652:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e654:	2300      	movs	r3, #0
 800e656:	60fb      	str	r3, [r7, #12]
 800e658:	4b68      	ldr	r3, [pc, #416]	; (800e7fc <HAL_SD_MspInit+0x1e8>)
 800e65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e65c:	4a67      	ldr	r2, [pc, #412]	; (800e7fc <HAL_SD_MspInit+0x1e8>)
 800e65e:	f043 0304 	orr.w	r3, r3, #4
 800e662:	6313      	str	r3, [r2, #48]	; 0x30
 800e664:	4b65      	ldr	r3, [pc, #404]	; (800e7fc <HAL_SD_MspInit+0x1e8>)
 800e666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e668:	f003 0304 	and.w	r3, r3, #4
 800e66c:	60fb      	str	r3, [r7, #12]
 800e66e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e670:	2300      	movs	r3, #0
 800e672:	60bb      	str	r3, [r7, #8]
 800e674:	4b61      	ldr	r3, [pc, #388]	; (800e7fc <HAL_SD_MspInit+0x1e8>)
 800e676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e678:	4a60      	ldr	r2, [pc, #384]	; (800e7fc <HAL_SD_MspInit+0x1e8>)
 800e67a:	f043 0308 	orr.w	r3, r3, #8
 800e67e:	6313      	str	r3, [r2, #48]	; 0x30
 800e680:	4b5e      	ldr	r3, [pc, #376]	; (800e7fc <HAL_SD_MspInit+0x1e8>)
 800e682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e684:	f003 0308 	and.w	r3, r3, #8
 800e688:	60bb      	str	r3, [r7, #8]
 800e68a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800e68c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800e690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e692:	2302      	movs	r3, #2
 800e694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e696:	2301      	movs	r3, #1
 800e698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e69a:	2303      	movs	r3, #3
 800e69c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800e69e:	230c      	movs	r3, #12
 800e6a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e6a2:	f107 0314 	add.w	r3, r7, #20
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	4855      	ldr	r0, [pc, #340]	; (800e800 <HAL_SD_MspInit+0x1ec>)
 800e6aa:	f001 fb0b 	bl	800fcc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800e6ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e6b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6b4:	2302      	movs	r3, #2
 800e6b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e6bc:	2303      	movs	r3, #3
 800e6be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800e6c0:	230c      	movs	r3, #12
 800e6c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e6c4:	f107 0314 	add.w	r3, r7, #20
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	484d      	ldr	r0, [pc, #308]	; (800e800 <HAL_SD_MspInit+0x1ec>)
 800e6cc:	f001 fafa 	bl	800fcc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e6d0:	2304      	movs	r3, #4
 800e6d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6d4:	2302      	movs	r3, #2
 800e6d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e6dc:	2303      	movs	r3, #3
 800e6de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800e6e0:	230c      	movs	r3, #12
 800e6e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e6e4:	f107 0314 	add.w	r3, r7, #20
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	4846      	ldr	r0, [pc, #280]	; (800e804 <HAL_SD_MspInit+0x1f0>)
 800e6ec:	f001 faea 	bl	800fcc4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800e6f0:	4b45      	ldr	r3, [pc, #276]	; (800e808 <HAL_SD_MspInit+0x1f4>)
 800e6f2:	4a46      	ldr	r2, [pc, #280]	; (800e80c <HAL_SD_MspInit+0x1f8>)
 800e6f4:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800e6f6:	4b44      	ldr	r3, [pc, #272]	; (800e808 <HAL_SD_MspInit+0x1f4>)
 800e6f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e6fc:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e6fe:	4b42      	ldr	r3, [pc, #264]	; (800e808 <HAL_SD_MspInit+0x1f4>)
 800e700:	2200      	movs	r2, #0
 800e702:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e704:	4b40      	ldr	r3, [pc, #256]	; (800e808 <HAL_SD_MspInit+0x1f4>)
 800e706:	2200      	movs	r2, #0
 800e708:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e70a:	4b3f      	ldr	r3, [pc, #252]	; (800e808 <HAL_SD_MspInit+0x1f4>)
 800e70c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e710:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e712:	4b3d      	ldr	r3, [pc, #244]	; (800e808 <HAL_SD_MspInit+0x1f4>)
 800e714:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e718:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e71a:	4b3b      	ldr	r3, [pc, #236]	; (800e808 <HAL_SD_MspInit+0x1f4>)
 800e71c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e720:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800e722:	4b39      	ldr	r3, [pc, #228]	; (800e808 <HAL_SD_MspInit+0x1f4>)
 800e724:	2220      	movs	r2, #32
 800e726:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800e728:	4b37      	ldr	r3, [pc, #220]	; (800e808 <HAL_SD_MspInit+0x1f4>)
 800e72a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800e72e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800e730:	4b35      	ldr	r3, [pc, #212]	; (800e808 <HAL_SD_MspInit+0x1f4>)
 800e732:	2204      	movs	r2, #4
 800e734:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800e736:	4b34      	ldr	r3, [pc, #208]	; (800e808 <HAL_SD_MspInit+0x1f4>)
 800e738:	2203      	movs	r2, #3
 800e73a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800e73c:	4b32      	ldr	r3, [pc, #200]	; (800e808 <HAL_SD_MspInit+0x1f4>)
 800e73e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800e742:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800e744:	4b30      	ldr	r3, [pc, #192]	; (800e808 <HAL_SD_MspInit+0x1f4>)
 800e746:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e74a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800e74c:	482e      	ldr	r0, [pc, #184]	; (800e808 <HAL_SD_MspInit+0x1f4>)
 800e74e:	f000 feab 	bl	800f4a8 <HAL_DMA_Init>
 800e752:	4603      	mov	r3, r0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d001      	beq.n	800e75c <HAL_SD_MspInit+0x148>
    {
      Error_Handler();
 800e758:	f7fd fa9f 	bl	800bc9a <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	4a2a      	ldr	r2, [pc, #168]	; (800e808 <HAL_SD_MspInit+0x1f4>)
 800e760:	641a      	str	r2, [r3, #64]	; 0x40
 800e762:	4a29      	ldr	r2, [pc, #164]	; (800e808 <HAL_SD_MspInit+0x1f4>)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800e768:	4b29      	ldr	r3, [pc, #164]	; (800e810 <HAL_SD_MspInit+0x1fc>)
 800e76a:	4a2a      	ldr	r2, [pc, #168]	; (800e814 <HAL_SD_MspInit+0x200>)
 800e76c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800e76e:	4b28      	ldr	r3, [pc, #160]	; (800e810 <HAL_SD_MspInit+0x1fc>)
 800e770:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e774:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e776:	4b26      	ldr	r3, [pc, #152]	; (800e810 <HAL_SD_MspInit+0x1fc>)
 800e778:	2240      	movs	r2, #64	; 0x40
 800e77a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e77c:	4b24      	ldr	r3, [pc, #144]	; (800e810 <HAL_SD_MspInit+0x1fc>)
 800e77e:	2200      	movs	r2, #0
 800e780:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e782:	4b23      	ldr	r3, [pc, #140]	; (800e810 <HAL_SD_MspInit+0x1fc>)
 800e784:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e788:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e78a:	4b21      	ldr	r3, [pc, #132]	; (800e810 <HAL_SD_MspInit+0x1fc>)
 800e78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e790:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e792:	4b1f      	ldr	r3, [pc, #124]	; (800e810 <HAL_SD_MspInit+0x1fc>)
 800e794:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e798:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800e79a:	4b1d      	ldr	r3, [pc, #116]	; (800e810 <HAL_SD_MspInit+0x1fc>)
 800e79c:	2220      	movs	r2, #32
 800e79e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800e7a0:	4b1b      	ldr	r3, [pc, #108]	; (800e810 <HAL_SD_MspInit+0x1fc>)
 800e7a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800e7a6:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800e7a8:	4b19      	ldr	r3, [pc, #100]	; (800e810 <HAL_SD_MspInit+0x1fc>)
 800e7aa:	2204      	movs	r2, #4
 800e7ac:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800e7ae:	4b18      	ldr	r3, [pc, #96]	; (800e810 <HAL_SD_MspInit+0x1fc>)
 800e7b0:	2203      	movs	r2, #3
 800e7b2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800e7b4:	4b16      	ldr	r3, [pc, #88]	; (800e810 <HAL_SD_MspInit+0x1fc>)
 800e7b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800e7ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800e7bc:	4b14      	ldr	r3, [pc, #80]	; (800e810 <HAL_SD_MspInit+0x1fc>)
 800e7be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e7c2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800e7c4:	4812      	ldr	r0, [pc, #72]	; (800e810 <HAL_SD_MspInit+0x1fc>)
 800e7c6:	f000 fe6f 	bl	800f4a8 <HAL_DMA_Init>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d001      	beq.n	800e7d4 <HAL_SD_MspInit+0x1c0>
    {
      Error_Handler();
 800e7d0:	f7fd fa63 	bl	800bc9a <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	4a0e      	ldr	r2, [pc, #56]	; (800e810 <HAL_SD_MspInit+0x1fc>)
 800e7d8:	63da      	str	r2, [r3, #60]	; 0x3c
 800e7da:	4a0d      	ldr	r2, [pc, #52]	; (800e810 <HAL_SD_MspInit+0x1fc>)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	2105      	movs	r1, #5
 800e7e4:	2031      	movs	r0, #49	; 0x31
 800e7e6:	f000 fe28 	bl	800f43a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800e7ea:	2031      	movs	r0, #49	; 0x31
 800e7ec:	f000 fe41 	bl	800f472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800e7f0:	bf00      	nop
 800e7f2:	3728      	adds	r7, #40	; 0x28
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}
 800e7f8:	40012c00 	.word	0x40012c00
 800e7fc:	40023800 	.word	0x40023800
 800e800:	40020800 	.word	0x40020800
 800e804:	40020c00 	.word	0x40020c00
 800e808:	2000040c 	.word	0x2000040c
 800e80c:	40026458 	.word	0x40026458
 800e810:	2000046c 	.word	0x2000046c
 800e814:	400264a0 	.word	0x400264a0

0800e818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b090      	sub	sp, #64	; 0x40
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e824:	2200      	movs	r2, #0
 800e826:	601a      	str	r2, [r3, #0]
 800e828:	605a      	str	r2, [r3, #4]
 800e82a:	609a      	str	r2, [r3, #8]
 800e82c:	60da      	str	r2, [r3, #12]
 800e82e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4a68      	ldr	r2, [pc, #416]	; (800e9d8 <HAL_UART_MspInit+0x1c0>)
 800e836:	4293      	cmp	r3, r2
 800e838:	d12c      	bne.n	800e894 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800e83a:	2300      	movs	r3, #0
 800e83c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e83e:	4b67      	ldr	r3, [pc, #412]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e842:	4a66      	ldr	r2, [pc, #408]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e844:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e848:	6413      	str	r3, [r2, #64]	; 0x40
 800e84a:	4b64      	ldr	r3, [pc, #400]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e84e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e852:	62bb      	str	r3, [r7, #40]	; 0x28
 800e854:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e856:	2300      	movs	r3, #0
 800e858:	627b      	str	r3, [r7, #36]	; 0x24
 800e85a:	4b60      	ldr	r3, [pc, #384]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e85e:	4a5f      	ldr	r2, [pc, #380]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e860:	f043 0301 	orr.w	r3, r3, #1
 800e864:	6313      	str	r3, [r2, #48]	; 0x30
 800e866:	4b5d      	ldr	r3, [pc, #372]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e86a:	f003 0301 	and.w	r3, r3, #1
 800e86e:	627b      	str	r3, [r7, #36]	; 0x24
 800e870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e872:	2303      	movs	r3, #3
 800e874:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e876:	2302      	movs	r3, #2
 800e878:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e87a:	2301      	movs	r3, #1
 800e87c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e87e:	2303      	movs	r3, #3
 800e880:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800e882:	2308      	movs	r3, #8
 800e884:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e88a:	4619      	mov	r1, r3
 800e88c:	4854      	ldr	r0, [pc, #336]	; (800e9e0 <HAL_UART_MspInit+0x1c8>)
 800e88e:	f001 fa19 	bl	800fcc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800e892:	e09d      	b.n	800e9d0 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART1)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a52      	ldr	r2, [pc, #328]	; (800e9e4 <HAL_UART_MspInit+0x1cc>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d12d      	bne.n	800e8fa <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 800e89e:	2300      	movs	r3, #0
 800e8a0:	623b      	str	r3, [r7, #32]
 800e8a2:	4b4e      	ldr	r3, [pc, #312]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8a6:	4a4d      	ldr	r2, [pc, #308]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e8a8:	f043 0310 	orr.w	r3, r3, #16
 800e8ac:	6453      	str	r3, [r2, #68]	; 0x44
 800e8ae:	4b4b      	ldr	r3, [pc, #300]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8b2:	f003 0310 	and.w	r3, r3, #16
 800e8b6:	623b      	str	r3, [r7, #32]
 800e8b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	61fb      	str	r3, [r7, #28]
 800e8be:	4b47      	ldr	r3, [pc, #284]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8c2:	4a46      	ldr	r2, [pc, #280]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e8c4:	f043 0301 	orr.w	r3, r3, #1
 800e8c8:	6313      	str	r3, [r2, #48]	; 0x30
 800e8ca:	4b44      	ldr	r3, [pc, #272]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ce:	f003 0301 	and.w	r3, r3, #1
 800e8d2:	61fb      	str	r3, [r7, #28]
 800e8d4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e8d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e8da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8dc:	2302      	movs	r3, #2
 800e8de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8e4:	2303      	movs	r3, #3
 800e8e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800e8e8:	2307      	movs	r3, #7
 800e8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	483b      	ldr	r0, [pc, #236]	; (800e9e0 <HAL_UART_MspInit+0x1c8>)
 800e8f4:	f001 f9e6 	bl	800fcc4 <HAL_GPIO_Init>
}
 800e8f8:	e06a      	b.n	800e9d0 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	4a3a      	ldr	r2, [pc, #232]	; (800e9e8 <HAL_UART_MspInit+0x1d0>)
 800e900:	4293      	cmp	r3, r2
 800e902:	d134      	bne.n	800e96e <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART2_CLK_ENABLE();
 800e904:	2300      	movs	r3, #0
 800e906:	61bb      	str	r3, [r7, #24]
 800e908:	4b34      	ldr	r3, [pc, #208]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e90c:	4a33      	ldr	r2, [pc, #204]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e90e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e912:	6413      	str	r3, [r2, #64]	; 0x40
 800e914:	4b31      	ldr	r3, [pc, #196]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e91c:	61bb      	str	r3, [r7, #24]
 800e91e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e920:	2300      	movs	r3, #0
 800e922:	617b      	str	r3, [r7, #20]
 800e924:	4b2d      	ldr	r3, [pc, #180]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e928:	4a2c      	ldr	r2, [pc, #176]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e92a:	f043 0308 	orr.w	r3, r3, #8
 800e92e:	6313      	str	r3, [r2, #48]	; 0x30
 800e930:	4b2a      	ldr	r3, [pc, #168]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e934:	f003 0308 	and.w	r3, r3, #8
 800e938:	617b      	str	r3, [r7, #20]
 800e93a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800e93c:	2360      	movs	r3, #96	; 0x60
 800e93e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e940:	2302      	movs	r3, #2
 800e942:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e944:	2300      	movs	r3, #0
 800e946:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e948:	2303      	movs	r3, #3
 800e94a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e94c:	2307      	movs	r3, #7
 800e94e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e950:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e954:	4619      	mov	r1, r3
 800e956:	4825      	ldr	r0, [pc, #148]	; (800e9ec <HAL_UART_MspInit+0x1d4>)
 800e958:	f001 f9b4 	bl	800fcc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800e95c:	2200      	movs	r2, #0
 800e95e:	2105      	movs	r1, #5
 800e960:	2026      	movs	r0, #38	; 0x26
 800e962:	f000 fd6a 	bl	800f43a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800e966:	2026      	movs	r0, #38	; 0x26
 800e968:	f000 fd83 	bl	800f472 <HAL_NVIC_EnableIRQ>
}
 800e96c:	e030      	b.n	800e9d0 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	4a1f      	ldr	r2, [pc, #124]	; (800e9f0 <HAL_UART_MspInit+0x1d8>)
 800e974:	4293      	cmp	r3, r2
 800e976:	d12b      	bne.n	800e9d0 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 800e978:	2300      	movs	r3, #0
 800e97a:	613b      	str	r3, [r7, #16]
 800e97c:	4b17      	ldr	r3, [pc, #92]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e97e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e980:	4a16      	ldr	r2, [pc, #88]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e982:	f043 0320 	orr.w	r3, r3, #32
 800e986:	6453      	str	r3, [r2, #68]	; 0x44
 800e988:	4b14      	ldr	r3, [pc, #80]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e98a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e98c:	f003 0320 	and.w	r3, r3, #32
 800e990:	613b      	str	r3, [r7, #16]
 800e992:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e994:	2300      	movs	r3, #0
 800e996:	60fb      	str	r3, [r7, #12]
 800e998:	4b10      	ldr	r3, [pc, #64]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e99a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e99c:	4a0f      	ldr	r2, [pc, #60]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e99e:	f043 0304 	orr.w	r3, r3, #4
 800e9a2:	6313      	str	r3, [r2, #48]	; 0x30
 800e9a4:	4b0d      	ldr	r3, [pc, #52]	; (800e9dc <HAL_UART_MspInit+0x1c4>)
 800e9a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9a8:	f003 0304 	and.w	r3, r3, #4
 800e9ac:	60fb      	str	r3, [r7, #12]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e9b0:	23c0      	movs	r3, #192	; 0xc0
 800e9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9b4:	2302      	movs	r3, #2
 800e9b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9bc:	2303      	movs	r3, #3
 800e9be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800e9c0:	2308      	movs	r3, #8
 800e9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e9c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	480a      	ldr	r0, [pc, #40]	; (800e9f4 <HAL_UART_MspInit+0x1dc>)
 800e9cc:	f001 f97a 	bl	800fcc4 <HAL_GPIO_Init>
}
 800e9d0:	bf00      	nop
 800e9d2:	3740      	adds	r7, #64	; 0x40
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	40004c00 	.word	0x40004c00
 800e9dc:	40023800 	.word	0x40023800
 800e9e0:	40020000 	.word	0x40020000
 800e9e4:	40011000 	.word	0x40011000
 800e9e8:	40004400 	.word	0x40004400
 800e9ec:	40020c00 	.word	0x40020c00
 800e9f0:	40011400 	.word	0x40011400
 800e9f4:	40020800 	.word	0x40020800

0800e9f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e9fc:	e7fe      	b.n	800e9fc <NMI_Handler+0x4>

0800e9fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e9fe:	b480      	push	{r7}
 800ea00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ea02:	e7fe      	b.n	800ea02 <HardFault_Handler+0x4>

0800ea04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ea04:	b480      	push	{r7}
 800ea06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ea08:	e7fe      	b.n	800ea08 <MemManage_Handler+0x4>

0800ea0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ea0a:	b480      	push	{r7}
 800ea0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ea0e:	e7fe      	b.n	800ea0e <BusFault_Handler+0x4>

0800ea10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ea10:	b480      	push	{r7}
 800ea12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ea14:	e7fe      	b.n	800ea14 <UsageFault_Handler+0x4>

0800ea16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ea16:	b480      	push	{r7}
 800ea18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ea1a:	bf00      	nop
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr

0800ea24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ea28:	f000 f986 	bl	800ed38 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800ea2c:	f00b f83a 	bl	8019aa4 <xTaskGetSchedulerState>
 800ea30:	4603      	mov	r3, r0
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d001      	beq.n	800ea3a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800ea36:	f00b ff1f 	bl	801a878 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ea3a:	bf00      	nop
 800ea3c:	bd80      	pop	{r7, pc}
	...

0800ea40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800ea44:	4802      	ldr	r0, [pc, #8]	; (800ea50 <USART2_IRQHandler+0x10>)
 800ea46:	f004 f8d3 	bl	8012bf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800ea4a:	bf00      	nop
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	20000554 	.word	0x20000554

0800ea54 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800ea58:	4802      	ldr	r0, [pc, #8]	; (800ea64 <SDIO_IRQHandler+0x10>)
 800ea5a:	f002 fe5d 	bl	8011718 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800ea5e:	bf00      	nop
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	20000388 	.word	0x20000388

0800ea68 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800ea6c:	4802      	ldr	r0, [pc, #8]	; (800ea78 <DMA2_Stream3_IRQHandler+0x10>)
 800ea6e:	f000 feb3 	bl	800f7d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800ea72:	bf00      	nop
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	2000040c 	.word	0x2000040c

0800ea7c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800ea80:	4802      	ldr	r0, [pc, #8]	; (800ea8c <DMA2_Stream6_IRQHandler+0x10>)
 800ea82:	f000 fea9 	bl	800f7d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800ea86:	bf00      	nop
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	2000046c 	.word	0x2000046c

0800ea90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ea90:	b480      	push	{r7}
 800ea92:	af00      	add	r7, sp, #0
	return 1;
 800ea94:	2301      	movs	r3, #1
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <_kill>:

int _kill(int pid, int sig)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800eaaa:	f010 f869 	bl	801eb80 <__errno>
 800eaae:	4603      	mov	r3, r0
 800eab0:	2216      	movs	r2, #22
 800eab2:	601a      	str	r2, [r3, #0]
	return -1;
 800eab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3708      	adds	r7, #8
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <_exit>:

void _exit (int status)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800eac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f7ff ffe7 	bl	800eaa0 <_kill>
	while (1) {}		/* Make sure we hang here */
 800ead2:	e7fe      	b.n	800ead2 <_exit+0x12>

0800ead4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b086      	sub	sp, #24
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eae0:	2300      	movs	r3, #0
 800eae2:	617b      	str	r3, [r7, #20]
 800eae4:	e00a      	b.n	800eafc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800eae6:	f3af 8000 	nop.w
 800eaea:	4601      	mov	r1, r0
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	1c5a      	adds	r2, r3, #1
 800eaf0:	60ba      	str	r2, [r7, #8]
 800eaf2:	b2ca      	uxtb	r2, r1
 800eaf4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	3301      	adds	r3, #1
 800eafa:	617b      	str	r3, [r7, #20]
 800eafc:	697a      	ldr	r2, [r7, #20]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	dbf0      	blt.n	800eae6 <_read+0x12>
	}

return len;
 800eb04:	687b      	ldr	r3, [r7, #4]
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3718      	adds	r7, #24
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}

0800eb0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800eb0e:	b580      	push	{r7, lr}
 800eb10:	b086      	sub	sp, #24
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	60f8      	str	r0, [r7, #12]
 800eb16:	60b9      	str	r1, [r7, #8]
 800eb18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	617b      	str	r3, [r7, #20]
 800eb1e:	e009      	b.n	800eb34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	1c5a      	adds	r2, r3, #1
 800eb24:	60ba      	str	r2, [r7, #8]
 800eb26:	781b      	ldrb	r3, [r3, #0]
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	3301      	adds	r3, #1
 800eb32:	617b      	str	r3, [r7, #20]
 800eb34:	697a      	ldr	r2, [r7, #20]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	dbf1      	blt.n	800eb20 <_write+0x12>
	}
	return len;
 800eb3c:	687b      	ldr	r3, [r7, #4]
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3718      	adds	r7, #24
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}

0800eb46 <_close>:

int _close(int file)
{
 800eb46:	b480      	push	{r7}
 800eb48:	b083      	sub	sp, #12
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
	return -1;
 800eb4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	370c      	adds	r7, #12
 800eb56:	46bd      	mov	sp, r7
 800eb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5c:	4770      	bx	lr

0800eb5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800eb5e:	b480      	push	{r7}
 800eb60:	b083      	sub	sp, #12
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
 800eb66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eb6e:	605a      	str	r2, [r3, #4]
	return 0;
 800eb70:	2300      	movs	r3, #0
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	370c      	adds	r7, #12
 800eb76:	46bd      	mov	sp, r7
 800eb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7c:	4770      	bx	lr

0800eb7e <_isatty>:

int _isatty(int file)
{
 800eb7e:	b480      	push	{r7}
 800eb80:	b083      	sub	sp, #12
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	6078      	str	r0, [r7, #4]
	return 1;
 800eb86:	2301      	movs	r3, #1
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	370c      	adds	r7, #12
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr

0800eb94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800eb94:	b480      	push	{r7}
 800eb96:	b085      	sub	sp, #20
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	60b9      	str	r1, [r7, #8]
 800eb9e:	607a      	str	r2, [r7, #4]
	return 0;
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3714      	adds	r7, #20
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr
	...

0800ebb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b086      	sub	sp, #24
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ebb8:	4a14      	ldr	r2, [pc, #80]	; (800ec0c <_sbrk+0x5c>)
 800ebba:	4b15      	ldr	r3, [pc, #84]	; (800ec10 <_sbrk+0x60>)
 800ebbc:	1ad3      	subs	r3, r2, r3
 800ebbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ebc4:	4b13      	ldr	r3, [pc, #76]	; (800ec14 <_sbrk+0x64>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d102      	bne.n	800ebd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ebcc:	4b11      	ldr	r3, [pc, #68]	; (800ec14 <_sbrk+0x64>)
 800ebce:	4a12      	ldr	r2, [pc, #72]	; (800ec18 <_sbrk+0x68>)
 800ebd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ebd2:	4b10      	ldr	r3, [pc, #64]	; (800ec14 <_sbrk+0x64>)
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	4413      	add	r3, r2
 800ebda:	693a      	ldr	r2, [r7, #16]
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d207      	bcs.n	800ebf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ebe0:	f00f ffce 	bl	801eb80 <__errno>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	220c      	movs	r2, #12
 800ebe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ebea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ebee:	e009      	b.n	800ec04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ebf0:	4b08      	ldr	r3, [pc, #32]	; (800ec14 <_sbrk+0x64>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ebf6:	4b07      	ldr	r3, [pc, #28]	; (800ec14 <_sbrk+0x64>)
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	4a05      	ldr	r2, [pc, #20]	; (800ec14 <_sbrk+0x64>)
 800ec00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ec02:	68fb      	ldr	r3, [r7, #12]
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3718      	adds	r7, #24
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	20020000 	.word	0x20020000
 800ec10:	00000400 	.word	0x00000400
 800ec14:	20000fa8 	.word	0x20000fa8
 800ec18:	20005b60 	.word	0x20005b60

0800ec1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ec20:	4b06      	ldr	r3, [pc, #24]	; (800ec3c <SystemInit+0x20>)
 800ec22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec26:	4a05      	ldr	r2, [pc, #20]	; (800ec3c <SystemInit+0x20>)
 800ec28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ec2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ec30:	bf00      	nop
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop
 800ec3c:	e000ed00 	.word	0xe000ed00

0800ec40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ec40:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ec78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800ec44:	480d      	ldr	r0, [pc, #52]	; (800ec7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800ec46:	490e      	ldr	r1, [pc, #56]	; (800ec80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800ec48:	4a0e      	ldr	r2, [pc, #56]	; (800ec84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800ec4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ec4c:	e002      	b.n	800ec54 <LoopCopyDataInit>

0800ec4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ec4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ec50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ec52:	3304      	adds	r3, #4

0800ec54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ec54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ec56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ec58:	d3f9      	bcc.n	800ec4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ec5a:	4a0b      	ldr	r2, [pc, #44]	; (800ec88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800ec5c:	4c0b      	ldr	r4, [pc, #44]	; (800ec8c <LoopFillZerobss+0x26>)
  movs r3, #0
 800ec5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ec60:	e001      	b.n	800ec66 <LoopFillZerobss>

0800ec62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ec62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ec64:	3204      	adds	r2, #4

0800ec66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ec66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ec68:	d3fb      	bcc.n	800ec62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ec6a:	f7ff ffd7 	bl	800ec1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ec6e:	f00f ff8d 	bl	801eb8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ec72:	f7fb ffdf 	bl	800ac34 <main>
  bx  lr    
 800ec76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800ec78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ec7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ec80:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800ec84:	080238f8 	.word	0x080238f8
  ldr r2, =_sbss
 800ec88:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800ec8c:	20005b60 	.word	0x20005b60

0800ec90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ec90:	e7fe      	b.n	800ec90 <ADC_IRQHandler>
	...

0800ec94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ec98:	4b0e      	ldr	r3, [pc, #56]	; (800ecd4 <HAL_Init+0x40>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	4a0d      	ldr	r2, [pc, #52]	; (800ecd4 <HAL_Init+0x40>)
 800ec9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800eca4:	4b0b      	ldr	r3, [pc, #44]	; (800ecd4 <HAL_Init+0x40>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4a0a      	ldr	r2, [pc, #40]	; (800ecd4 <HAL_Init+0x40>)
 800ecaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ecae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ecb0:	4b08      	ldr	r3, [pc, #32]	; (800ecd4 <HAL_Init+0x40>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a07      	ldr	r2, [pc, #28]	; (800ecd4 <HAL_Init+0x40>)
 800ecb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ecba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ecbc:	2003      	movs	r0, #3
 800ecbe:	f000 fbb1 	bl	800f424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ecc2:	200f      	movs	r0, #15
 800ecc4:	f000 f808 	bl	800ecd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ecc8:	f7ff fb86 	bl	800e3d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	40023c00 	.word	0x40023c00

0800ecd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ece0:	4b12      	ldr	r3, [pc, #72]	; (800ed2c <HAL_InitTick+0x54>)
 800ece2:	681a      	ldr	r2, [r3, #0]
 800ece4:	4b12      	ldr	r3, [pc, #72]	; (800ed30 <HAL_InitTick+0x58>)
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	4619      	mov	r1, r3
 800ecea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ecee:	fbb3 f3f1 	udiv	r3, r3, r1
 800ecf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f000 fbc9 	bl	800f48e <HAL_SYSTICK_Config>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d001      	beq.n	800ed06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ed02:	2301      	movs	r3, #1
 800ed04:	e00e      	b.n	800ed24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2b0f      	cmp	r3, #15
 800ed0a:	d80a      	bhi.n	800ed22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	6879      	ldr	r1, [r7, #4]
 800ed10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed14:	f000 fb91 	bl	800f43a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ed18:	4a06      	ldr	r2, [pc, #24]	; (800ed34 <HAL_InitTick+0x5c>)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	e000      	b.n	800ed24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ed22:	2301      	movs	r3, #1
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3708      	adds	r7, #8
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}
 800ed2c:	20000008 	.word	0x20000008
 800ed30:	20000010 	.word	0x20000010
 800ed34:	2000000c 	.word	0x2000000c

0800ed38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ed38:	b480      	push	{r7}
 800ed3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ed3c:	4b06      	ldr	r3, [pc, #24]	; (800ed58 <HAL_IncTick+0x20>)
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	461a      	mov	r2, r3
 800ed42:	4b06      	ldr	r3, [pc, #24]	; (800ed5c <HAL_IncTick+0x24>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	4413      	add	r3, r2
 800ed48:	4a04      	ldr	r2, [pc, #16]	; (800ed5c <HAL_IncTick+0x24>)
 800ed4a:	6013      	str	r3, [r2, #0]
}
 800ed4c:	bf00      	nop
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr
 800ed56:	bf00      	nop
 800ed58:	20000010 	.word	0x20000010
 800ed5c:	20000fac 	.word	0x20000fac

0800ed60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ed60:	b480      	push	{r7}
 800ed62:	af00      	add	r7, sp, #0
  return uwTick;
 800ed64:	4b03      	ldr	r3, [pc, #12]	; (800ed74 <HAL_GetTick+0x14>)
 800ed66:	681b      	ldr	r3, [r3, #0]
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed70:	4770      	bx	lr
 800ed72:	bf00      	nop
 800ed74:	20000fac 	.word	0x20000fac

0800ed78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ed80:	f7ff ffee 	bl	800ed60 <HAL_GetTick>
 800ed84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed90:	d005      	beq.n	800ed9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ed92:	4b0a      	ldr	r3, [pc, #40]	; (800edbc <HAL_Delay+0x44>)
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	461a      	mov	r2, r3
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	4413      	add	r3, r2
 800ed9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ed9e:	bf00      	nop
 800eda0:	f7ff ffde 	bl	800ed60 <HAL_GetTick>
 800eda4:	4602      	mov	r2, r0
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	1ad3      	subs	r3, r2, r3
 800edaa:	68fa      	ldr	r2, [r7, #12]
 800edac:	429a      	cmp	r2, r3
 800edae:	d8f7      	bhi.n	800eda0 <HAL_Delay+0x28>
  {
  }
}
 800edb0:	bf00      	nop
 800edb2:	bf00      	nop
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}
 800edba:	bf00      	nop
 800edbc:	20000010 	.word	0x20000010

0800edc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b084      	sub	sp, #16
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800edc8:	2300      	movs	r3, #0
 800edca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d101      	bne.n	800edd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800edd2:	2301      	movs	r3, #1
 800edd4:	e033      	b.n	800ee3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d109      	bne.n	800edf2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f7ff fb26 	bl	800e430 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edf6:	f003 0310 	and.w	r3, r3, #16
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d118      	bne.n	800ee30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ee06:	f023 0302 	bic.w	r3, r3, #2
 800ee0a:	f043 0202 	orr.w	r2, r3, #2
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f000 f93a 	bl	800f08c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee22:	f023 0303 	bic.w	r3, r3, #3
 800ee26:	f043 0201 	orr.w	r2, r3, #1
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	641a      	str	r2, [r3, #64]	; 0x40
 800ee2e:	e001      	b.n	800ee34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800ee30:	2301      	movs	r3, #1
 800ee32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2200      	movs	r2, #0
 800ee38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800ee3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3710      	adds	r7, #16
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
	...

0800ee48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800ee52:	2300      	movs	r3, #0
 800ee54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	d101      	bne.n	800ee64 <HAL_ADC_ConfigChannel+0x1c>
 800ee60:	2302      	movs	r3, #2
 800ee62:	e105      	b.n	800f070 <HAL_ADC_ConfigChannel+0x228>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2201      	movs	r2, #1
 800ee68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2b09      	cmp	r3, #9
 800ee72:	d925      	bls.n	800eec0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	68d9      	ldr	r1, [r3, #12]
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	461a      	mov	r2, r3
 800ee82:	4613      	mov	r3, r2
 800ee84:	005b      	lsls	r3, r3, #1
 800ee86:	4413      	add	r3, r2
 800ee88:	3b1e      	subs	r3, #30
 800ee8a:	2207      	movs	r2, #7
 800ee8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ee90:	43da      	mvns	r2, r3
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	400a      	ands	r2, r1
 800ee98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	68d9      	ldr	r1, [r3, #12]
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	689a      	ldr	r2, [r3, #8]
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	4618      	mov	r0, r3
 800eeac:	4603      	mov	r3, r0
 800eeae:	005b      	lsls	r3, r3, #1
 800eeb0:	4403      	add	r3, r0
 800eeb2:	3b1e      	subs	r3, #30
 800eeb4:	409a      	lsls	r2, r3
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	430a      	orrs	r2, r1
 800eebc:	60da      	str	r2, [r3, #12]
 800eebe:	e022      	b.n	800ef06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	6919      	ldr	r1, [r3, #16]
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	b29b      	uxth	r3, r3
 800eecc:	461a      	mov	r2, r3
 800eece:	4613      	mov	r3, r2
 800eed0:	005b      	lsls	r3, r3, #1
 800eed2:	4413      	add	r3, r2
 800eed4:	2207      	movs	r2, #7
 800eed6:	fa02 f303 	lsl.w	r3, r2, r3
 800eeda:	43da      	mvns	r2, r3
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	400a      	ands	r2, r1
 800eee2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	6919      	ldr	r1, [r3, #16]
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	689a      	ldr	r2, [r3, #8]
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	4618      	mov	r0, r3
 800eef6:	4603      	mov	r3, r0
 800eef8:	005b      	lsls	r3, r3, #1
 800eefa:	4403      	add	r3, r0
 800eefc:	409a      	lsls	r2, r3
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	430a      	orrs	r2, r1
 800ef04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	2b06      	cmp	r3, #6
 800ef0c:	d824      	bhi.n	800ef58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	685a      	ldr	r2, [r3, #4]
 800ef18:	4613      	mov	r3, r2
 800ef1a:	009b      	lsls	r3, r3, #2
 800ef1c:	4413      	add	r3, r2
 800ef1e:	3b05      	subs	r3, #5
 800ef20:	221f      	movs	r2, #31
 800ef22:	fa02 f303 	lsl.w	r3, r2, r3
 800ef26:	43da      	mvns	r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	400a      	ands	r2, r1
 800ef2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	685a      	ldr	r2, [r3, #4]
 800ef42:	4613      	mov	r3, r2
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	4413      	add	r3, r2
 800ef48:	3b05      	subs	r3, #5
 800ef4a:	fa00 f203 	lsl.w	r2, r0, r3
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	430a      	orrs	r2, r1
 800ef54:	635a      	str	r2, [r3, #52]	; 0x34
 800ef56:	e04c      	b.n	800eff2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	2b0c      	cmp	r3, #12
 800ef5e:	d824      	bhi.n	800efaa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	685a      	ldr	r2, [r3, #4]
 800ef6a:	4613      	mov	r3, r2
 800ef6c:	009b      	lsls	r3, r3, #2
 800ef6e:	4413      	add	r3, r2
 800ef70:	3b23      	subs	r3, #35	; 0x23
 800ef72:	221f      	movs	r2, #31
 800ef74:	fa02 f303 	lsl.w	r3, r2, r3
 800ef78:	43da      	mvns	r2, r3
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	400a      	ands	r2, r1
 800ef80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	b29b      	uxth	r3, r3
 800ef8e:	4618      	mov	r0, r3
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	685a      	ldr	r2, [r3, #4]
 800ef94:	4613      	mov	r3, r2
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	4413      	add	r3, r2
 800ef9a:	3b23      	subs	r3, #35	; 0x23
 800ef9c:	fa00 f203 	lsl.w	r2, r0, r3
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	430a      	orrs	r2, r1
 800efa6:	631a      	str	r2, [r3, #48]	; 0x30
 800efa8:	e023      	b.n	800eff2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	685a      	ldr	r2, [r3, #4]
 800efb4:	4613      	mov	r3, r2
 800efb6:	009b      	lsls	r3, r3, #2
 800efb8:	4413      	add	r3, r2
 800efba:	3b41      	subs	r3, #65	; 0x41
 800efbc:	221f      	movs	r2, #31
 800efbe:	fa02 f303 	lsl.w	r3, r2, r3
 800efc2:	43da      	mvns	r2, r3
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	400a      	ands	r2, r1
 800efca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	4618      	mov	r0, r3
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	685a      	ldr	r2, [r3, #4]
 800efde:	4613      	mov	r3, r2
 800efe0:	009b      	lsls	r3, r3, #2
 800efe2:	4413      	add	r3, r2
 800efe4:	3b41      	subs	r3, #65	; 0x41
 800efe6:	fa00 f203 	lsl.w	r2, r0, r3
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	430a      	orrs	r2, r1
 800eff0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800eff2:	4b22      	ldr	r3, [pc, #136]	; (800f07c <HAL_ADC_ConfigChannel+0x234>)
 800eff4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4a21      	ldr	r2, [pc, #132]	; (800f080 <HAL_ADC_ConfigChannel+0x238>)
 800effc:	4293      	cmp	r3, r2
 800effe:	d109      	bne.n	800f014 <HAL_ADC_ConfigChannel+0x1cc>
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	2b12      	cmp	r3, #18
 800f006:	d105      	bne.n	800f014 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4a19      	ldr	r2, [pc, #100]	; (800f080 <HAL_ADC_ConfigChannel+0x238>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d123      	bne.n	800f066 <HAL_ADC_ConfigChannel+0x21e>
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	2b10      	cmp	r3, #16
 800f024:	d003      	beq.n	800f02e <HAL_ADC_ConfigChannel+0x1e6>
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	2b11      	cmp	r3, #17
 800f02c:	d11b      	bne.n	800f066 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	2b10      	cmp	r3, #16
 800f040:	d111      	bne.n	800f066 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800f042:	4b10      	ldr	r3, [pc, #64]	; (800f084 <HAL_ADC_ConfigChannel+0x23c>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4a10      	ldr	r2, [pc, #64]	; (800f088 <HAL_ADC_ConfigChannel+0x240>)
 800f048:	fba2 2303 	umull	r2, r3, r2, r3
 800f04c:	0c9a      	lsrs	r2, r3, #18
 800f04e:	4613      	mov	r3, r2
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	4413      	add	r3, r2
 800f054:	005b      	lsls	r3, r3, #1
 800f056:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800f058:	e002      	b.n	800f060 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	3b01      	subs	r3, #1
 800f05e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d1f9      	bne.n	800f05a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2200      	movs	r2, #0
 800f06a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800f06e:	2300      	movs	r3, #0
}
 800f070:	4618      	mov	r0, r3
 800f072:	3714      	adds	r7, #20
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr
 800f07c:	40012300 	.word	0x40012300
 800f080:	40012000 	.word	0x40012000
 800f084:	20000008 	.word	0x20000008
 800f088:	431bde83 	.word	0x431bde83

0800f08c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b085      	sub	sp, #20
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800f094:	4b79      	ldr	r3, [pc, #484]	; (800f27c <ADC_Init+0x1f0>)
 800f096:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	685b      	ldr	r3, [r3, #4]
 800f09c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	685a      	ldr	r2, [r3, #4]
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	685b      	ldr	r3, [r3, #4]
 800f0ac:	431a      	orrs	r2, r3
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	685a      	ldr	r2, [r3, #4]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f0c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	6859      	ldr	r1, [r3, #4]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	691b      	ldr	r3, [r3, #16]
 800f0cc:	021a      	lsls	r2, r3, #8
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	430a      	orrs	r2, r1
 800f0d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	685a      	ldr	r2, [r3, #4]
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800f0e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	6859      	ldr	r1, [r3, #4]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	689a      	ldr	r2, [r3, #8]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	430a      	orrs	r2, r1
 800f0f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	689a      	ldr	r2, [r3, #8]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	6899      	ldr	r1, [r3, #8]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	68da      	ldr	r2, [r3, #12]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	430a      	orrs	r2, r1
 800f118:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f11e:	4a58      	ldr	r2, [pc, #352]	; (800f280 <ADC_Init+0x1f4>)
 800f120:	4293      	cmp	r3, r2
 800f122:	d022      	beq.n	800f16a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	689a      	ldr	r2, [r3, #8]
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f132:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	6899      	ldr	r1, [r3, #8]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	430a      	orrs	r2, r1
 800f144:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	689a      	ldr	r2, [r3, #8]
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f154:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	6899      	ldr	r1, [r3, #8]
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	430a      	orrs	r2, r1
 800f166:	609a      	str	r2, [r3, #8]
 800f168:	e00f      	b.n	800f18a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	689a      	ldr	r2, [r3, #8]
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f178:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	689a      	ldr	r2, [r3, #8]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f188:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	689a      	ldr	r2, [r3, #8]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	f022 0202 	bic.w	r2, r2, #2
 800f198:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	6899      	ldr	r1, [r3, #8]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	7e1b      	ldrb	r3, [r3, #24]
 800f1a4:	005a      	lsls	r2, r3, #1
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	430a      	orrs	r2, r1
 800f1ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d01b      	beq.n	800f1f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	685a      	ldr	r2, [r3, #4]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	685a      	ldr	r2, [r3, #4]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800f1d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	6859      	ldr	r1, [r3, #4]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e2:	3b01      	subs	r3, #1
 800f1e4:	035a      	lsls	r2, r3, #13
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	430a      	orrs	r2, r1
 800f1ec:	605a      	str	r2, [r3, #4]
 800f1ee:	e007      	b.n	800f200 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	685a      	ldr	r2, [r3, #4]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f1fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800f20e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	69db      	ldr	r3, [r3, #28]
 800f21a:	3b01      	subs	r3, #1
 800f21c:	051a      	lsls	r2, r3, #20
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	430a      	orrs	r2, r1
 800f224:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	689a      	ldr	r2, [r3, #8]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f234:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	6899      	ldr	r1, [r3, #8]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f242:	025a      	lsls	r2, r3, #9
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	430a      	orrs	r2, r1
 800f24a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	689a      	ldr	r2, [r3, #8]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f25a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	6899      	ldr	r1, [r3, #8]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	695b      	ldr	r3, [r3, #20]
 800f266:	029a      	lsls	r2, r3, #10
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	430a      	orrs	r2, r1
 800f26e:	609a      	str	r2, [r3, #8]
}
 800f270:	bf00      	nop
 800f272:	3714      	adds	r7, #20
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr
 800f27c:	40012300 	.word	0x40012300
 800f280:	0f000001 	.word	0x0f000001

0800f284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f284:	b480      	push	{r7}
 800f286:	b085      	sub	sp, #20
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f003 0307 	and.w	r3, r3, #7
 800f292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f294:	4b0c      	ldr	r3, [pc, #48]	; (800f2c8 <__NVIC_SetPriorityGrouping+0x44>)
 800f296:	68db      	ldr	r3, [r3, #12]
 800f298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f29a:	68ba      	ldr	r2, [r7, #8]
 800f29c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f2a0:	4013      	ands	r3, r2
 800f2a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f2ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f2b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f2b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f2b6:	4a04      	ldr	r2, [pc, #16]	; (800f2c8 <__NVIC_SetPriorityGrouping+0x44>)
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	60d3      	str	r3, [r2, #12]
}
 800f2bc:	bf00      	nop
 800f2be:	3714      	adds	r7, #20
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr
 800f2c8:	e000ed00 	.word	0xe000ed00

0800f2cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f2d0:	4b04      	ldr	r3, [pc, #16]	; (800f2e4 <__NVIC_GetPriorityGrouping+0x18>)
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	0a1b      	lsrs	r3, r3, #8
 800f2d6:	f003 0307 	and.w	r3, r3, #7
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr
 800f2e4:	e000ed00 	.word	0xe000ed00

0800f2e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f2f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	db0b      	blt.n	800f312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f2fa:	79fb      	ldrb	r3, [r7, #7]
 800f2fc:	f003 021f 	and.w	r2, r3, #31
 800f300:	4907      	ldr	r1, [pc, #28]	; (800f320 <__NVIC_EnableIRQ+0x38>)
 800f302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f306:	095b      	lsrs	r3, r3, #5
 800f308:	2001      	movs	r0, #1
 800f30a:	fa00 f202 	lsl.w	r2, r0, r2
 800f30e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800f312:	bf00      	nop
 800f314:	370c      	adds	r7, #12
 800f316:	46bd      	mov	sp, r7
 800f318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31c:	4770      	bx	lr
 800f31e:	bf00      	nop
 800f320:	e000e100 	.word	0xe000e100

0800f324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
 800f32a:	4603      	mov	r3, r0
 800f32c:	6039      	str	r1, [r7, #0]
 800f32e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f334:	2b00      	cmp	r3, #0
 800f336:	db0a      	blt.n	800f34e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	b2da      	uxtb	r2, r3
 800f33c:	490c      	ldr	r1, [pc, #48]	; (800f370 <__NVIC_SetPriority+0x4c>)
 800f33e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f342:	0112      	lsls	r2, r2, #4
 800f344:	b2d2      	uxtb	r2, r2
 800f346:	440b      	add	r3, r1
 800f348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f34c:	e00a      	b.n	800f364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	b2da      	uxtb	r2, r3
 800f352:	4908      	ldr	r1, [pc, #32]	; (800f374 <__NVIC_SetPriority+0x50>)
 800f354:	79fb      	ldrb	r3, [r7, #7]
 800f356:	f003 030f 	and.w	r3, r3, #15
 800f35a:	3b04      	subs	r3, #4
 800f35c:	0112      	lsls	r2, r2, #4
 800f35e:	b2d2      	uxtb	r2, r2
 800f360:	440b      	add	r3, r1
 800f362:	761a      	strb	r2, [r3, #24]
}
 800f364:	bf00      	nop
 800f366:	370c      	adds	r7, #12
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr
 800f370:	e000e100 	.word	0xe000e100
 800f374:	e000ed00 	.word	0xe000ed00

0800f378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f378:	b480      	push	{r7}
 800f37a:	b089      	sub	sp, #36	; 0x24
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	60b9      	str	r1, [r7, #8]
 800f382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f003 0307 	and.w	r3, r3, #7
 800f38a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f38c:	69fb      	ldr	r3, [r7, #28]
 800f38e:	f1c3 0307 	rsb	r3, r3, #7
 800f392:	2b04      	cmp	r3, #4
 800f394:	bf28      	it	cs
 800f396:	2304      	movcs	r3, #4
 800f398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	3304      	adds	r3, #4
 800f39e:	2b06      	cmp	r3, #6
 800f3a0:	d902      	bls.n	800f3a8 <NVIC_EncodePriority+0x30>
 800f3a2:	69fb      	ldr	r3, [r7, #28]
 800f3a4:	3b03      	subs	r3, #3
 800f3a6:	e000      	b.n	800f3aa <NVIC_EncodePriority+0x32>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f3ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3b0:	69bb      	ldr	r3, [r7, #24]
 800f3b2:	fa02 f303 	lsl.w	r3, r2, r3
 800f3b6:	43da      	mvns	r2, r3
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	401a      	ands	r2, r3
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f3c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	fa01 f303 	lsl.w	r3, r1, r3
 800f3ca:	43d9      	mvns	r1, r3
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f3d0:	4313      	orrs	r3, r2
         );
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3724      	adds	r7, #36	; 0x24
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr
	...

0800f3e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	3b01      	subs	r3, #1
 800f3ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f3f0:	d301      	bcc.n	800f3f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	e00f      	b.n	800f416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f3f6:	4a0a      	ldr	r2, [pc, #40]	; (800f420 <SysTick_Config+0x40>)
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	3b01      	subs	r3, #1
 800f3fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f3fe:	210f      	movs	r1, #15
 800f400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f404:	f7ff ff8e 	bl	800f324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f408:	4b05      	ldr	r3, [pc, #20]	; (800f420 <SysTick_Config+0x40>)
 800f40a:	2200      	movs	r2, #0
 800f40c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f40e:	4b04      	ldr	r3, [pc, #16]	; (800f420 <SysTick_Config+0x40>)
 800f410:	2207      	movs	r2, #7
 800f412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f414:	2300      	movs	r3, #0
}
 800f416:	4618      	mov	r0, r3
 800f418:	3708      	adds	r7, #8
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop
 800f420:	e000e010 	.word	0xe000e010

0800f424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b082      	sub	sp, #8
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f7ff ff29 	bl	800f284 <__NVIC_SetPriorityGrouping>
}
 800f432:	bf00      	nop
 800f434:	3708      	adds	r7, #8
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}

0800f43a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f43a:	b580      	push	{r7, lr}
 800f43c:	b086      	sub	sp, #24
 800f43e:	af00      	add	r7, sp, #0
 800f440:	4603      	mov	r3, r0
 800f442:	60b9      	str	r1, [r7, #8]
 800f444:	607a      	str	r2, [r7, #4]
 800f446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f448:	2300      	movs	r3, #0
 800f44a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f44c:	f7ff ff3e 	bl	800f2cc <__NVIC_GetPriorityGrouping>
 800f450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	68b9      	ldr	r1, [r7, #8]
 800f456:	6978      	ldr	r0, [r7, #20]
 800f458:	f7ff ff8e 	bl	800f378 <NVIC_EncodePriority>
 800f45c:	4602      	mov	r2, r0
 800f45e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f462:	4611      	mov	r1, r2
 800f464:	4618      	mov	r0, r3
 800f466:	f7ff ff5d 	bl	800f324 <__NVIC_SetPriority>
}
 800f46a:	bf00      	nop
 800f46c:	3718      	adds	r7, #24
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}

0800f472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f472:	b580      	push	{r7, lr}
 800f474:	b082      	sub	sp, #8
 800f476:	af00      	add	r7, sp, #0
 800f478:	4603      	mov	r3, r0
 800f47a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f47c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f480:	4618      	mov	r0, r3
 800f482:	f7ff ff31 	bl	800f2e8 <__NVIC_EnableIRQ>
}
 800f486:	bf00      	nop
 800f488:	3708      	adds	r7, #8
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}

0800f48e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f48e:	b580      	push	{r7, lr}
 800f490:	b082      	sub	sp, #8
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f7ff ffa2 	bl	800f3e0 <SysTick_Config>
 800f49c:	4603      	mov	r3, r0
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3708      	adds	r7, #8
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
	...

0800f4a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b086      	sub	sp, #24
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f4b4:	f7ff fc54 	bl	800ed60 <HAL_GetTick>
 800f4b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d101      	bne.n	800f4c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	e099      	b.n	800f5f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2202      	movs	r2, #2
 800f4c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	681a      	ldr	r2, [r3, #0]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f022 0201 	bic.w	r2, r2, #1
 800f4e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f4e4:	e00f      	b.n	800f506 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f4e6:	f7ff fc3b 	bl	800ed60 <HAL_GetTick>
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	1ad3      	subs	r3, r2, r3
 800f4f0:	2b05      	cmp	r3, #5
 800f4f2:	d908      	bls.n	800f506 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2220      	movs	r2, #32
 800f4f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2203      	movs	r2, #3
 800f4fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f502:	2303      	movs	r3, #3
 800f504:	e078      	b.n	800f5f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	f003 0301 	and.w	r3, r3, #1
 800f510:	2b00      	cmp	r3, #0
 800f512:	d1e8      	bne.n	800f4e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f51c:	697a      	ldr	r2, [r7, #20]
 800f51e:	4b38      	ldr	r3, [pc, #224]	; (800f600 <HAL_DMA_Init+0x158>)
 800f520:	4013      	ands	r3, r2
 800f522:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	685a      	ldr	r2, [r3, #4]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f532:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	691b      	ldr	r3, [r3, #16]
 800f538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f53e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	699b      	ldr	r3, [r3, #24]
 800f544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f54a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6a1b      	ldr	r3, [r3, #32]
 800f550:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f552:	697a      	ldr	r2, [r7, #20]
 800f554:	4313      	orrs	r3, r2
 800f556:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f55c:	2b04      	cmp	r3, #4
 800f55e:	d107      	bne.n	800f570 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f568:	4313      	orrs	r3, r2
 800f56a:	697a      	ldr	r2, [r7, #20]
 800f56c:	4313      	orrs	r3, r2
 800f56e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	697a      	ldr	r2, [r7, #20]
 800f576:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	695b      	ldr	r3, [r3, #20]
 800f57e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	f023 0307 	bic.w	r3, r3, #7
 800f586:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f58c:	697a      	ldr	r2, [r7, #20]
 800f58e:	4313      	orrs	r3, r2
 800f590:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f596:	2b04      	cmp	r3, #4
 800f598:	d117      	bne.n	800f5ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f59e:	697a      	ldr	r2, [r7, #20]
 800f5a0:	4313      	orrs	r3, r2
 800f5a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d00e      	beq.n	800f5ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f000 fb0d 	bl	800fbcc <DMA_CheckFifoParam>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d008      	beq.n	800f5ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2240      	movs	r2, #64	; 0x40
 800f5bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	e016      	b.n	800f5f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	697a      	ldr	r2, [r7, #20]
 800f5d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f000 fac4 	bl	800fb60 <DMA_CalcBaseAndBitshift>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5e0:	223f      	movs	r2, #63	; 0x3f
 800f5e2:	409a      	lsls	r2, r3
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800f5f6:	2300      	movs	r3, #0
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3718      	adds	r7, #24
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	f010803f 	.word	0xf010803f

0800f604 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b086      	sub	sp, #24
 800f608:	af00      	add	r7, sp, #0
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	607a      	str	r2, [r7, #4]
 800f610:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f612:	2300      	movs	r3, #0
 800f614:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f61a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f622:	2b01      	cmp	r3, #1
 800f624:	d101      	bne.n	800f62a <HAL_DMA_Start_IT+0x26>
 800f626:	2302      	movs	r3, #2
 800f628:	e040      	b.n	800f6ac <HAL_DMA_Start_IT+0xa8>
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	2201      	movs	r2, #1
 800f62e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	2b01      	cmp	r3, #1
 800f63c:	d12f      	bne.n	800f69e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	2202      	movs	r2, #2
 800f642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	2200      	movs	r2, #0
 800f64a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	687a      	ldr	r2, [r7, #4]
 800f650:	68b9      	ldr	r1, [r7, #8]
 800f652:	68f8      	ldr	r0, [r7, #12]
 800f654:	f000 fa56 	bl	800fb04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f65c:	223f      	movs	r2, #63	; 0x3f
 800f65e:	409a      	lsls	r2, r3
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	681a      	ldr	r2, [r3, #0]
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f042 0216 	orr.w	r2, r2, #22
 800f672:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d007      	beq.n	800f68c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	681a      	ldr	r2, [r3, #0]
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	f042 0208 	orr.w	r2, r2, #8
 800f68a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	681a      	ldr	r2, [r3, #0]
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	f042 0201 	orr.w	r2, r2, #1
 800f69a:	601a      	str	r2, [r3, #0]
 800f69c:	e005      	b.n	800f6aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f6a6:	2302      	movs	r3, #2
 800f6a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f6aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3718      	adds	r7, #24
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b084      	sub	sp, #16
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800f6c2:	f7ff fb4d 	bl	800ed60 <HAL_GetTick>
 800f6c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f6ce:	b2db      	uxtb	r3, r3
 800f6d0:	2b02      	cmp	r3, #2
 800f6d2:	d008      	beq.n	800f6e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2280      	movs	r2, #128	; 0x80
 800f6d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	e052      	b.n	800f78c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f022 0216 	bic.w	r2, r2, #22
 800f6f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	695a      	ldr	r2, [r3, #20]
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f704:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d103      	bne.n	800f716 <HAL_DMA_Abort+0x62>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f712:	2b00      	cmp	r3, #0
 800f714:	d007      	beq.n	800f726 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f022 0208 	bic.w	r2, r2, #8
 800f724:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	681a      	ldr	r2, [r3, #0]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f022 0201 	bic.w	r2, r2, #1
 800f734:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f736:	e013      	b.n	800f760 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f738:	f7ff fb12 	bl	800ed60 <HAL_GetTick>
 800f73c:	4602      	mov	r2, r0
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	1ad3      	subs	r3, r2, r3
 800f742:	2b05      	cmp	r3, #5
 800f744:	d90c      	bls.n	800f760 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2220      	movs	r2, #32
 800f74a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2203      	movs	r2, #3
 800f750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2200      	movs	r2, #0
 800f758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800f75c:	2303      	movs	r3, #3
 800f75e:	e015      	b.n	800f78c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f003 0301 	and.w	r3, r3, #1
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d1e4      	bne.n	800f738 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f772:	223f      	movs	r2, #63	; 0x3f
 800f774:	409a      	lsls	r2, r3
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2201      	movs	r2, #1
 800f77e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2200      	movs	r2, #0
 800f786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800f78a:	2300      	movs	r3, #0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3710      	adds	r7, #16
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f794:	b480      	push	{r7}
 800f796:	b083      	sub	sp, #12
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	2b02      	cmp	r3, #2
 800f7a6:	d004      	beq.n	800f7b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2280      	movs	r2, #128	; 0x80
 800f7ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	e00c      	b.n	800f7cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2205      	movs	r2, #5
 800f7b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	f022 0201 	bic.w	r2, r2, #1
 800f7c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f7ca:	2300      	movs	r3, #0
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	370c      	adds	r7, #12
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d6:	4770      	bx	lr

0800f7d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b086      	sub	sp, #24
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f7e4:	4b8e      	ldr	r3, [pc, #568]	; (800fa20 <HAL_DMA_IRQHandler+0x248>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	4a8e      	ldr	r2, [pc, #568]	; (800fa24 <HAL_DMA_IRQHandler+0x24c>)
 800f7ea:	fba2 2303 	umull	r2, r3, r2, r3
 800f7ee:	0a9b      	lsrs	r3, r3, #10
 800f7f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f802:	2208      	movs	r2, #8
 800f804:	409a      	lsls	r2, r3
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	4013      	ands	r3, r2
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d01a      	beq.n	800f844 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f003 0304 	and.w	r3, r3, #4
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d013      	beq.n	800f844 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	f022 0204 	bic.w	r2, r2, #4
 800f82a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f830:	2208      	movs	r2, #8
 800f832:	409a      	lsls	r2, r3
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f83c:	f043 0201 	orr.w	r2, r3, #1
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f848:	2201      	movs	r2, #1
 800f84a:	409a      	lsls	r2, r3
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	4013      	ands	r3, r2
 800f850:	2b00      	cmp	r3, #0
 800f852:	d012      	beq.n	800f87a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	695b      	ldr	r3, [r3, #20]
 800f85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d00b      	beq.n	800f87a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f866:	2201      	movs	r2, #1
 800f868:	409a      	lsls	r2, r3
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f872:	f043 0202 	orr.w	r2, r3, #2
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f87e:	2204      	movs	r2, #4
 800f880:	409a      	lsls	r2, r3
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	4013      	ands	r3, r2
 800f886:	2b00      	cmp	r3, #0
 800f888:	d012      	beq.n	800f8b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	f003 0302 	and.w	r3, r3, #2
 800f894:	2b00      	cmp	r3, #0
 800f896:	d00b      	beq.n	800f8b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f89c:	2204      	movs	r2, #4
 800f89e:	409a      	lsls	r2, r3
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8a8:	f043 0204 	orr.w	r2, r3, #4
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8b4:	2210      	movs	r2, #16
 800f8b6:	409a      	lsls	r2, r3
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	4013      	ands	r3, r2
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d043      	beq.n	800f948 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f003 0308 	and.w	r3, r3, #8
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d03c      	beq.n	800f948 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8d2:	2210      	movs	r2, #16
 800f8d4:	409a      	lsls	r2, r3
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d018      	beq.n	800f91a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d108      	bne.n	800f908 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d024      	beq.n	800f948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	4798      	blx	r3
 800f906:	e01f      	b.n	800f948 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d01b      	beq.n	800f948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	4798      	blx	r3
 800f918:	e016      	b.n	800f948 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f924:	2b00      	cmp	r3, #0
 800f926:	d107      	bne.n	800f938 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	f022 0208 	bic.w	r2, r2, #8
 800f936:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d003      	beq.n	800f948 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f94c:	2220      	movs	r2, #32
 800f94e:	409a      	lsls	r2, r3
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	4013      	ands	r3, r2
 800f954:	2b00      	cmp	r3, #0
 800f956:	f000 808f 	beq.w	800fa78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f003 0310 	and.w	r3, r3, #16
 800f964:	2b00      	cmp	r3, #0
 800f966:	f000 8087 	beq.w	800fa78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f96e:	2220      	movs	r2, #32
 800f970:	409a      	lsls	r2, r3
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f97c:	b2db      	uxtb	r3, r3
 800f97e:	2b05      	cmp	r3, #5
 800f980:	d136      	bne.n	800f9f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	f022 0216 	bic.w	r2, r2, #22
 800f990:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	695a      	ldr	r2, [r3, #20]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f9a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d103      	bne.n	800f9b2 <HAL_DMA_IRQHandler+0x1da>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d007      	beq.n	800f9c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	681a      	ldr	r2, [r3, #0]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f022 0208 	bic.w	r2, r2, #8
 800f9c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f9c6:	223f      	movs	r2, #63	; 0x3f
 800f9c8:	409a      	lsls	r2, r3
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2201      	movs	r2, #1
 800f9d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d07e      	beq.n	800fae4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	4798      	blx	r3
        }
        return;
 800f9ee:	e079      	b.n	800fae4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d01d      	beq.n	800fa3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d10d      	bne.n	800fa28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d031      	beq.n	800fa78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	4798      	blx	r3
 800fa1c:	e02c      	b.n	800fa78 <HAL_DMA_IRQHandler+0x2a0>
 800fa1e:	bf00      	nop
 800fa20:	20000008 	.word	0x20000008
 800fa24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d023      	beq.n	800fa78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	4798      	blx	r3
 800fa38:	e01e      	b.n	800fa78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d10f      	bne.n	800fa68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	681a      	ldr	r2, [r3, #0]
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f022 0210 	bic.w	r2, r2, #16
 800fa56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2201      	movs	r2, #1
 800fa5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2200      	movs	r2, #0
 800fa64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d003      	beq.n	800fa78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d032      	beq.n	800fae6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa84:	f003 0301 	and.w	r3, r3, #1
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d022      	beq.n	800fad2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2205      	movs	r2, #5
 800fa90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	681a      	ldr	r2, [r3, #0]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f022 0201 	bic.w	r2, r2, #1
 800faa2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	3301      	adds	r3, #1
 800faa8:	60bb      	str	r3, [r7, #8]
 800faaa:	697a      	ldr	r2, [r7, #20]
 800faac:	429a      	cmp	r2, r3
 800faae:	d307      	bcc.n	800fac0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f003 0301 	and.w	r3, r3, #1
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d1f2      	bne.n	800faa4 <HAL_DMA_IRQHandler+0x2cc>
 800fabe:	e000      	b.n	800fac2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800fac0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2201      	movs	r2, #1
 800fac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2200      	movs	r2, #0
 800face:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d005      	beq.n	800fae6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	4798      	blx	r3
 800fae2:	e000      	b.n	800fae6 <HAL_DMA_IRQHandler+0x30e>
        return;
 800fae4:	bf00      	nop
    }
  }
}
 800fae6:	3718      	adds	r7, #24
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800faec:	b480      	push	{r7}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	370c      	adds	r7, #12
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr

0800fb04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fb04:	b480      	push	{r7}
 800fb06:	b085      	sub	sp, #20
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	60f8      	str	r0, [r7, #12]
 800fb0c:	60b9      	str	r1, [r7, #8]
 800fb0e:	607a      	str	r2, [r7, #4]
 800fb10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	681a      	ldr	r2, [r3, #0]
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fb20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	683a      	ldr	r2, [r7, #0]
 800fb28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	689b      	ldr	r3, [r3, #8]
 800fb2e:	2b40      	cmp	r3, #64	; 0x40
 800fb30:	d108      	bne.n	800fb44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	687a      	ldr	r2, [r7, #4]
 800fb38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	68ba      	ldr	r2, [r7, #8]
 800fb40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800fb42:	e007      	b.n	800fb54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	68ba      	ldr	r2, [r7, #8]
 800fb4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	687a      	ldr	r2, [r7, #4]
 800fb52:	60da      	str	r2, [r3, #12]
}
 800fb54:	bf00      	nop
 800fb56:	3714      	adds	r7, #20
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr

0800fb60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800fb60:	b480      	push	{r7}
 800fb62:	b085      	sub	sp, #20
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	b2db      	uxtb	r3, r3
 800fb6e:	3b10      	subs	r3, #16
 800fb70:	4a14      	ldr	r2, [pc, #80]	; (800fbc4 <DMA_CalcBaseAndBitshift+0x64>)
 800fb72:	fba2 2303 	umull	r2, r3, r2, r3
 800fb76:	091b      	lsrs	r3, r3, #4
 800fb78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800fb7a:	4a13      	ldr	r2, [pc, #76]	; (800fbc8 <DMA_CalcBaseAndBitshift+0x68>)
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	4413      	add	r3, r2
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	461a      	mov	r2, r3
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2b03      	cmp	r3, #3
 800fb8c:	d909      	bls.n	800fba2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800fb96:	f023 0303 	bic.w	r3, r3, #3
 800fb9a:	1d1a      	adds	r2, r3, #4
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	659a      	str	r2, [r3, #88]	; 0x58
 800fba0:	e007      	b.n	800fbb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800fbaa:	f023 0303 	bic.w	r3, r3, #3
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3714      	adds	r7, #20
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc0:	4770      	bx	lr
 800fbc2:	bf00      	nop
 800fbc4:	aaaaaaab 	.word	0xaaaaaaab
 800fbc8:	0802166c 	.word	0x0802166c

0800fbcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b085      	sub	sp, #20
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	699b      	ldr	r3, [r3, #24]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d11f      	bne.n	800fc26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	2b03      	cmp	r3, #3
 800fbea:	d856      	bhi.n	800fc9a <DMA_CheckFifoParam+0xce>
 800fbec:	a201      	add	r2, pc, #4	; (adr r2, 800fbf4 <DMA_CheckFifoParam+0x28>)
 800fbee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbf2:	bf00      	nop
 800fbf4:	0800fc05 	.word	0x0800fc05
 800fbf8:	0800fc17 	.word	0x0800fc17
 800fbfc:	0800fc05 	.word	0x0800fc05
 800fc00:	0800fc9b 	.word	0x0800fc9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d046      	beq.n	800fc9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800fc10:	2301      	movs	r3, #1
 800fc12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fc14:	e043      	b.n	800fc9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fc1e:	d140      	bne.n	800fca2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800fc20:	2301      	movs	r3, #1
 800fc22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fc24:	e03d      	b.n	800fca2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	699b      	ldr	r3, [r3, #24]
 800fc2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fc2e:	d121      	bne.n	800fc74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	2b03      	cmp	r3, #3
 800fc34:	d837      	bhi.n	800fca6 <DMA_CheckFifoParam+0xda>
 800fc36:	a201      	add	r2, pc, #4	; (adr r2, 800fc3c <DMA_CheckFifoParam+0x70>)
 800fc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc3c:	0800fc4d 	.word	0x0800fc4d
 800fc40:	0800fc53 	.word	0x0800fc53
 800fc44:	0800fc4d 	.word	0x0800fc4d
 800fc48:	0800fc65 	.word	0x0800fc65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	73fb      	strb	r3, [r7, #15]
      break;
 800fc50:	e030      	b.n	800fcb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d025      	beq.n	800fcaa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800fc5e:	2301      	movs	r3, #1
 800fc60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fc62:	e022      	b.n	800fcaa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fc6c:	d11f      	bne.n	800fcae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800fc6e:	2301      	movs	r3, #1
 800fc70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800fc72:	e01c      	b.n	800fcae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800fc74:	68bb      	ldr	r3, [r7, #8]
 800fc76:	2b02      	cmp	r3, #2
 800fc78:	d903      	bls.n	800fc82 <DMA_CheckFifoParam+0xb6>
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	2b03      	cmp	r3, #3
 800fc7e:	d003      	beq.n	800fc88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800fc80:	e018      	b.n	800fcb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800fc82:	2301      	movs	r3, #1
 800fc84:	73fb      	strb	r3, [r7, #15]
      break;
 800fc86:	e015      	b.n	800fcb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d00e      	beq.n	800fcb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800fc94:	2301      	movs	r3, #1
 800fc96:	73fb      	strb	r3, [r7, #15]
      break;
 800fc98:	e00b      	b.n	800fcb2 <DMA_CheckFifoParam+0xe6>
      break;
 800fc9a:	bf00      	nop
 800fc9c:	e00a      	b.n	800fcb4 <DMA_CheckFifoParam+0xe8>
      break;
 800fc9e:	bf00      	nop
 800fca0:	e008      	b.n	800fcb4 <DMA_CheckFifoParam+0xe8>
      break;
 800fca2:	bf00      	nop
 800fca4:	e006      	b.n	800fcb4 <DMA_CheckFifoParam+0xe8>
      break;
 800fca6:	bf00      	nop
 800fca8:	e004      	b.n	800fcb4 <DMA_CheckFifoParam+0xe8>
      break;
 800fcaa:	bf00      	nop
 800fcac:	e002      	b.n	800fcb4 <DMA_CheckFifoParam+0xe8>
      break;   
 800fcae:	bf00      	nop
 800fcb0:	e000      	b.n	800fcb4 <DMA_CheckFifoParam+0xe8>
      break;
 800fcb2:	bf00      	nop
    }
  } 
  
  return status; 
 800fcb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3714      	adds	r7, #20
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr
 800fcc2:	bf00      	nop

0800fcc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b089      	sub	sp, #36	; 0x24
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fcda:	2300      	movs	r3, #0
 800fcdc:	61fb      	str	r3, [r7, #28]
 800fcde:	e16b      	b.n	800ffb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800fce0:	2201      	movs	r2, #1
 800fce2:	69fb      	ldr	r3, [r7, #28]
 800fce4:	fa02 f303 	lsl.w	r3, r2, r3
 800fce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	697a      	ldr	r2, [r7, #20]
 800fcf0:	4013      	ands	r3, r2
 800fcf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800fcf4:	693a      	ldr	r2, [r7, #16]
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	f040 815a 	bne.w	800ffb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	f003 0303 	and.w	r3, r3, #3
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d005      	beq.n	800fd16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800fd12:	2b02      	cmp	r3, #2
 800fd14:	d130      	bne.n	800fd78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	689b      	ldr	r3, [r3, #8]
 800fd1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800fd1c:	69fb      	ldr	r3, [r7, #28]
 800fd1e:	005b      	lsls	r3, r3, #1
 800fd20:	2203      	movs	r2, #3
 800fd22:	fa02 f303 	lsl.w	r3, r2, r3
 800fd26:	43db      	mvns	r3, r3
 800fd28:	69ba      	ldr	r2, [r7, #24]
 800fd2a:	4013      	ands	r3, r2
 800fd2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	68da      	ldr	r2, [r3, #12]
 800fd32:	69fb      	ldr	r3, [r7, #28]
 800fd34:	005b      	lsls	r3, r3, #1
 800fd36:	fa02 f303 	lsl.w	r3, r2, r3
 800fd3a:	69ba      	ldr	r2, [r7, #24]
 800fd3c:	4313      	orrs	r3, r2
 800fd3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	69ba      	ldr	r2, [r7, #24]
 800fd44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fd4c:	2201      	movs	r2, #1
 800fd4e:	69fb      	ldr	r3, [r7, #28]
 800fd50:	fa02 f303 	lsl.w	r3, r2, r3
 800fd54:	43db      	mvns	r3, r3
 800fd56:	69ba      	ldr	r2, [r7, #24]
 800fd58:	4013      	ands	r3, r2
 800fd5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	091b      	lsrs	r3, r3, #4
 800fd62:	f003 0201 	and.w	r2, r3, #1
 800fd66:	69fb      	ldr	r3, [r7, #28]
 800fd68:	fa02 f303 	lsl.w	r3, r2, r3
 800fd6c:	69ba      	ldr	r2, [r7, #24]
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	69ba      	ldr	r2, [r7, #24]
 800fd76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	685b      	ldr	r3, [r3, #4]
 800fd7c:	f003 0303 	and.w	r3, r3, #3
 800fd80:	2b03      	cmp	r3, #3
 800fd82:	d017      	beq.n	800fdb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fd8a:	69fb      	ldr	r3, [r7, #28]
 800fd8c:	005b      	lsls	r3, r3, #1
 800fd8e:	2203      	movs	r2, #3
 800fd90:	fa02 f303 	lsl.w	r3, r2, r3
 800fd94:	43db      	mvns	r3, r3
 800fd96:	69ba      	ldr	r2, [r7, #24]
 800fd98:	4013      	ands	r3, r2
 800fd9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	689a      	ldr	r2, [r3, #8]
 800fda0:	69fb      	ldr	r3, [r7, #28]
 800fda2:	005b      	lsls	r3, r3, #1
 800fda4:	fa02 f303 	lsl.w	r3, r2, r3
 800fda8:	69ba      	ldr	r2, [r7, #24]
 800fdaa:	4313      	orrs	r3, r2
 800fdac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	69ba      	ldr	r2, [r7, #24]
 800fdb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	685b      	ldr	r3, [r3, #4]
 800fdb8:	f003 0303 	and.w	r3, r3, #3
 800fdbc:	2b02      	cmp	r3, #2
 800fdbe:	d123      	bne.n	800fe08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800fdc0:	69fb      	ldr	r3, [r7, #28]
 800fdc2:	08da      	lsrs	r2, r3, #3
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	3208      	adds	r2, #8
 800fdc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800fdce:	69fb      	ldr	r3, [r7, #28]
 800fdd0:	f003 0307 	and.w	r3, r3, #7
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	220f      	movs	r2, #15
 800fdd8:	fa02 f303 	lsl.w	r3, r2, r3
 800fddc:	43db      	mvns	r3, r3
 800fdde:	69ba      	ldr	r2, [r7, #24]
 800fde0:	4013      	ands	r3, r2
 800fde2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	691a      	ldr	r2, [r3, #16]
 800fde8:	69fb      	ldr	r3, [r7, #28]
 800fdea:	f003 0307 	and.w	r3, r3, #7
 800fdee:	009b      	lsls	r3, r3, #2
 800fdf0:	fa02 f303 	lsl.w	r3, r2, r3
 800fdf4:	69ba      	ldr	r2, [r7, #24]
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800fdfa:	69fb      	ldr	r3, [r7, #28]
 800fdfc:	08da      	lsrs	r2, r3, #3
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	3208      	adds	r2, #8
 800fe02:	69b9      	ldr	r1, [r7, #24]
 800fe04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800fe0e:	69fb      	ldr	r3, [r7, #28]
 800fe10:	005b      	lsls	r3, r3, #1
 800fe12:	2203      	movs	r2, #3
 800fe14:	fa02 f303 	lsl.w	r3, r2, r3
 800fe18:	43db      	mvns	r3, r3
 800fe1a:	69ba      	ldr	r2, [r7, #24]
 800fe1c:	4013      	ands	r3, r2
 800fe1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	685b      	ldr	r3, [r3, #4]
 800fe24:	f003 0203 	and.w	r2, r3, #3
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	005b      	lsls	r3, r3, #1
 800fe2c:	fa02 f303 	lsl.w	r3, r2, r3
 800fe30:	69ba      	ldr	r2, [r7, #24]
 800fe32:	4313      	orrs	r3, r2
 800fe34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	69ba      	ldr	r2, [r7, #24]
 800fe3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	f000 80b4 	beq.w	800ffb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	60fb      	str	r3, [r7, #12]
 800fe4e:	4b60      	ldr	r3, [pc, #384]	; (800ffd0 <HAL_GPIO_Init+0x30c>)
 800fe50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe52:	4a5f      	ldr	r2, [pc, #380]	; (800ffd0 <HAL_GPIO_Init+0x30c>)
 800fe54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fe58:	6453      	str	r3, [r2, #68]	; 0x44
 800fe5a:	4b5d      	ldr	r3, [pc, #372]	; (800ffd0 <HAL_GPIO_Init+0x30c>)
 800fe5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe62:	60fb      	str	r3, [r7, #12]
 800fe64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800fe66:	4a5b      	ldr	r2, [pc, #364]	; (800ffd4 <HAL_GPIO_Init+0x310>)
 800fe68:	69fb      	ldr	r3, [r7, #28]
 800fe6a:	089b      	lsrs	r3, r3, #2
 800fe6c:	3302      	adds	r3, #2
 800fe6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	f003 0303 	and.w	r3, r3, #3
 800fe7a:	009b      	lsls	r3, r3, #2
 800fe7c:	220f      	movs	r2, #15
 800fe7e:	fa02 f303 	lsl.w	r3, r2, r3
 800fe82:	43db      	mvns	r3, r3
 800fe84:	69ba      	ldr	r2, [r7, #24]
 800fe86:	4013      	ands	r3, r2
 800fe88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	4a52      	ldr	r2, [pc, #328]	; (800ffd8 <HAL_GPIO_Init+0x314>)
 800fe8e:	4293      	cmp	r3, r2
 800fe90:	d02b      	beq.n	800feea <HAL_GPIO_Init+0x226>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	4a51      	ldr	r2, [pc, #324]	; (800ffdc <HAL_GPIO_Init+0x318>)
 800fe96:	4293      	cmp	r3, r2
 800fe98:	d025      	beq.n	800fee6 <HAL_GPIO_Init+0x222>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	4a50      	ldr	r2, [pc, #320]	; (800ffe0 <HAL_GPIO_Init+0x31c>)
 800fe9e:	4293      	cmp	r3, r2
 800fea0:	d01f      	beq.n	800fee2 <HAL_GPIO_Init+0x21e>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	4a4f      	ldr	r2, [pc, #316]	; (800ffe4 <HAL_GPIO_Init+0x320>)
 800fea6:	4293      	cmp	r3, r2
 800fea8:	d019      	beq.n	800fede <HAL_GPIO_Init+0x21a>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	4a4e      	ldr	r2, [pc, #312]	; (800ffe8 <HAL_GPIO_Init+0x324>)
 800feae:	4293      	cmp	r3, r2
 800feb0:	d013      	beq.n	800feda <HAL_GPIO_Init+0x216>
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	4a4d      	ldr	r2, [pc, #308]	; (800ffec <HAL_GPIO_Init+0x328>)
 800feb6:	4293      	cmp	r3, r2
 800feb8:	d00d      	beq.n	800fed6 <HAL_GPIO_Init+0x212>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	4a4c      	ldr	r2, [pc, #304]	; (800fff0 <HAL_GPIO_Init+0x32c>)
 800febe:	4293      	cmp	r3, r2
 800fec0:	d007      	beq.n	800fed2 <HAL_GPIO_Init+0x20e>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	4a4b      	ldr	r2, [pc, #300]	; (800fff4 <HAL_GPIO_Init+0x330>)
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d101      	bne.n	800fece <HAL_GPIO_Init+0x20a>
 800feca:	2307      	movs	r3, #7
 800fecc:	e00e      	b.n	800feec <HAL_GPIO_Init+0x228>
 800fece:	2308      	movs	r3, #8
 800fed0:	e00c      	b.n	800feec <HAL_GPIO_Init+0x228>
 800fed2:	2306      	movs	r3, #6
 800fed4:	e00a      	b.n	800feec <HAL_GPIO_Init+0x228>
 800fed6:	2305      	movs	r3, #5
 800fed8:	e008      	b.n	800feec <HAL_GPIO_Init+0x228>
 800feda:	2304      	movs	r3, #4
 800fedc:	e006      	b.n	800feec <HAL_GPIO_Init+0x228>
 800fede:	2303      	movs	r3, #3
 800fee0:	e004      	b.n	800feec <HAL_GPIO_Init+0x228>
 800fee2:	2302      	movs	r3, #2
 800fee4:	e002      	b.n	800feec <HAL_GPIO_Init+0x228>
 800fee6:	2301      	movs	r3, #1
 800fee8:	e000      	b.n	800feec <HAL_GPIO_Init+0x228>
 800feea:	2300      	movs	r3, #0
 800feec:	69fa      	ldr	r2, [r7, #28]
 800feee:	f002 0203 	and.w	r2, r2, #3
 800fef2:	0092      	lsls	r2, r2, #2
 800fef4:	4093      	lsls	r3, r2
 800fef6:	69ba      	ldr	r2, [r7, #24]
 800fef8:	4313      	orrs	r3, r2
 800fefa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800fefc:	4935      	ldr	r1, [pc, #212]	; (800ffd4 <HAL_GPIO_Init+0x310>)
 800fefe:	69fb      	ldr	r3, [r7, #28]
 800ff00:	089b      	lsrs	r3, r3, #2
 800ff02:	3302      	adds	r3, #2
 800ff04:	69ba      	ldr	r2, [r7, #24]
 800ff06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ff0a:	4b3b      	ldr	r3, [pc, #236]	; (800fff8 <HAL_GPIO_Init+0x334>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	43db      	mvns	r3, r3
 800ff14:	69ba      	ldr	r2, [r7, #24]
 800ff16:	4013      	ands	r3, r2
 800ff18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	685b      	ldr	r3, [r3, #4]
 800ff1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d003      	beq.n	800ff2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800ff26:	69ba      	ldr	r2, [r7, #24]
 800ff28:	693b      	ldr	r3, [r7, #16]
 800ff2a:	4313      	orrs	r3, r2
 800ff2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ff2e:	4a32      	ldr	r2, [pc, #200]	; (800fff8 <HAL_GPIO_Init+0x334>)
 800ff30:	69bb      	ldr	r3, [r7, #24]
 800ff32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ff34:	4b30      	ldr	r3, [pc, #192]	; (800fff8 <HAL_GPIO_Init+0x334>)
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ff3a:	693b      	ldr	r3, [r7, #16]
 800ff3c:	43db      	mvns	r3, r3
 800ff3e:	69ba      	ldr	r2, [r7, #24]
 800ff40:	4013      	ands	r3, r2
 800ff42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d003      	beq.n	800ff58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ff50:	69ba      	ldr	r2, [r7, #24]
 800ff52:	693b      	ldr	r3, [r7, #16]
 800ff54:	4313      	orrs	r3, r2
 800ff56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ff58:	4a27      	ldr	r2, [pc, #156]	; (800fff8 <HAL_GPIO_Init+0x334>)
 800ff5a:	69bb      	ldr	r3, [r7, #24]
 800ff5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ff5e:	4b26      	ldr	r3, [pc, #152]	; (800fff8 <HAL_GPIO_Init+0x334>)
 800ff60:	689b      	ldr	r3, [r3, #8]
 800ff62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	43db      	mvns	r3, r3
 800ff68:	69ba      	ldr	r2, [r7, #24]
 800ff6a:	4013      	ands	r3, r2
 800ff6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	685b      	ldr	r3, [r3, #4]
 800ff72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d003      	beq.n	800ff82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800ff7a:	69ba      	ldr	r2, [r7, #24]
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	4313      	orrs	r3, r2
 800ff80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ff82:	4a1d      	ldr	r2, [pc, #116]	; (800fff8 <HAL_GPIO_Init+0x334>)
 800ff84:	69bb      	ldr	r3, [r7, #24]
 800ff86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ff88:	4b1b      	ldr	r3, [pc, #108]	; (800fff8 <HAL_GPIO_Init+0x334>)
 800ff8a:	68db      	ldr	r3, [r3, #12]
 800ff8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	43db      	mvns	r3, r3
 800ff92:	69ba      	ldr	r2, [r7, #24]
 800ff94:	4013      	ands	r3, r2
 800ff96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	685b      	ldr	r3, [r3, #4]
 800ff9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d003      	beq.n	800ffac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800ffa4:	69ba      	ldr	r2, [r7, #24]
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	4313      	orrs	r3, r2
 800ffaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ffac:	4a12      	ldr	r2, [pc, #72]	; (800fff8 <HAL_GPIO_Init+0x334>)
 800ffae:	69bb      	ldr	r3, [r7, #24]
 800ffb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ffb2:	69fb      	ldr	r3, [r7, #28]
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	61fb      	str	r3, [r7, #28]
 800ffb8:	69fb      	ldr	r3, [r7, #28]
 800ffba:	2b0f      	cmp	r3, #15
 800ffbc:	f67f ae90 	bls.w	800fce0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ffc0:	bf00      	nop
 800ffc2:	bf00      	nop
 800ffc4:	3724      	adds	r7, #36	; 0x24
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffcc:	4770      	bx	lr
 800ffce:	bf00      	nop
 800ffd0:	40023800 	.word	0x40023800
 800ffd4:	40013800 	.word	0x40013800
 800ffd8:	40020000 	.word	0x40020000
 800ffdc:	40020400 	.word	0x40020400
 800ffe0:	40020800 	.word	0x40020800
 800ffe4:	40020c00 	.word	0x40020c00
 800ffe8:	40021000 	.word	0x40021000
 800ffec:	40021400 	.word	0x40021400
 800fff0:	40021800 	.word	0x40021800
 800fff4:	40021c00 	.word	0x40021c00
 800fff8:	40013c00 	.word	0x40013c00

0800fffc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800fffc:	b480      	push	{r7}
 800fffe:	b085      	sub	sp, #20
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	460b      	mov	r3, r1
 8010006:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	691a      	ldr	r2, [r3, #16]
 801000c:	887b      	ldrh	r3, [r7, #2]
 801000e:	4013      	ands	r3, r2
 8010010:	2b00      	cmp	r3, #0
 8010012:	d002      	beq.n	801001a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8010014:	2301      	movs	r3, #1
 8010016:	73fb      	strb	r3, [r7, #15]
 8010018:	e001      	b.n	801001e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801001a:	2300      	movs	r3, #0
 801001c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801001e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010020:	4618      	mov	r0, r3
 8010022:	3714      	adds	r7, #20
 8010024:	46bd      	mov	sp, r7
 8010026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002a:	4770      	bx	lr

0801002c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801002c:	b480      	push	{r7}
 801002e:	b083      	sub	sp, #12
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	460b      	mov	r3, r1
 8010036:	807b      	strh	r3, [r7, #2]
 8010038:	4613      	mov	r3, r2
 801003a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801003c:	787b      	ldrb	r3, [r7, #1]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d003      	beq.n	801004a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010042:	887a      	ldrh	r2, [r7, #2]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8010048:	e003      	b.n	8010052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801004a:	887b      	ldrh	r3, [r7, #2]
 801004c:	041a      	lsls	r2, r3, #16
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	619a      	str	r2, [r3, #24]
}
 8010052:	bf00      	nop
 8010054:	370c      	adds	r7, #12
 8010056:	46bd      	mov	sp, r7
 8010058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005c:	4770      	bx	lr
	...

08010060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d101      	bne.n	8010072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801006e:	2301      	movs	r3, #1
 8010070:	e12b      	b.n	80102ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010078:	b2db      	uxtb	r3, r3
 801007a:	2b00      	cmp	r3, #0
 801007c:	d106      	bne.n	801008c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2200      	movs	r2, #0
 8010082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f7fe fa32 	bl	800e4f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2224      	movs	r2, #36	; 0x24
 8010090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	681a      	ldr	r2, [r3, #0]
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	f022 0201 	bic.w	r2, r2, #1
 80100a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	681a      	ldr	r2, [r3, #0]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80100b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80100c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80100c4:	f000 fd40 	bl	8010b48 <HAL_RCC_GetPCLK1Freq>
 80100c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	4a81      	ldr	r2, [pc, #516]	; (80102d4 <HAL_I2C_Init+0x274>)
 80100d0:	4293      	cmp	r3, r2
 80100d2:	d807      	bhi.n	80100e4 <HAL_I2C_Init+0x84>
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	4a80      	ldr	r2, [pc, #512]	; (80102d8 <HAL_I2C_Init+0x278>)
 80100d8:	4293      	cmp	r3, r2
 80100da:	bf94      	ite	ls
 80100dc:	2301      	movls	r3, #1
 80100de:	2300      	movhi	r3, #0
 80100e0:	b2db      	uxtb	r3, r3
 80100e2:	e006      	b.n	80100f2 <HAL_I2C_Init+0x92>
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	4a7d      	ldr	r2, [pc, #500]	; (80102dc <HAL_I2C_Init+0x27c>)
 80100e8:	4293      	cmp	r3, r2
 80100ea:	bf94      	ite	ls
 80100ec:	2301      	movls	r3, #1
 80100ee:	2300      	movhi	r3, #0
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d001      	beq.n	80100fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80100f6:	2301      	movs	r3, #1
 80100f8:	e0e7      	b.n	80102ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	4a78      	ldr	r2, [pc, #480]	; (80102e0 <HAL_I2C_Init+0x280>)
 80100fe:	fba2 2303 	umull	r2, r3, r2, r3
 8010102:	0c9b      	lsrs	r3, r3, #18
 8010104:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	68ba      	ldr	r2, [r7, #8]
 8010116:	430a      	orrs	r2, r1
 8010118:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	6a1b      	ldr	r3, [r3, #32]
 8010120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	4a6a      	ldr	r2, [pc, #424]	; (80102d4 <HAL_I2C_Init+0x274>)
 801012a:	4293      	cmp	r3, r2
 801012c:	d802      	bhi.n	8010134 <HAL_I2C_Init+0xd4>
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	3301      	adds	r3, #1
 8010132:	e009      	b.n	8010148 <HAL_I2C_Init+0xe8>
 8010134:	68bb      	ldr	r3, [r7, #8]
 8010136:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801013a:	fb02 f303 	mul.w	r3, r2, r3
 801013e:	4a69      	ldr	r2, [pc, #420]	; (80102e4 <HAL_I2C_Init+0x284>)
 8010140:	fba2 2303 	umull	r2, r3, r2, r3
 8010144:	099b      	lsrs	r3, r3, #6
 8010146:	3301      	adds	r3, #1
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	6812      	ldr	r2, [r2, #0]
 801014c:	430b      	orrs	r3, r1
 801014e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	69db      	ldr	r3, [r3, #28]
 8010156:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801015a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	685b      	ldr	r3, [r3, #4]
 8010162:	495c      	ldr	r1, [pc, #368]	; (80102d4 <HAL_I2C_Init+0x274>)
 8010164:	428b      	cmp	r3, r1
 8010166:	d819      	bhi.n	801019c <HAL_I2C_Init+0x13c>
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	1e59      	subs	r1, r3, #1
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	685b      	ldr	r3, [r3, #4]
 8010170:	005b      	lsls	r3, r3, #1
 8010172:	fbb1 f3f3 	udiv	r3, r1, r3
 8010176:	1c59      	adds	r1, r3, #1
 8010178:	f640 73fc 	movw	r3, #4092	; 0xffc
 801017c:	400b      	ands	r3, r1
 801017e:	2b00      	cmp	r3, #0
 8010180:	d00a      	beq.n	8010198 <HAL_I2C_Init+0x138>
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	1e59      	subs	r1, r3, #1
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	005b      	lsls	r3, r3, #1
 801018c:	fbb1 f3f3 	udiv	r3, r1, r3
 8010190:	3301      	adds	r3, #1
 8010192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010196:	e051      	b.n	801023c <HAL_I2C_Init+0x1dc>
 8010198:	2304      	movs	r3, #4
 801019a:	e04f      	b.n	801023c <HAL_I2C_Init+0x1dc>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	689b      	ldr	r3, [r3, #8]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d111      	bne.n	80101c8 <HAL_I2C_Init+0x168>
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	1e58      	subs	r0, r3, #1
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6859      	ldr	r1, [r3, #4]
 80101ac:	460b      	mov	r3, r1
 80101ae:	005b      	lsls	r3, r3, #1
 80101b0:	440b      	add	r3, r1
 80101b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80101b6:	3301      	adds	r3, #1
 80101b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80101bc:	2b00      	cmp	r3, #0
 80101be:	bf0c      	ite	eq
 80101c0:	2301      	moveq	r3, #1
 80101c2:	2300      	movne	r3, #0
 80101c4:	b2db      	uxtb	r3, r3
 80101c6:	e012      	b.n	80101ee <HAL_I2C_Init+0x18e>
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	1e58      	subs	r0, r3, #1
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6859      	ldr	r1, [r3, #4]
 80101d0:	460b      	mov	r3, r1
 80101d2:	009b      	lsls	r3, r3, #2
 80101d4:	440b      	add	r3, r1
 80101d6:	0099      	lsls	r1, r3, #2
 80101d8:	440b      	add	r3, r1
 80101da:	fbb0 f3f3 	udiv	r3, r0, r3
 80101de:	3301      	adds	r3, #1
 80101e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	bf0c      	ite	eq
 80101e8:	2301      	moveq	r3, #1
 80101ea:	2300      	movne	r3, #0
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d001      	beq.n	80101f6 <HAL_I2C_Init+0x196>
 80101f2:	2301      	movs	r3, #1
 80101f4:	e022      	b.n	801023c <HAL_I2C_Init+0x1dc>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	689b      	ldr	r3, [r3, #8]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d10e      	bne.n	801021c <HAL_I2C_Init+0x1bc>
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	1e58      	subs	r0, r3, #1
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6859      	ldr	r1, [r3, #4]
 8010206:	460b      	mov	r3, r1
 8010208:	005b      	lsls	r3, r3, #1
 801020a:	440b      	add	r3, r1
 801020c:	fbb0 f3f3 	udiv	r3, r0, r3
 8010210:	3301      	adds	r3, #1
 8010212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801021a:	e00f      	b.n	801023c <HAL_I2C_Init+0x1dc>
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	1e58      	subs	r0, r3, #1
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6859      	ldr	r1, [r3, #4]
 8010224:	460b      	mov	r3, r1
 8010226:	009b      	lsls	r3, r3, #2
 8010228:	440b      	add	r3, r1
 801022a:	0099      	lsls	r1, r3, #2
 801022c:	440b      	add	r3, r1
 801022e:	fbb0 f3f3 	udiv	r3, r0, r3
 8010232:	3301      	adds	r3, #1
 8010234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010238:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801023c:	6879      	ldr	r1, [r7, #4]
 801023e:	6809      	ldr	r1, [r1, #0]
 8010240:	4313      	orrs	r3, r2
 8010242:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	69da      	ldr	r2, [r3, #28]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6a1b      	ldr	r3, [r3, #32]
 8010256:	431a      	orrs	r2, r3
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	430a      	orrs	r2, r1
 801025e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	689b      	ldr	r3, [r3, #8]
 8010266:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801026a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801026e:	687a      	ldr	r2, [r7, #4]
 8010270:	6911      	ldr	r1, [r2, #16]
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	68d2      	ldr	r2, [r2, #12]
 8010276:	4311      	orrs	r1, r2
 8010278:	687a      	ldr	r2, [r7, #4]
 801027a:	6812      	ldr	r2, [r2, #0]
 801027c:	430b      	orrs	r3, r1
 801027e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	68db      	ldr	r3, [r3, #12]
 8010286:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	695a      	ldr	r2, [r3, #20]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	699b      	ldr	r3, [r3, #24]
 8010292:	431a      	orrs	r2, r3
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	430a      	orrs	r2, r1
 801029a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	f042 0201 	orr.w	r2, r2, #1
 80102aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2200      	movs	r2, #0
 80102b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2220      	movs	r2, #32
 80102b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2200      	movs	r2, #0
 80102be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2200      	movs	r2, #0
 80102c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80102c8:	2300      	movs	r3, #0
}
 80102ca:	4618      	mov	r0, r3
 80102cc:	3710      	adds	r7, #16
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}
 80102d2:	bf00      	nop
 80102d4:	000186a0 	.word	0x000186a0
 80102d8:	001e847f 	.word	0x001e847f
 80102dc:	003d08ff 	.word	0x003d08ff
 80102e0:	431bde83 	.word	0x431bde83
 80102e4:	10624dd3 	.word	0x10624dd3

080102e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b086      	sub	sp, #24
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d101      	bne.n	80102fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80102f6:	2301      	movs	r3, #1
 80102f8:	e267      	b.n	80107ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	f003 0301 	and.w	r3, r3, #1
 8010302:	2b00      	cmp	r3, #0
 8010304:	d075      	beq.n	80103f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8010306:	4b88      	ldr	r3, [pc, #544]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 8010308:	689b      	ldr	r3, [r3, #8]
 801030a:	f003 030c 	and.w	r3, r3, #12
 801030e:	2b04      	cmp	r3, #4
 8010310:	d00c      	beq.n	801032c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010312:	4b85      	ldr	r3, [pc, #532]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 8010314:	689b      	ldr	r3, [r3, #8]
 8010316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801031a:	2b08      	cmp	r3, #8
 801031c:	d112      	bne.n	8010344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801031e:	4b82      	ldr	r3, [pc, #520]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801032a:	d10b      	bne.n	8010344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801032c:	4b7e      	ldr	r3, [pc, #504]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010334:	2b00      	cmp	r3, #0
 8010336:	d05b      	beq.n	80103f0 <HAL_RCC_OscConfig+0x108>
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d157      	bne.n	80103f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8010340:	2301      	movs	r3, #1
 8010342:	e242      	b.n	80107ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801034c:	d106      	bne.n	801035c <HAL_RCC_OscConfig+0x74>
 801034e:	4b76      	ldr	r3, [pc, #472]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	4a75      	ldr	r2, [pc, #468]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 8010354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010358:	6013      	str	r3, [r2, #0]
 801035a:	e01d      	b.n	8010398 <HAL_RCC_OscConfig+0xb0>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010364:	d10c      	bne.n	8010380 <HAL_RCC_OscConfig+0x98>
 8010366:	4b70      	ldr	r3, [pc, #448]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	4a6f      	ldr	r2, [pc, #444]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 801036c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010370:	6013      	str	r3, [r2, #0]
 8010372:	4b6d      	ldr	r3, [pc, #436]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	4a6c      	ldr	r2, [pc, #432]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 8010378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801037c:	6013      	str	r3, [r2, #0]
 801037e:	e00b      	b.n	8010398 <HAL_RCC_OscConfig+0xb0>
 8010380:	4b69      	ldr	r3, [pc, #420]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	4a68      	ldr	r2, [pc, #416]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 8010386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801038a:	6013      	str	r3, [r2, #0]
 801038c:	4b66      	ldr	r3, [pc, #408]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	4a65      	ldr	r2, [pc, #404]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 8010392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d013      	beq.n	80103c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80103a0:	f7fe fcde 	bl	800ed60 <HAL_GetTick>
 80103a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80103a6:	e008      	b.n	80103ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80103a8:	f7fe fcda 	bl	800ed60 <HAL_GetTick>
 80103ac:	4602      	mov	r2, r0
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	1ad3      	subs	r3, r2, r3
 80103b2:	2b64      	cmp	r3, #100	; 0x64
 80103b4:	d901      	bls.n	80103ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80103b6:	2303      	movs	r3, #3
 80103b8:	e207      	b.n	80107ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80103ba:	4b5b      	ldr	r3, [pc, #364]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d0f0      	beq.n	80103a8 <HAL_RCC_OscConfig+0xc0>
 80103c6:	e014      	b.n	80103f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80103c8:	f7fe fcca 	bl	800ed60 <HAL_GetTick>
 80103cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80103ce:	e008      	b.n	80103e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80103d0:	f7fe fcc6 	bl	800ed60 <HAL_GetTick>
 80103d4:	4602      	mov	r2, r0
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	1ad3      	subs	r3, r2, r3
 80103da:	2b64      	cmp	r3, #100	; 0x64
 80103dc:	d901      	bls.n	80103e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80103de:	2303      	movs	r3, #3
 80103e0:	e1f3      	b.n	80107ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80103e2:	4b51      	ldr	r3, [pc, #324]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d1f0      	bne.n	80103d0 <HAL_RCC_OscConfig+0xe8>
 80103ee:	e000      	b.n	80103f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80103f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	f003 0302 	and.w	r3, r3, #2
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d063      	beq.n	80104c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80103fe:	4b4a      	ldr	r3, [pc, #296]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 8010400:	689b      	ldr	r3, [r3, #8]
 8010402:	f003 030c 	and.w	r3, r3, #12
 8010406:	2b00      	cmp	r3, #0
 8010408:	d00b      	beq.n	8010422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801040a:	4b47      	ldr	r3, [pc, #284]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 801040c:	689b      	ldr	r3, [r3, #8]
 801040e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010412:	2b08      	cmp	r3, #8
 8010414:	d11c      	bne.n	8010450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010416:	4b44      	ldr	r3, [pc, #272]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 8010418:	685b      	ldr	r3, [r3, #4]
 801041a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801041e:	2b00      	cmp	r3, #0
 8010420:	d116      	bne.n	8010450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010422:	4b41      	ldr	r3, [pc, #260]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	f003 0302 	and.w	r3, r3, #2
 801042a:	2b00      	cmp	r3, #0
 801042c:	d005      	beq.n	801043a <HAL_RCC_OscConfig+0x152>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	68db      	ldr	r3, [r3, #12]
 8010432:	2b01      	cmp	r3, #1
 8010434:	d001      	beq.n	801043a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8010436:	2301      	movs	r3, #1
 8010438:	e1c7      	b.n	80107ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801043a:	4b3b      	ldr	r3, [pc, #236]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	691b      	ldr	r3, [r3, #16]
 8010446:	00db      	lsls	r3, r3, #3
 8010448:	4937      	ldr	r1, [pc, #220]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 801044a:	4313      	orrs	r3, r2
 801044c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801044e:	e03a      	b.n	80104c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	68db      	ldr	r3, [r3, #12]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d020      	beq.n	801049a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010458:	4b34      	ldr	r3, [pc, #208]	; (801052c <HAL_RCC_OscConfig+0x244>)
 801045a:	2201      	movs	r2, #1
 801045c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801045e:	f7fe fc7f 	bl	800ed60 <HAL_GetTick>
 8010462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010464:	e008      	b.n	8010478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010466:	f7fe fc7b 	bl	800ed60 <HAL_GetTick>
 801046a:	4602      	mov	r2, r0
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	1ad3      	subs	r3, r2, r3
 8010470:	2b02      	cmp	r3, #2
 8010472:	d901      	bls.n	8010478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8010474:	2303      	movs	r3, #3
 8010476:	e1a8      	b.n	80107ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010478:	4b2b      	ldr	r3, [pc, #172]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f003 0302 	and.w	r3, r3, #2
 8010480:	2b00      	cmp	r3, #0
 8010482:	d0f0      	beq.n	8010466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010484:	4b28      	ldr	r3, [pc, #160]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	691b      	ldr	r3, [r3, #16]
 8010490:	00db      	lsls	r3, r3, #3
 8010492:	4925      	ldr	r1, [pc, #148]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 8010494:	4313      	orrs	r3, r2
 8010496:	600b      	str	r3, [r1, #0]
 8010498:	e015      	b.n	80104c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801049a:	4b24      	ldr	r3, [pc, #144]	; (801052c <HAL_RCC_OscConfig+0x244>)
 801049c:	2200      	movs	r2, #0
 801049e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80104a0:	f7fe fc5e 	bl	800ed60 <HAL_GetTick>
 80104a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80104a6:	e008      	b.n	80104ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80104a8:	f7fe fc5a 	bl	800ed60 <HAL_GetTick>
 80104ac:	4602      	mov	r2, r0
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	1ad3      	subs	r3, r2, r3
 80104b2:	2b02      	cmp	r3, #2
 80104b4:	d901      	bls.n	80104ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80104b6:	2303      	movs	r3, #3
 80104b8:	e187      	b.n	80107ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80104ba:	4b1b      	ldr	r3, [pc, #108]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	f003 0302 	and.w	r3, r3, #2
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d1f0      	bne.n	80104a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	f003 0308 	and.w	r3, r3, #8
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d036      	beq.n	8010540 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	695b      	ldr	r3, [r3, #20]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d016      	beq.n	8010508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80104da:	4b15      	ldr	r3, [pc, #84]	; (8010530 <HAL_RCC_OscConfig+0x248>)
 80104dc:	2201      	movs	r2, #1
 80104de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80104e0:	f7fe fc3e 	bl	800ed60 <HAL_GetTick>
 80104e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80104e6:	e008      	b.n	80104fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80104e8:	f7fe fc3a 	bl	800ed60 <HAL_GetTick>
 80104ec:	4602      	mov	r2, r0
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	1ad3      	subs	r3, r2, r3
 80104f2:	2b02      	cmp	r3, #2
 80104f4:	d901      	bls.n	80104fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80104f6:	2303      	movs	r3, #3
 80104f8:	e167      	b.n	80107ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80104fa:	4b0b      	ldr	r3, [pc, #44]	; (8010528 <HAL_RCC_OscConfig+0x240>)
 80104fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104fe:	f003 0302 	and.w	r3, r3, #2
 8010502:	2b00      	cmp	r3, #0
 8010504:	d0f0      	beq.n	80104e8 <HAL_RCC_OscConfig+0x200>
 8010506:	e01b      	b.n	8010540 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010508:	4b09      	ldr	r3, [pc, #36]	; (8010530 <HAL_RCC_OscConfig+0x248>)
 801050a:	2200      	movs	r2, #0
 801050c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801050e:	f7fe fc27 	bl	800ed60 <HAL_GetTick>
 8010512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010514:	e00e      	b.n	8010534 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010516:	f7fe fc23 	bl	800ed60 <HAL_GetTick>
 801051a:	4602      	mov	r2, r0
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	1ad3      	subs	r3, r2, r3
 8010520:	2b02      	cmp	r3, #2
 8010522:	d907      	bls.n	8010534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8010524:	2303      	movs	r3, #3
 8010526:	e150      	b.n	80107ca <HAL_RCC_OscConfig+0x4e2>
 8010528:	40023800 	.word	0x40023800
 801052c:	42470000 	.word	0x42470000
 8010530:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010534:	4b88      	ldr	r3, [pc, #544]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 8010536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010538:	f003 0302 	and.w	r3, r3, #2
 801053c:	2b00      	cmp	r3, #0
 801053e:	d1ea      	bne.n	8010516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f003 0304 	and.w	r3, r3, #4
 8010548:	2b00      	cmp	r3, #0
 801054a:	f000 8097 	beq.w	801067c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801054e:	2300      	movs	r3, #0
 8010550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010552:	4b81      	ldr	r3, [pc, #516]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 8010554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801055a:	2b00      	cmp	r3, #0
 801055c:	d10f      	bne.n	801057e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801055e:	2300      	movs	r3, #0
 8010560:	60bb      	str	r3, [r7, #8]
 8010562:	4b7d      	ldr	r3, [pc, #500]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 8010564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010566:	4a7c      	ldr	r2, [pc, #496]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 8010568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801056c:	6413      	str	r3, [r2, #64]	; 0x40
 801056e:	4b7a      	ldr	r3, [pc, #488]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 8010570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010576:	60bb      	str	r3, [r7, #8]
 8010578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801057a:	2301      	movs	r3, #1
 801057c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801057e:	4b77      	ldr	r3, [pc, #476]	; (801075c <HAL_RCC_OscConfig+0x474>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010586:	2b00      	cmp	r3, #0
 8010588:	d118      	bne.n	80105bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801058a:	4b74      	ldr	r3, [pc, #464]	; (801075c <HAL_RCC_OscConfig+0x474>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	4a73      	ldr	r2, [pc, #460]	; (801075c <HAL_RCC_OscConfig+0x474>)
 8010590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010596:	f7fe fbe3 	bl	800ed60 <HAL_GetTick>
 801059a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801059c:	e008      	b.n	80105b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801059e:	f7fe fbdf 	bl	800ed60 <HAL_GetTick>
 80105a2:	4602      	mov	r2, r0
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	1ad3      	subs	r3, r2, r3
 80105a8:	2b02      	cmp	r3, #2
 80105aa:	d901      	bls.n	80105b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80105ac:	2303      	movs	r3, #3
 80105ae:	e10c      	b.n	80107ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80105b0:	4b6a      	ldr	r3, [pc, #424]	; (801075c <HAL_RCC_OscConfig+0x474>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d0f0      	beq.n	801059e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	689b      	ldr	r3, [r3, #8]
 80105c0:	2b01      	cmp	r3, #1
 80105c2:	d106      	bne.n	80105d2 <HAL_RCC_OscConfig+0x2ea>
 80105c4:	4b64      	ldr	r3, [pc, #400]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 80105c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105c8:	4a63      	ldr	r2, [pc, #396]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 80105ca:	f043 0301 	orr.w	r3, r3, #1
 80105ce:	6713      	str	r3, [r2, #112]	; 0x70
 80105d0:	e01c      	b.n	801060c <HAL_RCC_OscConfig+0x324>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	689b      	ldr	r3, [r3, #8]
 80105d6:	2b05      	cmp	r3, #5
 80105d8:	d10c      	bne.n	80105f4 <HAL_RCC_OscConfig+0x30c>
 80105da:	4b5f      	ldr	r3, [pc, #380]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 80105dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105de:	4a5e      	ldr	r2, [pc, #376]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 80105e0:	f043 0304 	orr.w	r3, r3, #4
 80105e4:	6713      	str	r3, [r2, #112]	; 0x70
 80105e6:	4b5c      	ldr	r3, [pc, #368]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 80105e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105ea:	4a5b      	ldr	r2, [pc, #364]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 80105ec:	f043 0301 	orr.w	r3, r3, #1
 80105f0:	6713      	str	r3, [r2, #112]	; 0x70
 80105f2:	e00b      	b.n	801060c <HAL_RCC_OscConfig+0x324>
 80105f4:	4b58      	ldr	r3, [pc, #352]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 80105f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105f8:	4a57      	ldr	r2, [pc, #348]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 80105fa:	f023 0301 	bic.w	r3, r3, #1
 80105fe:	6713      	str	r3, [r2, #112]	; 0x70
 8010600:	4b55      	ldr	r3, [pc, #340]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 8010602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010604:	4a54      	ldr	r2, [pc, #336]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 8010606:	f023 0304 	bic.w	r3, r3, #4
 801060a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	689b      	ldr	r3, [r3, #8]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d015      	beq.n	8010640 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010614:	f7fe fba4 	bl	800ed60 <HAL_GetTick>
 8010618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801061a:	e00a      	b.n	8010632 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801061c:	f7fe fba0 	bl	800ed60 <HAL_GetTick>
 8010620:	4602      	mov	r2, r0
 8010622:	693b      	ldr	r3, [r7, #16]
 8010624:	1ad3      	subs	r3, r2, r3
 8010626:	f241 3288 	movw	r2, #5000	; 0x1388
 801062a:	4293      	cmp	r3, r2
 801062c:	d901      	bls.n	8010632 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801062e:	2303      	movs	r3, #3
 8010630:	e0cb      	b.n	80107ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010632:	4b49      	ldr	r3, [pc, #292]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 8010634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010636:	f003 0302 	and.w	r3, r3, #2
 801063a:	2b00      	cmp	r3, #0
 801063c:	d0ee      	beq.n	801061c <HAL_RCC_OscConfig+0x334>
 801063e:	e014      	b.n	801066a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010640:	f7fe fb8e 	bl	800ed60 <HAL_GetTick>
 8010644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010646:	e00a      	b.n	801065e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010648:	f7fe fb8a 	bl	800ed60 <HAL_GetTick>
 801064c:	4602      	mov	r2, r0
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	1ad3      	subs	r3, r2, r3
 8010652:	f241 3288 	movw	r2, #5000	; 0x1388
 8010656:	4293      	cmp	r3, r2
 8010658:	d901      	bls.n	801065e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801065a:	2303      	movs	r3, #3
 801065c:	e0b5      	b.n	80107ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801065e:	4b3e      	ldr	r3, [pc, #248]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 8010660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010662:	f003 0302 	and.w	r3, r3, #2
 8010666:	2b00      	cmp	r3, #0
 8010668:	d1ee      	bne.n	8010648 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801066a:	7dfb      	ldrb	r3, [r7, #23]
 801066c:	2b01      	cmp	r3, #1
 801066e:	d105      	bne.n	801067c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010670:	4b39      	ldr	r3, [pc, #228]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 8010672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010674:	4a38      	ldr	r2, [pc, #224]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 8010676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801067a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	699b      	ldr	r3, [r3, #24]
 8010680:	2b00      	cmp	r3, #0
 8010682:	f000 80a1 	beq.w	80107c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8010686:	4b34      	ldr	r3, [pc, #208]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 8010688:	689b      	ldr	r3, [r3, #8]
 801068a:	f003 030c 	and.w	r3, r3, #12
 801068e:	2b08      	cmp	r3, #8
 8010690:	d05c      	beq.n	801074c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	699b      	ldr	r3, [r3, #24]
 8010696:	2b02      	cmp	r3, #2
 8010698:	d141      	bne.n	801071e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801069a:	4b31      	ldr	r3, [pc, #196]	; (8010760 <HAL_RCC_OscConfig+0x478>)
 801069c:	2200      	movs	r2, #0
 801069e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80106a0:	f7fe fb5e 	bl	800ed60 <HAL_GetTick>
 80106a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80106a6:	e008      	b.n	80106ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80106a8:	f7fe fb5a 	bl	800ed60 <HAL_GetTick>
 80106ac:	4602      	mov	r2, r0
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	1ad3      	subs	r3, r2, r3
 80106b2:	2b02      	cmp	r3, #2
 80106b4:	d901      	bls.n	80106ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80106b6:	2303      	movs	r3, #3
 80106b8:	e087      	b.n	80107ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80106ba:	4b27      	ldr	r3, [pc, #156]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d1f0      	bne.n	80106a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	69da      	ldr	r2, [r3, #28]
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6a1b      	ldr	r3, [r3, #32]
 80106ce:	431a      	orrs	r2, r3
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106d4:	019b      	lsls	r3, r3, #6
 80106d6:	431a      	orrs	r2, r3
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106dc:	085b      	lsrs	r3, r3, #1
 80106de:	3b01      	subs	r3, #1
 80106e0:	041b      	lsls	r3, r3, #16
 80106e2:	431a      	orrs	r2, r3
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106e8:	061b      	lsls	r3, r3, #24
 80106ea:	491b      	ldr	r1, [pc, #108]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 80106ec:	4313      	orrs	r3, r2
 80106ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80106f0:	4b1b      	ldr	r3, [pc, #108]	; (8010760 <HAL_RCC_OscConfig+0x478>)
 80106f2:	2201      	movs	r2, #1
 80106f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80106f6:	f7fe fb33 	bl	800ed60 <HAL_GetTick>
 80106fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80106fc:	e008      	b.n	8010710 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80106fe:	f7fe fb2f 	bl	800ed60 <HAL_GetTick>
 8010702:	4602      	mov	r2, r0
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	1ad3      	subs	r3, r2, r3
 8010708:	2b02      	cmp	r3, #2
 801070a:	d901      	bls.n	8010710 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801070c:	2303      	movs	r3, #3
 801070e:	e05c      	b.n	80107ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010710:	4b11      	ldr	r3, [pc, #68]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010718:	2b00      	cmp	r3, #0
 801071a:	d0f0      	beq.n	80106fe <HAL_RCC_OscConfig+0x416>
 801071c:	e054      	b.n	80107c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801071e:	4b10      	ldr	r3, [pc, #64]	; (8010760 <HAL_RCC_OscConfig+0x478>)
 8010720:	2200      	movs	r2, #0
 8010722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010724:	f7fe fb1c 	bl	800ed60 <HAL_GetTick>
 8010728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801072a:	e008      	b.n	801073e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801072c:	f7fe fb18 	bl	800ed60 <HAL_GetTick>
 8010730:	4602      	mov	r2, r0
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	1ad3      	subs	r3, r2, r3
 8010736:	2b02      	cmp	r3, #2
 8010738:	d901      	bls.n	801073e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801073a:	2303      	movs	r3, #3
 801073c:	e045      	b.n	80107ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801073e:	4b06      	ldr	r3, [pc, #24]	; (8010758 <HAL_RCC_OscConfig+0x470>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010746:	2b00      	cmp	r3, #0
 8010748:	d1f0      	bne.n	801072c <HAL_RCC_OscConfig+0x444>
 801074a:	e03d      	b.n	80107c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	699b      	ldr	r3, [r3, #24]
 8010750:	2b01      	cmp	r3, #1
 8010752:	d107      	bne.n	8010764 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8010754:	2301      	movs	r3, #1
 8010756:	e038      	b.n	80107ca <HAL_RCC_OscConfig+0x4e2>
 8010758:	40023800 	.word	0x40023800
 801075c:	40007000 	.word	0x40007000
 8010760:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010764:	4b1b      	ldr	r3, [pc, #108]	; (80107d4 <HAL_RCC_OscConfig+0x4ec>)
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	699b      	ldr	r3, [r3, #24]
 801076e:	2b01      	cmp	r3, #1
 8010770:	d028      	beq.n	80107c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801077c:	429a      	cmp	r2, r3
 801077e:	d121      	bne.n	80107c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801078a:	429a      	cmp	r2, r3
 801078c:	d11a      	bne.n	80107c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801078e:	68fa      	ldr	r2, [r7, #12]
 8010790:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010794:	4013      	ands	r3, r2
 8010796:	687a      	ldr	r2, [r7, #4]
 8010798:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801079a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801079c:	4293      	cmp	r3, r2
 801079e:	d111      	bne.n	80107c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107aa:	085b      	lsrs	r3, r3, #1
 80107ac:	3b01      	subs	r3, #1
 80107ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d107      	bne.n	80107c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d001      	beq.n	80107c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80107c4:	2301      	movs	r3, #1
 80107c6:	e000      	b.n	80107ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80107c8:	2300      	movs	r3, #0
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3718      	adds	r7, #24
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}
 80107d2:	bf00      	nop
 80107d4:	40023800 	.word	0x40023800

080107d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b084      	sub	sp, #16
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d101      	bne.n	80107ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80107e8:	2301      	movs	r3, #1
 80107ea:	e0cc      	b.n	8010986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80107ec:	4b68      	ldr	r3, [pc, #416]	; (8010990 <HAL_RCC_ClockConfig+0x1b8>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	f003 0307 	and.w	r3, r3, #7
 80107f4:	683a      	ldr	r2, [r7, #0]
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d90c      	bls.n	8010814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80107fa:	4b65      	ldr	r3, [pc, #404]	; (8010990 <HAL_RCC_ClockConfig+0x1b8>)
 80107fc:	683a      	ldr	r2, [r7, #0]
 80107fe:	b2d2      	uxtb	r2, r2
 8010800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010802:	4b63      	ldr	r3, [pc, #396]	; (8010990 <HAL_RCC_ClockConfig+0x1b8>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	f003 0307 	and.w	r3, r3, #7
 801080a:	683a      	ldr	r2, [r7, #0]
 801080c:	429a      	cmp	r2, r3
 801080e:	d001      	beq.n	8010814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010810:	2301      	movs	r3, #1
 8010812:	e0b8      	b.n	8010986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	f003 0302 	and.w	r3, r3, #2
 801081c:	2b00      	cmp	r3, #0
 801081e:	d020      	beq.n	8010862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	f003 0304 	and.w	r3, r3, #4
 8010828:	2b00      	cmp	r3, #0
 801082a:	d005      	beq.n	8010838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801082c:	4b59      	ldr	r3, [pc, #356]	; (8010994 <HAL_RCC_ClockConfig+0x1bc>)
 801082e:	689b      	ldr	r3, [r3, #8]
 8010830:	4a58      	ldr	r2, [pc, #352]	; (8010994 <HAL_RCC_ClockConfig+0x1bc>)
 8010832:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8010836:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	f003 0308 	and.w	r3, r3, #8
 8010840:	2b00      	cmp	r3, #0
 8010842:	d005      	beq.n	8010850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010844:	4b53      	ldr	r3, [pc, #332]	; (8010994 <HAL_RCC_ClockConfig+0x1bc>)
 8010846:	689b      	ldr	r3, [r3, #8]
 8010848:	4a52      	ldr	r2, [pc, #328]	; (8010994 <HAL_RCC_ClockConfig+0x1bc>)
 801084a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801084e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010850:	4b50      	ldr	r3, [pc, #320]	; (8010994 <HAL_RCC_ClockConfig+0x1bc>)
 8010852:	689b      	ldr	r3, [r3, #8]
 8010854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	689b      	ldr	r3, [r3, #8]
 801085c:	494d      	ldr	r1, [pc, #308]	; (8010994 <HAL_RCC_ClockConfig+0x1bc>)
 801085e:	4313      	orrs	r3, r2
 8010860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f003 0301 	and.w	r3, r3, #1
 801086a:	2b00      	cmp	r3, #0
 801086c:	d044      	beq.n	80108f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	2b01      	cmp	r3, #1
 8010874:	d107      	bne.n	8010886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010876:	4b47      	ldr	r3, [pc, #284]	; (8010994 <HAL_RCC_ClockConfig+0x1bc>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801087e:	2b00      	cmp	r3, #0
 8010880:	d119      	bne.n	80108b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010882:	2301      	movs	r3, #1
 8010884:	e07f      	b.n	8010986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	2b02      	cmp	r3, #2
 801088c:	d003      	beq.n	8010896 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010892:	2b03      	cmp	r3, #3
 8010894:	d107      	bne.n	80108a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010896:	4b3f      	ldr	r3, [pc, #252]	; (8010994 <HAL_RCC_ClockConfig+0x1bc>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d109      	bne.n	80108b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80108a2:	2301      	movs	r3, #1
 80108a4:	e06f      	b.n	8010986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80108a6:	4b3b      	ldr	r3, [pc, #236]	; (8010994 <HAL_RCC_ClockConfig+0x1bc>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	f003 0302 	and.w	r3, r3, #2
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d101      	bne.n	80108b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80108b2:	2301      	movs	r3, #1
 80108b4:	e067      	b.n	8010986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80108b6:	4b37      	ldr	r3, [pc, #220]	; (8010994 <HAL_RCC_ClockConfig+0x1bc>)
 80108b8:	689b      	ldr	r3, [r3, #8]
 80108ba:	f023 0203 	bic.w	r2, r3, #3
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	685b      	ldr	r3, [r3, #4]
 80108c2:	4934      	ldr	r1, [pc, #208]	; (8010994 <HAL_RCC_ClockConfig+0x1bc>)
 80108c4:	4313      	orrs	r3, r2
 80108c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80108c8:	f7fe fa4a 	bl	800ed60 <HAL_GetTick>
 80108cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80108ce:	e00a      	b.n	80108e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80108d0:	f7fe fa46 	bl	800ed60 <HAL_GetTick>
 80108d4:	4602      	mov	r2, r0
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	1ad3      	subs	r3, r2, r3
 80108da:	f241 3288 	movw	r2, #5000	; 0x1388
 80108de:	4293      	cmp	r3, r2
 80108e0:	d901      	bls.n	80108e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80108e2:	2303      	movs	r3, #3
 80108e4:	e04f      	b.n	8010986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80108e6:	4b2b      	ldr	r3, [pc, #172]	; (8010994 <HAL_RCC_ClockConfig+0x1bc>)
 80108e8:	689b      	ldr	r3, [r3, #8]
 80108ea:	f003 020c 	and.w	r2, r3, #12
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	009b      	lsls	r3, r3, #2
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d1eb      	bne.n	80108d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80108f8:	4b25      	ldr	r3, [pc, #148]	; (8010990 <HAL_RCC_ClockConfig+0x1b8>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	f003 0307 	and.w	r3, r3, #7
 8010900:	683a      	ldr	r2, [r7, #0]
 8010902:	429a      	cmp	r2, r3
 8010904:	d20c      	bcs.n	8010920 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010906:	4b22      	ldr	r3, [pc, #136]	; (8010990 <HAL_RCC_ClockConfig+0x1b8>)
 8010908:	683a      	ldr	r2, [r7, #0]
 801090a:	b2d2      	uxtb	r2, r2
 801090c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801090e:	4b20      	ldr	r3, [pc, #128]	; (8010990 <HAL_RCC_ClockConfig+0x1b8>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	f003 0307 	and.w	r3, r3, #7
 8010916:	683a      	ldr	r2, [r7, #0]
 8010918:	429a      	cmp	r2, r3
 801091a:	d001      	beq.n	8010920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801091c:	2301      	movs	r3, #1
 801091e:	e032      	b.n	8010986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	f003 0304 	and.w	r3, r3, #4
 8010928:	2b00      	cmp	r3, #0
 801092a:	d008      	beq.n	801093e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801092c:	4b19      	ldr	r3, [pc, #100]	; (8010994 <HAL_RCC_ClockConfig+0x1bc>)
 801092e:	689b      	ldr	r3, [r3, #8]
 8010930:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	4916      	ldr	r1, [pc, #88]	; (8010994 <HAL_RCC_ClockConfig+0x1bc>)
 801093a:	4313      	orrs	r3, r2
 801093c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	f003 0308 	and.w	r3, r3, #8
 8010946:	2b00      	cmp	r3, #0
 8010948:	d009      	beq.n	801095e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801094a:	4b12      	ldr	r3, [pc, #72]	; (8010994 <HAL_RCC_ClockConfig+0x1bc>)
 801094c:	689b      	ldr	r3, [r3, #8]
 801094e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	691b      	ldr	r3, [r3, #16]
 8010956:	00db      	lsls	r3, r3, #3
 8010958:	490e      	ldr	r1, [pc, #56]	; (8010994 <HAL_RCC_ClockConfig+0x1bc>)
 801095a:	4313      	orrs	r3, r2
 801095c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801095e:	f000 f821 	bl	80109a4 <HAL_RCC_GetSysClockFreq>
 8010962:	4602      	mov	r2, r0
 8010964:	4b0b      	ldr	r3, [pc, #44]	; (8010994 <HAL_RCC_ClockConfig+0x1bc>)
 8010966:	689b      	ldr	r3, [r3, #8]
 8010968:	091b      	lsrs	r3, r3, #4
 801096a:	f003 030f 	and.w	r3, r3, #15
 801096e:	490a      	ldr	r1, [pc, #40]	; (8010998 <HAL_RCC_ClockConfig+0x1c0>)
 8010970:	5ccb      	ldrb	r3, [r1, r3]
 8010972:	fa22 f303 	lsr.w	r3, r2, r3
 8010976:	4a09      	ldr	r2, [pc, #36]	; (801099c <HAL_RCC_ClockConfig+0x1c4>)
 8010978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801097a:	4b09      	ldr	r3, [pc, #36]	; (80109a0 <HAL_RCC_ClockConfig+0x1c8>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	4618      	mov	r0, r3
 8010980:	f7fe f9aa 	bl	800ecd8 <HAL_InitTick>

  return HAL_OK;
 8010984:	2300      	movs	r3, #0
}
 8010986:	4618      	mov	r0, r3
 8010988:	3710      	adds	r7, #16
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}
 801098e:	bf00      	nop
 8010990:	40023c00 	.word	0x40023c00
 8010994:	40023800 	.word	0x40023800
 8010998:	08021654 	.word	0x08021654
 801099c:	20000008 	.word	0x20000008
 80109a0:	2000000c 	.word	0x2000000c

080109a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80109a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80109a8:	b090      	sub	sp, #64	; 0x40
 80109aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80109ac:	2300      	movs	r3, #0
 80109ae:	637b      	str	r3, [r7, #52]	; 0x34
 80109b0:	2300      	movs	r3, #0
 80109b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80109b4:	2300      	movs	r3, #0
 80109b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80109b8:	2300      	movs	r3, #0
 80109ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80109bc:	4b59      	ldr	r3, [pc, #356]	; (8010b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80109be:	689b      	ldr	r3, [r3, #8]
 80109c0:	f003 030c 	and.w	r3, r3, #12
 80109c4:	2b08      	cmp	r3, #8
 80109c6:	d00d      	beq.n	80109e4 <HAL_RCC_GetSysClockFreq+0x40>
 80109c8:	2b08      	cmp	r3, #8
 80109ca:	f200 80a1 	bhi.w	8010b10 <HAL_RCC_GetSysClockFreq+0x16c>
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d002      	beq.n	80109d8 <HAL_RCC_GetSysClockFreq+0x34>
 80109d2:	2b04      	cmp	r3, #4
 80109d4:	d003      	beq.n	80109de <HAL_RCC_GetSysClockFreq+0x3a>
 80109d6:	e09b      	b.n	8010b10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80109d8:	4b53      	ldr	r3, [pc, #332]	; (8010b28 <HAL_RCC_GetSysClockFreq+0x184>)
 80109da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80109dc:	e09b      	b.n	8010b16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80109de:	4b53      	ldr	r3, [pc, #332]	; (8010b2c <HAL_RCC_GetSysClockFreq+0x188>)
 80109e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80109e2:	e098      	b.n	8010b16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80109e4:	4b4f      	ldr	r3, [pc, #316]	; (8010b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80109e6:	685b      	ldr	r3, [r3, #4]
 80109e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80109ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80109ee:	4b4d      	ldr	r3, [pc, #308]	; (8010b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d028      	beq.n	8010a4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80109fa:	4b4a      	ldr	r3, [pc, #296]	; (8010b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	099b      	lsrs	r3, r3, #6
 8010a00:	2200      	movs	r2, #0
 8010a02:	623b      	str	r3, [r7, #32]
 8010a04:	627a      	str	r2, [r7, #36]	; 0x24
 8010a06:	6a3b      	ldr	r3, [r7, #32]
 8010a08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8010a0c:	2100      	movs	r1, #0
 8010a0e:	4b47      	ldr	r3, [pc, #284]	; (8010b2c <HAL_RCC_GetSysClockFreq+0x188>)
 8010a10:	fb03 f201 	mul.w	r2, r3, r1
 8010a14:	2300      	movs	r3, #0
 8010a16:	fb00 f303 	mul.w	r3, r0, r3
 8010a1a:	4413      	add	r3, r2
 8010a1c:	4a43      	ldr	r2, [pc, #268]	; (8010b2c <HAL_RCC_GetSysClockFreq+0x188>)
 8010a1e:	fba0 1202 	umull	r1, r2, r0, r2
 8010a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010a24:	460a      	mov	r2, r1
 8010a26:	62ba      	str	r2, [r7, #40]	; 0x28
 8010a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a2a:	4413      	add	r3, r2
 8010a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a30:	2200      	movs	r2, #0
 8010a32:	61bb      	str	r3, [r7, #24]
 8010a34:	61fa      	str	r2, [r7, #28]
 8010a36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010a3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8010a3e:	f7f6 f8b5 	bl	8006bac <__aeabi_uldivmod>
 8010a42:	4602      	mov	r2, r0
 8010a44:	460b      	mov	r3, r1
 8010a46:	4613      	mov	r3, r2
 8010a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a4a:	e053      	b.n	8010af4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010a4c:	4b35      	ldr	r3, [pc, #212]	; (8010b24 <HAL_RCC_GetSysClockFreq+0x180>)
 8010a4e:	685b      	ldr	r3, [r3, #4]
 8010a50:	099b      	lsrs	r3, r3, #6
 8010a52:	2200      	movs	r2, #0
 8010a54:	613b      	str	r3, [r7, #16]
 8010a56:	617a      	str	r2, [r7, #20]
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8010a5e:	f04f 0b00 	mov.w	fp, #0
 8010a62:	4652      	mov	r2, sl
 8010a64:	465b      	mov	r3, fp
 8010a66:	f04f 0000 	mov.w	r0, #0
 8010a6a:	f04f 0100 	mov.w	r1, #0
 8010a6e:	0159      	lsls	r1, r3, #5
 8010a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010a74:	0150      	lsls	r0, r2, #5
 8010a76:	4602      	mov	r2, r0
 8010a78:	460b      	mov	r3, r1
 8010a7a:	ebb2 080a 	subs.w	r8, r2, sl
 8010a7e:	eb63 090b 	sbc.w	r9, r3, fp
 8010a82:	f04f 0200 	mov.w	r2, #0
 8010a86:	f04f 0300 	mov.w	r3, #0
 8010a8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8010a8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8010a92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8010a96:	ebb2 0408 	subs.w	r4, r2, r8
 8010a9a:	eb63 0509 	sbc.w	r5, r3, r9
 8010a9e:	f04f 0200 	mov.w	r2, #0
 8010aa2:	f04f 0300 	mov.w	r3, #0
 8010aa6:	00eb      	lsls	r3, r5, #3
 8010aa8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010aac:	00e2      	lsls	r2, r4, #3
 8010aae:	4614      	mov	r4, r2
 8010ab0:	461d      	mov	r5, r3
 8010ab2:	eb14 030a 	adds.w	r3, r4, sl
 8010ab6:	603b      	str	r3, [r7, #0]
 8010ab8:	eb45 030b 	adc.w	r3, r5, fp
 8010abc:	607b      	str	r3, [r7, #4]
 8010abe:	f04f 0200 	mov.w	r2, #0
 8010ac2:	f04f 0300 	mov.w	r3, #0
 8010ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010aca:	4629      	mov	r1, r5
 8010acc:	028b      	lsls	r3, r1, #10
 8010ace:	4621      	mov	r1, r4
 8010ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010ad4:	4621      	mov	r1, r4
 8010ad6:	028a      	lsls	r2, r1, #10
 8010ad8:	4610      	mov	r0, r2
 8010ada:	4619      	mov	r1, r3
 8010adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ade:	2200      	movs	r2, #0
 8010ae0:	60bb      	str	r3, [r7, #8]
 8010ae2:	60fa      	str	r2, [r7, #12]
 8010ae4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010ae8:	f7f6 f860 	bl	8006bac <__aeabi_uldivmod>
 8010aec:	4602      	mov	r2, r0
 8010aee:	460b      	mov	r3, r1
 8010af0:	4613      	mov	r3, r2
 8010af2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010af4:	4b0b      	ldr	r3, [pc, #44]	; (8010b24 <HAL_RCC_GetSysClockFreq+0x180>)
 8010af6:	685b      	ldr	r3, [r3, #4]
 8010af8:	0c1b      	lsrs	r3, r3, #16
 8010afa:	f003 0303 	and.w	r3, r3, #3
 8010afe:	3301      	adds	r3, #1
 8010b00:	005b      	lsls	r3, r3, #1
 8010b02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8010b04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8010b0e:	e002      	b.n	8010b16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010b10:	4b05      	ldr	r3, [pc, #20]	; (8010b28 <HAL_RCC_GetSysClockFreq+0x184>)
 8010b12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8010b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3740      	adds	r7, #64	; 0x40
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010b22:	bf00      	nop
 8010b24:	40023800 	.word	0x40023800
 8010b28:	00f42400 	.word	0x00f42400
 8010b2c:	017d7840 	.word	0x017d7840

08010b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010b30:	b480      	push	{r7}
 8010b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010b34:	4b03      	ldr	r3, [pc, #12]	; (8010b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8010b36:	681b      	ldr	r3, [r3, #0]
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b40:	4770      	bx	lr
 8010b42:	bf00      	nop
 8010b44:	20000008 	.word	0x20000008

08010b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010b4c:	f7ff fff0 	bl	8010b30 <HAL_RCC_GetHCLKFreq>
 8010b50:	4602      	mov	r2, r0
 8010b52:	4b05      	ldr	r3, [pc, #20]	; (8010b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010b54:	689b      	ldr	r3, [r3, #8]
 8010b56:	0a9b      	lsrs	r3, r3, #10
 8010b58:	f003 0307 	and.w	r3, r3, #7
 8010b5c:	4903      	ldr	r1, [pc, #12]	; (8010b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8010b5e:	5ccb      	ldrb	r3, [r1, r3]
 8010b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	bd80      	pop	{r7, pc}
 8010b68:	40023800 	.word	0x40023800
 8010b6c:	08021664 	.word	0x08021664

08010b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010b74:	f7ff ffdc 	bl	8010b30 <HAL_RCC_GetHCLKFreq>
 8010b78:	4602      	mov	r2, r0
 8010b7a:	4b05      	ldr	r3, [pc, #20]	; (8010b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010b7c:	689b      	ldr	r3, [r3, #8]
 8010b7e:	0b5b      	lsrs	r3, r3, #13
 8010b80:	f003 0307 	and.w	r3, r3, #7
 8010b84:	4903      	ldr	r1, [pc, #12]	; (8010b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010b86:	5ccb      	ldrb	r3, [r1, r3]
 8010b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	bd80      	pop	{r7, pc}
 8010b90:	40023800 	.word	0x40023800
 8010b94:	08021664 	.word	0x08021664

08010b98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b086      	sub	sp, #24
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	f003 0301 	and.w	r3, r3, #1
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d105      	bne.n	8010bc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d035      	beq.n	8010c2c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8010bc0:	4b62      	ldr	r3, [pc, #392]	; (8010d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8010bc6:	f7fe f8cb 	bl	800ed60 <HAL_GetTick>
 8010bca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8010bcc:	e008      	b.n	8010be0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8010bce:	f7fe f8c7 	bl	800ed60 <HAL_GetTick>
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	1ad3      	subs	r3, r2, r3
 8010bd8:	2b02      	cmp	r3, #2
 8010bda:	d901      	bls.n	8010be0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8010bdc:	2303      	movs	r3, #3
 8010bde:	e0b0      	b.n	8010d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8010be0:	4b5b      	ldr	r3, [pc, #364]	; (8010d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d1f0      	bne.n	8010bce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	685b      	ldr	r3, [r3, #4]
 8010bf0:	019a      	lsls	r2, r3, #6
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	689b      	ldr	r3, [r3, #8]
 8010bf6:	071b      	lsls	r3, r3, #28
 8010bf8:	4955      	ldr	r1, [pc, #340]	; (8010d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010bfa:	4313      	orrs	r3, r2
 8010bfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8010c00:	4b52      	ldr	r3, [pc, #328]	; (8010d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8010c02:	2201      	movs	r2, #1
 8010c04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8010c06:	f7fe f8ab 	bl	800ed60 <HAL_GetTick>
 8010c0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8010c0c:	e008      	b.n	8010c20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8010c0e:	f7fe f8a7 	bl	800ed60 <HAL_GetTick>
 8010c12:	4602      	mov	r2, r0
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	1ad3      	subs	r3, r2, r3
 8010c18:	2b02      	cmp	r3, #2
 8010c1a:	d901      	bls.n	8010c20 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8010c1c:	2303      	movs	r3, #3
 8010c1e:	e090      	b.n	8010d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8010c20:	4b4b      	ldr	r3, [pc, #300]	; (8010d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d0f0      	beq.n	8010c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	f003 0302 	and.w	r3, r3, #2
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	f000 8083 	beq.w	8010d40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	60fb      	str	r3, [r7, #12]
 8010c3e:	4b44      	ldr	r3, [pc, #272]	; (8010d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c42:	4a43      	ldr	r2, [pc, #268]	; (8010d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010c48:	6413      	str	r3, [r2, #64]	; 0x40
 8010c4a:	4b41      	ldr	r3, [pc, #260]	; (8010d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c52:	60fb      	str	r3, [r7, #12]
 8010c54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8010c56:	4b3f      	ldr	r3, [pc, #252]	; (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	4a3e      	ldr	r2, [pc, #248]	; (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8010c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010c60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8010c62:	f7fe f87d 	bl	800ed60 <HAL_GetTick>
 8010c66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8010c68:	e008      	b.n	8010c7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8010c6a:	f7fe f879 	bl	800ed60 <HAL_GetTick>
 8010c6e:	4602      	mov	r2, r0
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	1ad3      	subs	r3, r2, r3
 8010c74:	2b02      	cmp	r3, #2
 8010c76:	d901      	bls.n	8010c7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8010c78:	2303      	movs	r3, #3
 8010c7a:	e062      	b.n	8010d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8010c7c:	4b35      	ldr	r3, [pc, #212]	; (8010d54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d0f0      	beq.n	8010c6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8010c88:	4b31      	ldr	r3, [pc, #196]	; (8010d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010c90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8010c92:	693b      	ldr	r3, [r7, #16]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d02f      	beq.n	8010cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	68db      	ldr	r3, [r3, #12]
 8010c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010ca0:	693a      	ldr	r2, [r7, #16]
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	d028      	beq.n	8010cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010ca6:	4b2a      	ldr	r3, [pc, #168]	; (8010d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010cae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8010cb0:	4b29      	ldr	r3, [pc, #164]	; (8010d58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010cb6:	4b28      	ldr	r3, [pc, #160]	; (8010d58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8010cb8:	2200      	movs	r2, #0
 8010cba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8010cbc:	4a24      	ldr	r2, [pc, #144]	; (8010d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8010cc2:	4b23      	ldr	r3, [pc, #140]	; (8010d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cc6:	f003 0301 	and.w	r3, r3, #1
 8010cca:	2b01      	cmp	r3, #1
 8010ccc:	d114      	bne.n	8010cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8010cce:	f7fe f847 	bl	800ed60 <HAL_GetTick>
 8010cd2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010cd4:	e00a      	b.n	8010cec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010cd6:	f7fe f843 	bl	800ed60 <HAL_GetTick>
 8010cda:	4602      	mov	r2, r0
 8010cdc:	697b      	ldr	r3, [r7, #20]
 8010cde:	1ad3      	subs	r3, r2, r3
 8010ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d901      	bls.n	8010cec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8010ce8:	2303      	movs	r3, #3
 8010cea:	e02a      	b.n	8010d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010cec:	4b18      	ldr	r3, [pc, #96]	; (8010d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cf0:	f003 0302 	and.w	r3, r3, #2
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d0ee      	beq.n	8010cd6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010d00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010d04:	d10d      	bne.n	8010d22 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8010d06:	4b12      	ldr	r3, [pc, #72]	; (8010d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010d08:	689b      	ldr	r3, [r3, #8]
 8010d0a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	68db      	ldr	r3, [r3, #12]
 8010d12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010d1a:	490d      	ldr	r1, [pc, #52]	; (8010d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010d1c:	4313      	orrs	r3, r2
 8010d1e:	608b      	str	r3, [r1, #8]
 8010d20:	e005      	b.n	8010d2e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8010d22:	4b0b      	ldr	r3, [pc, #44]	; (8010d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010d24:	689b      	ldr	r3, [r3, #8]
 8010d26:	4a0a      	ldr	r2, [pc, #40]	; (8010d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010d28:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8010d2c:	6093      	str	r3, [r2, #8]
 8010d2e:	4b08      	ldr	r3, [pc, #32]	; (8010d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010d30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	68db      	ldr	r3, [r3, #12]
 8010d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010d3a:	4905      	ldr	r1, [pc, #20]	; (8010d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010d3c:	4313      	orrs	r3, r2
 8010d3e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8010d40:	2300      	movs	r3, #0
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3718      	adds	r7, #24
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	42470068 	.word	0x42470068
 8010d50:	40023800 	.word	0x40023800
 8010d54:	40007000 	.word	0x40007000
 8010d58:	42470e40 	.word	0x42470e40

08010d5c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d101      	bne.n	8010d6e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	e083      	b.n	8010e76 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	7f5b      	ldrb	r3, [r3, #29]
 8010d72:	b2db      	uxtb	r3, r3
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d105      	bne.n	8010d84 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f7fd fc32 	bl	800e5e8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2202      	movs	r2, #2
 8010d88:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	22ca      	movs	r2, #202	; 0xca
 8010d90:	625a      	str	r2, [r3, #36]	; 0x24
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	2253      	movs	r2, #83	; 0x53
 8010d98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f000 f9fb 	bl	8011196 <RTC_EnterInitMode>
 8010da0:	4603      	mov	r3, r0
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d008      	beq.n	8010db8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	22ff      	movs	r2, #255	; 0xff
 8010dac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	2204      	movs	r2, #4
 8010db2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8010db4:	2301      	movs	r3, #1
 8010db6:	e05e      	b.n	8010e76 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	689b      	ldr	r3, [r3, #8]
 8010dbe:	687a      	ldr	r2, [r7, #4]
 8010dc0:	6812      	ldr	r2, [r2, #0]
 8010dc2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010dca:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	6899      	ldr	r1, [r3, #8]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	685a      	ldr	r2, [r3, #4]
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	691b      	ldr	r3, [r3, #16]
 8010dda:	431a      	orrs	r2, r3
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	695b      	ldr	r3, [r3, #20]
 8010de0:	431a      	orrs	r2, r3
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	430a      	orrs	r2, r1
 8010de8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	687a      	ldr	r2, [r7, #4]
 8010df0:	68d2      	ldr	r2, [r2, #12]
 8010df2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	6919      	ldr	r1, [r3, #16]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	689b      	ldr	r3, [r3, #8]
 8010dfe:	041a      	lsls	r2, r3, #16
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	430a      	orrs	r2, r1
 8010e06:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	68da      	ldr	r2, [r3, #12]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010e16:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	689b      	ldr	r3, [r3, #8]
 8010e1e:	f003 0320 	and.w	r3, r3, #32
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d10e      	bne.n	8010e44 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f000 f98d 	bl	8011146 <HAL_RTC_WaitForSynchro>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d008      	beq.n	8010e44 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	22ff      	movs	r2, #255	; 0xff
 8010e38:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2204      	movs	r2, #4
 8010e3e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8010e40:	2301      	movs	r3, #1
 8010e42:	e018      	b.n	8010e76 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010e52:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	699a      	ldr	r2, [r3, #24]
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	430a      	orrs	r2, r1
 8010e64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	22ff      	movs	r2, #255	; 0xff
 8010e6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2201      	movs	r2, #1
 8010e72:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8010e74:	2300      	movs	r3, #0
  }
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3708      	adds	r7, #8
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}

08010e7e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010e7e:	b590      	push	{r4, r7, lr}
 8010e80:	b087      	sub	sp, #28
 8010e82:	af00      	add	r7, sp, #0
 8010e84:	60f8      	str	r0, [r7, #12]
 8010e86:	60b9      	str	r1, [r7, #8]
 8010e88:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	7f1b      	ldrb	r3, [r3, #28]
 8010e92:	2b01      	cmp	r3, #1
 8010e94:	d101      	bne.n	8010e9a <HAL_RTC_SetTime+0x1c>
 8010e96:	2302      	movs	r3, #2
 8010e98:	e0aa      	b.n	8010ff0 <HAL_RTC_SetTime+0x172>
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	2201      	movs	r2, #1
 8010e9e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	2202      	movs	r2, #2
 8010ea4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d126      	bne.n	8010efa <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	689b      	ldr	r3, [r3, #8]
 8010eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d102      	bne.n	8010ec0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f000 f992 	bl	80111ee <RTC_ByteToBcd2>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	785b      	ldrb	r3, [r3, #1]
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f000 f98b 	bl	80111ee <RTC_ByteToBcd2>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8010edc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8010ede:	68bb      	ldr	r3, [r7, #8]
 8010ee0:	789b      	ldrb	r3, [r3, #2]
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f000 f983 	bl	80111ee <RTC_ByteToBcd2>
 8010ee8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8010eea:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	78db      	ldrb	r3, [r3, #3]
 8010ef2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8010ef4:	4313      	orrs	r3, r2
 8010ef6:	617b      	str	r3, [r7, #20]
 8010ef8:	e018      	b.n	8010f2c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	689b      	ldr	r3, [r3, #8]
 8010f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d102      	bne.n	8010f0e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	785b      	ldrb	r3, [r3, #1]
 8010f18:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8010f1a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8010f1c:	68ba      	ldr	r2, [r7, #8]
 8010f1e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8010f20:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8010f22:	68bb      	ldr	r3, [r7, #8]
 8010f24:	78db      	ldrb	r3, [r3, #3]
 8010f26:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8010f28:	4313      	orrs	r3, r2
 8010f2a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	22ca      	movs	r2, #202	; 0xca
 8010f32:	625a      	str	r2, [r3, #36]	; 0x24
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	2253      	movs	r2, #83	; 0x53
 8010f3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8010f3c:	68f8      	ldr	r0, [r7, #12]
 8010f3e:	f000 f92a 	bl	8011196 <RTC_EnterInitMode>
 8010f42:	4603      	mov	r3, r0
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d00b      	beq.n	8010f60 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	22ff      	movs	r2, #255	; 0xff
 8010f4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2204      	movs	r2, #4
 8010f54:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	e047      	b.n	8010ff0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	681a      	ldr	r2, [r3, #0]
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8010f6a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8010f6e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	689a      	ldr	r2, [r3, #8]
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010f7e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	6899      	ldr	r1, [r3, #8]
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	68da      	ldr	r2, [r3, #12]
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	691b      	ldr	r3, [r3, #16]
 8010f8e:	431a      	orrs	r2, r3
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	430a      	orrs	r2, r1
 8010f96:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	68da      	ldr	r2, [r3, #12]
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010fa6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	689b      	ldr	r3, [r3, #8]
 8010fae:	f003 0320 	and.w	r3, r3, #32
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d111      	bne.n	8010fda <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010fb6:	68f8      	ldr	r0, [r7, #12]
 8010fb8:	f000 f8c5 	bl	8011146 <HAL_RTC_WaitForSynchro>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d00b      	beq.n	8010fda <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	22ff      	movs	r2, #255	; 0xff
 8010fc8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	2204      	movs	r2, #4
 8010fce:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	e00a      	b.n	8010ff0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	22ff      	movs	r2, #255	; 0xff
 8010fe0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2201      	movs	r2, #1
 8010fe6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	2200      	movs	r2, #0
 8010fec:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8010fee:	2300      	movs	r3, #0
  }
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	371c      	adds	r7, #28
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd90      	pop	{r4, r7, pc}

08010ff8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010ff8:	b590      	push	{r4, r7, lr}
 8010ffa:	b087      	sub	sp, #28
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	60f8      	str	r0, [r7, #12]
 8011000:	60b9      	str	r1, [r7, #8]
 8011002:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8011004:	2300      	movs	r3, #0
 8011006:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	7f1b      	ldrb	r3, [r3, #28]
 801100c:	2b01      	cmp	r3, #1
 801100e:	d101      	bne.n	8011014 <HAL_RTC_SetDate+0x1c>
 8011010:	2302      	movs	r3, #2
 8011012:	e094      	b.n	801113e <HAL_RTC_SetDate+0x146>
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	2201      	movs	r2, #1
 8011018:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	2202      	movs	r2, #2
 801101e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d10e      	bne.n	8011044 <HAL_RTC_SetDate+0x4c>
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	785b      	ldrb	r3, [r3, #1]
 801102a:	f003 0310 	and.w	r3, r3, #16
 801102e:	2b00      	cmp	r3, #0
 8011030:	d008      	beq.n	8011044 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	785b      	ldrb	r3, [r3, #1]
 8011036:	f023 0310 	bic.w	r3, r3, #16
 801103a:	b2db      	uxtb	r3, r3
 801103c:	330a      	adds	r3, #10
 801103e:	b2da      	uxtb	r2, r3
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d11c      	bne.n	8011084 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	78db      	ldrb	r3, [r3, #3]
 801104e:	4618      	mov	r0, r3
 8011050:	f000 f8cd 	bl	80111ee <RTC_ByteToBcd2>
 8011054:	4603      	mov	r3, r0
 8011056:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	785b      	ldrb	r3, [r3, #1]
 801105c:	4618      	mov	r0, r3
 801105e:	f000 f8c6 	bl	80111ee <RTC_ByteToBcd2>
 8011062:	4603      	mov	r3, r0
 8011064:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8011066:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	789b      	ldrb	r3, [r3, #2]
 801106c:	4618      	mov	r0, r3
 801106e:	f000 f8be 	bl	80111ee <RTC_ByteToBcd2>
 8011072:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8011074:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	781b      	ldrb	r3, [r3, #0]
 801107c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 801107e:	4313      	orrs	r3, r2
 8011080:	617b      	str	r3, [r7, #20]
 8011082:	e00e      	b.n	80110a2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	78db      	ldrb	r3, [r3, #3]
 8011088:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	785b      	ldrb	r3, [r3, #1]
 801108e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8011090:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8011092:	68ba      	ldr	r2, [r7, #8]
 8011094:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8011096:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 801109e:	4313      	orrs	r3, r2
 80110a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	22ca      	movs	r2, #202	; 0xca
 80110a8:	625a      	str	r2, [r3, #36]	; 0x24
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	2253      	movs	r2, #83	; 0x53
 80110b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80110b2:	68f8      	ldr	r0, [r7, #12]
 80110b4:	f000 f86f 	bl	8011196 <RTC_EnterInitMode>
 80110b8:	4603      	mov	r3, r0
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d00b      	beq.n	80110d6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	22ff      	movs	r2, #255	; 0xff
 80110c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	2204      	movs	r2, #4
 80110ca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	2200      	movs	r2, #0
 80110d0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80110d2:	2301      	movs	r3, #1
 80110d4:	e033      	b.n	801113e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	681a      	ldr	r2, [r3, #0]
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80110e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80110e4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	68da      	ldr	r2, [r3, #12]
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80110f4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	689b      	ldr	r3, [r3, #8]
 80110fc:	f003 0320 	and.w	r3, r3, #32
 8011100:	2b00      	cmp	r3, #0
 8011102:	d111      	bne.n	8011128 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011104:	68f8      	ldr	r0, [r7, #12]
 8011106:	f000 f81e 	bl	8011146 <HAL_RTC_WaitForSynchro>
 801110a:	4603      	mov	r3, r0
 801110c:	2b00      	cmp	r3, #0
 801110e:	d00b      	beq.n	8011128 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	22ff      	movs	r2, #255	; 0xff
 8011116:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	2204      	movs	r2, #4
 801111c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	2200      	movs	r2, #0
 8011122:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8011124:	2301      	movs	r3, #1
 8011126:	e00a      	b.n	801113e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	22ff      	movs	r2, #255	; 0xff
 801112e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2201      	movs	r2, #1
 8011134:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2200      	movs	r2, #0
 801113a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 801113c:	2300      	movs	r3, #0
  }
}
 801113e:	4618      	mov	r0, r3
 8011140:	371c      	adds	r7, #28
 8011142:	46bd      	mov	sp, r7
 8011144:	bd90      	pop	{r4, r7, pc}

08011146 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8011146:	b580      	push	{r7, lr}
 8011148:	b084      	sub	sp, #16
 801114a:	af00      	add	r7, sp, #0
 801114c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801114e:	2300      	movs	r3, #0
 8011150:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	68da      	ldr	r2, [r3, #12]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8011160:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8011162:	f7fd fdfd 	bl	800ed60 <HAL_GetTick>
 8011166:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011168:	e009      	b.n	801117e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 801116a:	f7fd fdf9 	bl	800ed60 <HAL_GetTick>
 801116e:	4602      	mov	r2, r0
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	1ad3      	subs	r3, r2, r3
 8011174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011178:	d901      	bls.n	801117e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 801117a:	2303      	movs	r3, #3
 801117c:	e007      	b.n	801118e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	68db      	ldr	r3, [r3, #12]
 8011184:	f003 0320 	and.w	r3, r3, #32
 8011188:	2b00      	cmp	r3, #0
 801118a:	d0ee      	beq.n	801116a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 801118c:	2300      	movs	r3, #0
}
 801118e:	4618      	mov	r0, r3
 8011190:	3710      	adds	r7, #16
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}

08011196 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8011196:	b580      	push	{r7, lr}
 8011198:	b084      	sub	sp, #16
 801119a:	af00      	add	r7, sp, #0
 801119c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801119e:	2300      	movs	r3, #0
 80111a0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	68db      	ldr	r3, [r3, #12]
 80111a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d119      	bne.n	80111e4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80111b8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80111ba:	f7fd fdd1 	bl	800ed60 <HAL_GetTick>
 80111be:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80111c0:	e009      	b.n	80111d6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80111c2:	f7fd fdcd 	bl	800ed60 <HAL_GetTick>
 80111c6:	4602      	mov	r2, r0
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	1ad3      	subs	r3, r2, r3
 80111cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80111d0:	d901      	bls.n	80111d6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80111d2:	2303      	movs	r3, #3
 80111d4:	e007      	b.n	80111e6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d0ee      	beq.n	80111c2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80111e4:	2300      	movs	r3, #0
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	3710      	adds	r7, #16
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}

080111ee <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80111ee:	b480      	push	{r7}
 80111f0:	b085      	sub	sp, #20
 80111f2:	af00      	add	r7, sp, #0
 80111f4:	4603      	mov	r3, r0
 80111f6:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80111f8:	2300      	movs	r3, #0
 80111fa:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80111fc:	e005      	b.n	801120a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	3301      	adds	r3, #1
 8011202:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8011204:	79fb      	ldrb	r3, [r7, #7]
 8011206:	3b0a      	subs	r3, #10
 8011208:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 801120a:	79fb      	ldrb	r3, [r7, #7]
 801120c:	2b09      	cmp	r3, #9
 801120e:	d8f6      	bhi.n	80111fe <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	b2db      	uxtb	r3, r3
 8011214:	011b      	lsls	r3, r3, #4
 8011216:	b2da      	uxtb	r2, r3
 8011218:	79fb      	ldrb	r3, [r7, #7]
 801121a:	4313      	orrs	r3, r2
 801121c:	b2db      	uxtb	r3, r3
}
 801121e:	4618      	mov	r0, r3
 8011220:	3714      	adds	r7, #20
 8011222:	46bd      	mov	sp, r7
 8011224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011228:	4770      	bx	lr

0801122a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 801122a:	b580      	push	{r7, lr}
 801122c:	b082      	sub	sp, #8
 801122e:	af00      	add	r7, sp, #0
 8011230:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d101      	bne.n	801123c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8011238:	2301      	movs	r3, #1
 801123a:	e022      	b.n	8011282 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011242:	b2db      	uxtb	r3, r3
 8011244:	2b00      	cmp	r3, #0
 8011246:	d105      	bne.n	8011254 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2200      	movs	r2, #0
 801124c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f7fd f9e0 	bl	800e614 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2203      	movs	r2, #3
 8011258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f000 f815 	bl	801128c <HAL_SD_InitCard>
 8011262:	4603      	mov	r3, r0
 8011264:	2b00      	cmp	r3, #0
 8011266:	d001      	beq.n	801126c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8011268:	2301      	movs	r3, #1
 801126a:	e00a      	b.n	8011282 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2200      	movs	r2, #0
 8011270:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2200      	movs	r2, #0
 8011276:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2201      	movs	r2, #1
 801127c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8011280:	2300      	movs	r3, #0
}
 8011282:	4618      	mov	r0, r3
 8011284:	3708      	adds	r7, #8
 8011286:	46bd      	mov	sp, r7
 8011288:	bd80      	pop	{r7, pc}
	...

0801128c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 801128c:	b5b0      	push	{r4, r5, r7, lr}
 801128e:	b08e      	sub	sp, #56	; 0x38
 8011290:	af04      	add	r7, sp, #16
 8011292:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8011294:	2300      	movs	r3, #0
 8011296:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8011298:	2300      	movs	r3, #0
 801129a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 801129c:	2300      	movs	r3, #0
 801129e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80112a0:	2300      	movs	r3, #0
 80112a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80112a4:	2300      	movs	r3, #0
 80112a6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80112a8:	2376      	movs	r3, #118	; 0x76
 80112aa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	681d      	ldr	r5, [r3, #0]
 80112b0:	466c      	mov	r4, sp
 80112b2:	f107 0314 	add.w	r3, r7, #20
 80112b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80112ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80112be:	f107 0308 	add.w	r3, r7, #8
 80112c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80112c4:	4628      	mov	r0, r5
 80112c6:	f002 fbf7 	bl	8013ab8 <SDIO_Init>
 80112ca:	4603      	mov	r3, r0
 80112cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80112d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d001      	beq.n	80112dc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80112d8:	2301      	movs	r3, #1
 80112da:	e04c      	b.n	8011376 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80112dc:	4b28      	ldr	r3, [pc, #160]	; (8011380 <HAL_SD_InitCard+0xf4>)
 80112de:	2200      	movs	r2, #0
 80112e0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	4618      	mov	r0, r3
 80112e8:	f002 fc2f 	bl	8013b4a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80112ec:	4b24      	ldr	r3, [pc, #144]	; (8011380 <HAL_SD_InitCard+0xf4>)
 80112ee:	2201      	movs	r2, #1
 80112f0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80112f2:	6878      	ldr	r0, [r7, #4]
 80112f4:	f001 f806 	bl	8012304 <SD_PowerON>
 80112f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80112fa:	6a3b      	ldr	r3, [r7, #32]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d00b      	beq.n	8011318 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2201      	movs	r2, #1
 8011304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801130c:	6a3b      	ldr	r3, [r7, #32]
 801130e:	431a      	orrs	r2, r3
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8011314:	2301      	movs	r3, #1
 8011316:	e02e      	b.n	8011376 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f000 ff25 	bl	8012168 <SD_InitCard>
 801131e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011320:	6a3b      	ldr	r3, [r7, #32]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d00b      	beq.n	801133e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2201      	movs	r2, #1
 801132a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011332:	6a3b      	ldr	r3, [r7, #32]
 8011334:	431a      	orrs	r2, r3
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801133a:	2301      	movs	r3, #1
 801133c:	e01b      	b.n	8011376 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011346:	4618      	mov	r0, r3
 8011348:	f002 fc92 	bl	8013c70 <SDMMC_CmdBlockLength>
 801134c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801134e:	6a3b      	ldr	r3, [r7, #32]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d00f      	beq.n	8011374 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	4a0a      	ldr	r2, [pc, #40]	; (8011384 <HAL_SD_InitCard+0xf8>)
 801135a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011360:	6a3b      	ldr	r3, [r7, #32]
 8011362:	431a      	orrs	r2, r3
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2201      	movs	r2, #1
 801136c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8011370:	2301      	movs	r3, #1
 8011372:	e000      	b.n	8011376 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8011374:	2300      	movs	r3, #0
}
 8011376:	4618      	mov	r0, r3
 8011378:	3728      	adds	r7, #40	; 0x28
 801137a:	46bd      	mov	sp, r7
 801137c:	bdb0      	pop	{r4, r5, r7, pc}
 801137e:	bf00      	nop
 8011380:	422580a0 	.word	0x422580a0
 8011384:	004005ff 	.word	0x004005ff

08011388 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b08c      	sub	sp, #48	; 0x30
 801138c:	af00      	add	r7, sp, #0
 801138e:	60f8      	str	r0, [r7, #12]
 8011390:	60b9      	str	r1, [r7, #8]
 8011392:	607a      	str	r2, [r7, #4]
 8011394:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d107      	bne.n	80113b0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80113ac:	2301      	movs	r3, #1
 80113ae:	e0c0      	b.n	8011532 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80113b6:	b2db      	uxtb	r3, r3
 80113b8:	2b01      	cmp	r3, #1
 80113ba:	f040 80b9 	bne.w	8011530 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	2200      	movs	r2, #0
 80113c2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80113c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	441a      	add	r2, r3
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d907      	bls.n	80113e2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80113de:	2301      	movs	r3, #1
 80113e0:	e0a7      	b.n	8011532 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	2203      	movs	r2, #3
 80113e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2200      	movs	r2, #0
 80113f0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113f8:	68fa      	ldr	r2, [r7, #12]
 80113fa:	6812      	ldr	r2, [r2, #0]
 80113fc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8011400:	f043 0302 	orr.w	r3, r3, #2
 8011404:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801140a:	4a4c      	ldr	r2, [pc, #304]	; (801153c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 801140c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011412:	4a4b      	ldr	r2, [pc, #300]	; (8011540 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8011414:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801141a:	2200      	movs	r2, #0
 801141c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011422:	2200      	movs	r2, #0
 8011424:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011436:	689a      	ldr	r2, [r3, #8]
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	430a      	orrs	r2, r1
 8011440:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	3380      	adds	r3, #128	; 0x80
 801144c:	4619      	mov	r1, r3
 801144e:	68ba      	ldr	r2, [r7, #8]
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	025b      	lsls	r3, r3, #9
 8011454:	089b      	lsrs	r3, r3, #2
 8011456:	f7fe f8d5 	bl	800f604 <HAL_DMA_Start_IT>
 801145a:	4603      	mov	r3, r0
 801145c:	2b00      	cmp	r3, #0
 801145e:	d017      	beq.n	8011490 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 801146e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	4a33      	ldr	r2, [pc, #204]	; (8011544 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8011476:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801147c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	2201      	movs	r2, #1
 8011488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 801148c:	2301      	movs	r3, #1
 801148e:	e050      	b.n	8011532 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8011490:	4b2d      	ldr	r3, [pc, #180]	; (8011548 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8011492:	2201      	movs	r2, #1
 8011494:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801149a:	2b01      	cmp	r3, #1
 801149c:	d002      	beq.n	80114a4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 801149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a0:	025b      	lsls	r3, r3, #9
 80114a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80114a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114a8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	025b      	lsls	r3, r3, #9
 80114ae:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80114b0:	2390      	movs	r3, #144	; 0x90
 80114b2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80114b4:	2302      	movs	r3, #2
 80114b6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80114b8:	2300      	movs	r3, #0
 80114ba:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80114bc:	2301      	movs	r3, #1
 80114be:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	f107 0210 	add.w	r2, r7, #16
 80114c8:	4611      	mov	r1, r2
 80114ca:	4618      	mov	r0, r3
 80114cc:	f002 fba4 	bl	8013c18 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	2b01      	cmp	r3, #1
 80114d4:	d90a      	bls.n	80114ec <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2282      	movs	r2, #130	; 0x82
 80114da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80114e2:	4618      	mov	r0, r3
 80114e4:	f002 fc08 	bl	8013cf8 <SDMMC_CmdReadMultiBlock>
 80114e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80114ea:	e009      	b.n	8011500 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	2281      	movs	r2, #129	; 0x81
 80114f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80114f8:	4618      	mov	r0, r3
 80114fa:	f002 fbdb 	bl	8013cb4 <SDMMC_CmdReadSingleBlock>
 80114fe:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8011500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011502:	2b00      	cmp	r3, #0
 8011504:	d012      	beq.n	801152c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	4a0e      	ldr	r2, [pc, #56]	; (8011544 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 801150c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011514:	431a      	orrs	r2, r3
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	2201      	movs	r2, #1
 801151e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	2200      	movs	r2, #0
 8011526:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8011528:	2301      	movs	r3, #1
 801152a:	e002      	b.n	8011532 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 801152c:	2300      	movs	r3, #0
 801152e:	e000      	b.n	8011532 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8011530:	2302      	movs	r3, #2
  }
}
 8011532:	4618      	mov	r0, r3
 8011534:	3730      	adds	r7, #48	; 0x30
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}
 801153a:	bf00      	nop
 801153c:	08011f77 	.word	0x08011f77
 8011540:	08011fe9 	.word	0x08011fe9
 8011544:	004005ff 	.word	0x004005ff
 8011548:	4225858c 	.word	0x4225858c

0801154c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b08c      	sub	sp, #48	; 0x30
 8011550:	af00      	add	r7, sp, #0
 8011552:	60f8      	str	r0, [r7, #12]
 8011554:	60b9      	str	r1, [r7, #8]
 8011556:	607a      	str	r2, [r7, #4]
 8011558:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d107      	bne.n	8011574 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011568:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8011570:	2301      	movs	r3, #1
 8011572:	e0c5      	b.n	8011700 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801157a:	b2db      	uxtb	r3, r3
 801157c:	2b01      	cmp	r3, #1
 801157e:	f040 80be 	bne.w	80116fe <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	2200      	movs	r2, #0
 8011586:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8011588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	441a      	add	r2, r3
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011592:	429a      	cmp	r2, r3
 8011594:	d907      	bls.n	80115a6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801159a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80115a2:	2301      	movs	r3, #1
 80115a4:	e0ac      	b.n	8011700 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	2203      	movs	r2, #3
 80115aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	2200      	movs	r2, #0
 80115b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115bc:	68fa      	ldr	r2, [r7, #12]
 80115be:	6812      	ldr	r2, [r2, #0]
 80115c0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80115c4:	f043 0302 	orr.w	r3, r3, #2
 80115c8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115ce:	4a4e      	ldr	r2, [pc, #312]	; (8011708 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80115d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115d6:	4a4d      	ldr	r2, [pc, #308]	; (801170c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80115d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115de:	2200      	movs	r2, #0
 80115e0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	d002      	beq.n	80115f0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80115ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ec:	025b      	lsls	r3, r3, #9
 80115ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	2b01      	cmp	r3, #1
 80115f4:	d90a      	bls.n	801160c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	22a0      	movs	r2, #160	; 0xa0
 80115fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011602:	4618      	mov	r0, r3
 8011604:	f002 fbbc 	bl	8013d80 <SDMMC_CmdWriteMultiBlock>
 8011608:	62f8      	str	r0, [r7, #44]	; 0x2c
 801160a:	e009      	b.n	8011620 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	2290      	movs	r2, #144	; 0x90
 8011610:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011618:	4618      	mov	r0, r3
 801161a:	f002 fb8f 	bl	8013d3c <SDMMC_CmdWriteSingleBlock>
 801161e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8011620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011622:	2b00      	cmp	r3, #0
 8011624:	d012      	beq.n	801164c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	4a39      	ldr	r2, [pc, #228]	; (8011710 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 801162c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011634:	431a      	orrs	r2, r3
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	2201      	movs	r2, #1
 801163e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	2200      	movs	r2, #0
 8011646:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8011648:	2301      	movs	r3, #1
 801164a:	e059      	b.n	8011700 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 801164c:	4b31      	ldr	r3, [pc, #196]	; (8011714 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 801164e:	2201      	movs	r2, #1
 8011650:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011656:	2240      	movs	r2, #64	; 0x40
 8011658:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801166a:	689a      	ldr	r2, [r3, #8]
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	430a      	orrs	r2, r1
 8011674:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801167a:	68b9      	ldr	r1, [r7, #8]
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	3380      	adds	r3, #128	; 0x80
 8011682:	461a      	mov	r2, r3
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	025b      	lsls	r3, r3, #9
 8011688:	089b      	lsrs	r3, r3, #2
 801168a:	f7fd ffbb 	bl	800f604 <HAL_DMA_Start_IT>
 801168e:	4603      	mov	r3, r0
 8011690:	2b00      	cmp	r3, #0
 8011692:	d01c      	beq.n	80116ce <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801169a:	68fa      	ldr	r2, [r7, #12]
 801169c:	6812      	ldr	r2, [r2, #0]
 801169e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80116a2:	f023 0302 	bic.w	r3, r3, #2
 80116a6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	4a18      	ldr	r2, [pc, #96]	; (8011710 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80116ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	2201      	movs	r2, #1
 80116c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	2200      	movs	r2, #0
 80116c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80116ca:	2301      	movs	r3, #1
 80116cc:	e018      	b.n	8011700 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80116ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80116d2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	025b      	lsls	r3, r3, #9
 80116d8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80116da:	2390      	movs	r3, #144	; 0x90
 80116dc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80116de:	2300      	movs	r3, #0
 80116e0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80116e2:	2300      	movs	r3, #0
 80116e4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80116e6:	2301      	movs	r3, #1
 80116e8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	f107 0210 	add.w	r2, r7, #16
 80116f2:	4611      	mov	r1, r2
 80116f4:	4618      	mov	r0, r3
 80116f6:	f002 fa8f 	bl	8013c18 <SDIO_ConfigData>

      return HAL_OK;
 80116fa:	2300      	movs	r3, #0
 80116fc:	e000      	b.n	8011700 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80116fe:	2302      	movs	r3, #2
  }
}
 8011700:	4618      	mov	r0, r3
 8011702:	3730      	adds	r7, #48	; 0x30
 8011704:	46bd      	mov	sp, r7
 8011706:	bd80      	pop	{r7, pc}
 8011708:	08011f4d 	.word	0x08011f4d
 801170c:	08011fe9 	.word	0x08011fe9
 8011710:	004005ff 	.word	0x004005ff
 8011714:	4225858c 	.word	0x4225858c

08011718 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b084      	sub	sp, #16
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011724:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801172c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011730:	2b00      	cmp	r3, #0
 8011732:	d008      	beq.n	8011746 <HAL_SD_IRQHandler+0x2e>
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	f003 0308 	and.w	r3, r3, #8
 801173a:	2b00      	cmp	r3, #0
 801173c:	d003      	beq.n	8011746 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f000 ffff 	bl	8012742 <SD_Read_IT>
 8011744:	e165      	b.n	8011a12 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801174c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011750:	2b00      	cmp	r3, #0
 8011752:	f000 808f 	beq.w	8011874 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801175e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	6812      	ldr	r2, [r2, #0]
 801176a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 801176e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8011772:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	f022 0201 	bic.w	r2, r2, #1
 8011782:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	f003 0308 	and.w	r3, r3, #8
 801178a:	2b00      	cmp	r3, #0
 801178c:	d039      	beq.n	8011802 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	f003 0302 	and.w	r3, r3, #2
 8011794:	2b00      	cmp	r3, #0
 8011796:	d104      	bne.n	80117a2 <HAL_SD_IRQHandler+0x8a>
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	f003 0320 	and.w	r3, r3, #32
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d011      	beq.n	80117c6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	4618      	mov	r0, r3
 80117a8:	f002 fb0c 	bl	8013dc4 <SDMMC_CmdStopTransfer>
 80117ac:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80117ae:	68bb      	ldr	r3, [r7, #8]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d008      	beq.n	80117c6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80117b8:	68bb      	ldr	r3, [r7, #8]
 80117ba:	431a      	orrs	r2, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80117c0:	6878      	ldr	r0, [r7, #4]
 80117c2:	f000 f92f 	bl	8011a24 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	f240 523a 	movw	r2, #1338	; 0x53a
 80117ce:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2201      	movs	r2, #1
 80117d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2200      	movs	r2, #0
 80117dc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	f003 0301 	and.w	r3, r3, #1
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d104      	bne.n	80117f2 <HAL_SD_IRQHandler+0xda>
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	f003 0302 	and.w	r3, r3, #2
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d003      	beq.n	80117fa <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f002 ff7a 	bl	80146ec <HAL_SD_RxCpltCallback>
 80117f8:	e10b      	b.n	8011a12 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80117fa:	6878      	ldr	r0, [r7, #4]
 80117fc:	f002 ff6c 	bl	80146d8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011800:	e107      	b.n	8011a12 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011808:	2b00      	cmp	r3, #0
 801180a:	f000 8102 	beq.w	8011a12 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	f003 0320 	and.w	r3, r3, #32
 8011814:	2b00      	cmp	r3, #0
 8011816:	d011      	beq.n	801183c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	4618      	mov	r0, r3
 801181e:	f002 fad1 	bl	8013dc4 <SDMMC_CmdStopTransfer>
 8011822:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d008      	beq.n	801183c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	431a      	orrs	r2, r3
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f000 f8f4 	bl	8011a24 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	f003 0301 	and.w	r3, r3, #1
 8011842:	2b00      	cmp	r3, #0
 8011844:	f040 80e5 	bne.w	8011a12 <HAL_SD_IRQHandler+0x2fa>
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	f003 0302 	and.w	r3, r3, #2
 801184e:	2b00      	cmp	r3, #0
 8011850:	f040 80df 	bne.w	8011a12 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	f022 0208 	bic.w	r2, r2, #8
 8011862:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2201      	movs	r2, #1
 8011868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f002 ff33 	bl	80146d8 <HAL_SD_TxCpltCallback>
}
 8011872:	e0ce      	b.n	8011a12 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801187a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801187e:	2b00      	cmp	r3, #0
 8011880:	d008      	beq.n	8011894 <HAL_SD_IRQHandler+0x17c>
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	f003 0308 	and.w	r3, r3, #8
 8011888:	2b00      	cmp	r3, #0
 801188a:	d003      	beq.n	8011894 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f000 ffa9 	bl	80127e4 <SD_Write_IT>
 8011892:	e0be      	b.n	8011a12 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801189a:	f240 233a 	movw	r3, #570	; 0x23a
 801189e:	4013      	ands	r3, r2
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	f000 80b6 	beq.w	8011a12 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118ac:	f003 0302 	and.w	r3, r3, #2
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d005      	beq.n	80118c0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118b8:	f043 0202 	orr.w	r2, r3, #2
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118c6:	f003 0308 	and.w	r3, r3, #8
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d005      	beq.n	80118da <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118d2:	f043 0208 	orr.w	r2, r3, #8
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118e0:	f003 0320 	and.w	r3, r3, #32
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d005      	beq.n	80118f4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118ec:	f043 0220 	orr.w	r2, r3, #32
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118fa:	f003 0310 	and.w	r3, r3, #16
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d005      	beq.n	801190e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011906:	f043 0210 	orr.w	r2, r3, #16
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011918:	2b00      	cmp	r3, #0
 801191a:	d005      	beq.n	8011928 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011920:	f043 0208 	orr.w	r2, r3, #8
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	f240 723a 	movw	r2, #1850	; 0x73a
 8011930:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011938:	687a      	ldr	r2, [r7, #4]
 801193a:	6812      	ldr	r2, [r2, #0]
 801193c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8011940:	f023 0302 	bic.w	r3, r3, #2
 8011944:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	4618      	mov	r0, r3
 801194c:	f002 fa3a 	bl	8013dc4 <SDMMC_CmdStopTransfer>
 8011950:	4602      	mov	r2, r0
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011956:	431a      	orrs	r2, r3
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	f003 0308 	and.w	r3, r3, #8
 8011962:	2b00      	cmp	r3, #0
 8011964:	d00a      	beq.n	801197c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	2201      	movs	r2, #1
 801196a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2200      	movs	r2, #0
 8011972:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f000 f855 	bl	8011a24 <HAL_SD_ErrorCallback>
}
 801197a:	e04a      	b.n	8011a12 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011982:	2b00      	cmp	r3, #0
 8011984:	d045      	beq.n	8011a12 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	f003 0310 	and.w	r3, r3, #16
 801198c:	2b00      	cmp	r3, #0
 801198e:	d104      	bne.n	801199a <HAL_SD_IRQHandler+0x282>
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	f003 0320 	and.w	r3, r3, #32
 8011996:	2b00      	cmp	r3, #0
 8011998:	d011      	beq.n	80119be <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801199e:	4a1f      	ldr	r2, [pc, #124]	; (8011a1c <HAL_SD_IRQHandler+0x304>)
 80119a0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fd fef4 	bl	800f794 <HAL_DMA_Abort_IT>
 80119ac:	4603      	mov	r3, r0
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d02f      	beq.n	8011a12 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119b6:	4618      	mov	r0, r3
 80119b8:	f000 fb68 	bl	801208c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80119bc:	e029      	b.n	8011a12 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	f003 0301 	and.w	r3, r3, #1
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d104      	bne.n	80119d2 <HAL_SD_IRQHandler+0x2ba>
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	f003 0302 	and.w	r3, r3, #2
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d011      	beq.n	80119f6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119d6:	4a12      	ldr	r2, [pc, #72]	; (8011a20 <HAL_SD_IRQHandler+0x308>)
 80119d8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119de:	4618      	mov	r0, r3
 80119e0:	f7fd fed8 	bl	800f794 <HAL_DMA_Abort_IT>
 80119e4:	4603      	mov	r3, r0
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d013      	beq.n	8011a12 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119ee:	4618      	mov	r0, r3
 80119f0:	f000 fb83 	bl	80120fa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80119f4:	e00d      	b.n	8011a12 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2200      	movs	r2, #0
 80119fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2201      	movs	r2, #1
 8011a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2200      	movs	r2, #0
 8011a08:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	f002 fe5a 	bl	80146c4 <HAL_SD_AbortCallback>
}
 8011a10:	e7ff      	b.n	8011a12 <HAL_SD_IRQHandler+0x2fa>
 8011a12:	bf00      	nop
 8011a14:	3710      	adds	r7, #16
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	0801208d 	.word	0x0801208d
 8011a20:	080120fb 	.word	0x080120fb

08011a24 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8011a24:	b480      	push	{r7}
 8011a26:	b083      	sub	sp, #12
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8011a2c:	bf00      	nop
 8011a2e:	370c      	adds	r7, #12
 8011a30:	46bd      	mov	sp, r7
 8011a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a36:	4770      	bx	lr

08011a38 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8011a38:	b480      	push	{r7}
 8011a3a:	b083      	sub	sp, #12
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
 8011a40:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a46:	0f9b      	lsrs	r3, r3, #30
 8011a48:	b2da      	uxtb	r2, r3
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a52:	0e9b      	lsrs	r3, r3, #26
 8011a54:	b2db      	uxtb	r3, r3
 8011a56:	f003 030f 	and.w	r3, r3, #15
 8011a5a:	b2da      	uxtb	r2, r3
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a64:	0e1b      	lsrs	r3, r3, #24
 8011a66:	b2db      	uxtb	r3, r3
 8011a68:	f003 0303 	and.w	r3, r3, #3
 8011a6c:	b2da      	uxtb	r2, r3
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a76:	0c1b      	lsrs	r3, r3, #16
 8011a78:	b2da      	uxtb	r2, r3
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a82:	0a1b      	lsrs	r3, r3, #8
 8011a84:	b2da      	uxtb	r2, r3
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a8e:	b2da      	uxtb	r2, r3
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a98:	0d1b      	lsrs	r3, r3, #20
 8011a9a:	b29a      	uxth	r2, r3
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011aa4:	0c1b      	lsrs	r3, r3, #16
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	f003 030f 	and.w	r3, r3, #15
 8011aac:	b2da      	uxtb	r2, r3
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011ab6:	0bdb      	lsrs	r3, r3, #15
 8011ab8:	b2db      	uxtb	r3, r3
 8011aba:	f003 0301 	and.w	r3, r3, #1
 8011abe:	b2da      	uxtb	r2, r3
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011ac8:	0b9b      	lsrs	r3, r3, #14
 8011aca:	b2db      	uxtb	r3, r3
 8011acc:	f003 0301 	and.w	r3, r3, #1
 8011ad0:	b2da      	uxtb	r2, r3
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011ada:	0b5b      	lsrs	r3, r3, #13
 8011adc:	b2db      	uxtb	r3, r3
 8011ade:	f003 0301 	and.w	r3, r3, #1
 8011ae2:	b2da      	uxtb	r2, r3
 8011ae4:	683b      	ldr	r3, [r7, #0]
 8011ae6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011aec:	0b1b      	lsrs	r3, r3, #12
 8011aee:	b2db      	uxtb	r3, r3
 8011af0:	f003 0301 	and.w	r3, r3, #1
 8011af4:	b2da      	uxtb	r2, r3
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	2200      	movs	r2, #0
 8011afe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d163      	bne.n	8011bd0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b0c:	009a      	lsls	r2, r3, #2
 8011b0e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8011b12:	4013      	ands	r3, r2
 8011b14:	687a      	ldr	r2, [r7, #4]
 8011b16:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8011b18:	0f92      	lsrs	r2, r2, #30
 8011b1a:	431a      	orrs	r2, r3
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b24:	0edb      	lsrs	r3, r3, #27
 8011b26:	b2db      	uxtb	r3, r3
 8011b28:	f003 0307 	and.w	r3, r3, #7
 8011b2c:	b2da      	uxtb	r2, r3
 8011b2e:	683b      	ldr	r3, [r7, #0]
 8011b30:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b36:	0e1b      	lsrs	r3, r3, #24
 8011b38:	b2db      	uxtb	r3, r3
 8011b3a:	f003 0307 	and.w	r3, r3, #7
 8011b3e:	b2da      	uxtb	r2, r3
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b48:	0d5b      	lsrs	r3, r3, #21
 8011b4a:	b2db      	uxtb	r3, r3
 8011b4c:	f003 0307 	and.w	r3, r3, #7
 8011b50:	b2da      	uxtb	r2, r3
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b5a:	0c9b      	lsrs	r3, r3, #18
 8011b5c:	b2db      	uxtb	r3, r3
 8011b5e:	f003 0307 	and.w	r3, r3, #7
 8011b62:	b2da      	uxtb	r2, r3
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b6c:	0bdb      	lsrs	r3, r3, #15
 8011b6e:	b2db      	uxtb	r3, r3
 8011b70:	f003 0307 	and.w	r3, r3, #7
 8011b74:	b2da      	uxtb	r2, r3
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	691b      	ldr	r3, [r3, #16]
 8011b7e:	1c5a      	adds	r2, r3, #1
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8011b84:	683b      	ldr	r3, [r7, #0]
 8011b86:	7e1b      	ldrb	r3, [r3, #24]
 8011b88:	b2db      	uxtb	r3, r3
 8011b8a:	f003 0307 	and.w	r3, r3, #7
 8011b8e:	3302      	adds	r3, #2
 8011b90:	2201      	movs	r2, #1
 8011b92:	fa02 f303 	lsl.w	r3, r2, r3
 8011b96:	687a      	ldr	r2, [r7, #4]
 8011b98:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8011b9a:	fb03 f202 	mul.w	r2, r3, r2
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	7a1b      	ldrb	r3, [r3, #8]
 8011ba6:	b2db      	uxtb	r3, r3
 8011ba8:	f003 030f 	and.w	r3, r3, #15
 8011bac:	2201      	movs	r2, #1
 8011bae:	409a      	lsls	r2, r3
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bb8:	687a      	ldr	r2, [r7, #4]
 8011bba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8011bbc:	0a52      	lsrs	r2, r2, #9
 8011bbe:	fb03 f202 	mul.w	r2, r3, r2
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011bcc:	661a      	str	r2, [r3, #96]	; 0x60
 8011bce:	e031      	b.n	8011c34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bd4:	2b01      	cmp	r3, #1
 8011bd6:	d11d      	bne.n	8011c14 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011bdc:	041b      	lsls	r3, r3, #16
 8011bde:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011be6:	0c1b      	lsrs	r3, r3, #16
 8011be8:	431a      	orrs	r2, r3
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	691b      	ldr	r3, [r3, #16]
 8011bf2:	3301      	adds	r3, #1
 8011bf4:	029a      	lsls	r2, r3, #10
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c08:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	661a      	str	r2, [r3, #96]	; 0x60
 8011c12:	e00f      	b.n	8011c34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	4a58      	ldr	r2, [pc, #352]	; (8011d7c <HAL_SD_GetCardCSD+0x344>)
 8011c1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2201      	movs	r2, #1
 8011c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8011c30:	2301      	movs	r3, #1
 8011c32:	e09d      	b.n	8011d70 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c38:	0b9b      	lsrs	r3, r3, #14
 8011c3a:	b2db      	uxtb	r3, r3
 8011c3c:	f003 0301 	and.w	r3, r3, #1
 8011c40:	b2da      	uxtb	r2, r3
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c4a:	09db      	lsrs	r3, r3, #7
 8011c4c:	b2db      	uxtb	r3, r3
 8011c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c52:	b2da      	uxtb	r2, r3
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c5c:	b2db      	uxtb	r3, r3
 8011c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c62:	b2da      	uxtb	r2, r3
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c6c:	0fdb      	lsrs	r3, r3, #31
 8011c6e:	b2da      	uxtb	r2, r3
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c78:	0f5b      	lsrs	r3, r3, #29
 8011c7a:	b2db      	uxtb	r3, r3
 8011c7c:	f003 0303 	and.w	r3, r3, #3
 8011c80:	b2da      	uxtb	r2, r3
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c8a:	0e9b      	lsrs	r3, r3, #26
 8011c8c:	b2db      	uxtb	r3, r3
 8011c8e:	f003 0307 	and.w	r3, r3, #7
 8011c92:	b2da      	uxtb	r2, r3
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c9c:	0d9b      	lsrs	r3, r3, #22
 8011c9e:	b2db      	uxtb	r3, r3
 8011ca0:	f003 030f 	and.w	r3, r3, #15
 8011ca4:	b2da      	uxtb	r2, r3
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cae:	0d5b      	lsrs	r3, r3, #21
 8011cb0:	b2db      	uxtb	r3, r3
 8011cb2:	f003 0301 	and.w	r3, r3, #1
 8011cb6:	b2da      	uxtb	r2, r3
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cca:	0c1b      	lsrs	r3, r3, #16
 8011ccc:	b2db      	uxtb	r3, r3
 8011cce:	f003 0301 	and.w	r3, r3, #1
 8011cd2:	b2da      	uxtb	r2, r3
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cde:	0bdb      	lsrs	r3, r3, #15
 8011ce0:	b2db      	uxtb	r3, r3
 8011ce2:	f003 0301 	and.w	r3, r3, #1
 8011ce6:	b2da      	uxtb	r2, r3
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cf2:	0b9b      	lsrs	r3, r3, #14
 8011cf4:	b2db      	uxtb	r3, r3
 8011cf6:	f003 0301 	and.w	r3, r3, #1
 8011cfa:	b2da      	uxtb	r2, r3
 8011cfc:	683b      	ldr	r3, [r7, #0]
 8011cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d06:	0b5b      	lsrs	r3, r3, #13
 8011d08:	b2db      	uxtb	r3, r3
 8011d0a:	f003 0301 	and.w	r3, r3, #1
 8011d0e:	b2da      	uxtb	r2, r3
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d1a:	0b1b      	lsrs	r3, r3, #12
 8011d1c:	b2db      	uxtb	r3, r3
 8011d1e:	f003 0301 	and.w	r3, r3, #1
 8011d22:	b2da      	uxtb	r2, r3
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d2e:	0a9b      	lsrs	r3, r3, #10
 8011d30:	b2db      	uxtb	r3, r3
 8011d32:	f003 0303 	and.w	r3, r3, #3
 8011d36:	b2da      	uxtb	r2, r3
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d42:	0a1b      	lsrs	r3, r3, #8
 8011d44:	b2db      	uxtb	r3, r3
 8011d46:	f003 0303 	and.w	r3, r3, #3
 8011d4a:	b2da      	uxtb	r2, r3
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d56:	085b      	lsrs	r3, r3, #1
 8011d58:	b2db      	uxtb	r3, r3
 8011d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d5e:	b2da      	uxtb	r2, r3
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	2201      	movs	r2, #1
 8011d6a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8011d6e:	2300      	movs	r3, #0
}
 8011d70:	4618      	mov	r0, r3
 8011d72:	370c      	adds	r7, #12
 8011d74:	46bd      	mov	sp, r7
 8011d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7a:	4770      	bx	lr
 8011d7c:	004005ff 	.word	0x004005ff

08011d80 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8011d80:	b480      	push	{r7}
 8011d82:	b083      	sub	sp, #12
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
 8011d88:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8011dca:	2300      	movs	r3, #0
}
 8011dcc:	4618      	mov	r0, r3
 8011dce:	370c      	adds	r7, #12
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd6:	4770      	bx	lr

08011dd8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8011dd8:	b5b0      	push	{r4, r5, r7, lr}
 8011dda:	b08e      	sub	sp, #56	; 0x38
 8011ddc:	af04      	add	r7, sp, #16
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8011de2:	2300      	movs	r3, #0
 8011de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2203      	movs	r2, #3
 8011dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011df4:	2b03      	cmp	r3, #3
 8011df6:	d02e      	beq.n	8011e56 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011dfe:	d106      	bne.n	8011e0e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	639a      	str	r2, [r3, #56]	; 0x38
 8011e0c:	e029      	b.n	8011e62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011e14:	d10a      	bne.n	8011e2c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f000 fb2a 	bl	8012470 <SD_WideBus_Enable>
 8011e1c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e22:	6a3b      	ldr	r3, [r7, #32]
 8011e24:	431a      	orrs	r2, r3
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	639a      	str	r2, [r3, #56]	; 0x38
 8011e2a:	e01a      	b.n	8011e62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d10a      	bne.n	8011e48 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8011e32:	6878      	ldr	r0, [r7, #4]
 8011e34:	f000 fb67 	bl	8012506 <SD_WideBus_Disable>
 8011e38:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e3e:	6a3b      	ldr	r3, [r7, #32]
 8011e40:	431a      	orrs	r2, r3
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	639a      	str	r2, [r3, #56]	; 0x38
 8011e46:	e00c      	b.n	8011e62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e4c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	639a      	str	r2, [r3, #56]	; 0x38
 8011e54:	e005      	b.n	8011e62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e5a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d00b      	beq.n	8011e82 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	4a26      	ldr	r2, [pc, #152]	; (8011f08 <HAL_SD_ConfigWideBusOperation+0x130>)
 8011e70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2201      	movs	r2, #1
 8011e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011e80:	e01f      	b.n	8011ec2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	689b      	ldr	r3, [r3, #8]
 8011e8c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	68db      	ldr	r3, [r3, #12]
 8011e92:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	695b      	ldr	r3, [r3, #20]
 8011e9c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	699b      	ldr	r3, [r3, #24]
 8011ea2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681d      	ldr	r5, [r3, #0]
 8011ea8:	466c      	mov	r4, sp
 8011eaa:	f107 0314 	add.w	r3, r7, #20
 8011eae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011eb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011eb6:	f107 0308 	add.w	r3, r7, #8
 8011eba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ebc:	4628      	mov	r0, r5
 8011ebe:	f001 fdfb 	bl	8013ab8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f001 fed0 	bl	8013c70 <SDMMC_CmdBlockLength>
 8011ed0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011ed2:	6a3b      	ldr	r3, [r7, #32]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d00c      	beq.n	8011ef2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	4a0a      	ldr	r2, [pc, #40]	; (8011f08 <HAL_SD_ConfigWideBusOperation+0x130>)
 8011ede:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ee4:	6a3b      	ldr	r3, [r7, #32]
 8011ee6:	431a      	orrs	r2, r3
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8011eec:	2301      	movs	r3, #1
 8011eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	2201      	movs	r2, #1
 8011ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8011efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011efe:	4618      	mov	r0, r3
 8011f00:	3728      	adds	r7, #40	; 0x28
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bdb0      	pop	{r4, r5, r7, pc}
 8011f06:	bf00      	nop
 8011f08:	004005ff 	.word	0x004005ff

08011f0c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b086      	sub	sp, #24
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8011f14:	2300      	movs	r3, #0
 8011f16:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8011f18:	f107 030c 	add.w	r3, r7, #12
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	f000 fa7e 	bl	8012420 <SD_SendStatus>
 8011f24:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011f26:	697b      	ldr	r3, [r7, #20]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d005      	beq.n	8011f38 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f30:	697b      	ldr	r3, [r7, #20]
 8011f32:	431a      	orrs	r2, r3
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	0a5b      	lsrs	r3, r3, #9
 8011f3c:	f003 030f 	and.w	r3, r3, #15
 8011f40:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8011f42:	693b      	ldr	r3, [r7, #16]
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	3718      	adds	r7, #24
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bd80      	pop	{r7, pc}

08011f4c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011f4c:	b480      	push	{r7}
 8011f4e:	b085      	sub	sp, #20
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f58:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011f68:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8011f6a:	bf00      	nop
 8011f6c:	3714      	adds	r7, #20
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f74:	4770      	bx	lr

08011f76 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011f76:	b580      	push	{r7, lr}
 8011f78:	b084      	sub	sp, #16
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f82:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f88:	2b82      	cmp	r3, #130	; 0x82
 8011f8a:	d111      	bne.n	8011fb0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	4618      	mov	r0, r3
 8011f92:	f001 ff17 	bl	8013dc4 <SDMMC_CmdStopTransfer>
 8011f96:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d008      	beq.n	8011fb0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	431a      	orrs	r2, r3
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8011faa:	68f8      	ldr	r0, [r7, #12]
 8011fac:	f7ff fd3a 	bl	8011a24 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	f022 0208 	bic.w	r2, r2, #8
 8011fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	f240 523a 	movw	r2, #1338	; 0x53a
 8011fc8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	2201      	movs	r2, #1
 8011fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8011fd8:	68f8      	ldr	r0, [r7, #12]
 8011fda:	f002 fb87 	bl	80146ec <HAL_SD_RxCpltCallback>
#endif
}
 8011fde:	bf00      	nop
 8011fe0:	3710      	adds	r7, #16
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd80      	pop	{r7, pc}
	...

08011fe8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b086      	sub	sp, #24
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ff4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f7fd fd78 	bl	800faec <HAL_DMA_GetError>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	2b02      	cmp	r3, #2
 8012000:	d03e      	beq.n	8012080 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012008:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 801200a:	697b      	ldr	r3, [r7, #20]
 801200c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012010:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	2b01      	cmp	r3, #1
 8012016:	d002      	beq.n	801201e <SD_DMAError+0x36>
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	2b01      	cmp	r3, #1
 801201c:	d12d      	bne.n	801207a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	4a19      	ldr	r2, [pc, #100]	; (8012088 <SD_DMAError+0xa0>)
 8012024:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8012026:	697b      	ldr	r3, [r7, #20]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801202c:	697b      	ldr	r3, [r7, #20]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8012034:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801203a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801203e:	697b      	ldr	r3, [r7, #20]
 8012040:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8012042:	6978      	ldr	r0, [r7, #20]
 8012044:	f7ff ff62 	bl	8011f0c <HAL_SD_GetCardState>
 8012048:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 801204a:	68bb      	ldr	r3, [r7, #8]
 801204c:	2b06      	cmp	r3, #6
 801204e:	d002      	beq.n	8012056 <SD_DMAError+0x6e>
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	2b05      	cmp	r3, #5
 8012054:	d10a      	bne.n	801206c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8012056:	697b      	ldr	r3, [r7, #20]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	4618      	mov	r0, r3
 801205c:	f001 feb2 	bl	8013dc4 <SDMMC_CmdStopTransfer>
 8012060:	4602      	mov	r2, r0
 8012062:	697b      	ldr	r3, [r7, #20]
 8012064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012066:	431a      	orrs	r2, r3
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	2201      	movs	r2, #1
 8012070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8012074:	697b      	ldr	r3, [r7, #20]
 8012076:	2200      	movs	r2, #0
 8012078:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 801207a:	6978      	ldr	r0, [r7, #20]
 801207c:	f7ff fcd2 	bl	8011a24 <HAL_SD_ErrorCallback>
#endif
  }
}
 8012080:	bf00      	nop
 8012082:	3718      	adds	r7, #24
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}
 8012088:	004005ff 	.word	0x004005ff

0801208c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b084      	sub	sp, #16
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012098:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	f240 523a 	movw	r2, #1338	; 0x53a
 80120a2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80120a4:	68f8      	ldr	r0, [r7, #12]
 80120a6:	f7ff ff31 	bl	8011f0c <HAL_SD_GetCardState>
 80120aa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	2201      	movs	r2, #1
 80120b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	2200      	movs	r2, #0
 80120b8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	2b06      	cmp	r3, #6
 80120be:	d002      	beq.n	80120c6 <SD_DMATxAbort+0x3a>
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	2b05      	cmp	r3, #5
 80120c4:	d10a      	bne.n	80120dc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	4618      	mov	r0, r3
 80120cc:	f001 fe7a 	bl	8013dc4 <SDMMC_CmdStopTransfer>
 80120d0:	4602      	mov	r2, r0
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120d6:	431a      	orrs	r2, r3
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d103      	bne.n	80120ec <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80120e4:	68f8      	ldr	r0, [r7, #12]
 80120e6:	f002 faed 	bl	80146c4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80120ea:	e002      	b.n	80120f2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80120ec:	68f8      	ldr	r0, [r7, #12]
 80120ee:	f7ff fc99 	bl	8011a24 <HAL_SD_ErrorCallback>
}
 80120f2:	bf00      	nop
 80120f4:	3710      	adds	r7, #16
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}

080120fa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80120fa:	b580      	push	{r7, lr}
 80120fc:	b084      	sub	sp, #16
 80120fe:	af00      	add	r7, sp, #0
 8012100:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012106:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	f240 523a 	movw	r2, #1338	; 0x53a
 8012110:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8012112:	68f8      	ldr	r0, [r7, #12]
 8012114:	f7ff fefa 	bl	8011f0c <HAL_SD_GetCardState>
 8012118:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	2201      	movs	r2, #1
 801211e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	2200      	movs	r2, #0
 8012126:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	2b06      	cmp	r3, #6
 801212c:	d002      	beq.n	8012134 <SD_DMARxAbort+0x3a>
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	2b05      	cmp	r3, #5
 8012132:	d10a      	bne.n	801214a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	4618      	mov	r0, r3
 801213a:	f001 fe43 	bl	8013dc4 <SDMMC_CmdStopTransfer>
 801213e:	4602      	mov	r2, r0
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012144:	431a      	orrs	r2, r3
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801214e:	2b00      	cmp	r3, #0
 8012150:	d103      	bne.n	801215a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8012152:	68f8      	ldr	r0, [r7, #12]
 8012154:	f002 fab6 	bl	80146c4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8012158:	e002      	b.n	8012160 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 801215a:	68f8      	ldr	r0, [r7, #12]
 801215c:	f7ff fc62 	bl	8011a24 <HAL_SD_ErrorCallback>
}
 8012160:	bf00      	nop
 8012162:	3710      	adds	r7, #16
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}

08012168 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8012168:	b5b0      	push	{r4, r5, r7, lr}
 801216a:	b094      	sub	sp, #80	; 0x50
 801216c:	af04      	add	r7, sp, #16
 801216e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8012170:	2301      	movs	r3, #1
 8012172:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	4618      	mov	r0, r3
 801217a:	f001 fcf5 	bl	8013b68 <SDIO_GetPowerState>
 801217e:	4603      	mov	r3, r0
 8012180:	2b00      	cmp	r3, #0
 8012182:	d102      	bne.n	801218a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8012184:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8012188:	e0b8      	b.n	80122fc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801218e:	2b03      	cmp	r3, #3
 8012190:	d02f      	beq.n	80121f2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	4618      	mov	r0, r3
 8012198:	f001 ff1e 	bl	8013fd8 <SDMMC_CmdSendCID>
 801219c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801219e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d001      	beq.n	80121a8 <SD_InitCard+0x40>
    {
      return errorstate;
 80121a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121a6:	e0a9      	b.n	80122fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	2100      	movs	r1, #0
 80121ae:	4618      	mov	r0, r3
 80121b0:	f001 fd1f 	bl	8013bf2 <SDIO_GetResponse>
 80121b4:	4602      	mov	r2, r0
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	2104      	movs	r1, #4
 80121c0:	4618      	mov	r0, r3
 80121c2:	f001 fd16 	bl	8013bf2 <SDIO_GetResponse>
 80121c6:	4602      	mov	r2, r0
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	2108      	movs	r1, #8
 80121d2:	4618      	mov	r0, r3
 80121d4:	f001 fd0d 	bl	8013bf2 <SDIO_GetResponse>
 80121d8:	4602      	mov	r2, r0
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	210c      	movs	r1, #12
 80121e4:	4618      	mov	r0, r3
 80121e6:	f001 fd04 	bl	8013bf2 <SDIO_GetResponse>
 80121ea:	4602      	mov	r2, r0
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121f6:	2b03      	cmp	r3, #3
 80121f8:	d00d      	beq.n	8012216 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	f107 020e 	add.w	r2, r7, #14
 8012202:	4611      	mov	r1, r2
 8012204:	4618      	mov	r0, r3
 8012206:	f001 ff24 	bl	8014052 <SDMMC_CmdSetRelAdd>
 801220a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801220c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801220e:	2b00      	cmp	r3, #0
 8012210:	d001      	beq.n	8012216 <SD_InitCard+0xae>
    {
      return errorstate;
 8012212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012214:	e072      	b.n	80122fc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801221a:	2b03      	cmp	r3, #3
 801221c:	d036      	beq.n	801228c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801221e:	89fb      	ldrh	r3, [r7, #14]
 8012220:	461a      	mov	r2, r3
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681a      	ldr	r2, [r3, #0]
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801222e:	041b      	lsls	r3, r3, #16
 8012230:	4619      	mov	r1, r3
 8012232:	4610      	mov	r0, r2
 8012234:	f001 feee 	bl	8014014 <SDMMC_CmdSendCSD>
 8012238:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801223a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801223c:	2b00      	cmp	r3, #0
 801223e:	d001      	beq.n	8012244 <SD_InitCard+0xdc>
    {
      return errorstate;
 8012240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012242:	e05b      	b.n	80122fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	2100      	movs	r1, #0
 801224a:	4618      	mov	r0, r3
 801224c:	f001 fcd1 	bl	8013bf2 <SDIO_GetResponse>
 8012250:	4602      	mov	r2, r0
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	2104      	movs	r1, #4
 801225c:	4618      	mov	r0, r3
 801225e:	f001 fcc8 	bl	8013bf2 <SDIO_GetResponse>
 8012262:	4602      	mov	r2, r0
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	2108      	movs	r1, #8
 801226e:	4618      	mov	r0, r3
 8012270:	f001 fcbf 	bl	8013bf2 <SDIO_GetResponse>
 8012274:	4602      	mov	r2, r0
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	210c      	movs	r1, #12
 8012280:	4618      	mov	r0, r3
 8012282:	f001 fcb6 	bl	8013bf2 <SDIO_GetResponse>
 8012286:	4602      	mov	r2, r0
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	2104      	movs	r1, #4
 8012292:	4618      	mov	r0, r3
 8012294:	f001 fcad 	bl	8013bf2 <SDIO_GetResponse>
 8012298:	4603      	mov	r3, r0
 801229a:	0d1a      	lsrs	r2, r3, #20
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80122a0:	f107 0310 	add.w	r3, r7, #16
 80122a4:	4619      	mov	r1, r3
 80122a6:	6878      	ldr	r0, [r7, #4]
 80122a8:	f7ff fbc6 	bl	8011a38 <HAL_SD_GetCardCSD>
 80122ac:	4603      	mov	r3, r0
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d002      	beq.n	80122b8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80122b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80122b6:	e021      	b.n	80122fc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	6819      	ldr	r1, [r3, #0]
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122c0:	041b      	lsls	r3, r3, #16
 80122c2:	2200      	movs	r2, #0
 80122c4:	461c      	mov	r4, r3
 80122c6:	4615      	mov	r5, r2
 80122c8:	4622      	mov	r2, r4
 80122ca:	462b      	mov	r3, r5
 80122cc:	4608      	mov	r0, r1
 80122ce:	f001 fd9b 	bl	8013e08 <SDMMC_CmdSelDesel>
 80122d2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80122d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d001      	beq.n	80122de <SD_InitCard+0x176>
  {
    return errorstate;
 80122da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122dc:	e00e      	b.n	80122fc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681d      	ldr	r5, [r3, #0]
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	466c      	mov	r4, sp
 80122e6:	f103 0210 	add.w	r2, r3, #16
 80122ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80122ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80122f0:	3304      	adds	r3, #4
 80122f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80122f4:	4628      	mov	r0, r5
 80122f6:	f001 fbdf 	bl	8013ab8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80122fa:	2300      	movs	r3, #0
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	3740      	adds	r7, #64	; 0x40
 8012300:	46bd      	mov	sp, r7
 8012302:	bdb0      	pop	{r4, r5, r7, pc}

08012304 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b086      	sub	sp, #24
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801230c:	2300      	movs	r3, #0
 801230e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8012310:	2300      	movs	r3, #0
 8012312:	617b      	str	r3, [r7, #20]
 8012314:	2300      	movs	r3, #0
 8012316:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	4618      	mov	r0, r3
 801231e:	f001 fd96 	bl	8013e4e <SDMMC_CmdGoIdleState>
 8012322:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d001      	beq.n	801232e <SD_PowerON+0x2a>
  {
    return errorstate;
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	e072      	b.n	8012414 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	4618      	mov	r0, r3
 8012334:	f001 fda9 	bl	8013e8a <SDMMC_CmdOperCond>
 8012338:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d00d      	beq.n	801235c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2200      	movs	r2, #0
 8012344:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	4618      	mov	r0, r3
 801234c:	f001 fd7f 	bl	8013e4e <SDMMC_CmdGoIdleState>
 8012350:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d004      	beq.n	8012362 <SD_PowerON+0x5e>
    {
      return errorstate;
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	e05b      	b.n	8012414 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2201      	movs	r2, #1
 8012360:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012366:	2b01      	cmp	r3, #1
 8012368:	d137      	bne.n	80123da <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	2100      	movs	r1, #0
 8012370:	4618      	mov	r0, r3
 8012372:	f001 fda9 	bl	8013ec8 <SDMMC_CmdAppCommand>
 8012376:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d02d      	beq.n	80123da <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801237e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012382:	e047      	b.n	8012414 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	2100      	movs	r1, #0
 801238a:	4618      	mov	r0, r3
 801238c:	f001 fd9c 	bl	8013ec8 <SDMMC_CmdAppCommand>
 8012390:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d001      	beq.n	801239c <SD_PowerON+0x98>
    {
      return errorstate;
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	e03b      	b.n	8012414 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	491e      	ldr	r1, [pc, #120]	; (801241c <SD_PowerON+0x118>)
 80123a2:	4618      	mov	r0, r3
 80123a4:	f001 fdb2 	bl	8013f0c <SDMMC_CmdAppOperCommand>
 80123a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d002      	beq.n	80123b6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80123b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80123b4:	e02e      	b.n	8012414 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	2100      	movs	r1, #0
 80123bc:	4618      	mov	r0, r3
 80123be:	f001 fc18 	bl	8013bf2 <SDIO_GetResponse>
 80123c2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	0fdb      	lsrs	r3, r3, #31
 80123c8:	2b01      	cmp	r3, #1
 80123ca:	d101      	bne.n	80123d0 <SD_PowerON+0xcc>
 80123cc:	2301      	movs	r3, #1
 80123ce:	e000      	b.n	80123d2 <SD_PowerON+0xce>
 80123d0:	2300      	movs	r3, #0
 80123d2:	613b      	str	r3, [r7, #16]

    count++;
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	3301      	adds	r3, #1
 80123d8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80123e0:	4293      	cmp	r3, r2
 80123e2:	d802      	bhi.n	80123ea <SD_PowerON+0xe6>
 80123e4:	693b      	ldr	r3, [r7, #16]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d0cc      	beq.n	8012384 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80123f0:	4293      	cmp	r3, r2
 80123f2:	d902      	bls.n	80123fa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80123f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80123f8:	e00c      	b.n	8012414 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012400:	2b00      	cmp	r3, #0
 8012402:	d003      	beq.n	801240c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2201      	movs	r2, #1
 8012408:	645a      	str	r2, [r3, #68]	; 0x44
 801240a:	e002      	b.n	8012412 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2200      	movs	r2, #0
 8012410:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8012412:	2300      	movs	r3, #0
}
 8012414:	4618      	mov	r0, r3
 8012416:	3718      	adds	r7, #24
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}
 801241c:	c1100000 	.word	0xc1100000

08012420 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b084      	sub	sp, #16
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
 8012428:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d102      	bne.n	8012436 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8012430:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012434:	e018      	b.n	8012468 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681a      	ldr	r2, [r3, #0]
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801243e:	041b      	lsls	r3, r3, #16
 8012440:	4619      	mov	r1, r3
 8012442:	4610      	mov	r0, r2
 8012444:	f001 fe26 	bl	8014094 <SDMMC_CmdSendStatus>
 8012448:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d001      	beq.n	8012454 <SD_SendStatus+0x34>
  {
    return errorstate;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	e009      	b.n	8012468 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	2100      	movs	r1, #0
 801245a:	4618      	mov	r0, r3
 801245c:	f001 fbc9 	bl	8013bf2 <SDIO_GetResponse>
 8012460:	4602      	mov	r2, r0
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8012466:	2300      	movs	r3, #0
}
 8012468:	4618      	mov	r0, r3
 801246a:	3710      	adds	r7, #16
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}

08012470 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b086      	sub	sp, #24
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8012478:	2300      	movs	r3, #0
 801247a:	60fb      	str	r3, [r7, #12]
 801247c:	2300      	movs	r3, #0
 801247e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	2100      	movs	r1, #0
 8012486:	4618      	mov	r0, r3
 8012488:	f001 fbb3 	bl	8013bf2 <SDIO_GetResponse>
 801248c:	4603      	mov	r3, r0
 801248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012496:	d102      	bne.n	801249e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8012498:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801249c:	e02f      	b.n	80124fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801249e:	f107 030c 	add.w	r3, r7, #12
 80124a2:	4619      	mov	r1, r3
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f000 f879 	bl	801259c <SD_FindSCR>
 80124aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80124ac:	697b      	ldr	r3, [r7, #20]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d001      	beq.n	80124b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	e023      	b.n	80124fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d01c      	beq.n	80124fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681a      	ldr	r2, [r3, #0]
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124c8:	041b      	lsls	r3, r3, #16
 80124ca:	4619      	mov	r1, r3
 80124cc:	4610      	mov	r0, r2
 80124ce:	f001 fcfb 	bl	8013ec8 <SDMMC_CmdAppCommand>
 80124d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80124d4:	697b      	ldr	r3, [r7, #20]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d001      	beq.n	80124de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	e00f      	b.n	80124fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	2102      	movs	r1, #2
 80124e4:	4618      	mov	r0, r3
 80124e6:	f001 fd34 	bl	8013f52 <SDMMC_CmdBusWidth>
 80124ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d001      	beq.n	80124f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	e003      	b.n	80124fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80124f6:	2300      	movs	r3, #0
 80124f8:	e001      	b.n	80124fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80124fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80124fe:	4618      	mov	r0, r3
 8012500:	3718      	adds	r7, #24
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}

08012506 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8012506:	b580      	push	{r7, lr}
 8012508:	b086      	sub	sp, #24
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 801250e:	2300      	movs	r3, #0
 8012510:	60fb      	str	r3, [r7, #12]
 8012512:	2300      	movs	r3, #0
 8012514:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	2100      	movs	r1, #0
 801251c:	4618      	mov	r0, r3
 801251e:	f001 fb68 	bl	8013bf2 <SDIO_GetResponse>
 8012522:	4603      	mov	r3, r0
 8012524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012528:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801252c:	d102      	bne.n	8012534 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801252e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012532:	e02f      	b.n	8012594 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8012534:	f107 030c 	add.w	r3, r7, #12
 8012538:	4619      	mov	r1, r3
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f000 f82e 	bl	801259c <SD_FindSCR>
 8012540:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d001      	beq.n	801254c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	e023      	b.n	8012594 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012552:	2b00      	cmp	r3, #0
 8012554:	d01c      	beq.n	8012590 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681a      	ldr	r2, [r3, #0]
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801255e:	041b      	lsls	r3, r3, #16
 8012560:	4619      	mov	r1, r3
 8012562:	4610      	mov	r0, r2
 8012564:	f001 fcb0 	bl	8013ec8 <SDMMC_CmdAppCommand>
 8012568:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d001      	beq.n	8012574 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	e00f      	b.n	8012594 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	2100      	movs	r1, #0
 801257a:	4618      	mov	r0, r3
 801257c:	f001 fce9 	bl	8013f52 <SDMMC_CmdBusWidth>
 8012580:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d001      	beq.n	801258c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8012588:	697b      	ldr	r3, [r7, #20]
 801258a:	e003      	b.n	8012594 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801258c:	2300      	movs	r3, #0
 801258e:	e001      	b.n	8012594 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8012590:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8012594:	4618      	mov	r0, r3
 8012596:	3718      	adds	r7, #24
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}

0801259c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 801259c:	b590      	push	{r4, r7, lr}
 801259e:	b08f      	sub	sp, #60	; 0x3c
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80125a6:	f7fc fbdb 	bl	800ed60 <HAL_GetTick>
 80125aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80125ac:	2300      	movs	r3, #0
 80125ae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80125b0:	2300      	movs	r3, #0
 80125b2:	60bb      	str	r3, [r7, #8]
 80125b4:	2300      	movs	r3, #0
 80125b6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	2108      	movs	r1, #8
 80125c2:	4618      	mov	r0, r3
 80125c4:	f001 fb54 	bl	8013c70 <SDMMC_CmdBlockLength>
 80125c8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80125ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d001      	beq.n	80125d4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80125d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d2:	e0b2      	b.n	801273a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681a      	ldr	r2, [r3, #0]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125dc:	041b      	lsls	r3, r3, #16
 80125de:	4619      	mov	r1, r3
 80125e0:	4610      	mov	r0, r2
 80125e2:	f001 fc71 	bl	8013ec8 <SDMMC_CmdAppCommand>
 80125e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80125e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d001      	beq.n	80125f2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80125ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125f0:	e0a3      	b.n	801273a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80125f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125f6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80125f8:	2308      	movs	r3, #8
 80125fa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80125fc:	2330      	movs	r3, #48	; 0x30
 80125fe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8012600:	2302      	movs	r3, #2
 8012602:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8012604:	2300      	movs	r3, #0
 8012606:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8012608:	2301      	movs	r3, #1
 801260a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	f107 0210 	add.w	r2, r7, #16
 8012614:	4611      	mov	r1, r2
 8012616:	4618      	mov	r0, r3
 8012618:	f001 fafe 	bl	8013c18 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	4618      	mov	r0, r3
 8012622:	f001 fcb8 	bl	8013f96 <SDMMC_CmdSendSCR>
 8012626:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8012628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801262a:	2b00      	cmp	r3, #0
 801262c:	d02a      	beq.n	8012684 <SD_FindSCR+0xe8>
  {
    return errorstate;
 801262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012630:	e083      	b.n	801273a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801263c:	2b00      	cmp	r3, #0
 801263e:	d00f      	beq.n	8012660 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6819      	ldr	r1, [r3, #0]
 8012644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012646:	009b      	lsls	r3, r3, #2
 8012648:	f107 0208 	add.w	r2, r7, #8
 801264c:	18d4      	adds	r4, r2, r3
 801264e:	4608      	mov	r0, r1
 8012650:	f001 fa5d 	bl	8013b0e <SDIO_ReadFIFO>
 8012654:	4603      	mov	r3, r0
 8012656:	6023      	str	r3, [r4, #0]
      index++;
 8012658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801265a:	3301      	adds	r3, #1
 801265c:	637b      	str	r3, [r7, #52]	; 0x34
 801265e:	e006      	b.n	801266e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801266a:	2b00      	cmp	r3, #0
 801266c:	d012      	beq.n	8012694 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801266e:	f7fc fb77 	bl	800ed60 <HAL_GetTick>
 8012672:	4602      	mov	r2, r0
 8012674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012676:	1ad3      	subs	r3, r2, r3
 8012678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801267c:	d102      	bne.n	8012684 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801267e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012682:	e05a      	b.n	801273a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801268a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 801268e:	2b00      	cmp	r3, #0
 8012690:	d0cf      	beq.n	8012632 <SD_FindSCR+0x96>
 8012692:	e000      	b.n	8012696 <SD_FindSCR+0xfa>
      break;
 8012694:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801269c:	f003 0308 	and.w	r3, r3, #8
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d005      	beq.n	80126b0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	2208      	movs	r2, #8
 80126aa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80126ac:	2308      	movs	r3, #8
 80126ae:	e044      	b.n	801273a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126b6:	f003 0302 	and.w	r3, r3, #2
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d005      	beq.n	80126ca <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	2202      	movs	r2, #2
 80126c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80126c6:	2302      	movs	r3, #2
 80126c8:	e037      	b.n	801273a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126d0:	f003 0320 	and.w	r3, r3, #32
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d005      	beq.n	80126e4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	2220      	movs	r2, #32
 80126de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80126e0:	2320      	movs	r3, #32
 80126e2:	e02a      	b.n	801273a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	f240 523a 	movw	r2, #1338	; 0x53a
 80126ec:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	061a      	lsls	r2, r3, #24
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	021b      	lsls	r3, r3, #8
 80126f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80126fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	0a1b      	lsrs	r3, r3, #8
 8012700:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8012704:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	0e1b      	lsrs	r3, r3, #24
 801270a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801270e:	601a      	str	r2, [r3, #0]
    scr++;
 8012710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012712:	3304      	adds	r3, #4
 8012714:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8012716:	68bb      	ldr	r3, [r7, #8]
 8012718:	061a      	lsls	r2, r3, #24
 801271a:	68bb      	ldr	r3, [r7, #8]
 801271c:	021b      	lsls	r3, r3, #8
 801271e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012722:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	0a1b      	lsrs	r3, r3, #8
 8012728:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801272c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801272e:	68bb      	ldr	r3, [r7, #8]
 8012730:	0e1b      	lsrs	r3, r3, #24
 8012732:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8012734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012736:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8012738:	2300      	movs	r3, #0
}
 801273a:	4618      	mov	r0, r3
 801273c:	373c      	adds	r7, #60	; 0x3c
 801273e:	46bd      	mov	sp, r7
 8012740:	bd90      	pop	{r4, r7, pc}

08012742 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8012742:	b580      	push	{r7, lr}
 8012744:	b086      	sub	sp, #24
 8012746:	af00      	add	r7, sp, #0
 8012748:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801274e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012754:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8012756:	693b      	ldr	r3, [r7, #16]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d03f      	beq.n	80127dc <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 801275c:	2300      	movs	r3, #0
 801275e:	617b      	str	r3, [r7, #20]
 8012760:	e033      	b.n	80127ca <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	4618      	mov	r0, r3
 8012768:	f001 f9d1 	bl	8013b0e <SDIO_ReadFIFO>
 801276c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	b2da      	uxtb	r2, r3
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	701a      	strb	r2, [r3, #0]
      tmp++;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	3301      	adds	r3, #1
 801277a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801277c:	693b      	ldr	r3, [r7, #16]
 801277e:	3b01      	subs	r3, #1
 8012780:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8012782:	68bb      	ldr	r3, [r7, #8]
 8012784:	0a1b      	lsrs	r3, r3, #8
 8012786:	b2da      	uxtb	r2, r3
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	3301      	adds	r3, #1
 8012790:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	3b01      	subs	r3, #1
 8012796:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8012798:	68bb      	ldr	r3, [r7, #8]
 801279a:	0c1b      	lsrs	r3, r3, #16
 801279c:	b2da      	uxtb	r2, r3
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	3301      	adds	r3, #1
 80127a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80127a8:	693b      	ldr	r3, [r7, #16]
 80127aa:	3b01      	subs	r3, #1
 80127ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80127ae:	68bb      	ldr	r3, [r7, #8]
 80127b0:	0e1b      	lsrs	r3, r3, #24
 80127b2:	b2da      	uxtb	r2, r3
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	3301      	adds	r3, #1
 80127bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80127be:	693b      	ldr	r3, [r7, #16]
 80127c0:	3b01      	subs	r3, #1
 80127c2:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	3301      	adds	r3, #1
 80127c8:	617b      	str	r3, [r7, #20]
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	2b07      	cmp	r3, #7
 80127ce:	d9c8      	bls.n	8012762 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	68fa      	ldr	r2, [r7, #12]
 80127d4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	693a      	ldr	r2, [r7, #16]
 80127da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80127dc:	bf00      	nop
 80127de:	3718      	adds	r7, #24
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bd80      	pop	{r7, pc}

080127e4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b086      	sub	sp, #24
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	6a1b      	ldr	r3, [r3, #32]
 80127f0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127f6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d043      	beq.n	8012886 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80127fe:	2300      	movs	r3, #0
 8012800:	617b      	str	r3, [r7, #20]
 8012802:	e037      	b.n	8012874 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	60bb      	str	r3, [r7, #8]
      tmp++;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	3301      	adds	r3, #1
 801280e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8012810:	693b      	ldr	r3, [r7, #16]
 8012812:	3b01      	subs	r3, #1
 8012814:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	021a      	lsls	r2, r3, #8
 801281c:	68bb      	ldr	r3, [r7, #8]
 801281e:	4313      	orrs	r3, r2
 8012820:	60bb      	str	r3, [r7, #8]
      tmp++;
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	3301      	adds	r3, #1
 8012826:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8012828:	693b      	ldr	r3, [r7, #16]
 801282a:	3b01      	subs	r3, #1
 801282c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	781b      	ldrb	r3, [r3, #0]
 8012832:	041a      	lsls	r2, r3, #16
 8012834:	68bb      	ldr	r3, [r7, #8]
 8012836:	4313      	orrs	r3, r2
 8012838:	60bb      	str	r3, [r7, #8]
      tmp++;
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	3301      	adds	r3, #1
 801283e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8012840:	693b      	ldr	r3, [r7, #16]
 8012842:	3b01      	subs	r3, #1
 8012844:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	061a      	lsls	r2, r3, #24
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	4313      	orrs	r3, r2
 8012850:	60bb      	str	r3, [r7, #8]
      tmp++;
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	3301      	adds	r3, #1
 8012856:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8012858:	693b      	ldr	r3, [r7, #16]
 801285a:	3b01      	subs	r3, #1
 801285c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	f107 0208 	add.w	r2, r7, #8
 8012866:	4611      	mov	r1, r2
 8012868:	4618      	mov	r0, r3
 801286a:	f001 f95d 	bl	8013b28 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 801286e:	697b      	ldr	r3, [r7, #20]
 8012870:	3301      	adds	r3, #1
 8012872:	617b      	str	r3, [r7, #20]
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	2b07      	cmp	r3, #7
 8012878:	d9c4      	bls.n	8012804 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	68fa      	ldr	r2, [r7, #12]
 801287e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	693a      	ldr	r2, [r7, #16]
 8012884:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8012886:	bf00      	nop
 8012888:	3718      	adds	r7, #24
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}

0801288e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801288e:	b580      	push	{r7, lr}
 8012890:	b082      	sub	sp, #8
 8012892:	af00      	add	r7, sp, #0
 8012894:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d101      	bne.n	80128a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801289c:	2301      	movs	r3, #1
 801289e:	e03f      	b.n	8012920 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d106      	bne.n	80128ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2200      	movs	r2, #0
 80128b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f7fb ffaf 	bl	800e818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2224      	movs	r2, #36	; 0x24
 80128be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	68da      	ldr	r2, [r3, #12]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80128d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	f000 fe7c 	bl	80135d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	691a      	ldr	r2, [r3, #16]
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80128e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	695a      	ldr	r2, [r3, #20]
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80128f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	68da      	ldr	r2, [r3, #12]
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012906:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2200      	movs	r2, #0
 801290c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	2220      	movs	r2, #32
 8012912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2220      	movs	r2, #32
 801291a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801291e:	2300      	movs	r3, #0
}
 8012920:	4618      	mov	r0, r3
 8012922:	3708      	adds	r7, #8
 8012924:	46bd      	mov	sp, r7
 8012926:	bd80      	pop	{r7, pc}

08012928 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b08a      	sub	sp, #40	; 0x28
 801292c:	af02      	add	r7, sp, #8
 801292e:	60f8      	str	r0, [r7, #12]
 8012930:	60b9      	str	r1, [r7, #8]
 8012932:	603b      	str	r3, [r7, #0]
 8012934:	4613      	mov	r3, r2
 8012936:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8012938:	2300      	movs	r3, #0
 801293a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012942:	b2db      	uxtb	r3, r3
 8012944:	2b20      	cmp	r3, #32
 8012946:	d17c      	bne.n	8012a42 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8012948:	68bb      	ldr	r3, [r7, #8]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d002      	beq.n	8012954 <HAL_UART_Transmit+0x2c>
 801294e:	88fb      	ldrh	r3, [r7, #6]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d101      	bne.n	8012958 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8012954:	2301      	movs	r3, #1
 8012956:	e075      	b.n	8012a44 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801295e:	2b01      	cmp	r3, #1
 8012960:	d101      	bne.n	8012966 <HAL_UART_Transmit+0x3e>
 8012962:	2302      	movs	r3, #2
 8012964:	e06e      	b.n	8012a44 <HAL_UART_Transmit+0x11c>
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2201      	movs	r2, #1
 801296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	2200      	movs	r2, #0
 8012972:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	2221      	movs	r2, #33	; 0x21
 8012978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801297c:	f7fc f9f0 	bl	800ed60 <HAL_GetTick>
 8012980:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	88fa      	ldrh	r2, [r7, #6]
 8012986:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	88fa      	ldrh	r2, [r7, #6]
 801298c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	689b      	ldr	r3, [r3, #8]
 8012992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012996:	d108      	bne.n	80129aa <HAL_UART_Transmit+0x82>
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	691b      	ldr	r3, [r3, #16]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d104      	bne.n	80129aa <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80129a0:	2300      	movs	r3, #0
 80129a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	61bb      	str	r3, [r7, #24]
 80129a8:	e003      	b.n	80129b2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80129ae:	2300      	movs	r3, #0
 80129b0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	2200      	movs	r2, #0
 80129b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80129ba:	e02a      	b.n	8012a12 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	9300      	str	r3, [sp, #0]
 80129c0:	697b      	ldr	r3, [r7, #20]
 80129c2:	2200      	movs	r2, #0
 80129c4:	2180      	movs	r1, #128	; 0x80
 80129c6:	68f8      	ldr	r0, [r7, #12]
 80129c8:	f000 fbc0 	bl	801314c <UART_WaitOnFlagUntilTimeout>
 80129cc:	4603      	mov	r3, r0
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d001      	beq.n	80129d6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80129d2:	2303      	movs	r3, #3
 80129d4:	e036      	b.n	8012a44 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80129d6:	69fb      	ldr	r3, [r7, #28]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d10b      	bne.n	80129f4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80129dc:	69bb      	ldr	r3, [r7, #24]
 80129de:	881b      	ldrh	r3, [r3, #0]
 80129e0:	461a      	mov	r2, r3
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80129ea:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80129ec:	69bb      	ldr	r3, [r7, #24]
 80129ee:	3302      	adds	r3, #2
 80129f0:	61bb      	str	r3, [r7, #24]
 80129f2:	e007      	b.n	8012a04 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80129f4:	69fb      	ldr	r3, [r7, #28]
 80129f6:	781a      	ldrb	r2, [r3, #0]
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80129fe:	69fb      	ldr	r3, [r7, #28]
 8012a00:	3301      	adds	r3, #1
 8012a02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012a08:	b29b      	uxth	r3, r3
 8012a0a:	3b01      	subs	r3, #1
 8012a0c:	b29a      	uxth	r2, r3
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012a16:	b29b      	uxth	r3, r3
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d1cf      	bne.n	80129bc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	9300      	str	r3, [sp, #0]
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	2200      	movs	r2, #0
 8012a24:	2140      	movs	r1, #64	; 0x40
 8012a26:	68f8      	ldr	r0, [r7, #12]
 8012a28:	f000 fb90 	bl	801314c <UART_WaitOnFlagUntilTimeout>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d001      	beq.n	8012a36 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8012a32:	2303      	movs	r3, #3
 8012a34:	e006      	b.n	8012a44 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	2220      	movs	r2, #32
 8012a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	e000      	b.n	8012a44 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8012a42:	2302      	movs	r3, #2
  }
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	3720      	adds	r7, #32
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}

08012a4c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b08a      	sub	sp, #40	; 0x28
 8012a50:	af02      	add	r7, sp, #8
 8012a52:	60f8      	str	r0, [r7, #12]
 8012a54:	60b9      	str	r1, [r7, #8]
 8012a56:	603b      	str	r3, [r7, #0]
 8012a58:	4613      	mov	r3, r2
 8012a5a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	2b20      	cmp	r3, #32
 8012a6a:	f040 808c 	bne.w	8012b86 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d002      	beq.n	8012a7a <HAL_UART_Receive+0x2e>
 8012a74:	88fb      	ldrh	r3, [r7, #6]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d101      	bne.n	8012a7e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	e084      	b.n	8012b88 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012a84:	2b01      	cmp	r3, #1
 8012a86:	d101      	bne.n	8012a8c <HAL_UART_Receive+0x40>
 8012a88:	2302      	movs	r3, #2
 8012a8a:	e07d      	b.n	8012b88 <HAL_UART_Receive+0x13c>
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	2201      	movs	r2, #1
 8012a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	2200      	movs	r2, #0
 8012a98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	2222      	movs	r2, #34	; 0x22
 8012a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012aa8:	f7fc f95a 	bl	800ed60 <HAL_GetTick>
 8012aac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	88fa      	ldrh	r2, [r7, #6]
 8012ab2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	88fa      	ldrh	r2, [r7, #6]
 8012ab8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	689b      	ldr	r3, [r3, #8]
 8012abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012ac2:	d108      	bne.n	8012ad6 <HAL_UART_Receive+0x8a>
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	691b      	ldr	r3, [r3, #16]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d104      	bne.n	8012ad6 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8012acc:	2300      	movs	r3, #0
 8012ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	61bb      	str	r3, [r7, #24]
 8012ad4:	e003      	b.n	8012ade <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012ada:	2300      	movs	r3, #0
 8012adc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8012ae6:	e043      	b.n	8012b70 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	9300      	str	r3, [sp, #0]
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	2200      	movs	r2, #0
 8012af0:	2120      	movs	r1, #32
 8012af2:	68f8      	ldr	r0, [r7, #12]
 8012af4:	f000 fb2a 	bl	801314c <UART_WaitOnFlagUntilTimeout>
 8012af8:	4603      	mov	r3, r0
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d001      	beq.n	8012b02 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8012afe:	2303      	movs	r3, #3
 8012b00:	e042      	b.n	8012b88 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8012b02:	69fb      	ldr	r3, [r7, #28]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d10c      	bne.n	8012b22 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	b29b      	uxth	r3, r3
 8012b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b14:	b29a      	uxth	r2, r3
 8012b16:	69bb      	ldr	r3, [r7, #24]
 8012b18:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8012b1a:	69bb      	ldr	r3, [r7, #24]
 8012b1c:	3302      	adds	r3, #2
 8012b1e:	61bb      	str	r3, [r7, #24]
 8012b20:	e01f      	b.n	8012b62 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	689b      	ldr	r3, [r3, #8]
 8012b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012b2a:	d007      	beq.n	8012b3c <HAL_UART_Receive+0xf0>
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	689b      	ldr	r3, [r3, #8]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d10a      	bne.n	8012b4a <HAL_UART_Receive+0xfe>
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	691b      	ldr	r3, [r3, #16]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d106      	bne.n	8012b4a <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	685b      	ldr	r3, [r3, #4]
 8012b42:	b2da      	uxtb	r2, r3
 8012b44:	69fb      	ldr	r3, [r7, #28]
 8012b46:	701a      	strb	r2, [r3, #0]
 8012b48:	e008      	b.n	8012b5c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	b2db      	uxtb	r3, r3
 8012b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b56:	b2da      	uxtb	r2, r3
 8012b58:	69fb      	ldr	r3, [r7, #28]
 8012b5a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8012b5c:	69fb      	ldr	r3, [r7, #28]
 8012b5e:	3301      	adds	r3, #1
 8012b60:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	3b01      	subs	r3, #1
 8012b6a:	b29a      	uxth	r2, r3
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012b74:	b29b      	uxth	r3, r3
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d1b6      	bne.n	8012ae8 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	2220      	movs	r2, #32
 8012b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8012b82:	2300      	movs	r3, #0
 8012b84:	e000      	b.n	8012b88 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8012b86:	2302      	movs	r3, #2
  }
}
 8012b88:	4618      	mov	r0, r3
 8012b8a:	3720      	adds	r7, #32
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd80      	pop	{r7, pc}

08012b90 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b084      	sub	sp, #16
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	60f8      	str	r0, [r7, #12]
 8012b98:	60b9      	str	r1, [r7, #8]
 8012b9a:	4613      	mov	r3, r2
 8012b9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012ba4:	b2db      	uxtb	r3, r3
 8012ba6:	2b20      	cmp	r3, #32
 8012ba8:	d11d      	bne.n	8012be6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d002      	beq.n	8012bb6 <HAL_UART_Receive_IT+0x26>
 8012bb0:	88fb      	ldrh	r3, [r7, #6]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d101      	bne.n	8012bba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	e016      	b.n	8012be8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012bc0:	2b01      	cmp	r3, #1
 8012bc2:	d101      	bne.n	8012bc8 <HAL_UART_Receive_IT+0x38>
 8012bc4:	2302      	movs	r3, #2
 8012bc6:	e00f      	b.n	8012be8 <HAL_UART_Receive_IT+0x58>
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	2201      	movs	r2, #1
 8012bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8012bd6:	88fb      	ldrh	r3, [r7, #6]
 8012bd8:	461a      	mov	r2, r3
 8012bda:	68b9      	ldr	r1, [r7, #8]
 8012bdc:	68f8      	ldr	r0, [r7, #12]
 8012bde:	f000 fb23 	bl	8013228 <UART_Start_Receive_IT>
 8012be2:	4603      	mov	r3, r0
 8012be4:	e000      	b.n	8012be8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8012be6:	2302      	movs	r3, #2
  }
}
 8012be8:	4618      	mov	r0, r3
 8012bea:	3710      	adds	r7, #16
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bd80      	pop	{r7, pc}

08012bf0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b0ba      	sub	sp, #232	; 0xe8
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	68db      	ldr	r3, [r3, #12]
 8012c08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	695b      	ldr	r3, [r3, #20]
 8012c12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8012c16:	2300      	movs	r3, #0
 8012c18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8012c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c26:	f003 030f 	and.w	r3, r3, #15
 8012c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8012c2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d10f      	bne.n	8012c56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c3a:	f003 0320 	and.w	r3, r3, #32
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d009      	beq.n	8012c56 <HAL_UART_IRQHandler+0x66>
 8012c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c46:	f003 0320 	and.w	r3, r3, #32
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d003      	beq.n	8012c56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8012c4e:	6878      	ldr	r0, [r7, #4]
 8012c50:	f000 fc03 	bl	801345a <UART_Receive_IT>
      return;
 8012c54:	e256      	b.n	8013104 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8012c56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	f000 80de 	beq.w	8012e1c <HAL_UART_IRQHandler+0x22c>
 8012c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012c64:	f003 0301 	and.w	r3, r3, #1
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d106      	bne.n	8012c7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8012c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	f000 80d1 	beq.w	8012e1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8012c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c7e:	f003 0301 	and.w	r3, r3, #1
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d00b      	beq.n	8012c9e <HAL_UART_IRQHandler+0xae>
 8012c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d005      	beq.n	8012c9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c96:	f043 0201 	orr.w	r2, r3, #1
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012ca2:	f003 0304 	and.w	r3, r3, #4
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d00b      	beq.n	8012cc2 <HAL_UART_IRQHandler+0xd2>
 8012caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012cae:	f003 0301 	and.w	r3, r3, #1
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d005      	beq.n	8012cc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cba:	f043 0202 	orr.w	r2, r3, #2
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012cc6:	f003 0302 	and.w	r3, r3, #2
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d00b      	beq.n	8012ce6 <HAL_UART_IRQHandler+0xf6>
 8012cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012cd2:	f003 0301 	and.w	r3, r3, #1
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d005      	beq.n	8012ce6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cde:	f043 0204 	orr.w	r2, r3, #4
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8012ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012cea:	f003 0308 	and.w	r3, r3, #8
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d011      	beq.n	8012d16 <HAL_UART_IRQHandler+0x126>
 8012cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012cf6:	f003 0320 	and.w	r3, r3, #32
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d105      	bne.n	8012d0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8012cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012d02:	f003 0301 	and.w	r3, r3, #1
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d005      	beq.n	8012d16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d0e:	f043 0208 	orr.w	r2, r3, #8
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	f000 81ed 	beq.w	80130fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012d24:	f003 0320 	and.w	r3, r3, #32
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d008      	beq.n	8012d3e <HAL_UART_IRQHandler+0x14e>
 8012d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012d30:	f003 0320 	and.w	r3, r3, #32
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d002      	beq.n	8012d3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	f000 fb8e 	bl	801345a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	695b      	ldr	r3, [r3, #20]
 8012d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d48:	2b40      	cmp	r3, #64	; 0x40
 8012d4a:	bf0c      	ite	eq
 8012d4c:	2301      	moveq	r3, #1
 8012d4e:	2300      	movne	r3, #0
 8012d50:	b2db      	uxtb	r3, r3
 8012d52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d5a:	f003 0308 	and.w	r3, r3, #8
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d103      	bne.n	8012d6a <HAL_UART_IRQHandler+0x17a>
 8012d62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d04f      	beq.n	8012e0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f000 fa96 	bl	801329c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	695b      	ldr	r3, [r3, #20]
 8012d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d7a:	2b40      	cmp	r3, #64	; 0x40
 8012d7c:	d141      	bne.n	8012e02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	3314      	adds	r3, #20
 8012d84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012d8c:	e853 3f00 	ldrex	r3, [r3]
 8012d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8012d94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	3314      	adds	r3, #20
 8012da6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8012daa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8012dae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012db2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8012db6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012dba:	e841 2300 	strex	r3, r2, [r1]
 8012dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8012dc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d1d9      	bne.n	8012d7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d013      	beq.n	8012dfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dd6:	4a7d      	ldr	r2, [pc, #500]	; (8012fcc <HAL_UART_IRQHandler+0x3dc>)
 8012dd8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7fc fcd8 	bl	800f794 <HAL_DMA_Abort_IT>
 8012de4:	4603      	mov	r3, r0
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d016      	beq.n	8012e18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012df0:	687a      	ldr	r2, [r7, #4]
 8012df2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012df4:	4610      	mov	r0, r2
 8012df6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012df8:	e00e      	b.n	8012e18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f000 f990 	bl	8013120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e00:	e00a      	b.n	8012e18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012e02:	6878      	ldr	r0, [r7, #4]
 8012e04:	f000 f98c 	bl	8013120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e08:	e006      	b.n	8012e18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012e0a:	6878      	ldr	r0, [r7, #4]
 8012e0c:	f000 f988 	bl	8013120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2200      	movs	r2, #0
 8012e14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8012e16:	e170      	b.n	80130fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e18:	bf00      	nop
    return;
 8012e1a:	e16e      	b.n	80130fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e20:	2b01      	cmp	r3, #1
 8012e22:	f040 814a 	bne.w	80130ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8012e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012e2a:	f003 0310 	and.w	r3, r3, #16
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	f000 8143 	beq.w	80130ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8012e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012e38:	f003 0310 	and.w	r3, r3, #16
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	f000 813c 	beq.w	80130ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8012e42:	2300      	movs	r3, #0
 8012e44:	60bb      	str	r3, [r7, #8]
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	60bb      	str	r3, [r7, #8]
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	685b      	ldr	r3, [r3, #4]
 8012e54:	60bb      	str	r3, [r7, #8]
 8012e56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	695b      	ldr	r3, [r3, #20]
 8012e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e62:	2b40      	cmp	r3, #64	; 0x40
 8012e64:	f040 80b4 	bne.w	8012fd0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	685b      	ldr	r3, [r3, #4]
 8012e70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012e74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	f000 8140 	beq.w	80130fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8012e82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012e86:	429a      	cmp	r2, r3
 8012e88:	f080 8139 	bcs.w	80130fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012e92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e98:	69db      	ldr	r3, [r3, #28]
 8012e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e9e:	f000 8088 	beq.w	8012fb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	330c      	adds	r3, #12
 8012ea8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012eac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012eb0:	e853 3f00 	ldrex	r3, [r3]
 8012eb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8012eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	330c      	adds	r3, #12
 8012eca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8012ece:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8012ed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ed6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012eda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012ede:	e841 2300 	strex	r3, r2, [r1]
 8012ee2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8012ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d1d9      	bne.n	8012ea2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	3314      	adds	r3, #20
 8012ef4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ef8:	e853 3f00 	ldrex	r3, [r3]
 8012efc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012f00:	f023 0301 	bic.w	r3, r3, #1
 8012f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	3314      	adds	r3, #20
 8012f0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012f12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8012f16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012f1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012f1e:	e841 2300 	strex	r3, r2, [r1]
 8012f22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012f24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d1e1      	bne.n	8012eee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	3314      	adds	r3, #20
 8012f30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f34:	e853 3f00 	ldrex	r3, [r3]
 8012f38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	3314      	adds	r3, #20
 8012f4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012f4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012f50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012f54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012f56:	e841 2300 	strex	r3, r2, [r1]
 8012f5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d1e3      	bne.n	8012f2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2220      	movs	r2, #32
 8012f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	330c      	adds	r3, #12
 8012f76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f7a:	e853 3f00 	ldrex	r3, [r3]
 8012f7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f82:	f023 0310 	bic.w	r3, r3, #16
 8012f86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	330c      	adds	r3, #12
 8012f90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8012f94:	65ba      	str	r2, [r7, #88]	; 0x58
 8012f96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012f9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012f9c:	e841 2300 	strex	r3, r2, [r1]
 8012fa0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d1e3      	bne.n	8012f70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7fc fb81 	bl	800f6b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	1ad3      	subs	r3, r2, r3
 8012fbe:	b29b      	uxth	r3, r3
 8012fc0:	4619      	mov	r1, r3
 8012fc2:	6878      	ldr	r0, [r7, #4]
 8012fc4:	f000 f8b6 	bl	8013134 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8012fc8:	e099      	b.n	80130fe <HAL_UART_IRQHandler+0x50e>
 8012fca:	bf00      	nop
 8012fcc:	08013363 	.word	0x08013363
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012fd8:	b29b      	uxth	r3, r3
 8012fda:	1ad3      	subs	r3, r2, r3
 8012fdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012fe4:	b29b      	uxth	r3, r3
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	f000 808b 	beq.w	8013102 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8012fec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	f000 8086 	beq.w	8013102 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	330c      	adds	r3, #12
 8012ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013000:	e853 3f00 	ldrex	r3, [r3]
 8013004:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013008:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801300c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	330c      	adds	r3, #12
 8013016:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801301a:	647a      	str	r2, [r7, #68]	; 0x44
 801301c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801301e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013020:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013022:	e841 2300 	strex	r3, r2, [r1]
 8013026:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801302a:	2b00      	cmp	r3, #0
 801302c:	d1e3      	bne.n	8012ff6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	3314      	adds	r3, #20
 8013034:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013038:	e853 3f00 	ldrex	r3, [r3]
 801303c:	623b      	str	r3, [r7, #32]
   return(result);
 801303e:	6a3b      	ldr	r3, [r7, #32]
 8013040:	f023 0301 	bic.w	r3, r3, #1
 8013044:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	3314      	adds	r3, #20
 801304e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013052:	633a      	str	r2, [r7, #48]	; 0x30
 8013054:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013056:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801305a:	e841 2300 	strex	r3, r2, [r1]
 801305e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013062:	2b00      	cmp	r3, #0
 8013064:	d1e3      	bne.n	801302e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	2220      	movs	r2, #32
 801306a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2200      	movs	r2, #0
 8013072:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	330c      	adds	r3, #12
 801307a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	e853 3f00 	ldrex	r3, [r3]
 8013082:	60fb      	str	r3, [r7, #12]
   return(result);
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	f023 0310 	bic.w	r3, r3, #16
 801308a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	330c      	adds	r3, #12
 8013094:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8013098:	61fa      	str	r2, [r7, #28]
 801309a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801309c:	69b9      	ldr	r1, [r7, #24]
 801309e:	69fa      	ldr	r2, [r7, #28]
 80130a0:	e841 2300 	strex	r3, r2, [r1]
 80130a4:	617b      	str	r3, [r7, #20]
   return(result);
 80130a6:	697b      	ldr	r3, [r7, #20]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d1e3      	bne.n	8013074 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80130ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80130b0:	4619      	mov	r1, r3
 80130b2:	6878      	ldr	r0, [r7, #4]
 80130b4:	f000 f83e 	bl	8013134 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80130b8:	e023      	b.n	8013102 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80130ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80130be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d009      	beq.n	80130da <HAL_UART_IRQHandler+0x4ea>
 80130c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80130ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d003      	beq.n	80130da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f000 f959 	bl	801338a <UART_Transmit_IT>
    return;
 80130d8:	e014      	b.n	8013104 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80130da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80130de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d00e      	beq.n	8013104 <HAL_UART_IRQHandler+0x514>
 80130e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80130ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d008      	beq.n	8013104 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	f000 f999 	bl	801342a <UART_EndTransmit_IT>
    return;
 80130f8:	e004      	b.n	8013104 <HAL_UART_IRQHandler+0x514>
    return;
 80130fa:	bf00      	nop
 80130fc:	e002      	b.n	8013104 <HAL_UART_IRQHandler+0x514>
      return;
 80130fe:	bf00      	nop
 8013100:	e000      	b.n	8013104 <HAL_UART_IRQHandler+0x514>
      return;
 8013102:	bf00      	nop
  }
}
 8013104:	37e8      	adds	r7, #232	; 0xe8
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}
 801310a:	bf00      	nop

0801310c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801310c:	b480      	push	{r7}
 801310e:	b083      	sub	sp, #12
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8013114:	bf00      	nop
 8013116:	370c      	adds	r7, #12
 8013118:	46bd      	mov	sp, r7
 801311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311e:	4770      	bx	lr

08013120 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013120:	b480      	push	{r7}
 8013122:	b083      	sub	sp, #12
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8013128:	bf00      	nop
 801312a:	370c      	adds	r7, #12
 801312c:	46bd      	mov	sp, r7
 801312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013132:	4770      	bx	lr

08013134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013134:	b480      	push	{r7}
 8013136:	b083      	sub	sp, #12
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	460b      	mov	r3, r1
 801313e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013140:	bf00      	nop
 8013142:	370c      	adds	r7, #12
 8013144:	46bd      	mov	sp, r7
 8013146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314a:	4770      	bx	lr

0801314c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b090      	sub	sp, #64	; 0x40
 8013150:	af00      	add	r7, sp, #0
 8013152:	60f8      	str	r0, [r7, #12]
 8013154:	60b9      	str	r1, [r7, #8]
 8013156:	603b      	str	r3, [r7, #0]
 8013158:	4613      	mov	r3, r2
 801315a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801315c:	e050      	b.n	8013200 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801315e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013164:	d04c      	beq.n	8013200 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8013166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013168:	2b00      	cmp	r3, #0
 801316a:	d007      	beq.n	801317c <UART_WaitOnFlagUntilTimeout+0x30>
 801316c:	f7fb fdf8 	bl	800ed60 <HAL_GetTick>
 8013170:	4602      	mov	r2, r0
 8013172:	683b      	ldr	r3, [r7, #0]
 8013174:	1ad3      	subs	r3, r2, r3
 8013176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013178:	429a      	cmp	r2, r3
 801317a:	d241      	bcs.n	8013200 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	330c      	adds	r3, #12
 8013182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013186:	e853 3f00 	ldrex	r3, [r3]
 801318a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801318e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	330c      	adds	r3, #12
 801319a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801319c:	637a      	str	r2, [r7, #52]	; 0x34
 801319e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80131a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131a4:	e841 2300 	strex	r3, r2, [r1]
 80131a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80131aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d1e5      	bne.n	801317c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	3314      	adds	r3, #20
 80131b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	e853 3f00 	ldrex	r3, [r3]
 80131be:	613b      	str	r3, [r7, #16]
   return(result);
 80131c0:	693b      	ldr	r3, [r7, #16]
 80131c2:	f023 0301 	bic.w	r3, r3, #1
 80131c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	3314      	adds	r3, #20
 80131ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131d0:	623a      	str	r2, [r7, #32]
 80131d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131d4:	69f9      	ldr	r1, [r7, #28]
 80131d6:	6a3a      	ldr	r2, [r7, #32]
 80131d8:	e841 2300 	strex	r3, r2, [r1]
 80131dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80131de:	69bb      	ldr	r3, [r7, #24]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d1e5      	bne.n	80131b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	2220      	movs	r2, #32
 80131e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	2220      	movs	r2, #32
 80131f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	2200      	movs	r2, #0
 80131f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80131fc:	2303      	movs	r3, #3
 80131fe:	e00f      	b.n	8013220 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	681a      	ldr	r2, [r3, #0]
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	4013      	ands	r3, r2
 801320a:	68ba      	ldr	r2, [r7, #8]
 801320c:	429a      	cmp	r2, r3
 801320e:	bf0c      	ite	eq
 8013210:	2301      	moveq	r3, #1
 8013212:	2300      	movne	r3, #0
 8013214:	b2db      	uxtb	r3, r3
 8013216:	461a      	mov	r2, r3
 8013218:	79fb      	ldrb	r3, [r7, #7]
 801321a:	429a      	cmp	r2, r3
 801321c:	d09f      	beq.n	801315e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801321e:	2300      	movs	r3, #0
}
 8013220:	4618      	mov	r0, r3
 8013222:	3740      	adds	r7, #64	; 0x40
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}

08013228 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013228:	b480      	push	{r7}
 801322a:	b085      	sub	sp, #20
 801322c:	af00      	add	r7, sp, #0
 801322e:	60f8      	str	r0, [r7, #12]
 8013230:	60b9      	str	r1, [r7, #8]
 8013232:	4613      	mov	r3, r2
 8013234:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	68ba      	ldr	r2, [r7, #8]
 801323a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	88fa      	ldrh	r2, [r7, #6]
 8013240:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	88fa      	ldrh	r2, [r7, #6]
 8013246:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	2200      	movs	r2, #0
 801324c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	2222      	movs	r2, #34	; 0x22
 8013252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	2200      	movs	r2, #0
 801325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	68da      	ldr	r2, [r3, #12]
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801326c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	695a      	ldr	r2, [r3, #20]
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	f042 0201 	orr.w	r2, r2, #1
 801327c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	68da      	ldr	r2, [r3, #12]
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	f042 0220 	orr.w	r2, r2, #32
 801328c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801328e:	2300      	movs	r3, #0
}
 8013290:	4618      	mov	r0, r3
 8013292:	3714      	adds	r7, #20
 8013294:	46bd      	mov	sp, r7
 8013296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329a:	4770      	bx	lr

0801329c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801329c:	b480      	push	{r7}
 801329e:	b095      	sub	sp, #84	; 0x54
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	330c      	adds	r3, #12
 80132aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132ae:	e853 3f00 	ldrex	r3, [r3]
 80132b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80132b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80132ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	330c      	adds	r3, #12
 80132c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80132c4:	643a      	str	r2, [r7, #64]	; 0x40
 80132c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80132ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80132cc:	e841 2300 	strex	r3, r2, [r1]
 80132d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80132d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d1e5      	bne.n	80132a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	3314      	adds	r3, #20
 80132de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132e0:	6a3b      	ldr	r3, [r7, #32]
 80132e2:	e853 3f00 	ldrex	r3, [r3]
 80132e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80132e8:	69fb      	ldr	r3, [r7, #28]
 80132ea:	f023 0301 	bic.w	r3, r3, #1
 80132ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	3314      	adds	r3, #20
 80132f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80132f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80132fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80132fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013300:	e841 2300 	strex	r3, r2, [r1]
 8013304:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013308:	2b00      	cmp	r3, #0
 801330a:	d1e5      	bne.n	80132d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013310:	2b01      	cmp	r3, #1
 8013312:	d119      	bne.n	8013348 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	330c      	adds	r3, #12
 801331a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	e853 3f00 	ldrex	r3, [r3]
 8013322:	60bb      	str	r3, [r7, #8]
   return(result);
 8013324:	68bb      	ldr	r3, [r7, #8]
 8013326:	f023 0310 	bic.w	r3, r3, #16
 801332a:	647b      	str	r3, [r7, #68]	; 0x44
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	330c      	adds	r3, #12
 8013332:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013334:	61ba      	str	r2, [r7, #24]
 8013336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013338:	6979      	ldr	r1, [r7, #20]
 801333a:	69ba      	ldr	r2, [r7, #24]
 801333c:	e841 2300 	strex	r3, r2, [r1]
 8013340:	613b      	str	r3, [r7, #16]
   return(result);
 8013342:	693b      	ldr	r3, [r7, #16]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d1e5      	bne.n	8013314 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2220      	movs	r2, #32
 801334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	2200      	movs	r2, #0
 8013354:	631a      	str	r2, [r3, #48]	; 0x30
}
 8013356:	bf00      	nop
 8013358:	3754      	adds	r7, #84	; 0x54
 801335a:	46bd      	mov	sp, r7
 801335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013360:	4770      	bx	lr

08013362 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013362:	b580      	push	{r7, lr}
 8013364:	b084      	sub	sp, #16
 8013366:	af00      	add	r7, sp, #0
 8013368:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801336e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	2200      	movs	r2, #0
 8013374:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	2200      	movs	r2, #0
 801337a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801337c:	68f8      	ldr	r0, [r7, #12]
 801337e:	f7ff fecf 	bl	8013120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013382:	bf00      	nop
 8013384:	3710      	adds	r7, #16
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}

0801338a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801338a:	b480      	push	{r7}
 801338c:	b085      	sub	sp, #20
 801338e:	af00      	add	r7, sp, #0
 8013390:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013398:	b2db      	uxtb	r3, r3
 801339a:	2b21      	cmp	r3, #33	; 0x21
 801339c:	d13e      	bne.n	801341c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	689b      	ldr	r3, [r3, #8]
 80133a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80133a6:	d114      	bne.n	80133d2 <UART_Transmit_IT+0x48>
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	691b      	ldr	r3, [r3, #16]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d110      	bne.n	80133d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	6a1b      	ldr	r3, [r3, #32]
 80133b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	881b      	ldrh	r3, [r3, #0]
 80133ba:	461a      	mov	r2, r3
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80133c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	6a1b      	ldr	r3, [r3, #32]
 80133ca:	1c9a      	adds	r2, r3, #2
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	621a      	str	r2, [r3, #32]
 80133d0:	e008      	b.n	80133e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	6a1b      	ldr	r3, [r3, #32]
 80133d6:	1c59      	adds	r1, r3, #1
 80133d8:	687a      	ldr	r2, [r7, #4]
 80133da:	6211      	str	r1, [r2, #32]
 80133dc:	781a      	ldrb	r2, [r3, #0]
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80133e8:	b29b      	uxth	r3, r3
 80133ea:	3b01      	subs	r3, #1
 80133ec:	b29b      	uxth	r3, r3
 80133ee:	687a      	ldr	r2, [r7, #4]
 80133f0:	4619      	mov	r1, r3
 80133f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d10f      	bne.n	8013418 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	68da      	ldr	r2, [r3, #12]
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013406:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	68da      	ldr	r2, [r3, #12]
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013416:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8013418:	2300      	movs	r3, #0
 801341a:	e000      	b.n	801341e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801341c:	2302      	movs	r3, #2
  }
}
 801341e:	4618      	mov	r0, r3
 8013420:	3714      	adds	r7, #20
 8013422:	46bd      	mov	sp, r7
 8013424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013428:	4770      	bx	lr

0801342a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801342a:	b580      	push	{r7, lr}
 801342c:	b082      	sub	sp, #8
 801342e:	af00      	add	r7, sp, #0
 8013430:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	68da      	ldr	r2, [r3, #12]
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013440:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2220      	movs	r2, #32
 8013446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f7ff fe5e 	bl	801310c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8013450:	2300      	movs	r3, #0
}
 8013452:	4618      	mov	r0, r3
 8013454:	3708      	adds	r7, #8
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}

0801345a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801345a:	b580      	push	{r7, lr}
 801345c:	b08c      	sub	sp, #48	; 0x30
 801345e:	af00      	add	r7, sp, #0
 8013460:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013468:	b2db      	uxtb	r3, r3
 801346a:	2b22      	cmp	r3, #34	; 0x22
 801346c:	f040 80ab 	bne.w	80135c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	689b      	ldr	r3, [r3, #8]
 8013474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013478:	d117      	bne.n	80134aa <UART_Receive_IT+0x50>
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	691b      	ldr	r3, [r3, #16]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d113      	bne.n	80134aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8013482:	2300      	movs	r3, #0
 8013484:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801348a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	685b      	ldr	r3, [r3, #4]
 8013492:	b29b      	uxth	r3, r3
 8013494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013498:	b29a      	uxth	r2, r3
 801349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801349c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134a2:	1c9a      	adds	r2, r3, #2
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	629a      	str	r2, [r3, #40]	; 0x28
 80134a8:	e026      	b.n	80134f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80134b0:	2300      	movs	r3, #0
 80134b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	689b      	ldr	r3, [r3, #8]
 80134b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80134bc:	d007      	beq.n	80134ce <UART_Receive_IT+0x74>
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	689b      	ldr	r3, [r3, #8]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d10a      	bne.n	80134dc <UART_Receive_IT+0x82>
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	691b      	ldr	r3, [r3, #16]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d106      	bne.n	80134dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	685b      	ldr	r3, [r3, #4]
 80134d4:	b2da      	uxtb	r2, r3
 80134d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d8:	701a      	strb	r2, [r3, #0]
 80134da:	e008      	b.n	80134ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	685b      	ldr	r3, [r3, #4]
 80134e2:	b2db      	uxtb	r3, r3
 80134e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134e8:	b2da      	uxtb	r2, r3
 80134ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134f2:	1c5a      	adds	r2, r3, #1
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80134fc:	b29b      	uxth	r3, r3
 80134fe:	3b01      	subs	r3, #1
 8013500:	b29b      	uxth	r3, r3
 8013502:	687a      	ldr	r2, [r7, #4]
 8013504:	4619      	mov	r1, r3
 8013506:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8013508:	2b00      	cmp	r3, #0
 801350a:	d15a      	bne.n	80135c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	68da      	ldr	r2, [r3, #12]
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	f022 0220 	bic.w	r2, r2, #32
 801351a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	68da      	ldr	r2, [r3, #12]
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801352a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	695a      	ldr	r2, [r3, #20]
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	f022 0201 	bic.w	r2, r2, #1
 801353a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2220      	movs	r2, #32
 8013540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013548:	2b01      	cmp	r3, #1
 801354a:	d135      	bne.n	80135b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2200      	movs	r2, #0
 8013550:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	330c      	adds	r3, #12
 8013558:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801355a:	697b      	ldr	r3, [r7, #20]
 801355c:	e853 3f00 	ldrex	r3, [r3]
 8013560:	613b      	str	r3, [r7, #16]
   return(result);
 8013562:	693b      	ldr	r3, [r7, #16]
 8013564:	f023 0310 	bic.w	r3, r3, #16
 8013568:	627b      	str	r3, [r7, #36]	; 0x24
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	330c      	adds	r3, #12
 8013570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013572:	623a      	str	r2, [r7, #32]
 8013574:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013576:	69f9      	ldr	r1, [r7, #28]
 8013578:	6a3a      	ldr	r2, [r7, #32]
 801357a:	e841 2300 	strex	r3, r2, [r1]
 801357e:	61bb      	str	r3, [r7, #24]
   return(result);
 8013580:	69bb      	ldr	r3, [r7, #24]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d1e5      	bne.n	8013552 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	f003 0310 	and.w	r3, r3, #16
 8013590:	2b10      	cmp	r3, #16
 8013592:	d10a      	bne.n	80135aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8013594:	2300      	movs	r3, #0
 8013596:	60fb      	str	r3, [r7, #12]
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	60fb      	str	r3, [r7, #12]
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	685b      	ldr	r3, [r3, #4]
 80135a6:	60fb      	str	r3, [r7, #12]
 80135a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80135ae:	4619      	mov	r1, r3
 80135b0:	6878      	ldr	r0, [r7, #4]
 80135b2:	f7ff fdbf 	bl	8013134 <HAL_UARTEx_RxEventCallback>
 80135b6:	e002      	b.n	80135be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f7f8 fa4b 	bl	800ba54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80135be:	2300      	movs	r3, #0
 80135c0:	e002      	b.n	80135c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80135c2:	2300      	movs	r3, #0
 80135c4:	e000      	b.n	80135c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80135c6:	2302      	movs	r3, #2
  }
}
 80135c8:	4618      	mov	r0, r3
 80135ca:	3730      	adds	r7, #48	; 0x30
 80135cc:	46bd      	mov	sp, r7
 80135ce:	bd80      	pop	{r7, pc}

080135d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80135d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80135d4:	b0c0      	sub	sp, #256	; 0x100
 80135d6:	af00      	add	r7, sp, #0
 80135d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80135dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	691b      	ldr	r3, [r3, #16]
 80135e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80135e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80135ec:	68d9      	ldr	r1, [r3, #12]
 80135ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80135f2:	681a      	ldr	r2, [r3, #0]
 80135f4:	ea40 0301 	orr.w	r3, r0, r1
 80135f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80135fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80135fe:	689a      	ldr	r2, [r3, #8]
 8013600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013604:	691b      	ldr	r3, [r3, #16]
 8013606:	431a      	orrs	r2, r3
 8013608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801360c:	695b      	ldr	r3, [r3, #20]
 801360e:	431a      	orrs	r2, r3
 8013610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013614:	69db      	ldr	r3, [r3, #28]
 8013616:	4313      	orrs	r3, r2
 8013618:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	68db      	ldr	r3, [r3, #12]
 8013624:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8013628:	f021 010c 	bic.w	r1, r1, #12
 801362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013630:	681a      	ldr	r2, [r3, #0]
 8013632:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013636:	430b      	orrs	r3, r1
 8013638:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801363a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	695b      	ldr	r3, [r3, #20]
 8013642:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8013646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801364a:	6999      	ldr	r1, [r3, #24]
 801364c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013650:	681a      	ldr	r2, [r3, #0]
 8013652:	ea40 0301 	orr.w	r3, r0, r1
 8013656:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8013658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801365c:	681a      	ldr	r2, [r3, #0]
 801365e:	4b8f      	ldr	r3, [pc, #572]	; (801389c <UART_SetConfig+0x2cc>)
 8013660:	429a      	cmp	r2, r3
 8013662:	d005      	beq.n	8013670 <UART_SetConfig+0xa0>
 8013664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013668:	681a      	ldr	r2, [r3, #0]
 801366a:	4b8d      	ldr	r3, [pc, #564]	; (80138a0 <UART_SetConfig+0x2d0>)
 801366c:	429a      	cmp	r2, r3
 801366e:	d104      	bne.n	801367a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8013670:	f7fd fa7e 	bl	8010b70 <HAL_RCC_GetPCLK2Freq>
 8013674:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8013678:	e003      	b.n	8013682 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801367a:	f7fd fa65 	bl	8010b48 <HAL_RCC_GetPCLK1Freq>
 801367e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013686:	69db      	ldr	r3, [r3, #28]
 8013688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801368c:	f040 810c 	bne.w	80138a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013694:	2200      	movs	r2, #0
 8013696:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801369a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801369e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80136a2:	4622      	mov	r2, r4
 80136a4:	462b      	mov	r3, r5
 80136a6:	1891      	adds	r1, r2, r2
 80136a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80136aa:	415b      	adcs	r3, r3
 80136ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80136ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80136b2:	4621      	mov	r1, r4
 80136b4:	eb12 0801 	adds.w	r8, r2, r1
 80136b8:	4629      	mov	r1, r5
 80136ba:	eb43 0901 	adc.w	r9, r3, r1
 80136be:	f04f 0200 	mov.w	r2, #0
 80136c2:	f04f 0300 	mov.w	r3, #0
 80136c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80136ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80136ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80136d2:	4690      	mov	r8, r2
 80136d4:	4699      	mov	r9, r3
 80136d6:	4623      	mov	r3, r4
 80136d8:	eb18 0303 	adds.w	r3, r8, r3
 80136dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80136e0:	462b      	mov	r3, r5
 80136e2:	eb49 0303 	adc.w	r3, r9, r3
 80136e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80136ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80136ee:	685b      	ldr	r3, [r3, #4]
 80136f0:	2200      	movs	r2, #0
 80136f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80136f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80136fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80136fe:	460b      	mov	r3, r1
 8013700:	18db      	adds	r3, r3, r3
 8013702:	653b      	str	r3, [r7, #80]	; 0x50
 8013704:	4613      	mov	r3, r2
 8013706:	eb42 0303 	adc.w	r3, r2, r3
 801370a:	657b      	str	r3, [r7, #84]	; 0x54
 801370c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8013710:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8013714:	f7f3 fa4a 	bl	8006bac <__aeabi_uldivmod>
 8013718:	4602      	mov	r2, r0
 801371a:	460b      	mov	r3, r1
 801371c:	4b61      	ldr	r3, [pc, #388]	; (80138a4 <UART_SetConfig+0x2d4>)
 801371e:	fba3 2302 	umull	r2, r3, r3, r2
 8013722:	095b      	lsrs	r3, r3, #5
 8013724:	011c      	lsls	r4, r3, #4
 8013726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801372a:	2200      	movs	r2, #0
 801372c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8013730:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8013734:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8013738:	4642      	mov	r2, r8
 801373a:	464b      	mov	r3, r9
 801373c:	1891      	adds	r1, r2, r2
 801373e:	64b9      	str	r1, [r7, #72]	; 0x48
 8013740:	415b      	adcs	r3, r3
 8013742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013744:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8013748:	4641      	mov	r1, r8
 801374a:	eb12 0a01 	adds.w	sl, r2, r1
 801374e:	4649      	mov	r1, r9
 8013750:	eb43 0b01 	adc.w	fp, r3, r1
 8013754:	f04f 0200 	mov.w	r2, #0
 8013758:	f04f 0300 	mov.w	r3, #0
 801375c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8013760:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8013764:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013768:	4692      	mov	sl, r2
 801376a:	469b      	mov	fp, r3
 801376c:	4643      	mov	r3, r8
 801376e:	eb1a 0303 	adds.w	r3, sl, r3
 8013772:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013776:	464b      	mov	r3, r9
 8013778:	eb4b 0303 	adc.w	r3, fp, r3
 801377c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8013780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013784:	685b      	ldr	r3, [r3, #4]
 8013786:	2200      	movs	r2, #0
 8013788:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801378c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8013790:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8013794:	460b      	mov	r3, r1
 8013796:	18db      	adds	r3, r3, r3
 8013798:	643b      	str	r3, [r7, #64]	; 0x40
 801379a:	4613      	mov	r3, r2
 801379c:	eb42 0303 	adc.w	r3, r2, r3
 80137a0:	647b      	str	r3, [r7, #68]	; 0x44
 80137a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80137a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80137aa:	f7f3 f9ff 	bl	8006bac <__aeabi_uldivmod>
 80137ae:	4602      	mov	r2, r0
 80137b0:	460b      	mov	r3, r1
 80137b2:	4611      	mov	r1, r2
 80137b4:	4b3b      	ldr	r3, [pc, #236]	; (80138a4 <UART_SetConfig+0x2d4>)
 80137b6:	fba3 2301 	umull	r2, r3, r3, r1
 80137ba:	095b      	lsrs	r3, r3, #5
 80137bc:	2264      	movs	r2, #100	; 0x64
 80137be:	fb02 f303 	mul.w	r3, r2, r3
 80137c2:	1acb      	subs	r3, r1, r3
 80137c4:	00db      	lsls	r3, r3, #3
 80137c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80137ca:	4b36      	ldr	r3, [pc, #216]	; (80138a4 <UART_SetConfig+0x2d4>)
 80137cc:	fba3 2302 	umull	r2, r3, r3, r2
 80137d0:	095b      	lsrs	r3, r3, #5
 80137d2:	005b      	lsls	r3, r3, #1
 80137d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80137d8:	441c      	add	r4, r3
 80137da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80137de:	2200      	movs	r2, #0
 80137e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80137e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80137e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80137ec:	4642      	mov	r2, r8
 80137ee:	464b      	mov	r3, r9
 80137f0:	1891      	adds	r1, r2, r2
 80137f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80137f4:	415b      	adcs	r3, r3
 80137f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80137f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80137fc:	4641      	mov	r1, r8
 80137fe:	1851      	adds	r1, r2, r1
 8013800:	6339      	str	r1, [r7, #48]	; 0x30
 8013802:	4649      	mov	r1, r9
 8013804:	414b      	adcs	r3, r1
 8013806:	637b      	str	r3, [r7, #52]	; 0x34
 8013808:	f04f 0200 	mov.w	r2, #0
 801380c:	f04f 0300 	mov.w	r3, #0
 8013810:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8013814:	4659      	mov	r1, fp
 8013816:	00cb      	lsls	r3, r1, #3
 8013818:	4651      	mov	r1, sl
 801381a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801381e:	4651      	mov	r1, sl
 8013820:	00ca      	lsls	r2, r1, #3
 8013822:	4610      	mov	r0, r2
 8013824:	4619      	mov	r1, r3
 8013826:	4603      	mov	r3, r0
 8013828:	4642      	mov	r2, r8
 801382a:	189b      	adds	r3, r3, r2
 801382c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013830:	464b      	mov	r3, r9
 8013832:	460a      	mov	r2, r1
 8013834:	eb42 0303 	adc.w	r3, r2, r3
 8013838:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013840:	685b      	ldr	r3, [r3, #4]
 8013842:	2200      	movs	r2, #0
 8013844:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013848:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801384c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8013850:	460b      	mov	r3, r1
 8013852:	18db      	adds	r3, r3, r3
 8013854:	62bb      	str	r3, [r7, #40]	; 0x28
 8013856:	4613      	mov	r3, r2
 8013858:	eb42 0303 	adc.w	r3, r2, r3
 801385c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801385e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013862:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8013866:	f7f3 f9a1 	bl	8006bac <__aeabi_uldivmod>
 801386a:	4602      	mov	r2, r0
 801386c:	460b      	mov	r3, r1
 801386e:	4b0d      	ldr	r3, [pc, #52]	; (80138a4 <UART_SetConfig+0x2d4>)
 8013870:	fba3 1302 	umull	r1, r3, r3, r2
 8013874:	095b      	lsrs	r3, r3, #5
 8013876:	2164      	movs	r1, #100	; 0x64
 8013878:	fb01 f303 	mul.w	r3, r1, r3
 801387c:	1ad3      	subs	r3, r2, r3
 801387e:	00db      	lsls	r3, r3, #3
 8013880:	3332      	adds	r3, #50	; 0x32
 8013882:	4a08      	ldr	r2, [pc, #32]	; (80138a4 <UART_SetConfig+0x2d4>)
 8013884:	fba2 2303 	umull	r2, r3, r2, r3
 8013888:	095b      	lsrs	r3, r3, #5
 801388a:	f003 0207 	and.w	r2, r3, #7
 801388e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	4422      	add	r2, r4
 8013896:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8013898:	e106      	b.n	8013aa8 <UART_SetConfig+0x4d8>
 801389a:	bf00      	nop
 801389c:	40011000 	.word	0x40011000
 80138a0:	40011400 	.word	0x40011400
 80138a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80138a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80138ac:	2200      	movs	r2, #0
 80138ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80138b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80138b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80138ba:	4642      	mov	r2, r8
 80138bc:	464b      	mov	r3, r9
 80138be:	1891      	adds	r1, r2, r2
 80138c0:	6239      	str	r1, [r7, #32]
 80138c2:	415b      	adcs	r3, r3
 80138c4:	627b      	str	r3, [r7, #36]	; 0x24
 80138c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80138ca:	4641      	mov	r1, r8
 80138cc:	1854      	adds	r4, r2, r1
 80138ce:	4649      	mov	r1, r9
 80138d0:	eb43 0501 	adc.w	r5, r3, r1
 80138d4:	f04f 0200 	mov.w	r2, #0
 80138d8:	f04f 0300 	mov.w	r3, #0
 80138dc:	00eb      	lsls	r3, r5, #3
 80138de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80138e2:	00e2      	lsls	r2, r4, #3
 80138e4:	4614      	mov	r4, r2
 80138e6:	461d      	mov	r5, r3
 80138e8:	4643      	mov	r3, r8
 80138ea:	18e3      	adds	r3, r4, r3
 80138ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80138f0:	464b      	mov	r3, r9
 80138f2:	eb45 0303 	adc.w	r3, r5, r3
 80138f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80138fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80138fe:	685b      	ldr	r3, [r3, #4]
 8013900:	2200      	movs	r2, #0
 8013902:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013906:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801390a:	f04f 0200 	mov.w	r2, #0
 801390e:	f04f 0300 	mov.w	r3, #0
 8013912:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8013916:	4629      	mov	r1, r5
 8013918:	008b      	lsls	r3, r1, #2
 801391a:	4621      	mov	r1, r4
 801391c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013920:	4621      	mov	r1, r4
 8013922:	008a      	lsls	r2, r1, #2
 8013924:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8013928:	f7f3 f940 	bl	8006bac <__aeabi_uldivmod>
 801392c:	4602      	mov	r2, r0
 801392e:	460b      	mov	r3, r1
 8013930:	4b60      	ldr	r3, [pc, #384]	; (8013ab4 <UART_SetConfig+0x4e4>)
 8013932:	fba3 2302 	umull	r2, r3, r3, r2
 8013936:	095b      	lsrs	r3, r3, #5
 8013938:	011c      	lsls	r4, r3, #4
 801393a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801393e:	2200      	movs	r2, #0
 8013940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013944:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013948:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801394c:	4642      	mov	r2, r8
 801394e:	464b      	mov	r3, r9
 8013950:	1891      	adds	r1, r2, r2
 8013952:	61b9      	str	r1, [r7, #24]
 8013954:	415b      	adcs	r3, r3
 8013956:	61fb      	str	r3, [r7, #28]
 8013958:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801395c:	4641      	mov	r1, r8
 801395e:	1851      	adds	r1, r2, r1
 8013960:	6139      	str	r1, [r7, #16]
 8013962:	4649      	mov	r1, r9
 8013964:	414b      	adcs	r3, r1
 8013966:	617b      	str	r3, [r7, #20]
 8013968:	f04f 0200 	mov.w	r2, #0
 801396c:	f04f 0300 	mov.w	r3, #0
 8013970:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8013974:	4659      	mov	r1, fp
 8013976:	00cb      	lsls	r3, r1, #3
 8013978:	4651      	mov	r1, sl
 801397a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801397e:	4651      	mov	r1, sl
 8013980:	00ca      	lsls	r2, r1, #3
 8013982:	4610      	mov	r0, r2
 8013984:	4619      	mov	r1, r3
 8013986:	4603      	mov	r3, r0
 8013988:	4642      	mov	r2, r8
 801398a:	189b      	adds	r3, r3, r2
 801398c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013990:	464b      	mov	r3, r9
 8013992:	460a      	mov	r2, r1
 8013994:	eb42 0303 	adc.w	r3, r2, r3
 8013998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80139a0:	685b      	ldr	r3, [r3, #4]
 80139a2:	2200      	movs	r2, #0
 80139a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80139a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80139a8:	f04f 0200 	mov.w	r2, #0
 80139ac:	f04f 0300 	mov.w	r3, #0
 80139b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80139b4:	4649      	mov	r1, r9
 80139b6:	008b      	lsls	r3, r1, #2
 80139b8:	4641      	mov	r1, r8
 80139ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80139be:	4641      	mov	r1, r8
 80139c0:	008a      	lsls	r2, r1, #2
 80139c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80139c6:	f7f3 f8f1 	bl	8006bac <__aeabi_uldivmod>
 80139ca:	4602      	mov	r2, r0
 80139cc:	460b      	mov	r3, r1
 80139ce:	4611      	mov	r1, r2
 80139d0:	4b38      	ldr	r3, [pc, #224]	; (8013ab4 <UART_SetConfig+0x4e4>)
 80139d2:	fba3 2301 	umull	r2, r3, r3, r1
 80139d6:	095b      	lsrs	r3, r3, #5
 80139d8:	2264      	movs	r2, #100	; 0x64
 80139da:	fb02 f303 	mul.w	r3, r2, r3
 80139de:	1acb      	subs	r3, r1, r3
 80139e0:	011b      	lsls	r3, r3, #4
 80139e2:	3332      	adds	r3, #50	; 0x32
 80139e4:	4a33      	ldr	r2, [pc, #204]	; (8013ab4 <UART_SetConfig+0x4e4>)
 80139e6:	fba2 2303 	umull	r2, r3, r2, r3
 80139ea:	095b      	lsrs	r3, r3, #5
 80139ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80139f0:	441c      	add	r4, r3
 80139f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80139f6:	2200      	movs	r2, #0
 80139f8:	673b      	str	r3, [r7, #112]	; 0x70
 80139fa:	677a      	str	r2, [r7, #116]	; 0x74
 80139fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8013a00:	4642      	mov	r2, r8
 8013a02:	464b      	mov	r3, r9
 8013a04:	1891      	adds	r1, r2, r2
 8013a06:	60b9      	str	r1, [r7, #8]
 8013a08:	415b      	adcs	r3, r3
 8013a0a:	60fb      	str	r3, [r7, #12]
 8013a0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013a10:	4641      	mov	r1, r8
 8013a12:	1851      	adds	r1, r2, r1
 8013a14:	6039      	str	r1, [r7, #0]
 8013a16:	4649      	mov	r1, r9
 8013a18:	414b      	adcs	r3, r1
 8013a1a:	607b      	str	r3, [r7, #4]
 8013a1c:	f04f 0200 	mov.w	r2, #0
 8013a20:	f04f 0300 	mov.w	r3, #0
 8013a24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8013a28:	4659      	mov	r1, fp
 8013a2a:	00cb      	lsls	r3, r1, #3
 8013a2c:	4651      	mov	r1, sl
 8013a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013a32:	4651      	mov	r1, sl
 8013a34:	00ca      	lsls	r2, r1, #3
 8013a36:	4610      	mov	r0, r2
 8013a38:	4619      	mov	r1, r3
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	4642      	mov	r2, r8
 8013a3e:	189b      	adds	r3, r3, r2
 8013a40:	66bb      	str	r3, [r7, #104]	; 0x68
 8013a42:	464b      	mov	r3, r9
 8013a44:	460a      	mov	r2, r1
 8013a46:	eb42 0303 	adc.w	r3, r2, r3
 8013a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013a50:	685b      	ldr	r3, [r3, #4]
 8013a52:	2200      	movs	r2, #0
 8013a54:	663b      	str	r3, [r7, #96]	; 0x60
 8013a56:	667a      	str	r2, [r7, #100]	; 0x64
 8013a58:	f04f 0200 	mov.w	r2, #0
 8013a5c:	f04f 0300 	mov.w	r3, #0
 8013a60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8013a64:	4649      	mov	r1, r9
 8013a66:	008b      	lsls	r3, r1, #2
 8013a68:	4641      	mov	r1, r8
 8013a6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013a6e:	4641      	mov	r1, r8
 8013a70:	008a      	lsls	r2, r1, #2
 8013a72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8013a76:	f7f3 f899 	bl	8006bac <__aeabi_uldivmod>
 8013a7a:	4602      	mov	r2, r0
 8013a7c:	460b      	mov	r3, r1
 8013a7e:	4b0d      	ldr	r3, [pc, #52]	; (8013ab4 <UART_SetConfig+0x4e4>)
 8013a80:	fba3 1302 	umull	r1, r3, r3, r2
 8013a84:	095b      	lsrs	r3, r3, #5
 8013a86:	2164      	movs	r1, #100	; 0x64
 8013a88:	fb01 f303 	mul.w	r3, r1, r3
 8013a8c:	1ad3      	subs	r3, r2, r3
 8013a8e:	011b      	lsls	r3, r3, #4
 8013a90:	3332      	adds	r3, #50	; 0x32
 8013a92:	4a08      	ldr	r2, [pc, #32]	; (8013ab4 <UART_SetConfig+0x4e4>)
 8013a94:	fba2 2303 	umull	r2, r3, r2, r3
 8013a98:	095b      	lsrs	r3, r3, #5
 8013a9a:	f003 020f 	and.w	r2, r3, #15
 8013a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	4422      	add	r2, r4
 8013aa6:	609a      	str	r2, [r3, #8]
}
 8013aa8:	bf00      	nop
 8013aaa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013ab4:	51eb851f 	.word	0x51eb851f

08013ab8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8013ab8:	b084      	sub	sp, #16
 8013aba:	b480      	push	{r7}
 8013abc:	b085      	sub	sp, #20
 8013abe:	af00      	add	r7, sp, #0
 8013ac0:	6078      	str	r0, [r7, #4]
 8013ac2:	f107 001c 	add.w	r0, r7, #28
 8013ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8013aca:	2300      	movs	r3, #0
 8013acc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8013ace:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8013ad0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8013ad2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8013ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8013ad6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8013ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8013ada:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8013adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8013ade:	431a      	orrs	r2, r3
             Init.ClockDiv
 8013ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8013ae2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8013ae4:	68fa      	ldr	r2, [r7, #12]
 8013ae6:	4313      	orrs	r3, r2
 8013ae8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	685b      	ldr	r3, [r3, #4]
 8013aee:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8013af2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013af6:	68fa      	ldr	r2, [r7, #12]
 8013af8:	431a      	orrs	r2, r3
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8013afe:	2300      	movs	r3, #0
}
 8013b00:	4618      	mov	r0, r3
 8013b02:	3714      	adds	r7, #20
 8013b04:	46bd      	mov	sp, r7
 8013b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b0a:	b004      	add	sp, #16
 8013b0c:	4770      	bx	lr

08013b0e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8013b0e:	b480      	push	{r7}
 8013b10:	b083      	sub	sp, #12
 8013b12:	af00      	add	r7, sp, #0
 8013b14:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	370c      	adds	r7, #12
 8013b20:	46bd      	mov	sp, r7
 8013b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b26:	4770      	bx	lr

08013b28 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8013b28:	b480      	push	{r7}
 8013b2a:	b083      	sub	sp, #12
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	681a      	ldr	r2, [r3, #0]
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013b3c:	2300      	movs	r3, #0
}
 8013b3e:	4618      	mov	r0, r3
 8013b40:	370c      	adds	r7, #12
 8013b42:	46bd      	mov	sp, r7
 8013b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b48:	4770      	bx	lr

08013b4a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8013b4a:	b580      	push	{r7, lr}
 8013b4c:	b082      	sub	sp, #8
 8013b4e:	af00      	add	r7, sp, #0
 8013b50:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	2203      	movs	r2, #3
 8013b56:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8013b58:	2002      	movs	r0, #2
 8013b5a:	f7fb f90d 	bl	800ed78 <HAL_Delay>
  
  return HAL_OK;
 8013b5e:	2300      	movs	r3, #0
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	3708      	adds	r7, #8
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd80      	pop	{r7, pc}

08013b68 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8013b68:	b480      	push	{r7}
 8013b6a:	b083      	sub	sp, #12
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	f003 0303 	and.w	r3, r3, #3
}
 8013b78:	4618      	mov	r0, r3
 8013b7a:	370c      	adds	r7, #12
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b82:	4770      	bx	lr

08013b84 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8013b84:	b480      	push	{r7}
 8013b86:	b085      	sub	sp, #20
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
 8013b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013b8e:	2300      	movs	r3, #0
 8013b90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8013b92:	683b      	ldr	r3, [r7, #0]
 8013b94:	681a      	ldr	r2, [r3, #0]
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8013b9a:	683b      	ldr	r3, [r7, #0]
 8013b9c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8013b9e:	683b      	ldr	r3, [r7, #0]
 8013ba0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8013ba2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8013ba8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8013bae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8013bb0:	68fa      	ldr	r2, [r7, #12]
 8013bb2:	4313      	orrs	r3, r2
 8013bb4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	68db      	ldr	r3, [r3, #12]
 8013bba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013bbe:	f023 030f 	bic.w	r3, r3, #15
 8013bc2:	68fa      	ldr	r2, [r7, #12]
 8013bc4:	431a      	orrs	r2, r3
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8013bca:	2300      	movs	r3, #0
}
 8013bcc:	4618      	mov	r0, r3
 8013bce:	3714      	adds	r7, #20
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd6:	4770      	bx	lr

08013bd8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8013bd8:	b480      	push	{r7}
 8013bda:	b083      	sub	sp, #12
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	691b      	ldr	r3, [r3, #16]
 8013be4:	b2db      	uxtb	r3, r3
}
 8013be6:	4618      	mov	r0, r3
 8013be8:	370c      	adds	r7, #12
 8013bea:	46bd      	mov	sp, r7
 8013bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf0:	4770      	bx	lr

08013bf2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8013bf2:	b480      	push	{r7}
 8013bf4:	b085      	sub	sp, #20
 8013bf6:	af00      	add	r7, sp, #0
 8013bf8:	6078      	str	r0, [r7, #4]
 8013bfa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	3314      	adds	r3, #20
 8013c00:	461a      	mov	r2, r3
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	4413      	add	r3, r2
 8013c06:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	681b      	ldr	r3, [r3, #0]
}  
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	3714      	adds	r7, #20
 8013c10:	46bd      	mov	sp, r7
 8013c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c16:	4770      	bx	lr

08013c18 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8013c18:	b480      	push	{r7}
 8013c1a:	b085      	sub	sp, #20
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
 8013c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013c22:	2300      	movs	r3, #0
 8013c24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8013c26:	683b      	ldr	r3, [r7, #0]
 8013c28:	681a      	ldr	r2, [r3, #0]
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	685a      	ldr	r2, [r3, #4]
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8013c36:	683b      	ldr	r3, [r7, #0]
 8013c38:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8013c3e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8013c44:	431a      	orrs	r2, r3
                       Data->DPSM);
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8013c4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8013c4c:	68fa      	ldr	r2, [r7, #12]
 8013c4e:	4313      	orrs	r3, r2
 8013c50:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c56:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	431a      	orrs	r2, r3
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8013c62:	2300      	movs	r3, #0

}
 8013c64:	4618      	mov	r0, r3
 8013c66:	3714      	adds	r7, #20
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6e:	4770      	bx	lr

08013c70 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b088      	sub	sp, #32
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8013c7e:	2310      	movs	r3, #16
 8013c80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013c82:	2340      	movs	r3, #64	; 0x40
 8013c84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013c86:	2300      	movs	r3, #0
 8013c88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013c8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013c90:	f107 0308 	add.w	r3, r7, #8
 8013c94:	4619      	mov	r1, r3
 8013c96:	6878      	ldr	r0, [r7, #4]
 8013c98:	f7ff ff74 	bl	8013b84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8013c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ca0:	2110      	movs	r1, #16
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f000 fa44 	bl	8014130 <SDMMC_GetCmdResp1>
 8013ca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013caa:	69fb      	ldr	r3, [r7, #28]
}
 8013cac:	4618      	mov	r0, r3
 8013cae:	3720      	adds	r7, #32
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd80      	pop	{r7, pc}

08013cb4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b088      	sub	sp, #32
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
 8013cbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013cbe:	683b      	ldr	r3, [r7, #0]
 8013cc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8013cc2:	2311      	movs	r3, #17
 8013cc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013cc6:	2340      	movs	r3, #64	; 0x40
 8013cc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013cca:	2300      	movs	r3, #0
 8013ccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013cd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013cd4:	f107 0308 	add.w	r3, r7, #8
 8013cd8:	4619      	mov	r1, r3
 8013cda:	6878      	ldr	r0, [r7, #4]
 8013cdc:	f7ff ff52 	bl	8013b84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8013ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ce4:	2111      	movs	r1, #17
 8013ce6:	6878      	ldr	r0, [r7, #4]
 8013ce8:	f000 fa22 	bl	8014130 <SDMMC_GetCmdResp1>
 8013cec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013cee:	69fb      	ldr	r3, [r7, #28]
}
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	3720      	adds	r7, #32
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bd80      	pop	{r7, pc}

08013cf8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b088      	sub	sp, #32
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
 8013d00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8013d06:	2312      	movs	r3, #18
 8013d08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013d0a:	2340      	movs	r3, #64	; 0x40
 8013d0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013d18:	f107 0308 	add.w	r3, r7, #8
 8013d1c:	4619      	mov	r1, r3
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f7ff ff30 	bl	8013b84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8013d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8013d28:	2112      	movs	r1, #18
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	f000 fa00 	bl	8014130 <SDMMC_GetCmdResp1>
 8013d30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013d32:	69fb      	ldr	r3, [r7, #28]
}
 8013d34:	4618      	mov	r0, r3
 8013d36:	3720      	adds	r7, #32
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}

08013d3c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b088      	sub	sp, #32
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
 8013d44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013d46:	683b      	ldr	r3, [r7, #0]
 8013d48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8013d4a:	2318      	movs	r3, #24
 8013d4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013d4e:	2340      	movs	r3, #64	; 0x40
 8013d50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013d52:	2300      	movs	r3, #0
 8013d54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013d5c:	f107 0308 	add.w	r3, r7, #8
 8013d60:	4619      	mov	r1, r3
 8013d62:	6878      	ldr	r0, [r7, #4]
 8013d64:	f7ff ff0e 	bl	8013b84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8013d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8013d6c:	2118      	movs	r1, #24
 8013d6e:	6878      	ldr	r0, [r7, #4]
 8013d70:	f000 f9de 	bl	8014130 <SDMMC_GetCmdResp1>
 8013d74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013d76:	69fb      	ldr	r3, [r7, #28]
}
 8013d78:	4618      	mov	r0, r3
 8013d7a:	3720      	adds	r7, #32
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}

08013d80 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b088      	sub	sp, #32
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8013d8e:	2319      	movs	r3, #25
 8013d90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013d92:	2340      	movs	r3, #64	; 0x40
 8013d94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013d96:	2300      	movs	r3, #0
 8013d98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013da0:	f107 0308 	add.w	r3, r7, #8
 8013da4:	4619      	mov	r1, r3
 8013da6:	6878      	ldr	r0, [r7, #4]
 8013da8:	f7ff feec 	bl	8013b84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8013dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8013db0:	2119      	movs	r1, #25
 8013db2:	6878      	ldr	r0, [r7, #4]
 8013db4:	f000 f9bc 	bl	8014130 <SDMMC_GetCmdResp1>
 8013db8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013dba:	69fb      	ldr	r3, [r7, #28]
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3720      	adds	r7, #32
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}

08013dc4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b088      	sub	sp, #32
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8013dcc:	2300      	movs	r3, #0
 8013dce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8013dd0:	230c      	movs	r3, #12
 8013dd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013dd4:	2340      	movs	r3, #64	; 0x40
 8013dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013dd8:	2300      	movs	r3, #0
 8013dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013de0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013de2:	f107 0308 	add.w	r3, r7, #8
 8013de6:	4619      	mov	r1, r3
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f7ff fecb 	bl	8013b84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8013dee:	4a05      	ldr	r2, [pc, #20]	; (8013e04 <SDMMC_CmdStopTransfer+0x40>)
 8013df0:	210c      	movs	r1, #12
 8013df2:	6878      	ldr	r0, [r7, #4]
 8013df4:	f000 f99c 	bl	8014130 <SDMMC_GetCmdResp1>
 8013df8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013dfa:	69fb      	ldr	r3, [r7, #28]
}
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	3720      	adds	r7, #32
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd80      	pop	{r7, pc}
 8013e04:	05f5e100 	.word	0x05f5e100

08013e08 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b08a      	sub	sp, #40	; 0x28
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	60f8      	str	r0, [r7, #12]
 8013e10:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8013e18:	2307      	movs	r3, #7
 8013e1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013e1c:	2340      	movs	r3, #64	; 0x40
 8013e1e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013e20:	2300      	movs	r3, #0
 8013e22:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013e28:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013e2a:	f107 0310 	add.w	r3, r7, #16
 8013e2e:	4619      	mov	r1, r3
 8013e30:	68f8      	ldr	r0, [r7, #12]
 8013e32:	f7ff fea7 	bl	8013b84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8013e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8013e3a:	2107      	movs	r1, #7
 8013e3c:	68f8      	ldr	r0, [r7, #12]
 8013e3e:	f000 f977 	bl	8014130 <SDMMC_GetCmdResp1>
 8013e42:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8013e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013e46:	4618      	mov	r0, r3
 8013e48:	3728      	adds	r7, #40	; 0x28
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}

08013e4e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8013e4e:	b580      	push	{r7, lr}
 8013e50:	b088      	sub	sp, #32
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8013e56:	2300      	movs	r3, #0
 8013e58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8013e5e:	2300      	movs	r3, #0
 8013e60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013e62:	2300      	movs	r3, #0
 8013e64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013e6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013e6c:	f107 0308 	add.w	r3, r7, #8
 8013e70:	4619      	mov	r1, r3
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f7ff fe86 	bl	8013b84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f000 f92d 	bl	80140d8 <SDMMC_GetCmdError>
 8013e7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013e80:	69fb      	ldr	r3, [r7, #28]
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3720      	adds	r7, #32
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}

08013e8a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8013e8a:	b580      	push	{r7, lr}
 8013e8c:	b088      	sub	sp, #32
 8013e8e:	af00      	add	r7, sp, #0
 8013e90:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8013e92:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8013e96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8013e98:	2308      	movs	r3, #8
 8013e9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013e9c:	2340      	movs	r3, #64	; 0x40
 8013e9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013ea8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013eaa:	f107 0308 	add.w	r3, r7, #8
 8013eae:	4619      	mov	r1, r3
 8013eb0:	6878      	ldr	r0, [r7, #4]
 8013eb2:	f7ff fe67 	bl	8013b84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8013eb6:	6878      	ldr	r0, [r7, #4]
 8013eb8:	f000 fb24 	bl	8014504 <SDMMC_GetCmdResp7>
 8013ebc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013ebe:	69fb      	ldr	r3, [r7, #28]
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3720      	adds	r7, #32
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}

08013ec8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b088      	sub	sp, #32
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
 8013ed0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8013ed2:	683b      	ldr	r3, [r7, #0]
 8013ed4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8013ed6:	2337      	movs	r3, #55	; 0x37
 8013ed8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013eda:	2340      	movs	r3, #64	; 0x40
 8013edc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013ede:	2300      	movs	r3, #0
 8013ee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013ee6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013ee8:	f107 0308 	add.w	r3, r7, #8
 8013eec:	4619      	mov	r1, r3
 8013eee:	6878      	ldr	r0, [r7, #4]
 8013ef0:	f7ff fe48 	bl	8013b84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8013ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ef8:	2137      	movs	r1, #55	; 0x37
 8013efa:	6878      	ldr	r0, [r7, #4]
 8013efc:	f000 f918 	bl	8014130 <SDMMC_GetCmdResp1>
 8013f00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013f02:	69fb      	ldr	r3, [r7, #28]
}
 8013f04:	4618      	mov	r0, r3
 8013f06:	3720      	adds	r7, #32
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd80      	pop	{r7, pc}

08013f0c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b088      	sub	sp, #32
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
 8013f14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8013f16:	683b      	ldr	r3, [r7, #0]
 8013f18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013f20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8013f22:	2329      	movs	r3, #41	; 0x29
 8013f24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013f26:	2340      	movs	r3, #64	; 0x40
 8013f28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013f32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013f34:	f107 0308 	add.w	r3, r7, #8
 8013f38:	4619      	mov	r1, r3
 8013f3a:	6878      	ldr	r0, [r7, #4]
 8013f3c:	f7ff fe22 	bl	8013b84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8013f40:	6878      	ldr	r0, [r7, #4]
 8013f42:	f000 fa2b 	bl	801439c <SDMMC_GetCmdResp3>
 8013f46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013f48:	69fb      	ldr	r3, [r7, #28]
}
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	3720      	adds	r7, #32
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}

08013f52 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8013f52:	b580      	push	{r7, lr}
 8013f54:	b088      	sub	sp, #32
 8013f56:	af00      	add	r7, sp, #0
 8013f58:	6078      	str	r0, [r7, #4]
 8013f5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8013f60:	2306      	movs	r3, #6
 8013f62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013f64:	2340      	movs	r3, #64	; 0x40
 8013f66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013f68:	2300      	movs	r3, #0
 8013f6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013f70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013f72:	f107 0308 	add.w	r3, r7, #8
 8013f76:	4619      	mov	r1, r3
 8013f78:	6878      	ldr	r0, [r7, #4]
 8013f7a:	f7ff fe03 	bl	8013b84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8013f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013f82:	2106      	movs	r1, #6
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f000 f8d3 	bl	8014130 <SDMMC_GetCmdResp1>
 8013f8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013f8c:	69fb      	ldr	r3, [r7, #28]
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3720      	adds	r7, #32
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}

08013f96 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8013f96:	b580      	push	{r7, lr}
 8013f98:	b088      	sub	sp, #32
 8013f9a:	af00      	add	r7, sp, #0
 8013f9c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8013fa2:	2333      	movs	r3, #51	; 0x33
 8013fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013fa6:	2340      	movs	r3, #64	; 0x40
 8013fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013faa:	2300      	movs	r3, #0
 8013fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013fb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013fb4:	f107 0308 	add.w	r3, r7, #8
 8013fb8:	4619      	mov	r1, r3
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	f7ff fde2 	bl	8013b84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8013fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8013fc4:	2133      	movs	r1, #51	; 0x33
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f000 f8b2 	bl	8014130 <SDMMC_GetCmdResp1>
 8013fcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013fce:	69fb      	ldr	r3, [r7, #28]
}
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	3720      	adds	r7, #32
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}

08013fd8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b088      	sub	sp, #32
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8013fe4:	2302      	movs	r3, #2
 8013fe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8013fe8:	23c0      	movs	r3, #192	; 0xc0
 8013fea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013fec:	2300      	movs	r3, #0
 8013fee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013ff4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013ff6:	f107 0308 	add.w	r3, r7, #8
 8013ffa:	4619      	mov	r1, r3
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f7ff fdc1 	bl	8013b84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f000 f982 	bl	801430c <SDMMC_GetCmdResp2>
 8014008:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801400a:	69fb      	ldr	r3, [r7, #28]
}
 801400c:	4618      	mov	r0, r3
 801400e:	3720      	adds	r7, #32
 8014010:	46bd      	mov	sp, r7
 8014012:	bd80      	pop	{r7, pc}

08014014 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b088      	sub	sp, #32
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
 801401c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8014022:	2309      	movs	r3, #9
 8014024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8014026:	23c0      	movs	r3, #192	; 0xc0
 8014028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801402a:	2300      	movs	r3, #0
 801402c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801402e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014032:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8014034:	f107 0308 	add.w	r3, r7, #8
 8014038:	4619      	mov	r1, r3
 801403a:	6878      	ldr	r0, [r7, #4]
 801403c:	f7ff fda2 	bl	8013b84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8014040:	6878      	ldr	r0, [r7, #4]
 8014042:	f000 f963 	bl	801430c <SDMMC_GetCmdResp2>
 8014046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014048:	69fb      	ldr	r3, [r7, #28]
}
 801404a:	4618      	mov	r0, r3
 801404c:	3720      	adds	r7, #32
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}

08014052 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8014052:	b580      	push	{r7, lr}
 8014054:	b088      	sub	sp, #32
 8014056:	af00      	add	r7, sp, #0
 8014058:	6078      	str	r0, [r7, #4]
 801405a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801405c:	2300      	movs	r3, #0
 801405e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8014060:	2303      	movs	r3, #3
 8014062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8014064:	2340      	movs	r3, #64	; 0x40
 8014066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8014068:	2300      	movs	r3, #0
 801406a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801406c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014070:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8014072:	f107 0308 	add.w	r3, r7, #8
 8014076:	4619      	mov	r1, r3
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f7ff fd83 	bl	8013b84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801407e:	683a      	ldr	r2, [r7, #0]
 8014080:	2103      	movs	r1, #3
 8014082:	6878      	ldr	r0, [r7, #4]
 8014084:	f000 f9c8 	bl	8014418 <SDMMC_GetCmdResp6>
 8014088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801408a:	69fb      	ldr	r3, [r7, #28]
}
 801408c:	4618      	mov	r0, r3
 801408e:	3720      	adds	r7, #32
 8014090:	46bd      	mov	sp, r7
 8014092:	bd80      	pop	{r7, pc}

08014094 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b088      	sub	sp, #32
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
 801409c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801409e:	683b      	ldr	r3, [r7, #0]
 80140a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80140a2:	230d      	movs	r3, #13
 80140a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80140a6:	2340      	movs	r3, #64	; 0x40
 80140a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80140aa:	2300      	movs	r3, #0
 80140ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80140ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80140b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80140b4:	f107 0308 	add.w	r3, r7, #8
 80140b8:	4619      	mov	r1, r3
 80140ba:	6878      	ldr	r0, [r7, #4]
 80140bc:	f7ff fd62 	bl	8013b84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80140c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80140c4:	210d      	movs	r1, #13
 80140c6:	6878      	ldr	r0, [r7, #4]
 80140c8:	f000 f832 	bl	8014130 <SDMMC_GetCmdResp1>
 80140cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80140ce:	69fb      	ldr	r3, [r7, #28]
}
 80140d0:	4618      	mov	r0, r3
 80140d2:	3720      	adds	r7, #32
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bd80      	pop	{r7, pc}

080140d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80140d8:	b480      	push	{r7}
 80140da:	b085      	sub	sp, #20
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80140e0:	4b11      	ldr	r3, [pc, #68]	; (8014128 <SDMMC_GetCmdError+0x50>)
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	4a11      	ldr	r2, [pc, #68]	; (801412c <SDMMC_GetCmdError+0x54>)
 80140e6:	fba2 2303 	umull	r2, r3, r2, r3
 80140ea:	0a5b      	lsrs	r3, r3, #9
 80140ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80140f0:	fb02 f303 	mul.w	r3, r2, r3
 80140f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	1e5a      	subs	r2, r3, #1
 80140fa:	60fa      	str	r2, [r7, #12]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d102      	bne.n	8014106 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014100:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014104:	e009      	b.n	801411a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801410a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801410e:	2b00      	cmp	r3, #0
 8014110:	d0f1      	beq.n	80140f6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	22c5      	movs	r2, #197	; 0xc5
 8014116:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8014118:	2300      	movs	r3, #0
}
 801411a:	4618      	mov	r0, r3
 801411c:	3714      	adds	r7, #20
 801411e:	46bd      	mov	sp, r7
 8014120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014124:	4770      	bx	lr
 8014126:	bf00      	nop
 8014128:	20000008 	.word	0x20000008
 801412c:	10624dd3 	.word	0x10624dd3

08014130 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b088      	sub	sp, #32
 8014134:	af00      	add	r7, sp, #0
 8014136:	60f8      	str	r0, [r7, #12]
 8014138:	460b      	mov	r3, r1
 801413a:	607a      	str	r2, [r7, #4]
 801413c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801413e:	4b70      	ldr	r3, [pc, #448]	; (8014300 <SDMMC_GetCmdResp1+0x1d0>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	4a70      	ldr	r2, [pc, #448]	; (8014304 <SDMMC_GetCmdResp1+0x1d4>)
 8014144:	fba2 2303 	umull	r2, r3, r2, r3
 8014148:	0a5a      	lsrs	r2, r3, #9
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	fb02 f303 	mul.w	r3, r2, r3
 8014150:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8014152:	69fb      	ldr	r3, [r7, #28]
 8014154:	1e5a      	subs	r2, r3, #1
 8014156:	61fa      	str	r2, [r7, #28]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d102      	bne.n	8014162 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801415c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014160:	e0c9      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014166:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014168:	69bb      	ldr	r3, [r7, #24]
 801416a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801416e:	2b00      	cmp	r3, #0
 8014170:	d0ef      	beq.n	8014152 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8014172:	69bb      	ldr	r3, [r7, #24]
 8014174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014178:	2b00      	cmp	r3, #0
 801417a:	d1ea      	bne.n	8014152 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014180:	f003 0304 	and.w	r3, r3, #4
 8014184:	2b00      	cmp	r3, #0
 8014186:	d004      	beq.n	8014192 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	2204      	movs	r2, #4
 801418c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801418e:	2304      	movs	r3, #4
 8014190:	e0b1      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014196:	f003 0301 	and.w	r3, r3, #1
 801419a:	2b00      	cmp	r3, #0
 801419c:	d004      	beq.n	80141a8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	2201      	movs	r2, #1
 80141a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80141a4:	2301      	movs	r3, #1
 80141a6:	e0a6      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	22c5      	movs	r2, #197	; 0xc5
 80141ac:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80141ae:	68f8      	ldr	r0, [r7, #12]
 80141b0:	f7ff fd12 	bl	8013bd8 <SDIO_GetCommandResponse>
 80141b4:	4603      	mov	r3, r0
 80141b6:	461a      	mov	r2, r3
 80141b8:	7afb      	ldrb	r3, [r7, #11]
 80141ba:	4293      	cmp	r3, r2
 80141bc:	d001      	beq.n	80141c2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80141be:	2301      	movs	r3, #1
 80141c0:	e099      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80141c2:	2100      	movs	r1, #0
 80141c4:	68f8      	ldr	r0, [r7, #12]
 80141c6:	f7ff fd14 	bl	8013bf2 <SDIO_GetResponse>
 80141ca:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80141cc:	697a      	ldr	r2, [r7, #20]
 80141ce:	4b4e      	ldr	r3, [pc, #312]	; (8014308 <SDMMC_GetCmdResp1+0x1d8>)
 80141d0:	4013      	ands	r3, r2
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d101      	bne.n	80141da <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80141d6:	2300      	movs	r3, #0
 80141d8:	e08d      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80141da:	697b      	ldr	r3, [r7, #20]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	da02      	bge.n	80141e6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80141e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80141e4:	e087      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80141e6:	697b      	ldr	r3, [r7, #20]
 80141e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d001      	beq.n	80141f4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80141f0:	2340      	movs	r3, #64	; 0x40
 80141f2:	e080      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80141f4:	697b      	ldr	r3, [r7, #20]
 80141f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d001      	beq.n	8014202 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80141fe:	2380      	movs	r3, #128	; 0x80
 8014200:	e079      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8014202:	697b      	ldr	r3, [r7, #20]
 8014204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014208:	2b00      	cmp	r3, #0
 801420a:	d002      	beq.n	8014212 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801420c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014210:	e071      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014212:	697b      	ldr	r3, [r7, #20]
 8014214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014218:	2b00      	cmp	r3, #0
 801421a:	d002      	beq.n	8014222 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801421c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014220:	e069      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8014222:	697b      	ldr	r3, [r7, #20]
 8014224:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014228:	2b00      	cmp	r3, #0
 801422a:	d002      	beq.n	8014232 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801422c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014230:	e061      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014238:	2b00      	cmp	r3, #0
 801423a:	d002      	beq.n	8014242 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801423c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014240:	e059      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014248:	2b00      	cmp	r3, #0
 801424a:	d002      	beq.n	8014252 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801424c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014250:	e051      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014252:	697b      	ldr	r3, [r7, #20]
 8014254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014258:	2b00      	cmp	r3, #0
 801425a:	d002      	beq.n	8014262 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801425c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014260:	e049      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8014262:	697b      	ldr	r3, [r7, #20]
 8014264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014268:	2b00      	cmp	r3, #0
 801426a:	d002      	beq.n	8014272 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801426c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014270:	e041      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014278:	2b00      	cmp	r3, #0
 801427a:	d002      	beq.n	8014282 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801427c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014280:	e039      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8014282:	697b      	ldr	r3, [r7, #20]
 8014284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014288:	2b00      	cmp	r3, #0
 801428a:	d002      	beq.n	8014292 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801428c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014290:	e031      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014292:	697b      	ldr	r3, [r7, #20]
 8014294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014298:	2b00      	cmp	r3, #0
 801429a:	d002      	beq.n	80142a2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801429c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80142a0:	e029      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80142a2:	697b      	ldr	r3, [r7, #20]
 80142a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d002      	beq.n	80142b2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80142ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80142b0:	e021      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80142b2:	697b      	ldr	r3, [r7, #20]
 80142b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d002      	beq.n	80142c2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80142bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80142c0:	e019      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d002      	beq.n	80142d2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80142cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80142d0:	e011      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80142d2:	697b      	ldr	r3, [r7, #20]
 80142d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d002      	beq.n	80142e2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80142dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80142e0:	e009      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80142e2:	697b      	ldr	r3, [r7, #20]
 80142e4:	f003 0308 	and.w	r3, r3, #8
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d002      	beq.n	80142f2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80142ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80142f0:	e001      	b.n	80142f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80142f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80142f6:	4618      	mov	r0, r3
 80142f8:	3720      	adds	r7, #32
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd80      	pop	{r7, pc}
 80142fe:	bf00      	nop
 8014300:	20000008 	.word	0x20000008
 8014304:	10624dd3 	.word	0x10624dd3
 8014308:	fdffe008 	.word	0xfdffe008

0801430c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 801430c:	b480      	push	{r7}
 801430e:	b085      	sub	sp, #20
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014314:	4b1f      	ldr	r3, [pc, #124]	; (8014394 <SDMMC_GetCmdResp2+0x88>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	4a1f      	ldr	r2, [pc, #124]	; (8014398 <SDMMC_GetCmdResp2+0x8c>)
 801431a:	fba2 2303 	umull	r2, r3, r2, r3
 801431e:	0a5b      	lsrs	r3, r3, #9
 8014320:	f241 3288 	movw	r2, #5000	; 0x1388
 8014324:	fb02 f303 	mul.w	r3, r2, r3
 8014328:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	1e5a      	subs	r2, r3, #1
 801432e:	60fa      	str	r2, [r7, #12]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d102      	bne.n	801433a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014334:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014338:	e026      	b.n	8014388 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801433e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8014346:	2b00      	cmp	r3, #0
 8014348:	d0ef      	beq.n	801432a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801434a:	68bb      	ldr	r3, [r7, #8]
 801434c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014350:	2b00      	cmp	r3, #0
 8014352:	d1ea      	bne.n	801432a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014358:	f003 0304 	and.w	r3, r3, #4
 801435c:	2b00      	cmp	r3, #0
 801435e:	d004      	beq.n	801436a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2204      	movs	r2, #4
 8014364:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014366:	2304      	movs	r3, #4
 8014368:	e00e      	b.n	8014388 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801436e:	f003 0301 	and.w	r3, r3, #1
 8014372:	2b00      	cmp	r3, #0
 8014374:	d004      	beq.n	8014380 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	2201      	movs	r2, #1
 801437a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801437c:	2301      	movs	r3, #1
 801437e:	e003      	b.n	8014388 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	22c5      	movs	r2, #197	; 0xc5
 8014384:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014386:	2300      	movs	r3, #0
}
 8014388:	4618      	mov	r0, r3
 801438a:	3714      	adds	r7, #20
 801438c:	46bd      	mov	sp, r7
 801438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014392:	4770      	bx	lr
 8014394:	20000008 	.word	0x20000008
 8014398:	10624dd3 	.word	0x10624dd3

0801439c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 801439c:	b480      	push	{r7}
 801439e:	b085      	sub	sp, #20
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80143a4:	4b1a      	ldr	r3, [pc, #104]	; (8014410 <SDMMC_GetCmdResp3+0x74>)
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	4a1a      	ldr	r2, [pc, #104]	; (8014414 <SDMMC_GetCmdResp3+0x78>)
 80143aa:	fba2 2303 	umull	r2, r3, r2, r3
 80143ae:	0a5b      	lsrs	r3, r3, #9
 80143b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80143b4:	fb02 f303 	mul.w	r3, r2, r3
 80143b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	1e5a      	subs	r2, r3, #1
 80143be:	60fa      	str	r2, [r7, #12]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d102      	bne.n	80143ca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80143c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80143c8:	e01b      	b.n	8014402 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d0ef      	beq.n	80143ba <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80143da:	68bb      	ldr	r3, [r7, #8]
 80143dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d1ea      	bne.n	80143ba <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143e8:	f003 0304 	and.w	r3, r3, #4
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d004      	beq.n	80143fa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	2204      	movs	r2, #4
 80143f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80143f6:	2304      	movs	r3, #4
 80143f8:	e003      	b.n	8014402 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	22c5      	movs	r2, #197	; 0xc5
 80143fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8014400:	2300      	movs	r3, #0
}
 8014402:	4618      	mov	r0, r3
 8014404:	3714      	adds	r7, #20
 8014406:	46bd      	mov	sp, r7
 8014408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440c:	4770      	bx	lr
 801440e:	bf00      	nop
 8014410:	20000008 	.word	0x20000008
 8014414:	10624dd3 	.word	0x10624dd3

08014418 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b088      	sub	sp, #32
 801441c:	af00      	add	r7, sp, #0
 801441e:	60f8      	str	r0, [r7, #12]
 8014420:	460b      	mov	r3, r1
 8014422:	607a      	str	r2, [r7, #4]
 8014424:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014426:	4b35      	ldr	r3, [pc, #212]	; (80144fc <SDMMC_GetCmdResp6+0xe4>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	4a35      	ldr	r2, [pc, #212]	; (8014500 <SDMMC_GetCmdResp6+0xe8>)
 801442c:	fba2 2303 	umull	r2, r3, r2, r3
 8014430:	0a5b      	lsrs	r3, r3, #9
 8014432:	f241 3288 	movw	r2, #5000	; 0x1388
 8014436:	fb02 f303 	mul.w	r3, r2, r3
 801443a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 801443c:	69fb      	ldr	r3, [r7, #28]
 801443e:	1e5a      	subs	r2, r3, #1
 8014440:	61fa      	str	r2, [r7, #28]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d102      	bne.n	801444c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014446:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801444a:	e052      	b.n	80144f2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014450:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014452:	69bb      	ldr	r3, [r7, #24]
 8014454:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8014458:	2b00      	cmp	r3, #0
 801445a:	d0ef      	beq.n	801443c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801445c:	69bb      	ldr	r3, [r7, #24]
 801445e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014462:	2b00      	cmp	r3, #0
 8014464:	d1ea      	bne.n	801443c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801446a:	f003 0304 	and.w	r3, r3, #4
 801446e:	2b00      	cmp	r3, #0
 8014470:	d004      	beq.n	801447c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	2204      	movs	r2, #4
 8014476:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014478:	2304      	movs	r3, #4
 801447a:	e03a      	b.n	80144f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014480:	f003 0301 	and.w	r3, r3, #1
 8014484:	2b00      	cmp	r3, #0
 8014486:	d004      	beq.n	8014492 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	2201      	movs	r2, #1
 801448c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801448e:	2301      	movs	r3, #1
 8014490:	e02f      	b.n	80144f2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8014492:	68f8      	ldr	r0, [r7, #12]
 8014494:	f7ff fba0 	bl	8013bd8 <SDIO_GetCommandResponse>
 8014498:	4603      	mov	r3, r0
 801449a:	461a      	mov	r2, r3
 801449c:	7afb      	ldrb	r3, [r7, #11]
 801449e:	4293      	cmp	r3, r2
 80144a0:	d001      	beq.n	80144a6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80144a2:	2301      	movs	r3, #1
 80144a4:	e025      	b.n	80144f2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	22c5      	movs	r2, #197	; 0xc5
 80144aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80144ac:	2100      	movs	r1, #0
 80144ae:	68f8      	ldr	r0, [r7, #12]
 80144b0:	f7ff fb9f 	bl	8013bf2 <SDIO_GetResponse>
 80144b4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80144b6:	697b      	ldr	r3, [r7, #20]
 80144b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d106      	bne.n	80144ce <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80144c0:	697b      	ldr	r3, [r7, #20]
 80144c2:	0c1b      	lsrs	r3, r3, #16
 80144c4:	b29a      	uxth	r2, r3
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80144ca:	2300      	movs	r3, #0
 80144cc:	e011      	b.n	80144f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80144ce:	697b      	ldr	r3, [r7, #20]
 80144d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d002      	beq.n	80144de <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80144d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80144dc:	e009      	b.n	80144f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80144de:	697b      	ldr	r3, [r7, #20]
 80144e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d002      	beq.n	80144ee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80144e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80144ec:	e001      	b.n	80144f2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80144ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80144f2:	4618      	mov	r0, r3
 80144f4:	3720      	adds	r7, #32
 80144f6:	46bd      	mov	sp, r7
 80144f8:	bd80      	pop	{r7, pc}
 80144fa:	bf00      	nop
 80144fc:	20000008 	.word	0x20000008
 8014500:	10624dd3 	.word	0x10624dd3

08014504 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8014504:	b480      	push	{r7}
 8014506:	b085      	sub	sp, #20
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801450c:	4b22      	ldr	r3, [pc, #136]	; (8014598 <SDMMC_GetCmdResp7+0x94>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	4a22      	ldr	r2, [pc, #136]	; (801459c <SDMMC_GetCmdResp7+0x98>)
 8014512:	fba2 2303 	umull	r2, r3, r2, r3
 8014516:	0a5b      	lsrs	r3, r3, #9
 8014518:	f241 3288 	movw	r2, #5000	; 0x1388
 801451c:	fb02 f303 	mul.w	r3, r2, r3
 8014520:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	1e5a      	subs	r2, r3, #1
 8014526:	60fa      	str	r2, [r7, #12]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d102      	bne.n	8014532 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801452c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014530:	e02c      	b.n	801458c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014536:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801453e:	2b00      	cmp	r3, #0
 8014540:	d0ef      	beq.n	8014522 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014548:	2b00      	cmp	r3, #0
 801454a:	d1ea      	bne.n	8014522 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014550:	f003 0304 	and.w	r3, r3, #4
 8014554:	2b00      	cmp	r3, #0
 8014556:	d004      	beq.n	8014562 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	2204      	movs	r2, #4
 801455c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801455e:	2304      	movs	r3, #4
 8014560:	e014      	b.n	801458c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014566:	f003 0301 	and.w	r3, r3, #1
 801456a:	2b00      	cmp	r3, #0
 801456c:	d004      	beq.n	8014578 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	2201      	movs	r2, #1
 8014572:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014574:	2301      	movs	r3, #1
 8014576:	e009      	b.n	801458c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801457c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014580:	2b00      	cmp	r3, #0
 8014582:	d002      	beq.n	801458a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	2240      	movs	r2, #64	; 0x40
 8014588:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801458a:	2300      	movs	r3, #0
  
}
 801458c:	4618      	mov	r0, r3
 801458e:	3714      	adds	r7, #20
 8014590:	46bd      	mov	sp, r7
 8014592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014596:	4770      	bx	lr
 8014598:	20000008 	.word	0x20000008
 801459c:	10624dd3 	.word	0x10624dd3

080145a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80145a4:	4904      	ldr	r1, [pc, #16]	; (80145b8 <MX_FATFS_Init+0x18>)
 80145a6:	4805      	ldr	r0, [pc, #20]	; (80145bc <MX_FATFS_Init+0x1c>)
 80145a8:	f002 fe3c 	bl	8017224 <FATFS_LinkDriver>
 80145ac:	4603      	mov	r3, r0
 80145ae:	461a      	mov	r2, r3
 80145b0:	4b03      	ldr	r3, [pc, #12]	; (80145c0 <MX_FATFS_Init+0x20>)
 80145b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80145b4:	bf00      	nop
 80145b6:	bd80      	pop	{r7, pc}
 80145b8:	20000fb4 	.word	0x20000fb4
 80145bc:	08021674 	.word	0x08021674
 80145c0:	20000fb0 	.word	0x20000fb0

080145c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80145c4:	b480      	push	{r7}
 80145c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80145c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	46bd      	mov	sp, r7
 80145ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d2:	4770      	bx	lr

080145d4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b082      	sub	sp, #8
 80145d8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80145da:	2300      	movs	r3, #0
 80145dc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80145de:	f000 f896 	bl	801470e <BSP_SD_IsDetected>
 80145e2:	4603      	mov	r3, r0
 80145e4:	2b01      	cmp	r3, #1
 80145e6:	d001      	beq.n	80145ec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80145e8:	2301      	movs	r3, #1
 80145ea:	e012      	b.n	8014612 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80145ec:	480b      	ldr	r0, [pc, #44]	; (801461c <BSP_SD_Init+0x48>)
 80145ee:	f7fc fe1c 	bl	801122a <HAL_SD_Init>
 80145f2:	4603      	mov	r3, r0
 80145f4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80145f6:	79fb      	ldrb	r3, [r7, #7]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d109      	bne.n	8014610 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80145fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8014600:	4806      	ldr	r0, [pc, #24]	; (801461c <BSP_SD_Init+0x48>)
 8014602:	f7fd fbe9 	bl	8011dd8 <HAL_SD_ConfigWideBusOperation>
 8014606:	4603      	mov	r3, r0
 8014608:	2b00      	cmp	r3, #0
 801460a:	d001      	beq.n	8014610 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801460c:	2301      	movs	r3, #1
 801460e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014610:	79fb      	ldrb	r3, [r7, #7]
}
 8014612:	4618      	mov	r0, r3
 8014614:	3708      	adds	r7, #8
 8014616:	46bd      	mov	sp, r7
 8014618:	bd80      	pop	{r7, pc}
 801461a:	bf00      	nop
 801461c:	20000388 	.word	0x20000388

08014620 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b086      	sub	sp, #24
 8014624:	af00      	add	r7, sp, #0
 8014626:	60f8      	str	r0, [r7, #12]
 8014628:	60b9      	str	r1, [r7, #8]
 801462a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801462c:	2300      	movs	r3, #0
 801462e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	68ba      	ldr	r2, [r7, #8]
 8014634:	68f9      	ldr	r1, [r7, #12]
 8014636:	4806      	ldr	r0, [pc, #24]	; (8014650 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014638:	f7fc fea6 	bl	8011388 <HAL_SD_ReadBlocks_DMA>
 801463c:	4603      	mov	r3, r0
 801463e:	2b00      	cmp	r3, #0
 8014640:	d001      	beq.n	8014646 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014642:	2301      	movs	r3, #1
 8014644:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014646:	7dfb      	ldrb	r3, [r7, #23]
}
 8014648:	4618      	mov	r0, r3
 801464a:	3718      	adds	r7, #24
 801464c:	46bd      	mov	sp, r7
 801464e:	bd80      	pop	{r7, pc}
 8014650:	20000388 	.word	0x20000388

08014654 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b086      	sub	sp, #24
 8014658:	af00      	add	r7, sp, #0
 801465a:	60f8      	str	r0, [r7, #12]
 801465c:	60b9      	str	r1, [r7, #8]
 801465e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014660:	2300      	movs	r3, #0
 8014662:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	68ba      	ldr	r2, [r7, #8]
 8014668:	68f9      	ldr	r1, [r7, #12]
 801466a:	4806      	ldr	r0, [pc, #24]	; (8014684 <BSP_SD_WriteBlocks_DMA+0x30>)
 801466c:	f7fc ff6e 	bl	801154c <HAL_SD_WriteBlocks_DMA>
 8014670:	4603      	mov	r3, r0
 8014672:	2b00      	cmp	r3, #0
 8014674:	d001      	beq.n	801467a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014676:	2301      	movs	r3, #1
 8014678:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801467a:	7dfb      	ldrb	r3, [r7, #23]
}
 801467c:	4618      	mov	r0, r3
 801467e:	3718      	adds	r7, #24
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}
 8014684:	20000388 	.word	0x20000388

08014688 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801468c:	4805      	ldr	r0, [pc, #20]	; (80146a4 <BSP_SD_GetCardState+0x1c>)
 801468e:	f7fd fc3d 	bl	8011f0c <HAL_SD_GetCardState>
 8014692:	4603      	mov	r3, r0
 8014694:	2b04      	cmp	r3, #4
 8014696:	bf14      	ite	ne
 8014698:	2301      	movne	r3, #1
 801469a:	2300      	moveq	r3, #0
 801469c:	b2db      	uxtb	r3, r3
}
 801469e:	4618      	mov	r0, r3
 80146a0:	bd80      	pop	{r7, pc}
 80146a2:	bf00      	nop
 80146a4:	20000388 	.word	0x20000388

080146a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b082      	sub	sp, #8
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80146b0:	6879      	ldr	r1, [r7, #4]
 80146b2:	4803      	ldr	r0, [pc, #12]	; (80146c0 <BSP_SD_GetCardInfo+0x18>)
 80146b4:	f7fd fb64 	bl	8011d80 <HAL_SD_GetCardInfo>
}
 80146b8:	bf00      	nop
 80146ba:	3708      	adds	r7, #8
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd80      	pop	{r7, pc}
 80146c0:	20000388 	.word	0x20000388

080146c4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b082      	sub	sp, #8
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80146cc:	f000 f818 	bl	8014700 <BSP_SD_AbortCallback>
}
 80146d0:	bf00      	nop
 80146d2:	3708      	adds	r7, #8
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}

080146d8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b082      	sub	sp, #8
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80146e0:	f000 f9b4 	bl	8014a4c <BSP_SD_WriteCpltCallback>
}
 80146e4:	bf00      	nop
 80146e6:	3708      	adds	r7, #8
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bd80      	pop	{r7, pc}

080146ec <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b082      	sub	sp, #8
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80146f4:	f000 f9bc 	bl	8014a70 <BSP_SD_ReadCpltCallback>
}
 80146f8:	bf00      	nop
 80146fa:	3708      	adds	r7, #8
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}

08014700 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8014700:	b480      	push	{r7}
 8014702:	af00      	add	r7, sp, #0

}
 8014704:	bf00      	nop
 8014706:	46bd      	mov	sp, r7
 8014708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470c:	4770      	bx	lr

0801470e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801470e:	b580      	push	{r7, lr}
 8014710:	b082      	sub	sp, #8
 8014712:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8014714:	2301      	movs	r3, #1
 8014716:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8014718:	f000 f80c 	bl	8014734 <BSP_PlatformIsDetected>
 801471c:	4603      	mov	r3, r0
 801471e:	2b00      	cmp	r3, #0
 8014720:	d101      	bne.n	8014726 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014722:	2300      	movs	r3, #0
 8014724:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014726:	79fb      	ldrb	r3, [r7, #7]
 8014728:	b2db      	uxtb	r3, r3
}
 801472a:	4618      	mov	r0, r3
 801472c:	3708      	adds	r7, #8
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}
	...

08014734 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801473a:	2301      	movs	r3, #1
 801473c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801473e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014742:	4806      	ldr	r0, [pc, #24]	; (801475c <BSP_PlatformIsDetected+0x28>)
 8014744:	f7fb fc5a 	bl	800fffc <HAL_GPIO_ReadPin>
 8014748:	4603      	mov	r3, r0
 801474a:	2b00      	cmp	r3, #0
 801474c:	d001      	beq.n	8014752 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801474e:	2300      	movs	r3, #0
 8014750:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014752:	79fb      	ldrb	r3, [r7, #7]
}
 8014754:	4618      	mov	r0, r3
 8014756:	3708      	adds	r7, #8
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}
 801475c:	40020000 	.word	0x40020000

08014760 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b084      	sub	sp, #16
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8014768:	f002 fe98 	bl	801749c <osKernelGetTickCount>
 801476c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 801476e:	e006      	b.n	801477e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014770:	f7ff ff8a 	bl	8014688 <BSP_SD_GetCardState>
 8014774:	4603      	mov	r3, r0
 8014776:	2b00      	cmp	r3, #0
 8014778:	d101      	bne.n	801477e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801477a:	2300      	movs	r3, #0
 801477c:	e009      	b.n	8014792 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 801477e:	f002 fe8d 	bl	801749c <osKernelGetTickCount>
 8014782:	4602      	mov	r2, r0
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	1ad3      	subs	r3, r2, r3
 8014788:	687a      	ldr	r2, [r7, #4]
 801478a:	429a      	cmp	r2, r3
 801478c:	d8f0      	bhi.n	8014770 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801478e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014792:	4618      	mov	r0, r3
 8014794:	3710      	adds	r7, #16
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}
	...

0801479c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801479c:	b580      	push	{r7, lr}
 801479e:	b082      	sub	sp, #8
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	4603      	mov	r3, r0
 80147a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80147a6:	4b0b      	ldr	r3, [pc, #44]	; (80147d4 <SD_CheckStatus+0x38>)
 80147a8:	2201      	movs	r2, #1
 80147aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80147ac:	f7ff ff6c 	bl	8014688 <BSP_SD_GetCardState>
 80147b0:	4603      	mov	r3, r0
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d107      	bne.n	80147c6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80147b6:	4b07      	ldr	r3, [pc, #28]	; (80147d4 <SD_CheckStatus+0x38>)
 80147b8:	781b      	ldrb	r3, [r3, #0]
 80147ba:	b2db      	uxtb	r3, r3
 80147bc:	f023 0301 	bic.w	r3, r3, #1
 80147c0:	b2da      	uxtb	r2, r3
 80147c2:	4b04      	ldr	r3, [pc, #16]	; (80147d4 <SD_CheckStatus+0x38>)
 80147c4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80147c6:	4b03      	ldr	r3, [pc, #12]	; (80147d4 <SD_CheckStatus+0x38>)
 80147c8:	781b      	ldrb	r3, [r3, #0]
 80147ca:	b2db      	uxtb	r3, r3
}
 80147cc:	4618      	mov	r0, r3
 80147ce:	3708      	adds	r7, #8
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bd80      	pop	{r7, pc}
 80147d4:	20000011 	.word	0x20000011

080147d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b082      	sub	sp, #8
 80147dc:	af00      	add	r7, sp, #0
 80147de:	4603      	mov	r3, r0
 80147e0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80147e2:	4b1c      	ldr	r3, [pc, #112]	; (8014854 <SD_initialize+0x7c>)
 80147e4:	2201      	movs	r2, #1
 80147e6:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 80147e8:	f002 fe10 	bl	801740c <osKernelGetState>
 80147ec:	4603      	mov	r3, r0
 80147ee:	2b02      	cmp	r3, #2
 80147f0:	d129      	bne.n	8014846 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80147f2:	f7ff feef 	bl	80145d4 <BSP_SD_Init>
 80147f6:	4603      	mov	r3, r0
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d107      	bne.n	801480c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80147fc:	79fb      	ldrb	r3, [r7, #7]
 80147fe:	4618      	mov	r0, r3
 8014800:	f7ff ffcc 	bl	801479c <SD_CheckStatus>
 8014804:	4603      	mov	r3, r0
 8014806:	461a      	mov	r2, r3
 8014808:	4b12      	ldr	r3, [pc, #72]	; (8014854 <SD_initialize+0x7c>)
 801480a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 801480c:	4b11      	ldr	r3, [pc, #68]	; (8014854 <SD_initialize+0x7c>)
 801480e:	781b      	ldrb	r3, [r3, #0]
 8014810:	b2db      	uxtb	r3, r3
 8014812:	2b01      	cmp	r3, #1
 8014814:	d017      	beq.n	8014846 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8014816:	4b10      	ldr	r3, [pc, #64]	; (8014858 <SD_initialize+0x80>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d107      	bne.n	801482e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 801481e:	2200      	movs	r2, #0
 8014820:	2102      	movs	r1, #2
 8014822:	200a      	movs	r0, #10
 8014824:	f003 f8aa 	bl	801797c <osMessageQueueNew>
 8014828:	4603      	mov	r3, r0
 801482a:	4a0b      	ldr	r2, [pc, #44]	; (8014858 <SD_initialize+0x80>)
 801482c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 801482e:	4b0a      	ldr	r3, [pc, #40]	; (8014858 <SD_initialize+0x80>)
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d107      	bne.n	8014846 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8014836:	4b07      	ldr	r3, [pc, #28]	; (8014854 <SD_initialize+0x7c>)
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	b2db      	uxtb	r3, r3
 801483c:	f043 0301 	orr.w	r3, r3, #1
 8014840:	b2da      	uxtb	r2, r3
 8014842:	4b04      	ldr	r3, [pc, #16]	; (8014854 <SD_initialize+0x7c>)
 8014844:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8014846:	4b03      	ldr	r3, [pc, #12]	; (8014854 <SD_initialize+0x7c>)
 8014848:	781b      	ldrb	r3, [r3, #0]
 801484a:	b2db      	uxtb	r3, r3
}
 801484c:	4618      	mov	r0, r3
 801484e:	3708      	adds	r7, #8
 8014850:	46bd      	mov	sp, r7
 8014852:	bd80      	pop	{r7, pc}
 8014854:	20000011 	.word	0x20000011
 8014858:	20000fb8 	.word	0x20000fb8

0801485c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b082      	sub	sp, #8
 8014860:	af00      	add	r7, sp, #0
 8014862:	4603      	mov	r3, r0
 8014864:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014866:	79fb      	ldrb	r3, [r7, #7]
 8014868:	4618      	mov	r0, r3
 801486a:	f7ff ff97 	bl	801479c <SD_CheckStatus>
 801486e:	4603      	mov	r3, r0
}
 8014870:	4618      	mov	r0, r3
 8014872:	3708      	adds	r7, #8
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}

08014878 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b088      	sub	sp, #32
 801487c:	af00      	add	r7, sp, #0
 801487e:	60b9      	str	r1, [r7, #8]
 8014880:	607a      	str	r2, [r7, #4]
 8014882:	603b      	str	r3, [r7, #0]
 8014884:	4603      	mov	r3, r0
 8014886:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014888:	2301      	movs	r3, #1
 801488a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801488c:	f247 5030 	movw	r0, #30000	; 0x7530
 8014890:	f7ff ff66 	bl	8014760 <SD_CheckStatusWithTimeout>
 8014894:	4603      	mov	r3, r0
 8014896:	2b00      	cmp	r3, #0
 8014898:	da01      	bge.n	801489e <SD_read+0x26>
  {
    return res;
 801489a:	7ffb      	ldrb	r3, [r7, #31]
 801489c:	e02f      	b.n	80148fe <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801489e:	683a      	ldr	r2, [r7, #0]
 80148a0:	6879      	ldr	r1, [r7, #4]
 80148a2:	68b8      	ldr	r0, [r7, #8]
 80148a4:	f7ff febc 	bl	8014620 <BSP_SD_ReadBlocks_DMA>
 80148a8:	4603      	mov	r3, r0
 80148aa:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80148ac:	7fbb      	ldrb	r3, [r7, #30]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d124      	bne.n	80148fc <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80148b2:	4b15      	ldr	r3, [pc, #84]	; (8014908 <SD_read+0x90>)
 80148b4:	6818      	ldr	r0, [r3, #0]
 80148b6:	f107 0112 	add.w	r1, r7, #18
 80148ba:	f247 5330 	movw	r3, #30000	; 0x7530
 80148be:	2200      	movs	r2, #0
 80148c0:	f003 f930 	bl	8017b24 <osMessageQueueGet>
 80148c4:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 80148c6:	69bb      	ldr	r3, [r7, #24]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d117      	bne.n	80148fc <SD_read+0x84>
 80148cc:	8a7b      	ldrh	r3, [r7, #18]
 80148ce:	2b01      	cmp	r3, #1
 80148d0:	d114      	bne.n	80148fc <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 80148d2:	f002 fde3 	bl	801749c <osKernelGetTickCount>
 80148d6:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80148d8:	e007      	b.n	80148ea <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80148da:	f7ff fed5 	bl	8014688 <BSP_SD_GetCardState>
 80148de:	4603      	mov	r3, r0
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d102      	bne.n	80148ea <SD_read+0x72>
              {
                res = RES_OK;
 80148e4:	2300      	movs	r3, #0
 80148e6:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80148e8:	e008      	b.n	80148fc <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80148ea:	f002 fdd7 	bl	801749c <osKernelGetTickCount>
 80148ee:	4602      	mov	r2, r0
 80148f0:	697b      	ldr	r3, [r7, #20]
 80148f2:	1ad3      	subs	r3, r2, r3
 80148f4:	f247 522f 	movw	r2, #29999	; 0x752f
 80148f8:	4293      	cmp	r3, r2
 80148fa:	d9ee      	bls.n	80148da <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80148fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80148fe:	4618      	mov	r0, r3
 8014900:	3720      	adds	r7, #32
 8014902:	46bd      	mov	sp, r7
 8014904:	bd80      	pop	{r7, pc}
 8014906:	bf00      	nop
 8014908:	20000fb8 	.word	0x20000fb8

0801490c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b088      	sub	sp, #32
 8014910:	af00      	add	r7, sp, #0
 8014912:	60b9      	str	r1, [r7, #8]
 8014914:	607a      	str	r2, [r7, #4]
 8014916:	603b      	str	r3, [r7, #0]
 8014918:	4603      	mov	r3, r0
 801491a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801491c:	2301      	movs	r3, #1
 801491e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014920:	f247 5030 	movw	r0, #30000	; 0x7530
 8014924:	f7ff ff1c 	bl	8014760 <SD_CheckStatusWithTimeout>
 8014928:	4603      	mov	r3, r0
 801492a:	2b00      	cmp	r3, #0
 801492c:	da01      	bge.n	8014932 <SD_write+0x26>
  {
    return res;
 801492e:	7ffb      	ldrb	r3, [r7, #31]
 8014930:	e02d      	b.n	801498e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014932:	683a      	ldr	r2, [r7, #0]
 8014934:	6879      	ldr	r1, [r7, #4]
 8014936:	68b8      	ldr	r0, [r7, #8]
 8014938:	f7ff fe8c 	bl	8014654 <BSP_SD_WriteBlocks_DMA>
 801493c:	4603      	mov	r3, r0
 801493e:	2b00      	cmp	r3, #0
 8014940:	d124      	bne.n	801498c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8014942:	4b15      	ldr	r3, [pc, #84]	; (8014998 <SD_write+0x8c>)
 8014944:	6818      	ldr	r0, [r3, #0]
 8014946:	f107 0112 	add.w	r1, r7, #18
 801494a:	f247 5330 	movw	r3, #30000	; 0x7530
 801494e:	2200      	movs	r2, #0
 8014950:	f003 f8e8 	bl	8017b24 <osMessageQueueGet>
 8014954:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8014956:	69bb      	ldr	r3, [r7, #24]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d117      	bne.n	801498c <SD_write+0x80>
 801495c:	8a7b      	ldrh	r3, [r7, #18]
 801495e:	2b02      	cmp	r3, #2
 8014960:	d114      	bne.n	801498c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8014962:	f002 fd9b 	bl	801749c <osKernelGetTickCount>
 8014966:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8014968:	e007      	b.n	801497a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801496a:	f7ff fe8d 	bl	8014688 <BSP_SD_GetCardState>
 801496e:	4603      	mov	r3, r0
 8014970:	2b00      	cmp	r3, #0
 8014972:	d102      	bne.n	801497a <SD_write+0x6e>
          {
            res = RES_OK;
 8014974:	2300      	movs	r3, #0
 8014976:	77fb      	strb	r3, [r7, #31]
            break;
 8014978:	e008      	b.n	801498c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 801497a:	f002 fd8f 	bl	801749c <osKernelGetTickCount>
 801497e:	4602      	mov	r2, r0
 8014980:	697b      	ldr	r3, [r7, #20]
 8014982:	1ad3      	subs	r3, r2, r3
 8014984:	f247 522f 	movw	r2, #29999	; 0x752f
 8014988:	4293      	cmp	r3, r2
 801498a:	d9ee      	bls.n	801496a <SD_write+0x5e>
    }

  }
#endif

  return res;
 801498c:	7ffb      	ldrb	r3, [r7, #31]
}
 801498e:	4618      	mov	r0, r3
 8014990:	3720      	adds	r7, #32
 8014992:	46bd      	mov	sp, r7
 8014994:	bd80      	pop	{r7, pc}
 8014996:	bf00      	nop
 8014998:	20000fb8 	.word	0x20000fb8

0801499c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b08c      	sub	sp, #48	; 0x30
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	4603      	mov	r3, r0
 80149a4:	603a      	str	r2, [r7, #0]
 80149a6:	71fb      	strb	r3, [r7, #7]
 80149a8:	460b      	mov	r3, r1
 80149aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80149ac:	2301      	movs	r3, #1
 80149ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80149b2:	4b25      	ldr	r3, [pc, #148]	; (8014a48 <SD_ioctl+0xac>)
 80149b4:	781b      	ldrb	r3, [r3, #0]
 80149b6:	b2db      	uxtb	r3, r3
 80149b8:	f003 0301 	and.w	r3, r3, #1
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d001      	beq.n	80149c4 <SD_ioctl+0x28>
 80149c0:	2303      	movs	r3, #3
 80149c2:	e03c      	b.n	8014a3e <SD_ioctl+0xa2>

  switch (cmd)
 80149c4:	79bb      	ldrb	r3, [r7, #6]
 80149c6:	2b03      	cmp	r3, #3
 80149c8:	d834      	bhi.n	8014a34 <SD_ioctl+0x98>
 80149ca:	a201      	add	r2, pc, #4	; (adr r2, 80149d0 <SD_ioctl+0x34>)
 80149cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149d0:	080149e1 	.word	0x080149e1
 80149d4:	080149e9 	.word	0x080149e9
 80149d8:	08014a01 	.word	0x08014a01
 80149dc:	08014a1b 	.word	0x08014a1b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80149e0:	2300      	movs	r3, #0
 80149e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80149e6:	e028      	b.n	8014a3a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80149e8:	f107 030c 	add.w	r3, r7, #12
 80149ec:	4618      	mov	r0, r3
 80149ee:	f7ff fe5b 	bl	80146a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80149f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149f4:	683b      	ldr	r3, [r7, #0]
 80149f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80149f8:	2300      	movs	r3, #0
 80149fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80149fe:	e01c      	b.n	8014a3a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014a00:	f107 030c 	add.w	r3, r7, #12
 8014a04:	4618      	mov	r0, r3
 8014a06:	f7ff fe4f 	bl	80146a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a0c:	b29a      	uxth	r2, r3
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014a12:	2300      	movs	r3, #0
 8014a14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014a18:	e00f      	b.n	8014a3a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014a1a:	f107 030c 	add.w	r3, r7, #12
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f7ff fe42 	bl	80146a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a26:	0a5a      	lsrs	r2, r3, #9
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014a32:	e002      	b.n	8014a3a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014a34:	2304      	movs	r3, #4
 8014a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014a3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3730      	adds	r7, #48	; 0x30
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}
 8014a46:	bf00      	nop
 8014a48:	20000011 	.word	0x20000011

08014a4c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b082      	sub	sp, #8
 8014a50:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8014a52:	2302      	movs	r3, #2
 8014a54:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8014a56:	4b05      	ldr	r3, [pc, #20]	; (8014a6c <BSP_SD_WriteCpltCallback+0x20>)
 8014a58:	6818      	ldr	r0, [r3, #0]
 8014a5a:	1db9      	adds	r1, r7, #6
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	2200      	movs	r2, #0
 8014a60:	f003 f800 	bl	8017a64 <osMessageQueuePut>
#endif
}
 8014a64:	bf00      	nop
 8014a66:	3708      	adds	r7, #8
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	bd80      	pop	{r7, pc}
 8014a6c:	20000fb8 	.word	0x20000fb8

08014a70 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b082      	sub	sp, #8
 8014a74:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8014a76:	2301      	movs	r3, #1
 8014a78:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8014a7a:	4b05      	ldr	r3, [pc, #20]	; (8014a90 <BSP_SD_ReadCpltCallback+0x20>)
 8014a7c:	6818      	ldr	r0, [r3, #0]
 8014a7e:	1db9      	adds	r1, r7, #6
 8014a80:	2300      	movs	r3, #0
 8014a82:	2200      	movs	r2, #0
 8014a84:	f002 ffee 	bl	8017a64 <osMessageQueuePut>
#endif
}
 8014a88:	bf00      	nop
 8014a8a:	3708      	adds	r7, #8
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd80      	pop	{r7, pc}
 8014a90:	20000fb8 	.word	0x20000fb8

08014a94 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b084      	sub	sp, #16
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8014a9e:	79fb      	ldrb	r3, [r7, #7]
 8014aa0:	4a08      	ldr	r2, [pc, #32]	; (8014ac4 <disk_status+0x30>)
 8014aa2:	009b      	lsls	r3, r3, #2
 8014aa4:	4413      	add	r3, r2
 8014aa6:	685b      	ldr	r3, [r3, #4]
 8014aa8:	685b      	ldr	r3, [r3, #4]
 8014aaa:	79fa      	ldrb	r2, [r7, #7]
 8014aac:	4905      	ldr	r1, [pc, #20]	; (8014ac4 <disk_status+0x30>)
 8014aae:	440a      	add	r2, r1
 8014ab0:	7a12      	ldrb	r2, [r2, #8]
 8014ab2:	4610      	mov	r0, r2
 8014ab4:	4798      	blx	r3
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8014aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8014abc:	4618      	mov	r0, r3
 8014abe:	3710      	adds	r7, #16
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd80      	pop	{r7, pc}
 8014ac4:	20000fe4 	.word	0x20000fe4

08014ac8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b084      	sub	sp, #16
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	4603      	mov	r3, r0
 8014ad0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014ad6:	79fb      	ldrb	r3, [r7, #7]
 8014ad8:	4a0d      	ldr	r2, [pc, #52]	; (8014b10 <disk_initialize+0x48>)
 8014ada:	5cd3      	ldrb	r3, [r2, r3]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d111      	bne.n	8014b04 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8014ae0:	79fb      	ldrb	r3, [r7, #7]
 8014ae2:	4a0b      	ldr	r2, [pc, #44]	; (8014b10 <disk_initialize+0x48>)
 8014ae4:	2101      	movs	r1, #1
 8014ae6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014ae8:	79fb      	ldrb	r3, [r7, #7]
 8014aea:	4a09      	ldr	r2, [pc, #36]	; (8014b10 <disk_initialize+0x48>)
 8014aec:	009b      	lsls	r3, r3, #2
 8014aee:	4413      	add	r3, r2
 8014af0:	685b      	ldr	r3, [r3, #4]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	79fa      	ldrb	r2, [r7, #7]
 8014af6:	4906      	ldr	r1, [pc, #24]	; (8014b10 <disk_initialize+0x48>)
 8014af8:	440a      	add	r2, r1
 8014afa:	7a12      	ldrb	r2, [r2, #8]
 8014afc:	4610      	mov	r0, r2
 8014afe:	4798      	blx	r3
 8014b00:	4603      	mov	r3, r0
 8014b02:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8014b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b06:	4618      	mov	r0, r3
 8014b08:	3710      	adds	r7, #16
 8014b0a:	46bd      	mov	sp, r7
 8014b0c:	bd80      	pop	{r7, pc}
 8014b0e:	bf00      	nop
 8014b10:	20000fe4 	.word	0x20000fe4

08014b14 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014b14:	b590      	push	{r4, r7, lr}
 8014b16:	b087      	sub	sp, #28
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	60b9      	str	r1, [r7, #8]
 8014b1c:	607a      	str	r2, [r7, #4]
 8014b1e:	603b      	str	r3, [r7, #0]
 8014b20:	4603      	mov	r3, r0
 8014b22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014b24:	7bfb      	ldrb	r3, [r7, #15]
 8014b26:	4a0a      	ldr	r2, [pc, #40]	; (8014b50 <disk_read+0x3c>)
 8014b28:	009b      	lsls	r3, r3, #2
 8014b2a:	4413      	add	r3, r2
 8014b2c:	685b      	ldr	r3, [r3, #4]
 8014b2e:	689c      	ldr	r4, [r3, #8]
 8014b30:	7bfb      	ldrb	r3, [r7, #15]
 8014b32:	4a07      	ldr	r2, [pc, #28]	; (8014b50 <disk_read+0x3c>)
 8014b34:	4413      	add	r3, r2
 8014b36:	7a18      	ldrb	r0, [r3, #8]
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	687a      	ldr	r2, [r7, #4]
 8014b3c:	68b9      	ldr	r1, [r7, #8]
 8014b3e:	47a0      	blx	r4
 8014b40:	4603      	mov	r3, r0
 8014b42:	75fb      	strb	r3, [r7, #23]
  return res;
 8014b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b46:	4618      	mov	r0, r3
 8014b48:	371c      	adds	r7, #28
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	bd90      	pop	{r4, r7, pc}
 8014b4e:	bf00      	nop
 8014b50:	20000fe4 	.word	0x20000fe4

08014b54 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8014b54:	b590      	push	{r4, r7, lr}
 8014b56:	b087      	sub	sp, #28
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	60b9      	str	r1, [r7, #8]
 8014b5c:	607a      	str	r2, [r7, #4]
 8014b5e:	603b      	str	r3, [r7, #0]
 8014b60:	4603      	mov	r3, r0
 8014b62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8014b64:	7bfb      	ldrb	r3, [r7, #15]
 8014b66:	4a0a      	ldr	r2, [pc, #40]	; (8014b90 <disk_write+0x3c>)
 8014b68:	009b      	lsls	r3, r3, #2
 8014b6a:	4413      	add	r3, r2
 8014b6c:	685b      	ldr	r3, [r3, #4]
 8014b6e:	68dc      	ldr	r4, [r3, #12]
 8014b70:	7bfb      	ldrb	r3, [r7, #15]
 8014b72:	4a07      	ldr	r2, [pc, #28]	; (8014b90 <disk_write+0x3c>)
 8014b74:	4413      	add	r3, r2
 8014b76:	7a18      	ldrb	r0, [r3, #8]
 8014b78:	683b      	ldr	r3, [r7, #0]
 8014b7a:	687a      	ldr	r2, [r7, #4]
 8014b7c:	68b9      	ldr	r1, [r7, #8]
 8014b7e:	47a0      	blx	r4
 8014b80:	4603      	mov	r3, r0
 8014b82:	75fb      	strb	r3, [r7, #23]
  return res;
 8014b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b86:	4618      	mov	r0, r3
 8014b88:	371c      	adds	r7, #28
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	bd90      	pop	{r4, r7, pc}
 8014b8e:	bf00      	nop
 8014b90:	20000fe4 	.word	0x20000fe4

08014b94 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b084      	sub	sp, #16
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	603a      	str	r2, [r7, #0]
 8014b9e:	71fb      	strb	r3, [r7, #7]
 8014ba0:	460b      	mov	r3, r1
 8014ba2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014ba4:	79fb      	ldrb	r3, [r7, #7]
 8014ba6:	4a09      	ldr	r2, [pc, #36]	; (8014bcc <disk_ioctl+0x38>)
 8014ba8:	009b      	lsls	r3, r3, #2
 8014baa:	4413      	add	r3, r2
 8014bac:	685b      	ldr	r3, [r3, #4]
 8014bae:	691b      	ldr	r3, [r3, #16]
 8014bb0:	79fa      	ldrb	r2, [r7, #7]
 8014bb2:	4906      	ldr	r1, [pc, #24]	; (8014bcc <disk_ioctl+0x38>)
 8014bb4:	440a      	add	r2, r1
 8014bb6:	7a10      	ldrb	r0, [r2, #8]
 8014bb8:	79b9      	ldrb	r1, [r7, #6]
 8014bba:	683a      	ldr	r2, [r7, #0]
 8014bbc:	4798      	blx	r3
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	73fb      	strb	r3, [r7, #15]
  return res;
 8014bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	3710      	adds	r7, #16
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}
 8014bcc:	20000fe4 	.word	0x20000fe4

08014bd0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8014bd0:	b480      	push	{r7}
 8014bd2:	b085      	sub	sp, #20
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	3301      	adds	r3, #1
 8014bdc:	781b      	ldrb	r3, [r3, #0]
 8014bde:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8014be0:	89fb      	ldrh	r3, [r7, #14]
 8014be2:	021b      	lsls	r3, r3, #8
 8014be4:	b21a      	sxth	r2, r3
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	781b      	ldrb	r3, [r3, #0]
 8014bea:	b21b      	sxth	r3, r3
 8014bec:	4313      	orrs	r3, r2
 8014bee:	b21b      	sxth	r3, r3
 8014bf0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8014bf2:	89fb      	ldrh	r3, [r7, #14]
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	3714      	adds	r7, #20
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfe:	4770      	bx	lr

08014c00 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8014c00:	b480      	push	{r7}
 8014c02:	b085      	sub	sp, #20
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	3303      	adds	r3, #3
 8014c0c:	781b      	ldrb	r3, [r3, #0]
 8014c0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	021b      	lsls	r3, r3, #8
 8014c14:	687a      	ldr	r2, [r7, #4]
 8014c16:	3202      	adds	r2, #2
 8014c18:	7812      	ldrb	r2, [r2, #0]
 8014c1a:	4313      	orrs	r3, r2
 8014c1c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	021b      	lsls	r3, r3, #8
 8014c22:	687a      	ldr	r2, [r7, #4]
 8014c24:	3201      	adds	r2, #1
 8014c26:	7812      	ldrb	r2, [r2, #0]
 8014c28:	4313      	orrs	r3, r2
 8014c2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	021b      	lsls	r3, r3, #8
 8014c30:	687a      	ldr	r2, [r7, #4]
 8014c32:	7812      	ldrb	r2, [r2, #0]
 8014c34:	4313      	orrs	r3, r2
 8014c36:	60fb      	str	r3, [r7, #12]
	return rv;
 8014c38:	68fb      	ldr	r3, [r7, #12]
}
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	3714      	adds	r7, #20
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c44:	4770      	bx	lr

08014c46 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8014c46:	b480      	push	{r7}
 8014c48:	b083      	sub	sp, #12
 8014c4a:	af00      	add	r7, sp, #0
 8014c4c:	6078      	str	r0, [r7, #4]
 8014c4e:	460b      	mov	r3, r1
 8014c50:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	1c5a      	adds	r2, r3, #1
 8014c56:	607a      	str	r2, [r7, #4]
 8014c58:	887a      	ldrh	r2, [r7, #2]
 8014c5a:	b2d2      	uxtb	r2, r2
 8014c5c:	701a      	strb	r2, [r3, #0]
 8014c5e:	887b      	ldrh	r3, [r7, #2]
 8014c60:	0a1b      	lsrs	r3, r3, #8
 8014c62:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	1c5a      	adds	r2, r3, #1
 8014c68:	607a      	str	r2, [r7, #4]
 8014c6a:	887a      	ldrh	r2, [r7, #2]
 8014c6c:	b2d2      	uxtb	r2, r2
 8014c6e:	701a      	strb	r2, [r3, #0]
}
 8014c70:	bf00      	nop
 8014c72:	370c      	adds	r7, #12
 8014c74:	46bd      	mov	sp, r7
 8014c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7a:	4770      	bx	lr

08014c7c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8014c7c:	b480      	push	{r7}
 8014c7e:	b083      	sub	sp, #12
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
 8014c84:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	1c5a      	adds	r2, r3, #1
 8014c8a:	607a      	str	r2, [r7, #4]
 8014c8c:	683a      	ldr	r2, [r7, #0]
 8014c8e:	b2d2      	uxtb	r2, r2
 8014c90:	701a      	strb	r2, [r3, #0]
 8014c92:	683b      	ldr	r3, [r7, #0]
 8014c94:	0a1b      	lsrs	r3, r3, #8
 8014c96:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	1c5a      	adds	r2, r3, #1
 8014c9c:	607a      	str	r2, [r7, #4]
 8014c9e:	683a      	ldr	r2, [r7, #0]
 8014ca0:	b2d2      	uxtb	r2, r2
 8014ca2:	701a      	strb	r2, [r3, #0]
 8014ca4:	683b      	ldr	r3, [r7, #0]
 8014ca6:	0a1b      	lsrs	r3, r3, #8
 8014ca8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	1c5a      	adds	r2, r3, #1
 8014cae:	607a      	str	r2, [r7, #4]
 8014cb0:	683a      	ldr	r2, [r7, #0]
 8014cb2:	b2d2      	uxtb	r2, r2
 8014cb4:	701a      	strb	r2, [r3, #0]
 8014cb6:	683b      	ldr	r3, [r7, #0]
 8014cb8:	0a1b      	lsrs	r3, r3, #8
 8014cba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	1c5a      	adds	r2, r3, #1
 8014cc0:	607a      	str	r2, [r7, #4]
 8014cc2:	683a      	ldr	r2, [r7, #0]
 8014cc4:	b2d2      	uxtb	r2, r2
 8014cc6:	701a      	strb	r2, [r3, #0]
}
 8014cc8:	bf00      	nop
 8014cca:	370c      	adds	r7, #12
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd2:	4770      	bx	lr

08014cd4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014cd4:	b480      	push	{r7}
 8014cd6:	b087      	sub	sp, #28
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	60f8      	str	r0, [r7, #12]
 8014cdc:	60b9      	str	r1, [r7, #8]
 8014cde:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d00d      	beq.n	8014d0a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8014cee:	693a      	ldr	r2, [r7, #16]
 8014cf0:	1c53      	adds	r3, r2, #1
 8014cf2:	613b      	str	r3, [r7, #16]
 8014cf4:	697b      	ldr	r3, [r7, #20]
 8014cf6:	1c59      	adds	r1, r3, #1
 8014cf8:	6179      	str	r1, [r7, #20]
 8014cfa:	7812      	ldrb	r2, [r2, #0]
 8014cfc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	3b01      	subs	r3, #1
 8014d02:	607b      	str	r3, [r7, #4]
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d1f1      	bne.n	8014cee <mem_cpy+0x1a>
	}
}
 8014d0a:	bf00      	nop
 8014d0c:	371c      	adds	r7, #28
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d14:	4770      	bx	lr

08014d16 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8014d16:	b480      	push	{r7}
 8014d18:	b087      	sub	sp, #28
 8014d1a:	af00      	add	r7, sp, #0
 8014d1c:	60f8      	str	r0, [r7, #12]
 8014d1e:	60b9      	str	r1, [r7, #8]
 8014d20:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8014d26:	697b      	ldr	r3, [r7, #20]
 8014d28:	1c5a      	adds	r2, r3, #1
 8014d2a:	617a      	str	r2, [r7, #20]
 8014d2c:	68ba      	ldr	r2, [r7, #8]
 8014d2e:	b2d2      	uxtb	r2, r2
 8014d30:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	3b01      	subs	r3, #1
 8014d36:	607b      	str	r3, [r7, #4]
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d1f3      	bne.n	8014d26 <mem_set+0x10>
}
 8014d3e:	bf00      	nop
 8014d40:	bf00      	nop
 8014d42:	371c      	adds	r7, #28
 8014d44:	46bd      	mov	sp, r7
 8014d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4a:	4770      	bx	lr

08014d4c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014d4c:	b480      	push	{r7}
 8014d4e:	b089      	sub	sp, #36	; 0x24
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	60f8      	str	r0, [r7, #12]
 8014d54:	60b9      	str	r1, [r7, #8]
 8014d56:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	61fb      	str	r3, [r7, #28]
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8014d60:	2300      	movs	r3, #0
 8014d62:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8014d64:	69fb      	ldr	r3, [r7, #28]
 8014d66:	1c5a      	adds	r2, r3, #1
 8014d68:	61fa      	str	r2, [r7, #28]
 8014d6a:	781b      	ldrb	r3, [r3, #0]
 8014d6c:	4619      	mov	r1, r3
 8014d6e:	69bb      	ldr	r3, [r7, #24]
 8014d70:	1c5a      	adds	r2, r3, #1
 8014d72:	61ba      	str	r2, [r7, #24]
 8014d74:	781b      	ldrb	r3, [r3, #0]
 8014d76:	1acb      	subs	r3, r1, r3
 8014d78:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	3b01      	subs	r3, #1
 8014d7e:	607b      	str	r3, [r7, #4]
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d002      	beq.n	8014d8c <mem_cmp+0x40>
 8014d86:	697b      	ldr	r3, [r7, #20]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d0eb      	beq.n	8014d64 <mem_cmp+0x18>

	return r;
 8014d8c:	697b      	ldr	r3, [r7, #20]
}
 8014d8e:	4618      	mov	r0, r3
 8014d90:	3724      	adds	r7, #36	; 0x24
 8014d92:	46bd      	mov	sp, r7
 8014d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d98:	4770      	bx	lr

08014d9a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8014d9a:	b480      	push	{r7}
 8014d9c:	b083      	sub	sp, #12
 8014d9e:	af00      	add	r7, sp, #0
 8014da0:	6078      	str	r0, [r7, #4]
 8014da2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8014da4:	e002      	b.n	8014dac <chk_chr+0x12>
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	3301      	adds	r3, #1
 8014daa:	607b      	str	r3, [r7, #4]
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	781b      	ldrb	r3, [r3, #0]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d005      	beq.n	8014dc0 <chk_chr+0x26>
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	781b      	ldrb	r3, [r3, #0]
 8014db8:	461a      	mov	r2, r3
 8014dba:	683b      	ldr	r3, [r7, #0]
 8014dbc:	4293      	cmp	r3, r2
 8014dbe:	d1f2      	bne.n	8014da6 <chk_chr+0xc>
	return *str;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	781b      	ldrb	r3, [r3, #0]
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	370c      	adds	r7, #12
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dce:	4770      	bx	lr

08014dd0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b082      	sub	sp, #8
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d009      	beq.n	8014df2 <lock_fs+0x22>
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	68db      	ldr	r3, [r3, #12]
 8014de2:	4618      	mov	r0, r3
 8014de4:	f002 fa9a 	bl	801731c <ff_req_grant>
 8014de8:	4603      	mov	r3, r0
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d001      	beq.n	8014df2 <lock_fs+0x22>
 8014dee:	2301      	movs	r3, #1
 8014df0:	e000      	b.n	8014df4 <lock_fs+0x24>
 8014df2:	2300      	movs	r3, #0
}
 8014df4:	4618      	mov	r0, r3
 8014df6:	3708      	adds	r7, #8
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	bd80      	pop	{r7, pc}

08014dfc <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b082      	sub	sp, #8
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
 8014e04:	460b      	mov	r3, r1
 8014e06:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d00d      	beq.n	8014e2a <unlock_fs+0x2e>
 8014e0e:	78fb      	ldrb	r3, [r7, #3]
 8014e10:	2b0c      	cmp	r3, #12
 8014e12:	d00a      	beq.n	8014e2a <unlock_fs+0x2e>
 8014e14:	78fb      	ldrb	r3, [r7, #3]
 8014e16:	2b0b      	cmp	r3, #11
 8014e18:	d007      	beq.n	8014e2a <unlock_fs+0x2e>
 8014e1a:	78fb      	ldrb	r3, [r7, #3]
 8014e1c:	2b0f      	cmp	r3, #15
 8014e1e:	d004      	beq.n	8014e2a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	68db      	ldr	r3, [r3, #12]
 8014e24:	4618      	mov	r0, r3
 8014e26:	f002 fa8e 	bl	8017346 <ff_rel_grant>
	}
}
 8014e2a:	bf00      	nop
 8014e2c:	3708      	adds	r7, #8
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bd80      	pop	{r7, pc}
	...

08014e34 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014e34:	b480      	push	{r7}
 8014e36:	b085      	sub	sp, #20
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
 8014e3c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014e3e:	2300      	movs	r3, #0
 8014e40:	60bb      	str	r3, [r7, #8]
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	60fb      	str	r3, [r7, #12]
 8014e46:	e029      	b.n	8014e9c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8014e48:	4a27      	ldr	r2, [pc, #156]	; (8014ee8 <chk_lock+0xb4>)
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	011b      	lsls	r3, r3, #4
 8014e4e:	4413      	add	r3, r2
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d01d      	beq.n	8014e92 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014e56:	4a24      	ldr	r2, [pc, #144]	; (8014ee8 <chk_lock+0xb4>)
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	011b      	lsls	r3, r3, #4
 8014e5c:	4413      	add	r3, r2
 8014e5e:	681a      	ldr	r2, [r3, #0]
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	429a      	cmp	r2, r3
 8014e66:	d116      	bne.n	8014e96 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8014e68:	4a1f      	ldr	r2, [pc, #124]	; (8014ee8 <chk_lock+0xb4>)
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	011b      	lsls	r3, r3, #4
 8014e6e:	4413      	add	r3, r2
 8014e70:	3304      	adds	r3, #4
 8014e72:	681a      	ldr	r2, [r3, #0]
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014e78:	429a      	cmp	r2, r3
 8014e7a:	d10c      	bne.n	8014e96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014e7c:	4a1a      	ldr	r2, [pc, #104]	; (8014ee8 <chk_lock+0xb4>)
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	011b      	lsls	r3, r3, #4
 8014e82:	4413      	add	r3, r2
 8014e84:	3308      	adds	r3, #8
 8014e86:	681a      	ldr	r2, [r3, #0]
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8014e8c:	429a      	cmp	r2, r3
 8014e8e:	d102      	bne.n	8014e96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014e90:	e007      	b.n	8014ea2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8014e92:	2301      	movs	r3, #1
 8014e94:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	3301      	adds	r3, #1
 8014e9a:	60fb      	str	r3, [r7, #12]
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	2b01      	cmp	r3, #1
 8014ea0:	d9d2      	bls.n	8014e48 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	2b02      	cmp	r3, #2
 8014ea6:	d109      	bne.n	8014ebc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8014ea8:	68bb      	ldr	r3, [r7, #8]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d102      	bne.n	8014eb4 <chk_lock+0x80>
 8014eae:	683b      	ldr	r3, [r7, #0]
 8014eb0:	2b02      	cmp	r3, #2
 8014eb2:	d101      	bne.n	8014eb8 <chk_lock+0x84>
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	e010      	b.n	8014eda <chk_lock+0xa6>
 8014eb8:	2312      	movs	r3, #18
 8014eba:	e00e      	b.n	8014eda <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8014ebc:	683b      	ldr	r3, [r7, #0]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d108      	bne.n	8014ed4 <chk_lock+0xa0>
 8014ec2:	4a09      	ldr	r2, [pc, #36]	; (8014ee8 <chk_lock+0xb4>)
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	011b      	lsls	r3, r3, #4
 8014ec8:	4413      	add	r3, r2
 8014eca:	330c      	adds	r3, #12
 8014ecc:	881b      	ldrh	r3, [r3, #0]
 8014ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014ed2:	d101      	bne.n	8014ed8 <chk_lock+0xa4>
 8014ed4:	2310      	movs	r3, #16
 8014ed6:	e000      	b.n	8014eda <chk_lock+0xa6>
 8014ed8:	2300      	movs	r3, #0
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	3714      	adds	r7, #20
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee4:	4770      	bx	lr
 8014ee6:	bf00      	nop
 8014ee8:	20000fc4 	.word	0x20000fc4

08014eec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8014eec:	b480      	push	{r7}
 8014eee:	b083      	sub	sp, #12
 8014ef0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	607b      	str	r3, [r7, #4]
 8014ef6:	e002      	b.n	8014efe <enq_lock+0x12>
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	3301      	adds	r3, #1
 8014efc:	607b      	str	r3, [r7, #4]
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	2b01      	cmp	r3, #1
 8014f02:	d806      	bhi.n	8014f12 <enq_lock+0x26>
 8014f04:	4a09      	ldr	r2, [pc, #36]	; (8014f2c <enq_lock+0x40>)
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	011b      	lsls	r3, r3, #4
 8014f0a:	4413      	add	r3, r2
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d1f2      	bne.n	8014ef8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	2b02      	cmp	r3, #2
 8014f16:	bf14      	ite	ne
 8014f18:	2301      	movne	r3, #1
 8014f1a:	2300      	moveq	r3, #0
 8014f1c:	b2db      	uxtb	r3, r3
}
 8014f1e:	4618      	mov	r0, r3
 8014f20:	370c      	adds	r7, #12
 8014f22:	46bd      	mov	sp, r7
 8014f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f28:	4770      	bx	lr
 8014f2a:	bf00      	nop
 8014f2c:	20000fc4 	.word	0x20000fc4

08014f30 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014f30:	b480      	push	{r7}
 8014f32:	b085      	sub	sp, #20
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
 8014f38:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	60fb      	str	r3, [r7, #12]
 8014f3e:	e01f      	b.n	8014f80 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8014f40:	4a41      	ldr	r2, [pc, #260]	; (8015048 <inc_lock+0x118>)
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	011b      	lsls	r3, r3, #4
 8014f46:	4413      	add	r3, r2
 8014f48:	681a      	ldr	r2, [r3, #0]
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	429a      	cmp	r2, r3
 8014f50:	d113      	bne.n	8014f7a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8014f52:	4a3d      	ldr	r2, [pc, #244]	; (8015048 <inc_lock+0x118>)
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	011b      	lsls	r3, r3, #4
 8014f58:	4413      	add	r3, r2
 8014f5a:	3304      	adds	r3, #4
 8014f5c:	681a      	ldr	r2, [r3, #0]
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8014f62:	429a      	cmp	r2, r3
 8014f64:	d109      	bne.n	8014f7a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8014f66:	4a38      	ldr	r2, [pc, #224]	; (8015048 <inc_lock+0x118>)
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	011b      	lsls	r3, r3, #4
 8014f6c:	4413      	add	r3, r2
 8014f6e:	3308      	adds	r3, #8
 8014f70:	681a      	ldr	r2, [r3, #0]
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8014f76:	429a      	cmp	r2, r3
 8014f78:	d006      	beq.n	8014f88 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	3301      	adds	r3, #1
 8014f7e:	60fb      	str	r3, [r7, #12]
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	2b01      	cmp	r3, #1
 8014f84:	d9dc      	bls.n	8014f40 <inc_lock+0x10>
 8014f86:	e000      	b.n	8014f8a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8014f88:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	2b02      	cmp	r3, #2
 8014f8e:	d132      	bne.n	8014ff6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014f90:	2300      	movs	r3, #0
 8014f92:	60fb      	str	r3, [r7, #12]
 8014f94:	e002      	b.n	8014f9c <inc_lock+0x6c>
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	3301      	adds	r3, #1
 8014f9a:	60fb      	str	r3, [r7, #12]
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	2b01      	cmp	r3, #1
 8014fa0:	d806      	bhi.n	8014fb0 <inc_lock+0x80>
 8014fa2:	4a29      	ldr	r2, [pc, #164]	; (8015048 <inc_lock+0x118>)
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	011b      	lsls	r3, r3, #4
 8014fa8:	4413      	add	r3, r2
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d1f2      	bne.n	8014f96 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	2b02      	cmp	r3, #2
 8014fb4:	d101      	bne.n	8014fba <inc_lock+0x8a>
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	e040      	b.n	801503c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	681a      	ldr	r2, [r3, #0]
 8014fbe:	4922      	ldr	r1, [pc, #136]	; (8015048 <inc_lock+0x118>)
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	011b      	lsls	r3, r3, #4
 8014fc4:	440b      	add	r3, r1
 8014fc6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	689a      	ldr	r2, [r3, #8]
 8014fcc:	491e      	ldr	r1, [pc, #120]	; (8015048 <inc_lock+0x118>)
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	011b      	lsls	r3, r3, #4
 8014fd2:	440b      	add	r3, r1
 8014fd4:	3304      	adds	r3, #4
 8014fd6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	695a      	ldr	r2, [r3, #20]
 8014fdc:	491a      	ldr	r1, [pc, #104]	; (8015048 <inc_lock+0x118>)
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	011b      	lsls	r3, r3, #4
 8014fe2:	440b      	add	r3, r1
 8014fe4:	3308      	adds	r3, #8
 8014fe6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8014fe8:	4a17      	ldr	r2, [pc, #92]	; (8015048 <inc_lock+0x118>)
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	011b      	lsls	r3, r3, #4
 8014fee:	4413      	add	r3, r2
 8014ff0:	330c      	adds	r3, #12
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8014ff6:	683b      	ldr	r3, [r7, #0]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d009      	beq.n	8015010 <inc_lock+0xe0>
 8014ffc:	4a12      	ldr	r2, [pc, #72]	; (8015048 <inc_lock+0x118>)
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	011b      	lsls	r3, r3, #4
 8015002:	4413      	add	r3, r2
 8015004:	330c      	adds	r3, #12
 8015006:	881b      	ldrh	r3, [r3, #0]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d001      	beq.n	8015010 <inc_lock+0xe0>
 801500c:	2300      	movs	r3, #0
 801500e:	e015      	b.n	801503c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015010:	683b      	ldr	r3, [r7, #0]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d108      	bne.n	8015028 <inc_lock+0xf8>
 8015016:	4a0c      	ldr	r2, [pc, #48]	; (8015048 <inc_lock+0x118>)
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	011b      	lsls	r3, r3, #4
 801501c:	4413      	add	r3, r2
 801501e:	330c      	adds	r3, #12
 8015020:	881b      	ldrh	r3, [r3, #0]
 8015022:	3301      	adds	r3, #1
 8015024:	b29a      	uxth	r2, r3
 8015026:	e001      	b.n	801502c <inc_lock+0xfc>
 8015028:	f44f 7280 	mov.w	r2, #256	; 0x100
 801502c:	4906      	ldr	r1, [pc, #24]	; (8015048 <inc_lock+0x118>)
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	011b      	lsls	r3, r3, #4
 8015032:	440b      	add	r3, r1
 8015034:	330c      	adds	r3, #12
 8015036:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	3301      	adds	r3, #1
}
 801503c:	4618      	mov	r0, r3
 801503e:	3714      	adds	r7, #20
 8015040:	46bd      	mov	sp, r7
 8015042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015046:	4770      	bx	lr
 8015048:	20000fc4 	.word	0x20000fc4

0801504c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801504c:	b480      	push	{r7}
 801504e:	b085      	sub	sp, #20
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	3b01      	subs	r3, #1
 8015058:	607b      	str	r3, [r7, #4]
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	2b01      	cmp	r3, #1
 801505e:	d825      	bhi.n	80150ac <dec_lock+0x60>
		n = Files[i].ctr;
 8015060:	4a17      	ldr	r2, [pc, #92]	; (80150c0 <dec_lock+0x74>)
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	011b      	lsls	r3, r3, #4
 8015066:	4413      	add	r3, r2
 8015068:	330c      	adds	r3, #12
 801506a:	881b      	ldrh	r3, [r3, #0]
 801506c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801506e:	89fb      	ldrh	r3, [r7, #14]
 8015070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015074:	d101      	bne.n	801507a <dec_lock+0x2e>
 8015076:	2300      	movs	r3, #0
 8015078:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801507a:	89fb      	ldrh	r3, [r7, #14]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d002      	beq.n	8015086 <dec_lock+0x3a>
 8015080:	89fb      	ldrh	r3, [r7, #14]
 8015082:	3b01      	subs	r3, #1
 8015084:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8015086:	4a0e      	ldr	r2, [pc, #56]	; (80150c0 <dec_lock+0x74>)
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	011b      	lsls	r3, r3, #4
 801508c:	4413      	add	r3, r2
 801508e:	330c      	adds	r3, #12
 8015090:	89fa      	ldrh	r2, [r7, #14]
 8015092:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015094:	89fb      	ldrh	r3, [r7, #14]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d105      	bne.n	80150a6 <dec_lock+0x5a>
 801509a:	4a09      	ldr	r2, [pc, #36]	; (80150c0 <dec_lock+0x74>)
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	011b      	lsls	r3, r3, #4
 80150a0:	4413      	add	r3, r2
 80150a2:	2200      	movs	r2, #0
 80150a4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80150a6:	2300      	movs	r3, #0
 80150a8:	737b      	strb	r3, [r7, #13]
 80150aa:	e001      	b.n	80150b0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80150ac:	2302      	movs	r3, #2
 80150ae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80150b0:	7b7b      	ldrb	r3, [r7, #13]
}
 80150b2:	4618      	mov	r0, r3
 80150b4:	3714      	adds	r7, #20
 80150b6:	46bd      	mov	sp, r7
 80150b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150bc:	4770      	bx	lr
 80150be:	bf00      	nop
 80150c0:	20000fc4 	.word	0x20000fc4

080150c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80150c4:	b480      	push	{r7}
 80150c6:	b085      	sub	sp, #20
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80150cc:	2300      	movs	r3, #0
 80150ce:	60fb      	str	r3, [r7, #12]
 80150d0:	e010      	b.n	80150f4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80150d2:	4a0d      	ldr	r2, [pc, #52]	; (8015108 <clear_lock+0x44>)
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	011b      	lsls	r3, r3, #4
 80150d8:	4413      	add	r3, r2
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	687a      	ldr	r2, [r7, #4]
 80150de:	429a      	cmp	r2, r3
 80150e0:	d105      	bne.n	80150ee <clear_lock+0x2a>
 80150e2:	4a09      	ldr	r2, [pc, #36]	; (8015108 <clear_lock+0x44>)
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	011b      	lsls	r3, r3, #4
 80150e8:	4413      	add	r3, r2
 80150ea:	2200      	movs	r2, #0
 80150ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	3301      	adds	r3, #1
 80150f2:	60fb      	str	r3, [r7, #12]
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	2b01      	cmp	r3, #1
 80150f8:	d9eb      	bls.n	80150d2 <clear_lock+0xe>
	}
}
 80150fa:	bf00      	nop
 80150fc:	bf00      	nop
 80150fe:	3714      	adds	r7, #20
 8015100:	46bd      	mov	sp, r7
 8015102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015106:	4770      	bx	lr
 8015108:	20000fc4 	.word	0x20000fc4

0801510c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b086      	sub	sp, #24
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015114:	2300      	movs	r3, #0
 8015116:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	78db      	ldrb	r3, [r3, #3]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d034      	beq.n	801518a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015124:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	7858      	ldrb	r0, [r3, #1]
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8015130:	2301      	movs	r3, #1
 8015132:	697a      	ldr	r2, [r7, #20]
 8015134:	f7ff fd0e 	bl	8014b54 <disk_write>
 8015138:	4603      	mov	r3, r0
 801513a:	2b00      	cmp	r3, #0
 801513c:	d002      	beq.n	8015144 <sync_window+0x38>
			res = FR_DISK_ERR;
 801513e:	2301      	movs	r3, #1
 8015140:	73fb      	strb	r3, [r7, #15]
 8015142:	e022      	b.n	801518a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	2200      	movs	r2, #0
 8015148:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801514e:	697a      	ldr	r2, [r7, #20]
 8015150:	1ad2      	subs	r2, r2, r3
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	69db      	ldr	r3, [r3, #28]
 8015156:	429a      	cmp	r2, r3
 8015158:	d217      	bcs.n	801518a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	789b      	ldrb	r3, [r3, #2]
 801515e:	613b      	str	r3, [r7, #16]
 8015160:	e010      	b.n	8015184 <sync_window+0x78>
					wsect += fs->fsize;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	69db      	ldr	r3, [r3, #28]
 8015166:	697a      	ldr	r2, [r7, #20]
 8015168:	4413      	add	r3, r2
 801516a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	7858      	ldrb	r0, [r3, #1]
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8015176:	2301      	movs	r3, #1
 8015178:	697a      	ldr	r2, [r7, #20]
 801517a:	f7ff fceb 	bl	8014b54 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801517e:	693b      	ldr	r3, [r7, #16]
 8015180:	3b01      	subs	r3, #1
 8015182:	613b      	str	r3, [r7, #16]
 8015184:	693b      	ldr	r3, [r7, #16]
 8015186:	2b01      	cmp	r3, #1
 8015188:	d8eb      	bhi.n	8015162 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801518a:	7bfb      	ldrb	r3, [r7, #15]
}
 801518c:	4618      	mov	r0, r3
 801518e:	3718      	adds	r7, #24
 8015190:	46bd      	mov	sp, r7
 8015192:	bd80      	pop	{r7, pc}

08015194 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b084      	sub	sp, #16
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
 801519c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801519e:	2300      	movs	r3, #0
 80151a0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151a6:	683a      	ldr	r2, [r7, #0]
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d01b      	beq.n	80151e4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80151ac:	6878      	ldr	r0, [r7, #4]
 80151ae:	f7ff ffad 	bl	801510c <sync_window>
 80151b2:	4603      	mov	r3, r0
 80151b4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80151b6:	7bfb      	ldrb	r3, [r7, #15]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d113      	bne.n	80151e4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	7858      	ldrb	r0, [r3, #1]
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80151c6:	2301      	movs	r3, #1
 80151c8:	683a      	ldr	r2, [r7, #0]
 80151ca:	f7ff fca3 	bl	8014b14 <disk_read>
 80151ce:	4603      	mov	r3, r0
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d004      	beq.n	80151de <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80151d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151d8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80151da:	2301      	movs	r3, #1
 80151dc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	683a      	ldr	r2, [r7, #0]
 80151e2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80151e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80151e6:	4618      	mov	r0, r3
 80151e8:	3710      	adds	r7, #16
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}
	...

080151f0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b084      	sub	sp, #16
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80151f8:	6878      	ldr	r0, [r7, #4]
 80151fa:	f7ff ff87 	bl	801510c <sync_window>
 80151fe:	4603      	mov	r3, r0
 8015200:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015202:	7bfb      	ldrb	r3, [r7, #15]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d158      	bne.n	80152ba <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	781b      	ldrb	r3, [r3, #0]
 801520c:	2b03      	cmp	r3, #3
 801520e:	d148      	bne.n	80152a2 <sync_fs+0xb2>
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	791b      	ldrb	r3, [r3, #4]
 8015214:	2b01      	cmp	r3, #1
 8015216:	d144      	bne.n	80152a2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	3334      	adds	r3, #52	; 0x34
 801521c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015220:	2100      	movs	r1, #0
 8015222:	4618      	mov	r0, r3
 8015224:	f7ff fd77 	bl	8014d16 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	3334      	adds	r3, #52	; 0x34
 801522c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015230:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015234:	4618      	mov	r0, r3
 8015236:	f7ff fd06 	bl	8014c46 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	3334      	adds	r3, #52	; 0x34
 801523e:	4921      	ldr	r1, [pc, #132]	; (80152c4 <sync_fs+0xd4>)
 8015240:	4618      	mov	r0, r3
 8015242:	f7ff fd1b 	bl	8014c7c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	3334      	adds	r3, #52	; 0x34
 801524a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801524e:	491e      	ldr	r1, [pc, #120]	; (80152c8 <sync_fs+0xd8>)
 8015250:	4618      	mov	r0, r3
 8015252:	f7ff fd13 	bl	8014c7c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	3334      	adds	r3, #52	; 0x34
 801525a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	695b      	ldr	r3, [r3, #20]
 8015262:	4619      	mov	r1, r3
 8015264:	4610      	mov	r0, r2
 8015266:	f7ff fd09 	bl	8014c7c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	3334      	adds	r3, #52	; 0x34
 801526e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	691b      	ldr	r3, [r3, #16]
 8015276:	4619      	mov	r1, r3
 8015278:	4610      	mov	r0, r2
 801527a:	f7ff fcff 	bl	8014c7c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	6a1b      	ldr	r3, [r3, #32]
 8015282:	1c5a      	adds	r2, r3, #1
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	7858      	ldrb	r0, [r3, #1]
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015296:	2301      	movs	r3, #1
 8015298:	f7ff fc5c 	bl	8014b54 <disk_write>
			fs->fsi_flag = 0;
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	2200      	movs	r2, #0
 80152a0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	785b      	ldrb	r3, [r3, #1]
 80152a6:	2200      	movs	r2, #0
 80152a8:	2100      	movs	r1, #0
 80152aa:	4618      	mov	r0, r3
 80152ac:	f7ff fc72 	bl	8014b94 <disk_ioctl>
 80152b0:	4603      	mov	r3, r0
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d001      	beq.n	80152ba <sync_fs+0xca>
 80152b6:	2301      	movs	r3, #1
 80152b8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80152ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80152bc:	4618      	mov	r0, r3
 80152be:	3710      	adds	r7, #16
 80152c0:	46bd      	mov	sp, r7
 80152c2:	bd80      	pop	{r7, pc}
 80152c4:	41615252 	.word	0x41615252
 80152c8:	61417272 	.word	0x61417272

080152cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80152cc:	b480      	push	{r7}
 80152ce:	b083      	sub	sp, #12
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
 80152d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80152d6:	683b      	ldr	r3, [r7, #0]
 80152d8:	3b02      	subs	r3, #2
 80152da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	699b      	ldr	r3, [r3, #24]
 80152e0:	3b02      	subs	r3, #2
 80152e2:	683a      	ldr	r2, [r7, #0]
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d301      	bcc.n	80152ec <clust2sect+0x20>
 80152e8:	2300      	movs	r3, #0
 80152ea:	e008      	b.n	80152fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	895b      	ldrh	r3, [r3, #10]
 80152f0:	461a      	mov	r2, r3
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	fb03 f202 	mul.w	r2, r3, r2
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152fc:	4413      	add	r3, r2
}
 80152fe:	4618      	mov	r0, r3
 8015300:	370c      	adds	r7, #12
 8015302:	46bd      	mov	sp, r7
 8015304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015308:	4770      	bx	lr

0801530a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801530a:	b580      	push	{r7, lr}
 801530c:	b086      	sub	sp, #24
 801530e:	af00      	add	r7, sp, #0
 8015310:	6078      	str	r0, [r7, #4]
 8015312:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801531a:	683b      	ldr	r3, [r7, #0]
 801531c:	2b01      	cmp	r3, #1
 801531e:	d904      	bls.n	801532a <get_fat+0x20>
 8015320:	693b      	ldr	r3, [r7, #16]
 8015322:	699b      	ldr	r3, [r3, #24]
 8015324:	683a      	ldr	r2, [r7, #0]
 8015326:	429a      	cmp	r2, r3
 8015328:	d302      	bcc.n	8015330 <get_fat+0x26>
		val = 1;	/* Internal error */
 801532a:	2301      	movs	r3, #1
 801532c:	617b      	str	r3, [r7, #20]
 801532e:	e08f      	b.n	8015450 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015334:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8015336:	693b      	ldr	r3, [r7, #16]
 8015338:	781b      	ldrb	r3, [r3, #0]
 801533a:	2b03      	cmp	r3, #3
 801533c:	d062      	beq.n	8015404 <get_fat+0xfa>
 801533e:	2b03      	cmp	r3, #3
 8015340:	dc7c      	bgt.n	801543c <get_fat+0x132>
 8015342:	2b01      	cmp	r3, #1
 8015344:	d002      	beq.n	801534c <get_fat+0x42>
 8015346:	2b02      	cmp	r3, #2
 8015348:	d042      	beq.n	80153d0 <get_fat+0xc6>
 801534a:	e077      	b.n	801543c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801534c:	683b      	ldr	r3, [r7, #0]
 801534e:	60fb      	str	r3, [r7, #12]
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	085b      	lsrs	r3, r3, #1
 8015354:	68fa      	ldr	r2, [r7, #12]
 8015356:	4413      	add	r3, r2
 8015358:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801535a:	693b      	ldr	r3, [r7, #16]
 801535c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	0a5b      	lsrs	r3, r3, #9
 8015362:	4413      	add	r3, r2
 8015364:	4619      	mov	r1, r3
 8015366:	6938      	ldr	r0, [r7, #16]
 8015368:	f7ff ff14 	bl	8015194 <move_window>
 801536c:	4603      	mov	r3, r0
 801536e:	2b00      	cmp	r3, #0
 8015370:	d167      	bne.n	8015442 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	1c5a      	adds	r2, r3, #1
 8015376:	60fa      	str	r2, [r7, #12]
 8015378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801537c:	693a      	ldr	r2, [r7, #16]
 801537e:	4413      	add	r3, r2
 8015380:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015384:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015386:	693b      	ldr	r3, [r7, #16]
 8015388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	0a5b      	lsrs	r3, r3, #9
 801538e:	4413      	add	r3, r2
 8015390:	4619      	mov	r1, r3
 8015392:	6938      	ldr	r0, [r7, #16]
 8015394:	f7ff fefe 	bl	8015194 <move_window>
 8015398:	4603      	mov	r3, r0
 801539a:	2b00      	cmp	r3, #0
 801539c:	d153      	bne.n	8015446 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80153a4:	693a      	ldr	r2, [r7, #16]
 80153a6:	4413      	add	r3, r2
 80153a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80153ac:	021b      	lsls	r3, r3, #8
 80153ae:	461a      	mov	r2, r3
 80153b0:	68bb      	ldr	r3, [r7, #8]
 80153b2:	4313      	orrs	r3, r2
 80153b4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80153b6:	683b      	ldr	r3, [r7, #0]
 80153b8:	f003 0301 	and.w	r3, r3, #1
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d002      	beq.n	80153c6 <get_fat+0xbc>
 80153c0:	68bb      	ldr	r3, [r7, #8]
 80153c2:	091b      	lsrs	r3, r3, #4
 80153c4:	e002      	b.n	80153cc <get_fat+0xc2>
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80153cc:	617b      	str	r3, [r7, #20]
			break;
 80153ce:	e03f      	b.n	8015450 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80153d0:	693b      	ldr	r3, [r7, #16]
 80153d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80153d4:	683b      	ldr	r3, [r7, #0]
 80153d6:	0a1b      	lsrs	r3, r3, #8
 80153d8:	4413      	add	r3, r2
 80153da:	4619      	mov	r1, r3
 80153dc:	6938      	ldr	r0, [r7, #16]
 80153de:	f7ff fed9 	bl	8015194 <move_window>
 80153e2:	4603      	mov	r3, r0
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d130      	bne.n	801544a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80153e8:	693b      	ldr	r3, [r7, #16]
 80153ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80153ee:	683b      	ldr	r3, [r7, #0]
 80153f0:	005b      	lsls	r3, r3, #1
 80153f2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80153f6:	4413      	add	r3, r2
 80153f8:	4618      	mov	r0, r3
 80153fa:	f7ff fbe9 	bl	8014bd0 <ld_word>
 80153fe:	4603      	mov	r3, r0
 8015400:	617b      	str	r3, [r7, #20]
			break;
 8015402:	e025      	b.n	8015450 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015404:	693b      	ldr	r3, [r7, #16]
 8015406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	09db      	lsrs	r3, r3, #7
 801540c:	4413      	add	r3, r2
 801540e:	4619      	mov	r1, r3
 8015410:	6938      	ldr	r0, [r7, #16]
 8015412:	f7ff febf 	bl	8015194 <move_window>
 8015416:	4603      	mov	r3, r0
 8015418:	2b00      	cmp	r3, #0
 801541a:	d118      	bne.n	801544e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801541c:	693b      	ldr	r3, [r7, #16]
 801541e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015422:	683b      	ldr	r3, [r7, #0]
 8015424:	009b      	lsls	r3, r3, #2
 8015426:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801542a:	4413      	add	r3, r2
 801542c:	4618      	mov	r0, r3
 801542e:	f7ff fbe7 	bl	8014c00 <ld_dword>
 8015432:	4603      	mov	r3, r0
 8015434:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015438:	617b      	str	r3, [r7, #20]
			break;
 801543a:	e009      	b.n	8015450 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801543c:	2301      	movs	r3, #1
 801543e:	617b      	str	r3, [r7, #20]
 8015440:	e006      	b.n	8015450 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015442:	bf00      	nop
 8015444:	e004      	b.n	8015450 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015446:	bf00      	nop
 8015448:	e002      	b.n	8015450 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801544a:	bf00      	nop
 801544c:	e000      	b.n	8015450 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801544e:	bf00      	nop
		}
	}

	return val;
 8015450:	697b      	ldr	r3, [r7, #20]
}
 8015452:	4618      	mov	r0, r3
 8015454:	3718      	adds	r7, #24
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}

0801545a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801545a:	b590      	push	{r4, r7, lr}
 801545c:	b089      	sub	sp, #36	; 0x24
 801545e:	af00      	add	r7, sp, #0
 8015460:	60f8      	str	r0, [r7, #12]
 8015462:	60b9      	str	r1, [r7, #8]
 8015464:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8015466:	2302      	movs	r3, #2
 8015468:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801546a:	68bb      	ldr	r3, [r7, #8]
 801546c:	2b01      	cmp	r3, #1
 801546e:	f240 80d9 	bls.w	8015624 <put_fat+0x1ca>
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	699b      	ldr	r3, [r3, #24]
 8015476:	68ba      	ldr	r2, [r7, #8]
 8015478:	429a      	cmp	r2, r3
 801547a:	f080 80d3 	bcs.w	8015624 <put_fat+0x1ca>
		switch (fs->fs_type) {
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	781b      	ldrb	r3, [r3, #0]
 8015482:	2b03      	cmp	r3, #3
 8015484:	f000 8096 	beq.w	80155b4 <put_fat+0x15a>
 8015488:	2b03      	cmp	r3, #3
 801548a:	f300 80cb 	bgt.w	8015624 <put_fat+0x1ca>
 801548e:	2b01      	cmp	r3, #1
 8015490:	d002      	beq.n	8015498 <put_fat+0x3e>
 8015492:	2b02      	cmp	r3, #2
 8015494:	d06e      	beq.n	8015574 <put_fat+0x11a>
 8015496:	e0c5      	b.n	8015624 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8015498:	68bb      	ldr	r3, [r7, #8]
 801549a:	61bb      	str	r3, [r7, #24]
 801549c:	69bb      	ldr	r3, [r7, #24]
 801549e:	085b      	lsrs	r3, r3, #1
 80154a0:	69ba      	ldr	r2, [r7, #24]
 80154a2:	4413      	add	r3, r2
 80154a4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80154aa:	69bb      	ldr	r3, [r7, #24]
 80154ac:	0a5b      	lsrs	r3, r3, #9
 80154ae:	4413      	add	r3, r2
 80154b0:	4619      	mov	r1, r3
 80154b2:	68f8      	ldr	r0, [r7, #12]
 80154b4:	f7ff fe6e 	bl	8015194 <move_window>
 80154b8:	4603      	mov	r3, r0
 80154ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80154bc:	7ffb      	ldrb	r3, [r7, #31]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	f040 80a9 	bne.w	8015616 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80154ca:	69bb      	ldr	r3, [r7, #24]
 80154cc:	1c59      	adds	r1, r3, #1
 80154ce:	61b9      	str	r1, [r7, #24]
 80154d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80154d4:	4413      	add	r3, r2
 80154d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	f003 0301 	and.w	r3, r3, #1
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d00d      	beq.n	80154fe <put_fat+0xa4>
 80154e2:	697b      	ldr	r3, [r7, #20]
 80154e4:	781b      	ldrb	r3, [r3, #0]
 80154e6:	b25b      	sxtb	r3, r3
 80154e8:	f003 030f 	and.w	r3, r3, #15
 80154ec:	b25a      	sxtb	r2, r3
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	b2db      	uxtb	r3, r3
 80154f2:	011b      	lsls	r3, r3, #4
 80154f4:	b25b      	sxtb	r3, r3
 80154f6:	4313      	orrs	r3, r2
 80154f8:	b25b      	sxtb	r3, r3
 80154fa:	b2db      	uxtb	r3, r3
 80154fc:	e001      	b.n	8015502 <put_fat+0xa8>
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	b2db      	uxtb	r3, r3
 8015502:	697a      	ldr	r2, [r7, #20]
 8015504:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	2201      	movs	r2, #1
 801550a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015510:	69bb      	ldr	r3, [r7, #24]
 8015512:	0a5b      	lsrs	r3, r3, #9
 8015514:	4413      	add	r3, r2
 8015516:	4619      	mov	r1, r3
 8015518:	68f8      	ldr	r0, [r7, #12]
 801551a:	f7ff fe3b 	bl	8015194 <move_window>
 801551e:	4603      	mov	r3, r0
 8015520:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015522:	7ffb      	ldrb	r3, [r7, #31]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d178      	bne.n	801561a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801552e:	69bb      	ldr	r3, [r7, #24]
 8015530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015534:	4413      	add	r3, r2
 8015536:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015538:	68bb      	ldr	r3, [r7, #8]
 801553a:	f003 0301 	and.w	r3, r3, #1
 801553e:	2b00      	cmp	r3, #0
 8015540:	d003      	beq.n	801554a <put_fat+0xf0>
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	091b      	lsrs	r3, r3, #4
 8015546:	b2db      	uxtb	r3, r3
 8015548:	e00e      	b.n	8015568 <put_fat+0x10e>
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	781b      	ldrb	r3, [r3, #0]
 801554e:	b25b      	sxtb	r3, r3
 8015550:	f023 030f 	bic.w	r3, r3, #15
 8015554:	b25a      	sxtb	r2, r3
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	0a1b      	lsrs	r3, r3, #8
 801555a:	b25b      	sxtb	r3, r3
 801555c:	f003 030f 	and.w	r3, r3, #15
 8015560:	b25b      	sxtb	r3, r3
 8015562:	4313      	orrs	r3, r2
 8015564:	b25b      	sxtb	r3, r3
 8015566:	b2db      	uxtb	r3, r3
 8015568:	697a      	ldr	r2, [r7, #20]
 801556a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	2201      	movs	r2, #1
 8015570:	70da      	strb	r2, [r3, #3]
			break;
 8015572:	e057      	b.n	8015624 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	0a1b      	lsrs	r3, r3, #8
 801557c:	4413      	add	r3, r2
 801557e:	4619      	mov	r1, r3
 8015580:	68f8      	ldr	r0, [r7, #12]
 8015582:	f7ff fe07 	bl	8015194 <move_window>
 8015586:	4603      	mov	r3, r0
 8015588:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801558a:	7ffb      	ldrb	r3, [r7, #31]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d146      	bne.n	801561e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015596:	68bb      	ldr	r3, [r7, #8]
 8015598:	005b      	lsls	r3, r3, #1
 801559a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801559e:	4413      	add	r3, r2
 80155a0:	687a      	ldr	r2, [r7, #4]
 80155a2:	b292      	uxth	r2, r2
 80155a4:	4611      	mov	r1, r2
 80155a6:	4618      	mov	r0, r3
 80155a8:	f7ff fb4d 	bl	8014c46 <st_word>
			fs->wflag = 1;
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	2201      	movs	r2, #1
 80155b0:	70da      	strb	r2, [r3, #3]
			break;
 80155b2:	e037      	b.n	8015624 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80155b8:	68bb      	ldr	r3, [r7, #8]
 80155ba:	09db      	lsrs	r3, r3, #7
 80155bc:	4413      	add	r3, r2
 80155be:	4619      	mov	r1, r3
 80155c0:	68f8      	ldr	r0, [r7, #12]
 80155c2:	f7ff fde7 	bl	8015194 <move_window>
 80155c6:	4603      	mov	r3, r0
 80155c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80155ca:	7ffb      	ldrb	r3, [r7, #31]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d128      	bne.n	8015622 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80155dc:	68bb      	ldr	r3, [r7, #8]
 80155de:	009b      	lsls	r3, r3, #2
 80155e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80155e4:	4413      	add	r3, r2
 80155e6:	4618      	mov	r0, r3
 80155e8:	f7ff fb0a 	bl	8014c00 <ld_dword>
 80155ec:	4603      	mov	r3, r0
 80155ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80155f2:	4323      	orrs	r3, r4
 80155f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80155fc:	68bb      	ldr	r3, [r7, #8]
 80155fe:	009b      	lsls	r3, r3, #2
 8015600:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015604:	4413      	add	r3, r2
 8015606:	6879      	ldr	r1, [r7, #4]
 8015608:	4618      	mov	r0, r3
 801560a:	f7ff fb37 	bl	8014c7c <st_dword>
			fs->wflag = 1;
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	2201      	movs	r2, #1
 8015612:	70da      	strb	r2, [r3, #3]
			break;
 8015614:	e006      	b.n	8015624 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8015616:	bf00      	nop
 8015618:	e004      	b.n	8015624 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801561a:	bf00      	nop
 801561c:	e002      	b.n	8015624 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801561e:	bf00      	nop
 8015620:	e000      	b.n	8015624 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8015622:	bf00      	nop
		}
	}
	return res;
 8015624:	7ffb      	ldrb	r3, [r7, #31]
}
 8015626:	4618      	mov	r0, r3
 8015628:	3724      	adds	r7, #36	; 0x24
 801562a:	46bd      	mov	sp, r7
 801562c:	bd90      	pop	{r4, r7, pc}

0801562e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801562e:	b580      	push	{r7, lr}
 8015630:	b088      	sub	sp, #32
 8015632:	af00      	add	r7, sp, #0
 8015634:	60f8      	str	r0, [r7, #12]
 8015636:	60b9      	str	r1, [r7, #8]
 8015638:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801563a:	2300      	movs	r3, #0
 801563c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015644:	68bb      	ldr	r3, [r7, #8]
 8015646:	2b01      	cmp	r3, #1
 8015648:	d904      	bls.n	8015654 <remove_chain+0x26>
 801564a:	69bb      	ldr	r3, [r7, #24]
 801564c:	699b      	ldr	r3, [r3, #24]
 801564e:	68ba      	ldr	r2, [r7, #8]
 8015650:	429a      	cmp	r2, r3
 8015652:	d301      	bcc.n	8015658 <remove_chain+0x2a>
 8015654:	2302      	movs	r3, #2
 8015656:	e04b      	b.n	80156f0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d00c      	beq.n	8015678 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801565e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015662:	6879      	ldr	r1, [r7, #4]
 8015664:	69b8      	ldr	r0, [r7, #24]
 8015666:	f7ff fef8 	bl	801545a <put_fat>
 801566a:	4603      	mov	r3, r0
 801566c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801566e:	7ffb      	ldrb	r3, [r7, #31]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d001      	beq.n	8015678 <remove_chain+0x4a>
 8015674:	7ffb      	ldrb	r3, [r7, #31]
 8015676:	e03b      	b.n	80156f0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8015678:	68b9      	ldr	r1, [r7, #8]
 801567a:	68f8      	ldr	r0, [r7, #12]
 801567c:	f7ff fe45 	bl	801530a <get_fat>
 8015680:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8015682:	697b      	ldr	r3, [r7, #20]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d031      	beq.n	80156ec <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8015688:	697b      	ldr	r3, [r7, #20]
 801568a:	2b01      	cmp	r3, #1
 801568c:	d101      	bne.n	8015692 <remove_chain+0x64>
 801568e:	2302      	movs	r3, #2
 8015690:	e02e      	b.n	80156f0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8015692:	697b      	ldr	r3, [r7, #20]
 8015694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015698:	d101      	bne.n	801569e <remove_chain+0x70>
 801569a:	2301      	movs	r3, #1
 801569c:	e028      	b.n	80156f0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801569e:	2200      	movs	r2, #0
 80156a0:	68b9      	ldr	r1, [r7, #8]
 80156a2:	69b8      	ldr	r0, [r7, #24]
 80156a4:	f7ff fed9 	bl	801545a <put_fat>
 80156a8:	4603      	mov	r3, r0
 80156aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80156ac:	7ffb      	ldrb	r3, [r7, #31]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d001      	beq.n	80156b6 <remove_chain+0x88>
 80156b2:	7ffb      	ldrb	r3, [r7, #31]
 80156b4:	e01c      	b.n	80156f0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80156b6:	69bb      	ldr	r3, [r7, #24]
 80156b8:	695a      	ldr	r2, [r3, #20]
 80156ba:	69bb      	ldr	r3, [r7, #24]
 80156bc:	699b      	ldr	r3, [r3, #24]
 80156be:	3b02      	subs	r3, #2
 80156c0:	429a      	cmp	r2, r3
 80156c2:	d20b      	bcs.n	80156dc <remove_chain+0xae>
			fs->free_clst++;
 80156c4:	69bb      	ldr	r3, [r7, #24]
 80156c6:	695b      	ldr	r3, [r3, #20]
 80156c8:	1c5a      	adds	r2, r3, #1
 80156ca:	69bb      	ldr	r3, [r7, #24]
 80156cc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80156ce:	69bb      	ldr	r3, [r7, #24]
 80156d0:	791b      	ldrb	r3, [r3, #4]
 80156d2:	f043 0301 	orr.w	r3, r3, #1
 80156d6:	b2da      	uxtb	r2, r3
 80156d8:	69bb      	ldr	r3, [r7, #24]
 80156da:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80156dc:	697b      	ldr	r3, [r7, #20]
 80156de:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80156e0:	69bb      	ldr	r3, [r7, #24]
 80156e2:	699b      	ldr	r3, [r3, #24]
 80156e4:	68ba      	ldr	r2, [r7, #8]
 80156e6:	429a      	cmp	r2, r3
 80156e8:	d3c6      	bcc.n	8015678 <remove_chain+0x4a>
 80156ea:	e000      	b.n	80156ee <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80156ec:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80156ee:	2300      	movs	r3, #0
}
 80156f0:	4618      	mov	r0, r3
 80156f2:	3720      	adds	r7, #32
 80156f4:	46bd      	mov	sp, r7
 80156f6:	bd80      	pop	{r7, pc}

080156f8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b088      	sub	sp, #32
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
 8015700:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015708:	683b      	ldr	r3, [r7, #0]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d10d      	bne.n	801572a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801570e:	693b      	ldr	r3, [r7, #16]
 8015710:	691b      	ldr	r3, [r3, #16]
 8015712:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8015714:	69bb      	ldr	r3, [r7, #24]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d004      	beq.n	8015724 <create_chain+0x2c>
 801571a:	693b      	ldr	r3, [r7, #16]
 801571c:	699b      	ldr	r3, [r3, #24]
 801571e:	69ba      	ldr	r2, [r7, #24]
 8015720:	429a      	cmp	r2, r3
 8015722:	d31b      	bcc.n	801575c <create_chain+0x64>
 8015724:	2301      	movs	r3, #1
 8015726:	61bb      	str	r3, [r7, #24]
 8015728:	e018      	b.n	801575c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801572a:	6839      	ldr	r1, [r7, #0]
 801572c:	6878      	ldr	r0, [r7, #4]
 801572e:	f7ff fdec 	bl	801530a <get_fat>
 8015732:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	2b01      	cmp	r3, #1
 8015738:	d801      	bhi.n	801573e <create_chain+0x46>
 801573a:	2301      	movs	r3, #1
 801573c:	e070      	b.n	8015820 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015744:	d101      	bne.n	801574a <create_chain+0x52>
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	e06a      	b.n	8015820 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801574a:	693b      	ldr	r3, [r7, #16]
 801574c:	699b      	ldr	r3, [r3, #24]
 801574e:	68fa      	ldr	r2, [r7, #12]
 8015750:	429a      	cmp	r2, r3
 8015752:	d201      	bcs.n	8015758 <create_chain+0x60>
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	e063      	b.n	8015820 <create_chain+0x128>
		scl = clst;
 8015758:	683b      	ldr	r3, [r7, #0]
 801575a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801575c:	69bb      	ldr	r3, [r7, #24]
 801575e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8015760:	69fb      	ldr	r3, [r7, #28]
 8015762:	3301      	adds	r3, #1
 8015764:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8015766:	693b      	ldr	r3, [r7, #16]
 8015768:	699b      	ldr	r3, [r3, #24]
 801576a:	69fa      	ldr	r2, [r7, #28]
 801576c:	429a      	cmp	r2, r3
 801576e:	d307      	bcc.n	8015780 <create_chain+0x88>
				ncl = 2;
 8015770:	2302      	movs	r3, #2
 8015772:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8015774:	69fa      	ldr	r2, [r7, #28]
 8015776:	69bb      	ldr	r3, [r7, #24]
 8015778:	429a      	cmp	r2, r3
 801577a:	d901      	bls.n	8015780 <create_chain+0x88>
 801577c:	2300      	movs	r3, #0
 801577e:	e04f      	b.n	8015820 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8015780:	69f9      	ldr	r1, [r7, #28]
 8015782:	6878      	ldr	r0, [r7, #4]
 8015784:	f7ff fdc1 	bl	801530a <get_fat>
 8015788:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d00e      	beq.n	80157ae <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	2b01      	cmp	r3, #1
 8015794:	d003      	beq.n	801579e <create_chain+0xa6>
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801579c:	d101      	bne.n	80157a2 <create_chain+0xaa>
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	e03e      	b.n	8015820 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80157a2:	69fa      	ldr	r2, [r7, #28]
 80157a4:	69bb      	ldr	r3, [r7, #24]
 80157a6:	429a      	cmp	r2, r3
 80157a8:	d1da      	bne.n	8015760 <create_chain+0x68>
 80157aa:	2300      	movs	r3, #0
 80157ac:	e038      	b.n	8015820 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80157ae:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80157b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80157b4:	69f9      	ldr	r1, [r7, #28]
 80157b6:	6938      	ldr	r0, [r7, #16]
 80157b8:	f7ff fe4f 	bl	801545a <put_fat>
 80157bc:	4603      	mov	r3, r0
 80157be:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80157c0:	7dfb      	ldrb	r3, [r7, #23]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d109      	bne.n	80157da <create_chain+0xe2>
 80157c6:	683b      	ldr	r3, [r7, #0]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d006      	beq.n	80157da <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80157cc:	69fa      	ldr	r2, [r7, #28]
 80157ce:	6839      	ldr	r1, [r7, #0]
 80157d0:	6938      	ldr	r0, [r7, #16]
 80157d2:	f7ff fe42 	bl	801545a <put_fat>
 80157d6:	4603      	mov	r3, r0
 80157d8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80157da:	7dfb      	ldrb	r3, [r7, #23]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d116      	bne.n	801580e <create_chain+0x116>
		fs->last_clst = ncl;
 80157e0:	693b      	ldr	r3, [r7, #16]
 80157e2:	69fa      	ldr	r2, [r7, #28]
 80157e4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80157e6:	693b      	ldr	r3, [r7, #16]
 80157e8:	695a      	ldr	r2, [r3, #20]
 80157ea:	693b      	ldr	r3, [r7, #16]
 80157ec:	699b      	ldr	r3, [r3, #24]
 80157ee:	3b02      	subs	r3, #2
 80157f0:	429a      	cmp	r2, r3
 80157f2:	d804      	bhi.n	80157fe <create_chain+0x106>
 80157f4:	693b      	ldr	r3, [r7, #16]
 80157f6:	695b      	ldr	r3, [r3, #20]
 80157f8:	1e5a      	subs	r2, r3, #1
 80157fa:	693b      	ldr	r3, [r7, #16]
 80157fc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80157fe:	693b      	ldr	r3, [r7, #16]
 8015800:	791b      	ldrb	r3, [r3, #4]
 8015802:	f043 0301 	orr.w	r3, r3, #1
 8015806:	b2da      	uxtb	r2, r3
 8015808:	693b      	ldr	r3, [r7, #16]
 801580a:	711a      	strb	r2, [r3, #4]
 801580c:	e007      	b.n	801581e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801580e:	7dfb      	ldrb	r3, [r7, #23]
 8015810:	2b01      	cmp	r3, #1
 8015812:	d102      	bne.n	801581a <create_chain+0x122>
 8015814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015818:	e000      	b.n	801581c <create_chain+0x124>
 801581a:	2301      	movs	r3, #1
 801581c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801581e:	69fb      	ldr	r3, [r7, #28]
}
 8015820:	4618      	mov	r0, r3
 8015822:	3720      	adds	r7, #32
 8015824:	46bd      	mov	sp, r7
 8015826:	bd80      	pop	{r7, pc}

08015828 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015828:	b480      	push	{r7}
 801582a:	b087      	sub	sp, #28
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
 8015830:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801583c:	3304      	adds	r3, #4
 801583e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	0a5b      	lsrs	r3, r3, #9
 8015844:	68fa      	ldr	r2, [r7, #12]
 8015846:	8952      	ldrh	r2, [r2, #10]
 8015848:	fbb3 f3f2 	udiv	r3, r3, r2
 801584c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801584e:	693b      	ldr	r3, [r7, #16]
 8015850:	1d1a      	adds	r2, r3, #4
 8015852:	613a      	str	r2, [r7, #16]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015858:	68bb      	ldr	r3, [r7, #8]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d101      	bne.n	8015862 <clmt_clust+0x3a>
 801585e:	2300      	movs	r3, #0
 8015860:	e010      	b.n	8015884 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8015862:	697a      	ldr	r2, [r7, #20]
 8015864:	68bb      	ldr	r3, [r7, #8]
 8015866:	429a      	cmp	r2, r3
 8015868:	d307      	bcc.n	801587a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801586a:	697a      	ldr	r2, [r7, #20]
 801586c:	68bb      	ldr	r3, [r7, #8]
 801586e:	1ad3      	subs	r3, r2, r3
 8015870:	617b      	str	r3, [r7, #20]
 8015872:	693b      	ldr	r3, [r7, #16]
 8015874:	3304      	adds	r3, #4
 8015876:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015878:	e7e9      	b.n	801584e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801587a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801587c:	693b      	ldr	r3, [r7, #16]
 801587e:	681a      	ldr	r2, [r3, #0]
 8015880:	697b      	ldr	r3, [r7, #20]
 8015882:	4413      	add	r3, r2
}
 8015884:	4618      	mov	r0, r3
 8015886:	371c      	adds	r7, #28
 8015888:	46bd      	mov	sp, r7
 801588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588e:	4770      	bx	lr

08015890 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b086      	sub	sp, #24
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
 8015898:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80158a6:	d204      	bcs.n	80158b2 <dir_sdi+0x22>
 80158a8:	683b      	ldr	r3, [r7, #0]
 80158aa:	f003 031f 	and.w	r3, r3, #31
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d001      	beq.n	80158b6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80158b2:	2302      	movs	r3, #2
 80158b4:	e063      	b.n	801597e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	683a      	ldr	r2, [r7, #0]
 80158ba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	689b      	ldr	r3, [r3, #8]
 80158c0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80158c2:	697b      	ldr	r3, [r7, #20]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d106      	bne.n	80158d6 <dir_sdi+0x46>
 80158c8:	693b      	ldr	r3, [r7, #16]
 80158ca:	781b      	ldrb	r3, [r3, #0]
 80158cc:	2b02      	cmp	r3, #2
 80158ce:	d902      	bls.n	80158d6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80158d0:	693b      	ldr	r3, [r7, #16]
 80158d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158d4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80158d6:	697b      	ldr	r3, [r7, #20]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d10c      	bne.n	80158f6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	095b      	lsrs	r3, r3, #5
 80158e0:	693a      	ldr	r2, [r7, #16]
 80158e2:	8912      	ldrh	r2, [r2, #8]
 80158e4:	4293      	cmp	r3, r2
 80158e6:	d301      	bcc.n	80158ec <dir_sdi+0x5c>
 80158e8:	2302      	movs	r3, #2
 80158ea:	e048      	b.n	801597e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80158ec:	693b      	ldr	r3, [r7, #16]
 80158ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	61da      	str	r2, [r3, #28]
 80158f4:	e029      	b.n	801594a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80158f6:	693b      	ldr	r3, [r7, #16]
 80158f8:	895b      	ldrh	r3, [r3, #10]
 80158fa:	025b      	lsls	r3, r3, #9
 80158fc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80158fe:	e019      	b.n	8015934 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	6979      	ldr	r1, [r7, #20]
 8015904:	4618      	mov	r0, r3
 8015906:	f7ff fd00 	bl	801530a <get_fat>
 801590a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801590c:	697b      	ldr	r3, [r7, #20]
 801590e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015912:	d101      	bne.n	8015918 <dir_sdi+0x88>
 8015914:	2301      	movs	r3, #1
 8015916:	e032      	b.n	801597e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015918:	697b      	ldr	r3, [r7, #20]
 801591a:	2b01      	cmp	r3, #1
 801591c:	d904      	bls.n	8015928 <dir_sdi+0x98>
 801591e:	693b      	ldr	r3, [r7, #16]
 8015920:	699b      	ldr	r3, [r3, #24]
 8015922:	697a      	ldr	r2, [r7, #20]
 8015924:	429a      	cmp	r2, r3
 8015926:	d301      	bcc.n	801592c <dir_sdi+0x9c>
 8015928:	2302      	movs	r3, #2
 801592a:	e028      	b.n	801597e <dir_sdi+0xee>
			ofs -= csz;
 801592c:	683a      	ldr	r2, [r7, #0]
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	1ad3      	subs	r3, r2, r3
 8015932:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015934:	683a      	ldr	r2, [r7, #0]
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	429a      	cmp	r2, r3
 801593a:	d2e1      	bcs.n	8015900 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801593c:	6979      	ldr	r1, [r7, #20]
 801593e:	6938      	ldr	r0, [r7, #16]
 8015940:	f7ff fcc4 	bl	80152cc <clust2sect>
 8015944:	4602      	mov	r2, r0
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	697a      	ldr	r2, [r7, #20]
 801594e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	69db      	ldr	r3, [r3, #28]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d101      	bne.n	801595c <dir_sdi+0xcc>
 8015958:	2302      	movs	r3, #2
 801595a:	e010      	b.n	801597e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	69da      	ldr	r2, [r3, #28]
 8015960:	683b      	ldr	r3, [r7, #0]
 8015962:	0a5b      	lsrs	r3, r3, #9
 8015964:	441a      	add	r2, r3
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801596a:	693b      	ldr	r3, [r7, #16]
 801596c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015970:	683b      	ldr	r3, [r7, #0]
 8015972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015976:	441a      	add	r2, r3
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801597c:	2300      	movs	r3, #0
}
 801597e:	4618      	mov	r0, r3
 8015980:	3718      	adds	r7, #24
 8015982:	46bd      	mov	sp, r7
 8015984:	bd80      	pop	{r7, pc}

08015986 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8015986:	b580      	push	{r7, lr}
 8015988:	b086      	sub	sp, #24
 801598a:	af00      	add	r7, sp, #0
 801598c:	6078      	str	r0, [r7, #4]
 801598e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	695b      	ldr	r3, [r3, #20]
 801599a:	3320      	adds	r3, #32
 801599c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	69db      	ldr	r3, [r3, #28]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d003      	beq.n	80159ae <dir_next+0x28>
 80159a6:	68bb      	ldr	r3, [r7, #8]
 80159a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80159ac:	d301      	bcc.n	80159b2 <dir_next+0x2c>
 80159ae:	2304      	movs	r3, #4
 80159b0:	e0aa      	b.n	8015b08 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80159b2:	68bb      	ldr	r3, [r7, #8]
 80159b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	f040 8098 	bne.w	8015aee <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	69db      	ldr	r3, [r3, #28]
 80159c2:	1c5a      	adds	r2, r3, #1
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	699b      	ldr	r3, [r3, #24]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d10b      	bne.n	80159e8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80159d0:	68bb      	ldr	r3, [r7, #8]
 80159d2:	095b      	lsrs	r3, r3, #5
 80159d4:	68fa      	ldr	r2, [r7, #12]
 80159d6:	8912      	ldrh	r2, [r2, #8]
 80159d8:	4293      	cmp	r3, r2
 80159da:	f0c0 8088 	bcc.w	8015aee <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	2200      	movs	r2, #0
 80159e2:	61da      	str	r2, [r3, #28]
 80159e4:	2304      	movs	r3, #4
 80159e6:	e08f      	b.n	8015b08 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80159e8:	68bb      	ldr	r3, [r7, #8]
 80159ea:	0a5b      	lsrs	r3, r3, #9
 80159ec:	68fa      	ldr	r2, [r7, #12]
 80159ee:	8952      	ldrh	r2, [r2, #10]
 80159f0:	3a01      	subs	r2, #1
 80159f2:	4013      	ands	r3, r2
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d17a      	bne.n	8015aee <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80159f8:	687a      	ldr	r2, [r7, #4]
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	699b      	ldr	r3, [r3, #24]
 80159fe:	4619      	mov	r1, r3
 8015a00:	4610      	mov	r0, r2
 8015a02:	f7ff fc82 	bl	801530a <get_fat>
 8015a06:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015a08:	697b      	ldr	r3, [r7, #20]
 8015a0a:	2b01      	cmp	r3, #1
 8015a0c:	d801      	bhi.n	8015a12 <dir_next+0x8c>
 8015a0e:	2302      	movs	r3, #2
 8015a10:	e07a      	b.n	8015b08 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a18:	d101      	bne.n	8015a1e <dir_next+0x98>
 8015a1a:	2301      	movs	r3, #1
 8015a1c:	e074      	b.n	8015b08 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	699b      	ldr	r3, [r3, #24]
 8015a22:	697a      	ldr	r2, [r7, #20]
 8015a24:	429a      	cmp	r2, r3
 8015a26:	d358      	bcc.n	8015ada <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015a28:	683b      	ldr	r3, [r7, #0]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d104      	bne.n	8015a38 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	2200      	movs	r2, #0
 8015a32:	61da      	str	r2, [r3, #28]
 8015a34:	2304      	movs	r3, #4
 8015a36:	e067      	b.n	8015b08 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015a38:	687a      	ldr	r2, [r7, #4]
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	699b      	ldr	r3, [r3, #24]
 8015a3e:	4619      	mov	r1, r3
 8015a40:	4610      	mov	r0, r2
 8015a42:	f7ff fe59 	bl	80156f8 <create_chain>
 8015a46:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015a48:	697b      	ldr	r3, [r7, #20]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d101      	bne.n	8015a52 <dir_next+0xcc>
 8015a4e:	2307      	movs	r3, #7
 8015a50:	e05a      	b.n	8015b08 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015a52:	697b      	ldr	r3, [r7, #20]
 8015a54:	2b01      	cmp	r3, #1
 8015a56:	d101      	bne.n	8015a5c <dir_next+0xd6>
 8015a58:	2302      	movs	r3, #2
 8015a5a:	e055      	b.n	8015b08 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015a5c:	697b      	ldr	r3, [r7, #20]
 8015a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a62:	d101      	bne.n	8015a68 <dir_next+0xe2>
 8015a64:	2301      	movs	r3, #1
 8015a66:	e04f      	b.n	8015b08 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015a68:	68f8      	ldr	r0, [r7, #12]
 8015a6a:	f7ff fb4f 	bl	801510c <sync_window>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d001      	beq.n	8015a78 <dir_next+0xf2>
 8015a74:	2301      	movs	r3, #1
 8015a76:	e047      	b.n	8015b08 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	3334      	adds	r3, #52	; 0x34
 8015a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015a80:	2100      	movs	r1, #0
 8015a82:	4618      	mov	r0, r3
 8015a84:	f7ff f947 	bl	8014d16 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015a88:	2300      	movs	r3, #0
 8015a8a:	613b      	str	r3, [r7, #16]
 8015a8c:	6979      	ldr	r1, [r7, #20]
 8015a8e:	68f8      	ldr	r0, [r7, #12]
 8015a90:	f7ff fc1c 	bl	80152cc <clust2sect>
 8015a94:	4602      	mov	r2, r0
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	631a      	str	r2, [r3, #48]	; 0x30
 8015a9a:	e012      	b.n	8015ac2 <dir_next+0x13c>
						fs->wflag = 1;
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	2201      	movs	r2, #1
 8015aa0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015aa2:	68f8      	ldr	r0, [r7, #12]
 8015aa4:	f7ff fb32 	bl	801510c <sync_window>
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d001      	beq.n	8015ab2 <dir_next+0x12c>
 8015aae:	2301      	movs	r3, #1
 8015ab0:	e02a      	b.n	8015b08 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015ab2:	693b      	ldr	r3, [r7, #16]
 8015ab4:	3301      	adds	r3, #1
 8015ab6:	613b      	str	r3, [r7, #16]
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015abc:	1c5a      	adds	r2, r3, #1
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	631a      	str	r2, [r3, #48]	; 0x30
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	895b      	ldrh	r3, [r3, #10]
 8015ac6:	461a      	mov	r2, r3
 8015ac8:	693b      	ldr	r3, [r7, #16]
 8015aca:	4293      	cmp	r3, r2
 8015acc:	d3e6      	bcc.n	8015a9c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015ad2:	693b      	ldr	r3, [r7, #16]
 8015ad4:	1ad2      	subs	r2, r2, r3
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	697a      	ldr	r2, [r7, #20]
 8015ade:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8015ae0:	6979      	ldr	r1, [r7, #20]
 8015ae2:	68f8      	ldr	r0, [r7, #12]
 8015ae4:	f7ff fbf2 	bl	80152cc <clust2sect>
 8015ae8:	4602      	mov	r2, r0
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	68ba      	ldr	r2, [r7, #8]
 8015af2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015b00:	441a      	add	r2, r3
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015b06:	2300      	movs	r3, #0
}
 8015b08:	4618      	mov	r0, r3
 8015b0a:	3718      	adds	r7, #24
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}

08015b10 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b086      	sub	sp, #24
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
 8015b18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8015b20:	2100      	movs	r1, #0
 8015b22:	6878      	ldr	r0, [r7, #4]
 8015b24:	f7ff feb4 	bl	8015890 <dir_sdi>
 8015b28:	4603      	mov	r3, r0
 8015b2a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015b2c:	7dfb      	ldrb	r3, [r7, #23]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d12b      	bne.n	8015b8a <dir_alloc+0x7a>
		n = 0;
 8015b32:	2300      	movs	r3, #0
 8015b34:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	69db      	ldr	r3, [r3, #28]
 8015b3a:	4619      	mov	r1, r3
 8015b3c:	68f8      	ldr	r0, [r7, #12]
 8015b3e:	f7ff fb29 	bl	8015194 <move_window>
 8015b42:	4603      	mov	r3, r0
 8015b44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015b46:	7dfb      	ldrb	r3, [r7, #23]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d11d      	bne.n	8015b88 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	6a1b      	ldr	r3, [r3, #32]
 8015b50:	781b      	ldrb	r3, [r3, #0]
 8015b52:	2be5      	cmp	r3, #229	; 0xe5
 8015b54:	d004      	beq.n	8015b60 <dir_alloc+0x50>
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	6a1b      	ldr	r3, [r3, #32]
 8015b5a:	781b      	ldrb	r3, [r3, #0]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d107      	bne.n	8015b70 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8015b60:	693b      	ldr	r3, [r7, #16]
 8015b62:	3301      	adds	r3, #1
 8015b64:	613b      	str	r3, [r7, #16]
 8015b66:	693a      	ldr	r2, [r7, #16]
 8015b68:	683b      	ldr	r3, [r7, #0]
 8015b6a:	429a      	cmp	r2, r3
 8015b6c:	d102      	bne.n	8015b74 <dir_alloc+0x64>
 8015b6e:	e00c      	b.n	8015b8a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8015b70:	2300      	movs	r3, #0
 8015b72:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8015b74:	2101      	movs	r1, #1
 8015b76:	6878      	ldr	r0, [r7, #4]
 8015b78:	f7ff ff05 	bl	8015986 <dir_next>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8015b80:	7dfb      	ldrb	r3, [r7, #23]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d0d7      	beq.n	8015b36 <dir_alloc+0x26>
 8015b86:	e000      	b.n	8015b8a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8015b88:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8015b8a:	7dfb      	ldrb	r3, [r7, #23]
 8015b8c:	2b04      	cmp	r3, #4
 8015b8e:	d101      	bne.n	8015b94 <dir_alloc+0x84>
 8015b90:	2307      	movs	r3, #7
 8015b92:	75fb      	strb	r3, [r7, #23]
	return res;
 8015b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b96:	4618      	mov	r0, r3
 8015b98:	3718      	adds	r7, #24
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd80      	pop	{r7, pc}

08015b9e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8015b9e:	b580      	push	{r7, lr}
 8015ba0:	b084      	sub	sp, #16
 8015ba2:	af00      	add	r7, sp, #0
 8015ba4:	6078      	str	r0, [r7, #4]
 8015ba6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8015ba8:	683b      	ldr	r3, [r7, #0]
 8015baa:	331a      	adds	r3, #26
 8015bac:	4618      	mov	r0, r3
 8015bae:	f7ff f80f 	bl	8014bd0 <ld_word>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	781b      	ldrb	r3, [r3, #0]
 8015bba:	2b03      	cmp	r3, #3
 8015bbc:	d109      	bne.n	8015bd2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015bbe:	683b      	ldr	r3, [r7, #0]
 8015bc0:	3314      	adds	r3, #20
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f7ff f804 	bl	8014bd0 <ld_word>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	041b      	lsls	r3, r3, #16
 8015bcc:	68fa      	ldr	r2, [r7, #12]
 8015bce:	4313      	orrs	r3, r2
 8015bd0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3710      	adds	r7, #16
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}

08015bdc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b084      	sub	sp, #16
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	60f8      	str	r0, [r7, #12]
 8015be4:	60b9      	str	r1, [r7, #8]
 8015be6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8015be8:	68bb      	ldr	r3, [r7, #8]
 8015bea:	331a      	adds	r3, #26
 8015bec:	687a      	ldr	r2, [r7, #4]
 8015bee:	b292      	uxth	r2, r2
 8015bf0:	4611      	mov	r1, r2
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	f7ff f827 	bl	8014c46 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	781b      	ldrb	r3, [r3, #0]
 8015bfc:	2b03      	cmp	r3, #3
 8015bfe:	d109      	bne.n	8015c14 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015c00:	68bb      	ldr	r3, [r7, #8]
 8015c02:	f103 0214 	add.w	r2, r3, #20
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	0c1b      	lsrs	r3, r3, #16
 8015c0a:	b29b      	uxth	r3, r3
 8015c0c:	4619      	mov	r1, r3
 8015c0e:	4610      	mov	r0, r2
 8015c10:	f7ff f819 	bl	8014c46 <st_word>
	}
}
 8015c14:	bf00      	nop
 8015c16:	3710      	adds	r7, #16
 8015c18:	46bd      	mov	sp, r7
 8015c1a:	bd80      	pop	{r7, pc}

08015c1c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b086      	sub	sp, #24
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015c2a:	2100      	movs	r1, #0
 8015c2c:	6878      	ldr	r0, [r7, #4]
 8015c2e:	f7ff fe2f 	bl	8015890 <dir_sdi>
 8015c32:	4603      	mov	r3, r0
 8015c34:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8015c36:	7dfb      	ldrb	r3, [r7, #23]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d001      	beq.n	8015c40 <dir_find+0x24>
 8015c3c:	7dfb      	ldrb	r3, [r7, #23]
 8015c3e:	e03e      	b.n	8015cbe <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	69db      	ldr	r3, [r3, #28]
 8015c44:	4619      	mov	r1, r3
 8015c46:	6938      	ldr	r0, [r7, #16]
 8015c48:	f7ff faa4 	bl	8015194 <move_window>
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015c50:	7dfb      	ldrb	r3, [r7, #23]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d12f      	bne.n	8015cb6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	6a1b      	ldr	r3, [r3, #32]
 8015c5a:	781b      	ldrb	r3, [r3, #0]
 8015c5c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015c5e:	7bfb      	ldrb	r3, [r7, #15]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d102      	bne.n	8015c6a <dir_find+0x4e>
 8015c64:	2304      	movs	r3, #4
 8015c66:	75fb      	strb	r3, [r7, #23]
 8015c68:	e028      	b.n	8015cbc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	6a1b      	ldr	r3, [r3, #32]
 8015c6e:	330b      	adds	r3, #11
 8015c70:	781b      	ldrb	r3, [r3, #0]
 8015c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015c76:	b2da      	uxtb	r2, r3
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	6a1b      	ldr	r3, [r3, #32]
 8015c80:	330b      	adds	r3, #11
 8015c82:	781b      	ldrb	r3, [r3, #0]
 8015c84:	f003 0308 	and.w	r3, r3, #8
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d10a      	bne.n	8015ca2 <dir_find+0x86>
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	6a18      	ldr	r0, [r3, #32]
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	3324      	adds	r3, #36	; 0x24
 8015c94:	220b      	movs	r2, #11
 8015c96:	4619      	mov	r1, r3
 8015c98:	f7ff f858 	bl	8014d4c <mem_cmp>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d00b      	beq.n	8015cba <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015ca2:	2100      	movs	r1, #0
 8015ca4:	6878      	ldr	r0, [r7, #4]
 8015ca6:	f7ff fe6e 	bl	8015986 <dir_next>
 8015caa:	4603      	mov	r3, r0
 8015cac:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015cae:	7dfb      	ldrb	r3, [r7, #23]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d0c5      	beq.n	8015c40 <dir_find+0x24>
 8015cb4:	e002      	b.n	8015cbc <dir_find+0xa0>
		if (res != FR_OK) break;
 8015cb6:	bf00      	nop
 8015cb8:	e000      	b.n	8015cbc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8015cba:	bf00      	nop

	return res;
 8015cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	3718      	adds	r7, #24
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd80      	pop	{r7, pc}

08015cc6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8015cc6:	b580      	push	{r7, lr}
 8015cc8:	b084      	sub	sp, #16
 8015cca:	af00      	add	r7, sp, #0
 8015ccc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8015cd4:	2101      	movs	r1, #1
 8015cd6:	6878      	ldr	r0, [r7, #4]
 8015cd8:	f7ff ff1a 	bl	8015b10 <dir_alloc>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015ce0:	7bfb      	ldrb	r3, [r7, #15]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d11c      	bne.n	8015d20 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	69db      	ldr	r3, [r3, #28]
 8015cea:	4619      	mov	r1, r3
 8015cec:	68b8      	ldr	r0, [r7, #8]
 8015cee:	f7ff fa51 	bl	8015194 <move_window>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015cf6:	7bfb      	ldrb	r3, [r7, #15]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d111      	bne.n	8015d20 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	6a1b      	ldr	r3, [r3, #32]
 8015d00:	2220      	movs	r2, #32
 8015d02:	2100      	movs	r1, #0
 8015d04:	4618      	mov	r0, r3
 8015d06:	f7ff f806 	bl	8014d16 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	6a18      	ldr	r0, [r3, #32]
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	3324      	adds	r3, #36	; 0x24
 8015d12:	220b      	movs	r2, #11
 8015d14:	4619      	mov	r1, r3
 8015d16:	f7fe ffdd 	bl	8014cd4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	2201      	movs	r2, #1
 8015d1e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d22:	4618      	mov	r0, r3
 8015d24:	3710      	adds	r7, #16
 8015d26:	46bd      	mov	sp, r7
 8015d28:	bd80      	pop	{r7, pc}
	...

08015d2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b088      	sub	sp, #32
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
 8015d34:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8015d36:	683b      	ldr	r3, [r7, #0]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	60fb      	str	r3, [r7, #12]
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	3324      	adds	r3, #36	; 0x24
 8015d40:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8015d42:	220b      	movs	r2, #11
 8015d44:	2120      	movs	r1, #32
 8015d46:	68b8      	ldr	r0, [r7, #8]
 8015d48:	f7fe ffe5 	bl	8014d16 <mem_set>
	si = i = 0; ni = 8;
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	613b      	str	r3, [r7, #16]
 8015d50:	693b      	ldr	r3, [r7, #16]
 8015d52:	61fb      	str	r3, [r7, #28]
 8015d54:	2308      	movs	r3, #8
 8015d56:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8015d58:	69fb      	ldr	r3, [r7, #28]
 8015d5a:	1c5a      	adds	r2, r3, #1
 8015d5c:	61fa      	str	r2, [r7, #28]
 8015d5e:	68fa      	ldr	r2, [r7, #12]
 8015d60:	4413      	add	r3, r2
 8015d62:	781b      	ldrb	r3, [r3, #0]
 8015d64:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8015d66:	7efb      	ldrb	r3, [r7, #27]
 8015d68:	2b20      	cmp	r3, #32
 8015d6a:	d94e      	bls.n	8015e0a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8015d6c:	7efb      	ldrb	r3, [r7, #27]
 8015d6e:	2b2f      	cmp	r3, #47	; 0x2f
 8015d70:	d006      	beq.n	8015d80 <create_name+0x54>
 8015d72:	7efb      	ldrb	r3, [r7, #27]
 8015d74:	2b5c      	cmp	r3, #92	; 0x5c
 8015d76:	d110      	bne.n	8015d9a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015d78:	e002      	b.n	8015d80 <create_name+0x54>
 8015d7a:	69fb      	ldr	r3, [r7, #28]
 8015d7c:	3301      	adds	r3, #1
 8015d7e:	61fb      	str	r3, [r7, #28]
 8015d80:	68fa      	ldr	r2, [r7, #12]
 8015d82:	69fb      	ldr	r3, [r7, #28]
 8015d84:	4413      	add	r3, r2
 8015d86:	781b      	ldrb	r3, [r3, #0]
 8015d88:	2b2f      	cmp	r3, #47	; 0x2f
 8015d8a:	d0f6      	beq.n	8015d7a <create_name+0x4e>
 8015d8c:	68fa      	ldr	r2, [r7, #12]
 8015d8e:	69fb      	ldr	r3, [r7, #28]
 8015d90:	4413      	add	r3, r2
 8015d92:	781b      	ldrb	r3, [r3, #0]
 8015d94:	2b5c      	cmp	r3, #92	; 0x5c
 8015d96:	d0f0      	beq.n	8015d7a <create_name+0x4e>
			break;
 8015d98:	e038      	b.n	8015e0c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8015d9a:	7efb      	ldrb	r3, [r7, #27]
 8015d9c:	2b2e      	cmp	r3, #46	; 0x2e
 8015d9e:	d003      	beq.n	8015da8 <create_name+0x7c>
 8015da0:	693a      	ldr	r2, [r7, #16]
 8015da2:	697b      	ldr	r3, [r7, #20]
 8015da4:	429a      	cmp	r2, r3
 8015da6:	d30c      	bcc.n	8015dc2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8015da8:	697b      	ldr	r3, [r7, #20]
 8015daa:	2b0b      	cmp	r3, #11
 8015dac:	d002      	beq.n	8015db4 <create_name+0x88>
 8015dae:	7efb      	ldrb	r3, [r7, #27]
 8015db0:	2b2e      	cmp	r3, #46	; 0x2e
 8015db2:	d001      	beq.n	8015db8 <create_name+0x8c>
 8015db4:	2306      	movs	r3, #6
 8015db6:	e044      	b.n	8015e42 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8015db8:	2308      	movs	r3, #8
 8015dba:	613b      	str	r3, [r7, #16]
 8015dbc:	230b      	movs	r3, #11
 8015dbe:	617b      	str	r3, [r7, #20]
			continue;
 8015dc0:	e022      	b.n	8015e08 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8015dc2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	da04      	bge.n	8015dd4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8015dca:	7efb      	ldrb	r3, [r7, #27]
 8015dcc:	3b80      	subs	r3, #128	; 0x80
 8015dce:	4a1f      	ldr	r2, [pc, #124]	; (8015e4c <create_name+0x120>)
 8015dd0:	5cd3      	ldrb	r3, [r2, r3]
 8015dd2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8015dd4:	7efb      	ldrb	r3, [r7, #27]
 8015dd6:	4619      	mov	r1, r3
 8015dd8:	481d      	ldr	r0, [pc, #116]	; (8015e50 <create_name+0x124>)
 8015dda:	f7fe ffde 	bl	8014d9a <chk_chr>
 8015dde:	4603      	mov	r3, r0
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d001      	beq.n	8015de8 <create_name+0xbc>
 8015de4:	2306      	movs	r3, #6
 8015de6:	e02c      	b.n	8015e42 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8015de8:	7efb      	ldrb	r3, [r7, #27]
 8015dea:	2b60      	cmp	r3, #96	; 0x60
 8015dec:	d905      	bls.n	8015dfa <create_name+0xce>
 8015dee:	7efb      	ldrb	r3, [r7, #27]
 8015df0:	2b7a      	cmp	r3, #122	; 0x7a
 8015df2:	d802      	bhi.n	8015dfa <create_name+0xce>
 8015df4:	7efb      	ldrb	r3, [r7, #27]
 8015df6:	3b20      	subs	r3, #32
 8015df8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8015dfa:	693b      	ldr	r3, [r7, #16]
 8015dfc:	1c5a      	adds	r2, r3, #1
 8015dfe:	613a      	str	r2, [r7, #16]
 8015e00:	68ba      	ldr	r2, [r7, #8]
 8015e02:	4413      	add	r3, r2
 8015e04:	7efa      	ldrb	r2, [r7, #27]
 8015e06:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8015e08:	e7a6      	b.n	8015d58 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8015e0a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8015e0c:	68fa      	ldr	r2, [r7, #12]
 8015e0e:	69fb      	ldr	r3, [r7, #28]
 8015e10:	441a      	add	r2, r3
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8015e16:	693b      	ldr	r3, [r7, #16]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d101      	bne.n	8015e20 <create_name+0xf4>
 8015e1c:	2306      	movs	r3, #6
 8015e1e:	e010      	b.n	8015e42 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8015e20:	68bb      	ldr	r3, [r7, #8]
 8015e22:	781b      	ldrb	r3, [r3, #0]
 8015e24:	2be5      	cmp	r3, #229	; 0xe5
 8015e26:	d102      	bne.n	8015e2e <create_name+0x102>
 8015e28:	68bb      	ldr	r3, [r7, #8]
 8015e2a:	2205      	movs	r2, #5
 8015e2c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015e2e:	7efb      	ldrb	r3, [r7, #27]
 8015e30:	2b20      	cmp	r3, #32
 8015e32:	d801      	bhi.n	8015e38 <create_name+0x10c>
 8015e34:	2204      	movs	r2, #4
 8015e36:	e000      	b.n	8015e3a <create_name+0x10e>
 8015e38:	2200      	movs	r2, #0
 8015e3a:	68bb      	ldr	r3, [r7, #8]
 8015e3c:	330b      	adds	r3, #11
 8015e3e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8015e40:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8015e42:	4618      	mov	r0, r3
 8015e44:	3720      	adds	r7, #32
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bd80      	pop	{r7, pc}
 8015e4a:	bf00      	nop
 8015e4c:	08021688 	.word	0x08021688
 8015e50:	08020cc8 	.word	0x08020cc8

08015e54 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	b086      	sub	sp, #24
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
 8015e5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8015e62:	693b      	ldr	r3, [r7, #16]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8015e68:	e002      	b.n	8015e70 <follow_path+0x1c>
 8015e6a:	683b      	ldr	r3, [r7, #0]
 8015e6c:	3301      	adds	r3, #1
 8015e6e:	603b      	str	r3, [r7, #0]
 8015e70:	683b      	ldr	r3, [r7, #0]
 8015e72:	781b      	ldrb	r3, [r3, #0]
 8015e74:	2b2f      	cmp	r3, #47	; 0x2f
 8015e76:	d0f8      	beq.n	8015e6a <follow_path+0x16>
 8015e78:	683b      	ldr	r3, [r7, #0]
 8015e7a:	781b      	ldrb	r3, [r3, #0]
 8015e7c:	2b5c      	cmp	r3, #92	; 0x5c
 8015e7e:	d0f4      	beq.n	8015e6a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8015e80:	693b      	ldr	r3, [r7, #16]
 8015e82:	2200      	movs	r2, #0
 8015e84:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8015e86:	683b      	ldr	r3, [r7, #0]
 8015e88:	781b      	ldrb	r3, [r3, #0]
 8015e8a:	2b1f      	cmp	r3, #31
 8015e8c:	d80a      	bhi.n	8015ea4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2280      	movs	r2, #128	; 0x80
 8015e92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8015e96:	2100      	movs	r1, #0
 8015e98:	6878      	ldr	r0, [r7, #4]
 8015e9a:	f7ff fcf9 	bl	8015890 <dir_sdi>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	75fb      	strb	r3, [r7, #23]
 8015ea2:	e043      	b.n	8015f2c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015ea4:	463b      	mov	r3, r7
 8015ea6:	4619      	mov	r1, r3
 8015ea8:	6878      	ldr	r0, [r7, #4]
 8015eaa:	f7ff ff3f 	bl	8015d2c <create_name>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015eb2:	7dfb      	ldrb	r3, [r7, #23]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d134      	bne.n	8015f22 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8015eb8:	6878      	ldr	r0, [r7, #4]
 8015eba:	f7ff feaf 	bl	8015c1c <dir_find>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015ec8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8015eca:	7dfb      	ldrb	r3, [r7, #23]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d00a      	beq.n	8015ee6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8015ed0:	7dfb      	ldrb	r3, [r7, #23]
 8015ed2:	2b04      	cmp	r3, #4
 8015ed4:	d127      	bne.n	8015f26 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015ed6:	7afb      	ldrb	r3, [r7, #11]
 8015ed8:	f003 0304 	and.w	r3, r3, #4
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d122      	bne.n	8015f26 <follow_path+0xd2>
 8015ee0:	2305      	movs	r3, #5
 8015ee2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8015ee4:	e01f      	b.n	8015f26 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015ee6:	7afb      	ldrb	r3, [r7, #11]
 8015ee8:	f003 0304 	and.w	r3, r3, #4
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d11c      	bne.n	8015f2a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8015ef0:	693b      	ldr	r3, [r7, #16]
 8015ef2:	799b      	ldrb	r3, [r3, #6]
 8015ef4:	f003 0310 	and.w	r3, r3, #16
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d102      	bne.n	8015f02 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8015efc:	2305      	movs	r3, #5
 8015efe:	75fb      	strb	r3, [r7, #23]
 8015f00:	e014      	b.n	8015f2c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	695b      	ldr	r3, [r3, #20]
 8015f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f10:	4413      	add	r3, r2
 8015f12:	4619      	mov	r1, r3
 8015f14:	68f8      	ldr	r0, [r7, #12]
 8015f16:	f7ff fe42 	bl	8015b9e <ld_clust>
 8015f1a:	4602      	mov	r2, r0
 8015f1c:	693b      	ldr	r3, [r7, #16]
 8015f1e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015f20:	e7c0      	b.n	8015ea4 <follow_path+0x50>
			if (res != FR_OK) break;
 8015f22:	bf00      	nop
 8015f24:	e002      	b.n	8015f2c <follow_path+0xd8>
				break;
 8015f26:	bf00      	nop
 8015f28:	e000      	b.n	8015f2c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015f2a:	bf00      	nop
			}
		}
	}

	return res;
 8015f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f2e:	4618      	mov	r0, r3
 8015f30:	3718      	adds	r7, #24
 8015f32:	46bd      	mov	sp, r7
 8015f34:	bd80      	pop	{r7, pc}

08015f36 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8015f36:	b480      	push	{r7}
 8015f38:	b087      	sub	sp, #28
 8015f3a:	af00      	add	r7, sp, #0
 8015f3c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8015f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f42:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d031      	beq.n	8015fb0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	617b      	str	r3, [r7, #20]
 8015f52:	e002      	b.n	8015f5a <get_ldnumber+0x24>
 8015f54:	697b      	ldr	r3, [r7, #20]
 8015f56:	3301      	adds	r3, #1
 8015f58:	617b      	str	r3, [r7, #20]
 8015f5a:	697b      	ldr	r3, [r7, #20]
 8015f5c:	781b      	ldrb	r3, [r3, #0]
 8015f5e:	2b20      	cmp	r3, #32
 8015f60:	d903      	bls.n	8015f6a <get_ldnumber+0x34>
 8015f62:	697b      	ldr	r3, [r7, #20]
 8015f64:	781b      	ldrb	r3, [r3, #0]
 8015f66:	2b3a      	cmp	r3, #58	; 0x3a
 8015f68:	d1f4      	bne.n	8015f54 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8015f6a:	697b      	ldr	r3, [r7, #20]
 8015f6c:	781b      	ldrb	r3, [r3, #0]
 8015f6e:	2b3a      	cmp	r3, #58	; 0x3a
 8015f70:	d11c      	bne.n	8015fac <get_ldnumber+0x76>
			tp = *path;
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	1c5a      	adds	r2, r3, #1
 8015f7c:	60fa      	str	r2, [r7, #12]
 8015f7e:	781b      	ldrb	r3, [r3, #0]
 8015f80:	3b30      	subs	r3, #48	; 0x30
 8015f82:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8015f84:	68bb      	ldr	r3, [r7, #8]
 8015f86:	2b09      	cmp	r3, #9
 8015f88:	d80e      	bhi.n	8015fa8 <get_ldnumber+0x72>
 8015f8a:	68fa      	ldr	r2, [r7, #12]
 8015f8c:	697b      	ldr	r3, [r7, #20]
 8015f8e:	429a      	cmp	r2, r3
 8015f90:	d10a      	bne.n	8015fa8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8015f92:	68bb      	ldr	r3, [r7, #8]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d107      	bne.n	8015fa8 <get_ldnumber+0x72>
					vol = (int)i;
 8015f98:	68bb      	ldr	r3, [r7, #8]
 8015f9a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8015f9c:	697b      	ldr	r3, [r7, #20]
 8015f9e:	3301      	adds	r3, #1
 8015fa0:	617b      	str	r3, [r7, #20]
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	697a      	ldr	r2, [r7, #20]
 8015fa6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8015fa8:	693b      	ldr	r3, [r7, #16]
 8015faa:	e002      	b.n	8015fb2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8015fac:	2300      	movs	r3, #0
 8015fae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8015fb0:	693b      	ldr	r3, [r7, #16]
}
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	371c      	adds	r7, #28
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fbc:	4770      	bx	lr
	...

08015fc0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b082      	sub	sp, #8
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
 8015fc8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	2200      	movs	r2, #0
 8015fce:	70da      	strb	r2, [r3, #3]
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015fd6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8015fd8:	6839      	ldr	r1, [r7, #0]
 8015fda:	6878      	ldr	r0, [r7, #4]
 8015fdc:	f7ff f8da 	bl	8015194 <move_window>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d001      	beq.n	8015fea <check_fs+0x2a>
 8015fe6:	2304      	movs	r3, #4
 8015fe8:	e038      	b.n	801605c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	3334      	adds	r3, #52	; 0x34
 8015fee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f7fe fdec 	bl	8014bd0 <ld_word>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	461a      	mov	r2, r3
 8015ffc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016000:	429a      	cmp	r2, r3
 8016002:	d001      	beq.n	8016008 <check_fs+0x48>
 8016004:	2303      	movs	r3, #3
 8016006:	e029      	b.n	801605c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801600e:	2be9      	cmp	r3, #233	; 0xe9
 8016010:	d009      	beq.n	8016026 <check_fs+0x66>
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016018:	2beb      	cmp	r3, #235	; 0xeb
 801601a:	d11e      	bne.n	801605a <check_fs+0x9a>
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8016022:	2b90      	cmp	r3, #144	; 0x90
 8016024:	d119      	bne.n	801605a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	3334      	adds	r3, #52	; 0x34
 801602a:	3336      	adds	r3, #54	; 0x36
 801602c:	4618      	mov	r0, r3
 801602e:	f7fe fde7 	bl	8014c00 <ld_dword>
 8016032:	4603      	mov	r3, r0
 8016034:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016038:	4a0a      	ldr	r2, [pc, #40]	; (8016064 <check_fs+0xa4>)
 801603a:	4293      	cmp	r3, r2
 801603c:	d101      	bne.n	8016042 <check_fs+0x82>
 801603e:	2300      	movs	r3, #0
 8016040:	e00c      	b.n	801605c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	3334      	adds	r3, #52	; 0x34
 8016046:	3352      	adds	r3, #82	; 0x52
 8016048:	4618      	mov	r0, r3
 801604a:	f7fe fdd9 	bl	8014c00 <ld_dword>
 801604e:	4603      	mov	r3, r0
 8016050:	4a05      	ldr	r2, [pc, #20]	; (8016068 <check_fs+0xa8>)
 8016052:	4293      	cmp	r3, r2
 8016054:	d101      	bne.n	801605a <check_fs+0x9a>
 8016056:	2300      	movs	r3, #0
 8016058:	e000      	b.n	801605c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801605a:	2302      	movs	r3, #2
}
 801605c:	4618      	mov	r0, r3
 801605e:	3708      	adds	r7, #8
 8016060:	46bd      	mov	sp, r7
 8016062:	bd80      	pop	{r7, pc}
 8016064:	00544146 	.word	0x00544146
 8016068:	33544146 	.word	0x33544146

0801606c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801606c:	b580      	push	{r7, lr}
 801606e:	b096      	sub	sp, #88	; 0x58
 8016070:	af00      	add	r7, sp, #0
 8016072:	60f8      	str	r0, [r7, #12]
 8016074:	60b9      	str	r1, [r7, #8]
 8016076:	4613      	mov	r3, r2
 8016078:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801607a:	68bb      	ldr	r3, [r7, #8]
 801607c:	2200      	movs	r2, #0
 801607e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016080:	68f8      	ldr	r0, [r7, #12]
 8016082:	f7ff ff58 	bl	8015f36 <get_ldnumber>
 8016086:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801608a:	2b00      	cmp	r3, #0
 801608c:	da01      	bge.n	8016092 <find_volume+0x26>
 801608e:	230b      	movs	r3, #11
 8016090:	e235      	b.n	80164fe <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8016092:	4aa5      	ldr	r2, [pc, #660]	; (8016328 <find_volume+0x2bc>)
 8016094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801609a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d101      	bne.n	80160a6 <find_volume+0x3a>
 80160a2:	230c      	movs	r3, #12
 80160a4:	e22b      	b.n	80164fe <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80160a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80160a8:	f7fe fe92 	bl	8014dd0 <lock_fs>
 80160ac:	4603      	mov	r3, r0
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d101      	bne.n	80160b6 <find_volume+0x4a>
 80160b2:	230f      	movs	r3, #15
 80160b4:	e223      	b.n	80164fe <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80160b6:	68bb      	ldr	r3, [r7, #8]
 80160b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80160ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80160bc:	79fb      	ldrb	r3, [r7, #7]
 80160be:	f023 0301 	bic.w	r3, r3, #1
 80160c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80160c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160c6:	781b      	ldrb	r3, [r3, #0]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d01a      	beq.n	8016102 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80160cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160ce:	785b      	ldrb	r3, [r3, #1]
 80160d0:	4618      	mov	r0, r3
 80160d2:	f7fe fcdf 	bl	8014a94 <disk_status>
 80160d6:	4603      	mov	r3, r0
 80160d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80160dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80160e0:	f003 0301 	and.w	r3, r3, #1
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d10c      	bne.n	8016102 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80160e8:	79fb      	ldrb	r3, [r7, #7]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d007      	beq.n	80160fe <find_volume+0x92>
 80160ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80160f2:	f003 0304 	and.w	r3, r3, #4
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d001      	beq.n	80160fe <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80160fa:	230a      	movs	r3, #10
 80160fc:	e1ff      	b.n	80164fe <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 80160fe:	2300      	movs	r3, #0
 8016100:	e1fd      	b.n	80164fe <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016104:	2200      	movs	r2, #0
 8016106:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8016108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801610a:	b2da      	uxtb	r2, r3
 801610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801610e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016112:	785b      	ldrb	r3, [r3, #1]
 8016114:	4618      	mov	r0, r3
 8016116:	f7fe fcd7 	bl	8014ac8 <disk_initialize>
 801611a:	4603      	mov	r3, r0
 801611c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016120:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016124:	f003 0301 	and.w	r3, r3, #1
 8016128:	2b00      	cmp	r3, #0
 801612a:	d001      	beq.n	8016130 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801612c:	2303      	movs	r3, #3
 801612e:	e1e6      	b.n	80164fe <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016130:	79fb      	ldrb	r3, [r7, #7]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d007      	beq.n	8016146 <find_volume+0xda>
 8016136:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801613a:	f003 0304 	and.w	r3, r3, #4
 801613e:	2b00      	cmp	r3, #0
 8016140:	d001      	beq.n	8016146 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8016142:	230a      	movs	r3, #10
 8016144:	e1db      	b.n	80164fe <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8016146:	2300      	movs	r3, #0
 8016148:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801614a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801614c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801614e:	f7ff ff37 	bl	8015fc0 <check_fs>
 8016152:	4603      	mov	r3, r0
 8016154:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8016158:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801615c:	2b02      	cmp	r3, #2
 801615e:	d149      	bne.n	80161f4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016160:	2300      	movs	r3, #0
 8016162:	643b      	str	r3, [r7, #64]	; 0x40
 8016164:	e01e      	b.n	80161a4 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8016166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016168:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801616c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801616e:	011b      	lsls	r3, r3, #4
 8016170:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016174:	4413      	add	r3, r2
 8016176:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801617a:	3304      	adds	r3, #4
 801617c:	781b      	ldrb	r3, [r3, #0]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d006      	beq.n	8016190 <find_volume+0x124>
 8016182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016184:	3308      	adds	r3, #8
 8016186:	4618      	mov	r0, r3
 8016188:	f7fe fd3a 	bl	8014c00 <ld_dword>
 801618c:	4602      	mov	r2, r0
 801618e:	e000      	b.n	8016192 <find_volume+0x126>
 8016190:	2200      	movs	r2, #0
 8016192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016194:	009b      	lsls	r3, r3, #2
 8016196:	3358      	adds	r3, #88	; 0x58
 8016198:	443b      	add	r3, r7
 801619a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801619e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80161a0:	3301      	adds	r3, #1
 80161a2:	643b      	str	r3, [r7, #64]	; 0x40
 80161a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80161a6:	2b03      	cmp	r3, #3
 80161a8:	d9dd      	bls.n	8016166 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80161aa:	2300      	movs	r3, #0
 80161ac:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80161ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d002      	beq.n	80161ba <find_volume+0x14e>
 80161b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80161b6:	3b01      	subs	r3, #1
 80161b8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80161ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80161bc:	009b      	lsls	r3, r3, #2
 80161be:	3358      	adds	r3, #88	; 0x58
 80161c0:	443b      	add	r3, r7
 80161c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80161c6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80161c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d005      	beq.n	80161da <find_volume+0x16e>
 80161ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80161d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80161d2:	f7ff fef5 	bl	8015fc0 <check_fs>
 80161d6:	4603      	mov	r3, r0
 80161d8:	e000      	b.n	80161dc <find_volume+0x170>
 80161da:	2303      	movs	r3, #3
 80161dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80161e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80161e4:	2b01      	cmp	r3, #1
 80161e6:	d905      	bls.n	80161f4 <find_volume+0x188>
 80161e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80161ea:	3301      	adds	r3, #1
 80161ec:	643b      	str	r3, [r7, #64]	; 0x40
 80161ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80161f0:	2b03      	cmp	r3, #3
 80161f2:	d9e2      	bls.n	80161ba <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80161f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80161f8:	2b04      	cmp	r3, #4
 80161fa:	d101      	bne.n	8016200 <find_volume+0x194>
 80161fc:	2301      	movs	r3, #1
 80161fe:	e17e      	b.n	80164fe <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016200:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016204:	2b01      	cmp	r3, #1
 8016206:	d901      	bls.n	801620c <find_volume+0x1a0>
 8016208:	230d      	movs	r3, #13
 801620a:	e178      	b.n	80164fe <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801620e:	3334      	adds	r3, #52	; 0x34
 8016210:	330b      	adds	r3, #11
 8016212:	4618      	mov	r0, r3
 8016214:	f7fe fcdc 	bl	8014bd0 <ld_word>
 8016218:	4603      	mov	r3, r0
 801621a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801621e:	d001      	beq.n	8016224 <find_volume+0x1b8>
 8016220:	230d      	movs	r3, #13
 8016222:	e16c      	b.n	80164fe <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016226:	3334      	adds	r3, #52	; 0x34
 8016228:	3316      	adds	r3, #22
 801622a:	4618      	mov	r0, r3
 801622c:	f7fe fcd0 	bl	8014bd0 <ld_word>
 8016230:	4603      	mov	r3, r0
 8016232:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016236:	2b00      	cmp	r3, #0
 8016238:	d106      	bne.n	8016248 <find_volume+0x1dc>
 801623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801623c:	3334      	adds	r3, #52	; 0x34
 801623e:	3324      	adds	r3, #36	; 0x24
 8016240:	4618      	mov	r0, r3
 8016242:	f7fe fcdd 	bl	8014c00 <ld_dword>
 8016246:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8016248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801624a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801624c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016250:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8016254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016256:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8016258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801625a:	789b      	ldrb	r3, [r3, #2]
 801625c:	2b01      	cmp	r3, #1
 801625e:	d005      	beq.n	801626c <find_volume+0x200>
 8016260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016262:	789b      	ldrb	r3, [r3, #2]
 8016264:	2b02      	cmp	r3, #2
 8016266:	d001      	beq.n	801626c <find_volume+0x200>
 8016268:	230d      	movs	r3, #13
 801626a:	e148      	b.n	80164fe <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801626e:	789b      	ldrb	r3, [r3, #2]
 8016270:	461a      	mov	r2, r3
 8016272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016274:	fb02 f303 	mul.w	r3, r2, r3
 8016278:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801627c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016280:	b29a      	uxth	r2, r3
 8016282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016284:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8016286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016288:	895b      	ldrh	r3, [r3, #10]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d008      	beq.n	80162a0 <find_volume+0x234>
 801628e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016290:	895b      	ldrh	r3, [r3, #10]
 8016292:	461a      	mov	r2, r3
 8016294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016296:	895b      	ldrh	r3, [r3, #10]
 8016298:	3b01      	subs	r3, #1
 801629a:	4013      	ands	r3, r2
 801629c:	2b00      	cmp	r3, #0
 801629e:	d001      	beq.n	80162a4 <find_volume+0x238>
 80162a0:	230d      	movs	r3, #13
 80162a2:	e12c      	b.n	80164fe <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80162a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162a6:	3334      	adds	r3, #52	; 0x34
 80162a8:	3311      	adds	r3, #17
 80162aa:	4618      	mov	r0, r3
 80162ac:	f7fe fc90 	bl	8014bd0 <ld_word>
 80162b0:	4603      	mov	r3, r0
 80162b2:	461a      	mov	r2, r3
 80162b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80162b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162ba:	891b      	ldrh	r3, [r3, #8]
 80162bc:	f003 030f 	and.w	r3, r3, #15
 80162c0:	b29b      	uxth	r3, r3
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d001      	beq.n	80162ca <find_volume+0x25e>
 80162c6:	230d      	movs	r3, #13
 80162c8:	e119      	b.n	80164fe <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80162ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162cc:	3334      	adds	r3, #52	; 0x34
 80162ce:	3313      	adds	r3, #19
 80162d0:	4618      	mov	r0, r3
 80162d2:	f7fe fc7d 	bl	8014bd0 <ld_word>
 80162d6:	4603      	mov	r3, r0
 80162d8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80162da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d106      	bne.n	80162ee <find_volume+0x282>
 80162e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162e2:	3334      	adds	r3, #52	; 0x34
 80162e4:	3320      	adds	r3, #32
 80162e6:	4618      	mov	r0, r3
 80162e8:	f7fe fc8a 	bl	8014c00 <ld_dword>
 80162ec:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80162ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162f0:	3334      	adds	r3, #52	; 0x34
 80162f2:	330e      	adds	r3, #14
 80162f4:	4618      	mov	r0, r3
 80162f6:	f7fe fc6b 	bl	8014bd0 <ld_word>
 80162fa:	4603      	mov	r3, r0
 80162fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80162fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016300:	2b00      	cmp	r3, #0
 8016302:	d101      	bne.n	8016308 <find_volume+0x29c>
 8016304:	230d      	movs	r3, #13
 8016306:	e0fa      	b.n	80164fe <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016308:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801630a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801630c:	4413      	add	r3, r2
 801630e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016310:	8912      	ldrh	r2, [r2, #8]
 8016312:	0912      	lsrs	r2, r2, #4
 8016314:	b292      	uxth	r2, r2
 8016316:	4413      	add	r3, r2
 8016318:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801631a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801631e:	429a      	cmp	r2, r3
 8016320:	d204      	bcs.n	801632c <find_volume+0x2c0>
 8016322:	230d      	movs	r3, #13
 8016324:	e0eb      	b.n	80164fe <find_volume+0x492>
 8016326:	bf00      	nop
 8016328:	20000fbc 	.word	0x20000fbc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801632c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016330:	1ad3      	subs	r3, r2, r3
 8016332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016334:	8952      	ldrh	r2, [r2, #10]
 8016336:	fbb3 f3f2 	udiv	r3, r3, r2
 801633a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801633e:	2b00      	cmp	r3, #0
 8016340:	d101      	bne.n	8016346 <find_volume+0x2da>
 8016342:	230d      	movs	r3, #13
 8016344:	e0db      	b.n	80164fe <find_volume+0x492>
		fmt = FS_FAT32;
 8016346:	2303      	movs	r3, #3
 8016348:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801634e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8016352:	4293      	cmp	r3, r2
 8016354:	d802      	bhi.n	801635c <find_volume+0x2f0>
 8016356:	2302      	movs	r3, #2
 8016358:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801635e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016362:	4293      	cmp	r3, r2
 8016364:	d802      	bhi.n	801636c <find_volume+0x300>
 8016366:	2301      	movs	r3, #1
 8016368:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801636e:	1c9a      	adds	r2, r3, #2
 8016370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016372:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8016374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016376:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016378:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801637a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801637c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801637e:	441a      	add	r2, r3
 8016380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016382:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8016384:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016388:	441a      	add	r2, r3
 801638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801638c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801638e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016392:	2b03      	cmp	r3, #3
 8016394:	d11e      	bne.n	80163d4 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016398:	3334      	adds	r3, #52	; 0x34
 801639a:	332a      	adds	r3, #42	; 0x2a
 801639c:	4618      	mov	r0, r3
 801639e:	f7fe fc17 	bl	8014bd0 <ld_word>
 80163a2:	4603      	mov	r3, r0
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d001      	beq.n	80163ac <find_volume+0x340>
 80163a8:	230d      	movs	r3, #13
 80163aa:	e0a8      	b.n	80164fe <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80163ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ae:	891b      	ldrh	r3, [r3, #8]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d001      	beq.n	80163b8 <find_volume+0x34c>
 80163b4:	230d      	movs	r3, #13
 80163b6:	e0a2      	b.n	80164fe <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80163b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ba:	3334      	adds	r3, #52	; 0x34
 80163bc:	332c      	adds	r3, #44	; 0x2c
 80163be:	4618      	mov	r0, r3
 80163c0:	f7fe fc1e 	bl	8014c00 <ld_dword>
 80163c4:	4602      	mov	r2, r0
 80163c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163c8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80163ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163cc:	699b      	ldr	r3, [r3, #24]
 80163ce:	009b      	lsls	r3, r3, #2
 80163d0:	647b      	str	r3, [r7, #68]	; 0x44
 80163d2:	e01f      	b.n	8016414 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80163d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163d6:	891b      	ldrh	r3, [r3, #8]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d101      	bne.n	80163e0 <find_volume+0x374>
 80163dc:	230d      	movs	r3, #13
 80163de:	e08e      	b.n	80164fe <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80163e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80163e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163e6:	441a      	add	r2, r3
 80163e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ea:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80163ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80163f0:	2b02      	cmp	r3, #2
 80163f2:	d103      	bne.n	80163fc <find_volume+0x390>
 80163f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163f6:	699b      	ldr	r3, [r3, #24]
 80163f8:	005b      	lsls	r3, r3, #1
 80163fa:	e00a      	b.n	8016412 <find_volume+0x3a6>
 80163fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163fe:	699a      	ldr	r2, [r3, #24]
 8016400:	4613      	mov	r3, r2
 8016402:	005b      	lsls	r3, r3, #1
 8016404:	4413      	add	r3, r2
 8016406:	085a      	lsrs	r2, r3, #1
 8016408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801640a:	699b      	ldr	r3, [r3, #24]
 801640c:	f003 0301 	and.w	r3, r3, #1
 8016410:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016412:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016416:	69da      	ldr	r2, [r3, #28]
 8016418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801641a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801641e:	0a5b      	lsrs	r3, r3, #9
 8016420:	429a      	cmp	r2, r3
 8016422:	d201      	bcs.n	8016428 <find_volume+0x3bc>
 8016424:	230d      	movs	r3, #13
 8016426:	e06a      	b.n	80164fe <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8016428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801642a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801642e:	615a      	str	r2, [r3, #20]
 8016430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016432:	695a      	ldr	r2, [r3, #20]
 8016434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016436:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8016438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801643a:	2280      	movs	r2, #128	; 0x80
 801643c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801643e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016442:	2b03      	cmp	r3, #3
 8016444:	d149      	bne.n	80164da <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8016446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016448:	3334      	adds	r3, #52	; 0x34
 801644a:	3330      	adds	r3, #48	; 0x30
 801644c:	4618      	mov	r0, r3
 801644e:	f7fe fbbf 	bl	8014bd0 <ld_word>
 8016452:	4603      	mov	r3, r0
 8016454:	2b01      	cmp	r3, #1
 8016456:	d140      	bne.n	80164da <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8016458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801645a:	3301      	adds	r3, #1
 801645c:	4619      	mov	r1, r3
 801645e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016460:	f7fe fe98 	bl	8015194 <move_window>
 8016464:	4603      	mov	r3, r0
 8016466:	2b00      	cmp	r3, #0
 8016468:	d137      	bne.n	80164da <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 801646a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801646c:	2200      	movs	r2, #0
 801646e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016472:	3334      	adds	r3, #52	; 0x34
 8016474:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016478:	4618      	mov	r0, r3
 801647a:	f7fe fba9 	bl	8014bd0 <ld_word>
 801647e:	4603      	mov	r3, r0
 8016480:	461a      	mov	r2, r3
 8016482:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016486:	429a      	cmp	r2, r3
 8016488:	d127      	bne.n	80164da <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801648c:	3334      	adds	r3, #52	; 0x34
 801648e:	4618      	mov	r0, r3
 8016490:	f7fe fbb6 	bl	8014c00 <ld_dword>
 8016494:	4603      	mov	r3, r0
 8016496:	4a1c      	ldr	r2, [pc, #112]	; (8016508 <find_volume+0x49c>)
 8016498:	4293      	cmp	r3, r2
 801649a:	d11e      	bne.n	80164da <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801649c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801649e:	3334      	adds	r3, #52	; 0x34
 80164a0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80164a4:	4618      	mov	r0, r3
 80164a6:	f7fe fbab 	bl	8014c00 <ld_dword>
 80164aa:	4603      	mov	r3, r0
 80164ac:	4a17      	ldr	r2, [pc, #92]	; (801650c <find_volume+0x4a0>)
 80164ae:	4293      	cmp	r3, r2
 80164b0:	d113      	bne.n	80164da <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80164b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164b4:	3334      	adds	r3, #52	; 0x34
 80164b6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80164ba:	4618      	mov	r0, r3
 80164bc:	f7fe fba0 	bl	8014c00 <ld_dword>
 80164c0:	4602      	mov	r2, r0
 80164c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164c4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80164c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164c8:	3334      	adds	r3, #52	; 0x34
 80164ca:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80164ce:	4618      	mov	r0, r3
 80164d0:	f7fe fb96 	bl	8014c00 <ld_dword>
 80164d4:	4602      	mov	r2, r0
 80164d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164d8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80164da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164dc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80164e0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80164e2:	4b0b      	ldr	r3, [pc, #44]	; (8016510 <find_volume+0x4a4>)
 80164e4:	881b      	ldrh	r3, [r3, #0]
 80164e6:	3301      	adds	r3, #1
 80164e8:	b29a      	uxth	r2, r3
 80164ea:	4b09      	ldr	r3, [pc, #36]	; (8016510 <find_volume+0x4a4>)
 80164ec:	801a      	strh	r2, [r3, #0]
 80164ee:	4b08      	ldr	r3, [pc, #32]	; (8016510 <find_volume+0x4a4>)
 80164f0:	881a      	ldrh	r2, [r3, #0]
 80164f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164f4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80164f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80164f8:	f7fe fde4 	bl	80150c4 <clear_lock>
#endif
	return FR_OK;
 80164fc:	2300      	movs	r3, #0
}
 80164fe:	4618      	mov	r0, r3
 8016500:	3758      	adds	r7, #88	; 0x58
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}
 8016506:	bf00      	nop
 8016508:	41615252 	.word	0x41615252
 801650c:	61417272 	.word	0x61417272
 8016510:	20000fc0 	.word	0x20000fc0

08016514 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	b084      	sub	sp, #16
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]
 801651c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801651e:	2309      	movs	r3, #9
 8016520:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d02e      	beq.n	8016586 <validate+0x72>
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d02a      	beq.n	8016586 <validate+0x72>
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	781b      	ldrb	r3, [r3, #0]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d025      	beq.n	8016586 <validate+0x72>
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	889a      	ldrh	r2, [r3, #4]
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	88db      	ldrh	r3, [r3, #6]
 8016544:	429a      	cmp	r2, r3
 8016546:	d11e      	bne.n	8016586 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	4618      	mov	r0, r3
 801654e:	f7fe fc3f 	bl	8014dd0 <lock_fs>
 8016552:	4603      	mov	r3, r0
 8016554:	2b00      	cmp	r3, #0
 8016556:	d014      	beq.n	8016582 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	785b      	ldrb	r3, [r3, #1]
 801655e:	4618      	mov	r0, r3
 8016560:	f7fe fa98 	bl	8014a94 <disk_status>
 8016564:	4603      	mov	r3, r0
 8016566:	f003 0301 	and.w	r3, r3, #1
 801656a:	2b00      	cmp	r3, #0
 801656c:	d102      	bne.n	8016574 <validate+0x60>
				res = FR_OK;
 801656e:	2300      	movs	r3, #0
 8016570:	73fb      	strb	r3, [r7, #15]
 8016572:	e008      	b.n	8016586 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	2100      	movs	r1, #0
 801657a:	4618      	mov	r0, r3
 801657c:	f7fe fc3e 	bl	8014dfc <unlock_fs>
 8016580:	e001      	b.n	8016586 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8016582:	230f      	movs	r3, #15
 8016584:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016586:	7bfb      	ldrb	r3, [r7, #15]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d102      	bne.n	8016592 <validate+0x7e>
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	e000      	b.n	8016594 <validate+0x80>
 8016592:	2300      	movs	r3, #0
 8016594:	683a      	ldr	r2, [r7, #0]
 8016596:	6013      	str	r3, [r2, #0]
	return res;
 8016598:	7bfb      	ldrb	r3, [r7, #15]
}
 801659a:	4618      	mov	r0, r3
 801659c:	3710      	adds	r7, #16
 801659e:	46bd      	mov	sp, r7
 80165a0:	bd80      	pop	{r7, pc}
	...

080165a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80165a4:	b580      	push	{r7, lr}
 80165a6:	b088      	sub	sp, #32
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	60f8      	str	r0, [r7, #12]
 80165ac:	60b9      	str	r1, [r7, #8]
 80165ae:	4613      	mov	r3, r2
 80165b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80165b2:	68bb      	ldr	r3, [r7, #8]
 80165b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80165b6:	f107 0310 	add.w	r3, r7, #16
 80165ba:	4618      	mov	r0, r3
 80165bc:	f7ff fcbb 	bl	8015f36 <get_ldnumber>
 80165c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80165c2:	69fb      	ldr	r3, [r7, #28]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	da01      	bge.n	80165cc <f_mount+0x28>
 80165c8:	230b      	movs	r3, #11
 80165ca:	e048      	b.n	801665e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80165cc:	4a26      	ldr	r2, [pc, #152]	; (8016668 <f_mount+0xc4>)
 80165ce:	69fb      	ldr	r3, [r7, #28]
 80165d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80165d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80165d6:	69bb      	ldr	r3, [r7, #24]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d00f      	beq.n	80165fc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80165dc:	69b8      	ldr	r0, [r7, #24]
 80165de:	f7fe fd71 	bl	80150c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80165e2:	69bb      	ldr	r3, [r7, #24]
 80165e4:	68db      	ldr	r3, [r3, #12]
 80165e6:	4618      	mov	r0, r3
 80165e8:	f000 fe8c 	bl	8017304 <ff_del_syncobj>
 80165ec:	4603      	mov	r3, r0
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d101      	bne.n	80165f6 <f_mount+0x52>
 80165f2:	2302      	movs	r3, #2
 80165f4:	e033      	b.n	801665e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80165f6:	69bb      	ldr	r3, [r7, #24]
 80165f8:	2200      	movs	r2, #0
 80165fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d00f      	beq.n	8016622 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	2200      	movs	r2, #0
 8016606:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8016608:	69fb      	ldr	r3, [r7, #28]
 801660a:	b2da      	uxtb	r2, r3
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	330c      	adds	r3, #12
 8016610:	4619      	mov	r1, r3
 8016612:	4610      	mov	r0, r2
 8016614:	f000 fe5b 	bl	80172ce <ff_cre_syncobj>
 8016618:	4603      	mov	r3, r0
 801661a:	2b00      	cmp	r3, #0
 801661c:	d101      	bne.n	8016622 <f_mount+0x7e>
 801661e:	2302      	movs	r3, #2
 8016620:	e01d      	b.n	801665e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8016622:	68fa      	ldr	r2, [r7, #12]
 8016624:	4910      	ldr	r1, [pc, #64]	; (8016668 <f_mount+0xc4>)
 8016626:	69fb      	ldr	r3, [r7, #28]
 8016628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d002      	beq.n	8016638 <f_mount+0x94>
 8016632:	79fb      	ldrb	r3, [r7, #7]
 8016634:	2b01      	cmp	r3, #1
 8016636:	d001      	beq.n	801663c <f_mount+0x98>
 8016638:	2300      	movs	r3, #0
 801663a:	e010      	b.n	801665e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801663c:	f107 010c 	add.w	r1, r7, #12
 8016640:	f107 0308 	add.w	r3, r7, #8
 8016644:	2200      	movs	r2, #0
 8016646:	4618      	mov	r0, r3
 8016648:	f7ff fd10 	bl	801606c <find_volume>
 801664c:	4603      	mov	r3, r0
 801664e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	7dfa      	ldrb	r2, [r7, #23]
 8016654:	4611      	mov	r1, r2
 8016656:	4618      	mov	r0, r3
 8016658:	f7fe fbd0 	bl	8014dfc <unlock_fs>
 801665c:	7dfb      	ldrb	r3, [r7, #23]
}
 801665e:	4618      	mov	r0, r3
 8016660:	3720      	adds	r7, #32
 8016662:	46bd      	mov	sp, r7
 8016664:	bd80      	pop	{r7, pc}
 8016666:	bf00      	nop
 8016668:	20000fbc 	.word	0x20000fbc

0801666c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801666c:	b580      	push	{r7, lr}
 801666e:	b098      	sub	sp, #96	; 0x60
 8016670:	af00      	add	r7, sp, #0
 8016672:	60f8      	str	r0, [r7, #12]
 8016674:	60b9      	str	r1, [r7, #8]
 8016676:	4613      	mov	r3, r2
 8016678:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d101      	bne.n	8016684 <f_open+0x18>
 8016680:	2309      	movs	r3, #9
 8016682:	e1b4      	b.n	80169ee <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016684:	79fb      	ldrb	r3, [r7, #7]
 8016686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801668a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801668c:	79fa      	ldrb	r2, [r7, #7]
 801668e:	f107 0110 	add.w	r1, r7, #16
 8016692:	f107 0308 	add.w	r3, r7, #8
 8016696:	4618      	mov	r0, r3
 8016698:	f7ff fce8 	bl	801606c <find_volume>
 801669c:	4603      	mov	r3, r0
 801669e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80166a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	f040 8191 	bne.w	80169ce <f_open+0x362>
		dj.obj.fs = fs;
 80166ac:	693b      	ldr	r3, [r7, #16]
 80166ae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80166b0:	68ba      	ldr	r2, [r7, #8]
 80166b2:	f107 0314 	add.w	r3, r7, #20
 80166b6:	4611      	mov	r1, r2
 80166b8:	4618      	mov	r0, r3
 80166ba:	f7ff fbcb 	bl	8015e54 <follow_path>
 80166be:	4603      	mov	r3, r0
 80166c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80166c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d11a      	bne.n	8016702 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80166cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80166d0:	b25b      	sxtb	r3, r3
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	da03      	bge.n	80166de <f_open+0x72>
				res = FR_INVALID_NAME;
 80166d6:	2306      	movs	r3, #6
 80166d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80166dc:	e011      	b.n	8016702 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80166de:	79fb      	ldrb	r3, [r7, #7]
 80166e0:	f023 0301 	bic.w	r3, r3, #1
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	bf14      	ite	ne
 80166e8:	2301      	movne	r3, #1
 80166ea:	2300      	moveq	r3, #0
 80166ec:	b2db      	uxtb	r3, r3
 80166ee:	461a      	mov	r2, r3
 80166f0:	f107 0314 	add.w	r3, r7, #20
 80166f4:	4611      	mov	r1, r2
 80166f6:	4618      	mov	r0, r3
 80166f8:	f7fe fb9c 	bl	8014e34 <chk_lock>
 80166fc:	4603      	mov	r3, r0
 80166fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016702:	79fb      	ldrb	r3, [r7, #7]
 8016704:	f003 031c 	and.w	r3, r3, #28
 8016708:	2b00      	cmp	r3, #0
 801670a:	d07f      	beq.n	801680c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801670c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016710:	2b00      	cmp	r3, #0
 8016712:	d017      	beq.n	8016744 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016714:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016718:	2b04      	cmp	r3, #4
 801671a:	d10e      	bne.n	801673a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801671c:	f7fe fbe6 	bl	8014eec <enq_lock>
 8016720:	4603      	mov	r3, r0
 8016722:	2b00      	cmp	r3, #0
 8016724:	d006      	beq.n	8016734 <f_open+0xc8>
 8016726:	f107 0314 	add.w	r3, r7, #20
 801672a:	4618      	mov	r0, r3
 801672c:	f7ff facb 	bl	8015cc6 <dir_register>
 8016730:	4603      	mov	r3, r0
 8016732:	e000      	b.n	8016736 <f_open+0xca>
 8016734:	2312      	movs	r3, #18
 8016736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801673a:	79fb      	ldrb	r3, [r7, #7]
 801673c:	f043 0308 	orr.w	r3, r3, #8
 8016740:	71fb      	strb	r3, [r7, #7]
 8016742:	e010      	b.n	8016766 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016744:	7ebb      	ldrb	r3, [r7, #26]
 8016746:	f003 0311 	and.w	r3, r3, #17
 801674a:	2b00      	cmp	r3, #0
 801674c:	d003      	beq.n	8016756 <f_open+0xea>
					res = FR_DENIED;
 801674e:	2307      	movs	r3, #7
 8016750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016754:	e007      	b.n	8016766 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016756:	79fb      	ldrb	r3, [r7, #7]
 8016758:	f003 0304 	and.w	r3, r3, #4
 801675c:	2b00      	cmp	r3, #0
 801675e:	d002      	beq.n	8016766 <f_open+0xfa>
 8016760:	2308      	movs	r3, #8
 8016762:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801676a:	2b00      	cmp	r3, #0
 801676c:	d168      	bne.n	8016840 <f_open+0x1d4>
 801676e:	79fb      	ldrb	r3, [r7, #7]
 8016770:	f003 0308 	and.w	r3, r3, #8
 8016774:	2b00      	cmp	r3, #0
 8016776:	d063      	beq.n	8016840 <f_open+0x1d4>
				dw = GET_FATTIME();
 8016778:	f7fd ff24 	bl	80145c4 <get_fattime>
 801677c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801677e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016780:	330e      	adds	r3, #14
 8016782:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016784:	4618      	mov	r0, r3
 8016786:	f7fe fa79 	bl	8014c7c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801678c:	3316      	adds	r3, #22
 801678e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016790:	4618      	mov	r0, r3
 8016792:	f7fe fa73 	bl	8014c7c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016798:	330b      	adds	r3, #11
 801679a:	2220      	movs	r2, #32
 801679c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801679e:	693b      	ldr	r3, [r7, #16]
 80167a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80167a2:	4611      	mov	r1, r2
 80167a4:	4618      	mov	r0, r3
 80167a6:	f7ff f9fa 	bl	8015b9e <ld_clust>
 80167aa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80167ac:	693b      	ldr	r3, [r7, #16]
 80167ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80167b0:	2200      	movs	r2, #0
 80167b2:	4618      	mov	r0, r3
 80167b4:	f7ff fa12 	bl	8015bdc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80167b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167ba:	331c      	adds	r3, #28
 80167bc:	2100      	movs	r1, #0
 80167be:	4618      	mov	r0, r3
 80167c0:	f7fe fa5c 	bl	8014c7c <st_dword>
					fs->wflag = 1;
 80167c4:	693b      	ldr	r3, [r7, #16]
 80167c6:	2201      	movs	r2, #1
 80167c8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80167ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d037      	beq.n	8016840 <f_open+0x1d4>
						dw = fs->winsect;
 80167d0:	693b      	ldr	r3, [r7, #16]
 80167d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167d4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80167d6:	f107 0314 	add.w	r3, r7, #20
 80167da:	2200      	movs	r2, #0
 80167dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80167de:	4618      	mov	r0, r3
 80167e0:	f7fe ff25 	bl	801562e <remove_chain>
 80167e4:	4603      	mov	r3, r0
 80167e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80167ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d126      	bne.n	8016840 <f_open+0x1d4>
							res = move_window(fs, dw);
 80167f2:	693b      	ldr	r3, [r7, #16]
 80167f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80167f6:	4618      	mov	r0, r3
 80167f8:	f7fe fccc 	bl	8015194 <move_window>
 80167fc:	4603      	mov	r3, r0
 80167fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016802:	693b      	ldr	r3, [r7, #16]
 8016804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016806:	3a01      	subs	r2, #1
 8016808:	611a      	str	r2, [r3, #16]
 801680a:	e019      	b.n	8016840 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801680c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016810:	2b00      	cmp	r3, #0
 8016812:	d115      	bne.n	8016840 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016814:	7ebb      	ldrb	r3, [r7, #26]
 8016816:	f003 0310 	and.w	r3, r3, #16
 801681a:	2b00      	cmp	r3, #0
 801681c:	d003      	beq.n	8016826 <f_open+0x1ba>
					res = FR_NO_FILE;
 801681e:	2304      	movs	r3, #4
 8016820:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016824:	e00c      	b.n	8016840 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8016826:	79fb      	ldrb	r3, [r7, #7]
 8016828:	f003 0302 	and.w	r3, r3, #2
 801682c:	2b00      	cmp	r3, #0
 801682e:	d007      	beq.n	8016840 <f_open+0x1d4>
 8016830:	7ebb      	ldrb	r3, [r7, #26]
 8016832:	f003 0301 	and.w	r3, r3, #1
 8016836:	2b00      	cmp	r3, #0
 8016838:	d002      	beq.n	8016840 <f_open+0x1d4>
						res = FR_DENIED;
 801683a:	2307      	movs	r3, #7
 801683c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8016840:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016844:	2b00      	cmp	r3, #0
 8016846:	d128      	bne.n	801689a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016848:	79fb      	ldrb	r3, [r7, #7]
 801684a:	f003 0308 	and.w	r3, r3, #8
 801684e:	2b00      	cmp	r3, #0
 8016850:	d003      	beq.n	801685a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8016852:	79fb      	ldrb	r3, [r7, #7]
 8016854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016858:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801685a:	693b      	ldr	r3, [r7, #16]
 801685c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8016862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016868:	79fb      	ldrb	r3, [r7, #7]
 801686a:	f023 0301 	bic.w	r3, r3, #1
 801686e:	2b00      	cmp	r3, #0
 8016870:	bf14      	ite	ne
 8016872:	2301      	movne	r3, #1
 8016874:	2300      	moveq	r3, #0
 8016876:	b2db      	uxtb	r3, r3
 8016878:	461a      	mov	r2, r3
 801687a:	f107 0314 	add.w	r3, r7, #20
 801687e:	4611      	mov	r1, r2
 8016880:	4618      	mov	r0, r3
 8016882:	f7fe fb55 	bl	8014f30 <inc_lock>
 8016886:	4602      	mov	r2, r0
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	691b      	ldr	r3, [r3, #16]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d102      	bne.n	801689a <f_open+0x22e>
 8016894:	2302      	movs	r3, #2
 8016896:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801689a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801689e:	2b00      	cmp	r3, #0
 80168a0:	f040 8095 	bne.w	80169ce <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80168a4:	693b      	ldr	r3, [r7, #16]
 80168a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80168a8:	4611      	mov	r1, r2
 80168aa:	4618      	mov	r0, r3
 80168ac:	f7ff f977 	bl	8015b9e <ld_clust>
 80168b0:	4602      	mov	r2, r0
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80168b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80168b8:	331c      	adds	r3, #28
 80168ba:	4618      	mov	r0, r3
 80168bc:	f7fe f9a0 	bl	8014c00 <ld_dword>
 80168c0:	4602      	mov	r2, r0
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	2200      	movs	r2, #0
 80168ca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80168cc:	693a      	ldr	r2, [r7, #16]
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80168d2:	693b      	ldr	r3, [r7, #16]
 80168d4:	88da      	ldrh	r2, [r3, #6]
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	79fa      	ldrb	r2, [r7, #7]
 80168de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	2200      	movs	r2, #0
 80168e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	2200      	movs	r2, #0
 80168ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	2200      	movs	r2, #0
 80168f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	3330      	adds	r3, #48	; 0x30
 80168f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80168fa:	2100      	movs	r1, #0
 80168fc:	4618      	mov	r0, r3
 80168fe:	f7fe fa0a 	bl	8014d16 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016902:	79fb      	ldrb	r3, [r7, #7]
 8016904:	f003 0320 	and.w	r3, r3, #32
 8016908:	2b00      	cmp	r3, #0
 801690a:	d060      	beq.n	80169ce <f_open+0x362>
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	68db      	ldr	r3, [r3, #12]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d05c      	beq.n	80169ce <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	68da      	ldr	r2, [r3, #12]
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801691c:	693b      	ldr	r3, [r7, #16]
 801691e:	895b      	ldrh	r3, [r3, #10]
 8016920:	025b      	lsls	r3, r3, #9
 8016922:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	689b      	ldr	r3, [r3, #8]
 8016928:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	68db      	ldr	r3, [r3, #12]
 801692e:	657b      	str	r3, [r7, #84]	; 0x54
 8016930:	e016      	b.n	8016960 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016936:	4618      	mov	r0, r3
 8016938:	f7fe fce7 	bl	801530a <get_fat>
 801693c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801693e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016940:	2b01      	cmp	r3, #1
 8016942:	d802      	bhi.n	801694a <f_open+0x2de>
 8016944:	2302      	movs	r3, #2
 8016946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801694a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801694c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016950:	d102      	bne.n	8016958 <f_open+0x2ec>
 8016952:	2301      	movs	r3, #1
 8016954:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016958:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801695a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801695c:	1ad3      	subs	r3, r2, r3
 801695e:	657b      	str	r3, [r7, #84]	; 0x54
 8016960:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016964:	2b00      	cmp	r3, #0
 8016966:	d103      	bne.n	8016970 <f_open+0x304>
 8016968:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801696a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801696c:	429a      	cmp	r2, r3
 801696e:	d8e0      	bhi.n	8016932 <f_open+0x2c6>
				}
				fp->clust = clst;
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016974:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016976:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801697a:	2b00      	cmp	r3, #0
 801697c:	d127      	bne.n	80169ce <f_open+0x362>
 801697e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016984:	2b00      	cmp	r3, #0
 8016986:	d022      	beq.n	80169ce <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016988:	693b      	ldr	r3, [r7, #16]
 801698a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801698c:	4618      	mov	r0, r3
 801698e:	f7fe fc9d 	bl	80152cc <clust2sect>
 8016992:	6478      	str	r0, [r7, #68]	; 0x44
 8016994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016996:	2b00      	cmp	r3, #0
 8016998:	d103      	bne.n	80169a2 <f_open+0x336>
						res = FR_INT_ERR;
 801699a:	2302      	movs	r3, #2
 801699c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80169a0:	e015      	b.n	80169ce <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80169a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80169a4:	0a5a      	lsrs	r2, r3, #9
 80169a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169a8:	441a      	add	r2, r3
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80169ae:	693b      	ldr	r3, [r7, #16]
 80169b0:	7858      	ldrb	r0, [r3, #1]
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	6a1a      	ldr	r2, [r3, #32]
 80169bc:	2301      	movs	r3, #1
 80169be:	f7fe f8a9 	bl	8014b14 <disk_read>
 80169c2:	4603      	mov	r3, r0
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d002      	beq.n	80169ce <f_open+0x362>
 80169c8:	2301      	movs	r3, #1
 80169ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80169ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d002      	beq.n	80169dc <f_open+0x370>
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	2200      	movs	r2, #0
 80169da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80169dc:	693b      	ldr	r3, [r7, #16]
 80169de:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80169e2:	4611      	mov	r1, r2
 80169e4:	4618      	mov	r0, r3
 80169e6:	f7fe fa09 	bl	8014dfc <unlock_fs>
 80169ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80169ee:	4618      	mov	r0, r3
 80169f0:	3760      	adds	r7, #96	; 0x60
 80169f2:	46bd      	mov	sp, r7
 80169f4:	bd80      	pop	{r7, pc}

080169f6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80169f6:	b580      	push	{r7, lr}
 80169f8:	b08e      	sub	sp, #56	; 0x38
 80169fa:	af00      	add	r7, sp, #0
 80169fc:	60f8      	str	r0, [r7, #12]
 80169fe:	60b9      	str	r1, [r7, #8]
 8016a00:	607a      	str	r2, [r7, #4]
 8016a02:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8016a04:	68bb      	ldr	r3, [r7, #8]
 8016a06:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8016a08:	683b      	ldr	r3, [r7, #0]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	f107 0214 	add.w	r2, r7, #20
 8016a14:	4611      	mov	r1, r2
 8016a16:	4618      	mov	r0, r3
 8016a18:	f7ff fd7c 	bl	8016514 <validate>
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016a22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d107      	bne.n	8016a3a <f_read+0x44>
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	7d5b      	ldrb	r3, [r3, #21]
 8016a2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016a32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d009      	beq.n	8016a4e <f_read+0x58>
 8016a3a:	697b      	ldr	r3, [r7, #20]
 8016a3c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8016a40:	4611      	mov	r1, r2
 8016a42:	4618      	mov	r0, r3
 8016a44:	f7fe f9da 	bl	8014dfc <unlock_fs>
 8016a48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016a4c:	e13d      	b.n	8016cca <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	7d1b      	ldrb	r3, [r3, #20]
 8016a52:	f003 0301 	and.w	r3, r3, #1
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d106      	bne.n	8016a68 <f_read+0x72>
 8016a5a:	697b      	ldr	r3, [r7, #20]
 8016a5c:	2107      	movs	r1, #7
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f7fe f9cc 	bl	8014dfc <unlock_fs>
 8016a64:	2307      	movs	r3, #7
 8016a66:	e130      	b.n	8016cca <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	68da      	ldr	r2, [r3, #12]
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	699b      	ldr	r3, [r3, #24]
 8016a70:	1ad3      	subs	r3, r2, r3
 8016a72:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8016a74:	687a      	ldr	r2, [r7, #4]
 8016a76:	6a3b      	ldr	r3, [r7, #32]
 8016a78:	429a      	cmp	r2, r3
 8016a7a:	f240 811c 	bls.w	8016cb6 <f_read+0x2c0>
 8016a7e:	6a3b      	ldr	r3, [r7, #32]
 8016a80:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8016a82:	e118      	b.n	8016cb6 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	699b      	ldr	r3, [r3, #24]
 8016a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	f040 80e4 	bne.w	8016c5a <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	699b      	ldr	r3, [r3, #24]
 8016a96:	0a5b      	lsrs	r3, r3, #9
 8016a98:	697a      	ldr	r2, [r7, #20]
 8016a9a:	8952      	ldrh	r2, [r2, #10]
 8016a9c:	3a01      	subs	r2, #1
 8016a9e:	4013      	ands	r3, r2
 8016aa0:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8016aa2:	69fb      	ldr	r3, [r7, #28]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d139      	bne.n	8016b1c <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	699b      	ldr	r3, [r3, #24]
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d103      	bne.n	8016ab8 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	689b      	ldr	r3, [r3, #8]
 8016ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8016ab6:	e013      	b.n	8016ae0 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d007      	beq.n	8016ad0 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	699b      	ldr	r3, [r3, #24]
 8016ac4:	4619      	mov	r1, r3
 8016ac6:	68f8      	ldr	r0, [r7, #12]
 8016ac8:	f7fe feae 	bl	8015828 <clmt_clust>
 8016acc:	6338      	str	r0, [r7, #48]	; 0x30
 8016ace:	e007      	b.n	8016ae0 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8016ad0:	68fa      	ldr	r2, [r7, #12]
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	69db      	ldr	r3, [r3, #28]
 8016ad6:	4619      	mov	r1, r3
 8016ad8:	4610      	mov	r0, r2
 8016ada:	f7fe fc16 	bl	801530a <get_fat>
 8016ade:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8016ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ae2:	2b01      	cmp	r3, #1
 8016ae4:	d809      	bhi.n	8016afa <f_read+0x104>
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	2202      	movs	r2, #2
 8016aea:	755a      	strb	r2, [r3, #21]
 8016aec:	697b      	ldr	r3, [r7, #20]
 8016aee:	2102      	movs	r1, #2
 8016af0:	4618      	mov	r0, r3
 8016af2:	f7fe f983 	bl	8014dfc <unlock_fs>
 8016af6:	2302      	movs	r3, #2
 8016af8:	e0e7      	b.n	8016cca <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016b00:	d109      	bne.n	8016b16 <f_read+0x120>
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	2201      	movs	r2, #1
 8016b06:	755a      	strb	r2, [r3, #21]
 8016b08:	697b      	ldr	r3, [r7, #20]
 8016b0a:	2101      	movs	r1, #1
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f7fe f975 	bl	8014dfc <unlock_fs>
 8016b12:	2301      	movs	r3, #1
 8016b14:	e0d9      	b.n	8016cca <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b1a:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8016b1c:	697a      	ldr	r2, [r7, #20]
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	69db      	ldr	r3, [r3, #28]
 8016b22:	4619      	mov	r1, r3
 8016b24:	4610      	mov	r0, r2
 8016b26:	f7fe fbd1 	bl	80152cc <clust2sect>
 8016b2a:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016b2c:	69bb      	ldr	r3, [r7, #24]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d109      	bne.n	8016b46 <f_read+0x150>
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	2202      	movs	r2, #2
 8016b36:	755a      	strb	r2, [r3, #21]
 8016b38:	697b      	ldr	r3, [r7, #20]
 8016b3a:	2102      	movs	r1, #2
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	f7fe f95d 	bl	8014dfc <unlock_fs>
 8016b42:	2302      	movs	r3, #2
 8016b44:	e0c1      	b.n	8016cca <f_read+0x2d4>
			sect += csect;
 8016b46:	69ba      	ldr	r2, [r7, #24]
 8016b48:	69fb      	ldr	r3, [r7, #28]
 8016b4a:	4413      	add	r3, r2
 8016b4c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	0a5b      	lsrs	r3, r3, #9
 8016b52:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8016b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d03e      	beq.n	8016bd8 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016b5a:	69fa      	ldr	r2, [r7, #28]
 8016b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b5e:	4413      	add	r3, r2
 8016b60:	697a      	ldr	r2, [r7, #20]
 8016b62:	8952      	ldrh	r2, [r2, #10]
 8016b64:	4293      	cmp	r3, r2
 8016b66:	d905      	bls.n	8016b74 <f_read+0x17e>
					cc = fs->csize - csect;
 8016b68:	697b      	ldr	r3, [r7, #20]
 8016b6a:	895b      	ldrh	r3, [r3, #10]
 8016b6c:	461a      	mov	r2, r3
 8016b6e:	69fb      	ldr	r3, [r7, #28]
 8016b70:	1ad3      	subs	r3, r2, r3
 8016b72:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016b74:	697b      	ldr	r3, [r7, #20]
 8016b76:	7858      	ldrb	r0, [r3, #1]
 8016b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b7a:	69ba      	ldr	r2, [r7, #24]
 8016b7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016b7e:	f7fd ffc9 	bl	8014b14 <disk_read>
 8016b82:	4603      	mov	r3, r0
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d009      	beq.n	8016b9c <f_read+0x1a6>
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	2201      	movs	r2, #1
 8016b8c:	755a      	strb	r2, [r3, #21]
 8016b8e:	697b      	ldr	r3, [r7, #20]
 8016b90:	2101      	movs	r1, #1
 8016b92:	4618      	mov	r0, r3
 8016b94:	f7fe f932 	bl	8014dfc <unlock_fs>
 8016b98:	2301      	movs	r3, #1
 8016b9a:	e096      	b.n	8016cca <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	7d1b      	ldrb	r3, [r3, #20]
 8016ba0:	b25b      	sxtb	r3, r3
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	da14      	bge.n	8016bd0 <f_read+0x1da>
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	6a1a      	ldr	r2, [r3, #32]
 8016baa:	69bb      	ldr	r3, [r7, #24]
 8016bac:	1ad3      	subs	r3, r2, r3
 8016bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016bb0:	429a      	cmp	r2, r3
 8016bb2:	d90d      	bls.n	8016bd0 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	6a1a      	ldr	r2, [r3, #32]
 8016bb8:	69bb      	ldr	r3, [r7, #24]
 8016bba:	1ad3      	subs	r3, r2, r3
 8016bbc:	025b      	lsls	r3, r3, #9
 8016bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016bc0:	18d0      	adds	r0, r2, r3
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	3330      	adds	r3, #48	; 0x30
 8016bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016bca:	4619      	mov	r1, r3
 8016bcc:	f7fe f882 	bl	8014cd4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8016bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bd2:	025b      	lsls	r3, r3, #9
 8016bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8016bd6:	e05a      	b.n	8016c8e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	6a1b      	ldr	r3, [r3, #32]
 8016bdc:	69ba      	ldr	r2, [r7, #24]
 8016bde:	429a      	cmp	r2, r3
 8016be0:	d038      	beq.n	8016c54 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	7d1b      	ldrb	r3, [r3, #20]
 8016be6:	b25b      	sxtb	r3, r3
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	da1d      	bge.n	8016c28 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016bec:	697b      	ldr	r3, [r7, #20]
 8016bee:	7858      	ldrb	r0, [r3, #1]
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	6a1a      	ldr	r2, [r3, #32]
 8016bfa:	2301      	movs	r3, #1
 8016bfc:	f7fd ffaa 	bl	8014b54 <disk_write>
 8016c00:	4603      	mov	r3, r0
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d009      	beq.n	8016c1a <f_read+0x224>
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	2201      	movs	r2, #1
 8016c0a:	755a      	strb	r2, [r3, #21]
 8016c0c:	697b      	ldr	r3, [r7, #20]
 8016c0e:	2101      	movs	r1, #1
 8016c10:	4618      	mov	r0, r3
 8016c12:	f7fe f8f3 	bl	8014dfc <unlock_fs>
 8016c16:	2301      	movs	r3, #1
 8016c18:	e057      	b.n	8016cca <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	7d1b      	ldrb	r3, [r3, #20]
 8016c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c22:	b2da      	uxtb	r2, r3
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8016c28:	697b      	ldr	r3, [r7, #20]
 8016c2a:	7858      	ldrb	r0, [r3, #1]
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016c32:	2301      	movs	r3, #1
 8016c34:	69ba      	ldr	r2, [r7, #24]
 8016c36:	f7fd ff6d 	bl	8014b14 <disk_read>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d009      	beq.n	8016c54 <f_read+0x25e>
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	2201      	movs	r2, #1
 8016c44:	755a      	strb	r2, [r3, #21]
 8016c46:	697b      	ldr	r3, [r7, #20]
 8016c48:	2101      	movs	r1, #1
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f7fe f8d6 	bl	8014dfc <unlock_fs>
 8016c50:	2301      	movs	r3, #1
 8016c52:	e03a      	b.n	8016cca <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	69ba      	ldr	r2, [r7, #24]
 8016c58:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	699b      	ldr	r3, [r3, #24]
 8016c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016c62:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8016c66:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8016c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	429a      	cmp	r2, r3
 8016c6e:	d901      	bls.n	8016c74 <f_read+0x27e>
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	699b      	ldr	r3, [r3, #24]
 8016c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016c82:	4413      	add	r3, r2
 8016c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016c86:	4619      	mov	r1, r3
 8016c88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c8a:	f7fe f823 	bl	8014cd4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8016c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c92:	4413      	add	r3, r2
 8016c94:	627b      	str	r3, [r7, #36]	; 0x24
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	699a      	ldr	r2, [r3, #24]
 8016c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c9c:	441a      	add	r2, r3
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	619a      	str	r2, [r3, #24]
 8016ca2:	683b      	ldr	r3, [r7, #0]
 8016ca4:	681a      	ldr	r2, [r3, #0]
 8016ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ca8:	441a      	add	r2, r3
 8016caa:	683b      	ldr	r3, [r7, #0]
 8016cac:	601a      	str	r2, [r3, #0]
 8016cae:	687a      	ldr	r2, [r7, #4]
 8016cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cb2:	1ad3      	subs	r3, r2, r3
 8016cb4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	f47f aee3 	bne.w	8016a84 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8016cbe:	697b      	ldr	r3, [r7, #20]
 8016cc0:	2100      	movs	r1, #0
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f7fe f89a 	bl	8014dfc <unlock_fs>
 8016cc8:	2300      	movs	r3, #0
}
 8016cca:	4618      	mov	r0, r3
 8016ccc:	3738      	adds	r7, #56	; 0x38
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	bd80      	pop	{r7, pc}

08016cd2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016cd2:	b580      	push	{r7, lr}
 8016cd4:	b08c      	sub	sp, #48	; 0x30
 8016cd6:	af00      	add	r7, sp, #0
 8016cd8:	60f8      	str	r0, [r7, #12]
 8016cda:	60b9      	str	r1, [r7, #8]
 8016cdc:	607a      	str	r2, [r7, #4]
 8016cde:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8016ce0:	68bb      	ldr	r3, [r7, #8]
 8016ce2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8016ce4:	683b      	ldr	r3, [r7, #0]
 8016ce6:	2200      	movs	r2, #0
 8016ce8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	f107 0210 	add.w	r2, r7, #16
 8016cf0:	4611      	mov	r1, r2
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f7ff fc0e 	bl	8016514 <validate>
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016cfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d107      	bne.n	8016d16 <f_write+0x44>
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	7d5b      	ldrb	r3, [r3, #21]
 8016d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016d0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d009      	beq.n	8016d2a <f_write+0x58>
 8016d16:	693b      	ldr	r3, [r7, #16]
 8016d18:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8016d1c:	4611      	mov	r1, r2
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f7fe f86c 	bl	8014dfc <unlock_fs>
 8016d24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016d28:	e173      	b.n	8017012 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	7d1b      	ldrb	r3, [r3, #20]
 8016d2e:	f003 0302 	and.w	r3, r3, #2
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d106      	bne.n	8016d44 <f_write+0x72>
 8016d36:	693b      	ldr	r3, [r7, #16]
 8016d38:	2107      	movs	r1, #7
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7fe f85e 	bl	8014dfc <unlock_fs>
 8016d40:	2307      	movs	r3, #7
 8016d42:	e166      	b.n	8017012 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	699a      	ldr	r2, [r3, #24]
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	441a      	add	r2, r3
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	699b      	ldr	r3, [r3, #24]
 8016d50:	429a      	cmp	r2, r3
 8016d52:	f080 814b 	bcs.w	8016fec <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	699b      	ldr	r3, [r3, #24]
 8016d5a:	43db      	mvns	r3, r3
 8016d5c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8016d5e:	e145      	b.n	8016fec <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	699b      	ldr	r3, [r3, #24]
 8016d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	f040 8101 	bne.w	8016f70 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	699b      	ldr	r3, [r3, #24]
 8016d72:	0a5b      	lsrs	r3, r3, #9
 8016d74:	693a      	ldr	r2, [r7, #16]
 8016d76:	8952      	ldrh	r2, [r2, #10]
 8016d78:	3a01      	subs	r2, #1
 8016d7a:	4013      	ands	r3, r2
 8016d7c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8016d7e:	69bb      	ldr	r3, [r7, #24]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d14d      	bne.n	8016e20 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	699b      	ldr	r3, [r3, #24]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d10c      	bne.n	8016da6 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	689b      	ldr	r3, [r3, #8]
 8016d90:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8016d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d11a      	bne.n	8016dce <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	2100      	movs	r1, #0
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	f7fe fcab 	bl	80156f8 <create_chain>
 8016da2:	62b8      	str	r0, [r7, #40]	; 0x28
 8016da4:	e013      	b.n	8016dce <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d007      	beq.n	8016dbe <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	699b      	ldr	r3, [r3, #24]
 8016db2:	4619      	mov	r1, r3
 8016db4:	68f8      	ldr	r0, [r7, #12]
 8016db6:	f7fe fd37 	bl	8015828 <clmt_clust>
 8016dba:	62b8      	str	r0, [r7, #40]	; 0x28
 8016dbc:	e007      	b.n	8016dce <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8016dbe:	68fa      	ldr	r2, [r7, #12]
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	69db      	ldr	r3, [r3, #28]
 8016dc4:	4619      	mov	r1, r3
 8016dc6:	4610      	mov	r0, r2
 8016dc8:	f7fe fc96 	bl	80156f8 <create_chain>
 8016dcc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	f000 8110 	beq.w	8016ff6 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dd8:	2b01      	cmp	r3, #1
 8016dda:	d109      	bne.n	8016df0 <f_write+0x11e>
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	2202      	movs	r2, #2
 8016de0:	755a      	strb	r2, [r3, #21]
 8016de2:	693b      	ldr	r3, [r7, #16]
 8016de4:	2102      	movs	r1, #2
 8016de6:	4618      	mov	r0, r3
 8016de8:	f7fe f808 	bl	8014dfc <unlock_fs>
 8016dec:	2302      	movs	r3, #2
 8016dee:	e110      	b.n	8017012 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016df6:	d109      	bne.n	8016e0c <f_write+0x13a>
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	2201      	movs	r2, #1
 8016dfc:	755a      	strb	r2, [r3, #21]
 8016dfe:	693b      	ldr	r3, [r7, #16]
 8016e00:	2101      	movs	r1, #1
 8016e02:	4618      	mov	r0, r3
 8016e04:	f7fd fffa 	bl	8014dfc <unlock_fs>
 8016e08:	2301      	movs	r3, #1
 8016e0a:	e102      	b.n	8017012 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e10:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	689b      	ldr	r3, [r3, #8]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d102      	bne.n	8016e20 <f_write+0x14e>
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e1e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	7d1b      	ldrb	r3, [r3, #20]
 8016e24:	b25b      	sxtb	r3, r3
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	da1d      	bge.n	8016e66 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016e2a:	693b      	ldr	r3, [r7, #16]
 8016e2c:	7858      	ldrb	r0, [r3, #1]
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	6a1a      	ldr	r2, [r3, #32]
 8016e38:	2301      	movs	r3, #1
 8016e3a:	f7fd fe8b 	bl	8014b54 <disk_write>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d009      	beq.n	8016e58 <f_write+0x186>
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	2201      	movs	r2, #1
 8016e48:	755a      	strb	r2, [r3, #21]
 8016e4a:	693b      	ldr	r3, [r7, #16]
 8016e4c:	2101      	movs	r1, #1
 8016e4e:	4618      	mov	r0, r3
 8016e50:	f7fd ffd4 	bl	8014dfc <unlock_fs>
 8016e54:	2301      	movs	r3, #1
 8016e56:	e0dc      	b.n	8017012 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	7d1b      	ldrb	r3, [r3, #20]
 8016e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016e60:	b2da      	uxtb	r2, r3
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8016e66:	693a      	ldr	r2, [r7, #16]
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	69db      	ldr	r3, [r3, #28]
 8016e6c:	4619      	mov	r1, r3
 8016e6e:	4610      	mov	r0, r2
 8016e70:	f7fe fa2c 	bl	80152cc <clust2sect>
 8016e74:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016e76:	697b      	ldr	r3, [r7, #20]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d109      	bne.n	8016e90 <f_write+0x1be>
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	2202      	movs	r2, #2
 8016e80:	755a      	strb	r2, [r3, #21]
 8016e82:	693b      	ldr	r3, [r7, #16]
 8016e84:	2102      	movs	r1, #2
 8016e86:	4618      	mov	r0, r3
 8016e88:	f7fd ffb8 	bl	8014dfc <unlock_fs>
 8016e8c:	2302      	movs	r3, #2
 8016e8e:	e0c0      	b.n	8017012 <f_write+0x340>
			sect += csect;
 8016e90:	697a      	ldr	r2, [r7, #20]
 8016e92:	69bb      	ldr	r3, [r7, #24]
 8016e94:	4413      	add	r3, r2
 8016e96:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	0a5b      	lsrs	r3, r3, #9
 8016e9c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8016e9e:	6a3b      	ldr	r3, [r7, #32]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d041      	beq.n	8016f28 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016ea4:	69ba      	ldr	r2, [r7, #24]
 8016ea6:	6a3b      	ldr	r3, [r7, #32]
 8016ea8:	4413      	add	r3, r2
 8016eaa:	693a      	ldr	r2, [r7, #16]
 8016eac:	8952      	ldrh	r2, [r2, #10]
 8016eae:	4293      	cmp	r3, r2
 8016eb0:	d905      	bls.n	8016ebe <f_write+0x1ec>
					cc = fs->csize - csect;
 8016eb2:	693b      	ldr	r3, [r7, #16]
 8016eb4:	895b      	ldrh	r3, [r3, #10]
 8016eb6:	461a      	mov	r2, r3
 8016eb8:	69bb      	ldr	r3, [r7, #24]
 8016eba:	1ad3      	subs	r3, r2, r3
 8016ebc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016ebe:	693b      	ldr	r3, [r7, #16]
 8016ec0:	7858      	ldrb	r0, [r3, #1]
 8016ec2:	6a3b      	ldr	r3, [r7, #32]
 8016ec4:	697a      	ldr	r2, [r7, #20]
 8016ec6:	69f9      	ldr	r1, [r7, #28]
 8016ec8:	f7fd fe44 	bl	8014b54 <disk_write>
 8016ecc:	4603      	mov	r3, r0
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d009      	beq.n	8016ee6 <f_write+0x214>
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	2201      	movs	r2, #1
 8016ed6:	755a      	strb	r2, [r3, #21]
 8016ed8:	693b      	ldr	r3, [r7, #16]
 8016eda:	2101      	movs	r1, #1
 8016edc:	4618      	mov	r0, r3
 8016ede:	f7fd ff8d 	bl	8014dfc <unlock_fs>
 8016ee2:	2301      	movs	r3, #1
 8016ee4:	e095      	b.n	8017012 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	6a1a      	ldr	r2, [r3, #32]
 8016eea:	697b      	ldr	r3, [r7, #20]
 8016eec:	1ad3      	subs	r3, r2, r3
 8016eee:	6a3a      	ldr	r2, [r7, #32]
 8016ef0:	429a      	cmp	r2, r3
 8016ef2:	d915      	bls.n	8016f20 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	6a1a      	ldr	r2, [r3, #32]
 8016efe:	697b      	ldr	r3, [r7, #20]
 8016f00:	1ad3      	subs	r3, r2, r3
 8016f02:	025b      	lsls	r3, r3, #9
 8016f04:	69fa      	ldr	r2, [r7, #28]
 8016f06:	4413      	add	r3, r2
 8016f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016f0c:	4619      	mov	r1, r3
 8016f0e:	f7fd fee1 	bl	8014cd4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	7d1b      	ldrb	r3, [r3, #20]
 8016f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016f1a:	b2da      	uxtb	r2, r3
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016f20:	6a3b      	ldr	r3, [r7, #32]
 8016f22:	025b      	lsls	r3, r3, #9
 8016f24:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8016f26:	e044      	b.n	8016fb2 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	6a1b      	ldr	r3, [r3, #32]
 8016f2c:	697a      	ldr	r2, [r7, #20]
 8016f2e:	429a      	cmp	r2, r3
 8016f30:	d01b      	beq.n	8016f6a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	699a      	ldr	r2, [r3, #24]
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016f3a:	429a      	cmp	r2, r3
 8016f3c:	d215      	bcs.n	8016f6a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8016f3e:	693b      	ldr	r3, [r7, #16]
 8016f40:	7858      	ldrb	r0, [r3, #1]
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016f48:	2301      	movs	r3, #1
 8016f4a:	697a      	ldr	r2, [r7, #20]
 8016f4c:	f7fd fde2 	bl	8014b14 <disk_read>
 8016f50:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d009      	beq.n	8016f6a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	2201      	movs	r2, #1
 8016f5a:	755a      	strb	r2, [r3, #21]
 8016f5c:	693b      	ldr	r3, [r7, #16]
 8016f5e:	2101      	movs	r1, #1
 8016f60:	4618      	mov	r0, r3
 8016f62:	f7fd ff4b 	bl	8014dfc <unlock_fs>
 8016f66:	2301      	movs	r3, #1
 8016f68:	e053      	b.n	8017012 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	697a      	ldr	r2, [r7, #20]
 8016f6e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	699b      	ldr	r3, [r3, #24]
 8016f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016f78:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8016f7c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8016f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	429a      	cmp	r2, r3
 8016f84:	d901      	bls.n	8016f8a <f_write+0x2b8>
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	699b      	ldr	r3, [r3, #24]
 8016f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016f98:	4413      	add	r3, r2
 8016f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f9c:	69f9      	ldr	r1, [r7, #28]
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	f7fd fe98 	bl	8014cd4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	7d1b      	ldrb	r3, [r3, #20]
 8016fa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016fac:	b2da      	uxtb	r2, r3
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016fb2:	69fa      	ldr	r2, [r7, #28]
 8016fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fb6:	4413      	add	r3, r2
 8016fb8:	61fb      	str	r3, [r7, #28]
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	699a      	ldr	r2, [r3, #24]
 8016fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fc0:	441a      	add	r2, r3
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	619a      	str	r2, [r3, #24]
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	68da      	ldr	r2, [r3, #12]
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	699b      	ldr	r3, [r3, #24]
 8016fce:	429a      	cmp	r2, r3
 8016fd0:	bf38      	it	cc
 8016fd2:	461a      	movcc	r2, r3
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	60da      	str	r2, [r3, #12]
 8016fd8:	683b      	ldr	r3, [r7, #0]
 8016fda:	681a      	ldr	r2, [r3, #0]
 8016fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fde:	441a      	add	r2, r3
 8016fe0:	683b      	ldr	r3, [r7, #0]
 8016fe2:	601a      	str	r2, [r3, #0]
 8016fe4:	687a      	ldr	r2, [r7, #4]
 8016fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe8:	1ad3      	subs	r3, r2, r3
 8016fea:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	f47f aeb6 	bne.w	8016d60 <f_write+0x8e>
 8016ff4:	e000      	b.n	8016ff8 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016ff6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	7d1b      	ldrb	r3, [r3, #20]
 8016ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017000:	b2da      	uxtb	r2, r3
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8017006:	693b      	ldr	r3, [r7, #16]
 8017008:	2100      	movs	r1, #0
 801700a:	4618      	mov	r0, r3
 801700c:	f7fd fef6 	bl	8014dfc <unlock_fs>
 8017010:	2300      	movs	r3, #0
}
 8017012:	4618      	mov	r0, r3
 8017014:	3730      	adds	r7, #48	; 0x30
 8017016:	46bd      	mov	sp, r7
 8017018:	bd80      	pop	{r7, pc}

0801701a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801701a:	b580      	push	{r7, lr}
 801701c:	b086      	sub	sp, #24
 801701e:	af00      	add	r7, sp, #0
 8017020:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	f107 0208 	add.w	r2, r7, #8
 8017028:	4611      	mov	r1, r2
 801702a:	4618      	mov	r0, r3
 801702c:	f7ff fa72 	bl	8016514 <validate>
 8017030:	4603      	mov	r3, r0
 8017032:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017034:	7dfb      	ldrb	r3, [r7, #23]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d16d      	bne.n	8017116 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	7d1b      	ldrb	r3, [r3, #20]
 801703e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017042:	2b00      	cmp	r3, #0
 8017044:	d067      	beq.n	8017116 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	7d1b      	ldrb	r3, [r3, #20]
 801704a:	b25b      	sxtb	r3, r3
 801704c:	2b00      	cmp	r3, #0
 801704e:	da1a      	bge.n	8017086 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8017050:	68bb      	ldr	r3, [r7, #8]
 8017052:	7858      	ldrb	r0, [r3, #1]
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	6a1a      	ldr	r2, [r3, #32]
 801705e:	2301      	movs	r3, #1
 8017060:	f7fd fd78 	bl	8014b54 <disk_write>
 8017064:	4603      	mov	r3, r0
 8017066:	2b00      	cmp	r3, #0
 8017068:	d006      	beq.n	8017078 <f_sync+0x5e>
 801706a:	68bb      	ldr	r3, [r7, #8]
 801706c:	2101      	movs	r1, #1
 801706e:	4618      	mov	r0, r3
 8017070:	f7fd fec4 	bl	8014dfc <unlock_fs>
 8017074:	2301      	movs	r3, #1
 8017076:	e055      	b.n	8017124 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	7d1b      	ldrb	r3, [r3, #20]
 801707c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017080:	b2da      	uxtb	r2, r3
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8017086:	f7fd fa9d 	bl	80145c4 <get_fattime>
 801708a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801708c:	68ba      	ldr	r2, [r7, #8]
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017092:	4619      	mov	r1, r3
 8017094:	4610      	mov	r0, r2
 8017096:	f7fe f87d 	bl	8015194 <move_window>
 801709a:	4603      	mov	r3, r0
 801709c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801709e:	7dfb      	ldrb	r3, [r7, #23]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d138      	bne.n	8017116 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80170a8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	330b      	adds	r3, #11
 80170ae:	781a      	ldrb	r2, [r3, #0]
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	330b      	adds	r3, #11
 80170b4:	f042 0220 	orr.w	r2, r2, #32
 80170b8:	b2d2      	uxtb	r2, r2
 80170ba:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	6818      	ldr	r0, [r3, #0]
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	689b      	ldr	r3, [r3, #8]
 80170c4:	461a      	mov	r2, r3
 80170c6:	68f9      	ldr	r1, [r7, #12]
 80170c8:	f7fe fd88 	bl	8015bdc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	f103 021c 	add.w	r2, r3, #28
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	68db      	ldr	r3, [r3, #12]
 80170d6:	4619      	mov	r1, r3
 80170d8:	4610      	mov	r0, r2
 80170da:	f7fd fdcf 	bl	8014c7c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	3316      	adds	r3, #22
 80170e2:	6939      	ldr	r1, [r7, #16]
 80170e4:	4618      	mov	r0, r3
 80170e6:	f7fd fdc9 	bl	8014c7c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	3312      	adds	r3, #18
 80170ee:	2100      	movs	r1, #0
 80170f0:	4618      	mov	r0, r3
 80170f2:	f7fd fda8 	bl	8014c46 <st_word>
					fs->wflag = 1;
 80170f6:	68bb      	ldr	r3, [r7, #8]
 80170f8:	2201      	movs	r2, #1
 80170fa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80170fc:	68bb      	ldr	r3, [r7, #8]
 80170fe:	4618      	mov	r0, r3
 8017100:	f7fe f876 	bl	80151f0 <sync_fs>
 8017104:	4603      	mov	r3, r0
 8017106:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	7d1b      	ldrb	r3, [r3, #20]
 801710c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017110:	b2da      	uxtb	r2, r3
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017116:	68bb      	ldr	r3, [r7, #8]
 8017118:	7dfa      	ldrb	r2, [r7, #23]
 801711a:	4611      	mov	r1, r2
 801711c:	4618      	mov	r0, r3
 801711e:	f7fd fe6d 	bl	8014dfc <unlock_fs>
 8017122:	7dfb      	ldrb	r3, [r7, #23]
}
 8017124:	4618      	mov	r0, r3
 8017126:	3718      	adds	r7, #24
 8017128:	46bd      	mov	sp, r7
 801712a:	bd80      	pop	{r7, pc}

0801712c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801712c:	b580      	push	{r7, lr}
 801712e:	b084      	sub	sp, #16
 8017130:	af00      	add	r7, sp, #0
 8017132:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017134:	6878      	ldr	r0, [r7, #4]
 8017136:	f7ff ff70 	bl	801701a <f_sync>
 801713a:	4603      	mov	r3, r0
 801713c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801713e:	7bfb      	ldrb	r3, [r7, #15]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d11d      	bne.n	8017180 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	f107 0208 	add.w	r2, r7, #8
 801714a:	4611      	mov	r1, r2
 801714c:	4618      	mov	r0, r3
 801714e:	f7ff f9e1 	bl	8016514 <validate>
 8017152:	4603      	mov	r3, r0
 8017154:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017156:	7bfb      	ldrb	r3, [r7, #15]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d111      	bne.n	8017180 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	691b      	ldr	r3, [r3, #16]
 8017160:	4618      	mov	r0, r3
 8017162:	f7fd ff73 	bl	801504c <dec_lock>
 8017166:	4603      	mov	r3, r0
 8017168:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801716a:	7bfb      	ldrb	r3, [r7, #15]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d102      	bne.n	8017176 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	2200      	movs	r2, #0
 8017174:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8017176:	68bb      	ldr	r3, [r7, #8]
 8017178:	2100      	movs	r1, #0
 801717a:	4618      	mov	r0, r3
 801717c:	f7fd fe3e 	bl	8014dfc <unlock_fs>
#endif
		}
	}
	return res;
 8017180:	7bfb      	ldrb	r3, [r7, #15]
}
 8017182:	4618      	mov	r0, r3
 8017184:	3710      	adds	r7, #16
 8017186:	46bd      	mov	sp, r7
 8017188:	bd80      	pop	{r7, pc}
	...

0801718c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801718c:	b480      	push	{r7}
 801718e:	b087      	sub	sp, #28
 8017190:	af00      	add	r7, sp, #0
 8017192:	60f8      	str	r0, [r7, #12]
 8017194:	60b9      	str	r1, [r7, #8]
 8017196:	4613      	mov	r3, r2
 8017198:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801719a:	2301      	movs	r3, #1
 801719c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801719e:	2300      	movs	r3, #0
 80171a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80171a2:	4b1f      	ldr	r3, [pc, #124]	; (8017220 <FATFS_LinkDriverEx+0x94>)
 80171a4:	7a5b      	ldrb	r3, [r3, #9]
 80171a6:	b2db      	uxtb	r3, r3
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d131      	bne.n	8017210 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80171ac:	4b1c      	ldr	r3, [pc, #112]	; (8017220 <FATFS_LinkDriverEx+0x94>)
 80171ae:	7a5b      	ldrb	r3, [r3, #9]
 80171b0:	b2db      	uxtb	r3, r3
 80171b2:	461a      	mov	r2, r3
 80171b4:	4b1a      	ldr	r3, [pc, #104]	; (8017220 <FATFS_LinkDriverEx+0x94>)
 80171b6:	2100      	movs	r1, #0
 80171b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80171ba:	4b19      	ldr	r3, [pc, #100]	; (8017220 <FATFS_LinkDriverEx+0x94>)
 80171bc:	7a5b      	ldrb	r3, [r3, #9]
 80171be:	b2db      	uxtb	r3, r3
 80171c0:	4a17      	ldr	r2, [pc, #92]	; (8017220 <FATFS_LinkDriverEx+0x94>)
 80171c2:	009b      	lsls	r3, r3, #2
 80171c4:	4413      	add	r3, r2
 80171c6:	68fa      	ldr	r2, [r7, #12]
 80171c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80171ca:	4b15      	ldr	r3, [pc, #84]	; (8017220 <FATFS_LinkDriverEx+0x94>)
 80171cc:	7a5b      	ldrb	r3, [r3, #9]
 80171ce:	b2db      	uxtb	r3, r3
 80171d0:	461a      	mov	r2, r3
 80171d2:	4b13      	ldr	r3, [pc, #76]	; (8017220 <FATFS_LinkDriverEx+0x94>)
 80171d4:	4413      	add	r3, r2
 80171d6:	79fa      	ldrb	r2, [r7, #7]
 80171d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80171da:	4b11      	ldr	r3, [pc, #68]	; (8017220 <FATFS_LinkDriverEx+0x94>)
 80171dc:	7a5b      	ldrb	r3, [r3, #9]
 80171de:	b2db      	uxtb	r3, r3
 80171e0:	1c5a      	adds	r2, r3, #1
 80171e2:	b2d1      	uxtb	r1, r2
 80171e4:	4a0e      	ldr	r2, [pc, #56]	; (8017220 <FATFS_LinkDriverEx+0x94>)
 80171e6:	7251      	strb	r1, [r2, #9]
 80171e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80171ea:	7dbb      	ldrb	r3, [r7, #22]
 80171ec:	3330      	adds	r3, #48	; 0x30
 80171ee:	b2da      	uxtb	r2, r3
 80171f0:	68bb      	ldr	r3, [r7, #8]
 80171f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80171f4:	68bb      	ldr	r3, [r7, #8]
 80171f6:	3301      	adds	r3, #1
 80171f8:	223a      	movs	r2, #58	; 0x3a
 80171fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80171fc:	68bb      	ldr	r3, [r7, #8]
 80171fe:	3302      	adds	r3, #2
 8017200:	222f      	movs	r2, #47	; 0x2f
 8017202:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017204:	68bb      	ldr	r3, [r7, #8]
 8017206:	3303      	adds	r3, #3
 8017208:	2200      	movs	r2, #0
 801720a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801720c:	2300      	movs	r3, #0
 801720e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017210:	7dfb      	ldrb	r3, [r7, #23]
}
 8017212:	4618      	mov	r0, r3
 8017214:	371c      	adds	r7, #28
 8017216:	46bd      	mov	sp, r7
 8017218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801721c:	4770      	bx	lr
 801721e:	bf00      	nop
 8017220:	20000fe4 	.word	0x20000fe4

08017224 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017224:	b580      	push	{r7, lr}
 8017226:	b082      	sub	sp, #8
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
 801722c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801722e:	2200      	movs	r2, #0
 8017230:	6839      	ldr	r1, [r7, #0]
 8017232:	6878      	ldr	r0, [r7, #4]
 8017234:	f7ff ffaa 	bl	801718c <FATFS_LinkDriverEx>
 8017238:	4603      	mov	r3, r0
}
 801723a:	4618      	mov	r0, r3
 801723c:	3708      	adds	r7, #8
 801723e:	46bd      	mov	sp, r7
 8017240:	bd80      	pop	{r7, pc}
	...

08017244 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8017244:	b480      	push	{r7}
 8017246:	b085      	sub	sp, #20
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
 801724c:	460b      	mov	r3, r1
 801724e:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8017250:	2300      	movs	r3, #0
 8017252:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8017254:	2301      	movs	r3, #1
 8017256:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8017258:	4b15      	ldr	r3, [pc, #84]	; (80172b0 <FATFS_UnLinkDriverEx+0x6c>)
 801725a:	7a5b      	ldrb	r3, [r3, #9]
 801725c:	b2db      	uxtb	r3, r3
 801725e:	2b00      	cmp	r3, #0
 8017260:	d01e      	beq.n	80172a0 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	781b      	ldrb	r3, [r3, #0]
 8017266:	3b30      	subs	r3, #48	; 0x30
 8017268:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 801726a:	7bbb      	ldrb	r3, [r7, #14]
 801726c:	4a10      	ldr	r2, [pc, #64]	; (80172b0 <FATFS_UnLinkDriverEx+0x6c>)
 801726e:	009b      	lsls	r3, r3, #2
 8017270:	4413      	add	r3, r2
 8017272:	685b      	ldr	r3, [r3, #4]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d013      	beq.n	80172a0 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8017278:	7bbb      	ldrb	r3, [r7, #14]
 801727a:	4a0d      	ldr	r2, [pc, #52]	; (80172b0 <FATFS_UnLinkDriverEx+0x6c>)
 801727c:	009b      	lsls	r3, r3, #2
 801727e:	4413      	add	r3, r2
 8017280:	2200      	movs	r2, #0
 8017282:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8017284:	7bbb      	ldrb	r3, [r7, #14]
 8017286:	4a0a      	ldr	r2, [pc, #40]	; (80172b0 <FATFS_UnLinkDriverEx+0x6c>)
 8017288:	4413      	add	r3, r2
 801728a:	2200      	movs	r2, #0
 801728c:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 801728e:	4b08      	ldr	r3, [pc, #32]	; (80172b0 <FATFS_UnLinkDriverEx+0x6c>)
 8017290:	7a5b      	ldrb	r3, [r3, #9]
 8017292:	b2db      	uxtb	r3, r3
 8017294:	3b01      	subs	r3, #1
 8017296:	b2da      	uxtb	r2, r3
 8017298:	4b05      	ldr	r3, [pc, #20]	; (80172b0 <FATFS_UnLinkDriverEx+0x6c>)
 801729a:	725a      	strb	r2, [r3, #9]
      ret = 0;
 801729c:	2300      	movs	r3, #0
 801729e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80172a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80172a2:	4618      	mov	r0, r3
 80172a4:	3714      	adds	r7, #20
 80172a6:	46bd      	mov	sp, r7
 80172a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ac:	4770      	bx	lr
 80172ae:	bf00      	nop
 80172b0:	20000fe4 	.word	0x20000fe4

080172b4 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b082      	sub	sp, #8
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 80172bc:	2100      	movs	r1, #0
 80172be:	6878      	ldr	r0, [r7, #4]
 80172c0:	f7ff ffc0 	bl	8017244 <FATFS_UnLinkDriverEx>
 80172c4:	4603      	mov	r3, r0
}
 80172c6:	4618      	mov	r0, r3
 80172c8:	3708      	adds	r7, #8
 80172ca:	46bd      	mov	sp, r7
 80172cc:	bd80      	pop	{r7, pc}

080172ce <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80172ce:	b580      	push	{r7, lr}
 80172d0:	b084      	sub	sp, #16
 80172d2:	af00      	add	r7, sp, #0
 80172d4:	4603      	mov	r3, r0
 80172d6:	6039      	str	r1, [r7, #0]
 80172d8:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80172da:	2200      	movs	r2, #0
 80172dc:	2101      	movs	r1, #1
 80172de:	2001      	movs	r0, #1
 80172e0:	f000 fa09 	bl	80176f6 <osSemaphoreNew>
 80172e4:	4602      	mov	r2, r0
 80172e6:	683b      	ldr	r3, [r7, #0]
 80172e8:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80172ea:	683b      	ldr	r3, [r7, #0]
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	bf14      	ite	ne
 80172f2:	2301      	movne	r3, #1
 80172f4:	2300      	moveq	r3, #0
 80172f6:	b2db      	uxtb	r3, r3
 80172f8:	60fb      	str	r3, [r7, #12]

    return ret;
 80172fa:	68fb      	ldr	r3, [r7, #12]
}
 80172fc:	4618      	mov	r0, r3
 80172fe:	3710      	adds	r7, #16
 8017300:	46bd      	mov	sp, r7
 8017302:	bd80      	pop	{r7, pc}

08017304 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b082      	sub	sp, #8
 8017308:	af00      	add	r7, sp, #0
 801730a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801730c:	6878      	ldr	r0, [r7, #4]
 801730e:	f000 fb11 	bl	8017934 <osSemaphoreDelete>
#endif
    return 1;
 8017312:	2301      	movs	r3, #1
}
 8017314:	4618      	mov	r0, r3
 8017316:	3708      	adds	r7, #8
 8017318:	46bd      	mov	sp, r7
 801731a:	bd80      	pop	{r7, pc}

0801731c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801731c:	b580      	push	{r7, lr}
 801731e:	b084      	sub	sp, #16
 8017320:	af00      	add	r7, sp, #0
 8017322:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8017324:	2300      	movs	r3, #0
 8017326:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8017328:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801732c:	6878      	ldr	r0, [r7, #4]
 801732e:	f000 fa6b 	bl	8017808 <osSemaphoreAcquire>
 8017332:	4603      	mov	r3, r0
 8017334:	2b00      	cmp	r3, #0
 8017336:	d101      	bne.n	801733c <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8017338:	2301      	movs	r3, #1
 801733a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801733c:	68fb      	ldr	r3, [r7, #12]
}
 801733e:	4618      	mov	r0, r3
 8017340:	3710      	adds	r7, #16
 8017342:	46bd      	mov	sp, r7
 8017344:	bd80      	pop	{r7, pc}

08017346 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8017346:	b580      	push	{r7, lr}
 8017348:	b082      	sub	sp, #8
 801734a:	af00      	add	r7, sp, #0
 801734c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801734e:	6878      	ldr	r0, [r7, #4]
 8017350:	f000 faac 	bl	80178ac <osSemaphoreRelease>
#endif
}
 8017354:	bf00      	nop
 8017356:	3708      	adds	r7, #8
 8017358:	46bd      	mov	sp, r7
 801735a:	bd80      	pop	{r7, pc}

0801735c <__NVIC_SetPriority>:
{
 801735c:	b480      	push	{r7}
 801735e:	b083      	sub	sp, #12
 8017360:	af00      	add	r7, sp, #0
 8017362:	4603      	mov	r3, r0
 8017364:	6039      	str	r1, [r7, #0]
 8017366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801736c:	2b00      	cmp	r3, #0
 801736e:	db0a      	blt.n	8017386 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017370:	683b      	ldr	r3, [r7, #0]
 8017372:	b2da      	uxtb	r2, r3
 8017374:	490c      	ldr	r1, [pc, #48]	; (80173a8 <__NVIC_SetPriority+0x4c>)
 8017376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801737a:	0112      	lsls	r2, r2, #4
 801737c:	b2d2      	uxtb	r2, r2
 801737e:	440b      	add	r3, r1
 8017380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8017384:	e00a      	b.n	801739c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017386:	683b      	ldr	r3, [r7, #0]
 8017388:	b2da      	uxtb	r2, r3
 801738a:	4908      	ldr	r1, [pc, #32]	; (80173ac <__NVIC_SetPriority+0x50>)
 801738c:	79fb      	ldrb	r3, [r7, #7]
 801738e:	f003 030f 	and.w	r3, r3, #15
 8017392:	3b04      	subs	r3, #4
 8017394:	0112      	lsls	r2, r2, #4
 8017396:	b2d2      	uxtb	r2, r2
 8017398:	440b      	add	r3, r1
 801739a:	761a      	strb	r2, [r3, #24]
}
 801739c:	bf00      	nop
 801739e:	370c      	adds	r7, #12
 80173a0:	46bd      	mov	sp, r7
 80173a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a6:	4770      	bx	lr
 80173a8:	e000e100 	.word	0xe000e100
 80173ac:	e000ed00 	.word	0xe000ed00

080173b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80173b0:	b580      	push	{r7, lr}
 80173b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80173b4:	2100      	movs	r1, #0
 80173b6:	f06f 0004 	mvn.w	r0, #4
 80173ba:	f7ff ffcf 	bl	801735c <__NVIC_SetPriority>
#endif
}
 80173be:	bf00      	nop
 80173c0:	bd80      	pop	{r7, pc}
	...

080173c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80173c4:	b480      	push	{r7}
 80173c6:	b083      	sub	sp, #12
 80173c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80173ca:	f3ef 8305 	mrs	r3, IPSR
 80173ce:	603b      	str	r3, [r7, #0]
  return(result);
 80173d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d003      	beq.n	80173de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80173d6:	f06f 0305 	mvn.w	r3, #5
 80173da:	607b      	str	r3, [r7, #4]
 80173dc:	e00c      	b.n	80173f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80173de:	4b0a      	ldr	r3, [pc, #40]	; (8017408 <osKernelInitialize+0x44>)
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d105      	bne.n	80173f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80173e6:	4b08      	ldr	r3, [pc, #32]	; (8017408 <osKernelInitialize+0x44>)
 80173e8:	2201      	movs	r2, #1
 80173ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80173ec:	2300      	movs	r3, #0
 80173ee:	607b      	str	r3, [r7, #4]
 80173f0:	e002      	b.n	80173f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80173f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80173f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80173f8:	687b      	ldr	r3, [r7, #4]
}
 80173fa:	4618      	mov	r0, r3
 80173fc:	370c      	adds	r7, #12
 80173fe:	46bd      	mov	sp, r7
 8017400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017404:	4770      	bx	lr
 8017406:	bf00      	nop
 8017408:	20000ff0 	.word	0x20000ff0

0801740c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 801740c:	b580      	push	{r7, lr}
 801740e:	b082      	sub	sp, #8
 8017410:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8017412:	f002 fb47 	bl	8019aa4 <xTaskGetSchedulerState>
 8017416:	4603      	mov	r3, r0
 8017418:	2b00      	cmp	r3, #0
 801741a:	d004      	beq.n	8017426 <osKernelGetState+0x1a>
 801741c:	2b02      	cmp	r3, #2
 801741e:	d105      	bne.n	801742c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8017420:	2302      	movs	r3, #2
 8017422:	607b      	str	r3, [r7, #4]
      break;
 8017424:	e00c      	b.n	8017440 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8017426:	2303      	movs	r3, #3
 8017428:	607b      	str	r3, [r7, #4]
      break;
 801742a:	e009      	b.n	8017440 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 801742c:	4b07      	ldr	r3, [pc, #28]	; (801744c <osKernelGetState+0x40>)
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	2b01      	cmp	r3, #1
 8017432:	d102      	bne.n	801743a <osKernelGetState+0x2e>
        state = osKernelReady;
 8017434:	2301      	movs	r3, #1
 8017436:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8017438:	e001      	b.n	801743e <osKernelGetState+0x32>
        state = osKernelInactive;
 801743a:	2300      	movs	r3, #0
 801743c:	607b      	str	r3, [r7, #4]
      break;
 801743e:	bf00      	nop
  }

  return (state);
 8017440:	687b      	ldr	r3, [r7, #4]
}
 8017442:	4618      	mov	r0, r3
 8017444:	3708      	adds	r7, #8
 8017446:	46bd      	mov	sp, r7
 8017448:	bd80      	pop	{r7, pc}
 801744a:	bf00      	nop
 801744c:	20000ff0 	.word	0x20000ff0

08017450 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8017450:	b580      	push	{r7, lr}
 8017452:	b082      	sub	sp, #8
 8017454:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017456:	f3ef 8305 	mrs	r3, IPSR
 801745a:	603b      	str	r3, [r7, #0]
  return(result);
 801745c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801745e:	2b00      	cmp	r3, #0
 8017460:	d003      	beq.n	801746a <osKernelStart+0x1a>
    stat = osErrorISR;
 8017462:	f06f 0305 	mvn.w	r3, #5
 8017466:	607b      	str	r3, [r7, #4]
 8017468:	e010      	b.n	801748c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801746a:	4b0b      	ldr	r3, [pc, #44]	; (8017498 <osKernelStart+0x48>)
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	2b01      	cmp	r3, #1
 8017470:	d109      	bne.n	8017486 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8017472:	f7ff ff9d 	bl	80173b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8017476:	4b08      	ldr	r3, [pc, #32]	; (8017498 <osKernelStart+0x48>)
 8017478:	2202      	movs	r2, #2
 801747a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801747c:	f001 fe94 	bl	80191a8 <vTaskStartScheduler>
      stat = osOK;
 8017480:	2300      	movs	r3, #0
 8017482:	607b      	str	r3, [r7, #4]
 8017484:	e002      	b.n	801748c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8017486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801748a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801748c:	687b      	ldr	r3, [r7, #4]
}
 801748e:	4618      	mov	r0, r3
 8017490:	3708      	adds	r7, #8
 8017492:	46bd      	mov	sp, r7
 8017494:	bd80      	pop	{r7, pc}
 8017496:	bf00      	nop
 8017498:	20000ff0 	.word	0x20000ff0

0801749c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 801749c:	b580      	push	{r7, lr}
 801749e:	b082      	sub	sp, #8
 80174a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80174a2:	f3ef 8305 	mrs	r3, IPSR
 80174a6:	603b      	str	r3, [r7, #0]
  return(result);
 80174a8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d003      	beq.n	80174b6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80174ae:	f001 ff9d 	bl	80193ec <xTaskGetTickCountFromISR>
 80174b2:	6078      	str	r0, [r7, #4]
 80174b4:	e002      	b.n	80174bc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80174b6:	f001 ff89 	bl	80193cc <xTaskGetTickCount>
 80174ba:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80174bc:	687b      	ldr	r3, [r7, #4]
}
 80174be:	4618      	mov	r0, r3
 80174c0:	3708      	adds	r7, #8
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bd80      	pop	{r7, pc}

080174c6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80174c6:	b580      	push	{r7, lr}
 80174c8:	b08e      	sub	sp, #56	; 0x38
 80174ca:	af04      	add	r7, sp, #16
 80174cc:	60f8      	str	r0, [r7, #12]
 80174ce:	60b9      	str	r1, [r7, #8]
 80174d0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80174d2:	2300      	movs	r3, #0
 80174d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80174d6:	f3ef 8305 	mrs	r3, IPSR
 80174da:	617b      	str	r3, [r7, #20]
  return(result);
 80174dc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d17e      	bne.n	80175e0 <osThreadNew+0x11a>
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d07b      	beq.n	80175e0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80174e8:	2380      	movs	r3, #128	; 0x80
 80174ea:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80174ec:	2318      	movs	r3, #24
 80174ee:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80174f0:	2300      	movs	r3, #0
 80174f2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80174f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80174f8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d045      	beq.n	801758c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	2b00      	cmp	r3, #0
 8017506:	d002      	beq.n	801750e <osThreadNew+0x48>
        name = attr->name;
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	699b      	ldr	r3, [r3, #24]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d002      	beq.n	801751c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	699b      	ldr	r3, [r3, #24]
 801751a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801751c:	69fb      	ldr	r3, [r7, #28]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d008      	beq.n	8017534 <osThreadNew+0x6e>
 8017522:	69fb      	ldr	r3, [r7, #28]
 8017524:	2b38      	cmp	r3, #56	; 0x38
 8017526:	d805      	bhi.n	8017534 <osThreadNew+0x6e>
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	685b      	ldr	r3, [r3, #4]
 801752c:	f003 0301 	and.w	r3, r3, #1
 8017530:	2b00      	cmp	r3, #0
 8017532:	d001      	beq.n	8017538 <osThreadNew+0x72>
        return (NULL);
 8017534:	2300      	movs	r3, #0
 8017536:	e054      	b.n	80175e2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	695b      	ldr	r3, [r3, #20]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d003      	beq.n	8017548 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	695b      	ldr	r3, [r3, #20]
 8017544:	089b      	lsrs	r3, r3, #2
 8017546:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	689b      	ldr	r3, [r3, #8]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d00e      	beq.n	801756e <osThreadNew+0xa8>
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	68db      	ldr	r3, [r3, #12]
 8017554:	2b5b      	cmp	r3, #91	; 0x5b
 8017556:	d90a      	bls.n	801756e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801755c:	2b00      	cmp	r3, #0
 801755e:	d006      	beq.n	801756e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	695b      	ldr	r3, [r3, #20]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d002      	beq.n	801756e <osThreadNew+0xa8>
        mem = 1;
 8017568:	2301      	movs	r3, #1
 801756a:	61bb      	str	r3, [r7, #24]
 801756c:	e010      	b.n	8017590 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	689b      	ldr	r3, [r3, #8]
 8017572:	2b00      	cmp	r3, #0
 8017574:	d10c      	bne.n	8017590 <osThreadNew+0xca>
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	68db      	ldr	r3, [r3, #12]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d108      	bne.n	8017590 <osThreadNew+0xca>
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	691b      	ldr	r3, [r3, #16]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d104      	bne.n	8017590 <osThreadNew+0xca>
          mem = 0;
 8017586:	2300      	movs	r3, #0
 8017588:	61bb      	str	r3, [r7, #24]
 801758a:	e001      	b.n	8017590 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801758c:	2300      	movs	r3, #0
 801758e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8017590:	69bb      	ldr	r3, [r7, #24]
 8017592:	2b01      	cmp	r3, #1
 8017594:	d110      	bne.n	80175b8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801759a:	687a      	ldr	r2, [r7, #4]
 801759c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801759e:	9202      	str	r2, [sp, #8]
 80175a0:	9301      	str	r3, [sp, #4]
 80175a2:	69fb      	ldr	r3, [r7, #28]
 80175a4:	9300      	str	r3, [sp, #0]
 80175a6:	68bb      	ldr	r3, [r7, #8]
 80175a8:	6a3a      	ldr	r2, [r7, #32]
 80175aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80175ac:	68f8      	ldr	r0, [r7, #12]
 80175ae:	f001 fc59 	bl	8018e64 <xTaskCreateStatic>
 80175b2:	4603      	mov	r3, r0
 80175b4:	613b      	str	r3, [r7, #16]
 80175b6:	e013      	b.n	80175e0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80175b8:	69bb      	ldr	r3, [r7, #24]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d110      	bne.n	80175e0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80175be:	6a3b      	ldr	r3, [r7, #32]
 80175c0:	b29a      	uxth	r2, r3
 80175c2:	f107 0310 	add.w	r3, r7, #16
 80175c6:	9301      	str	r3, [sp, #4]
 80175c8:	69fb      	ldr	r3, [r7, #28]
 80175ca:	9300      	str	r3, [sp, #0]
 80175cc:	68bb      	ldr	r3, [r7, #8]
 80175ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80175d0:	68f8      	ldr	r0, [r7, #12]
 80175d2:	f001 fca4 	bl	8018f1e <xTaskCreate>
 80175d6:	4603      	mov	r3, r0
 80175d8:	2b01      	cmp	r3, #1
 80175da:	d001      	beq.n	80175e0 <osThreadNew+0x11a>
            hTask = NULL;
 80175dc:	2300      	movs	r3, #0
 80175de:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80175e0:	693b      	ldr	r3, [r7, #16]
}
 80175e2:	4618      	mov	r0, r3
 80175e4:	3728      	adds	r7, #40	; 0x28
 80175e6:	46bd      	mov	sp, r7
 80175e8:	bd80      	pop	{r7, pc}

080175ea <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80175ea:	b580      	push	{r7, lr}
 80175ec:	b088      	sub	sp, #32
 80175ee:	af00      	add	r7, sp, #0
 80175f0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80175f2:	2300      	movs	r3, #0
 80175f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80175f6:	f3ef 8305 	mrs	r3, IPSR
 80175fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80175fc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d174      	bne.n	80176ec <osMutexNew+0x102>
    if (attr != NULL) {
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d003      	beq.n	8017610 <osMutexNew+0x26>
      type = attr->attr_bits;
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	685b      	ldr	r3, [r3, #4]
 801760c:	61bb      	str	r3, [r7, #24]
 801760e:	e001      	b.n	8017614 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8017610:	2300      	movs	r3, #0
 8017612:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8017614:	69bb      	ldr	r3, [r7, #24]
 8017616:	f003 0301 	and.w	r3, r3, #1
 801761a:	2b00      	cmp	r3, #0
 801761c:	d002      	beq.n	8017624 <osMutexNew+0x3a>
      rmtx = 1U;
 801761e:	2301      	movs	r3, #1
 8017620:	617b      	str	r3, [r7, #20]
 8017622:	e001      	b.n	8017628 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8017624:	2300      	movs	r3, #0
 8017626:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8017628:	69bb      	ldr	r3, [r7, #24]
 801762a:	f003 0308 	and.w	r3, r3, #8
 801762e:	2b00      	cmp	r3, #0
 8017630:	d15c      	bne.n	80176ec <osMutexNew+0x102>
      mem = -1;
 8017632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017636:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	2b00      	cmp	r3, #0
 801763c:	d015      	beq.n	801766a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	689b      	ldr	r3, [r3, #8]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d006      	beq.n	8017654 <osMutexNew+0x6a>
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	68db      	ldr	r3, [r3, #12]
 801764a:	2b4f      	cmp	r3, #79	; 0x4f
 801764c:	d902      	bls.n	8017654 <osMutexNew+0x6a>
          mem = 1;
 801764e:	2301      	movs	r3, #1
 8017650:	613b      	str	r3, [r7, #16]
 8017652:	e00c      	b.n	801766e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	689b      	ldr	r3, [r3, #8]
 8017658:	2b00      	cmp	r3, #0
 801765a:	d108      	bne.n	801766e <osMutexNew+0x84>
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	68db      	ldr	r3, [r3, #12]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d104      	bne.n	801766e <osMutexNew+0x84>
            mem = 0;
 8017664:	2300      	movs	r3, #0
 8017666:	613b      	str	r3, [r7, #16]
 8017668:	e001      	b.n	801766e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 801766a:	2300      	movs	r3, #0
 801766c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 801766e:	693b      	ldr	r3, [r7, #16]
 8017670:	2b01      	cmp	r3, #1
 8017672:	d112      	bne.n	801769a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8017674:	697b      	ldr	r3, [r7, #20]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d007      	beq.n	801768a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	689b      	ldr	r3, [r3, #8]
 801767e:	4619      	mov	r1, r3
 8017680:	2004      	movs	r0, #4
 8017682:	f000 fd04 	bl	801808e <xQueueCreateMutexStatic>
 8017686:	61f8      	str	r0, [r7, #28]
 8017688:	e016      	b.n	80176b8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	689b      	ldr	r3, [r3, #8]
 801768e:	4619      	mov	r1, r3
 8017690:	2001      	movs	r0, #1
 8017692:	f000 fcfc 	bl	801808e <xQueueCreateMutexStatic>
 8017696:	61f8      	str	r0, [r7, #28]
 8017698:	e00e      	b.n	80176b8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 801769a:	693b      	ldr	r3, [r7, #16]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d10b      	bne.n	80176b8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80176a0:	697b      	ldr	r3, [r7, #20]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d004      	beq.n	80176b0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80176a6:	2004      	movs	r0, #4
 80176a8:	f000 fcd9 	bl	801805e <xQueueCreateMutex>
 80176ac:	61f8      	str	r0, [r7, #28]
 80176ae:	e003      	b.n	80176b8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80176b0:	2001      	movs	r0, #1
 80176b2:	f000 fcd4 	bl	801805e <xQueueCreateMutex>
 80176b6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80176b8:	69fb      	ldr	r3, [r7, #28]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d00c      	beq.n	80176d8 <osMutexNew+0xee>
        if (attr != NULL) {
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d003      	beq.n	80176cc <osMutexNew+0xe2>
          name = attr->name;
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	60fb      	str	r3, [r7, #12]
 80176ca:	e001      	b.n	80176d0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80176cc:	2300      	movs	r3, #0
 80176ce:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80176d0:	68f9      	ldr	r1, [r7, #12]
 80176d2:	69f8      	ldr	r0, [r7, #28]
 80176d4:	f001 fb3e 	bl	8018d54 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80176d8:	69fb      	ldr	r3, [r7, #28]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d006      	beq.n	80176ec <osMutexNew+0x102>
 80176de:	697b      	ldr	r3, [r7, #20]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d003      	beq.n	80176ec <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80176e4:	69fb      	ldr	r3, [r7, #28]
 80176e6:	f043 0301 	orr.w	r3, r3, #1
 80176ea:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80176ec:	69fb      	ldr	r3, [r7, #28]
}
 80176ee:	4618      	mov	r0, r3
 80176f0:	3720      	adds	r7, #32
 80176f2:	46bd      	mov	sp, r7
 80176f4:	bd80      	pop	{r7, pc}

080176f6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80176f6:	b580      	push	{r7, lr}
 80176f8:	b08a      	sub	sp, #40	; 0x28
 80176fa:	af02      	add	r7, sp, #8
 80176fc:	60f8      	str	r0, [r7, #12]
 80176fe:	60b9      	str	r1, [r7, #8]
 8017700:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8017702:	2300      	movs	r3, #0
 8017704:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017706:	f3ef 8305 	mrs	r3, IPSR
 801770a:	613b      	str	r3, [r7, #16]
  return(result);
 801770c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801770e:	2b00      	cmp	r3, #0
 8017710:	d175      	bne.n	80177fe <osSemaphoreNew+0x108>
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d072      	beq.n	80177fe <osSemaphoreNew+0x108>
 8017718:	68ba      	ldr	r2, [r7, #8]
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	429a      	cmp	r2, r3
 801771e:	d86e      	bhi.n	80177fe <osSemaphoreNew+0x108>
    mem = -1;
 8017720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017724:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	2b00      	cmp	r3, #0
 801772a:	d015      	beq.n	8017758 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	689b      	ldr	r3, [r3, #8]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d006      	beq.n	8017742 <osSemaphoreNew+0x4c>
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	68db      	ldr	r3, [r3, #12]
 8017738:	2b4f      	cmp	r3, #79	; 0x4f
 801773a:	d902      	bls.n	8017742 <osSemaphoreNew+0x4c>
        mem = 1;
 801773c:	2301      	movs	r3, #1
 801773e:	61bb      	str	r3, [r7, #24]
 8017740:	e00c      	b.n	801775c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	689b      	ldr	r3, [r3, #8]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d108      	bne.n	801775c <osSemaphoreNew+0x66>
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	68db      	ldr	r3, [r3, #12]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d104      	bne.n	801775c <osSemaphoreNew+0x66>
          mem = 0;
 8017752:	2300      	movs	r3, #0
 8017754:	61bb      	str	r3, [r7, #24]
 8017756:	e001      	b.n	801775c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8017758:	2300      	movs	r3, #0
 801775a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 801775c:	69bb      	ldr	r3, [r7, #24]
 801775e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017762:	d04c      	beq.n	80177fe <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	2b01      	cmp	r3, #1
 8017768:	d128      	bne.n	80177bc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801776a:	69bb      	ldr	r3, [r7, #24]
 801776c:	2b01      	cmp	r3, #1
 801776e:	d10a      	bne.n	8017786 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	689b      	ldr	r3, [r3, #8]
 8017774:	2203      	movs	r2, #3
 8017776:	9200      	str	r2, [sp, #0]
 8017778:	2200      	movs	r2, #0
 801777a:	2100      	movs	r1, #0
 801777c:	2001      	movs	r0, #1
 801777e:	f000 fb7f 	bl	8017e80 <xQueueGenericCreateStatic>
 8017782:	61f8      	str	r0, [r7, #28]
 8017784:	e005      	b.n	8017792 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8017786:	2203      	movs	r2, #3
 8017788:	2100      	movs	r1, #0
 801778a:	2001      	movs	r0, #1
 801778c:	f000 fbf0 	bl	8017f70 <xQueueGenericCreate>
 8017790:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8017792:	69fb      	ldr	r3, [r7, #28]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d022      	beq.n	80177de <osSemaphoreNew+0xe8>
 8017798:	68bb      	ldr	r3, [r7, #8]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d01f      	beq.n	80177de <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801779e:	2300      	movs	r3, #0
 80177a0:	2200      	movs	r2, #0
 80177a2:	2100      	movs	r1, #0
 80177a4:	69f8      	ldr	r0, [r7, #28]
 80177a6:	f000 fcf7 	bl	8018198 <xQueueGenericSend>
 80177aa:	4603      	mov	r3, r0
 80177ac:	2b01      	cmp	r3, #1
 80177ae:	d016      	beq.n	80177de <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80177b0:	69f8      	ldr	r0, [r7, #28]
 80177b2:	f001 f983 	bl	8018abc <vQueueDelete>
            hSemaphore = NULL;
 80177b6:	2300      	movs	r3, #0
 80177b8:	61fb      	str	r3, [r7, #28]
 80177ba:	e010      	b.n	80177de <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80177bc:	69bb      	ldr	r3, [r7, #24]
 80177be:	2b01      	cmp	r3, #1
 80177c0:	d108      	bne.n	80177d4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	689b      	ldr	r3, [r3, #8]
 80177c6:	461a      	mov	r2, r3
 80177c8:	68b9      	ldr	r1, [r7, #8]
 80177ca:	68f8      	ldr	r0, [r7, #12]
 80177cc:	f000 fc7a 	bl	80180c4 <xQueueCreateCountingSemaphoreStatic>
 80177d0:	61f8      	str	r0, [r7, #28]
 80177d2:	e004      	b.n	80177de <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80177d4:	68b9      	ldr	r1, [r7, #8]
 80177d6:	68f8      	ldr	r0, [r7, #12]
 80177d8:	f000 fcab 	bl	8018132 <xQueueCreateCountingSemaphore>
 80177dc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80177de:	69fb      	ldr	r3, [r7, #28]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d00c      	beq.n	80177fe <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d003      	beq.n	80177f2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	617b      	str	r3, [r7, #20]
 80177f0:	e001      	b.n	80177f6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80177f2:	2300      	movs	r3, #0
 80177f4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80177f6:	6979      	ldr	r1, [r7, #20]
 80177f8:	69f8      	ldr	r0, [r7, #28]
 80177fa:	f001 faab 	bl	8018d54 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80177fe:	69fb      	ldr	r3, [r7, #28]
}
 8017800:	4618      	mov	r0, r3
 8017802:	3720      	adds	r7, #32
 8017804:	46bd      	mov	sp, r7
 8017806:	bd80      	pop	{r7, pc}

08017808 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8017808:	b580      	push	{r7, lr}
 801780a:	b086      	sub	sp, #24
 801780c:	af00      	add	r7, sp, #0
 801780e:	6078      	str	r0, [r7, #4]
 8017810:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8017816:	2300      	movs	r3, #0
 8017818:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801781a:	693b      	ldr	r3, [r7, #16]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d103      	bne.n	8017828 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8017820:	f06f 0303 	mvn.w	r3, #3
 8017824:	617b      	str	r3, [r7, #20]
 8017826:	e039      	b.n	801789c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017828:	f3ef 8305 	mrs	r3, IPSR
 801782c:	60fb      	str	r3, [r7, #12]
  return(result);
 801782e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8017830:	2b00      	cmp	r3, #0
 8017832:	d022      	beq.n	801787a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8017834:	683b      	ldr	r3, [r7, #0]
 8017836:	2b00      	cmp	r3, #0
 8017838:	d003      	beq.n	8017842 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801783a:	f06f 0303 	mvn.w	r3, #3
 801783e:	617b      	str	r3, [r7, #20]
 8017840:	e02c      	b.n	801789c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8017842:	2300      	movs	r3, #0
 8017844:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8017846:	f107 0308 	add.w	r3, r7, #8
 801784a:	461a      	mov	r2, r3
 801784c:	2100      	movs	r1, #0
 801784e:	6938      	ldr	r0, [r7, #16]
 8017850:	f001 f8b4 	bl	80189bc <xQueueReceiveFromISR>
 8017854:	4603      	mov	r3, r0
 8017856:	2b01      	cmp	r3, #1
 8017858:	d003      	beq.n	8017862 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801785a:	f06f 0302 	mvn.w	r3, #2
 801785e:	617b      	str	r3, [r7, #20]
 8017860:	e01c      	b.n	801789c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8017862:	68bb      	ldr	r3, [r7, #8]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d019      	beq.n	801789c <osSemaphoreAcquire+0x94>
 8017868:	4b0f      	ldr	r3, [pc, #60]	; (80178a8 <osSemaphoreAcquire+0xa0>)
 801786a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801786e:	601a      	str	r2, [r3, #0]
 8017870:	f3bf 8f4f 	dsb	sy
 8017874:	f3bf 8f6f 	isb	sy
 8017878:	e010      	b.n	801789c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801787a:	6839      	ldr	r1, [r7, #0]
 801787c:	6938      	ldr	r0, [r7, #16]
 801787e:	f000 ff91 	bl	80187a4 <xQueueSemaphoreTake>
 8017882:	4603      	mov	r3, r0
 8017884:	2b01      	cmp	r3, #1
 8017886:	d009      	beq.n	801789c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8017888:	683b      	ldr	r3, [r7, #0]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d003      	beq.n	8017896 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 801788e:	f06f 0301 	mvn.w	r3, #1
 8017892:	617b      	str	r3, [r7, #20]
 8017894:	e002      	b.n	801789c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8017896:	f06f 0302 	mvn.w	r3, #2
 801789a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801789c:	697b      	ldr	r3, [r7, #20]
}
 801789e:	4618      	mov	r0, r3
 80178a0:	3718      	adds	r7, #24
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd80      	pop	{r7, pc}
 80178a6:	bf00      	nop
 80178a8:	e000ed04 	.word	0xe000ed04

080178ac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b086      	sub	sp, #24
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80178b8:	2300      	movs	r3, #0
 80178ba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80178bc:	693b      	ldr	r3, [r7, #16]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d103      	bne.n	80178ca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80178c2:	f06f 0303 	mvn.w	r3, #3
 80178c6:	617b      	str	r3, [r7, #20]
 80178c8:	e02c      	b.n	8017924 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80178ca:	f3ef 8305 	mrs	r3, IPSR
 80178ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80178d0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d01a      	beq.n	801790c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80178d6:	2300      	movs	r3, #0
 80178d8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80178da:	f107 0308 	add.w	r3, r7, #8
 80178de:	4619      	mov	r1, r3
 80178e0:	6938      	ldr	r0, [r7, #16]
 80178e2:	f000 fdf2 	bl	80184ca <xQueueGiveFromISR>
 80178e6:	4603      	mov	r3, r0
 80178e8:	2b01      	cmp	r3, #1
 80178ea:	d003      	beq.n	80178f4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80178ec:	f06f 0302 	mvn.w	r3, #2
 80178f0:	617b      	str	r3, [r7, #20]
 80178f2:	e017      	b.n	8017924 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80178f4:	68bb      	ldr	r3, [r7, #8]
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d014      	beq.n	8017924 <osSemaphoreRelease+0x78>
 80178fa:	4b0d      	ldr	r3, [pc, #52]	; (8017930 <osSemaphoreRelease+0x84>)
 80178fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017900:	601a      	str	r2, [r3, #0]
 8017902:	f3bf 8f4f 	dsb	sy
 8017906:	f3bf 8f6f 	isb	sy
 801790a:	e00b      	b.n	8017924 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801790c:	2300      	movs	r3, #0
 801790e:	2200      	movs	r2, #0
 8017910:	2100      	movs	r1, #0
 8017912:	6938      	ldr	r0, [r7, #16]
 8017914:	f000 fc40 	bl	8018198 <xQueueGenericSend>
 8017918:	4603      	mov	r3, r0
 801791a:	2b01      	cmp	r3, #1
 801791c:	d002      	beq.n	8017924 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801791e:	f06f 0302 	mvn.w	r3, #2
 8017922:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8017924:	697b      	ldr	r3, [r7, #20]
}
 8017926:	4618      	mov	r0, r3
 8017928:	3718      	adds	r7, #24
 801792a:	46bd      	mov	sp, r7
 801792c:	bd80      	pop	{r7, pc}
 801792e:	bf00      	nop
 8017930:	e000ed04 	.word	0xe000ed04

08017934 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8017934:	b580      	push	{r7, lr}
 8017936:	b086      	sub	sp, #24
 8017938:	af00      	add	r7, sp, #0
 801793a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017940:	f3ef 8305 	mrs	r3, IPSR
 8017944:	60fb      	str	r3, [r7, #12]
  return(result);
 8017946:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8017948:	2b00      	cmp	r3, #0
 801794a:	d003      	beq.n	8017954 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 801794c:	f06f 0305 	mvn.w	r3, #5
 8017950:	617b      	str	r3, [r7, #20]
 8017952:	e00e      	b.n	8017972 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8017954:	693b      	ldr	r3, [r7, #16]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d103      	bne.n	8017962 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 801795a:	f06f 0303 	mvn.w	r3, #3
 801795e:	617b      	str	r3, [r7, #20]
 8017960:	e007      	b.n	8017972 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8017962:	6938      	ldr	r0, [r7, #16]
 8017964:	f001 fa20 	bl	8018da8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8017968:	2300      	movs	r3, #0
 801796a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 801796c:	6938      	ldr	r0, [r7, #16]
 801796e:	f001 f8a5 	bl	8018abc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8017972:	697b      	ldr	r3, [r7, #20]
}
 8017974:	4618      	mov	r0, r3
 8017976:	3718      	adds	r7, #24
 8017978:	46bd      	mov	sp, r7
 801797a:	bd80      	pop	{r7, pc}

0801797c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801797c:	b580      	push	{r7, lr}
 801797e:	b08a      	sub	sp, #40	; 0x28
 8017980:	af02      	add	r7, sp, #8
 8017982:	60f8      	str	r0, [r7, #12]
 8017984:	60b9      	str	r1, [r7, #8]
 8017986:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8017988:	2300      	movs	r3, #0
 801798a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801798c:	f3ef 8305 	mrs	r3, IPSR
 8017990:	613b      	str	r3, [r7, #16]
  return(result);
 8017992:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8017994:	2b00      	cmp	r3, #0
 8017996:	d15f      	bne.n	8017a58 <osMessageQueueNew+0xdc>
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d05c      	beq.n	8017a58 <osMessageQueueNew+0xdc>
 801799e:	68bb      	ldr	r3, [r7, #8]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d059      	beq.n	8017a58 <osMessageQueueNew+0xdc>
    mem = -1;
 80179a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80179a8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d029      	beq.n	8017a04 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	689b      	ldr	r3, [r3, #8]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d012      	beq.n	80179de <osMessageQueueNew+0x62>
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	68db      	ldr	r3, [r3, #12]
 80179bc:	2b4f      	cmp	r3, #79	; 0x4f
 80179be:	d90e      	bls.n	80179de <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d00a      	beq.n	80179de <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	695a      	ldr	r2, [r3, #20]
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	68b9      	ldr	r1, [r7, #8]
 80179d0:	fb01 f303 	mul.w	r3, r1, r3
 80179d4:	429a      	cmp	r2, r3
 80179d6:	d302      	bcc.n	80179de <osMessageQueueNew+0x62>
        mem = 1;
 80179d8:	2301      	movs	r3, #1
 80179da:	61bb      	str	r3, [r7, #24]
 80179dc:	e014      	b.n	8017a08 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	689b      	ldr	r3, [r3, #8]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d110      	bne.n	8017a08 <osMessageQueueNew+0x8c>
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	68db      	ldr	r3, [r3, #12]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d10c      	bne.n	8017a08 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d108      	bne.n	8017a08 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	695b      	ldr	r3, [r3, #20]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d104      	bne.n	8017a08 <osMessageQueueNew+0x8c>
          mem = 0;
 80179fe:	2300      	movs	r3, #0
 8017a00:	61bb      	str	r3, [r7, #24]
 8017a02:	e001      	b.n	8017a08 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8017a04:	2300      	movs	r3, #0
 8017a06:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8017a08:	69bb      	ldr	r3, [r7, #24]
 8017a0a:	2b01      	cmp	r3, #1
 8017a0c:	d10b      	bne.n	8017a26 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	691a      	ldr	r2, [r3, #16]
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	689b      	ldr	r3, [r3, #8]
 8017a16:	2100      	movs	r1, #0
 8017a18:	9100      	str	r1, [sp, #0]
 8017a1a:	68b9      	ldr	r1, [r7, #8]
 8017a1c:	68f8      	ldr	r0, [r7, #12]
 8017a1e:	f000 fa2f 	bl	8017e80 <xQueueGenericCreateStatic>
 8017a22:	61f8      	str	r0, [r7, #28]
 8017a24:	e008      	b.n	8017a38 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8017a26:	69bb      	ldr	r3, [r7, #24]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d105      	bne.n	8017a38 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8017a2c:	2200      	movs	r2, #0
 8017a2e:	68b9      	ldr	r1, [r7, #8]
 8017a30:	68f8      	ldr	r0, [r7, #12]
 8017a32:	f000 fa9d 	bl	8017f70 <xQueueGenericCreate>
 8017a36:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8017a38:	69fb      	ldr	r3, [r7, #28]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d00c      	beq.n	8017a58 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d003      	beq.n	8017a4c <osMessageQueueNew+0xd0>
        name = attr->name;
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	617b      	str	r3, [r7, #20]
 8017a4a:	e001      	b.n	8017a50 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8017a50:	6979      	ldr	r1, [r7, #20]
 8017a52:	69f8      	ldr	r0, [r7, #28]
 8017a54:	f001 f97e 	bl	8018d54 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8017a58:	69fb      	ldr	r3, [r7, #28]
}
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	3720      	adds	r7, #32
 8017a5e:	46bd      	mov	sp, r7
 8017a60:	bd80      	pop	{r7, pc}
	...

08017a64 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b088      	sub	sp, #32
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	60f8      	str	r0, [r7, #12]
 8017a6c:	60b9      	str	r1, [r7, #8]
 8017a6e:	603b      	str	r3, [r7, #0]
 8017a70:	4613      	mov	r3, r2
 8017a72:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8017a78:	2300      	movs	r3, #0
 8017a7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017a7c:	f3ef 8305 	mrs	r3, IPSR
 8017a80:	617b      	str	r3, [r7, #20]
  return(result);
 8017a82:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d028      	beq.n	8017ada <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017a88:	69bb      	ldr	r3, [r7, #24]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d005      	beq.n	8017a9a <osMessageQueuePut+0x36>
 8017a8e:	68bb      	ldr	r3, [r7, #8]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d002      	beq.n	8017a9a <osMessageQueuePut+0x36>
 8017a94:	683b      	ldr	r3, [r7, #0]
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d003      	beq.n	8017aa2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8017a9a:	f06f 0303 	mvn.w	r3, #3
 8017a9e:	61fb      	str	r3, [r7, #28]
 8017aa0:	e038      	b.n	8017b14 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8017aa6:	f107 0210 	add.w	r2, r7, #16
 8017aaa:	2300      	movs	r3, #0
 8017aac:	68b9      	ldr	r1, [r7, #8]
 8017aae:	69b8      	ldr	r0, [r7, #24]
 8017ab0:	f000 fc70 	bl	8018394 <xQueueGenericSendFromISR>
 8017ab4:	4603      	mov	r3, r0
 8017ab6:	2b01      	cmp	r3, #1
 8017ab8:	d003      	beq.n	8017ac2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8017aba:	f06f 0302 	mvn.w	r3, #2
 8017abe:	61fb      	str	r3, [r7, #28]
 8017ac0:	e028      	b.n	8017b14 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8017ac2:	693b      	ldr	r3, [r7, #16]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d025      	beq.n	8017b14 <osMessageQueuePut+0xb0>
 8017ac8:	4b15      	ldr	r3, [pc, #84]	; (8017b20 <osMessageQueuePut+0xbc>)
 8017aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ace:	601a      	str	r2, [r3, #0]
 8017ad0:	f3bf 8f4f 	dsb	sy
 8017ad4:	f3bf 8f6f 	isb	sy
 8017ad8:	e01c      	b.n	8017b14 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8017ada:	69bb      	ldr	r3, [r7, #24]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d002      	beq.n	8017ae6 <osMessageQueuePut+0x82>
 8017ae0:	68bb      	ldr	r3, [r7, #8]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d103      	bne.n	8017aee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8017ae6:	f06f 0303 	mvn.w	r3, #3
 8017aea:	61fb      	str	r3, [r7, #28]
 8017aec:	e012      	b.n	8017b14 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8017aee:	2300      	movs	r3, #0
 8017af0:	683a      	ldr	r2, [r7, #0]
 8017af2:	68b9      	ldr	r1, [r7, #8]
 8017af4:	69b8      	ldr	r0, [r7, #24]
 8017af6:	f000 fb4f 	bl	8018198 <xQueueGenericSend>
 8017afa:	4603      	mov	r3, r0
 8017afc:	2b01      	cmp	r3, #1
 8017afe:	d009      	beq.n	8017b14 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8017b00:	683b      	ldr	r3, [r7, #0]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d003      	beq.n	8017b0e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8017b06:	f06f 0301 	mvn.w	r3, #1
 8017b0a:	61fb      	str	r3, [r7, #28]
 8017b0c:	e002      	b.n	8017b14 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8017b0e:	f06f 0302 	mvn.w	r3, #2
 8017b12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8017b14:	69fb      	ldr	r3, [r7, #28]
}
 8017b16:	4618      	mov	r0, r3
 8017b18:	3720      	adds	r7, #32
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	bd80      	pop	{r7, pc}
 8017b1e:	bf00      	nop
 8017b20:	e000ed04 	.word	0xe000ed04

08017b24 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b088      	sub	sp, #32
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	60f8      	str	r0, [r7, #12]
 8017b2c:	60b9      	str	r1, [r7, #8]
 8017b2e:	607a      	str	r2, [r7, #4]
 8017b30:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8017b36:	2300      	movs	r3, #0
 8017b38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017b3a:	f3ef 8305 	mrs	r3, IPSR
 8017b3e:	617b      	str	r3, [r7, #20]
  return(result);
 8017b40:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d028      	beq.n	8017b98 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017b46:	69bb      	ldr	r3, [r7, #24]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d005      	beq.n	8017b58 <osMessageQueueGet+0x34>
 8017b4c:	68bb      	ldr	r3, [r7, #8]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d002      	beq.n	8017b58 <osMessageQueueGet+0x34>
 8017b52:	683b      	ldr	r3, [r7, #0]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d003      	beq.n	8017b60 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8017b58:	f06f 0303 	mvn.w	r3, #3
 8017b5c:	61fb      	str	r3, [r7, #28]
 8017b5e:	e037      	b.n	8017bd0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8017b60:	2300      	movs	r3, #0
 8017b62:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8017b64:	f107 0310 	add.w	r3, r7, #16
 8017b68:	461a      	mov	r2, r3
 8017b6a:	68b9      	ldr	r1, [r7, #8]
 8017b6c:	69b8      	ldr	r0, [r7, #24]
 8017b6e:	f000 ff25 	bl	80189bc <xQueueReceiveFromISR>
 8017b72:	4603      	mov	r3, r0
 8017b74:	2b01      	cmp	r3, #1
 8017b76:	d003      	beq.n	8017b80 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8017b78:	f06f 0302 	mvn.w	r3, #2
 8017b7c:	61fb      	str	r3, [r7, #28]
 8017b7e:	e027      	b.n	8017bd0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8017b80:	693b      	ldr	r3, [r7, #16]
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d024      	beq.n	8017bd0 <osMessageQueueGet+0xac>
 8017b86:	4b15      	ldr	r3, [pc, #84]	; (8017bdc <osMessageQueueGet+0xb8>)
 8017b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b8c:	601a      	str	r2, [r3, #0]
 8017b8e:	f3bf 8f4f 	dsb	sy
 8017b92:	f3bf 8f6f 	isb	sy
 8017b96:	e01b      	b.n	8017bd0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8017b98:	69bb      	ldr	r3, [r7, #24]
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d002      	beq.n	8017ba4 <osMessageQueueGet+0x80>
 8017b9e:	68bb      	ldr	r3, [r7, #8]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d103      	bne.n	8017bac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8017ba4:	f06f 0303 	mvn.w	r3, #3
 8017ba8:	61fb      	str	r3, [r7, #28]
 8017baa:	e011      	b.n	8017bd0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8017bac:	683a      	ldr	r2, [r7, #0]
 8017bae:	68b9      	ldr	r1, [r7, #8]
 8017bb0:	69b8      	ldr	r0, [r7, #24]
 8017bb2:	f000 fd17 	bl	80185e4 <xQueueReceive>
 8017bb6:	4603      	mov	r3, r0
 8017bb8:	2b01      	cmp	r3, #1
 8017bba:	d009      	beq.n	8017bd0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8017bbc:	683b      	ldr	r3, [r7, #0]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d003      	beq.n	8017bca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8017bc2:	f06f 0301 	mvn.w	r3, #1
 8017bc6:	61fb      	str	r3, [r7, #28]
 8017bc8:	e002      	b.n	8017bd0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8017bca:	f06f 0302 	mvn.w	r3, #2
 8017bce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8017bd0:	69fb      	ldr	r3, [r7, #28]
}
 8017bd2:	4618      	mov	r0, r3
 8017bd4:	3720      	adds	r7, #32
 8017bd6:	46bd      	mov	sp, r7
 8017bd8:	bd80      	pop	{r7, pc}
 8017bda:	bf00      	nop
 8017bdc:	e000ed04 	.word	0xe000ed04

08017be0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8017be0:	b480      	push	{r7}
 8017be2:	b085      	sub	sp, #20
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	60f8      	str	r0, [r7, #12]
 8017be8:	60b9      	str	r1, [r7, #8]
 8017bea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	4a07      	ldr	r2, [pc, #28]	; (8017c0c <vApplicationGetIdleTaskMemory+0x2c>)
 8017bf0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8017bf2:	68bb      	ldr	r3, [r7, #8]
 8017bf4:	4a06      	ldr	r2, [pc, #24]	; (8017c10 <vApplicationGetIdleTaskMemory+0x30>)
 8017bf6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	2280      	movs	r2, #128	; 0x80
 8017bfc:	601a      	str	r2, [r3, #0]
}
 8017bfe:	bf00      	nop
 8017c00:	3714      	adds	r7, #20
 8017c02:	46bd      	mov	sp, r7
 8017c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c08:	4770      	bx	lr
 8017c0a:	bf00      	nop
 8017c0c:	20000ff4 	.word	0x20000ff4
 8017c10:	20001050 	.word	0x20001050

08017c14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8017c14:	b480      	push	{r7}
 8017c16:	b085      	sub	sp, #20
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	60f8      	str	r0, [r7, #12]
 8017c1c:	60b9      	str	r1, [r7, #8]
 8017c1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	4a07      	ldr	r2, [pc, #28]	; (8017c40 <vApplicationGetTimerTaskMemory+0x2c>)
 8017c24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8017c26:	68bb      	ldr	r3, [r7, #8]
 8017c28:	4a06      	ldr	r2, [pc, #24]	; (8017c44 <vApplicationGetTimerTaskMemory+0x30>)
 8017c2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017c32:	601a      	str	r2, [r3, #0]
}
 8017c34:	bf00      	nop
 8017c36:	3714      	adds	r7, #20
 8017c38:	46bd      	mov	sp, r7
 8017c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c3e:	4770      	bx	lr
 8017c40:	20001250 	.word	0x20001250
 8017c44:	200012ac 	.word	0x200012ac

08017c48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017c48:	b480      	push	{r7}
 8017c4a:	b083      	sub	sp, #12
 8017c4c:	af00      	add	r7, sp, #0
 8017c4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	f103 0208 	add.w	r2, r3, #8
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017c60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	f103 0208 	add.w	r2, r3, #8
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	f103 0208 	add.w	r2, r3, #8
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	2200      	movs	r2, #0
 8017c7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017c7c:	bf00      	nop
 8017c7e:	370c      	adds	r7, #12
 8017c80:	46bd      	mov	sp, r7
 8017c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c86:	4770      	bx	lr

08017c88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017c88:	b480      	push	{r7}
 8017c8a:	b083      	sub	sp, #12
 8017c8c:	af00      	add	r7, sp, #0
 8017c8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	2200      	movs	r2, #0
 8017c94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017c96:	bf00      	nop
 8017c98:	370c      	adds	r7, #12
 8017c9a:	46bd      	mov	sp, r7
 8017c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca0:	4770      	bx	lr

08017ca2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017ca2:	b480      	push	{r7}
 8017ca4:	b085      	sub	sp, #20
 8017ca6:	af00      	add	r7, sp, #0
 8017ca8:	6078      	str	r0, [r7, #4]
 8017caa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	685b      	ldr	r3, [r3, #4]
 8017cb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017cb2:	683b      	ldr	r3, [r7, #0]
 8017cb4:	68fa      	ldr	r2, [r7, #12]
 8017cb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	689a      	ldr	r2, [r3, #8]
 8017cbc:	683b      	ldr	r3, [r7, #0]
 8017cbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	689b      	ldr	r3, [r3, #8]
 8017cc4:	683a      	ldr	r2, [r7, #0]
 8017cc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	683a      	ldr	r2, [r7, #0]
 8017ccc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017cce:	683b      	ldr	r3, [r7, #0]
 8017cd0:	687a      	ldr	r2, [r7, #4]
 8017cd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	1c5a      	adds	r2, r3, #1
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	601a      	str	r2, [r3, #0]
}
 8017cde:	bf00      	nop
 8017ce0:	3714      	adds	r7, #20
 8017ce2:	46bd      	mov	sp, r7
 8017ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce8:	4770      	bx	lr

08017cea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017cea:	b480      	push	{r7}
 8017cec:	b085      	sub	sp, #20
 8017cee:	af00      	add	r7, sp, #0
 8017cf0:	6078      	str	r0, [r7, #4]
 8017cf2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017cf4:	683b      	ldr	r3, [r7, #0]
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017cfa:	68bb      	ldr	r3, [r7, #8]
 8017cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d00:	d103      	bne.n	8017d0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	691b      	ldr	r3, [r3, #16]
 8017d06:	60fb      	str	r3, [r7, #12]
 8017d08:	e00c      	b.n	8017d24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	3308      	adds	r3, #8
 8017d0e:	60fb      	str	r3, [r7, #12]
 8017d10:	e002      	b.n	8017d18 <vListInsert+0x2e>
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	685b      	ldr	r3, [r3, #4]
 8017d16:	60fb      	str	r3, [r7, #12]
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	685b      	ldr	r3, [r3, #4]
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	68ba      	ldr	r2, [r7, #8]
 8017d20:	429a      	cmp	r2, r3
 8017d22:	d2f6      	bcs.n	8017d12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	685a      	ldr	r2, [r3, #4]
 8017d28:	683b      	ldr	r3, [r7, #0]
 8017d2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017d2c:	683b      	ldr	r3, [r7, #0]
 8017d2e:	685b      	ldr	r3, [r3, #4]
 8017d30:	683a      	ldr	r2, [r7, #0]
 8017d32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017d34:	683b      	ldr	r3, [r7, #0]
 8017d36:	68fa      	ldr	r2, [r7, #12]
 8017d38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	683a      	ldr	r2, [r7, #0]
 8017d3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017d40:	683b      	ldr	r3, [r7, #0]
 8017d42:	687a      	ldr	r2, [r7, #4]
 8017d44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	1c5a      	adds	r2, r3, #1
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	601a      	str	r2, [r3, #0]
}
 8017d50:	bf00      	nop
 8017d52:	3714      	adds	r7, #20
 8017d54:	46bd      	mov	sp, r7
 8017d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d5a:	4770      	bx	lr

08017d5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017d5c:	b480      	push	{r7}
 8017d5e:	b085      	sub	sp, #20
 8017d60:	af00      	add	r7, sp, #0
 8017d62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	691b      	ldr	r3, [r3, #16]
 8017d68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	685b      	ldr	r3, [r3, #4]
 8017d6e:	687a      	ldr	r2, [r7, #4]
 8017d70:	6892      	ldr	r2, [r2, #8]
 8017d72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	689b      	ldr	r3, [r3, #8]
 8017d78:	687a      	ldr	r2, [r7, #4]
 8017d7a:	6852      	ldr	r2, [r2, #4]
 8017d7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	685b      	ldr	r3, [r3, #4]
 8017d82:	687a      	ldr	r2, [r7, #4]
 8017d84:	429a      	cmp	r2, r3
 8017d86:	d103      	bne.n	8017d90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	689a      	ldr	r2, [r3, #8]
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	2200      	movs	r2, #0
 8017d94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	1e5a      	subs	r2, r3, #1
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	681b      	ldr	r3, [r3, #0]
}
 8017da4:	4618      	mov	r0, r3
 8017da6:	3714      	adds	r7, #20
 8017da8:	46bd      	mov	sp, r7
 8017daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dae:	4770      	bx	lr

08017db0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017db0:	b580      	push	{r7, lr}
 8017db2:	b084      	sub	sp, #16
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	6078      	str	r0, [r7, #4]
 8017db8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d10a      	bne.n	8017dda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dc8:	f383 8811 	msr	BASEPRI, r3
 8017dcc:	f3bf 8f6f 	isb	sy
 8017dd0:	f3bf 8f4f 	dsb	sy
 8017dd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8017dd6:	bf00      	nop
 8017dd8:	e7fe      	b.n	8017dd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017dda:	f002 fcbb 	bl	801a754 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	681a      	ldr	r2, [r3, #0]
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017de6:	68f9      	ldr	r1, [r7, #12]
 8017de8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017dea:	fb01 f303 	mul.w	r3, r1, r3
 8017dee:	441a      	add	r2, r3
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	2200      	movs	r2, #0
 8017df8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	681a      	ldr	r2, [r3, #0]
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	681a      	ldr	r2, [r3, #0]
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e0a:	3b01      	subs	r3, #1
 8017e0c:	68f9      	ldr	r1, [r7, #12]
 8017e0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017e10:	fb01 f303 	mul.w	r3, r1, r3
 8017e14:	441a      	add	r2, r3
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	22ff      	movs	r2, #255	; 0xff
 8017e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	22ff      	movs	r2, #255	; 0xff
 8017e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017e2a:	683b      	ldr	r3, [r7, #0]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d114      	bne.n	8017e5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	691b      	ldr	r3, [r3, #16]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d01a      	beq.n	8017e6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	3310      	adds	r3, #16
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	f001 fc73 	bl	8019728 <xTaskRemoveFromEventList>
 8017e42:	4603      	mov	r3, r0
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d012      	beq.n	8017e6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017e48:	4b0c      	ldr	r3, [pc, #48]	; (8017e7c <xQueueGenericReset+0xcc>)
 8017e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e4e:	601a      	str	r2, [r3, #0]
 8017e50:	f3bf 8f4f 	dsb	sy
 8017e54:	f3bf 8f6f 	isb	sy
 8017e58:	e009      	b.n	8017e6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	3310      	adds	r3, #16
 8017e5e:	4618      	mov	r0, r3
 8017e60:	f7ff fef2 	bl	8017c48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017e64:	68fb      	ldr	r3, [r7, #12]
 8017e66:	3324      	adds	r3, #36	; 0x24
 8017e68:	4618      	mov	r0, r3
 8017e6a:	f7ff feed 	bl	8017c48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017e6e:	f002 fca1 	bl	801a7b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017e72:	2301      	movs	r3, #1
}
 8017e74:	4618      	mov	r0, r3
 8017e76:	3710      	adds	r7, #16
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	bd80      	pop	{r7, pc}
 8017e7c:	e000ed04 	.word	0xe000ed04

08017e80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b08e      	sub	sp, #56	; 0x38
 8017e84:	af02      	add	r7, sp, #8
 8017e86:	60f8      	str	r0, [r7, #12]
 8017e88:	60b9      	str	r1, [r7, #8]
 8017e8a:	607a      	str	r2, [r7, #4]
 8017e8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d10a      	bne.n	8017eaa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e98:	f383 8811 	msr	BASEPRI, r3
 8017e9c:	f3bf 8f6f 	isb	sy
 8017ea0:	f3bf 8f4f 	dsb	sy
 8017ea4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017ea6:	bf00      	nop
 8017ea8:	e7fe      	b.n	8017ea8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017eaa:	683b      	ldr	r3, [r7, #0]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d10a      	bne.n	8017ec6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eb4:	f383 8811 	msr	BASEPRI, r3
 8017eb8:	f3bf 8f6f 	isb	sy
 8017ebc:	f3bf 8f4f 	dsb	sy
 8017ec0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017ec2:	bf00      	nop
 8017ec4:	e7fe      	b.n	8017ec4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d002      	beq.n	8017ed2 <xQueueGenericCreateStatic+0x52>
 8017ecc:	68bb      	ldr	r3, [r7, #8]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d001      	beq.n	8017ed6 <xQueueGenericCreateStatic+0x56>
 8017ed2:	2301      	movs	r3, #1
 8017ed4:	e000      	b.n	8017ed8 <xQueueGenericCreateStatic+0x58>
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d10a      	bne.n	8017ef2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ee0:	f383 8811 	msr	BASEPRI, r3
 8017ee4:	f3bf 8f6f 	isb	sy
 8017ee8:	f3bf 8f4f 	dsb	sy
 8017eec:	623b      	str	r3, [r7, #32]
}
 8017eee:	bf00      	nop
 8017ef0:	e7fe      	b.n	8017ef0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d102      	bne.n	8017efe <xQueueGenericCreateStatic+0x7e>
 8017ef8:	68bb      	ldr	r3, [r7, #8]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d101      	bne.n	8017f02 <xQueueGenericCreateStatic+0x82>
 8017efe:	2301      	movs	r3, #1
 8017f00:	e000      	b.n	8017f04 <xQueueGenericCreateStatic+0x84>
 8017f02:	2300      	movs	r3, #0
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d10a      	bne.n	8017f1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8017f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f0c:	f383 8811 	msr	BASEPRI, r3
 8017f10:	f3bf 8f6f 	isb	sy
 8017f14:	f3bf 8f4f 	dsb	sy
 8017f18:	61fb      	str	r3, [r7, #28]
}
 8017f1a:	bf00      	nop
 8017f1c:	e7fe      	b.n	8017f1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017f1e:	2350      	movs	r3, #80	; 0x50
 8017f20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017f22:	697b      	ldr	r3, [r7, #20]
 8017f24:	2b50      	cmp	r3, #80	; 0x50
 8017f26:	d00a      	beq.n	8017f3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f2c:	f383 8811 	msr	BASEPRI, r3
 8017f30:	f3bf 8f6f 	isb	sy
 8017f34:	f3bf 8f4f 	dsb	sy
 8017f38:	61bb      	str	r3, [r7, #24]
}
 8017f3a:	bf00      	nop
 8017f3c:	e7fe      	b.n	8017f3c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017f3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017f40:	683b      	ldr	r3, [r7, #0]
 8017f42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d00d      	beq.n	8017f66 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f4c:	2201      	movs	r2, #1
 8017f4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017f52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f58:	9300      	str	r3, [sp, #0]
 8017f5a:	4613      	mov	r3, r2
 8017f5c:	687a      	ldr	r2, [r7, #4]
 8017f5e:	68b9      	ldr	r1, [r7, #8]
 8017f60:	68f8      	ldr	r0, [r7, #12]
 8017f62:	f000 f83f 	bl	8017fe4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017f68:	4618      	mov	r0, r3
 8017f6a:	3730      	adds	r7, #48	; 0x30
 8017f6c:	46bd      	mov	sp, r7
 8017f6e:	bd80      	pop	{r7, pc}

08017f70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8017f70:	b580      	push	{r7, lr}
 8017f72:	b08a      	sub	sp, #40	; 0x28
 8017f74:	af02      	add	r7, sp, #8
 8017f76:	60f8      	str	r0, [r7, #12]
 8017f78:	60b9      	str	r1, [r7, #8]
 8017f7a:	4613      	mov	r3, r2
 8017f7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d10a      	bne.n	8017f9a <xQueueGenericCreate+0x2a>
	__asm volatile
 8017f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f88:	f383 8811 	msr	BASEPRI, r3
 8017f8c:	f3bf 8f6f 	isb	sy
 8017f90:	f3bf 8f4f 	dsb	sy
 8017f94:	613b      	str	r3, [r7, #16]
}
 8017f96:	bf00      	nop
 8017f98:	e7fe      	b.n	8017f98 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	68ba      	ldr	r2, [r7, #8]
 8017f9e:	fb02 f303 	mul.w	r3, r2, r3
 8017fa2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8017fa4:	69fb      	ldr	r3, [r7, #28]
 8017fa6:	3350      	adds	r3, #80	; 0x50
 8017fa8:	4618      	mov	r0, r3
 8017faa:	f002 fcf5 	bl	801a998 <pvPortMalloc>
 8017fae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8017fb0:	69bb      	ldr	r3, [r7, #24]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d011      	beq.n	8017fda <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8017fb6:	69bb      	ldr	r3, [r7, #24]
 8017fb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017fba:	697b      	ldr	r3, [r7, #20]
 8017fbc:	3350      	adds	r3, #80	; 0x50
 8017fbe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8017fc0:	69bb      	ldr	r3, [r7, #24]
 8017fc2:	2200      	movs	r2, #0
 8017fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017fc8:	79fa      	ldrb	r2, [r7, #7]
 8017fca:	69bb      	ldr	r3, [r7, #24]
 8017fcc:	9300      	str	r3, [sp, #0]
 8017fce:	4613      	mov	r3, r2
 8017fd0:	697a      	ldr	r2, [r7, #20]
 8017fd2:	68b9      	ldr	r1, [r7, #8]
 8017fd4:	68f8      	ldr	r0, [r7, #12]
 8017fd6:	f000 f805 	bl	8017fe4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017fda:	69bb      	ldr	r3, [r7, #24]
	}
 8017fdc:	4618      	mov	r0, r3
 8017fde:	3720      	adds	r7, #32
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	bd80      	pop	{r7, pc}

08017fe4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b084      	sub	sp, #16
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	60f8      	str	r0, [r7, #12]
 8017fec:	60b9      	str	r1, [r7, #8]
 8017fee:	607a      	str	r2, [r7, #4]
 8017ff0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017ff2:	68bb      	ldr	r3, [r7, #8]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d103      	bne.n	8018000 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017ff8:	69bb      	ldr	r3, [r7, #24]
 8017ffa:	69ba      	ldr	r2, [r7, #24]
 8017ffc:	601a      	str	r2, [r3, #0]
 8017ffe:	e002      	b.n	8018006 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018000:	69bb      	ldr	r3, [r7, #24]
 8018002:	687a      	ldr	r2, [r7, #4]
 8018004:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8018006:	69bb      	ldr	r3, [r7, #24]
 8018008:	68fa      	ldr	r2, [r7, #12]
 801800a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801800c:	69bb      	ldr	r3, [r7, #24]
 801800e:	68ba      	ldr	r2, [r7, #8]
 8018010:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018012:	2101      	movs	r1, #1
 8018014:	69b8      	ldr	r0, [r7, #24]
 8018016:	f7ff fecb 	bl	8017db0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801801a:	69bb      	ldr	r3, [r7, #24]
 801801c:	78fa      	ldrb	r2, [r7, #3]
 801801e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018022:	bf00      	nop
 8018024:	3710      	adds	r7, #16
 8018026:	46bd      	mov	sp, r7
 8018028:	bd80      	pop	{r7, pc}

0801802a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801802a:	b580      	push	{r7, lr}
 801802c:	b082      	sub	sp, #8
 801802e:	af00      	add	r7, sp, #0
 8018030:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d00e      	beq.n	8018056 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	2200      	movs	r2, #0
 801803c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	2200      	movs	r2, #0
 8018042:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	2200      	movs	r2, #0
 8018048:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801804a:	2300      	movs	r3, #0
 801804c:	2200      	movs	r2, #0
 801804e:	2100      	movs	r1, #0
 8018050:	6878      	ldr	r0, [r7, #4]
 8018052:	f000 f8a1 	bl	8018198 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8018056:	bf00      	nop
 8018058:	3708      	adds	r7, #8
 801805a:	46bd      	mov	sp, r7
 801805c:	bd80      	pop	{r7, pc}

0801805e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801805e:	b580      	push	{r7, lr}
 8018060:	b086      	sub	sp, #24
 8018062:	af00      	add	r7, sp, #0
 8018064:	4603      	mov	r3, r0
 8018066:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8018068:	2301      	movs	r3, #1
 801806a:	617b      	str	r3, [r7, #20]
 801806c:	2300      	movs	r3, #0
 801806e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8018070:	79fb      	ldrb	r3, [r7, #7]
 8018072:	461a      	mov	r2, r3
 8018074:	6939      	ldr	r1, [r7, #16]
 8018076:	6978      	ldr	r0, [r7, #20]
 8018078:	f7ff ff7a 	bl	8017f70 <xQueueGenericCreate>
 801807c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801807e:	68f8      	ldr	r0, [r7, #12]
 8018080:	f7ff ffd3 	bl	801802a <prvInitialiseMutex>

		return xNewQueue;
 8018084:	68fb      	ldr	r3, [r7, #12]
	}
 8018086:	4618      	mov	r0, r3
 8018088:	3718      	adds	r7, #24
 801808a:	46bd      	mov	sp, r7
 801808c:	bd80      	pop	{r7, pc}

0801808e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801808e:	b580      	push	{r7, lr}
 8018090:	b088      	sub	sp, #32
 8018092:	af02      	add	r7, sp, #8
 8018094:	4603      	mov	r3, r0
 8018096:	6039      	str	r1, [r7, #0]
 8018098:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801809a:	2301      	movs	r3, #1
 801809c:	617b      	str	r3, [r7, #20]
 801809e:	2300      	movs	r3, #0
 80180a0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80180a2:	79fb      	ldrb	r3, [r7, #7]
 80180a4:	9300      	str	r3, [sp, #0]
 80180a6:	683b      	ldr	r3, [r7, #0]
 80180a8:	2200      	movs	r2, #0
 80180aa:	6939      	ldr	r1, [r7, #16]
 80180ac:	6978      	ldr	r0, [r7, #20]
 80180ae:	f7ff fee7 	bl	8017e80 <xQueueGenericCreateStatic>
 80180b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80180b4:	68f8      	ldr	r0, [r7, #12]
 80180b6:	f7ff ffb8 	bl	801802a <prvInitialiseMutex>

		return xNewQueue;
 80180ba:	68fb      	ldr	r3, [r7, #12]
	}
 80180bc:	4618      	mov	r0, r3
 80180be:	3718      	adds	r7, #24
 80180c0:	46bd      	mov	sp, r7
 80180c2:	bd80      	pop	{r7, pc}

080180c4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80180c4:	b580      	push	{r7, lr}
 80180c6:	b08a      	sub	sp, #40	; 0x28
 80180c8:	af02      	add	r7, sp, #8
 80180ca:	60f8      	str	r0, [r7, #12]
 80180cc:	60b9      	str	r1, [r7, #8]
 80180ce:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d10a      	bne.n	80180ec <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80180d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180da:	f383 8811 	msr	BASEPRI, r3
 80180de:	f3bf 8f6f 	isb	sy
 80180e2:	f3bf 8f4f 	dsb	sy
 80180e6:	61bb      	str	r3, [r7, #24]
}
 80180e8:	bf00      	nop
 80180ea:	e7fe      	b.n	80180ea <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80180ec:	68ba      	ldr	r2, [r7, #8]
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	429a      	cmp	r2, r3
 80180f2:	d90a      	bls.n	801810a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80180f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180f8:	f383 8811 	msr	BASEPRI, r3
 80180fc:	f3bf 8f6f 	isb	sy
 8018100:	f3bf 8f4f 	dsb	sy
 8018104:	617b      	str	r3, [r7, #20]
}
 8018106:	bf00      	nop
 8018108:	e7fe      	b.n	8018108 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801810a:	2302      	movs	r3, #2
 801810c:	9300      	str	r3, [sp, #0]
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	2200      	movs	r2, #0
 8018112:	2100      	movs	r1, #0
 8018114:	68f8      	ldr	r0, [r7, #12]
 8018116:	f7ff feb3 	bl	8017e80 <xQueueGenericCreateStatic>
 801811a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801811c:	69fb      	ldr	r3, [r7, #28]
 801811e:	2b00      	cmp	r3, #0
 8018120:	d002      	beq.n	8018128 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8018122:	69fb      	ldr	r3, [r7, #28]
 8018124:	68ba      	ldr	r2, [r7, #8]
 8018126:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8018128:	69fb      	ldr	r3, [r7, #28]
	}
 801812a:	4618      	mov	r0, r3
 801812c:	3720      	adds	r7, #32
 801812e:	46bd      	mov	sp, r7
 8018130:	bd80      	pop	{r7, pc}

08018132 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8018132:	b580      	push	{r7, lr}
 8018134:	b086      	sub	sp, #24
 8018136:	af00      	add	r7, sp, #0
 8018138:	6078      	str	r0, [r7, #4]
 801813a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	2b00      	cmp	r3, #0
 8018140:	d10a      	bne.n	8018158 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8018142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018146:	f383 8811 	msr	BASEPRI, r3
 801814a:	f3bf 8f6f 	isb	sy
 801814e:	f3bf 8f4f 	dsb	sy
 8018152:	613b      	str	r3, [r7, #16]
}
 8018154:	bf00      	nop
 8018156:	e7fe      	b.n	8018156 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8018158:	683a      	ldr	r2, [r7, #0]
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	429a      	cmp	r2, r3
 801815e:	d90a      	bls.n	8018176 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8018160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018164:	f383 8811 	msr	BASEPRI, r3
 8018168:	f3bf 8f6f 	isb	sy
 801816c:	f3bf 8f4f 	dsb	sy
 8018170:	60fb      	str	r3, [r7, #12]
}
 8018172:	bf00      	nop
 8018174:	e7fe      	b.n	8018174 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8018176:	2202      	movs	r2, #2
 8018178:	2100      	movs	r1, #0
 801817a:	6878      	ldr	r0, [r7, #4]
 801817c:	f7ff fef8 	bl	8017f70 <xQueueGenericCreate>
 8018180:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8018182:	697b      	ldr	r3, [r7, #20]
 8018184:	2b00      	cmp	r3, #0
 8018186:	d002      	beq.n	801818e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8018188:	697b      	ldr	r3, [r7, #20]
 801818a:	683a      	ldr	r2, [r7, #0]
 801818c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801818e:	697b      	ldr	r3, [r7, #20]
	}
 8018190:	4618      	mov	r0, r3
 8018192:	3718      	adds	r7, #24
 8018194:	46bd      	mov	sp, r7
 8018196:	bd80      	pop	{r7, pc}

08018198 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8018198:	b580      	push	{r7, lr}
 801819a:	b08e      	sub	sp, #56	; 0x38
 801819c:	af00      	add	r7, sp, #0
 801819e:	60f8      	str	r0, [r7, #12]
 80181a0:	60b9      	str	r1, [r7, #8]
 80181a2:	607a      	str	r2, [r7, #4]
 80181a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80181a6:	2300      	movs	r3, #0
 80181a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80181ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d10a      	bne.n	80181ca <xQueueGenericSend+0x32>
	__asm volatile
 80181b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181b8:	f383 8811 	msr	BASEPRI, r3
 80181bc:	f3bf 8f6f 	isb	sy
 80181c0:	f3bf 8f4f 	dsb	sy
 80181c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80181c6:	bf00      	nop
 80181c8:	e7fe      	b.n	80181c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80181ca:	68bb      	ldr	r3, [r7, #8]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d103      	bne.n	80181d8 <xQueueGenericSend+0x40>
 80181d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d101      	bne.n	80181dc <xQueueGenericSend+0x44>
 80181d8:	2301      	movs	r3, #1
 80181da:	e000      	b.n	80181de <xQueueGenericSend+0x46>
 80181dc:	2300      	movs	r3, #0
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d10a      	bne.n	80181f8 <xQueueGenericSend+0x60>
	__asm volatile
 80181e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181e6:	f383 8811 	msr	BASEPRI, r3
 80181ea:	f3bf 8f6f 	isb	sy
 80181ee:	f3bf 8f4f 	dsb	sy
 80181f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80181f4:	bf00      	nop
 80181f6:	e7fe      	b.n	80181f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80181f8:	683b      	ldr	r3, [r7, #0]
 80181fa:	2b02      	cmp	r3, #2
 80181fc:	d103      	bne.n	8018206 <xQueueGenericSend+0x6e>
 80181fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018202:	2b01      	cmp	r3, #1
 8018204:	d101      	bne.n	801820a <xQueueGenericSend+0x72>
 8018206:	2301      	movs	r3, #1
 8018208:	e000      	b.n	801820c <xQueueGenericSend+0x74>
 801820a:	2300      	movs	r3, #0
 801820c:	2b00      	cmp	r3, #0
 801820e:	d10a      	bne.n	8018226 <xQueueGenericSend+0x8e>
	__asm volatile
 8018210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018214:	f383 8811 	msr	BASEPRI, r3
 8018218:	f3bf 8f6f 	isb	sy
 801821c:	f3bf 8f4f 	dsb	sy
 8018220:	623b      	str	r3, [r7, #32]
}
 8018222:	bf00      	nop
 8018224:	e7fe      	b.n	8018224 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018226:	f001 fc3d 	bl	8019aa4 <xTaskGetSchedulerState>
 801822a:	4603      	mov	r3, r0
 801822c:	2b00      	cmp	r3, #0
 801822e:	d102      	bne.n	8018236 <xQueueGenericSend+0x9e>
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	2b00      	cmp	r3, #0
 8018234:	d101      	bne.n	801823a <xQueueGenericSend+0xa2>
 8018236:	2301      	movs	r3, #1
 8018238:	e000      	b.n	801823c <xQueueGenericSend+0xa4>
 801823a:	2300      	movs	r3, #0
 801823c:	2b00      	cmp	r3, #0
 801823e:	d10a      	bne.n	8018256 <xQueueGenericSend+0xbe>
	__asm volatile
 8018240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018244:	f383 8811 	msr	BASEPRI, r3
 8018248:	f3bf 8f6f 	isb	sy
 801824c:	f3bf 8f4f 	dsb	sy
 8018250:	61fb      	str	r3, [r7, #28]
}
 8018252:	bf00      	nop
 8018254:	e7fe      	b.n	8018254 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018256:	f002 fa7d 	bl	801a754 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801825c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018262:	429a      	cmp	r2, r3
 8018264:	d302      	bcc.n	801826c <xQueueGenericSend+0xd4>
 8018266:	683b      	ldr	r3, [r7, #0]
 8018268:	2b02      	cmp	r3, #2
 801826a:	d129      	bne.n	80182c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801826c:	683a      	ldr	r2, [r7, #0]
 801826e:	68b9      	ldr	r1, [r7, #8]
 8018270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018272:	f000 fc5e 	bl	8018b32 <prvCopyDataToQueue>
 8018276:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801827a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801827c:	2b00      	cmp	r3, #0
 801827e:	d010      	beq.n	80182a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018282:	3324      	adds	r3, #36	; 0x24
 8018284:	4618      	mov	r0, r3
 8018286:	f001 fa4f 	bl	8019728 <xTaskRemoveFromEventList>
 801828a:	4603      	mov	r3, r0
 801828c:	2b00      	cmp	r3, #0
 801828e:	d013      	beq.n	80182b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018290:	4b3f      	ldr	r3, [pc, #252]	; (8018390 <xQueueGenericSend+0x1f8>)
 8018292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018296:	601a      	str	r2, [r3, #0]
 8018298:	f3bf 8f4f 	dsb	sy
 801829c:	f3bf 8f6f 	isb	sy
 80182a0:	e00a      	b.n	80182b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80182a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d007      	beq.n	80182b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80182a8:	4b39      	ldr	r3, [pc, #228]	; (8018390 <xQueueGenericSend+0x1f8>)
 80182aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80182ae:	601a      	str	r2, [r3, #0]
 80182b0:	f3bf 8f4f 	dsb	sy
 80182b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80182b8:	f002 fa7c 	bl	801a7b4 <vPortExitCritical>
				return pdPASS;
 80182bc:	2301      	movs	r3, #1
 80182be:	e063      	b.n	8018388 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d103      	bne.n	80182ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80182c6:	f002 fa75 	bl	801a7b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80182ca:	2300      	movs	r3, #0
 80182cc:	e05c      	b.n	8018388 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80182ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d106      	bne.n	80182e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80182d4:	f107 0314 	add.w	r3, r7, #20
 80182d8:	4618      	mov	r0, r3
 80182da:	f001 fa89 	bl	80197f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80182de:	2301      	movs	r3, #1
 80182e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80182e2:	f002 fa67 	bl	801a7b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80182e6:	f000 ffc5 	bl	8019274 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80182ea:	f002 fa33 	bl	801a754 <vPortEnterCritical>
 80182ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80182f4:	b25b      	sxtb	r3, r3
 80182f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80182fa:	d103      	bne.n	8018304 <xQueueGenericSend+0x16c>
 80182fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182fe:	2200      	movs	r2, #0
 8018300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801830a:	b25b      	sxtb	r3, r3
 801830c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018310:	d103      	bne.n	801831a <xQueueGenericSend+0x182>
 8018312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018314:	2200      	movs	r2, #0
 8018316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801831a:	f002 fa4b 	bl	801a7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801831e:	1d3a      	adds	r2, r7, #4
 8018320:	f107 0314 	add.w	r3, r7, #20
 8018324:	4611      	mov	r1, r2
 8018326:	4618      	mov	r0, r3
 8018328:	f001 fa78 	bl	801981c <xTaskCheckForTimeOut>
 801832c:	4603      	mov	r3, r0
 801832e:	2b00      	cmp	r3, #0
 8018330:	d124      	bne.n	801837c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018332:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018334:	f000 fcf5 	bl	8018d22 <prvIsQueueFull>
 8018338:	4603      	mov	r3, r0
 801833a:	2b00      	cmp	r3, #0
 801833c:	d018      	beq.n	8018370 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018340:	3310      	adds	r3, #16
 8018342:	687a      	ldr	r2, [r7, #4]
 8018344:	4611      	mov	r1, r2
 8018346:	4618      	mov	r0, r3
 8018348:	f001 f99e 	bl	8019688 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801834c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801834e:	f000 fc80 	bl	8018c52 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8018352:	f000 ff9d 	bl	8019290 <xTaskResumeAll>
 8018356:	4603      	mov	r3, r0
 8018358:	2b00      	cmp	r3, #0
 801835a:	f47f af7c 	bne.w	8018256 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801835e:	4b0c      	ldr	r3, [pc, #48]	; (8018390 <xQueueGenericSend+0x1f8>)
 8018360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018364:	601a      	str	r2, [r3, #0]
 8018366:	f3bf 8f4f 	dsb	sy
 801836a:	f3bf 8f6f 	isb	sy
 801836e:	e772      	b.n	8018256 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8018370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018372:	f000 fc6e 	bl	8018c52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018376:	f000 ff8b 	bl	8019290 <xTaskResumeAll>
 801837a:	e76c      	b.n	8018256 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801837c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801837e:	f000 fc68 	bl	8018c52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018382:	f000 ff85 	bl	8019290 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8018386:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8018388:	4618      	mov	r0, r3
 801838a:	3738      	adds	r7, #56	; 0x38
 801838c:	46bd      	mov	sp, r7
 801838e:	bd80      	pop	{r7, pc}
 8018390:	e000ed04 	.word	0xe000ed04

08018394 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8018394:	b580      	push	{r7, lr}
 8018396:	b090      	sub	sp, #64	; 0x40
 8018398:	af00      	add	r7, sp, #0
 801839a:	60f8      	str	r0, [r7, #12]
 801839c:	60b9      	str	r1, [r7, #8]
 801839e:	607a      	str	r2, [r7, #4]
 80183a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80183a2:	68fb      	ldr	r3, [r7, #12]
 80183a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80183a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d10a      	bne.n	80183c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80183ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183b0:	f383 8811 	msr	BASEPRI, r3
 80183b4:	f3bf 8f6f 	isb	sy
 80183b8:	f3bf 8f4f 	dsb	sy
 80183bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80183be:	bf00      	nop
 80183c0:	e7fe      	b.n	80183c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80183c2:	68bb      	ldr	r3, [r7, #8]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d103      	bne.n	80183d0 <xQueueGenericSendFromISR+0x3c>
 80183c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d101      	bne.n	80183d4 <xQueueGenericSendFromISR+0x40>
 80183d0:	2301      	movs	r3, #1
 80183d2:	e000      	b.n	80183d6 <xQueueGenericSendFromISR+0x42>
 80183d4:	2300      	movs	r3, #0
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d10a      	bne.n	80183f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80183da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183de:	f383 8811 	msr	BASEPRI, r3
 80183e2:	f3bf 8f6f 	isb	sy
 80183e6:	f3bf 8f4f 	dsb	sy
 80183ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80183ec:	bf00      	nop
 80183ee:	e7fe      	b.n	80183ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80183f0:	683b      	ldr	r3, [r7, #0]
 80183f2:	2b02      	cmp	r3, #2
 80183f4:	d103      	bne.n	80183fe <xQueueGenericSendFromISR+0x6a>
 80183f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80183fa:	2b01      	cmp	r3, #1
 80183fc:	d101      	bne.n	8018402 <xQueueGenericSendFromISR+0x6e>
 80183fe:	2301      	movs	r3, #1
 8018400:	e000      	b.n	8018404 <xQueueGenericSendFromISR+0x70>
 8018402:	2300      	movs	r3, #0
 8018404:	2b00      	cmp	r3, #0
 8018406:	d10a      	bne.n	801841e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8018408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801840c:	f383 8811 	msr	BASEPRI, r3
 8018410:	f3bf 8f6f 	isb	sy
 8018414:	f3bf 8f4f 	dsb	sy
 8018418:	623b      	str	r3, [r7, #32]
}
 801841a:	bf00      	nop
 801841c:	e7fe      	b.n	801841c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801841e:	f002 fa7b 	bl	801a918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018422:	f3ef 8211 	mrs	r2, BASEPRI
 8018426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801842a:	f383 8811 	msr	BASEPRI, r3
 801842e:	f3bf 8f6f 	isb	sy
 8018432:	f3bf 8f4f 	dsb	sy
 8018436:	61fa      	str	r2, [r7, #28]
 8018438:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801843a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801843c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801843e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018446:	429a      	cmp	r2, r3
 8018448:	d302      	bcc.n	8018450 <xQueueGenericSendFromISR+0xbc>
 801844a:	683b      	ldr	r3, [r7, #0]
 801844c:	2b02      	cmp	r3, #2
 801844e:	d12f      	bne.n	80184b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018452:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801845a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801845c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801845e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018460:	683a      	ldr	r2, [r7, #0]
 8018462:	68b9      	ldr	r1, [r7, #8]
 8018464:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018466:	f000 fb64 	bl	8018b32 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801846a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801846e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018472:	d112      	bne.n	801849a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018478:	2b00      	cmp	r3, #0
 801847a:	d016      	beq.n	80184aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801847e:	3324      	adds	r3, #36	; 0x24
 8018480:	4618      	mov	r0, r3
 8018482:	f001 f951 	bl	8019728 <xTaskRemoveFromEventList>
 8018486:	4603      	mov	r3, r0
 8018488:	2b00      	cmp	r3, #0
 801848a:	d00e      	beq.n	80184aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	2b00      	cmp	r3, #0
 8018490:	d00b      	beq.n	80184aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	2201      	movs	r2, #1
 8018496:	601a      	str	r2, [r3, #0]
 8018498:	e007      	b.n	80184aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801849a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801849e:	3301      	adds	r3, #1
 80184a0:	b2db      	uxtb	r3, r3
 80184a2:	b25a      	sxtb	r2, r3
 80184a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80184aa:	2301      	movs	r3, #1
 80184ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80184ae:	e001      	b.n	80184b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80184b0:	2300      	movs	r3, #0
 80184b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80184b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80184b8:	697b      	ldr	r3, [r7, #20]
 80184ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80184be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80184c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80184c2:	4618      	mov	r0, r3
 80184c4:	3740      	adds	r7, #64	; 0x40
 80184c6:	46bd      	mov	sp, r7
 80184c8:	bd80      	pop	{r7, pc}

080184ca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80184ca:	b580      	push	{r7, lr}
 80184cc:	b08e      	sub	sp, #56	; 0x38
 80184ce:	af00      	add	r7, sp, #0
 80184d0:	6078      	str	r0, [r7, #4]
 80184d2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80184d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d10a      	bne.n	80184f4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80184de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184e2:	f383 8811 	msr	BASEPRI, r3
 80184e6:	f3bf 8f6f 	isb	sy
 80184ea:	f3bf 8f4f 	dsb	sy
 80184ee:	623b      	str	r3, [r7, #32]
}
 80184f0:	bf00      	nop
 80184f2:	e7fe      	b.n	80184f2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80184f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d00a      	beq.n	8018512 <xQueueGiveFromISR+0x48>
	__asm volatile
 80184fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018500:	f383 8811 	msr	BASEPRI, r3
 8018504:	f3bf 8f6f 	isb	sy
 8018508:	f3bf 8f4f 	dsb	sy
 801850c:	61fb      	str	r3, [r7, #28]
}
 801850e:	bf00      	nop
 8018510:	e7fe      	b.n	8018510 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8018512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	2b00      	cmp	r3, #0
 8018518:	d103      	bne.n	8018522 <xQueueGiveFromISR+0x58>
 801851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801851c:	689b      	ldr	r3, [r3, #8]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d101      	bne.n	8018526 <xQueueGiveFromISR+0x5c>
 8018522:	2301      	movs	r3, #1
 8018524:	e000      	b.n	8018528 <xQueueGiveFromISR+0x5e>
 8018526:	2300      	movs	r3, #0
 8018528:	2b00      	cmp	r3, #0
 801852a:	d10a      	bne.n	8018542 <xQueueGiveFromISR+0x78>
	__asm volatile
 801852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018530:	f383 8811 	msr	BASEPRI, r3
 8018534:	f3bf 8f6f 	isb	sy
 8018538:	f3bf 8f4f 	dsb	sy
 801853c:	61bb      	str	r3, [r7, #24]
}
 801853e:	bf00      	nop
 8018540:	e7fe      	b.n	8018540 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018542:	f002 f9e9 	bl	801a918 <vPortValidateInterruptPriority>
	__asm volatile
 8018546:	f3ef 8211 	mrs	r2, BASEPRI
 801854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801854e:	f383 8811 	msr	BASEPRI, r3
 8018552:	f3bf 8f6f 	isb	sy
 8018556:	f3bf 8f4f 	dsb	sy
 801855a:	617a      	str	r2, [r7, #20]
 801855c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801855e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018560:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018566:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8018568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801856a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801856c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801856e:	429a      	cmp	r2, r3
 8018570:	d22b      	bcs.n	80185ca <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801857e:	1c5a      	adds	r2, r3, #1
 8018580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018582:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018584:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801858c:	d112      	bne.n	80185b4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018592:	2b00      	cmp	r3, #0
 8018594:	d016      	beq.n	80185c4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018598:	3324      	adds	r3, #36	; 0x24
 801859a:	4618      	mov	r0, r3
 801859c:	f001 f8c4 	bl	8019728 <xTaskRemoveFromEventList>
 80185a0:	4603      	mov	r3, r0
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d00e      	beq.n	80185c4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80185a6:	683b      	ldr	r3, [r7, #0]
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d00b      	beq.n	80185c4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80185ac:	683b      	ldr	r3, [r7, #0]
 80185ae:	2201      	movs	r2, #1
 80185b0:	601a      	str	r2, [r3, #0]
 80185b2:	e007      	b.n	80185c4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80185b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185b8:	3301      	adds	r3, #1
 80185ba:	b2db      	uxtb	r3, r3
 80185bc:	b25a      	sxtb	r2, r3
 80185be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80185c4:	2301      	movs	r3, #1
 80185c6:	637b      	str	r3, [r7, #52]	; 0x34
 80185c8:	e001      	b.n	80185ce <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80185ca:	2300      	movs	r3, #0
 80185cc:	637b      	str	r3, [r7, #52]	; 0x34
 80185ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80185d2:	68fb      	ldr	r3, [r7, #12]
 80185d4:	f383 8811 	msr	BASEPRI, r3
}
 80185d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80185da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80185dc:	4618      	mov	r0, r3
 80185de:	3738      	adds	r7, #56	; 0x38
 80185e0:	46bd      	mov	sp, r7
 80185e2:	bd80      	pop	{r7, pc}

080185e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80185e4:	b580      	push	{r7, lr}
 80185e6:	b08c      	sub	sp, #48	; 0x30
 80185e8:	af00      	add	r7, sp, #0
 80185ea:	60f8      	str	r0, [r7, #12]
 80185ec:	60b9      	str	r1, [r7, #8]
 80185ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80185f0:	2300      	movs	r3, #0
 80185f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80185f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d10a      	bne.n	8018614 <xQueueReceive+0x30>
	__asm volatile
 80185fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018602:	f383 8811 	msr	BASEPRI, r3
 8018606:	f3bf 8f6f 	isb	sy
 801860a:	f3bf 8f4f 	dsb	sy
 801860e:	623b      	str	r3, [r7, #32]
}
 8018610:	bf00      	nop
 8018612:	e7fe      	b.n	8018612 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018614:	68bb      	ldr	r3, [r7, #8]
 8018616:	2b00      	cmp	r3, #0
 8018618:	d103      	bne.n	8018622 <xQueueReceive+0x3e>
 801861a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801861c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801861e:	2b00      	cmp	r3, #0
 8018620:	d101      	bne.n	8018626 <xQueueReceive+0x42>
 8018622:	2301      	movs	r3, #1
 8018624:	e000      	b.n	8018628 <xQueueReceive+0x44>
 8018626:	2300      	movs	r3, #0
 8018628:	2b00      	cmp	r3, #0
 801862a:	d10a      	bne.n	8018642 <xQueueReceive+0x5e>
	__asm volatile
 801862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018630:	f383 8811 	msr	BASEPRI, r3
 8018634:	f3bf 8f6f 	isb	sy
 8018638:	f3bf 8f4f 	dsb	sy
 801863c:	61fb      	str	r3, [r7, #28]
}
 801863e:	bf00      	nop
 8018640:	e7fe      	b.n	8018640 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018642:	f001 fa2f 	bl	8019aa4 <xTaskGetSchedulerState>
 8018646:	4603      	mov	r3, r0
 8018648:	2b00      	cmp	r3, #0
 801864a:	d102      	bne.n	8018652 <xQueueReceive+0x6e>
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	2b00      	cmp	r3, #0
 8018650:	d101      	bne.n	8018656 <xQueueReceive+0x72>
 8018652:	2301      	movs	r3, #1
 8018654:	e000      	b.n	8018658 <xQueueReceive+0x74>
 8018656:	2300      	movs	r3, #0
 8018658:	2b00      	cmp	r3, #0
 801865a:	d10a      	bne.n	8018672 <xQueueReceive+0x8e>
	__asm volatile
 801865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018660:	f383 8811 	msr	BASEPRI, r3
 8018664:	f3bf 8f6f 	isb	sy
 8018668:	f3bf 8f4f 	dsb	sy
 801866c:	61bb      	str	r3, [r7, #24]
}
 801866e:	bf00      	nop
 8018670:	e7fe      	b.n	8018670 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018672:	f002 f86f 	bl	801a754 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801867a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801867e:	2b00      	cmp	r3, #0
 8018680:	d01f      	beq.n	80186c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018682:	68b9      	ldr	r1, [r7, #8]
 8018684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018686:	f000 fabe 	bl	8018c06 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801868c:	1e5a      	subs	r2, r3, #1
 801868e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018690:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018694:	691b      	ldr	r3, [r3, #16]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d00f      	beq.n	80186ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801869a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801869c:	3310      	adds	r3, #16
 801869e:	4618      	mov	r0, r3
 80186a0:	f001 f842 	bl	8019728 <xTaskRemoveFromEventList>
 80186a4:	4603      	mov	r3, r0
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d007      	beq.n	80186ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80186aa:	4b3d      	ldr	r3, [pc, #244]	; (80187a0 <xQueueReceive+0x1bc>)
 80186ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80186b0:	601a      	str	r2, [r3, #0]
 80186b2:	f3bf 8f4f 	dsb	sy
 80186b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80186ba:	f002 f87b 	bl	801a7b4 <vPortExitCritical>
				return pdPASS;
 80186be:	2301      	movs	r3, #1
 80186c0:	e069      	b.n	8018796 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d103      	bne.n	80186d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80186c8:	f002 f874 	bl	801a7b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80186cc:	2300      	movs	r3, #0
 80186ce:	e062      	b.n	8018796 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80186d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d106      	bne.n	80186e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80186d6:	f107 0310 	add.w	r3, r7, #16
 80186da:	4618      	mov	r0, r3
 80186dc:	f001 f888 	bl	80197f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80186e0:	2301      	movs	r3, #1
 80186e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80186e4:	f002 f866 	bl	801a7b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80186e8:	f000 fdc4 	bl	8019274 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80186ec:	f002 f832 	bl	801a754 <vPortEnterCritical>
 80186f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80186f6:	b25b      	sxtb	r3, r3
 80186f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80186fc:	d103      	bne.n	8018706 <xQueueReceive+0x122>
 80186fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018700:	2200      	movs	r2, #0
 8018702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801870c:	b25b      	sxtb	r3, r3
 801870e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018712:	d103      	bne.n	801871c <xQueueReceive+0x138>
 8018714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018716:	2200      	movs	r2, #0
 8018718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801871c:	f002 f84a 	bl	801a7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018720:	1d3a      	adds	r2, r7, #4
 8018722:	f107 0310 	add.w	r3, r7, #16
 8018726:	4611      	mov	r1, r2
 8018728:	4618      	mov	r0, r3
 801872a:	f001 f877 	bl	801981c <xTaskCheckForTimeOut>
 801872e:	4603      	mov	r3, r0
 8018730:	2b00      	cmp	r3, #0
 8018732:	d123      	bne.n	801877c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018736:	f000 fade 	bl	8018cf6 <prvIsQueueEmpty>
 801873a:	4603      	mov	r3, r0
 801873c:	2b00      	cmp	r3, #0
 801873e:	d017      	beq.n	8018770 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018742:	3324      	adds	r3, #36	; 0x24
 8018744:	687a      	ldr	r2, [r7, #4]
 8018746:	4611      	mov	r1, r2
 8018748:	4618      	mov	r0, r3
 801874a:	f000 ff9d 	bl	8019688 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801874e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018750:	f000 fa7f 	bl	8018c52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018754:	f000 fd9c 	bl	8019290 <xTaskResumeAll>
 8018758:	4603      	mov	r3, r0
 801875a:	2b00      	cmp	r3, #0
 801875c:	d189      	bne.n	8018672 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801875e:	4b10      	ldr	r3, [pc, #64]	; (80187a0 <xQueueReceive+0x1bc>)
 8018760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018764:	601a      	str	r2, [r3, #0]
 8018766:	f3bf 8f4f 	dsb	sy
 801876a:	f3bf 8f6f 	isb	sy
 801876e:	e780      	b.n	8018672 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018772:	f000 fa6e 	bl	8018c52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018776:	f000 fd8b 	bl	8019290 <xTaskResumeAll>
 801877a:	e77a      	b.n	8018672 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801877c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801877e:	f000 fa68 	bl	8018c52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018782:	f000 fd85 	bl	8019290 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018788:	f000 fab5 	bl	8018cf6 <prvIsQueueEmpty>
 801878c:	4603      	mov	r3, r0
 801878e:	2b00      	cmp	r3, #0
 8018790:	f43f af6f 	beq.w	8018672 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018794:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018796:	4618      	mov	r0, r3
 8018798:	3730      	adds	r7, #48	; 0x30
 801879a:	46bd      	mov	sp, r7
 801879c:	bd80      	pop	{r7, pc}
 801879e:	bf00      	nop
 80187a0:	e000ed04 	.word	0xe000ed04

080187a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80187a4:	b580      	push	{r7, lr}
 80187a6:	b08e      	sub	sp, #56	; 0x38
 80187a8:	af00      	add	r7, sp, #0
 80187aa:	6078      	str	r0, [r7, #4]
 80187ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80187ae:	2300      	movs	r3, #0
 80187b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80187b6:	2300      	movs	r3, #0
 80187b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80187ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d10a      	bne.n	80187d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80187c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187c4:	f383 8811 	msr	BASEPRI, r3
 80187c8:	f3bf 8f6f 	isb	sy
 80187cc:	f3bf 8f4f 	dsb	sy
 80187d0:	623b      	str	r3, [r7, #32]
}
 80187d2:	bf00      	nop
 80187d4:	e7fe      	b.n	80187d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80187d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d00a      	beq.n	80187f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80187de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187e2:	f383 8811 	msr	BASEPRI, r3
 80187e6:	f3bf 8f6f 	isb	sy
 80187ea:	f3bf 8f4f 	dsb	sy
 80187ee:	61fb      	str	r3, [r7, #28]
}
 80187f0:	bf00      	nop
 80187f2:	e7fe      	b.n	80187f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80187f4:	f001 f956 	bl	8019aa4 <xTaskGetSchedulerState>
 80187f8:	4603      	mov	r3, r0
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d102      	bne.n	8018804 <xQueueSemaphoreTake+0x60>
 80187fe:	683b      	ldr	r3, [r7, #0]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d101      	bne.n	8018808 <xQueueSemaphoreTake+0x64>
 8018804:	2301      	movs	r3, #1
 8018806:	e000      	b.n	801880a <xQueueSemaphoreTake+0x66>
 8018808:	2300      	movs	r3, #0
 801880a:	2b00      	cmp	r3, #0
 801880c:	d10a      	bne.n	8018824 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018812:	f383 8811 	msr	BASEPRI, r3
 8018816:	f3bf 8f6f 	isb	sy
 801881a:	f3bf 8f4f 	dsb	sy
 801881e:	61bb      	str	r3, [r7, #24]
}
 8018820:	bf00      	nop
 8018822:	e7fe      	b.n	8018822 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018824:	f001 ff96 	bl	801a754 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8018828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801882a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801882c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801882e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018830:	2b00      	cmp	r3, #0
 8018832:	d024      	beq.n	801887e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8018834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018836:	1e5a      	subs	r2, r3, #1
 8018838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801883a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801883c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d104      	bne.n	801884e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8018844:	f001 faa4 	bl	8019d90 <pvTaskIncrementMutexHeldCount>
 8018848:	4602      	mov	r2, r0
 801884a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801884c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018850:	691b      	ldr	r3, [r3, #16]
 8018852:	2b00      	cmp	r3, #0
 8018854:	d00f      	beq.n	8018876 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018858:	3310      	adds	r3, #16
 801885a:	4618      	mov	r0, r3
 801885c:	f000 ff64 	bl	8019728 <xTaskRemoveFromEventList>
 8018860:	4603      	mov	r3, r0
 8018862:	2b00      	cmp	r3, #0
 8018864:	d007      	beq.n	8018876 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018866:	4b54      	ldr	r3, [pc, #336]	; (80189b8 <xQueueSemaphoreTake+0x214>)
 8018868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801886c:	601a      	str	r2, [r3, #0]
 801886e:	f3bf 8f4f 	dsb	sy
 8018872:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018876:	f001 ff9d 	bl	801a7b4 <vPortExitCritical>
				return pdPASS;
 801887a:	2301      	movs	r3, #1
 801887c:	e097      	b.n	80189ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801887e:	683b      	ldr	r3, [r7, #0]
 8018880:	2b00      	cmp	r3, #0
 8018882:	d111      	bne.n	80188a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8018884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018886:	2b00      	cmp	r3, #0
 8018888:	d00a      	beq.n	80188a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801888e:	f383 8811 	msr	BASEPRI, r3
 8018892:	f3bf 8f6f 	isb	sy
 8018896:	f3bf 8f4f 	dsb	sy
 801889a:	617b      	str	r3, [r7, #20]
}
 801889c:	bf00      	nop
 801889e:	e7fe      	b.n	801889e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80188a0:	f001 ff88 	bl	801a7b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80188a4:	2300      	movs	r3, #0
 80188a6:	e082      	b.n	80189ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80188a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d106      	bne.n	80188bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80188ae:	f107 030c 	add.w	r3, r7, #12
 80188b2:	4618      	mov	r0, r3
 80188b4:	f000 ff9c 	bl	80197f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80188b8:	2301      	movs	r3, #1
 80188ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80188bc:	f001 ff7a 	bl	801a7b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80188c0:	f000 fcd8 	bl	8019274 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80188c4:	f001 ff46 	bl	801a754 <vPortEnterCritical>
 80188c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80188ce:	b25b      	sxtb	r3, r3
 80188d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80188d4:	d103      	bne.n	80188de <xQueueSemaphoreTake+0x13a>
 80188d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188d8:	2200      	movs	r2, #0
 80188da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80188de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80188e4:	b25b      	sxtb	r3, r3
 80188e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80188ea:	d103      	bne.n	80188f4 <xQueueSemaphoreTake+0x150>
 80188ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188ee:	2200      	movs	r2, #0
 80188f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80188f4:	f001 ff5e 	bl	801a7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80188f8:	463a      	mov	r2, r7
 80188fa:	f107 030c 	add.w	r3, r7, #12
 80188fe:	4611      	mov	r1, r2
 8018900:	4618      	mov	r0, r3
 8018902:	f000 ff8b 	bl	801981c <xTaskCheckForTimeOut>
 8018906:	4603      	mov	r3, r0
 8018908:	2b00      	cmp	r3, #0
 801890a:	d132      	bne.n	8018972 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801890c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801890e:	f000 f9f2 	bl	8018cf6 <prvIsQueueEmpty>
 8018912:	4603      	mov	r3, r0
 8018914:	2b00      	cmp	r3, #0
 8018916:	d026      	beq.n	8018966 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d109      	bne.n	8018934 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8018920:	f001 ff18 	bl	801a754 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018926:	689b      	ldr	r3, [r3, #8]
 8018928:	4618      	mov	r0, r3
 801892a:	f001 f8d9 	bl	8019ae0 <xTaskPriorityInherit>
 801892e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8018930:	f001 ff40 	bl	801a7b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018936:	3324      	adds	r3, #36	; 0x24
 8018938:	683a      	ldr	r2, [r7, #0]
 801893a:	4611      	mov	r1, r2
 801893c:	4618      	mov	r0, r3
 801893e:	f000 fea3 	bl	8019688 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018942:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018944:	f000 f985 	bl	8018c52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018948:	f000 fca2 	bl	8019290 <xTaskResumeAll>
 801894c:	4603      	mov	r3, r0
 801894e:	2b00      	cmp	r3, #0
 8018950:	f47f af68 	bne.w	8018824 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8018954:	4b18      	ldr	r3, [pc, #96]	; (80189b8 <xQueueSemaphoreTake+0x214>)
 8018956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801895a:	601a      	str	r2, [r3, #0]
 801895c:	f3bf 8f4f 	dsb	sy
 8018960:	f3bf 8f6f 	isb	sy
 8018964:	e75e      	b.n	8018824 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8018966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018968:	f000 f973 	bl	8018c52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801896c:	f000 fc90 	bl	8019290 <xTaskResumeAll>
 8018970:	e758      	b.n	8018824 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8018972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018974:	f000 f96d 	bl	8018c52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018978:	f000 fc8a 	bl	8019290 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801897c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801897e:	f000 f9ba 	bl	8018cf6 <prvIsQueueEmpty>
 8018982:	4603      	mov	r3, r0
 8018984:	2b00      	cmp	r3, #0
 8018986:	f43f af4d 	beq.w	8018824 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801898a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801898c:	2b00      	cmp	r3, #0
 801898e:	d00d      	beq.n	80189ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8018990:	f001 fee0 	bl	801a754 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8018994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018996:	f000 f8b4 	bl	8018b02 <prvGetDisinheritPriorityAfterTimeout>
 801899a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801899c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801899e:	689b      	ldr	r3, [r3, #8]
 80189a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80189a2:	4618      	mov	r0, r3
 80189a4:	f001 f972 	bl	8019c8c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80189a8:	f001 ff04 	bl	801a7b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80189ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80189ae:	4618      	mov	r0, r3
 80189b0:	3738      	adds	r7, #56	; 0x38
 80189b2:	46bd      	mov	sp, r7
 80189b4:	bd80      	pop	{r7, pc}
 80189b6:	bf00      	nop
 80189b8:	e000ed04 	.word	0xe000ed04

080189bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b08e      	sub	sp, #56	; 0x38
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	60f8      	str	r0, [r7, #12]
 80189c4:	60b9      	str	r1, [r7, #8]
 80189c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80189cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d10a      	bne.n	80189e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80189d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189d6:	f383 8811 	msr	BASEPRI, r3
 80189da:	f3bf 8f6f 	isb	sy
 80189de:	f3bf 8f4f 	dsb	sy
 80189e2:	623b      	str	r3, [r7, #32]
}
 80189e4:	bf00      	nop
 80189e6:	e7fe      	b.n	80189e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80189e8:	68bb      	ldr	r3, [r7, #8]
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d103      	bne.n	80189f6 <xQueueReceiveFromISR+0x3a>
 80189ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d101      	bne.n	80189fa <xQueueReceiveFromISR+0x3e>
 80189f6:	2301      	movs	r3, #1
 80189f8:	e000      	b.n	80189fc <xQueueReceiveFromISR+0x40>
 80189fa:	2300      	movs	r3, #0
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d10a      	bne.n	8018a16 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8018a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a04:	f383 8811 	msr	BASEPRI, r3
 8018a08:	f3bf 8f6f 	isb	sy
 8018a0c:	f3bf 8f4f 	dsb	sy
 8018a10:	61fb      	str	r3, [r7, #28]
}
 8018a12:	bf00      	nop
 8018a14:	e7fe      	b.n	8018a14 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018a16:	f001 ff7f 	bl	801a918 <vPortValidateInterruptPriority>
	__asm volatile
 8018a1a:	f3ef 8211 	mrs	r2, BASEPRI
 8018a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a22:	f383 8811 	msr	BASEPRI, r3
 8018a26:	f3bf 8f6f 	isb	sy
 8018a2a:	f3bf 8f4f 	dsb	sy
 8018a2e:	61ba      	str	r2, [r7, #24]
 8018a30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8018a32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018a34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d02f      	beq.n	8018aa2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8018a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018a4c:	68b9      	ldr	r1, [r7, #8]
 8018a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018a50:	f000 f8d9 	bl	8018c06 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a56:	1e5a      	subs	r2, r3, #1
 8018a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8018a5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018a64:	d112      	bne.n	8018a8c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a68:	691b      	ldr	r3, [r3, #16]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d016      	beq.n	8018a9c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a70:	3310      	adds	r3, #16
 8018a72:	4618      	mov	r0, r3
 8018a74:	f000 fe58 	bl	8019728 <xTaskRemoveFromEventList>
 8018a78:	4603      	mov	r3, r0
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d00e      	beq.n	8018a9c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d00b      	beq.n	8018a9c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	2201      	movs	r2, #1
 8018a88:	601a      	str	r2, [r3, #0]
 8018a8a:	e007      	b.n	8018a9c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8018a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a90:	3301      	adds	r3, #1
 8018a92:	b2db      	uxtb	r3, r3
 8018a94:	b25a      	sxtb	r2, r3
 8018a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8018a9c:	2301      	movs	r3, #1
 8018a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8018aa0:	e001      	b.n	8018aa6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8018aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aa8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8018aaa:	693b      	ldr	r3, [r7, #16]
 8018aac:	f383 8811 	msr	BASEPRI, r3
}
 8018ab0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	3738      	adds	r7, #56	; 0x38
 8018ab8:	46bd      	mov	sp, r7
 8018aba:	bd80      	pop	{r7, pc}

08018abc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b084      	sub	sp, #16
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d10a      	bne.n	8018ae4 <vQueueDelete+0x28>
	__asm volatile
 8018ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ad2:	f383 8811 	msr	BASEPRI, r3
 8018ad6:	f3bf 8f6f 	isb	sy
 8018ada:	f3bf 8f4f 	dsb	sy
 8018ade:	60bb      	str	r3, [r7, #8]
}
 8018ae0:	bf00      	nop
 8018ae2:	e7fe      	b.n	8018ae2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8018ae4:	68f8      	ldr	r0, [r7, #12]
 8018ae6:	f000 f95f 	bl	8018da8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8018aea:	68fb      	ldr	r3, [r7, #12]
 8018aec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d102      	bne.n	8018afa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8018af4:	68f8      	ldr	r0, [r7, #12]
 8018af6:	f002 f81b 	bl	801ab30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8018afa:	bf00      	nop
 8018afc:	3710      	adds	r7, #16
 8018afe:	46bd      	mov	sp, r7
 8018b00:	bd80      	pop	{r7, pc}

08018b02 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8018b02:	b480      	push	{r7}
 8018b04:	b085      	sub	sp, #20
 8018b06:	af00      	add	r7, sp, #0
 8018b08:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d006      	beq.n	8018b20 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8018b1c:	60fb      	str	r3, [r7, #12]
 8018b1e:	e001      	b.n	8018b24 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8018b20:	2300      	movs	r3, #0
 8018b22:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8018b24:	68fb      	ldr	r3, [r7, #12]
	}
 8018b26:	4618      	mov	r0, r3
 8018b28:	3714      	adds	r7, #20
 8018b2a:	46bd      	mov	sp, r7
 8018b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b30:	4770      	bx	lr

08018b32 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018b32:	b580      	push	{r7, lr}
 8018b34:	b086      	sub	sp, #24
 8018b36:	af00      	add	r7, sp, #0
 8018b38:	60f8      	str	r0, [r7, #12]
 8018b3a:	60b9      	str	r1, [r7, #8]
 8018b3c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018b3e:	2300      	movs	r3, #0
 8018b40:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b46:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d10d      	bne.n	8018b6c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d14d      	bne.n	8018bf4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	689b      	ldr	r3, [r3, #8]
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	f001 f827 	bl	8019bb0 <xTaskPriorityDisinherit>
 8018b62:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	2200      	movs	r2, #0
 8018b68:	609a      	str	r2, [r3, #8]
 8018b6a:	e043      	b.n	8018bf4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d119      	bne.n	8018ba6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	6858      	ldr	r0, [r3, #4]
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b7a:	461a      	mov	r2, r3
 8018b7c:	68b9      	ldr	r1, [r7, #8]
 8018b7e:	f006 f83b 	bl	801ebf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	685a      	ldr	r2, [r3, #4]
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b8a:	441a      	add	r2, r3
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018b90:	68fb      	ldr	r3, [r7, #12]
 8018b92:	685a      	ldr	r2, [r3, #4]
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	689b      	ldr	r3, [r3, #8]
 8018b98:	429a      	cmp	r2, r3
 8018b9a:	d32b      	bcc.n	8018bf4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	681a      	ldr	r2, [r3, #0]
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	605a      	str	r2, [r3, #4]
 8018ba4:	e026      	b.n	8018bf4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	68d8      	ldr	r0, [r3, #12]
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bae:	461a      	mov	r2, r3
 8018bb0:	68b9      	ldr	r1, [r7, #8]
 8018bb2:	f006 f821 	bl	801ebf8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	68da      	ldr	r2, [r3, #12]
 8018bba:	68fb      	ldr	r3, [r7, #12]
 8018bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bbe:	425b      	negs	r3, r3
 8018bc0:	441a      	add	r2, r3
 8018bc2:	68fb      	ldr	r3, [r7, #12]
 8018bc4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	68da      	ldr	r2, [r3, #12]
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	429a      	cmp	r2, r3
 8018bd0:	d207      	bcs.n	8018be2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	689a      	ldr	r2, [r3, #8]
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bda:	425b      	negs	r3, r3
 8018bdc:	441a      	add	r2, r3
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	2b02      	cmp	r3, #2
 8018be6:	d105      	bne.n	8018bf4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018be8:	693b      	ldr	r3, [r7, #16]
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d002      	beq.n	8018bf4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018bee:	693b      	ldr	r3, [r7, #16]
 8018bf0:	3b01      	subs	r3, #1
 8018bf2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018bf4:	693b      	ldr	r3, [r7, #16]
 8018bf6:	1c5a      	adds	r2, r3, #1
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8018bfc:	697b      	ldr	r3, [r7, #20]
}
 8018bfe:	4618      	mov	r0, r3
 8018c00:	3718      	adds	r7, #24
 8018c02:	46bd      	mov	sp, r7
 8018c04:	bd80      	pop	{r7, pc}

08018c06 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8018c06:	b580      	push	{r7, lr}
 8018c08:	b082      	sub	sp, #8
 8018c0a:	af00      	add	r7, sp, #0
 8018c0c:	6078      	str	r0, [r7, #4]
 8018c0e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d018      	beq.n	8018c4a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	68da      	ldr	r2, [r3, #12]
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c20:	441a      	add	r2, r3
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	68da      	ldr	r2, [r3, #12]
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	689b      	ldr	r3, [r3, #8]
 8018c2e:	429a      	cmp	r2, r3
 8018c30:	d303      	bcc.n	8018c3a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	681a      	ldr	r2, [r3, #0]
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	68d9      	ldr	r1, [r3, #12]
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c42:	461a      	mov	r2, r3
 8018c44:	6838      	ldr	r0, [r7, #0]
 8018c46:	f005 ffd7 	bl	801ebf8 <memcpy>
	}
}
 8018c4a:	bf00      	nop
 8018c4c:	3708      	adds	r7, #8
 8018c4e:	46bd      	mov	sp, r7
 8018c50:	bd80      	pop	{r7, pc}

08018c52 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018c52:	b580      	push	{r7, lr}
 8018c54:	b084      	sub	sp, #16
 8018c56:	af00      	add	r7, sp, #0
 8018c58:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018c5a:	f001 fd7b 	bl	801a754 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018c64:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018c66:	e011      	b.n	8018c8c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d012      	beq.n	8018c96 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	3324      	adds	r3, #36	; 0x24
 8018c74:	4618      	mov	r0, r3
 8018c76:	f000 fd57 	bl	8019728 <xTaskRemoveFromEventList>
 8018c7a:	4603      	mov	r3, r0
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d001      	beq.n	8018c84 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8018c80:	f000 fe2e 	bl	80198e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8018c84:	7bfb      	ldrb	r3, [r7, #15]
 8018c86:	3b01      	subs	r3, #1
 8018c88:	b2db      	uxtb	r3, r3
 8018c8a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	dce9      	bgt.n	8018c68 <prvUnlockQueue+0x16>
 8018c94:	e000      	b.n	8018c98 <prvUnlockQueue+0x46>
					break;
 8018c96:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	22ff      	movs	r2, #255	; 0xff
 8018c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8018ca0:	f001 fd88 	bl	801a7b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8018ca4:	f001 fd56 	bl	801a754 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018cae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018cb0:	e011      	b.n	8018cd6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	691b      	ldr	r3, [r3, #16]
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d012      	beq.n	8018ce0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	3310      	adds	r3, #16
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	f000 fd32 	bl	8019728 <xTaskRemoveFromEventList>
 8018cc4:	4603      	mov	r3, r0
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d001      	beq.n	8018cce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8018cca:	f000 fe09 	bl	80198e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8018cce:	7bbb      	ldrb	r3, [r7, #14]
 8018cd0:	3b01      	subs	r3, #1
 8018cd2:	b2db      	uxtb	r3, r3
 8018cd4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018cd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	dce9      	bgt.n	8018cb2 <prvUnlockQueue+0x60>
 8018cde:	e000      	b.n	8018ce2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8018ce0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	22ff      	movs	r2, #255	; 0xff
 8018ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8018cea:	f001 fd63 	bl	801a7b4 <vPortExitCritical>
}
 8018cee:	bf00      	nop
 8018cf0:	3710      	adds	r7, #16
 8018cf2:	46bd      	mov	sp, r7
 8018cf4:	bd80      	pop	{r7, pc}

08018cf6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8018cf6:	b580      	push	{r7, lr}
 8018cf8:	b084      	sub	sp, #16
 8018cfa:	af00      	add	r7, sp, #0
 8018cfc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018cfe:	f001 fd29 	bl	801a754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d102      	bne.n	8018d10 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018d0a:	2301      	movs	r3, #1
 8018d0c:	60fb      	str	r3, [r7, #12]
 8018d0e:	e001      	b.n	8018d14 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8018d10:	2300      	movs	r3, #0
 8018d12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018d14:	f001 fd4e 	bl	801a7b4 <vPortExitCritical>

	return xReturn;
 8018d18:	68fb      	ldr	r3, [r7, #12]
}
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	3710      	adds	r7, #16
 8018d1e:	46bd      	mov	sp, r7
 8018d20:	bd80      	pop	{r7, pc}

08018d22 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018d22:	b580      	push	{r7, lr}
 8018d24:	b084      	sub	sp, #16
 8018d26:	af00      	add	r7, sp, #0
 8018d28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018d2a:	f001 fd13 	bl	801a754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d36:	429a      	cmp	r2, r3
 8018d38:	d102      	bne.n	8018d40 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018d3a:	2301      	movs	r3, #1
 8018d3c:	60fb      	str	r3, [r7, #12]
 8018d3e:	e001      	b.n	8018d44 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8018d40:	2300      	movs	r3, #0
 8018d42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018d44:	f001 fd36 	bl	801a7b4 <vPortExitCritical>

	return xReturn;
 8018d48:	68fb      	ldr	r3, [r7, #12]
}
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	3710      	adds	r7, #16
 8018d4e:	46bd      	mov	sp, r7
 8018d50:	bd80      	pop	{r7, pc}
	...

08018d54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018d54:	b480      	push	{r7}
 8018d56:	b085      	sub	sp, #20
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	6078      	str	r0, [r7, #4]
 8018d5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018d5e:	2300      	movs	r3, #0
 8018d60:	60fb      	str	r3, [r7, #12]
 8018d62:	e014      	b.n	8018d8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018d64:	4a0f      	ldr	r2, [pc, #60]	; (8018da4 <vQueueAddToRegistry+0x50>)
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d10b      	bne.n	8018d88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018d70:	490c      	ldr	r1, [pc, #48]	; (8018da4 <vQueueAddToRegistry+0x50>)
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	683a      	ldr	r2, [r7, #0]
 8018d76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8018d7a:	4a0a      	ldr	r2, [pc, #40]	; (8018da4 <vQueueAddToRegistry+0x50>)
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	00db      	lsls	r3, r3, #3
 8018d80:	4413      	add	r3, r2
 8018d82:	687a      	ldr	r2, [r7, #4]
 8018d84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8018d86:	e006      	b.n	8018d96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	3301      	adds	r3, #1
 8018d8c:	60fb      	str	r3, [r7, #12]
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	2b07      	cmp	r3, #7
 8018d92:	d9e7      	bls.n	8018d64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018d94:	bf00      	nop
 8018d96:	bf00      	nop
 8018d98:	3714      	adds	r7, #20
 8018d9a:	46bd      	mov	sp, r7
 8018d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da0:	4770      	bx	lr
 8018da2:	bf00      	nop
 8018da4:	200016ac 	.word	0x200016ac

08018da8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8018da8:	b480      	push	{r7}
 8018daa:	b085      	sub	sp, #20
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018db0:	2300      	movs	r3, #0
 8018db2:	60fb      	str	r3, [r7, #12]
 8018db4:	e016      	b.n	8018de4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8018db6:	4a10      	ldr	r2, [pc, #64]	; (8018df8 <vQueueUnregisterQueue+0x50>)
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	00db      	lsls	r3, r3, #3
 8018dbc:	4413      	add	r3, r2
 8018dbe:	685b      	ldr	r3, [r3, #4]
 8018dc0:	687a      	ldr	r2, [r7, #4]
 8018dc2:	429a      	cmp	r2, r3
 8018dc4:	d10b      	bne.n	8018dde <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8018dc6:	4a0c      	ldr	r2, [pc, #48]	; (8018df8 <vQueueUnregisterQueue+0x50>)
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	2100      	movs	r1, #0
 8018dcc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8018dd0:	4a09      	ldr	r2, [pc, #36]	; (8018df8 <vQueueUnregisterQueue+0x50>)
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	00db      	lsls	r3, r3, #3
 8018dd6:	4413      	add	r3, r2
 8018dd8:	2200      	movs	r2, #0
 8018dda:	605a      	str	r2, [r3, #4]
				break;
 8018ddc:	e006      	b.n	8018dec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018dde:	68fb      	ldr	r3, [r7, #12]
 8018de0:	3301      	adds	r3, #1
 8018de2:	60fb      	str	r3, [r7, #12]
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	2b07      	cmp	r3, #7
 8018de8:	d9e5      	bls.n	8018db6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8018dea:	bf00      	nop
 8018dec:	bf00      	nop
 8018dee:	3714      	adds	r7, #20
 8018df0:	46bd      	mov	sp, r7
 8018df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df6:	4770      	bx	lr
 8018df8:	200016ac 	.word	0x200016ac

08018dfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b086      	sub	sp, #24
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	60f8      	str	r0, [r7, #12]
 8018e04:	60b9      	str	r1, [r7, #8]
 8018e06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018e08:	68fb      	ldr	r3, [r7, #12]
 8018e0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018e0c:	f001 fca2 	bl	801a754 <vPortEnterCritical>
 8018e10:	697b      	ldr	r3, [r7, #20]
 8018e12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018e16:	b25b      	sxtb	r3, r3
 8018e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018e1c:	d103      	bne.n	8018e26 <vQueueWaitForMessageRestricted+0x2a>
 8018e1e:	697b      	ldr	r3, [r7, #20]
 8018e20:	2200      	movs	r2, #0
 8018e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018e26:	697b      	ldr	r3, [r7, #20]
 8018e28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018e2c:	b25b      	sxtb	r3, r3
 8018e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018e32:	d103      	bne.n	8018e3c <vQueueWaitForMessageRestricted+0x40>
 8018e34:	697b      	ldr	r3, [r7, #20]
 8018e36:	2200      	movs	r2, #0
 8018e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018e3c:	f001 fcba 	bl	801a7b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018e40:	697b      	ldr	r3, [r7, #20]
 8018e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d106      	bne.n	8018e56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018e48:	697b      	ldr	r3, [r7, #20]
 8018e4a:	3324      	adds	r3, #36	; 0x24
 8018e4c:	687a      	ldr	r2, [r7, #4]
 8018e4e:	68b9      	ldr	r1, [r7, #8]
 8018e50:	4618      	mov	r0, r3
 8018e52:	f000 fc3d 	bl	80196d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018e56:	6978      	ldr	r0, [r7, #20]
 8018e58:	f7ff fefb 	bl	8018c52 <prvUnlockQueue>
	}
 8018e5c:	bf00      	nop
 8018e5e:	3718      	adds	r7, #24
 8018e60:	46bd      	mov	sp, r7
 8018e62:	bd80      	pop	{r7, pc}

08018e64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8018e64:	b580      	push	{r7, lr}
 8018e66:	b08e      	sub	sp, #56	; 0x38
 8018e68:	af04      	add	r7, sp, #16
 8018e6a:	60f8      	str	r0, [r7, #12]
 8018e6c:	60b9      	str	r1, [r7, #8]
 8018e6e:	607a      	str	r2, [r7, #4]
 8018e70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8018e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d10a      	bne.n	8018e8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8018e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e7c:	f383 8811 	msr	BASEPRI, r3
 8018e80:	f3bf 8f6f 	isb	sy
 8018e84:	f3bf 8f4f 	dsb	sy
 8018e88:	623b      	str	r3, [r7, #32]
}
 8018e8a:	bf00      	nop
 8018e8c:	e7fe      	b.n	8018e8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8018e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d10a      	bne.n	8018eaa <xTaskCreateStatic+0x46>
	__asm volatile
 8018e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e98:	f383 8811 	msr	BASEPRI, r3
 8018e9c:	f3bf 8f6f 	isb	sy
 8018ea0:	f3bf 8f4f 	dsb	sy
 8018ea4:	61fb      	str	r3, [r7, #28]
}
 8018ea6:	bf00      	nop
 8018ea8:	e7fe      	b.n	8018ea8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8018eaa:	235c      	movs	r3, #92	; 0x5c
 8018eac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8018eae:	693b      	ldr	r3, [r7, #16]
 8018eb0:	2b5c      	cmp	r3, #92	; 0x5c
 8018eb2:	d00a      	beq.n	8018eca <xTaskCreateStatic+0x66>
	__asm volatile
 8018eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018eb8:	f383 8811 	msr	BASEPRI, r3
 8018ebc:	f3bf 8f6f 	isb	sy
 8018ec0:	f3bf 8f4f 	dsb	sy
 8018ec4:	61bb      	str	r3, [r7, #24]
}
 8018ec6:	bf00      	nop
 8018ec8:	e7fe      	b.n	8018ec8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8018eca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d01e      	beq.n	8018f10 <xTaskCreateStatic+0xac>
 8018ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d01b      	beq.n	8018f10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018eda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018ee0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ee4:	2202      	movs	r2, #2
 8018ee6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018eea:	2300      	movs	r3, #0
 8018eec:	9303      	str	r3, [sp, #12]
 8018eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ef0:	9302      	str	r3, [sp, #8]
 8018ef2:	f107 0314 	add.w	r3, r7, #20
 8018ef6:	9301      	str	r3, [sp, #4]
 8018ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018efa:	9300      	str	r3, [sp, #0]
 8018efc:	683b      	ldr	r3, [r7, #0]
 8018efe:	687a      	ldr	r2, [r7, #4]
 8018f00:	68b9      	ldr	r1, [r7, #8]
 8018f02:	68f8      	ldr	r0, [r7, #12]
 8018f04:	f000 f850 	bl	8018fa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018f0a:	f000 f8dd 	bl	80190c8 <prvAddNewTaskToReadyList>
 8018f0e:	e001      	b.n	8018f14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8018f10:	2300      	movs	r3, #0
 8018f12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8018f14:	697b      	ldr	r3, [r7, #20]
	}
 8018f16:	4618      	mov	r0, r3
 8018f18:	3728      	adds	r7, #40	; 0x28
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	bd80      	pop	{r7, pc}

08018f1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018f1e:	b580      	push	{r7, lr}
 8018f20:	b08c      	sub	sp, #48	; 0x30
 8018f22:	af04      	add	r7, sp, #16
 8018f24:	60f8      	str	r0, [r7, #12]
 8018f26:	60b9      	str	r1, [r7, #8]
 8018f28:	603b      	str	r3, [r7, #0]
 8018f2a:	4613      	mov	r3, r2
 8018f2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018f2e:	88fb      	ldrh	r3, [r7, #6]
 8018f30:	009b      	lsls	r3, r3, #2
 8018f32:	4618      	mov	r0, r3
 8018f34:	f001 fd30 	bl	801a998 <pvPortMalloc>
 8018f38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8018f3a:	697b      	ldr	r3, [r7, #20]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d00e      	beq.n	8018f5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018f40:	205c      	movs	r0, #92	; 0x5c
 8018f42:	f001 fd29 	bl	801a998 <pvPortMalloc>
 8018f46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8018f48:	69fb      	ldr	r3, [r7, #28]
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d003      	beq.n	8018f56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8018f4e:	69fb      	ldr	r3, [r7, #28]
 8018f50:	697a      	ldr	r2, [r7, #20]
 8018f52:	631a      	str	r2, [r3, #48]	; 0x30
 8018f54:	e005      	b.n	8018f62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8018f56:	6978      	ldr	r0, [r7, #20]
 8018f58:	f001 fdea 	bl	801ab30 <vPortFree>
 8018f5c:	e001      	b.n	8018f62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8018f5e:	2300      	movs	r3, #0
 8018f60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8018f62:	69fb      	ldr	r3, [r7, #28]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d017      	beq.n	8018f98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8018f68:	69fb      	ldr	r3, [r7, #28]
 8018f6a:	2200      	movs	r2, #0
 8018f6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018f70:	88fa      	ldrh	r2, [r7, #6]
 8018f72:	2300      	movs	r3, #0
 8018f74:	9303      	str	r3, [sp, #12]
 8018f76:	69fb      	ldr	r3, [r7, #28]
 8018f78:	9302      	str	r3, [sp, #8]
 8018f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f7c:	9301      	str	r3, [sp, #4]
 8018f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f80:	9300      	str	r3, [sp, #0]
 8018f82:	683b      	ldr	r3, [r7, #0]
 8018f84:	68b9      	ldr	r1, [r7, #8]
 8018f86:	68f8      	ldr	r0, [r7, #12]
 8018f88:	f000 f80e 	bl	8018fa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018f8c:	69f8      	ldr	r0, [r7, #28]
 8018f8e:	f000 f89b 	bl	80190c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018f92:	2301      	movs	r3, #1
 8018f94:	61bb      	str	r3, [r7, #24]
 8018f96:	e002      	b.n	8018f9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018f9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018f9e:	69bb      	ldr	r3, [r7, #24]
	}
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	3720      	adds	r7, #32
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	bd80      	pop	{r7, pc}

08018fa8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b088      	sub	sp, #32
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	60f8      	str	r0, [r7, #12]
 8018fb0:	60b9      	str	r1, [r7, #8]
 8018fb2:	607a      	str	r2, [r7, #4]
 8018fb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	009b      	lsls	r3, r3, #2
 8018fbe:	461a      	mov	r2, r3
 8018fc0:	21a5      	movs	r1, #165	; 0xa5
 8018fc2:	f005 fd15 	bl	801e9f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018fd0:	3b01      	subs	r3, #1
 8018fd2:	009b      	lsls	r3, r3, #2
 8018fd4:	4413      	add	r3, r2
 8018fd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018fd8:	69bb      	ldr	r3, [r7, #24]
 8018fda:	f023 0307 	bic.w	r3, r3, #7
 8018fde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018fe0:	69bb      	ldr	r3, [r7, #24]
 8018fe2:	f003 0307 	and.w	r3, r3, #7
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d00a      	beq.n	8019000 <prvInitialiseNewTask+0x58>
	__asm volatile
 8018fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fee:	f383 8811 	msr	BASEPRI, r3
 8018ff2:	f3bf 8f6f 	isb	sy
 8018ff6:	f3bf 8f4f 	dsb	sy
 8018ffa:	617b      	str	r3, [r7, #20]
}
 8018ffc:	bf00      	nop
 8018ffe:	e7fe      	b.n	8018ffe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019000:	68bb      	ldr	r3, [r7, #8]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d01f      	beq.n	8019046 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019006:	2300      	movs	r3, #0
 8019008:	61fb      	str	r3, [r7, #28]
 801900a:	e012      	b.n	8019032 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801900c:	68ba      	ldr	r2, [r7, #8]
 801900e:	69fb      	ldr	r3, [r7, #28]
 8019010:	4413      	add	r3, r2
 8019012:	7819      	ldrb	r1, [r3, #0]
 8019014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019016:	69fb      	ldr	r3, [r7, #28]
 8019018:	4413      	add	r3, r2
 801901a:	3334      	adds	r3, #52	; 0x34
 801901c:	460a      	mov	r2, r1
 801901e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019020:	68ba      	ldr	r2, [r7, #8]
 8019022:	69fb      	ldr	r3, [r7, #28]
 8019024:	4413      	add	r3, r2
 8019026:	781b      	ldrb	r3, [r3, #0]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d006      	beq.n	801903a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801902c:	69fb      	ldr	r3, [r7, #28]
 801902e:	3301      	adds	r3, #1
 8019030:	61fb      	str	r3, [r7, #28]
 8019032:	69fb      	ldr	r3, [r7, #28]
 8019034:	2b0f      	cmp	r3, #15
 8019036:	d9e9      	bls.n	801900c <prvInitialiseNewTask+0x64>
 8019038:	e000      	b.n	801903c <prvInitialiseNewTask+0x94>
			{
				break;
 801903a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801903c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801903e:	2200      	movs	r2, #0
 8019040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019044:	e003      	b.n	801904e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019048:	2200      	movs	r2, #0
 801904a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019050:	2b37      	cmp	r3, #55	; 0x37
 8019052:	d901      	bls.n	8019058 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019054:	2337      	movs	r3, #55	; 0x37
 8019056:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8019058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801905a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801905c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019062:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8019064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019066:	2200      	movs	r2, #0
 8019068:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801906c:	3304      	adds	r3, #4
 801906e:	4618      	mov	r0, r3
 8019070:	f7fe fe0a 	bl	8017c88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019076:	3318      	adds	r3, #24
 8019078:	4618      	mov	r0, r3
 801907a:	f7fe fe05 	bl	8017c88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019082:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019086:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801908a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801908c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019092:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8019094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019096:	2200      	movs	r2, #0
 8019098:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801909c:	2200      	movs	r2, #0
 801909e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80190a2:	683a      	ldr	r2, [r7, #0]
 80190a4:	68f9      	ldr	r1, [r7, #12]
 80190a6:	69b8      	ldr	r0, [r7, #24]
 80190a8:	f001 fa28 	bl	801a4fc <pxPortInitialiseStack>
 80190ac:	4602      	mov	r2, r0
 80190ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80190b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d002      	beq.n	80190be <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80190b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80190bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80190be:	bf00      	nop
 80190c0:	3720      	adds	r7, #32
 80190c2:	46bd      	mov	sp, r7
 80190c4:	bd80      	pop	{r7, pc}
	...

080190c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80190c8:	b580      	push	{r7, lr}
 80190ca:	b082      	sub	sp, #8
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80190d0:	f001 fb40 	bl	801a754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80190d4:	4b2d      	ldr	r3, [pc, #180]	; (801918c <prvAddNewTaskToReadyList+0xc4>)
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	3301      	adds	r3, #1
 80190da:	4a2c      	ldr	r2, [pc, #176]	; (801918c <prvAddNewTaskToReadyList+0xc4>)
 80190dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80190de:	4b2c      	ldr	r3, [pc, #176]	; (8019190 <prvAddNewTaskToReadyList+0xc8>)
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d109      	bne.n	80190fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80190e6:	4a2a      	ldr	r2, [pc, #168]	; (8019190 <prvAddNewTaskToReadyList+0xc8>)
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80190ec:	4b27      	ldr	r3, [pc, #156]	; (801918c <prvAddNewTaskToReadyList+0xc4>)
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	2b01      	cmp	r3, #1
 80190f2:	d110      	bne.n	8019116 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80190f4:	f000 fc18 	bl	8019928 <prvInitialiseTaskLists>
 80190f8:	e00d      	b.n	8019116 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80190fa:	4b26      	ldr	r3, [pc, #152]	; (8019194 <prvAddNewTaskToReadyList+0xcc>)
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d109      	bne.n	8019116 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019102:	4b23      	ldr	r3, [pc, #140]	; (8019190 <prvAddNewTaskToReadyList+0xc8>)
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801910c:	429a      	cmp	r2, r3
 801910e:	d802      	bhi.n	8019116 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8019110:	4a1f      	ldr	r2, [pc, #124]	; (8019190 <prvAddNewTaskToReadyList+0xc8>)
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8019116:	4b20      	ldr	r3, [pc, #128]	; (8019198 <prvAddNewTaskToReadyList+0xd0>)
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	3301      	adds	r3, #1
 801911c:	4a1e      	ldr	r2, [pc, #120]	; (8019198 <prvAddNewTaskToReadyList+0xd0>)
 801911e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8019120:	4b1d      	ldr	r3, [pc, #116]	; (8019198 <prvAddNewTaskToReadyList+0xd0>)
 8019122:	681a      	ldr	r2, [r3, #0]
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801912c:	4b1b      	ldr	r3, [pc, #108]	; (801919c <prvAddNewTaskToReadyList+0xd4>)
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	429a      	cmp	r2, r3
 8019132:	d903      	bls.n	801913c <prvAddNewTaskToReadyList+0x74>
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019138:	4a18      	ldr	r2, [pc, #96]	; (801919c <prvAddNewTaskToReadyList+0xd4>)
 801913a:	6013      	str	r3, [r2, #0]
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019140:	4613      	mov	r3, r2
 8019142:	009b      	lsls	r3, r3, #2
 8019144:	4413      	add	r3, r2
 8019146:	009b      	lsls	r3, r3, #2
 8019148:	4a15      	ldr	r2, [pc, #84]	; (80191a0 <prvAddNewTaskToReadyList+0xd8>)
 801914a:	441a      	add	r2, r3
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	3304      	adds	r3, #4
 8019150:	4619      	mov	r1, r3
 8019152:	4610      	mov	r0, r2
 8019154:	f7fe fda5 	bl	8017ca2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8019158:	f001 fb2c 	bl	801a7b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801915c:	4b0d      	ldr	r3, [pc, #52]	; (8019194 <prvAddNewTaskToReadyList+0xcc>)
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	2b00      	cmp	r3, #0
 8019162:	d00e      	beq.n	8019182 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019164:	4b0a      	ldr	r3, [pc, #40]	; (8019190 <prvAddNewTaskToReadyList+0xc8>)
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801916e:	429a      	cmp	r2, r3
 8019170:	d207      	bcs.n	8019182 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019172:	4b0c      	ldr	r3, [pc, #48]	; (80191a4 <prvAddNewTaskToReadyList+0xdc>)
 8019174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019178:	601a      	str	r2, [r3, #0]
 801917a:	f3bf 8f4f 	dsb	sy
 801917e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019182:	bf00      	nop
 8019184:	3708      	adds	r7, #8
 8019186:	46bd      	mov	sp, r7
 8019188:	bd80      	pop	{r7, pc}
 801918a:	bf00      	nop
 801918c:	20001bc0 	.word	0x20001bc0
 8019190:	200016ec 	.word	0x200016ec
 8019194:	20001bcc 	.word	0x20001bcc
 8019198:	20001bdc 	.word	0x20001bdc
 801919c:	20001bc8 	.word	0x20001bc8
 80191a0:	200016f0 	.word	0x200016f0
 80191a4:	e000ed04 	.word	0xe000ed04

080191a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80191a8:	b580      	push	{r7, lr}
 80191aa:	b08a      	sub	sp, #40	; 0x28
 80191ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80191ae:	2300      	movs	r3, #0
 80191b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80191b2:	2300      	movs	r3, #0
 80191b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80191b6:	463a      	mov	r2, r7
 80191b8:	1d39      	adds	r1, r7, #4
 80191ba:	f107 0308 	add.w	r3, r7, #8
 80191be:	4618      	mov	r0, r3
 80191c0:	f7fe fd0e 	bl	8017be0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80191c4:	6839      	ldr	r1, [r7, #0]
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	68ba      	ldr	r2, [r7, #8]
 80191ca:	9202      	str	r2, [sp, #8]
 80191cc:	9301      	str	r3, [sp, #4]
 80191ce:	2300      	movs	r3, #0
 80191d0:	9300      	str	r3, [sp, #0]
 80191d2:	2300      	movs	r3, #0
 80191d4:	460a      	mov	r2, r1
 80191d6:	4921      	ldr	r1, [pc, #132]	; (801925c <vTaskStartScheduler+0xb4>)
 80191d8:	4821      	ldr	r0, [pc, #132]	; (8019260 <vTaskStartScheduler+0xb8>)
 80191da:	f7ff fe43 	bl	8018e64 <xTaskCreateStatic>
 80191de:	4603      	mov	r3, r0
 80191e0:	4a20      	ldr	r2, [pc, #128]	; (8019264 <vTaskStartScheduler+0xbc>)
 80191e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80191e4:	4b1f      	ldr	r3, [pc, #124]	; (8019264 <vTaskStartScheduler+0xbc>)
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d002      	beq.n	80191f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80191ec:	2301      	movs	r3, #1
 80191ee:	617b      	str	r3, [r7, #20]
 80191f0:	e001      	b.n	80191f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80191f2:	2300      	movs	r3, #0
 80191f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80191f6:	697b      	ldr	r3, [r7, #20]
 80191f8:	2b01      	cmp	r3, #1
 80191fa:	d102      	bne.n	8019202 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80191fc:	f000 fe30 	bl	8019e60 <xTimerCreateTimerTask>
 8019200:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8019202:	697b      	ldr	r3, [r7, #20]
 8019204:	2b01      	cmp	r3, #1
 8019206:	d116      	bne.n	8019236 <vTaskStartScheduler+0x8e>
	__asm volatile
 8019208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801920c:	f383 8811 	msr	BASEPRI, r3
 8019210:	f3bf 8f6f 	isb	sy
 8019214:	f3bf 8f4f 	dsb	sy
 8019218:	613b      	str	r3, [r7, #16]
}
 801921a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801921c:	4b12      	ldr	r3, [pc, #72]	; (8019268 <vTaskStartScheduler+0xc0>)
 801921e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019222:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8019224:	4b11      	ldr	r3, [pc, #68]	; (801926c <vTaskStartScheduler+0xc4>)
 8019226:	2201      	movs	r2, #1
 8019228:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801922a:	4b11      	ldr	r3, [pc, #68]	; (8019270 <vTaskStartScheduler+0xc8>)
 801922c:	2200      	movs	r2, #0
 801922e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8019230:	f001 f9ee 	bl	801a610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8019234:	e00e      	b.n	8019254 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8019236:	697b      	ldr	r3, [r7, #20]
 8019238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801923c:	d10a      	bne.n	8019254 <vTaskStartScheduler+0xac>
	__asm volatile
 801923e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019242:	f383 8811 	msr	BASEPRI, r3
 8019246:	f3bf 8f6f 	isb	sy
 801924a:	f3bf 8f4f 	dsb	sy
 801924e:	60fb      	str	r3, [r7, #12]
}
 8019250:	bf00      	nop
 8019252:	e7fe      	b.n	8019252 <vTaskStartScheduler+0xaa>
}
 8019254:	bf00      	nop
 8019256:	3718      	adds	r7, #24
 8019258:	46bd      	mov	sp, r7
 801925a:	bd80      	pop	{r7, pc}
 801925c:	08020d0c 	.word	0x08020d0c
 8019260:	080198f9 	.word	0x080198f9
 8019264:	20001be4 	.word	0x20001be4
 8019268:	20001be0 	.word	0x20001be0
 801926c:	20001bcc 	.word	0x20001bcc
 8019270:	20001bc4 	.word	0x20001bc4

08019274 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8019274:	b480      	push	{r7}
 8019276:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8019278:	4b04      	ldr	r3, [pc, #16]	; (801928c <vTaskSuspendAll+0x18>)
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	3301      	adds	r3, #1
 801927e:	4a03      	ldr	r2, [pc, #12]	; (801928c <vTaskSuspendAll+0x18>)
 8019280:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8019282:	bf00      	nop
 8019284:	46bd      	mov	sp, r7
 8019286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801928a:	4770      	bx	lr
 801928c:	20001be8 	.word	0x20001be8

08019290 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8019290:	b580      	push	{r7, lr}
 8019292:	b084      	sub	sp, #16
 8019294:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8019296:	2300      	movs	r3, #0
 8019298:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801929a:	2300      	movs	r3, #0
 801929c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801929e:	4b42      	ldr	r3, [pc, #264]	; (80193a8 <xTaskResumeAll+0x118>)
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d10a      	bne.n	80192bc <xTaskResumeAll+0x2c>
	__asm volatile
 80192a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192aa:	f383 8811 	msr	BASEPRI, r3
 80192ae:	f3bf 8f6f 	isb	sy
 80192b2:	f3bf 8f4f 	dsb	sy
 80192b6:	603b      	str	r3, [r7, #0]
}
 80192b8:	bf00      	nop
 80192ba:	e7fe      	b.n	80192ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80192bc:	f001 fa4a 	bl	801a754 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80192c0:	4b39      	ldr	r3, [pc, #228]	; (80193a8 <xTaskResumeAll+0x118>)
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	3b01      	subs	r3, #1
 80192c6:	4a38      	ldr	r2, [pc, #224]	; (80193a8 <xTaskResumeAll+0x118>)
 80192c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80192ca:	4b37      	ldr	r3, [pc, #220]	; (80193a8 <xTaskResumeAll+0x118>)
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d162      	bne.n	8019398 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80192d2:	4b36      	ldr	r3, [pc, #216]	; (80193ac <xTaskResumeAll+0x11c>)
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d05e      	beq.n	8019398 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80192da:	e02f      	b.n	801933c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80192dc:	4b34      	ldr	r3, [pc, #208]	; (80193b0 <xTaskResumeAll+0x120>)
 80192de:	68db      	ldr	r3, [r3, #12]
 80192e0:	68db      	ldr	r3, [r3, #12]
 80192e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	3318      	adds	r3, #24
 80192e8:	4618      	mov	r0, r3
 80192ea:	f7fe fd37 	bl	8017d5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	3304      	adds	r3, #4
 80192f2:	4618      	mov	r0, r3
 80192f4:	f7fe fd32 	bl	8017d5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192fc:	4b2d      	ldr	r3, [pc, #180]	; (80193b4 <xTaskResumeAll+0x124>)
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	429a      	cmp	r2, r3
 8019302:	d903      	bls.n	801930c <xTaskResumeAll+0x7c>
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019308:	4a2a      	ldr	r2, [pc, #168]	; (80193b4 <xTaskResumeAll+0x124>)
 801930a:	6013      	str	r3, [r2, #0]
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019310:	4613      	mov	r3, r2
 8019312:	009b      	lsls	r3, r3, #2
 8019314:	4413      	add	r3, r2
 8019316:	009b      	lsls	r3, r3, #2
 8019318:	4a27      	ldr	r2, [pc, #156]	; (80193b8 <xTaskResumeAll+0x128>)
 801931a:	441a      	add	r2, r3
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	3304      	adds	r3, #4
 8019320:	4619      	mov	r1, r3
 8019322:	4610      	mov	r0, r2
 8019324:	f7fe fcbd 	bl	8017ca2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801932c:	4b23      	ldr	r3, [pc, #140]	; (80193bc <xTaskResumeAll+0x12c>)
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019332:	429a      	cmp	r2, r3
 8019334:	d302      	bcc.n	801933c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8019336:	4b22      	ldr	r3, [pc, #136]	; (80193c0 <xTaskResumeAll+0x130>)
 8019338:	2201      	movs	r2, #1
 801933a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801933c:	4b1c      	ldr	r3, [pc, #112]	; (80193b0 <xTaskResumeAll+0x120>)
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	2b00      	cmp	r3, #0
 8019342:	d1cb      	bne.n	80192dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8019344:	68fb      	ldr	r3, [r7, #12]
 8019346:	2b00      	cmp	r3, #0
 8019348:	d001      	beq.n	801934e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801934a:	f000 fb8b 	bl	8019a64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801934e:	4b1d      	ldr	r3, [pc, #116]	; (80193c4 <xTaskResumeAll+0x134>)
 8019350:	681b      	ldr	r3, [r3, #0]
 8019352:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	2b00      	cmp	r3, #0
 8019358:	d010      	beq.n	801937c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801935a:	f000 f859 	bl	8019410 <xTaskIncrementTick>
 801935e:	4603      	mov	r3, r0
 8019360:	2b00      	cmp	r3, #0
 8019362:	d002      	beq.n	801936a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8019364:	4b16      	ldr	r3, [pc, #88]	; (80193c0 <xTaskResumeAll+0x130>)
 8019366:	2201      	movs	r2, #1
 8019368:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	3b01      	subs	r3, #1
 801936e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d1f1      	bne.n	801935a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8019376:	4b13      	ldr	r3, [pc, #76]	; (80193c4 <xTaskResumeAll+0x134>)
 8019378:	2200      	movs	r2, #0
 801937a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801937c:	4b10      	ldr	r3, [pc, #64]	; (80193c0 <xTaskResumeAll+0x130>)
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	2b00      	cmp	r3, #0
 8019382:	d009      	beq.n	8019398 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8019384:	2301      	movs	r3, #1
 8019386:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8019388:	4b0f      	ldr	r3, [pc, #60]	; (80193c8 <xTaskResumeAll+0x138>)
 801938a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801938e:	601a      	str	r2, [r3, #0]
 8019390:	f3bf 8f4f 	dsb	sy
 8019394:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019398:	f001 fa0c 	bl	801a7b4 <vPortExitCritical>

	return xAlreadyYielded;
 801939c:	68bb      	ldr	r3, [r7, #8]
}
 801939e:	4618      	mov	r0, r3
 80193a0:	3710      	adds	r7, #16
 80193a2:	46bd      	mov	sp, r7
 80193a4:	bd80      	pop	{r7, pc}
 80193a6:	bf00      	nop
 80193a8:	20001be8 	.word	0x20001be8
 80193ac:	20001bc0 	.word	0x20001bc0
 80193b0:	20001b80 	.word	0x20001b80
 80193b4:	20001bc8 	.word	0x20001bc8
 80193b8:	200016f0 	.word	0x200016f0
 80193bc:	200016ec 	.word	0x200016ec
 80193c0:	20001bd4 	.word	0x20001bd4
 80193c4:	20001bd0 	.word	0x20001bd0
 80193c8:	e000ed04 	.word	0xe000ed04

080193cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80193cc:	b480      	push	{r7}
 80193ce:	b083      	sub	sp, #12
 80193d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80193d2:	4b05      	ldr	r3, [pc, #20]	; (80193e8 <xTaskGetTickCount+0x1c>)
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80193d8:	687b      	ldr	r3, [r7, #4]
}
 80193da:	4618      	mov	r0, r3
 80193dc:	370c      	adds	r7, #12
 80193de:	46bd      	mov	sp, r7
 80193e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193e4:	4770      	bx	lr
 80193e6:	bf00      	nop
 80193e8:	20001bc4 	.word	0x20001bc4

080193ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b082      	sub	sp, #8
 80193f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80193f2:	f001 fa91 	bl	801a918 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80193f6:	2300      	movs	r3, #0
 80193f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80193fa:	4b04      	ldr	r3, [pc, #16]	; (801940c <xTaskGetTickCountFromISR+0x20>)
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019400:	683b      	ldr	r3, [r7, #0]
}
 8019402:	4618      	mov	r0, r3
 8019404:	3708      	adds	r7, #8
 8019406:	46bd      	mov	sp, r7
 8019408:	bd80      	pop	{r7, pc}
 801940a:	bf00      	nop
 801940c:	20001bc4 	.word	0x20001bc4

08019410 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8019410:	b580      	push	{r7, lr}
 8019412:	b086      	sub	sp, #24
 8019414:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8019416:	2300      	movs	r3, #0
 8019418:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801941a:	4b4f      	ldr	r3, [pc, #316]	; (8019558 <xTaskIncrementTick+0x148>)
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	2b00      	cmp	r3, #0
 8019420:	f040 808f 	bne.w	8019542 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019424:	4b4d      	ldr	r3, [pc, #308]	; (801955c <xTaskIncrementTick+0x14c>)
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	3301      	adds	r3, #1
 801942a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801942c:	4a4b      	ldr	r2, [pc, #300]	; (801955c <xTaskIncrementTick+0x14c>)
 801942e:	693b      	ldr	r3, [r7, #16]
 8019430:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019432:	693b      	ldr	r3, [r7, #16]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d120      	bne.n	801947a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8019438:	4b49      	ldr	r3, [pc, #292]	; (8019560 <xTaskIncrementTick+0x150>)
 801943a:	681b      	ldr	r3, [r3, #0]
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	2b00      	cmp	r3, #0
 8019440:	d00a      	beq.n	8019458 <xTaskIncrementTick+0x48>
	__asm volatile
 8019442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019446:	f383 8811 	msr	BASEPRI, r3
 801944a:	f3bf 8f6f 	isb	sy
 801944e:	f3bf 8f4f 	dsb	sy
 8019452:	603b      	str	r3, [r7, #0]
}
 8019454:	bf00      	nop
 8019456:	e7fe      	b.n	8019456 <xTaskIncrementTick+0x46>
 8019458:	4b41      	ldr	r3, [pc, #260]	; (8019560 <xTaskIncrementTick+0x150>)
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	60fb      	str	r3, [r7, #12]
 801945e:	4b41      	ldr	r3, [pc, #260]	; (8019564 <xTaskIncrementTick+0x154>)
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	4a3f      	ldr	r2, [pc, #252]	; (8019560 <xTaskIncrementTick+0x150>)
 8019464:	6013      	str	r3, [r2, #0]
 8019466:	4a3f      	ldr	r2, [pc, #252]	; (8019564 <xTaskIncrementTick+0x154>)
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	6013      	str	r3, [r2, #0]
 801946c:	4b3e      	ldr	r3, [pc, #248]	; (8019568 <xTaskIncrementTick+0x158>)
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	3301      	adds	r3, #1
 8019472:	4a3d      	ldr	r2, [pc, #244]	; (8019568 <xTaskIncrementTick+0x158>)
 8019474:	6013      	str	r3, [r2, #0]
 8019476:	f000 faf5 	bl	8019a64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801947a:	4b3c      	ldr	r3, [pc, #240]	; (801956c <xTaskIncrementTick+0x15c>)
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	693a      	ldr	r2, [r7, #16]
 8019480:	429a      	cmp	r2, r3
 8019482:	d349      	bcc.n	8019518 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019484:	4b36      	ldr	r3, [pc, #216]	; (8019560 <xTaskIncrementTick+0x150>)
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d104      	bne.n	8019498 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801948e:	4b37      	ldr	r3, [pc, #220]	; (801956c <xTaskIncrementTick+0x15c>)
 8019490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019494:	601a      	str	r2, [r3, #0]
					break;
 8019496:	e03f      	b.n	8019518 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019498:	4b31      	ldr	r3, [pc, #196]	; (8019560 <xTaskIncrementTick+0x150>)
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	68db      	ldr	r3, [r3, #12]
 801949e:	68db      	ldr	r3, [r3, #12]
 80194a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80194a2:	68bb      	ldr	r3, [r7, #8]
 80194a4:	685b      	ldr	r3, [r3, #4]
 80194a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80194a8:	693a      	ldr	r2, [r7, #16]
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	429a      	cmp	r2, r3
 80194ae:	d203      	bcs.n	80194b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80194b0:	4a2e      	ldr	r2, [pc, #184]	; (801956c <xTaskIncrementTick+0x15c>)
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80194b6:	e02f      	b.n	8019518 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80194b8:	68bb      	ldr	r3, [r7, #8]
 80194ba:	3304      	adds	r3, #4
 80194bc:	4618      	mov	r0, r3
 80194be:	f7fe fc4d 	bl	8017d5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80194c2:	68bb      	ldr	r3, [r7, #8]
 80194c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d004      	beq.n	80194d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80194ca:	68bb      	ldr	r3, [r7, #8]
 80194cc:	3318      	adds	r3, #24
 80194ce:	4618      	mov	r0, r3
 80194d0:	f7fe fc44 	bl	8017d5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80194d4:	68bb      	ldr	r3, [r7, #8]
 80194d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80194d8:	4b25      	ldr	r3, [pc, #148]	; (8019570 <xTaskIncrementTick+0x160>)
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	429a      	cmp	r2, r3
 80194de:	d903      	bls.n	80194e8 <xTaskIncrementTick+0xd8>
 80194e0:	68bb      	ldr	r3, [r7, #8]
 80194e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194e4:	4a22      	ldr	r2, [pc, #136]	; (8019570 <xTaskIncrementTick+0x160>)
 80194e6:	6013      	str	r3, [r2, #0]
 80194e8:	68bb      	ldr	r3, [r7, #8]
 80194ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80194ec:	4613      	mov	r3, r2
 80194ee:	009b      	lsls	r3, r3, #2
 80194f0:	4413      	add	r3, r2
 80194f2:	009b      	lsls	r3, r3, #2
 80194f4:	4a1f      	ldr	r2, [pc, #124]	; (8019574 <xTaskIncrementTick+0x164>)
 80194f6:	441a      	add	r2, r3
 80194f8:	68bb      	ldr	r3, [r7, #8]
 80194fa:	3304      	adds	r3, #4
 80194fc:	4619      	mov	r1, r3
 80194fe:	4610      	mov	r0, r2
 8019500:	f7fe fbcf 	bl	8017ca2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019504:	68bb      	ldr	r3, [r7, #8]
 8019506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019508:	4b1b      	ldr	r3, [pc, #108]	; (8019578 <xTaskIncrementTick+0x168>)
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801950e:	429a      	cmp	r2, r3
 8019510:	d3b8      	bcc.n	8019484 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8019512:	2301      	movs	r3, #1
 8019514:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019516:	e7b5      	b.n	8019484 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019518:	4b17      	ldr	r3, [pc, #92]	; (8019578 <xTaskIncrementTick+0x168>)
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801951e:	4915      	ldr	r1, [pc, #84]	; (8019574 <xTaskIncrementTick+0x164>)
 8019520:	4613      	mov	r3, r2
 8019522:	009b      	lsls	r3, r3, #2
 8019524:	4413      	add	r3, r2
 8019526:	009b      	lsls	r3, r3, #2
 8019528:	440b      	add	r3, r1
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	2b01      	cmp	r3, #1
 801952e:	d901      	bls.n	8019534 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8019530:	2301      	movs	r3, #1
 8019532:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8019534:	4b11      	ldr	r3, [pc, #68]	; (801957c <xTaskIncrementTick+0x16c>)
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	2b00      	cmp	r3, #0
 801953a:	d007      	beq.n	801954c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801953c:	2301      	movs	r3, #1
 801953e:	617b      	str	r3, [r7, #20]
 8019540:	e004      	b.n	801954c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8019542:	4b0f      	ldr	r3, [pc, #60]	; (8019580 <xTaskIncrementTick+0x170>)
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	3301      	adds	r3, #1
 8019548:	4a0d      	ldr	r2, [pc, #52]	; (8019580 <xTaskIncrementTick+0x170>)
 801954a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801954c:	697b      	ldr	r3, [r7, #20]
}
 801954e:	4618      	mov	r0, r3
 8019550:	3718      	adds	r7, #24
 8019552:	46bd      	mov	sp, r7
 8019554:	bd80      	pop	{r7, pc}
 8019556:	bf00      	nop
 8019558:	20001be8 	.word	0x20001be8
 801955c:	20001bc4 	.word	0x20001bc4
 8019560:	20001b78 	.word	0x20001b78
 8019564:	20001b7c 	.word	0x20001b7c
 8019568:	20001bd8 	.word	0x20001bd8
 801956c:	20001be0 	.word	0x20001be0
 8019570:	20001bc8 	.word	0x20001bc8
 8019574:	200016f0 	.word	0x200016f0
 8019578:	200016ec 	.word	0x200016ec
 801957c:	20001bd4 	.word	0x20001bd4
 8019580:	20001bd0 	.word	0x20001bd0

08019584 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8019584:	b580      	push	{r7, lr}
 8019586:	b086      	sub	sp, #24
 8019588:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801958a:	4b3a      	ldr	r3, [pc, #232]	; (8019674 <vTaskSwitchContext+0xf0>)
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d003      	beq.n	801959a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8019592:	4b39      	ldr	r3, [pc, #228]	; (8019678 <vTaskSwitchContext+0xf4>)
 8019594:	2201      	movs	r2, #1
 8019596:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8019598:	e068      	b.n	801966c <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 801959a:	4b37      	ldr	r3, [pc, #220]	; (8019678 <vTaskSwitchContext+0xf4>)
 801959c:	2200      	movs	r2, #0
 801959e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80195a0:	4b36      	ldr	r3, [pc, #216]	; (801967c <vTaskSwitchContext+0xf8>)
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195a6:	613b      	str	r3, [r7, #16]
 80195a8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80195ac:	60fb      	str	r3, [r7, #12]
 80195ae:	693b      	ldr	r3, [r7, #16]
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	68fa      	ldr	r2, [r7, #12]
 80195b4:	429a      	cmp	r2, r3
 80195b6:	d111      	bne.n	80195dc <vTaskSwitchContext+0x58>
 80195b8:	693b      	ldr	r3, [r7, #16]
 80195ba:	3304      	adds	r3, #4
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	68fa      	ldr	r2, [r7, #12]
 80195c0:	429a      	cmp	r2, r3
 80195c2:	d10b      	bne.n	80195dc <vTaskSwitchContext+0x58>
 80195c4:	693b      	ldr	r3, [r7, #16]
 80195c6:	3308      	adds	r3, #8
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	68fa      	ldr	r2, [r7, #12]
 80195cc:	429a      	cmp	r2, r3
 80195ce:	d105      	bne.n	80195dc <vTaskSwitchContext+0x58>
 80195d0:	693b      	ldr	r3, [r7, #16]
 80195d2:	330c      	adds	r3, #12
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	68fa      	ldr	r2, [r7, #12]
 80195d8:	429a      	cmp	r2, r3
 80195da:	d008      	beq.n	80195ee <vTaskSwitchContext+0x6a>
 80195dc:	4b27      	ldr	r3, [pc, #156]	; (801967c <vTaskSwitchContext+0xf8>)
 80195de:	681a      	ldr	r2, [r3, #0]
 80195e0:	4b26      	ldr	r3, [pc, #152]	; (801967c <vTaskSwitchContext+0xf8>)
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	3334      	adds	r3, #52	; 0x34
 80195e6:	4619      	mov	r1, r3
 80195e8:	4610      	mov	r0, r2
 80195ea:	f7f1 f98c 	bl	800a906 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80195ee:	4b24      	ldr	r3, [pc, #144]	; (8019680 <vTaskSwitchContext+0xfc>)
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	617b      	str	r3, [r7, #20]
 80195f4:	e010      	b.n	8019618 <vTaskSwitchContext+0x94>
 80195f6:	697b      	ldr	r3, [r7, #20]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d10a      	bne.n	8019612 <vTaskSwitchContext+0x8e>
	__asm volatile
 80195fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019600:	f383 8811 	msr	BASEPRI, r3
 8019604:	f3bf 8f6f 	isb	sy
 8019608:	f3bf 8f4f 	dsb	sy
 801960c:	607b      	str	r3, [r7, #4]
}
 801960e:	bf00      	nop
 8019610:	e7fe      	b.n	8019610 <vTaskSwitchContext+0x8c>
 8019612:	697b      	ldr	r3, [r7, #20]
 8019614:	3b01      	subs	r3, #1
 8019616:	617b      	str	r3, [r7, #20]
 8019618:	491a      	ldr	r1, [pc, #104]	; (8019684 <vTaskSwitchContext+0x100>)
 801961a:	697a      	ldr	r2, [r7, #20]
 801961c:	4613      	mov	r3, r2
 801961e:	009b      	lsls	r3, r3, #2
 8019620:	4413      	add	r3, r2
 8019622:	009b      	lsls	r3, r3, #2
 8019624:	440b      	add	r3, r1
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	2b00      	cmp	r3, #0
 801962a:	d0e4      	beq.n	80195f6 <vTaskSwitchContext+0x72>
 801962c:	697a      	ldr	r2, [r7, #20]
 801962e:	4613      	mov	r3, r2
 8019630:	009b      	lsls	r3, r3, #2
 8019632:	4413      	add	r3, r2
 8019634:	009b      	lsls	r3, r3, #2
 8019636:	4a13      	ldr	r2, [pc, #76]	; (8019684 <vTaskSwitchContext+0x100>)
 8019638:	4413      	add	r3, r2
 801963a:	60bb      	str	r3, [r7, #8]
 801963c:	68bb      	ldr	r3, [r7, #8]
 801963e:	685b      	ldr	r3, [r3, #4]
 8019640:	685a      	ldr	r2, [r3, #4]
 8019642:	68bb      	ldr	r3, [r7, #8]
 8019644:	605a      	str	r2, [r3, #4]
 8019646:	68bb      	ldr	r3, [r7, #8]
 8019648:	685a      	ldr	r2, [r3, #4]
 801964a:	68bb      	ldr	r3, [r7, #8]
 801964c:	3308      	adds	r3, #8
 801964e:	429a      	cmp	r2, r3
 8019650:	d104      	bne.n	801965c <vTaskSwitchContext+0xd8>
 8019652:	68bb      	ldr	r3, [r7, #8]
 8019654:	685b      	ldr	r3, [r3, #4]
 8019656:	685a      	ldr	r2, [r3, #4]
 8019658:	68bb      	ldr	r3, [r7, #8]
 801965a:	605a      	str	r2, [r3, #4]
 801965c:	68bb      	ldr	r3, [r7, #8]
 801965e:	685b      	ldr	r3, [r3, #4]
 8019660:	68db      	ldr	r3, [r3, #12]
 8019662:	4a06      	ldr	r2, [pc, #24]	; (801967c <vTaskSwitchContext+0xf8>)
 8019664:	6013      	str	r3, [r2, #0]
 8019666:	4a06      	ldr	r2, [pc, #24]	; (8019680 <vTaskSwitchContext+0xfc>)
 8019668:	697b      	ldr	r3, [r7, #20]
 801966a:	6013      	str	r3, [r2, #0]
}
 801966c:	bf00      	nop
 801966e:	3718      	adds	r7, #24
 8019670:	46bd      	mov	sp, r7
 8019672:	bd80      	pop	{r7, pc}
 8019674:	20001be8 	.word	0x20001be8
 8019678:	20001bd4 	.word	0x20001bd4
 801967c:	200016ec 	.word	0x200016ec
 8019680:	20001bc8 	.word	0x20001bc8
 8019684:	200016f0 	.word	0x200016f0

08019688 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8019688:	b580      	push	{r7, lr}
 801968a:	b084      	sub	sp, #16
 801968c:	af00      	add	r7, sp, #0
 801968e:	6078      	str	r0, [r7, #4]
 8019690:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	2b00      	cmp	r3, #0
 8019696:	d10a      	bne.n	80196ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8019698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801969c:	f383 8811 	msr	BASEPRI, r3
 80196a0:	f3bf 8f6f 	isb	sy
 80196a4:	f3bf 8f4f 	dsb	sy
 80196a8:	60fb      	str	r3, [r7, #12]
}
 80196aa:	bf00      	nop
 80196ac:	e7fe      	b.n	80196ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80196ae:	4b07      	ldr	r3, [pc, #28]	; (80196cc <vTaskPlaceOnEventList+0x44>)
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	3318      	adds	r3, #24
 80196b4:	4619      	mov	r1, r3
 80196b6:	6878      	ldr	r0, [r7, #4]
 80196b8:	f7fe fb17 	bl	8017cea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80196bc:	2101      	movs	r1, #1
 80196be:	6838      	ldr	r0, [r7, #0]
 80196c0:	f000 fb7a 	bl	8019db8 <prvAddCurrentTaskToDelayedList>
}
 80196c4:	bf00      	nop
 80196c6:	3710      	adds	r7, #16
 80196c8:	46bd      	mov	sp, r7
 80196ca:	bd80      	pop	{r7, pc}
 80196cc:	200016ec 	.word	0x200016ec

080196d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80196d0:	b580      	push	{r7, lr}
 80196d2:	b086      	sub	sp, #24
 80196d4:	af00      	add	r7, sp, #0
 80196d6:	60f8      	str	r0, [r7, #12]
 80196d8:	60b9      	str	r1, [r7, #8]
 80196da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d10a      	bne.n	80196f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80196e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196e6:	f383 8811 	msr	BASEPRI, r3
 80196ea:	f3bf 8f6f 	isb	sy
 80196ee:	f3bf 8f4f 	dsb	sy
 80196f2:	617b      	str	r3, [r7, #20]
}
 80196f4:	bf00      	nop
 80196f6:	e7fe      	b.n	80196f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80196f8:	4b0a      	ldr	r3, [pc, #40]	; (8019724 <vTaskPlaceOnEventListRestricted+0x54>)
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	3318      	adds	r3, #24
 80196fe:	4619      	mov	r1, r3
 8019700:	68f8      	ldr	r0, [r7, #12]
 8019702:	f7fe face 	bl	8017ca2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	2b00      	cmp	r3, #0
 801970a:	d002      	beq.n	8019712 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801970c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019710:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8019712:	6879      	ldr	r1, [r7, #4]
 8019714:	68b8      	ldr	r0, [r7, #8]
 8019716:	f000 fb4f 	bl	8019db8 <prvAddCurrentTaskToDelayedList>
	}
 801971a:	bf00      	nop
 801971c:	3718      	adds	r7, #24
 801971e:	46bd      	mov	sp, r7
 8019720:	bd80      	pop	{r7, pc}
 8019722:	bf00      	nop
 8019724:	200016ec 	.word	0x200016ec

08019728 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019728:	b580      	push	{r7, lr}
 801972a:	b086      	sub	sp, #24
 801972c:	af00      	add	r7, sp, #0
 801972e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	68db      	ldr	r3, [r3, #12]
 8019734:	68db      	ldr	r3, [r3, #12]
 8019736:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019738:	693b      	ldr	r3, [r7, #16]
 801973a:	2b00      	cmp	r3, #0
 801973c:	d10a      	bne.n	8019754 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019742:	f383 8811 	msr	BASEPRI, r3
 8019746:	f3bf 8f6f 	isb	sy
 801974a:	f3bf 8f4f 	dsb	sy
 801974e:	60fb      	str	r3, [r7, #12]
}
 8019750:	bf00      	nop
 8019752:	e7fe      	b.n	8019752 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019754:	693b      	ldr	r3, [r7, #16]
 8019756:	3318      	adds	r3, #24
 8019758:	4618      	mov	r0, r3
 801975a:	f7fe faff 	bl	8017d5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801975e:	4b1e      	ldr	r3, [pc, #120]	; (80197d8 <xTaskRemoveFromEventList+0xb0>)
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	2b00      	cmp	r3, #0
 8019764:	d11d      	bne.n	80197a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019766:	693b      	ldr	r3, [r7, #16]
 8019768:	3304      	adds	r3, #4
 801976a:	4618      	mov	r0, r3
 801976c:	f7fe faf6 	bl	8017d5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019770:	693b      	ldr	r3, [r7, #16]
 8019772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019774:	4b19      	ldr	r3, [pc, #100]	; (80197dc <xTaskRemoveFromEventList+0xb4>)
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	429a      	cmp	r2, r3
 801977a:	d903      	bls.n	8019784 <xTaskRemoveFromEventList+0x5c>
 801977c:	693b      	ldr	r3, [r7, #16]
 801977e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019780:	4a16      	ldr	r2, [pc, #88]	; (80197dc <xTaskRemoveFromEventList+0xb4>)
 8019782:	6013      	str	r3, [r2, #0]
 8019784:	693b      	ldr	r3, [r7, #16]
 8019786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019788:	4613      	mov	r3, r2
 801978a:	009b      	lsls	r3, r3, #2
 801978c:	4413      	add	r3, r2
 801978e:	009b      	lsls	r3, r3, #2
 8019790:	4a13      	ldr	r2, [pc, #76]	; (80197e0 <xTaskRemoveFromEventList+0xb8>)
 8019792:	441a      	add	r2, r3
 8019794:	693b      	ldr	r3, [r7, #16]
 8019796:	3304      	adds	r3, #4
 8019798:	4619      	mov	r1, r3
 801979a:	4610      	mov	r0, r2
 801979c:	f7fe fa81 	bl	8017ca2 <vListInsertEnd>
 80197a0:	e005      	b.n	80197ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80197a2:	693b      	ldr	r3, [r7, #16]
 80197a4:	3318      	adds	r3, #24
 80197a6:	4619      	mov	r1, r3
 80197a8:	480e      	ldr	r0, [pc, #56]	; (80197e4 <xTaskRemoveFromEventList+0xbc>)
 80197aa:	f7fe fa7a 	bl	8017ca2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80197ae:	693b      	ldr	r3, [r7, #16]
 80197b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80197b2:	4b0d      	ldr	r3, [pc, #52]	; (80197e8 <xTaskRemoveFromEventList+0xc0>)
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197b8:	429a      	cmp	r2, r3
 80197ba:	d905      	bls.n	80197c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80197bc:	2301      	movs	r3, #1
 80197be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80197c0:	4b0a      	ldr	r3, [pc, #40]	; (80197ec <xTaskRemoveFromEventList+0xc4>)
 80197c2:	2201      	movs	r2, #1
 80197c4:	601a      	str	r2, [r3, #0]
 80197c6:	e001      	b.n	80197cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80197c8:	2300      	movs	r3, #0
 80197ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80197cc:	697b      	ldr	r3, [r7, #20]
}
 80197ce:	4618      	mov	r0, r3
 80197d0:	3718      	adds	r7, #24
 80197d2:	46bd      	mov	sp, r7
 80197d4:	bd80      	pop	{r7, pc}
 80197d6:	bf00      	nop
 80197d8:	20001be8 	.word	0x20001be8
 80197dc:	20001bc8 	.word	0x20001bc8
 80197e0:	200016f0 	.word	0x200016f0
 80197e4:	20001b80 	.word	0x20001b80
 80197e8:	200016ec 	.word	0x200016ec
 80197ec:	20001bd4 	.word	0x20001bd4

080197f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80197f0:	b480      	push	{r7}
 80197f2:	b083      	sub	sp, #12
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80197f8:	4b06      	ldr	r3, [pc, #24]	; (8019814 <vTaskInternalSetTimeOutState+0x24>)
 80197fa:	681a      	ldr	r2, [r3, #0]
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019800:	4b05      	ldr	r3, [pc, #20]	; (8019818 <vTaskInternalSetTimeOutState+0x28>)
 8019802:	681a      	ldr	r2, [r3, #0]
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	605a      	str	r2, [r3, #4]
}
 8019808:	bf00      	nop
 801980a:	370c      	adds	r7, #12
 801980c:	46bd      	mov	sp, r7
 801980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019812:	4770      	bx	lr
 8019814:	20001bd8 	.word	0x20001bd8
 8019818:	20001bc4 	.word	0x20001bc4

0801981c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801981c:	b580      	push	{r7, lr}
 801981e:	b088      	sub	sp, #32
 8019820:	af00      	add	r7, sp, #0
 8019822:	6078      	str	r0, [r7, #4]
 8019824:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d10a      	bne.n	8019842 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801982c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019830:	f383 8811 	msr	BASEPRI, r3
 8019834:	f3bf 8f6f 	isb	sy
 8019838:	f3bf 8f4f 	dsb	sy
 801983c:	613b      	str	r3, [r7, #16]
}
 801983e:	bf00      	nop
 8019840:	e7fe      	b.n	8019840 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8019842:	683b      	ldr	r3, [r7, #0]
 8019844:	2b00      	cmp	r3, #0
 8019846:	d10a      	bne.n	801985e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8019848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801984c:	f383 8811 	msr	BASEPRI, r3
 8019850:	f3bf 8f6f 	isb	sy
 8019854:	f3bf 8f4f 	dsb	sy
 8019858:	60fb      	str	r3, [r7, #12]
}
 801985a:	bf00      	nop
 801985c:	e7fe      	b.n	801985c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801985e:	f000 ff79 	bl	801a754 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8019862:	4b1d      	ldr	r3, [pc, #116]	; (80198d8 <xTaskCheckForTimeOut+0xbc>)
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	685b      	ldr	r3, [r3, #4]
 801986c:	69ba      	ldr	r2, [r7, #24]
 801986e:	1ad3      	subs	r3, r2, r3
 8019870:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8019872:	683b      	ldr	r3, [r7, #0]
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801987a:	d102      	bne.n	8019882 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801987c:	2300      	movs	r3, #0
 801987e:	61fb      	str	r3, [r7, #28]
 8019880:	e023      	b.n	80198ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	681a      	ldr	r2, [r3, #0]
 8019886:	4b15      	ldr	r3, [pc, #84]	; (80198dc <xTaskCheckForTimeOut+0xc0>)
 8019888:	681b      	ldr	r3, [r3, #0]
 801988a:	429a      	cmp	r2, r3
 801988c:	d007      	beq.n	801989e <xTaskCheckForTimeOut+0x82>
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	685b      	ldr	r3, [r3, #4]
 8019892:	69ba      	ldr	r2, [r7, #24]
 8019894:	429a      	cmp	r2, r3
 8019896:	d302      	bcc.n	801989e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019898:	2301      	movs	r3, #1
 801989a:	61fb      	str	r3, [r7, #28]
 801989c:	e015      	b.n	80198ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801989e:	683b      	ldr	r3, [r7, #0]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	697a      	ldr	r2, [r7, #20]
 80198a4:	429a      	cmp	r2, r3
 80198a6:	d20b      	bcs.n	80198c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80198a8:	683b      	ldr	r3, [r7, #0]
 80198aa:	681a      	ldr	r2, [r3, #0]
 80198ac:	697b      	ldr	r3, [r7, #20]
 80198ae:	1ad2      	subs	r2, r2, r3
 80198b0:	683b      	ldr	r3, [r7, #0]
 80198b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80198b4:	6878      	ldr	r0, [r7, #4]
 80198b6:	f7ff ff9b 	bl	80197f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80198ba:	2300      	movs	r3, #0
 80198bc:	61fb      	str	r3, [r7, #28]
 80198be:	e004      	b.n	80198ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80198c0:	683b      	ldr	r3, [r7, #0]
 80198c2:	2200      	movs	r2, #0
 80198c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80198c6:	2301      	movs	r3, #1
 80198c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80198ca:	f000 ff73 	bl	801a7b4 <vPortExitCritical>

	return xReturn;
 80198ce:	69fb      	ldr	r3, [r7, #28]
}
 80198d0:	4618      	mov	r0, r3
 80198d2:	3720      	adds	r7, #32
 80198d4:	46bd      	mov	sp, r7
 80198d6:	bd80      	pop	{r7, pc}
 80198d8:	20001bc4 	.word	0x20001bc4
 80198dc:	20001bd8 	.word	0x20001bd8

080198e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80198e0:	b480      	push	{r7}
 80198e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80198e4:	4b03      	ldr	r3, [pc, #12]	; (80198f4 <vTaskMissedYield+0x14>)
 80198e6:	2201      	movs	r2, #1
 80198e8:	601a      	str	r2, [r3, #0]
}
 80198ea:	bf00      	nop
 80198ec:	46bd      	mov	sp, r7
 80198ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198f2:	4770      	bx	lr
 80198f4:	20001bd4 	.word	0x20001bd4

080198f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80198f8:	b580      	push	{r7, lr}
 80198fa:	b082      	sub	sp, #8
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8019900:	f000 f852 	bl	80199a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019904:	4b06      	ldr	r3, [pc, #24]	; (8019920 <prvIdleTask+0x28>)
 8019906:	681b      	ldr	r3, [r3, #0]
 8019908:	2b01      	cmp	r3, #1
 801990a:	d9f9      	bls.n	8019900 <prvIdleTask+0x8>
			{
				taskYIELD();
 801990c:	4b05      	ldr	r3, [pc, #20]	; (8019924 <prvIdleTask+0x2c>)
 801990e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019912:	601a      	str	r2, [r3, #0]
 8019914:	f3bf 8f4f 	dsb	sy
 8019918:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801991c:	e7f0      	b.n	8019900 <prvIdleTask+0x8>
 801991e:	bf00      	nop
 8019920:	200016f0 	.word	0x200016f0
 8019924:	e000ed04 	.word	0xe000ed04

08019928 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019928:	b580      	push	{r7, lr}
 801992a:	b082      	sub	sp, #8
 801992c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801992e:	2300      	movs	r3, #0
 8019930:	607b      	str	r3, [r7, #4]
 8019932:	e00c      	b.n	801994e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019934:	687a      	ldr	r2, [r7, #4]
 8019936:	4613      	mov	r3, r2
 8019938:	009b      	lsls	r3, r3, #2
 801993a:	4413      	add	r3, r2
 801993c:	009b      	lsls	r3, r3, #2
 801993e:	4a12      	ldr	r2, [pc, #72]	; (8019988 <prvInitialiseTaskLists+0x60>)
 8019940:	4413      	add	r3, r2
 8019942:	4618      	mov	r0, r3
 8019944:	f7fe f980 	bl	8017c48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	3301      	adds	r3, #1
 801994c:	607b      	str	r3, [r7, #4]
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	2b37      	cmp	r3, #55	; 0x37
 8019952:	d9ef      	bls.n	8019934 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019954:	480d      	ldr	r0, [pc, #52]	; (801998c <prvInitialiseTaskLists+0x64>)
 8019956:	f7fe f977 	bl	8017c48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801995a:	480d      	ldr	r0, [pc, #52]	; (8019990 <prvInitialiseTaskLists+0x68>)
 801995c:	f7fe f974 	bl	8017c48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019960:	480c      	ldr	r0, [pc, #48]	; (8019994 <prvInitialiseTaskLists+0x6c>)
 8019962:	f7fe f971 	bl	8017c48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019966:	480c      	ldr	r0, [pc, #48]	; (8019998 <prvInitialiseTaskLists+0x70>)
 8019968:	f7fe f96e 	bl	8017c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801996c:	480b      	ldr	r0, [pc, #44]	; (801999c <prvInitialiseTaskLists+0x74>)
 801996e:	f7fe f96b 	bl	8017c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8019972:	4b0b      	ldr	r3, [pc, #44]	; (80199a0 <prvInitialiseTaskLists+0x78>)
 8019974:	4a05      	ldr	r2, [pc, #20]	; (801998c <prvInitialiseTaskLists+0x64>)
 8019976:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019978:	4b0a      	ldr	r3, [pc, #40]	; (80199a4 <prvInitialiseTaskLists+0x7c>)
 801997a:	4a05      	ldr	r2, [pc, #20]	; (8019990 <prvInitialiseTaskLists+0x68>)
 801997c:	601a      	str	r2, [r3, #0]
}
 801997e:	bf00      	nop
 8019980:	3708      	adds	r7, #8
 8019982:	46bd      	mov	sp, r7
 8019984:	bd80      	pop	{r7, pc}
 8019986:	bf00      	nop
 8019988:	200016f0 	.word	0x200016f0
 801998c:	20001b50 	.word	0x20001b50
 8019990:	20001b64 	.word	0x20001b64
 8019994:	20001b80 	.word	0x20001b80
 8019998:	20001b94 	.word	0x20001b94
 801999c:	20001bac 	.word	0x20001bac
 80199a0:	20001b78 	.word	0x20001b78
 80199a4:	20001b7c 	.word	0x20001b7c

080199a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b082      	sub	sp, #8
 80199ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80199ae:	e019      	b.n	80199e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80199b0:	f000 fed0 	bl	801a754 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80199b4:	4b10      	ldr	r3, [pc, #64]	; (80199f8 <prvCheckTasksWaitingTermination+0x50>)
 80199b6:	68db      	ldr	r3, [r3, #12]
 80199b8:	68db      	ldr	r3, [r3, #12]
 80199ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	3304      	adds	r3, #4
 80199c0:	4618      	mov	r0, r3
 80199c2:	f7fe f9cb 	bl	8017d5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80199c6:	4b0d      	ldr	r3, [pc, #52]	; (80199fc <prvCheckTasksWaitingTermination+0x54>)
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	3b01      	subs	r3, #1
 80199cc:	4a0b      	ldr	r2, [pc, #44]	; (80199fc <prvCheckTasksWaitingTermination+0x54>)
 80199ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80199d0:	4b0b      	ldr	r3, [pc, #44]	; (8019a00 <prvCheckTasksWaitingTermination+0x58>)
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	3b01      	subs	r3, #1
 80199d6:	4a0a      	ldr	r2, [pc, #40]	; (8019a00 <prvCheckTasksWaitingTermination+0x58>)
 80199d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80199da:	f000 feeb 	bl	801a7b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80199de:	6878      	ldr	r0, [r7, #4]
 80199e0:	f000 f810 	bl	8019a04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80199e4:	4b06      	ldr	r3, [pc, #24]	; (8019a00 <prvCheckTasksWaitingTermination+0x58>)
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d1e1      	bne.n	80199b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80199ec:	bf00      	nop
 80199ee:	bf00      	nop
 80199f0:	3708      	adds	r7, #8
 80199f2:	46bd      	mov	sp, r7
 80199f4:	bd80      	pop	{r7, pc}
 80199f6:	bf00      	nop
 80199f8:	20001b94 	.word	0x20001b94
 80199fc:	20001bc0 	.word	0x20001bc0
 8019a00:	20001ba8 	.word	0x20001ba8

08019a04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8019a04:	b580      	push	{r7, lr}
 8019a06:	b084      	sub	sp, #16
 8019a08:	af00      	add	r7, sp, #0
 8019a0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d108      	bne.n	8019a28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a1a:	4618      	mov	r0, r3
 8019a1c:	f001 f888 	bl	801ab30 <vPortFree>
				vPortFree( pxTCB );
 8019a20:	6878      	ldr	r0, [r7, #4]
 8019a22:	f001 f885 	bl	801ab30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8019a26:	e018      	b.n	8019a5a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019a2e:	2b01      	cmp	r3, #1
 8019a30:	d103      	bne.n	8019a3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8019a32:	6878      	ldr	r0, [r7, #4]
 8019a34:	f001 f87c 	bl	801ab30 <vPortFree>
	}
 8019a38:	e00f      	b.n	8019a5a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019a40:	2b02      	cmp	r3, #2
 8019a42:	d00a      	beq.n	8019a5a <prvDeleteTCB+0x56>
	__asm volatile
 8019a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a48:	f383 8811 	msr	BASEPRI, r3
 8019a4c:	f3bf 8f6f 	isb	sy
 8019a50:	f3bf 8f4f 	dsb	sy
 8019a54:	60fb      	str	r3, [r7, #12]
}
 8019a56:	bf00      	nop
 8019a58:	e7fe      	b.n	8019a58 <prvDeleteTCB+0x54>
	}
 8019a5a:	bf00      	nop
 8019a5c:	3710      	adds	r7, #16
 8019a5e:	46bd      	mov	sp, r7
 8019a60:	bd80      	pop	{r7, pc}
	...

08019a64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8019a64:	b480      	push	{r7}
 8019a66:	b083      	sub	sp, #12
 8019a68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019a6a:	4b0c      	ldr	r3, [pc, #48]	; (8019a9c <prvResetNextTaskUnblockTime+0x38>)
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	d104      	bne.n	8019a7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019a74:	4b0a      	ldr	r3, [pc, #40]	; (8019aa0 <prvResetNextTaskUnblockTime+0x3c>)
 8019a76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019a7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8019a7c:	e008      	b.n	8019a90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019a7e:	4b07      	ldr	r3, [pc, #28]	; (8019a9c <prvResetNextTaskUnblockTime+0x38>)
 8019a80:	681b      	ldr	r3, [r3, #0]
 8019a82:	68db      	ldr	r3, [r3, #12]
 8019a84:	68db      	ldr	r3, [r3, #12]
 8019a86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	685b      	ldr	r3, [r3, #4]
 8019a8c:	4a04      	ldr	r2, [pc, #16]	; (8019aa0 <prvResetNextTaskUnblockTime+0x3c>)
 8019a8e:	6013      	str	r3, [r2, #0]
}
 8019a90:	bf00      	nop
 8019a92:	370c      	adds	r7, #12
 8019a94:	46bd      	mov	sp, r7
 8019a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a9a:	4770      	bx	lr
 8019a9c:	20001b78 	.word	0x20001b78
 8019aa0:	20001be0 	.word	0x20001be0

08019aa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8019aa4:	b480      	push	{r7}
 8019aa6:	b083      	sub	sp, #12
 8019aa8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8019aaa:	4b0b      	ldr	r3, [pc, #44]	; (8019ad8 <xTaskGetSchedulerState+0x34>)
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d102      	bne.n	8019ab8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019ab2:	2301      	movs	r3, #1
 8019ab4:	607b      	str	r3, [r7, #4]
 8019ab6:	e008      	b.n	8019aca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019ab8:	4b08      	ldr	r3, [pc, #32]	; (8019adc <xTaskGetSchedulerState+0x38>)
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d102      	bne.n	8019ac6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8019ac0:	2302      	movs	r3, #2
 8019ac2:	607b      	str	r3, [r7, #4]
 8019ac4:	e001      	b.n	8019aca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8019ac6:	2300      	movs	r3, #0
 8019ac8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8019aca:	687b      	ldr	r3, [r7, #4]
	}
 8019acc:	4618      	mov	r0, r3
 8019ace:	370c      	adds	r7, #12
 8019ad0:	46bd      	mov	sp, r7
 8019ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ad6:	4770      	bx	lr
 8019ad8:	20001bcc 	.word	0x20001bcc
 8019adc:	20001be8 	.word	0x20001be8

08019ae0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8019ae0:	b580      	push	{r7, lr}
 8019ae2:	b084      	sub	sp, #16
 8019ae4:	af00      	add	r7, sp, #0
 8019ae6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8019aec:	2300      	movs	r3, #0
 8019aee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d051      	beq.n	8019b9a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8019af6:	68bb      	ldr	r3, [r7, #8]
 8019af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019afa:	4b2a      	ldr	r3, [pc, #168]	; (8019ba4 <xTaskPriorityInherit+0xc4>)
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b00:	429a      	cmp	r2, r3
 8019b02:	d241      	bcs.n	8019b88 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019b04:	68bb      	ldr	r3, [r7, #8]
 8019b06:	699b      	ldr	r3, [r3, #24]
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	db06      	blt.n	8019b1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019b0c:	4b25      	ldr	r3, [pc, #148]	; (8019ba4 <xTaskPriorityInherit+0xc4>)
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019b16:	68bb      	ldr	r3, [r7, #8]
 8019b18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8019b1a:	68bb      	ldr	r3, [r7, #8]
 8019b1c:	6959      	ldr	r1, [r3, #20]
 8019b1e:	68bb      	ldr	r3, [r7, #8]
 8019b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b22:	4613      	mov	r3, r2
 8019b24:	009b      	lsls	r3, r3, #2
 8019b26:	4413      	add	r3, r2
 8019b28:	009b      	lsls	r3, r3, #2
 8019b2a:	4a1f      	ldr	r2, [pc, #124]	; (8019ba8 <xTaskPriorityInherit+0xc8>)
 8019b2c:	4413      	add	r3, r2
 8019b2e:	4299      	cmp	r1, r3
 8019b30:	d122      	bne.n	8019b78 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019b32:	68bb      	ldr	r3, [r7, #8]
 8019b34:	3304      	adds	r3, #4
 8019b36:	4618      	mov	r0, r3
 8019b38:	f7fe f910 	bl	8017d5c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019b3c:	4b19      	ldr	r3, [pc, #100]	; (8019ba4 <xTaskPriorityInherit+0xc4>)
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b42:	68bb      	ldr	r3, [r7, #8]
 8019b44:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8019b46:	68bb      	ldr	r3, [r7, #8]
 8019b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b4a:	4b18      	ldr	r3, [pc, #96]	; (8019bac <xTaskPriorityInherit+0xcc>)
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	429a      	cmp	r2, r3
 8019b50:	d903      	bls.n	8019b5a <xTaskPriorityInherit+0x7a>
 8019b52:	68bb      	ldr	r3, [r7, #8]
 8019b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b56:	4a15      	ldr	r2, [pc, #84]	; (8019bac <xTaskPriorityInherit+0xcc>)
 8019b58:	6013      	str	r3, [r2, #0]
 8019b5a:	68bb      	ldr	r3, [r7, #8]
 8019b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b5e:	4613      	mov	r3, r2
 8019b60:	009b      	lsls	r3, r3, #2
 8019b62:	4413      	add	r3, r2
 8019b64:	009b      	lsls	r3, r3, #2
 8019b66:	4a10      	ldr	r2, [pc, #64]	; (8019ba8 <xTaskPriorityInherit+0xc8>)
 8019b68:	441a      	add	r2, r3
 8019b6a:	68bb      	ldr	r3, [r7, #8]
 8019b6c:	3304      	adds	r3, #4
 8019b6e:	4619      	mov	r1, r3
 8019b70:	4610      	mov	r0, r2
 8019b72:	f7fe f896 	bl	8017ca2 <vListInsertEnd>
 8019b76:	e004      	b.n	8019b82 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019b78:	4b0a      	ldr	r3, [pc, #40]	; (8019ba4 <xTaskPriorityInherit+0xc4>)
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b7e:	68bb      	ldr	r3, [r7, #8]
 8019b80:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8019b82:	2301      	movs	r3, #1
 8019b84:	60fb      	str	r3, [r7, #12]
 8019b86:	e008      	b.n	8019b9a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8019b88:	68bb      	ldr	r3, [r7, #8]
 8019b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019b8c:	4b05      	ldr	r3, [pc, #20]	; (8019ba4 <xTaskPriorityInherit+0xc4>)
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b92:	429a      	cmp	r2, r3
 8019b94:	d201      	bcs.n	8019b9a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8019b96:	2301      	movs	r3, #1
 8019b98:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019b9a:	68fb      	ldr	r3, [r7, #12]
	}
 8019b9c:	4618      	mov	r0, r3
 8019b9e:	3710      	adds	r7, #16
 8019ba0:	46bd      	mov	sp, r7
 8019ba2:	bd80      	pop	{r7, pc}
 8019ba4:	200016ec 	.word	0x200016ec
 8019ba8:	200016f0 	.word	0x200016f0
 8019bac:	20001bc8 	.word	0x20001bc8

08019bb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8019bb0:	b580      	push	{r7, lr}
 8019bb2:	b086      	sub	sp, #24
 8019bb4:	af00      	add	r7, sp, #0
 8019bb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d056      	beq.n	8019c74 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8019bc6:	4b2e      	ldr	r3, [pc, #184]	; (8019c80 <xTaskPriorityDisinherit+0xd0>)
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	693a      	ldr	r2, [r7, #16]
 8019bcc:	429a      	cmp	r2, r3
 8019bce:	d00a      	beq.n	8019be6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8019bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bd4:	f383 8811 	msr	BASEPRI, r3
 8019bd8:	f3bf 8f6f 	isb	sy
 8019bdc:	f3bf 8f4f 	dsb	sy
 8019be0:	60fb      	str	r3, [r7, #12]
}
 8019be2:	bf00      	nop
 8019be4:	e7fe      	b.n	8019be4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8019be6:	693b      	ldr	r3, [r7, #16]
 8019be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d10a      	bne.n	8019c04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8019bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bf2:	f383 8811 	msr	BASEPRI, r3
 8019bf6:	f3bf 8f6f 	isb	sy
 8019bfa:	f3bf 8f4f 	dsb	sy
 8019bfe:	60bb      	str	r3, [r7, #8]
}
 8019c00:	bf00      	nop
 8019c02:	e7fe      	b.n	8019c02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8019c04:	693b      	ldr	r3, [r7, #16]
 8019c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019c08:	1e5a      	subs	r2, r3, #1
 8019c0a:	693b      	ldr	r3, [r7, #16]
 8019c0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019c0e:	693b      	ldr	r3, [r7, #16]
 8019c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c12:	693b      	ldr	r3, [r7, #16]
 8019c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019c16:	429a      	cmp	r2, r3
 8019c18:	d02c      	beq.n	8019c74 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019c1a:	693b      	ldr	r3, [r7, #16]
 8019c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d128      	bne.n	8019c74 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019c22:	693b      	ldr	r3, [r7, #16]
 8019c24:	3304      	adds	r3, #4
 8019c26:	4618      	mov	r0, r3
 8019c28:	f7fe f898 	bl	8017d5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019c2c:	693b      	ldr	r3, [r7, #16]
 8019c2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019c30:	693b      	ldr	r3, [r7, #16]
 8019c32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019c34:	693b      	ldr	r3, [r7, #16]
 8019c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019c3c:	693b      	ldr	r3, [r7, #16]
 8019c3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019c40:	693b      	ldr	r3, [r7, #16]
 8019c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c44:	4b0f      	ldr	r3, [pc, #60]	; (8019c84 <xTaskPriorityDisinherit+0xd4>)
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	429a      	cmp	r2, r3
 8019c4a:	d903      	bls.n	8019c54 <xTaskPriorityDisinherit+0xa4>
 8019c4c:	693b      	ldr	r3, [r7, #16]
 8019c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c50:	4a0c      	ldr	r2, [pc, #48]	; (8019c84 <xTaskPriorityDisinherit+0xd4>)
 8019c52:	6013      	str	r3, [r2, #0]
 8019c54:	693b      	ldr	r3, [r7, #16]
 8019c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c58:	4613      	mov	r3, r2
 8019c5a:	009b      	lsls	r3, r3, #2
 8019c5c:	4413      	add	r3, r2
 8019c5e:	009b      	lsls	r3, r3, #2
 8019c60:	4a09      	ldr	r2, [pc, #36]	; (8019c88 <xTaskPriorityDisinherit+0xd8>)
 8019c62:	441a      	add	r2, r3
 8019c64:	693b      	ldr	r3, [r7, #16]
 8019c66:	3304      	adds	r3, #4
 8019c68:	4619      	mov	r1, r3
 8019c6a:	4610      	mov	r0, r2
 8019c6c:	f7fe f819 	bl	8017ca2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8019c70:	2301      	movs	r3, #1
 8019c72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019c74:	697b      	ldr	r3, [r7, #20]
	}
 8019c76:	4618      	mov	r0, r3
 8019c78:	3718      	adds	r7, #24
 8019c7a:	46bd      	mov	sp, r7
 8019c7c:	bd80      	pop	{r7, pc}
 8019c7e:	bf00      	nop
 8019c80:	200016ec 	.word	0x200016ec
 8019c84:	20001bc8 	.word	0x20001bc8
 8019c88:	200016f0 	.word	0x200016f0

08019c8c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8019c8c:	b580      	push	{r7, lr}
 8019c8e:	b088      	sub	sp, #32
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]
 8019c94:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8019c9a:	2301      	movs	r3, #1
 8019c9c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d06a      	beq.n	8019d7a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8019ca4:	69bb      	ldr	r3, [r7, #24]
 8019ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d10a      	bne.n	8019cc2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8019cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cb0:	f383 8811 	msr	BASEPRI, r3
 8019cb4:	f3bf 8f6f 	isb	sy
 8019cb8:	f3bf 8f4f 	dsb	sy
 8019cbc:	60fb      	str	r3, [r7, #12]
}
 8019cbe:	bf00      	nop
 8019cc0:	e7fe      	b.n	8019cc0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8019cc2:	69bb      	ldr	r3, [r7, #24]
 8019cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019cc6:	683a      	ldr	r2, [r7, #0]
 8019cc8:	429a      	cmp	r2, r3
 8019cca:	d902      	bls.n	8019cd2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8019ccc:	683b      	ldr	r3, [r7, #0]
 8019cce:	61fb      	str	r3, [r7, #28]
 8019cd0:	e002      	b.n	8019cd8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8019cd2:	69bb      	ldr	r3, [r7, #24]
 8019cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019cd6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8019cd8:	69bb      	ldr	r3, [r7, #24]
 8019cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019cdc:	69fa      	ldr	r2, [r7, #28]
 8019cde:	429a      	cmp	r2, r3
 8019ce0:	d04b      	beq.n	8019d7a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8019ce2:	69bb      	ldr	r3, [r7, #24]
 8019ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019ce6:	697a      	ldr	r2, [r7, #20]
 8019ce8:	429a      	cmp	r2, r3
 8019cea:	d146      	bne.n	8019d7a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8019cec:	4b25      	ldr	r3, [pc, #148]	; (8019d84 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	69ba      	ldr	r2, [r7, #24]
 8019cf2:	429a      	cmp	r2, r3
 8019cf4:	d10a      	bne.n	8019d0c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8019cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cfa:	f383 8811 	msr	BASEPRI, r3
 8019cfe:	f3bf 8f6f 	isb	sy
 8019d02:	f3bf 8f4f 	dsb	sy
 8019d06:	60bb      	str	r3, [r7, #8]
}
 8019d08:	bf00      	nop
 8019d0a:	e7fe      	b.n	8019d0a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8019d0c:	69bb      	ldr	r3, [r7, #24]
 8019d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8019d12:	69bb      	ldr	r3, [r7, #24]
 8019d14:	69fa      	ldr	r2, [r7, #28]
 8019d16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019d18:	69bb      	ldr	r3, [r7, #24]
 8019d1a:	699b      	ldr	r3, [r3, #24]
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	db04      	blt.n	8019d2a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019d20:	69fb      	ldr	r3, [r7, #28]
 8019d22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019d26:	69bb      	ldr	r3, [r7, #24]
 8019d28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8019d2a:	69bb      	ldr	r3, [r7, #24]
 8019d2c:	6959      	ldr	r1, [r3, #20]
 8019d2e:	693a      	ldr	r2, [r7, #16]
 8019d30:	4613      	mov	r3, r2
 8019d32:	009b      	lsls	r3, r3, #2
 8019d34:	4413      	add	r3, r2
 8019d36:	009b      	lsls	r3, r3, #2
 8019d38:	4a13      	ldr	r2, [pc, #76]	; (8019d88 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8019d3a:	4413      	add	r3, r2
 8019d3c:	4299      	cmp	r1, r3
 8019d3e:	d11c      	bne.n	8019d7a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019d40:	69bb      	ldr	r3, [r7, #24]
 8019d42:	3304      	adds	r3, #4
 8019d44:	4618      	mov	r0, r3
 8019d46:	f7fe f809 	bl	8017d5c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8019d4a:	69bb      	ldr	r3, [r7, #24]
 8019d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019d4e:	4b0f      	ldr	r3, [pc, #60]	; (8019d8c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	429a      	cmp	r2, r3
 8019d54:	d903      	bls.n	8019d5e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8019d56:	69bb      	ldr	r3, [r7, #24]
 8019d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d5a:	4a0c      	ldr	r2, [pc, #48]	; (8019d8c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8019d5c:	6013      	str	r3, [r2, #0]
 8019d5e:	69bb      	ldr	r3, [r7, #24]
 8019d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019d62:	4613      	mov	r3, r2
 8019d64:	009b      	lsls	r3, r3, #2
 8019d66:	4413      	add	r3, r2
 8019d68:	009b      	lsls	r3, r3, #2
 8019d6a:	4a07      	ldr	r2, [pc, #28]	; (8019d88 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8019d6c:	441a      	add	r2, r3
 8019d6e:	69bb      	ldr	r3, [r7, #24]
 8019d70:	3304      	adds	r3, #4
 8019d72:	4619      	mov	r1, r3
 8019d74:	4610      	mov	r0, r2
 8019d76:	f7fd ff94 	bl	8017ca2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019d7a:	bf00      	nop
 8019d7c:	3720      	adds	r7, #32
 8019d7e:	46bd      	mov	sp, r7
 8019d80:	bd80      	pop	{r7, pc}
 8019d82:	bf00      	nop
 8019d84:	200016ec 	.word	0x200016ec
 8019d88:	200016f0 	.word	0x200016f0
 8019d8c:	20001bc8 	.word	0x20001bc8

08019d90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8019d90:	b480      	push	{r7}
 8019d92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8019d94:	4b07      	ldr	r3, [pc, #28]	; (8019db4 <pvTaskIncrementMutexHeldCount+0x24>)
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d004      	beq.n	8019da6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8019d9c:	4b05      	ldr	r3, [pc, #20]	; (8019db4 <pvTaskIncrementMutexHeldCount+0x24>)
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019da2:	3201      	adds	r2, #1
 8019da4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8019da6:	4b03      	ldr	r3, [pc, #12]	; (8019db4 <pvTaskIncrementMutexHeldCount+0x24>)
 8019da8:	681b      	ldr	r3, [r3, #0]
	}
 8019daa:	4618      	mov	r0, r3
 8019dac:	46bd      	mov	sp, r7
 8019dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019db2:	4770      	bx	lr
 8019db4:	200016ec 	.word	0x200016ec

08019db8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019db8:	b580      	push	{r7, lr}
 8019dba:	b084      	sub	sp, #16
 8019dbc:	af00      	add	r7, sp, #0
 8019dbe:	6078      	str	r0, [r7, #4]
 8019dc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019dc2:	4b21      	ldr	r3, [pc, #132]	; (8019e48 <prvAddCurrentTaskToDelayedList+0x90>)
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019dc8:	4b20      	ldr	r3, [pc, #128]	; (8019e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	3304      	adds	r3, #4
 8019dce:	4618      	mov	r0, r3
 8019dd0:	f7fd ffc4 	bl	8017d5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019dda:	d10a      	bne.n	8019df2 <prvAddCurrentTaskToDelayedList+0x3a>
 8019ddc:	683b      	ldr	r3, [r7, #0]
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d007      	beq.n	8019df2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019de2:	4b1a      	ldr	r3, [pc, #104]	; (8019e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8019de4:	681b      	ldr	r3, [r3, #0]
 8019de6:	3304      	adds	r3, #4
 8019de8:	4619      	mov	r1, r3
 8019dea:	4819      	ldr	r0, [pc, #100]	; (8019e50 <prvAddCurrentTaskToDelayedList+0x98>)
 8019dec:	f7fd ff59 	bl	8017ca2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019df0:	e026      	b.n	8019e40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019df2:	68fa      	ldr	r2, [r7, #12]
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	4413      	add	r3, r2
 8019df8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019dfa:	4b14      	ldr	r3, [pc, #80]	; (8019e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	68ba      	ldr	r2, [r7, #8]
 8019e00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019e02:	68ba      	ldr	r2, [r7, #8]
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	429a      	cmp	r2, r3
 8019e08:	d209      	bcs.n	8019e1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019e0a:	4b12      	ldr	r3, [pc, #72]	; (8019e54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8019e0c:	681a      	ldr	r2, [r3, #0]
 8019e0e:	4b0f      	ldr	r3, [pc, #60]	; (8019e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	3304      	adds	r3, #4
 8019e14:	4619      	mov	r1, r3
 8019e16:	4610      	mov	r0, r2
 8019e18:	f7fd ff67 	bl	8017cea <vListInsert>
}
 8019e1c:	e010      	b.n	8019e40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019e1e:	4b0e      	ldr	r3, [pc, #56]	; (8019e58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8019e20:	681a      	ldr	r2, [r3, #0]
 8019e22:	4b0a      	ldr	r3, [pc, #40]	; (8019e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	3304      	adds	r3, #4
 8019e28:	4619      	mov	r1, r3
 8019e2a:	4610      	mov	r0, r2
 8019e2c:	f7fd ff5d 	bl	8017cea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019e30:	4b0a      	ldr	r3, [pc, #40]	; (8019e5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	68ba      	ldr	r2, [r7, #8]
 8019e36:	429a      	cmp	r2, r3
 8019e38:	d202      	bcs.n	8019e40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8019e3a:	4a08      	ldr	r2, [pc, #32]	; (8019e5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8019e3c:	68bb      	ldr	r3, [r7, #8]
 8019e3e:	6013      	str	r3, [r2, #0]
}
 8019e40:	bf00      	nop
 8019e42:	3710      	adds	r7, #16
 8019e44:	46bd      	mov	sp, r7
 8019e46:	bd80      	pop	{r7, pc}
 8019e48:	20001bc4 	.word	0x20001bc4
 8019e4c:	200016ec 	.word	0x200016ec
 8019e50:	20001bac 	.word	0x20001bac
 8019e54:	20001b7c 	.word	0x20001b7c
 8019e58:	20001b78 	.word	0x20001b78
 8019e5c:	20001be0 	.word	0x20001be0

08019e60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8019e60:	b580      	push	{r7, lr}
 8019e62:	b08a      	sub	sp, #40	; 0x28
 8019e64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8019e66:	2300      	movs	r3, #0
 8019e68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8019e6a:	f000 fb07 	bl	801a47c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8019e6e:	4b1c      	ldr	r3, [pc, #112]	; (8019ee0 <xTimerCreateTimerTask+0x80>)
 8019e70:	681b      	ldr	r3, [r3, #0]
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d021      	beq.n	8019eba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8019e76:	2300      	movs	r3, #0
 8019e78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8019e7a:	2300      	movs	r3, #0
 8019e7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8019e7e:	1d3a      	adds	r2, r7, #4
 8019e80:	f107 0108 	add.w	r1, r7, #8
 8019e84:	f107 030c 	add.w	r3, r7, #12
 8019e88:	4618      	mov	r0, r3
 8019e8a:	f7fd fec3 	bl	8017c14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8019e8e:	6879      	ldr	r1, [r7, #4]
 8019e90:	68bb      	ldr	r3, [r7, #8]
 8019e92:	68fa      	ldr	r2, [r7, #12]
 8019e94:	9202      	str	r2, [sp, #8]
 8019e96:	9301      	str	r3, [sp, #4]
 8019e98:	2302      	movs	r3, #2
 8019e9a:	9300      	str	r3, [sp, #0]
 8019e9c:	2300      	movs	r3, #0
 8019e9e:	460a      	mov	r2, r1
 8019ea0:	4910      	ldr	r1, [pc, #64]	; (8019ee4 <xTimerCreateTimerTask+0x84>)
 8019ea2:	4811      	ldr	r0, [pc, #68]	; (8019ee8 <xTimerCreateTimerTask+0x88>)
 8019ea4:	f7fe ffde 	bl	8018e64 <xTaskCreateStatic>
 8019ea8:	4603      	mov	r3, r0
 8019eaa:	4a10      	ldr	r2, [pc, #64]	; (8019eec <xTimerCreateTimerTask+0x8c>)
 8019eac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8019eae:	4b0f      	ldr	r3, [pc, #60]	; (8019eec <xTimerCreateTimerTask+0x8c>)
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d001      	beq.n	8019eba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8019eb6:	2301      	movs	r3, #1
 8019eb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8019eba:	697b      	ldr	r3, [r7, #20]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d10a      	bne.n	8019ed6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8019ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ec4:	f383 8811 	msr	BASEPRI, r3
 8019ec8:	f3bf 8f6f 	isb	sy
 8019ecc:	f3bf 8f4f 	dsb	sy
 8019ed0:	613b      	str	r3, [r7, #16]
}
 8019ed2:	bf00      	nop
 8019ed4:	e7fe      	b.n	8019ed4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8019ed6:	697b      	ldr	r3, [r7, #20]
}
 8019ed8:	4618      	mov	r0, r3
 8019eda:	3718      	adds	r7, #24
 8019edc:	46bd      	mov	sp, r7
 8019ede:	bd80      	pop	{r7, pc}
 8019ee0:	20001c1c 	.word	0x20001c1c
 8019ee4:	08020d14 	.word	0x08020d14
 8019ee8:	0801a025 	.word	0x0801a025
 8019eec:	20001c20 	.word	0x20001c20

08019ef0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019ef0:	b580      	push	{r7, lr}
 8019ef2:	b08a      	sub	sp, #40	; 0x28
 8019ef4:	af00      	add	r7, sp, #0
 8019ef6:	60f8      	str	r0, [r7, #12]
 8019ef8:	60b9      	str	r1, [r7, #8]
 8019efa:	607a      	str	r2, [r7, #4]
 8019efc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019efe:	2300      	movs	r3, #0
 8019f00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019f02:	68fb      	ldr	r3, [r7, #12]
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d10a      	bne.n	8019f1e <xTimerGenericCommand+0x2e>
	__asm volatile
 8019f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f0c:	f383 8811 	msr	BASEPRI, r3
 8019f10:	f3bf 8f6f 	isb	sy
 8019f14:	f3bf 8f4f 	dsb	sy
 8019f18:	623b      	str	r3, [r7, #32]
}
 8019f1a:	bf00      	nop
 8019f1c:	e7fe      	b.n	8019f1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019f1e:	4b1a      	ldr	r3, [pc, #104]	; (8019f88 <xTimerGenericCommand+0x98>)
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d02a      	beq.n	8019f7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019f26:	68bb      	ldr	r3, [r7, #8]
 8019f28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019f32:	68bb      	ldr	r3, [r7, #8]
 8019f34:	2b05      	cmp	r3, #5
 8019f36:	dc18      	bgt.n	8019f6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019f38:	f7ff fdb4 	bl	8019aa4 <xTaskGetSchedulerState>
 8019f3c:	4603      	mov	r3, r0
 8019f3e:	2b02      	cmp	r3, #2
 8019f40:	d109      	bne.n	8019f56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019f42:	4b11      	ldr	r3, [pc, #68]	; (8019f88 <xTimerGenericCommand+0x98>)
 8019f44:	6818      	ldr	r0, [r3, #0]
 8019f46:	f107 0110 	add.w	r1, r7, #16
 8019f4a:	2300      	movs	r3, #0
 8019f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019f4e:	f7fe f923 	bl	8018198 <xQueueGenericSend>
 8019f52:	6278      	str	r0, [r7, #36]	; 0x24
 8019f54:	e012      	b.n	8019f7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019f56:	4b0c      	ldr	r3, [pc, #48]	; (8019f88 <xTimerGenericCommand+0x98>)
 8019f58:	6818      	ldr	r0, [r3, #0]
 8019f5a:	f107 0110 	add.w	r1, r7, #16
 8019f5e:	2300      	movs	r3, #0
 8019f60:	2200      	movs	r2, #0
 8019f62:	f7fe f919 	bl	8018198 <xQueueGenericSend>
 8019f66:	6278      	str	r0, [r7, #36]	; 0x24
 8019f68:	e008      	b.n	8019f7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019f6a:	4b07      	ldr	r3, [pc, #28]	; (8019f88 <xTimerGenericCommand+0x98>)
 8019f6c:	6818      	ldr	r0, [r3, #0]
 8019f6e:	f107 0110 	add.w	r1, r7, #16
 8019f72:	2300      	movs	r3, #0
 8019f74:	683a      	ldr	r2, [r7, #0]
 8019f76:	f7fe fa0d 	bl	8018394 <xQueueGenericSendFromISR>
 8019f7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019f7e:	4618      	mov	r0, r3
 8019f80:	3728      	adds	r7, #40	; 0x28
 8019f82:	46bd      	mov	sp, r7
 8019f84:	bd80      	pop	{r7, pc}
 8019f86:	bf00      	nop
 8019f88:	20001c1c 	.word	0x20001c1c

08019f8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8019f8c:	b580      	push	{r7, lr}
 8019f8e:	b088      	sub	sp, #32
 8019f90:	af02      	add	r7, sp, #8
 8019f92:	6078      	str	r0, [r7, #4]
 8019f94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019f96:	4b22      	ldr	r3, [pc, #136]	; (801a020 <prvProcessExpiredTimer+0x94>)
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	68db      	ldr	r3, [r3, #12]
 8019f9c:	68db      	ldr	r3, [r3, #12]
 8019f9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019fa0:	697b      	ldr	r3, [r7, #20]
 8019fa2:	3304      	adds	r3, #4
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	f7fd fed9 	bl	8017d5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019faa:	697b      	ldr	r3, [r7, #20]
 8019fac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019fb0:	f003 0304 	and.w	r3, r3, #4
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d022      	beq.n	8019ffe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019fb8:	697b      	ldr	r3, [r7, #20]
 8019fba:	699a      	ldr	r2, [r3, #24]
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	18d1      	adds	r1, r2, r3
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	683a      	ldr	r2, [r7, #0]
 8019fc4:	6978      	ldr	r0, [r7, #20]
 8019fc6:	f000 f8d1 	bl	801a16c <prvInsertTimerInActiveList>
 8019fca:	4603      	mov	r3, r0
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d01f      	beq.n	801a010 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019fd0:	2300      	movs	r3, #0
 8019fd2:	9300      	str	r3, [sp, #0]
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	687a      	ldr	r2, [r7, #4]
 8019fd8:	2100      	movs	r1, #0
 8019fda:	6978      	ldr	r0, [r7, #20]
 8019fdc:	f7ff ff88 	bl	8019ef0 <xTimerGenericCommand>
 8019fe0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019fe2:	693b      	ldr	r3, [r7, #16]
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d113      	bne.n	801a010 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fec:	f383 8811 	msr	BASEPRI, r3
 8019ff0:	f3bf 8f6f 	isb	sy
 8019ff4:	f3bf 8f4f 	dsb	sy
 8019ff8:	60fb      	str	r3, [r7, #12]
}
 8019ffa:	bf00      	nop
 8019ffc:	e7fe      	b.n	8019ffc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019ffe:	697b      	ldr	r3, [r7, #20]
 801a000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a004:	f023 0301 	bic.w	r3, r3, #1
 801a008:	b2da      	uxtb	r2, r3
 801a00a:	697b      	ldr	r3, [r7, #20]
 801a00c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a010:	697b      	ldr	r3, [r7, #20]
 801a012:	6a1b      	ldr	r3, [r3, #32]
 801a014:	6978      	ldr	r0, [r7, #20]
 801a016:	4798      	blx	r3
}
 801a018:	bf00      	nop
 801a01a:	3718      	adds	r7, #24
 801a01c:	46bd      	mov	sp, r7
 801a01e:	bd80      	pop	{r7, pc}
 801a020:	20001c14 	.word	0x20001c14

0801a024 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801a024:	b580      	push	{r7, lr}
 801a026:	b084      	sub	sp, #16
 801a028:	af00      	add	r7, sp, #0
 801a02a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801a02c:	f107 0308 	add.w	r3, r7, #8
 801a030:	4618      	mov	r0, r3
 801a032:	f000 f857 	bl	801a0e4 <prvGetNextExpireTime>
 801a036:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801a038:	68bb      	ldr	r3, [r7, #8]
 801a03a:	4619      	mov	r1, r3
 801a03c:	68f8      	ldr	r0, [r7, #12]
 801a03e:	f000 f803 	bl	801a048 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801a042:	f000 f8d5 	bl	801a1f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801a046:	e7f1      	b.n	801a02c <prvTimerTask+0x8>

0801a048 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801a048:	b580      	push	{r7, lr}
 801a04a:	b084      	sub	sp, #16
 801a04c:	af00      	add	r7, sp, #0
 801a04e:	6078      	str	r0, [r7, #4]
 801a050:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801a052:	f7ff f90f 	bl	8019274 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a056:	f107 0308 	add.w	r3, r7, #8
 801a05a:	4618      	mov	r0, r3
 801a05c:	f000 f866 	bl	801a12c <prvSampleTimeNow>
 801a060:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801a062:	68bb      	ldr	r3, [r7, #8]
 801a064:	2b00      	cmp	r3, #0
 801a066:	d130      	bne.n	801a0ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801a068:	683b      	ldr	r3, [r7, #0]
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d10a      	bne.n	801a084 <prvProcessTimerOrBlockTask+0x3c>
 801a06e:	687a      	ldr	r2, [r7, #4]
 801a070:	68fb      	ldr	r3, [r7, #12]
 801a072:	429a      	cmp	r2, r3
 801a074:	d806      	bhi.n	801a084 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801a076:	f7ff f90b 	bl	8019290 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801a07a:	68f9      	ldr	r1, [r7, #12]
 801a07c:	6878      	ldr	r0, [r7, #4]
 801a07e:	f7ff ff85 	bl	8019f8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801a082:	e024      	b.n	801a0ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801a084:	683b      	ldr	r3, [r7, #0]
 801a086:	2b00      	cmp	r3, #0
 801a088:	d008      	beq.n	801a09c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801a08a:	4b13      	ldr	r3, [pc, #76]	; (801a0d8 <prvProcessTimerOrBlockTask+0x90>)
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	2b00      	cmp	r3, #0
 801a092:	d101      	bne.n	801a098 <prvProcessTimerOrBlockTask+0x50>
 801a094:	2301      	movs	r3, #1
 801a096:	e000      	b.n	801a09a <prvProcessTimerOrBlockTask+0x52>
 801a098:	2300      	movs	r3, #0
 801a09a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801a09c:	4b0f      	ldr	r3, [pc, #60]	; (801a0dc <prvProcessTimerOrBlockTask+0x94>)
 801a09e:	6818      	ldr	r0, [r3, #0]
 801a0a0:	687a      	ldr	r2, [r7, #4]
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	1ad3      	subs	r3, r2, r3
 801a0a6:	683a      	ldr	r2, [r7, #0]
 801a0a8:	4619      	mov	r1, r3
 801a0aa:	f7fe fea7 	bl	8018dfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801a0ae:	f7ff f8ef 	bl	8019290 <xTaskResumeAll>
 801a0b2:	4603      	mov	r3, r0
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d10a      	bne.n	801a0ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801a0b8:	4b09      	ldr	r3, [pc, #36]	; (801a0e0 <prvProcessTimerOrBlockTask+0x98>)
 801a0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a0be:	601a      	str	r2, [r3, #0]
 801a0c0:	f3bf 8f4f 	dsb	sy
 801a0c4:	f3bf 8f6f 	isb	sy
}
 801a0c8:	e001      	b.n	801a0ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801a0ca:	f7ff f8e1 	bl	8019290 <xTaskResumeAll>
}
 801a0ce:	bf00      	nop
 801a0d0:	3710      	adds	r7, #16
 801a0d2:	46bd      	mov	sp, r7
 801a0d4:	bd80      	pop	{r7, pc}
 801a0d6:	bf00      	nop
 801a0d8:	20001c18 	.word	0x20001c18
 801a0dc:	20001c1c 	.word	0x20001c1c
 801a0e0:	e000ed04 	.word	0xe000ed04

0801a0e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801a0e4:	b480      	push	{r7}
 801a0e6:	b085      	sub	sp, #20
 801a0e8:	af00      	add	r7, sp, #0
 801a0ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801a0ec:	4b0e      	ldr	r3, [pc, #56]	; (801a128 <prvGetNextExpireTime+0x44>)
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d101      	bne.n	801a0fa <prvGetNextExpireTime+0x16>
 801a0f6:	2201      	movs	r2, #1
 801a0f8:	e000      	b.n	801a0fc <prvGetNextExpireTime+0x18>
 801a0fa:	2200      	movs	r2, #0
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	2b00      	cmp	r3, #0
 801a106:	d105      	bne.n	801a114 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a108:	4b07      	ldr	r3, [pc, #28]	; (801a128 <prvGetNextExpireTime+0x44>)
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	68db      	ldr	r3, [r3, #12]
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	60fb      	str	r3, [r7, #12]
 801a112:	e001      	b.n	801a118 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801a114:	2300      	movs	r3, #0
 801a116:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801a118:	68fb      	ldr	r3, [r7, #12]
}
 801a11a:	4618      	mov	r0, r3
 801a11c:	3714      	adds	r7, #20
 801a11e:	46bd      	mov	sp, r7
 801a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a124:	4770      	bx	lr
 801a126:	bf00      	nop
 801a128:	20001c14 	.word	0x20001c14

0801a12c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801a12c:	b580      	push	{r7, lr}
 801a12e:	b084      	sub	sp, #16
 801a130:	af00      	add	r7, sp, #0
 801a132:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801a134:	f7ff f94a 	bl	80193cc <xTaskGetTickCount>
 801a138:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801a13a:	4b0b      	ldr	r3, [pc, #44]	; (801a168 <prvSampleTimeNow+0x3c>)
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	68fa      	ldr	r2, [r7, #12]
 801a140:	429a      	cmp	r2, r3
 801a142:	d205      	bcs.n	801a150 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801a144:	f000 f936 	bl	801a3b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	2201      	movs	r2, #1
 801a14c:	601a      	str	r2, [r3, #0]
 801a14e:	e002      	b.n	801a156 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	2200      	movs	r2, #0
 801a154:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801a156:	4a04      	ldr	r2, [pc, #16]	; (801a168 <prvSampleTimeNow+0x3c>)
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801a15c:	68fb      	ldr	r3, [r7, #12]
}
 801a15e:	4618      	mov	r0, r3
 801a160:	3710      	adds	r7, #16
 801a162:	46bd      	mov	sp, r7
 801a164:	bd80      	pop	{r7, pc}
 801a166:	bf00      	nop
 801a168:	20001c24 	.word	0x20001c24

0801a16c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801a16c:	b580      	push	{r7, lr}
 801a16e:	b086      	sub	sp, #24
 801a170:	af00      	add	r7, sp, #0
 801a172:	60f8      	str	r0, [r7, #12]
 801a174:	60b9      	str	r1, [r7, #8]
 801a176:	607a      	str	r2, [r7, #4]
 801a178:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801a17a:	2300      	movs	r3, #0
 801a17c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	68ba      	ldr	r2, [r7, #8]
 801a182:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	68fa      	ldr	r2, [r7, #12]
 801a188:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801a18a:	68ba      	ldr	r2, [r7, #8]
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	429a      	cmp	r2, r3
 801a190:	d812      	bhi.n	801a1b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a192:	687a      	ldr	r2, [r7, #4]
 801a194:	683b      	ldr	r3, [r7, #0]
 801a196:	1ad2      	subs	r2, r2, r3
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	699b      	ldr	r3, [r3, #24]
 801a19c:	429a      	cmp	r2, r3
 801a19e:	d302      	bcc.n	801a1a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801a1a0:	2301      	movs	r3, #1
 801a1a2:	617b      	str	r3, [r7, #20]
 801a1a4:	e01b      	b.n	801a1de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801a1a6:	4b10      	ldr	r3, [pc, #64]	; (801a1e8 <prvInsertTimerInActiveList+0x7c>)
 801a1a8:	681a      	ldr	r2, [r3, #0]
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	3304      	adds	r3, #4
 801a1ae:	4619      	mov	r1, r3
 801a1b0:	4610      	mov	r0, r2
 801a1b2:	f7fd fd9a 	bl	8017cea <vListInsert>
 801a1b6:	e012      	b.n	801a1de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801a1b8:	687a      	ldr	r2, [r7, #4]
 801a1ba:	683b      	ldr	r3, [r7, #0]
 801a1bc:	429a      	cmp	r2, r3
 801a1be:	d206      	bcs.n	801a1ce <prvInsertTimerInActiveList+0x62>
 801a1c0:	68ba      	ldr	r2, [r7, #8]
 801a1c2:	683b      	ldr	r3, [r7, #0]
 801a1c4:	429a      	cmp	r2, r3
 801a1c6:	d302      	bcc.n	801a1ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801a1c8:	2301      	movs	r3, #1
 801a1ca:	617b      	str	r3, [r7, #20]
 801a1cc:	e007      	b.n	801a1de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a1ce:	4b07      	ldr	r3, [pc, #28]	; (801a1ec <prvInsertTimerInActiveList+0x80>)
 801a1d0:	681a      	ldr	r2, [r3, #0]
 801a1d2:	68fb      	ldr	r3, [r7, #12]
 801a1d4:	3304      	adds	r3, #4
 801a1d6:	4619      	mov	r1, r3
 801a1d8:	4610      	mov	r0, r2
 801a1da:	f7fd fd86 	bl	8017cea <vListInsert>
		}
	}

	return xProcessTimerNow;
 801a1de:	697b      	ldr	r3, [r7, #20]
}
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	3718      	adds	r7, #24
 801a1e4:	46bd      	mov	sp, r7
 801a1e6:	bd80      	pop	{r7, pc}
 801a1e8:	20001c18 	.word	0x20001c18
 801a1ec:	20001c14 	.word	0x20001c14

0801a1f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801a1f0:	b580      	push	{r7, lr}
 801a1f2:	b08e      	sub	sp, #56	; 0x38
 801a1f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a1f6:	e0ca      	b.n	801a38e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	da18      	bge.n	801a230 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801a1fe:	1d3b      	adds	r3, r7, #4
 801a200:	3304      	adds	r3, #4
 801a202:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801a204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a206:	2b00      	cmp	r3, #0
 801a208:	d10a      	bne.n	801a220 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801a20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a20e:	f383 8811 	msr	BASEPRI, r3
 801a212:	f3bf 8f6f 	isb	sy
 801a216:	f3bf 8f4f 	dsb	sy
 801a21a:	61fb      	str	r3, [r7, #28]
}
 801a21c:	bf00      	nop
 801a21e:	e7fe      	b.n	801a21e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801a220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a226:	6850      	ldr	r0, [r2, #4]
 801a228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a22a:	6892      	ldr	r2, [r2, #8]
 801a22c:	4611      	mov	r1, r2
 801a22e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	2b00      	cmp	r3, #0
 801a234:	f2c0 80ab 	blt.w	801a38e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801a238:	68fb      	ldr	r3, [r7, #12]
 801a23a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a23e:	695b      	ldr	r3, [r3, #20]
 801a240:	2b00      	cmp	r3, #0
 801a242:	d004      	beq.n	801a24e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a246:	3304      	adds	r3, #4
 801a248:	4618      	mov	r0, r3
 801a24a:	f7fd fd87 	bl	8017d5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a24e:	463b      	mov	r3, r7
 801a250:	4618      	mov	r0, r3
 801a252:	f7ff ff6b 	bl	801a12c <prvSampleTimeNow>
 801a256:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	2b09      	cmp	r3, #9
 801a25c:	f200 8096 	bhi.w	801a38c <prvProcessReceivedCommands+0x19c>
 801a260:	a201      	add	r2, pc, #4	; (adr r2, 801a268 <prvProcessReceivedCommands+0x78>)
 801a262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a266:	bf00      	nop
 801a268:	0801a291 	.word	0x0801a291
 801a26c:	0801a291 	.word	0x0801a291
 801a270:	0801a291 	.word	0x0801a291
 801a274:	0801a305 	.word	0x0801a305
 801a278:	0801a319 	.word	0x0801a319
 801a27c:	0801a363 	.word	0x0801a363
 801a280:	0801a291 	.word	0x0801a291
 801a284:	0801a291 	.word	0x0801a291
 801a288:	0801a305 	.word	0x0801a305
 801a28c:	0801a319 	.word	0x0801a319
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a296:	f043 0301 	orr.w	r3, r3, #1
 801a29a:	b2da      	uxtb	r2, r3
 801a29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a29e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801a2a2:	68ba      	ldr	r2, [r7, #8]
 801a2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2a6:	699b      	ldr	r3, [r3, #24]
 801a2a8:	18d1      	adds	r1, r2, r3
 801a2aa:	68bb      	ldr	r3, [r7, #8]
 801a2ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a2ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a2b0:	f7ff ff5c 	bl	801a16c <prvInsertTimerInActiveList>
 801a2b4:	4603      	mov	r3, r0
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d069      	beq.n	801a38e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2bc:	6a1b      	ldr	r3, [r3, #32]
 801a2be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a2c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a2c8:	f003 0304 	and.w	r3, r3, #4
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d05e      	beq.n	801a38e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801a2d0:	68ba      	ldr	r2, [r7, #8]
 801a2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2d4:	699b      	ldr	r3, [r3, #24]
 801a2d6:	441a      	add	r2, r3
 801a2d8:	2300      	movs	r3, #0
 801a2da:	9300      	str	r3, [sp, #0]
 801a2dc:	2300      	movs	r3, #0
 801a2de:	2100      	movs	r1, #0
 801a2e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a2e2:	f7ff fe05 	bl	8019ef0 <xTimerGenericCommand>
 801a2e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801a2e8:	6a3b      	ldr	r3, [r7, #32]
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d14f      	bne.n	801a38e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801a2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2f2:	f383 8811 	msr	BASEPRI, r3
 801a2f6:	f3bf 8f6f 	isb	sy
 801a2fa:	f3bf 8f4f 	dsb	sy
 801a2fe:	61bb      	str	r3, [r7, #24]
}
 801a300:	bf00      	nop
 801a302:	e7fe      	b.n	801a302 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a306:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a30a:	f023 0301 	bic.w	r3, r3, #1
 801a30e:	b2da      	uxtb	r2, r3
 801a310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801a316:	e03a      	b.n	801a38e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a31a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a31e:	f043 0301 	orr.w	r3, r3, #1
 801a322:	b2da      	uxtb	r2, r3
 801a324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801a32a:	68ba      	ldr	r2, [r7, #8]
 801a32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a32e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801a330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a332:	699b      	ldr	r3, [r3, #24]
 801a334:	2b00      	cmp	r3, #0
 801a336:	d10a      	bne.n	801a34e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801a338:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a33c:	f383 8811 	msr	BASEPRI, r3
 801a340:	f3bf 8f6f 	isb	sy
 801a344:	f3bf 8f4f 	dsb	sy
 801a348:	617b      	str	r3, [r7, #20]
}
 801a34a:	bf00      	nop
 801a34c:	e7fe      	b.n	801a34c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801a34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a350:	699a      	ldr	r2, [r3, #24]
 801a352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a354:	18d1      	adds	r1, r2, r3
 801a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a35a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a35c:	f7ff ff06 	bl	801a16c <prvInsertTimerInActiveList>
					break;
 801a360:	e015      	b.n	801a38e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801a362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a368:	f003 0302 	and.w	r3, r3, #2
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d103      	bne.n	801a378 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801a370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a372:	f000 fbdd 	bl	801ab30 <vPortFree>
 801a376:	e00a      	b.n	801a38e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a37a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a37e:	f023 0301 	bic.w	r3, r3, #1
 801a382:	b2da      	uxtb	r2, r3
 801a384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801a38a:	e000      	b.n	801a38e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 801a38c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a38e:	4b08      	ldr	r3, [pc, #32]	; (801a3b0 <prvProcessReceivedCommands+0x1c0>)
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	1d39      	adds	r1, r7, #4
 801a394:	2200      	movs	r2, #0
 801a396:	4618      	mov	r0, r3
 801a398:	f7fe f924 	bl	80185e4 <xQueueReceive>
 801a39c:	4603      	mov	r3, r0
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	f47f af2a 	bne.w	801a1f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801a3a4:	bf00      	nop
 801a3a6:	bf00      	nop
 801a3a8:	3730      	adds	r7, #48	; 0x30
 801a3aa:	46bd      	mov	sp, r7
 801a3ac:	bd80      	pop	{r7, pc}
 801a3ae:	bf00      	nop
 801a3b0:	20001c1c 	.word	0x20001c1c

0801a3b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801a3b4:	b580      	push	{r7, lr}
 801a3b6:	b088      	sub	sp, #32
 801a3b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a3ba:	e048      	b.n	801a44e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a3bc:	4b2d      	ldr	r3, [pc, #180]	; (801a474 <prvSwitchTimerLists+0xc0>)
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	68db      	ldr	r3, [r3, #12]
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a3c6:	4b2b      	ldr	r3, [pc, #172]	; (801a474 <prvSwitchTimerLists+0xc0>)
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	68db      	ldr	r3, [r3, #12]
 801a3cc:	68db      	ldr	r3, [r3, #12]
 801a3ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a3d0:	68fb      	ldr	r3, [r7, #12]
 801a3d2:	3304      	adds	r3, #4
 801a3d4:	4618      	mov	r0, r3
 801a3d6:	f7fd fcc1 	bl	8017d5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a3da:	68fb      	ldr	r3, [r7, #12]
 801a3dc:	6a1b      	ldr	r3, [r3, #32]
 801a3de:	68f8      	ldr	r0, [r7, #12]
 801a3e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a3e2:	68fb      	ldr	r3, [r7, #12]
 801a3e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a3e8:	f003 0304 	and.w	r3, r3, #4
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d02e      	beq.n	801a44e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801a3f0:	68fb      	ldr	r3, [r7, #12]
 801a3f2:	699b      	ldr	r3, [r3, #24]
 801a3f4:	693a      	ldr	r2, [r7, #16]
 801a3f6:	4413      	add	r3, r2
 801a3f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801a3fa:	68ba      	ldr	r2, [r7, #8]
 801a3fc:	693b      	ldr	r3, [r7, #16]
 801a3fe:	429a      	cmp	r2, r3
 801a400:	d90e      	bls.n	801a420 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	68ba      	ldr	r2, [r7, #8]
 801a406:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	68fa      	ldr	r2, [r7, #12]
 801a40c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a40e:	4b19      	ldr	r3, [pc, #100]	; (801a474 <prvSwitchTimerLists+0xc0>)
 801a410:	681a      	ldr	r2, [r3, #0]
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	3304      	adds	r3, #4
 801a416:	4619      	mov	r1, r3
 801a418:	4610      	mov	r0, r2
 801a41a:	f7fd fc66 	bl	8017cea <vListInsert>
 801a41e:	e016      	b.n	801a44e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a420:	2300      	movs	r3, #0
 801a422:	9300      	str	r3, [sp, #0]
 801a424:	2300      	movs	r3, #0
 801a426:	693a      	ldr	r2, [r7, #16]
 801a428:	2100      	movs	r1, #0
 801a42a:	68f8      	ldr	r0, [r7, #12]
 801a42c:	f7ff fd60 	bl	8019ef0 <xTimerGenericCommand>
 801a430:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	2b00      	cmp	r3, #0
 801a436:	d10a      	bne.n	801a44e <prvSwitchTimerLists+0x9a>
	__asm volatile
 801a438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a43c:	f383 8811 	msr	BASEPRI, r3
 801a440:	f3bf 8f6f 	isb	sy
 801a444:	f3bf 8f4f 	dsb	sy
 801a448:	603b      	str	r3, [r7, #0]
}
 801a44a:	bf00      	nop
 801a44c:	e7fe      	b.n	801a44c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a44e:	4b09      	ldr	r3, [pc, #36]	; (801a474 <prvSwitchTimerLists+0xc0>)
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	2b00      	cmp	r3, #0
 801a456:	d1b1      	bne.n	801a3bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801a458:	4b06      	ldr	r3, [pc, #24]	; (801a474 <prvSwitchTimerLists+0xc0>)
 801a45a:	681b      	ldr	r3, [r3, #0]
 801a45c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801a45e:	4b06      	ldr	r3, [pc, #24]	; (801a478 <prvSwitchTimerLists+0xc4>)
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	4a04      	ldr	r2, [pc, #16]	; (801a474 <prvSwitchTimerLists+0xc0>)
 801a464:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801a466:	4a04      	ldr	r2, [pc, #16]	; (801a478 <prvSwitchTimerLists+0xc4>)
 801a468:	697b      	ldr	r3, [r7, #20]
 801a46a:	6013      	str	r3, [r2, #0]
}
 801a46c:	bf00      	nop
 801a46e:	3718      	adds	r7, #24
 801a470:	46bd      	mov	sp, r7
 801a472:	bd80      	pop	{r7, pc}
 801a474:	20001c14 	.word	0x20001c14
 801a478:	20001c18 	.word	0x20001c18

0801a47c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801a47c:	b580      	push	{r7, lr}
 801a47e:	b082      	sub	sp, #8
 801a480:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801a482:	f000 f967 	bl	801a754 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801a486:	4b15      	ldr	r3, [pc, #84]	; (801a4dc <prvCheckForValidListAndQueue+0x60>)
 801a488:	681b      	ldr	r3, [r3, #0]
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d120      	bne.n	801a4d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801a48e:	4814      	ldr	r0, [pc, #80]	; (801a4e0 <prvCheckForValidListAndQueue+0x64>)
 801a490:	f7fd fbda 	bl	8017c48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801a494:	4813      	ldr	r0, [pc, #76]	; (801a4e4 <prvCheckForValidListAndQueue+0x68>)
 801a496:	f7fd fbd7 	bl	8017c48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801a49a:	4b13      	ldr	r3, [pc, #76]	; (801a4e8 <prvCheckForValidListAndQueue+0x6c>)
 801a49c:	4a10      	ldr	r2, [pc, #64]	; (801a4e0 <prvCheckForValidListAndQueue+0x64>)
 801a49e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801a4a0:	4b12      	ldr	r3, [pc, #72]	; (801a4ec <prvCheckForValidListAndQueue+0x70>)
 801a4a2:	4a10      	ldr	r2, [pc, #64]	; (801a4e4 <prvCheckForValidListAndQueue+0x68>)
 801a4a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801a4a6:	2300      	movs	r3, #0
 801a4a8:	9300      	str	r3, [sp, #0]
 801a4aa:	4b11      	ldr	r3, [pc, #68]	; (801a4f0 <prvCheckForValidListAndQueue+0x74>)
 801a4ac:	4a11      	ldr	r2, [pc, #68]	; (801a4f4 <prvCheckForValidListAndQueue+0x78>)
 801a4ae:	2110      	movs	r1, #16
 801a4b0:	200a      	movs	r0, #10
 801a4b2:	f7fd fce5 	bl	8017e80 <xQueueGenericCreateStatic>
 801a4b6:	4603      	mov	r3, r0
 801a4b8:	4a08      	ldr	r2, [pc, #32]	; (801a4dc <prvCheckForValidListAndQueue+0x60>)
 801a4ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801a4bc:	4b07      	ldr	r3, [pc, #28]	; (801a4dc <prvCheckForValidListAndQueue+0x60>)
 801a4be:	681b      	ldr	r3, [r3, #0]
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d005      	beq.n	801a4d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801a4c4:	4b05      	ldr	r3, [pc, #20]	; (801a4dc <prvCheckForValidListAndQueue+0x60>)
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	490b      	ldr	r1, [pc, #44]	; (801a4f8 <prvCheckForValidListAndQueue+0x7c>)
 801a4ca:	4618      	mov	r0, r3
 801a4cc:	f7fe fc42 	bl	8018d54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a4d0:	f000 f970 	bl	801a7b4 <vPortExitCritical>
}
 801a4d4:	bf00      	nop
 801a4d6:	46bd      	mov	sp, r7
 801a4d8:	bd80      	pop	{r7, pc}
 801a4da:	bf00      	nop
 801a4dc:	20001c1c 	.word	0x20001c1c
 801a4e0:	20001bec 	.word	0x20001bec
 801a4e4:	20001c00 	.word	0x20001c00
 801a4e8:	20001c14 	.word	0x20001c14
 801a4ec:	20001c18 	.word	0x20001c18
 801a4f0:	20001cc8 	.word	0x20001cc8
 801a4f4:	20001c28 	.word	0x20001c28
 801a4f8:	08020d1c 	.word	0x08020d1c

0801a4fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801a4fc:	b480      	push	{r7}
 801a4fe:	b085      	sub	sp, #20
 801a500:	af00      	add	r7, sp, #0
 801a502:	60f8      	str	r0, [r7, #12]
 801a504:	60b9      	str	r1, [r7, #8]
 801a506:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801a508:	68fb      	ldr	r3, [r7, #12]
 801a50a:	3b04      	subs	r3, #4
 801a50c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a50e:	68fb      	ldr	r3, [r7, #12]
 801a510:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801a514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a516:	68fb      	ldr	r3, [r7, #12]
 801a518:	3b04      	subs	r3, #4
 801a51a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801a51c:	68bb      	ldr	r3, [r7, #8]
 801a51e:	f023 0201 	bic.w	r2, r3, #1
 801a522:	68fb      	ldr	r3, [r7, #12]
 801a524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a526:	68fb      	ldr	r3, [r7, #12]
 801a528:	3b04      	subs	r3, #4
 801a52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a52c:	4a0c      	ldr	r2, [pc, #48]	; (801a560 <pxPortInitialiseStack+0x64>)
 801a52e:	68fb      	ldr	r3, [r7, #12]
 801a530:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	3b14      	subs	r3, #20
 801a536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a538:	687a      	ldr	r2, [r7, #4]
 801a53a:	68fb      	ldr	r3, [r7, #12]
 801a53c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	3b04      	subs	r3, #4
 801a542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	f06f 0202 	mvn.w	r2, #2
 801a54a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	3b20      	subs	r3, #32
 801a550:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801a552:	68fb      	ldr	r3, [r7, #12]
}
 801a554:	4618      	mov	r0, r3
 801a556:	3714      	adds	r7, #20
 801a558:	46bd      	mov	sp, r7
 801a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a55e:	4770      	bx	lr
 801a560:	0801a565 	.word	0x0801a565

0801a564 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a564:	b480      	push	{r7}
 801a566:	b085      	sub	sp, #20
 801a568:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801a56a:	2300      	movs	r3, #0
 801a56c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a56e:	4b12      	ldr	r3, [pc, #72]	; (801a5b8 <prvTaskExitError+0x54>)
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a576:	d00a      	beq.n	801a58e <prvTaskExitError+0x2a>
	__asm volatile
 801a578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a57c:	f383 8811 	msr	BASEPRI, r3
 801a580:	f3bf 8f6f 	isb	sy
 801a584:	f3bf 8f4f 	dsb	sy
 801a588:	60fb      	str	r3, [r7, #12]
}
 801a58a:	bf00      	nop
 801a58c:	e7fe      	b.n	801a58c <prvTaskExitError+0x28>
	__asm volatile
 801a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a592:	f383 8811 	msr	BASEPRI, r3
 801a596:	f3bf 8f6f 	isb	sy
 801a59a:	f3bf 8f4f 	dsb	sy
 801a59e:	60bb      	str	r3, [r7, #8]
}
 801a5a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801a5a2:	bf00      	nop
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d0fc      	beq.n	801a5a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a5aa:	bf00      	nop
 801a5ac:	bf00      	nop
 801a5ae:	3714      	adds	r7, #20
 801a5b0:	46bd      	mov	sp, r7
 801a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5b6:	4770      	bx	lr
 801a5b8:	20000014 	.word	0x20000014
 801a5bc:	00000000 	.word	0x00000000

0801a5c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801a5c0:	4b07      	ldr	r3, [pc, #28]	; (801a5e0 <pxCurrentTCBConst2>)
 801a5c2:	6819      	ldr	r1, [r3, #0]
 801a5c4:	6808      	ldr	r0, [r1, #0]
 801a5c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5ca:	f380 8809 	msr	PSP, r0
 801a5ce:	f3bf 8f6f 	isb	sy
 801a5d2:	f04f 0000 	mov.w	r0, #0
 801a5d6:	f380 8811 	msr	BASEPRI, r0
 801a5da:	4770      	bx	lr
 801a5dc:	f3af 8000 	nop.w

0801a5e0 <pxCurrentTCBConst2>:
 801a5e0:	200016ec 	.word	0x200016ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801a5e4:	bf00      	nop
 801a5e6:	bf00      	nop

0801a5e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801a5e8:	4808      	ldr	r0, [pc, #32]	; (801a60c <prvPortStartFirstTask+0x24>)
 801a5ea:	6800      	ldr	r0, [r0, #0]
 801a5ec:	6800      	ldr	r0, [r0, #0]
 801a5ee:	f380 8808 	msr	MSP, r0
 801a5f2:	f04f 0000 	mov.w	r0, #0
 801a5f6:	f380 8814 	msr	CONTROL, r0
 801a5fa:	b662      	cpsie	i
 801a5fc:	b661      	cpsie	f
 801a5fe:	f3bf 8f4f 	dsb	sy
 801a602:	f3bf 8f6f 	isb	sy
 801a606:	df00      	svc	0
 801a608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801a60a:	bf00      	nop
 801a60c:	e000ed08 	.word	0xe000ed08

0801a610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801a610:	b580      	push	{r7, lr}
 801a612:	b086      	sub	sp, #24
 801a614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a616:	4b46      	ldr	r3, [pc, #280]	; (801a730 <xPortStartScheduler+0x120>)
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	4a46      	ldr	r2, [pc, #280]	; (801a734 <xPortStartScheduler+0x124>)
 801a61c:	4293      	cmp	r3, r2
 801a61e:	d10a      	bne.n	801a636 <xPortStartScheduler+0x26>
	__asm volatile
 801a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a624:	f383 8811 	msr	BASEPRI, r3
 801a628:	f3bf 8f6f 	isb	sy
 801a62c:	f3bf 8f4f 	dsb	sy
 801a630:	613b      	str	r3, [r7, #16]
}
 801a632:	bf00      	nop
 801a634:	e7fe      	b.n	801a634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a636:	4b3e      	ldr	r3, [pc, #248]	; (801a730 <xPortStartScheduler+0x120>)
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	4a3f      	ldr	r2, [pc, #252]	; (801a738 <xPortStartScheduler+0x128>)
 801a63c:	4293      	cmp	r3, r2
 801a63e:	d10a      	bne.n	801a656 <xPortStartScheduler+0x46>
	__asm volatile
 801a640:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a644:	f383 8811 	msr	BASEPRI, r3
 801a648:	f3bf 8f6f 	isb	sy
 801a64c:	f3bf 8f4f 	dsb	sy
 801a650:	60fb      	str	r3, [r7, #12]
}
 801a652:	bf00      	nop
 801a654:	e7fe      	b.n	801a654 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801a656:	4b39      	ldr	r3, [pc, #228]	; (801a73c <xPortStartScheduler+0x12c>)
 801a658:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a65a:	697b      	ldr	r3, [r7, #20]
 801a65c:	781b      	ldrb	r3, [r3, #0]
 801a65e:	b2db      	uxtb	r3, r3
 801a660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a662:	697b      	ldr	r3, [r7, #20]
 801a664:	22ff      	movs	r2, #255	; 0xff
 801a666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a668:	697b      	ldr	r3, [r7, #20]
 801a66a:	781b      	ldrb	r3, [r3, #0]
 801a66c:	b2db      	uxtb	r3, r3
 801a66e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a670:	78fb      	ldrb	r3, [r7, #3]
 801a672:	b2db      	uxtb	r3, r3
 801a674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801a678:	b2da      	uxtb	r2, r3
 801a67a:	4b31      	ldr	r3, [pc, #196]	; (801a740 <xPortStartScheduler+0x130>)
 801a67c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a67e:	4b31      	ldr	r3, [pc, #196]	; (801a744 <xPortStartScheduler+0x134>)
 801a680:	2207      	movs	r2, #7
 801a682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a684:	e009      	b.n	801a69a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801a686:	4b2f      	ldr	r3, [pc, #188]	; (801a744 <xPortStartScheduler+0x134>)
 801a688:	681b      	ldr	r3, [r3, #0]
 801a68a:	3b01      	subs	r3, #1
 801a68c:	4a2d      	ldr	r2, [pc, #180]	; (801a744 <xPortStartScheduler+0x134>)
 801a68e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a690:	78fb      	ldrb	r3, [r7, #3]
 801a692:	b2db      	uxtb	r3, r3
 801a694:	005b      	lsls	r3, r3, #1
 801a696:	b2db      	uxtb	r3, r3
 801a698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a69a:	78fb      	ldrb	r3, [r7, #3]
 801a69c:	b2db      	uxtb	r3, r3
 801a69e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a6a2:	2b80      	cmp	r3, #128	; 0x80
 801a6a4:	d0ef      	beq.n	801a686 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a6a6:	4b27      	ldr	r3, [pc, #156]	; (801a744 <xPortStartScheduler+0x134>)
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	f1c3 0307 	rsb	r3, r3, #7
 801a6ae:	2b04      	cmp	r3, #4
 801a6b0:	d00a      	beq.n	801a6c8 <xPortStartScheduler+0xb8>
	__asm volatile
 801a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6b6:	f383 8811 	msr	BASEPRI, r3
 801a6ba:	f3bf 8f6f 	isb	sy
 801a6be:	f3bf 8f4f 	dsb	sy
 801a6c2:	60bb      	str	r3, [r7, #8]
}
 801a6c4:	bf00      	nop
 801a6c6:	e7fe      	b.n	801a6c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a6c8:	4b1e      	ldr	r3, [pc, #120]	; (801a744 <xPortStartScheduler+0x134>)
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	021b      	lsls	r3, r3, #8
 801a6ce:	4a1d      	ldr	r2, [pc, #116]	; (801a744 <xPortStartScheduler+0x134>)
 801a6d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a6d2:	4b1c      	ldr	r3, [pc, #112]	; (801a744 <xPortStartScheduler+0x134>)
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a6da:	4a1a      	ldr	r2, [pc, #104]	; (801a744 <xPortStartScheduler+0x134>)
 801a6dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	b2da      	uxtb	r2, r3
 801a6e2:	697b      	ldr	r3, [r7, #20]
 801a6e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a6e6:	4b18      	ldr	r3, [pc, #96]	; (801a748 <xPortStartScheduler+0x138>)
 801a6e8:	681b      	ldr	r3, [r3, #0]
 801a6ea:	4a17      	ldr	r2, [pc, #92]	; (801a748 <xPortStartScheduler+0x138>)
 801a6ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a6f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a6f2:	4b15      	ldr	r3, [pc, #84]	; (801a748 <xPortStartScheduler+0x138>)
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	4a14      	ldr	r2, [pc, #80]	; (801a748 <xPortStartScheduler+0x138>)
 801a6f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801a6fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a6fe:	f000 f8dd 	bl	801a8bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a702:	4b12      	ldr	r3, [pc, #72]	; (801a74c <xPortStartScheduler+0x13c>)
 801a704:	2200      	movs	r2, #0
 801a706:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a708:	f000 f8fc 	bl	801a904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a70c:	4b10      	ldr	r3, [pc, #64]	; (801a750 <xPortStartScheduler+0x140>)
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	4a0f      	ldr	r2, [pc, #60]	; (801a750 <xPortStartScheduler+0x140>)
 801a712:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801a716:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a718:	f7ff ff66 	bl	801a5e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a71c:	f7fe ff32 	bl	8019584 <vTaskSwitchContext>
	prvTaskExitError();
 801a720:	f7ff ff20 	bl	801a564 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a724:	2300      	movs	r3, #0
}
 801a726:	4618      	mov	r0, r3
 801a728:	3718      	adds	r7, #24
 801a72a:	46bd      	mov	sp, r7
 801a72c:	bd80      	pop	{r7, pc}
 801a72e:	bf00      	nop
 801a730:	e000ed00 	.word	0xe000ed00
 801a734:	410fc271 	.word	0x410fc271
 801a738:	410fc270 	.word	0x410fc270
 801a73c:	e000e400 	.word	0xe000e400
 801a740:	20001d18 	.word	0x20001d18
 801a744:	20001d1c 	.word	0x20001d1c
 801a748:	e000ed20 	.word	0xe000ed20
 801a74c:	20000014 	.word	0x20000014
 801a750:	e000ef34 	.word	0xe000ef34

0801a754 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a754:	b480      	push	{r7}
 801a756:	b083      	sub	sp, #12
 801a758:	af00      	add	r7, sp, #0
	__asm volatile
 801a75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a75e:	f383 8811 	msr	BASEPRI, r3
 801a762:	f3bf 8f6f 	isb	sy
 801a766:	f3bf 8f4f 	dsb	sy
 801a76a:	607b      	str	r3, [r7, #4]
}
 801a76c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a76e:	4b0f      	ldr	r3, [pc, #60]	; (801a7ac <vPortEnterCritical+0x58>)
 801a770:	681b      	ldr	r3, [r3, #0]
 801a772:	3301      	adds	r3, #1
 801a774:	4a0d      	ldr	r2, [pc, #52]	; (801a7ac <vPortEnterCritical+0x58>)
 801a776:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a778:	4b0c      	ldr	r3, [pc, #48]	; (801a7ac <vPortEnterCritical+0x58>)
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	2b01      	cmp	r3, #1
 801a77e:	d10f      	bne.n	801a7a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a780:	4b0b      	ldr	r3, [pc, #44]	; (801a7b0 <vPortEnterCritical+0x5c>)
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	b2db      	uxtb	r3, r3
 801a786:	2b00      	cmp	r3, #0
 801a788:	d00a      	beq.n	801a7a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a78e:	f383 8811 	msr	BASEPRI, r3
 801a792:	f3bf 8f6f 	isb	sy
 801a796:	f3bf 8f4f 	dsb	sy
 801a79a:	603b      	str	r3, [r7, #0]
}
 801a79c:	bf00      	nop
 801a79e:	e7fe      	b.n	801a79e <vPortEnterCritical+0x4a>
	}
}
 801a7a0:	bf00      	nop
 801a7a2:	370c      	adds	r7, #12
 801a7a4:	46bd      	mov	sp, r7
 801a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7aa:	4770      	bx	lr
 801a7ac:	20000014 	.word	0x20000014
 801a7b0:	e000ed04 	.word	0xe000ed04

0801a7b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a7b4:	b480      	push	{r7}
 801a7b6:	b083      	sub	sp, #12
 801a7b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a7ba:	4b12      	ldr	r3, [pc, #72]	; (801a804 <vPortExitCritical+0x50>)
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d10a      	bne.n	801a7d8 <vPortExitCritical+0x24>
	__asm volatile
 801a7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7c6:	f383 8811 	msr	BASEPRI, r3
 801a7ca:	f3bf 8f6f 	isb	sy
 801a7ce:	f3bf 8f4f 	dsb	sy
 801a7d2:	607b      	str	r3, [r7, #4]
}
 801a7d4:	bf00      	nop
 801a7d6:	e7fe      	b.n	801a7d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801a7d8:	4b0a      	ldr	r3, [pc, #40]	; (801a804 <vPortExitCritical+0x50>)
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	3b01      	subs	r3, #1
 801a7de:	4a09      	ldr	r2, [pc, #36]	; (801a804 <vPortExitCritical+0x50>)
 801a7e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a7e2:	4b08      	ldr	r3, [pc, #32]	; (801a804 <vPortExitCritical+0x50>)
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d105      	bne.n	801a7f6 <vPortExitCritical+0x42>
 801a7ea:	2300      	movs	r3, #0
 801a7ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a7ee:	683b      	ldr	r3, [r7, #0]
 801a7f0:	f383 8811 	msr	BASEPRI, r3
}
 801a7f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a7f6:	bf00      	nop
 801a7f8:	370c      	adds	r7, #12
 801a7fa:	46bd      	mov	sp, r7
 801a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a800:	4770      	bx	lr
 801a802:	bf00      	nop
 801a804:	20000014 	.word	0x20000014
	...

0801a810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a810:	f3ef 8009 	mrs	r0, PSP
 801a814:	f3bf 8f6f 	isb	sy
 801a818:	4b15      	ldr	r3, [pc, #84]	; (801a870 <pxCurrentTCBConst>)
 801a81a:	681a      	ldr	r2, [r3, #0]
 801a81c:	f01e 0f10 	tst.w	lr, #16
 801a820:	bf08      	it	eq
 801a822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a82a:	6010      	str	r0, [r2, #0]
 801a82c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a830:	f04f 0050 	mov.w	r0, #80	; 0x50
 801a834:	f380 8811 	msr	BASEPRI, r0
 801a838:	f3bf 8f4f 	dsb	sy
 801a83c:	f3bf 8f6f 	isb	sy
 801a840:	f7fe fea0 	bl	8019584 <vTaskSwitchContext>
 801a844:	f04f 0000 	mov.w	r0, #0
 801a848:	f380 8811 	msr	BASEPRI, r0
 801a84c:	bc09      	pop	{r0, r3}
 801a84e:	6819      	ldr	r1, [r3, #0]
 801a850:	6808      	ldr	r0, [r1, #0]
 801a852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a856:	f01e 0f10 	tst.w	lr, #16
 801a85a:	bf08      	it	eq
 801a85c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a860:	f380 8809 	msr	PSP, r0
 801a864:	f3bf 8f6f 	isb	sy
 801a868:	4770      	bx	lr
 801a86a:	bf00      	nop
 801a86c:	f3af 8000 	nop.w

0801a870 <pxCurrentTCBConst>:
 801a870:	200016ec 	.word	0x200016ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a874:	bf00      	nop
 801a876:	bf00      	nop

0801a878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a878:	b580      	push	{r7, lr}
 801a87a:	b082      	sub	sp, #8
 801a87c:	af00      	add	r7, sp, #0
	__asm volatile
 801a87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a882:	f383 8811 	msr	BASEPRI, r3
 801a886:	f3bf 8f6f 	isb	sy
 801a88a:	f3bf 8f4f 	dsb	sy
 801a88e:	607b      	str	r3, [r7, #4]
}
 801a890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a892:	f7fe fdbd 	bl	8019410 <xTaskIncrementTick>
 801a896:	4603      	mov	r3, r0
 801a898:	2b00      	cmp	r3, #0
 801a89a:	d003      	beq.n	801a8a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a89c:	4b06      	ldr	r3, [pc, #24]	; (801a8b8 <xPortSysTickHandler+0x40>)
 801a89e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a8a2:	601a      	str	r2, [r3, #0]
 801a8a4:	2300      	movs	r3, #0
 801a8a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a8a8:	683b      	ldr	r3, [r7, #0]
 801a8aa:	f383 8811 	msr	BASEPRI, r3
}
 801a8ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a8b0:	bf00      	nop
 801a8b2:	3708      	adds	r7, #8
 801a8b4:	46bd      	mov	sp, r7
 801a8b6:	bd80      	pop	{r7, pc}
 801a8b8:	e000ed04 	.word	0xe000ed04

0801a8bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a8bc:	b480      	push	{r7}
 801a8be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a8c0:	4b0b      	ldr	r3, [pc, #44]	; (801a8f0 <vPortSetupTimerInterrupt+0x34>)
 801a8c2:	2200      	movs	r2, #0
 801a8c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a8c6:	4b0b      	ldr	r3, [pc, #44]	; (801a8f4 <vPortSetupTimerInterrupt+0x38>)
 801a8c8:	2200      	movs	r2, #0
 801a8ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a8cc:	4b0a      	ldr	r3, [pc, #40]	; (801a8f8 <vPortSetupTimerInterrupt+0x3c>)
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	4a0a      	ldr	r2, [pc, #40]	; (801a8fc <vPortSetupTimerInterrupt+0x40>)
 801a8d2:	fba2 2303 	umull	r2, r3, r2, r3
 801a8d6:	099b      	lsrs	r3, r3, #6
 801a8d8:	4a09      	ldr	r2, [pc, #36]	; (801a900 <vPortSetupTimerInterrupt+0x44>)
 801a8da:	3b01      	subs	r3, #1
 801a8dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a8de:	4b04      	ldr	r3, [pc, #16]	; (801a8f0 <vPortSetupTimerInterrupt+0x34>)
 801a8e0:	2207      	movs	r2, #7
 801a8e2:	601a      	str	r2, [r3, #0]
}
 801a8e4:	bf00      	nop
 801a8e6:	46bd      	mov	sp, r7
 801a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8ec:	4770      	bx	lr
 801a8ee:	bf00      	nop
 801a8f0:	e000e010 	.word	0xe000e010
 801a8f4:	e000e018 	.word	0xe000e018
 801a8f8:	20000008 	.word	0x20000008
 801a8fc:	10624dd3 	.word	0x10624dd3
 801a900:	e000e014 	.word	0xe000e014

0801a904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801a914 <vPortEnableVFP+0x10>
 801a908:	6801      	ldr	r1, [r0, #0]
 801a90a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801a90e:	6001      	str	r1, [r0, #0]
 801a910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a912:	bf00      	nop
 801a914:	e000ed88 	.word	0xe000ed88

0801a918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a918:	b480      	push	{r7}
 801a91a:	b085      	sub	sp, #20
 801a91c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a91e:	f3ef 8305 	mrs	r3, IPSR
 801a922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a924:	68fb      	ldr	r3, [r7, #12]
 801a926:	2b0f      	cmp	r3, #15
 801a928:	d914      	bls.n	801a954 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a92a:	4a17      	ldr	r2, [pc, #92]	; (801a988 <vPortValidateInterruptPriority+0x70>)
 801a92c:	68fb      	ldr	r3, [r7, #12]
 801a92e:	4413      	add	r3, r2
 801a930:	781b      	ldrb	r3, [r3, #0]
 801a932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a934:	4b15      	ldr	r3, [pc, #84]	; (801a98c <vPortValidateInterruptPriority+0x74>)
 801a936:	781b      	ldrb	r3, [r3, #0]
 801a938:	7afa      	ldrb	r2, [r7, #11]
 801a93a:	429a      	cmp	r2, r3
 801a93c:	d20a      	bcs.n	801a954 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801a93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a942:	f383 8811 	msr	BASEPRI, r3
 801a946:	f3bf 8f6f 	isb	sy
 801a94a:	f3bf 8f4f 	dsb	sy
 801a94e:	607b      	str	r3, [r7, #4]
}
 801a950:	bf00      	nop
 801a952:	e7fe      	b.n	801a952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a954:	4b0e      	ldr	r3, [pc, #56]	; (801a990 <vPortValidateInterruptPriority+0x78>)
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a95c:	4b0d      	ldr	r3, [pc, #52]	; (801a994 <vPortValidateInterruptPriority+0x7c>)
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	429a      	cmp	r2, r3
 801a962:	d90a      	bls.n	801a97a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801a964:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a968:	f383 8811 	msr	BASEPRI, r3
 801a96c:	f3bf 8f6f 	isb	sy
 801a970:	f3bf 8f4f 	dsb	sy
 801a974:	603b      	str	r3, [r7, #0]
}
 801a976:	bf00      	nop
 801a978:	e7fe      	b.n	801a978 <vPortValidateInterruptPriority+0x60>
	}
 801a97a:	bf00      	nop
 801a97c:	3714      	adds	r7, #20
 801a97e:	46bd      	mov	sp, r7
 801a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a984:	4770      	bx	lr
 801a986:	bf00      	nop
 801a988:	e000e3f0 	.word	0xe000e3f0
 801a98c:	20001d18 	.word	0x20001d18
 801a990:	e000ed0c 	.word	0xe000ed0c
 801a994:	20001d1c 	.word	0x20001d1c

0801a998 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a998:	b580      	push	{r7, lr}
 801a99a:	b08a      	sub	sp, #40	; 0x28
 801a99c:	af00      	add	r7, sp, #0
 801a99e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a9a0:	2300      	movs	r3, #0
 801a9a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a9a4:	f7fe fc66 	bl	8019274 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a9a8:	4b5b      	ldr	r3, [pc, #364]	; (801ab18 <pvPortMalloc+0x180>)
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	2b00      	cmp	r3, #0
 801a9ae:	d101      	bne.n	801a9b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a9b0:	f000 f920 	bl	801abf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a9b4:	4b59      	ldr	r3, [pc, #356]	; (801ab1c <pvPortMalloc+0x184>)
 801a9b6:	681a      	ldr	r2, [r3, #0]
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	4013      	ands	r3, r2
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	f040 8093 	bne.w	801aae8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d01d      	beq.n	801aa04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801a9c8:	2208      	movs	r2, #8
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	4413      	add	r3, r2
 801a9ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	f003 0307 	and.w	r3, r3, #7
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d014      	beq.n	801aa04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	f023 0307 	bic.w	r3, r3, #7
 801a9e0:	3308      	adds	r3, #8
 801a9e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	f003 0307 	and.w	r3, r3, #7
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d00a      	beq.n	801aa04 <pvPortMalloc+0x6c>
	__asm volatile
 801a9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9f2:	f383 8811 	msr	BASEPRI, r3
 801a9f6:	f3bf 8f6f 	isb	sy
 801a9fa:	f3bf 8f4f 	dsb	sy
 801a9fe:	617b      	str	r3, [r7, #20]
}
 801aa00:	bf00      	nop
 801aa02:	e7fe      	b.n	801aa02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d06e      	beq.n	801aae8 <pvPortMalloc+0x150>
 801aa0a:	4b45      	ldr	r3, [pc, #276]	; (801ab20 <pvPortMalloc+0x188>)
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	687a      	ldr	r2, [r7, #4]
 801aa10:	429a      	cmp	r2, r3
 801aa12:	d869      	bhi.n	801aae8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801aa14:	4b43      	ldr	r3, [pc, #268]	; (801ab24 <pvPortMalloc+0x18c>)
 801aa16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801aa18:	4b42      	ldr	r3, [pc, #264]	; (801ab24 <pvPortMalloc+0x18c>)
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801aa1e:	e004      	b.n	801aa2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa26:	681b      	ldr	r3, [r3, #0]
 801aa28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa2c:	685b      	ldr	r3, [r3, #4]
 801aa2e:	687a      	ldr	r2, [r7, #4]
 801aa30:	429a      	cmp	r2, r3
 801aa32:	d903      	bls.n	801aa3c <pvPortMalloc+0xa4>
 801aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	d1f1      	bne.n	801aa20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801aa3c:	4b36      	ldr	r3, [pc, #216]	; (801ab18 <pvPortMalloc+0x180>)
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aa42:	429a      	cmp	r2, r3
 801aa44:	d050      	beq.n	801aae8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801aa46:	6a3b      	ldr	r3, [r7, #32]
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	2208      	movs	r2, #8
 801aa4c:	4413      	add	r3, r2
 801aa4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa52:	681a      	ldr	r2, [r3, #0]
 801aa54:	6a3b      	ldr	r3, [r7, #32]
 801aa56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801aa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa5a:	685a      	ldr	r2, [r3, #4]
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	1ad2      	subs	r2, r2, r3
 801aa60:	2308      	movs	r3, #8
 801aa62:	005b      	lsls	r3, r3, #1
 801aa64:	429a      	cmp	r2, r3
 801aa66:	d91f      	bls.n	801aaa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801aa68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	4413      	add	r3, r2
 801aa6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801aa70:	69bb      	ldr	r3, [r7, #24]
 801aa72:	f003 0307 	and.w	r3, r3, #7
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d00a      	beq.n	801aa90 <pvPortMalloc+0xf8>
	__asm volatile
 801aa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa7e:	f383 8811 	msr	BASEPRI, r3
 801aa82:	f3bf 8f6f 	isb	sy
 801aa86:	f3bf 8f4f 	dsb	sy
 801aa8a:	613b      	str	r3, [r7, #16]
}
 801aa8c:	bf00      	nop
 801aa8e:	e7fe      	b.n	801aa8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa92:	685a      	ldr	r2, [r3, #4]
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	1ad2      	subs	r2, r2, r3
 801aa98:	69bb      	ldr	r3, [r7, #24]
 801aa9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa9e:	687a      	ldr	r2, [r7, #4]
 801aaa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801aaa2:	69b8      	ldr	r0, [r7, #24]
 801aaa4:	f000 f908 	bl	801acb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801aaa8:	4b1d      	ldr	r3, [pc, #116]	; (801ab20 <pvPortMalloc+0x188>)
 801aaaa:	681a      	ldr	r2, [r3, #0]
 801aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaae:	685b      	ldr	r3, [r3, #4]
 801aab0:	1ad3      	subs	r3, r2, r3
 801aab2:	4a1b      	ldr	r2, [pc, #108]	; (801ab20 <pvPortMalloc+0x188>)
 801aab4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801aab6:	4b1a      	ldr	r3, [pc, #104]	; (801ab20 <pvPortMalloc+0x188>)
 801aab8:	681a      	ldr	r2, [r3, #0]
 801aaba:	4b1b      	ldr	r3, [pc, #108]	; (801ab28 <pvPortMalloc+0x190>)
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	429a      	cmp	r2, r3
 801aac0:	d203      	bcs.n	801aaca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801aac2:	4b17      	ldr	r3, [pc, #92]	; (801ab20 <pvPortMalloc+0x188>)
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	4a18      	ldr	r2, [pc, #96]	; (801ab28 <pvPortMalloc+0x190>)
 801aac8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801aaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aacc:	685a      	ldr	r2, [r3, #4]
 801aace:	4b13      	ldr	r3, [pc, #76]	; (801ab1c <pvPortMalloc+0x184>)
 801aad0:	681b      	ldr	r3, [r3, #0]
 801aad2:	431a      	orrs	r2, r3
 801aad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aad6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aada:	2200      	movs	r2, #0
 801aadc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801aade:	4b13      	ldr	r3, [pc, #76]	; (801ab2c <pvPortMalloc+0x194>)
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	3301      	adds	r3, #1
 801aae4:	4a11      	ldr	r2, [pc, #68]	; (801ab2c <pvPortMalloc+0x194>)
 801aae6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801aae8:	f7fe fbd2 	bl	8019290 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801aaec:	69fb      	ldr	r3, [r7, #28]
 801aaee:	f003 0307 	and.w	r3, r3, #7
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d00a      	beq.n	801ab0c <pvPortMalloc+0x174>
	__asm volatile
 801aaf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aafa:	f383 8811 	msr	BASEPRI, r3
 801aafe:	f3bf 8f6f 	isb	sy
 801ab02:	f3bf 8f4f 	dsb	sy
 801ab06:	60fb      	str	r3, [r7, #12]
}
 801ab08:	bf00      	nop
 801ab0a:	e7fe      	b.n	801ab0a <pvPortMalloc+0x172>
	return pvReturn;
 801ab0c:	69fb      	ldr	r3, [r7, #28]
}
 801ab0e:	4618      	mov	r0, r3
 801ab10:	3728      	adds	r7, #40	; 0x28
 801ab12:	46bd      	mov	sp, r7
 801ab14:	bd80      	pop	{r7, pc}
 801ab16:	bf00      	nop
 801ab18:	20005928 	.word	0x20005928
 801ab1c:	2000593c 	.word	0x2000593c
 801ab20:	2000592c 	.word	0x2000592c
 801ab24:	20005920 	.word	0x20005920
 801ab28:	20005930 	.word	0x20005930
 801ab2c:	20005934 	.word	0x20005934

0801ab30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801ab30:	b580      	push	{r7, lr}
 801ab32:	b086      	sub	sp, #24
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d04d      	beq.n	801abde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801ab42:	2308      	movs	r3, #8
 801ab44:	425b      	negs	r3, r3
 801ab46:	697a      	ldr	r2, [r7, #20]
 801ab48:	4413      	add	r3, r2
 801ab4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801ab4c:	697b      	ldr	r3, [r7, #20]
 801ab4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801ab50:	693b      	ldr	r3, [r7, #16]
 801ab52:	685a      	ldr	r2, [r3, #4]
 801ab54:	4b24      	ldr	r3, [pc, #144]	; (801abe8 <vPortFree+0xb8>)
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	4013      	ands	r3, r2
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d10a      	bne.n	801ab74 <vPortFree+0x44>
	__asm volatile
 801ab5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab62:	f383 8811 	msr	BASEPRI, r3
 801ab66:	f3bf 8f6f 	isb	sy
 801ab6a:	f3bf 8f4f 	dsb	sy
 801ab6e:	60fb      	str	r3, [r7, #12]
}
 801ab70:	bf00      	nop
 801ab72:	e7fe      	b.n	801ab72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801ab74:	693b      	ldr	r3, [r7, #16]
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d00a      	beq.n	801ab92 <vPortFree+0x62>
	__asm volatile
 801ab7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab80:	f383 8811 	msr	BASEPRI, r3
 801ab84:	f3bf 8f6f 	isb	sy
 801ab88:	f3bf 8f4f 	dsb	sy
 801ab8c:	60bb      	str	r3, [r7, #8]
}
 801ab8e:	bf00      	nop
 801ab90:	e7fe      	b.n	801ab90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801ab92:	693b      	ldr	r3, [r7, #16]
 801ab94:	685a      	ldr	r2, [r3, #4]
 801ab96:	4b14      	ldr	r3, [pc, #80]	; (801abe8 <vPortFree+0xb8>)
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	4013      	ands	r3, r2
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d01e      	beq.n	801abde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801aba0:	693b      	ldr	r3, [r7, #16]
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d11a      	bne.n	801abde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801aba8:	693b      	ldr	r3, [r7, #16]
 801abaa:	685a      	ldr	r2, [r3, #4]
 801abac:	4b0e      	ldr	r3, [pc, #56]	; (801abe8 <vPortFree+0xb8>)
 801abae:	681b      	ldr	r3, [r3, #0]
 801abb0:	43db      	mvns	r3, r3
 801abb2:	401a      	ands	r2, r3
 801abb4:	693b      	ldr	r3, [r7, #16]
 801abb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801abb8:	f7fe fb5c 	bl	8019274 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801abbc:	693b      	ldr	r3, [r7, #16]
 801abbe:	685a      	ldr	r2, [r3, #4]
 801abc0:	4b0a      	ldr	r3, [pc, #40]	; (801abec <vPortFree+0xbc>)
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	4413      	add	r3, r2
 801abc6:	4a09      	ldr	r2, [pc, #36]	; (801abec <vPortFree+0xbc>)
 801abc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801abca:	6938      	ldr	r0, [r7, #16]
 801abcc:	f000 f874 	bl	801acb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801abd0:	4b07      	ldr	r3, [pc, #28]	; (801abf0 <vPortFree+0xc0>)
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	3301      	adds	r3, #1
 801abd6:	4a06      	ldr	r2, [pc, #24]	; (801abf0 <vPortFree+0xc0>)
 801abd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801abda:	f7fe fb59 	bl	8019290 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801abde:	bf00      	nop
 801abe0:	3718      	adds	r7, #24
 801abe2:	46bd      	mov	sp, r7
 801abe4:	bd80      	pop	{r7, pc}
 801abe6:	bf00      	nop
 801abe8:	2000593c 	.word	0x2000593c
 801abec:	2000592c 	.word	0x2000592c
 801abf0:	20005938 	.word	0x20005938

0801abf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801abf4:	b480      	push	{r7}
 801abf6:	b085      	sub	sp, #20
 801abf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801abfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801abfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801ac00:	4b27      	ldr	r3, [pc, #156]	; (801aca0 <prvHeapInit+0xac>)
 801ac02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	f003 0307 	and.w	r3, r3, #7
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d00c      	beq.n	801ac28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801ac0e:	68fb      	ldr	r3, [r7, #12]
 801ac10:	3307      	adds	r3, #7
 801ac12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ac14:	68fb      	ldr	r3, [r7, #12]
 801ac16:	f023 0307 	bic.w	r3, r3, #7
 801ac1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801ac1c:	68ba      	ldr	r2, [r7, #8]
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	1ad3      	subs	r3, r2, r3
 801ac22:	4a1f      	ldr	r2, [pc, #124]	; (801aca0 <prvHeapInit+0xac>)
 801ac24:	4413      	add	r3, r2
 801ac26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801ac2c:	4a1d      	ldr	r2, [pc, #116]	; (801aca4 <prvHeapInit+0xb0>)
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801ac32:	4b1c      	ldr	r3, [pc, #112]	; (801aca4 <prvHeapInit+0xb0>)
 801ac34:	2200      	movs	r2, #0
 801ac36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	68ba      	ldr	r2, [r7, #8]
 801ac3c:	4413      	add	r3, r2
 801ac3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801ac40:	2208      	movs	r2, #8
 801ac42:	68fb      	ldr	r3, [r7, #12]
 801ac44:	1a9b      	subs	r3, r3, r2
 801ac46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ac48:	68fb      	ldr	r3, [r7, #12]
 801ac4a:	f023 0307 	bic.w	r3, r3, #7
 801ac4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801ac50:	68fb      	ldr	r3, [r7, #12]
 801ac52:	4a15      	ldr	r2, [pc, #84]	; (801aca8 <prvHeapInit+0xb4>)
 801ac54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801ac56:	4b14      	ldr	r3, [pc, #80]	; (801aca8 <prvHeapInit+0xb4>)
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	2200      	movs	r2, #0
 801ac5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801ac5e:	4b12      	ldr	r3, [pc, #72]	; (801aca8 <prvHeapInit+0xb4>)
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	2200      	movs	r2, #0
 801ac64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801ac6a:	683b      	ldr	r3, [r7, #0]
 801ac6c:	68fa      	ldr	r2, [r7, #12]
 801ac6e:	1ad2      	subs	r2, r2, r3
 801ac70:	683b      	ldr	r3, [r7, #0]
 801ac72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801ac74:	4b0c      	ldr	r3, [pc, #48]	; (801aca8 <prvHeapInit+0xb4>)
 801ac76:	681a      	ldr	r2, [r3, #0]
 801ac78:	683b      	ldr	r3, [r7, #0]
 801ac7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801ac7c:	683b      	ldr	r3, [r7, #0]
 801ac7e:	685b      	ldr	r3, [r3, #4]
 801ac80:	4a0a      	ldr	r2, [pc, #40]	; (801acac <prvHeapInit+0xb8>)
 801ac82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801ac84:	683b      	ldr	r3, [r7, #0]
 801ac86:	685b      	ldr	r3, [r3, #4]
 801ac88:	4a09      	ldr	r2, [pc, #36]	; (801acb0 <prvHeapInit+0xbc>)
 801ac8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801ac8c:	4b09      	ldr	r3, [pc, #36]	; (801acb4 <prvHeapInit+0xc0>)
 801ac8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801ac92:	601a      	str	r2, [r3, #0]
}
 801ac94:	bf00      	nop
 801ac96:	3714      	adds	r7, #20
 801ac98:	46bd      	mov	sp, r7
 801ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac9e:	4770      	bx	lr
 801aca0:	20001d20 	.word	0x20001d20
 801aca4:	20005920 	.word	0x20005920
 801aca8:	20005928 	.word	0x20005928
 801acac:	20005930 	.word	0x20005930
 801acb0:	2000592c 	.word	0x2000592c
 801acb4:	2000593c 	.word	0x2000593c

0801acb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801acb8:	b480      	push	{r7}
 801acba:	b085      	sub	sp, #20
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801acc0:	4b28      	ldr	r3, [pc, #160]	; (801ad64 <prvInsertBlockIntoFreeList+0xac>)
 801acc2:	60fb      	str	r3, [r7, #12]
 801acc4:	e002      	b.n	801accc <prvInsertBlockIntoFreeList+0x14>
 801acc6:	68fb      	ldr	r3, [r7, #12]
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	60fb      	str	r3, [r7, #12]
 801accc:	68fb      	ldr	r3, [r7, #12]
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	687a      	ldr	r2, [r7, #4]
 801acd2:	429a      	cmp	r2, r3
 801acd4:	d8f7      	bhi.n	801acc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801acd6:	68fb      	ldr	r3, [r7, #12]
 801acd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801acda:	68fb      	ldr	r3, [r7, #12]
 801acdc:	685b      	ldr	r3, [r3, #4]
 801acde:	68ba      	ldr	r2, [r7, #8]
 801ace0:	4413      	add	r3, r2
 801ace2:	687a      	ldr	r2, [r7, #4]
 801ace4:	429a      	cmp	r2, r3
 801ace6:	d108      	bne.n	801acfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	685a      	ldr	r2, [r3, #4]
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	685b      	ldr	r3, [r3, #4]
 801acf0:	441a      	add	r2, r3
 801acf2:	68fb      	ldr	r3, [r7, #12]
 801acf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801acf6:	68fb      	ldr	r3, [r7, #12]
 801acf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	685b      	ldr	r3, [r3, #4]
 801ad02:	68ba      	ldr	r2, [r7, #8]
 801ad04:	441a      	add	r2, r3
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	429a      	cmp	r2, r3
 801ad0c:	d118      	bne.n	801ad40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	681a      	ldr	r2, [r3, #0]
 801ad12:	4b15      	ldr	r3, [pc, #84]	; (801ad68 <prvInsertBlockIntoFreeList+0xb0>)
 801ad14:	681b      	ldr	r3, [r3, #0]
 801ad16:	429a      	cmp	r2, r3
 801ad18:	d00d      	beq.n	801ad36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	685a      	ldr	r2, [r3, #4]
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	681b      	ldr	r3, [r3, #0]
 801ad22:	685b      	ldr	r3, [r3, #4]
 801ad24:	441a      	add	r2, r3
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801ad2a:	68fb      	ldr	r3, [r7, #12]
 801ad2c:	681b      	ldr	r3, [r3, #0]
 801ad2e:	681a      	ldr	r2, [r3, #0]
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	601a      	str	r2, [r3, #0]
 801ad34:	e008      	b.n	801ad48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801ad36:	4b0c      	ldr	r3, [pc, #48]	; (801ad68 <prvInsertBlockIntoFreeList+0xb0>)
 801ad38:	681a      	ldr	r2, [r3, #0]
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	601a      	str	r2, [r3, #0]
 801ad3e:	e003      	b.n	801ad48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801ad40:	68fb      	ldr	r3, [r7, #12]
 801ad42:	681a      	ldr	r2, [r3, #0]
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801ad48:	68fa      	ldr	r2, [r7, #12]
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	429a      	cmp	r2, r3
 801ad4e:	d002      	beq.n	801ad56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801ad50:	68fb      	ldr	r3, [r7, #12]
 801ad52:	687a      	ldr	r2, [r7, #4]
 801ad54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ad56:	bf00      	nop
 801ad58:	3714      	adds	r7, #20
 801ad5a:	46bd      	mov	sp, r7
 801ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad60:	4770      	bx	lr
 801ad62:	bf00      	nop
 801ad64:	20005920 	.word	0x20005920
 801ad68:	20005928 	.word	0x20005928

0801ad6c <_ZdlPvj>:
 801ad6c:	f000 be78 	b.w	801ba60 <_ZdlPv>

0801ad70 <_ZdaPv>:
 801ad70:	f000 be76 	b.w	801ba60 <_ZdlPv>

0801ad74 <_Znwj>:
 801ad74:	2801      	cmp	r0, #1
 801ad76:	bf38      	it	cc
 801ad78:	2001      	movcc	r0, #1
 801ad7a:	b510      	push	{r4, lr}
 801ad7c:	4604      	mov	r4, r0
 801ad7e:	4620      	mov	r0, r4
 801ad80:	f002 fe42 	bl	801da08 <malloc>
 801ad84:	b100      	cbz	r0, 801ad88 <_Znwj+0x14>
 801ad86:	bd10      	pop	{r4, pc}
 801ad88:	f001 fc68 	bl	801c65c <_ZSt15get_new_handlerv>
 801ad8c:	b108      	cbz	r0, 801ad92 <_Znwj+0x1e>
 801ad8e:	4780      	blx	r0
 801ad90:	e7f5      	b.n	801ad7e <_Znwj+0xa>
 801ad92:	2004      	movs	r0, #4
 801ad94:	f000 fed6 	bl	801bb44 <__cxa_allocate_exception>
 801ad98:	4b02      	ldr	r3, [pc, #8]	; (801ada4 <_Znwj+0x30>)
 801ad9a:	4a03      	ldr	r2, [pc, #12]	; (801ada8 <_Znwj+0x34>)
 801ad9c:	4903      	ldr	r1, [pc, #12]	; (801adac <_Znwj+0x38>)
 801ad9e:	6003      	str	r3, [r0, #0]
 801ada0:	f001 fc08 	bl	801c5b4 <__cxa_throw>
 801ada4:	08021c90 	.word	0x08021c90
 801ada8:	0801b8fd 	.word	0x0801b8fd
 801adac:	08021c6c 	.word	0x08021c6c

0801adb0 <_Znaj>:
 801adb0:	f7ff bfe0 	b.w	801ad74 <_Znwj>

0801adb4 <_ZNSaIcEC1Ev>:
 801adb4:	4770      	bx	lr
 801adb6:	bf00      	nop

0801adb8 <_ZNSaIcEC1ERKS_>:
 801adb8:	4770      	bx	lr
 801adba:	bf00      	nop

0801adbc <_ZNSaIcED1Ev>:
 801adbc:	4770      	bx	lr
 801adbe:	bf00      	nop

0801adc0 <_ZSt17__throw_bad_allocv>:
 801adc0:	b508      	push	{r3, lr}
 801adc2:	2004      	movs	r0, #4
 801adc4:	f000 febe 	bl	801bb44 <__cxa_allocate_exception>
 801adc8:	4b02      	ldr	r3, [pc, #8]	; (801add4 <_ZSt17__throw_bad_allocv+0x14>)
 801adca:	4a03      	ldr	r2, [pc, #12]	; (801add8 <_ZSt17__throw_bad_allocv+0x18>)
 801adcc:	4903      	ldr	r1, [pc, #12]	; (801addc <_ZSt17__throw_bad_allocv+0x1c>)
 801adce:	6003      	str	r3, [r0, #0]
 801add0:	f001 fbf0 	bl	801c5b4 <__cxa_throw>
 801add4:	08021c90 	.word	0x08021c90
 801add8:	0801b8fd 	.word	0x0801b8fd
 801addc:	08021c6c 	.word	0x08021c6c

0801ade0 <_ZSt28__throw_bad_array_new_lengthv>:
 801ade0:	b508      	push	{r3, lr}
 801ade2:	2004      	movs	r0, #4
 801ade4:	f000 feae 	bl	801bb44 <__cxa_allocate_exception>
 801ade8:	4b02      	ldr	r3, [pc, #8]	; (801adf4 <_ZSt28__throw_bad_array_new_lengthv+0x14>)
 801adea:	4a03      	ldr	r2, [pc, #12]	; (801adf8 <_ZSt28__throw_bad_array_new_lengthv+0x18>)
 801adec:	4903      	ldr	r1, [pc, #12]	; (801adfc <_ZSt28__throw_bad_array_new_lengthv+0x1c>)
 801adee:	6003      	str	r3, [r0, #0]
 801adf0:	f001 fbe0 	bl	801c5b4 <__cxa_throw>
 801adf4:	08021ce8 	.word	0x08021ce8
 801adf8:	0801b935 	.word	0x0801b935
 801adfc:	08021cb8 	.word	0x08021cb8

0801ae00 <_ZSt19__throw_logic_errorPKc>:
 801ae00:	b510      	push	{r4, lr}
 801ae02:	b082      	sub	sp, #8
 801ae04:	9001      	str	r0, [sp, #4]
 801ae06:	2008      	movs	r0, #8
 801ae08:	f000 fe9c 	bl	801bb44 <__cxa_allocate_exception>
 801ae0c:	9901      	ldr	r1, [sp, #4]
 801ae0e:	4604      	mov	r4, r0
 801ae10:	f001 fe24 	bl	801ca5c <_ZNSt11logic_errorC1EPKc>
 801ae14:	4a04      	ldr	r2, [pc, #16]	; (801ae28 <_ZSt19__throw_logic_errorPKc+0x28>)
 801ae16:	4905      	ldr	r1, [pc, #20]	; (801ae2c <_ZSt19__throw_logic_errorPKc+0x2c>)
 801ae18:	4620      	mov	r0, r4
 801ae1a:	f001 fbcb 	bl	801c5b4 <__cxa_throw>
 801ae1e:	4620      	mov	r0, r4
 801ae20:	f000 fea8 	bl	801bb74 <__cxa_free_exception>
 801ae24:	f000 feca 	bl	801bbbc <__cxa_end_cleanup>
 801ae28:	0801c8c5 	.word	0x0801c8c5
 801ae2c:	08021f10 	.word	0x08021f10

0801ae30 <_ZSt20__throw_length_errorPKc>:
 801ae30:	b510      	push	{r4, lr}
 801ae32:	b082      	sub	sp, #8
 801ae34:	9001      	str	r0, [sp, #4]
 801ae36:	2008      	movs	r0, #8
 801ae38:	f000 fe84 	bl	801bb44 <__cxa_allocate_exception>
 801ae3c:	9901      	ldr	r1, [sp, #4]
 801ae3e:	4604      	mov	r4, r0
 801ae40:	f001 fe4c 	bl	801cadc <_ZNSt12length_errorC1EPKc>
 801ae44:	4a04      	ldr	r2, [pc, #16]	; (801ae58 <_ZSt20__throw_length_errorPKc+0x28>)
 801ae46:	4905      	ldr	r1, [pc, #20]	; (801ae5c <_ZSt20__throw_length_errorPKc+0x2c>)
 801ae48:	4620      	mov	r0, r4
 801ae4a:	f001 fbb3 	bl	801c5b4 <__cxa_throw>
 801ae4e:	4620      	mov	r0, r4
 801ae50:	f000 fe90 	bl	801bb74 <__cxa_free_exception>
 801ae54:	f000 feb2 	bl	801bbbc <__cxa_end_cleanup>
 801ae58:	0801c905 	.word	0x0801c905
 801ae5c:	08021f1c 	.word	0x08021f1c

0801ae60 <_ZSt24__throw_out_of_range_fmtPKcz>:
 801ae60:	b40f      	push	{r0, r1, r2, r3}
 801ae62:	b5b0      	push	{r4, r5, r7, lr}
 801ae64:	b084      	sub	sp, #16
 801ae66:	af00      	add	r7, sp, #0
 801ae68:	f107 0420 	add.w	r4, r7, #32
 801ae6c:	f854 2b04 	ldr.w	r2, [r4], #4
 801ae70:	607a      	str	r2, [r7, #4]
 801ae72:	4610      	mov	r0, r2
 801ae74:	f7eb f9d4 	bl	8006220 <strlen>
 801ae78:	f200 2307 	addw	r3, r0, #519	; 0x207
 801ae7c:	f023 0307 	bic.w	r3, r3, #7
 801ae80:	ebad 0d03 	sub.w	sp, sp, r3
 801ae84:	466d      	mov	r5, sp
 801ae86:	f500 7100 	add.w	r1, r0, #512	; 0x200
 801ae8a:	4623      	mov	r3, r4
 801ae8c:	687a      	ldr	r2, [r7, #4]
 801ae8e:	60fc      	str	r4, [r7, #12]
 801ae90:	4628      	mov	r0, r5
 801ae92:	f000 f92b 	bl	801b0ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 801ae96:	2008      	movs	r0, #8
 801ae98:	f000 fe54 	bl	801bb44 <__cxa_allocate_exception>
 801ae9c:	4629      	mov	r1, r5
 801ae9e:	4604      	mov	r4, r0
 801aea0:	f001 fe26 	bl	801caf0 <_ZNSt12out_of_rangeC1EPKc>
 801aea4:	4a04      	ldr	r2, [pc, #16]	; (801aeb8 <_ZSt24__throw_out_of_range_fmtPKcz+0x58>)
 801aea6:	4905      	ldr	r1, [pc, #20]	; (801aebc <_ZSt24__throw_out_of_range_fmtPKcz+0x5c>)
 801aea8:	4620      	mov	r0, r4
 801aeaa:	f001 fb83 	bl	801c5b4 <__cxa_throw>
 801aeae:	4620      	mov	r0, r4
 801aeb0:	f000 fe60 	bl	801bb74 <__cxa_free_exception>
 801aeb4:	f000 fe82 	bl	801bbbc <__cxa_end_cleanup>
 801aeb8:	0801c945 	.word	0x0801c945
 801aebc:	08021f28 	.word	0x08021f28

0801aec0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 801aec0:	290d      	cmp	r1, #13
 801aec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aec4:	4605      	mov	r5, r0
 801aec6:	d81e      	bhi.n	801af06 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x46>
 801aec8:	b1d1      	cbz	r1, 801af00 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x40>
 801aeca:	4b28      	ldr	r3, [pc, #160]	; (801af6c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0xac>)
 801aecc:	5c5c      	ldrb	r4, [r3, r1]
 801aece:	4620      	mov	r0, r4
 801aed0:	f7eb fb0a 	bl	80064e8 <__aeabi_i2d>
 801aed4:	4606      	mov	r6, r0
 801aed6:	6828      	ldr	r0, [r5, #0]
 801aed8:	460f      	mov	r7, r1
 801aeda:	f7eb fb17 	bl	800650c <__aeabi_f2d>
 801aede:	4602      	mov	r2, r0
 801aee0:	460b      	mov	r3, r1
 801aee2:	4630      	mov	r0, r6
 801aee4:	4639      	mov	r1, r7
 801aee6:	f7eb fb69 	bl	80065bc <__aeabi_dmul>
 801aeea:	ec41 0b10 	vmov	d0, r0, r1
 801aeee:	f002 fa0f 	bl	801d310 <floor>
 801aef2:	ec51 0b10 	vmov	r0, r1, d0
 801aef6:	f7eb fe39 	bl	8006b6c <__aeabi_d2uiz>
 801aefa:	6068      	str	r0, [r5, #4]
 801aefc:	4620      	mov	r0, r4
 801aefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af00:	2401      	movs	r4, #1
 801af02:	4620      	mov	r0, r4
 801af04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af06:	4c1a      	ldr	r4, [pc, #104]	; (801af70 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0xb0>)
 801af08:	23f9      	movs	r3, #249	; 0xf9
 801af0a:	105a      	asrs	r2, r3, #1
 801af0c:	1a9b      	subs	r3, r3, r2
 801af0e:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
 801af12:	428e      	cmp	r6, r1
 801af14:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 801af18:	bf36      	itet	cc
 801af1a:	f103 33ff 	addcc.w	r3, r3, #4294967295	; 0xffffffff
 801af1e:	4613      	movcs	r3, r2
 801af20:	1d04      	addcc	r4, r0, #4
 801af22:	2b00      	cmp	r3, #0
 801af24:	dcf1      	bgt.n	801af0a <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x4a>
 801af26:	4b13      	ldr	r3, [pc, #76]	; (801af74 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0xb4>)
 801af28:	429c      	cmp	r4, r3
 801af2a:	d019      	beq.n	801af60 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0xa0>
 801af2c:	6824      	ldr	r4, [r4, #0]
 801af2e:	4620      	mov	r0, r4
 801af30:	f7eb faca 	bl	80064c8 <__aeabi_ui2d>
 801af34:	4606      	mov	r6, r0
 801af36:	6828      	ldr	r0, [r5, #0]
 801af38:	460f      	mov	r7, r1
 801af3a:	f7eb fae7 	bl	800650c <__aeabi_f2d>
 801af3e:	4602      	mov	r2, r0
 801af40:	460b      	mov	r3, r1
 801af42:	4630      	mov	r0, r6
 801af44:	4639      	mov	r1, r7
 801af46:	f7eb fb39 	bl	80065bc <__aeabi_dmul>
 801af4a:	ec41 0b10 	vmov	d0, r0, r1
 801af4e:	f002 f9df 	bl	801d310 <floor>
 801af52:	ec51 0b10 	vmov	r0, r1, d0
 801af56:	f7eb fe09 	bl	8006b6c <__aeabi_d2uiz>
 801af5a:	6068      	str	r0, [r5, #4]
 801af5c:	4620      	mov	r0, r4
 801af5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af60:	f06f 0404 	mvn.w	r4, #4
 801af64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801af68:	e7f7      	b.n	801af5a <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x9a>
 801af6a:	bf00      	nop
 801af6c:	08021b0c 	.word	0x08021b0c
 801af70:	08021720 	.word	0x08021720
 801af74:	08021b04 	.word	0x08021b04

0801af78 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 801af78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af7c:	b082      	sub	sp, #8
 801af7e:	460d      	mov	r5, r1
 801af80:	990a      	ldr	r1, [sp, #40]	; 0x28
 801af82:	185f      	adds	r7, r3, r1
 801af84:	686b      	ldr	r3, [r5, #4]
 801af86:	429f      	cmp	r7, r3
 801af88:	4604      	mov	r4, r0
 801af8a:	d938      	bls.n	801affe <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x86>
 801af8c:	4692      	mov	sl, r2
 801af8e:	2b00      	cmp	r3, #0
 801af90:	d052      	beq.n	801b038 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xc0>
 801af92:	6828      	ldr	r0, [r5, #0]
 801af94:	f7eb faba 	bl	800650c <__aeabi_f2d>
 801af98:	4602      	mov	r2, r0
 801af9a:	4616      	mov	r6, r2
 801af9c:	4638      	mov	r0, r7
 801af9e:	460f      	mov	r7, r1
 801afa0:	f7eb fa92 	bl	80064c8 <__aeabi_ui2d>
 801afa4:	4632      	mov	r2, r6
 801afa6:	463b      	mov	r3, r7
 801afa8:	f7eb fc32 	bl	8006810 <__aeabi_ddiv>
 801afac:	4680      	mov	r8, r0
 801afae:	4650      	mov	r0, sl
 801afb0:	4689      	mov	r9, r1
 801afb2:	f7eb fa89 	bl	80064c8 <__aeabi_ui2d>
 801afb6:	4602      	mov	r2, r0
 801afb8:	460b      	mov	r3, r1
 801afba:	e9cd 2300 	strd	r2, r3, [sp]
 801afbe:	4642      	mov	r2, r8
 801afc0:	464b      	mov	r3, r9
 801afc2:	f7eb fd77 	bl	8006ab4 <__aeabi_dcmple>
 801afc6:	b308      	cbz	r0, 801b00c <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x94>
 801afc8:	ec49 8b10 	vmov	d0, r8, r9
 801afcc:	f002 f9a0 	bl	801d310 <floor>
 801afd0:	4b1b      	ldr	r3, [pc, #108]	; (801b040 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xc8>)
 801afd2:	ec51 0b10 	vmov	r0, r1, d0
 801afd6:	2200      	movs	r2, #0
 801afd8:	f7eb f93a 	bl	8006250 <__adddf3>
 801afdc:	f7eb fdc6 	bl	8006b6c <__aeabi_d2uiz>
 801afe0:	ea4f 014a 	mov.w	r1, sl, lsl #1
 801afe4:	4281      	cmp	r1, r0
 801afe6:	bf38      	it	cc
 801afe8:	4601      	movcc	r1, r0
 801afea:	4628      	mov	r0, r5
 801afec:	f7ff ff68 	bl	801aec0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 801aff0:	2301      	movs	r3, #1
 801aff2:	6060      	str	r0, [r4, #4]
 801aff4:	4620      	mov	r0, r4
 801aff6:	7023      	strb	r3, [r4, #0]
 801aff8:	b002      	add	sp, #8
 801affa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801affe:	2300      	movs	r3, #0
 801b000:	e9c0 3300 	strd	r3, r3, [r0]
 801b004:	4620      	mov	r0, r4
 801b006:	b002      	add	sp, #8
 801b008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b00c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b010:	4630      	mov	r0, r6
 801b012:	4639      	mov	r1, r7
 801b014:	f7eb fad2 	bl	80065bc <__aeabi_dmul>
 801b018:	ec41 0b10 	vmov	d0, r0, r1
 801b01c:	f002 f978 	bl	801d310 <floor>
 801b020:	ec51 0b10 	vmov	r0, r1, d0
 801b024:	f7eb fda2 	bl	8006b6c <__aeabi_d2uiz>
 801b028:	2300      	movs	r3, #0
 801b02a:	6068      	str	r0, [r5, #4]
 801b02c:	4620      	mov	r0, r4
 801b02e:	e9c4 3300 	strd	r3, r3, [r4]
 801b032:	b002      	add	sp, #8
 801b034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b038:	2f0b      	cmp	r7, #11
 801b03a:	bf38      	it	cc
 801b03c:	270b      	movcc	r7, #11
 801b03e:	e7a8      	b.n	801af92 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x1a>
 801b040:	3ff00000 	.word	0x3ff00000

0801b044 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 801b044:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b046:	b09d      	sub	sp, #116	; 0x74
 801b048:	af00      	add	r7, sp, #0
 801b04a:	1a0c      	subs	r4, r1, r0
 801b04c:	4606      	mov	r6, r0
 801b04e:	490f      	ldr	r1, [pc, #60]	; (801b08c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 801b050:	2269      	movs	r2, #105	; 0x69
 801b052:	1d38      	adds	r0, r7, #4
 801b054:	f003 fdd0 	bl	801ebf8 <memcpy>
 801b058:	f104 0370 	add.w	r3, r4, #112	; 0x70
 801b05c:	f023 0307 	bic.w	r3, r3, #7
 801b060:	ebad 0d03 	sub.w	sp, sp, r3
 801b064:	466d      	mov	r5, sp
 801b066:	2268      	movs	r2, #104	; 0x68
 801b068:	1d39      	adds	r1, r7, #4
 801b06a:	4628      	mov	r0, r5
 801b06c:	f003 fdc4 	bl	801ebf8 <memcpy>
 801b070:	4622      	mov	r2, r4
 801b072:	4631      	mov	r1, r6
 801b074:	f105 0068 	add.w	r0, r5, #104	; 0x68
 801b078:	442c      	add	r4, r5
 801b07a:	f003 fdbd 	bl	801ebf8 <memcpy>
 801b07e:	2300      	movs	r3, #0
 801b080:	4628      	mov	r0, r5
 801b082:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 801b086:	f7ff febb 	bl	801ae00 <_ZSt19__throw_logic_errorPKc>
 801b08a:	bf00      	nop
 801b08c:	08021b1c 	.word	0x08021b1c

0801b090 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 801b090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b094:	af00      	add	r7, sp, #0
 801b096:	b084      	sub	sp, #16
 801b098:	46e8      	mov	r8, sp
 801b09a:	f108 090c 	add.w	r9, r8, #12
 801b09e:	4e11      	ldr	r6, [pc, #68]	; (801b0e4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>)
 801b0a0:	4d11      	ldr	r5, [pc, #68]	; (801b0e8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x58>)
 801b0a2:	46ce      	mov	lr, r9
 801b0a4:	fba5 4302 	umull	r4, r3, r5, r2
 801b0a8:	08db      	lsrs	r3, r3, #3
 801b0aa:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801b0ae:	eba2 0c4c 	sub.w	ip, r2, ip, lsl #1
 801b0b2:	4614      	mov	r4, r2
 801b0b4:	2c09      	cmp	r4, #9
 801b0b6:	f816 200c 	ldrb.w	r2, [r6, ip]
 801b0ba:	f80e 2d01 	strb.w	r2, [lr, #-1]!
 801b0be:	461a      	mov	r2, r3
 801b0c0:	d8f0      	bhi.n	801b0a4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x14>
 801b0c2:	eba9 090e 	sub.w	r9, r9, lr
 801b0c6:	4589      	cmp	r9, r1
 801b0c8:	d809      	bhi.n	801b0de <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4e>
 801b0ca:	f1c9 010c 	rsb	r1, r9, #12
 801b0ce:	464a      	mov	r2, r9
 801b0d0:	4441      	add	r1, r8
 801b0d2:	f003 fd91 	bl	801ebf8 <memcpy>
 801b0d6:	4648      	mov	r0, r9
 801b0d8:	46bd      	mov	sp, r7
 801b0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b0de:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801b0e2:	e7f8      	b.n	801b0d6 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x46>
 801b0e4:	08021b88 	.word	0x08021b88
 801b0e8:	cccccccd 	.word	0xcccccccd

0801b0ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 801b0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0f0:	4615      	mov	r5, r2
 801b0f2:	7812      	ldrb	r2, [r2, #0]
 801b0f4:	3901      	subs	r1, #1
 801b0f6:	4607      	mov	r7, r0
 801b0f8:	1846      	adds	r6, r0, r1
 801b0fa:	4604      	mov	r4, r0
 801b0fc:	2a00      	cmp	r2, #0
 801b0fe:	d042      	beq.n	801b186 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x9a>
 801b100:	42b0      	cmp	r0, r6
 801b102:	d308      	bcc.n	801b116 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 801b104:	e041      	b.n	801b18a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x9e>
 801b106:	782a      	ldrb	r2, [r5, #0]
 801b108:	f804 2b01 	strb.w	r2, [r4], #1
 801b10c:	3501      	adds	r5, #1
 801b10e:	782a      	ldrb	r2, [r5, #0]
 801b110:	b1f2      	cbz	r2, 801b150 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x64>
 801b112:	42b4      	cmp	r4, r6
 801b114:	d239      	bcs.n	801b18a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x9e>
 801b116:	2a25      	cmp	r2, #37	; 0x25
 801b118:	d1f5      	bne.n	801b106 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x1a>
 801b11a:	786a      	ldrb	r2, [r5, #1]
 801b11c:	2a73      	cmp	r2, #115	; 0x73
 801b11e:	d01c      	beq.n	801b15a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 801b120:	2a7a      	cmp	r2, #122	; 0x7a
 801b122:	d003      	beq.n	801b12c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x40>
 801b124:	2a25      	cmp	r2, #37	; 0x25
 801b126:	d1ee      	bne.n	801b106 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x1a>
 801b128:	3501      	adds	r5, #1
 801b12a:	e7ed      	b.n	801b108 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x1c>
 801b12c:	78aa      	ldrb	r2, [r5, #2]
 801b12e:	2a75      	cmp	r2, #117	; 0x75
 801b130:	d1e9      	bne.n	801b106 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x1a>
 801b132:	4698      	mov	r8, r3
 801b134:	1b31      	subs	r1, r6, r4
 801b136:	f858 2b04 	ldr.w	r2, [r8], #4
 801b13a:	4620      	mov	r0, r4
 801b13c:	f7ff ffa8 	bl	801b090 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 801b140:	2800      	cmp	r0, #0
 801b142:	dd22      	ble.n	801b18a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x9e>
 801b144:	78ea      	ldrb	r2, [r5, #3]
 801b146:	3503      	adds	r5, #3
 801b148:	4404      	add	r4, r0
 801b14a:	4643      	mov	r3, r8
 801b14c:	2a00      	cmp	r2, #0
 801b14e:	d1e0      	bne.n	801b112 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x26>
 801b150:	1be0      	subs	r0, r4, r7
 801b152:	2300      	movs	r3, #0
 801b154:	7023      	strb	r3, [r4, #0]
 801b156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b15a:	f853 1b04 	ldr.w	r1, [r3], #4
 801b15e:	780a      	ldrb	r2, [r1, #0]
 801b160:	b152      	cbz	r2, 801b178 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x8c>
 801b162:	42a6      	cmp	r6, r4
 801b164:	d802      	bhi.n	801b16c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x80>
 801b166:	e009      	b.n	801b17c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x90>
 801b168:	42a6      	cmp	r6, r4
 801b16a:	d008      	beq.n	801b17e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x92>
 801b16c:	f804 2b01 	strb.w	r2, [r4], #1
 801b170:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b174:	2a00      	cmp	r2, #0
 801b176:	d1f7      	bne.n	801b168 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7c>
 801b178:	3502      	adds	r5, #2
 801b17a:	e7c8      	b.n	801b10e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x22>
 801b17c:	4626      	mov	r6, r4
 801b17e:	4631      	mov	r1, r6
 801b180:	4638      	mov	r0, r7
 801b182:	f7ff ff5f 	bl	801b044 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 801b186:	4610      	mov	r0, r2
 801b188:	e7e3      	b.n	801b152 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x66>
 801b18a:	4621      	mov	r1, r4
 801b18c:	4638      	mov	r0, r7
 801b18e:	f7ff ff59 	bl	801b044 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 801b192:	bf00      	nop

0801b194 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 801b194:	6001      	str	r1, [r0, #0]
 801b196:	4770      	bx	lr

0801b198 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 801b198:	6800      	ldr	r0, [r0, #0]
 801b19a:	4770      	bx	lr

0801b19c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 801b19c:	3008      	adds	r0, #8
 801b19e:	4770      	bx	lr

0801b1a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 801b1a0:	6081      	str	r1, [r0, #8]
 801b1a2:	4770      	bx	lr

0801b1a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 801b1a4:	6803      	ldr	r3, [r0, #0]
 801b1a6:	6041      	str	r1, [r0, #4]
 801b1a8:	2200      	movs	r2, #0
 801b1aa:	545a      	strb	r2, [r3, r1]
 801b1ac:	4770      	bx	lr
 801b1ae:	bf00      	nop

0801b1b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801b1b0:	6808      	ldr	r0, [r1, #0]
 801b1b2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801b1b6:	b508      	push	{r3, lr}
 801b1b8:	d219      	bcs.n	801b1ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x3e>
 801b1ba:	4290      	cmp	r0, r2
 801b1bc:	d912      	bls.n	801b1e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x34>
 801b1be:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 801b1c2:	ea4f 0342 	mov.w	r3, r2, lsl #1
 801b1c6:	d20d      	bcs.n	801b1e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x34>
 801b1c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b1cc:	d308      	bcc.n	801b1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>
 801b1ce:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801b1d2:	600b      	str	r3, [r1, #0]
 801b1d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801b1d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b1dc:	f7ff bdca 	b.w	801ad74 <_Znwj>
 801b1e0:	600b      	str	r3, [r1, #0]
 801b1e2:	4618      	mov	r0, r3
 801b1e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b1e8:	3001      	adds	r0, #1
 801b1ea:	f7ff bdc3 	b.w	801ad74 <_Znwj>
 801b1ee:	4801      	ldr	r0, [pc, #4]	; (801b1f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x44>)
 801b1f0:	f7ff fe1e 	bl	801ae30 <_ZSt20__throw_length_errorPKc>
 801b1f4:	08021b94 	.word	0x08021b94

0801b1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 801b1f8:	b530      	push	{r4, r5, lr}
 801b1fa:	b083      	sub	sp, #12
 801b1fc:	290f      	cmp	r1, #15
 801b1fe:	9101      	str	r1, [sp, #4]
 801b200:	4604      	mov	r4, r0
 801b202:	4615      	mov	r5, r2
 801b204:	d80f      	bhi.n	801b226 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x2e>
 801b206:	6800      	ldr	r0, [r0, #0]
 801b208:	460b      	mov	r3, r1
 801b20a:	b13b      	cbz	r3, 801b21c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x24>
 801b20c:	2b01      	cmp	r3, #1
 801b20e:	d012      	beq.n	801b236 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x3e>
 801b210:	461a      	mov	r2, r3
 801b212:	4629      	mov	r1, r5
 801b214:	f003 fbec 	bl	801e9f0 <memset>
 801b218:	9b01      	ldr	r3, [sp, #4]
 801b21a:	6820      	ldr	r0, [r4, #0]
 801b21c:	6063      	str	r3, [r4, #4]
 801b21e:	2200      	movs	r2, #0
 801b220:	54c2      	strb	r2, [r0, r3]
 801b222:	b003      	add	sp, #12
 801b224:	bd30      	pop	{r4, r5, pc}
 801b226:	2200      	movs	r2, #0
 801b228:	a901      	add	r1, sp, #4
 801b22a:	f7ff ffc1 	bl	801b1b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801b22e:	9b01      	ldr	r3, [sp, #4]
 801b230:	6020      	str	r0, [r4, #0]
 801b232:	60a3      	str	r3, [r4, #8]
 801b234:	e7e9      	b.n	801b20a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x12>
 801b236:	7005      	strb	r5, [r0, #0]
 801b238:	9b01      	ldr	r3, [sp, #4]
 801b23a:	6820      	ldr	r0, [r4, #0]
 801b23c:	6063      	str	r3, [r4, #4]
 801b23e:	2200      	movs	r2, #0
 801b240:	54c2      	strb	r2, [r0, r3]
 801b242:	b003      	add	sp, #12
 801b244:	bd30      	pop	{r4, r5, pc}
 801b246:	bf00      	nop

0801b248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801b248:	1a52      	subs	r2, r2, r1
 801b24a:	2a01      	cmp	r2, #1
 801b24c:	d003      	beq.n	801b256 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_+0xe>
 801b24e:	b902      	cbnz	r2, 801b252 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_+0xa>
 801b250:	4770      	bx	lr
 801b252:	f003 bcd1 	b.w	801ebf8 <memcpy>
 801b256:	780b      	ldrb	r3, [r1, #0]
 801b258:	7003      	strb	r3, [r0, #0]
 801b25a:	4770      	bx	lr

0801b25c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801b25c:	1a52      	subs	r2, r2, r1
 801b25e:	2a01      	cmp	r2, #1
 801b260:	d003      	beq.n	801b26a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_+0xe>
 801b262:	b902      	cbnz	r2, 801b266 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_+0xa>
 801b264:	4770      	bx	lr
 801b266:	f003 bcc7 	b.w	801ebf8 <memcpy>
 801b26a:	780b      	ldrb	r3, [r1, #0]
 801b26c:	7003      	strb	r3, [r0, #0]
 801b26e:	4770      	bx	lr

0801b270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b274:	b083      	sub	sp, #12
 801b276:	6847      	ldr	r7, [r0, #4]
 801b278:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 801b27c:	4681      	mov	r9, r0
 801b27e:	469a      	mov	sl, r3
 801b280:	ebab 0302 	sub.w	r3, fp, r2
 801b284:	443b      	add	r3, r7
 801b286:	9301      	str	r3, [sp, #4]
 801b288:	f859 3b08 	ldr.w	r3, [r9], #8
 801b28c:	4599      	cmp	r9, r3
 801b28e:	eb01 0602 	add.w	r6, r1, r2
 801b292:	460d      	mov	r5, r1
 801b294:	bf14      	ite	ne
 801b296:	6882      	ldrne	r2, [r0, #8]
 801b298:	220f      	moveq	r2, #15
 801b29a:	a901      	add	r1, sp, #4
 801b29c:	4604      	mov	r4, r0
 801b29e:	f7ff ff87 	bl	801b1b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801b2a2:	1bbf      	subs	r7, r7, r6
 801b2a4:	4680      	mov	r8, r0
 801b2a6:	b12d      	cbz	r5, 801b2b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x44>
 801b2a8:	2d01      	cmp	r5, #1
 801b2aa:	6821      	ldr	r1, [r4, #0]
 801b2ac:	d029      	beq.n	801b302 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x92>
 801b2ae:	462a      	mov	r2, r5
 801b2b0:	f003 fca2 	bl	801ebf8 <memcpy>
 801b2b4:	f1ba 0f00 	cmp.w	sl, #0
 801b2b8:	d00b      	beq.n	801b2d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x62>
 801b2ba:	f1bb 0f00 	cmp.w	fp, #0
 801b2be:	d008      	beq.n	801b2d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x62>
 801b2c0:	f1bb 0f01 	cmp.w	fp, #1
 801b2c4:	eb08 0005 	add.w	r0, r8, r5
 801b2c8:	d022      	beq.n	801b310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0xa0>
 801b2ca:	4651      	mov	r1, sl
 801b2cc:	465a      	mov	r2, fp
 801b2ce:	f003 fc93 	bl	801ebf8 <memcpy>
 801b2d2:	b157      	cbz	r7, 801b2ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x7a>
 801b2d4:	6823      	ldr	r3, [r4, #0]
 801b2d6:	445d      	add	r5, fp
 801b2d8:	2f01      	cmp	r7, #1
 801b2da:	eb08 0005 	add.w	r0, r8, r5
 801b2de:	eb03 0106 	add.w	r1, r3, r6
 801b2e2:	d011      	beq.n	801b308 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x98>
 801b2e4:	463a      	mov	r2, r7
 801b2e6:	f003 fc87 	bl	801ebf8 <memcpy>
 801b2ea:	6820      	ldr	r0, [r4, #0]
 801b2ec:	4581      	cmp	r9, r0
 801b2ee:	d001      	beq.n	801b2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x84>
 801b2f0:	f000 fbb6 	bl	801ba60 <_ZdlPv>
 801b2f4:	9b01      	ldr	r3, [sp, #4]
 801b2f6:	f8c4 8000 	str.w	r8, [r4]
 801b2fa:	60a3      	str	r3, [r4, #8]
 801b2fc:	b003      	add	sp, #12
 801b2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b302:	780b      	ldrb	r3, [r1, #0]
 801b304:	7003      	strb	r3, [r0, #0]
 801b306:	e7d5      	b.n	801b2b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x44>
 801b308:	5d9b      	ldrb	r3, [r3, r6]
 801b30a:	f808 3005 	strb.w	r3, [r8, r5]
 801b30e:	e7ec      	b.n	801b2ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x7a>
 801b310:	f89a 3000 	ldrb.w	r3, [sl]
 801b314:	f808 3005 	strb.w	r3, [r8, r5]
 801b318:	e7db      	b.n	801b2d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x62>
 801b31a:	bf00      	nop

0801b31c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
 801b31c:	b538      	push	{r3, r4, r5, lr}
 801b31e:	6843      	ldr	r3, [r0, #4]
 801b320:	eb01 0c02 	add.w	ip, r1, r2
 801b324:	4615      	mov	r5, r2
 801b326:	ebb3 020c 	subs.w	r2, r3, ip
 801b32a:	4604      	mov	r4, r0
 801b32c:	d00b      	beq.n	801b346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x2a>
 801b32e:	b155      	cbz	r5, 801b346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x2a>
 801b330:	6803      	ldr	r3, [r0, #0]
 801b332:	2a01      	cmp	r2, #1
 801b334:	eb03 0001 	add.w	r0, r3, r1
 801b338:	eb03 0e0c 	add.w	lr, r3, ip
 801b33c:	d009      	beq.n	801b352 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x36>
 801b33e:	4671      	mov	r1, lr
 801b340:	f003 fb3c 	bl	801e9bc <memmove>
 801b344:	6863      	ldr	r3, [r4, #4]
 801b346:	1b5d      	subs	r5, r3, r5
 801b348:	6823      	ldr	r3, [r4, #0]
 801b34a:	6065      	str	r5, [r4, #4]
 801b34c:	2100      	movs	r1, #0
 801b34e:	5559      	strb	r1, [r3, r5]
 801b350:	bd38      	pop	{r3, r4, r5, pc}
 801b352:	f813 200c 	ldrb.w	r2, [r3, ip]
 801b356:	545a      	strb	r2, [r3, r1]
 801b358:	6863      	ldr	r3, [r4, #4]
 801b35a:	e7f4      	b.n	801b346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x2a>

0801b35c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 801b35c:	2200      	movs	r2, #0
 801b35e:	f100 0108 	add.w	r1, r0, #8
 801b362:	e9c0 1200 	strd	r1, r2, [r0]
 801b366:	7202      	strb	r2, [r0, #8]
 801b368:	4770      	bx	lr
 801b36a:	bf00      	nop

0801b36c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>:
 801b36c:	2200      	movs	r2, #0
 801b36e:	f100 0108 	add.w	r1, r0, #8
 801b372:	e9c0 1200 	strd	r1, r2, [r0]
 801b376:	7202      	strb	r2, [r0, #8]
 801b378:	4770      	bx	lr
 801b37a:	bf00      	nop

0801b37c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 801b37c:	460b      	mov	r3, r1
 801b37e:	b530      	push	{r4, r5, lr}
 801b380:	f100 0408 	add.w	r4, r0, #8
 801b384:	6004      	str	r4, [r0, #0]
 801b386:	f853 2b08 	ldr.w	r2, [r3], #8
 801b38a:	4293      	cmp	r3, r2
 801b38c:	d009      	beq.n	801b3a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x26>
 801b38e:	688c      	ldr	r4, [r1, #8]
 801b390:	6002      	str	r2, [r0, #0]
 801b392:	6084      	str	r4, [r0, #8]
 801b394:	684c      	ldr	r4, [r1, #4]
 801b396:	6044      	str	r4, [r0, #4]
 801b398:	2200      	movs	r2, #0
 801b39a:	e9c1 3200 	strd	r3, r2, [r1]
 801b39e:	720a      	strb	r2, [r1, #8]
 801b3a0:	bd30      	pop	{r4, r5, pc}
 801b3a2:	688d      	ldr	r5, [r1, #8]
 801b3a4:	f8d3 e004 	ldr.w	lr, [r3, #4]
 801b3a8:	f8d3 c008 	ldr.w	ip, [r3, #8]
 801b3ac:	68da      	ldr	r2, [r3, #12]
 801b3ae:	6142      	str	r2, [r0, #20]
 801b3b0:	6085      	str	r5, [r0, #8]
 801b3b2:	f8c0 e00c 	str.w	lr, [r0, #12]
 801b3b6:	f8c0 c010 	str.w	ip, [r0, #16]
 801b3ba:	e7eb      	b.n	801b394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x18>

0801b3bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801b3bc:	4603      	mov	r3, r0
 801b3be:	b510      	push	{r4, lr}
 801b3c0:	4604      	mov	r4, r0
 801b3c2:	f853 0b08 	ldr.w	r0, [r3], #8
 801b3c6:	4298      	cmp	r0, r3
 801b3c8:	d001      	beq.n	801b3ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev+0x12>
 801b3ca:	f000 fb49 	bl	801ba60 <_ZdlPv>
 801b3ce:	4620      	mov	r0, r4
 801b3d0:	bd10      	pop	{r4, pc}
 801b3d2:	bf00      	nop

0801b3d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 801b3d4:	b570      	push	{r4, r5, r6, lr}
 801b3d6:	460d      	mov	r5, r1
 801b3d8:	6803      	ldr	r3, [r0, #0]
 801b3da:	f855 2b08 	ldr.w	r2, [r5], #8
 801b3de:	4295      	cmp	r5, r2
 801b3e0:	460e      	mov	r6, r1
 801b3e2:	4604      	mov	r4, r0
 801b3e4:	d01d      	beq.n	801b422 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4e>
 801b3e6:	f100 0108 	add.w	r1, r0, #8
 801b3ea:	428b      	cmp	r3, r1
 801b3ec:	d00d      	beq.n	801b40a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x36>
 801b3ee:	6002      	str	r2, [r0, #0]
 801b3f0:	6872      	ldr	r2, [r6, #4]
 801b3f2:	6042      	str	r2, [r0, #4]
 801b3f4:	68b1      	ldr	r1, [r6, #8]
 801b3f6:	6882      	ldr	r2, [r0, #8]
 801b3f8:	6081      	str	r1, [r0, #8]
 801b3fa:	b15b      	cbz	r3, 801b414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 801b3fc:	6033      	str	r3, [r6, #0]
 801b3fe:	60b2      	str	r2, [r6, #8]
 801b400:	2200      	movs	r2, #0
 801b402:	6072      	str	r2, [r6, #4]
 801b404:	701a      	strb	r2, [r3, #0]
 801b406:	4620      	mov	r0, r4
 801b408:	bd70      	pop	{r4, r5, r6, pc}
 801b40a:	6873      	ldr	r3, [r6, #4]
 801b40c:	e9c0 2300 	strd	r2, r3, [r0]
 801b410:	68b3      	ldr	r3, [r6, #8]
 801b412:	6083      	str	r3, [r0, #8]
 801b414:	462b      	mov	r3, r5
 801b416:	2200      	movs	r2, #0
 801b418:	6035      	str	r5, [r6, #0]
 801b41a:	6072      	str	r2, [r6, #4]
 801b41c:	701a      	strb	r2, [r3, #0]
 801b41e:	4620      	mov	r0, r4
 801b420:	bd70      	pop	{r4, r5, r6, pc}
 801b422:	4288      	cmp	r0, r1
 801b424:	d017      	beq.n	801b456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x82>
 801b426:	684a      	ldr	r2, [r1, #4]
 801b428:	b13a      	cbz	r2, 801b43a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x66>
 801b42a:	2a01      	cmp	r2, #1
 801b42c:	d00e      	beq.n	801b44c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x78>
 801b42e:	4618      	mov	r0, r3
 801b430:	4629      	mov	r1, r5
 801b432:	f003 fbe1 	bl	801ebf8 <memcpy>
 801b436:	6823      	ldr	r3, [r4, #0]
 801b438:	6872      	ldr	r2, [r6, #4]
 801b43a:	6062      	str	r2, [r4, #4]
 801b43c:	2100      	movs	r1, #0
 801b43e:	5499      	strb	r1, [r3, r2]
 801b440:	6833      	ldr	r3, [r6, #0]
 801b442:	2200      	movs	r2, #0
 801b444:	6072      	str	r2, [r6, #4]
 801b446:	701a      	strb	r2, [r3, #0]
 801b448:	4620      	mov	r0, r4
 801b44a:	bd70      	pop	{r4, r5, r6, pc}
 801b44c:	7a0a      	ldrb	r2, [r1, #8]
 801b44e:	701a      	strb	r2, [r3, #0]
 801b450:	6803      	ldr	r3, [r0, #0]
 801b452:	684a      	ldr	r2, [r1, #4]
 801b454:	e7f1      	b.n	801b43a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x66>
 801b456:	462b      	mov	r3, r5
 801b458:	e7d2      	b.n	801b400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2c>
 801b45a:	bf00      	nop

0801b45c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 801b45c:	6840      	ldr	r0, [r0, #4]
 801b45e:	4770      	bx	lr

0801b460 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 801b460:	6840      	ldr	r0, [r0, #4]
 801b462:	4770      	bx	lr

0801b464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 801b464:	b570      	push	{r4, r5, r6, lr}
 801b466:	4605      	mov	r5, r0
 801b468:	b082      	sub	sp, #8
 801b46a:	f855 3b08 	ldr.w	r3, [r5], #8
 801b46e:	9101      	str	r1, [sp, #4]
 801b470:	429d      	cmp	r5, r3
 801b472:	bf18      	it	ne
 801b474:	6882      	ldrne	r2, [r0, #8]
 801b476:	9b01      	ldr	r3, [sp, #4]
 801b478:	bf08      	it	eq
 801b47a:	220f      	moveq	r2, #15
 801b47c:	4293      	cmp	r3, r2
 801b47e:	4604      	mov	r4, r0
 801b480:	d801      	bhi.n	801b486 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x22>
 801b482:	b002      	add	sp, #8
 801b484:	bd70      	pop	{r4, r5, r6, pc}
 801b486:	a901      	add	r1, sp, #4
 801b488:	f7ff fe92 	bl	801b1b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801b48c:	6863      	ldr	r3, [r4, #4]
 801b48e:	6821      	ldr	r1, [r4, #0]
 801b490:	4606      	mov	r6, r0
 801b492:	1c5a      	adds	r2, r3, #1
 801b494:	b173      	cbz	r3, 801b4b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x50>
 801b496:	b94a      	cbnz	r2, 801b4ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x48>
 801b498:	428d      	cmp	r5, r1
 801b49a:	d002      	beq.n	801b4a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x3e>
 801b49c:	4608      	mov	r0, r1
 801b49e:	f000 fadf 	bl	801ba60 <_ZdlPv>
 801b4a2:	9b01      	ldr	r3, [sp, #4]
 801b4a4:	6026      	str	r6, [r4, #0]
 801b4a6:	60a3      	str	r3, [r4, #8]
 801b4a8:	b002      	add	sp, #8
 801b4aa:	bd70      	pop	{r4, r5, r6, pc}
 801b4ac:	f003 fba4 	bl	801ebf8 <memcpy>
 801b4b0:	6821      	ldr	r1, [r4, #0]
 801b4b2:	e7f1      	b.n	801b498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x34>
 801b4b4:	780b      	ldrb	r3, [r1, #0]
 801b4b6:	7003      	strb	r3, [r0, #0]
 801b4b8:	6821      	ldr	r1, [r4, #0]
 801b4ba:	e7ed      	b.n	801b498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x34>

0801b4bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 801b4bc:	6800      	ldr	r0, [r0, #0]
 801b4be:	4408      	add	r0, r1
 801b4c0:	4770      	bx	lr
 801b4c2:	bf00      	nop

0801b4c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>:
 801b4c4:	e9d0 0300 	ldrd	r0, r3, [r0]
 801b4c8:	3b01      	subs	r3, #1
 801b4ca:	4418      	add	r0, r3
 801b4cc:	4770      	bx	lr
 801b4ce:	bf00      	nop

0801b4d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>:
 801b4d0:	b538      	push	{r3, r4, r5, lr}
 801b4d2:	6843      	ldr	r3, [r0, #4]
 801b4d4:	4299      	cmp	r1, r3
 801b4d6:	460d      	mov	r5, r1
 801b4d8:	d814      	bhi.n	801b504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x34>
 801b4da:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801b4de:	4604      	mov	r4, r0
 801b4e0:	d00a      	beq.n	801b4f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x28>
 801b4e2:	b90a      	cbnz	r2, 801b4e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x18>
 801b4e4:	4620      	mov	r0, r4
 801b4e6:	bd38      	pop	{r3, r4, r5, pc}
 801b4e8:	1a5b      	subs	r3, r3, r1
 801b4ea:	429a      	cmp	r2, r3
 801b4ec:	bf28      	it	cs
 801b4ee:	461a      	movcs	r2, r3
 801b4f0:	f7ff ff14 	bl	801b31c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 801b4f4:	4620      	mov	r0, r4
 801b4f6:	bd38      	pop	{r3, r4, r5, pc}
 801b4f8:	6803      	ldr	r3, [r0, #0]
 801b4fa:	6061      	str	r1, [r4, #4]
 801b4fc:	2200      	movs	r2, #0
 801b4fe:	545a      	strb	r2, [r3, r1]
 801b500:	4620      	mov	r0, r4
 801b502:	bd38      	pop	{r3, r4, r5, pc}
 801b504:	4902      	ldr	r1, [pc, #8]	; (801b510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x40>)
 801b506:	4803      	ldr	r0, [pc, #12]	; (801b514 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x44>)
 801b508:	462a      	mov	r2, r5
 801b50a:	f7ff fca9 	bl	801ae60 <_ZSt24__throw_out_of_range_fmtPKcz>
 801b50e:	bf00      	nop
 801b510:	08021be4 	.word	0x08021be4
 801b514:	08021bac 	.word	0x08021bac

0801b518 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 801b518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b51c:	b085      	sub	sp, #20
 801b51e:	4615      	mov	r5, r2
 801b520:	460f      	mov	r7, r1
 801b522:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801b526:	6841      	ldr	r1, [r0, #4]
 801b528:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801b52a:	3a01      	subs	r2, #1
 801b52c:	1a52      	subs	r2, r2, r1
 801b52e:	4296      	cmp	r6, r2
 801b530:	f200 80ba 	bhi.w	801b6a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x190>
 801b534:	4602      	mov	r2, r0
 801b536:	eba6 0a05 	sub.w	sl, r6, r5
 801b53a:	f852 9b08 	ldr.w	r9, [r2], #8
 801b53e:	4591      	cmp	r9, r2
 801b540:	bf18      	it	ne
 801b542:	6882      	ldrne	r2, [r0, #8]
 801b544:	eb01 080a 	add.w	r8, r1, sl
 801b548:	bf08      	it	eq
 801b54a:	220f      	moveq	r2, #15
 801b54c:	4542      	cmp	r2, r8
 801b54e:	4604      	mov	r4, r0
 801b550:	d33d      	bcc.n	801b5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 801b552:	19ea      	adds	r2, r5, r7
 801b554:	1a8a      	subs	r2, r1, r2
 801b556:	4599      	cmp	r9, r3
 801b558:	9202      	str	r2, [sp, #8]
 801b55a:	eb09 0b07 	add.w	fp, r9, r7
 801b55e:	d920      	bls.n	801b5a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8a>
 801b560:	9a02      	ldr	r2, [sp, #8]
 801b562:	b162      	cbz	r2, 801b57e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 801b564:	42b5      	cmp	r5, r6
 801b566:	d00a      	beq.n	801b57e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 801b568:	2a01      	cmp	r2, #1
 801b56a:	eb0b 0006 	add.w	r0, fp, r6
 801b56e:	eb0b 0105 	add.w	r1, fp, r5
 801b572:	d053      	beq.n	801b61c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x104>
 801b574:	9a02      	ldr	r2, [sp, #8]
 801b576:	9303      	str	r3, [sp, #12]
 801b578:	f003 fa20 	bl	801e9bc <memmove>
 801b57c:	9b03      	ldr	r3, [sp, #12]
 801b57e:	b136      	cbz	r6, 801b58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x76>
 801b580:	2e01      	cmp	r6, #1
 801b582:	d02a      	beq.n	801b5da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 801b584:	4632      	mov	r2, r6
 801b586:	4619      	mov	r1, r3
 801b588:	4658      	mov	r0, fp
 801b58a:	f003 fb35 	bl	801ebf8 <memcpy>
 801b58e:	6823      	ldr	r3, [r4, #0]
 801b590:	f8c4 8004 	str.w	r8, [r4, #4]
 801b594:	2200      	movs	r2, #0
 801b596:	4620      	mov	r0, r4
 801b598:	f803 2008 	strb.w	r2, [r3, r8]
 801b59c:	b005      	add	sp, #20
 801b59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5a2:	4449      	add	r1, r9
 801b5a4:	428b      	cmp	r3, r1
 801b5a6:	d8db      	bhi.n	801b560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x48>
 801b5a8:	b326      	cbz	r6, 801b5f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 801b5aa:	42b5      	cmp	r5, r6
 801b5ac:	d219      	bcs.n	801b5e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 801b5ae:	9a02      	ldr	r2, [sp, #8]
 801b5b0:	bb2a      	cbnz	r2, 801b5fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe6>
 801b5b2:	445d      	add	r5, fp
 801b5b4:	199a      	adds	r2, r3, r6
 801b5b6:	4295      	cmp	r5, r2
 801b5b8:	d33c      	bcc.n	801b634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x11c>
 801b5ba:	2e01      	cmp	r6, #1
 801b5bc:	d00d      	beq.n	801b5da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 801b5be:	2e00      	cmp	r6, #0
 801b5c0:	d0e5      	beq.n	801b58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x76>
 801b5c2:	4632      	mov	r2, r6
 801b5c4:	4619      	mov	r1, r3
 801b5c6:	4658      	mov	r0, fp
 801b5c8:	f003 f9f8 	bl	801e9bc <memmove>
 801b5cc:	e7df      	b.n	801b58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x76>
 801b5ce:	9600      	str	r6, [sp, #0]
 801b5d0:	462a      	mov	r2, r5
 801b5d2:	4639      	mov	r1, r7
 801b5d4:	f7ff fe4c 	bl	801b270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801b5d8:	e7d9      	b.n	801b58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x76>
 801b5da:	781b      	ldrb	r3, [r3, #0]
 801b5dc:	f809 3007 	strb.w	r3, [r9, r7]
 801b5e0:	e7d5      	b.n	801b58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x76>
 801b5e2:	2e01      	cmp	r6, #1
 801b5e4:	d04b      	beq.n	801b67e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x166>
 801b5e6:	4619      	mov	r1, r3
 801b5e8:	4632      	mov	r2, r6
 801b5ea:	4658      	mov	r0, fp
 801b5ec:	9303      	str	r3, [sp, #12]
 801b5ee:	f003 f9e5 	bl	801e9bc <memmove>
 801b5f2:	9b03      	ldr	r3, [sp, #12]
 801b5f4:	9a02      	ldr	r2, [sp, #8]
 801b5f6:	2a00      	cmp	r2, #0
 801b5f8:	d0c9      	beq.n	801b58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x76>
 801b5fa:	42b5      	cmp	r5, r6
 801b5fc:	d0c7      	beq.n	801b58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x76>
 801b5fe:	9a02      	ldr	r2, [sp, #8]
 801b600:	2a01      	cmp	r2, #1
 801b602:	eb0b 0006 	add.w	r0, fp, r6
 801b606:	eb0b 0105 	add.w	r1, fp, r5
 801b60a:	d00e      	beq.n	801b62a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x112>
 801b60c:	9a02      	ldr	r2, [sp, #8]
 801b60e:	9303      	str	r3, [sp, #12]
 801b610:	f003 f9d4 	bl	801e9bc <memmove>
 801b614:	9b03      	ldr	r3, [sp, #12]
 801b616:	42b5      	cmp	r5, r6
 801b618:	d3cb      	bcc.n	801b5b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x9a>
 801b61a:	e7b8      	b.n	801b58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x76>
 801b61c:	f81b 2005 	ldrb.w	r2, [fp, r5]
 801b620:	f80b 2006 	strb.w	r2, [fp, r6]
 801b624:	2e00      	cmp	r6, #0
 801b626:	d0b2      	beq.n	801b58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x76>
 801b628:	e7aa      	b.n	801b580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 801b62a:	f81b 2005 	ldrb.w	r2, [fp, r5]
 801b62e:	f80b 2006 	strb.w	r2, [fp, r6]
 801b632:	e7f0      	b.n	801b616 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xfe>
 801b634:	429d      	cmp	r5, r3
 801b636:	d80d      	bhi.n	801b654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x13c>
 801b638:	eba3 030b 	sub.w	r3, r3, fp
 801b63c:	4453      	add	r3, sl
 801b63e:	2e01      	cmp	r6, #1
 801b640:	eb0b 0103 	add.w	r1, fp, r3
 801b644:	d026      	beq.n	801b694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x17c>
 801b646:	2e00      	cmp	r6, #0
 801b648:	d0a1      	beq.n	801b58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x76>
 801b64a:	4632      	mov	r2, r6
 801b64c:	4658      	mov	r0, fp
 801b64e:	f003 fad3 	bl	801ebf8 <memcpy>
 801b652:	e79c      	b.n	801b58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x76>
 801b654:	1aed      	subs	r5, r5, r3
 801b656:	2d01      	cmp	r5, #1
 801b658:	d018      	beq.n	801b68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x174>
 801b65a:	b125      	cbz	r5, 801b666 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x14e>
 801b65c:	4619      	mov	r1, r3
 801b65e:	462a      	mov	r2, r5
 801b660:	4658      	mov	r0, fp
 801b662:	f003 f9ab 	bl	801e9bc <memmove>
 801b666:	1b72      	subs	r2, r6, r5
 801b668:	2a01      	cmp	r2, #1
 801b66a:	eb0b 0005 	add.w	r0, fp, r5
 801b66e:	eb0b 0106 	add.w	r1, fp, r6
 801b672:	d014      	beq.n	801b69e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x186>
 801b674:	2a00      	cmp	r2, #0
 801b676:	d08a      	beq.n	801b58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x76>
 801b678:	f003 fabe 	bl	801ebf8 <memcpy>
 801b67c:	e787      	b.n	801b58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x76>
 801b67e:	781a      	ldrb	r2, [r3, #0]
 801b680:	f809 2007 	strb.w	r2, [r9, r7]
 801b684:	9a02      	ldr	r2, [sp, #8]
 801b686:	2a00      	cmp	r2, #0
 801b688:	d0c5      	beq.n	801b616 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xfe>
 801b68a:	e7b6      	b.n	801b5fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe2>
 801b68c:	781b      	ldrb	r3, [r3, #0]
 801b68e:	f809 3007 	strb.w	r3, [r9, r7]
 801b692:	e7e8      	b.n	801b666 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x14e>
 801b694:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801b698:	f809 3007 	strb.w	r3, [r9, r7]
 801b69c:	e777      	b.n	801b58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x76>
 801b69e:	f81b 3006 	ldrb.w	r3, [fp, r6]
 801b6a2:	f80b 3005 	strb.w	r3, [fp, r5]
 801b6a6:	e772      	b.n	801b58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x76>
 801b6a8:	4801      	ldr	r0, [pc, #4]	; (801b6b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x198>)
 801b6aa:	f7ff fbc1 	bl	801ae30 <_ZSt20__throw_length_errorPKc>
 801b6ae:	bf00      	nop
 801b6b0:	08021c10 	.word	0x08021c10

0801b6b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 801b6b4:	b530      	push	{r4, r5, lr}
 801b6b6:	4605      	mov	r5, r0
 801b6b8:	b085      	sub	sp, #20
 801b6ba:	4610      	mov	r0, r2
 801b6bc:	9203      	str	r2, [sp, #12]
 801b6be:	460c      	mov	r4, r1
 801b6c0:	f7ea fdae 	bl	8006220 <strlen>
 801b6c4:	686a      	ldr	r2, [r5, #4]
 801b6c6:	9b03      	ldr	r3, [sp, #12]
 801b6c8:	4294      	cmp	r4, r2
 801b6ca:	d807      	bhi.n	801b6dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc+0x28>
 801b6cc:	9000      	str	r0, [sp, #0]
 801b6ce:	2200      	movs	r2, #0
 801b6d0:	4621      	mov	r1, r4
 801b6d2:	4628      	mov	r0, r5
 801b6d4:	f7ff ff20 	bl	801b518 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 801b6d8:	b005      	add	sp, #20
 801b6da:	bd30      	pop	{r4, r5, pc}
 801b6dc:	4613      	mov	r3, r2
 801b6de:	4902      	ldr	r1, [pc, #8]	; (801b6e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc+0x34>)
 801b6e0:	4802      	ldr	r0, [pc, #8]	; (801b6ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc+0x38>)
 801b6e2:	4622      	mov	r2, r4
 801b6e4:	f7ff fbbc 	bl	801ae60 <_ZSt24__throw_out_of_range_fmtPKcz>
 801b6e8:	08021bf8 	.word	0x08021bf8
 801b6ec:	08021bac 	.word	0x08021bac

0801b6f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 801b6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6f2:	6847      	ldr	r7, [r0, #4]
 801b6f4:	4604      	mov	r4, r0
 801b6f6:	f850 5b08 	ldr.w	r5, [r0], #8
 801b6fa:	4285      	cmp	r5, r0
 801b6fc:	bf18      	it	ne
 801b6fe:	68a3      	ldrne	r3, [r4, #8]
 801b700:	eb07 0602 	add.w	r6, r7, r2
 801b704:	bf08      	it	eq
 801b706:	230f      	moveq	r3, #15
 801b708:	429e      	cmp	r6, r3
 801b70a:	b083      	sub	sp, #12
 801b70c:	d80d      	bhi.n	801b72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x3a>
 801b70e:	b132      	cbz	r2, 801b71e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x2e>
 801b710:	2a01      	cmp	r2, #1
 801b712:	eb05 0007 	add.w	r0, r5, r7
 801b716:	d011      	beq.n	801b73c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x4c>
 801b718:	f003 fa6e 	bl	801ebf8 <memcpy>
 801b71c:	6825      	ldr	r5, [r4, #0]
 801b71e:	6066      	str	r6, [r4, #4]
 801b720:	2300      	movs	r3, #0
 801b722:	4620      	mov	r0, r4
 801b724:	55ab      	strb	r3, [r5, r6]
 801b726:	b003      	add	sp, #12
 801b728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b72a:	9200      	str	r2, [sp, #0]
 801b72c:	460b      	mov	r3, r1
 801b72e:	2200      	movs	r2, #0
 801b730:	4639      	mov	r1, r7
 801b732:	4620      	mov	r0, r4
 801b734:	f7ff fd9c 	bl	801b270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801b738:	6825      	ldr	r5, [r4, #0]
 801b73a:	e7f0      	b.n	801b71e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x2e>
 801b73c:	780b      	ldrb	r3, [r1, #0]
 801b73e:	55eb      	strb	r3, [r5, r7]
 801b740:	6825      	ldr	r5, [r4, #0]
 801b742:	e7ec      	b.n	801b71e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x2e>

0801b744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 801b744:	b508      	push	{r3, lr}
 801b746:	e9d1 1200 	ldrd	r1, r2, [r1]
 801b74a:	f7ff ffd1 	bl	801b6f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801b74e:	bd08      	pop	{r3, pc}

0801b750 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 801b750:	b508      	push	{r3, lr}
 801b752:	e9d1 1200 	ldrd	r1, r2, [r1]
 801b756:	f7ff ffcb 	bl	801b6f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801b75a:	bd08      	pop	{r3, pc}

0801b75c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 801b75c:	b510      	push	{r4, lr}
 801b75e:	6844      	ldr	r4, [r0, #4]
 801b760:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801b764:	1b1b      	subs	r3, r3, r4
 801b766:	429a      	cmp	r2, r3
 801b768:	d802      	bhi.n	801b770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x14>
 801b76a:	f7ff ffc1 	bl	801b6f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801b76e:	bd10      	pop	{r4, pc}
 801b770:	4801      	ldr	r0, [pc, #4]	; (801b778 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 801b772:	f7ff fb5d 	bl	801ae30 <_ZSt20__throw_length_errorPKc>
 801b776:	bf00      	nop
 801b778:	08021c2c 	.word	0x08021c2c

0801b77c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 801b77c:	b510      	push	{r4, lr}
 801b77e:	4604      	mov	r4, r0
 801b780:	b082      	sub	sp, #8
 801b782:	4608      	mov	r0, r1
 801b784:	9101      	str	r1, [sp, #4]
 801b786:	f7ea fd4b 	bl	8006220 <strlen>
 801b78a:	6861      	ldr	r1, [r4, #4]
 801b78c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801b790:	1a5b      	subs	r3, r3, r1
 801b792:	4283      	cmp	r3, r0
 801b794:	9901      	ldr	r1, [sp, #4]
 801b796:	d305      	bcc.n	801b7a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>
 801b798:	4602      	mov	r2, r0
 801b79a:	4620      	mov	r0, r4
 801b79c:	f7ff ffa8 	bl	801b6f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801b7a0:	b002      	add	sp, #8
 801b7a2:	bd10      	pop	{r4, pc}
 801b7a4:	4801      	ldr	r0, [pc, #4]	; (801b7ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x30>)
 801b7a6:	f7ff fb43 	bl	801ae30 <_ZSt20__throw_length_errorPKc>
 801b7aa:	bf00      	nop
 801b7ac:	08021c2c 	.word	0x08021c2c

0801b7b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801b7b0:	6800      	ldr	r0, [r0, #0]
 801b7b2:	4770      	bx	lr

0801b7b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>:
 801b7b4:	4770      	bx	lr
 801b7b6:	bf00      	nop

0801b7b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
 801b7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b7bc:	6846      	ldr	r6, [r0, #4]
 801b7be:	b353      	cbz	r3, 801b816 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5e>
 801b7c0:	4296      	cmp	r6, r2
 801b7c2:	d924      	bls.n	801b80e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x56>
 801b7c4:	f8d0 9000 	ldr.w	r9, [r0]
 801b7c8:	461d      	mov	r5, r3
 801b7ca:	1ab3      	subs	r3, r6, r2
 801b7cc:	429d      	cmp	r5, r3
 801b7ce:	eb09 0c02 	add.w	ip, r9, r2
 801b7d2:	444e      	add	r6, r9
 801b7d4:	d81b      	bhi.n	801b80e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x56>
 801b7d6:	f1c5 0801 	rsb	r8, r5, #1
 801b7da:	eb18 0203 	adds.w	r2, r8, r3
 801b7de:	d016      	beq.n	801b80e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x56>
 801b7e0:	f891 a000 	ldrb.w	sl, [r1]
 801b7e4:	460f      	mov	r7, r1
 801b7e6:	4651      	mov	r1, sl
 801b7e8:	4660      	mov	r0, ip
 801b7ea:	f7ea fcc9 	bl	8006180 <memchr>
 801b7ee:	462a      	mov	r2, r5
 801b7f0:	4639      	mov	r1, r7
 801b7f2:	4604      	mov	r4, r0
 801b7f4:	b158      	cbz	r0, 801b80e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x56>
 801b7f6:	f003 f8d1 	bl	801e99c <memcmp>
 801b7fa:	f104 0c01 	add.w	ip, r4, #1
 801b7fe:	eba6 020c 	sub.w	r2, r6, ip
 801b802:	b178      	cbz	r0, 801b824 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x6c>
 801b804:	4295      	cmp	r5, r2
 801b806:	d802      	bhi.n	801b80e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x56>
 801b808:	eb18 0202 	adds.w	r2, r8, r2
 801b80c:	d1eb      	bne.n	801b7e6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x2e>
 801b80e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b816:	4296      	cmp	r6, r2
 801b818:	bf2c      	ite	cs
 801b81a:	4610      	movcs	r0, r2
 801b81c:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
 801b820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b824:	eba4 0009 	sub.w	r0, r4, r9
 801b828:	e7f3      	b.n	801b812 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5a>
 801b82a:	bf00      	nop

0801b82c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>:
 801b82c:	b508      	push	{r3, lr}
 801b82e:	e9d1 1300 	ldrd	r1, r3, [r1]
 801b832:	f7ff ffc1 	bl	801b7b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
 801b836:	bd08      	pop	{r3, pc}

0801b838 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
 801b838:	b510      	push	{r4, lr}
 801b83a:	b082      	sub	sp, #8
 801b83c:	4604      	mov	r4, r0
 801b83e:	4608      	mov	r0, r1
 801b840:	9201      	str	r2, [sp, #4]
 801b842:	9100      	str	r1, [sp, #0]
 801b844:	f7ea fcec 	bl	8006220 <strlen>
 801b848:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b84c:	4603      	mov	r3, r0
 801b84e:	4620      	mov	r0, r4
 801b850:	f7ff ffb2 	bl	801b7b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
 801b854:	b002      	add	sp, #8
 801b856:	bd10      	pop	{r4, pc}

0801b858 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 801b858:	b538      	push	{r3, r4, r5, lr}
 801b85a:	6844      	ldr	r4, [r0, #4]
 801b85c:	42a2      	cmp	r2, r4
 801b85e:	d208      	bcs.n	801b872 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x1a>
 801b860:	6805      	ldr	r5, [r0, #0]
 801b862:	4613      	mov	r3, r2
 801b864:	18e8      	adds	r0, r5, r3
 801b866:	1aa2      	subs	r2, r4, r2
 801b868:	f7ea fc8a 	bl	8006180 <memchr>
 801b86c:	b108      	cbz	r0, 801b872 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x1a>
 801b86e:	1b40      	subs	r0, r0, r5
 801b870:	bd38      	pop	{r3, r4, r5, pc}
 801b872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b876:	bd38      	pop	{r3, r4, r5, pc}

0801b878 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 801b878:	6001      	str	r1, [r0, #0]
 801b87a:	4770      	bx	lr

0801b87c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 801b87c:	f100 0308 	add.w	r3, r0, #8
 801b880:	b510      	push	{r4, lr}
 801b882:	6003      	str	r3, [r0, #0]
 801b884:	e9d1 3200 	ldrd	r3, r2, [r1]
 801b888:	4604      	mov	r4, r0
 801b88a:	441a      	add	r2, r3
 801b88c:	4619      	mov	r1, r3
 801b88e:	f04f 0300 	mov.w	r3, #0
 801b892:	f7ee fd7f 	bl	800a394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801b896:	4620      	mov	r0, r4
 801b898:	bd10      	pop	{r4, pc}
 801b89a:	bf00      	nop

0801b89c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>:
 801b89c:	b510      	push	{r4, lr}
 801b89e:	f100 0308 	add.w	r3, r0, #8
 801b8a2:	4604      	mov	r4, r0
 801b8a4:	6003      	str	r3, [r0, #0]
 801b8a6:	440a      	add	r2, r1
 801b8a8:	f04f 0300 	mov.w	r3, #0
 801b8ac:	f7ed f81c 	bl	80088e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 801b8b0:	4620      	mov	r0, r4
 801b8b2:	bd10      	pop	{r4, pc}

0801b8b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 801b8b4:	b538      	push	{r3, r4, r5, lr}
 801b8b6:	684d      	ldr	r5, [r1, #4]
 801b8b8:	42aa      	cmp	r2, r5
 801b8ba:	d811      	bhi.n	801b8e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x2c>
 801b8bc:	4694      	mov	ip, r2
 801b8be:	1aad      	subs	r5, r5, r2
 801b8c0:	f100 0208 	add.w	r2, r0, #8
 801b8c4:	6002      	str	r2, [r0, #0]
 801b8c6:	6809      	ldr	r1, [r1, #0]
 801b8c8:	4461      	add	r1, ip
 801b8ca:	4604      	mov	r4, r0
 801b8cc:	429d      	cmp	r5, r3
 801b8ce:	bf94      	ite	ls
 801b8d0:	194a      	addls	r2, r1, r5
 801b8d2:	18ca      	addhi	r2, r1, r3
 801b8d4:	f04f 0300 	mov.w	r3, #0
 801b8d8:	f7ed f806 	bl	80088e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 801b8dc:	4620      	mov	r0, r4
 801b8de:	bd38      	pop	{r3, r4, r5, pc}
 801b8e0:	4902      	ldr	r1, [pc, #8]	; (801b8ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x38>)
 801b8e2:	4803      	ldr	r0, [pc, #12]	; (801b8f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x3c>)
 801b8e4:	462b      	mov	r3, r5
 801b8e6:	f7ff fabb 	bl	801ae60 <_ZSt24__throw_out_of_range_fmtPKcz>
 801b8ea:	bf00      	nop
 801b8ec:	08021c44 	.word	0x08021c44
 801b8f0:	08021bac 	.word	0x08021bac

0801b8f4 <_ZNKSt9bad_alloc4whatEv>:
 801b8f4:	4800      	ldr	r0, [pc, #0]	; (801b8f8 <_ZNKSt9bad_alloc4whatEv+0x4>)
 801b8f6:	4770      	bx	lr
 801b8f8:	08021c5c 	.word	0x08021c5c

0801b8fc <_ZNSt9bad_allocD1Ev>:
 801b8fc:	b510      	push	{r4, lr}
 801b8fe:	4b03      	ldr	r3, [pc, #12]	; (801b90c <_ZNSt9bad_allocD1Ev+0x10>)
 801b900:	6003      	str	r3, [r0, #0]
 801b902:	4604      	mov	r4, r0
 801b904:	f000 faa6 	bl	801be54 <_ZNSt9exceptionD1Ev>
 801b908:	4620      	mov	r0, r4
 801b90a:	bd10      	pop	{r4, pc}
 801b90c:	08021c90 	.word	0x08021c90

0801b910 <_ZNSt9bad_allocD0Ev>:
 801b910:	b510      	push	{r4, lr}
 801b912:	4b05      	ldr	r3, [pc, #20]	; (801b928 <_ZNSt9bad_allocD0Ev+0x18>)
 801b914:	6003      	str	r3, [r0, #0]
 801b916:	4604      	mov	r4, r0
 801b918:	f000 fa9c 	bl	801be54 <_ZNSt9exceptionD1Ev>
 801b91c:	4620      	mov	r0, r4
 801b91e:	2104      	movs	r1, #4
 801b920:	f7ff fa24 	bl	801ad6c <_ZdlPvj>
 801b924:	4620      	mov	r0, r4
 801b926:	bd10      	pop	{r4, pc}
 801b928:	08021c90 	.word	0x08021c90

0801b92c <_ZNKSt20bad_array_new_length4whatEv>:
 801b92c:	4800      	ldr	r0, [pc, #0]	; (801b930 <_ZNKSt20bad_array_new_length4whatEv+0x4>)
 801b92e:	4770      	bx	lr
 801b930:	08021c9c 	.word	0x08021c9c

0801b934 <_ZNSt20bad_array_new_lengthD1Ev>:
 801b934:	b510      	push	{r4, lr}
 801b936:	4b03      	ldr	r3, [pc, #12]	; (801b944 <_ZNSt20bad_array_new_lengthD1Ev+0x10>)
 801b938:	6003      	str	r3, [r0, #0]
 801b93a:	4604      	mov	r4, r0
 801b93c:	f7ff ffde 	bl	801b8fc <_ZNSt9bad_allocD1Ev>
 801b940:	4620      	mov	r0, r4
 801b942:	bd10      	pop	{r4, pc}
 801b944:	08021ce8 	.word	0x08021ce8

0801b948 <_ZNSt20bad_array_new_lengthD0Ev>:
 801b948:	b510      	push	{r4, lr}
 801b94a:	4b05      	ldr	r3, [pc, #20]	; (801b960 <_ZNSt20bad_array_new_lengthD0Ev+0x18>)
 801b94c:	6003      	str	r3, [r0, #0]
 801b94e:	4604      	mov	r4, r0
 801b950:	f7ff ffd4 	bl	801b8fc <_ZNSt9bad_allocD1Ev>
 801b954:	4620      	mov	r0, r4
 801b956:	2104      	movs	r1, #4
 801b958:	f7ff fa08 	bl	801ad6c <_ZdlPvj>
 801b95c:	4620      	mov	r0, r4
 801b95e:	bd10      	pop	{r4, pc}
 801b960:	08021ce8 	.word	0x08021ce8

0801b964 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 801b964:	b570      	push	{r4, r5, r6, lr}
 801b966:	6803      	ldr	r3, [r0, #0]
 801b968:	b084      	sub	sp, #16
 801b96a:	2400      	movs	r4, #0
 801b96c:	699e      	ldr	r6, [r3, #24]
 801b96e:	9403      	str	r4, [sp, #12]
 801b970:	2310      	movs	r3, #16
 801b972:	4615      	mov	r5, r2
 801b974:	9302      	str	r3, [sp, #8]
 801b976:	e9cd 4400 	strd	r4, r4, [sp]
 801b97a:	466b      	mov	r3, sp
 801b97c:	6812      	ldr	r2, [r2, #0]
 801b97e:	47b0      	blx	r6
 801b980:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801b984:	f003 0306 	and.w	r3, r3, #6
 801b988:	2b06      	cmp	r3, #6
 801b98a:	bf03      	ittte	eq
 801b98c:	9b00      	ldreq	r3, [sp, #0]
 801b98e:	602b      	streq	r3, [r5, #0]
 801b990:	2001      	moveq	r0, #1
 801b992:	4620      	movne	r0, r4
 801b994:	b004      	add	sp, #16
 801b996:	bd70      	pop	{r4, r5, r6, pc}

0801b998 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801b998:	9800      	ldr	r0, [sp, #0]
 801b99a:	4290      	cmp	r0, r2
 801b99c:	bf14      	ite	ne
 801b99e:	2001      	movne	r0, #1
 801b9a0:	2006      	moveq	r0, #6
 801b9a2:	4770      	bx	lr

0801b9a4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 801b9a4:	b510      	push	{r4, lr}
 801b9a6:	4b03      	ldr	r3, [pc, #12]	; (801b9b4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 801b9a8:	6003      	str	r3, [r0, #0]
 801b9aa:	4604      	mov	r4, r0
 801b9ac:	f000 fee8 	bl	801c780 <_ZNSt9type_infoD1Ev>
 801b9b0:	4620      	mov	r0, r4
 801b9b2:	bd10      	pop	{r4, pc}
 801b9b4:	08021d2c 	.word	0x08021d2c

0801b9b8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 801b9b8:	b510      	push	{r4, lr}
 801b9ba:	4b05      	ldr	r3, [pc, #20]	; (801b9d0 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 801b9bc:	6003      	str	r3, [r0, #0]
 801b9be:	4604      	mov	r4, r0
 801b9c0:	f000 fede 	bl	801c780 <_ZNSt9type_infoD1Ev>
 801b9c4:	4620      	mov	r0, r4
 801b9c6:	2108      	movs	r1, #8
 801b9c8:	f7ff f9d0 	bl	801ad6c <_ZdlPvj>
 801b9cc:	4620      	mov	r0, r4
 801b9ce:	bd10      	pop	{r4, pc}
 801b9d0:	08021d2c 	.word	0x08021d2c

0801b9d4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801b9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9d8:	9f06      	ldr	r7, [sp, #24]
 801b9da:	9908      	ldr	r1, [sp, #32]
 801b9dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b9de:	428f      	cmp	r7, r1
 801b9e0:	4604      	mov	r4, r0
 801b9e2:	4690      	mov	r8, r2
 801b9e4:	461d      	mov	r5, r3
 801b9e6:	d00c      	beq.n	801ba02 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 801b9e8:	4629      	mov	r1, r5
 801b9ea:	4620      	mov	r0, r4
 801b9ec:	f000 fecc 	bl	801c788 <_ZNKSt9type_infoeqERKS_>
 801b9f0:	b120      	cbz	r0, 801b9fc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
 801b9f2:	2301      	movs	r3, #1
 801b9f4:	6037      	str	r7, [r6, #0]
 801b9f6:	f886 8004 	strb.w	r8, [r6, #4]
 801b9fa:	71b3      	strb	r3, [r6, #6]
 801b9fc:	2000      	movs	r0, #0
 801b9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba02:	9907      	ldr	r1, [sp, #28]
 801ba04:	f000 fec0 	bl	801c788 <_ZNKSt9type_infoeqERKS_>
 801ba08:	2800      	cmp	r0, #0
 801ba0a:	d0ed      	beq.n	801b9e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 801ba0c:	f886 8005 	strb.w	r8, [r6, #5]
 801ba10:	2000      	movs	r0, #0
 801ba12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba16:	bf00      	nop

0801ba18 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801ba18:	b538      	push	{r3, r4, r5, lr}
 801ba1a:	4615      	mov	r5, r2
 801ba1c:	461c      	mov	r4, r3
 801ba1e:	f000 feb3 	bl	801c788 <_ZNKSt9type_infoeqERKS_>
 801ba22:	b900      	cbnz	r0, 801ba26 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0xe>
 801ba24:	bd38      	pop	{r3, r4, r5, pc}
 801ba26:	2208      	movs	r2, #8
 801ba28:	2306      	movs	r3, #6
 801ba2a:	6025      	str	r5, [r4, #0]
 801ba2c:	60e2      	str	r2, [r4, #12]
 801ba2e:	7123      	strb	r3, [r4, #4]
 801ba30:	bd38      	pop	{r3, r4, r5, pc}
 801ba32:	bf00      	nop

0801ba34 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 801ba34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba38:	4606      	mov	r6, r0
 801ba3a:	4617      	mov	r7, r2
 801ba3c:	461d      	mov	r5, r3
 801ba3e:	460c      	mov	r4, r1
 801ba40:	f000 fea2 	bl	801c788 <_ZNKSt9type_infoeqERKS_>
 801ba44:	b948      	cbnz	r0, 801ba5a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801ba46:	2d03      	cmp	r5, #3
 801ba48:	d807      	bhi.n	801ba5a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801ba4a:	6823      	ldr	r3, [r4, #0]
 801ba4c:	463a      	mov	r2, r7
 801ba4e:	4631      	mov	r1, r6
 801ba50:	4620      	mov	r0, r4
 801ba52:	695b      	ldr	r3, [r3, #20]
 801ba54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ba58:	4718      	bx	r3
 801ba5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba5e:	bf00      	nop

0801ba60 <_ZdlPv>:
 801ba60:	f001 bfda 	b.w	801da18 <free>

0801ba64 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
 801ba64:	4920      	ldr	r1, [pc, #128]	; (801bae8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x84>)
 801ba66:	684b      	ldr	r3, [r1, #4]
 801ba68:	b530      	push	{r4, r5, lr}
 801ba6a:	f850 5c08 	ldr.w	r5, [r0, #-8]
 801ba6e:	f1a0 0408 	sub.w	r4, r0, #8
 801ba72:	b35b      	cbz	r3, 801bacc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x68>
 801ba74:	eb04 0e05 	add.w	lr, r4, r5
 801ba78:	4573      	cmp	r3, lr
 801ba7a:	d827      	bhi.n	801bacc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x68>
 801ba7c:	d021      	beq.n	801bac2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x5e>
 801ba7e:	685a      	ldr	r2, [r3, #4]
 801ba80:	f101 0c04 	add.w	ip, r1, #4
 801ba84:	b932      	cbnz	r2, 801ba94 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
 801ba86:	e00f      	b.n	801baa8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x44>
 801ba88:	6851      	ldr	r1, [r2, #4]
 801ba8a:	f103 0c04 	add.w	ip, r3, #4
 801ba8e:	b321      	cbz	r1, 801bada <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x76>
 801ba90:	4613      	mov	r3, r2
 801ba92:	460a      	mov	r2, r1
 801ba94:	4596      	cmp	lr, r2
 801ba96:	d3f7      	bcc.n	801ba88 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x24>
 801ba98:	bf04      	itt	eq
 801ba9a:	e9de 2100 	ldrdeq	r2, r1, [lr]
 801ba9e:	6059      	streq	r1, [r3, #4]
 801baa0:	f8dc 3000 	ldr.w	r3, [ip]
 801baa4:	bf08      	it	eq
 801baa6:	18ad      	addeq	r5, r5, r2
 801baa8:	681a      	ldr	r2, [r3, #0]
 801baaa:	1899      	adds	r1, r3, r2
 801baac:	428c      	cmp	r4, r1
 801baae:	d011      	beq.n	801bad4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x70>
 801bab0:	685b      	ldr	r3, [r3, #4]
 801bab2:	f840 3c04 	str.w	r3, [r0, #-4]
 801bab6:	f8dc 3000 	ldr.w	r3, [ip]
 801baba:	f840 5c08 	str.w	r5, [r0, #-8]
 801babe:	605c      	str	r4, [r3, #4]
 801bac0:	bd30      	pop	{r4, r5, pc}
 801bac2:	681a      	ldr	r2, [r3, #0]
 801bac4:	685b      	ldr	r3, [r3, #4]
 801bac6:	442a      	add	r2, r5
 801bac8:	f840 2c08 	str.w	r2, [r0, #-8]
 801bacc:	f840 3c04 	str.w	r3, [r0, #-4]
 801bad0:	604c      	str	r4, [r1, #4]
 801bad2:	bd30      	pop	{r4, r5, pc}
 801bad4:	442a      	add	r2, r5
 801bad6:	601a      	str	r2, [r3, #0]
 801bad8:	bd30      	pop	{r4, r5, pc}
 801bada:	685b      	ldr	r3, [r3, #4]
 801badc:	681a      	ldr	r2, [r3, #0]
 801bade:	1899      	adds	r1, r3, r2
 801bae0:	428c      	cmp	r4, r1
 801bae2:	d1e5      	bne.n	801bab0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x4c>
 801bae4:	e7f6      	b.n	801bad4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x70>
 801bae6:	bf00      	nop
 801bae8:	20005940 	.word	0x20005940

0801baec <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
 801baec:	4914      	ldr	r1, [pc, #80]	; (801bb40 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x54>)
 801baee:	f100 0308 	add.w	r3, r0, #8
 801baf2:	6848      	ldr	r0, [r1, #4]
 801baf4:	2b08      	cmp	r3, #8
 801baf6:	bf38      	it	cc
 801baf8:	2308      	movcc	r3, #8
 801bafa:	b1f8      	cbz	r0, 801bb3c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x50>
 801bafc:	3307      	adds	r3, #7
 801bafe:	f023 0307 	bic.w	r3, r3, #7
 801bb02:	3104      	adds	r1, #4
 801bb04:	e002      	b.n	801bb0c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x20>
 801bb06:	1d01      	adds	r1, r0, #4
 801bb08:	6840      	ldr	r0, [r0, #4]
 801bb0a:	b180      	cbz	r0, 801bb2e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x42>
 801bb0c:	6802      	ldr	r2, [r0, #0]
 801bb0e:	4293      	cmp	r3, r2
 801bb10:	d8f9      	bhi.n	801bb06 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x1a>
 801bb12:	b430      	push	{r4, r5}
 801bb14:	1ad4      	subs	r4, r2, r3
 801bb16:	2c07      	cmp	r4, #7
 801bb18:	d90a      	bls.n	801bb30 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>
 801bb1a:	18c5      	adds	r5, r0, r3
 801bb1c:	6842      	ldr	r2, [r0, #4]
 801bb1e:	606a      	str	r2, [r5, #4]
 801bb20:	50c4      	str	r4, [r0, r3]
 801bb22:	6808      	ldr	r0, [r1, #0]
 801bb24:	6003      	str	r3, [r0, #0]
 801bb26:	600d      	str	r5, [r1, #0]
 801bb28:	3008      	adds	r0, #8
 801bb2a:	bc30      	pop	{r4, r5}
 801bb2c:	4770      	bx	lr
 801bb2e:	4770      	bx	lr
 801bb30:	6845      	ldr	r5, [r0, #4]
 801bb32:	6002      	str	r2, [r0, #0]
 801bb34:	600d      	str	r5, [r1, #0]
 801bb36:	3008      	adds	r0, #8
 801bb38:	bc30      	pop	{r4, r5}
 801bb3a:	4770      	bx	lr
 801bb3c:	4770      	bx	lr
 801bb3e:	bf00      	nop
 801bb40:	20005940 	.word	0x20005940

0801bb44 <__cxa_allocate_exception>:
 801bb44:	b510      	push	{r4, lr}
 801bb46:	f100 0480 	add.w	r4, r0, #128	; 0x80
 801bb4a:	4620      	mov	r0, r4
 801bb4c:	f001 ff5c 	bl	801da08 <malloc>
 801bb50:	4603      	mov	r3, r0
 801bb52:	b130      	cbz	r0, 801bb62 <__cxa_allocate_exception+0x1e>
 801bb54:	2280      	movs	r2, #128	; 0x80
 801bb56:	2100      	movs	r1, #0
 801bb58:	4618      	mov	r0, r3
 801bb5a:	f002 ff49 	bl	801e9f0 <memset>
 801bb5e:	3080      	adds	r0, #128	; 0x80
 801bb60:	bd10      	pop	{r4, pc}
 801bb62:	4620      	mov	r0, r4
 801bb64:	f7ff ffc2 	bl	801baec <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
 801bb68:	4603      	mov	r3, r0
 801bb6a:	2800      	cmp	r0, #0
 801bb6c:	d1f2      	bne.n	801bb54 <__cxa_allocate_exception+0x10>
 801bb6e:	f000 fca7 	bl	801c4c0 <_ZSt9terminatev>
 801bb72:	bf00      	nop

0801bb74 <__cxa_free_exception>:
 801bb74:	4a06      	ldr	r2, [pc, #24]	; (801bb90 <__cxa_free_exception+0x1c>)
 801bb76:	6893      	ldr	r3, [r2, #8]
 801bb78:	3880      	subs	r0, #128	; 0x80
 801bb7a:	4298      	cmp	r0, r3
 801bb7c:	d905      	bls.n	801bb8a <__cxa_free_exception+0x16>
 801bb7e:	68d2      	ldr	r2, [r2, #12]
 801bb80:	4413      	add	r3, r2
 801bb82:	4298      	cmp	r0, r3
 801bb84:	d201      	bcs.n	801bb8a <__cxa_free_exception+0x16>
 801bb86:	f7ff bf6d 	b.w	801ba64 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 801bb8a:	f001 bf45 	b.w	801da18 <free>
 801bb8e:	bf00      	nop
 801bb90:	20005940 	.word	0x20005940

0801bb94 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 801bb94:	b538      	push	{r3, r4, r5, lr}
 801bb96:	4c08      	ldr	r4, [pc, #32]	; (801bbb8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 801bb98:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 801bb9c:	4628      	mov	r0, r5
 801bb9e:	60e5      	str	r5, [r4, #12]
 801bba0:	f001 ff32 	bl	801da08 <malloc>
 801bba4:	60a0      	str	r0, [r4, #8]
 801bba6:	b120      	cbz	r0, 801bbb2 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 801bba8:	2300      	movs	r3, #0
 801bbaa:	e9c0 5300 	strd	r5, r3, [r0]
 801bbae:	6060      	str	r0, [r4, #4]
 801bbb0:	bd38      	pop	{r3, r4, r5, pc}
 801bbb2:	60e0      	str	r0, [r4, #12]
 801bbb4:	6060      	str	r0, [r4, #4]
 801bbb6:	bd38      	pop	{r3, r4, r5, pc}
 801bbb8:	20005940 	.word	0x20005940

0801bbbc <__cxa_end_cleanup>:
 801bbbc:	b41e      	push	{r1, r2, r3, r4}
 801bbbe:	f000 f88d 	bl	801bcdc <__gnu_end_cleanup>
 801bbc2:	bc1e      	pop	{r1, r2, r3, r4}
 801bbc4:	f7eb fefc 	bl	80079c0 <_Unwind_Resume>

0801bbc8 <__cxa_type_match>:
 801bbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bbca:	7802      	ldrb	r2, [r0, #0]
 801bbcc:	2a47      	cmp	r2, #71	; 0x47
 801bbce:	b083      	sub	sp, #12
 801bbd0:	460c      	mov	r4, r1
 801bbd2:	461d      	mov	r5, r3
 801bbd4:	d019      	beq.n	801bc0a <__cxa_type_match+0x42>
 801bbd6:	4e26      	ldr	r6, [pc, #152]	; (801bc70 <__cxa_type_match+0xa8>)
 801bbd8:	2000      	movs	r0, #0
 801bbda:	6833      	ldr	r3, [r6, #0]
 801bbdc:	9001      	str	r0, [sp, #4]
 801bbde:	689b      	ldr	r3, [r3, #8]
 801bbe0:	4630      	mov	r0, r6
 801bbe2:	4798      	blx	r3
 801bbe4:	b178      	cbz	r0, 801bc06 <__cxa_type_match+0x3e>
 801bbe6:	9b01      	ldr	r3, [sp, #4]
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	9301      	str	r3, [sp, #4]
 801bbec:	2702      	movs	r7, #2
 801bbee:	6823      	ldr	r3, [r4, #0]
 801bbf0:	4631      	mov	r1, r6
 801bbf2:	4620      	mov	r0, r4
 801bbf4:	691e      	ldr	r6, [r3, #16]
 801bbf6:	aa01      	add	r2, sp, #4
 801bbf8:	2301      	movs	r3, #1
 801bbfa:	47b0      	blx	r6
 801bbfc:	bb10      	cbnz	r0, 801bc44 <__cxa_type_match+0x7c>
 801bbfe:	4607      	mov	r7, r0
 801bc00:	4638      	mov	r0, r7
 801bc02:	b003      	add	sp, #12
 801bc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc06:	2701      	movs	r7, #1
 801bc08:	e7f1      	b.n	801bbee <__cxa_type_match+0x26>
 801bc0a:	7843      	ldrb	r3, [r0, #1]
 801bc0c:	2b4e      	cmp	r3, #78	; 0x4e
 801bc0e:	d1e2      	bne.n	801bbd6 <__cxa_type_match+0xe>
 801bc10:	7883      	ldrb	r3, [r0, #2]
 801bc12:	2b55      	cmp	r3, #85	; 0x55
 801bc14:	d1df      	bne.n	801bbd6 <__cxa_type_match+0xe>
 801bc16:	78c3      	ldrb	r3, [r0, #3]
 801bc18:	2b43      	cmp	r3, #67	; 0x43
 801bc1a:	d1dc      	bne.n	801bbd6 <__cxa_type_match+0xe>
 801bc1c:	7903      	ldrb	r3, [r0, #4]
 801bc1e:	2b46      	cmp	r3, #70	; 0x46
 801bc20:	d01a      	beq.n	801bc58 <__cxa_type_match+0x90>
 801bc22:	7903      	ldrb	r3, [r0, #4]
 801bc24:	2b43      	cmp	r3, #67	; 0x43
 801bc26:	d1d6      	bne.n	801bbd6 <__cxa_type_match+0xe>
 801bc28:	7943      	ldrb	r3, [r0, #5]
 801bc2a:	2b2b      	cmp	r3, #43	; 0x2b
 801bc2c:	d1d3      	bne.n	801bbd6 <__cxa_type_match+0xe>
 801bc2e:	7983      	ldrb	r3, [r0, #6]
 801bc30:	2b2b      	cmp	r3, #43	; 0x2b
 801bc32:	d1d0      	bne.n	801bbd6 <__cxa_type_match+0xe>
 801bc34:	79c3      	ldrb	r3, [r0, #7]
 801bc36:	2b01      	cmp	r3, #1
 801bc38:	d8cd      	bhi.n	801bbd6 <__cxa_type_match+0xe>
 801bc3a:	d008      	beq.n	801bc4e <__cxa_type_match+0x86>
 801bc3c:	f850 6c20 	ldr.w	r6, [r0, #-32]
 801bc40:	3058      	adds	r0, #88	; 0x58
 801bc42:	e7ca      	b.n	801bbda <__cxa_type_match+0x12>
 801bc44:	9b01      	ldr	r3, [sp, #4]
 801bc46:	602b      	str	r3, [r5, #0]
 801bc48:	4638      	mov	r0, r7
 801bc4a:	b003      	add	sp, #12
 801bc4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc4e:	f850 0c20 	ldr.w	r0, [r0, #-32]
 801bc52:	f850 6c78 	ldr.w	r6, [r0, #-120]
 801bc56:	e7c0      	b.n	801bbda <__cxa_type_match+0x12>
 801bc58:	7943      	ldrb	r3, [r0, #5]
 801bc5a:	2b4f      	cmp	r3, #79	; 0x4f
 801bc5c:	d1e1      	bne.n	801bc22 <__cxa_type_match+0x5a>
 801bc5e:	7983      	ldrb	r3, [r0, #6]
 801bc60:	2b52      	cmp	r3, #82	; 0x52
 801bc62:	d1de      	bne.n	801bc22 <__cxa_type_match+0x5a>
 801bc64:	79c3      	ldrb	r3, [r0, #7]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d1db      	bne.n	801bc22 <__cxa_type_match+0x5a>
 801bc6a:	4e02      	ldr	r6, [pc, #8]	; (801bc74 <__cxa_type_match+0xac>)
 801bc6c:	4618      	mov	r0, r3
 801bc6e:	e7b4      	b.n	801bbda <__cxa_type_match+0x12>
 801bc70:	08021d6c 	.word	0x08021d6c
 801bc74:	08021d64 	.word	0x08021d64

0801bc78 <__cxa_begin_cleanup>:
 801bc78:	b510      	push	{r4, lr}
 801bc7a:	4604      	mov	r4, r0
 801bc7c:	f000 f8fe 	bl	801be7c <__cxa_get_globals>
 801bc80:	4622      	mov	r2, r4
 801bc82:	f812 3920 	ldrb.w	r3, [r2], #-32
 801bc86:	2b47      	cmp	r3, #71	; 0x47
 801bc88:	d004      	beq.n	801bc94 <__cxa_begin_cleanup+0x1c>
 801bc8a:	6883      	ldr	r3, [r0, #8]
 801bc8c:	bb23      	cbnz	r3, 801bcd8 <__cxa_begin_cleanup+0x60>
 801bc8e:	6082      	str	r2, [r0, #8]
 801bc90:	2001      	movs	r0, #1
 801bc92:	bd10      	pop	{r4, pc}
 801bc94:	7863      	ldrb	r3, [r4, #1]
 801bc96:	2b4e      	cmp	r3, #78	; 0x4e
 801bc98:	d1f7      	bne.n	801bc8a <__cxa_begin_cleanup+0x12>
 801bc9a:	78a3      	ldrb	r3, [r4, #2]
 801bc9c:	2b55      	cmp	r3, #85	; 0x55
 801bc9e:	d1f4      	bne.n	801bc8a <__cxa_begin_cleanup+0x12>
 801bca0:	78e3      	ldrb	r3, [r4, #3]
 801bca2:	2b43      	cmp	r3, #67	; 0x43
 801bca4:	d1f1      	bne.n	801bc8a <__cxa_begin_cleanup+0x12>
 801bca6:	7923      	ldrb	r3, [r4, #4]
 801bca8:	2b43      	cmp	r3, #67	; 0x43
 801bcaa:	d1ee      	bne.n	801bc8a <__cxa_begin_cleanup+0x12>
 801bcac:	7963      	ldrb	r3, [r4, #5]
 801bcae:	2b2b      	cmp	r3, #43	; 0x2b
 801bcb0:	d1eb      	bne.n	801bc8a <__cxa_begin_cleanup+0x12>
 801bcb2:	79a3      	ldrb	r3, [r4, #6]
 801bcb4:	2b2b      	cmp	r3, #43	; 0x2b
 801bcb6:	d1e8      	bne.n	801bc8a <__cxa_begin_cleanup+0x12>
 801bcb8:	79e3      	ldrb	r3, [r4, #7]
 801bcba:	2b01      	cmp	r3, #1
 801bcbc:	d8e5      	bhi.n	801bc8a <__cxa_begin_cleanup+0x12>
 801bcbe:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801bcc2:	3301      	adds	r3, #1
 801bcc4:	2b01      	cmp	r3, #1
 801bcc6:	f844 3c04 	str.w	r3, [r4, #-4]
 801bcca:	d1e1      	bne.n	801bc90 <__cxa_begin_cleanup+0x18>
 801bccc:	6883      	ldr	r3, [r0, #8]
 801bcce:	f844 3c08 	str.w	r3, [r4, #-8]
 801bcd2:	6082      	str	r2, [r0, #8]
 801bcd4:	2001      	movs	r0, #1
 801bcd6:	bd10      	pop	{r4, pc}
 801bcd8:	f000 fbf2 	bl	801c4c0 <_ZSt9terminatev>

0801bcdc <__gnu_end_cleanup>:
 801bcdc:	b508      	push	{r3, lr}
 801bcde:	f000 f8cd 	bl	801be7c <__cxa_get_globals>
 801bce2:	6883      	ldr	r3, [r0, #8]
 801bce4:	b383      	cbz	r3, 801bd48 <__gnu_end_cleanup+0x6c>
 801bce6:	f893 2020 	ldrb.w	r2, [r3, #32]
 801bcea:	2a47      	cmp	r2, #71	; 0x47
 801bcec:	d004      	beq.n	801bcf8 <__gnu_end_cleanup+0x1c>
 801bcee:	2200      	movs	r2, #0
 801bcf0:	6082      	str	r2, [r0, #8]
 801bcf2:	f103 0020 	add.w	r0, r3, #32
 801bcf6:	bd08      	pop	{r3, pc}
 801bcf8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801bcfc:	2a4e      	cmp	r2, #78	; 0x4e
 801bcfe:	d1f6      	bne.n	801bcee <__gnu_end_cleanup+0x12>
 801bd00:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801bd04:	2a55      	cmp	r2, #85	; 0x55
 801bd06:	d1f2      	bne.n	801bcee <__gnu_end_cleanup+0x12>
 801bd08:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801bd0c:	2a43      	cmp	r2, #67	; 0x43
 801bd0e:	d1ee      	bne.n	801bcee <__gnu_end_cleanup+0x12>
 801bd10:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801bd14:	2a43      	cmp	r2, #67	; 0x43
 801bd16:	d1ea      	bne.n	801bcee <__gnu_end_cleanup+0x12>
 801bd18:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 801bd1c:	2a2b      	cmp	r2, #43	; 0x2b
 801bd1e:	d1e6      	bne.n	801bcee <__gnu_end_cleanup+0x12>
 801bd20:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801bd24:	2a2b      	cmp	r2, #43	; 0x2b
 801bd26:	d1e2      	bne.n	801bcee <__gnu_end_cleanup+0x12>
 801bd28:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 801bd2c:	2a01      	cmp	r2, #1
 801bd2e:	d8de      	bhi.n	801bcee <__gnu_end_cleanup+0x12>
 801bd30:	69da      	ldr	r2, [r3, #28]
 801bd32:	3a01      	subs	r2, #1
 801bd34:	61da      	str	r2, [r3, #28]
 801bd36:	2a00      	cmp	r2, #0
 801bd38:	d1db      	bne.n	801bcf2 <__gnu_end_cleanup+0x16>
 801bd3a:	6999      	ldr	r1, [r3, #24]
 801bd3c:	6081      	str	r1, [r0, #8]
 801bd3e:	2200      	movs	r2, #0
 801bd40:	619a      	str	r2, [r3, #24]
 801bd42:	f103 0020 	add.w	r0, r3, #32
 801bd46:	bd08      	pop	{r3, pc}
 801bd48:	f000 fbba 	bl	801c4c0 <_ZSt9terminatev>

0801bd4c <__cxa_begin_catch>:
 801bd4c:	b538      	push	{r3, r4, r5, lr}
 801bd4e:	4604      	mov	r4, r0
 801bd50:	f000 f894 	bl	801be7c <__cxa_get_globals>
 801bd54:	4622      	mov	r2, r4
 801bd56:	6805      	ldr	r5, [r0, #0]
 801bd58:	f812 3920 	ldrb.w	r3, [r2], #-32
 801bd5c:	2b47      	cmp	r3, #71	; 0x47
 801bd5e:	d003      	beq.n	801bd68 <__cxa_begin_catch+0x1c>
 801bd60:	bb85      	cbnz	r5, 801bdc4 <__cxa_begin_catch+0x78>
 801bd62:	6002      	str	r2, [r0, #0]
 801bd64:	4628      	mov	r0, r5
 801bd66:	bd38      	pop	{r3, r4, r5, pc}
 801bd68:	7863      	ldrb	r3, [r4, #1]
 801bd6a:	2b4e      	cmp	r3, #78	; 0x4e
 801bd6c:	d1f8      	bne.n	801bd60 <__cxa_begin_catch+0x14>
 801bd6e:	78a3      	ldrb	r3, [r4, #2]
 801bd70:	2b55      	cmp	r3, #85	; 0x55
 801bd72:	d1f5      	bne.n	801bd60 <__cxa_begin_catch+0x14>
 801bd74:	78e3      	ldrb	r3, [r4, #3]
 801bd76:	2b43      	cmp	r3, #67	; 0x43
 801bd78:	d1f2      	bne.n	801bd60 <__cxa_begin_catch+0x14>
 801bd7a:	7923      	ldrb	r3, [r4, #4]
 801bd7c:	2b43      	cmp	r3, #67	; 0x43
 801bd7e:	d1ef      	bne.n	801bd60 <__cxa_begin_catch+0x14>
 801bd80:	7963      	ldrb	r3, [r4, #5]
 801bd82:	2b2b      	cmp	r3, #43	; 0x2b
 801bd84:	d1ec      	bne.n	801bd60 <__cxa_begin_catch+0x14>
 801bd86:	79a3      	ldrb	r3, [r4, #6]
 801bd88:	2b2b      	cmp	r3, #43	; 0x2b
 801bd8a:	d1e9      	bne.n	801bd60 <__cxa_begin_catch+0x14>
 801bd8c:	79e3      	ldrb	r3, [r4, #7]
 801bd8e:	2b01      	cmp	r3, #1
 801bd90:	d8e6      	bhi.n	801bd60 <__cxa_begin_catch+0x14>
 801bd92:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	db11      	blt.n	801bdbe <__cxa_begin_catch+0x72>
 801bd9a:	3301      	adds	r3, #1
 801bd9c:	f844 3c0c 	str.w	r3, [r4, #-12]
 801bda0:	6843      	ldr	r3, [r0, #4]
 801bda2:	3b01      	subs	r3, #1
 801bda4:	6043      	str	r3, [r0, #4]
 801bda6:	4295      	cmp	r5, r2
 801bda8:	bf18      	it	ne
 801bdaa:	f844 5c10 	strne.w	r5, [r4, #-16]
 801bdae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801bdb0:	bf18      	it	ne
 801bdb2:	6002      	strne	r2, [r0, #0]
 801bdb4:	4620      	mov	r0, r4
 801bdb6:	f7eb fa2f 	bl	8007218 <_Unwind_Complete>
 801bdba:	4628      	mov	r0, r5
 801bdbc:	bd38      	pop	{r3, r4, r5, pc}
 801bdbe:	f1c3 0301 	rsb	r3, r3, #1
 801bdc2:	e7eb      	b.n	801bd9c <__cxa_begin_catch+0x50>
 801bdc4:	f000 fb7c 	bl	801c4c0 <_ZSt9terminatev>

0801bdc8 <__cxa_end_catch>:
 801bdc8:	b508      	push	{r3, lr}
 801bdca:	f000 f853 	bl	801be74 <__cxa_get_globals_fast>
 801bdce:	6803      	ldr	r3, [r0, #0]
 801bdd0:	b37b      	cbz	r3, 801be32 <__cxa_end_catch+0x6a>
 801bdd2:	f893 2020 	ldrb.w	r2, [r3, #32]
 801bdd6:	2a47      	cmp	r2, #71	; 0x47
 801bdd8:	d007      	beq.n	801bdea <__cxa_end_catch+0x22>
 801bdda:	2200      	movs	r2, #0
 801bddc:	6002      	str	r2, [r0, #0]
 801bdde:	f103 0020 	add.w	r0, r3, #32
 801bde2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801bde6:	f7eb ba19 	b.w	800721c <_Unwind_DeleteException>
 801bdea:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801bdee:	2a4e      	cmp	r2, #78	; 0x4e
 801bdf0:	d1f3      	bne.n	801bdda <__cxa_end_catch+0x12>
 801bdf2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801bdf6:	2a55      	cmp	r2, #85	; 0x55
 801bdf8:	d1ef      	bne.n	801bdda <__cxa_end_catch+0x12>
 801bdfa:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801bdfe:	2a43      	cmp	r2, #67	; 0x43
 801be00:	d1eb      	bne.n	801bdda <__cxa_end_catch+0x12>
 801be02:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801be06:	2a43      	cmp	r2, #67	; 0x43
 801be08:	d1e7      	bne.n	801bdda <__cxa_end_catch+0x12>
 801be0a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 801be0e:	2a2b      	cmp	r2, #43	; 0x2b
 801be10:	d1e3      	bne.n	801bdda <__cxa_end_catch+0x12>
 801be12:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801be16:	2a2b      	cmp	r2, #43	; 0x2b
 801be18:	d1df      	bne.n	801bdda <__cxa_end_catch+0x12>
 801be1a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 801be1e:	2a01      	cmp	r2, #1
 801be20:	d8db      	bhi.n	801bdda <__cxa_end_catch+0x12>
 801be22:	695a      	ldr	r2, [r3, #20]
 801be24:	2a00      	cmp	r2, #0
 801be26:	db05      	blt.n	801be34 <__cxa_end_catch+0x6c>
 801be28:	3a01      	subs	r2, #1
 801be2a:	d008      	beq.n	801be3e <__cxa_end_catch+0x76>
 801be2c:	1c51      	adds	r1, r2, #1
 801be2e:	d00e      	beq.n	801be4e <__cxa_end_catch+0x86>
 801be30:	615a      	str	r2, [r3, #20]
 801be32:	bd08      	pop	{r3, pc}
 801be34:	3201      	adds	r2, #1
 801be36:	d1fb      	bne.n	801be30 <__cxa_end_catch+0x68>
 801be38:	6919      	ldr	r1, [r3, #16]
 801be3a:	6001      	str	r1, [r0, #0]
 801be3c:	e7f8      	b.n	801be30 <__cxa_end_catch+0x68>
 801be3e:	691a      	ldr	r2, [r3, #16]
 801be40:	6002      	str	r2, [r0, #0]
 801be42:	f103 0020 	add.w	r0, r3, #32
 801be46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801be4a:	f7eb b9e7 	b.w	800721c <_Unwind_DeleteException>
 801be4e:	f000 fb37 	bl	801c4c0 <_ZSt9terminatev>
 801be52:	bf00      	nop

0801be54 <_ZNSt9exceptionD1Ev>:
 801be54:	4770      	bx	lr
 801be56:	bf00      	nop

0801be58 <_ZNSt13bad_exceptionD1Ev>:
 801be58:	4770      	bx	lr
 801be5a:	bf00      	nop

0801be5c <_ZGTtNKSt13bad_exception4whatEv>:
 801be5c:	4800      	ldr	r0, [pc, #0]	; (801be60 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 801be5e:	4770      	bx	lr
 801be60:	08021d50 	.word	0x08021d50

0801be64 <_ZNSt13bad_exceptionD0Ev>:
 801be64:	b510      	push	{r4, lr}
 801be66:	2104      	movs	r1, #4
 801be68:	4604      	mov	r4, r0
 801be6a:	f7fe ff7f 	bl	801ad6c <_ZdlPvj>
 801be6e:	4620      	mov	r0, r4
 801be70:	bd10      	pop	{r4, pc}
 801be72:	bf00      	nop

0801be74 <__cxa_get_globals_fast>:
 801be74:	4800      	ldr	r0, [pc, #0]	; (801be78 <__cxa_get_globals_fast+0x4>)
 801be76:	4770      	bx	lr
 801be78:	20005950 	.word	0x20005950

0801be7c <__cxa_get_globals>:
 801be7c:	4800      	ldr	r0, [pc, #0]	; (801be80 <__cxa_get_globals+0x4>)
 801be7e:	4770      	bx	lr
 801be80:	20005950 	.word	0x20005950

0801be84 <_ZL28read_encoded_value_with_basehjPKhPj>:
 801be84:	2850      	cmp	r0, #80	; 0x50
 801be86:	b570      	push	{r4, r5, r6, lr}
 801be88:	d01d      	beq.n	801bec6 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 801be8a:	4684      	mov	ip, r0
 801be8c:	f000 000f 	and.w	r0, r0, #15
 801be90:	280c      	cmp	r0, #12
 801be92:	d855      	bhi.n	801bf40 <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
 801be94:	e8df f000 	tbb	[pc, r0]
 801be98:	07264407 	.word	0x07264407
 801be9c:	5454541e 	.word	0x5454541e
 801bea0:	07222a54 	.word	0x07222a54
 801bea4:	1e          	.byte	0x1e
 801bea5:	00          	.byte	0x00
 801bea6:	4610      	mov	r0, r2
 801bea8:	f850 6b04 	ldr.w	r6, [r0], #4
 801beac:	b14e      	cbz	r6, 801bec2 <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 801beae:	f00c 0470 	and.w	r4, ip, #112	; 0x70
 801beb2:	2c10      	cmp	r4, #16
 801beb4:	bf08      	it	eq
 801beb6:	4611      	moveq	r1, r2
 801beb8:	440e      	add	r6, r1
 801beba:	f01c 0f80 	tst.w	ip, #128	; 0x80
 801bebe:	bf18      	it	ne
 801bec0:	6836      	ldrne	r6, [r6, #0]
 801bec2:	601e      	str	r6, [r3, #0]
 801bec4:	bd70      	pop	{r4, r5, r6, pc}
 801bec6:	1cd0      	adds	r0, r2, #3
 801bec8:	f020 0003 	bic.w	r0, r0, #3
 801becc:	f850 6b04 	ldr.w	r6, [r0], #4
 801bed0:	601e      	str	r6, [r3, #0]
 801bed2:	bd70      	pop	{r4, r5, r6, pc}
 801bed4:	4610      	mov	r0, r2
 801bed6:	f850 6b08 	ldr.w	r6, [r0], #8
 801beda:	e7e7      	b.n	801beac <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 801bedc:	4610      	mov	r0, r2
 801bede:	f930 6b02 	ldrsh.w	r6, [r0], #2
 801bee2:	e7e3      	b.n	801beac <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 801bee4:	4610      	mov	r0, r2
 801bee6:	f830 6b02 	ldrh.w	r6, [r0], #2
 801beea:	e7df      	b.n	801beac <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 801beec:	2600      	movs	r6, #0
 801beee:	4610      	mov	r0, r2
 801bef0:	4634      	mov	r4, r6
 801bef2:	f810 5b01 	ldrb.w	r5, [r0], #1
 801bef6:	f005 0e7f 	and.w	lr, r5, #127	; 0x7f
 801befa:	fa0e fe04 	lsl.w	lr, lr, r4
 801befe:	f015 0f80 	tst.w	r5, #128	; 0x80
 801bf02:	ea46 060e 	orr.w	r6, r6, lr
 801bf06:	f104 0407 	add.w	r4, r4, #7
 801bf0a:	d1f2      	bne.n	801bef2 <_ZL28read_encoded_value_with_basehjPKhPj+0x6e>
 801bf0c:	2c1f      	cmp	r4, #31
 801bf0e:	d8cd      	bhi.n	801beac <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 801bf10:	066d      	lsls	r5, r5, #25
 801bf12:	d5cb      	bpl.n	801beac <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 801bf14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801bf18:	fa05 f404 	lsl.w	r4, r5, r4
 801bf1c:	4326      	orrs	r6, r4
 801bf1e:	e7c6      	b.n	801beae <_ZL28read_encoded_value_with_basehjPKhPj+0x2a>
 801bf20:	2600      	movs	r6, #0
 801bf22:	4610      	mov	r0, r2
 801bf24:	4634      	mov	r4, r6
 801bf26:	f810 5b01 	ldrb.w	r5, [r0], #1
 801bf2a:	f005 0e7f 	and.w	lr, r5, #127	; 0x7f
 801bf2e:	fa0e fe04 	lsl.w	lr, lr, r4
 801bf32:	062d      	lsls	r5, r5, #24
 801bf34:	ea46 060e 	orr.w	r6, r6, lr
 801bf38:	f104 0407 	add.w	r4, r4, #7
 801bf3c:	d4f3      	bmi.n	801bf26 <_ZL28read_encoded_value_with_basehjPKhPj+0xa2>
 801bf3e:	e7b5      	b.n	801beac <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 801bf40:	f001 fa66 	bl	801d410 <abort>

0801bf44 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 801bf44:	28ff      	cmp	r0, #255	; 0xff
 801bf46:	b508      	push	{r3, lr}
 801bf48:	4603      	mov	r3, r0
 801bf4a:	d019      	beq.n	801bf80 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3c>
 801bf4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801bf50:	2a30      	cmp	r2, #48	; 0x30
 801bf52:	4608      	mov	r0, r1
 801bf54:	d016      	beq.n	801bf84 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 801bf56:	d805      	bhi.n	801bf64 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 801bf58:	2a20      	cmp	r2, #32
 801bf5a:	d109      	bne.n	801bf70 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 801bf5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801bf60:	f004 bc26 	b.w	80207b0 <_Unwind_GetTextRelBase>
 801bf64:	2a40      	cmp	r2, #64	; 0x40
 801bf66:	d109      	bne.n	801bf7c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 801bf68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801bf6c:	f7eb bef8 	b.w	8007d60 <_Unwind_GetRegionStart>
 801bf70:	d802      	bhi.n	801bf78 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
 801bf72:	f013 0f60 	tst.w	r3, #96	; 0x60
 801bf76:	d003      	beq.n	801bf80 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3c>
 801bf78:	f001 fa4a 	bl	801d410 <abort>
 801bf7c:	2a50      	cmp	r2, #80	; 0x50
 801bf7e:	d1fb      	bne.n	801bf78 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
 801bf80:	2000      	movs	r0, #0
 801bf82:	bd08      	pop	{r3, pc}
 801bf84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801bf88:	f004 bc0f 	b.w	80207aa <_Unwind_GetDataRelBase>

0801bf8c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 801bf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf8e:	460c      	mov	r4, r1
 801bf90:	4615      	mov	r5, r2
 801bf92:	4606      	mov	r6, r0
 801bf94:	b108      	cbz	r0, 801bf9a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 801bf96:	f7eb fee3 	bl	8007d60 <_Unwind_GetRegionStart>
 801bf9a:	6028      	str	r0, [r5, #0]
 801bf9c:	f814 7b01 	ldrb.w	r7, [r4], #1
 801bfa0:	2fff      	cmp	r7, #255	; 0xff
 801bfa2:	d128      	bne.n	801bff6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x6a>
 801bfa4:	6068      	str	r0, [r5, #4]
 801bfa6:	4620      	mov	r0, r4
 801bfa8:	f810 3b01 	ldrb.w	r3, [r0], #1
 801bfac:	2bff      	cmp	r3, #255	; 0xff
 801bfae:	d032      	beq.n	801c016 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8a>
 801bfb0:	2310      	movs	r3, #16
 801bfb2:	2400      	movs	r4, #0
 801bfb4:	752b      	strb	r3, [r5, #20]
 801bfb6:	4622      	mov	r2, r4
 801bfb8:	f810 1b01 	ldrb.w	r1, [r0], #1
 801bfbc:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 801bfc0:	4093      	lsls	r3, r2
 801bfc2:	0609      	lsls	r1, r1, #24
 801bfc4:	ea44 0403 	orr.w	r4, r4, r3
 801bfc8:	f102 0207 	add.w	r2, r2, #7
 801bfcc:	d4f4      	bmi.n	801bfb8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x2c>
 801bfce:	4404      	add	r4, r0
 801bfd0:	60ec      	str	r4, [r5, #12]
 801bfd2:	f810 3b01 	ldrb.w	r3, [r0], #1
 801bfd6:	756b      	strb	r3, [r5, #21]
 801bfd8:	2400      	movs	r4, #0
 801bfda:	4622      	mov	r2, r4
 801bfdc:	f810 1b01 	ldrb.w	r1, [r0], #1
 801bfe0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 801bfe4:	4093      	lsls	r3, r2
 801bfe6:	431c      	orrs	r4, r3
 801bfe8:	060b      	lsls	r3, r1, #24
 801bfea:	f102 0207 	add.w	r2, r2, #7
 801bfee:	d4f5      	bmi.n	801bfdc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x50>
 801bff0:	4404      	add	r4, r0
 801bff2:	612c      	str	r4, [r5, #16]
 801bff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bff6:	4631      	mov	r1, r6
 801bff8:	4638      	mov	r0, r7
 801bffa:	f7ff ffa3 	bl	801bf44 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 801bffe:	4622      	mov	r2, r4
 801c000:	4601      	mov	r1, r0
 801c002:	1d2b      	adds	r3, r5, #4
 801c004:	4638      	mov	r0, r7
 801c006:	f7ff ff3d 	bl	801be84 <_ZL28read_encoded_value_with_basehjPKhPj>
 801c00a:	4604      	mov	r4, r0
 801c00c:	4620      	mov	r0, r4
 801c00e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801c012:	2bff      	cmp	r3, #255	; 0xff
 801c014:	d1cc      	bne.n	801bfb0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 801c016:	752b      	strb	r3, [r5, #20]
 801c018:	2400      	movs	r4, #0
 801c01a:	e7d9      	b.n	801bfd0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>

0801c01c <__gxx_personality_v0>:
 801c01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c020:	f000 0403 	and.w	r4, r0, #3
 801c024:	b093      	sub	sp, #76	; 0x4c
 801c026:	2300      	movs	r3, #0
 801c028:	2c01      	cmp	r4, #1
 801c02a:	9308      	str	r3, [sp, #32]
 801c02c:	460f      	mov	r7, r1
 801c02e:	4690      	mov	r8, r2
 801c030:	d013      	beq.n	801c05a <__gxx_personality_v0+0x3e>
 801c032:	2c02      	cmp	r4, #2
 801c034:	d108      	bne.n	801c048 <__gxx_personality_v0+0x2c>
 801c036:	4641      	mov	r1, r8
 801c038:	4638      	mov	r0, r7
 801c03a:	f7eb fe7b 	bl	8007d34 <__gnu_unwind_frame>
 801c03e:	b940      	cbnz	r0, 801c052 <__gxx_personality_v0+0x36>
 801c040:	2008      	movs	r0, #8
 801c042:	b013      	add	sp, #76	; 0x4c
 801c044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c048:	2c00      	cmp	r4, #0
 801c04a:	f000 8093 	beq.w	801c174 <__gxx_personality_v0+0x158>
 801c04e:	f001 f9df 	bl	801d410 <abort>
 801c052:	2009      	movs	r0, #9
 801c054:	b013      	add	sp, #76	; 0x4c
 801c056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c05a:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 801c05e:	f010 0408 	ands.w	r4, r0, #8
 801c062:	f8cd a000 	str.w	sl, [sp]
 801c066:	f000 809a 	beq.w	801c19e <__gxx_personality_v0+0x182>
 801c06a:	f044 0202 	orr.w	r2, r4, #2
 801c06e:	9202      	str	r2, [sp, #8]
 801c070:	910c      	str	r1, [sp, #48]	; 0x30
 801c072:	220c      	movs	r2, #12
 801c074:	4619      	mov	r1, r3
 801c076:	4640      	mov	r0, r8
 801c078:	f7eb f8fc 	bl	8007274 <_Unwind_VRS_Set>
 801c07c:	4640      	mov	r0, r8
 801c07e:	f7eb fe75 	bl	8007d6c <_Unwind_GetLanguageSpecificData>
 801c082:	4683      	mov	fp, r0
 801c084:	2800      	cmp	r0, #0
 801c086:	d0d6      	beq.n	801c036 <__gxx_personality_v0+0x1a>
 801c088:	4652      	mov	r2, sl
 801c08a:	4601      	mov	r1, r0
 801c08c:	4640      	mov	r0, r8
 801c08e:	f7ff ff7d 	bl	801bf8c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 801c092:	4641      	mov	r1, r8
 801c094:	4605      	mov	r5, r0
 801c096:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801c09a:	f7ff ff53 	bl	801bf44 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 801c09e:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 801c0a2:	2300      	movs	r3, #0
 801c0a4:	900e      	str	r0, [sp, #56]	; 0x38
 801c0a6:	4619      	mov	r1, r3
 801c0a8:	f8cd 9000 	str.w	r9, [sp]
 801c0ac:	220f      	movs	r2, #15
 801c0ae:	4640      	mov	r0, r8
 801c0b0:	f7eb f8ba 	bl	8007228 <_Unwind_VRS_Get>
 801c0b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c0b6:	f023 0301 	bic.w	r3, r3, #1
 801c0ba:	1e5e      	subs	r6, r3, #1
 801c0bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c0be:	429d      	cmp	r5, r3
 801c0c0:	f080 80bd 	bcs.w	801c23e <__gxx_personality_v0+0x222>
 801c0c4:	f89d 4045 	ldrb.w	r4, [sp, #69]	; 0x45
 801c0c8:	2100      	movs	r1, #0
 801c0ca:	4620      	mov	r0, r4
 801c0cc:	f7ff ff3a 	bl	801bf44 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 801c0d0:	462a      	mov	r2, r5
 801c0d2:	4601      	mov	r1, r0
 801c0d4:	ab09      	add	r3, sp, #36	; 0x24
 801c0d6:	4620      	mov	r0, r4
 801c0d8:	f7ff fed4 	bl	801be84 <_ZL28read_encoded_value_with_basehjPKhPj>
 801c0dc:	f89d 5045 	ldrb.w	r5, [sp, #69]	; 0x45
 801c0e0:	4604      	mov	r4, r0
 801c0e2:	2100      	movs	r1, #0
 801c0e4:	4628      	mov	r0, r5
 801c0e6:	f7ff ff2d 	bl	801bf44 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 801c0ea:	4622      	mov	r2, r4
 801c0ec:	4601      	mov	r1, r0
 801c0ee:	ab0a      	add	r3, sp, #40	; 0x28
 801c0f0:	4628      	mov	r0, r5
 801c0f2:	f7ff fec7 	bl	801be84 <_ZL28read_encoded_value_with_basehjPKhPj>
 801c0f6:	f89d 5045 	ldrb.w	r5, [sp, #69]	; 0x45
 801c0fa:	4604      	mov	r4, r0
 801c0fc:	2100      	movs	r1, #0
 801c0fe:	4628      	mov	r0, r5
 801c100:	f7ff ff20 	bl	801bf44 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 801c104:	4622      	mov	r2, r4
 801c106:	4601      	mov	r1, r0
 801c108:	464b      	mov	r3, r9
 801c10a:	4628      	mov	r0, r5
 801c10c:	f7ff feba 	bl	801be84 <_ZL28read_encoded_value_with_basehjPKhPj>
 801c110:	2400      	movs	r4, #0
 801c112:	4605      	mov	r5, r0
 801c114:	4622      	mov	r2, r4
 801c116:	f815 1b01 	ldrb.w	r1, [r5], #1
 801c11a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 801c11e:	4093      	lsls	r3, r2
 801c120:	431c      	orrs	r4, r3
 801c122:	060b      	lsls	r3, r1, #24
 801c124:	f102 0207 	add.w	r2, r2, #7
 801c128:	d4f5      	bmi.n	801c116 <__gxx_personality_v0+0xfa>
 801c12a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c12c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c12e:	4413      	add	r3, r2
 801c130:	42b3      	cmp	r3, r6
 801c132:	d917      	bls.n	801c164 <__gxx_personality_v0+0x148>
 801c134:	9b02      	ldr	r3, [sp, #8]
 801c136:	07d8      	lsls	r0, r3, #31
 801c138:	d52d      	bpl.n	801c196 <__gxx_personality_v0+0x17a>
 801c13a:	2400      	movs	r4, #0
 801c13c:	9403      	str	r4, [sp, #12]
 801c13e:	2300      	movs	r3, #0
 801c140:	4619      	mov	r1, r3
 801c142:	f8cd 9000 	str.w	r9, [sp]
 801c146:	4640      	mov	r0, r8
 801c148:	220d      	movs	r2, #13
 801c14a:	9d08      	ldr	r5, [sp, #32]
 801c14c:	f7eb f86c 	bl	8007228 <_Unwind_VRS_Get>
 801c150:	9b03      	ldr	r3, [sp, #12]
 801c152:	633b      	str	r3, [r7, #48]	; 0x30
 801c154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c156:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 801c15a:	e9c7 5409 	strd	r5, r4, [r7, #36]	; 0x24
 801c15e:	2006      	movs	r0, #6
 801c160:	623b      	str	r3, [r7, #32]
 801c162:	e76e      	b.n	801c042 <__gxx_personality_v0+0x26>
 801c164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c166:	4413      	add	r3, r2
 801c168:	42b3      	cmp	r3, r6
 801c16a:	d872      	bhi.n	801c252 <__gxx_personality_v0+0x236>
 801c16c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c16e:	42ab      	cmp	r3, r5
 801c170:	d8a8      	bhi.n	801c0c4 <__gxx_personality_v0+0xa8>
 801c172:	e7df      	b.n	801c134 <__gxx_personality_v0+0x118>
 801c174:	0702      	lsls	r2, r0, #28
 801c176:	f53f af5e 	bmi.w	801c036 <__gxx_personality_v0+0x1a>
 801c17a:	2301      	movs	r3, #1
 801c17c:	9302      	str	r3, [sp, #8]
 801c17e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 801c182:	2300      	movs	r3, #0
 801c184:	f8cd a000 	str.w	sl, [sp]
 801c188:	220c      	movs	r2, #12
 801c18a:	4619      	mov	r1, r3
 801c18c:	4640      	mov	r0, r8
 801c18e:	970c      	str	r7, [sp, #48]	; 0x30
 801c190:	f7eb f870 	bl	8007274 <_Unwind_VRS_Set>
 801c194:	e772      	b.n	801c07c <__gxx_personality_v0+0x60>
 801c196:	0719      	lsls	r1, r3, #28
 801c198:	d558      	bpl.n	801c24c <__gxx_personality_v0+0x230>
 801c19a:	f000 f991 	bl	801c4c0 <_ZSt9terminatev>
 801c19e:	6a0d      	ldr	r5, [r1, #32]
 801c1a0:	4623      	mov	r3, r4
 801c1a2:	220d      	movs	r2, #13
 801c1a4:	4621      	mov	r1, r4
 801c1a6:	4640      	mov	r0, r8
 801c1a8:	f7eb f83e 	bl	8007228 <_Unwind_VRS_Get>
 801c1ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c1ae:	429d      	cmp	r5, r3
 801c1b0:	d002      	beq.n	801c1b8 <__gxx_personality_v0+0x19c>
 801c1b2:	2302      	movs	r3, #2
 801c1b4:	9302      	str	r3, [sp, #8]
 801c1b6:	e7e4      	b.n	801c182 <__gxx_personality_v0+0x166>
 801c1b8:	4623      	mov	r3, r4
 801c1ba:	4621      	mov	r1, r4
 801c1bc:	220c      	movs	r2, #12
 801c1be:	f8cd a000 	str.w	sl, [sp]
 801c1c2:	4640      	mov	r0, r8
 801c1c4:	970c      	str	r7, [sp, #48]	; 0x30
 801c1c6:	f7eb f855 	bl	8007274 <_Unwind_VRS_Set>
 801c1ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c1cc:	9203      	str	r2, [sp, #12]
 801c1ce:	e9d7 430a 	ldrd	r4, r3, [r7, #40]	; 0x28
 801c1d2:	2a00      	cmp	r2, #0
 801c1d4:	d03a      	beq.n	801c24c <__gxx_personality_v0+0x230>
 801c1d6:	469b      	mov	fp, r3
 801c1d8:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 801c1dc:	2c00      	cmp	r4, #0
 801c1de:	db54      	blt.n	801c28a <__gxx_personality_v0+0x26e>
 801c1e0:	2503      	movs	r5, #3
 801c1e2:	2300      	movs	r3, #0
 801c1e4:	461a      	mov	r2, r3
 801c1e6:	4619      	mov	r1, r3
 801c1e8:	f8cd 9000 	str.w	r9, [sp]
 801c1ec:	4640      	mov	r0, r8
 801c1ee:	970b      	str	r7, [sp, #44]	; 0x2c
 801c1f0:	f7eb f840 	bl	8007274 <_Unwind_VRS_Set>
 801c1f4:	2300      	movs	r3, #0
 801c1f6:	4619      	mov	r1, r3
 801c1f8:	2201      	movs	r2, #1
 801c1fa:	f8cd 9000 	str.w	r9, [sp]
 801c1fe:	4640      	mov	r0, r8
 801c200:	940b      	str	r4, [sp, #44]	; 0x2c
 801c202:	f7eb f837 	bl	8007274 <_Unwind_VRS_Set>
 801c206:	2300      	movs	r3, #0
 801c208:	4619      	mov	r1, r3
 801c20a:	220f      	movs	r2, #15
 801c20c:	f8cd 9000 	str.w	r9, [sp]
 801c210:	4640      	mov	r0, r8
 801c212:	f7eb f809 	bl	8007228 <_Unwind_VRS_Get>
 801c216:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c218:	9903      	ldr	r1, [sp, #12]
 801c21a:	f8cd 9000 	str.w	r9, [sp]
 801c21e:	f002 0201 	and.w	r2, r2, #1
 801c222:	430a      	orrs	r2, r1
 801c224:	2300      	movs	r3, #0
 801c226:	920b      	str	r2, [sp, #44]	; 0x2c
 801c228:	4640      	mov	r0, r8
 801c22a:	220f      	movs	r2, #15
 801c22c:	4619      	mov	r1, r3
 801c22e:	f7eb f821 	bl	8007274 <_Unwind_VRS_Set>
 801c232:	2d02      	cmp	r5, #2
 801c234:	d024      	beq.n	801c280 <__gxx_personality_v0+0x264>
 801c236:	2007      	movs	r0, #7
 801c238:	b013      	add	sp, #76	; 0x4c
 801c23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c23e:	9b02      	ldr	r3, [sp, #8]
 801c240:	07de      	lsls	r6, r3, #31
 801c242:	f53f af7a 	bmi.w	801c13a <__gxx_personality_v0+0x11e>
 801c246:	9b02      	ldr	r3, [sp, #8]
 801c248:	071b      	lsls	r3, r3, #28
 801c24a:	d4a6      	bmi.n	801c19a <__gxx_personality_v0+0x17e>
 801c24c:	4638      	mov	r0, r7
 801c24e:	f000 fe33 	bl	801ceb8 <__cxa_call_terminate>
 801c252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c254:	2b00      	cmp	r3, #0
 801c256:	f43f aeee 	beq.w	801c036 <__gxx_personality_v0+0x1a>
 801c25a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c25c:	4413      	add	r3, r2
 801c25e:	9303      	str	r3, [sp, #12]
 801c260:	2c00      	cmp	r4, #0
 801c262:	d136      	bne.n	801c2d2 <__gxx_personality_v0+0x2b6>
 801c264:	2b00      	cmp	r3, #0
 801c266:	f43f aee6 	beq.w	801c036 <__gxx_personality_v0+0x1a>
 801c26a:	9b02      	ldr	r3, [sp, #8]
 801c26c:	07dd      	lsls	r5, r3, #31
 801c26e:	f53f aee2 	bmi.w	801c036 <__gxx_personality_v0+0x1a>
 801c272:	9b02      	ldr	r3, [sp, #8]
 801c274:	071a      	lsls	r2, r3, #28
 801c276:	f140 8116 	bpl.w	801c4a6 <__gxx_personality_v0+0x48a>
 801c27a:	2400      	movs	r4, #0
 801c27c:	2502      	movs	r5, #2
 801c27e:	e7b0      	b.n	801c1e2 <__gxx_personality_v0+0x1c6>
 801c280:	4638      	mov	r0, r7
 801c282:	f7ff fcf9 	bl	801bc78 <__cxa_begin_cleanup>
 801c286:	2007      	movs	r0, #7
 801c288:	e6db      	b.n	801c042 <__gxx_personality_v0+0x26>
 801c28a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801c28e:	1b1b      	subs	r3, r3, r4
 801c290:	461e      	mov	r6, r3
 801c292:	4652      	mov	r2, sl
 801c294:	4659      	mov	r1, fp
 801c296:	4640      	mov	r0, r8
 801c298:	f7ff fe78 	bl	801bf8c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 801c29c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801c2a0:	4641      	mov	r1, r8
 801c2a2:	f7ff fe4f 	bl	801bf44 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 801c2a6:	900e      	str	r0, [sp, #56]	; 0x38
 801c2a8:	4605      	mov	r5, r0
 801c2aa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801c2ac:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
 801c2b0:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 801c2b4:	b133      	cbz	r3, 801c2c4 <__gxx_personality_v0+0x2a8>
 801c2b6:	4602      	mov	r2, r0
 801c2b8:	2300      	movs	r3, #0
 801c2ba:	f852 1f04 	ldr.w	r1, [r2, #4]!
 801c2be:	3301      	adds	r3, #1
 801c2c0:	2900      	cmp	r1, #0
 801c2c2:	d1fa      	bne.n	801c2ba <__gxx_personality_v0+0x29e>
 801c2c4:	e9c7 350a 	strd	r3, r5, [r7, #40]	; 0x28
 801c2c8:	2304      	movs	r3, #4
 801c2ca:	6378      	str	r0, [r7, #52]	; 0x34
 801c2cc:	633b      	str	r3, [r7, #48]	; 0x30
 801c2ce:	2503      	movs	r5, #3
 801c2d0:	e787      	b.n	801c1e2 <__gxx_personality_v0+0x1c6>
 801c2d2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c2d4:	9b03      	ldr	r3, [sp, #12]
 801c2d6:	3c01      	subs	r4, #1
 801c2d8:	4426      	add	r6, r4
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	f43f aeab 	beq.w	801c036 <__gxx_personality_v0+0x1a>
 801c2e0:	9b02      	ldr	r3, [sp, #8]
 801c2e2:	2e00      	cmp	r6, #0
 801c2e4:	f000 80d7 	beq.w	801c496 <__gxx_personality_v0+0x47a>
 801c2e8:	f013 0308 	ands.w	r3, r3, #8
 801c2ec:	9304      	str	r3, [sp, #16]
 801c2ee:	f000 80c9 	beq.w	801c484 <__gxx_personality_v0+0x468>
 801c2f2:	2347      	movs	r3, #71	; 0x47
 801c2f4:	703b      	strb	r3, [r7, #0]
 801c2f6:	234e      	movs	r3, #78	; 0x4e
 801c2f8:	707b      	strb	r3, [r7, #1]
 801c2fa:	2355      	movs	r3, #85	; 0x55
 801c2fc:	70bb      	strb	r3, [r7, #2]
 801c2fe:	2343      	movs	r3, #67	; 0x43
 801c300:	70fb      	strb	r3, [r7, #3]
 801c302:	2346      	movs	r3, #70	; 0x46
 801c304:	713b      	strb	r3, [r7, #4]
 801c306:	234f      	movs	r3, #79	; 0x4f
 801c308:	717b      	strb	r3, [r7, #5]
 801c30a:	2352      	movs	r3, #82	; 0x52
 801c30c:	71bb      	strb	r3, [r7, #6]
 801c30e:	2300      	movs	r3, #0
 801c310:	71fb      	strb	r3, [r7, #7]
 801c312:	2300      	movs	r3, #0
 801c314:	f8cd b018 	str.w	fp, [sp, #24]
 801c318:	f8cd 8014 	str.w	r8, [sp, #20]
 801c31c:	469b      	mov	fp, r3
 801c31e:	f8cd a01c 	str.w	sl, [sp, #28]
 801c322:	2400      	movs	r4, #0
 801c324:	4622      	mov	r2, r4
 801c326:	f816 1b01 	ldrb.w	r1, [r6], #1
 801c32a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 801c32e:	4093      	lsls	r3, r2
 801c330:	0608      	lsls	r0, r1, #24
 801c332:	ea44 0403 	orr.w	r4, r4, r3
 801c336:	f102 0207 	add.w	r2, r2, #7
 801c33a:	d4f4      	bmi.n	801c326 <__gxx_personality_v0+0x30a>
 801c33c:	2a1f      	cmp	r2, #31
 801c33e:	d805      	bhi.n	801c34c <__gxx_personality_v0+0x330>
 801c340:	0649      	lsls	r1, r1, #25
 801c342:	d503      	bpl.n	801c34c <__gxx_personality_v0+0x330>
 801c344:	2301      	movs	r3, #1
 801c346:	4093      	lsls	r3, r2
 801c348:	425b      	negs	r3, r3
 801c34a:	431c      	orrs	r4, r3
 801c34c:	2500      	movs	r5, #0
 801c34e:	4630      	mov	r0, r6
 801c350:	462a      	mov	r2, r5
 801c352:	f810 1b01 	ldrb.w	r1, [r0], #1
 801c356:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 801c35a:	4093      	lsls	r3, r2
 801c35c:	431d      	orrs	r5, r3
 801c35e:	060b      	lsls	r3, r1, #24
 801c360:	f102 0207 	add.w	r2, r2, #7
 801c364:	d4f5      	bmi.n	801c352 <__gxx_personality_v0+0x336>
 801c366:	2a1f      	cmp	r2, #31
 801c368:	d805      	bhi.n	801c376 <__gxx_personality_v0+0x35a>
 801c36a:	064b      	lsls	r3, r1, #25
 801c36c:	d503      	bpl.n	801c376 <__gxx_personality_v0+0x35a>
 801c36e:	2301      	movs	r3, #1
 801c370:	4093      	lsls	r3, r2
 801c372:	425b      	negs	r3, r3
 801c374:	431d      	orrs	r5, r3
 801c376:	2c00      	cmp	r4, #0
 801c378:	d034      	beq.n	801c3e4 <__gxx_personality_v0+0x3c8>
 801c37a:	dc36      	bgt.n	801c3ea <__gxx_personality_v0+0x3ce>
 801c37c:	b117      	cbz	r7, 801c384 <__gxx_personality_v0+0x368>
 801c37e:	9b04      	ldr	r3, [sp, #16]
 801c380:	2b00      	cmp	r3, #0
 801c382:	d04f      	beq.n	801c424 <__gxx_personality_v0+0x408>
 801c384:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 801c388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c38a:	ebaa 0a04 	sub.w	sl, sl, r4
 801c38e:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 801c392:	b1b3      	cbz	r3, 801c3c2 <__gxx_personality_v0+0x3a6>
 801c394:	2d00      	cmp	r5, #0
 801c396:	d06a      	beq.n	801c46e <__gxx_personality_v0+0x452>
 801c398:	442e      	add	r6, r5
 801c39a:	e7c2      	b.n	801c322 <__gxx_personality_v0+0x306>
 801c39c:	00a3      	lsls	r3, r4, #2
 801c39e:	425b      	negs	r3, r3
 801c3a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c3a2:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c3a4:	441a      	add	r2, r3
 801c3a6:	464b      	mov	r3, r9
 801c3a8:	f7ff fd6c 	bl	801be84 <_ZL28read_encoded_value_with_basehjPKhPj>
 801c3ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c3ae:	b141      	cbz	r1, 801c3c2 <__gxx_personality_v0+0x3a6>
 801c3b0:	2f00      	cmp	r7, #0
 801c3b2:	d0ef      	beq.n	801c394 <__gxx_personality_v0+0x378>
 801c3b4:	ab08      	add	r3, sp, #32
 801c3b6:	2200      	movs	r2, #0
 801c3b8:	4638      	mov	r0, r7
 801c3ba:	f7ff fc05 	bl	801bbc8 <__cxa_type_match>
 801c3be:	2800      	cmp	r0, #0
 801c3c0:	d0e8      	beq.n	801c394 <__gxx_personality_v0+0x378>
 801c3c2:	9b02      	ldr	r3, [sp, #8]
 801c3c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801c3c8:	07db      	lsls	r3, r3, #31
 801c3ca:	e9dd 8b05 	ldrd	r8, fp, [sp, #20]
 801c3ce:	f53f aeb6 	bmi.w	801c13e <__gxx_personality_v0+0x122>
 801c3d2:	9b04      	ldr	r3, [sp, #16]
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	f43f af01 	beq.w	801c1dc <__gxx_personality_v0+0x1c0>
 801c3da:	2c00      	cmp	r4, #0
 801c3dc:	f6bf af00 	bge.w	801c1e0 <__gxx_personality_v0+0x1c4>
 801c3e0:	f000 f87c 	bl	801c4dc <_ZSt10unexpectedv>
 801c3e4:	f04f 0b01 	mov.w	fp, #1
 801c3e8:	e7d4      	b.n	801c394 <__gxx_personality_v0+0x378>
 801c3ea:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801c3ee:	28ff      	cmp	r0, #255	; 0xff
 801c3f0:	d031      	beq.n	801c456 <__gxx_personality_v0+0x43a>
 801c3f2:	f000 0307 	and.w	r3, r0, #7
 801c3f6:	2b04      	cmp	r3, #4
 801c3f8:	f63f ae29 	bhi.w	801c04e <__gxx_personality_v0+0x32>
 801c3fc:	a201      	add	r2, pc, #4	; (adr r2, 801c404 <__gxx_personality_v0+0x3e8>)
 801c3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c402:	bf00      	nop
 801c404:	0801c39d 	.word	0x0801c39d
 801c408:	0801c04f 	.word	0x0801c04f
 801c40c:	0801c41f 	.word	0x0801c41f
 801c410:	0801c39d 	.word	0x0801c39d
 801c414:	0801c419 	.word	0x0801c419
 801c418:	00e3      	lsls	r3, r4, #3
 801c41a:	425b      	negs	r3, r3
 801c41c:	e7c0      	b.n	801c3a0 <__gxx_personality_v0+0x384>
 801c41e:	0063      	lsls	r3, r4, #1
 801c420:	425b      	negs	r3, r3
 801c422:	e7bd      	b.n	801c3a0 <__gxx_personality_v0+0x384>
 801c424:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 801c428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c42a:	9a08      	ldr	r2, [sp, #32]
 801c42c:	920b      	str	r2, [sp, #44]	; 0x2c
 801c42e:	ebaa 0a04 	sub.w	sl, sl, r4
 801c432:	eb03 088a 	add.w	r8, r3, sl, lsl #2
 801c436:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 801c43a:	b919      	cbnz	r1, 801c444 <__gxx_personality_v0+0x428>
 801c43c:	e00d      	b.n	801c45a <__gxx_personality_v0+0x43e>
 801c43e:	f858 1f04 	ldr.w	r1, [r8, #4]!
 801c442:	b151      	cbz	r1, 801c45a <__gxx_personality_v0+0x43e>
 801c444:	4441      	add	r1, r8
 801c446:	464b      	mov	r3, r9
 801c448:	2200      	movs	r2, #0
 801c44a:	4638      	mov	r0, r7
 801c44c:	f7ff fbbc 	bl	801bbc8 <__cxa_type_match>
 801c450:	2800      	cmp	r0, #0
 801c452:	d0f4      	beq.n	801c43e <__gxx_personality_v0+0x422>
 801c454:	e79e      	b.n	801c394 <__gxx_personality_v0+0x378>
 801c456:	2300      	movs	r3, #0
 801c458:	e7a2      	b.n	801c3a0 <__gxx_personality_v0+0x384>
 801c45a:	9b02      	ldr	r3, [sp, #8]
 801c45c:	07d8      	lsls	r0, r3, #31
 801c45e:	4656      	mov	r6, sl
 801c460:	e9dd 8b05 	ldrd	r8, fp, [sp, #20]
 801c464:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801c468:	f53f ae69 	bmi.w	801c13e <__gxx_personality_v0+0x122>
 801c46c:	e711      	b.n	801c292 <__gxx_personality_v0+0x276>
 801c46e:	465b      	mov	r3, fp
 801c470:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801c474:	2b00      	cmp	r3, #0
 801c476:	f43f adde 	beq.w	801c036 <__gxx_personality_v0+0x1a>
 801c47a:	9b02      	ldr	r3, [sp, #8]
 801c47c:	07d9      	lsls	r1, r3, #31
 801c47e:	f53f adda 	bmi.w	801c036 <__gxx_personality_v0+0x1a>
 801c482:	e6fa      	b.n	801c27a <__gxx_personality_v0+0x25e>
 801c484:	79fb      	ldrb	r3, [r7, #7]
 801c486:	2b01      	cmp	r3, #1
 801c488:	bf0c      	ite	eq
 801c48a:	f857 3c20 	ldreq.w	r3, [r7, #-32]
 801c48e:	f107 0358 	addne.w	r3, r7, #88	; 0x58
 801c492:	9308      	str	r3, [sp, #32]
 801c494:	e73d      	b.n	801c312 <__gxx_personality_v0+0x2f6>
 801c496:	07da      	lsls	r2, r3, #31
 801c498:	f53f adcd 	bmi.w	801c036 <__gxx_personality_v0+0x1a>
 801c49c:	9b02      	ldr	r3, [sp, #8]
 801c49e:	f013 0408 	ands.w	r4, r3, #8
 801c4a2:	f47f aeea 	bne.w	801c27a <__gxx_personality_v0+0x25e>
 801c4a6:	2502      	movs	r5, #2
 801c4a8:	e69b      	b.n	801c1e2 <__gxx_personality_v0+0x1c6>
 801c4aa:	f7ff fc4f 	bl	801bd4c <__cxa_begin_catch>
 801c4ae:	e674      	b.n	801c19a <__gxx_personality_v0+0x17e>

0801c4b0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801c4b0:	b508      	push	{r3, lr}
 801c4b2:	4780      	blx	r0
 801c4b4:	f000 ffac 	bl	801d410 <abort>
 801c4b8:	f7ff fc48 	bl	801bd4c <__cxa_begin_catch>
 801c4bc:	f000 ffa8 	bl	801d410 <abort>

0801c4c0 <_ZSt9terminatev>:
 801c4c0:	b508      	push	{r3, lr}
 801c4c2:	4b03      	ldr	r3, [pc, #12]	; (801c4d0 <_ZSt9terminatev+0x10>)
 801c4c4:	6818      	ldr	r0, [r3, #0]
 801c4c6:	f3bf 8f5b 	dmb	ish
 801c4ca:	f7ff fff1 	bl	801c4b0 <_ZN10__cxxabiv111__terminateEPFvvE>
 801c4ce:	bf00      	nop
 801c4d0:	2000001c 	.word	0x2000001c

0801c4d4 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 801c4d4:	b508      	push	{r3, lr}
 801c4d6:	4780      	blx	r0
 801c4d8:	f7ff fff2 	bl	801c4c0 <_ZSt9terminatev>

0801c4dc <_ZSt10unexpectedv>:
 801c4dc:	b508      	push	{r3, lr}
 801c4de:	4b03      	ldr	r3, [pc, #12]	; (801c4ec <_ZSt10unexpectedv+0x10>)
 801c4e0:	6818      	ldr	r0, [r3, #0]
 801c4e2:	f3bf 8f5b 	dmb	ish
 801c4e6:	f7ff fff5 	bl	801c4d4 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 801c4ea:	bf00      	nop
 801c4ec:	20000018 	.word	0x20000018

0801c4f0 <_ZSt13get_terminatev>:
 801c4f0:	4b02      	ldr	r3, [pc, #8]	; (801c4fc <_ZSt13get_terminatev+0xc>)
 801c4f2:	6818      	ldr	r0, [r3, #0]
 801c4f4:	f3bf 8f5b 	dmb	ish
 801c4f8:	4770      	bx	lr
 801c4fa:	bf00      	nop
 801c4fc:	2000001c 	.word	0x2000001c

0801c500 <_ZSt14get_unexpectedv>:
 801c500:	4b02      	ldr	r3, [pc, #8]	; (801c50c <_ZSt14get_unexpectedv+0xc>)
 801c502:	6818      	ldr	r0, [r3, #0]
 801c504:	f3bf 8f5b 	dmb	ish
 801c508:	4770      	bx	lr
 801c50a:	bf00      	nop
 801c50c:	20000018 	.word	0x20000018

0801c510 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 801c510:	b500      	push	{lr}
 801c512:	2801      	cmp	r0, #1
 801c514:	b083      	sub	sp, #12
 801c516:	d81d      	bhi.n	801c554 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x44>
 801c518:	f3bf 8f5b 	dmb	ish
 801c51c:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 801c520:	e853 2f00 	ldrex	r2, [r3]
 801c524:	3a01      	subs	r2, #1
 801c526:	e843 2000 	strex	r0, r2, [r3]
 801c52a:	2800      	cmp	r0, #0
 801c52c:	d1f8      	bne.n	801c520 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x10>
 801c52e:	f3bf 8f5b 	dmb	ish
 801c532:	b962      	cbnz	r2, 801c54e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3e>
 801c534:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 801c538:	f101 0058 	add.w	r0, r1, #88	; 0x58
 801c53c:	b113      	cbz	r3, 801c544 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x34>
 801c53e:	9001      	str	r0, [sp, #4]
 801c540:	4798      	blx	r3
 801c542:	9801      	ldr	r0, [sp, #4]
 801c544:	b003      	add	sp, #12
 801c546:	f85d eb04 	ldr.w	lr, [sp], #4
 801c54a:	f7ff bb13 	b.w	801bb74 <__cxa_free_exception>
 801c54e:	b003      	add	sp, #12
 801c550:	f85d fb04 	ldr.w	pc, [sp], #4
 801c554:	f851 0c14 	ldr.w	r0, [r1, #-20]
 801c558:	f7ff ffaa 	bl	801c4b0 <_ZN10__cxxabiv111__terminateEPFvvE>

0801c55c <__cxa_init_primary_exception>:
 801c55c:	b538      	push	{r3, r4, r5, lr}
 801c55e:	2500      	movs	r5, #0
 801c560:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 801c564:	f840 5c80 	str.w	r5, [r0, #-128]
 801c568:	4604      	mov	r4, r0
 801c56a:	f7ff ffc9 	bl	801c500 <_ZSt14get_unexpectedv>
 801c56e:	f844 0c70 	str.w	r0, [r4, #-112]
 801c572:	f7ff ffbd 	bl	801c4f0 <_ZSt13get_terminatev>
 801c576:	2243      	movs	r2, #67	; 0x43
 801c578:	232b      	movs	r3, #43	; 0x2b
 801c57a:	2147      	movs	r1, #71	; 0x47
 801c57c:	f804 2c55 	strb.w	r2, [r4, #-85]
 801c580:	f804 2c54 	strb.w	r2, [r4, #-84]
 801c584:	f804 3c53 	strb.w	r3, [r4, #-83]
 801c588:	f804 3c52 	strb.w	r3, [r4, #-82]
 801c58c:	224e      	movs	r2, #78	; 0x4e
 801c58e:	2355      	movs	r3, #85	; 0x55
 801c590:	f804 1c58 	strb.w	r1, [r4, #-88]
 801c594:	f804 5c51 	strb.w	r5, [r4, #-81]
 801c598:	4905      	ldr	r1, [pc, #20]	; (801c5b0 <__cxa_init_primary_exception+0x54>)
 801c59a:	f804 2c57 	strb.w	r2, [r4, #-87]
 801c59e:	f804 3c56 	strb.w	r3, [r4, #-86]
 801c5a2:	f844 0c6c 	str.w	r0, [r4, #-108]
 801c5a6:	f844 1c50 	str.w	r1, [r4, #-80]
 801c5aa:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 801c5ae:	bd38      	pop	{r3, r4, r5, pc}
 801c5b0:	0801c511 	.word	0x0801c511

0801c5b4 <__cxa_throw>:
 801c5b4:	b510      	push	{r4, lr}
 801c5b6:	b082      	sub	sp, #8
 801c5b8:	e9cd 2100 	strd	r2, r1, [sp]
 801c5bc:	4604      	mov	r4, r0
 801c5be:	f7ff fc5d 	bl	801be7c <__cxa_get_globals>
 801c5c2:	4603      	mov	r3, r0
 801c5c4:	6840      	ldr	r0, [r0, #4]
 801c5c6:	9a00      	ldr	r2, [sp, #0]
 801c5c8:	9901      	ldr	r1, [sp, #4]
 801c5ca:	3001      	adds	r0, #1
 801c5cc:	6058      	str	r0, [r3, #4]
 801c5ce:	4620      	mov	r0, r4
 801c5d0:	f7ff ffc4 	bl	801c55c <__cxa_init_primary_exception>
 801c5d4:	4604      	mov	r4, r0
 801c5d6:	2301      	movs	r3, #1
 801c5d8:	f844 3b28 	str.w	r3, [r4], #40
 801c5dc:	4620      	mov	r0, r4
 801c5de:	f7eb f9dd 	bl	800799c <_Unwind_RaiseException>
 801c5e2:	4620      	mov	r0, r4
 801c5e4:	f7ff fbb2 	bl	801bd4c <__cxa_begin_catch>
 801c5e8:	f7ff ff6a 	bl	801c4c0 <_ZSt9terminatev>

0801c5ec <__cxa_rethrow>:
 801c5ec:	b510      	push	{r4, lr}
 801c5ee:	f7ff fc45 	bl	801be7c <__cxa_get_globals>
 801c5f2:	e9d0 4200 	ldrd	r4, r2, [r0]
 801c5f6:	3201      	adds	r2, #1
 801c5f8:	6042      	str	r2, [r0, #4]
 801c5fa:	b164      	cbz	r4, 801c616 <__cxa_rethrow+0x2a>
 801c5fc:	f894 2020 	ldrb.w	r2, [r4, #32]
 801c600:	2a47      	cmp	r2, #71	; 0x47
 801c602:	d00a      	beq.n	801c61a <__cxa_rethrow+0x2e>
 801c604:	2200      	movs	r2, #0
 801c606:	6002      	str	r2, [r0, #0]
 801c608:	3420      	adds	r4, #32
 801c60a:	4620      	mov	r0, r4
 801c60c:	f7eb f9ea 	bl	80079e4 <_Unwind_Resume_or_Rethrow>
 801c610:	4620      	mov	r0, r4
 801c612:	f7ff fb9b 	bl	801bd4c <__cxa_begin_catch>
 801c616:	f7ff ff53 	bl	801c4c0 <_ZSt9terminatev>
 801c61a:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 801c61e:	2a4e      	cmp	r2, #78	; 0x4e
 801c620:	d1f0      	bne.n	801c604 <__cxa_rethrow+0x18>
 801c622:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 801c626:	2a55      	cmp	r2, #85	; 0x55
 801c628:	d1ec      	bne.n	801c604 <__cxa_rethrow+0x18>
 801c62a:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 801c62e:	2a43      	cmp	r2, #67	; 0x43
 801c630:	d1e8      	bne.n	801c604 <__cxa_rethrow+0x18>
 801c632:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 801c636:	2a43      	cmp	r2, #67	; 0x43
 801c638:	d1e4      	bne.n	801c604 <__cxa_rethrow+0x18>
 801c63a:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 801c63e:	2a2b      	cmp	r2, #43	; 0x2b
 801c640:	d1e0      	bne.n	801c604 <__cxa_rethrow+0x18>
 801c642:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 801c646:	2a2b      	cmp	r2, #43	; 0x2b
 801c648:	d1dc      	bne.n	801c604 <__cxa_rethrow+0x18>
 801c64a:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 801c64e:	2a01      	cmp	r2, #1
 801c650:	d8d8      	bhi.n	801c604 <__cxa_rethrow+0x18>
 801c652:	6962      	ldr	r2, [r4, #20]
 801c654:	4252      	negs	r2, r2
 801c656:	6162      	str	r2, [r4, #20]
 801c658:	e7d6      	b.n	801c608 <__cxa_rethrow+0x1c>
 801c65a:	bf00      	nop

0801c65c <_ZSt15get_new_handlerv>:
 801c65c:	4b02      	ldr	r3, [pc, #8]	; (801c668 <_ZSt15get_new_handlerv+0xc>)
 801c65e:	6818      	ldr	r0, [r3, #0]
 801c660:	f3bf 8f5b 	dmb	ish
 801c664:	4770      	bx	lr
 801c666:	bf00      	nop
 801c668:	2000595c 	.word	0x2000595c

0801c66c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 801c66c:	b510      	push	{r4, lr}
 801c66e:	4b03      	ldr	r3, [pc, #12]	; (801c67c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 801c670:	6003      	str	r3, [r0, #0]
 801c672:	4604      	mov	r4, r0
 801c674:	f7ff f996 	bl	801b9a4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801c678:	4620      	mov	r0, r4
 801c67a:	bd10      	pop	{r4, pc}
 801c67c:	08021e40 	.word	0x08021e40

0801c680 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 801c680:	b510      	push	{r4, lr}
 801c682:	4b05      	ldr	r3, [pc, #20]	; (801c698 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 801c684:	6003      	str	r3, [r0, #0]
 801c686:	4604      	mov	r4, r0
 801c688:	f7ff f98c 	bl	801b9a4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801c68c:	4620      	mov	r0, r4
 801c68e:	210c      	movs	r1, #12
 801c690:	f7fe fb6c 	bl	801ad6c <_ZdlPvj>
 801c694:	4620      	mov	r0, r4
 801c696:	bd10      	pop	{r4, pc}
 801c698:	08021e40 	.word	0x08021e40

0801c69c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801c69c:	b570      	push	{r4, r5, r6, lr}
 801c69e:	b082      	sub	sp, #8
 801c6a0:	4604      	mov	r4, r0
 801c6a2:	9e06      	ldr	r6, [sp, #24]
 801c6a4:	4296      	cmp	r6, r2
 801c6a6:	460d      	mov	r5, r1
 801c6a8:	d009      	beq.n	801c6be <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 801c6aa:	68a0      	ldr	r0, [r4, #8]
 801c6ac:	6804      	ldr	r4, [r0, #0]
 801c6ae:	9606      	str	r6, [sp, #24]
 801c6b0:	6a24      	ldr	r4, [r4, #32]
 801c6b2:	4629      	mov	r1, r5
 801c6b4:	46a4      	mov	ip, r4
 801c6b6:	b002      	add	sp, #8
 801c6b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c6bc:	4760      	bx	ip
 801c6be:	4619      	mov	r1, r3
 801c6c0:	9201      	str	r2, [sp, #4]
 801c6c2:	9300      	str	r3, [sp, #0]
 801c6c4:	f000 f860 	bl	801c788 <_ZNKSt9type_infoeqERKS_>
 801c6c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 801c6cc:	2800      	cmp	r0, #0
 801c6ce:	d0ec      	beq.n	801c6aa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 801c6d0:	2006      	movs	r0, #6
 801c6d2:	b002      	add	sp, #8
 801c6d4:	bd70      	pop	{r4, r5, r6, pc}
 801c6d6:	bf00      	nop

0801c6d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801c6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6dc:	460c      	mov	r4, r1
 801c6de:	b081      	sub	sp, #4
 801c6e0:	4619      	mov	r1, r3
 801c6e2:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
 801c6e6:	e9dd 870c 	ldrd	r8, r7, [sp, #48]	; 0x30
 801c6ea:	469b      	mov	fp, r3
 801c6ec:	4605      	mov	r5, r0
 801c6ee:	4692      	mov	sl, r2
 801c6f0:	f000 f84a 	bl	801c788 <_ZNKSt9type_infoeqERKS_>
 801c6f4:	b980      	cbnz	r0, 801c718 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 801c6f6:	4546      	cmp	r6, r8
 801c6f8:	d022      	beq.n	801c740 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x68>
 801c6fa:	68a8      	ldr	r0, [r5, #8]
 801c6fc:	4621      	mov	r1, r4
 801c6fe:	6804      	ldr	r4, [r0, #0]
 801c700:	e9cd 870c 	strd	r8, r7, [sp, #48]	; 0x30
 801c704:	e9cd 690a 	strd	r6, r9, [sp, #40]	; 0x28
 801c708:	69e4      	ldr	r4, [r4, #28]
 801c70a:	465b      	mov	r3, fp
 801c70c:	4652      	mov	r2, sl
 801c70e:	46a4      	mov	ip, r4
 801c710:	b001      	add	sp, #4
 801c712:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c716:	4760      	bx	ip
 801c718:	2c00      	cmp	r4, #0
 801c71a:	603e      	str	r6, [r7, #0]
 801c71c:	f887 a004 	strb.w	sl, [r7, #4]
 801c720:	db09      	blt.n	801c736 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>
 801c722:	4426      	add	r6, r4
 801c724:	45b0      	cmp	r8, r6
 801c726:	bf0c      	ite	eq
 801c728:	2606      	moveq	r6, #6
 801c72a:	2601      	movne	r6, #1
 801c72c:	71be      	strb	r6, [r7, #6]
 801c72e:	2000      	movs	r0, #0
 801c730:	b001      	add	sp, #4
 801c732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c736:	3402      	adds	r4, #2
 801c738:	d1f9      	bne.n	801c72e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x56>
 801c73a:	2301      	movs	r3, #1
 801c73c:	71bb      	strb	r3, [r7, #6]
 801c73e:	e7f6      	b.n	801c72e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x56>
 801c740:	4649      	mov	r1, r9
 801c742:	4628      	mov	r0, r5
 801c744:	f000 f820 	bl	801c788 <_ZNKSt9type_infoeqERKS_>
 801c748:	2800      	cmp	r0, #0
 801c74a:	d0d6      	beq.n	801c6fa <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22>
 801c74c:	f887 a005 	strb.w	sl, [r7, #5]
 801c750:	e7ed      	b.n	801c72e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x56>
 801c752:	bf00      	nop

0801c754 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 801c754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c758:	4606      	mov	r6, r0
 801c75a:	460f      	mov	r7, r1
 801c75c:	4614      	mov	r4, r2
 801c75e:	461d      	mov	r5, r3
 801c760:	f7ff f95a 	bl	801ba18 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801c764:	b948      	cbnz	r0, 801c77a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 801c766:	68b0      	ldr	r0, [r6, #8]
 801c768:	6801      	ldr	r1, [r0, #0]
 801c76a:	4622      	mov	r2, r4
 801c76c:	698c      	ldr	r4, [r1, #24]
 801c76e:	462b      	mov	r3, r5
 801c770:	4639      	mov	r1, r7
 801c772:	46a4      	mov	ip, r4
 801c774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c778:	4760      	bx	ip
 801c77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c77e:	bf00      	nop

0801c780 <_ZNSt9type_infoD1Ev>:
 801c780:	4770      	bx	lr
 801c782:	bf00      	nop

0801c784 <_ZNKSt9type_info14__is_pointer_pEv>:
 801c784:	2000      	movs	r0, #0
 801c786:	4770      	bx	lr

0801c788 <_ZNKSt9type_infoeqERKS_>:
 801c788:	4281      	cmp	r1, r0
 801c78a:	d011      	beq.n	801c7b0 <_ZNKSt9type_infoeqERKS_+0x28>
 801c78c:	b508      	push	{r3, lr}
 801c78e:	6840      	ldr	r0, [r0, #4]
 801c790:	7803      	ldrb	r3, [r0, #0]
 801c792:	2b2a      	cmp	r3, #42	; 0x2a
 801c794:	d00a      	beq.n	801c7ac <_ZNKSt9type_infoeqERKS_+0x24>
 801c796:	6849      	ldr	r1, [r1, #4]
 801c798:	780b      	ldrb	r3, [r1, #0]
 801c79a:	2b2a      	cmp	r3, #42	; 0x2a
 801c79c:	bf08      	it	eq
 801c79e:	3101      	addeq	r1, #1
 801c7a0:	f7e9 fd46 	bl	8006230 <strcmp>
 801c7a4:	fab0 f080 	clz	r0, r0
 801c7a8:	0940      	lsrs	r0, r0, #5
 801c7aa:	bd08      	pop	{r3, pc}
 801c7ac:	2000      	movs	r0, #0
 801c7ae:	bd08      	pop	{r3, pc}
 801c7b0:	2001      	movs	r0, #1
 801c7b2:	4770      	bx	lr

0801c7b4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 801c7b4:	b570      	push	{r4, r5, r6, lr}
 801c7b6:	4b3b      	ldr	r3, [pc, #236]	; (801c8a4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf0>)
 801c7b8:	781a      	ldrb	r2, [r3, #0]
 801c7ba:	b082      	sub	sp, #8
 801c7bc:	2a00      	cmp	r2, #0
 801c7be:	d141      	bne.n	801c844 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x90>
 801c7c0:	2401      	movs	r4, #1
 801c7c2:	701c      	strb	r4, [r3, #0]
 801c7c4:	f000 fbfa 	bl	801cfbc <__cxa_current_exception_type>
 801c7c8:	2800      	cmp	r0, #0
 801c7ca:	d031      	beq.n	801c830 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x7c>
 801c7cc:	6844      	ldr	r4, [r0, #4]
 801c7ce:	4d36      	ldr	r5, [pc, #216]	; (801c8a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 801c7d0:	7823      	ldrb	r3, [r4, #0]
 801c7d2:	2b2a      	cmp	r3, #42	; 0x2a
 801c7d4:	bf08      	it	eq
 801c7d6:	3401      	addeq	r4, #1
 801c7d8:	2200      	movs	r2, #0
 801c7da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c7de:	4611      	mov	r1, r2
 801c7e0:	ab01      	add	r3, sp, #4
 801c7e2:	9001      	str	r0, [sp, #4]
 801c7e4:	4620      	mov	r0, r4
 801c7e6:	f7e9 fc57 	bl	8006098 <__cxa_demangle>
 801c7ea:	682b      	ldr	r3, [r5, #0]
 801c7ec:	2230      	movs	r2, #48	; 0x30
 801c7ee:	68db      	ldr	r3, [r3, #12]
 801c7f0:	4606      	mov	r6, r0
 801c7f2:	2101      	movs	r1, #1
 801c7f4:	482d      	ldr	r0, [pc, #180]	; (801c8ac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 801c7f6:	f001 fd93 	bl	801e320 <fwrite>
 801c7fa:	9b01      	ldr	r3, [sp, #4]
 801c7fc:	b193      	cbz	r3, 801c824 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x70>
 801c7fe:	682b      	ldr	r3, [r5, #0]
 801c800:	4620      	mov	r0, r4
 801c802:	68d9      	ldr	r1, [r3, #12]
 801c804:	f001 fcec 	bl	801e1e0 <fputs>
 801c808:	682b      	ldr	r3, [r5, #0]
 801c80a:	4829      	ldr	r0, [pc, #164]	; (801c8b0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 801c80c:	68db      	ldr	r3, [r3, #12]
 801c80e:	2202      	movs	r2, #2
 801c810:	2101      	movs	r1, #1
 801c812:	f001 fd85 	bl	801e320 <fwrite>
 801c816:	9b01      	ldr	r3, [sp, #4]
 801c818:	b913      	cbnz	r3, 801c820 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 801c81a:	4630      	mov	r0, r6
 801c81c:	f001 f8fc 	bl	801da18 <free>
 801c820:	f7ff fee4 	bl	801c5ec <__cxa_rethrow>
 801c824:	682b      	ldr	r3, [r5, #0]
 801c826:	4630      	mov	r0, r6
 801c828:	68d9      	ldr	r1, [r3, #12]
 801c82a:	f001 fcd9 	bl	801e1e0 <fputs>
 801c82e:	e7eb      	b.n	801c808 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x54>
 801c830:	4b1d      	ldr	r3, [pc, #116]	; (801c8a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 801c832:	4820      	ldr	r0, [pc, #128]	; (801c8b4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	222d      	movs	r2, #45	; 0x2d
 801c838:	68db      	ldr	r3, [r3, #12]
 801c83a:	4621      	mov	r1, r4
 801c83c:	f001 fd70 	bl	801e320 <fwrite>
 801c840:	f000 fde6 	bl	801d410 <abort>
 801c844:	4b18      	ldr	r3, [pc, #96]	; (801c8a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 801c846:	481c      	ldr	r0, [pc, #112]	; (801c8b8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	221d      	movs	r2, #29
 801c84c:	68db      	ldr	r3, [r3, #12]
 801c84e:	2101      	movs	r1, #1
 801c850:	f001 fd66 	bl	801e320 <fwrite>
 801c854:	f000 fddc 	bl	801d410 <abort>
 801c858:	2901      	cmp	r1, #1
 801c85a:	460c      	mov	r4, r1
 801c85c:	d119      	bne.n	801c892 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xde>
 801c85e:	f7ff fa75 	bl	801bd4c <__cxa_begin_catch>
 801c862:	6803      	ldr	r3, [r0, #0]
 801c864:	689b      	ldr	r3, [r3, #8]
 801c866:	4798      	blx	r3
 801c868:	682b      	ldr	r3, [r5, #0]
 801c86a:	4621      	mov	r1, r4
 801c86c:	68db      	ldr	r3, [r3, #12]
 801c86e:	4604      	mov	r4, r0
 801c870:	220b      	movs	r2, #11
 801c872:	4812      	ldr	r0, [pc, #72]	; (801c8bc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 801c874:	f001 fd54 	bl	801e320 <fwrite>
 801c878:	682b      	ldr	r3, [r5, #0]
 801c87a:	4620      	mov	r0, r4
 801c87c:	68d9      	ldr	r1, [r3, #12]
 801c87e:	f001 fcaf 	bl	801e1e0 <fputs>
 801c882:	682b      	ldr	r3, [r5, #0]
 801c884:	200a      	movs	r0, #10
 801c886:	68d9      	ldr	r1, [r3, #12]
 801c888:	f001 fc50 	bl	801e12c <fputc>
 801c88c:	f7ff fa9c 	bl	801bdc8 <__cxa_end_catch>
 801c890:	e7d6      	b.n	801c840 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 801c892:	f7ff fa5b 	bl	801bd4c <__cxa_begin_catch>
 801c896:	f7ff fa97 	bl	801bdc8 <__cxa_end_catch>
 801c89a:	e7d1      	b.n	801c840 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 801c89c:	f7ff fa94 	bl	801bdc8 <__cxa_end_catch>
 801c8a0:	f7ff f98c 	bl	801bbbc <__cxa_end_cleanup>
 801c8a4:	20005960 	.word	0x20005960
 801c8a8:	200001f0 	.word	0x200001f0
 801c8ac:	08021e9c 	.word	0x08021e9c
 801c8b0:	08021ed0 	.word	0x08021ed0
 801c8b4:	08021ed4 	.word	0x08021ed4
 801c8b8:	08021e7c 	.word	0x08021e7c
 801c8bc:	08021f04 	.word	0x08021f04

0801c8c0 <_ZNKSt11logic_error4whatEv>:
 801c8c0:	6840      	ldr	r0, [r0, #4]
 801c8c2:	4770      	bx	lr

0801c8c4 <_ZNSt11logic_errorD1Ev>:
 801c8c4:	b510      	push	{r4, lr}
 801c8c6:	6843      	ldr	r3, [r0, #4]
 801c8c8:	4a0c      	ldr	r2, [pc, #48]	; (801c8fc <_ZNSt11logic_errorD1Ev+0x38>)
 801c8ca:	490d      	ldr	r1, [pc, #52]	; (801c900 <_ZNSt11logic_errorD1Ev+0x3c>)
 801c8cc:	4604      	mov	r4, r0
 801c8ce:	f1a3 000c 	sub.w	r0, r3, #12
 801c8d2:	4290      	cmp	r0, r2
 801c8d4:	b082      	sub	sp, #8
 801c8d6:	6021      	str	r1, [r4, #0]
 801c8d8:	d105      	bne.n	801c8e6 <_ZNSt11logic_errorD1Ev+0x22>
 801c8da:	4620      	mov	r0, r4
 801c8dc:	f7ff faba 	bl	801be54 <_ZNSt9exceptionD1Ev>
 801c8e0:	4620      	mov	r0, r4
 801c8e2:	b002      	add	sp, #8
 801c8e4:	bd10      	pop	{r4, pc}
 801c8e6:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801c8ea:	1e51      	subs	r1, r2, #1
 801c8ec:	2a00      	cmp	r2, #0
 801c8ee:	f843 1c04 	str.w	r1, [r3, #-4]
 801c8f2:	dcf2      	bgt.n	801c8da <_ZNSt11logic_errorD1Ev+0x16>
 801c8f4:	a901      	add	r1, sp, #4
 801c8f6:	f000 f977 	bl	801cbe8 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 801c8fa:	e7ee      	b.n	801c8da <_ZNSt11logic_errorD1Ev+0x16>
 801c8fc:	20005964 	.word	0x20005964
 801c900:	08021f74 	.word	0x08021f74

0801c904 <_ZNSt12length_errorD1Ev>:
 801c904:	b510      	push	{r4, lr}
 801c906:	6843      	ldr	r3, [r0, #4]
 801c908:	4a0c      	ldr	r2, [pc, #48]	; (801c93c <_ZNSt12length_errorD1Ev+0x38>)
 801c90a:	490d      	ldr	r1, [pc, #52]	; (801c940 <_ZNSt12length_errorD1Ev+0x3c>)
 801c90c:	4604      	mov	r4, r0
 801c90e:	f1a3 000c 	sub.w	r0, r3, #12
 801c912:	4290      	cmp	r0, r2
 801c914:	b082      	sub	sp, #8
 801c916:	6021      	str	r1, [r4, #0]
 801c918:	d105      	bne.n	801c926 <_ZNSt12length_errorD1Ev+0x22>
 801c91a:	4620      	mov	r0, r4
 801c91c:	f7ff fa9a 	bl	801be54 <_ZNSt9exceptionD1Ev>
 801c920:	4620      	mov	r0, r4
 801c922:	b002      	add	sp, #8
 801c924:	bd10      	pop	{r4, pc}
 801c926:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801c92a:	1e51      	subs	r1, r2, #1
 801c92c:	2a00      	cmp	r2, #0
 801c92e:	f843 1c04 	str.w	r1, [r3, #-4]
 801c932:	dcf2      	bgt.n	801c91a <_ZNSt12length_errorD1Ev+0x16>
 801c934:	a901      	add	r1, sp, #4
 801c936:	f000 f957 	bl	801cbe8 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 801c93a:	e7ee      	b.n	801c91a <_ZNSt12length_errorD1Ev+0x16>
 801c93c:	20005964 	.word	0x20005964
 801c940:	08021f74 	.word	0x08021f74

0801c944 <_ZNSt12out_of_rangeD1Ev>:
 801c944:	b510      	push	{r4, lr}
 801c946:	6843      	ldr	r3, [r0, #4]
 801c948:	4a0c      	ldr	r2, [pc, #48]	; (801c97c <_ZNSt12out_of_rangeD1Ev+0x38>)
 801c94a:	490d      	ldr	r1, [pc, #52]	; (801c980 <_ZNSt12out_of_rangeD1Ev+0x3c>)
 801c94c:	4604      	mov	r4, r0
 801c94e:	f1a3 000c 	sub.w	r0, r3, #12
 801c952:	4290      	cmp	r0, r2
 801c954:	b082      	sub	sp, #8
 801c956:	6021      	str	r1, [r4, #0]
 801c958:	d105      	bne.n	801c966 <_ZNSt12out_of_rangeD1Ev+0x22>
 801c95a:	4620      	mov	r0, r4
 801c95c:	f7ff fa7a 	bl	801be54 <_ZNSt9exceptionD1Ev>
 801c960:	4620      	mov	r0, r4
 801c962:	b002      	add	sp, #8
 801c964:	bd10      	pop	{r4, pc}
 801c966:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801c96a:	1e51      	subs	r1, r2, #1
 801c96c:	2a00      	cmp	r2, #0
 801c96e:	f843 1c04 	str.w	r1, [r3, #-4]
 801c972:	dcf2      	bgt.n	801c95a <_ZNSt12out_of_rangeD1Ev+0x16>
 801c974:	a901      	add	r1, sp, #4
 801c976:	f000 f937 	bl	801cbe8 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 801c97a:	e7ee      	b.n	801c95a <_ZNSt12out_of_rangeD1Ev+0x16>
 801c97c:	20005964 	.word	0x20005964
 801c980:	08021f74 	.word	0x08021f74

0801c984 <_ZNSt11logic_errorD0Ev>:
 801c984:	b510      	push	{r4, lr}
 801c986:	6843      	ldr	r3, [r0, #4]
 801c988:	4a0e      	ldr	r2, [pc, #56]	; (801c9c4 <_ZNSt11logic_errorD0Ev+0x40>)
 801c98a:	490f      	ldr	r1, [pc, #60]	; (801c9c8 <_ZNSt11logic_errorD0Ev+0x44>)
 801c98c:	4604      	mov	r4, r0
 801c98e:	f1a3 000c 	sub.w	r0, r3, #12
 801c992:	4290      	cmp	r0, r2
 801c994:	b082      	sub	sp, #8
 801c996:	6021      	str	r1, [r4, #0]
 801c998:	d108      	bne.n	801c9ac <_ZNSt11logic_errorD0Ev+0x28>
 801c99a:	4620      	mov	r0, r4
 801c99c:	f7ff fa5a 	bl	801be54 <_ZNSt9exceptionD1Ev>
 801c9a0:	4620      	mov	r0, r4
 801c9a2:	f7ff f85d 	bl	801ba60 <_ZdlPv>
 801c9a6:	4620      	mov	r0, r4
 801c9a8:	b002      	add	sp, #8
 801c9aa:	bd10      	pop	{r4, pc}
 801c9ac:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801c9b0:	1e51      	subs	r1, r2, #1
 801c9b2:	2a00      	cmp	r2, #0
 801c9b4:	f843 1c04 	str.w	r1, [r3, #-4]
 801c9b8:	dcef      	bgt.n	801c99a <_ZNSt11logic_errorD0Ev+0x16>
 801c9ba:	a901      	add	r1, sp, #4
 801c9bc:	f000 f914 	bl	801cbe8 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 801c9c0:	e7eb      	b.n	801c99a <_ZNSt11logic_errorD0Ev+0x16>
 801c9c2:	bf00      	nop
 801c9c4:	20005964 	.word	0x20005964
 801c9c8:	08021f74 	.word	0x08021f74

0801c9cc <_ZNSt12out_of_rangeD0Ev>:
 801c9cc:	b510      	push	{r4, lr}
 801c9ce:	6843      	ldr	r3, [r0, #4]
 801c9d0:	4a0e      	ldr	r2, [pc, #56]	; (801ca0c <_ZNSt12out_of_rangeD0Ev+0x40>)
 801c9d2:	490f      	ldr	r1, [pc, #60]	; (801ca10 <_ZNSt12out_of_rangeD0Ev+0x44>)
 801c9d4:	4604      	mov	r4, r0
 801c9d6:	f1a3 000c 	sub.w	r0, r3, #12
 801c9da:	4290      	cmp	r0, r2
 801c9dc:	b082      	sub	sp, #8
 801c9de:	6021      	str	r1, [r4, #0]
 801c9e0:	d108      	bne.n	801c9f4 <_ZNSt12out_of_rangeD0Ev+0x28>
 801c9e2:	4620      	mov	r0, r4
 801c9e4:	f7ff fa36 	bl	801be54 <_ZNSt9exceptionD1Ev>
 801c9e8:	4620      	mov	r0, r4
 801c9ea:	f7ff f839 	bl	801ba60 <_ZdlPv>
 801c9ee:	4620      	mov	r0, r4
 801c9f0:	b002      	add	sp, #8
 801c9f2:	bd10      	pop	{r4, pc}
 801c9f4:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801c9f8:	1e51      	subs	r1, r2, #1
 801c9fa:	2a00      	cmp	r2, #0
 801c9fc:	f843 1c04 	str.w	r1, [r3, #-4]
 801ca00:	dcef      	bgt.n	801c9e2 <_ZNSt12out_of_rangeD0Ev+0x16>
 801ca02:	a901      	add	r1, sp, #4
 801ca04:	f000 f8f0 	bl	801cbe8 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 801ca08:	e7eb      	b.n	801c9e2 <_ZNSt12out_of_rangeD0Ev+0x16>
 801ca0a:	bf00      	nop
 801ca0c:	20005964 	.word	0x20005964
 801ca10:	08021f74 	.word	0x08021f74

0801ca14 <_ZNSt12length_errorD0Ev>:
 801ca14:	b510      	push	{r4, lr}
 801ca16:	6843      	ldr	r3, [r0, #4]
 801ca18:	4a0e      	ldr	r2, [pc, #56]	; (801ca54 <_ZNSt12length_errorD0Ev+0x40>)
 801ca1a:	490f      	ldr	r1, [pc, #60]	; (801ca58 <_ZNSt12length_errorD0Ev+0x44>)
 801ca1c:	4604      	mov	r4, r0
 801ca1e:	f1a3 000c 	sub.w	r0, r3, #12
 801ca22:	4290      	cmp	r0, r2
 801ca24:	b082      	sub	sp, #8
 801ca26:	6021      	str	r1, [r4, #0]
 801ca28:	d108      	bne.n	801ca3c <_ZNSt12length_errorD0Ev+0x28>
 801ca2a:	4620      	mov	r0, r4
 801ca2c:	f7ff fa12 	bl	801be54 <_ZNSt9exceptionD1Ev>
 801ca30:	4620      	mov	r0, r4
 801ca32:	f7ff f815 	bl	801ba60 <_ZdlPv>
 801ca36:	4620      	mov	r0, r4
 801ca38:	b002      	add	sp, #8
 801ca3a:	bd10      	pop	{r4, pc}
 801ca3c:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801ca40:	1e51      	subs	r1, r2, #1
 801ca42:	2a00      	cmp	r2, #0
 801ca44:	f843 1c04 	str.w	r1, [r3, #-4]
 801ca48:	dcef      	bgt.n	801ca2a <_ZNSt12length_errorD0Ev+0x16>
 801ca4a:	a901      	add	r1, sp, #4
 801ca4c:	f000 f8cc 	bl	801cbe8 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 801ca50:	e7eb      	b.n	801ca2a <_ZNSt12length_errorD0Ev+0x16>
 801ca52:	bf00      	nop
 801ca54:	20005964 	.word	0x20005964
 801ca58:	08021f74 	.word	0x08021f74

0801ca5c <_ZNSt11logic_errorC1EPKc>:
 801ca5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca5e:	4b1b      	ldr	r3, [pc, #108]	; (801cacc <_ZNSt11logic_errorC1EPKc+0x70>)
 801ca60:	6003      	str	r3, [r0, #0]
 801ca62:	b083      	sub	sp, #12
 801ca64:	4604      	mov	r4, r0
 801ca66:	b349      	cbz	r1, 801cabc <_ZNSt11logic_errorC1EPKc+0x60>
 801ca68:	4608      	mov	r0, r1
 801ca6a:	460d      	mov	r5, r1
 801ca6c:	f7e9 fbd8 	bl	8006220 <strlen>
 801ca70:	4607      	mov	r7, r0
 801ca72:	b1a8      	cbz	r0, 801caa0 <_ZNSt11logic_errorC1EPKc+0x44>
 801ca74:	aa01      	add	r2, sp, #4
 801ca76:	2100      	movs	r1, #0
 801ca78:	f000 f87a 	bl	801cb70 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 801ca7c:	2f01      	cmp	r7, #1
 801ca7e:	4606      	mov	r6, r0
 801ca80:	f100 030c 	add.w	r3, r0, #12
 801ca84:	d011      	beq.n	801caaa <_ZNSt11logic_errorC1EPKc+0x4e>
 801ca86:	4618      	mov	r0, r3
 801ca88:	4629      	mov	r1, r5
 801ca8a:	463a      	mov	r2, r7
 801ca8c:	f002 f8b4 	bl	801ebf8 <memcpy>
 801ca90:	4603      	mov	r3, r0
 801ca92:	4a0f      	ldr	r2, [pc, #60]	; (801cad0 <_ZNSt11logic_errorC1EPKc+0x74>)
 801ca94:	4296      	cmp	r6, r2
 801ca96:	d10b      	bne.n	801cab0 <_ZNSt11logic_errorC1EPKc+0x54>
 801ca98:	4620      	mov	r0, r4
 801ca9a:	6063      	str	r3, [r4, #4]
 801ca9c:	b003      	add	sp, #12
 801ca9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801caa0:	4b0c      	ldr	r3, [pc, #48]	; (801cad4 <_ZNSt11logic_errorC1EPKc+0x78>)
 801caa2:	6063      	str	r3, [r4, #4]
 801caa4:	4620      	mov	r0, r4
 801caa6:	b003      	add	sp, #12
 801caa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801caaa:	782a      	ldrb	r2, [r5, #0]
 801caac:	7302      	strb	r2, [r0, #12]
 801caae:	e7f0      	b.n	801ca92 <_ZNSt11logic_errorC1EPKc+0x36>
 801cab0:	2200      	movs	r2, #0
 801cab2:	60b2      	str	r2, [r6, #8]
 801cab4:	6037      	str	r7, [r6, #0]
 801cab6:	443e      	add	r6, r7
 801cab8:	7332      	strb	r2, [r6, #12]
 801caba:	e7ed      	b.n	801ca98 <_ZNSt11logic_errorC1EPKc+0x3c>
 801cabc:	4806      	ldr	r0, [pc, #24]	; (801cad8 <_ZNSt11logic_errorC1EPKc+0x7c>)
 801cabe:	f7fe f99f 	bl	801ae00 <_ZSt19__throw_logic_errorPKc>
 801cac2:	4620      	mov	r0, r4
 801cac4:	f7ff f9c6 	bl	801be54 <_ZNSt9exceptionD1Ev>
 801cac8:	f7ff f878 	bl	801bbbc <__cxa_end_cleanup>
 801cacc:	08021f74 	.word	0x08021f74
 801cad0:	20005964 	.word	0x20005964
 801cad4:	20005970 	.word	0x20005970
 801cad8:	08021fa8 	.word	0x08021fa8

0801cadc <_ZNSt12length_errorC1EPKc>:
 801cadc:	b510      	push	{r4, lr}
 801cade:	4604      	mov	r4, r0
 801cae0:	f7ff ffbc 	bl	801ca5c <_ZNSt11logic_errorC1EPKc>
 801cae4:	4b01      	ldr	r3, [pc, #4]	; (801caec <_ZNSt12length_errorC1EPKc+0x10>)
 801cae6:	6023      	str	r3, [r4, #0]
 801cae8:	4620      	mov	r0, r4
 801caea:	bd10      	pop	{r4, pc}
 801caec:	08021f88 	.word	0x08021f88

0801caf0 <_ZNSt12out_of_rangeC1EPKc>:
 801caf0:	b510      	push	{r4, lr}
 801caf2:	4604      	mov	r4, r0
 801caf4:	f7ff ffb2 	bl	801ca5c <_ZNSt11logic_errorC1EPKc>
 801caf8:	4b01      	ldr	r3, [pc, #4]	; (801cb00 <_ZNSt12out_of_rangeC1EPKc+0x10>)
 801cafa:	6023      	str	r3, [r4, #0]
 801cafc:	4620      	mov	r0, r4
 801cafe:	bd10      	pop	{r4, pc}
 801cb00:	08021f9c 	.word	0x08021f9c

0801cb04 <_ZNSt12__cow_stringC1EPKcj>:
 801cb04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb06:	4605      	mov	r5, r0
 801cb08:	b083      	sub	sp, #12
 801cb0a:	b1e2      	cbz	r2, 801cb46 <_ZNSt12__cow_stringC1EPKcj+0x42>
 801cb0c:	460e      	mov	r6, r1
 801cb0e:	b329      	cbz	r1, 801cb5c <_ZNSt12__cow_stringC1EPKcj+0x58>
 801cb10:	4614      	mov	r4, r2
 801cb12:	2100      	movs	r1, #0
 801cb14:	aa01      	add	r2, sp, #4
 801cb16:	4620      	mov	r0, r4
 801cb18:	f000 f82a 	bl	801cb70 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 801cb1c:	2c01      	cmp	r4, #1
 801cb1e:	4607      	mov	r7, r0
 801cb20:	f100 030c 	add.w	r3, r0, #12
 801cb24:	d00c      	beq.n	801cb40 <_ZNSt12__cow_stringC1EPKcj+0x3c>
 801cb26:	4618      	mov	r0, r3
 801cb28:	4631      	mov	r1, r6
 801cb2a:	4622      	mov	r2, r4
 801cb2c:	f002 f864 	bl	801ebf8 <memcpy>
 801cb30:	4603      	mov	r3, r0
 801cb32:	4a0c      	ldr	r2, [pc, #48]	; (801cb64 <_ZNSt12__cow_stringC1EPKcj+0x60>)
 801cb34:	4297      	cmp	r7, r2
 801cb36:	d10b      	bne.n	801cb50 <_ZNSt12__cow_stringC1EPKcj+0x4c>
 801cb38:	4628      	mov	r0, r5
 801cb3a:	602b      	str	r3, [r5, #0]
 801cb3c:	b003      	add	sp, #12
 801cb3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb40:	7832      	ldrb	r2, [r6, #0]
 801cb42:	7302      	strb	r2, [r0, #12]
 801cb44:	e7f5      	b.n	801cb32 <_ZNSt12__cow_stringC1EPKcj+0x2e>
 801cb46:	4b08      	ldr	r3, [pc, #32]	; (801cb68 <_ZNSt12__cow_stringC1EPKcj+0x64>)
 801cb48:	602b      	str	r3, [r5, #0]
 801cb4a:	4628      	mov	r0, r5
 801cb4c:	b003      	add	sp, #12
 801cb4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb50:	2200      	movs	r2, #0
 801cb52:	60ba      	str	r2, [r7, #8]
 801cb54:	603c      	str	r4, [r7, #0]
 801cb56:	4427      	add	r7, r4
 801cb58:	733a      	strb	r2, [r7, #12]
 801cb5a:	e7ed      	b.n	801cb38 <_ZNSt12__cow_stringC1EPKcj+0x34>
 801cb5c:	4803      	ldr	r0, [pc, #12]	; (801cb6c <_ZNSt12__cow_stringC1EPKcj+0x68>)
 801cb5e:	f7fe f94f 	bl	801ae00 <_ZSt19__throw_logic_errorPKc>
 801cb62:	bf00      	nop
 801cb64:	20005964 	.word	0x20005964
 801cb68:	20005970 	.word	0x20005970
 801cb6c:	08021fa8 	.word	0x08021fa8

0801cb70 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 801cb70:	4b1b      	ldr	r3, [pc, #108]	; (801cbe0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x70>)
 801cb72:	4298      	cmp	r0, r3
 801cb74:	b510      	push	{r4, lr}
 801cb76:	d830      	bhi.n	801cbda <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x6a>
 801cb78:	4288      	cmp	r0, r1
 801cb7a:	4604      	mov	r4, r0
 801cb7c:	d91c      	bls.n	801cbb8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x48>
 801cb7e:	004a      	lsls	r2, r1, #1
 801cb80:	4290      	cmp	r0, r2
 801cb82:	bf38      	it	cc
 801cb84:	4614      	movcc	r4, r2
 801cb86:	f104 021d 	add.w	r2, r4, #29
 801cb8a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 801cb8e:	f104 000d 	add.w	r0, r4, #13
 801cb92:	d918      	bls.n	801cbc6 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x56>
 801cb94:	428c      	cmp	r4, r1
 801cb96:	d916      	bls.n	801cbc6 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x56>
 801cb98:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801cb9c:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 801cba0:	1aa4      	subs	r4, r4, r2
 801cba2:	429c      	cmp	r4, r3
 801cba4:	bf28      	it	cs
 801cba6:	461c      	movcs	r4, r3
 801cba8:	f104 000d 	add.w	r0, r4, #13
 801cbac:	f7fe f8e2 	bl	801ad74 <_Znwj>
 801cbb0:	2200      	movs	r2, #0
 801cbb2:	e9c0 4201 	strd	r4, r2, [r0, #4]
 801cbb6:	bd10      	pop	{r4, pc}
 801cbb8:	f100 031d 	add.w	r3, r0, #29
 801cbbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cbc0:	f100 000d 	add.w	r0, r0, #13
 801cbc4:	d901      	bls.n	801cbca <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5a>
 801cbc6:	2800      	cmp	r0, #0
 801cbc8:	db05      	blt.n	801cbd6 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x66>
 801cbca:	f7fe f8d3 	bl	801ad74 <_Znwj>
 801cbce:	2200      	movs	r2, #0
 801cbd0:	e9c0 4201 	strd	r4, r2, [r0, #4]
 801cbd4:	bd10      	pop	{r4, pc}
 801cbd6:	f7fe f8f3 	bl	801adc0 <_ZSt17__throw_bad_allocv>
 801cbda:	4802      	ldr	r0, [pc, #8]	; (801cbe4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x74>)
 801cbdc:	f7fe f928 	bl	801ae30 <_ZSt20__throw_length_errorPKc>
 801cbe0:	3ffffffc 	.word	0x3ffffffc
 801cbe4:	08021fd4 	.word	0x08021fd4

0801cbe8 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 801cbe8:	f7fe bf3a 	b.w	801ba60 <_ZdlPv>

0801cbec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 801cbec:	4b18      	ldr	r3, [pc, #96]	; (801cc50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 801cbee:	681a      	ldr	r2, [r3, #0]
 801cbf0:	07d1      	lsls	r1, r2, #31
 801cbf2:	bf5c      	itt	pl
 801cbf4:	2201      	movpl	r2, #1
 801cbf6:	601a      	strpl	r2, [r3, #0]
 801cbf8:	4b16      	ldr	r3, [pc, #88]	; (801cc54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 801cbfa:	681a      	ldr	r2, [r3, #0]
 801cbfc:	07d2      	lsls	r2, r2, #31
 801cbfe:	bf5c      	itt	pl
 801cc00:	2201      	movpl	r2, #1
 801cc02:	601a      	strpl	r2, [r3, #0]
 801cc04:	4b14      	ldr	r3, [pc, #80]	; (801cc58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 801cc06:	681a      	ldr	r2, [r3, #0]
 801cc08:	07d0      	lsls	r0, r2, #31
 801cc0a:	bf5c      	itt	pl
 801cc0c:	2201      	movpl	r2, #1
 801cc0e:	601a      	strpl	r2, [r3, #0]
 801cc10:	4b12      	ldr	r3, [pc, #72]	; (801cc5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 801cc12:	681a      	ldr	r2, [r3, #0]
 801cc14:	07d1      	lsls	r1, r2, #31
 801cc16:	bf5c      	itt	pl
 801cc18:	2201      	movpl	r2, #1
 801cc1a:	601a      	strpl	r2, [r3, #0]
 801cc1c:	4b10      	ldr	r3, [pc, #64]	; (801cc60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 801cc1e:	681a      	ldr	r2, [r3, #0]
 801cc20:	07d2      	lsls	r2, r2, #31
 801cc22:	bf5c      	itt	pl
 801cc24:	2201      	movpl	r2, #1
 801cc26:	601a      	strpl	r2, [r3, #0]
 801cc28:	4b0e      	ldr	r3, [pc, #56]	; (801cc64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 801cc2a:	681a      	ldr	r2, [r3, #0]
 801cc2c:	07d0      	lsls	r0, r2, #31
 801cc2e:	bf5c      	itt	pl
 801cc30:	2201      	movpl	r2, #1
 801cc32:	601a      	strpl	r2, [r3, #0]
 801cc34:	4b0c      	ldr	r3, [pc, #48]	; (801cc68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 801cc36:	681a      	ldr	r2, [r3, #0]
 801cc38:	07d1      	lsls	r1, r2, #31
 801cc3a:	bf5c      	itt	pl
 801cc3c:	2201      	movpl	r2, #1
 801cc3e:	601a      	strpl	r2, [r3, #0]
 801cc40:	4b0a      	ldr	r3, [pc, #40]	; (801cc6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 801cc42:	681a      	ldr	r2, [r3, #0]
 801cc44:	07d2      	lsls	r2, r2, #31
 801cc46:	bf5c      	itt	pl
 801cc48:	2201      	movpl	r2, #1
 801cc4a:	601a      	strpl	r2, [r3, #0]
 801cc4c:	4770      	bx	lr
 801cc4e:	bf00      	nop
 801cc50:	20005990 	.word	0x20005990
 801cc54:	2000598c 	.word	0x2000598c
 801cc58:	20005988 	.word	0x20005988
 801cc5c:	20005984 	.word	0x20005984
 801cc60:	20005980 	.word	0x20005980
 801cc64:	2000597c 	.word	0x2000597c
 801cc68:	20005978 	.word	0x20005978
 801cc6c:	20005974 	.word	0x20005974

0801cc70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 801cc70:	4b18      	ldr	r3, [pc, #96]	; (801ccd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 801cc72:	681a      	ldr	r2, [r3, #0]
 801cc74:	07d1      	lsls	r1, r2, #31
 801cc76:	bf5c      	itt	pl
 801cc78:	2201      	movpl	r2, #1
 801cc7a:	601a      	strpl	r2, [r3, #0]
 801cc7c:	4b16      	ldr	r3, [pc, #88]	; (801ccd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 801cc7e:	681a      	ldr	r2, [r3, #0]
 801cc80:	07d2      	lsls	r2, r2, #31
 801cc82:	bf5c      	itt	pl
 801cc84:	2201      	movpl	r2, #1
 801cc86:	601a      	strpl	r2, [r3, #0]
 801cc88:	4b14      	ldr	r3, [pc, #80]	; (801ccdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 801cc8a:	681a      	ldr	r2, [r3, #0]
 801cc8c:	07d0      	lsls	r0, r2, #31
 801cc8e:	bf5c      	itt	pl
 801cc90:	2201      	movpl	r2, #1
 801cc92:	601a      	strpl	r2, [r3, #0]
 801cc94:	4b12      	ldr	r3, [pc, #72]	; (801cce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 801cc96:	681a      	ldr	r2, [r3, #0]
 801cc98:	07d1      	lsls	r1, r2, #31
 801cc9a:	bf5c      	itt	pl
 801cc9c:	2201      	movpl	r2, #1
 801cc9e:	601a      	strpl	r2, [r3, #0]
 801cca0:	4b10      	ldr	r3, [pc, #64]	; (801cce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 801cca2:	681a      	ldr	r2, [r3, #0]
 801cca4:	07d2      	lsls	r2, r2, #31
 801cca6:	bf5c      	itt	pl
 801cca8:	2201      	movpl	r2, #1
 801ccaa:	601a      	strpl	r2, [r3, #0]
 801ccac:	4b0e      	ldr	r3, [pc, #56]	; (801cce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 801ccae:	681a      	ldr	r2, [r3, #0]
 801ccb0:	07d0      	lsls	r0, r2, #31
 801ccb2:	bf5c      	itt	pl
 801ccb4:	2201      	movpl	r2, #1
 801ccb6:	601a      	strpl	r2, [r3, #0]
 801ccb8:	4b0c      	ldr	r3, [pc, #48]	; (801ccec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 801ccba:	681a      	ldr	r2, [r3, #0]
 801ccbc:	07d1      	lsls	r1, r2, #31
 801ccbe:	bf5c      	itt	pl
 801ccc0:	2201      	movpl	r2, #1
 801ccc2:	601a      	strpl	r2, [r3, #0]
 801ccc4:	4b0a      	ldr	r3, [pc, #40]	; (801ccf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 801ccc6:	681a      	ldr	r2, [r3, #0]
 801ccc8:	07d2      	lsls	r2, r2, #31
 801ccca:	bf5c      	itt	pl
 801cccc:	2201      	movpl	r2, #1
 801ccce:	601a      	strpl	r2, [r3, #0]
 801ccd0:	4770      	bx	lr
 801ccd2:	bf00      	nop
 801ccd4:	200059b0 	.word	0x200059b0
 801ccd8:	200059ac 	.word	0x200059ac
 801ccdc:	200059a8 	.word	0x200059a8
 801cce0:	200059a4 	.word	0x200059a4
 801cce4:	200059a0 	.word	0x200059a0
 801cce8:	2000599c 	.word	0x2000599c
 801ccec:	20005998 	.word	0x20005998
 801ccf0:	20005994 	.word	0x20005994

0801ccf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 801ccf4:	4b24      	ldr	r3, [pc, #144]	; (801cd88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 801ccf6:	681a      	ldr	r2, [r3, #0]
 801ccf8:	07d0      	lsls	r0, r2, #31
 801ccfa:	bf5c      	itt	pl
 801ccfc:	2201      	movpl	r2, #1
 801ccfe:	601a      	strpl	r2, [r3, #0]
 801cd00:	4b22      	ldr	r3, [pc, #136]	; (801cd8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 801cd02:	681a      	ldr	r2, [r3, #0]
 801cd04:	07d1      	lsls	r1, r2, #31
 801cd06:	bf5c      	itt	pl
 801cd08:	2201      	movpl	r2, #1
 801cd0a:	601a      	strpl	r2, [r3, #0]
 801cd0c:	4b20      	ldr	r3, [pc, #128]	; (801cd90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 801cd0e:	681a      	ldr	r2, [r3, #0]
 801cd10:	07d2      	lsls	r2, r2, #31
 801cd12:	bf5c      	itt	pl
 801cd14:	2201      	movpl	r2, #1
 801cd16:	601a      	strpl	r2, [r3, #0]
 801cd18:	4b1e      	ldr	r3, [pc, #120]	; (801cd94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 801cd1a:	681a      	ldr	r2, [r3, #0]
 801cd1c:	07d0      	lsls	r0, r2, #31
 801cd1e:	bf5c      	itt	pl
 801cd20:	2201      	movpl	r2, #1
 801cd22:	601a      	strpl	r2, [r3, #0]
 801cd24:	4b1c      	ldr	r3, [pc, #112]	; (801cd98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 801cd26:	681a      	ldr	r2, [r3, #0]
 801cd28:	07d1      	lsls	r1, r2, #31
 801cd2a:	bf5c      	itt	pl
 801cd2c:	2201      	movpl	r2, #1
 801cd2e:	601a      	strpl	r2, [r3, #0]
 801cd30:	4b1a      	ldr	r3, [pc, #104]	; (801cd9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 801cd32:	681a      	ldr	r2, [r3, #0]
 801cd34:	07d2      	lsls	r2, r2, #31
 801cd36:	bf5c      	itt	pl
 801cd38:	2201      	movpl	r2, #1
 801cd3a:	601a      	strpl	r2, [r3, #0]
 801cd3c:	4b18      	ldr	r3, [pc, #96]	; (801cda0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 801cd3e:	681a      	ldr	r2, [r3, #0]
 801cd40:	07d0      	lsls	r0, r2, #31
 801cd42:	bf5c      	itt	pl
 801cd44:	2201      	movpl	r2, #1
 801cd46:	601a      	strpl	r2, [r3, #0]
 801cd48:	4b16      	ldr	r3, [pc, #88]	; (801cda4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 801cd4a:	681a      	ldr	r2, [r3, #0]
 801cd4c:	07d1      	lsls	r1, r2, #31
 801cd4e:	bf5c      	itt	pl
 801cd50:	2201      	movpl	r2, #1
 801cd52:	601a      	strpl	r2, [r3, #0]
 801cd54:	4b14      	ldr	r3, [pc, #80]	; (801cda8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 801cd56:	681a      	ldr	r2, [r3, #0]
 801cd58:	07d2      	lsls	r2, r2, #31
 801cd5a:	bf5c      	itt	pl
 801cd5c:	2201      	movpl	r2, #1
 801cd5e:	601a      	strpl	r2, [r3, #0]
 801cd60:	4b12      	ldr	r3, [pc, #72]	; (801cdac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 801cd62:	681a      	ldr	r2, [r3, #0]
 801cd64:	07d0      	lsls	r0, r2, #31
 801cd66:	bf5c      	itt	pl
 801cd68:	2201      	movpl	r2, #1
 801cd6a:	601a      	strpl	r2, [r3, #0]
 801cd6c:	4b10      	ldr	r3, [pc, #64]	; (801cdb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 801cd6e:	681a      	ldr	r2, [r3, #0]
 801cd70:	07d1      	lsls	r1, r2, #31
 801cd72:	bf5c      	itt	pl
 801cd74:	2201      	movpl	r2, #1
 801cd76:	601a      	strpl	r2, [r3, #0]
 801cd78:	4b0e      	ldr	r3, [pc, #56]	; (801cdb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 801cd7a:	681a      	ldr	r2, [r3, #0]
 801cd7c:	07d2      	lsls	r2, r2, #31
 801cd7e:	bf5c      	itt	pl
 801cd80:	2201      	movpl	r2, #1
 801cd82:	601a      	strpl	r2, [r3, #0]
 801cd84:	4770      	bx	lr
 801cd86:	bf00      	nop
 801cd88:	200059e0 	.word	0x200059e0
 801cd8c:	200059dc 	.word	0x200059dc
 801cd90:	200059d8 	.word	0x200059d8
 801cd94:	200059d4 	.word	0x200059d4
 801cd98:	200059d0 	.word	0x200059d0
 801cd9c:	200059cc 	.word	0x200059cc
 801cda0:	200059c8 	.word	0x200059c8
 801cda4:	200059c4 	.word	0x200059c4
 801cda8:	200059c0 	.word	0x200059c0
 801cdac:	200059bc 	.word	0x200059bc
 801cdb0:	200059b8 	.word	0x200059b8
 801cdb4:	200059b4 	.word	0x200059b4

0801cdb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 801cdb8:	4b24      	ldr	r3, [pc, #144]	; (801ce4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 801cdba:	681a      	ldr	r2, [r3, #0]
 801cdbc:	07d0      	lsls	r0, r2, #31
 801cdbe:	bf5c      	itt	pl
 801cdc0:	2201      	movpl	r2, #1
 801cdc2:	601a      	strpl	r2, [r3, #0]
 801cdc4:	4b22      	ldr	r3, [pc, #136]	; (801ce50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 801cdc6:	681a      	ldr	r2, [r3, #0]
 801cdc8:	07d1      	lsls	r1, r2, #31
 801cdca:	bf5c      	itt	pl
 801cdcc:	2201      	movpl	r2, #1
 801cdce:	601a      	strpl	r2, [r3, #0]
 801cdd0:	4b20      	ldr	r3, [pc, #128]	; (801ce54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 801cdd2:	681a      	ldr	r2, [r3, #0]
 801cdd4:	07d2      	lsls	r2, r2, #31
 801cdd6:	bf5c      	itt	pl
 801cdd8:	2201      	movpl	r2, #1
 801cdda:	601a      	strpl	r2, [r3, #0]
 801cddc:	4b1e      	ldr	r3, [pc, #120]	; (801ce58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 801cdde:	681a      	ldr	r2, [r3, #0]
 801cde0:	07d0      	lsls	r0, r2, #31
 801cde2:	bf5c      	itt	pl
 801cde4:	2201      	movpl	r2, #1
 801cde6:	601a      	strpl	r2, [r3, #0]
 801cde8:	4b1c      	ldr	r3, [pc, #112]	; (801ce5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 801cdea:	681a      	ldr	r2, [r3, #0]
 801cdec:	07d1      	lsls	r1, r2, #31
 801cdee:	bf5c      	itt	pl
 801cdf0:	2201      	movpl	r2, #1
 801cdf2:	601a      	strpl	r2, [r3, #0]
 801cdf4:	4b1a      	ldr	r3, [pc, #104]	; (801ce60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 801cdf6:	681a      	ldr	r2, [r3, #0]
 801cdf8:	07d2      	lsls	r2, r2, #31
 801cdfa:	bf5c      	itt	pl
 801cdfc:	2201      	movpl	r2, #1
 801cdfe:	601a      	strpl	r2, [r3, #0]
 801ce00:	4b18      	ldr	r3, [pc, #96]	; (801ce64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 801ce02:	681a      	ldr	r2, [r3, #0]
 801ce04:	07d0      	lsls	r0, r2, #31
 801ce06:	bf5c      	itt	pl
 801ce08:	2201      	movpl	r2, #1
 801ce0a:	601a      	strpl	r2, [r3, #0]
 801ce0c:	4b16      	ldr	r3, [pc, #88]	; (801ce68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 801ce0e:	681a      	ldr	r2, [r3, #0]
 801ce10:	07d1      	lsls	r1, r2, #31
 801ce12:	bf5c      	itt	pl
 801ce14:	2201      	movpl	r2, #1
 801ce16:	601a      	strpl	r2, [r3, #0]
 801ce18:	4b14      	ldr	r3, [pc, #80]	; (801ce6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 801ce1a:	681a      	ldr	r2, [r3, #0]
 801ce1c:	07d2      	lsls	r2, r2, #31
 801ce1e:	bf5c      	itt	pl
 801ce20:	2201      	movpl	r2, #1
 801ce22:	601a      	strpl	r2, [r3, #0]
 801ce24:	4b12      	ldr	r3, [pc, #72]	; (801ce70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 801ce26:	681a      	ldr	r2, [r3, #0]
 801ce28:	07d0      	lsls	r0, r2, #31
 801ce2a:	bf5c      	itt	pl
 801ce2c:	2201      	movpl	r2, #1
 801ce2e:	601a      	strpl	r2, [r3, #0]
 801ce30:	4b10      	ldr	r3, [pc, #64]	; (801ce74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 801ce32:	681a      	ldr	r2, [r3, #0]
 801ce34:	07d1      	lsls	r1, r2, #31
 801ce36:	bf5c      	itt	pl
 801ce38:	2201      	movpl	r2, #1
 801ce3a:	601a      	strpl	r2, [r3, #0]
 801ce3c:	4b0e      	ldr	r3, [pc, #56]	; (801ce78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 801ce3e:	681a      	ldr	r2, [r3, #0]
 801ce40:	07d2      	lsls	r2, r2, #31
 801ce42:	bf5c      	itt	pl
 801ce44:	2201      	movpl	r2, #1
 801ce46:	601a      	strpl	r2, [r3, #0]
 801ce48:	4770      	bx	lr
 801ce4a:	bf00      	nop
 801ce4c:	20005a10 	.word	0x20005a10
 801ce50:	20005a0c 	.word	0x20005a0c
 801ce54:	20005a08 	.word	0x20005a08
 801ce58:	20005a04 	.word	0x20005a04
 801ce5c:	20005a00 	.word	0x20005a00
 801ce60:	200059fc 	.word	0x200059fc
 801ce64:	200059f8 	.word	0x200059f8
 801ce68:	200059f4 	.word	0x200059f4
 801ce6c:	200059f0 	.word	0x200059f0
 801ce70:	200059ec 	.word	0x200059ec
 801ce74:	200059e8 	.word	0x200059e8
 801ce78:	200059e4 	.word	0x200059e4

0801ce7c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 801ce7c:	7803      	ldrb	r3, [r0, #0]
 801ce7e:	2b47      	cmp	r3, #71	; 0x47
 801ce80:	d001      	beq.n	801ce86 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 801ce82:	2000      	movs	r0, #0
 801ce84:	4770      	bx	lr
 801ce86:	7843      	ldrb	r3, [r0, #1]
 801ce88:	2b4e      	cmp	r3, #78	; 0x4e
 801ce8a:	d1fa      	bne.n	801ce82 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801ce8c:	7883      	ldrb	r3, [r0, #2]
 801ce8e:	2b55      	cmp	r3, #85	; 0x55
 801ce90:	d1f7      	bne.n	801ce82 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801ce92:	78c3      	ldrb	r3, [r0, #3]
 801ce94:	2b43      	cmp	r3, #67	; 0x43
 801ce96:	d1f4      	bne.n	801ce82 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801ce98:	7903      	ldrb	r3, [r0, #4]
 801ce9a:	2b43      	cmp	r3, #67	; 0x43
 801ce9c:	d1f1      	bne.n	801ce82 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801ce9e:	7943      	ldrb	r3, [r0, #5]
 801cea0:	2b2b      	cmp	r3, #43	; 0x2b
 801cea2:	d1ee      	bne.n	801ce82 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801cea4:	7983      	ldrb	r3, [r0, #6]
 801cea6:	2b2b      	cmp	r3, #43	; 0x2b
 801cea8:	d1eb      	bne.n	801ce82 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801ceaa:	79c0      	ldrb	r0, [r0, #7]
 801ceac:	2801      	cmp	r0, #1
 801ceae:	bf8c      	ite	hi
 801ceb0:	2000      	movhi	r0, #0
 801ceb2:	2001      	movls	r0, #1
 801ceb4:	4770      	bx	lr
 801ceb6:	bf00      	nop

0801ceb8 <__cxa_call_terminate>:
 801ceb8:	b510      	push	{r4, lr}
 801ceba:	b130      	cbz	r0, 801ceca <__cxa_call_terminate+0x12>
 801cebc:	4604      	mov	r4, r0
 801cebe:	f7fe ff45 	bl	801bd4c <__cxa_begin_catch>
 801cec2:	4620      	mov	r0, r4
 801cec4:	f7ff ffda 	bl	801ce7c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 801cec8:	b908      	cbnz	r0, 801cece <__cxa_call_terminate+0x16>
 801ceca:	f7ff faf9 	bl	801c4c0 <_ZSt9terminatev>
 801cece:	f854 0c14 	ldr.w	r0, [r4, #-20]
 801ced2:	f7ff faed 	bl	801c4b0 <_ZN10__cxxabiv111__terminateEPFvvE>
 801ced6:	bf00      	nop

0801ced8 <__cxa_call_unexpected>:
 801ced8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cedc:	b085      	sub	sp, #20
 801cede:	4602      	mov	r2, r0
 801cee0:	f7ff ffcc 	bl	801ce7c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 801cee4:	b138      	cbz	r0, 801cef6 <__cxa_call_unexpected+0x1e>
 801cee6:	e952 7406 	ldrd	r7, r4, [r2, #-24]
 801ceea:	e9d2 850c 	ldrd	r8, r5, [r2, #48]	; 0x30
 801ceee:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
 801cef2:	2600      	movs	r6, #0
 801cef4:	e005      	b.n	801cf02 <__cxa_call_unexpected+0x2a>
 801cef6:	4604      	mov	r4, r0
 801cef8:	4607      	mov	r7, r0
 801cefa:	2601      	movs	r6, #1
 801cefc:	4605      	mov	r5, r0
 801cefe:	4680      	mov	r8, r0
 801cf00:	4682      	mov	sl, r0
 801cf02:	4610      	mov	r0, r2
 801cf04:	f7fe ff22 	bl	801bd4c <__cxa_begin_catch>
 801cf08:	b10e      	cbz	r6, 801cf0e <__cxa_call_unexpected+0x36>
 801cf0a:	f7ff fae7 	bl	801c4dc <_ZSt10unexpectedv>
 801cf0e:	4638      	mov	r0, r7
 801cf10:	f7ff fae0 	bl	801c4d4 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 801cf14:	f7fe ff1a 	bl	801bd4c <__cxa_begin_catch>
 801cf18:	b10e      	cbz	r6, 801cf1e <__cxa_call_unexpected+0x46>
 801cf1a:	f7ff fad1 	bl	801c4c0 <_ZSt9terminatev>
 801cf1e:	f7fe ffa9 	bl	801be74 <__cxa_get_globals_fast>
 801cf22:	6807      	ldr	r7, [r0, #0]
 801cf24:	f8df b090 	ldr.w	fp, [pc, #144]	; 801cfb8 <__cxa_call_unexpected+0xe0>
 801cf28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cf2c:	2b01      	cmp	r3, #1
 801cf2e:	bf0c      	ite	eq
 801cf30:	683b      	ldreq	r3, [r7, #0]
 801cf32:	f107 0378 	addne.w	r3, r7, #120	; 0x78
 801cf36:	9302      	str	r3, [sp, #8]
 801cf38:	f028 0303 	bic.w	r3, r8, #3
 801cf3c:	9301      	str	r3, [sp, #4]
 801cf3e:	3720      	adds	r7, #32
 801cf40:	f04f 0900 	mov.w	r9, #0
 801cf44:	45ca      	cmp	sl, r9
 801cf46:	dd20      	ble.n	801cf8a <__cxa_call_unexpected+0xb2>
 801cf48:	f8d5 8000 	ldr.w	r8, [r5]
 801cf4c:	f1b8 0f00 	cmp.w	r8, #0
 801cf50:	d000      	beq.n	801cf54 <__cxa_call_unexpected+0x7c>
 801cf52:	44a8      	add	r8, r5
 801cf54:	ab02      	add	r3, sp, #8
 801cf56:	2200      	movs	r2, #0
 801cf58:	4641      	mov	r1, r8
 801cf5a:	4638      	mov	r0, r7
 801cf5c:	f7fe fe34 	bl	801bbc8 <__cxa_type_match>
 801cf60:	b108      	cbz	r0, 801cf66 <__cxa_call_unexpected+0x8e>
 801cf62:	f7ff fb43 	bl	801c5ec <__cxa_rethrow>
 801cf66:	f8d8 3000 	ldr.w	r3, [r8]
 801cf6a:	9003      	str	r0, [sp, #12]
 801cf6c:	aa03      	add	r2, sp, #12
 801cf6e:	4640      	mov	r0, r8
 801cf70:	4659      	mov	r1, fp
 801cf72:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801cf76:	2301      	movs	r3, #1
 801cf78:	47c0      	blx	r8
 801cf7a:	9b01      	ldr	r3, [sp, #4]
 801cf7c:	2800      	cmp	r0, #0
 801cf7e:	bf18      	it	ne
 801cf80:	4606      	movne	r6, r0
 801cf82:	f109 0901 	add.w	r9, r9, #1
 801cf86:	441d      	add	r5, r3
 801cf88:	e7dc      	b.n	801cf44 <__cxa_call_unexpected+0x6c>
 801cf8a:	b146      	cbz	r6, 801cf9e <__cxa_call_unexpected+0xc6>
 801cf8c:	2004      	movs	r0, #4
 801cf8e:	f7fe fdd9 	bl	801bb44 <__cxa_allocate_exception>
 801cf92:	4b07      	ldr	r3, [pc, #28]	; (801cfb0 <__cxa_call_unexpected+0xd8>)
 801cf94:	4a07      	ldr	r2, [pc, #28]	; (801cfb4 <__cxa_call_unexpected+0xdc>)
 801cf96:	4908      	ldr	r1, [pc, #32]	; (801cfb8 <__cxa_call_unexpected+0xe0>)
 801cf98:	6003      	str	r3, [r0, #0]
 801cf9a:	f7ff fb0b 	bl	801c5b4 <__cxa_throw>
 801cf9e:	4620      	mov	r0, r4
 801cfa0:	f7ff fa86 	bl	801c4b0 <_ZN10__cxxabiv111__terminateEPFvvE>
 801cfa4:	f7fe ff10 	bl	801bdc8 <__cxa_end_catch>
 801cfa8:	f7fe ff0e 	bl	801bdc8 <__cxa_end_catch>
 801cfac:	f7fe fe06 	bl	801bbbc <__cxa_end_cleanup>
 801cfb0:	08021df8 	.word	0x08021df8
 801cfb4:	0801be59 	.word	0x0801be59
 801cfb8:	08021d74 	.word	0x08021d74

0801cfbc <__cxa_current_exception_type>:
 801cfbc:	b508      	push	{r3, lr}
 801cfbe:	f7fe ff5d 	bl	801be7c <__cxa_get_globals>
 801cfc2:	6800      	ldr	r0, [r0, #0]
 801cfc4:	b130      	cbz	r0, 801cfd4 <__cxa_current_exception_type+0x18>
 801cfc6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 801cfca:	2b01      	cmp	r3, #1
 801cfcc:	bf04      	itt	eq
 801cfce:	6800      	ldreq	r0, [r0, #0]
 801cfd0:	3878      	subeq	r0, #120	; 0x78
 801cfd2:	6800      	ldr	r0, [r0, #0]
 801cfd4:	bd08      	pop	{r3, pc}
 801cfd6:	bf00      	nop

0801cfd8 <_ZNK12_GLOBAL__N_117io_error_category4nameEv>:
 801cfd8:	4800      	ldr	r0, [pc, #0]	; (801cfdc <_ZNK12_GLOBAL__N_117io_error_category4nameEv+0x4>)
 801cfda:	4770      	bx	lr
 801cfdc:	080228a4 	.word	0x080228a4

0801cfe0 <_ZN12_GLOBAL__N_113constant_initD1Ev>:
 801cfe0:	4770      	bx	lr
 801cfe2:	bf00      	nop

0801cfe4 <_ZN12_GLOBAL__N_117io_error_categoryD1Ev>:
 801cfe4:	b510      	push	{r4, lr}
 801cfe6:	4b03      	ldr	r3, [pc, #12]	; (801cff4 <_ZN12_GLOBAL__N_117io_error_categoryD1Ev+0x10>)
 801cfe8:	6003      	str	r3, [r0, #0]
 801cfea:	4604      	mov	r4, r0
 801cfec:	f000 f96e 	bl	801d2cc <_ZNSt3_V214error_categoryD1Ev>
 801cff0:	4620      	mov	r0, r4
 801cff2:	bd10      	pop	{r4, pc}
 801cff4:	0802290c 	.word	0x0802290c

0801cff8 <_ZN12_GLOBAL__N_117io_error_categoryD0Ev>:
 801cff8:	b510      	push	{r4, lr}
 801cffa:	4b05      	ldr	r3, [pc, #20]	; (801d010 <_ZN12_GLOBAL__N_117io_error_categoryD0Ev+0x18>)
 801cffc:	6003      	str	r3, [r0, #0]
 801cffe:	4604      	mov	r4, r0
 801d000:	f000 f964 	bl	801d2cc <_ZNSt3_V214error_categoryD1Ev>
 801d004:	4620      	mov	r0, r4
 801d006:	f7fe fd2b 	bl	801ba60 <_ZdlPv>
 801d00a:	4620      	mov	r0, r4
 801d00c:	bd10      	pop	{r4, pc}
 801d00e:	bf00      	nop
 801d010:	0802290c 	.word	0x0802290c

0801d014 <_ZNK12_GLOBAL__N_117io_error_category7messageB5cxx11Ei>:
 801d014:	b530      	push	{r4, r5, lr}
 801d016:	2100      	movs	r1, #0
 801d018:	f100 0508 	add.w	r5, r0, #8
 801d01c:	2a01      	cmp	r2, #1
 801d01e:	e9c0 5100 	strd	r5, r1, [r0]
 801d022:	b083      	sub	sp, #12
 801d024:	4604      	mov	r4, r0
 801d026:	7201      	strb	r1, [r0, #8]
 801d028:	d008      	beq.n	801d03c <_ZNK12_GLOBAL__N_117io_error_category7messageB5cxx11Ei+0x28>
 801d02a:	230d      	movs	r3, #13
 801d02c:	9300      	str	r3, [sp, #0]
 801d02e:	460a      	mov	r2, r1
 801d030:	4b0a      	ldr	r3, [pc, #40]	; (801d05c <_ZNK12_GLOBAL__N_117io_error_category7messageB5cxx11Ei+0x48>)
 801d032:	f7fe fa71 	bl	801b518 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 801d036:	4620      	mov	r0, r4
 801d038:	b003      	add	sp, #12
 801d03a:	bd30      	pop	{r4, r5, pc}
 801d03c:	230e      	movs	r3, #14
 801d03e:	9300      	str	r3, [sp, #0]
 801d040:	460a      	mov	r2, r1
 801d042:	4b07      	ldr	r3, [pc, #28]	; (801d060 <_ZNK12_GLOBAL__N_117io_error_category7messageB5cxx11Ei+0x4c>)
 801d044:	f7fe fa68 	bl	801b518 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 801d048:	4620      	mov	r0, r4
 801d04a:	b003      	add	sp, #12
 801d04c:	bd30      	pop	{r4, r5, pc}
 801d04e:	6820      	ldr	r0, [r4, #0]
 801d050:	4285      	cmp	r5, r0
 801d052:	d001      	beq.n	801d058 <_ZNK12_GLOBAL__N_117io_error_category7messageB5cxx11Ei+0x44>
 801d054:	f7fe fd04 	bl	801ba60 <_ZdlPv>
 801d058:	f7fe fdb0 	bl	801bbbc <__cxa_end_cleanup>
 801d05c:	080228c0 	.word	0x080228c0
 801d060:	080228b0 	.word	0x080228b0

0801d064 <_GLOBAL__sub_I__ZSt17iostream_categoryv>:
 801d064:	4a02      	ldr	r2, [pc, #8]	; (801d070 <_GLOBAL__sub_I__ZSt17iostream_categoryv+0xc>)
 801d066:	4903      	ldr	r1, [pc, #12]	; (801d074 <_GLOBAL__sub_I__ZSt17iostream_categoryv+0x10>)
 801d068:	4803      	ldr	r0, [pc, #12]	; (801d078 <_GLOBAL__sub_I__ZSt17iostream_categoryv+0x14>)
 801d06a:	f000 b949 	b.w	801d300 <__aeabi_atexit>
 801d06e:	bf00      	nop
 801d070:	20000000 	.word	0x20000000
 801d074:	0801cfe1 	.word	0x0801cfe1
 801d078:	20000020 	.word	0x20000020

0801d07c <_ZNK12_GLOBAL__N_122generic_error_category4nameEv>:
 801d07c:	4800      	ldr	r0, [pc, #0]	; (801d080 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv+0x4>)
 801d07e:	4770      	bx	lr
 801d080:	0802292c 	.word	0x0802292c

0801d084 <_ZNK12_GLOBAL__N_122generic_error_category10equivalentEiRKSt15error_condition>:
 801d084:	6813      	ldr	r3, [r2, #0]
 801d086:	4299      	cmp	r1, r3
 801d088:	d001      	beq.n	801d08e <_ZNK12_GLOBAL__N_122generic_error_category10equivalentEiRKSt15error_condition+0xa>
 801d08a:	2000      	movs	r0, #0
 801d08c:	4770      	bx	lr
 801d08e:	6853      	ldr	r3, [r2, #4]
 801d090:	1a18      	subs	r0, r3, r0
 801d092:	fab0 f080 	clz	r0, r0
 801d096:	0940      	lsrs	r0, r0, #5
 801d098:	4770      	bx	lr
 801d09a:	bf00      	nop

0801d09c <_ZNK12_GLOBAL__N_121system_error_category4nameEv>:
 801d09c:	4800      	ldr	r0, [pc, #0]	; (801d0a0 <_ZNK12_GLOBAL__N_121system_error_category4nameEv+0x4>)
 801d09e:	4770      	bx	lr
 801d0a0:	08022934 	.word	0x08022934

0801d0a4 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi>:
 801d0a4:	2a74      	cmp	r2, #116	; 0x74
 801d0a6:	dc19      	bgt.n	801d0dc <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x38>
 801d0a8:	2a57      	cmp	r2, #87	; 0x57
 801d0aa:	dc0c      	bgt.n	801d0c6 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x22>
 801d0ac:	2a4d      	cmp	r2, #77	; 0x4d
 801d0ae:	dc07      	bgt.n	801d0c0 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x1c>
 801d0b0:	2a3b      	cmp	r2, #59	; 0x3b
 801d0b2:	dc28      	bgt.n	801d106 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x62>
 801d0b4:	2a24      	cmp	r2, #36	; 0x24
 801d0b6:	dc1f      	bgt.n	801d0f8 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x54>
 801d0b8:	2a0f      	cmp	r2, #15
 801d0ba:	dc0b      	bgt.n	801d0d4 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x30>
 801d0bc:	2a0e      	cmp	r2, #14
 801d0be:	d909      	bls.n	801d0d4 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x30>
 801d0c0:	e9c0 2100 	strd	r2, r1, [r0]
 801d0c4:	4770      	bx	lr
 801d0c6:	4b14      	ldr	r3, [pc, #80]	; (801d118 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x74>)
 801d0c8:	f1a2 0c58 	sub.w	ip, r2, #88	; 0x58
 801d0cc:	fa23 f30c 	lsr.w	r3, r3, ip
 801d0d0:	07db      	lsls	r3, r3, #31
 801d0d2:	d5f5      	bpl.n	801d0c0 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x1c>
 801d0d4:	4b11      	ldr	r3, [pc, #68]	; (801d11c <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x78>)
 801d0d6:	e9c0 2300 	strd	r2, r3, [r0]
 801d0da:	4770      	bx	lr
 801d0dc:	f1a2 0c76 	sub.w	ip, r2, #118	; 0x76
 801d0e0:	f1bc 0f18 	cmp.w	ip, #24
 801d0e4:	d8ec      	bhi.n	801d0c0 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x1c>
 801d0e6:	4b0e      	ldr	r3, [pc, #56]	; (801d120 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x7c>)
 801d0e8:	fa23 f30c 	lsr.w	r3, r3, ip
 801d0ec:	07db      	lsls	r3, r3, #31
 801d0ee:	d5e7      	bpl.n	801d0c0 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x1c>
 801d0f0:	4b0a      	ldr	r3, [pc, #40]	; (801d11c <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x78>)
 801d0f2:	e9c0 2300 	strd	r2, r3, [r0]
 801d0f6:	4770      	bx	lr
 801d0f8:	f1a2 032d 	sub.w	r3, r2, #45	; 0x2d
 801d0fc:	2b01      	cmp	r3, #1
 801d0fe:	d9e9      	bls.n	801d0d4 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x30>
 801d100:	e9c0 2100 	strd	r2, r1, [r0]
 801d104:	4770      	bx	lr
 801d106:	4b07      	ldr	r3, [pc, #28]	; (801d124 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x80>)
 801d108:	f1a2 0c3c 	sub.w	ip, r2, #60	; 0x3c
 801d10c:	fa23 f30c 	lsr.w	r3, r3, ip
 801d110:	07db      	lsls	r3, r3, #31
 801d112:	d5d5      	bpl.n	801d0c0 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x1c>
 801d114:	e7de      	b.n	801d0d4 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x30>
 801d116:	bf00      	nop
 801d118:	1fbf009d 	.word	0x1fbf009d
 801d11c:	20000028 	.word	0x20000028
 801d120:	01f107bf 	.word	0x01f107bf
 801d124:	0002088f 	.word	0x0002088f

0801d128 <_ZNKSt3_V214error_category23default_error_conditionEi>:
 801d128:	e9c0 2100 	strd	r2, r1, [r0]
 801d12c:	4770      	bx	lr
 801d12e:	bf00      	nop

0801d130 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition>:
 801d130:	b510      	push	{r4, lr}
 801d132:	6803      	ldr	r3, [r0, #0]
 801d134:	b082      	sub	sp, #8
 801d136:	4614      	mov	r4, r2
 801d138:	695b      	ldr	r3, [r3, #20]
 801d13a:	460a      	mov	r2, r1
 801d13c:	4601      	mov	r1, r0
 801d13e:	4668      	mov	r0, sp
 801d140:	4798      	blx	r3
 801d142:	9a01      	ldr	r2, [sp, #4]
 801d144:	6863      	ldr	r3, [r4, #4]
 801d146:	429a      	cmp	r2, r3
 801d148:	d002      	beq.n	801d150 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x20>
 801d14a:	2000      	movs	r0, #0
 801d14c:	b002      	add	sp, #8
 801d14e:	bd10      	pop	{r4, pc}
 801d150:	9800      	ldr	r0, [sp, #0]
 801d152:	6823      	ldr	r3, [r4, #0]
 801d154:	1ac0      	subs	r0, r0, r3
 801d156:	fab0 f080 	clz	r0, r0
 801d15a:	0940      	lsrs	r0, r0, #5
 801d15c:	b002      	add	sp, #8
 801d15e:	bd10      	pop	{r4, pc}

0801d160 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei>:
 801d160:	684b      	ldr	r3, [r1, #4]
 801d162:	4283      	cmp	r3, r0
 801d164:	d001      	beq.n	801d16a <_ZNKSt3_V214error_category10equivalentERKSt10error_codei+0xa>
 801d166:	2000      	movs	r0, #0
 801d168:	4770      	bx	lr
 801d16a:	6808      	ldr	r0, [r1, #0]
 801d16c:	1a80      	subs	r0, r0, r2
 801d16e:	fab0 f080 	clz	r0, r0
 801d172:	0940      	lsrs	r0, r0, #5
 801d174:	4770      	bx	lr
 801d176:	bf00      	nop

0801d178 <_ZN12_GLOBAL__N_121system_error_categoryD1Ev>:
 801d178:	4770      	bx	lr
 801d17a:	bf00      	nop

0801d17c <_ZN12_GLOBAL__N_122generic_error_categoryD1Ev>:
 801d17c:	4770      	bx	lr
 801d17e:	bf00      	nop

0801d180 <_ZN12_GLOBAL__N_113constant_initINS_22generic_error_categoryEED1Ev>:
 801d180:	4770      	bx	lr
 801d182:	bf00      	nop

0801d184 <_ZN12_GLOBAL__N_113constant_initINS_21system_error_categoryEED1Ev>:
 801d184:	4770      	bx	lr
 801d186:	bf00      	nop

0801d188 <_ZN12_GLOBAL__N_122generic_error_categoryD0Ev>:
 801d188:	b510      	push	{r4, lr}
 801d18a:	4604      	mov	r4, r0
 801d18c:	f7fe fc68 	bl	801ba60 <_ZdlPv>
 801d190:	4620      	mov	r0, r4
 801d192:	bd10      	pop	{r4, pc}

0801d194 <_ZN12_GLOBAL__N_121system_error_categoryD0Ev>:
 801d194:	b510      	push	{r4, lr}
 801d196:	4604      	mov	r4, r0
 801d198:	f7fe fc62 	bl	801ba60 <_ZdlPv>
 801d19c:	4620      	mov	r0, r4
 801d19e:	bd10      	pop	{r4, pc}

0801d1a0 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei>:
 801d1a0:	b510      	push	{r4, lr}
 801d1a2:	680b      	ldr	r3, [r1, #0]
 801d1a4:	b086      	sub	sp, #24
 801d1a6:	4604      	mov	r4, r0
 801d1a8:	691b      	ldr	r3, [r3, #16]
 801d1aa:	4668      	mov	r0, sp
 801d1ac:	4798      	blx	r3
 801d1ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d1b2:	4620      	mov	r0, r4
 801d1b4:	f7ff fca6 	bl	801cb04 <_ZNSt12__cow_stringC1EPKcj>
 801d1b8:	9800      	ldr	r0, [sp, #0]
 801d1ba:	ab02      	add	r3, sp, #8
 801d1bc:	4298      	cmp	r0, r3
 801d1be:	d001      	beq.n	801d1c4 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei+0x24>
 801d1c0:	f7fe fc4e 	bl	801ba60 <_ZdlPv>
 801d1c4:	4620      	mov	r0, r4
 801d1c6:	b006      	add	sp, #24
 801d1c8:	bd10      	pop	{r4, pc}
 801d1ca:	9800      	ldr	r0, [sp, #0]
 801d1cc:	ab02      	add	r3, sp, #8
 801d1ce:	4298      	cmp	r0, r3
 801d1d0:	d001      	beq.n	801d1d6 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei+0x36>
 801d1d2:	f7fe fc45 	bl	801ba60 <_ZdlPv>
 801d1d6:	f7fe fcf1 	bl	801bbbc <__cxa_end_cleanup>
 801d1da:	bf00      	nop

0801d1dc <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei>:
 801d1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d1de:	4604      	mov	r4, r0
 801d1e0:	b083      	sub	sp, #12
 801d1e2:	4610      	mov	r0, r2
 801d1e4:	f001 fbbc 	bl	801e960 <strerror>
 801d1e8:	f104 0608 	add.w	r6, r4, #8
 801d1ec:	6026      	str	r6, [r4, #0]
 801d1ee:	b320      	cbz	r0, 801d23a <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x5e>
 801d1f0:	4607      	mov	r7, r0
 801d1f2:	f7e9 f815 	bl	8006220 <strlen>
 801d1f6:	280f      	cmp	r0, #15
 801d1f8:	4605      	mov	r5, r0
 801d1fa:	9001      	str	r0, [sp, #4]
 801d1fc:	d80c      	bhi.n	801d218 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x3c>
 801d1fe:	2801      	cmp	r0, #1
 801d200:	d107      	bne.n	801d212 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x36>
 801d202:	783b      	ldrb	r3, [r7, #0]
 801d204:	7223      	strb	r3, [r4, #8]
 801d206:	2300      	movs	r3, #0
 801d208:	4620      	mov	r0, r4
 801d20a:	6065      	str	r5, [r4, #4]
 801d20c:	5573      	strb	r3, [r6, r5]
 801d20e:	b003      	add	sp, #12
 801d210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d212:	2800      	cmp	r0, #0
 801d214:	d0f7      	beq.n	801d206 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x2a>
 801d216:	e008      	b.n	801d22a <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x4e>
 801d218:	2200      	movs	r2, #0
 801d21a:	a901      	add	r1, sp, #4
 801d21c:	4620      	mov	r0, r4
 801d21e:	f7fd ffc7 	bl	801b1b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801d222:	9b01      	ldr	r3, [sp, #4]
 801d224:	6020      	str	r0, [r4, #0]
 801d226:	4606      	mov	r6, r0
 801d228:	60a3      	str	r3, [r4, #8]
 801d22a:	462a      	mov	r2, r5
 801d22c:	4630      	mov	r0, r6
 801d22e:	4639      	mov	r1, r7
 801d230:	f001 fce2 	bl	801ebf8 <memcpy>
 801d234:	9d01      	ldr	r5, [sp, #4]
 801d236:	6826      	ldr	r6, [r4, #0]
 801d238:	e7e5      	b.n	801d206 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x2a>
 801d23a:	4801      	ldr	r0, [pc, #4]	; (801d240 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x64>)
 801d23c:	f7fd fde0 	bl	801ae00 <_ZSt19__throw_logic_errorPKc>
 801d240:	0802293c 	.word	0x0802293c

0801d244 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition>:
 801d244:	2974      	cmp	r1, #116	; 0x74
 801d246:	dc21      	bgt.n	801d28c <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x48>
 801d248:	2957      	cmp	r1, #87	; 0x57
 801d24a:	dc0e      	bgt.n	801d26a <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x26>
 801d24c:	294d      	cmp	r1, #77	; 0x4d
 801d24e:	dc07      	bgt.n	801d260 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x1c>
 801d250:	293b      	cmp	r1, #59	; 0x3b
 801d252:	dc2b      	bgt.n	801d2ac <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x68>
 801d254:	2924      	cmp	r1, #36	; 0x24
 801d256:	dc24      	bgt.n	801d2a2 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x5e>
 801d258:	290f      	cmp	r1, #15
 801d25a:	dc0d      	bgt.n	801d278 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x34>
 801d25c:	290e      	cmp	r1, #14
 801d25e:	d90b      	bls.n	801d278 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x34>
 801d260:	6853      	ldr	r3, [r2, #4]
 801d262:	4283      	cmp	r3, r0
 801d264:	d00c      	beq.n	801d280 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x3c>
 801d266:	2000      	movs	r0, #0
 801d268:	4770      	bx	lr
 801d26a:	4b14      	ldr	r3, [pc, #80]	; (801d2bc <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x78>)
 801d26c:	f1a1 0c58 	sub.w	ip, r1, #88	; 0x58
 801d270:	fa23 f30c 	lsr.w	r3, r3, ip
 801d274:	07db      	lsls	r3, r3, #31
 801d276:	d5f3      	bpl.n	801d260 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x1c>
 801d278:	4811      	ldr	r0, [pc, #68]	; (801d2c0 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x7c>)
 801d27a:	6853      	ldr	r3, [r2, #4]
 801d27c:	4283      	cmp	r3, r0
 801d27e:	d1f2      	bne.n	801d266 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x22>
 801d280:	6810      	ldr	r0, [r2, #0]
 801d282:	1a40      	subs	r0, r0, r1
 801d284:	fab0 f080 	clz	r0, r0
 801d288:	0940      	lsrs	r0, r0, #5
 801d28a:	4770      	bx	lr
 801d28c:	f1a1 0c76 	sub.w	ip, r1, #118	; 0x76
 801d290:	f1bc 0f18 	cmp.w	ip, #24
 801d294:	d8e4      	bhi.n	801d260 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x1c>
 801d296:	4b0b      	ldr	r3, [pc, #44]	; (801d2c4 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x80>)
 801d298:	fa23 f30c 	lsr.w	r3, r3, ip
 801d29c:	07db      	lsls	r3, r3, #31
 801d29e:	d4eb      	bmi.n	801d278 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x34>
 801d2a0:	e7de      	b.n	801d260 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x1c>
 801d2a2:	f1a1 032d 	sub.w	r3, r1, #45	; 0x2d
 801d2a6:	2b01      	cmp	r3, #1
 801d2a8:	d8da      	bhi.n	801d260 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x1c>
 801d2aa:	e7e5      	b.n	801d278 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x34>
 801d2ac:	4b06      	ldr	r3, [pc, #24]	; (801d2c8 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x84>)
 801d2ae:	f1a1 0c3c 	sub.w	ip, r1, #60	; 0x3c
 801d2b2:	fa23 f30c 	lsr.w	r3, r3, ip
 801d2b6:	07db      	lsls	r3, r3, #31
 801d2b8:	d5d2      	bpl.n	801d260 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x1c>
 801d2ba:	e7dd      	b.n	801d278 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x34>
 801d2bc:	1fbf009d 	.word	0x1fbf009d
 801d2c0:	20000028 	.word	0x20000028
 801d2c4:	01f107bf 	.word	0x01f107bf
 801d2c8:	0002088f 	.word	0x0002088f

0801d2cc <_ZNSt3_V214error_categoryD1Ev>:
 801d2cc:	4770      	bx	lr
 801d2ce:	bf00      	nop

0801d2d0 <_GLOBAL__sub_I__ZSt20__throw_system_errori>:
 801d2d0:	b508      	push	{r3, lr}
 801d2d2:	4a06      	ldr	r2, [pc, #24]	; (801d2ec <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x1c>)
 801d2d4:	4906      	ldr	r1, [pc, #24]	; (801d2f0 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x20>)
 801d2d6:	4807      	ldr	r0, [pc, #28]	; (801d2f4 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x24>)
 801d2d8:	f000 f812 	bl	801d300 <__aeabi_atexit>
 801d2dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801d2e0:	4a02      	ldr	r2, [pc, #8]	; (801d2ec <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x1c>)
 801d2e2:	4905      	ldr	r1, [pc, #20]	; (801d2f8 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x28>)
 801d2e4:	4805      	ldr	r0, [pc, #20]	; (801d2fc <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x2c>)
 801d2e6:	f000 b80b 	b.w	801d300 <__aeabi_atexit>
 801d2ea:	bf00      	nop
 801d2ec:	20000000 	.word	0x20000000
 801d2f0:	0801d181 	.word	0x0801d181
 801d2f4:	20000028 	.word	0x20000028
 801d2f8:	0801d185 	.word	0x0801d185
 801d2fc:	20000024 	.word	0x20000024

0801d300 <__aeabi_atexit>:
 801d300:	4603      	mov	r3, r0
 801d302:	4608      	mov	r0, r1
 801d304:	4619      	mov	r1, r3
 801d306:	f001 bc69 	b.w	801ebdc <__cxa_atexit>
 801d30a:	bf00      	nop
 801d30c:	0000      	movs	r0, r0
	...

0801d310 <floor>:
 801d310:	ec51 0b10 	vmov	r0, r1, d0
 801d314:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d31c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801d320:	2e13      	cmp	r6, #19
 801d322:	ee10 5a10 	vmov	r5, s0
 801d326:	ee10 8a10 	vmov	r8, s0
 801d32a:	460c      	mov	r4, r1
 801d32c:	dc31      	bgt.n	801d392 <floor+0x82>
 801d32e:	2e00      	cmp	r6, #0
 801d330:	da14      	bge.n	801d35c <floor+0x4c>
 801d332:	a333      	add	r3, pc, #204	; (adr r3, 801d400 <floor+0xf0>)
 801d334:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d338:	f7e8 ff8a 	bl	8006250 <__adddf3>
 801d33c:	2200      	movs	r2, #0
 801d33e:	2300      	movs	r3, #0
 801d340:	f7e9 fbcc 	bl	8006adc <__aeabi_dcmpgt>
 801d344:	b138      	cbz	r0, 801d356 <floor+0x46>
 801d346:	2c00      	cmp	r4, #0
 801d348:	da53      	bge.n	801d3f2 <floor+0xe2>
 801d34a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801d34e:	4325      	orrs	r5, r4
 801d350:	d052      	beq.n	801d3f8 <floor+0xe8>
 801d352:	4c2d      	ldr	r4, [pc, #180]	; (801d408 <floor+0xf8>)
 801d354:	2500      	movs	r5, #0
 801d356:	4621      	mov	r1, r4
 801d358:	4628      	mov	r0, r5
 801d35a:	e024      	b.n	801d3a6 <floor+0x96>
 801d35c:	4f2b      	ldr	r7, [pc, #172]	; (801d40c <floor+0xfc>)
 801d35e:	4137      	asrs	r7, r6
 801d360:	ea01 0307 	and.w	r3, r1, r7
 801d364:	4303      	orrs	r3, r0
 801d366:	d01e      	beq.n	801d3a6 <floor+0x96>
 801d368:	a325      	add	r3, pc, #148	; (adr r3, 801d400 <floor+0xf0>)
 801d36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d36e:	f7e8 ff6f 	bl	8006250 <__adddf3>
 801d372:	2200      	movs	r2, #0
 801d374:	2300      	movs	r3, #0
 801d376:	f7e9 fbb1 	bl	8006adc <__aeabi_dcmpgt>
 801d37a:	2800      	cmp	r0, #0
 801d37c:	d0eb      	beq.n	801d356 <floor+0x46>
 801d37e:	2c00      	cmp	r4, #0
 801d380:	bfbe      	ittt	lt
 801d382:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801d386:	4133      	asrlt	r3, r6
 801d388:	18e4      	addlt	r4, r4, r3
 801d38a:	ea24 0407 	bic.w	r4, r4, r7
 801d38e:	2500      	movs	r5, #0
 801d390:	e7e1      	b.n	801d356 <floor+0x46>
 801d392:	2e33      	cmp	r6, #51	; 0x33
 801d394:	dd0b      	ble.n	801d3ae <floor+0x9e>
 801d396:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d39a:	d104      	bne.n	801d3a6 <floor+0x96>
 801d39c:	ee10 2a10 	vmov	r2, s0
 801d3a0:	460b      	mov	r3, r1
 801d3a2:	f7e8 ff55 	bl	8006250 <__adddf3>
 801d3a6:	ec41 0b10 	vmov	d0, r0, r1
 801d3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3ae:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801d3b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d3b6:	40df      	lsrs	r7, r3
 801d3b8:	4238      	tst	r0, r7
 801d3ba:	d0f4      	beq.n	801d3a6 <floor+0x96>
 801d3bc:	a310      	add	r3, pc, #64	; (adr r3, 801d400 <floor+0xf0>)
 801d3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3c2:	f7e8 ff45 	bl	8006250 <__adddf3>
 801d3c6:	2200      	movs	r2, #0
 801d3c8:	2300      	movs	r3, #0
 801d3ca:	f7e9 fb87 	bl	8006adc <__aeabi_dcmpgt>
 801d3ce:	2800      	cmp	r0, #0
 801d3d0:	d0c1      	beq.n	801d356 <floor+0x46>
 801d3d2:	2c00      	cmp	r4, #0
 801d3d4:	da0a      	bge.n	801d3ec <floor+0xdc>
 801d3d6:	2e14      	cmp	r6, #20
 801d3d8:	d101      	bne.n	801d3de <floor+0xce>
 801d3da:	3401      	adds	r4, #1
 801d3dc:	e006      	b.n	801d3ec <floor+0xdc>
 801d3de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801d3e2:	2301      	movs	r3, #1
 801d3e4:	40b3      	lsls	r3, r6
 801d3e6:	441d      	add	r5, r3
 801d3e8:	45a8      	cmp	r8, r5
 801d3ea:	d8f6      	bhi.n	801d3da <floor+0xca>
 801d3ec:	ea25 0507 	bic.w	r5, r5, r7
 801d3f0:	e7b1      	b.n	801d356 <floor+0x46>
 801d3f2:	2500      	movs	r5, #0
 801d3f4:	462c      	mov	r4, r5
 801d3f6:	e7ae      	b.n	801d356 <floor+0x46>
 801d3f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801d3fc:	e7ab      	b.n	801d356 <floor+0x46>
 801d3fe:	bf00      	nop
 801d400:	8800759c 	.word	0x8800759c
 801d404:	7e37e43c 	.word	0x7e37e43c
 801d408:	bff00000 	.word	0xbff00000
 801d40c:	000fffff 	.word	0x000fffff

0801d410 <abort>:
 801d410:	b508      	push	{r3, lr}
 801d412:	2006      	movs	r0, #6
 801d414:	f001 fb76 	bl	801eb04 <raise>
 801d418:	2001      	movs	r0, #1
 801d41a:	f7f1 fb51 	bl	800eac0 <_exit>
	...

0801d420 <__assert_func>:
 801d420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d422:	4614      	mov	r4, r2
 801d424:	461a      	mov	r2, r3
 801d426:	4b09      	ldr	r3, [pc, #36]	; (801d44c <__assert_func+0x2c>)
 801d428:	681b      	ldr	r3, [r3, #0]
 801d42a:	4605      	mov	r5, r0
 801d42c:	68d8      	ldr	r0, [r3, #12]
 801d42e:	b14c      	cbz	r4, 801d444 <__assert_func+0x24>
 801d430:	4b07      	ldr	r3, [pc, #28]	; (801d450 <__assert_func+0x30>)
 801d432:	9100      	str	r1, [sp, #0]
 801d434:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d438:	4906      	ldr	r1, [pc, #24]	; (801d454 <__assert_func+0x34>)
 801d43a:	462b      	mov	r3, r5
 801d43c:	f000 fe40 	bl	801e0c0 <fiprintf>
 801d440:	f7ff ffe6 	bl	801d410 <abort>
 801d444:	4b04      	ldr	r3, [pc, #16]	; (801d458 <__assert_func+0x38>)
 801d446:	461c      	mov	r4, r3
 801d448:	e7f3      	b.n	801d432 <__assert_func+0x12>
 801d44a:	bf00      	nop
 801d44c:	200001f0 	.word	0x200001f0
 801d450:	08022a4c 	.word	0x08022a4c
 801d454:	08022a59 	.word	0x08022a59
 801d458:	08022a87 	.word	0x08022a87

0801d45c <__cvt>:
 801d45c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d460:	ec55 4b10 	vmov	r4, r5, d0
 801d464:	2d00      	cmp	r5, #0
 801d466:	460e      	mov	r6, r1
 801d468:	4619      	mov	r1, r3
 801d46a:	462b      	mov	r3, r5
 801d46c:	bfbb      	ittet	lt
 801d46e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801d472:	461d      	movlt	r5, r3
 801d474:	2300      	movge	r3, #0
 801d476:	232d      	movlt	r3, #45	; 0x2d
 801d478:	700b      	strb	r3, [r1, #0]
 801d47a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d47c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801d480:	4691      	mov	r9, r2
 801d482:	f023 0820 	bic.w	r8, r3, #32
 801d486:	bfbc      	itt	lt
 801d488:	4622      	movlt	r2, r4
 801d48a:	4614      	movlt	r4, r2
 801d48c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d490:	d005      	beq.n	801d49e <__cvt+0x42>
 801d492:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801d496:	d100      	bne.n	801d49a <__cvt+0x3e>
 801d498:	3601      	adds	r6, #1
 801d49a:	2102      	movs	r1, #2
 801d49c:	e000      	b.n	801d4a0 <__cvt+0x44>
 801d49e:	2103      	movs	r1, #3
 801d4a0:	ab03      	add	r3, sp, #12
 801d4a2:	9301      	str	r3, [sp, #4]
 801d4a4:	ab02      	add	r3, sp, #8
 801d4a6:	9300      	str	r3, [sp, #0]
 801d4a8:	ec45 4b10 	vmov	d0, r4, r5
 801d4ac:	4653      	mov	r3, sl
 801d4ae:	4632      	mov	r2, r6
 801d4b0:	f001 fc3a 	bl	801ed28 <_dtoa_r>
 801d4b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801d4b8:	4607      	mov	r7, r0
 801d4ba:	d102      	bne.n	801d4c2 <__cvt+0x66>
 801d4bc:	f019 0f01 	tst.w	r9, #1
 801d4c0:	d022      	beq.n	801d508 <__cvt+0xac>
 801d4c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d4c6:	eb07 0906 	add.w	r9, r7, r6
 801d4ca:	d110      	bne.n	801d4ee <__cvt+0x92>
 801d4cc:	783b      	ldrb	r3, [r7, #0]
 801d4ce:	2b30      	cmp	r3, #48	; 0x30
 801d4d0:	d10a      	bne.n	801d4e8 <__cvt+0x8c>
 801d4d2:	2200      	movs	r2, #0
 801d4d4:	2300      	movs	r3, #0
 801d4d6:	4620      	mov	r0, r4
 801d4d8:	4629      	mov	r1, r5
 801d4da:	f7e9 fad7 	bl	8006a8c <__aeabi_dcmpeq>
 801d4de:	b918      	cbnz	r0, 801d4e8 <__cvt+0x8c>
 801d4e0:	f1c6 0601 	rsb	r6, r6, #1
 801d4e4:	f8ca 6000 	str.w	r6, [sl]
 801d4e8:	f8da 3000 	ldr.w	r3, [sl]
 801d4ec:	4499      	add	r9, r3
 801d4ee:	2200      	movs	r2, #0
 801d4f0:	2300      	movs	r3, #0
 801d4f2:	4620      	mov	r0, r4
 801d4f4:	4629      	mov	r1, r5
 801d4f6:	f7e9 fac9 	bl	8006a8c <__aeabi_dcmpeq>
 801d4fa:	b108      	cbz	r0, 801d500 <__cvt+0xa4>
 801d4fc:	f8cd 900c 	str.w	r9, [sp, #12]
 801d500:	2230      	movs	r2, #48	; 0x30
 801d502:	9b03      	ldr	r3, [sp, #12]
 801d504:	454b      	cmp	r3, r9
 801d506:	d307      	bcc.n	801d518 <__cvt+0xbc>
 801d508:	9b03      	ldr	r3, [sp, #12]
 801d50a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d50c:	1bdb      	subs	r3, r3, r7
 801d50e:	4638      	mov	r0, r7
 801d510:	6013      	str	r3, [r2, #0]
 801d512:	b004      	add	sp, #16
 801d514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d518:	1c59      	adds	r1, r3, #1
 801d51a:	9103      	str	r1, [sp, #12]
 801d51c:	701a      	strb	r2, [r3, #0]
 801d51e:	e7f0      	b.n	801d502 <__cvt+0xa6>

0801d520 <__exponent>:
 801d520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d522:	4603      	mov	r3, r0
 801d524:	2900      	cmp	r1, #0
 801d526:	bfb8      	it	lt
 801d528:	4249      	neglt	r1, r1
 801d52a:	f803 2b02 	strb.w	r2, [r3], #2
 801d52e:	bfb4      	ite	lt
 801d530:	222d      	movlt	r2, #45	; 0x2d
 801d532:	222b      	movge	r2, #43	; 0x2b
 801d534:	2909      	cmp	r1, #9
 801d536:	7042      	strb	r2, [r0, #1]
 801d538:	dd2a      	ble.n	801d590 <__exponent+0x70>
 801d53a:	f10d 0207 	add.w	r2, sp, #7
 801d53e:	4617      	mov	r7, r2
 801d540:	260a      	movs	r6, #10
 801d542:	4694      	mov	ip, r2
 801d544:	fb91 f5f6 	sdiv	r5, r1, r6
 801d548:	fb06 1415 	mls	r4, r6, r5, r1
 801d54c:	3430      	adds	r4, #48	; 0x30
 801d54e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801d552:	460c      	mov	r4, r1
 801d554:	2c63      	cmp	r4, #99	; 0x63
 801d556:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801d55a:	4629      	mov	r1, r5
 801d55c:	dcf1      	bgt.n	801d542 <__exponent+0x22>
 801d55e:	3130      	adds	r1, #48	; 0x30
 801d560:	f1ac 0402 	sub.w	r4, ip, #2
 801d564:	f802 1c01 	strb.w	r1, [r2, #-1]
 801d568:	1c41      	adds	r1, r0, #1
 801d56a:	4622      	mov	r2, r4
 801d56c:	42ba      	cmp	r2, r7
 801d56e:	d30a      	bcc.n	801d586 <__exponent+0x66>
 801d570:	f10d 0209 	add.w	r2, sp, #9
 801d574:	eba2 020c 	sub.w	r2, r2, ip
 801d578:	42bc      	cmp	r4, r7
 801d57a:	bf88      	it	hi
 801d57c:	2200      	movhi	r2, #0
 801d57e:	4413      	add	r3, r2
 801d580:	1a18      	subs	r0, r3, r0
 801d582:	b003      	add	sp, #12
 801d584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d586:	f812 5b01 	ldrb.w	r5, [r2], #1
 801d58a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801d58e:	e7ed      	b.n	801d56c <__exponent+0x4c>
 801d590:	2330      	movs	r3, #48	; 0x30
 801d592:	3130      	adds	r1, #48	; 0x30
 801d594:	7083      	strb	r3, [r0, #2]
 801d596:	70c1      	strb	r1, [r0, #3]
 801d598:	1d03      	adds	r3, r0, #4
 801d59a:	e7f1      	b.n	801d580 <__exponent+0x60>

0801d59c <_printf_float>:
 801d59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5a0:	ed2d 8b02 	vpush	{d8}
 801d5a4:	b08d      	sub	sp, #52	; 0x34
 801d5a6:	460c      	mov	r4, r1
 801d5a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801d5ac:	4616      	mov	r6, r2
 801d5ae:	461f      	mov	r7, r3
 801d5b0:	4605      	mov	r5, r0
 801d5b2:	f001 fa25 	bl	801ea00 <_localeconv_r>
 801d5b6:	f8d0 a000 	ldr.w	sl, [r0]
 801d5ba:	4650      	mov	r0, sl
 801d5bc:	f7e8 fe30 	bl	8006220 <strlen>
 801d5c0:	2300      	movs	r3, #0
 801d5c2:	930a      	str	r3, [sp, #40]	; 0x28
 801d5c4:	6823      	ldr	r3, [r4, #0]
 801d5c6:	9305      	str	r3, [sp, #20]
 801d5c8:	f8d8 3000 	ldr.w	r3, [r8]
 801d5cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 801d5d0:	3307      	adds	r3, #7
 801d5d2:	f023 0307 	bic.w	r3, r3, #7
 801d5d6:	f103 0208 	add.w	r2, r3, #8
 801d5da:	f8c8 2000 	str.w	r2, [r8]
 801d5de:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d5e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d5e6:	9307      	str	r3, [sp, #28]
 801d5e8:	f8cd 8018 	str.w	r8, [sp, #24]
 801d5ec:	ee08 0a10 	vmov	s16, r0
 801d5f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801d5f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d5f8:	4b9e      	ldr	r3, [pc, #632]	; (801d874 <_printf_float+0x2d8>)
 801d5fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d5fe:	f7e9 fa77 	bl	8006af0 <__aeabi_dcmpun>
 801d602:	bb88      	cbnz	r0, 801d668 <_printf_float+0xcc>
 801d604:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d608:	4b9a      	ldr	r3, [pc, #616]	; (801d874 <_printf_float+0x2d8>)
 801d60a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d60e:	f7e9 fa51 	bl	8006ab4 <__aeabi_dcmple>
 801d612:	bb48      	cbnz	r0, 801d668 <_printf_float+0xcc>
 801d614:	2200      	movs	r2, #0
 801d616:	2300      	movs	r3, #0
 801d618:	4640      	mov	r0, r8
 801d61a:	4649      	mov	r1, r9
 801d61c:	f7e9 fa40 	bl	8006aa0 <__aeabi_dcmplt>
 801d620:	b110      	cbz	r0, 801d628 <_printf_float+0x8c>
 801d622:	232d      	movs	r3, #45	; 0x2d
 801d624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d628:	4a93      	ldr	r2, [pc, #588]	; (801d878 <_printf_float+0x2dc>)
 801d62a:	4b94      	ldr	r3, [pc, #592]	; (801d87c <_printf_float+0x2e0>)
 801d62c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801d630:	bf94      	ite	ls
 801d632:	4690      	movls	r8, r2
 801d634:	4698      	movhi	r8, r3
 801d636:	2303      	movs	r3, #3
 801d638:	6123      	str	r3, [r4, #16]
 801d63a:	9b05      	ldr	r3, [sp, #20]
 801d63c:	f023 0304 	bic.w	r3, r3, #4
 801d640:	6023      	str	r3, [r4, #0]
 801d642:	f04f 0900 	mov.w	r9, #0
 801d646:	9700      	str	r7, [sp, #0]
 801d648:	4633      	mov	r3, r6
 801d64a:	aa0b      	add	r2, sp, #44	; 0x2c
 801d64c:	4621      	mov	r1, r4
 801d64e:	4628      	mov	r0, r5
 801d650:	f000 fa8a 	bl	801db68 <_printf_common>
 801d654:	3001      	adds	r0, #1
 801d656:	f040 8090 	bne.w	801d77a <_printf_float+0x1de>
 801d65a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d65e:	b00d      	add	sp, #52	; 0x34
 801d660:	ecbd 8b02 	vpop	{d8}
 801d664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d668:	4642      	mov	r2, r8
 801d66a:	464b      	mov	r3, r9
 801d66c:	4640      	mov	r0, r8
 801d66e:	4649      	mov	r1, r9
 801d670:	f7e9 fa3e 	bl	8006af0 <__aeabi_dcmpun>
 801d674:	b140      	cbz	r0, 801d688 <_printf_float+0xec>
 801d676:	464b      	mov	r3, r9
 801d678:	2b00      	cmp	r3, #0
 801d67a:	bfbc      	itt	lt
 801d67c:	232d      	movlt	r3, #45	; 0x2d
 801d67e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801d682:	4a7f      	ldr	r2, [pc, #508]	; (801d880 <_printf_float+0x2e4>)
 801d684:	4b7f      	ldr	r3, [pc, #508]	; (801d884 <_printf_float+0x2e8>)
 801d686:	e7d1      	b.n	801d62c <_printf_float+0x90>
 801d688:	6863      	ldr	r3, [r4, #4]
 801d68a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801d68e:	9206      	str	r2, [sp, #24]
 801d690:	1c5a      	adds	r2, r3, #1
 801d692:	d13f      	bne.n	801d714 <_printf_float+0x178>
 801d694:	2306      	movs	r3, #6
 801d696:	6063      	str	r3, [r4, #4]
 801d698:	9b05      	ldr	r3, [sp, #20]
 801d69a:	6861      	ldr	r1, [r4, #4]
 801d69c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801d6a0:	2300      	movs	r3, #0
 801d6a2:	9303      	str	r3, [sp, #12]
 801d6a4:	ab0a      	add	r3, sp, #40	; 0x28
 801d6a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 801d6aa:	ab09      	add	r3, sp, #36	; 0x24
 801d6ac:	ec49 8b10 	vmov	d0, r8, r9
 801d6b0:	9300      	str	r3, [sp, #0]
 801d6b2:	6022      	str	r2, [r4, #0]
 801d6b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801d6b8:	4628      	mov	r0, r5
 801d6ba:	f7ff fecf 	bl	801d45c <__cvt>
 801d6be:	9b06      	ldr	r3, [sp, #24]
 801d6c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d6c2:	2b47      	cmp	r3, #71	; 0x47
 801d6c4:	4680      	mov	r8, r0
 801d6c6:	d108      	bne.n	801d6da <_printf_float+0x13e>
 801d6c8:	1cc8      	adds	r0, r1, #3
 801d6ca:	db02      	blt.n	801d6d2 <_printf_float+0x136>
 801d6cc:	6863      	ldr	r3, [r4, #4]
 801d6ce:	4299      	cmp	r1, r3
 801d6d0:	dd41      	ble.n	801d756 <_printf_float+0x1ba>
 801d6d2:	f1ab 0302 	sub.w	r3, fp, #2
 801d6d6:	fa5f fb83 	uxtb.w	fp, r3
 801d6da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d6de:	d820      	bhi.n	801d722 <_printf_float+0x186>
 801d6e0:	3901      	subs	r1, #1
 801d6e2:	465a      	mov	r2, fp
 801d6e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801d6e8:	9109      	str	r1, [sp, #36]	; 0x24
 801d6ea:	f7ff ff19 	bl	801d520 <__exponent>
 801d6ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d6f0:	1813      	adds	r3, r2, r0
 801d6f2:	2a01      	cmp	r2, #1
 801d6f4:	4681      	mov	r9, r0
 801d6f6:	6123      	str	r3, [r4, #16]
 801d6f8:	dc02      	bgt.n	801d700 <_printf_float+0x164>
 801d6fa:	6822      	ldr	r2, [r4, #0]
 801d6fc:	07d2      	lsls	r2, r2, #31
 801d6fe:	d501      	bpl.n	801d704 <_printf_float+0x168>
 801d700:	3301      	adds	r3, #1
 801d702:	6123      	str	r3, [r4, #16]
 801d704:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801d708:	2b00      	cmp	r3, #0
 801d70a:	d09c      	beq.n	801d646 <_printf_float+0xaa>
 801d70c:	232d      	movs	r3, #45	; 0x2d
 801d70e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d712:	e798      	b.n	801d646 <_printf_float+0xaa>
 801d714:	9a06      	ldr	r2, [sp, #24]
 801d716:	2a47      	cmp	r2, #71	; 0x47
 801d718:	d1be      	bne.n	801d698 <_printf_float+0xfc>
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d1bc      	bne.n	801d698 <_printf_float+0xfc>
 801d71e:	2301      	movs	r3, #1
 801d720:	e7b9      	b.n	801d696 <_printf_float+0xfa>
 801d722:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801d726:	d118      	bne.n	801d75a <_printf_float+0x1be>
 801d728:	2900      	cmp	r1, #0
 801d72a:	6863      	ldr	r3, [r4, #4]
 801d72c:	dd0b      	ble.n	801d746 <_printf_float+0x1aa>
 801d72e:	6121      	str	r1, [r4, #16]
 801d730:	b913      	cbnz	r3, 801d738 <_printf_float+0x19c>
 801d732:	6822      	ldr	r2, [r4, #0]
 801d734:	07d0      	lsls	r0, r2, #31
 801d736:	d502      	bpl.n	801d73e <_printf_float+0x1a2>
 801d738:	3301      	adds	r3, #1
 801d73a:	440b      	add	r3, r1
 801d73c:	6123      	str	r3, [r4, #16]
 801d73e:	65a1      	str	r1, [r4, #88]	; 0x58
 801d740:	f04f 0900 	mov.w	r9, #0
 801d744:	e7de      	b.n	801d704 <_printf_float+0x168>
 801d746:	b913      	cbnz	r3, 801d74e <_printf_float+0x1b2>
 801d748:	6822      	ldr	r2, [r4, #0]
 801d74a:	07d2      	lsls	r2, r2, #31
 801d74c:	d501      	bpl.n	801d752 <_printf_float+0x1b6>
 801d74e:	3302      	adds	r3, #2
 801d750:	e7f4      	b.n	801d73c <_printf_float+0x1a0>
 801d752:	2301      	movs	r3, #1
 801d754:	e7f2      	b.n	801d73c <_printf_float+0x1a0>
 801d756:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801d75a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d75c:	4299      	cmp	r1, r3
 801d75e:	db05      	blt.n	801d76c <_printf_float+0x1d0>
 801d760:	6823      	ldr	r3, [r4, #0]
 801d762:	6121      	str	r1, [r4, #16]
 801d764:	07d8      	lsls	r0, r3, #31
 801d766:	d5ea      	bpl.n	801d73e <_printf_float+0x1a2>
 801d768:	1c4b      	adds	r3, r1, #1
 801d76a:	e7e7      	b.n	801d73c <_printf_float+0x1a0>
 801d76c:	2900      	cmp	r1, #0
 801d76e:	bfd4      	ite	le
 801d770:	f1c1 0202 	rsble	r2, r1, #2
 801d774:	2201      	movgt	r2, #1
 801d776:	4413      	add	r3, r2
 801d778:	e7e0      	b.n	801d73c <_printf_float+0x1a0>
 801d77a:	6823      	ldr	r3, [r4, #0]
 801d77c:	055a      	lsls	r2, r3, #21
 801d77e:	d407      	bmi.n	801d790 <_printf_float+0x1f4>
 801d780:	6923      	ldr	r3, [r4, #16]
 801d782:	4642      	mov	r2, r8
 801d784:	4631      	mov	r1, r6
 801d786:	4628      	mov	r0, r5
 801d788:	47b8      	blx	r7
 801d78a:	3001      	adds	r0, #1
 801d78c:	d12c      	bne.n	801d7e8 <_printf_float+0x24c>
 801d78e:	e764      	b.n	801d65a <_printf_float+0xbe>
 801d790:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d794:	f240 80e0 	bls.w	801d958 <_printf_float+0x3bc>
 801d798:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d79c:	2200      	movs	r2, #0
 801d79e:	2300      	movs	r3, #0
 801d7a0:	f7e9 f974 	bl	8006a8c <__aeabi_dcmpeq>
 801d7a4:	2800      	cmp	r0, #0
 801d7a6:	d034      	beq.n	801d812 <_printf_float+0x276>
 801d7a8:	4a37      	ldr	r2, [pc, #220]	; (801d888 <_printf_float+0x2ec>)
 801d7aa:	2301      	movs	r3, #1
 801d7ac:	4631      	mov	r1, r6
 801d7ae:	4628      	mov	r0, r5
 801d7b0:	47b8      	blx	r7
 801d7b2:	3001      	adds	r0, #1
 801d7b4:	f43f af51 	beq.w	801d65a <_printf_float+0xbe>
 801d7b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d7bc:	429a      	cmp	r2, r3
 801d7be:	db02      	blt.n	801d7c6 <_printf_float+0x22a>
 801d7c0:	6823      	ldr	r3, [r4, #0]
 801d7c2:	07d8      	lsls	r0, r3, #31
 801d7c4:	d510      	bpl.n	801d7e8 <_printf_float+0x24c>
 801d7c6:	ee18 3a10 	vmov	r3, s16
 801d7ca:	4652      	mov	r2, sl
 801d7cc:	4631      	mov	r1, r6
 801d7ce:	4628      	mov	r0, r5
 801d7d0:	47b8      	blx	r7
 801d7d2:	3001      	adds	r0, #1
 801d7d4:	f43f af41 	beq.w	801d65a <_printf_float+0xbe>
 801d7d8:	f04f 0800 	mov.w	r8, #0
 801d7dc:	f104 091a 	add.w	r9, r4, #26
 801d7e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d7e2:	3b01      	subs	r3, #1
 801d7e4:	4543      	cmp	r3, r8
 801d7e6:	dc09      	bgt.n	801d7fc <_printf_float+0x260>
 801d7e8:	6823      	ldr	r3, [r4, #0]
 801d7ea:	079b      	lsls	r3, r3, #30
 801d7ec:	f100 8107 	bmi.w	801d9fe <_printf_float+0x462>
 801d7f0:	68e0      	ldr	r0, [r4, #12]
 801d7f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d7f4:	4298      	cmp	r0, r3
 801d7f6:	bfb8      	it	lt
 801d7f8:	4618      	movlt	r0, r3
 801d7fa:	e730      	b.n	801d65e <_printf_float+0xc2>
 801d7fc:	2301      	movs	r3, #1
 801d7fe:	464a      	mov	r2, r9
 801d800:	4631      	mov	r1, r6
 801d802:	4628      	mov	r0, r5
 801d804:	47b8      	blx	r7
 801d806:	3001      	adds	r0, #1
 801d808:	f43f af27 	beq.w	801d65a <_printf_float+0xbe>
 801d80c:	f108 0801 	add.w	r8, r8, #1
 801d810:	e7e6      	b.n	801d7e0 <_printf_float+0x244>
 801d812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d814:	2b00      	cmp	r3, #0
 801d816:	dc39      	bgt.n	801d88c <_printf_float+0x2f0>
 801d818:	4a1b      	ldr	r2, [pc, #108]	; (801d888 <_printf_float+0x2ec>)
 801d81a:	2301      	movs	r3, #1
 801d81c:	4631      	mov	r1, r6
 801d81e:	4628      	mov	r0, r5
 801d820:	47b8      	blx	r7
 801d822:	3001      	adds	r0, #1
 801d824:	f43f af19 	beq.w	801d65a <_printf_float+0xbe>
 801d828:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801d82c:	4313      	orrs	r3, r2
 801d82e:	d102      	bne.n	801d836 <_printf_float+0x29a>
 801d830:	6823      	ldr	r3, [r4, #0]
 801d832:	07d9      	lsls	r1, r3, #31
 801d834:	d5d8      	bpl.n	801d7e8 <_printf_float+0x24c>
 801d836:	ee18 3a10 	vmov	r3, s16
 801d83a:	4652      	mov	r2, sl
 801d83c:	4631      	mov	r1, r6
 801d83e:	4628      	mov	r0, r5
 801d840:	47b8      	blx	r7
 801d842:	3001      	adds	r0, #1
 801d844:	f43f af09 	beq.w	801d65a <_printf_float+0xbe>
 801d848:	f04f 0900 	mov.w	r9, #0
 801d84c:	f104 0a1a 	add.w	sl, r4, #26
 801d850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d852:	425b      	negs	r3, r3
 801d854:	454b      	cmp	r3, r9
 801d856:	dc01      	bgt.n	801d85c <_printf_float+0x2c0>
 801d858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d85a:	e792      	b.n	801d782 <_printf_float+0x1e6>
 801d85c:	2301      	movs	r3, #1
 801d85e:	4652      	mov	r2, sl
 801d860:	4631      	mov	r1, r6
 801d862:	4628      	mov	r0, r5
 801d864:	47b8      	blx	r7
 801d866:	3001      	adds	r0, #1
 801d868:	f43f aef7 	beq.w	801d65a <_printf_float+0xbe>
 801d86c:	f109 0901 	add.w	r9, r9, #1
 801d870:	e7ee      	b.n	801d850 <_printf_float+0x2b4>
 801d872:	bf00      	nop
 801d874:	7fefffff 	.word	0x7fefffff
 801d878:	08022a88 	.word	0x08022a88
 801d87c:	08022a8c 	.word	0x08022a8c
 801d880:	08022a90 	.word	0x08022a90
 801d884:	08022a94 	.word	0x08022a94
 801d888:	08022a98 	.word	0x08022a98
 801d88c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d88e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d890:	429a      	cmp	r2, r3
 801d892:	bfa8      	it	ge
 801d894:	461a      	movge	r2, r3
 801d896:	2a00      	cmp	r2, #0
 801d898:	4691      	mov	r9, r2
 801d89a:	dc37      	bgt.n	801d90c <_printf_float+0x370>
 801d89c:	f04f 0b00 	mov.w	fp, #0
 801d8a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d8a4:	f104 021a 	add.w	r2, r4, #26
 801d8a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d8aa:	9305      	str	r3, [sp, #20]
 801d8ac:	eba3 0309 	sub.w	r3, r3, r9
 801d8b0:	455b      	cmp	r3, fp
 801d8b2:	dc33      	bgt.n	801d91c <_printf_float+0x380>
 801d8b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d8b8:	429a      	cmp	r2, r3
 801d8ba:	db3b      	blt.n	801d934 <_printf_float+0x398>
 801d8bc:	6823      	ldr	r3, [r4, #0]
 801d8be:	07da      	lsls	r2, r3, #31
 801d8c0:	d438      	bmi.n	801d934 <_printf_float+0x398>
 801d8c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801d8c6:	eba2 0903 	sub.w	r9, r2, r3
 801d8ca:	9b05      	ldr	r3, [sp, #20]
 801d8cc:	1ad2      	subs	r2, r2, r3
 801d8ce:	4591      	cmp	r9, r2
 801d8d0:	bfa8      	it	ge
 801d8d2:	4691      	movge	r9, r2
 801d8d4:	f1b9 0f00 	cmp.w	r9, #0
 801d8d8:	dc35      	bgt.n	801d946 <_printf_float+0x3aa>
 801d8da:	f04f 0800 	mov.w	r8, #0
 801d8de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d8e2:	f104 0a1a 	add.w	sl, r4, #26
 801d8e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d8ea:	1a9b      	subs	r3, r3, r2
 801d8ec:	eba3 0309 	sub.w	r3, r3, r9
 801d8f0:	4543      	cmp	r3, r8
 801d8f2:	f77f af79 	ble.w	801d7e8 <_printf_float+0x24c>
 801d8f6:	2301      	movs	r3, #1
 801d8f8:	4652      	mov	r2, sl
 801d8fa:	4631      	mov	r1, r6
 801d8fc:	4628      	mov	r0, r5
 801d8fe:	47b8      	blx	r7
 801d900:	3001      	adds	r0, #1
 801d902:	f43f aeaa 	beq.w	801d65a <_printf_float+0xbe>
 801d906:	f108 0801 	add.w	r8, r8, #1
 801d90a:	e7ec      	b.n	801d8e6 <_printf_float+0x34a>
 801d90c:	4613      	mov	r3, r2
 801d90e:	4631      	mov	r1, r6
 801d910:	4642      	mov	r2, r8
 801d912:	4628      	mov	r0, r5
 801d914:	47b8      	blx	r7
 801d916:	3001      	adds	r0, #1
 801d918:	d1c0      	bne.n	801d89c <_printf_float+0x300>
 801d91a:	e69e      	b.n	801d65a <_printf_float+0xbe>
 801d91c:	2301      	movs	r3, #1
 801d91e:	4631      	mov	r1, r6
 801d920:	4628      	mov	r0, r5
 801d922:	9205      	str	r2, [sp, #20]
 801d924:	47b8      	blx	r7
 801d926:	3001      	adds	r0, #1
 801d928:	f43f ae97 	beq.w	801d65a <_printf_float+0xbe>
 801d92c:	9a05      	ldr	r2, [sp, #20]
 801d92e:	f10b 0b01 	add.w	fp, fp, #1
 801d932:	e7b9      	b.n	801d8a8 <_printf_float+0x30c>
 801d934:	ee18 3a10 	vmov	r3, s16
 801d938:	4652      	mov	r2, sl
 801d93a:	4631      	mov	r1, r6
 801d93c:	4628      	mov	r0, r5
 801d93e:	47b8      	blx	r7
 801d940:	3001      	adds	r0, #1
 801d942:	d1be      	bne.n	801d8c2 <_printf_float+0x326>
 801d944:	e689      	b.n	801d65a <_printf_float+0xbe>
 801d946:	9a05      	ldr	r2, [sp, #20]
 801d948:	464b      	mov	r3, r9
 801d94a:	4442      	add	r2, r8
 801d94c:	4631      	mov	r1, r6
 801d94e:	4628      	mov	r0, r5
 801d950:	47b8      	blx	r7
 801d952:	3001      	adds	r0, #1
 801d954:	d1c1      	bne.n	801d8da <_printf_float+0x33e>
 801d956:	e680      	b.n	801d65a <_printf_float+0xbe>
 801d958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d95a:	2a01      	cmp	r2, #1
 801d95c:	dc01      	bgt.n	801d962 <_printf_float+0x3c6>
 801d95e:	07db      	lsls	r3, r3, #31
 801d960:	d53a      	bpl.n	801d9d8 <_printf_float+0x43c>
 801d962:	2301      	movs	r3, #1
 801d964:	4642      	mov	r2, r8
 801d966:	4631      	mov	r1, r6
 801d968:	4628      	mov	r0, r5
 801d96a:	47b8      	blx	r7
 801d96c:	3001      	adds	r0, #1
 801d96e:	f43f ae74 	beq.w	801d65a <_printf_float+0xbe>
 801d972:	ee18 3a10 	vmov	r3, s16
 801d976:	4652      	mov	r2, sl
 801d978:	4631      	mov	r1, r6
 801d97a:	4628      	mov	r0, r5
 801d97c:	47b8      	blx	r7
 801d97e:	3001      	adds	r0, #1
 801d980:	f43f ae6b 	beq.w	801d65a <_printf_float+0xbe>
 801d984:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d988:	2200      	movs	r2, #0
 801d98a:	2300      	movs	r3, #0
 801d98c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801d990:	f7e9 f87c 	bl	8006a8c <__aeabi_dcmpeq>
 801d994:	b9d8      	cbnz	r0, 801d9ce <_printf_float+0x432>
 801d996:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801d99a:	f108 0201 	add.w	r2, r8, #1
 801d99e:	4631      	mov	r1, r6
 801d9a0:	4628      	mov	r0, r5
 801d9a2:	47b8      	blx	r7
 801d9a4:	3001      	adds	r0, #1
 801d9a6:	d10e      	bne.n	801d9c6 <_printf_float+0x42a>
 801d9a8:	e657      	b.n	801d65a <_printf_float+0xbe>
 801d9aa:	2301      	movs	r3, #1
 801d9ac:	4652      	mov	r2, sl
 801d9ae:	4631      	mov	r1, r6
 801d9b0:	4628      	mov	r0, r5
 801d9b2:	47b8      	blx	r7
 801d9b4:	3001      	adds	r0, #1
 801d9b6:	f43f ae50 	beq.w	801d65a <_printf_float+0xbe>
 801d9ba:	f108 0801 	add.w	r8, r8, #1
 801d9be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d9c0:	3b01      	subs	r3, #1
 801d9c2:	4543      	cmp	r3, r8
 801d9c4:	dcf1      	bgt.n	801d9aa <_printf_float+0x40e>
 801d9c6:	464b      	mov	r3, r9
 801d9c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801d9cc:	e6da      	b.n	801d784 <_printf_float+0x1e8>
 801d9ce:	f04f 0800 	mov.w	r8, #0
 801d9d2:	f104 0a1a 	add.w	sl, r4, #26
 801d9d6:	e7f2      	b.n	801d9be <_printf_float+0x422>
 801d9d8:	2301      	movs	r3, #1
 801d9da:	4642      	mov	r2, r8
 801d9dc:	e7df      	b.n	801d99e <_printf_float+0x402>
 801d9de:	2301      	movs	r3, #1
 801d9e0:	464a      	mov	r2, r9
 801d9e2:	4631      	mov	r1, r6
 801d9e4:	4628      	mov	r0, r5
 801d9e6:	47b8      	blx	r7
 801d9e8:	3001      	adds	r0, #1
 801d9ea:	f43f ae36 	beq.w	801d65a <_printf_float+0xbe>
 801d9ee:	f108 0801 	add.w	r8, r8, #1
 801d9f2:	68e3      	ldr	r3, [r4, #12]
 801d9f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d9f6:	1a5b      	subs	r3, r3, r1
 801d9f8:	4543      	cmp	r3, r8
 801d9fa:	dcf0      	bgt.n	801d9de <_printf_float+0x442>
 801d9fc:	e6f8      	b.n	801d7f0 <_printf_float+0x254>
 801d9fe:	f04f 0800 	mov.w	r8, #0
 801da02:	f104 0919 	add.w	r9, r4, #25
 801da06:	e7f4      	b.n	801d9f2 <_printf_float+0x456>

0801da08 <malloc>:
 801da08:	4b02      	ldr	r3, [pc, #8]	; (801da14 <malloc+0xc>)
 801da0a:	4601      	mov	r1, r0
 801da0c:	6818      	ldr	r0, [r3, #0]
 801da0e:	f000 b82b 	b.w	801da68 <_malloc_r>
 801da12:	bf00      	nop
 801da14:	200001f0 	.word	0x200001f0

0801da18 <free>:
 801da18:	4b02      	ldr	r3, [pc, #8]	; (801da24 <free+0xc>)
 801da1a:	4601      	mov	r1, r0
 801da1c:	6818      	ldr	r0, [r3, #0]
 801da1e:	f001 bf75 	b.w	801f90c <_free_r>
 801da22:	bf00      	nop
 801da24:	200001f0 	.word	0x200001f0

0801da28 <sbrk_aligned>:
 801da28:	b570      	push	{r4, r5, r6, lr}
 801da2a:	4e0e      	ldr	r6, [pc, #56]	; (801da64 <sbrk_aligned+0x3c>)
 801da2c:	460c      	mov	r4, r1
 801da2e:	6831      	ldr	r1, [r6, #0]
 801da30:	4605      	mov	r5, r0
 801da32:	b911      	cbnz	r1, 801da3a <sbrk_aligned+0x12>
 801da34:	f001 f882 	bl	801eb3c <_sbrk_r>
 801da38:	6030      	str	r0, [r6, #0]
 801da3a:	4621      	mov	r1, r4
 801da3c:	4628      	mov	r0, r5
 801da3e:	f001 f87d 	bl	801eb3c <_sbrk_r>
 801da42:	1c43      	adds	r3, r0, #1
 801da44:	d00a      	beq.n	801da5c <sbrk_aligned+0x34>
 801da46:	1cc4      	adds	r4, r0, #3
 801da48:	f024 0403 	bic.w	r4, r4, #3
 801da4c:	42a0      	cmp	r0, r4
 801da4e:	d007      	beq.n	801da60 <sbrk_aligned+0x38>
 801da50:	1a21      	subs	r1, r4, r0
 801da52:	4628      	mov	r0, r5
 801da54:	f001 f872 	bl	801eb3c <_sbrk_r>
 801da58:	3001      	adds	r0, #1
 801da5a:	d101      	bne.n	801da60 <sbrk_aligned+0x38>
 801da5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801da60:	4620      	mov	r0, r4
 801da62:	bd70      	pop	{r4, r5, r6, pc}
 801da64:	20005a18 	.word	0x20005a18

0801da68 <_malloc_r>:
 801da68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801da6c:	1ccd      	adds	r5, r1, #3
 801da6e:	f025 0503 	bic.w	r5, r5, #3
 801da72:	3508      	adds	r5, #8
 801da74:	2d0c      	cmp	r5, #12
 801da76:	bf38      	it	cc
 801da78:	250c      	movcc	r5, #12
 801da7a:	2d00      	cmp	r5, #0
 801da7c:	4607      	mov	r7, r0
 801da7e:	db01      	blt.n	801da84 <_malloc_r+0x1c>
 801da80:	42a9      	cmp	r1, r5
 801da82:	d905      	bls.n	801da90 <_malloc_r+0x28>
 801da84:	230c      	movs	r3, #12
 801da86:	603b      	str	r3, [r7, #0]
 801da88:	2600      	movs	r6, #0
 801da8a:	4630      	mov	r0, r6
 801da8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801da90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801db64 <_malloc_r+0xfc>
 801da94:	f000 f9f8 	bl	801de88 <__malloc_lock>
 801da98:	f8d8 3000 	ldr.w	r3, [r8]
 801da9c:	461c      	mov	r4, r3
 801da9e:	bb5c      	cbnz	r4, 801daf8 <_malloc_r+0x90>
 801daa0:	4629      	mov	r1, r5
 801daa2:	4638      	mov	r0, r7
 801daa4:	f7ff ffc0 	bl	801da28 <sbrk_aligned>
 801daa8:	1c43      	adds	r3, r0, #1
 801daaa:	4604      	mov	r4, r0
 801daac:	d155      	bne.n	801db5a <_malloc_r+0xf2>
 801daae:	f8d8 4000 	ldr.w	r4, [r8]
 801dab2:	4626      	mov	r6, r4
 801dab4:	2e00      	cmp	r6, #0
 801dab6:	d145      	bne.n	801db44 <_malloc_r+0xdc>
 801dab8:	2c00      	cmp	r4, #0
 801daba:	d048      	beq.n	801db4e <_malloc_r+0xe6>
 801dabc:	6823      	ldr	r3, [r4, #0]
 801dabe:	4631      	mov	r1, r6
 801dac0:	4638      	mov	r0, r7
 801dac2:	eb04 0903 	add.w	r9, r4, r3
 801dac6:	f001 f839 	bl	801eb3c <_sbrk_r>
 801daca:	4581      	cmp	r9, r0
 801dacc:	d13f      	bne.n	801db4e <_malloc_r+0xe6>
 801dace:	6821      	ldr	r1, [r4, #0]
 801dad0:	1a6d      	subs	r5, r5, r1
 801dad2:	4629      	mov	r1, r5
 801dad4:	4638      	mov	r0, r7
 801dad6:	f7ff ffa7 	bl	801da28 <sbrk_aligned>
 801dada:	3001      	adds	r0, #1
 801dadc:	d037      	beq.n	801db4e <_malloc_r+0xe6>
 801dade:	6823      	ldr	r3, [r4, #0]
 801dae0:	442b      	add	r3, r5
 801dae2:	6023      	str	r3, [r4, #0]
 801dae4:	f8d8 3000 	ldr.w	r3, [r8]
 801dae8:	2b00      	cmp	r3, #0
 801daea:	d038      	beq.n	801db5e <_malloc_r+0xf6>
 801daec:	685a      	ldr	r2, [r3, #4]
 801daee:	42a2      	cmp	r2, r4
 801daf0:	d12b      	bne.n	801db4a <_malloc_r+0xe2>
 801daf2:	2200      	movs	r2, #0
 801daf4:	605a      	str	r2, [r3, #4]
 801daf6:	e00f      	b.n	801db18 <_malloc_r+0xb0>
 801daf8:	6822      	ldr	r2, [r4, #0]
 801dafa:	1b52      	subs	r2, r2, r5
 801dafc:	d41f      	bmi.n	801db3e <_malloc_r+0xd6>
 801dafe:	2a0b      	cmp	r2, #11
 801db00:	d917      	bls.n	801db32 <_malloc_r+0xca>
 801db02:	1961      	adds	r1, r4, r5
 801db04:	42a3      	cmp	r3, r4
 801db06:	6025      	str	r5, [r4, #0]
 801db08:	bf18      	it	ne
 801db0a:	6059      	strne	r1, [r3, #4]
 801db0c:	6863      	ldr	r3, [r4, #4]
 801db0e:	bf08      	it	eq
 801db10:	f8c8 1000 	streq.w	r1, [r8]
 801db14:	5162      	str	r2, [r4, r5]
 801db16:	604b      	str	r3, [r1, #4]
 801db18:	4638      	mov	r0, r7
 801db1a:	f104 060b 	add.w	r6, r4, #11
 801db1e:	f000 f9b9 	bl	801de94 <__malloc_unlock>
 801db22:	f026 0607 	bic.w	r6, r6, #7
 801db26:	1d23      	adds	r3, r4, #4
 801db28:	1af2      	subs	r2, r6, r3
 801db2a:	d0ae      	beq.n	801da8a <_malloc_r+0x22>
 801db2c:	1b9b      	subs	r3, r3, r6
 801db2e:	50a3      	str	r3, [r4, r2]
 801db30:	e7ab      	b.n	801da8a <_malloc_r+0x22>
 801db32:	42a3      	cmp	r3, r4
 801db34:	6862      	ldr	r2, [r4, #4]
 801db36:	d1dd      	bne.n	801daf4 <_malloc_r+0x8c>
 801db38:	f8c8 2000 	str.w	r2, [r8]
 801db3c:	e7ec      	b.n	801db18 <_malloc_r+0xb0>
 801db3e:	4623      	mov	r3, r4
 801db40:	6864      	ldr	r4, [r4, #4]
 801db42:	e7ac      	b.n	801da9e <_malloc_r+0x36>
 801db44:	4634      	mov	r4, r6
 801db46:	6876      	ldr	r6, [r6, #4]
 801db48:	e7b4      	b.n	801dab4 <_malloc_r+0x4c>
 801db4a:	4613      	mov	r3, r2
 801db4c:	e7cc      	b.n	801dae8 <_malloc_r+0x80>
 801db4e:	230c      	movs	r3, #12
 801db50:	603b      	str	r3, [r7, #0]
 801db52:	4638      	mov	r0, r7
 801db54:	f000 f99e 	bl	801de94 <__malloc_unlock>
 801db58:	e797      	b.n	801da8a <_malloc_r+0x22>
 801db5a:	6025      	str	r5, [r4, #0]
 801db5c:	e7dc      	b.n	801db18 <_malloc_r+0xb0>
 801db5e:	605b      	str	r3, [r3, #4]
 801db60:	deff      	udf	#255	; 0xff
 801db62:	bf00      	nop
 801db64:	20005a14 	.word	0x20005a14

0801db68 <_printf_common>:
 801db68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801db6c:	4616      	mov	r6, r2
 801db6e:	4699      	mov	r9, r3
 801db70:	688a      	ldr	r2, [r1, #8]
 801db72:	690b      	ldr	r3, [r1, #16]
 801db74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801db78:	4293      	cmp	r3, r2
 801db7a:	bfb8      	it	lt
 801db7c:	4613      	movlt	r3, r2
 801db7e:	6033      	str	r3, [r6, #0]
 801db80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801db84:	4607      	mov	r7, r0
 801db86:	460c      	mov	r4, r1
 801db88:	b10a      	cbz	r2, 801db8e <_printf_common+0x26>
 801db8a:	3301      	adds	r3, #1
 801db8c:	6033      	str	r3, [r6, #0]
 801db8e:	6823      	ldr	r3, [r4, #0]
 801db90:	0699      	lsls	r1, r3, #26
 801db92:	bf42      	ittt	mi
 801db94:	6833      	ldrmi	r3, [r6, #0]
 801db96:	3302      	addmi	r3, #2
 801db98:	6033      	strmi	r3, [r6, #0]
 801db9a:	6825      	ldr	r5, [r4, #0]
 801db9c:	f015 0506 	ands.w	r5, r5, #6
 801dba0:	d106      	bne.n	801dbb0 <_printf_common+0x48>
 801dba2:	f104 0a19 	add.w	sl, r4, #25
 801dba6:	68e3      	ldr	r3, [r4, #12]
 801dba8:	6832      	ldr	r2, [r6, #0]
 801dbaa:	1a9b      	subs	r3, r3, r2
 801dbac:	42ab      	cmp	r3, r5
 801dbae:	dc26      	bgt.n	801dbfe <_printf_common+0x96>
 801dbb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801dbb4:	1e13      	subs	r3, r2, #0
 801dbb6:	6822      	ldr	r2, [r4, #0]
 801dbb8:	bf18      	it	ne
 801dbba:	2301      	movne	r3, #1
 801dbbc:	0692      	lsls	r2, r2, #26
 801dbbe:	d42b      	bmi.n	801dc18 <_printf_common+0xb0>
 801dbc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801dbc4:	4649      	mov	r1, r9
 801dbc6:	4638      	mov	r0, r7
 801dbc8:	47c0      	blx	r8
 801dbca:	3001      	adds	r0, #1
 801dbcc:	d01e      	beq.n	801dc0c <_printf_common+0xa4>
 801dbce:	6823      	ldr	r3, [r4, #0]
 801dbd0:	6922      	ldr	r2, [r4, #16]
 801dbd2:	f003 0306 	and.w	r3, r3, #6
 801dbd6:	2b04      	cmp	r3, #4
 801dbd8:	bf02      	ittt	eq
 801dbda:	68e5      	ldreq	r5, [r4, #12]
 801dbdc:	6833      	ldreq	r3, [r6, #0]
 801dbde:	1aed      	subeq	r5, r5, r3
 801dbe0:	68a3      	ldr	r3, [r4, #8]
 801dbe2:	bf0c      	ite	eq
 801dbe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dbe8:	2500      	movne	r5, #0
 801dbea:	4293      	cmp	r3, r2
 801dbec:	bfc4      	itt	gt
 801dbee:	1a9b      	subgt	r3, r3, r2
 801dbf0:	18ed      	addgt	r5, r5, r3
 801dbf2:	2600      	movs	r6, #0
 801dbf4:	341a      	adds	r4, #26
 801dbf6:	42b5      	cmp	r5, r6
 801dbf8:	d11a      	bne.n	801dc30 <_printf_common+0xc8>
 801dbfa:	2000      	movs	r0, #0
 801dbfc:	e008      	b.n	801dc10 <_printf_common+0xa8>
 801dbfe:	2301      	movs	r3, #1
 801dc00:	4652      	mov	r2, sl
 801dc02:	4649      	mov	r1, r9
 801dc04:	4638      	mov	r0, r7
 801dc06:	47c0      	blx	r8
 801dc08:	3001      	adds	r0, #1
 801dc0a:	d103      	bne.n	801dc14 <_printf_common+0xac>
 801dc0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc14:	3501      	adds	r5, #1
 801dc16:	e7c6      	b.n	801dba6 <_printf_common+0x3e>
 801dc18:	18e1      	adds	r1, r4, r3
 801dc1a:	1c5a      	adds	r2, r3, #1
 801dc1c:	2030      	movs	r0, #48	; 0x30
 801dc1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801dc22:	4422      	add	r2, r4
 801dc24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801dc28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801dc2c:	3302      	adds	r3, #2
 801dc2e:	e7c7      	b.n	801dbc0 <_printf_common+0x58>
 801dc30:	2301      	movs	r3, #1
 801dc32:	4622      	mov	r2, r4
 801dc34:	4649      	mov	r1, r9
 801dc36:	4638      	mov	r0, r7
 801dc38:	47c0      	blx	r8
 801dc3a:	3001      	adds	r0, #1
 801dc3c:	d0e6      	beq.n	801dc0c <_printf_common+0xa4>
 801dc3e:	3601      	adds	r6, #1
 801dc40:	e7d9      	b.n	801dbf6 <_printf_common+0x8e>
	...

0801dc44 <_printf_i>:
 801dc44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dc48:	7e0f      	ldrb	r7, [r1, #24]
 801dc4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801dc4c:	2f78      	cmp	r7, #120	; 0x78
 801dc4e:	4691      	mov	r9, r2
 801dc50:	4680      	mov	r8, r0
 801dc52:	460c      	mov	r4, r1
 801dc54:	469a      	mov	sl, r3
 801dc56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801dc5a:	d807      	bhi.n	801dc6c <_printf_i+0x28>
 801dc5c:	2f62      	cmp	r7, #98	; 0x62
 801dc5e:	d80a      	bhi.n	801dc76 <_printf_i+0x32>
 801dc60:	2f00      	cmp	r7, #0
 801dc62:	f000 80d4 	beq.w	801de0e <_printf_i+0x1ca>
 801dc66:	2f58      	cmp	r7, #88	; 0x58
 801dc68:	f000 80c0 	beq.w	801ddec <_printf_i+0x1a8>
 801dc6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dc70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801dc74:	e03a      	b.n	801dcec <_printf_i+0xa8>
 801dc76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801dc7a:	2b15      	cmp	r3, #21
 801dc7c:	d8f6      	bhi.n	801dc6c <_printf_i+0x28>
 801dc7e:	a101      	add	r1, pc, #4	; (adr r1, 801dc84 <_printf_i+0x40>)
 801dc80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801dc84:	0801dcdd 	.word	0x0801dcdd
 801dc88:	0801dcf1 	.word	0x0801dcf1
 801dc8c:	0801dc6d 	.word	0x0801dc6d
 801dc90:	0801dc6d 	.word	0x0801dc6d
 801dc94:	0801dc6d 	.word	0x0801dc6d
 801dc98:	0801dc6d 	.word	0x0801dc6d
 801dc9c:	0801dcf1 	.word	0x0801dcf1
 801dca0:	0801dc6d 	.word	0x0801dc6d
 801dca4:	0801dc6d 	.word	0x0801dc6d
 801dca8:	0801dc6d 	.word	0x0801dc6d
 801dcac:	0801dc6d 	.word	0x0801dc6d
 801dcb0:	0801ddf5 	.word	0x0801ddf5
 801dcb4:	0801dd1d 	.word	0x0801dd1d
 801dcb8:	0801ddaf 	.word	0x0801ddaf
 801dcbc:	0801dc6d 	.word	0x0801dc6d
 801dcc0:	0801dc6d 	.word	0x0801dc6d
 801dcc4:	0801de17 	.word	0x0801de17
 801dcc8:	0801dc6d 	.word	0x0801dc6d
 801dccc:	0801dd1d 	.word	0x0801dd1d
 801dcd0:	0801dc6d 	.word	0x0801dc6d
 801dcd4:	0801dc6d 	.word	0x0801dc6d
 801dcd8:	0801ddb7 	.word	0x0801ddb7
 801dcdc:	682b      	ldr	r3, [r5, #0]
 801dcde:	1d1a      	adds	r2, r3, #4
 801dce0:	681b      	ldr	r3, [r3, #0]
 801dce2:	602a      	str	r2, [r5, #0]
 801dce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801dcec:	2301      	movs	r3, #1
 801dcee:	e09f      	b.n	801de30 <_printf_i+0x1ec>
 801dcf0:	6820      	ldr	r0, [r4, #0]
 801dcf2:	682b      	ldr	r3, [r5, #0]
 801dcf4:	0607      	lsls	r7, r0, #24
 801dcf6:	f103 0104 	add.w	r1, r3, #4
 801dcfa:	6029      	str	r1, [r5, #0]
 801dcfc:	d501      	bpl.n	801dd02 <_printf_i+0xbe>
 801dcfe:	681e      	ldr	r6, [r3, #0]
 801dd00:	e003      	b.n	801dd0a <_printf_i+0xc6>
 801dd02:	0646      	lsls	r6, r0, #25
 801dd04:	d5fb      	bpl.n	801dcfe <_printf_i+0xba>
 801dd06:	f9b3 6000 	ldrsh.w	r6, [r3]
 801dd0a:	2e00      	cmp	r6, #0
 801dd0c:	da03      	bge.n	801dd16 <_printf_i+0xd2>
 801dd0e:	232d      	movs	r3, #45	; 0x2d
 801dd10:	4276      	negs	r6, r6
 801dd12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dd16:	485a      	ldr	r0, [pc, #360]	; (801de80 <_printf_i+0x23c>)
 801dd18:	230a      	movs	r3, #10
 801dd1a:	e012      	b.n	801dd42 <_printf_i+0xfe>
 801dd1c:	682b      	ldr	r3, [r5, #0]
 801dd1e:	6820      	ldr	r0, [r4, #0]
 801dd20:	1d19      	adds	r1, r3, #4
 801dd22:	6029      	str	r1, [r5, #0]
 801dd24:	0605      	lsls	r5, r0, #24
 801dd26:	d501      	bpl.n	801dd2c <_printf_i+0xe8>
 801dd28:	681e      	ldr	r6, [r3, #0]
 801dd2a:	e002      	b.n	801dd32 <_printf_i+0xee>
 801dd2c:	0641      	lsls	r1, r0, #25
 801dd2e:	d5fb      	bpl.n	801dd28 <_printf_i+0xe4>
 801dd30:	881e      	ldrh	r6, [r3, #0]
 801dd32:	4853      	ldr	r0, [pc, #332]	; (801de80 <_printf_i+0x23c>)
 801dd34:	2f6f      	cmp	r7, #111	; 0x6f
 801dd36:	bf0c      	ite	eq
 801dd38:	2308      	moveq	r3, #8
 801dd3a:	230a      	movne	r3, #10
 801dd3c:	2100      	movs	r1, #0
 801dd3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801dd42:	6865      	ldr	r5, [r4, #4]
 801dd44:	60a5      	str	r5, [r4, #8]
 801dd46:	2d00      	cmp	r5, #0
 801dd48:	bfa2      	ittt	ge
 801dd4a:	6821      	ldrge	r1, [r4, #0]
 801dd4c:	f021 0104 	bicge.w	r1, r1, #4
 801dd50:	6021      	strge	r1, [r4, #0]
 801dd52:	b90e      	cbnz	r6, 801dd58 <_printf_i+0x114>
 801dd54:	2d00      	cmp	r5, #0
 801dd56:	d04b      	beq.n	801ddf0 <_printf_i+0x1ac>
 801dd58:	4615      	mov	r5, r2
 801dd5a:	fbb6 f1f3 	udiv	r1, r6, r3
 801dd5e:	fb03 6711 	mls	r7, r3, r1, r6
 801dd62:	5dc7      	ldrb	r7, [r0, r7]
 801dd64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801dd68:	4637      	mov	r7, r6
 801dd6a:	42bb      	cmp	r3, r7
 801dd6c:	460e      	mov	r6, r1
 801dd6e:	d9f4      	bls.n	801dd5a <_printf_i+0x116>
 801dd70:	2b08      	cmp	r3, #8
 801dd72:	d10b      	bne.n	801dd8c <_printf_i+0x148>
 801dd74:	6823      	ldr	r3, [r4, #0]
 801dd76:	07de      	lsls	r6, r3, #31
 801dd78:	d508      	bpl.n	801dd8c <_printf_i+0x148>
 801dd7a:	6923      	ldr	r3, [r4, #16]
 801dd7c:	6861      	ldr	r1, [r4, #4]
 801dd7e:	4299      	cmp	r1, r3
 801dd80:	bfde      	ittt	le
 801dd82:	2330      	movle	r3, #48	; 0x30
 801dd84:	f805 3c01 	strble.w	r3, [r5, #-1]
 801dd88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801dd8c:	1b52      	subs	r2, r2, r5
 801dd8e:	6122      	str	r2, [r4, #16]
 801dd90:	f8cd a000 	str.w	sl, [sp]
 801dd94:	464b      	mov	r3, r9
 801dd96:	aa03      	add	r2, sp, #12
 801dd98:	4621      	mov	r1, r4
 801dd9a:	4640      	mov	r0, r8
 801dd9c:	f7ff fee4 	bl	801db68 <_printf_common>
 801dda0:	3001      	adds	r0, #1
 801dda2:	d14a      	bne.n	801de3a <_printf_i+0x1f6>
 801dda4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dda8:	b004      	add	sp, #16
 801ddaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ddae:	6823      	ldr	r3, [r4, #0]
 801ddb0:	f043 0320 	orr.w	r3, r3, #32
 801ddb4:	6023      	str	r3, [r4, #0]
 801ddb6:	4833      	ldr	r0, [pc, #204]	; (801de84 <_printf_i+0x240>)
 801ddb8:	2778      	movs	r7, #120	; 0x78
 801ddba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ddbe:	6823      	ldr	r3, [r4, #0]
 801ddc0:	6829      	ldr	r1, [r5, #0]
 801ddc2:	061f      	lsls	r7, r3, #24
 801ddc4:	f851 6b04 	ldr.w	r6, [r1], #4
 801ddc8:	d402      	bmi.n	801ddd0 <_printf_i+0x18c>
 801ddca:	065f      	lsls	r7, r3, #25
 801ddcc:	bf48      	it	mi
 801ddce:	b2b6      	uxthmi	r6, r6
 801ddd0:	07df      	lsls	r7, r3, #31
 801ddd2:	bf48      	it	mi
 801ddd4:	f043 0320 	orrmi.w	r3, r3, #32
 801ddd8:	6029      	str	r1, [r5, #0]
 801ddda:	bf48      	it	mi
 801dddc:	6023      	strmi	r3, [r4, #0]
 801ddde:	b91e      	cbnz	r6, 801dde8 <_printf_i+0x1a4>
 801dde0:	6823      	ldr	r3, [r4, #0]
 801dde2:	f023 0320 	bic.w	r3, r3, #32
 801dde6:	6023      	str	r3, [r4, #0]
 801dde8:	2310      	movs	r3, #16
 801ddea:	e7a7      	b.n	801dd3c <_printf_i+0xf8>
 801ddec:	4824      	ldr	r0, [pc, #144]	; (801de80 <_printf_i+0x23c>)
 801ddee:	e7e4      	b.n	801ddba <_printf_i+0x176>
 801ddf0:	4615      	mov	r5, r2
 801ddf2:	e7bd      	b.n	801dd70 <_printf_i+0x12c>
 801ddf4:	682b      	ldr	r3, [r5, #0]
 801ddf6:	6826      	ldr	r6, [r4, #0]
 801ddf8:	6961      	ldr	r1, [r4, #20]
 801ddfa:	1d18      	adds	r0, r3, #4
 801ddfc:	6028      	str	r0, [r5, #0]
 801ddfe:	0635      	lsls	r5, r6, #24
 801de00:	681b      	ldr	r3, [r3, #0]
 801de02:	d501      	bpl.n	801de08 <_printf_i+0x1c4>
 801de04:	6019      	str	r1, [r3, #0]
 801de06:	e002      	b.n	801de0e <_printf_i+0x1ca>
 801de08:	0670      	lsls	r0, r6, #25
 801de0a:	d5fb      	bpl.n	801de04 <_printf_i+0x1c0>
 801de0c:	8019      	strh	r1, [r3, #0]
 801de0e:	2300      	movs	r3, #0
 801de10:	6123      	str	r3, [r4, #16]
 801de12:	4615      	mov	r5, r2
 801de14:	e7bc      	b.n	801dd90 <_printf_i+0x14c>
 801de16:	682b      	ldr	r3, [r5, #0]
 801de18:	1d1a      	adds	r2, r3, #4
 801de1a:	602a      	str	r2, [r5, #0]
 801de1c:	681d      	ldr	r5, [r3, #0]
 801de1e:	6862      	ldr	r2, [r4, #4]
 801de20:	2100      	movs	r1, #0
 801de22:	4628      	mov	r0, r5
 801de24:	f7e8 f9ac 	bl	8006180 <memchr>
 801de28:	b108      	cbz	r0, 801de2e <_printf_i+0x1ea>
 801de2a:	1b40      	subs	r0, r0, r5
 801de2c:	6060      	str	r0, [r4, #4]
 801de2e:	6863      	ldr	r3, [r4, #4]
 801de30:	6123      	str	r3, [r4, #16]
 801de32:	2300      	movs	r3, #0
 801de34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801de38:	e7aa      	b.n	801dd90 <_printf_i+0x14c>
 801de3a:	6923      	ldr	r3, [r4, #16]
 801de3c:	462a      	mov	r2, r5
 801de3e:	4649      	mov	r1, r9
 801de40:	4640      	mov	r0, r8
 801de42:	47d0      	blx	sl
 801de44:	3001      	adds	r0, #1
 801de46:	d0ad      	beq.n	801dda4 <_printf_i+0x160>
 801de48:	6823      	ldr	r3, [r4, #0]
 801de4a:	079b      	lsls	r3, r3, #30
 801de4c:	d413      	bmi.n	801de76 <_printf_i+0x232>
 801de4e:	68e0      	ldr	r0, [r4, #12]
 801de50:	9b03      	ldr	r3, [sp, #12]
 801de52:	4298      	cmp	r0, r3
 801de54:	bfb8      	it	lt
 801de56:	4618      	movlt	r0, r3
 801de58:	e7a6      	b.n	801dda8 <_printf_i+0x164>
 801de5a:	2301      	movs	r3, #1
 801de5c:	4632      	mov	r2, r6
 801de5e:	4649      	mov	r1, r9
 801de60:	4640      	mov	r0, r8
 801de62:	47d0      	blx	sl
 801de64:	3001      	adds	r0, #1
 801de66:	d09d      	beq.n	801dda4 <_printf_i+0x160>
 801de68:	3501      	adds	r5, #1
 801de6a:	68e3      	ldr	r3, [r4, #12]
 801de6c:	9903      	ldr	r1, [sp, #12]
 801de6e:	1a5b      	subs	r3, r3, r1
 801de70:	42ab      	cmp	r3, r5
 801de72:	dcf2      	bgt.n	801de5a <_printf_i+0x216>
 801de74:	e7eb      	b.n	801de4e <_printf_i+0x20a>
 801de76:	2500      	movs	r5, #0
 801de78:	f104 0619 	add.w	r6, r4, #25
 801de7c:	e7f5      	b.n	801de6a <_printf_i+0x226>
 801de7e:	bf00      	nop
 801de80:	08022a9a 	.word	0x08022a9a
 801de84:	08022aab 	.word	0x08022aab

0801de88 <__malloc_lock>:
 801de88:	4801      	ldr	r0, [pc, #4]	; (801de90 <__malloc_lock+0x8>)
 801de8a:	f000 bea4 	b.w	801ebd6 <__retarget_lock_acquire_recursive>
 801de8e:	bf00      	nop
 801de90:	20005b5c 	.word	0x20005b5c

0801de94 <__malloc_unlock>:
 801de94:	4801      	ldr	r0, [pc, #4]	; (801de9c <__malloc_unlock+0x8>)
 801de96:	f000 be9f 	b.w	801ebd8 <__retarget_lock_release_recursive>
 801de9a:	bf00      	nop
 801de9c:	20005b5c 	.word	0x20005b5c

0801dea0 <siprintf>:
 801dea0:	b40e      	push	{r1, r2, r3}
 801dea2:	b500      	push	{lr}
 801dea4:	b09c      	sub	sp, #112	; 0x70
 801dea6:	ab1d      	add	r3, sp, #116	; 0x74
 801dea8:	9002      	str	r0, [sp, #8]
 801deaa:	9006      	str	r0, [sp, #24]
 801deac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801deb0:	4809      	ldr	r0, [pc, #36]	; (801ded8 <siprintf+0x38>)
 801deb2:	9107      	str	r1, [sp, #28]
 801deb4:	9104      	str	r1, [sp, #16]
 801deb6:	4909      	ldr	r1, [pc, #36]	; (801dedc <siprintf+0x3c>)
 801deb8:	f853 2b04 	ldr.w	r2, [r3], #4
 801debc:	9105      	str	r1, [sp, #20]
 801debe:	6800      	ldr	r0, [r0, #0]
 801dec0:	9301      	str	r3, [sp, #4]
 801dec2:	a902      	add	r1, sp, #8
 801dec4:	f001 fdc8 	bl	801fa58 <_svfiprintf_r>
 801dec8:	9b02      	ldr	r3, [sp, #8]
 801deca:	2200      	movs	r2, #0
 801decc:	701a      	strb	r2, [r3, #0]
 801dece:	b01c      	add	sp, #112	; 0x70
 801ded0:	f85d eb04 	ldr.w	lr, [sp], #4
 801ded4:	b003      	add	sp, #12
 801ded6:	4770      	bx	lr
 801ded8:	200001f0 	.word	0x200001f0
 801dedc:	ffff0208 	.word	0xffff0208

0801dee0 <__sread>:
 801dee0:	b510      	push	{r4, lr}
 801dee2:	460c      	mov	r4, r1
 801dee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dee8:	f000 fdd2 	bl	801ea90 <_read_r>
 801deec:	2800      	cmp	r0, #0
 801deee:	bfab      	itete	ge
 801def0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801def2:	89a3      	ldrhlt	r3, [r4, #12]
 801def4:	181b      	addge	r3, r3, r0
 801def6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801defa:	bfac      	ite	ge
 801defc:	6563      	strge	r3, [r4, #84]	; 0x54
 801defe:	81a3      	strhlt	r3, [r4, #12]
 801df00:	bd10      	pop	{r4, pc}

0801df02 <__swrite>:
 801df02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df06:	461f      	mov	r7, r3
 801df08:	898b      	ldrh	r3, [r1, #12]
 801df0a:	05db      	lsls	r3, r3, #23
 801df0c:	4605      	mov	r5, r0
 801df0e:	460c      	mov	r4, r1
 801df10:	4616      	mov	r6, r2
 801df12:	d505      	bpl.n	801df20 <__swrite+0x1e>
 801df14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df18:	2302      	movs	r3, #2
 801df1a:	2200      	movs	r2, #0
 801df1c:	f000 fda6 	bl	801ea6c <_lseek_r>
 801df20:	89a3      	ldrh	r3, [r4, #12]
 801df22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801df2a:	81a3      	strh	r3, [r4, #12]
 801df2c:	4632      	mov	r2, r6
 801df2e:	463b      	mov	r3, r7
 801df30:	4628      	mov	r0, r5
 801df32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801df36:	f000 be11 	b.w	801eb5c <_write_r>

0801df3a <__sseek>:
 801df3a:	b510      	push	{r4, lr}
 801df3c:	460c      	mov	r4, r1
 801df3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df42:	f000 fd93 	bl	801ea6c <_lseek_r>
 801df46:	1c43      	adds	r3, r0, #1
 801df48:	89a3      	ldrh	r3, [r4, #12]
 801df4a:	bf15      	itete	ne
 801df4c:	6560      	strne	r0, [r4, #84]	; 0x54
 801df4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801df52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801df56:	81a3      	strheq	r3, [r4, #12]
 801df58:	bf18      	it	ne
 801df5a:	81a3      	strhne	r3, [r4, #12]
 801df5c:	bd10      	pop	{r4, pc}

0801df5e <__sclose>:
 801df5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df62:	f000 bd51 	b.w	801ea08 <_close_r>
	...

0801df68 <realloc>:
 801df68:	4b02      	ldr	r3, [pc, #8]	; (801df74 <realloc+0xc>)
 801df6a:	460a      	mov	r2, r1
 801df6c:	4601      	mov	r1, r0
 801df6e:	6818      	ldr	r0, [r3, #0]
 801df70:	f000 b93e 	b.w	801e1f0 <_realloc_r>
 801df74:	200001f0 	.word	0x200001f0

0801df78 <std>:
 801df78:	2300      	movs	r3, #0
 801df7a:	b510      	push	{r4, lr}
 801df7c:	4604      	mov	r4, r0
 801df7e:	e9c0 3300 	strd	r3, r3, [r0]
 801df82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801df86:	6083      	str	r3, [r0, #8]
 801df88:	8181      	strh	r1, [r0, #12]
 801df8a:	6643      	str	r3, [r0, #100]	; 0x64
 801df8c:	81c2      	strh	r2, [r0, #14]
 801df8e:	6183      	str	r3, [r0, #24]
 801df90:	4619      	mov	r1, r3
 801df92:	2208      	movs	r2, #8
 801df94:	305c      	adds	r0, #92	; 0x5c
 801df96:	f000 fd2b 	bl	801e9f0 <memset>
 801df9a:	4b0d      	ldr	r3, [pc, #52]	; (801dfd0 <std+0x58>)
 801df9c:	6263      	str	r3, [r4, #36]	; 0x24
 801df9e:	4b0d      	ldr	r3, [pc, #52]	; (801dfd4 <std+0x5c>)
 801dfa0:	62a3      	str	r3, [r4, #40]	; 0x28
 801dfa2:	4b0d      	ldr	r3, [pc, #52]	; (801dfd8 <std+0x60>)
 801dfa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dfa6:	4b0d      	ldr	r3, [pc, #52]	; (801dfdc <std+0x64>)
 801dfa8:	6323      	str	r3, [r4, #48]	; 0x30
 801dfaa:	4b0d      	ldr	r3, [pc, #52]	; (801dfe0 <std+0x68>)
 801dfac:	6224      	str	r4, [r4, #32]
 801dfae:	429c      	cmp	r4, r3
 801dfb0:	d006      	beq.n	801dfc0 <std+0x48>
 801dfb2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801dfb6:	4294      	cmp	r4, r2
 801dfb8:	d002      	beq.n	801dfc0 <std+0x48>
 801dfba:	33d0      	adds	r3, #208	; 0xd0
 801dfbc:	429c      	cmp	r4, r3
 801dfbe:	d105      	bne.n	801dfcc <std+0x54>
 801dfc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dfc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dfc8:	f000 be04 	b.w	801ebd4 <__retarget_lock_init_recursive>
 801dfcc:	bd10      	pop	{r4, pc}
 801dfce:	bf00      	nop
 801dfd0:	0801dee1 	.word	0x0801dee1
 801dfd4:	0801df03 	.word	0x0801df03
 801dfd8:	0801df3b 	.word	0x0801df3b
 801dfdc:	0801df5f 	.word	0x0801df5f
 801dfe0:	20005a1c 	.word	0x20005a1c

0801dfe4 <stdio_exit_handler>:
 801dfe4:	4a02      	ldr	r2, [pc, #8]	; (801dff0 <stdio_exit_handler+0xc>)
 801dfe6:	4903      	ldr	r1, [pc, #12]	; (801dff4 <stdio_exit_handler+0x10>)
 801dfe8:	4803      	ldr	r0, [pc, #12]	; (801dff8 <stdio_exit_handler+0x14>)
 801dfea:	f000 b930 	b.w	801e24e <_fwalk_sglue>
 801dfee:	bf00      	nop
 801dff0:	2000002c 	.word	0x2000002c
 801dff4:	0802000d 	.word	0x0802000d
 801dff8:	200001a4 	.word	0x200001a4

0801dffc <cleanup_stdio>:
 801dffc:	6841      	ldr	r1, [r0, #4]
 801dffe:	4b0c      	ldr	r3, [pc, #48]	; (801e030 <cleanup_stdio+0x34>)
 801e000:	4299      	cmp	r1, r3
 801e002:	b510      	push	{r4, lr}
 801e004:	4604      	mov	r4, r0
 801e006:	d001      	beq.n	801e00c <cleanup_stdio+0x10>
 801e008:	f002 f800 	bl	802000c <_fflush_r>
 801e00c:	68a1      	ldr	r1, [r4, #8]
 801e00e:	4b09      	ldr	r3, [pc, #36]	; (801e034 <cleanup_stdio+0x38>)
 801e010:	4299      	cmp	r1, r3
 801e012:	d002      	beq.n	801e01a <cleanup_stdio+0x1e>
 801e014:	4620      	mov	r0, r4
 801e016:	f001 fff9 	bl	802000c <_fflush_r>
 801e01a:	68e1      	ldr	r1, [r4, #12]
 801e01c:	4b06      	ldr	r3, [pc, #24]	; (801e038 <cleanup_stdio+0x3c>)
 801e01e:	4299      	cmp	r1, r3
 801e020:	d004      	beq.n	801e02c <cleanup_stdio+0x30>
 801e022:	4620      	mov	r0, r4
 801e024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e028:	f001 bff0 	b.w	802000c <_fflush_r>
 801e02c:	bd10      	pop	{r4, pc}
 801e02e:	bf00      	nop
 801e030:	20005a1c 	.word	0x20005a1c
 801e034:	20005a84 	.word	0x20005a84
 801e038:	20005aec 	.word	0x20005aec

0801e03c <global_stdio_init.part.0>:
 801e03c:	b510      	push	{r4, lr}
 801e03e:	4b0b      	ldr	r3, [pc, #44]	; (801e06c <global_stdio_init.part.0+0x30>)
 801e040:	4c0b      	ldr	r4, [pc, #44]	; (801e070 <global_stdio_init.part.0+0x34>)
 801e042:	4a0c      	ldr	r2, [pc, #48]	; (801e074 <global_stdio_init.part.0+0x38>)
 801e044:	601a      	str	r2, [r3, #0]
 801e046:	4620      	mov	r0, r4
 801e048:	2200      	movs	r2, #0
 801e04a:	2104      	movs	r1, #4
 801e04c:	f7ff ff94 	bl	801df78 <std>
 801e050:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801e054:	2201      	movs	r2, #1
 801e056:	2109      	movs	r1, #9
 801e058:	f7ff ff8e 	bl	801df78 <std>
 801e05c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801e060:	2202      	movs	r2, #2
 801e062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e066:	2112      	movs	r1, #18
 801e068:	f7ff bf86 	b.w	801df78 <std>
 801e06c:	20005b54 	.word	0x20005b54
 801e070:	20005a1c 	.word	0x20005a1c
 801e074:	0801dfe5 	.word	0x0801dfe5

0801e078 <__sfp_lock_acquire>:
 801e078:	4801      	ldr	r0, [pc, #4]	; (801e080 <__sfp_lock_acquire+0x8>)
 801e07a:	f000 bdac 	b.w	801ebd6 <__retarget_lock_acquire_recursive>
 801e07e:	bf00      	nop
 801e080:	20005b5d 	.word	0x20005b5d

0801e084 <__sfp_lock_release>:
 801e084:	4801      	ldr	r0, [pc, #4]	; (801e08c <__sfp_lock_release+0x8>)
 801e086:	f000 bda7 	b.w	801ebd8 <__retarget_lock_release_recursive>
 801e08a:	bf00      	nop
 801e08c:	20005b5d 	.word	0x20005b5d

0801e090 <__sinit>:
 801e090:	b510      	push	{r4, lr}
 801e092:	4604      	mov	r4, r0
 801e094:	f7ff fff0 	bl	801e078 <__sfp_lock_acquire>
 801e098:	6a23      	ldr	r3, [r4, #32]
 801e09a:	b11b      	cbz	r3, 801e0a4 <__sinit+0x14>
 801e09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e0a0:	f7ff bff0 	b.w	801e084 <__sfp_lock_release>
 801e0a4:	4b04      	ldr	r3, [pc, #16]	; (801e0b8 <__sinit+0x28>)
 801e0a6:	6223      	str	r3, [r4, #32]
 801e0a8:	4b04      	ldr	r3, [pc, #16]	; (801e0bc <__sinit+0x2c>)
 801e0aa:	681b      	ldr	r3, [r3, #0]
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d1f5      	bne.n	801e09c <__sinit+0xc>
 801e0b0:	f7ff ffc4 	bl	801e03c <global_stdio_init.part.0>
 801e0b4:	e7f2      	b.n	801e09c <__sinit+0xc>
 801e0b6:	bf00      	nop
 801e0b8:	0801dffd 	.word	0x0801dffd
 801e0bc:	20005b54 	.word	0x20005b54

0801e0c0 <fiprintf>:
 801e0c0:	b40e      	push	{r1, r2, r3}
 801e0c2:	b503      	push	{r0, r1, lr}
 801e0c4:	4601      	mov	r1, r0
 801e0c6:	ab03      	add	r3, sp, #12
 801e0c8:	4805      	ldr	r0, [pc, #20]	; (801e0e0 <fiprintf+0x20>)
 801e0ca:	f853 2b04 	ldr.w	r2, [r3], #4
 801e0ce:	6800      	ldr	r0, [r0, #0]
 801e0d0:	9301      	str	r3, [sp, #4]
 801e0d2:	f001 fde9 	bl	801fca8 <_vfiprintf_r>
 801e0d6:	b002      	add	sp, #8
 801e0d8:	f85d eb04 	ldr.w	lr, [sp], #4
 801e0dc:	b003      	add	sp, #12
 801e0de:	4770      	bx	lr
 801e0e0:	200001f0 	.word	0x200001f0

0801e0e4 <_fputc_r>:
 801e0e4:	b570      	push	{r4, r5, r6, lr}
 801e0e6:	460e      	mov	r6, r1
 801e0e8:	4614      	mov	r4, r2
 801e0ea:	4605      	mov	r5, r0
 801e0ec:	b118      	cbz	r0, 801e0f6 <_fputc_r+0x12>
 801e0ee:	6a03      	ldr	r3, [r0, #32]
 801e0f0:	b90b      	cbnz	r3, 801e0f6 <_fputc_r+0x12>
 801e0f2:	f7ff ffcd 	bl	801e090 <__sinit>
 801e0f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e0f8:	07d8      	lsls	r0, r3, #31
 801e0fa:	d405      	bmi.n	801e108 <_fputc_r+0x24>
 801e0fc:	89a3      	ldrh	r3, [r4, #12]
 801e0fe:	0599      	lsls	r1, r3, #22
 801e100:	d402      	bmi.n	801e108 <_fputc_r+0x24>
 801e102:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e104:	f000 fd67 	bl	801ebd6 <__retarget_lock_acquire_recursive>
 801e108:	4622      	mov	r2, r4
 801e10a:	4628      	mov	r0, r5
 801e10c:	4631      	mov	r1, r6
 801e10e:	f000 fa0d 	bl	801e52c <_putc_r>
 801e112:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e114:	07da      	lsls	r2, r3, #31
 801e116:	4605      	mov	r5, r0
 801e118:	d405      	bmi.n	801e126 <_fputc_r+0x42>
 801e11a:	89a3      	ldrh	r3, [r4, #12]
 801e11c:	059b      	lsls	r3, r3, #22
 801e11e:	d402      	bmi.n	801e126 <_fputc_r+0x42>
 801e120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e122:	f000 fd59 	bl	801ebd8 <__retarget_lock_release_recursive>
 801e126:	4628      	mov	r0, r5
 801e128:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e12c <fputc>:
 801e12c:	4b02      	ldr	r3, [pc, #8]	; (801e138 <fputc+0xc>)
 801e12e:	460a      	mov	r2, r1
 801e130:	4601      	mov	r1, r0
 801e132:	6818      	ldr	r0, [r3, #0]
 801e134:	f7ff bfd6 	b.w	801e0e4 <_fputc_r>
 801e138:	200001f0 	.word	0x200001f0

0801e13c <_fputs_r>:
 801e13c:	b570      	push	{r4, r5, r6, lr}
 801e13e:	460d      	mov	r5, r1
 801e140:	4614      	mov	r4, r2
 801e142:	4606      	mov	r6, r0
 801e144:	b118      	cbz	r0, 801e14e <_fputs_r+0x12>
 801e146:	6a03      	ldr	r3, [r0, #32]
 801e148:	b90b      	cbnz	r3, 801e14e <_fputs_r+0x12>
 801e14a:	f7ff ffa1 	bl	801e090 <__sinit>
 801e14e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e150:	07da      	lsls	r2, r3, #31
 801e152:	d405      	bmi.n	801e160 <_fputs_r+0x24>
 801e154:	89a3      	ldrh	r3, [r4, #12]
 801e156:	059b      	lsls	r3, r3, #22
 801e158:	d402      	bmi.n	801e160 <_fputs_r+0x24>
 801e15a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e15c:	f000 fd3b 	bl	801ebd6 <__retarget_lock_acquire_recursive>
 801e160:	89a3      	ldrh	r3, [r4, #12]
 801e162:	0718      	lsls	r0, r3, #28
 801e164:	d511      	bpl.n	801e18a <_fputs_r+0x4e>
 801e166:	6923      	ldr	r3, [r4, #16]
 801e168:	b17b      	cbz	r3, 801e18a <_fputs_r+0x4e>
 801e16a:	3d01      	subs	r5, #1
 801e16c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 801e170:	b9e9      	cbnz	r1, 801e1ae <_fputs_r+0x72>
 801e172:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801e174:	f015 0501 	ands.w	r5, r5, #1
 801e178:	d12f      	bne.n	801e1da <_fputs_r+0x9e>
 801e17a:	89a3      	ldrh	r3, [r4, #12]
 801e17c:	0599      	lsls	r1, r3, #22
 801e17e:	d402      	bmi.n	801e186 <_fputs_r+0x4a>
 801e180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e182:	f000 fd29 	bl	801ebd8 <__retarget_lock_release_recursive>
 801e186:	4628      	mov	r0, r5
 801e188:	bd70      	pop	{r4, r5, r6, pc}
 801e18a:	4621      	mov	r1, r4
 801e18c:	4630      	mov	r0, r6
 801e18e:	f000 f913 	bl	801e3b8 <__swsetup_r>
 801e192:	2800      	cmp	r0, #0
 801e194:	d0e9      	beq.n	801e16a <_fputs_r+0x2e>
 801e196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e198:	07da      	lsls	r2, r3, #31
 801e19a:	d405      	bmi.n	801e1a8 <_fputs_r+0x6c>
 801e19c:	89a3      	ldrh	r3, [r4, #12]
 801e19e:	059b      	lsls	r3, r3, #22
 801e1a0:	d402      	bmi.n	801e1a8 <_fputs_r+0x6c>
 801e1a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e1a4:	f000 fd18 	bl	801ebd8 <__retarget_lock_release_recursive>
 801e1a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801e1ac:	e7eb      	b.n	801e186 <_fputs_r+0x4a>
 801e1ae:	68a3      	ldr	r3, [r4, #8]
 801e1b0:	3b01      	subs	r3, #1
 801e1b2:	2b00      	cmp	r3, #0
 801e1b4:	60a3      	str	r3, [r4, #8]
 801e1b6:	da04      	bge.n	801e1c2 <_fputs_r+0x86>
 801e1b8:	69a2      	ldr	r2, [r4, #24]
 801e1ba:	4293      	cmp	r3, r2
 801e1bc:	db06      	blt.n	801e1cc <_fputs_r+0x90>
 801e1be:	290a      	cmp	r1, #10
 801e1c0:	d004      	beq.n	801e1cc <_fputs_r+0x90>
 801e1c2:	6823      	ldr	r3, [r4, #0]
 801e1c4:	1c5a      	adds	r2, r3, #1
 801e1c6:	6022      	str	r2, [r4, #0]
 801e1c8:	7019      	strb	r1, [r3, #0]
 801e1ca:	e7cf      	b.n	801e16c <_fputs_r+0x30>
 801e1cc:	4622      	mov	r2, r4
 801e1ce:	4630      	mov	r0, r6
 801e1d0:	f000 f8b4 	bl	801e33c <__swbuf_r>
 801e1d4:	3001      	adds	r0, #1
 801e1d6:	d1c9      	bne.n	801e16c <_fputs_r+0x30>
 801e1d8:	e7dd      	b.n	801e196 <_fputs_r+0x5a>
 801e1da:	460d      	mov	r5, r1
 801e1dc:	e7d3      	b.n	801e186 <_fputs_r+0x4a>
	...

0801e1e0 <fputs>:
 801e1e0:	4b02      	ldr	r3, [pc, #8]	; (801e1ec <fputs+0xc>)
 801e1e2:	460a      	mov	r2, r1
 801e1e4:	4601      	mov	r1, r0
 801e1e6:	6818      	ldr	r0, [r3, #0]
 801e1e8:	f7ff bfa8 	b.w	801e13c <_fputs_r>
 801e1ec:	200001f0 	.word	0x200001f0

0801e1f0 <_realloc_r>:
 801e1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1f4:	4680      	mov	r8, r0
 801e1f6:	4614      	mov	r4, r2
 801e1f8:	460e      	mov	r6, r1
 801e1fa:	b921      	cbnz	r1, 801e206 <_realloc_r+0x16>
 801e1fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e200:	4611      	mov	r1, r2
 801e202:	f7ff bc31 	b.w	801da68 <_malloc_r>
 801e206:	b92a      	cbnz	r2, 801e214 <_realloc_r+0x24>
 801e208:	f001 fb80 	bl	801f90c <_free_r>
 801e20c:	4625      	mov	r5, r4
 801e20e:	4628      	mov	r0, r5
 801e210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e214:	f002 fa9e 	bl	8020754 <_malloc_usable_size_r>
 801e218:	4284      	cmp	r4, r0
 801e21a:	4607      	mov	r7, r0
 801e21c:	d802      	bhi.n	801e224 <_realloc_r+0x34>
 801e21e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e222:	d812      	bhi.n	801e24a <_realloc_r+0x5a>
 801e224:	4621      	mov	r1, r4
 801e226:	4640      	mov	r0, r8
 801e228:	f7ff fc1e 	bl	801da68 <_malloc_r>
 801e22c:	4605      	mov	r5, r0
 801e22e:	2800      	cmp	r0, #0
 801e230:	d0ed      	beq.n	801e20e <_realloc_r+0x1e>
 801e232:	42bc      	cmp	r4, r7
 801e234:	4622      	mov	r2, r4
 801e236:	4631      	mov	r1, r6
 801e238:	bf28      	it	cs
 801e23a:	463a      	movcs	r2, r7
 801e23c:	f000 fcdc 	bl	801ebf8 <memcpy>
 801e240:	4631      	mov	r1, r6
 801e242:	4640      	mov	r0, r8
 801e244:	f001 fb62 	bl	801f90c <_free_r>
 801e248:	e7e1      	b.n	801e20e <_realloc_r+0x1e>
 801e24a:	4635      	mov	r5, r6
 801e24c:	e7df      	b.n	801e20e <_realloc_r+0x1e>

0801e24e <_fwalk_sglue>:
 801e24e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e252:	4607      	mov	r7, r0
 801e254:	4688      	mov	r8, r1
 801e256:	4614      	mov	r4, r2
 801e258:	2600      	movs	r6, #0
 801e25a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e25e:	f1b9 0901 	subs.w	r9, r9, #1
 801e262:	d505      	bpl.n	801e270 <_fwalk_sglue+0x22>
 801e264:	6824      	ldr	r4, [r4, #0]
 801e266:	2c00      	cmp	r4, #0
 801e268:	d1f7      	bne.n	801e25a <_fwalk_sglue+0xc>
 801e26a:	4630      	mov	r0, r6
 801e26c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e270:	89ab      	ldrh	r3, [r5, #12]
 801e272:	2b01      	cmp	r3, #1
 801e274:	d907      	bls.n	801e286 <_fwalk_sglue+0x38>
 801e276:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e27a:	3301      	adds	r3, #1
 801e27c:	d003      	beq.n	801e286 <_fwalk_sglue+0x38>
 801e27e:	4629      	mov	r1, r5
 801e280:	4638      	mov	r0, r7
 801e282:	47c0      	blx	r8
 801e284:	4306      	orrs	r6, r0
 801e286:	3568      	adds	r5, #104	; 0x68
 801e288:	e7e9      	b.n	801e25e <_fwalk_sglue+0x10>

0801e28a <_fwrite_r>:
 801e28a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e28e:	9c08      	ldr	r4, [sp, #32]
 801e290:	468a      	mov	sl, r1
 801e292:	4690      	mov	r8, r2
 801e294:	fb02 f903 	mul.w	r9, r2, r3
 801e298:	4606      	mov	r6, r0
 801e29a:	b118      	cbz	r0, 801e2a4 <_fwrite_r+0x1a>
 801e29c:	6a03      	ldr	r3, [r0, #32]
 801e29e:	b90b      	cbnz	r3, 801e2a4 <_fwrite_r+0x1a>
 801e2a0:	f7ff fef6 	bl	801e090 <__sinit>
 801e2a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e2a6:	07dd      	lsls	r5, r3, #31
 801e2a8:	d405      	bmi.n	801e2b6 <_fwrite_r+0x2c>
 801e2aa:	89a3      	ldrh	r3, [r4, #12]
 801e2ac:	0598      	lsls	r0, r3, #22
 801e2ae:	d402      	bmi.n	801e2b6 <_fwrite_r+0x2c>
 801e2b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e2b2:	f000 fc90 	bl	801ebd6 <__retarget_lock_acquire_recursive>
 801e2b6:	89a3      	ldrh	r3, [r4, #12]
 801e2b8:	0719      	lsls	r1, r3, #28
 801e2ba:	d516      	bpl.n	801e2ea <_fwrite_r+0x60>
 801e2bc:	6923      	ldr	r3, [r4, #16]
 801e2be:	b1a3      	cbz	r3, 801e2ea <_fwrite_r+0x60>
 801e2c0:	2500      	movs	r5, #0
 801e2c2:	454d      	cmp	r5, r9
 801e2c4:	d01f      	beq.n	801e306 <_fwrite_r+0x7c>
 801e2c6:	68a7      	ldr	r7, [r4, #8]
 801e2c8:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801e2cc:	3f01      	subs	r7, #1
 801e2ce:	2f00      	cmp	r7, #0
 801e2d0:	60a7      	str	r7, [r4, #8]
 801e2d2:	da04      	bge.n	801e2de <_fwrite_r+0x54>
 801e2d4:	69a3      	ldr	r3, [r4, #24]
 801e2d6:	429f      	cmp	r7, r3
 801e2d8:	db0f      	blt.n	801e2fa <_fwrite_r+0x70>
 801e2da:	290a      	cmp	r1, #10
 801e2dc:	d00d      	beq.n	801e2fa <_fwrite_r+0x70>
 801e2de:	6823      	ldr	r3, [r4, #0]
 801e2e0:	1c5a      	adds	r2, r3, #1
 801e2e2:	6022      	str	r2, [r4, #0]
 801e2e4:	7019      	strb	r1, [r3, #0]
 801e2e6:	3501      	adds	r5, #1
 801e2e8:	e7eb      	b.n	801e2c2 <_fwrite_r+0x38>
 801e2ea:	4621      	mov	r1, r4
 801e2ec:	4630      	mov	r0, r6
 801e2ee:	f000 f863 	bl	801e3b8 <__swsetup_r>
 801e2f2:	2800      	cmp	r0, #0
 801e2f4:	d0e4      	beq.n	801e2c0 <_fwrite_r+0x36>
 801e2f6:	2500      	movs	r5, #0
 801e2f8:	e005      	b.n	801e306 <_fwrite_r+0x7c>
 801e2fa:	4622      	mov	r2, r4
 801e2fc:	4630      	mov	r0, r6
 801e2fe:	f000 f81d 	bl	801e33c <__swbuf_r>
 801e302:	3001      	adds	r0, #1
 801e304:	d1ef      	bne.n	801e2e6 <_fwrite_r+0x5c>
 801e306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e308:	07da      	lsls	r2, r3, #31
 801e30a:	d405      	bmi.n	801e318 <_fwrite_r+0x8e>
 801e30c:	89a3      	ldrh	r3, [r4, #12]
 801e30e:	059b      	lsls	r3, r3, #22
 801e310:	d402      	bmi.n	801e318 <_fwrite_r+0x8e>
 801e312:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e314:	f000 fc60 	bl	801ebd8 <__retarget_lock_release_recursive>
 801e318:	fbb5 f0f8 	udiv	r0, r5, r8
 801e31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801e320 <fwrite>:
 801e320:	b507      	push	{r0, r1, r2, lr}
 801e322:	9300      	str	r3, [sp, #0]
 801e324:	4613      	mov	r3, r2
 801e326:	460a      	mov	r2, r1
 801e328:	4601      	mov	r1, r0
 801e32a:	4803      	ldr	r0, [pc, #12]	; (801e338 <fwrite+0x18>)
 801e32c:	6800      	ldr	r0, [r0, #0]
 801e32e:	f7ff ffac 	bl	801e28a <_fwrite_r>
 801e332:	b003      	add	sp, #12
 801e334:	f85d fb04 	ldr.w	pc, [sp], #4
 801e338:	200001f0 	.word	0x200001f0

0801e33c <__swbuf_r>:
 801e33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e33e:	460e      	mov	r6, r1
 801e340:	4614      	mov	r4, r2
 801e342:	4605      	mov	r5, r0
 801e344:	b118      	cbz	r0, 801e34e <__swbuf_r+0x12>
 801e346:	6a03      	ldr	r3, [r0, #32]
 801e348:	b90b      	cbnz	r3, 801e34e <__swbuf_r+0x12>
 801e34a:	f7ff fea1 	bl	801e090 <__sinit>
 801e34e:	69a3      	ldr	r3, [r4, #24]
 801e350:	60a3      	str	r3, [r4, #8]
 801e352:	89a3      	ldrh	r3, [r4, #12]
 801e354:	071a      	lsls	r2, r3, #28
 801e356:	d525      	bpl.n	801e3a4 <__swbuf_r+0x68>
 801e358:	6923      	ldr	r3, [r4, #16]
 801e35a:	b31b      	cbz	r3, 801e3a4 <__swbuf_r+0x68>
 801e35c:	6823      	ldr	r3, [r4, #0]
 801e35e:	6922      	ldr	r2, [r4, #16]
 801e360:	1a98      	subs	r0, r3, r2
 801e362:	6963      	ldr	r3, [r4, #20]
 801e364:	b2f6      	uxtb	r6, r6
 801e366:	4283      	cmp	r3, r0
 801e368:	4637      	mov	r7, r6
 801e36a:	dc04      	bgt.n	801e376 <__swbuf_r+0x3a>
 801e36c:	4621      	mov	r1, r4
 801e36e:	4628      	mov	r0, r5
 801e370:	f001 fe4c 	bl	802000c <_fflush_r>
 801e374:	b9e0      	cbnz	r0, 801e3b0 <__swbuf_r+0x74>
 801e376:	68a3      	ldr	r3, [r4, #8]
 801e378:	3b01      	subs	r3, #1
 801e37a:	60a3      	str	r3, [r4, #8]
 801e37c:	6823      	ldr	r3, [r4, #0]
 801e37e:	1c5a      	adds	r2, r3, #1
 801e380:	6022      	str	r2, [r4, #0]
 801e382:	701e      	strb	r6, [r3, #0]
 801e384:	6962      	ldr	r2, [r4, #20]
 801e386:	1c43      	adds	r3, r0, #1
 801e388:	429a      	cmp	r2, r3
 801e38a:	d004      	beq.n	801e396 <__swbuf_r+0x5a>
 801e38c:	89a3      	ldrh	r3, [r4, #12]
 801e38e:	07db      	lsls	r3, r3, #31
 801e390:	d506      	bpl.n	801e3a0 <__swbuf_r+0x64>
 801e392:	2e0a      	cmp	r6, #10
 801e394:	d104      	bne.n	801e3a0 <__swbuf_r+0x64>
 801e396:	4621      	mov	r1, r4
 801e398:	4628      	mov	r0, r5
 801e39a:	f001 fe37 	bl	802000c <_fflush_r>
 801e39e:	b938      	cbnz	r0, 801e3b0 <__swbuf_r+0x74>
 801e3a0:	4638      	mov	r0, r7
 801e3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e3a4:	4621      	mov	r1, r4
 801e3a6:	4628      	mov	r0, r5
 801e3a8:	f000 f806 	bl	801e3b8 <__swsetup_r>
 801e3ac:	2800      	cmp	r0, #0
 801e3ae:	d0d5      	beq.n	801e35c <__swbuf_r+0x20>
 801e3b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e3b4:	e7f4      	b.n	801e3a0 <__swbuf_r+0x64>
	...

0801e3b8 <__swsetup_r>:
 801e3b8:	b538      	push	{r3, r4, r5, lr}
 801e3ba:	4b2a      	ldr	r3, [pc, #168]	; (801e464 <__swsetup_r+0xac>)
 801e3bc:	4605      	mov	r5, r0
 801e3be:	6818      	ldr	r0, [r3, #0]
 801e3c0:	460c      	mov	r4, r1
 801e3c2:	b118      	cbz	r0, 801e3cc <__swsetup_r+0x14>
 801e3c4:	6a03      	ldr	r3, [r0, #32]
 801e3c6:	b90b      	cbnz	r3, 801e3cc <__swsetup_r+0x14>
 801e3c8:	f7ff fe62 	bl	801e090 <__sinit>
 801e3cc:	89a3      	ldrh	r3, [r4, #12]
 801e3ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e3d2:	0718      	lsls	r0, r3, #28
 801e3d4:	d422      	bmi.n	801e41c <__swsetup_r+0x64>
 801e3d6:	06d9      	lsls	r1, r3, #27
 801e3d8:	d407      	bmi.n	801e3ea <__swsetup_r+0x32>
 801e3da:	2309      	movs	r3, #9
 801e3dc:	602b      	str	r3, [r5, #0]
 801e3de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e3e2:	81a3      	strh	r3, [r4, #12]
 801e3e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e3e8:	e034      	b.n	801e454 <__swsetup_r+0x9c>
 801e3ea:	0758      	lsls	r0, r3, #29
 801e3ec:	d512      	bpl.n	801e414 <__swsetup_r+0x5c>
 801e3ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e3f0:	b141      	cbz	r1, 801e404 <__swsetup_r+0x4c>
 801e3f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e3f6:	4299      	cmp	r1, r3
 801e3f8:	d002      	beq.n	801e400 <__swsetup_r+0x48>
 801e3fa:	4628      	mov	r0, r5
 801e3fc:	f001 fa86 	bl	801f90c <_free_r>
 801e400:	2300      	movs	r3, #0
 801e402:	6363      	str	r3, [r4, #52]	; 0x34
 801e404:	89a3      	ldrh	r3, [r4, #12]
 801e406:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e40a:	81a3      	strh	r3, [r4, #12]
 801e40c:	2300      	movs	r3, #0
 801e40e:	6063      	str	r3, [r4, #4]
 801e410:	6923      	ldr	r3, [r4, #16]
 801e412:	6023      	str	r3, [r4, #0]
 801e414:	89a3      	ldrh	r3, [r4, #12]
 801e416:	f043 0308 	orr.w	r3, r3, #8
 801e41a:	81a3      	strh	r3, [r4, #12]
 801e41c:	6923      	ldr	r3, [r4, #16]
 801e41e:	b94b      	cbnz	r3, 801e434 <__swsetup_r+0x7c>
 801e420:	89a3      	ldrh	r3, [r4, #12]
 801e422:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e42a:	d003      	beq.n	801e434 <__swsetup_r+0x7c>
 801e42c:	4621      	mov	r1, r4
 801e42e:	4628      	mov	r0, r5
 801e430:	f000 f840 	bl	801e4b4 <__smakebuf_r>
 801e434:	89a0      	ldrh	r0, [r4, #12]
 801e436:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e43a:	f010 0301 	ands.w	r3, r0, #1
 801e43e:	d00a      	beq.n	801e456 <__swsetup_r+0x9e>
 801e440:	2300      	movs	r3, #0
 801e442:	60a3      	str	r3, [r4, #8]
 801e444:	6963      	ldr	r3, [r4, #20]
 801e446:	425b      	negs	r3, r3
 801e448:	61a3      	str	r3, [r4, #24]
 801e44a:	6923      	ldr	r3, [r4, #16]
 801e44c:	b943      	cbnz	r3, 801e460 <__swsetup_r+0xa8>
 801e44e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e452:	d1c4      	bne.n	801e3de <__swsetup_r+0x26>
 801e454:	bd38      	pop	{r3, r4, r5, pc}
 801e456:	0781      	lsls	r1, r0, #30
 801e458:	bf58      	it	pl
 801e45a:	6963      	ldrpl	r3, [r4, #20]
 801e45c:	60a3      	str	r3, [r4, #8]
 801e45e:	e7f4      	b.n	801e44a <__swsetup_r+0x92>
 801e460:	2000      	movs	r0, #0
 801e462:	e7f7      	b.n	801e454 <__swsetup_r+0x9c>
 801e464:	200001f0 	.word	0x200001f0

0801e468 <__swhatbuf_r>:
 801e468:	b570      	push	{r4, r5, r6, lr}
 801e46a:	460c      	mov	r4, r1
 801e46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e470:	2900      	cmp	r1, #0
 801e472:	b096      	sub	sp, #88	; 0x58
 801e474:	4615      	mov	r5, r2
 801e476:	461e      	mov	r6, r3
 801e478:	da0d      	bge.n	801e496 <__swhatbuf_r+0x2e>
 801e47a:	89a3      	ldrh	r3, [r4, #12]
 801e47c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801e480:	f04f 0100 	mov.w	r1, #0
 801e484:	bf0c      	ite	eq
 801e486:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801e48a:	2340      	movne	r3, #64	; 0x40
 801e48c:	2000      	movs	r0, #0
 801e48e:	6031      	str	r1, [r6, #0]
 801e490:	602b      	str	r3, [r5, #0]
 801e492:	b016      	add	sp, #88	; 0x58
 801e494:	bd70      	pop	{r4, r5, r6, pc}
 801e496:	466a      	mov	r2, sp
 801e498:	f000 fac6 	bl	801ea28 <_fstat_r>
 801e49c:	2800      	cmp	r0, #0
 801e49e:	dbec      	blt.n	801e47a <__swhatbuf_r+0x12>
 801e4a0:	9901      	ldr	r1, [sp, #4]
 801e4a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801e4a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801e4aa:	4259      	negs	r1, r3
 801e4ac:	4159      	adcs	r1, r3
 801e4ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e4b2:	e7eb      	b.n	801e48c <__swhatbuf_r+0x24>

0801e4b4 <__smakebuf_r>:
 801e4b4:	898b      	ldrh	r3, [r1, #12]
 801e4b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e4b8:	079d      	lsls	r5, r3, #30
 801e4ba:	4606      	mov	r6, r0
 801e4bc:	460c      	mov	r4, r1
 801e4be:	d507      	bpl.n	801e4d0 <__smakebuf_r+0x1c>
 801e4c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e4c4:	6023      	str	r3, [r4, #0]
 801e4c6:	6123      	str	r3, [r4, #16]
 801e4c8:	2301      	movs	r3, #1
 801e4ca:	6163      	str	r3, [r4, #20]
 801e4cc:	b002      	add	sp, #8
 801e4ce:	bd70      	pop	{r4, r5, r6, pc}
 801e4d0:	ab01      	add	r3, sp, #4
 801e4d2:	466a      	mov	r2, sp
 801e4d4:	f7ff ffc8 	bl	801e468 <__swhatbuf_r>
 801e4d8:	9900      	ldr	r1, [sp, #0]
 801e4da:	4605      	mov	r5, r0
 801e4dc:	4630      	mov	r0, r6
 801e4de:	f7ff fac3 	bl	801da68 <_malloc_r>
 801e4e2:	b948      	cbnz	r0, 801e4f8 <__smakebuf_r+0x44>
 801e4e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e4e8:	059a      	lsls	r2, r3, #22
 801e4ea:	d4ef      	bmi.n	801e4cc <__smakebuf_r+0x18>
 801e4ec:	f023 0303 	bic.w	r3, r3, #3
 801e4f0:	f043 0302 	orr.w	r3, r3, #2
 801e4f4:	81a3      	strh	r3, [r4, #12]
 801e4f6:	e7e3      	b.n	801e4c0 <__smakebuf_r+0xc>
 801e4f8:	89a3      	ldrh	r3, [r4, #12]
 801e4fa:	6020      	str	r0, [r4, #0]
 801e4fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e500:	81a3      	strh	r3, [r4, #12]
 801e502:	9b00      	ldr	r3, [sp, #0]
 801e504:	6163      	str	r3, [r4, #20]
 801e506:	9b01      	ldr	r3, [sp, #4]
 801e508:	6120      	str	r0, [r4, #16]
 801e50a:	b15b      	cbz	r3, 801e524 <__smakebuf_r+0x70>
 801e50c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e510:	4630      	mov	r0, r6
 801e512:	f000 fa9b 	bl	801ea4c <_isatty_r>
 801e516:	b128      	cbz	r0, 801e524 <__smakebuf_r+0x70>
 801e518:	89a3      	ldrh	r3, [r4, #12]
 801e51a:	f023 0303 	bic.w	r3, r3, #3
 801e51e:	f043 0301 	orr.w	r3, r3, #1
 801e522:	81a3      	strh	r3, [r4, #12]
 801e524:	89a3      	ldrh	r3, [r4, #12]
 801e526:	431d      	orrs	r5, r3
 801e528:	81a5      	strh	r5, [r4, #12]
 801e52a:	e7cf      	b.n	801e4cc <__smakebuf_r+0x18>

0801e52c <_putc_r>:
 801e52c:	b570      	push	{r4, r5, r6, lr}
 801e52e:	460d      	mov	r5, r1
 801e530:	4614      	mov	r4, r2
 801e532:	4606      	mov	r6, r0
 801e534:	b118      	cbz	r0, 801e53e <_putc_r+0x12>
 801e536:	6a03      	ldr	r3, [r0, #32]
 801e538:	b90b      	cbnz	r3, 801e53e <_putc_r+0x12>
 801e53a:	f7ff fda9 	bl	801e090 <__sinit>
 801e53e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e540:	07d8      	lsls	r0, r3, #31
 801e542:	d405      	bmi.n	801e550 <_putc_r+0x24>
 801e544:	89a3      	ldrh	r3, [r4, #12]
 801e546:	0599      	lsls	r1, r3, #22
 801e548:	d402      	bmi.n	801e550 <_putc_r+0x24>
 801e54a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e54c:	f000 fb43 	bl	801ebd6 <__retarget_lock_acquire_recursive>
 801e550:	68a3      	ldr	r3, [r4, #8]
 801e552:	3b01      	subs	r3, #1
 801e554:	2b00      	cmp	r3, #0
 801e556:	60a3      	str	r3, [r4, #8]
 801e558:	da05      	bge.n	801e566 <_putc_r+0x3a>
 801e55a:	69a2      	ldr	r2, [r4, #24]
 801e55c:	4293      	cmp	r3, r2
 801e55e:	db12      	blt.n	801e586 <_putc_r+0x5a>
 801e560:	b2eb      	uxtb	r3, r5
 801e562:	2b0a      	cmp	r3, #10
 801e564:	d00f      	beq.n	801e586 <_putc_r+0x5a>
 801e566:	6823      	ldr	r3, [r4, #0]
 801e568:	1c5a      	adds	r2, r3, #1
 801e56a:	6022      	str	r2, [r4, #0]
 801e56c:	701d      	strb	r5, [r3, #0]
 801e56e:	b2ed      	uxtb	r5, r5
 801e570:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e572:	07da      	lsls	r2, r3, #31
 801e574:	d405      	bmi.n	801e582 <_putc_r+0x56>
 801e576:	89a3      	ldrh	r3, [r4, #12]
 801e578:	059b      	lsls	r3, r3, #22
 801e57a:	d402      	bmi.n	801e582 <_putc_r+0x56>
 801e57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e57e:	f000 fb2b 	bl	801ebd8 <__retarget_lock_release_recursive>
 801e582:	4628      	mov	r0, r5
 801e584:	bd70      	pop	{r4, r5, r6, pc}
 801e586:	4629      	mov	r1, r5
 801e588:	4622      	mov	r2, r4
 801e58a:	4630      	mov	r0, r6
 801e58c:	f7ff fed6 	bl	801e33c <__swbuf_r>
 801e590:	4605      	mov	r5, r0
 801e592:	e7ed      	b.n	801e570 <_putc_r+0x44>

0801e594 <_strerror_r>:
 801e594:	b510      	push	{r4, lr}
 801e596:	4604      	mov	r4, r0
 801e598:	4608      	mov	r0, r1
 801e59a:	4611      	mov	r1, r2
 801e59c:	288e      	cmp	r0, #142	; 0x8e
 801e59e:	f200 8130 	bhi.w	801e802 <_strerror_r+0x26e>
 801e5a2:	e8df f010 	tbh	[pc, r0, lsl #1]
 801e5a6:	0139      	.short	0x0139
 801e5a8:	0092008f 	.word	0x0092008f
 801e5ac:	00960094 	.word	0x00960094
 801e5b0:	009a0098 	.word	0x009a0098
 801e5b4:	009e009c 	.word	0x009e009c
 801e5b8:	00a400a2 	.word	0x00a400a2
 801e5bc:	00aa00a8 	.word	0x00aa00a8
 801e5c0:	00ae00ac 	.word	0x00ae00ac
 801e5c4:	00b0012e 	.word	0x00b0012e
 801e5c8:	00b400b2 	.word	0x00b400b2
 801e5cc:	00b800b6 	.word	0x00b800b6
 801e5d0:	00c000be 	.word	0x00c000be
 801e5d4:	00c800c6 	.word	0x00c800c6
 801e5d8:	00cc00ca 	.word	0x00cc00ca
 801e5dc:	00d200ce 	.word	0x00d200ce
 801e5e0:	00d800d6 	.word	0x00d800d6
 801e5e4:	00dc00da 	.word	0x00dc00da
 801e5e8:	00e000de 	.word	0x00e000de
 801e5ec:	00e400e2 	.word	0x00e400e2
 801e5f0:	012e012e 	.word	0x012e012e
 801e5f4:	012e012e 	.word	0x012e012e
 801e5f8:	012e012e 	.word	0x012e012e
 801e5fc:	012e012e 	.word	0x012e012e
 801e600:	00ec00e8 	.word	0x00ec00e8
 801e604:	012e012e 	.word	0x012e012e
 801e608:	012e012e 	.word	0x012e012e
 801e60c:	012e012e 	.word	0x012e012e
 801e610:	012e012e 	.word	0x012e012e
 801e614:	012e012e 	.word	0x012e012e
 801e618:	012e012e 	.word	0x012e012e
 801e61c:	00ee012e 	.word	0x00ee012e
 801e620:	00f00108 	.word	0x00f00108
 801e624:	012e00f2 	.word	0x012e00f2
 801e628:	012e012e 	.word	0x012e012e
 801e62c:	012e00f4 	.word	0x012e00f4
 801e630:	012e012e 	.word	0x012e012e
 801e634:	012e00f6 	.word	0x012e00f6
 801e638:	00fa012e 	.word	0x00fa012e
 801e63c:	012e012e 	.word	0x012e012e
 801e640:	012e00fc 	.word	0x012e00fc
 801e644:	012e012e 	.word	0x012e012e
 801e648:	012e012e 	.word	0x012e012e
 801e64c:	012e012e 	.word	0x012e012e
 801e650:	012e012e 	.word	0x012e012e
 801e654:	00fe012e 	.word	0x00fe012e
 801e658:	0100012e 	.word	0x0100012e
 801e65c:	01040102 	.word	0x01040102
 801e660:	012e012e 	.word	0x012e012e
 801e664:	012e0126 	.word	0x012e0126
 801e668:	012e012e 	.word	0x012e012e
 801e66c:	012e012e 	.word	0x012e012e
 801e670:	012e012e 	.word	0x012e012e
 801e674:	0114012e 	.word	0x0114012e
 801e678:	010a0106 	.word	0x010a0106
 801e67c:	010e010c 	.word	0x010e010c
 801e680:	012e0110 	.word	0x012e0110
 801e684:	01160112 	.word	0x01160112
 801e688:	00ea011a 	.word	0x00ea011a
 801e68c:	012c00c2 	.word	0x012c00c2
 801e690:	00d000ba 	.word	0x00d000ba
 801e694:	00a000bc 	.word	0x00a000bc
 801e698:	012a00a6 	.word	0x012a00a6
 801e69c:	012e00f8 	.word	0x012e00f8
 801e6a0:	00c40118 	.word	0x00c40118
 801e6a4:	011c011e 	.word	0x011c011e
 801e6a8:	012e012e 	.word	0x012e012e
 801e6ac:	012e012e 	.word	0x012e012e
 801e6b0:	00d4012e 	.word	0x00d4012e
 801e6b4:	012e012e 	.word	0x012e012e
 801e6b8:	00e6012e 	.word	0x00e6012e
 801e6bc:	01200128 	.word	0x01200128
 801e6c0:	01240122 	.word	0x01240122
 801e6c4:	4b55      	ldr	r3, [pc, #340]	; (801e81c <_strerror_r+0x288>)
 801e6c6:	4618      	mov	r0, r3
 801e6c8:	bd10      	pop	{r4, pc}
 801e6ca:	4b55      	ldr	r3, [pc, #340]	; (801e820 <_strerror_r+0x28c>)
 801e6cc:	e7fb      	b.n	801e6c6 <_strerror_r+0x132>
 801e6ce:	4b55      	ldr	r3, [pc, #340]	; (801e824 <_strerror_r+0x290>)
 801e6d0:	e7f9      	b.n	801e6c6 <_strerror_r+0x132>
 801e6d2:	4b55      	ldr	r3, [pc, #340]	; (801e828 <_strerror_r+0x294>)
 801e6d4:	e7f7      	b.n	801e6c6 <_strerror_r+0x132>
 801e6d6:	4b55      	ldr	r3, [pc, #340]	; (801e82c <_strerror_r+0x298>)
 801e6d8:	e7f5      	b.n	801e6c6 <_strerror_r+0x132>
 801e6da:	4b55      	ldr	r3, [pc, #340]	; (801e830 <_strerror_r+0x29c>)
 801e6dc:	e7f3      	b.n	801e6c6 <_strerror_r+0x132>
 801e6de:	4b55      	ldr	r3, [pc, #340]	; (801e834 <_strerror_r+0x2a0>)
 801e6e0:	e7f1      	b.n	801e6c6 <_strerror_r+0x132>
 801e6e2:	4b55      	ldr	r3, [pc, #340]	; (801e838 <_strerror_r+0x2a4>)
 801e6e4:	e7ef      	b.n	801e6c6 <_strerror_r+0x132>
 801e6e6:	4b55      	ldr	r3, [pc, #340]	; (801e83c <_strerror_r+0x2a8>)
 801e6e8:	e7ed      	b.n	801e6c6 <_strerror_r+0x132>
 801e6ea:	4b55      	ldr	r3, [pc, #340]	; (801e840 <_strerror_r+0x2ac>)
 801e6ec:	e7eb      	b.n	801e6c6 <_strerror_r+0x132>
 801e6ee:	4b55      	ldr	r3, [pc, #340]	; (801e844 <_strerror_r+0x2b0>)
 801e6f0:	e7e9      	b.n	801e6c6 <_strerror_r+0x132>
 801e6f2:	4b55      	ldr	r3, [pc, #340]	; (801e848 <_strerror_r+0x2b4>)
 801e6f4:	e7e7      	b.n	801e6c6 <_strerror_r+0x132>
 801e6f6:	4b55      	ldr	r3, [pc, #340]	; (801e84c <_strerror_r+0x2b8>)
 801e6f8:	e7e5      	b.n	801e6c6 <_strerror_r+0x132>
 801e6fa:	4b55      	ldr	r3, [pc, #340]	; (801e850 <_strerror_r+0x2bc>)
 801e6fc:	e7e3      	b.n	801e6c6 <_strerror_r+0x132>
 801e6fe:	4b55      	ldr	r3, [pc, #340]	; (801e854 <_strerror_r+0x2c0>)
 801e700:	e7e1      	b.n	801e6c6 <_strerror_r+0x132>
 801e702:	4b55      	ldr	r3, [pc, #340]	; (801e858 <_strerror_r+0x2c4>)
 801e704:	e7df      	b.n	801e6c6 <_strerror_r+0x132>
 801e706:	4b55      	ldr	r3, [pc, #340]	; (801e85c <_strerror_r+0x2c8>)
 801e708:	e7dd      	b.n	801e6c6 <_strerror_r+0x132>
 801e70a:	4b55      	ldr	r3, [pc, #340]	; (801e860 <_strerror_r+0x2cc>)
 801e70c:	e7db      	b.n	801e6c6 <_strerror_r+0x132>
 801e70e:	4b55      	ldr	r3, [pc, #340]	; (801e864 <_strerror_r+0x2d0>)
 801e710:	e7d9      	b.n	801e6c6 <_strerror_r+0x132>
 801e712:	4b55      	ldr	r3, [pc, #340]	; (801e868 <_strerror_r+0x2d4>)
 801e714:	e7d7      	b.n	801e6c6 <_strerror_r+0x132>
 801e716:	4b55      	ldr	r3, [pc, #340]	; (801e86c <_strerror_r+0x2d8>)
 801e718:	e7d5      	b.n	801e6c6 <_strerror_r+0x132>
 801e71a:	4b55      	ldr	r3, [pc, #340]	; (801e870 <_strerror_r+0x2dc>)
 801e71c:	e7d3      	b.n	801e6c6 <_strerror_r+0x132>
 801e71e:	4b55      	ldr	r3, [pc, #340]	; (801e874 <_strerror_r+0x2e0>)
 801e720:	e7d1      	b.n	801e6c6 <_strerror_r+0x132>
 801e722:	4b55      	ldr	r3, [pc, #340]	; (801e878 <_strerror_r+0x2e4>)
 801e724:	e7cf      	b.n	801e6c6 <_strerror_r+0x132>
 801e726:	4b55      	ldr	r3, [pc, #340]	; (801e87c <_strerror_r+0x2e8>)
 801e728:	e7cd      	b.n	801e6c6 <_strerror_r+0x132>
 801e72a:	4b55      	ldr	r3, [pc, #340]	; (801e880 <_strerror_r+0x2ec>)
 801e72c:	e7cb      	b.n	801e6c6 <_strerror_r+0x132>
 801e72e:	4b55      	ldr	r3, [pc, #340]	; (801e884 <_strerror_r+0x2f0>)
 801e730:	e7c9      	b.n	801e6c6 <_strerror_r+0x132>
 801e732:	4b55      	ldr	r3, [pc, #340]	; (801e888 <_strerror_r+0x2f4>)
 801e734:	e7c7      	b.n	801e6c6 <_strerror_r+0x132>
 801e736:	4b55      	ldr	r3, [pc, #340]	; (801e88c <_strerror_r+0x2f8>)
 801e738:	e7c5      	b.n	801e6c6 <_strerror_r+0x132>
 801e73a:	4b55      	ldr	r3, [pc, #340]	; (801e890 <_strerror_r+0x2fc>)
 801e73c:	e7c3      	b.n	801e6c6 <_strerror_r+0x132>
 801e73e:	4b55      	ldr	r3, [pc, #340]	; (801e894 <_strerror_r+0x300>)
 801e740:	e7c1      	b.n	801e6c6 <_strerror_r+0x132>
 801e742:	4b55      	ldr	r3, [pc, #340]	; (801e898 <_strerror_r+0x304>)
 801e744:	e7bf      	b.n	801e6c6 <_strerror_r+0x132>
 801e746:	4b55      	ldr	r3, [pc, #340]	; (801e89c <_strerror_r+0x308>)
 801e748:	e7bd      	b.n	801e6c6 <_strerror_r+0x132>
 801e74a:	4b55      	ldr	r3, [pc, #340]	; (801e8a0 <_strerror_r+0x30c>)
 801e74c:	e7bb      	b.n	801e6c6 <_strerror_r+0x132>
 801e74e:	4b55      	ldr	r3, [pc, #340]	; (801e8a4 <_strerror_r+0x310>)
 801e750:	e7b9      	b.n	801e6c6 <_strerror_r+0x132>
 801e752:	4b55      	ldr	r3, [pc, #340]	; (801e8a8 <_strerror_r+0x314>)
 801e754:	e7b7      	b.n	801e6c6 <_strerror_r+0x132>
 801e756:	4b55      	ldr	r3, [pc, #340]	; (801e8ac <_strerror_r+0x318>)
 801e758:	e7b5      	b.n	801e6c6 <_strerror_r+0x132>
 801e75a:	4b55      	ldr	r3, [pc, #340]	; (801e8b0 <_strerror_r+0x31c>)
 801e75c:	e7b3      	b.n	801e6c6 <_strerror_r+0x132>
 801e75e:	4b55      	ldr	r3, [pc, #340]	; (801e8b4 <_strerror_r+0x320>)
 801e760:	e7b1      	b.n	801e6c6 <_strerror_r+0x132>
 801e762:	4b55      	ldr	r3, [pc, #340]	; (801e8b8 <_strerror_r+0x324>)
 801e764:	e7af      	b.n	801e6c6 <_strerror_r+0x132>
 801e766:	4b55      	ldr	r3, [pc, #340]	; (801e8bc <_strerror_r+0x328>)
 801e768:	e7ad      	b.n	801e6c6 <_strerror_r+0x132>
 801e76a:	4b55      	ldr	r3, [pc, #340]	; (801e8c0 <_strerror_r+0x32c>)
 801e76c:	e7ab      	b.n	801e6c6 <_strerror_r+0x132>
 801e76e:	4b55      	ldr	r3, [pc, #340]	; (801e8c4 <_strerror_r+0x330>)
 801e770:	e7a9      	b.n	801e6c6 <_strerror_r+0x132>
 801e772:	4b55      	ldr	r3, [pc, #340]	; (801e8c8 <_strerror_r+0x334>)
 801e774:	e7a7      	b.n	801e6c6 <_strerror_r+0x132>
 801e776:	4b55      	ldr	r3, [pc, #340]	; (801e8cc <_strerror_r+0x338>)
 801e778:	e7a5      	b.n	801e6c6 <_strerror_r+0x132>
 801e77a:	4b55      	ldr	r3, [pc, #340]	; (801e8d0 <_strerror_r+0x33c>)
 801e77c:	e7a3      	b.n	801e6c6 <_strerror_r+0x132>
 801e77e:	4b55      	ldr	r3, [pc, #340]	; (801e8d4 <_strerror_r+0x340>)
 801e780:	e7a1      	b.n	801e6c6 <_strerror_r+0x132>
 801e782:	4b55      	ldr	r3, [pc, #340]	; (801e8d8 <_strerror_r+0x344>)
 801e784:	e79f      	b.n	801e6c6 <_strerror_r+0x132>
 801e786:	4b55      	ldr	r3, [pc, #340]	; (801e8dc <_strerror_r+0x348>)
 801e788:	e79d      	b.n	801e6c6 <_strerror_r+0x132>
 801e78a:	4b55      	ldr	r3, [pc, #340]	; (801e8e0 <_strerror_r+0x34c>)
 801e78c:	e79b      	b.n	801e6c6 <_strerror_r+0x132>
 801e78e:	4b55      	ldr	r3, [pc, #340]	; (801e8e4 <_strerror_r+0x350>)
 801e790:	e799      	b.n	801e6c6 <_strerror_r+0x132>
 801e792:	4b55      	ldr	r3, [pc, #340]	; (801e8e8 <_strerror_r+0x354>)
 801e794:	e797      	b.n	801e6c6 <_strerror_r+0x132>
 801e796:	4b55      	ldr	r3, [pc, #340]	; (801e8ec <_strerror_r+0x358>)
 801e798:	e795      	b.n	801e6c6 <_strerror_r+0x132>
 801e79a:	4b55      	ldr	r3, [pc, #340]	; (801e8f0 <_strerror_r+0x35c>)
 801e79c:	e793      	b.n	801e6c6 <_strerror_r+0x132>
 801e79e:	4b55      	ldr	r3, [pc, #340]	; (801e8f4 <_strerror_r+0x360>)
 801e7a0:	e791      	b.n	801e6c6 <_strerror_r+0x132>
 801e7a2:	4b55      	ldr	r3, [pc, #340]	; (801e8f8 <_strerror_r+0x364>)
 801e7a4:	e78f      	b.n	801e6c6 <_strerror_r+0x132>
 801e7a6:	4b55      	ldr	r3, [pc, #340]	; (801e8fc <_strerror_r+0x368>)
 801e7a8:	e78d      	b.n	801e6c6 <_strerror_r+0x132>
 801e7aa:	4b55      	ldr	r3, [pc, #340]	; (801e900 <_strerror_r+0x36c>)
 801e7ac:	e78b      	b.n	801e6c6 <_strerror_r+0x132>
 801e7ae:	4b55      	ldr	r3, [pc, #340]	; (801e904 <_strerror_r+0x370>)
 801e7b0:	e789      	b.n	801e6c6 <_strerror_r+0x132>
 801e7b2:	4b55      	ldr	r3, [pc, #340]	; (801e908 <_strerror_r+0x374>)
 801e7b4:	e787      	b.n	801e6c6 <_strerror_r+0x132>
 801e7b6:	4b55      	ldr	r3, [pc, #340]	; (801e90c <_strerror_r+0x378>)
 801e7b8:	e785      	b.n	801e6c6 <_strerror_r+0x132>
 801e7ba:	4b55      	ldr	r3, [pc, #340]	; (801e910 <_strerror_r+0x37c>)
 801e7bc:	e783      	b.n	801e6c6 <_strerror_r+0x132>
 801e7be:	4b55      	ldr	r3, [pc, #340]	; (801e914 <_strerror_r+0x380>)
 801e7c0:	e781      	b.n	801e6c6 <_strerror_r+0x132>
 801e7c2:	4b55      	ldr	r3, [pc, #340]	; (801e918 <_strerror_r+0x384>)
 801e7c4:	e77f      	b.n	801e6c6 <_strerror_r+0x132>
 801e7c6:	4b55      	ldr	r3, [pc, #340]	; (801e91c <_strerror_r+0x388>)
 801e7c8:	e77d      	b.n	801e6c6 <_strerror_r+0x132>
 801e7ca:	4b55      	ldr	r3, [pc, #340]	; (801e920 <_strerror_r+0x38c>)
 801e7cc:	e77b      	b.n	801e6c6 <_strerror_r+0x132>
 801e7ce:	4b55      	ldr	r3, [pc, #340]	; (801e924 <_strerror_r+0x390>)
 801e7d0:	e779      	b.n	801e6c6 <_strerror_r+0x132>
 801e7d2:	4b55      	ldr	r3, [pc, #340]	; (801e928 <_strerror_r+0x394>)
 801e7d4:	e777      	b.n	801e6c6 <_strerror_r+0x132>
 801e7d6:	4b55      	ldr	r3, [pc, #340]	; (801e92c <_strerror_r+0x398>)
 801e7d8:	e775      	b.n	801e6c6 <_strerror_r+0x132>
 801e7da:	4b55      	ldr	r3, [pc, #340]	; (801e930 <_strerror_r+0x39c>)
 801e7dc:	e773      	b.n	801e6c6 <_strerror_r+0x132>
 801e7de:	4b55      	ldr	r3, [pc, #340]	; (801e934 <_strerror_r+0x3a0>)
 801e7e0:	e771      	b.n	801e6c6 <_strerror_r+0x132>
 801e7e2:	4b55      	ldr	r3, [pc, #340]	; (801e938 <_strerror_r+0x3a4>)
 801e7e4:	e76f      	b.n	801e6c6 <_strerror_r+0x132>
 801e7e6:	4b55      	ldr	r3, [pc, #340]	; (801e93c <_strerror_r+0x3a8>)
 801e7e8:	e76d      	b.n	801e6c6 <_strerror_r+0x132>
 801e7ea:	4b55      	ldr	r3, [pc, #340]	; (801e940 <_strerror_r+0x3ac>)
 801e7ec:	e76b      	b.n	801e6c6 <_strerror_r+0x132>
 801e7ee:	4b55      	ldr	r3, [pc, #340]	; (801e944 <_strerror_r+0x3b0>)
 801e7f0:	e769      	b.n	801e6c6 <_strerror_r+0x132>
 801e7f2:	4b55      	ldr	r3, [pc, #340]	; (801e948 <_strerror_r+0x3b4>)
 801e7f4:	e767      	b.n	801e6c6 <_strerror_r+0x132>
 801e7f6:	4b55      	ldr	r3, [pc, #340]	; (801e94c <_strerror_r+0x3b8>)
 801e7f8:	e765      	b.n	801e6c6 <_strerror_r+0x132>
 801e7fa:	4b55      	ldr	r3, [pc, #340]	; (801e950 <_strerror_r+0x3bc>)
 801e7fc:	e763      	b.n	801e6c6 <_strerror_r+0x132>
 801e7fe:	4b55      	ldr	r3, [pc, #340]	; (801e954 <_strerror_r+0x3c0>)
 801e800:	e761      	b.n	801e6c6 <_strerror_r+0x132>
 801e802:	2b00      	cmp	r3, #0
 801e804:	bf14      	ite	ne
 801e806:	461a      	movne	r2, r3
 801e808:	4622      	moveq	r2, r4
 801e80a:	f000 f8c5 	bl	801e998 <_user_strerror>
 801e80e:	4b52      	ldr	r3, [pc, #328]	; (801e958 <_strerror_r+0x3c4>)
 801e810:	2800      	cmp	r0, #0
 801e812:	bf18      	it	ne
 801e814:	4603      	movne	r3, r0
 801e816:	e756      	b.n	801e6c6 <_strerror_r+0x132>
 801e818:	4b50      	ldr	r3, [pc, #320]	; (801e95c <_strerror_r+0x3c8>)
 801e81a:	e754      	b.n	801e6c6 <_strerror_r+0x132>
 801e81c:	08022ac4 	.word	0x08022ac4
 801e820:	08022ace 	.word	0x08022ace
 801e824:	08022ae8 	.word	0x08022ae8
 801e828:	08022af8 	.word	0x08022af8
 801e82c:	08022b10 	.word	0x08022b10
 801e830:	08022b1a 	.word	0x08022b1a
 801e834:	08022b34 	.word	0x08022b34
 801e838:	08022b46 	.word	0x08022b46
 801e83c:	08022b58 	.word	0x08022b58
 801e840:	08022b71 	.word	0x08022b71
 801e844:	08022b81 	.word	0x08022b81
 801e848:	08022b8d 	.word	0x08022b8d
 801e84c:	08022baa 	.word	0x08022baa
 801e850:	08022bbc 	.word	0x08022bbc
 801e854:	08022bcd 	.word	0x08022bcd
 801e858:	08022bdf 	.word	0x08022bdf
 801e85c:	08022beb 	.word	0x08022beb
 801e860:	08022c03 	.word	0x08022c03
 801e864:	08022c0f 	.word	0x08022c0f
 801e868:	08022c21 	.word	0x08022c21
 801e86c:	08022c30 	.word	0x08022c30
 801e870:	08022c40 	.word	0x08022c40
 801e874:	08022c4d 	.word	0x08022c4d
 801e878:	08022c6c 	.word	0x08022c6c
 801e87c:	08022c7b 	.word	0x08022c7b
 801e880:	08022c8c 	.word	0x08022c8c
 801e884:	08022cb0 	.word	0x08022cb0
 801e888:	08022cce 	.word	0x08022cce
 801e88c:	08022cec 	.word	0x08022cec
 801e890:	08022d0c 	.word	0x08022d0c
 801e894:	08022d23 	.word	0x08022d23
 801e898:	08022d32 	.word	0x08022d32
 801e89c:	08022d41 	.word	0x08022d41
 801e8a0:	08022d55 	.word	0x08022d55
 801e8a4:	08022d6d 	.word	0x08022d6d
 801e8a8:	08022d7b 	.word	0x08022d7b
 801e8ac:	08022d88 	.word	0x08022d88
 801e8b0:	08022d9e 	.word	0x08022d9e
 801e8b4:	08022dad 	.word	0x08022dad
 801e8b8:	08022db9 	.word	0x08022db9
 801e8bc:	08022de8 	.word	0x08022de8
 801e8c0:	08022df9 	.word	0x08022df9
 801e8c4:	08022e14 	.word	0x08022e14
 801e8c8:	08022e27 	.word	0x08022e27
 801e8cc:	08022e3d 	.word	0x08022e3d
 801e8d0:	08022e46 	.word	0x08022e46
 801e8d4:	08022e5d 	.word	0x08022e5d
 801e8d8:	08022e65 	.word	0x08022e65
 801e8dc:	08022e72 	.word	0x08022e72
 801e8e0:	08022e87 	.word	0x08022e87
 801e8e4:	08022e9b 	.word	0x08022e9b
 801e8e8:	08022eb3 	.word	0x08022eb3
 801e8ec:	08022ec2 	.word	0x08022ec2
 801e8f0:	08022ed3 	.word	0x08022ed3
 801e8f4:	08022ee6 	.word	0x08022ee6
 801e8f8:	08022ef2 	.word	0x08022ef2
 801e8fc:	08022f0b 	.word	0x08022f0b
 801e900:	08022f1f 	.word	0x08022f1f
 801e904:	08022f3a 	.word	0x08022f3a
 801e908:	08022f52 	.word	0x08022f52
 801e90c:	08022f6c 	.word	0x08022f6c
 801e910:	08022f74 	.word	0x08022f74
 801e914:	08022fa4 	.word	0x08022fa4
 801e918:	08022fc3 	.word	0x08022fc3
 801e91c:	08022fe2 	.word	0x08022fe2
 801e920:	08022ff9 	.word	0x08022ff9
 801e924:	0802300c 	.word	0x0802300c
 801e928:	08023025 	.word	0x08023025
 801e92c:	0802303c 	.word	0x0802303c
 801e930:	08023052 	.word	0x08023052
 801e934:	08023073 	.word	0x08023073
 801e938:	0802308b 	.word	0x0802308b
 801e93c:	080230a7 	.word	0x080230a7
 801e940:	080230ba 	.word	0x080230ba
 801e944:	080230d0 	.word	0x080230d0
 801e948:	080230e4 	.word	0x080230e4
 801e94c:	08023106 	.word	0x08023106
 801e950:	0802312c 	.word	0x0802312c
 801e954:	0802313d 	.word	0x0802313d
 801e958:	08022a87 	.word	0x08022a87
 801e95c:	08022abc 	.word	0x08022abc

0801e960 <strerror>:
 801e960:	4601      	mov	r1, r0
 801e962:	4803      	ldr	r0, [pc, #12]	; (801e970 <strerror+0x10>)
 801e964:	2300      	movs	r3, #0
 801e966:	6800      	ldr	r0, [r0, #0]
 801e968:	461a      	mov	r2, r3
 801e96a:	f7ff be13 	b.w	801e594 <_strerror_r>
 801e96e:	bf00      	nop
 801e970:	200001f0 	.word	0x200001f0

0801e974 <strncmp>:
 801e974:	b510      	push	{r4, lr}
 801e976:	b16a      	cbz	r2, 801e994 <strncmp+0x20>
 801e978:	3901      	subs	r1, #1
 801e97a:	1884      	adds	r4, r0, r2
 801e97c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e980:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e984:	429a      	cmp	r2, r3
 801e986:	d103      	bne.n	801e990 <strncmp+0x1c>
 801e988:	42a0      	cmp	r0, r4
 801e98a:	d001      	beq.n	801e990 <strncmp+0x1c>
 801e98c:	2a00      	cmp	r2, #0
 801e98e:	d1f5      	bne.n	801e97c <strncmp+0x8>
 801e990:	1ad0      	subs	r0, r2, r3
 801e992:	bd10      	pop	{r4, pc}
 801e994:	4610      	mov	r0, r2
 801e996:	e7fc      	b.n	801e992 <strncmp+0x1e>

0801e998 <_user_strerror>:
 801e998:	2000      	movs	r0, #0
 801e99a:	4770      	bx	lr

0801e99c <memcmp>:
 801e99c:	b510      	push	{r4, lr}
 801e99e:	3901      	subs	r1, #1
 801e9a0:	4402      	add	r2, r0
 801e9a2:	4290      	cmp	r0, r2
 801e9a4:	d101      	bne.n	801e9aa <memcmp+0xe>
 801e9a6:	2000      	movs	r0, #0
 801e9a8:	e005      	b.n	801e9b6 <memcmp+0x1a>
 801e9aa:	7803      	ldrb	r3, [r0, #0]
 801e9ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e9b0:	42a3      	cmp	r3, r4
 801e9b2:	d001      	beq.n	801e9b8 <memcmp+0x1c>
 801e9b4:	1b18      	subs	r0, r3, r4
 801e9b6:	bd10      	pop	{r4, pc}
 801e9b8:	3001      	adds	r0, #1
 801e9ba:	e7f2      	b.n	801e9a2 <memcmp+0x6>

0801e9bc <memmove>:
 801e9bc:	4288      	cmp	r0, r1
 801e9be:	b510      	push	{r4, lr}
 801e9c0:	eb01 0402 	add.w	r4, r1, r2
 801e9c4:	d902      	bls.n	801e9cc <memmove+0x10>
 801e9c6:	4284      	cmp	r4, r0
 801e9c8:	4623      	mov	r3, r4
 801e9ca:	d807      	bhi.n	801e9dc <memmove+0x20>
 801e9cc:	1e43      	subs	r3, r0, #1
 801e9ce:	42a1      	cmp	r1, r4
 801e9d0:	d008      	beq.n	801e9e4 <memmove+0x28>
 801e9d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e9d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e9da:	e7f8      	b.n	801e9ce <memmove+0x12>
 801e9dc:	4402      	add	r2, r0
 801e9de:	4601      	mov	r1, r0
 801e9e0:	428a      	cmp	r2, r1
 801e9e2:	d100      	bne.n	801e9e6 <memmove+0x2a>
 801e9e4:	bd10      	pop	{r4, pc}
 801e9e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e9ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e9ee:	e7f7      	b.n	801e9e0 <memmove+0x24>

0801e9f0 <memset>:
 801e9f0:	4402      	add	r2, r0
 801e9f2:	4603      	mov	r3, r0
 801e9f4:	4293      	cmp	r3, r2
 801e9f6:	d100      	bne.n	801e9fa <memset+0xa>
 801e9f8:	4770      	bx	lr
 801e9fa:	f803 1b01 	strb.w	r1, [r3], #1
 801e9fe:	e7f9      	b.n	801e9f4 <memset+0x4>

0801ea00 <_localeconv_r>:
 801ea00:	4800      	ldr	r0, [pc, #0]	; (801ea04 <_localeconv_r+0x4>)
 801ea02:	4770      	bx	lr
 801ea04:	20000128 	.word	0x20000128

0801ea08 <_close_r>:
 801ea08:	b538      	push	{r3, r4, r5, lr}
 801ea0a:	4d06      	ldr	r5, [pc, #24]	; (801ea24 <_close_r+0x1c>)
 801ea0c:	2300      	movs	r3, #0
 801ea0e:	4604      	mov	r4, r0
 801ea10:	4608      	mov	r0, r1
 801ea12:	602b      	str	r3, [r5, #0]
 801ea14:	f7f0 f897 	bl	800eb46 <_close>
 801ea18:	1c43      	adds	r3, r0, #1
 801ea1a:	d102      	bne.n	801ea22 <_close_r+0x1a>
 801ea1c:	682b      	ldr	r3, [r5, #0]
 801ea1e:	b103      	cbz	r3, 801ea22 <_close_r+0x1a>
 801ea20:	6023      	str	r3, [r4, #0]
 801ea22:	bd38      	pop	{r3, r4, r5, pc}
 801ea24:	20005b58 	.word	0x20005b58

0801ea28 <_fstat_r>:
 801ea28:	b538      	push	{r3, r4, r5, lr}
 801ea2a:	4d07      	ldr	r5, [pc, #28]	; (801ea48 <_fstat_r+0x20>)
 801ea2c:	2300      	movs	r3, #0
 801ea2e:	4604      	mov	r4, r0
 801ea30:	4608      	mov	r0, r1
 801ea32:	4611      	mov	r1, r2
 801ea34:	602b      	str	r3, [r5, #0]
 801ea36:	f7f0 f892 	bl	800eb5e <_fstat>
 801ea3a:	1c43      	adds	r3, r0, #1
 801ea3c:	d102      	bne.n	801ea44 <_fstat_r+0x1c>
 801ea3e:	682b      	ldr	r3, [r5, #0]
 801ea40:	b103      	cbz	r3, 801ea44 <_fstat_r+0x1c>
 801ea42:	6023      	str	r3, [r4, #0]
 801ea44:	bd38      	pop	{r3, r4, r5, pc}
 801ea46:	bf00      	nop
 801ea48:	20005b58 	.word	0x20005b58

0801ea4c <_isatty_r>:
 801ea4c:	b538      	push	{r3, r4, r5, lr}
 801ea4e:	4d06      	ldr	r5, [pc, #24]	; (801ea68 <_isatty_r+0x1c>)
 801ea50:	2300      	movs	r3, #0
 801ea52:	4604      	mov	r4, r0
 801ea54:	4608      	mov	r0, r1
 801ea56:	602b      	str	r3, [r5, #0]
 801ea58:	f7f0 f891 	bl	800eb7e <_isatty>
 801ea5c:	1c43      	adds	r3, r0, #1
 801ea5e:	d102      	bne.n	801ea66 <_isatty_r+0x1a>
 801ea60:	682b      	ldr	r3, [r5, #0]
 801ea62:	b103      	cbz	r3, 801ea66 <_isatty_r+0x1a>
 801ea64:	6023      	str	r3, [r4, #0]
 801ea66:	bd38      	pop	{r3, r4, r5, pc}
 801ea68:	20005b58 	.word	0x20005b58

0801ea6c <_lseek_r>:
 801ea6c:	b538      	push	{r3, r4, r5, lr}
 801ea6e:	4d07      	ldr	r5, [pc, #28]	; (801ea8c <_lseek_r+0x20>)
 801ea70:	4604      	mov	r4, r0
 801ea72:	4608      	mov	r0, r1
 801ea74:	4611      	mov	r1, r2
 801ea76:	2200      	movs	r2, #0
 801ea78:	602a      	str	r2, [r5, #0]
 801ea7a:	461a      	mov	r2, r3
 801ea7c:	f7f0 f88a 	bl	800eb94 <_lseek>
 801ea80:	1c43      	adds	r3, r0, #1
 801ea82:	d102      	bne.n	801ea8a <_lseek_r+0x1e>
 801ea84:	682b      	ldr	r3, [r5, #0]
 801ea86:	b103      	cbz	r3, 801ea8a <_lseek_r+0x1e>
 801ea88:	6023      	str	r3, [r4, #0]
 801ea8a:	bd38      	pop	{r3, r4, r5, pc}
 801ea8c:	20005b58 	.word	0x20005b58

0801ea90 <_read_r>:
 801ea90:	b538      	push	{r3, r4, r5, lr}
 801ea92:	4d07      	ldr	r5, [pc, #28]	; (801eab0 <_read_r+0x20>)
 801ea94:	4604      	mov	r4, r0
 801ea96:	4608      	mov	r0, r1
 801ea98:	4611      	mov	r1, r2
 801ea9a:	2200      	movs	r2, #0
 801ea9c:	602a      	str	r2, [r5, #0]
 801ea9e:	461a      	mov	r2, r3
 801eaa0:	f7f0 f818 	bl	800ead4 <_read>
 801eaa4:	1c43      	adds	r3, r0, #1
 801eaa6:	d102      	bne.n	801eaae <_read_r+0x1e>
 801eaa8:	682b      	ldr	r3, [r5, #0]
 801eaaa:	b103      	cbz	r3, 801eaae <_read_r+0x1e>
 801eaac:	6023      	str	r3, [r4, #0]
 801eaae:	bd38      	pop	{r3, r4, r5, pc}
 801eab0:	20005b58 	.word	0x20005b58

0801eab4 <_raise_r>:
 801eab4:	291f      	cmp	r1, #31
 801eab6:	b538      	push	{r3, r4, r5, lr}
 801eab8:	4604      	mov	r4, r0
 801eaba:	460d      	mov	r5, r1
 801eabc:	d904      	bls.n	801eac8 <_raise_r+0x14>
 801eabe:	2316      	movs	r3, #22
 801eac0:	6003      	str	r3, [r0, #0]
 801eac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801eac6:	bd38      	pop	{r3, r4, r5, pc}
 801eac8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801eaca:	b112      	cbz	r2, 801ead2 <_raise_r+0x1e>
 801eacc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ead0:	b94b      	cbnz	r3, 801eae6 <_raise_r+0x32>
 801ead2:	4620      	mov	r0, r4
 801ead4:	f000 f830 	bl	801eb38 <_getpid_r>
 801ead8:	462a      	mov	r2, r5
 801eada:	4601      	mov	r1, r0
 801eadc:	4620      	mov	r0, r4
 801eade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eae2:	f000 b817 	b.w	801eb14 <_kill_r>
 801eae6:	2b01      	cmp	r3, #1
 801eae8:	d00a      	beq.n	801eb00 <_raise_r+0x4c>
 801eaea:	1c59      	adds	r1, r3, #1
 801eaec:	d103      	bne.n	801eaf6 <_raise_r+0x42>
 801eaee:	2316      	movs	r3, #22
 801eaf0:	6003      	str	r3, [r0, #0]
 801eaf2:	2001      	movs	r0, #1
 801eaf4:	e7e7      	b.n	801eac6 <_raise_r+0x12>
 801eaf6:	2400      	movs	r4, #0
 801eaf8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801eafc:	4628      	mov	r0, r5
 801eafe:	4798      	blx	r3
 801eb00:	2000      	movs	r0, #0
 801eb02:	e7e0      	b.n	801eac6 <_raise_r+0x12>

0801eb04 <raise>:
 801eb04:	4b02      	ldr	r3, [pc, #8]	; (801eb10 <raise+0xc>)
 801eb06:	4601      	mov	r1, r0
 801eb08:	6818      	ldr	r0, [r3, #0]
 801eb0a:	f7ff bfd3 	b.w	801eab4 <_raise_r>
 801eb0e:	bf00      	nop
 801eb10:	200001f0 	.word	0x200001f0

0801eb14 <_kill_r>:
 801eb14:	b538      	push	{r3, r4, r5, lr}
 801eb16:	4d07      	ldr	r5, [pc, #28]	; (801eb34 <_kill_r+0x20>)
 801eb18:	2300      	movs	r3, #0
 801eb1a:	4604      	mov	r4, r0
 801eb1c:	4608      	mov	r0, r1
 801eb1e:	4611      	mov	r1, r2
 801eb20:	602b      	str	r3, [r5, #0]
 801eb22:	f7ef ffbd 	bl	800eaa0 <_kill>
 801eb26:	1c43      	adds	r3, r0, #1
 801eb28:	d102      	bne.n	801eb30 <_kill_r+0x1c>
 801eb2a:	682b      	ldr	r3, [r5, #0]
 801eb2c:	b103      	cbz	r3, 801eb30 <_kill_r+0x1c>
 801eb2e:	6023      	str	r3, [r4, #0]
 801eb30:	bd38      	pop	{r3, r4, r5, pc}
 801eb32:	bf00      	nop
 801eb34:	20005b58 	.word	0x20005b58

0801eb38 <_getpid_r>:
 801eb38:	f7ef bfaa 	b.w	800ea90 <_getpid>

0801eb3c <_sbrk_r>:
 801eb3c:	b538      	push	{r3, r4, r5, lr}
 801eb3e:	4d06      	ldr	r5, [pc, #24]	; (801eb58 <_sbrk_r+0x1c>)
 801eb40:	2300      	movs	r3, #0
 801eb42:	4604      	mov	r4, r0
 801eb44:	4608      	mov	r0, r1
 801eb46:	602b      	str	r3, [r5, #0]
 801eb48:	f7f0 f832 	bl	800ebb0 <_sbrk>
 801eb4c:	1c43      	adds	r3, r0, #1
 801eb4e:	d102      	bne.n	801eb56 <_sbrk_r+0x1a>
 801eb50:	682b      	ldr	r3, [r5, #0]
 801eb52:	b103      	cbz	r3, 801eb56 <_sbrk_r+0x1a>
 801eb54:	6023      	str	r3, [r4, #0]
 801eb56:	bd38      	pop	{r3, r4, r5, pc}
 801eb58:	20005b58 	.word	0x20005b58

0801eb5c <_write_r>:
 801eb5c:	b538      	push	{r3, r4, r5, lr}
 801eb5e:	4d07      	ldr	r5, [pc, #28]	; (801eb7c <_write_r+0x20>)
 801eb60:	4604      	mov	r4, r0
 801eb62:	4608      	mov	r0, r1
 801eb64:	4611      	mov	r1, r2
 801eb66:	2200      	movs	r2, #0
 801eb68:	602a      	str	r2, [r5, #0]
 801eb6a:	461a      	mov	r2, r3
 801eb6c:	f7ef ffcf 	bl	800eb0e <_write>
 801eb70:	1c43      	adds	r3, r0, #1
 801eb72:	d102      	bne.n	801eb7a <_write_r+0x1e>
 801eb74:	682b      	ldr	r3, [r5, #0]
 801eb76:	b103      	cbz	r3, 801eb7a <_write_r+0x1e>
 801eb78:	6023      	str	r3, [r4, #0]
 801eb7a:	bd38      	pop	{r3, r4, r5, pc}
 801eb7c:	20005b58 	.word	0x20005b58

0801eb80 <__errno>:
 801eb80:	4b01      	ldr	r3, [pc, #4]	; (801eb88 <__errno+0x8>)
 801eb82:	6818      	ldr	r0, [r3, #0]
 801eb84:	4770      	bx	lr
 801eb86:	bf00      	nop
 801eb88:	200001f0 	.word	0x200001f0

0801eb8c <__libc_init_array>:
 801eb8c:	b570      	push	{r4, r5, r6, lr}
 801eb8e:	4d0d      	ldr	r5, [pc, #52]	; (801ebc4 <__libc_init_array+0x38>)
 801eb90:	4c0d      	ldr	r4, [pc, #52]	; (801ebc8 <__libc_init_array+0x3c>)
 801eb92:	1b64      	subs	r4, r4, r5
 801eb94:	10a4      	asrs	r4, r4, #2
 801eb96:	2600      	movs	r6, #0
 801eb98:	42a6      	cmp	r6, r4
 801eb9a:	d109      	bne.n	801ebb0 <__libc_init_array+0x24>
 801eb9c:	4d0b      	ldr	r5, [pc, #44]	; (801ebcc <__libc_init_array+0x40>)
 801eb9e:	4c0c      	ldr	r4, [pc, #48]	; (801ebd0 <__libc_init_array+0x44>)
 801eba0:	f001 fe0a 	bl	80207b8 <_init>
 801eba4:	1b64      	subs	r4, r4, r5
 801eba6:	10a4      	asrs	r4, r4, #2
 801eba8:	2600      	movs	r6, #0
 801ebaa:	42a6      	cmp	r6, r4
 801ebac:	d105      	bne.n	801ebba <__libc_init_array+0x2e>
 801ebae:	bd70      	pop	{r4, r5, r6, pc}
 801ebb0:	f855 3b04 	ldr.w	r3, [r5], #4
 801ebb4:	4798      	blx	r3
 801ebb6:	3601      	adds	r6, #1
 801ebb8:	e7ee      	b.n	801eb98 <__libc_init_array+0xc>
 801ebba:	f855 3b04 	ldr.w	r3, [r5], #4
 801ebbe:	4798      	blx	r3
 801ebc0:	3601      	adds	r6, #1
 801ebc2:	e7f2      	b.n	801ebaa <__libc_init_array+0x1e>
 801ebc4:	080238c4 	.word	0x080238c4
 801ebc8:	080238c4 	.word	0x080238c4
 801ebcc:	080238c4 	.word	0x080238c4
 801ebd0:	080238ec 	.word	0x080238ec

0801ebd4 <__retarget_lock_init_recursive>:
 801ebd4:	4770      	bx	lr

0801ebd6 <__retarget_lock_acquire_recursive>:
 801ebd6:	4770      	bx	lr

0801ebd8 <__retarget_lock_release_recursive>:
 801ebd8:	4770      	bx	lr
	...

0801ebdc <__cxa_atexit>:
 801ebdc:	b510      	push	{r4, lr}
 801ebde:	4c05      	ldr	r4, [pc, #20]	; (801ebf4 <__cxa_atexit+0x18>)
 801ebe0:	4613      	mov	r3, r2
 801ebe2:	b12c      	cbz	r4, 801ebf0 <__cxa_atexit+0x14>
 801ebe4:	460a      	mov	r2, r1
 801ebe6:	4601      	mov	r1, r0
 801ebe8:	2002      	movs	r0, #2
 801ebea:	f3af 8000 	nop.w
 801ebee:	bd10      	pop	{r4, pc}
 801ebf0:	4620      	mov	r0, r4
 801ebf2:	e7fc      	b.n	801ebee <__cxa_atexit+0x12>
 801ebf4:	00000000 	.word	0x00000000

0801ebf8 <memcpy>:
 801ebf8:	440a      	add	r2, r1
 801ebfa:	4291      	cmp	r1, r2
 801ebfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ec00:	d100      	bne.n	801ec04 <memcpy+0xc>
 801ec02:	4770      	bx	lr
 801ec04:	b510      	push	{r4, lr}
 801ec06:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ec0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ec0e:	4291      	cmp	r1, r2
 801ec10:	d1f9      	bne.n	801ec06 <memcpy+0xe>
 801ec12:	bd10      	pop	{r4, pc}

0801ec14 <quorem>:
 801ec14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec18:	6903      	ldr	r3, [r0, #16]
 801ec1a:	690c      	ldr	r4, [r1, #16]
 801ec1c:	42a3      	cmp	r3, r4
 801ec1e:	4607      	mov	r7, r0
 801ec20:	db7e      	blt.n	801ed20 <quorem+0x10c>
 801ec22:	3c01      	subs	r4, #1
 801ec24:	f101 0814 	add.w	r8, r1, #20
 801ec28:	f100 0514 	add.w	r5, r0, #20
 801ec2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ec30:	9301      	str	r3, [sp, #4]
 801ec32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ec36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ec3a:	3301      	adds	r3, #1
 801ec3c:	429a      	cmp	r2, r3
 801ec3e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ec42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ec46:	fbb2 f6f3 	udiv	r6, r2, r3
 801ec4a:	d331      	bcc.n	801ecb0 <quorem+0x9c>
 801ec4c:	f04f 0e00 	mov.w	lr, #0
 801ec50:	4640      	mov	r0, r8
 801ec52:	46ac      	mov	ip, r5
 801ec54:	46f2      	mov	sl, lr
 801ec56:	f850 2b04 	ldr.w	r2, [r0], #4
 801ec5a:	b293      	uxth	r3, r2
 801ec5c:	fb06 e303 	mla	r3, r6, r3, lr
 801ec60:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ec64:	0c1a      	lsrs	r2, r3, #16
 801ec66:	b29b      	uxth	r3, r3
 801ec68:	ebaa 0303 	sub.w	r3, sl, r3
 801ec6c:	f8dc a000 	ldr.w	sl, [ip]
 801ec70:	fa13 f38a 	uxtah	r3, r3, sl
 801ec74:	fb06 220e 	mla	r2, r6, lr, r2
 801ec78:	9300      	str	r3, [sp, #0]
 801ec7a:	9b00      	ldr	r3, [sp, #0]
 801ec7c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ec80:	b292      	uxth	r2, r2
 801ec82:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801ec86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ec8a:	f8bd 3000 	ldrh.w	r3, [sp]
 801ec8e:	4581      	cmp	r9, r0
 801ec90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ec94:	f84c 3b04 	str.w	r3, [ip], #4
 801ec98:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801ec9c:	d2db      	bcs.n	801ec56 <quorem+0x42>
 801ec9e:	f855 300b 	ldr.w	r3, [r5, fp]
 801eca2:	b92b      	cbnz	r3, 801ecb0 <quorem+0x9c>
 801eca4:	9b01      	ldr	r3, [sp, #4]
 801eca6:	3b04      	subs	r3, #4
 801eca8:	429d      	cmp	r5, r3
 801ecaa:	461a      	mov	r2, r3
 801ecac:	d32c      	bcc.n	801ed08 <quorem+0xf4>
 801ecae:	613c      	str	r4, [r7, #16]
 801ecb0:	4638      	mov	r0, r7
 801ecb2:	f001 fc4f 	bl	8020554 <__mcmp>
 801ecb6:	2800      	cmp	r0, #0
 801ecb8:	db22      	blt.n	801ed00 <quorem+0xec>
 801ecba:	3601      	adds	r6, #1
 801ecbc:	4629      	mov	r1, r5
 801ecbe:	2000      	movs	r0, #0
 801ecc0:	f858 2b04 	ldr.w	r2, [r8], #4
 801ecc4:	f8d1 c000 	ldr.w	ip, [r1]
 801ecc8:	b293      	uxth	r3, r2
 801ecca:	1ac3      	subs	r3, r0, r3
 801eccc:	0c12      	lsrs	r2, r2, #16
 801ecce:	fa13 f38c 	uxtah	r3, r3, ip
 801ecd2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801ecd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ecda:	b29b      	uxth	r3, r3
 801ecdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ece0:	45c1      	cmp	r9, r8
 801ece2:	f841 3b04 	str.w	r3, [r1], #4
 801ece6:	ea4f 4022 	mov.w	r0, r2, asr #16
 801ecea:	d2e9      	bcs.n	801ecc0 <quorem+0xac>
 801ecec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ecf0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ecf4:	b922      	cbnz	r2, 801ed00 <quorem+0xec>
 801ecf6:	3b04      	subs	r3, #4
 801ecf8:	429d      	cmp	r5, r3
 801ecfa:	461a      	mov	r2, r3
 801ecfc:	d30a      	bcc.n	801ed14 <quorem+0x100>
 801ecfe:	613c      	str	r4, [r7, #16]
 801ed00:	4630      	mov	r0, r6
 801ed02:	b003      	add	sp, #12
 801ed04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed08:	6812      	ldr	r2, [r2, #0]
 801ed0a:	3b04      	subs	r3, #4
 801ed0c:	2a00      	cmp	r2, #0
 801ed0e:	d1ce      	bne.n	801ecae <quorem+0x9a>
 801ed10:	3c01      	subs	r4, #1
 801ed12:	e7c9      	b.n	801eca8 <quorem+0x94>
 801ed14:	6812      	ldr	r2, [r2, #0]
 801ed16:	3b04      	subs	r3, #4
 801ed18:	2a00      	cmp	r2, #0
 801ed1a:	d1f0      	bne.n	801ecfe <quorem+0xea>
 801ed1c:	3c01      	subs	r4, #1
 801ed1e:	e7eb      	b.n	801ecf8 <quorem+0xe4>
 801ed20:	2000      	movs	r0, #0
 801ed22:	e7ee      	b.n	801ed02 <quorem+0xee>
 801ed24:	0000      	movs	r0, r0
	...

0801ed28 <_dtoa_r>:
 801ed28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed2c:	ed2d 8b04 	vpush	{d8-d9}
 801ed30:	69c5      	ldr	r5, [r0, #28]
 801ed32:	b093      	sub	sp, #76	; 0x4c
 801ed34:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ed38:	ec57 6b10 	vmov	r6, r7, d0
 801ed3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801ed40:	9107      	str	r1, [sp, #28]
 801ed42:	4604      	mov	r4, r0
 801ed44:	920a      	str	r2, [sp, #40]	; 0x28
 801ed46:	930d      	str	r3, [sp, #52]	; 0x34
 801ed48:	b975      	cbnz	r5, 801ed68 <_dtoa_r+0x40>
 801ed4a:	2010      	movs	r0, #16
 801ed4c:	f7fe fe5c 	bl	801da08 <malloc>
 801ed50:	4602      	mov	r2, r0
 801ed52:	61e0      	str	r0, [r4, #28]
 801ed54:	b920      	cbnz	r0, 801ed60 <_dtoa_r+0x38>
 801ed56:	4bae      	ldr	r3, [pc, #696]	; (801f010 <_dtoa_r+0x2e8>)
 801ed58:	21ef      	movs	r1, #239	; 0xef
 801ed5a:	48ae      	ldr	r0, [pc, #696]	; (801f014 <_dtoa_r+0x2ec>)
 801ed5c:	f7fe fb60 	bl	801d420 <__assert_func>
 801ed60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ed64:	6005      	str	r5, [r0, #0]
 801ed66:	60c5      	str	r5, [r0, #12]
 801ed68:	69e3      	ldr	r3, [r4, #28]
 801ed6a:	6819      	ldr	r1, [r3, #0]
 801ed6c:	b151      	cbz	r1, 801ed84 <_dtoa_r+0x5c>
 801ed6e:	685a      	ldr	r2, [r3, #4]
 801ed70:	604a      	str	r2, [r1, #4]
 801ed72:	2301      	movs	r3, #1
 801ed74:	4093      	lsls	r3, r2
 801ed76:	608b      	str	r3, [r1, #8]
 801ed78:	4620      	mov	r0, r4
 801ed7a:	f001 f9af 	bl	80200dc <_Bfree>
 801ed7e:	69e3      	ldr	r3, [r4, #28]
 801ed80:	2200      	movs	r2, #0
 801ed82:	601a      	str	r2, [r3, #0]
 801ed84:	1e3b      	subs	r3, r7, #0
 801ed86:	bfbb      	ittet	lt
 801ed88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ed8c:	9303      	strlt	r3, [sp, #12]
 801ed8e:	2300      	movge	r3, #0
 801ed90:	2201      	movlt	r2, #1
 801ed92:	bfac      	ite	ge
 801ed94:	f8c8 3000 	strge.w	r3, [r8]
 801ed98:	f8c8 2000 	strlt.w	r2, [r8]
 801ed9c:	4b9e      	ldr	r3, [pc, #632]	; (801f018 <_dtoa_r+0x2f0>)
 801ed9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801eda2:	ea33 0308 	bics.w	r3, r3, r8
 801eda6:	d11b      	bne.n	801ede0 <_dtoa_r+0xb8>
 801eda8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801edaa:	f242 730f 	movw	r3, #9999	; 0x270f
 801edae:	6013      	str	r3, [r2, #0]
 801edb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801edb4:	4333      	orrs	r3, r6
 801edb6:	f000 8593 	beq.w	801f8e0 <_dtoa_r+0xbb8>
 801edba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801edbc:	b963      	cbnz	r3, 801edd8 <_dtoa_r+0xb0>
 801edbe:	4b97      	ldr	r3, [pc, #604]	; (801f01c <_dtoa_r+0x2f4>)
 801edc0:	e027      	b.n	801ee12 <_dtoa_r+0xea>
 801edc2:	4b97      	ldr	r3, [pc, #604]	; (801f020 <_dtoa_r+0x2f8>)
 801edc4:	9300      	str	r3, [sp, #0]
 801edc6:	3308      	adds	r3, #8
 801edc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801edca:	6013      	str	r3, [r2, #0]
 801edcc:	9800      	ldr	r0, [sp, #0]
 801edce:	b013      	add	sp, #76	; 0x4c
 801edd0:	ecbd 8b04 	vpop	{d8-d9}
 801edd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edd8:	4b90      	ldr	r3, [pc, #576]	; (801f01c <_dtoa_r+0x2f4>)
 801edda:	9300      	str	r3, [sp, #0]
 801eddc:	3303      	adds	r3, #3
 801edde:	e7f3      	b.n	801edc8 <_dtoa_r+0xa0>
 801ede0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ede4:	2200      	movs	r2, #0
 801ede6:	ec51 0b17 	vmov	r0, r1, d7
 801edea:	eeb0 8a47 	vmov.f32	s16, s14
 801edee:	eef0 8a67 	vmov.f32	s17, s15
 801edf2:	2300      	movs	r3, #0
 801edf4:	f7e7 fe4a 	bl	8006a8c <__aeabi_dcmpeq>
 801edf8:	4681      	mov	r9, r0
 801edfa:	b160      	cbz	r0, 801ee16 <_dtoa_r+0xee>
 801edfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801edfe:	2301      	movs	r3, #1
 801ee00:	6013      	str	r3, [r2, #0]
 801ee02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ee04:	2b00      	cmp	r3, #0
 801ee06:	f000 8568 	beq.w	801f8da <_dtoa_r+0xbb2>
 801ee0a:	4b86      	ldr	r3, [pc, #536]	; (801f024 <_dtoa_r+0x2fc>)
 801ee0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ee0e:	6013      	str	r3, [r2, #0]
 801ee10:	3b01      	subs	r3, #1
 801ee12:	9300      	str	r3, [sp, #0]
 801ee14:	e7da      	b.n	801edcc <_dtoa_r+0xa4>
 801ee16:	aa10      	add	r2, sp, #64	; 0x40
 801ee18:	a911      	add	r1, sp, #68	; 0x44
 801ee1a:	4620      	mov	r0, r4
 801ee1c:	eeb0 0a48 	vmov.f32	s0, s16
 801ee20:	eef0 0a68 	vmov.f32	s1, s17
 801ee24:	f001 fc3c 	bl	80206a0 <__d2b>
 801ee28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801ee2c:	4682      	mov	sl, r0
 801ee2e:	2d00      	cmp	r5, #0
 801ee30:	d07f      	beq.n	801ef32 <_dtoa_r+0x20a>
 801ee32:	ee18 3a90 	vmov	r3, s17
 801ee36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ee3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801ee3e:	ec51 0b18 	vmov	r0, r1, d8
 801ee42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801ee46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801ee4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801ee4e:	4619      	mov	r1, r3
 801ee50:	2200      	movs	r2, #0
 801ee52:	4b75      	ldr	r3, [pc, #468]	; (801f028 <_dtoa_r+0x300>)
 801ee54:	f7e7 f9fa 	bl	800624c <__aeabi_dsub>
 801ee58:	a367      	add	r3, pc, #412	; (adr r3, 801eff8 <_dtoa_r+0x2d0>)
 801ee5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee5e:	f7e7 fbad 	bl	80065bc <__aeabi_dmul>
 801ee62:	a367      	add	r3, pc, #412	; (adr r3, 801f000 <_dtoa_r+0x2d8>)
 801ee64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee68:	f7e7 f9f2 	bl	8006250 <__adddf3>
 801ee6c:	4606      	mov	r6, r0
 801ee6e:	4628      	mov	r0, r5
 801ee70:	460f      	mov	r7, r1
 801ee72:	f7e7 fb39 	bl	80064e8 <__aeabi_i2d>
 801ee76:	a364      	add	r3, pc, #400	; (adr r3, 801f008 <_dtoa_r+0x2e0>)
 801ee78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee7c:	f7e7 fb9e 	bl	80065bc <__aeabi_dmul>
 801ee80:	4602      	mov	r2, r0
 801ee82:	460b      	mov	r3, r1
 801ee84:	4630      	mov	r0, r6
 801ee86:	4639      	mov	r1, r7
 801ee88:	f7e7 f9e2 	bl	8006250 <__adddf3>
 801ee8c:	4606      	mov	r6, r0
 801ee8e:	460f      	mov	r7, r1
 801ee90:	f7e7 fe44 	bl	8006b1c <__aeabi_d2iz>
 801ee94:	2200      	movs	r2, #0
 801ee96:	4683      	mov	fp, r0
 801ee98:	2300      	movs	r3, #0
 801ee9a:	4630      	mov	r0, r6
 801ee9c:	4639      	mov	r1, r7
 801ee9e:	f7e7 fdff 	bl	8006aa0 <__aeabi_dcmplt>
 801eea2:	b148      	cbz	r0, 801eeb8 <_dtoa_r+0x190>
 801eea4:	4658      	mov	r0, fp
 801eea6:	f7e7 fb1f 	bl	80064e8 <__aeabi_i2d>
 801eeaa:	4632      	mov	r2, r6
 801eeac:	463b      	mov	r3, r7
 801eeae:	f7e7 fded 	bl	8006a8c <__aeabi_dcmpeq>
 801eeb2:	b908      	cbnz	r0, 801eeb8 <_dtoa_r+0x190>
 801eeb4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801eeb8:	f1bb 0f16 	cmp.w	fp, #22
 801eebc:	d857      	bhi.n	801ef6e <_dtoa_r+0x246>
 801eebe:	4b5b      	ldr	r3, [pc, #364]	; (801f02c <_dtoa_r+0x304>)
 801eec0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801eec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eec8:	ec51 0b18 	vmov	r0, r1, d8
 801eecc:	f7e7 fde8 	bl	8006aa0 <__aeabi_dcmplt>
 801eed0:	2800      	cmp	r0, #0
 801eed2:	d04e      	beq.n	801ef72 <_dtoa_r+0x24a>
 801eed4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801eed8:	2300      	movs	r3, #0
 801eeda:	930c      	str	r3, [sp, #48]	; 0x30
 801eedc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eede:	1b5b      	subs	r3, r3, r5
 801eee0:	1e5a      	subs	r2, r3, #1
 801eee2:	bf45      	ittet	mi
 801eee4:	f1c3 0301 	rsbmi	r3, r3, #1
 801eee8:	9305      	strmi	r3, [sp, #20]
 801eeea:	2300      	movpl	r3, #0
 801eeec:	2300      	movmi	r3, #0
 801eeee:	9206      	str	r2, [sp, #24]
 801eef0:	bf54      	ite	pl
 801eef2:	9305      	strpl	r3, [sp, #20]
 801eef4:	9306      	strmi	r3, [sp, #24]
 801eef6:	f1bb 0f00 	cmp.w	fp, #0
 801eefa:	db3c      	blt.n	801ef76 <_dtoa_r+0x24e>
 801eefc:	9b06      	ldr	r3, [sp, #24]
 801eefe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801ef02:	445b      	add	r3, fp
 801ef04:	9306      	str	r3, [sp, #24]
 801ef06:	2300      	movs	r3, #0
 801ef08:	9308      	str	r3, [sp, #32]
 801ef0a:	9b07      	ldr	r3, [sp, #28]
 801ef0c:	2b09      	cmp	r3, #9
 801ef0e:	d868      	bhi.n	801efe2 <_dtoa_r+0x2ba>
 801ef10:	2b05      	cmp	r3, #5
 801ef12:	bfc4      	itt	gt
 801ef14:	3b04      	subgt	r3, #4
 801ef16:	9307      	strgt	r3, [sp, #28]
 801ef18:	9b07      	ldr	r3, [sp, #28]
 801ef1a:	f1a3 0302 	sub.w	r3, r3, #2
 801ef1e:	bfcc      	ite	gt
 801ef20:	2500      	movgt	r5, #0
 801ef22:	2501      	movle	r5, #1
 801ef24:	2b03      	cmp	r3, #3
 801ef26:	f200 8085 	bhi.w	801f034 <_dtoa_r+0x30c>
 801ef2a:	e8df f003 	tbb	[pc, r3]
 801ef2e:	3b2e      	.short	0x3b2e
 801ef30:	5839      	.short	0x5839
 801ef32:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801ef36:	441d      	add	r5, r3
 801ef38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801ef3c:	2b20      	cmp	r3, #32
 801ef3e:	bfc1      	itttt	gt
 801ef40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ef44:	fa08 f803 	lslgt.w	r8, r8, r3
 801ef48:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801ef4c:	fa26 f303 	lsrgt.w	r3, r6, r3
 801ef50:	bfd6      	itet	le
 801ef52:	f1c3 0320 	rsble	r3, r3, #32
 801ef56:	ea48 0003 	orrgt.w	r0, r8, r3
 801ef5a:	fa06 f003 	lslle.w	r0, r6, r3
 801ef5e:	f7e7 fab3 	bl	80064c8 <__aeabi_ui2d>
 801ef62:	2201      	movs	r2, #1
 801ef64:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801ef68:	3d01      	subs	r5, #1
 801ef6a:	920e      	str	r2, [sp, #56]	; 0x38
 801ef6c:	e76f      	b.n	801ee4e <_dtoa_r+0x126>
 801ef6e:	2301      	movs	r3, #1
 801ef70:	e7b3      	b.n	801eeda <_dtoa_r+0x1b2>
 801ef72:	900c      	str	r0, [sp, #48]	; 0x30
 801ef74:	e7b2      	b.n	801eedc <_dtoa_r+0x1b4>
 801ef76:	9b05      	ldr	r3, [sp, #20]
 801ef78:	eba3 030b 	sub.w	r3, r3, fp
 801ef7c:	9305      	str	r3, [sp, #20]
 801ef7e:	f1cb 0300 	rsb	r3, fp, #0
 801ef82:	9308      	str	r3, [sp, #32]
 801ef84:	2300      	movs	r3, #0
 801ef86:	930b      	str	r3, [sp, #44]	; 0x2c
 801ef88:	e7bf      	b.n	801ef0a <_dtoa_r+0x1e2>
 801ef8a:	2300      	movs	r3, #0
 801ef8c:	9309      	str	r3, [sp, #36]	; 0x24
 801ef8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ef90:	2b00      	cmp	r3, #0
 801ef92:	dc52      	bgt.n	801f03a <_dtoa_r+0x312>
 801ef94:	2301      	movs	r3, #1
 801ef96:	9301      	str	r3, [sp, #4]
 801ef98:	9304      	str	r3, [sp, #16]
 801ef9a:	461a      	mov	r2, r3
 801ef9c:	920a      	str	r2, [sp, #40]	; 0x28
 801ef9e:	e00b      	b.n	801efb8 <_dtoa_r+0x290>
 801efa0:	2301      	movs	r3, #1
 801efa2:	e7f3      	b.n	801ef8c <_dtoa_r+0x264>
 801efa4:	2300      	movs	r3, #0
 801efa6:	9309      	str	r3, [sp, #36]	; 0x24
 801efa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801efaa:	445b      	add	r3, fp
 801efac:	9301      	str	r3, [sp, #4]
 801efae:	3301      	adds	r3, #1
 801efb0:	2b01      	cmp	r3, #1
 801efb2:	9304      	str	r3, [sp, #16]
 801efb4:	bfb8      	it	lt
 801efb6:	2301      	movlt	r3, #1
 801efb8:	69e0      	ldr	r0, [r4, #28]
 801efba:	2100      	movs	r1, #0
 801efbc:	2204      	movs	r2, #4
 801efbe:	f102 0614 	add.w	r6, r2, #20
 801efc2:	429e      	cmp	r6, r3
 801efc4:	d93d      	bls.n	801f042 <_dtoa_r+0x31a>
 801efc6:	6041      	str	r1, [r0, #4]
 801efc8:	4620      	mov	r0, r4
 801efca:	f001 f847 	bl	802005c <_Balloc>
 801efce:	9000      	str	r0, [sp, #0]
 801efd0:	2800      	cmp	r0, #0
 801efd2:	d139      	bne.n	801f048 <_dtoa_r+0x320>
 801efd4:	4b16      	ldr	r3, [pc, #88]	; (801f030 <_dtoa_r+0x308>)
 801efd6:	4602      	mov	r2, r0
 801efd8:	f240 11af 	movw	r1, #431	; 0x1af
 801efdc:	e6bd      	b.n	801ed5a <_dtoa_r+0x32>
 801efde:	2301      	movs	r3, #1
 801efe0:	e7e1      	b.n	801efa6 <_dtoa_r+0x27e>
 801efe2:	2501      	movs	r5, #1
 801efe4:	2300      	movs	r3, #0
 801efe6:	9307      	str	r3, [sp, #28]
 801efe8:	9509      	str	r5, [sp, #36]	; 0x24
 801efea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801efee:	9301      	str	r3, [sp, #4]
 801eff0:	9304      	str	r3, [sp, #16]
 801eff2:	2200      	movs	r2, #0
 801eff4:	2312      	movs	r3, #18
 801eff6:	e7d1      	b.n	801ef9c <_dtoa_r+0x274>
 801eff8:	636f4361 	.word	0x636f4361
 801effc:	3fd287a7 	.word	0x3fd287a7
 801f000:	8b60c8b3 	.word	0x8b60c8b3
 801f004:	3fc68a28 	.word	0x3fc68a28
 801f008:	509f79fb 	.word	0x509f79fb
 801f00c:	3fd34413 	.word	0x3fd34413
 801f010:	0802326a 	.word	0x0802326a
 801f014:	08023281 	.word	0x08023281
 801f018:	7ff00000 	.word	0x7ff00000
 801f01c:	08023266 	.word	0x08023266
 801f020:	0802325d 	.word	0x0802325d
 801f024:	08022a99 	.word	0x08022a99
 801f028:	3ff80000 	.word	0x3ff80000
 801f02c:	08023380 	.word	0x08023380
 801f030:	080232d9 	.word	0x080232d9
 801f034:	2301      	movs	r3, #1
 801f036:	9309      	str	r3, [sp, #36]	; 0x24
 801f038:	e7d7      	b.n	801efea <_dtoa_r+0x2c2>
 801f03a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f03c:	9301      	str	r3, [sp, #4]
 801f03e:	9304      	str	r3, [sp, #16]
 801f040:	e7ba      	b.n	801efb8 <_dtoa_r+0x290>
 801f042:	3101      	adds	r1, #1
 801f044:	0052      	lsls	r2, r2, #1
 801f046:	e7ba      	b.n	801efbe <_dtoa_r+0x296>
 801f048:	69e3      	ldr	r3, [r4, #28]
 801f04a:	9a00      	ldr	r2, [sp, #0]
 801f04c:	601a      	str	r2, [r3, #0]
 801f04e:	9b04      	ldr	r3, [sp, #16]
 801f050:	2b0e      	cmp	r3, #14
 801f052:	f200 80a8 	bhi.w	801f1a6 <_dtoa_r+0x47e>
 801f056:	2d00      	cmp	r5, #0
 801f058:	f000 80a5 	beq.w	801f1a6 <_dtoa_r+0x47e>
 801f05c:	f1bb 0f00 	cmp.w	fp, #0
 801f060:	dd38      	ble.n	801f0d4 <_dtoa_r+0x3ac>
 801f062:	4bc0      	ldr	r3, [pc, #768]	; (801f364 <_dtoa_r+0x63c>)
 801f064:	f00b 020f 	and.w	r2, fp, #15
 801f068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f06c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801f070:	e9d3 6700 	ldrd	r6, r7, [r3]
 801f074:	ea4f 182b 	mov.w	r8, fp, asr #4
 801f078:	d019      	beq.n	801f0ae <_dtoa_r+0x386>
 801f07a:	4bbb      	ldr	r3, [pc, #748]	; (801f368 <_dtoa_r+0x640>)
 801f07c:	ec51 0b18 	vmov	r0, r1, d8
 801f080:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f084:	f7e7 fbc4 	bl	8006810 <__aeabi_ddiv>
 801f088:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f08c:	f008 080f 	and.w	r8, r8, #15
 801f090:	2503      	movs	r5, #3
 801f092:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801f368 <_dtoa_r+0x640>
 801f096:	f1b8 0f00 	cmp.w	r8, #0
 801f09a:	d10a      	bne.n	801f0b2 <_dtoa_r+0x38a>
 801f09c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f0a0:	4632      	mov	r2, r6
 801f0a2:	463b      	mov	r3, r7
 801f0a4:	f7e7 fbb4 	bl	8006810 <__aeabi_ddiv>
 801f0a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f0ac:	e02b      	b.n	801f106 <_dtoa_r+0x3de>
 801f0ae:	2502      	movs	r5, #2
 801f0b0:	e7ef      	b.n	801f092 <_dtoa_r+0x36a>
 801f0b2:	f018 0f01 	tst.w	r8, #1
 801f0b6:	d008      	beq.n	801f0ca <_dtoa_r+0x3a2>
 801f0b8:	4630      	mov	r0, r6
 801f0ba:	4639      	mov	r1, r7
 801f0bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 801f0c0:	f7e7 fa7c 	bl	80065bc <__aeabi_dmul>
 801f0c4:	3501      	adds	r5, #1
 801f0c6:	4606      	mov	r6, r0
 801f0c8:	460f      	mov	r7, r1
 801f0ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 801f0ce:	f109 0908 	add.w	r9, r9, #8
 801f0d2:	e7e0      	b.n	801f096 <_dtoa_r+0x36e>
 801f0d4:	f000 809f 	beq.w	801f216 <_dtoa_r+0x4ee>
 801f0d8:	f1cb 0600 	rsb	r6, fp, #0
 801f0dc:	4ba1      	ldr	r3, [pc, #644]	; (801f364 <_dtoa_r+0x63c>)
 801f0de:	4fa2      	ldr	r7, [pc, #648]	; (801f368 <_dtoa_r+0x640>)
 801f0e0:	f006 020f 	and.w	r2, r6, #15
 801f0e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0ec:	ec51 0b18 	vmov	r0, r1, d8
 801f0f0:	f7e7 fa64 	bl	80065bc <__aeabi_dmul>
 801f0f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f0f8:	1136      	asrs	r6, r6, #4
 801f0fa:	2300      	movs	r3, #0
 801f0fc:	2502      	movs	r5, #2
 801f0fe:	2e00      	cmp	r6, #0
 801f100:	d17e      	bne.n	801f200 <_dtoa_r+0x4d8>
 801f102:	2b00      	cmp	r3, #0
 801f104:	d1d0      	bne.n	801f0a8 <_dtoa_r+0x380>
 801f106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f108:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801f10c:	2b00      	cmp	r3, #0
 801f10e:	f000 8084 	beq.w	801f21a <_dtoa_r+0x4f2>
 801f112:	4b96      	ldr	r3, [pc, #600]	; (801f36c <_dtoa_r+0x644>)
 801f114:	2200      	movs	r2, #0
 801f116:	4640      	mov	r0, r8
 801f118:	4649      	mov	r1, r9
 801f11a:	f7e7 fcc1 	bl	8006aa0 <__aeabi_dcmplt>
 801f11e:	2800      	cmp	r0, #0
 801f120:	d07b      	beq.n	801f21a <_dtoa_r+0x4f2>
 801f122:	9b04      	ldr	r3, [sp, #16]
 801f124:	2b00      	cmp	r3, #0
 801f126:	d078      	beq.n	801f21a <_dtoa_r+0x4f2>
 801f128:	9b01      	ldr	r3, [sp, #4]
 801f12a:	2b00      	cmp	r3, #0
 801f12c:	dd39      	ble.n	801f1a2 <_dtoa_r+0x47a>
 801f12e:	4b90      	ldr	r3, [pc, #576]	; (801f370 <_dtoa_r+0x648>)
 801f130:	2200      	movs	r2, #0
 801f132:	4640      	mov	r0, r8
 801f134:	4649      	mov	r1, r9
 801f136:	f7e7 fa41 	bl	80065bc <__aeabi_dmul>
 801f13a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f13e:	9e01      	ldr	r6, [sp, #4]
 801f140:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801f144:	3501      	adds	r5, #1
 801f146:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801f14a:	4628      	mov	r0, r5
 801f14c:	f7e7 f9cc 	bl	80064e8 <__aeabi_i2d>
 801f150:	4642      	mov	r2, r8
 801f152:	464b      	mov	r3, r9
 801f154:	f7e7 fa32 	bl	80065bc <__aeabi_dmul>
 801f158:	4b86      	ldr	r3, [pc, #536]	; (801f374 <_dtoa_r+0x64c>)
 801f15a:	2200      	movs	r2, #0
 801f15c:	f7e7 f878 	bl	8006250 <__adddf3>
 801f160:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801f164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f168:	9303      	str	r3, [sp, #12]
 801f16a:	2e00      	cmp	r6, #0
 801f16c:	d158      	bne.n	801f220 <_dtoa_r+0x4f8>
 801f16e:	4b82      	ldr	r3, [pc, #520]	; (801f378 <_dtoa_r+0x650>)
 801f170:	2200      	movs	r2, #0
 801f172:	4640      	mov	r0, r8
 801f174:	4649      	mov	r1, r9
 801f176:	f7e7 f869 	bl	800624c <__aeabi_dsub>
 801f17a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f17e:	4680      	mov	r8, r0
 801f180:	4689      	mov	r9, r1
 801f182:	f7e7 fcab 	bl	8006adc <__aeabi_dcmpgt>
 801f186:	2800      	cmp	r0, #0
 801f188:	f040 8296 	bne.w	801f6b8 <_dtoa_r+0x990>
 801f18c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801f190:	4640      	mov	r0, r8
 801f192:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f196:	4649      	mov	r1, r9
 801f198:	f7e7 fc82 	bl	8006aa0 <__aeabi_dcmplt>
 801f19c:	2800      	cmp	r0, #0
 801f19e:	f040 8289 	bne.w	801f6b4 <_dtoa_r+0x98c>
 801f1a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 801f1a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f1a8:	2b00      	cmp	r3, #0
 801f1aa:	f2c0 814e 	blt.w	801f44a <_dtoa_r+0x722>
 801f1ae:	f1bb 0f0e 	cmp.w	fp, #14
 801f1b2:	f300 814a 	bgt.w	801f44a <_dtoa_r+0x722>
 801f1b6:	4b6b      	ldr	r3, [pc, #428]	; (801f364 <_dtoa_r+0x63c>)
 801f1b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801f1bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f1c2:	2b00      	cmp	r3, #0
 801f1c4:	f280 80dc 	bge.w	801f380 <_dtoa_r+0x658>
 801f1c8:	9b04      	ldr	r3, [sp, #16]
 801f1ca:	2b00      	cmp	r3, #0
 801f1cc:	f300 80d8 	bgt.w	801f380 <_dtoa_r+0x658>
 801f1d0:	f040 826f 	bne.w	801f6b2 <_dtoa_r+0x98a>
 801f1d4:	4b68      	ldr	r3, [pc, #416]	; (801f378 <_dtoa_r+0x650>)
 801f1d6:	2200      	movs	r2, #0
 801f1d8:	4640      	mov	r0, r8
 801f1da:	4649      	mov	r1, r9
 801f1dc:	f7e7 f9ee 	bl	80065bc <__aeabi_dmul>
 801f1e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f1e4:	f7e7 fc70 	bl	8006ac8 <__aeabi_dcmpge>
 801f1e8:	9e04      	ldr	r6, [sp, #16]
 801f1ea:	4637      	mov	r7, r6
 801f1ec:	2800      	cmp	r0, #0
 801f1ee:	f040 8245 	bne.w	801f67c <_dtoa_r+0x954>
 801f1f2:	9d00      	ldr	r5, [sp, #0]
 801f1f4:	2331      	movs	r3, #49	; 0x31
 801f1f6:	f805 3b01 	strb.w	r3, [r5], #1
 801f1fa:	f10b 0b01 	add.w	fp, fp, #1
 801f1fe:	e241      	b.n	801f684 <_dtoa_r+0x95c>
 801f200:	07f2      	lsls	r2, r6, #31
 801f202:	d505      	bpl.n	801f210 <_dtoa_r+0x4e8>
 801f204:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f208:	f7e7 f9d8 	bl	80065bc <__aeabi_dmul>
 801f20c:	3501      	adds	r5, #1
 801f20e:	2301      	movs	r3, #1
 801f210:	1076      	asrs	r6, r6, #1
 801f212:	3708      	adds	r7, #8
 801f214:	e773      	b.n	801f0fe <_dtoa_r+0x3d6>
 801f216:	2502      	movs	r5, #2
 801f218:	e775      	b.n	801f106 <_dtoa_r+0x3de>
 801f21a:	9e04      	ldr	r6, [sp, #16]
 801f21c:	465f      	mov	r7, fp
 801f21e:	e792      	b.n	801f146 <_dtoa_r+0x41e>
 801f220:	9900      	ldr	r1, [sp, #0]
 801f222:	4b50      	ldr	r3, [pc, #320]	; (801f364 <_dtoa_r+0x63c>)
 801f224:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f228:	4431      	add	r1, r6
 801f22a:	9102      	str	r1, [sp, #8]
 801f22c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f22e:	eeb0 9a47 	vmov.f32	s18, s14
 801f232:	eef0 9a67 	vmov.f32	s19, s15
 801f236:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801f23a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f23e:	2900      	cmp	r1, #0
 801f240:	d044      	beq.n	801f2cc <_dtoa_r+0x5a4>
 801f242:	494e      	ldr	r1, [pc, #312]	; (801f37c <_dtoa_r+0x654>)
 801f244:	2000      	movs	r0, #0
 801f246:	f7e7 fae3 	bl	8006810 <__aeabi_ddiv>
 801f24a:	ec53 2b19 	vmov	r2, r3, d9
 801f24e:	f7e6 fffd 	bl	800624c <__aeabi_dsub>
 801f252:	9d00      	ldr	r5, [sp, #0]
 801f254:	ec41 0b19 	vmov	d9, r0, r1
 801f258:	4649      	mov	r1, r9
 801f25a:	4640      	mov	r0, r8
 801f25c:	f7e7 fc5e 	bl	8006b1c <__aeabi_d2iz>
 801f260:	4606      	mov	r6, r0
 801f262:	f7e7 f941 	bl	80064e8 <__aeabi_i2d>
 801f266:	4602      	mov	r2, r0
 801f268:	460b      	mov	r3, r1
 801f26a:	4640      	mov	r0, r8
 801f26c:	4649      	mov	r1, r9
 801f26e:	f7e6 ffed 	bl	800624c <__aeabi_dsub>
 801f272:	3630      	adds	r6, #48	; 0x30
 801f274:	f805 6b01 	strb.w	r6, [r5], #1
 801f278:	ec53 2b19 	vmov	r2, r3, d9
 801f27c:	4680      	mov	r8, r0
 801f27e:	4689      	mov	r9, r1
 801f280:	f7e7 fc0e 	bl	8006aa0 <__aeabi_dcmplt>
 801f284:	2800      	cmp	r0, #0
 801f286:	d164      	bne.n	801f352 <_dtoa_r+0x62a>
 801f288:	4642      	mov	r2, r8
 801f28a:	464b      	mov	r3, r9
 801f28c:	4937      	ldr	r1, [pc, #220]	; (801f36c <_dtoa_r+0x644>)
 801f28e:	2000      	movs	r0, #0
 801f290:	f7e6 ffdc 	bl	800624c <__aeabi_dsub>
 801f294:	ec53 2b19 	vmov	r2, r3, d9
 801f298:	f7e7 fc02 	bl	8006aa0 <__aeabi_dcmplt>
 801f29c:	2800      	cmp	r0, #0
 801f29e:	f040 80b6 	bne.w	801f40e <_dtoa_r+0x6e6>
 801f2a2:	9b02      	ldr	r3, [sp, #8]
 801f2a4:	429d      	cmp	r5, r3
 801f2a6:	f43f af7c 	beq.w	801f1a2 <_dtoa_r+0x47a>
 801f2aa:	4b31      	ldr	r3, [pc, #196]	; (801f370 <_dtoa_r+0x648>)
 801f2ac:	ec51 0b19 	vmov	r0, r1, d9
 801f2b0:	2200      	movs	r2, #0
 801f2b2:	f7e7 f983 	bl	80065bc <__aeabi_dmul>
 801f2b6:	4b2e      	ldr	r3, [pc, #184]	; (801f370 <_dtoa_r+0x648>)
 801f2b8:	ec41 0b19 	vmov	d9, r0, r1
 801f2bc:	2200      	movs	r2, #0
 801f2be:	4640      	mov	r0, r8
 801f2c0:	4649      	mov	r1, r9
 801f2c2:	f7e7 f97b 	bl	80065bc <__aeabi_dmul>
 801f2c6:	4680      	mov	r8, r0
 801f2c8:	4689      	mov	r9, r1
 801f2ca:	e7c5      	b.n	801f258 <_dtoa_r+0x530>
 801f2cc:	ec51 0b17 	vmov	r0, r1, d7
 801f2d0:	f7e7 f974 	bl	80065bc <__aeabi_dmul>
 801f2d4:	9b02      	ldr	r3, [sp, #8]
 801f2d6:	9d00      	ldr	r5, [sp, #0]
 801f2d8:	930f      	str	r3, [sp, #60]	; 0x3c
 801f2da:	ec41 0b19 	vmov	d9, r0, r1
 801f2de:	4649      	mov	r1, r9
 801f2e0:	4640      	mov	r0, r8
 801f2e2:	f7e7 fc1b 	bl	8006b1c <__aeabi_d2iz>
 801f2e6:	4606      	mov	r6, r0
 801f2e8:	f7e7 f8fe 	bl	80064e8 <__aeabi_i2d>
 801f2ec:	3630      	adds	r6, #48	; 0x30
 801f2ee:	4602      	mov	r2, r0
 801f2f0:	460b      	mov	r3, r1
 801f2f2:	4640      	mov	r0, r8
 801f2f4:	4649      	mov	r1, r9
 801f2f6:	f7e6 ffa9 	bl	800624c <__aeabi_dsub>
 801f2fa:	f805 6b01 	strb.w	r6, [r5], #1
 801f2fe:	9b02      	ldr	r3, [sp, #8]
 801f300:	429d      	cmp	r5, r3
 801f302:	4680      	mov	r8, r0
 801f304:	4689      	mov	r9, r1
 801f306:	f04f 0200 	mov.w	r2, #0
 801f30a:	d124      	bne.n	801f356 <_dtoa_r+0x62e>
 801f30c:	4b1b      	ldr	r3, [pc, #108]	; (801f37c <_dtoa_r+0x654>)
 801f30e:	ec51 0b19 	vmov	r0, r1, d9
 801f312:	f7e6 ff9d 	bl	8006250 <__adddf3>
 801f316:	4602      	mov	r2, r0
 801f318:	460b      	mov	r3, r1
 801f31a:	4640      	mov	r0, r8
 801f31c:	4649      	mov	r1, r9
 801f31e:	f7e7 fbdd 	bl	8006adc <__aeabi_dcmpgt>
 801f322:	2800      	cmp	r0, #0
 801f324:	d173      	bne.n	801f40e <_dtoa_r+0x6e6>
 801f326:	ec53 2b19 	vmov	r2, r3, d9
 801f32a:	4914      	ldr	r1, [pc, #80]	; (801f37c <_dtoa_r+0x654>)
 801f32c:	2000      	movs	r0, #0
 801f32e:	f7e6 ff8d 	bl	800624c <__aeabi_dsub>
 801f332:	4602      	mov	r2, r0
 801f334:	460b      	mov	r3, r1
 801f336:	4640      	mov	r0, r8
 801f338:	4649      	mov	r1, r9
 801f33a:	f7e7 fbb1 	bl	8006aa0 <__aeabi_dcmplt>
 801f33e:	2800      	cmp	r0, #0
 801f340:	f43f af2f 	beq.w	801f1a2 <_dtoa_r+0x47a>
 801f344:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801f346:	1e6b      	subs	r3, r5, #1
 801f348:	930f      	str	r3, [sp, #60]	; 0x3c
 801f34a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801f34e:	2b30      	cmp	r3, #48	; 0x30
 801f350:	d0f8      	beq.n	801f344 <_dtoa_r+0x61c>
 801f352:	46bb      	mov	fp, r7
 801f354:	e04a      	b.n	801f3ec <_dtoa_r+0x6c4>
 801f356:	4b06      	ldr	r3, [pc, #24]	; (801f370 <_dtoa_r+0x648>)
 801f358:	f7e7 f930 	bl	80065bc <__aeabi_dmul>
 801f35c:	4680      	mov	r8, r0
 801f35e:	4689      	mov	r9, r1
 801f360:	e7bd      	b.n	801f2de <_dtoa_r+0x5b6>
 801f362:	bf00      	nop
 801f364:	08023380 	.word	0x08023380
 801f368:	08023358 	.word	0x08023358
 801f36c:	3ff00000 	.word	0x3ff00000
 801f370:	40240000 	.word	0x40240000
 801f374:	401c0000 	.word	0x401c0000
 801f378:	40140000 	.word	0x40140000
 801f37c:	3fe00000 	.word	0x3fe00000
 801f380:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f384:	9d00      	ldr	r5, [sp, #0]
 801f386:	4642      	mov	r2, r8
 801f388:	464b      	mov	r3, r9
 801f38a:	4630      	mov	r0, r6
 801f38c:	4639      	mov	r1, r7
 801f38e:	f7e7 fa3f 	bl	8006810 <__aeabi_ddiv>
 801f392:	f7e7 fbc3 	bl	8006b1c <__aeabi_d2iz>
 801f396:	9001      	str	r0, [sp, #4]
 801f398:	f7e7 f8a6 	bl	80064e8 <__aeabi_i2d>
 801f39c:	4642      	mov	r2, r8
 801f39e:	464b      	mov	r3, r9
 801f3a0:	f7e7 f90c 	bl	80065bc <__aeabi_dmul>
 801f3a4:	4602      	mov	r2, r0
 801f3a6:	460b      	mov	r3, r1
 801f3a8:	4630      	mov	r0, r6
 801f3aa:	4639      	mov	r1, r7
 801f3ac:	f7e6 ff4e 	bl	800624c <__aeabi_dsub>
 801f3b0:	9e01      	ldr	r6, [sp, #4]
 801f3b2:	9f04      	ldr	r7, [sp, #16]
 801f3b4:	3630      	adds	r6, #48	; 0x30
 801f3b6:	f805 6b01 	strb.w	r6, [r5], #1
 801f3ba:	9e00      	ldr	r6, [sp, #0]
 801f3bc:	1bae      	subs	r6, r5, r6
 801f3be:	42b7      	cmp	r7, r6
 801f3c0:	4602      	mov	r2, r0
 801f3c2:	460b      	mov	r3, r1
 801f3c4:	d134      	bne.n	801f430 <_dtoa_r+0x708>
 801f3c6:	f7e6 ff43 	bl	8006250 <__adddf3>
 801f3ca:	4642      	mov	r2, r8
 801f3cc:	464b      	mov	r3, r9
 801f3ce:	4606      	mov	r6, r0
 801f3d0:	460f      	mov	r7, r1
 801f3d2:	f7e7 fb83 	bl	8006adc <__aeabi_dcmpgt>
 801f3d6:	b9c8      	cbnz	r0, 801f40c <_dtoa_r+0x6e4>
 801f3d8:	4642      	mov	r2, r8
 801f3da:	464b      	mov	r3, r9
 801f3dc:	4630      	mov	r0, r6
 801f3de:	4639      	mov	r1, r7
 801f3e0:	f7e7 fb54 	bl	8006a8c <__aeabi_dcmpeq>
 801f3e4:	b110      	cbz	r0, 801f3ec <_dtoa_r+0x6c4>
 801f3e6:	9b01      	ldr	r3, [sp, #4]
 801f3e8:	07db      	lsls	r3, r3, #31
 801f3ea:	d40f      	bmi.n	801f40c <_dtoa_r+0x6e4>
 801f3ec:	4651      	mov	r1, sl
 801f3ee:	4620      	mov	r0, r4
 801f3f0:	f000 fe74 	bl	80200dc <_Bfree>
 801f3f4:	2300      	movs	r3, #0
 801f3f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f3f8:	702b      	strb	r3, [r5, #0]
 801f3fa:	f10b 0301 	add.w	r3, fp, #1
 801f3fe:	6013      	str	r3, [r2, #0]
 801f400:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f402:	2b00      	cmp	r3, #0
 801f404:	f43f ace2 	beq.w	801edcc <_dtoa_r+0xa4>
 801f408:	601d      	str	r5, [r3, #0]
 801f40a:	e4df      	b.n	801edcc <_dtoa_r+0xa4>
 801f40c:	465f      	mov	r7, fp
 801f40e:	462b      	mov	r3, r5
 801f410:	461d      	mov	r5, r3
 801f412:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f416:	2a39      	cmp	r2, #57	; 0x39
 801f418:	d106      	bne.n	801f428 <_dtoa_r+0x700>
 801f41a:	9a00      	ldr	r2, [sp, #0]
 801f41c:	429a      	cmp	r2, r3
 801f41e:	d1f7      	bne.n	801f410 <_dtoa_r+0x6e8>
 801f420:	9900      	ldr	r1, [sp, #0]
 801f422:	2230      	movs	r2, #48	; 0x30
 801f424:	3701      	adds	r7, #1
 801f426:	700a      	strb	r2, [r1, #0]
 801f428:	781a      	ldrb	r2, [r3, #0]
 801f42a:	3201      	adds	r2, #1
 801f42c:	701a      	strb	r2, [r3, #0]
 801f42e:	e790      	b.n	801f352 <_dtoa_r+0x62a>
 801f430:	4ba3      	ldr	r3, [pc, #652]	; (801f6c0 <_dtoa_r+0x998>)
 801f432:	2200      	movs	r2, #0
 801f434:	f7e7 f8c2 	bl	80065bc <__aeabi_dmul>
 801f438:	2200      	movs	r2, #0
 801f43a:	2300      	movs	r3, #0
 801f43c:	4606      	mov	r6, r0
 801f43e:	460f      	mov	r7, r1
 801f440:	f7e7 fb24 	bl	8006a8c <__aeabi_dcmpeq>
 801f444:	2800      	cmp	r0, #0
 801f446:	d09e      	beq.n	801f386 <_dtoa_r+0x65e>
 801f448:	e7d0      	b.n	801f3ec <_dtoa_r+0x6c4>
 801f44a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f44c:	2a00      	cmp	r2, #0
 801f44e:	f000 80ca 	beq.w	801f5e6 <_dtoa_r+0x8be>
 801f452:	9a07      	ldr	r2, [sp, #28]
 801f454:	2a01      	cmp	r2, #1
 801f456:	f300 80ad 	bgt.w	801f5b4 <_dtoa_r+0x88c>
 801f45a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f45c:	2a00      	cmp	r2, #0
 801f45e:	f000 80a5 	beq.w	801f5ac <_dtoa_r+0x884>
 801f462:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801f466:	9e08      	ldr	r6, [sp, #32]
 801f468:	9d05      	ldr	r5, [sp, #20]
 801f46a:	9a05      	ldr	r2, [sp, #20]
 801f46c:	441a      	add	r2, r3
 801f46e:	9205      	str	r2, [sp, #20]
 801f470:	9a06      	ldr	r2, [sp, #24]
 801f472:	2101      	movs	r1, #1
 801f474:	441a      	add	r2, r3
 801f476:	4620      	mov	r0, r4
 801f478:	9206      	str	r2, [sp, #24]
 801f47a:	f000 fee5 	bl	8020248 <__i2b>
 801f47e:	4607      	mov	r7, r0
 801f480:	b165      	cbz	r5, 801f49c <_dtoa_r+0x774>
 801f482:	9b06      	ldr	r3, [sp, #24]
 801f484:	2b00      	cmp	r3, #0
 801f486:	dd09      	ble.n	801f49c <_dtoa_r+0x774>
 801f488:	42ab      	cmp	r3, r5
 801f48a:	9a05      	ldr	r2, [sp, #20]
 801f48c:	bfa8      	it	ge
 801f48e:	462b      	movge	r3, r5
 801f490:	1ad2      	subs	r2, r2, r3
 801f492:	9205      	str	r2, [sp, #20]
 801f494:	9a06      	ldr	r2, [sp, #24]
 801f496:	1aed      	subs	r5, r5, r3
 801f498:	1ad3      	subs	r3, r2, r3
 801f49a:	9306      	str	r3, [sp, #24]
 801f49c:	9b08      	ldr	r3, [sp, #32]
 801f49e:	b1f3      	cbz	r3, 801f4de <_dtoa_r+0x7b6>
 801f4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f4a2:	2b00      	cmp	r3, #0
 801f4a4:	f000 80a3 	beq.w	801f5ee <_dtoa_r+0x8c6>
 801f4a8:	2e00      	cmp	r6, #0
 801f4aa:	dd10      	ble.n	801f4ce <_dtoa_r+0x7a6>
 801f4ac:	4639      	mov	r1, r7
 801f4ae:	4632      	mov	r2, r6
 801f4b0:	4620      	mov	r0, r4
 801f4b2:	f000 ff89 	bl	80203c8 <__pow5mult>
 801f4b6:	4652      	mov	r2, sl
 801f4b8:	4601      	mov	r1, r0
 801f4ba:	4607      	mov	r7, r0
 801f4bc:	4620      	mov	r0, r4
 801f4be:	f000 fed9 	bl	8020274 <__multiply>
 801f4c2:	4651      	mov	r1, sl
 801f4c4:	4680      	mov	r8, r0
 801f4c6:	4620      	mov	r0, r4
 801f4c8:	f000 fe08 	bl	80200dc <_Bfree>
 801f4cc:	46c2      	mov	sl, r8
 801f4ce:	9b08      	ldr	r3, [sp, #32]
 801f4d0:	1b9a      	subs	r2, r3, r6
 801f4d2:	d004      	beq.n	801f4de <_dtoa_r+0x7b6>
 801f4d4:	4651      	mov	r1, sl
 801f4d6:	4620      	mov	r0, r4
 801f4d8:	f000 ff76 	bl	80203c8 <__pow5mult>
 801f4dc:	4682      	mov	sl, r0
 801f4de:	2101      	movs	r1, #1
 801f4e0:	4620      	mov	r0, r4
 801f4e2:	f000 feb1 	bl	8020248 <__i2b>
 801f4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	4606      	mov	r6, r0
 801f4ec:	f340 8081 	ble.w	801f5f2 <_dtoa_r+0x8ca>
 801f4f0:	461a      	mov	r2, r3
 801f4f2:	4601      	mov	r1, r0
 801f4f4:	4620      	mov	r0, r4
 801f4f6:	f000 ff67 	bl	80203c8 <__pow5mult>
 801f4fa:	9b07      	ldr	r3, [sp, #28]
 801f4fc:	2b01      	cmp	r3, #1
 801f4fe:	4606      	mov	r6, r0
 801f500:	dd7a      	ble.n	801f5f8 <_dtoa_r+0x8d0>
 801f502:	f04f 0800 	mov.w	r8, #0
 801f506:	6933      	ldr	r3, [r6, #16]
 801f508:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801f50c:	6918      	ldr	r0, [r3, #16]
 801f50e:	f000 fe4d 	bl	80201ac <__hi0bits>
 801f512:	f1c0 0020 	rsb	r0, r0, #32
 801f516:	9b06      	ldr	r3, [sp, #24]
 801f518:	4418      	add	r0, r3
 801f51a:	f010 001f 	ands.w	r0, r0, #31
 801f51e:	f000 8094 	beq.w	801f64a <_dtoa_r+0x922>
 801f522:	f1c0 0320 	rsb	r3, r0, #32
 801f526:	2b04      	cmp	r3, #4
 801f528:	f340 8085 	ble.w	801f636 <_dtoa_r+0x90e>
 801f52c:	9b05      	ldr	r3, [sp, #20]
 801f52e:	f1c0 001c 	rsb	r0, r0, #28
 801f532:	4403      	add	r3, r0
 801f534:	9305      	str	r3, [sp, #20]
 801f536:	9b06      	ldr	r3, [sp, #24]
 801f538:	4403      	add	r3, r0
 801f53a:	4405      	add	r5, r0
 801f53c:	9306      	str	r3, [sp, #24]
 801f53e:	9b05      	ldr	r3, [sp, #20]
 801f540:	2b00      	cmp	r3, #0
 801f542:	dd05      	ble.n	801f550 <_dtoa_r+0x828>
 801f544:	4651      	mov	r1, sl
 801f546:	461a      	mov	r2, r3
 801f548:	4620      	mov	r0, r4
 801f54a:	f000 ff97 	bl	802047c <__lshift>
 801f54e:	4682      	mov	sl, r0
 801f550:	9b06      	ldr	r3, [sp, #24]
 801f552:	2b00      	cmp	r3, #0
 801f554:	dd05      	ble.n	801f562 <_dtoa_r+0x83a>
 801f556:	4631      	mov	r1, r6
 801f558:	461a      	mov	r2, r3
 801f55a:	4620      	mov	r0, r4
 801f55c:	f000 ff8e 	bl	802047c <__lshift>
 801f560:	4606      	mov	r6, r0
 801f562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f564:	2b00      	cmp	r3, #0
 801f566:	d072      	beq.n	801f64e <_dtoa_r+0x926>
 801f568:	4631      	mov	r1, r6
 801f56a:	4650      	mov	r0, sl
 801f56c:	f000 fff2 	bl	8020554 <__mcmp>
 801f570:	2800      	cmp	r0, #0
 801f572:	da6c      	bge.n	801f64e <_dtoa_r+0x926>
 801f574:	2300      	movs	r3, #0
 801f576:	4651      	mov	r1, sl
 801f578:	220a      	movs	r2, #10
 801f57a:	4620      	mov	r0, r4
 801f57c:	f000 fdd0 	bl	8020120 <__multadd>
 801f580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f582:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801f586:	4682      	mov	sl, r0
 801f588:	2b00      	cmp	r3, #0
 801f58a:	f000 81b0 	beq.w	801f8ee <_dtoa_r+0xbc6>
 801f58e:	2300      	movs	r3, #0
 801f590:	4639      	mov	r1, r7
 801f592:	220a      	movs	r2, #10
 801f594:	4620      	mov	r0, r4
 801f596:	f000 fdc3 	bl	8020120 <__multadd>
 801f59a:	9b01      	ldr	r3, [sp, #4]
 801f59c:	2b00      	cmp	r3, #0
 801f59e:	4607      	mov	r7, r0
 801f5a0:	f300 8096 	bgt.w	801f6d0 <_dtoa_r+0x9a8>
 801f5a4:	9b07      	ldr	r3, [sp, #28]
 801f5a6:	2b02      	cmp	r3, #2
 801f5a8:	dc59      	bgt.n	801f65e <_dtoa_r+0x936>
 801f5aa:	e091      	b.n	801f6d0 <_dtoa_r+0x9a8>
 801f5ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f5ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f5b2:	e758      	b.n	801f466 <_dtoa_r+0x73e>
 801f5b4:	9b04      	ldr	r3, [sp, #16]
 801f5b6:	1e5e      	subs	r6, r3, #1
 801f5b8:	9b08      	ldr	r3, [sp, #32]
 801f5ba:	42b3      	cmp	r3, r6
 801f5bc:	bfbf      	itttt	lt
 801f5be:	9b08      	ldrlt	r3, [sp, #32]
 801f5c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801f5c2:	9608      	strlt	r6, [sp, #32]
 801f5c4:	1af3      	sublt	r3, r6, r3
 801f5c6:	bfb4      	ite	lt
 801f5c8:	18d2      	addlt	r2, r2, r3
 801f5ca:	1b9e      	subge	r6, r3, r6
 801f5cc:	9b04      	ldr	r3, [sp, #16]
 801f5ce:	bfbc      	itt	lt
 801f5d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801f5d2:	2600      	movlt	r6, #0
 801f5d4:	2b00      	cmp	r3, #0
 801f5d6:	bfb7      	itett	lt
 801f5d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801f5dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801f5e0:	1a9d      	sublt	r5, r3, r2
 801f5e2:	2300      	movlt	r3, #0
 801f5e4:	e741      	b.n	801f46a <_dtoa_r+0x742>
 801f5e6:	9e08      	ldr	r6, [sp, #32]
 801f5e8:	9d05      	ldr	r5, [sp, #20]
 801f5ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f5ec:	e748      	b.n	801f480 <_dtoa_r+0x758>
 801f5ee:	9a08      	ldr	r2, [sp, #32]
 801f5f0:	e770      	b.n	801f4d4 <_dtoa_r+0x7ac>
 801f5f2:	9b07      	ldr	r3, [sp, #28]
 801f5f4:	2b01      	cmp	r3, #1
 801f5f6:	dc19      	bgt.n	801f62c <_dtoa_r+0x904>
 801f5f8:	9b02      	ldr	r3, [sp, #8]
 801f5fa:	b9bb      	cbnz	r3, 801f62c <_dtoa_r+0x904>
 801f5fc:	9b03      	ldr	r3, [sp, #12]
 801f5fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f602:	b99b      	cbnz	r3, 801f62c <_dtoa_r+0x904>
 801f604:	9b03      	ldr	r3, [sp, #12]
 801f606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f60a:	0d1b      	lsrs	r3, r3, #20
 801f60c:	051b      	lsls	r3, r3, #20
 801f60e:	b183      	cbz	r3, 801f632 <_dtoa_r+0x90a>
 801f610:	9b05      	ldr	r3, [sp, #20]
 801f612:	3301      	adds	r3, #1
 801f614:	9305      	str	r3, [sp, #20]
 801f616:	9b06      	ldr	r3, [sp, #24]
 801f618:	3301      	adds	r3, #1
 801f61a:	9306      	str	r3, [sp, #24]
 801f61c:	f04f 0801 	mov.w	r8, #1
 801f620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f622:	2b00      	cmp	r3, #0
 801f624:	f47f af6f 	bne.w	801f506 <_dtoa_r+0x7de>
 801f628:	2001      	movs	r0, #1
 801f62a:	e774      	b.n	801f516 <_dtoa_r+0x7ee>
 801f62c:	f04f 0800 	mov.w	r8, #0
 801f630:	e7f6      	b.n	801f620 <_dtoa_r+0x8f8>
 801f632:	4698      	mov	r8, r3
 801f634:	e7f4      	b.n	801f620 <_dtoa_r+0x8f8>
 801f636:	d082      	beq.n	801f53e <_dtoa_r+0x816>
 801f638:	9a05      	ldr	r2, [sp, #20]
 801f63a:	331c      	adds	r3, #28
 801f63c:	441a      	add	r2, r3
 801f63e:	9205      	str	r2, [sp, #20]
 801f640:	9a06      	ldr	r2, [sp, #24]
 801f642:	441a      	add	r2, r3
 801f644:	441d      	add	r5, r3
 801f646:	9206      	str	r2, [sp, #24]
 801f648:	e779      	b.n	801f53e <_dtoa_r+0x816>
 801f64a:	4603      	mov	r3, r0
 801f64c:	e7f4      	b.n	801f638 <_dtoa_r+0x910>
 801f64e:	9b04      	ldr	r3, [sp, #16]
 801f650:	2b00      	cmp	r3, #0
 801f652:	dc37      	bgt.n	801f6c4 <_dtoa_r+0x99c>
 801f654:	9b07      	ldr	r3, [sp, #28]
 801f656:	2b02      	cmp	r3, #2
 801f658:	dd34      	ble.n	801f6c4 <_dtoa_r+0x99c>
 801f65a:	9b04      	ldr	r3, [sp, #16]
 801f65c:	9301      	str	r3, [sp, #4]
 801f65e:	9b01      	ldr	r3, [sp, #4]
 801f660:	b963      	cbnz	r3, 801f67c <_dtoa_r+0x954>
 801f662:	4631      	mov	r1, r6
 801f664:	2205      	movs	r2, #5
 801f666:	4620      	mov	r0, r4
 801f668:	f000 fd5a 	bl	8020120 <__multadd>
 801f66c:	4601      	mov	r1, r0
 801f66e:	4606      	mov	r6, r0
 801f670:	4650      	mov	r0, sl
 801f672:	f000 ff6f 	bl	8020554 <__mcmp>
 801f676:	2800      	cmp	r0, #0
 801f678:	f73f adbb 	bgt.w	801f1f2 <_dtoa_r+0x4ca>
 801f67c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f67e:	9d00      	ldr	r5, [sp, #0]
 801f680:	ea6f 0b03 	mvn.w	fp, r3
 801f684:	f04f 0800 	mov.w	r8, #0
 801f688:	4631      	mov	r1, r6
 801f68a:	4620      	mov	r0, r4
 801f68c:	f000 fd26 	bl	80200dc <_Bfree>
 801f690:	2f00      	cmp	r7, #0
 801f692:	f43f aeab 	beq.w	801f3ec <_dtoa_r+0x6c4>
 801f696:	f1b8 0f00 	cmp.w	r8, #0
 801f69a:	d005      	beq.n	801f6a8 <_dtoa_r+0x980>
 801f69c:	45b8      	cmp	r8, r7
 801f69e:	d003      	beq.n	801f6a8 <_dtoa_r+0x980>
 801f6a0:	4641      	mov	r1, r8
 801f6a2:	4620      	mov	r0, r4
 801f6a4:	f000 fd1a 	bl	80200dc <_Bfree>
 801f6a8:	4639      	mov	r1, r7
 801f6aa:	4620      	mov	r0, r4
 801f6ac:	f000 fd16 	bl	80200dc <_Bfree>
 801f6b0:	e69c      	b.n	801f3ec <_dtoa_r+0x6c4>
 801f6b2:	2600      	movs	r6, #0
 801f6b4:	4637      	mov	r7, r6
 801f6b6:	e7e1      	b.n	801f67c <_dtoa_r+0x954>
 801f6b8:	46bb      	mov	fp, r7
 801f6ba:	4637      	mov	r7, r6
 801f6bc:	e599      	b.n	801f1f2 <_dtoa_r+0x4ca>
 801f6be:	bf00      	nop
 801f6c0:	40240000 	.word	0x40240000
 801f6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6c6:	2b00      	cmp	r3, #0
 801f6c8:	f000 80c8 	beq.w	801f85c <_dtoa_r+0xb34>
 801f6cc:	9b04      	ldr	r3, [sp, #16]
 801f6ce:	9301      	str	r3, [sp, #4]
 801f6d0:	2d00      	cmp	r5, #0
 801f6d2:	dd05      	ble.n	801f6e0 <_dtoa_r+0x9b8>
 801f6d4:	4639      	mov	r1, r7
 801f6d6:	462a      	mov	r2, r5
 801f6d8:	4620      	mov	r0, r4
 801f6da:	f000 fecf 	bl	802047c <__lshift>
 801f6de:	4607      	mov	r7, r0
 801f6e0:	f1b8 0f00 	cmp.w	r8, #0
 801f6e4:	d05b      	beq.n	801f79e <_dtoa_r+0xa76>
 801f6e6:	6879      	ldr	r1, [r7, #4]
 801f6e8:	4620      	mov	r0, r4
 801f6ea:	f000 fcb7 	bl	802005c <_Balloc>
 801f6ee:	4605      	mov	r5, r0
 801f6f0:	b928      	cbnz	r0, 801f6fe <_dtoa_r+0x9d6>
 801f6f2:	4b83      	ldr	r3, [pc, #524]	; (801f900 <_dtoa_r+0xbd8>)
 801f6f4:	4602      	mov	r2, r0
 801f6f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 801f6fa:	f7ff bb2e 	b.w	801ed5a <_dtoa_r+0x32>
 801f6fe:	693a      	ldr	r2, [r7, #16]
 801f700:	3202      	adds	r2, #2
 801f702:	0092      	lsls	r2, r2, #2
 801f704:	f107 010c 	add.w	r1, r7, #12
 801f708:	300c      	adds	r0, #12
 801f70a:	f7ff fa75 	bl	801ebf8 <memcpy>
 801f70e:	2201      	movs	r2, #1
 801f710:	4629      	mov	r1, r5
 801f712:	4620      	mov	r0, r4
 801f714:	f000 feb2 	bl	802047c <__lshift>
 801f718:	9b00      	ldr	r3, [sp, #0]
 801f71a:	3301      	adds	r3, #1
 801f71c:	9304      	str	r3, [sp, #16]
 801f71e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f722:	4413      	add	r3, r2
 801f724:	9308      	str	r3, [sp, #32]
 801f726:	9b02      	ldr	r3, [sp, #8]
 801f728:	f003 0301 	and.w	r3, r3, #1
 801f72c:	46b8      	mov	r8, r7
 801f72e:	9306      	str	r3, [sp, #24]
 801f730:	4607      	mov	r7, r0
 801f732:	9b04      	ldr	r3, [sp, #16]
 801f734:	4631      	mov	r1, r6
 801f736:	3b01      	subs	r3, #1
 801f738:	4650      	mov	r0, sl
 801f73a:	9301      	str	r3, [sp, #4]
 801f73c:	f7ff fa6a 	bl	801ec14 <quorem>
 801f740:	4641      	mov	r1, r8
 801f742:	9002      	str	r0, [sp, #8]
 801f744:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801f748:	4650      	mov	r0, sl
 801f74a:	f000 ff03 	bl	8020554 <__mcmp>
 801f74e:	463a      	mov	r2, r7
 801f750:	9005      	str	r0, [sp, #20]
 801f752:	4631      	mov	r1, r6
 801f754:	4620      	mov	r0, r4
 801f756:	f000 ff19 	bl	802058c <__mdiff>
 801f75a:	68c2      	ldr	r2, [r0, #12]
 801f75c:	4605      	mov	r5, r0
 801f75e:	bb02      	cbnz	r2, 801f7a2 <_dtoa_r+0xa7a>
 801f760:	4601      	mov	r1, r0
 801f762:	4650      	mov	r0, sl
 801f764:	f000 fef6 	bl	8020554 <__mcmp>
 801f768:	4602      	mov	r2, r0
 801f76a:	4629      	mov	r1, r5
 801f76c:	4620      	mov	r0, r4
 801f76e:	9209      	str	r2, [sp, #36]	; 0x24
 801f770:	f000 fcb4 	bl	80200dc <_Bfree>
 801f774:	9b07      	ldr	r3, [sp, #28]
 801f776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f778:	9d04      	ldr	r5, [sp, #16]
 801f77a:	ea43 0102 	orr.w	r1, r3, r2
 801f77e:	9b06      	ldr	r3, [sp, #24]
 801f780:	4319      	orrs	r1, r3
 801f782:	d110      	bne.n	801f7a6 <_dtoa_r+0xa7e>
 801f784:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801f788:	d029      	beq.n	801f7de <_dtoa_r+0xab6>
 801f78a:	9b05      	ldr	r3, [sp, #20]
 801f78c:	2b00      	cmp	r3, #0
 801f78e:	dd02      	ble.n	801f796 <_dtoa_r+0xa6e>
 801f790:	9b02      	ldr	r3, [sp, #8]
 801f792:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801f796:	9b01      	ldr	r3, [sp, #4]
 801f798:	f883 9000 	strb.w	r9, [r3]
 801f79c:	e774      	b.n	801f688 <_dtoa_r+0x960>
 801f79e:	4638      	mov	r0, r7
 801f7a0:	e7ba      	b.n	801f718 <_dtoa_r+0x9f0>
 801f7a2:	2201      	movs	r2, #1
 801f7a4:	e7e1      	b.n	801f76a <_dtoa_r+0xa42>
 801f7a6:	9b05      	ldr	r3, [sp, #20]
 801f7a8:	2b00      	cmp	r3, #0
 801f7aa:	db04      	blt.n	801f7b6 <_dtoa_r+0xa8e>
 801f7ac:	9907      	ldr	r1, [sp, #28]
 801f7ae:	430b      	orrs	r3, r1
 801f7b0:	9906      	ldr	r1, [sp, #24]
 801f7b2:	430b      	orrs	r3, r1
 801f7b4:	d120      	bne.n	801f7f8 <_dtoa_r+0xad0>
 801f7b6:	2a00      	cmp	r2, #0
 801f7b8:	dded      	ble.n	801f796 <_dtoa_r+0xa6e>
 801f7ba:	4651      	mov	r1, sl
 801f7bc:	2201      	movs	r2, #1
 801f7be:	4620      	mov	r0, r4
 801f7c0:	f000 fe5c 	bl	802047c <__lshift>
 801f7c4:	4631      	mov	r1, r6
 801f7c6:	4682      	mov	sl, r0
 801f7c8:	f000 fec4 	bl	8020554 <__mcmp>
 801f7cc:	2800      	cmp	r0, #0
 801f7ce:	dc03      	bgt.n	801f7d8 <_dtoa_r+0xab0>
 801f7d0:	d1e1      	bne.n	801f796 <_dtoa_r+0xa6e>
 801f7d2:	f019 0f01 	tst.w	r9, #1
 801f7d6:	d0de      	beq.n	801f796 <_dtoa_r+0xa6e>
 801f7d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801f7dc:	d1d8      	bne.n	801f790 <_dtoa_r+0xa68>
 801f7de:	9a01      	ldr	r2, [sp, #4]
 801f7e0:	2339      	movs	r3, #57	; 0x39
 801f7e2:	7013      	strb	r3, [r2, #0]
 801f7e4:	462b      	mov	r3, r5
 801f7e6:	461d      	mov	r5, r3
 801f7e8:	3b01      	subs	r3, #1
 801f7ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801f7ee:	2a39      	cmp	r2, #57	; 0x39
 801f7f0:	d06c      	beq.n	801f8cc <_dtoa_r+0xba4>
 801f7f2:	3201      	adds	r2, #1
 801f7f4:	701a      	strb	r2, [r3, #0]
 801f7f6:	e747      	b.n	801f688 <_dtoa_r+0x960>
 801f7f8:	2a00      	cmp	r2, #0
 801f7fa:	dd07      	ble.n	801f80c <_dtoa_r+0xae4>
 801f7fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801f800:	d0ed      	beq.n	801f7de <_dtoa_r+0xab6>
 801f802:	9a01      	ldr	r2, [sp, #4]
 801f804:	f109 0301 	add.w	r3, r9, #1
 801f808:	7013      	strb	r3, [r2, #0]
 801f80a:	e73d      	b.n	801f688 <_dtoa_r+0x960>
 801f80c:	9b04      	ldr	r3, [sp, #16]
 801f80e:	9a08      	ldr	r2, [sp, #32]
 801f810:	f803 9c01 	strb.w	r9, [r3, #-1]
 801f814:	4293      	cmp	r3, r2
 801f816:	d043      	beq.n	801f8a0 <_dtoa_r+0xb78>
 801f818:	4651      	mov	r1, sl
 801f81a:	2300      	movs	r3, #0
 801f81c:	220a      	movs	r2, #10
 801f81e:	4620      	mov	r0, r4
 801f820:	f000 fc7e 	bl	8020120 <__multadd>
 801f824:	45b8      	cmp	r8, r7
 801f826:	4682      	mov	sl, r0
 801f828:	f04f 0300 	mov.w	r3, #0
 801f82c:	f04f 020a 	mov.w	r2, #10
 801f830:	4641      	mov	r1, r8
 801f832:	4620      	mov	r0, r4
 801f834:	d107      	bne.n	801f846 <_dtoa_r+0xb1e>
 801f836:	f000 fc73 	bl	8020120 <__multadd>
 801f83a:	4680      	mov	r8, r0
 801f83c:	4607      	mov	r7, r0
 801f83e:	9b04      	ldr	r3, [sp, #16]
 801f840:	3301      	adds	r3, #1
 801f842:	9304      	str	r3, [sp, #16]
 801f844:	e775      	b.n	801f732 <_dtoa_r+0xa0a>
 801f846:	f000 fc6b 	bl	8020120 <__multadd>
 801f84a:	4639      	mov	r1, r7
 801f84c:	4680      	mov	r8, r0
 801f84e:	2300      	movs	r3, #0
 801f850:	220a      	movs	r2, #10
 801f852:	4620      	mov	r0, r4
 801f854:	f000 fc64 	bl	8020120 <__multadd>
 801f858:	4607      	mov	r7, r0
 801f85a:	e7f0      	b.n	801f83e <_dtoa_r+0xb16>
 801f85c:	9b04      	ldr	r3, [sp, #16]
 801f85e:	9301      	str	r3, [sp, #4]
 801f860:	9d00      	ldr	r5, [sp, #0]
 801f862:	4631      	mov	r1, r6
 801f864:	4650      	mov	r0, sl
 801f866:	f7ff f9d5 	bl	801ec14 <quorem>
 801f86a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801f86e:	9b00      	ldr	r3, [sp, #0]
 801f870:	f805 9b01 	strb.w	r9, [r5], #1
 801f874:	1aea      	subs	r2, r5, r3
 801f876:	9b01      	ldr	r3, [sp, #4]
 801f878:	4293      	cmp	r3, r2
 801f87a:	dd07      	ble.n	801f88c <_dtoa_r+0xb64>
 801f87c:	4651      	mov	r1, sl
 801f87e:	2300      	movs	r3, #0
 801f880:	220a      	movs	r2, #10
 801f882:	4620      	mov	r0, r4
 801f884:	f000 fc4c 	bl	8020120 <__multadd>
 801f888:	4682      	mov	sl, r0
 801f88a:	e7ea      	b.n	801f862 <_dtoa_r+0xb3a>
 801f88c:	9b01      	ldr	r3, [sp, #4]
 801f88e:	2b00      	cmp	r3, #0
 801f890:	bfc8      	it	gt
 801f892:	461d      	movgt	r5, r3
 801f894:	9b00      	ldr	r3, [sp, #0]
 801f896:	bfd8      	it	le
 801f898:	2501      	movle	r5, #1
 801f89a:	441d      	add	r5, r3
 801f89c:	f04f 0800 	mov.w	r8, #0
 801f8a0:	4651      	mov	r1, sl
 801f8a2:	2201      	movs	r2, #1
 801f8a4:	4620      	mov	r0, r4
 801f8a6:	f000 fde9 	bl	802047c <__lshift>
 801f8aa:	4631      	mov	r1, r6
 801f8ac:	4682      	mov	sl, r0
 801f8ae:	f000 fe51 	bl	8020554 <__mcmp>
 801f8b2:	2800      	cmp	r0, #0
 801f8b4:	dc96      	bgt.n	801f7e4 <_dtoa_r+0xabc>
 801f8b6:	d102      	bne.n	801f8be <_dtoa_r+0xb96>
 801f8b8:	f019 0f01 	tst.w	r9, #1
 801f8bc:	d192      	bne.n	801f7e4 <_dtoa_r+0xabc>
 801f8be:	462b      	mov	r3, r5
 801f8c0:	461d      	mov	r5, r3
 801f8c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f8c6:	2a30      	cmp	r2, #48	; 0x30
 801f8c8:	d0fa      	beq.n	801f8c0 <_dtoa_r+0xb98>
 801f8ca:	e6dd      	b.n	801f688 <_dtoa_r+0x960>
 801f8cc:	9a00      	ldr	r2, [sp, #0]
 801f8ce:	429a      	cmp	r2, r3
 801f8d0:	d189      	bne.n	801f7e6 <_dtoa_r+0xabe>
 801f8d2:	f10b 0b01 	add.w	fp, fp, #1
 801f8d6:	2331      	movs	r3, #49	; 0x31
 801f8d8:	e796      	b.n	801f808 <_dtoa_r+0xae0>
 801f8da:	4b0a      	ldr	r3, [pc, #40]	; (801f904 <_dtoa_r+0xbdc>)
 801f8dc:	f7ff ba99 	b.w	801ee12 <_dtoa_r+0xea>
 801f8e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	f47f aa6d 	bne.w	801edc2 <_dtoa_r+0x9a>
 801f8e8:	4b07      	ldr	r3, [pc, #28]	; (801f908 <_dtoa_r+0xbe0>)
 801f8ea:	f7ff ba92 	b.w	801ee12 <_dtoa_r+0xea>
 801f8ee:	9b01      	ldr	r3, [sp, #4]
 801f8f0:	2b00      	cmp	r3, #0
 801f8f2:	dcb5      	bgt.n	801f860 <_dtoa_r+0xb38>
 801f8f4:	9b07      	ldr	r3, [sp, #28]
 801f8f6:	2b02      	cmp	r3, #2
 801f8f8:	f73f aeb1 	bgt.w	801f65e <_dtoa_r+0x936>
 801f8fc:	e7b0      	b.n	801f860 <_dtoa_r+0xb38>
 801f8fe:	bf00      	nop
 801f900:	080232d9 	.word	0x080232d9
 801f904:	08022a98 	.word	0x08022a98
 801f908:	0802325d 	.word	0x0802325d

0801f90c <_free_r>:
 801f90c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f90e:	2900      	cmp	r1, #0
 801f910:	d044      	beq.n	801f99c <_free_r+0x90>
 801f912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f916:	9001      	str	r0, [sp, #4]
 801f918:	2b00      	cmp	r3, #0
 801f91a:	f1a1 0404 	sub.w	r4, r1, #4
 801f91e:	bfb8      	it	lt
 801f920:	18e4      	addlt	r4, r4, r3
 801f922:	f7fe fab1 	bl	801de88 <__malloc_lock>
 801f926:	4a1e      	ldr	r2, [pc, #120]	; (801f9a0 <_free_r+0x94>)
 801f928:	9801      	ldr	r0, [sp, #4]
 801f92a:	6813      	ldr	r3, [r2, #0]
 801f92c:	b933      	cbnz	r3, 801f93c <_free_r+0x30>
 801f92e:	6063      	str	r3, [r4, #4]
 801f930:	6014      	str	r4, [r2, #0]
 801f932:	b003      	add	sp, #12
 801f934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f938:	f7fe baac 	b.w	801de94 <__malloc_unlock>
 801f93c:	42a3      	cmp	r3, r4
 801f93e:	d908      	bls.n	801f952 <_free_r+0x46>
 801f940:	6825      	ldr	r5, [r4, #0]
 801f942:	1961      	adds	r1, r4, r5
 801f944:	428b      	cmp	r3, r1
 801f946:	bf01      	itttt	eq
 801f948:	6819      	ldreq	r1, [r3, #0]
 801f94a:	685b      	ldreq	r3, [r3, #4]
 801f94c:	1949      	addeq	r1, r1, r5
 801f94e:	6021      	streq	r1, [r4, #0]
 801f950:	e7ed      	b.n	801f92e <_free_r+0x22>
 801f952:	461a      	mov	r2, r3
 801f954:	685b      	ldr	r3, [r3, #4]
 801f956:	b10b      	cbz	r3, 801f95c <_free_r+0x50>
 801f958:	42a3      	cmp	r3, r4
 801f95a:	d9fa      	bls.n	801f952 <_free_r+0x46>
 801f95c:	6811      	ldr	r1, [r2, #0]
 801f95e:	1855      	adds	r5, r2, r1
 801f960:	42a5      	cmp	r5, r4
 801f962:	d10b      	bne.n	801f97c <_free_r+0x70>
 801f964:	6824      	ldr	r4, [r4, #0]
 801f966:	4421      	add	r1, r4
 801f968:	1854      	adds	r4, r2, r1
 801f96a:	42a3      	cmp	r3, r4
 801f96c:	6011      	str	r1, [r2, #0]
 801f96e:	d1e0      	bne.n	801f932 <_free_r+0x26>
 801f970:	681c      	ldr	r4, [r3, #0]
 801f972:	685b      	ldr	r3, [r3, #4]
 801f974:	6053      	str	r3, [r2, #4]
 801f976:	440c      	add	r4, r1
 801f978:	6014      	str	r4, [r2, #0]
 801f97a:	e7da      	b.n	801f932 <_free_r+0x26>
 801f97c:	d902      	bls.n	801f984 <_free_r+0x78>
 801f97e:	230c      	movs	r3, #12
 801f980:	6003      	str	r3, [r0, #0]
 801f982:	e7d6      	b.n	801f932 <_free_r+0x26>
 801f984:	6825      	ldr	r5, [r4, #0]
 801f986:	1961      	adds	r1, r4, r5
 801f988:	428b      	cmp	r3, r1
 801f98a:	bf04      	itt	eq
 801f98c:	6819      	ldreq	r1, [r3, #0]
 801f98e:	685b      	ldreq	r3, [r3, #4]
 801f990:	6063      	str	r3, [r4, #4]
 801f992:	bf04      	itt	eq
 801f994:	1949      	addeq	r1, r1, r5
 801f996:	6021      	streq	r1, [r4, #0]
 801f998:	6054      	str	r4, [r2, #4]
 801f99a:	e7ca      	b.n	801f932 <_free_r+0x26>
 801f99c:	b003      	add	sp, #12
 801f99e:	bd30      	pop	{r4, r5, pc}
 801f9a0:	20005a14 	.word	0x20005a14

0801f9a4 <__ssputs_r>:
 801f9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f9a8:	688e      	ldr	r6, [r1, #8]
 801f9aa:	461f      	mov	r7, r3
 801f9ac:	42be      	cmp	r6, r7
 801f9ae:	680b      	ldr	r3, [r1, #0]
 801f9b0:	4682      	mov	sl, r0
 801f9b2:	460c      	mov	r4, r1
 801f9b4:	4690      	mov	r8, r2
 801f9b6:	d82c      	bhi.n	801fa12 <__ssputs_r+0x6e>
 801f9b8:	898a      	ldrh	r2, [r1, #12]
 801f9ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f9be:	d026      	beq.n	801fa0e <__ssputs_r+0x6a>
 801f9c0:	6965      	ldr	r5, [r4, #20]
 801f9c2:	6909      	ldr	r1, [r1, #16]
 801f9c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f9c8:	eba3 0901 	sub.w	r9, r3, r1
 801f9cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f9d0:	1c7b      	adds	r3, r7, #1
 801f9d2:	444b      	add	r3, r9
 801f9d4:	106d      	asrs	r5, r5, #1
 801f9d6:	429d      	cmp	r5, r3
 801f9d8:	bf38      	it	cc
 801f9da:	461d      	movcc	r5, r3
 801f9dc:	0553      	lsls	r3, r2, #21
 801f9de:	d527      	bpl.n	801fa30 <__ssputs_r+0x8c>
 801f9e0:	4629      	mov	r1, r5
 801f9e2:	f7fe f841 	bl	801da68 <_malloc_r>
 801f9e6:	4606      	mov	r6, r0
 801f9e8:	b360      	cbz	r0, 801fa44 <__ssputs_r+0xa0>
 801f9ea:	6921      	ldr	r1, [r4, #16]
 801f9ec:	464a      	mov	r2, r9
 801f9ee:	f7ff f903 	bl	801ebf8 <memcpy>
 801f9f2:	89a3      	ldrh	r3, [r4, #12]
 801f9f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f9f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f9fc:	81a3      	strh	r3, [r4, #12]
 801f9fe:	6126      	str	r6, [r4, #16]
 801fa00:	6165      	str	r5, [r4, #20]
 801fa02:	444e      	add	r6, r9
 801fa04:	eba5 0509 	sub.w	r5, r5, r9
 801fa08:	6026      	str	r6, [r4, #0]
 801fa0a:	60a5      	str	r5, [r4, #8]
 801fa0c:	463e      	mov	r6, r7
 801fa0e:	42be      	cmp	r6, r7
 801fa10:	d900      	bls.n	801fa14 <__ssputs_r+0x70>
 801fa12:	463e      	mov	r6, r7
 801fa14:	6820      	ldr	r0, [r4, #0]
 801fa16:	4632      	mov	r2, r6
 801fa18:	4641      	mov	r1, r8
 801fa1a:	f7fe ffcf 	bl	801e9bc <memmove>
 801fa1e:	68a3      	ldr	r3, [r4, #8]
 801fa20:	1b9b      	subs	r3, r3, r6
 801fa22:	60a3      	str	r3, [r4, #8]
 801fa24:	6823      	ldr	r3, [r4, #0]
 801fa26:	4433      	add	r3, r6
 801fa28:	6023      	str	r3, [r4, #0]
 801fa2a:	2000      	movs	r0, #0
 801fa2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fa30:	462a      	mov	r2, r5
 801fa32:	f7fe fbdd 	bl	801e1f0 <_realloc_r>
 801fa36:	4606      	mov	r6, r0
 801fa38:	2800      	cmp	r0, #0
 801fa3a:	d1e0      	bne.n	801f9fe <__ssputs_r+0x5a>
 801fa3c:	6921      	ldr	r1, [r4, #16]
 801fa3e:	4650      	mov	r0, sl
 801fa40:	f7ff ff64 	bl	801f90c <_free_r>
 801fa44:	230c      	movs	r3, #12
 801fa46:	f8ca 3000 	str.w	r3, [sl]
 801fa4a:	89a3      	ldrh	r3, [r4, #12]
 801fa4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fa50:	81a3      	strh	r3, [r4, #12]
 801fa52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fa56:	e7e9      	b.n	801fa2c <__ssputs_r+0x88>

0801fa58 <_svfiprintf_r>:
 801fa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa5c:	4698      	mov	r8, r3
 801fa5e:	898b      	ldrh	r3, [r1, #12]
 801fa60:	061b      	lsls	r3, r3, #24
 801fa62:	b09d      	sub	sp, #116	; 0x74
 801fa64:	4607      	mov	r7, r0
 801fa66:	460d      	mov	r5, r1
 801fa68:	4614      	mov	r4, r2
 801fa6a:	d50e      	bpl.n	801fa8a <_svfiprintf_r+0x32>
 801fa6c:	690b      	ldr	r3, [r1, #16]
 801fa6e:	b963      	cbnz	r3, 801fa8a <_svfiprintf_r+0x32>
 801fa70:	2140      	movs	r1, #64	; 0x40
 801fa72:	f7fd fff9 	bl	801da68 <_malloc_r>
 801fa76:	6028      	str	r0, [r5, #0]
 801fa78:	6128      	str	r0, [r5, #16]
 801fa7a:	b920      	cbnz	r0, 801fa86 <_svfiprintf_r+0x2e>
 801fa7c:	230c      	movs	r3, #12
 801fa7e:	603b      	str	r3, [r7, #0]
 801fa80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fa84:	e0d0      	b.n	801fc28 <_svfiprintf_r+0x1d0>
 801fa86:	2340      	movs	r3, #64	; 0x40
 801fa88:	616b      	str	r3, [r5, #20]
 801fa8a:	2300      	movs	r3, #0
 801fa8c:	9309      	str	r3, [sp, #36]	; 0x24
 801fa8e:	2320      	movs	r3, #32
 801fa90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fa94:	f8cd 800c 	str.w	r8, [sp, #12]
 801fa98:	2330      	movs	r3, #48	; 0x30
 801fa9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801fc40 <_svfiprintf_r+0x1e8>
 801fa9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801faa2:	f04f 0901 	mov.w	r9, #1
 801faa6:	4623      	mov	r3, r4
 801faa8:	469a      	mov	sl, r3
 801faaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801faae:	b10a      	cbz	r2, 801fab4 <_svfiprintf_r+0x5c>
 801fab0:	2a25      	cmp	r2, #37	; 0x25
 801fab2:	d1f9      	bne.n	801faa8 <_svfiprintf_r+0x50>
 801fab4:	ebba 0b04 	subs.w	fp, sl, r4
 801fab8:	d00b      	beq.n	801fad2 <_svfiprintf_r+0x7a>
 801faba:	465b      	mov	r3, fp
 801fabc:	4622      	mov	r2, r4
 801fabe:	4629      	mov	r1, r5
 801fac0:	4638      	mov	r0, r7
 801fac2:	f7ff ff6f 	bl	801f9a4 <__ssputs_r>
 801fac6:	3001      	adds	r0, #1
 801fac8:	f000 80a9 	beq.w	801fc1e <_svfiprintf_r+0x1c6>
 801facc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801face:	445a      	add	r2, fp
 801fad0:	9209      	str	r2, [sp, #36]	; 0x24
 801fad2:	f89a 3000 	ldrb.w	r3, [sl]
 801fad6:	2b00      	cmp	r3, #0
 801fad8:	f000 80a1 	beq.w	801fc1e <_svfiprintf_r+0x1c6>
 801fadc:	2300      	movs	r3, #0
 801fade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801fae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fae6:	f10a 0a01 	add.w	sl, sl, #1
 801faea:	9304      	str	r3, [sp, #16]
 801faec:	9307      	str	r3, [sp, #28]
 801faee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801faf2:	931a      	str	r3, [sp, #104]	; 0x68
 801faf4:	4654      	mov	r4, sl
 801faf6:	2205      	movs	r2, #5
 801faf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fafc:	4850      	ldr	r0, [pc, #320]	; (801fc40 <_svfiprintf_r+0x1e8>)
 801fafe:	f7e6 fb3f 	bl	8006180 <memchr>
 801fb02:	9a04      	ldr	r2, [sp, #16]
 801fb04:	b9d8      	cbnz	r0, 801fb3e <_svfiprintf_r+0xe6>
 801fb06:	06d0      	lsls	r0, r2, #27
 801fb08:	bf44      	itt	mi
 801fb0a:	2320      	movmi	r3, #32
 801fb0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fb10:	0711      	lsls	r1, r2, #28
 801fb12:	bf44      	itt	mi
 801fb14:	232b      	movmi	r3, #43	; 0x2b
 801fb16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fb1a:	f89a 3000 	ldrb.w	r3, [sl]
 801fb1e:	2b2a      	cmp	r3, #42	; 0x2a
 801fb20:	d015      	beq.n	801fb4e <_svfiprintf_r+0xf6>
 801fb22:	9a07      	ldr	r2, [sp, #28]
 801fb24:	4654      	mov	r4, sl
 801fb26:	2000      	movs	r0, #0
 801fb28:	f04f 0c0a 	mov.w	ip, #10
 801fb2c:	4621      	mov	r1, r4
 801fb2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fb32:	3b30      	subs	r3, #48	; 0x30
 801fb34:	2b09      	cmp	r3, #9
 801fb36:	d94d      	bls.n	801fbd4 <_svfiprintf_r+0x17c>
 801fb38:	b1b0      	cbz	r0, 801fb68 <_svfiprintf_r+0x110>
 801fb3a:	9207      	str	r2, [sp, #28]
 801fb3c:	e014      	b.n	801fb68 <_svfiprintf_r+0x110>
 801fb3e:	eba0 0308 	sub.w	r3, r0, r8
 801fb42:	fa09 f303 	lsl.w	r3, r9, r3
 801fb46:	4313      	orrs	r3, r2
 801fb48:	9304      	str	r3, [sp, #16]
 801fb4a:	46a2      	mov	sl, r4
 801fb4c:	e7d2      	b.n	801faf4 <_svfiprintf_r+0x9c>
 801fb4e:	9b03      	ldr	r3, [sp, #12]
 801fb50:	1d19      	adds	r1, r3, #4
 801fb52:	681b      	ldr	r3, [r3, #0]
 801fb54:	9103      	str	r1, [sp, #12]
 801fb56:	2b00      	cmp	r3, #0
 801fb58:	bfbb      	ittet	lt
 801fb5a:	425b      	neglt	r3, r3
 801fb5c:	f042 0202 	orrlt.w	r2, r2, #2
 801fb60:	9307      	strge	r3, [sp, #28]
 801fb62:	9307      	strlt	r3, [sp, #28]
 801fb64:	bfb8      	it	lt
 801fb66:	9204      	strlt	r2, [sp, #16]
 801fb68:	7823      	ldrb	r3, [r4, #0]
 801fb6a:	2b2e      	cmp	r3, #46	; 0x2e
 801fb6c:	d10c      	bne.n	801fb88 <_svfiprintf_r+0x130>
 801fb6e:	7863      	ldrb	r3, [r4, #1]
 801fb70:	2b2a      	cmp	r3, #42	; 0x2a
 801fb72:	d134      	bne.n	801fbde <_svfiprintf_r+0x186>
 801fb74:	9b03      	ldr	r3, [sp, #12]
 801fb76:	1d1a      	adds	r2, r3, #4
 801fb78:	681b      	ldr	r3, [r3, #0]
 801fb7a:	9203      	str	r2, [sp, #12]
 801fb7c:	2b00      	cmp	r3, #0
 801fb7e:	bfb8      	it	lt
 801fb80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801fb84:	3402      	adds	r4, #2
 801fb86:	9305      	str	r3, [sp, #20]
 801fb88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801fc50 <_svfiprintf_r+0x1f8>
 801fb8c:	7821      	ldrb	r1, [r4, #0]
 801fb8e:	2203      	movs	r2, #3
 801fb90:	4650      	mov	r0, sl
 801fb92:	f7e6 faf5 	bl	8006180 <memchr>
 801fb96:	b138      	cbz	r0, 801fba8 <_svfiprintf_r+0x150>
 801fb98:	9b04      	ldr	r3, [sp, #16]
 801fb9a:	eba0 000a 	sub.w	r0, r0, sl
 801fb9e:	2240      	movs	r2, #64	; 0x40
 801fba0:	4082      	lsls	r2, r0
 801fba2:	4313      	orrs	r3, r2
 801fba4:	3401      	adds	r4, #1
 801fba6:	9304      	str	r3, [sp, #16]
 801fba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fbac:	4825      	ldr	r0, [pc, #148]	; (801fc44 <_svfiprintf_r+0x1ec>)
 801fbae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fbb2:	2206      	movs	r2, #6
 801fbb4:	f7e6 fae4 	bl	8006180 <memchr>
 801fbb8:	2800      	cmp	r0, #0
 801fbba:	d038      	beq.n	801fc2e <_svfiprintf_r+0x1d6>
 801fbbc:	4b22      	ldr	r3, [pc, #136]	; (801fc48 <_svfiprintf_r+0x1f0>)
 801fbbe:	bb1b      	cbnz	r3, 801fc08 <_svfiprintf_r+0x1b0>
 801fbc0:	9b03      	ldr	r3, [sp, #12]
 801fbc2:	3307      	adds	r3, #7
 801fbc4:	f023 0307 	bic.w	r3, r3, #7
 801fbc8:	3308      	adds	r3, #8
 801fbca:	9303      	str	r3, [sp, #12]
 801fbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fbce:	4433      	add	r3, r6
 801fbd0:	9309      	str	r3, [sp, #36]	; 0x24
 801fbd2:	e768      	b.n	801faa6 <_svfiprintf_r+0x4e>
 801fbd4:	fb0c 3202 	mla	r2, ip, r2, r3
 801fbd8:	460c      	mov	r4, r1
 801fbda:	2001      	movs	r0, #1
 801fbdc:	e7a6      	b.n	801fb2c <_svfiprintf_r+0xd4>
 801fbde:	2300      	movs	r3, #0
 801fbe0:	3401      	adds	r4, #1
 801fbe2:	9305      	str	r3, [sp, #20]
 801fbe4:	4619      	mov	r1, r3
 801fbe6:	f04f 0c0a 	mov.w	ip, #10
 801fbea:	4620      	mov	r0, r4
 801fbec:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fbf0:	3a30      	subs	r2, #48	; 0x30
 801fbf2:	2a09      	cmp	r2, #9
 801fbf4:	d903      	bls.n	801fbfe <_svfiprintf_r+0x1a6>
 801fbf6:	2b00      	cmp	r3, #0
 801fbf8:	d0c6      	beq.n	801fb88 <_svfiprintf_r+0x130>
 801fbfa:	9105      	str	r1, [sp, #20]
 801fbfc:	e7c4      	b.n	801fb88 <_svfiprintf_r+0x130>
 801fbfe:	fb0c 2101 	mla	r1, ip, r1, r2
 801fc02:	4604      	mov	r4, r0
 801fc04:	2301      	movs	r3, #1
 801fc06:	e7f0      	b.n	801fbea <_svfiprintf_r+0x192>
 801fc08:	ab03      	add	r3, sp, #12
 801fc0a:	9300      	str	r3, [sp, #0]
 801fc0c:	462a      	mov	r2, r5
 801fc0e:	4b0f      	ldr	r3, [pc, #60]	; (801fc4c <_svfiprintf_r+0x1f4>)
 801fc10:	a904      	add	r1, sp, #16
 801fc12:	4638      	mov	r0, r7
 801fc14:	f7fd fcc2 	bl	801d59c <_printf_float>
 801fc18:	1c42      	adds	r2, r0, #1
 801fc1a:	4606      	mov	r6, r0
 801fc1c:	d1d6      	bne.n	801fbcc <_svfiprintf_r+0x174>
 801fc1e:	89ab      	ldrh	r3, [r5, #12]
 801fc20:	065b      	lsls	r3, r3, #25
 801fc22:	f53f af2d 	bmi.w	801fa80 <_svfiprintf_r+0x28>
 801fc26:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fc28:	b01d      	add	sp, #116	; 0x74
 801fc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc2e:	ab03      	add	r3, sp, #12
 801fc30:	9300      	str	r3, [sp, #0]
 801fc32:	462a      	mov	r2, r5
 801fc34:	4b05      	ldr	r3, [pc, #20]	; (801fc4c <_svfiprintf_r+0x1f4>)
 801fc36:	a904      	add	r1, sp, #16
 801fc38:	4638      	mov	r0, r7
 801fc3a:	f7fe f803 	bl	801dc44 <_printf_i>
 801fc3e:	e7eb      	b.n	801fc18 <_svfiprintf_r+0x1c0>
 801fc40:	080232ea 	.word	0x080232ea
 801fc44:	080232f4 	.word	0x080232f4
 801fc48:	0801d59d 	.word	0x0801d59d
 801fc4c:	0801f9a5 	.word	0x0801f9a5
 801fc50:	080232f0 	.word	0x080232f0

0801fc54 <__sfputc_r>:
 801fc54:	6893      	ldr	r3, [r2, #8]
 801fc56:	3b01      	subs	r3, #1
 801fc58:	2b00      	cmp	r3, #0
 801fc5a:	b410      	push	{r4}
 801fc5c:	6093      	str	r3, [r2, #8]
 801fc5e:	da08      	bge.n	801fc72 <__sfputc_r+0x1e>
 801fc60:	6994      	ldr	r4, [r2, #24]
 801fc62:	42a3      	cmp	r3, r4
 801fc64:	db01      	blt.n	801fc6a <__sfputc_r+0x16>
 801fc66:	290a      	cmp	r1, #10
 801fc68:	d103      	bne.n	801fc72 <__sfputc_r+0x1e>
 801fc6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fc6e:	f7fe bb65 	b.w	801e33c <__swbuf_r>
 801fc72:	6813      	ldr	r3, [r2, #0]
 801fc74:	1c58      	adds	r0, r3, #1
 801fc76:	6010      	str	r0, [r2, #0]
 801fc78:	7019      	strb	r1, [r3, #0]
 801fc7a:	4608      	mov	r0, r1
 801fc7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fc80:	4770      	bx	lr

0801fc82 <__sfputs_r>:
 801fc82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc84:	4606      	mov	r6, r0
 801fc86:	460f      	mov	r7, r1
 801fc88:	4614      	mov	r4, r2
 801fc8a:	18d5      	adds	r5, r2, r3
 801fc8c:	42ac      	cmp	r4, r5
 801fc8e:	d101      	bne.n	801fc94 <__sfputs_r+0x12>
 801fc90:	2000      	movs	r0, #0
 801fc92:	e007      	b.n	801fca4 <__sfputs_r+0x22>
 801fc94:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fc98:	463a      	mov	r2, r7
 801fc9a:	4630      	mov	r0, r6
 801fc9c:	f7ff ffda 	bl	801fc54 <__sfputc_r>
 801fca0:	1c43      	adds	r3, r0, #1
 801fca2:	d1f3      	bne.n	801fc8c <__sfputs_r+0xa>
 801fca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fca8 <_vfiprintf_r>:
 801fca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcac:	460d      	mov	r5, r1
 801fcae:	b09d      	sub	sp, #116	; 0x74
 801fcb0:	4614      	mov	r4, r2
 801fcb2:	4698      	mov	r8, r3
 801fcb4:	4606      	mov	r6, r0
 801fcb6:	b118      	cbz	r0, 801fcc0 <_vfiprintf_r+0x18>
 801fcb8:	6a03      	ldr	r3, [r0, #32]
 801fcba:	b90b      	cbnz	r3, 801fcc0 <_vfiprintf_r+0x18>
 801fcbc:	f7fe f9e8 	bl	801e090 <__sinit>
 801fcc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fcc2:	07d9      	lsls	r1, r3, #31
 801fcc4:	d405      	bmi.n	801fcd2 <_vfiprintf_r+0x2a>
 801fcc6:	89ab      	ldrh	r3, [r5, #12]
 801fcc8:	059a      	lsls	r2, r3, #22
 801fcca:	d402      	bmi.n	801fcd2 <_vfiprintf_r+0x2a>
 801fccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fcce:	f7fe ff82 	bl	801ebd6 <__retarget_lock_acquire_recursive>
 801fcd2:	89ab      	ldrh	r3, [r5, #12]
 801fcd4:	071b      	lsls	r3, r3, #28
 801fcd6:	d501      	bpl.n	801fcdc <_vfiprintf_r+0x34>
 801fcd8:	692b      	ldr	r3, [r5, #16]
 801fcda:	b99b      	cbnz	r3, 801fd04 <_vfiprintf_r+0x5c>
 801fcdc:	4629      	mov	r1, r5
 801fcde:	4630      	mov	r0, r6
 801fce0:	f7fe fb6a 	bl	801e3b8 <__swsetup_r>
 801fce4:	b170      	cbz	r0, 801fd04 <_vfiprintf_r+0x5c>
 801fce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fce8:	07dc      	lsls	r4, r3, #31
 801fcea:	d504      	bpl.n	801fcf6 <_vfiprintf_r+0x4e>
 801fcec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fcf0:	b01d      	add	sp, #116	; 0x74
 801fcf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcf6:	89ab      	ldrh	r3, [r5, #12]
 801fcf8:	0598      	lsls	r0, r3, #22
 801fcfa:	d4f7      	bmi.n	801fcec <_vfiprintf_r+0x44>
 801fcfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fcfe:	f7fe ff6b 	bl	801ebd8 <__retarget_lock_release_recursive>
 801fd02:	e7f3      	b.n	801fcec <_vfiprintf_r+0x44>
 801fd04:	2300      	movs	r3, #0
 801fd06:	9309      	str	r3, [sp, #36]	; 0x24
 801fd08:	2320      	movs	r3, #32
 801fd0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fd0e:	f8cd 800c 	str.w	r8, [sp, #12]
 801fd12:	2330      	movs	r3, #48	; 0x30
 801fd14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801fec8 <_vfiprintf_r+0x220>
 801fd18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fd1c:	f04f 0901 	mov.w	r9, #1
 801fd20:	4623      	mov	r3, r4
 801fd22:	469a      	mov	sl, r3
 801fd24:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fd28:	b10a      	cbz	r2, 801fd2e <_vfiprintf_r+0x86>
 801fd2a:	2a25      	cmp	r2, #37	; 0x25
 801fd2c:	d1f9      	bne.n	801fd22 <_vfiprintf_r+0x7a>
 801fd2e:	ebba 0b04 	subs.w	fp, sl, r4
 801fd32:	d00b      	beq.n	801fd4c <_vfiprintf_r+0xa4>
 801fd34:	465b      	mov	r3, fp
 801fd36:	4622      	mov	r2, r4
 801fd38:	4629      	mov	r1, r5
 801fd3a:	4630      	mov	r0, r6
 801fd3c:	f7ff ffa1 	bl	801fc82 <__sfputs_r>
 801fd40:	3001      	adds	r0, #1
 801fd42:	f000 80a9 	beq.w	801fe98 <_vfiprintf_r+0x1f0>
 801fd46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fd48:	445a      	add	r2, fp
 801fd4a:	9209      	str	r2, [sp, #36]	; 0x24
 801fd4c:	f89a 3000 	ldrb.w	r3, [sl]
 801fd50:	2b00      	cmp	r3, #0
 801fd52:	f000 80a1 	beq.w	801fe98 <_vfiprintf_r+0x1f0>
 801fd56:	2300      	movs	r3, #0
 801fd58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801fd5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fd60:	f10a 0a01 	add.w	sl, sl, #1
 801fd64:	9304      	str	r3, [sp, #16]
 801fd66:	9307      	str	r3, [sp, #28]
 801fd68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fd6c:	931a      	str	r3, [sp, #104]	; 0x68
 801fd6e:	4654      	mov	r4, sl
 801fd70:	2205      	movs	r2, #5
 801fd72:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fd76:	4854      	ldr	r0, [pc, #336]	; (801fec8 <_vfiprintf_r+0x220>)
 801fd78:	f7e6 fa02 	bl	8006180 <memchr>
 801fd7c:	9a04      	ldr	r2, [sp, #16]
 801fd7e:	b9d8      	cbnz	r0, 801fdb8 <_vfiprintf_r+0x110>
 801fd80:	06d1      	lsls	r1, r2, #27
 801fd82:	bf44      	itt	mi
 801fd84:	2320      	movmi	r3, #32
 801fd86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fd8a:	0713      	lsls	r3, r2, #28
 801fd8c:	bf44      	itt	mi
 801fd8e:	232b      	movmi	r3, #43	; 0x2b
 801fd90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fd94:	f89a 3000 	ldrb.w	r3, [sl]
 801fd98:	2b2a      	cmp	r3, #42	; 0x2a
 801fd9a:	d015      	beq.n	801fdc8 <_vfiprintf_r+0x120>
 801fd9c:	9a07      	ldr	r2, [sp, #28]
 801fd9e:	4654      	mov	r4, sl
 801fda0:	2000      	movs	r0, #0
 801fda2:	f04f 0c0a 	mov.w	ip, #10
 801fda6:	4621      	mov	r1, r4
 801fda8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fdac:	3b30      	subs	r3, #48	; 0x30
 801fdae:	2b09      	cmp	r3, #9
 801fdb0:	d94d      	bls.n	801fe4e <_vfiprintf_r+0x1a6>
 801fdb2:	b1b0      	cbz	r0, 801fde2 <_vfiprintf_r+0x13a>
 801fdb4:	9207      	str	r2, [sp, #28]
 801fdb6:	e014      	b.n	801fde2 <_vfiprintf_r+0x13a>
 801fdb8:	eba0 0308 	sub.w	r3, r0, r8
 801fdbc:	fa09 f303 	lsl.w	r3, r9, r3
 801fdc0:	4313      	orrs	r3, r2
 801fdc2:	9304      	str	r3, [sp, #16]
 801fdc4:	46a2      	mov	sl, r4
 801fdc6:	e7d2      	b.n	801fd6e <_vfiprintf_r+0xc6>
 801fdc8:	9b03      	ldr	r3, [sp, #12]
 801fdca:	1d19      	adds	r1, r3, #4
 801fdcc:	681b      	ldr	r3, [r3, #0]
 801fdce:	9103      	str	r1, [sp, #12]
 801fdd0:	2b00      	cmp	r3, #0
 801fdd2:	bfbb      	ittet	lt
 801fdd4:	425b      	neglt	r3, r3
 801fdd6:	f042 0202 	orrlt.w	r2, r2, #2
 801fdda:	9307      	strge	r3, [sp, #28]
 801fddc:	9307      	strlt	r3, [sp, #28]
 801fdde:	bfb8      	it	lt
 801fde0:	9204      	strlt	r2, [sp, #16]
 801fde2:	7823      	ldrb	r3, [r4, #0]
 801fde4:	2b2e      	cmp	r3, #46	; 0x2e
 801fde6:	d10c      	bne.n	801fe02 <_vfiprintf_r+0x15a>
 801fde8:	7863      	ldrb	r3, [r4, #1]
 801fdea:	2b2a      	cmp	r3, #42	; 0x2a
 801fdec:	d134      	bne.n	801fe58 <_vfiprintf_r+0x1b0>
 801fdee:	9b03      	ldr	r3, [sp, #12]
 801fdf0:	1d1a      	adds	r2, r3, #4
 801fdf2:	681b      	ldr	r3, [r3, #0]
 801fdf4:	9203      	str	r2, [sp, #12]
 801fdf6:	2b00      	cmp	r3, #0
 801fdf8:	bfb8      	it	lt
 801fdfa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801fdfe:	3402      	adds	r4, #2
 801fe00:	9305      	str	r3, [sp, #20]
 801fe02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801fed8 <_vfiprintf_r+0x230>
 801fe06:	7821      	ldrb	r1, [r4, #0]
 801fe08:	2203      	movs	r2, #3
 801fe0a:	4650      	mov	r0, sl
 801fe0c:	f7e6 f9b8 	bl	8006180 <memchr>
 801fe10:	b138      	cbz	r0, 801fe22 <_vfiprintf_r+0x17a>
 801fe12:	9b04      	ldr	r3, [sp, #16]
 801fe14:	eba0 000a 	sub.w	r0, r0, sl
 801fe18:	2240      	movs	r2, #64	; 0x40
 801fe1a:	4082      	lsls	r2, r0
 801fe1c:	4313      	orrs	r3, r2
 801fe1e:	3401      	adds	r4, #1
 801fe20:	9304      	str	r3, [sp, #16]
 801fe22:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fe26:	4829      	ldr	r0, [pc, #164]	; (801fecc <_vfiprintf_r+0x224>)
 801fe28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fe2c:	2206      	movs	r2, #6
 801fe2e:	f7e6 f9a7 	bl	8006180 <memchr>
 801fe32:	2800      	cmp	r0, #0
 801fe34:	d03f      	beq.n	801feb6 <_vfiprintf_r+0x20e>
 801fe36:	4b26      	ldr	r3, [pc, #152]	; (801fed0 <_vfiprintf_r+0x228>)
 801fe38:	bb1b      	cbnz	r3, 801fe82 <_vfiprintf_r+0x1da>
 801fe3a:	9b03      	ldr	r3, [sp, #12]
 801fe3c:	3307      	adds	r3, #7
 801fe3e:	f023 0307 	bic.w	r3, r3, #7
 801fe42:	3308      	adds	r3, #8
 801fe44:	9303      	str	r3, [sp, #12]
 801fe46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe48:	443b      	add	r3, r7
 801fe4a:	9309      	str	r3, [sp, #36]	; 0x24
 801fe4c:	e768      	b.n	801fd20 <_vfiprintf_r+0x78>
 801fe4e:	fb0c 3202 	mla	r2, ip, r2, r3
 801fe52:	460c      	mov	r4, r1
 801fe54:	2001      	movs	r0, #1
 801fe56:	e7a6      	b.n	801fda6 <_vfiprintf_r+0xfe>
 801fe58:	2300      	movs	r3, #0
 801fe5a:	3401      	adds	r4, #1
 801fe5c:	9305      	str	r3, [sp, #20]
 801fe5e:	4619      	mov	r1, r3
 801fe60:	f04f 0c0a 	mov.w	ip, #10
 801fe64:	4620      	mov	r0, r4
 801fe66:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fe6a:	3a30      	subs	r2, #48	; 0x30
 801fe6c:	2a09      	cmp	r2, #9
 801fe6e:	d903      	bls.n	801fe78 <_vfiprintf_r+0x1d0>
 801fe70:	2b00      	cmp	r3, #0
 801fe72:	d0c6      	beq.n	801fe02 <_vfiprintf_r+0x15a>
 801fe74:	9105      	str	r1, [sp, #20]
 801fe76:	e7c4      	b.n	801fe02 <_vfiprintf_r+0x15a>
 801fe78:	fb0c 2101 	mla	r1, ip, r1, r2
 801fe7c:	4604      	mov	r4, r0
 801fe7e:	2301      	movs	r3, #1
 801fe80:	e7f0      	b.n	801fe64 <_vfiprintf_r+0x1bc>
 801fe82:	ab03      	add	r3, sp, #12
 801fe84:	9300      	str	r3, [sp, #0]
 801fe86:	462a      	mov	r2, r5
 801fe88:	4b12      	ldr	r3, [pc, #72]	; (801fed4 <_vfiprintf_r+0x22c>)
 801fe8a:	a904      	add	r1, sp, #16
 801fe8c:	4630      	mov	r0, r6
 801fe8e:	f7fd fb85 	bl	801d59c <_printf_float>
 801fe92:	4607      	mov	r7, r0
 801fe94:	1c78      	adds	r0, r7, #1
 801fe96:	d1d6      	bne.n	801fe46 <_vfiprintf_r+0x19e>
 801fe98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fe9a:	07d9      	lsls	r1, r3, #31
 801fe9c:	d405      	bmi.n	801feaa <_vfiprintf_r+0x202>
 801fe9e:	89ab      	ldrh	r3, [r5, #12]
 801fea0:	059a      	lsls	r2, r3, #22
 801fea2:	d402      	bmi.n	801feaa <_vfiprintf_r+0x202>
 801fea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fea6:	f7fe fe97 	bl	801ebd8 <__retarget_lock_release_recursive>
 801feaa:	89ab      	ldrh	r3, [r5, #12]
 801feac:	065b      	lsls	r3, r3, #25
 801feae:	f53f af1d 	bmi.w	801fcec <_vfiprintf_r+0x44>
 801feb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801feb4:	e71c      	b.n	801fcf0 <_vfiprintf_r+0x48>
 801feb6:	ab03      	add	r3, sp, #12
 801feb8:	9300      	str	r3, [sp, #0]
 801feba:	462a      	mov	r2, r5
 801febc:	4b05      	ldr	r3, [pc, #20]	; (801fed4 <_vfiprintf_r+0x22c>)
 801febe:	a904      	add	r1, sp, #16
 801fec0:	4630      	mov	r0, r6
 801fec2:	f7fd febf 	bl	801dc44 <_printf_i>
 801fec6:	e7e4      	b.n	801fe92 <_vfiprintf_r+0x1ea>
 801fec8:	080232ea 	.word	0x080232ea
 801fecc:	080232f4 	.word	0x080232f4
 801fed0:	0801d59d 	.word	0x0801d59d
 801fed4:	0801fc83 	.word	0x0801fc83
 801fed8:	080232f0 	.word	0x080232f0

0801fedc <__ascii_mbtowc>:
 801fedc:	b082      	sub	sp, #8
 801fede:	b901      	cbnz	r1, 801fee2 <__ascii_mbtowc+0x6>
 801fee0:	a901      	add	r1, sp, #4
 801fee2:	b142      	cbz	r2, 801fef6 <__ascii_mbtowc+0x1a>
 801fee4:	b14b      	cbz	r3, 801fefa <__ascii_mbtowc+0x1e>
 801fee6:	7813      	ldrb	r3, [r2, #0]
 801fee8:	600b      	str	r3, [r1, #0]
 801feea:	7812      	ldrb	r2, [r2, #0]
 801feec:	1e10      	subs	r0, r2, #0
 801feee:	bf18      	it	ne
 801fef0:	2001      	movne	r0, #1
 801fef2:	b002      	add	sp, #8
 801fef4:	4770      	bx	lr
 801fef6:	4610      	mov	r0, r2
 801fef8:	e7fb      	b.n	801fef2 <__ascii_mbtowc+0x16>
 801fefa:	f06f 0001 	mvn.w	r0, #1
 801fefe:	e7f8      	b.n	801fef2 <__ascii_mbtowc+0x16>

0801ff00 <__sflush_r>:
 801ff00:	898a      	ldrh	r2, [r1, #12]
 801ff02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff06:	4605      	mov	r5, r0
 801ff08:	0710      	lsls	r0, r2, #28
 801ff0a:	460c      	mov	r4, r1
 801ff0c:	d458      	bmi.n	801ffc0 <__sflush_r+0xc0>
 801ff0e:	684b      	ldr	r3, [r1, #4]
 801ff10:	2b00      	cmp	r3, #0
 801ff12:	dc05      	bgt.n	801ff20 <__sflush_r+0x20>
 801ff14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ff16:	2b00      	cmp	r3, #0
 801ff18:	dc02      	bgt.n	801ff20 <__sflush_r+0x20>
 801ff1a:	2000      	movs	r0, #0
 801ff1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ff22:	2e00      	cmp	r6, #0
 801ff24:	d0f9      	beq.n	801ff1a <__sflush_r+0x1a>
 801ff26:	2300      	movs	r3, #0
 801ff28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ff2c:	682f      	ldr	r7, [r5, #0]
 801ff2e:	6a21      	ldr	r1, [r4, #32]
 801ff30:	602b      	str	r3, [r5, #0]
 801ff32:	d032      	beq.n	801ff9a <__sflush_r+0x9a>
 801ff34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ff36:	89a3      	ldrh	r3, [r4, #12]
 801ff38:	075a      	lsls	r2, r3, #29
 801ff3a:	d505      	bpl.n	801ff48 <__sflush_r+0x48>
 801ff3c:	6863      	ldr	r3, [r4, #4]
 801ff3e:	1ac0      	subs	r0, r0, r3
 801ff40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ff42:	b10b      	cbz	r3, 801ff48 <__sflush_r+0x48>
 801ff44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ff46:	1ac0      	subs	r0, r0, r3
 801ff48:	2300      	movs	r3, #0
 801ff4a:	4602      	mov	r2, r0
 801ff4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ff4e:	6a21      	ldr	r1, [r4, #32]
 801ff50:	4628      	mov	r0, r5
 801ff52:	47b0      	blx	r6
 801ff54:	1c43      	adds	r3, r0, #1
 801ff56:	89a3      	ldrh	r3, [r4, #12]
 801ff58:	d106      	bne.n	801ff68 <__sflush_r+0x68>
 801ff5a:	6829      	ldr	r1, [r5, #0]
 801ff5c:	291d      	cmp	r1, #29
 801ff5e:	d82b      	bhi.n	801ffb8 <__sflush_r+0xb8>
 801ff60:	4a29      	ldr	r2, [pc, #164]	; (8020008 <__sflush_r+0x108>)
 801ff62:	410a      	asrs	r2, r1
 801ff64:	07d6      	lsls	r6, r2, #31
 801ff66:	d427      	bmi.n	801ffb8 <__sflush_r+0xb8>
 801ff68:	2200      	movs	r2, #0
 801ff6a:	6062      	str	r2, [r4, #4]
 801ff6c:	04d9      	lsls	r1, r3, #19
 801ff6e:	6922      	ldr	r2, [r4, #16]
 801ff70:	6022      	str	r2, [r4, #0]
 801ff72:	d504      	bpl.n	801ff7e <__sflush_r+0x7e>
 801ff74:	1c42      	adds	r2, r0, #1
 801ff76:	d101      	bne.n	801ff7c <__sflush_r+0x7c>
 801ff78:	682b      	ldr	r3, [r5, #0]
 801ff7a:	b903      	cbnz	r3, 801ff7e <__sflush_r+0x7e>
 801ff7c:	6560      	str	r0, [r4, #84]	; 0x54
 801ff7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ff80:	602f      	str	r7, [r5, #0]
 801ff82:	2900      	cmp	r1, #0
 801ff84:	d0c9      	beq.n	801ff1a <__sflush_r+0x1a>
 801ff86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ff8a:	4299      	cmp	r1, r3
 801ff8c:	d002      	beq.n	801ff94 <__sflush_r+0x94>
 801ff8e:	4628      	mov	r0, r5
 801ff90:	f7ff fcbc 	bl	801f90c <_free_r>
 801ff94:	2000      	movs	r0, #0
 801ff96:	6360      	str	r0, [r4, #52]	; 0x34
 801ff98:	e7c0      	b.n	801ff1c <__sflush_r+0x1c>
 801ff9a:	2301      	movs	r3, #1
 801ff9c:	4628      	mov	r0, r5
 801ff9e:	47b0      	blx	r6
 801ffa0:	1c41      	adds	r1, r0, #1
 801ffa2:	d1c8      	bne.n	801ff36 <__sflush_r+0x36>
 801ffa4:	682b      	ldr	r3, [r5, #0]
 801ffa6:	2b00      	cmp	r3, #0
 801ffa8:	d0c5      	beq.n	801ff36 <__sflush_r+0x36>
 801ffaa:	2b1d      	cmp	r3, #29
 801ffac:	d001      	beq.n	801ffb2 <__sflush_r+0xb2>
 801ffae:	2b16      	cmp	r3, #22
 801ffb0:	d101      	bne.n	801ffb6 <__sflush_r+0xb6>
 801ffb2:	602f      	str	r7, [r5, #0]
 801ffb4:	e7b1      	b.n	801ff1a <__sflush_r+0x1a>
 801ffb6:	89a3      	ldrh	r3, [r4, #12]
 801ffb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ffbc:	81a3      	strh	r3, [r4, #12]
 801ffbe:	e7ad      	b.n	801ff1c <__sflush_r+0x1c>
 801ffc0:	690f      	ldr	r7, [r1, #16]
 801ffc2:	2f00      	cmp	r7, #0
 801ffc4:	d0a9      	beq.n	801ff1a <__sflush_r+0x1a>
 801ffc6:	0793      	lsls	r3, r2, #30
 801ffc8:	680e      	ldr	r6, [r1, #0]
 801ffca:	bf08      	it	eq
 801ffcc:	694b      	ldreq	r3, [r1, #20]
 801ffce:	600f      	str	r7, [r1, #0]
 801ffd0:	bf18      	it	ne
 801ffd2:	2300      	movne	r3, #0
 801ffd4:	eba6 0807 	sub.w	r8, r6, r7
 801ffd8:	608b      	str	r3, [r1, #8]
 801ffda:	f1b8 0f00 	cmp.w	r8, #0
 801ffde:	dd9c      	ble.n	801ff1a <__sflush_r+0x1a>
 801ffe0:	6a21      	ldr	r1, [r4, #32]
 801ffe2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ffe4:	4643      	mov	r3, r8
 801ffe6:	463a      	mov	r2, r7
 801ffe8:	4628      	mov	r0, r5
 801ffea:	47b0      	blx	r6
 801ffec:	2800      	cmp	r0, #0
 801ffee:	dc06      	bgt.n	801fffe <__sflush_r+0xfe>
 801fff0:	89a3      	ldrh	r3, [r4, #12]
 801fff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fff6:	81a3      	strh	r3, [r4, #12]
 801fff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fffc:	e78e      	b.n	801ff1c <__sflush_r+0x1c>
 801fffe:	4407      	add	r7, r0
 8020000:	eba8 0800 	sub.w	r8, r8, r0
 8020004:	e7e9      	b.n	801ffda <__sflush_r+0xda>
 8020006:	bf00      	nop
 8020008:	dfbffffe 	.word	0xdfbffffe

0802000c <_fflush_r>:
 802000c:	b538      	push	{r3, r4, r5, lr}
 802000e:	690b      	ldr	r3, [r1, #16]
 8020010:	4605      	mov	r5, r0
 8020012:	460c      	mov	r4, r1
 8020014:	b913      	cbnz	r3, 802001c <_fflush_r+0x10>
 8020016:	2500      	movs	r5, #0
 8020018:	4628      	mov	r0, r5
 802001a:	bd38      	pop	{r3, r4, r5, pc}
 802001c:	b118      	cbz	r0, 8020026 <_fflush_r+0x1a>
 802001e:	6a03      	ldr	r3, [r0, #32]
 8020020:	b90b      	cbnz	r3, 8020026 <_fflush_r+0x1a>
 8020022:	f7fe f835 	bl	801e090 <__sinit>
 8020026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802002a:	2b00      	cmp	r3, #0
 802002c:	d0f3      	beq.n	8020016 <_fflush_r+0xa>
 802002e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020030:	07d0      	lsls	r0, r2, #31
 8020032:	d404      	bmi.n	802003e <_fflush_r+0x32>
 8020034:	0599      	lsls	r1, r3, #22
 8020036:	d402      	bmi.n	802003e <_fflush_r+0x32>
 8020038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802003a:	f7fe fdcc 	bl	801ebd6 <__retarget_lock_acquire_recursive>
 802003e:	4628      	mov	r0, r5
 8020040:	4621      	mov	r1, r4
 8020042:	f7ff ff5d 	bl	801ff00 <__sflush_r>
 8020046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020048:	07da      	lsls	r2, r3, #31
 802004a:	4605      	mov	r5, r0
 802004c:	d4e4      	bmi.n	8020018 <_fflush_r+0xc>
 802004e:	89a3      	ldrh	r3, [r4, #12]
 8020050:	059b      	lsls	r3, r3, #22
 8020052:	d4e1      	bmi.n	8020018 <_fflush_r+0xc>
 8020054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020056:	f7fe fdbf 	bl	801ebd8 <__retarget_lock_release_recursive>
 802005a:	e7dd      	b.n	8020018 <_fflush_r+0xc>

0802005c <_Balloc>:
 802005c:	b570      	push	{r4, r5, r6, lr}
 802005e:	69c6      	ldr	r6, [r0, #28]
 8020060:	4604      	mov	r4, r0
 8020062:	460d      	mov	r5, r1
 8020064:	b976      	cbnz	r6, 8020084 <_Balloc+0x28>
 8020066:	2010      	movs	r0, #16
 8020068:	f7fd fcce 	bl	801da08 <malloc>
 802006c:	4602      	mov	r2, r0
 802006e:	61e0      	str	r0, [r4, #28]
 8020070:	b920      	cbnz	r0, 802007c <_Balloc+0x20>
 8020072:	4b18      	ldr	r3, [pc, #96]	; (80200d4 <_Balloc+0x78>)
 8020074:	4818      	ldr	r0, [pc, #96]	; (80200d8 <_Balloc+0x7c>)
 8020076:	216b      	movs	r1, #107	; 0x6b
 8020078:	f7fd f9d2 	bl	801d420 <__assert_func>
 802007c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020080:	6006      	str	r6, [r0, #0]
 8020082:	60c6      	str	r6, [r0, #12]
 8020084:	69e6      	ldr	r6, [r4, #28]
 8020086:	68f3      	ldr	r3, [r6, #12]
 8020088:	b183      	cbz	r3, 80200ac <_Balloc+0x50>
 802008a:	69e3      	ldr	r3, [r4, #28]
 802008c:	68db      	ldr	r3, [r3, #12]
 802008e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020092:	b9b8      	cbnz	r0, 80200c4 <_Balloc+0x68>
 8020094:	2101      	movs	r1, #1
 8020096:	fa01 f605 	lsl.w	r6, r1, r5
 802009a:	1d72      	adds	r2, r6, #5
 802009c:	0092      	lsls	r2, r2, #2
 802009e:	4620      	mov	r0, r4
 80200a0:	f000 fb6d 	bl	802077e <_calloc_r>
 80200a4:	b160      	cbz	r0, 80200c0 <_Balloc+0x64>
 80200a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80200aa:	e00e      	b.n	80200ca <_Balloc+0x6e>
 80200ac:	2221      	movs	r2, #33	; 0x21
 80200ae:	2104      	movs	r1, #4
 80200b0:	4620      	mov	r0, r4
 80200b2:	f000 fb64 	bl	802077e <_calloc_r>
 80200b6:	69e3      	ldr	r3, [r4, #28]
 80200b8:	60f0      	str	r0, [r6, #12]
 80200ba:	68db      	ldr	r3, [r3, #12]
 80200bc:	2b00      	cmp	r3, #0
 80200be:	d1e4      	bne.n	802008a <_Balloc+0x2e>
 80200c0:	2000      	movs	r0, #0
 80200c2:	bd70      	pop	{r4, r5, r6, pc}
 80200c4:	6802      	ldr	r2, [r0, #0]
 80200c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80200ca:	2300      	movs	r3, #0
 80200cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80200d0:	e7f7      	b.n	80200c2 <_Balloc+0x66>
 80200d2:	bf00      	nop
 80200d4:	0802326a 	.word	0x0802326a
 80200d8:	080232fb 	.word	0x080232fb

080200dc <_Bfree>:
 80200dc:	b570      	push	{r4, r5, r6, lr}
 80200de:	69c6      	ldr	r6, [r0, #28]
 80200e0:	4605      	mov	r5, r0
 80200e2:	460c      	mov	r4, r1
 80200e4:	b976      	cbnz	r6, 8020104 <_Bfree+0x28>
 80200e6:	2010      	movs	r0, #16
 80200e8:	f7fd fc8e 	bl	801da08 <malloc>
 80200ec:	4602      	mov	r2, r0
 80200ee:	61e8      	str	r0, [r5, #28]
 80200f0:	b920      	cbnz	r0, 80200fc <_Bfree+0x20>
 80200f2:	4b09      	ldr	r3, [pc, #36]	; (8020118 <_Bfree+0x3c>)
 80200f4:	4809      	ldr	r0, [pc, #36]	; (802011c <_Bfree+0x40>)
 80200f6:	218f      	movs	r1, #143	; 0x8f
 80200f8:	f7fd f992 	bl	801d420 <__assert_func>
 80200fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020100:	6006      	str	r6, [r0, #0]
 8020102:	60c6      	str	r6, [r0, #12]
 8020104:	b13c      	cbz	r4, 8020116 <_Bfree+0x3a>
 8020106:	69eb      	ldr	r3, [r5, #28]
 8020108:	6862      	ldr	r2, [r4, #4]
 802010a:	68db      	ldr	r3, [r3, #12]
 802010c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020110:	6021      	str	r1, [r4, #0]
 8020112:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020116:	bd70      	pop	{r4, r5, r6, pc}
 8020118:	0802326a 	.word	0x0802326a
 802011c:	080232fb 	.word	0x080232fb

08020120 <__multadd>:
 8020120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020124:	690d      	ldr	r5, [r1, #16]
 8020126:	4607      	mov	r7, r0
 8020128:	460c      	mov	r4, r1
 802012a:	461e      	mov	r6, r3
 802012c:	f101 0c14 	add.w	ip, r1, #20
 8020130:	2000      	movs	r0, #0
 8020132:	f8dc 3000 	ldr.w	r3, [ip]
 8020136:	b299      	uxth	r1, r3
 8020138:	fb02 6101 	mla	r1, r2, r1, r6
 802013c:	0c1e      	lsrs	r6, r3, #16
 802013e:	0c0b      	lsrs	r3, r1, #16
 8020140:	fb02 3306 	mla	r3, r2, r6, r3
 8020144:	b289      	uxth	r1, r1
 8020146:	3001      	adds	r0, #1
 8020148:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802014c:	4285      	cmp	r5, r0
 802014e:	f84c 1b04 	str.w	r1, [ip], #4
 8020152:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8020156:	dcec      	bgt.n	8020132 <__multadd+0x12>
 8020158:	b30e      	cbz	r6, 802019e <__multadd+0x7e>
 802015a:	68a3      	ldr	r3, [r4, #8]
 802015c:	42ab      	cmp	r3, r5
 802015e:	dc19      	bgt.n	8020194 <__multadd+0x74>
 8020160:	6861      	ldr	r1, [r4, #4]
 8020162:	4638      	mov	r0, r7
 8020164:	3101      	adds	r1, #1
 8020166:	f7ff ff79 	bl	802005c <_Balloc>
 802016a:	4680      	mov	r8, r0
 802016c:	b928      	cbnz	r0, 802017a <__multadd+0x5a>
 802016e:	4602      	mov	r2, r0
 8020170:	4b0c      	ldr	r3, [pc, #48]	; (80201a4 <__multadd+0x84>)
 8020172:	480d      	ldr	r0, [pc, #52]	; (80201a8 <__multadd+0x88>)
 8020174:	21ba      	movs	r1, #186	; 0xba
 8020176:	f7fd f953 	bl	801d420 <__assert_func>
 802017a:	6922      	ldr	r2, [r4, #16]
 802017c:	3202      	adds	r2, #2
 802017e:	f104 010c 	add.w	r1, r4, #12
 8020182:	0092      	lsls	r2, r2, #2
 8020184:	300c      	adds	r0, #12
 8020186:	f7fe fd37 	bl	801ebf8 <memcpy>
 802018a:	4621      	mov	r1, r4
 802018c:	4638      	mov	r0, r7
 802018e:	f7ff ffa5 	bl	80200dc <_Bfree>
 8020192:	4644      	mov	r4, r8
 8020194:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020198:	3501      	adds	r5, #1
 802019a:	615e      	str	r6, [r3, #20]
 802019c:	6125      	str	r5, [r4, #16]
 802019e:	4620      	mov	r0, r4
 80201a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80201a4:	080232d9 	.word	0x080232d9
 80201a8:	080232fb 	.word	0x080232fb

080201ac <__hi0bits>:
 80201ac:	0c03      	lsrs	r3, r0, #16
 80201ae:	041b      	lsls	r3, r3, #16
 80201b0:	b9d3      	cbnz	r3, 80201e8 <__hi0bits+0x3c>
 80201b2:	0400      	lsls	r0, r0, #16
 80201b4:	2310      	movs	r3, #16
 80201b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80201ba:	bf04      	itt	eq
 80201bc:	0200      	lsleq	r0, r0, #8
 80201be:	3308      	addeq	r3, #8
 80201c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80201c4:	bf04      	itt	eq
 80201c6:	0100      	lsleq	r0, r0, #4
 80201c8:	3304      	addeq	r3, #4
 80201ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80201ce:	bf04      	itt	eq
 80201d0:	0080      	lsleq	r0, r0, #2
 80201d2:	3302      	addeq	r3, #2
 80201d4:	2800      	cmp	r0, #0
 80201d6:	db05      	blt.n	80201e4 <__hi0bits+0x38>
 80201d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80201dc:	f103 0301 	add.w	r3, r3, #1
 80201e0:	bf08      	it	eq
 80201e2:	2320      	moveq	r3, #32
 80201e4:	4618      	mov	r0, r3
 80201e6:	4770      	bx	lr
 80201e8:	2300      	movs	r3, #0
 80201ea:	e7e4      	b.n	80201b6 <__hi0bits+0xa>

080201ec <__lo0bits>:
 80201ec:	6803      	ldr	r3, [r0, #0]
 80201ee:	f013 0207 	ands.w	r2, r3, #7
 80201f2:	d00c      	beq.n	802020e <__lo0bits+0x22>
 80201f4:	07d9      	lsls	r1, r3, #31
 80201f6:	d422      	bmi.n	802023e <__lo0bits+0x52>
 80201f8:	079a      	lsls	r2, r3, #30
 80201fa:	bf49      	itett	mi
 80201fc:	085b      	lsrmi	r3, r3, #1
 80201fe:	089b      	lsrpl	r3, r3, #2
 8020200:	6003      	strmi	r3, [r0, #0]
 8020202:	2201      	movmi	r2, #1
 8020204:	bf5c      	itt	pl
 8020206:	6003      	strpl	r3, [r0, #0]
 8020208:	2202      	movpl	r2, #2
 802020a:	4610      	mov	r0, r2
 802020c:	4770      	bx	lr
 802020e:	b299      	uxth	r1, r3
 8020210:	b909      	cbnz	r1, 8020216 <__lo0bits+0x2a>
 8020212:	0c1b      	lsrs	r3, r3, #16
 8020214:	2210      	movs	r2, #16
 8020216:	b2d9      	uxtb	r1, r3
 8020218:	b909      	cbnz	r1, 802021e <__lo0bits+0x32>
 802021a:	3208      	adds	r2, #8
 802021c:	0a1b      	lsrs	r3, r3, #8
 802021e:	0719      	lsls	r1, r3, #28
 8020220:	bf04      	itt	eq
 8020222:	091b      	lsreq	r3, r3, #4
 8020224:	3204      	addeq	r2, #4
 8020226:	0799      	lsls	r1, r3, #30
 8020228:	bf04      	itt	eq
 802022a:	089b      	lsreq	r3, r3, #2
 802022c:	3202      	addeq	r2, #2
 802022e:	07d9      	lsls	r1, r3, #31
 8020230:	d403      	bmi.n	802023a <__lo0bits+0x4e>
 8020232:	085b      	lsrs	r3, r3, #1
 8020234:	f102 0201 	add.w	r2, r2, #1
 8020238:	d003      	beq.n	8020242 <__lo0bits+0x56>
 802023a:	6003      	str	r3, [r0, #0]
 802023c:	e7e5      	b.n	802020a <__lo0bits+0x1e>
 802023e:	2200      	movs	r2, #0
 8020240:	e7e3      	b.n	802020a <__lo0bits+0x1e>
 8020242:	2220      	movs	r2, #32
 8020244:	e7e1      	b.n	802020a <__lo0bits+0x1e>
	...

08020248 <__i2b>:
 8020248:	b510      	push	{r4, lr}
 802024a:	460c      	mov	r4, r1
 802024c:	2101      	movs	r1, #1
 802024e:	f7ff ff05 	bl	802005c <_Balloc>
 8020252:	4602      	mov	r2, r0
 8020254:	b928      	cbnz	r0, 8020262 <__i2b+0x1a>
 8020256:	4b05      	ldr	r3, [pc, #20]	; (802026c <__i2b+0x24>)
 8020258:	4805      	ldr	r0, [pc, #20]	; (8020270 <__i2b+0x28>)
 802025a:	f240 1145 	movw	r1, #325	; 0x145
 802025e:	f7fd f8df 	bl	801d420 <__assert_func>
 8020262:	2301      	movs	r3, #1
 8020264:	6144      	str	r4, [r0, #20]
 8020266:	6103      	str	r3, [r0, #16]
 8020268:	bd10      	pop	{r4, pc}
 802026a:	bf00      	nop
 802026c:	080232d9 	.word	0x080232d9
 8020270:	080232fb 	.word	0x080232fb

08020274 <__multiply>:
 8020274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020278:	4691      	mov	r9, r2
 802027a:	690a      	ldr	r2, [r1, #16]
 802027c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8020280:	429a      	cmp	r2, r3
 8020282:	bfb8      	it	lt
 8020284:	460b      	movlt	r3, r1
 8020286:	460c      	mov	r4, r1
 8020288:	bfbc      	itt	lt
 802028a:	464c      	movlt	r4, r9
 802028c:	4699      	movlt	r9, r3
 802028e:	6927      	ldr	r7, [r4, #16]
 8020290:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8020294:	68a3      	ldr	r3, [r4, #8]
 8020296:	6861      	ldr	r1, [r4, #4]
 8020298:	eb07 060a 	add.w	r6, r7, sl
 802029c:	42b3      	cmp	r3, r6
 802029e:	b085      	sub	sp, #20
 80202a0:	bfb8      	it	lt
 80202a2:	3101      	addlt	r1, #1
 80202a4:	f7ff feda 	bl	802005c <_Balloc>
 80202a8:	b930      	cbnz	r0, 80202b8 <__multiply+0x44>
 80202aa:	4602      	mov	r2, r0
 80202ac:	4b44      	ldr	r3, [pc, #272]	; (80203c0 <__multiply+0x14c>)
 80202ae:	4845      	ldr	r0, [pc, #276]	; (80203c4 <__multiply+0x150>)
 80202b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80202b4:	f7fd f8b4 	bl	801d420 <__assert_func>
 80202b8:	f100 0514 	add.w	r5, r0, #20
 80202bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80202c0:	462b      	mov	r3, r5
 80202c2:	2200      	movs	r2, #0
 80202c4:	4543      	cmp	r3, r8
 80202c6:	d321      	bcc.n	802030c <__multiply+0x98>
 80202c8:	f104 0314 	add.w	r3, r4, #20
 80202cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80202d0:	f109 0314 	add.w	r3, r9, #20
 80202d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80202d8:	9202      	str	r2, [sp, #8]
 80202da:	1b3a      	subs	r2, r7, r4
 80202dc:	3a15      	subs	r2, #21
 80202de:	f022 0203 	bic.w	r2, r2, #3
 80202e2:	3204      	adds	r2, #4
 80202e4:	f104 0115 	add.w	r1, r4, #21
 80202e8:	428f      	cmp	r7, r1
 80202ea:	bf38      	it	cc
 80202ec:	2204      	movcc	r2, #4
 80202ee:	9201      	str	r2, [sp, #4]
 80202f0:	9a02      	ldr	r2, [sp, #8]
 80202f2:	9303      	str	r3, [sp, #12]
 80202f4:	429a      	cmp	r2, r3
 80202f6:	d80c      	bhi.n	8020312 <__multiply+0x9e>
 80202f8:	2e00      	cmp	r6, #0
 80202fa:	dd03      	ble.n	8020304 <__multiply+0x90>
 80202fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8020300:	2b00      	cmp	r3, #0
 8020302:	d05b      	beq.n	80203bc <__multiply+0x148>
 8020304:	6106      	str	r6, [r0, #16]
 8020306:	b005      	add	sp, #20
 8020308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802030c:	f843 2b04 	str.w	r2, [r3], #4
 8020310:	e7d8      	b.n	80202c4 <__multiply+0x50>
 8020312:	f8b3 a000 	ldrh.w	sl, [r3]
 8020316:	f1ba 0f00 	cmp.w	sl, #0
 802031a:	d024      	beq.n	8020366 <__multiply+0xf2>
 802031c:	f104 0e14 	add.w	lr, r4, #20
 8020320:	46a9      	mov	r9, r5
 8020322:	f04f 0c00 	mov.w	ip, #0
 8020326:	f85e 2b04 	ldr.w	r2, [lr], #4
 802032a:	f8d9 1000 	ldr.w	r1, [r9]
 802032e:	fa1f fb82 	uxth.w	fp, r2
 8020332:	b289      	uxth	r1, r1
 8020334:	fb0a 110b 	mla	r1, sl, fp, r1
 8020338:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802033c:	f8d9 2000 	ldr.w	r2, [r9]
 8020340:	4461      	add	r1, ip
 8020342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8020346:	fb0a c20b 	mla	r2, sl, fp, ip
 802034a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802034e:	b289      	uxth	r1, r1
 8020350:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8020354:	4577      	cmp	r7, lr
 8020356:	f849 1b04 	str.w	r1, [r9], #4
 802035a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802035e:	d8e2      	bhi.n	8020326 <__multiply+0xb2>
 8020360:	9a01      	ldr	r2, [sp, #4]
 8020362:	f845 c002 	str.w	ip, [r5, r2]
 8020366:	9a03      	ldr	r2, [sp, #12]
 8020368:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802036c:	3304      	adds	r3, #4
 802036e:	f1b9 0f00 	cmp.w	r9, #0
 8020372:	d021      	beq.n	80203b8 <__multiply+0x144>
 8020374:	6829      	ldr	r1, [r5, #0]
 8020376:	f104 0c14 	add.w	ip, r4, #20
 802037a:	46ae      	mov	lr, r5
 802037c:	f04f 0a00 	mov.w	sl, #0
 8020380:	f8bc b000 	ldrh.w	fp, [ip]
 8020384:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8020388:	fb09 220b 	mla	r2, r9, fp, r2
 802038c:	4452      	add	r2, sl
 802038e:	b289      	uxth	r1, r1
 8020390:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8020394:	f84e 1b04 	str.w	r1, [lr], #4
 8020398:	f85c 1b04 	ldr.w	r1, [ip], #4
 802039c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80203a0:	f8be 1000 	ldrh.w	r1, [lr]
 80203a4:	fb09 110a 	mla	r1, r9, sl, r1
 80203a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80203ac:	4567      	cmp	r7, ip
 80203ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80203b2:	d8e5      	bhi.n	8020380 <__multiply+0x10c>
 80203b4:	9a01      	ldr	r2, [sp, #4]
 80203b6:	50a9      	str	r1, [r5, r2]
 80203b8:	3504      	adds	r5, #4
 80203ba:	e799      	b.n	80202f0 <__multiply+0x7c>
 80203bc:	3e01      	subs	r6, #1
 80203be:	e79b      	b.n	80202f8 <__multiply+0x84>
 80203c0:	080232d9 	.word	0x080232d9
 80203c4:	080232fb 	.word	0x080232fb

080203c8 <__pow5mult>:
 80203c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80203cc:	4615      	mov	r5, r2
 80203ce:	f012 0203 	ands.w	r2, r2, #3
 80203d2:	4606      	mov	r6, r0
 80203d4:	460f      	mov	r7, r1
 80203d6:	d007      	beq.n	80203e8 <__pow5mult+0x20>
 80203d8:	4c25      	ldr	r4, [pc, #148]	; (8020470 <__pow5mult+0xa8>)
 80203da:	3a01      	subs	r2, #1
 80203dc:	2300      	movs	r3, #0
 80203de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80203e2:	f7ff fe9d 	bl	8020120 <__multadd>
 80203e6:	4607      	mov	r7, r0
 80203e8:	10ad      	asrs	r5, r5, #2
 80203ea:	d03d      	beq.n	8020468 <__pow5mult+0xa0>
 80203ec:	69f4      	ldr	r4, [r6, #28]
 80203ee:	b97c      	cbnz	r4, 8020410 <__pow5mult+0x48>
 80203f0:	2010      	movs	r0, #16
 80203f2:	f7fd fb09 	bl	801da08 <malloc>
 80203f6:	4602      	mov	r2, r0
 80203f8:	61f0      	str	r0, [r6, #28]
 80203fa:	b928      	cbnz	r0, 8020408 <__pow5mult+0x40>
 80203fc:	4b1d      	ldr	r3, [pc, #116]	; (8020474 <__pow5mult+0xac>)
 80203fe:	481e      	ldr	r0, [pc, #120]	; (8020478 <__pow5mult+0xb0>)
 8020400:	f240 11b3 	movw	r1, #435	; 0x1b3
 8020404:	f7fd f80c 	bl	801d420 <__assert_func>
 8020408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802040c:	6004      	str	r4, [r0, #0]
 802040e:	60c4      	str	r4, [r0, #12]
 8020410:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8020414:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020418:	b94c      	cbnz	r4, 802042e <__pow5mult+0x66>
 802041a:	f240 2171 	movw	r1, #625	; 0x271
 802041e:	4630      	mov	r0, r6
 8020420:	f7ff ff12 	bl	8020248 <__i2b>
 8020424:	2300      	movs	r3, #0
 8020426:	f8c8 0008 	str.w	r0, [r8, #8]
 802042a:	4604      	mov	r4, r0
 802042c:	6003      	str	r3, [r0, #0]
 802042e:	f04f 0900 	mov.w	r9, #0
 8020432:	07eb      	lsls	r3, r5, #31
 8020434:	d50a      	bpl.n	802044c <__pow5mult+0x84>
 8020436:	4639      	mov	r1, r7
 8020438:	4622      	mov	r2, r4
 802043a:	4630      	mov	r0, r6
 802043c:	f7ff ff1a 	bl	8020274 <__multiply>
 8020440:	4639      	mov	r1, r7
 8020442:	4680      	mov	r8, r0
 8020444:	4630      	mov	r0, r6
 8020446:	f7ff fe49 	bl	80200dc <_Bfree>
 802044a:	4647      	mov	r7, r8
 802044c:	106d      	asrs	r5, r5, #1
 802044e:	d00b      	beq.n	8020468 <__pow5mult+0xa0>
 8020450:	6820      	ldr	r0, [r4, #0]
 8020452:	b938      	cbnz	r0, 8020464 <__pow5mult+0x9c>
 8020454:	4622      	mov	r2, r4
 8020456:	4621      	mov	r1, r4
 8020458:	4630      	mov	r0, r6
 802045a:	f7ff ff0b 	bl	8020274 <__multiply>
 802045e:	6020      	str	r0, [r4, #0]
 8020460:	f8c0 9000 	str.w	r9, [r0]
 8020464:	4604      	mov	r4, r0
 8020466:	e7e4      	b.n	8020432 <__pow5mult+0x6a>
 8020468:	4638      	mov	r0, r7
 802046a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802046e:	bf00      	nop
 8020470:	08023448 	.word	0x08023448
 8020474:	0802326a 	.word	0x0802326a
 8020478:	080232fb 	.word	0x080232fb

0802047c <__lshift>:
 802047c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020480:	460c      	mov	r4, r1
 8020482:	6849      	ldr	r1, [r1, #4]
 8020484:	6923      	ldr	r3, [r4, #16]
 8020486:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802048a:	68a3      	ldr	r3, [r4, #8]
 802048c:	4607      	mov	r7, r0
 802048e:	4691      	mov	r9, r2
 8020490:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020494:	f108 0601 	add.w	r6, r8, #1
 8020498:	42b3      	cmp	r3, r6
 802049a:	db0b      	blt.n	80204b4 <__lshift+0x38>
 802049c:	4638      	mov	r0, r7
 802049e:	f7ff fddd 	bl	802005c <_Balloc>
 80204a2:	4605      	mov	r5, r0
 80204a4:	b948      	cbnz	r0, 80204ba <__lshift+0x3e>
 80204a6:	4602      	mov	r2, r0
 80204a8:	4b28      	ldr	r3, [pc, #160]	; (802054c <__lshift+0xd0>)
 80204aa:	4829      	ldr	r0, [pc, #164]	; (8020550 <__lshift+0xd4>)
 80204ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80204b0:	f7fc ffb6 	bl	801d420 <__assert_func>
 80204b4:	3101      	adds	r1, #1
 80204b6:	005b      	lsls	r3, r3, #1
 80204b8:	e7ee      	b.n	8020498 <__lshift+0x1c>
 80204ba:	2300      	movs	r3, #0
 80204bc:	f100 0114 	add.w	r1, r0, #20
 80204c0:	f100 0210 	add.w	r2, r0, #16
 80204c4:	4618      	mov	r0, r3
 80204c6:	4553      	cmp	r3, sl
 80204c8:	db33      	blt.n	8020532 <__lshift+0xb6>
 80204ca:	6920      	ldr	r0, [r4, #16]
 80204cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80204d0:	f104 0314 	add.w	r3, r4, #20
 80204d4:	f019 091f 	ands.w	r9, r9, #31
 80204d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80204dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80204e0:	d02b      	beq.n	802053a <__lshift+0xbe>
 80204e2:	f1c9 0e20 	rsb	lr, r9, #32
 80204e6:	468a      	mov	sl, r1
 80204e8:	2200      	movs	r2, #0
 80204ea:	6818      	ldr	r0, [r3, #0]
 80204ec:	fa00 f009 	lsl.w	r0, r0, r9
 80204f0:	4310      	orrs	r0, r2
 80204f2:	f84a 0b04 	str.w	r0, [sl], #4
 80204f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80204fa:	459c      	cmp	ip, r3
 80204fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8020500:	d8f3      	bhi.n	80204ea <__lshift+0x6e>
 8020502:	ebac 0304 	sub.w	r3, ip, r4
 8020506:	3b15      	subs	r3, #21
 8020508:	f023 0303 	bic.w	r3, r3, #3
 802050c:	3304      	adds	r3, #4
 802050e:	f104 0015 	add.w	r0, r4, #21
 8020512:	4584      	cmp	ip, r0
 8020514:	bf38      	it	cc
 8020516:	2304      	movcc	r3, #4
 8020518:	50ca      	str	r2, [r1, r3]
 802051a:	b10a      	cbz	r2, 8020520 <__lshift+0xa4>
 802051c:	f108 0602 	add.w	r6, r8, #2
 8020520:	3e01      	subs	r6, #1
 8020522:	4638      	mov	r0, r7
 8020524:	612e      	str	r6, [r5, #16]
 8020526:	4621      	mov	r1, r4
 8020528:	f7ff fdd8 	bl	80200dc <_Bfree>
 802052c:	4628      	mov	r0, r5
 802052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020532:	f842 0f04 	str.w	r0, [r2, #4]!
 8020536:	3301      	adds	r3, #1
 8020538:	e7c5      	b.n	80204c6 <__lshift+0x4a>
 802053a:	3904      	subs	r1, #4
 802053c:	f853 2b04 	ldr.w	r2, [r3], #4
 8020540:	f841 2f04 	str.w	r2, [r1, #4]!
 8020544:	459c      	cmp	ip, r3
 8020546:	d8f9      	bhi.n	802053c <__lshift+0xc0>
 8020548:	e7ea      	b.n	8020520 <__lshift+0xa4>
 802054a:	bf00      	nop
 802054c:	080232d9 	.word	0x080232d9
 8020550:	080232fb 	.word	0x080232fb

08020554 <__mcmp>:
 8020554:	b530      	push	{r4, r5, lr}
 8020556:	6902      	ldr	r2, [r0, #16]
 8020558:	690c      	ldr	r4, [r1, #16]
 802055a:	1b12      	subs	r2, r2, r4
 802055c:	d10e      	bne.n	802057c <__mcmp+0x28>
 802055e:	f100 0314 	add.w	r3, r0, #20
 8020562:	3114      	adds	r1, #20
 8020564:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8020568:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802056c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8020570:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8020574:	42a5      	cmp	r5, r4
 8020576:	d003      	beq.n	8020580 <__mcmp+0x2c>
 8020578:	d305      	bcc.n	8020586 <__mcmp+0x32>
 802057a:	2201      	movs	r2, #1
 802057c:	4610      	mov	r0, r2
 802057e:	bd30      	pop	{r4, r5, pc}
 8020580:	4283      	cmp	r3, r0
 8020582:	d3f3      	bcc.n	802056c <__mcmp+0x18>
 8020584:	e7fa      	b.n	802057c <__mcmp+0x28>
 8020586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802058a:	e7f7      	b.n	802057c <__mcmp+0x28>

0802058c <__mdiff>:
 802058c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020590:	460c      	mov	r4, r1
 8020592:	4606      	mov	r6, r0
 8020594:	4611      	mov	r1, r2
 8020596:	4620      	mov	r0, r4
 8020598:	4690      	mov	r8, r2
 802059a:	f7ff ffdb 	bl	8020554 <__mcmp>
 802059e:	1e05      	subs	r5, r0, #0
 80205a0:	d110      	bne.n	80205c4 <__mdiff+0x38>
 80205a2:	4629      	mov	r1, r5
 80205a4:	4630      	mov	r0, r6
 80205a6:	f7ff fd59 	bl	802005c <_Balloc>
 80205aa:	b930      	cbnz	r0, 80205ba <__mdiff+0x2e>
 80205ac:	4b3a      	ldr	r3, [pc, #232]	; (8020698 <__mdiff+0x10c>)
 80205ae:	4602      	mov	r2, r0
 80205b0:	f240 2137 	movw	r1, #567	; 0x237
 80205b4:	4839      	ldr	r0, [pc, #228]	; (802069c <__mdiff+0x110>)
 80205b6:	f7fc ff33 	bl	801d420 <__assert_func>
 80205ba:	2301      	movs	r3, #1
 80205bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80205c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205c4:	bfa4      	itt	ge
 80205c6:	4643      	movge	r3, r8
 80205c8:	46a0      	movge	r8, r4
 80205ca:	4630      	mov	r0, r6
 80205cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80205d0:	bfa6      	itte	ge
 80205d2:	461c      	movge	r4, r3
 80205d4:	2500      	movge	r5, #0
 80205d6:	2501      	movlt	r5, #1
 80205d8:	f7ff fd40 	bl	802005c <_Balloc>
 80205dc:	b920      	cbnz	r0, 80205e8 <__mdiff+0x5c>
 80205de:	4b2e      	ldr	r3, [pc, #184]	; (8020698 <__mdiff+0x10c>)
 80205e0:	4602      	mov	r2, r0
 80205e2:	f240 2145 	movw	r1, #581	; 0x245
 80205e6:	e7e5      	b.n	80205b4 <__mdiff+0x28>
 80205e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80205ec:	6926      	ldr	r6, [r4, #16]
 80205ee:	60c5      	str	r5, [r0, #12]
 80205f0:	f104 0914 	add.w	r9, r4, #20
 80205f4:	f108 0514 	add.w	r5, r8, #20
 80205f8:	f100 0e14 	add.w	lr, r0, #20
 80205fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8020600:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8020604:	f108 0210 	add.w	r2, r8, #16
 8020608:	46f2      	mov	sl, lr
 802060a:	2100      	movs	r1, #0
 802060c:	f859 3b04 	ldr.w	r3, [r9], #4
 8020610:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8020614:	fa11 f88b 	uxtah	r8, r1, fp
 8020618:	b299      	uxth	r1, r3
 802061a:	0c1b      	lsrs	r3, r3, #16
 802061c:	eba8 0801 	sub.w	r8, r8, r1
 8020620:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8020624:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8020628:	fa1f f888 	uxth.w	r8, r8
 802062c:	1419      	asrs	r1, r3, #16
 802062e:	454e      	cmp	r6, r9
 8020630:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8020634:	f84a 3b04 	str.w	r3, [sl], #4
 8020638:	d8e8      	bhi.n	802060c <__mdiff+0x80>
 802063a:	1b33      	subs	r3, r6, r4
 802063c:	3b15      	subs	r3, #21
 802063e:	f023 0303 	bic.w	r3, r3, #3
 8020642:	3304      	adds	r3, #4
 8020644:	3415      	adds	r4, #21
 8020646:	42a6      	cmp	r6, r4
 8020648:	bf38      	it	cc
 802064a:	2304      	movcc	r3, #4
 802064c:	441d      	add	r5, r3
 802064e:	4473      	add	r3, lr
 8020650:	469e      	mov	lr, r3
 8020652:	462e      	mov	r6, r5
 8020654:	4566      	cmp	r6, ip
 8020656:	d30e      	bcc.n	8020676 <__mdiff+0xea>
 8020658:	f10c 0203 	add.w	r2, ip, #3
 802065c:	1b52      	subs	r2, r2, r5
 802065e:	f022 0203 	bic.w	r2, r2, #3
 8020662:	3d03      	subs	r5, #3
 8020664:	45ac      	cmp	ip, r5
 8020666:	bf38      	it	cc
 8020668:	2200      	movcc	r2, #0
 802066a:	4413      	add	r3, r2
 802066c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8020670:	b17a      	cbz	r2, 8020692 <__mdiff+0x106>
 8020672:	6107      	str	r7, [r0, #16]
 8020674:	e7a4      	b.n	80205c0 <__mdiff+0x34>
 8020676:	f856 8b04 	ldr.w	r8, [r6], #4
 802067a:	fa11 f288 	uxtah	r2, r1, r8
 802067e:	1414      	asrs	r4, r2, #16
 8020680:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8020684:	b292      	uxth	r2, r2
 8020686:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802068a:	f84e 2b04 	str.w	r2, [lr], #4
 802068e:	1421      	asrs	r1, r4, #16
 8020690:	e7e0      	b.n	8020654 <__mdiff+0xc8>
 8020692:	3f01      	subs	r7, #1
 8020694:	e7ea      	b.n	802066c <__mdiff+0xe0>
 8020696:	bf00      	nop
 8020698:	080232d9 	.word	0x080232d9
 802069c:	080232fb 	.word	0x080232fb

080206a0 <__d2b>:
 80206a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80206a4:	460f      	mov	r7, r1
 80206a6:	2101      	movs	r1, #1
 80206a8:	ec59 8b10 	vmov	r8, r9, d0
 80206ac:	4616      	mov	r6, r2
 80206ae:	f7ff fcd5 	bl	802005c <_Balloc>
 80206b2:	4604      	mov	r4, r0
 80206b4:	b930      	cbnz	r0, 80206c4 <__d2b+0x24>
 80206b6:	4602      	mov	r2, r0
 80206b8:	4b24      	ldr	r3, [pc, #144]	; (802074c <__d2b+0xac>)
 80206ba:	4825      	ldr	r0, [pc, #148]	; (8020750 <__d2b+0xb0>)
 80206bc:	f240 310f 	movw	r1, #783	; 0x30f
 80206c0:	f7fc feae 	bl	801d420 <__assert_func>
 80206c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80206c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80206cc:	bb2d      	cbnz	r5, 802071a <__d2b+0x7a>
 80206ce:	9301      	str	r3, [sp, #4]
 80206d0:	f1b8 0300 	subs.w	r3, r8, #0
 80206d4:	d026      	beq.n	8020724 <__d2b+0x84>
 80206d6:	4668      	mov	r0, sp
 80206d8:	9300      	str	r3, [sp, #0]
 80206da:	f7ff fd87 	bl	80201ec <__lo0bits>
 80206de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80206e2:	b1e8      	cbz	r0, 8020720 <__d2b+0x80>
 80206e4:	f1c0 0320 	rsb	r3, r0, #32
 80206e8:	fa02 f303 	lsl.w	r3, r2, r3
 80206ec:	430b      	orrs	r3, r1
 80206ee:	40c2      	lsrs	r2, r0
 80206f0:	6163      	str	r3, [r4, #20]
 80206f2:	9201      	str	r2, [sp, #4]
 80206f4:	9b01      	ldr	r3, [sp, #4]
 80206f6:	61a3      	str	r3, [r4, #24]
 80206f8:	2b00      	cmp	r3, #0
 80206fa:	bf14      	ite	ne
 80206fc:	2202      	movne	r2, #2
 80206fe:	2201      	moveq	r2, #1
 8020700:	6122      	str	r2, [r4, #16]
 8020702:	b1bd      	cbz	r5, 8020734 <__d2b+0x94>
 8020704:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8020708:	4405      	add	r5, r0
 802070a:	603d      	str	r5, [r7, #0]
 802070c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8020710:	6030      	str	r0, [r6, #0]
 8020712:	4620      	mov	r0, r4
 8020714:	b003      	add	sp, #12
 8020716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802071a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802071e:	e7d6      	b.n	80206ce <__d2b+0x2e>
 8020720:	6161      	str	r1, [r4, #20]
 8020722:	e7e7      	b.n	80206f4 <__d2b+0x54>
 8020724:	a801      	add	r0, sp, #4
 8020726:	f7ff fd61 	bl	80201ec <__lo0bits>
 802072a:	9b01      	ldr	r3, [sp, #4]
 802072c:	6163      	str	r3, [r4, #20]
 802072e:	3020      	adds	r0, #32
 8020730:	2201      	movs	r2, #1
 8020732:	e7e5      	b.n	8020700 <__d2b+0x60>
 8020734:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020738:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802073c:	6038      	str	r0, [r7, #0]
 802073e:	6918      	ldr	r0, [r3, #16]
 8020740:	f7ff fd34 	bl	80201ac <__hi0bits>
 8020744:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020748:	e7e2      	b.n	8020710 <__d2b+0x70>
 802074a:	bf00      	nop
 802074c:	080232d9 	.word	0x080232d9
 8020750:	080232fb 	.word	0x080232fb

08020754 <_malloc_usable_size_r>:
 8020754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020758:	1f18      	subs	r0, r3, #4
 802075a:	2b00      	cmp	r3, #0
 802075c:	bfbc      	itt	lt
 802075e:	580b      	ldrlt	r3, [r1, r0]
 8020760:	18c0      	addlt	r0, r0, r3
 8020762:	4770      	bx	lr

08020764 <__ascii_wctomb>:
 8020764:	b149      	cbz	r1, 802077a <__ascii_wctomb+0x16>
 8020766:	2aff      	cmp	r2, #255	; 0xff
 8020768:	bf85      	ittet	hi
 802076a:	238a      	movhi	r3, #138	; 0x8a
 802076c:	6003      	strhi	r3, [r0, #0]
 802076e:	700a      	strbls	r2, [r1, #0]
 8020770:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8020774:	bf98      	it	ls
 8020776:	2001      	movls	r0, #1
 8020778:	4770      	bx	lr
 802077a:	4608      	mov	r0, r1
 802077c:	4770      	bx	lr

0802077e <_calloc_r>:
 802077e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020780:	fba1 2402 	umull	r2, r4, r1, r2
 8020784:	b94c      	cbnz	r4, 802079a <_calloc_r+0x1c>
 8020786:	4611      	mov	r1, r2
 8020788:	9201      	str	r2, [sp, #4]
 802078a:	f7fd f96d 	bl	801da68 <_malloc_r>
 802078e:	9a01      	ldr	r2, [sp, #4]
 8020790:	4605      	mov	r5, r0
 8020792:	b930      	cbnz	r0, 80207a2 <_calloc_r+0x24>
 8020794:	4628      	mov	r0, r5
 8020796:	b003      	add	sp, #12
 8020798:	bd30      	pop	{r4, r5, pc}
 802079a:	220c      	movs	r2, #12
 802079c:	6002      	str	r2, [r0, #0]
 802079e:	2500      	movs	r5, #0
 80207a0:	e7f8      	b.n	8020794 <_calloc_r+0x16>
 80207a2:	4621      	mov	r1, r4
 80207a4:	f7fe f924 	bl	801e9f0 <memset>
 80207a8:	e7f4      	b.n	8020794 <_calloc_r+0x16>

080207aa <_Unwind_GetDataRelBase>:
 80207aa:	b508      	push	{r3, lr}
 80207ac:	f7fc fe30 	bl	801d410 <abort>

080207b0 <_Unwind_GetTextRelBase>:
 80207b0:	b508      	push	{r3, lr}
 80207b2:	f7ff fffa 	bl	80207aa <_Unwind_GetDataRelBase>
	...

080207b8 <_init>:
 80207b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80207ba:	bf00      	nop
 80207bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80207be:	bc08      	pop	{r3}
 80207c0:	469e      	mov	lr, r3
 80207c2:	4770      	bx	lr

080207c4 <_fini>:
 80207c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80207c6:	bf00      	nop
 80207c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80207ca:	bc08      	pop	{r3}
 80207cc:	469e      	mov	lr, r3
 80207ce:	4770      	bx	lr
