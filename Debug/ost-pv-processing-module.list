
ost-pv-processing-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800b018  0800b018  0001b018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b52c  0800b52c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b52c  0800b52c  0001b52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b534  0800b534  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b534  0800b534  0001b534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b538  0800b538  0001b538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b53c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a80  200001e4  0800b720  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c64  0800b720  00024c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a670  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000323a  00000000  00000000  0003a884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  0003dac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  0003ec90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234b1  00000000  00000000  0003fd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d9c  00000000  00000000  00063221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1447  00000000  00000000  00077fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00149404  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fc8  00000000  00000000  00149458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b000 	.word	0x0800b000

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800b000 	.word	0x0800b000

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <_Z19configure_MPL3115A2R17I2C_HandleTypeDef>:

#include "MPL3115A2.h"

HAL_StatusTypeDef result;

void configure_MPL3115A2(I2C_HandleTypeDef &i2c_device) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af04      	add	r7, sp, #16
 8000ff2:	6078      	str	r0, [r7, #4]

	// Data to set the control register 0b00111000 [ALT RAW OS2 OS1 OS0 0 OST SB]
	uint8_t config_data = 0x39;
 8000ff4:	2339      	movs	r3, #57	; 0x39
 8000ff6:	73fb      	strb	r3, [r7, #15]

	result = HAL_I2C_Mem_Write(&i2c_device, MPL3115A2_WRITE_ADDR, CTRL_REG_1,
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2301      	movs	r3, #1
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	f107 030f 	add.w	r3, r7, #15
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	2226      	movs	r2, #38	; 0x26
 800100c:	21c0      	movs	r1, #192	; 0xc0
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f001 f810 	bl	8002034 <HAL_I2C_Mem_Write>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	4b02      	ldr	r3, [pc, #8]	; (8001024 <_Z19configure_MPL3115A2R17I2C_HandleTypeDef+0x38>)
 800101a:	701a      	strb	r2, [r3, #0]
			I2C_MEMADD_SIZE_8BIT, &config_data, 1, HAL_MAX_DELAY);
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000200 	.word	0x20000200

08001028 <_Z25read_baromateric_pressureR17I2C_HandleTypeDef>:

float read_baromateric_pressure(I2C_HandleTypeDef &i2c_device) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af04      	add	r7, sp, #16
 800102e:	6078      	str	r0, [r7, #4]

	uint8_t pressure_data[3];
	int32_t pressure_raw;

	// Read pressure data from the sensor (3 bytes)
	result = HAL_I2C_Mem_Read(&i2c_device, MPL3115A2_READ_ADDR, PRESSURE_MSB,
 8001030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2303      	movs	r3, #3
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2201      	movs	r2, #1
 8001044:	21c1      	movs	r1, #193	; 0xc1
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f001 f8ee 	bl	8002228 <HAL_I2C_Mem_Read>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <_Z25read_baromateric_pressureR17I2C_HandleTypeDef+0x68>)
 8001052:	701a      	strb	r2, [r3, #0]
	                          I2C_MEMADD_SIZE_8BIT, pressure_data, 3, HAL_MAX_DELAY);

	// Combine the data bytes to get the pressure value (20 bits)
	pressure_raw = ((int32_t)pressure_data[0] << 12) | ((int32_t)pressure_data[1] << 4) | ((pressure_data[2] >> 4) & 0x0F);
 8001054:	7a3b      	ldrb	r3, [r7, #8]
 8001056:	031a      	lsls	r2, r3, #12
 8001058:	7a7b      	ldrb	r3, [r7, #9]
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	4313      	orrs	r3, r2
 800105e:	7aba      	ldrb	r2, [r7, #10]
 8001060:	0912      	lsrs	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	4313      	orrs	r3, r2
 8001066:	617b      	str	r3, [r7, #20]

	// Convert to a double value in Pascals (adjust as needed)
	float pressure_pascals = (float) pressure_raw / 4.0;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	ee07 3a90 	vmov	s15, r3
 800106e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001072:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001076:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800107a:	edc7 7a04 	vstr	s15, [r7, #16]

    return pressure_pascals;
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	ee07 3a90 	vmov	s15, r3
}
 8001084:	eeb0 0a67 	vmov.f32	s0, s15
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000200 	.word	0x20000200

08001094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109a:	f000 fb93 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109e:	f000 f83d 	bl	800111c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a2:	f000 f939 	bl	8001318 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 80010a6:	f000 f909 	bl	80012bc <_ZL19MX_USART1_UART_Initv>
  MX_I2C2_Init();
 80010aa:	f000 f8d3 	bl	8001254 <_ZL12MX_I2C2_Initv>
  MX_I2C1_Init();
 80010ae:	f000 f89d 	bl	80011ec <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
  bool found = false;
 80010b2:	2300      	movs	r3, #0
 80010b4:	71bb      	strb	r3, [r7, #6]
  for (uint8_t address = 1; address <= 127; address++) {
 80010b6:	2301      	movs	r3, #1
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db14      	blt.n	80010ec <main+0x58>
      HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(&hi2c1, address << 1, 1, HAL_MAX_DELAY);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	b299      	uxth	r1, r3
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ce:	2201      	movs	r2, #1
 80010d0:	480e      	ldr	r0, [pc, #56]	; (800110c <main+0x78>)
 80010d2:	f001 facf 	bl	8002674 <HAL_I2C_IsDeviceReady>
 80010d6:	4603      	mov	r3, r0
 80010d8:	717b      	strb	r3, [r7, #5]
      if (result == HAL_OK) {
 80010da:	797b      	ldrb	r3, [r7, #5]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <main+0x50>
    	  found = true;
 80010e0:	2301      	movs	r3, #1
 80010e2:	71bb      	strb	r3, [r7, #6]
  for (uint8_t address = 1; address <= 127; address++) {
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	3301      	adds	r3, #1
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	e7e6      	b.n	80010ba <main+0x26>
      }
  }


  configure_MPL3115A2(hi2c1);
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <main+0x78>)
 80010ee:	f7ff ff7d 	bl	8000fec <_Z19configure_MPL3115A2R17I2C_HandleTypeDef>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010f2:	f002 fddb 	bl	8003cac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010f6:	4a06      	ldr	r2, [pc, #24]	; (8001110 <main+0x7c>)
 80010f8:	2100      	movs	r1, #0
 80010fa:	4806      	ldr	r0, [pc, #24]	; (8001114 <main+0x80>)
 80010fc:	f002 fe20 	bl	8003d40 <osThreadNew>
 8001100:	4603      	mov	r3, r0
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <main+0x84>)
 8001104:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001106:	f002 fdf5 	bl	8003cf4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800110a:	e7fe      	b.n	800110a <main+0x76>
 800110c:	20000204 	.word	0x20000204
 8001110:	0800b03c 	.word	0x0800b03c
 8001114:	08001369 	.word	0x08001369
 8001118:	200002f0 	.word	0x200002f0

0800111c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b094      	sub	sp, #80	; 0x50
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0320 	add.w	r3, r7, #32
 8001126:	2230      	movs	r2, #48	; 0x30
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f005 fb46 	bl	80067bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <_Z18SystemClock_Configv+0xc8>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	4a26      	ldr	r2, [pc, #152]	; (80011e4 <_Z18SystemClock_Configv+0xc8>)
 800114a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114e:	6413      	str	r3, [r2, #64]	; 0x40
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <_Z18SystemClock_Configv+0xc8>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <_Z18SystemClock_Configv+0xcc>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a20      	ldr	r2, [pc, #128]	; (80011e8 <_Z18SystemClock_Configv+0xcc>)
 8001166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <_Z18SystemClock_Configv+0xcc>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001178:	2302      	movs	r3, #2
 800117a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001180:	2310      	movs	r3, #16
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001184:	2300      	movs	r3, #0
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	4618      	mov	r0, r3
 800118e:	f001 fefb 	bl	8002f88 <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	bf14      	ite	ne
 8001198:	2301      	movne	r3, #1
 800119a:	2300      	moveq	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 80011a2:	f000 f8f5 	bl	8001390 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a6:	230f      	movs	r3, #15
 80011a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 f959 	bl	8003478 <HAL_RCC_ClockConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bf14      	ite	ne
 80011cc:	2301      	movne	r3, #1
 80011ce:	2300      	moveq	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 80011d6:	f000 f8db 	bl	8001390 <Error_Handler>
  }
}
 80011da:	bf00      	nop
 80011dc:	3750      	adds	r7, #80	; 0x50
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40007000 	.word	0x40007000

080011ec <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <_ZL12MX_I2C1_Initv+0x5c>)
 80011f2:	4a16      	ldr	r2, [pc, #88]	; (800124c <_ZL12MX_I2C1_Initv+0x60>)
 80011f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <_ZL12MX_I2C1_Initv+0x5c>)
 80011f8:	4a15      	ldr	r2, [pc, #84]	; (8001250 <_ZL12MX_I2C1_Initv+0x64>)
 80011fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <_ZL12MX_I2C1_Initv+0x5c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <_ZL12MX_I2C1_Initv+0x5c>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <_ZL12MX_I2C1_Initv+0x5c>)
 800120a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800120e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001210:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <_ZL12MX_I2C1_Initv+0x5c>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <_ZL12MX_I2C1_Initv+0x5c>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <_ZL12MX_I2C1_Initv+0x5c>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <_ZL12MX_I2C1_Initv+0x5c>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <_ZL12MX_I2C1_Initv+0x5c>)
 800122a:	f000 fdbf 	bl	8001dac <HAL_I2C_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	bf14      	ite	ne
 8001234:	2301      	movne	r3, #1
 8001236:	2300      	moveq	r3, #0
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800123e:	f000 f8a7 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000204 	.word	0x20000204
 800124c:	40005400 	.word	0x40005400
 8001250:	000186a0 	.word	0x000186a0

08001254 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <_ZL12MX_I2C2_Initv+0x5c>)
 800125a:	4a16      	ldr	r2, [pc, #88]	; (80012b4 <_ZL12MX_I2C2_Initv+0x60>)
 800125c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <_ZL12MX_I2C2_Initv+0x5c>)
 8001260:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <_ZL12MX_I2C2_Initv+0x64>)
 8001262:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <_ZL12MX_I2C2_Initv+0x5c>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <_ZL12MX_I2C2_Initv+0x5c>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <_ZL12MX_I2C2_Initv+0x5c>)
 8001272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001276:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001278:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <_ZL12MX_I2C2_Initv+0x5c>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <_ZL12MX_I2C2_Initv+0x5c>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <_ZL12MX_I2C2_Initv+0x5c>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <_ZL12MX_I2C2_Initv+0x5c>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <_ZL12MX_I2C2_Initv+0x5c>)
 8001292:	f000 fd8b 	bl	8001dac <HAL_I2C_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	bf14      	ite	ne
 800129c:	2301      	movne	r3, #1
 800129e:	2300      	moveq	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80012a6:	f000 f873 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000258 	.word	0x20000258
 80012b4:	40005800 	.word	0x40005800
 80012b8:	000186a0 	.word	0x000186a0

080012bc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012c2:	4a14      	ldr	r2, [pc, #80]	; (8001314 <_ZL19MX_USART1_UART_Initv+0x58>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012f2:	4807      	ldr	r0, [pc, #28]	; (8001310 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012f4:	f002 fa90 	bl	8003818 <HAL_UART_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bf14      	ite	ne
 80012fe:	2301      	movne	r3, #1
 8001300:	2300      	moveq	r3, #0
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001308:	f000 f842 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200002ac 	.word	0x200002ac
 8001314:	40011000 	.word	0x40011000

08001318 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <_ZL12MX_GPIO_Initv+0x4c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <_ZL12MX_GPIO_Initv+0x4c>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <_ZL12MX_GPIO_Initv+0x4c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <_ZL12MX_GPIO_Initv+0x4c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a08      	ldr	r2, [pc, #32]	; (8001364 <_ZL12MX_GPIO_Initv+0x4c>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <_ZL12MX_GPIO_Initv+0x4c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800

08001368 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		float val = 0.0f;
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]

		val = read_baromateric_pressure(hi2c1);
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <_Z16StartDefaultTaskPv+0x24>)
 8001378:	f7ff fe56 	bl	8001028 <_Z25read_baromateric_pressureR17I2C_HandleTypeDef>
 800137c:	ed87 0a03 	vstr	s0, [r7, #12]
//		  sprintf(msg, "pressure:\n");
//
//		  HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 100);


    osDelay(1000);
 8001380:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001384:	f002 fd6e 	bl	8003e64 <osDelay>
  }
 8001388:	e7f2      	b.n	8001370 <_Z16StartDefaultTaskPv+0x8>
 800138a:	bf00      	nop
 800138c:	20000204 	.word	0x20000204

08001390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001394:	b672      	cpsid	i
}
 8001396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001398:	e7fe      	b.n	8001398 <Error_Handler+0x8>
	...

0800139c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_MspInit+0x54>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <HAL_MspInit+0x54>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b0:	6453      	str	r3, [r2, #68]	; 0x44
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <HAL_MspInit+0x54>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_MspInit+0x54>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <HAL_MspInit+0x54>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_MspInit+0x54>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	210f      	movs	r1, #15
 80013de:	f06f 0001 	mvn.w	r0, #1
 80013e2:	f000 fb1e 	bl	8001a22 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	; 0x30
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a32      	ldr	r2, [pc, #200]	; (80014dc <HAL_I2C_MspInit+0xe8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d12c      	bne.n	8001470 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
 800141a:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <HAL_I2C_MspInit+0xec>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a30      	ldr	r2, [pc, #192]	; (80014e0 <HAL_I2C_MspInit+0xec>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <HAL_I2C_MspInit+0xec>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	61bb      	str	r3, [r7, #24]
 8001430:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001432:	23c0      	movs	r3, #192	; 0xc0
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001436:	2312      	movs	r3, #18
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800143a:	2301      	movs	r3, #1
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001442:	2304      	movs	r3, #4
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	4825      	ldr	r0, [pc, #148]	; (80014e4 <HAL_I2C_MspInit+0xf0>)
 800144e:	f000 fb11 	bl	8001a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_I2C_MspInit+0xec>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <HAL_I2C_MspInit+0xec>)
 800145c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <HAL_I2C_MspInit+0xec>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800146e:	e031      	b.n	80014d4 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <HAL_I2C_MspInit+0xf4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d12c      	bne.n	80014d4 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_I2C_MspInit+0xec>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <HAL_I2C_MspInit+0xec>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_I2C_MspInit+0xec>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001496:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800149a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149c:	2312      	movs	r3, #18
 800149e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014a8:	2304      	movs	r3, #4
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	480c      	ldr	r0, [pc, #48]	; (80014e4 <HAL_I2C_MspInit+0xf0>)
 80014b4:	f000 fade 	bl	8001a74 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_I2C_MspInit+0xec>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_I2C_MspInit+0xec>)
 80014c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014c6:	6413      	str	r3, [r2, #64]	; 0x40
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <HAL_I2C_MspInit+0xec>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3730      	adds	r7, #48	; 0x30
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40005400 	.word	0x40005400
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020400 	.word	0x40020400
 80014e8:	40005800 	.word	0x40005800

080014ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a19      	ldr	r2, [pc, #100]	; (8001570 <HAL_UART_MspInit+0x84>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d12c      	bne.n	8001568 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_UART_MspInit+0x88>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a17      	ldr	r2, [pc, #92]	; (8001574 <HAL_UART_MspInit+0x88>)
 8001518:	f043 0310 	orr.w	r3, r3, #16
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_UART_MspInit+0x88>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_UART_MspInit+0x88>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a10      	ldr	r2, [pc, #64]	; (8001574 <HAL_UART_MspInit+0x88>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <HAL_UART_MspInit+0x88>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001546:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800154a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001554:	2303      	movs	r3, #3
 8001556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001558:	2307      	movs	r3, #7
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4619      	mov	r1, r3
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <HAL_UART_MspInit+0x8c>)
 8001564:	f000 fa86 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001568:	bf00      	nop
 800156a:	3728      	adds	r7, #40	; 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40011000 	.word	0x40011000
 8001574:	40023800 	.word	0x40023800
 8001578:	40020000 	.word	0x40020000

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <NMI_Handler+0x4>

08001582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <HardFault_Handler+0x4>

08001588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <MemManage_Handler+0x4>

0800158e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <BusFault_Handler+0x4>

08001594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <UsageFault_Handler+0x4>

0800159a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ac:	f000 f95c 	bl	8001868 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015b0:	f004 f866 	bl	8005680 <xTaskGetSchedulerState>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d001      	beq.n	80015be <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015ba:	f004 fe4d 	bl	8006258 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
	return 1;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_kill>:

int _kill(int pid, int sig)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015dc:	f005 f8b6 	bl	800674c <__errno>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2216      	movs	r2, #22
 80015e4:	601a      	str	r2, [r3, #0]
	return -1;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_exit>:

void _exit (int status)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffe7 	bl	80015d2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001604:	e7fe      	b.n	8001604 <_exit+0x12>

08001606 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	e00a      	b.n	800162e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001618:	f3af 8000 	nop.w
 800161c:	4601      	mov	r1, r0
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	60ba      	str	r2, [r7, #8]
 8001624:	b2ca      	uxtb	r2, r1
 8001626:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3301      	adds	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	429a      	cmp	r2, r3
 8001634:	dbf0      	blt.n	8001618 <_read+0x12>
	}

return len;
 8001636:	687b      	ldr	r3, [r7, #4]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	e009      	b.n	8001666 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	60ba      	str	r2, [r7, #8]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	3301      	adds	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	429a      	cmp	r2, r3
 800166c:	dbf1      	blt.n	8001652 <_write+0x12>
	}
	return len;
 800166e:	687b      	ldr	r3, [r7, #4]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_close>:

int _close(int file)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	return -1;
 8001680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a0:	605a      	str	r2, [r3, #4]
	return 0;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_isatty>:

int _isatty(int file)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	return 1;
 80016b8:	2301      	movs	r3, #1
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b085      	sub	sp, #20
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
	return 0;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <_sbrk+0x5c>)
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <_sbrk+0x60>)
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <_sbrk+0x64>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <_sbrk+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	429a      	cmp	r2, r3
 800170e:	d207      	bcs.n	8001720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001710:	f005 f81c 	bl	800674c <__errno>
 8001714:	4603      	mov	r3, r0
 8001716:	220c      	movs	r2, #12
 8001718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800171e:	e009      	b.n	8001734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <_sbrk+0x64>)
 8001730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20020000 	.word	0x20020000
 8001740:	00000400 	.word	0x00000400
 8001744:	200002f4 	.word	0x200002f4
 8001748:	20004c68 	.word	0x20004c68

0800174c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <SystemInit+0x20>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <SystemInit+0x20>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8001770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001774:	480d      	ldr	r0, [pc, #52]	; (80017ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001776:	490e      	ldr	r1, [pc, #56]	; (80017b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001778:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800177c:	e002      	b.n	8001784 <LoopCopyDataInit>

0800177e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001782:	3304      	adds	r3, #4

08001784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001788:	d3f9      	bcc.n	800177e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800178c:	4c0b      	ldr	r4, [pc, #44]	; (80017bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001790:	e001      	b.n	8001796 <LoopFillZerobss>

08001792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001794:	3204      	adds	r2, #4

08001796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001798:	d3fb      	bcc.n	8001792 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800179a:	f7ff ffd7 	bl	800174c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800179e:	f004 ffdb 	bl	8006758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a2:	f7ff fc77 	bl	8001094 <main>
  bx  lr    
 80017a6:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 80017a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80017b4:	0800b53c 	.word	0x0800b53c
  ldr r2, =_sbss
 80017b8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80017bc:	20004c64 	.word	0x20004c64

080017c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_Init+0x40>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <HAL_Init+0x40>)
 80017ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_Init+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_Init+0x40>)
 80017da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_Init+0x40>)
 80017e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ec:	2003      	movs	r0, #3
 80017ee:	f000 f90d 	bl	8001a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f2:	200f      	movs	r0, #15
 80017f4:	f000 f808 	bl	8001808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f8:	f7ff fdd0 	bl	800139c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023c00 	.word	0x40023c00

08001808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_InitTick+0x54>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x58>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4619      	mov	r1, r3
 800181a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f917 	bl	8001a5a <HAL_SYSTICK_Config>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e00e      	b.n	8001854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b0f      	cmp	r3, #15
 800183a:	d80a      	bhi.n	8001852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183c:	2200      	movs	r2, #0
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001844:	f000 f8ed 	bl	8001a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001848:	4a06      	ldr	r2, [pc, #24]	; (8001864 <HAL_InitTick+0x5c>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	e000      	b.n	8001854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000000 	.word	0x20000000
 8001860:	20000008 	.word	0x20000008
 8001864:	20000004 	.word	0x20000004

08001868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_IncTick+0x20>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x24>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4413      	add	r3, r2
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <HAL_IncTick+0x24>)
 800187a:	6013      	str	r3, [r2, #0]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000008 	.word	0x20000008
 800188c:	20004c10 	.word	0x20004c10

08001890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return uwTick;
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <HAL_GetTick+0x14>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20004c10 	.word	0x20004c10

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	db0a      	blt.n	8001936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	490c      	ldr	r1, [pc, #48]	; (8001958 <__NVIC_SetPriority+0x4c>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	440b      	add	r3, r1
 8001930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001934:	e00a      	b.n	800194c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4908      	ldr	r1, [pc, #32]	; (800195c <__NVIC_SetPriority+0x50>)
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	3b04      	subs	r3, #4
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	440b      	add	r3, r1
 800194a:	761a      	strb	r2, [r3, #24]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000e100 	.word	0xe000e100
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f1c3 0307 	rsb	r3, r3, #7
 800197a:	2b04      	cmp	r3, #4
 800197c:	bf28      	it	cs
 800197e:	2304      	movcs	r3, #4
 8001980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3304      	adds	r3, #4
 8001986:	2b06      	cmp	r3, #6
 8001988:	d902      	bls.n	8001990 <NVIC_EncodePriority+0x30>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3b03      	subs	r3, #3
 800198e:	e000      	b.n	8001992 <NVIC_EncodePriority+0x32>
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	4313      	orrs	r3, r2
         );
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	; 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d8:	d301      	bcc.n	80019de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019da:	2301      	movs	r3, #1
 80019dc:	e00f      	b.n	80019fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <SysTick_Config+0x40>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e6:	210f      	movs	r1, #15
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019ec:	f7ff ff8e 	bl	800190c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <SysTick_Config+0x40>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <SysTick_Config+0x40>)
 80019f8:	2207      	movs	r2, #7
 80019fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	e000e010 	.word	0xe000e010

08001a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff47 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a34:	f7ff ff5c 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	6978      	ldr	r0, [r7, #20]
 8001a40:	f7ff ff8e 	bl	8001960 <NVIC_EncodePriority>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff5d 	bl	800190c <__NVIC_SetPriority>
}
 8001a52:	bf00      	nop
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffb0 	bl	80019c8 <SysTick_Config>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	e16b      	b.n	8001d68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a90:	2201      	movs	r2, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	f040 815a 	bne.w	8001d62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d005      	beq.n	8001ac6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d130      	bne.n	8001b28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001afc:	2201      	movs	r2, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	f003 0201 	and.w	r2, r3, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d017      	beq.n	8001b64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2203      	movs	r2, #3
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d123      	bne.n	8001bb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	08da      	lsrs	r2, r3, #3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3208      	adds	r2, #8
 8001b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	220f      	movs	r2, #15
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	08da      	lsrs	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3208      	adds	r2, #8
 8001bb2:	69b9      	ldr	r1, [r7, #24]
 8001bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0203 	and.w	r2, r3, #3
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80b4 	beq.w	8001d62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b60      	ldr	r3, [pc, #384]	; (8001d80 <HAL_GPIO_Init+0x30c>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a5f      	ldr	r2, [pc, #380]	; (8001d80 <HAL_GPIO_Init+0x30c>)
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b5d      	ldr	r3, [pc, #372]	; (8001d80 <HAL_GPIO_Init+0x30c>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c16:	4a5b      	ldr	r2, [pc, #364]	; (8001d84 <HAL_GPIO_Init+0x310>)
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <HAL_GPIO_Init+0x314>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d02b      	beq.n	8001c9a <HAL_GPIO_Init+0x226>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a51      	ldr	r2, [pc, #324]	; (8001d8c <HAL_GPIO_Init+0x318>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d025      	beq.n	8001c96 <HAL_GPIO_Init+0x222>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a50      	ldr	r2, [pc, #320]	; (8001d90 <HAL_GPIO_Init+0x31c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01f      	beq.n	8001c92 <HAL_GPIO_Init+0x21e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4f      	ldr	r2, [pc, #316]	; (8001d94 <HAL_GPIO_Init+0x320>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_GPIO_Init+0x21a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4e      	ldr	r2, [pc, #312]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_Init+0x216>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4d      	ldr	r2, [pc, #308]	; (8001d9c <HAL_GPIO_Init+0x328>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00d      	beq.n	8001c86 <HAL_GPIO_Init+0x212>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4c      	ldr	r2, [pc, #304]	; (8001da0 <HAL_GPIO_Init+0x32c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d007      	beq.n	8001c82 <HAL_GPIO_Init+0x20e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4b      	ldr	r2, [pc, #300]	; (8001da4 <HAL_GPIO_Init+0x330>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_GPIO_Init+0x20a>
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	e00e      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c7e:	2308      	movs	r3, #8
 8001c80:	e00c      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c82:	2306      	movs	r3, #6
 8001c84:	e00a      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c86:	2305      	movs	r3, #5
 8001c88:	e008      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e004      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e002      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	f002 0203 	and.w	r2, r2, #3
 8001ca2:	0092      	lsls	r2, r2, #2
 8001ca4:	4093      	lsls	r3, r2
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cac:	4935      	ldr	r1, [pc, #212]	; (8001d84 <HAL_GPIO_Init+0x310>)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cde:	4a32      	ldr	r2, [pc, #200]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ce4:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d08:	4a27      	ldr	r2, [pc, #156]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d32:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d5c:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3301      	adds	r3, #1
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2b0f      	cmp	r3, #15
 8001d6c:	f67f ae90 	bls.w	8001a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40013800 	.word	0x40013800
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	40020800 	.word	0x40020800
 8001d94:	40020c00 	.word	0x40020c00
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40021400 	.word	0x40021400
 8001da0:	40021800 	.word	0x40021800
 8001da4:	40021c00 	.word	0x40021c00
 8001da8:	40013c00 	.word	0x40013c00

08001dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e12b      	b.n	8002016 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fb0e 	bl	80013f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2224      	movs	r2, #36	; 0x24
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e10:	f001 fcda 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 8001e14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4a81      	ldr	r2, [pc, #516]	; (8002020 <HAL_I2C_Init+0x274>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d807      	bhi.n	8001e30 <HAL_I2C_Init+0x84>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4a80      	ldr	r2, [pc, #512]	; (8002024 <HAL_I2C_Init+0x278>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	bf94      	ite	ls
 8001e28:	2301      	movls	r3, #1
 8001e2a:	2300      	movhi	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	e006      	b.n	8001e3e <HAL_I2C_Init+0x92>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4a7d      	ldr	r2, [pc, #500]	; (8002028 <HAL_I2C_Init+0x27c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	bf94      	ite	ls
 8001e38:	2301      	movls	r3, #1
 8001e3a:	2300      	movhi	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0e7      	b.n	8002016 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4a78      	ldr	r2, [pc, #480]	; (800202c <HAL_I2C_Init+0x280>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	0c9b      	lsrs	r3, r3, #18
 8001e50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4a6a      	ldr	r2, [pc, #424]	; (8002020 <HAL_I2C_Init+0x274>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d802      	bhi.n	8001e80 <HAL_I2C_Init+0xd4>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	e009      	b.n	8001e94 <HAL_I2C_Init+0xe8>
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	4a69      	ldr	r2, [pc, #420]	; (8002030 <HAL_I2C_Init+0x284>)
 8001e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e90:	099b      	lsrs	r3, r3, #6
 8001e92:	3301      	adds	r3, #1
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ea6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	495c      	ldr	r1, [pc, #368]	; (8002020 <HAL_I2C_Init+0x274>)
 8001eb0:	428b      	cmp	r3, r1
 8001eb2:	d819      	bhi.n	8001ee8 <HAL_I2C_Init+0x13c>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1e59      	subs	r1, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ec2:	1c59      	adds	r1, r3, #1
 8001ec4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ec8:	400b      	ands	r3, r1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00a      	beq.n	8001ee4 <HAL_I2C_Init+0x138>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1e59      	subs	r1, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001edc:	3301      	adds	r3, #1
 8001ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee2:	e051      	b.n	8001f88 <HAL_I2C_Init+0x1dc>
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	e04f      	b.n	8001f88 <HAL_I2C_Init+0x1dc>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d111      	bne.n	8001f14 <HAL_I2C_Init+0x168>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1e58      	subs	r0, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	440b      	add	r3, r1
 8001efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f02:	3301      	adds	r3, #1
 8001f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf0c      	ite	eq
 8001f0c:	2301      	moveq	r3, #1
 8001f0e:	2300      	movne	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	e012      	b.n	8001f3a <HAL_I2C_Init+0x18e>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1e58      	subs	r0, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6859      	ldr	r1, [r3, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	0099      	lsls	r1, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf0c      	ite	eq
 8001f34:	2301      	moveq	r3, #1
 8001f36:	2300      	movne	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_I2C_Init+0x196>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e022      	b.n	8001f88 <HAL_I2C_Init+0x1dc>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10e      	bne.n	8001f68 <HAL_I2C_Init+0x1bc>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1e58      	subs	r0, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6859      	ldr	r1, [r3, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	440b      	add	r3, r1
 8001f58:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f66:	e00f      	b.n	8001f88 <HAL_I2C_Init+0x1dc>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	1e58      	subs	r0, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6859      	ldr	r1, [r3, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	0099      	lsls	r1, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	6809      	ldr	r1, [r1, #0]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69da      	ldr	r2, [r3, #28]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6911      	ldr	r1, [r2, #16]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68d2      	ldr	r2, [r2, #12]
 8001fc2:	4311      	orrs	r1, r2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	000186a0 	.word	0x000186a0
 8002024:	001e847f 	.word	0x001e847f
 8002028:	003d08ff 	.word	0x003d08ff
 800202c:	431bde83 	.word	0x431bde83
 8002030:	10624dd3 	.word	0x10624dd3

08002034 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af02      	add	r7, sp, #8
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	4608      	mov	r0, r1
 800203e:	4611      	mov	r1, r2
 8002040:	461a      	mov	r2, r3
 8002042:	4603      	mov	r3, r0
 8002044:	817b      	strh	r3, [r7, #10]
 8002046:	460b      	mov	r3, r1
 8002048:	813b      	strh	r3, [r7, #8]
 800204a:	4613      	mov	r3, r2
 800204c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800204e:	f7ff fc1f 	bl	8001890 <HAL_GetTick>
 8002052:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b20      	cmp	r3, #32
 800205e:	f040 80d9 	bne.w	8002214 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	2319      	movs	r3, #25
 8002068:	2201      	movs	r2, #1
 800206a:	496d      	ldr	r1, [pc, #436]	; (8002220 <HAL_I2C_Mem_Write+0x1ec>)
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 fdad 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002078:	2302      	movs	r3, #2
 800207a:	e0cc      	b.n	8002216 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_I2C_Mem_Write+0x56>
 8002086:	2302      	movs	r3, #2
 8002088:	e0c5      	b.n	8002216 <HAL_I2C_Mem_Write+0x1e2>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b01      	cmp	r3, #1
 800209e:	d007      	beq.n	80020b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2221      	movs	r2, #33	; 0x21
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2240      	movs	r2, #64	; 0x40
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a3a      	ldr	r2, [r7, #32]
 80020da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a4d      	ldr	r2, [pc, #308]	; (8002224 <HAL_I2C_Mem_Write+0x1f0>)
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020f2:	88f8      	ldrh	r0, [r7, #6]
 80020f4:	893a      	ldrh	r2, [r7, #8]
 80020f6:	8979      	ldrh	r1, [r7, #10]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	4603      	mov	r3, r0
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fbe4 	bl	80028d0 <I2C_RequestMemoryWrite>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d052      	beq.n	80021b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e081      	b.n	8002216 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fe2e 	bl	8002d78 <I2C_WaitOnTXEFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00d      	beq.n	800213e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b04      	cmp	r3, #4
 8002128:	d107      	bne.n	800213a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002138:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e06b      	b.n	8002216 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	781a      	ldrb	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b04      	cmp	r3, #4
 800217a:	d11b      	bne.n	80021b4 <HAL_I2C_Mem_Write+0x180>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d017      	beq.n	80021b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1aa      	bne.n	8002112 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 fe1a 	bl	8002dfa <I2C_WaitOnBTFFlagUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00d      	beq.n	80021e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d107      	bne.n	80021e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e016      	b.n	8002216 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e000      	b.n	8002216 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002214:	2302      	movs	r3, #2
  }
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	00100002 	.word	0x00100002
 8002224:	ffff0000 	.word	0xffff0000

08002228 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08c      	sub	sp, #48	; 0x30
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	4608      	mov	r0, r1
 8002232:	4611      	mov	r1, r2
 8002234:	461a      	mov	r2, r3
 8002236:	4603      	mov	r3, r0
 8002238:	817b      	strh	r3, [r7, #10]
 800223a:	460b      	mov	r3, r1
 800223c:	813b      	strh	r3, [r7, #8]
 800223e:	4613      	mov	r3, r2
 8002240:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002242:	f7ff fb25 	bl	8001890 <HAL_GetTick>
 8002246:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b20      	cmp	r3, #32
 8002252:	f040 8208 	bne.w	8002666 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2319      	movs	r3, #25
 800225c:	2201      	movs	r2, #1
 800225e:	497b      	ldr	r1, [pc, #492]	; (800244c <HAL_I2C_Mem_Read+0x224>)
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fcb3 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800226c:	2302      	movs	r3, #2
 800226e:	e1fb      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_I2C_Mem_Read+0x56>
 800227a:	2302      	movs	r3, #2
 800227c:	e1f4      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	d007      	beq.n	80022a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2222      	movs	r2, #34	; 0x22
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2240      	movs	r2, #64	; 0x40
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80022d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a5b      	ldr	r2, [pc, #364]	; (8002450 <HAL_I2C_Mem_Read+0x228>)
 80022e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022e6:	88f8      	ldrh	r0, [r7, #6]
 80022e8:	893a      	ldrh	r2, [r7, #8]
 80022ea:	8979      	ldrh	r1, [r7, #10]
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	4603      	mov	r3, r0
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fb80 	bl	80029fc <I2C_RequestMemoryRead>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e1b0      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	2b00      	cmp	r3, #0
 800230c:	d113      	bne.n	8002336 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	623b      	str	r3, [r7, #32]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	623b      	str	r3, [r7, #32]
 8002322:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e184      	b.n	8002640 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233a:	2b01      	cmp	r3, #1
 800233c:	d11b      	bne.n	8002376 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	e164      	b.n	8002640 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237a:	2b02      	cmp	r3, #2
 800237c:	d11b      	bne.n	80023b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800238c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800239c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	e144      	b.n	8002640 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023cc:	e138      	b.n	8002640 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	f200 80f1 	bhi.w	80025ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d123      	bne.n	8002428 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fd49 	bl	8002e7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e139      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002426:	e10b      	b.n	8002640 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242c:	2b02      	cmp	r3, #2
 800242e:	d14e      	bne.n	80024ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002436:	2200      	movs	r2, #0
 8002438:	4906      	ldr	r1, [pc, #24]	; (8002454 <HAL_I2C_Mem_Read+0x22c>)
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 fbc6 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d008      	beq.n	8002458 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e10e      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
 800244a:	bf00      	nop
 800244c:	00100002 	.word	0x00100002
 8002450:	ffff0000 	.word	0xffff0000
 8002454:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002466:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024cc:	e0b8      	b.n	8002640 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d4:	2200      	movs	r2, #0
 80024d6:	4966      	ldr	r1, [pc, #408]	; (8002670 <HAL_I2C_Mem_Read+0x448>)
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fb77 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0bf      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002530:	2200      	movs	r2, #0
 8002532:	494f      	ldr	r1, [pc, #316]	; (8002670 <HAL_I2C_Mem_Read+0x448>)
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fb49 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e091      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025b8:	e042      	b.n	8002640 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fc5c 	bl	8002e7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e04c      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b04      	cmp	r3, #4
 800260c:	d118      	bne.n	8002640 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	2b00      	cmp	r3, #0
 8002646:	f47f aec2 	bne.w	80023ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002666:	2302      	movs	r3, #2
  }
}
 8002668:	4618      	mov	r0, r3
 800266a:	3728      	adds	r7, #40	; 0x28
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	00010004 	.word	0x00010004

08002674 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	460b      	mov	r3, r1
 8002682:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002684:	f7ff f904 	bl	8001890 <HAL_GetTick>
 8002688:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800268a:	2301      	movs	r3, #1
 800268c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b20      	cmp	r3, #32
 8002698:	f040 8111 	bne.w	80028be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	2319      	movs	r3, #25
 80026a2:	2201      	movs	r2, #1
 80026a4:	4988      	ldr	r1, [pc, #544]	; (80028c8 <HAL_I2C_IsDeviceReady+0x254>)
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 fa90 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80026b2:	2302      	movs	r3, #2
 80026b4:	e104      	b.n	80028c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_I2C_IsDeviceReady+0x50>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e0fd      	b.n	80028c0 <HAL_I2C_IsDeviceReady+0x24c>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d007      	beq.n	80026ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0201 	orr.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2224      	movs	r2, #36	; 0x24
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4a70      	ldr	r2, [pc, #448]	; (80028cc <HAL_I2C_IsDeviceReady+0x258>)
 800270c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800271c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2200      	movs	r2, #0
 8002726:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fa4e 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00d      	beq.n	8002752 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002744:	d103      	bne.n	800274e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e0b6      	b.n	80028c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002752:	897b      	ldrh	r3, [r7, #10]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002760:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002762:	f7ff f895 	bl	8001890 <HAL_GetTick>
 8002766:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b02      	cmp	r3, #2
 8002774:	bf0c      	ite	eq
 8002776:	2301      	moveq	r3, #1
 8002778:	2300      	movne	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800278c:	bf0c      	ite	eq
 800278e:	2301      	moveq	r3, #1
 8002790:	2300      	movne	r3, #0
 8002792:	b2db      	uxtb	r3, r3
 8002794:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002796:	e025      	b.n	80027e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002798:	f7ff f87a 	bl	8001890 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d302      	bcc.n	80027ae <HAL_I2C_IsDeviceReady+0x13a>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d103      	bne.n	80027b6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	22a0      	movs	r2, #160	; 0xa0
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027da:	bf0c      	ite	eq
 80027dc:	2301      	moveq	r3, #1
 80027de:	2300      	movne	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2ba0      	cmp	r3, #160	; 0xa0
 80027ee:	d005      	beq.n	80027fc <HAL_I2C_IsDeviceReady+0x188>
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <HAL_I2C_IsDeviceReady+0x188>
 80027f6:	7dbb      	ldrb	r3, [r7, #22]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0cd      	beq.n	8002798 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b02      	cmp	r3, #2
 8002810:	d129      	bne.n	8002866 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002820:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	2319      	movs	r3, #25
 800283e:	2201      	movs	r2, #1
 8002840:	4921      	ldr	r1, [pc, #132]	; (80028c8 <HAL_I2C_IsDeviceReady+0x254>)
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f9c2 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e036      	b.n	80028c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e02c      	b.n	80028c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002874:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800287e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	2319      	movs	r3, #25
 8002886:	2201      	movs	r2, #1
 8002888:	490f      	ldr	r1, [pc, #60]	; (80028c8 <HAL_I2C_IsDeviceReady+0x254>)
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f99e 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e012      	b.n	80028c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	3301      	adds	r3, #1
 800289e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	f4ff af32 	bcc.w	800270e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80028be:	2302      	movs	r3, #2
  }
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3720      	adds	r7, #32
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	00100002 	.word	0x00100002
 80028cc:	ffff0000 	.word	0xffff0000

080028d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	4608      	mov	r0, r1
 80028da:	4611      	mov	r1, r2
 80028dc:	461a      	mov	r2, r3
 80028de:	4603      	mov	r3, r0
 80028e0:	817b      	strh	r3, [r7, #10]
 80028e2:	460b      	mov	r3, r1
 80028e4:	813b      	strh	r3, [r7, #8]
 80028e6:	4613      	mov	r3, r2
 80028e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	2200      	movs	r2, #0
 8002902:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f960 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00d      	beq.n	800292e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002920:	d103      	bne.n	800292a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e05f      	b.n	80029ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800292e:	897b      	ldrh	r3, [r7, #10]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800293c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	6a3a      	ldr	r2, [r7, #32]
 8002942:	492d      	ldr	r1, [pc, #180]	; (80029f8 <I2C_RequestMemoryWrite+0x128>)
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f998 	bl	8002c7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e04c      	b.n	80029ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800296a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296c:	6a39      	ldr	r1, [r7, #32]
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fa02 	bl	8002d78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00d      	beq.n	8002996 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2b04      	cmp	r3, #4
 8002980:	d107      	bne.n	8002992 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002990:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e02b      	b.n	80029ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d105      	bne.n	80029a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800299c:	893b      	ldrh	r3, [r7, #8]
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	611a      	str	r2, [r3, #16]
 80029a6:	e021      	b.n	80029ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029a8:	893b      	ldrh	r3, [r7, #8]
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b8:	6a39      	ldr	r1, [r7, #32]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f9dc 	bl	8002d78 <I2C_WaitOnTXEFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00d      	beq.n	80029e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d107      	bne.n	80029de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e005      	b.n	80029ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029e2:	893b      	ldrh	r3, [r7, #8]
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	00010002 	.word	0x00010002

080029fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	817b      	strh	r3, [r7, #10]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	813b      	strh	r3, [r7, #8]
 8002a12:	4613      	mov	r3, r2
 8002a14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f8c2 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00d      	beq.n	8002a6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a5c:	d103      	bne.n	8002a66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e0aa      	b.n	8002bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a6a:	897b      	ldrh	r3, [r7, #10]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	6a3a      	ldr	r2, [r7, #32]
 8002a7e:	4952      	ldr	r1, [pc, #328]	; (8002bc8 <I2C_RequestMemoryRead+0x1cc>)
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f8fa 	bl	8002c7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e097      	b.n	8002bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa8:	6a39      	ldr	r1, [r7, #32]
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f964 	bl	8002d78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00d      	beq.n	8002ad2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d107      	bne.n	8002ace <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002acc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e076      	b.n	8002bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d105      	bne.n	8002ae4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ad8:	893b      	ldrh	r3, [r7, #8]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	611a      	str	r2, [r3, #16]
 8002ae2:	e021      	b.n	8002b28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ae4:	893b      	ldrh	r3, [r7, #8]
 8002ae6:	0a1b      	lsrs	r3, r3, #8
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af4:	6a39      	ldr	r1, [r7, #32]
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f93e 	bl	8002d78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00d      	beq.n	8002b1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d107      	bne.n	8002b1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e050      	b.n	8002bc0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b1e:	893b      	ldrh	r3, [r7, #8]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2a:	6a39      	ldr	r1, [r7, #32]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f923 	bl	8002d78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00d      	beq.n	8002b54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d107      	bne.n	8002b50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e035      	b.n	8002bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f82b 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00d      	beq.n	8002b98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b8a:	d103      	bne.n	8002b94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e013      	b.n	8002bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b98:	897b      	ldrh	r3, [r7, #10]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	6a3a      	ldr	r2, [r7, #32]
 8002bac:	4906      	ldr	r1, [pc, #24]	; (8002bc8 <I2C_RequestMemoryRead+0x1cc>)
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 f863 	bl	8002c7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	00010002 	.word	0x00010002

08002bcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bdc:	e025      	b.n	8002c2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002be4:	d021      	beq.n	8002c2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be6:	f7fe fe53 	bl	8001890 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d302      	bcc.n	8002bfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d116      	bne.n	8002c2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f043 0220 	orr.w	r2, r3, #32
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e023      	b.n	8002c72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d10d      	bne.n	8002c50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	bf0c      	ite	eq
 8002c46:	2301      	moveq	r3, #1
 8002c48:	2300      	movne	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	e00c      	b.n	8002c6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	43da      	mvns	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d0b6      	beq.n	8002bde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
 8002c86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c88:	e051      	b.n	8002d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c98:	d123      	bne.n	8002ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f043 0204 	orr.w	r2, r3, #4
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e046      	b.n	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ce8:	d021      	beq.n	8002d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cea:	f7fe fdd1 	bl	8001890 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d302      	bcc.n	8002d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d116      	bne.n	8002d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f043 0220 	orr.w	r2, r3, #32
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e020      	b.n	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	0c1b      	lsrs	r3, r3, #16
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d10c      	bne.n	8002d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	43da      	mvns	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4013      	ands	r3, r2
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bf14      	ite	ne
 8002d4a:	2301      	movne	r3, #1
 8002d4c:	2300      	moveq	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	e00b      	b.n	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	43da      	mvns	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d18d      	bne.n	8002c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d84:	e02d      	b.n	8002de2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f8ce 	bl	8002f28 <I2C_IsAcknowledgeFailed>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e02d      	b.n	8002df2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d9c:	d021      	beq.n	8002de2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9e:	f7fe fd77 	bl	8001890 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d302      	bcc.n	8002db4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d116      	bne.n	8002de2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e007      	b.n	8002df2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dec:	2b80      	cmp	r3, #128	; 0x80
 8002dee:	d1ca      	bne.n	8002d86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e06:	e02d      	b.n	8002e64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f88d 	bl	8002f28 <I2C_IsAcknowledgeFailed>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e02d      	b.n	8002e74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e1e:	d021      	beq.n	8002e64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e20:	f7fe fd36 	bl	8001890 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d302      	bcc.n	8002e36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d116      	bne.n	8002e64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e007      	b.n	8002e74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d1ca      	bne.n	8002e08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e88:	e042      	b.n	8002f10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d119      	bne.n	8002ecc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0210 	mvn.w	r2, #16
 8002ea0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e029      	b.n	8002f20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ecc:	f7fe fce0 	bl	8001890 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d302      	bcc.n	8002ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d116      	bne.n	8002f10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e007      	b.n	8002f20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b40      	cmp	r3, #64	; 0x40
 8002f1c:	d1b5      	bne.n	8002e8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3e:	d11b      	bne.n	8002f78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	f043 0204 	orr.w	r2, r3, #4
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e264      	b.n	8003464 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d075      	beq.n	8003092 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fa6:	4ba3      	ldr	r3, [pc, #652]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d00c      	beq.n	8002fcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb2:	4ba0      	ldr	r3, [pc, #640]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d112      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fbe:	4b9d      	ldr	r3, [pc, #628]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fca:	d10b      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fcc:	4b99      	ldr	r3, [pc, #612]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d05b      	beq.n	8003090 <HAL_RCC_OscConfig+0x108>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d157      	bne.n	8003090 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e23f      	b.n	8003464 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fec:	d106      	bne.n	8002ffc <HAL_RCC_OscConfig+0x74>
 8002fee:	4b91      	ldr	r3, [pc, #580]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a90      	ldr	r2, [pc, #576]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e01d      	b.n	8003038 <HAL_RCC_OscConfig+0xb0>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x98>
 8003006:	4b8b      	ldr	r3, [pc, #556]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a8a      	ldr	r2, [pc, #552]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	4b88      	ldr	r3, [pc, #544]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a87      	ldr	r2, [pc, #540]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e00b      	b.n	8003038 <HAL_RCC_OscConfig+0xb0>
 8003020:	4b84      	ldr	r3, [pc, #528]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a83      	ldr	r2, [pc, #524]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	4b81      	ldr	r3, [pc, #516]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a80      	ldr	r2, [pc, #512]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003040:	f7fe fc26 	bl	8001890 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003048:	f7fe fc22 	bl	8001890 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e204      	b.n	8003464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305a:	4b76      	ldr	r3, [pc, #472]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0xc0>
 8003066:	e014      	b.n	8003092 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fe fc12 	bl	8001890 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003070:	f7fe fc0e 	bl	8001890 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e1f0      	b.n	8003464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003082:	4b6c      	ldr	r3, [pc, #432]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0xe8>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d063      	beq.n	8003166 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800309e:	4b65      	ldr	r3, [pc, #404]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030aa:	4b62      	ldr	r3, [pc, #392]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d11c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030b6:	4b5f      	ldr	r3, [pc, #380]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d116      	bne.n	80030f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c2:	4b5c      	ldr	r3, [pc, #368]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_RCC_OscConfig+0x152>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d001      	beq.n	80030da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e1c4      	b.n	8003464 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030da:	4b56      	ldr	r3, [pc, #344]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4952      	ldr	r1, [pc, #328]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ee:	e03a      	b.n	8003166 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d020      	beq.n	800313a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f8:	4b4f      	ldr	r3, [pc, #316]	; (8003238 <HAL_RCC_OscConfig+0x2b0>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fe:	f7fe fbc7 	bl	8001890 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003106:	f7fe fbc3 	bl	8001890 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e1a5      	b.n	8003464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003118:	4b46      	ldr	r3, [pc, #280]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003124:	4b43      	ldr	r3, [pc, #268]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4940      	ldr	r1, [pc, #256]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003134:	4313      	orrs	r3, r2
 8003136:	600b      	str	r3, [r1, #0]
 8003138:	e015      	b.n	8003166 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313a:	4b3f      	ldr	r3, [pc, #252]	; (8003238 <HAL_RCC_OscConfig+0x2b0>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe fba6 	bl	8001890 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003148:	f7fe fba2 	bl	8001890 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e184      	b.n	8003464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315a:	4b36      	ldr	r3, [pc, #216]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d030      	beq.n	80031d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d016      	beq.n	80031a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317a:	4b30      	ldr	r3, [pc, #192]	; (800323c <HAL_RCC_OscConfig+0x2b4>)
 800317c:	2201      	movs	r2, #1
 800317e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7fe fb86 	bl	8001890 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003188:	f7fe fb82 	bl	8001890 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e164      	b.n	8003464 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319a:	4b26      	ldr	r3, [pc, #152]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0x200>
 80031a6:	e015      	b.n	80031d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a8:	4b24      	ldr	r3, [pc, #144]	; (800323c <HAL_RCC_OscConfig+0x2b4>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ae:	f7fe fb6f 	bl	8001890 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b6:	f7fe fb6b 	bl	8001890 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e14d      	b.n	8003464 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c8:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80031ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f0      	bne.n	80031b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80a0 	beq.w	8003322 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e2:	2300      	movs	r3, #0
 80031e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e6:	4b13      	ldr	r3, [pc, #76]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10f      	bne.n	8003212 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	4a0e      	ldr	r2, [pc, #56]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003200:	6413      	str	r3, [r2, #64]	; 0x40
 8003202:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320e:	2301      	movs	r3, #1
 8003210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_OscConfig+0x2b8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d121      	bne.n	8003262 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HAL_RCC_OscConfig+0x2b8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a07      	ldr	r2, [pc, #28]	; (8003240 <HAL_RCC_OscConfig+0x2b8>)
 8003224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322a:	f7fe fb31 	bl	8001890 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	e011      	b.n	8003256 <HAL_RCC_OscConfig+0x2ce>
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	42470000 	.word	0x42470000
 800323c:	42470e80 	.word	0x42470e80
 8003240:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003244:	f7fe fb24 	bl	8001890 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e106      	b.n	8003464 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003256:	4b85      	ldr	r3, [pc, #532]	; (800346c <HAL_RCC_OscConfig+0x4e4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d106      	bne.n	8003278 <HAL_RCC_OscConfig+0x2f0>
 800326a:	4b81      	ldr	r3, [pc, #516]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	4a80      	ldr	r2, [pc, #512]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	6713      	str	r3, [r2, #112]	; 0x70
 8003276:	e01c      	b.n	80032b2 <HAL_RCC_OscConfig+0x32a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b05      	cmp	r3, #5
 800327e:	d10c      	bne.n	800329a <HAL_RCC_OscConfig+0x312>
 8003280:	4b7b      	ldr	r3, [pc, #492]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	4a7a      	ldr	r2, [pc, #488]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 8003286:	f043 0304 	orr.w	r3, r3, #4
 800328a:	6713      	str	r3, [r2, #112]	; 0x70
 800328c:	4b78      	ldr	r3, [pc, #480]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	4a77      	ldr	r2, [pc, #476]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	6713      	str	r3, [r2, #112]	; 0x70
 8003298:	e00b      	b.n	80032b2 <HAL_RCC_OscConfig+0x32a>
 800329a:	4b75      	ldr	r3, [pc, #468]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329e:	4a74      	ldr	r2, [pc, #464]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	6713      	str	r3, [r2, #112]	; 0x70
 80032a6:	4b72      	ldr	r3, [pc, #456]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	4a71      	ldr	r2, [pc, #452]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 80032ac:	f023 0304 	bic.w	r3, r3, #4
 80032b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d015      	beq.n	80032e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7fe fae9 	bl	8001890 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c0:	e00a      	b.n	80032d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7fe fae5 	bl	8001890 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0c5      	b.n	8003464 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d8:	4b65      	ldr	r3, [pc, #404]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0ee      	beq.n	80032c2 <HAL_RCC_OscConfig+0x33a>
 80032e4:	e014      	b.n	8003310 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e6:	f7fe fad3 	bl	8001890 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ec:	e00a      	b.n	8003304 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ee:	f7fe facf 	bl	8001890 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e0af      	b.n	8003464 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003304:	4b5a      	ldr	r3, [pc, #360]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ee      	bne.n	80032ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003310:	7dfb      	ldrb	r3, [r7, #23]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d105      	bne.n	8003322 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003316:	4b56      	ldr	r3, [pc, #344]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	4a55      	ldr	r2, [pc, #340]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 800331c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003320:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 809b 	beq.w	8003462 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800332c:	4b50      	ldr	r3, [pc, #320]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 030c 	and.w	r3, r3, #12
 8003334:	2b08      	cmp	r3, #8
 8003336:	d05c      	beq.n	80033f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	2b02      	cmp	r3, #2
 800333e:	d141      	bne.n	80033c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003340:	4b4c      	ldr	r3, [pc, #304]	; (8003474 <HAL_RCC_OscConfig+0x4ec>)
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7fe faa3 	bl	8001890 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334e:	f7fe fa9f 	bl	8001890 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e081      	b.n	8003464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003360:	4b43      	ldr	r3, [pc, #268]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f0      	bne.n	800334e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69da      	ldr	r2, [r3, #28]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	019b      	lsls	r3, r3, #6
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	085b      	lsrs	r3, r3, #1
 8003384:	3b01      	subs	r3, #1
 8003386:	041b      	lsls	r3, r3, #16
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	061b      	lsls	r3, r3, #24
 8003390:	4937      	ldr	r1, [pc, #220]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 8003392:	4313      	orrs	r3, r2
 8003394:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003396:	4b37      	ldr	r3, [pc, #220]	; (8003474 <HAL_RCC_OscConfig+0x4ec>)
 8003398:	2201      	movs	r2, #1
 800339a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fe fa78 	bl	8001890 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a4:	f7fe fa74 	bl	8001890 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e056      	b.n	8003464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b6:	4b2e      	ldr	r3, [pc, #184]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0x41c>
 80033c2:	e04e      	b.n	8003462 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c4:	4b2b      	ldr	r3, [pc, #172]	; (8003474 <HAL_RCC_OscConfig+0x4ec>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ca:	f7fe fa61 	bl	8001890 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d2:	f7fe fa5d 	bl	8001890 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e03f      	b.n	8003464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e4:	4b22      	ldr	r3, [pc, #136]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f0      	bne.n	80033d2 <HAL_RCC_OscConfig+0x44a>
 80033f0:	e037      	b.n	8003462 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e032      	b.n	8003464 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033fe:	4b1c      	ldr	r3, [pc, #112]	; (8003470 <HAL_RCC_OscConfig+0x4e8>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d028      	beq.n	800345e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003416:	429a      	cmp	r2, r3
 8003418:	d121      	bne.n	800345e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d11a      	bne.n	800345e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800342e:	4013      	ands	r3, r2
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003434:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003436:	4293      	cmp	r3, r2
 8003438:	d111      	bne.n	800345e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	3b01      	subs	r3, #1
 8003448:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800344a:	429a      	cmp	r2, r3
 800344c:	d107      	bne.n	800345e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800345a:	429a      	cmp	r2, r3
 800345c:	d001      	beq.n	8003462 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40007000 	.word	0x40007000
 8003470:	40023800 	.word	0x40023800
 8003474:	42470060 	.word	0x42470060

08003478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0cc      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800348c:	4b68      	ldr	r3, [pc, #416]	; (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d90c      	bls.n	80034b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349a:	4b65      	ldr	r3, [pc, #404]	; (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b63      	ldr	r3, [pc, #396]	; (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0b8      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d020      	beq.n	8003502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034cc:	4b59      	ldr	r3, [pc, #356]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a58      	ldr	r2, [pc, #352]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e4:	4b53      	ldr	r3, [pc, #332]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4a52      	ldr	r2, [pc, #328]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f0:	4b50      	ldr	r3, [pc, #320]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	494d      	ldr	r1, [pc, #308]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d044      	beq.n	8003598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d107      	bne.n	8003526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003516:	4b47      	ldr	r3, [pc, #284]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d119      	bne.n	8003556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e07f      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d003      	beq.n	8003536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003532:	2b03      	cmp	r3, #3
 8003534:	d107      	bne.n	8003546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003536:	4b3f      	ldr	r3, [pc, #252]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e06f      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003546:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e067      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003556:	4b37      	ldr	r3, [pc, #220]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f023 0203 	bic.w	r2, r3, #3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4934      	ldr	r1, [pc, #208]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	4313      	orrs	r3, r2
 8003566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003568:	f7fe f992 	bl	8001890 <HAL_GetTick>
 800356c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356e:	e00a      	b.n	8003586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003570:	f7fe f98e 	bl	8001890 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	f241 3288 	movw	r2, #5000	; 0x1388
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e04f      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003586:	4b2b      	ldr	r3, [pc, #172]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 020c 	and.w	r2, r3, #12
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	429a      	cmp	r2, r3
 8003596:	d1eb      	bne.n	8003570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003598:	4b25      	ldr	r3, [pc, #148]	; (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d20c      	bcs.n	80035c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b22      	ldr	r3, [pc, #136]	; (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b20      	ldr	r3, [pc, #128]	; (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e032      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035cc:	4b19      	ldr	r3, [pc, #100]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4916      	ldr	r1, [pc, #88]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ea:	4b12      	ldr	r3, [pc, #72]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	490e      	ldr	r1, [pc, #56]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035fe:	f000 f821 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 8003602:	4602      	mov	r2, r0
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	091b      	lsrs	r3, r3, #4
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	490a      	ldr	r1, [pc, #40]	; (8003638 <HAL_RCC_ClockConfig+0x1c0>)
 8003610:	5ccb      	ldrb	r3, [r1, r3]
 8003612:	fa22 f303 	lsr.w	r3, r2, r3
 8003616:	4a09      	ldr	r2, [pc, #36]	; (800363c <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800361a:	4b09      	ldr	r3, [pc, #36]	; (8003640 <HAL_RCC_ClockConfig+0x1c8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7fe f8f2 	bl	8001808 <HAL_InitTick>

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40023c00 	.word	0x40023c00
 8003634:	40023800 	.word	0x40023800
 8003638:	0800b060 	.word	0x0800b060
 800363c:	20000000 	.word	0x20000000
 8003640:	20000004 	.word	0x20000004

08003644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003644:	b5b0      	push	{r4, r5, r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800364a:	2100      	movs	r1, #0
 800364c:	6079      	str	r1, [r7, #4]
 800364e:	2100      	movs	r1, #0
 8003650:	60f9      	str	r1, [r7, #12]
 8003652:	2100      	movs	r1, #0
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003656:	2100      	movs	r1, #0
 8003658:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800365a:	4952      	ldr	r1, [pc, #328]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800365c:	6889      	ldr	r1, [r1, #8]
 800365e:	f001 010c 	and.w	r1, r1, #12
 8003662:	2908      	cmp	r1, #8
 8003664:	d00d      	beq.n	8003682 <HAL_RCC_GetSysClockFreq+0x3e>
 8003666:	2908      	cmp	r1, #8
 8003668:	f200 8094 	bhi.w	8003794 <HAL_RCC_GetSysClockFreq+0x150>
 800366c:	2900      	cmp	r1, #0
 800366e:	d002      	beq.n	8003676 <HAL_RCC_GetSysClockFreq+0x32>
 8003670:	2904      	cmp	r1, #4
 8003672:	d003      	beq.n	800367c <HAL_RCC_GetSysClockFreq+0x38>
 8003674:	e08e      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003676:	4b4c      	ldr	r3, [pc, #304]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003678:	60bb      	str	r3, [r7, #8]
       break;
 800367a:	e08e      	b.n	800379a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800367c:	4b4b      	ldr	r3, [pc, #300]	; (80037ac <HAL_RCC_GetSysClockFreq+0x168>)
 800367e:	60bb      	str	r3, [r7, #8]
      break;
 8003680:	e08b      	b.n	800379a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003682:	4948      	ldr	r1, [pc, #288]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003684:	6849      	ldr	r1, [r1, #4]
 8003686:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800368a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800368c:	4945      	ldr	r1, [pc, #276]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800368e:	6849      	ldr	r1, [r1, #4]
 8003690:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003694:	2900      	cmp	r1, #0
 8003696:	d024      	beq.n	80036e2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003698:	4942      	ldr	r1, [pc, #264]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800369a:	6849      	ldr	r1, [r1, #4]
 800369c:	0989      	lsrs	r1, r1, #6
 800369e:	4608      	mov	r0, r1
 80036a0:	f04f 0100 	mov.w	r1, #0
 80036a4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80036a8:	f04f 0500 	mov.w	r5, #0
 80036ac:	ea00 0204 	and.w	r2, r0, r4
 80036b0:	ea01 0305 	and.w	r3, r1, r5
 80036b4:	493d      	ldr	r1, [pc, #244]	; (80037ac <HAL_RCC_GetSysClockFreq+0x168>)
 80036b6:	fb01 f003 	mul.w	r0, r1, r3
 80036ba:	2100      	movs	r1, #0
 80036bc:	fb01 f102 	mul.w	r1, r1, r2
 80036c0:	1844      	adds	r4, r0, r1
 80036c2:	493a      	ldr	r1, [pc, #232]	; (80037ac <HAL_RCC_GetSysClockFreq+0x168>)
 80036c4:	fba2 0101 	umull	r0, r1, r2, r1
 80036c8:	1863      	adds	r3, r4, r1
 80036ca:	4619      	mov	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	461a      	mov	r2, r3
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	f7fd fad8 	bl	8000c88 <__aeabi_uldivmod>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4613      	mov	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	e04a      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036e2:	4b30      	ldr	r3, [pc, #192]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x160>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	099b      	lsrs	r3, r3, #6
 80036e8:	461a      	mov	r2, r3
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036f2:	f04f 0100 	mov.w	r1, #0
 80036f6:	ea02 0400 	and.w	r4, r2, r0
 80036fa:	ea03 0501 	and.w	r5, r3, r1
 80036fe:	4620      	mov	r0, r4
 8003700:	4629      	mov	r1, r5
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	014b      	lsls	r3, r1, #5
 800370c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003710:	0142      	lsls	r2, r0, #5
 8003712:	4610      	mov	r0, r2
 8003714:	4619      	mov	r1, r3
 8003716:	1b00      	subs	r0, r0, r4
 8003718:	eb61 0105 	sbc.w	r1, r1, r5
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	018b      	lsls	r3, r1, #6
 8003726:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800372a:	0182      	lsls	r2, r0, #6
 800372c:	1a12      	subs	r2, r2, r0
 800372e:	eb63 0301 	sbc.w	r3, r3, r1
 8003732:	f04f 0000 	mov.w	r0, #0
 8003736:	f04f 0100 	mov.w	r1, #0
 800373a:	00d9      	lsls	r1, r3, #3
 800373c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003740:	00d0      	lsls	r0, r2, #3
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	1912      	adds	r2, r2, r4
 8003748:	eb45 0303 	adc.w	r3, r5, r3
 800374c:	f04f 0000 	mov.w	r0, #0
 8003750:	f04f 0100 	mov.w	r1, #0
 8003754:	0299      	lsls	r1, r3, #10
 8003756:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800375a:	0290      	lsls	r0, r2, #10
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4610      	mov	r0, r2
 8003762:	4619      	mov	r1, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	461a      	mov	r2, r3
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	f7fd fa8c 	bl	8000c88 <__aeabi_uldivmod>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4613      	mov	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	0c1b      	lsrs	r3, r3, #16
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	3301      	adds	r3, #1
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003790:	60bb      	str	r3, [r7, #8]
      break;
 8003792:	e002      	b.n	800379a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003796:	60bb      	str	r3, [r7, #8]
      break;
 8003798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800379a:	68bb      	ldr	r3, [r7, #8]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bdb0      	pop	{r4, r5, r7, pc}
 80037a4:	40023800 	.word	0x40023800
 80037a8:	00f42400 	.word	0x00f42400
 80037ac:	017d7840 	.word	0x017d7840

080037b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037b6:	681b      	ldr	r3, [r3, #0]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	20000000 	.word	0x20000000

080037c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037cc:	f7ff fff0 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80037d0:	4602      	mov	r2, r0
 80037d2:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	0a9b      	lsrs	r3, r3, #10
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	4903      	ldr	r1, [pc, #12]	; (80037ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80037de:	5ccb      	ldrb	r3, [r1, r3]
 80037e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40023800 	.word	0x40023800
 80037ec:	0800b070 	.word	0x0800b070

080037f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037f4:	f7ff ffdc 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80037f8:	4602      	mov	r2, r0
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	0b5b      	lsrs	r3, r3, #13
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	4903      	ldr	r1, [pc, #12]	; (8003814 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003806:	5ccb      	ldrb	r3, [r1, r3]
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800380c:	4618      	mov	r0, r3
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40023800 	.word	0x40023800
 8003814:	0800b070 	.word	0x0800b070

08003818 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e03f      	b.n	80038aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fd fe54 	bl	80014ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2224      	movs	r2, #36	; 0x24
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800385a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f829 	bl	80038b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003870:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003880:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003890:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b8:	b09f      	sub	sp, #124	; 0x7c
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ca:	68d9      	ldr	r1, [r3, #12]
 80038cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	ea40 0301 	orr.w	r3, r0, r1
 80038d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	431a      	orrs	r2, r3
 80038e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	431a      	orrs	r2, r3
 80038e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80038ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038f8:	f021 010c 	bic.w	r1, r1, #12
 80038fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003902:	430b      	orrs	r3, r1
 8003904:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003912:	6999      	ldr	r1, [r3, #24]
 8003914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	ea40 0301 	orr.w	r3, r0, r1
 800391c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800391e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4bc5      	ldr	r3, [pc, #788]	; (8003c38 <UART_SetConfig+0x384>)
 8003924:	429a      	cmp	r2, r3
 8003926:	d004      	beq.n	8003932 <UART_SetConfig+0x7e>
 8003928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4bc3      	ldr	r3, [pc, #780]	; (8003c3c <UART_SetConfig+0x388>)
 800392e:	429a      	cmp	r2, r3
 8003930:	d103      	bne.n	800393a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003932:	f7ff ff5d 	bl	80037f0 <HAL_RCC_GetPCLK2Freq>
 8003936:	6778      	str	r0, [r7, #116]	; 0x74
 8003938:	e002      	b.n	8003940 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800393a:	f7ff ff45 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 800393e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003948:	f040 80b6 	bne.w	8003ab8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800394c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800394e:	461c      	mov	r4, r3
 8003950:	f04f 0500 	mov.w	r5, #0
 8003954:	4622      	mov	r2, r4
 8003956:	462b      	mov	r3, r5
 8003958:	1891      	adds	r1, r2, r2
 800395a:	6439      	str	r1, [r7, #64]	; 0x40
 800395c:	415b      	adcs	r3, r3
 800395e:	647b      	str	r3, [r7, #68]	; 0x44
 8003960:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003964:	1912      	adds	r2, r2, r4
 8003966:	eb45 0303 	adc.w	r3, r5, r3
 800396a:	f04f 0000 	mov.w	r0, #0
 800396e:	f04f 0100 	mov.w	r1, #0
 8003972:	00d9      	lsls	r1, r3, #3
 8003974:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003978:	00d0      	lsls	r0, r2, #3
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	1911      	adds	r1, r2, r4
 8003980:	6639      	str	r1, [r7, #96]	; 0x60
 8003982:	416b      	adcs	r3, r5
 8003984:	667b      	str	r3, [r7, #100]	; 0x64
 8003986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	461a      	mov	r2, r3
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	1891      	adds	r1, r2, r2
 8003992:	63b9      	str	r1, [r7, #56]	; 0x38
 8003994:	415b      	adcs	r3, r3
 8003996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003998:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800399c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80039a0:	f7fd f972 	bl	8000c88 <__aeabi_uldivmod>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4ba5      	ldr	r3, [pc, #660]	; (8003c40 <UART_SetConfig+0x38c>)
 80039aa:	fba3 2302 	umull	r2, r3, r3, r2
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	011e      	lsls	r6, r3, #4
 80039b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b4:	461c      	mov	r4, r3
 80039b6:	f04f 0500 	mov.w	r5, #0
 80039ba:	4622      	mov	r2, r4
 80039bc:	462b      	mov	r3, r5
 80039be:	1891      	adds	r1, r2, r2
 80039c0:	6339      	str	r1, [r7, #48]	; 0x30
 80039c2:	415b      	adcs	r3, r3
 80039c4:	637b      	str	r3, [r7, #52]	; 0x34
 80039c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80039ca:	1912      	adds	r2, r2, r4
 80039cc:	eb45 0303 	adc.w	r3, r5, r3
 80039d0:	f04f 0000 	mov.w	r0, #0
 80039d4:	f04f 0100 	mov.w	r1, #0
 80039d8:	00d9      	lsls	r1, r3, #3
 80039da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039de:	00d0      	lsls	r0, r2, #3
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	1911      	adds	r1, r2, r4
 80039e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80039e8:	416b      	adcs	r3, r5
 80039ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	461a      	mov	r2, r3
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	1891      	adds	r1, r2, r2
 80039f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80039fa:	415b      	adcs	r3, r3
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003a06:	f7fd f93f 	bl	8000c88 <__aeabi_uldivmod>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4b8c      	ldr	r3, [pc, #560]	; (8003c40 <UART_SetConfig+0x38c>)
 8003a10:	fba3 1302 	umull	r1, r3, r3, r2
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	2164      	movs	r1, #100	; 0x64
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	3332      	adds	r3, #50	; 0x32
 8003a22:	4a87      	ldr	r2, [pc, #540]	; (8003c40 <UART_SetConfig+0x38c>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a30:	441e      	add	r6, r3
 8003a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a34:	4618      	mov	r0, r3
 8003a36:	f04f 0100 	mov.w	r1, #0
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	1894      	adds	r4, r2, r2
 8003a40:	623c      	str	r4, [r7, #32]
 8003a42:	415b      	adcs	r3, r3
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
 8003a46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a4a:	1812      	adds	r2, r2, r0
 8003a4c:	eb41 0303 	adc.w	r3, r1, r3
 8003a50:	f04f 0400 	mov.w	r4, #0
 8003a54:	f04f 0500 	mov.w	r5, #0
 8003a58:	00dd      	lsls	r5, r3, #3
 8003a5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a5e:	00d4      	lsls	r4, r2, #3
 8003a60:	4622      	mov	r2, r4
 8003a62:	462b      	mov	r3, r5
 8003a64:	1814      	adds	r4, r2, r0
 8003a66:	653c      	str	r4, [r7, #80]	; 0x50
 8003a68:	414b      	adcs	r3, r1
 8003a6a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	461a      	mov	r2, r3
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	1891      	adds	r1, r2, r2
 8003a78:	61b9      	str	r1, [r7, #24]
 8003a7a:	415b      	adcs	r3, r3
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003a86:	f7fd f8ff 	bl	8000c88 <__aeabi_uldivmod>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4b6c      	ldr	r3, [pc, #432]	; (8003c40 <UART_SetConfig+0x38c>)
 8003a90:	fba3 1302 	umull	r1, r3, r3, r2
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	2164      	movs	r1, #100	; 0x64
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	3332      	adds	r3, #50	; 0x32
 8003aa2:	4a67      	ldr	r2, [pc, #412]	; (8003c40 <UART_SetConfig+0x38c>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	f003 0207 	and.w	r2, r3, #7
 8003aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4432      	add	r2, r6
 8003ab4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ab6:	e0b9      	b.n	8003c2c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aba:	461c      	mov	r4, r3
 8003abc:	f04f 0500 	mov.w	r5, #0
 8003ac0:	4622      	mov	r2, r4
 8003ac2:	462b      	mov	r3, r5
 8003ac4:	1891      	adds	r1, r2, r2
 8003ac6:	6139      	str	r1, [r7, #16]
 8003ac8:	415b      	adcs	r3, r3
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ad0:	1912      	adds	r2, r2, r4
 8003ad2:	eb45 0303 	adc.w	r3, r5, r3
 8003ad6:	f04f 0000 	mov.w	r0, #0
 8003ada:	f04f 0100 	mov.w	r1, #0
 8003ade:	00d9      	lsls	r1, r3, #3
 8003ae0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ae4:	00d0      	lsls	r0, r2, #3
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	eb12 0804 	adds.w	r8, r2, r4
 8003aee:	eb43 0905 	adc.w	r9, r3, r5
 8003af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f04f 0100 	mov.w	r1, #0
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	008b      	lsls	r3, r1, #2
 8003b06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b0a:	0082      	lsls	r2, r0, #2
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	4649      	mov	r1, r9
 8003b10:	f7fd f8ba 	bl	8000c88 <__aeabi_uldivmod>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4b49      	ldr	r3, [pc, #292]	; (8003c40 <UART_SetConfig+0x38c>)
 8003b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	011e      	lsls	r6, r3, #4
 8003b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b24:	4618      	mov	r0, r3
 8003b26:	f04f 0100 	mov.w	r1, #0
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	1894      	adds	r4, r2, r2
 8003b30:	60bc      	str	r4, [r7, #8]
 8003b32:	415b      	adcs	r3, r3
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b3a:	1812      	adds	r2, r2, r0
 8003b3c:	eb41 0303 	adc.w	r3, r1, r3
 8003b40:	f04f 0400 	mov.w	r4, #0
 8003b44:	f04f 0500 	mov.w	r5, #0
 8003b48:	00dd      	lsls	r5, r3, #3
 8003b4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b4e:	00d4      	lsls	r4, r2, #3
 8003b50:	4622      	mov	r2, r4
 8003b52:	462b      	mov	r3, r5
 8003b54:	1814      	adds	r4, r2, r0
 8003b56:	64bc      	str	r4, [r7, #72]	; 0x48
 8003b58:	414b      	adcs	r3, r1
 8003b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	008b      	lsls	r3, r1, #2
 8003b70:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b74:	0082      	lsls	r2, r0, #2
 8003b76:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003b7a:	f7fd f885 	bl	8000c88 <__aeabi_uldivmod>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4b2f      	ldr	r3, [pc, #188]	; (8003c40 <UART_SetConfig+0x38c>)
 8003b84:	fba3 1302 	umull	r1, r3, r3, r2
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	2164      	movs	r1, #100	; 0x64
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	3332      	adds	r3, #50	; 0x32
 8003b96:	4a2a      	ldr	r2, [pc, #168]	; (8003c40 <UART_SetConfig+0x38c>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba2:	441e      	add	r6, r3
 8003ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f04f 0100 	mov.w	r1, #0
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	1894      	adds	r4, r2, r2
 8003bb2:	603c      	str	r4, [r7, #0]
 8003bb4:	415b      	adcs	r3, r3
 8003bb6:	607b      	str	r3, [r7, #4]
 8003bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bbc:	1812      	adds	r2, r2, r0
 8003bbe:	eb41 0303 	adc.w	r3, r1, r3
 8003bc2:	f04f 0400 	mov.w	r4, #0
 8003bc6:	f04f 0500 	mov.w	r5, #0
 8003bca:	00dd      	lsls	r5, r3, #3
 8003bcc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bd0:	00d4      	lsls	r4, r2, #3
 8003bd2:	4622      	mov	r2, r4
 8003bd4:	462b      	mov	r3, r5
 8003bd6:	eb12 0a00 	adds.w	sl, r2, r0
 8003bda:	eb43 0b01 	adc.w	fp, r3, r1
 8003bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f04f 0100 	mov.w	r1, #0
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	008b      	lsls	r3, r1, #2
 8003bf2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bf6:	0082      	lsls	r2, r0, #2
 8003bf8:	4650      	mov	r0, sl
 8003bfa:	4659      	mov	r1, fp
 8003bfc:	f7fd f844 	bl	8000c88 <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <UART_SetConfig+0x38c>)
 8003c06:	fba3 1302 	umull	r1, r3, r3, r2
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	2164      	movs	r1, #100	; 0x64
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	3332      	adds	r3, #50	; 0x32
 8003c18:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <UART_SetConfig+0x38c>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	f003 020f 	and.w	r2, r3, #15
 8003c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4432      	add	r2, r6
 8003c2a:	609a      	str	r2, [r3, #8]
}
 8003c2c:	bf00      	nop
 8003c2e:	377c      	adds	r7, #124	; 0x7c
 8003c30:	46bd      	mov	sp, r7
 8003c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c36:	bf00      	nop
 8003c38:	40011000 	.word	0x40011000
 8003c3c:	40011400 	.word	0x40011400
 8003c40:	51eb851f 	.word	0x51eb851f

08003c44 <__NVIC_SetPriority>:
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	6039      	str	r1, [r7, #0]
 8003c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	db0a      	blt.n	8003c6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	490c      	ldr	r1, [pc, #48]	; (8003c90 <__NVIC_SetPriority+0x4c>)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	0112      	lsls	r2, r2, #4
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	440b      	add	r3, r1
 8003c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c6c:	e00a      	b.n	8003c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4908      	ldr	r1, [pc, #32]	; (8003c94 <__NVIC_SetPriority+0x50>)
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	3b04      	subs	r3, #4
 8003c7c:	0112      	lsls	r2, r2, #4
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	440b      	add	r3, r1
 8003c82:	761a      	strb	r2, [r3, #24]
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	e000e100 	.word	0xe000e100
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	f06f 0004 	mvn.w	r0, #4
 8003ca2:	f7ff ffcf 	bl	8003c44 <__NVIC_SetPriority>
#endif
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cb2:	f3ef 8305 	mrs	r3, IPSR
 8003cb6:	603b      	str	r3, [r7, #0]
  return(result);
 8003cb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003cbe:	f06f 0305 	mvn.w	r3, #5
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	e00c      	b.n	8003ce0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <osKernelInitialize+0x44>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d105      	bne.n	8003cda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003cce:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <osKernelInitialize+0x44>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	607b      	str	r3, [r7, #4]
 8003cd8:	e002      	b.n	8003ce0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ce0:	687b      	ldr	r3, [r7, #4]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	200002f8 	.word	0x200002f8

08003cf4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cfa:	f3ef 8305 	mrs	r3, IPSR
 8003cfe:	603b      	str	r3, [r7, #0]
  return(result);
 8003d00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003d06:	f06f 0305 	mvn.w	r3, #5
 8003d0a:	607b      	str	r3, [r7, #4]
 8003d0c:	e010      	b.n	8003d30 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <osKernelStart+0x48>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d109      	bne.n	8003d2a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003d16:	f7ff ffbf 	bl	8003c98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003d1a:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <osKernelStart+0x48>)
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003d20:	f001 f866 	bl	8004df0 <vTaskStartScheduler>
      stat = osOK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	607b      	str	r3, [r7, #4]
 8003d28:	e002      	b.n	8003d30 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d30:	687b      	ldr	r3, [r7, #4]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	200002f8 	.word	0x200002f8

08003d40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08e      	sub	sp, #56	; 0x38
 8003d44:	af04      	add	r7, sp, #16
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d50:	f3ef 8305 	mrs	r3, IPSR
 8003d54:	617b      	str	r3, [r7, #20]
  return(result);
 8003d56:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d17e      	bne.n	8003e5a <osThreadNew+0x11a>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d07b      	beq.n	8003e5a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003d62:	2380      	movs	r3, #128	; 0x80
 8003d64:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003d66:	2318      	movs	r3, #24
 8003d68:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d72:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d045      	beq.n	8003e06 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <osThreadNew+0x48>
        name = attr->name;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <osThreadNew+0x6e>
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	2b38      	cmp	r3, #56	; 0x38
 8003da0:	d805      	bhi.n	8003dae <osThreadNew+0x6e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <osThreadNew+0x72>
        return (NULL);
 8003dae:	2300      	movs	r3, #0
 8003db0:	e054      	b.n	8003e5c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	089b      	lsrs	r3, r3, #2
 8003dc0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00e      	beq.n	8003de8 <osThreadNew+0xa8>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2b5b      	cmp	r3, #91	; 0x5b
 8003dd0:	d90a      	bls.n	8003de8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d006      	beq.n	8003de8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <osThreadNew+0xa8>
        mem = 1;
 8003de2:	2301      	movs	r3, #1
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	e010      	b.n	8003e0a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10c      	bne.n	8003e0a <osThreadNew+0xca>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d108      	bne.n	8003e0a <osThreadNew+0xca>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d104      	bne.n	8003e0a <osThreadNew+0xca>
          mem = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61bb      	str	r3, [r7, #24]
 8003e04:	e001      	b.n	8003e0a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d110      	bne.n	8003e32 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e18:	9202      	str	r2, [sp, #8]
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	6a3a      	ldr	r2, [r7, #32]
 8003e24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 fe0c 	bl	8004a44 <xTaskCreateStatic>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	e013      	b.n	8003e5a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d110      	bne.n	8003e5a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	f107 0310 	add.w	r3, r7, #16
 8003e40:	9301      	str	r3, [sp, #4]
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 fe57 	bl	8004afe <xTaskCreate>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d001      	beq.n	8003e5a <osThreadNew+0x11a>
            hTask = NULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e5a:	693b      	ldr	r3, [r7, #16]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3728      	adds	r7, #40	; 0x28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e6c:	f3ef 8305 	mrs	r3, IPSR
 8003e70:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e72:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <osDelay+0x1c>
    stat = osErrorISR;
 8003e78:	f06f 0305 	mvn.w	r3, #5
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	e007      	b.n	8003e90 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 ff7c 	bl	8004d88 <vTaskDelay>
    }
  }

  return (stat);
 8003e90:	68fb      	ldr	r3, [r7, #12]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4a07      	ldr	r2, [pc, #28]	; (8003ec8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003eac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	4a06      	ldr	r2, [pc, #24]	; (8003ecc <vApplicationGetIdleTaskMemory+0x30>)
 8003eb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2280      	movs	r2, #128	; 0x80
 8003eb8:	601a      	str	r2, [r3, #0]
}
 8003eba:	bf00      	nop
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	200002fc 	.word	0x200002fc
 8003ecc:	20000358 	.word	0x20000358

08003ed0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a07      	ldr	r2, [pc, #28]	; (8003efc <vApplicationGetTimerTaskMemory+0x2c>)
 8003ee0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4a06      	ldr	r2, [pc, #24]	; (8003f00 <vApplicationGetTimerTaskMemory+0x30>)
 8003ee6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eee:	601a      	str	r2, [r3, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	20000558 	.word	0x20000558
 8003f00:	200005b4 	.word	0x200005b4

08003f04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f103 0208 	add.w	r2, r3, #8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f103 0208 	add.w	r2, r3, #8
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f103 0208 	add.w	r2, r3, #8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b085      	sub	sp, #20
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	601a      	str	r2, [r3, #0]
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b085      	sub	sp, #20
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fbc:	d103      	bne.n	8003fc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	e00c      	b.n	8003fe0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3308      	adds	r3, #8
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	e002      	b.n	8003fd4 <vListInsert+0x2e>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d2f6      	bcs.n	8003fce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	601a      	str	r2, [r3, #0]
}
 800400c:	bf00      	nop
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6892      	ldr	r2, [r2, #8]
 800402e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6852      	ldr	r2, [r2, #4]
 8004038:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	429a      	cmp	r2, r3
 8004042:	d103      	bne.n	800404c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	1e5a      	subs	r2, r3, #1
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004096:	f002 f84d 	bl	8006134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a2:	68f9      	ldr	r1, [r7, #12]
 80040a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040a6:	fb01 f303 	mul.w	r3, r1, r3
 80040aa:	441a      	add	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c6:	3b01      	subs	r3, #1
 80040c8:	68f9      	ldr	r1, [r7, #12]
 80040ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040cc:	fb01 f303 	mul.w	r3, r1, r3
 80040d0:	441a      	add	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	22ff      	movs	r2, #255	; 0xff
 80040da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	22ff      	movs	r2, #255	; 0xff
 80040e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d114      	bne.n	8004116 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01a      	beq.n	800412a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3310      	adds	r3, #16
 80040f8:	4618      	mov	r0, r3
 80040fa:	f001 f903 	bl	8005304 <xTaskRemoveFromEventList>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d012      	beq.n	800412a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <xQueueGenericReset+0xcc>)
 8004106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	e009      	b.n	800412a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3310      	adds	r3, #16
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fef2 	bl	8003f04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3324      	adds	r3, #36	; 0x24
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff feed 	bl	8003f04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800412a:	f002 f833 	bl	8006194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800412e:	2301      	movs	r3, #1
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08e      	sub	sp, #56	; 0x38
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004162:	bf00      	nop
 8004164:	e7fe      	b.n	8004164 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800417e:	bf00      	nop
 8004180:	e7fe      	b.n	8004180 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <xQueueGenericCreateStatic+0x52>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <xQueueGenericCreateStatic+0x56>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <xQueueGenericCreateStatic+0x58>
 8004192:	2300      	movs	r3, #0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10a      	bne.n	80041ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	623b      	str	r3, [r7, #32]
}
 80041aa:	bf00      	nop
 80041ac:	e7fe      	b.n	80041ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <xQueueGenericCreateStatic+0x7e>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <xQueueGenericCreateStatic+0x82>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <xQueueGenericCreateStatic+0x84>
 80041be:	2300      	movs	r3, #0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10a      	bne.n	80041da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	61fb      	str	r3, [r7, #28]
}
 80041d6:	bf00      	nop
 80041d8:	e7fe      	b.n	80041d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041da:	2350      	movs	r3, #80	; 0x50
 80041dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b50      	cmp	r3, #80	; 0x50
 80041e2:	d00a      	beq.n	80041fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	61bb      	str	r3, [r7, #24]
}
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80041fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00d      	beq.n	8004222 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800420e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	4613      	mov	r3, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f805 	bl	800422c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004224:	4618      	mov	r0, r3
 8004226:	3730      	adds	r7, #48	; 0x30
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d103      	bne.n	8004248 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	e002      	b.n	800424e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800425a:	2101      	movs	r1, #1
 800425c:	69b8      	ldr	r0, [r7, #24]
 800425e:	f7ff ff05 	bl	800406c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	78fa      	ldrb	r2, [r7, #3]
 8004266:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08e      	sub	sp, #56	; 0x38
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004282:	2300      	movs	r3, #0
 8004284:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10a      	bne.n	80042a6 <xQueueGenericSend+0x32>
	__asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80042a2:	bf00      	nop
 80042a4:	e7fe      	b.n	80042a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d103      	bne.n	80042b4 <xQueueGenericSend+0x40>
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <xQueueGenericSend+0x44>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <xQueueGenericSend+0x46>
 80042b8:	2300      	movs	r3, #0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <xQueueGenericSend+0x60>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042d0:	bf00      	nop
 80042d2:	e7fe      	b.n	80042d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d103      	bne.n	80042e2 <xQueueGenericSend+0x6e>
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <xQueueGenericSend+0x72>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <xQueueGenericSend+0x74>
 80042e6:	2300      	movs	r3, #0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10a      	bne.n	8004302 <xQueueGenericSend+0x8e>
	__asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	623b      	str	r3, [r7, #32]
}
 80042fe:	bf00      	nop
 8004300:	e7fe      	b.n	8004300 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004302:	f001 f9bd 	bl	8005680 <xTaskGetSchedulerState>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d102      	bne.n	8004312 <xQueueGenericSend+0x9e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <xQueueGenericSend+0xa2>
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <xQueueGenericSend+0xa4>
 8004316:	2300      	movs	r3, #0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10a      	bne.n	8004332 <xQueueGenericSend+0xbe>
	__asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	61fb      	str	r3, [r7, #28]
}
 800432e:	bf00      	nop
 8004330:	e7fe      	b.n	8004330 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004332:	f001 feff 	bl	8006134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433e:	429a      	cmp	r2, r3
 8004340:	d302      	bcc.n	8004348 <xQueueGenericSend+0xd4>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d129      	bne.n	800439c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800434e:	f000 fa0b 	bl	8004768 <prvCopyDataToQueue>
 8004352:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	2b00      	cmp	r3, #0
 800435a:	d010      	beq.n	800437e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	3324      	adds	r3, #36	; 0x24
 8004360:	4618      	mov	r0, r3
 8004362:	f000 ffcf 	bl	8005304 <xTaskRemoveFromEventList>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d013      	beq.n	8004394 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800436c:	4b3f      	ldr	r3, [pc, #252]	; (800446c <xQueueGenericSend+0x1f8>)
 800436e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	e00a      	b.n	8004394 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004384:	4b39      	ldr	r3, [pc, #228]	; (800446c <xQueueGenericSend+0x1f8>)
 8004386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004394:	f001 fefe 	bl	8006194 <vPortExitCritical>
				return pdPASS;
 8004398:	2301      	movs	r3, #1
 800439a:	e063      	b.n	8004464 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d103      	bne.n	80043aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043a2:	f001 fef7 	bl	8006194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	e05c      	b.n	8004464 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d106      	bne.n	80043be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043b0:	f107 0314 	add.w	r3, r7, #20
 80043b4:	4618      	mov	r0, r3
 80043b6:	f001 f809 	bl	80053cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043be:	f001 fee9 	bl	8006194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043c2:	f000 fd7b 	bl	8004ebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043c6:	f001 feb5 	bl	8006134 <vPortEnterCritical>
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043d0:	b25b      	sxtb	r3, r3
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043d6:	d103      	bne.n	80043e0 <xQueueGenericSend+0x16c>
 80043d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043e6:	b25b      	sxtb	r3, r3
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ec:	d103      	bne.n	80043f6 <xQueueGenericSend+0x182>
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043f6:	f001 fecd 	bl	8006194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043fa:	1d3a      	adds	r2, r7, #4
 80043fc:	f107 0314 	add.w	r3, r7, #20
 8004400:	4611      	mov	r1, r2
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fff8 	bl	80053f8 <xTaskCheckForTimeOut>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d124      	bne.n	8004458 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800440e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004410:	f000 faa2 	bl	8004958 <prvIsQueueFull>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d018      	beq.n	800444c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	3310      	adds	r3, #16
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	4611      	mov	r1, r2
 8004422:	4618      	mov	r0, r3
 8004424:	f000 ff1e 	bl	8005264 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800442a:	f000 fa2d 	bl	8004888 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800442e:	f000 fd53 	bl	8004ed8 <xTaskResumeAll>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	f47f af7c 	bne.w	8004332 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800443a:	4b0c      	ldr	r3, [pc, #48]	; (800446c <xQueueGenericSend+0x1f8>)
 800443c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	e772      	b.n	8004332 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800444c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800444e:	f000 fa1b 	bl	8004888 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004452:	f000 fd41 	bl	8004ed8 <xTaskResumeAll>
 8004456:	e76c      	b.n	8004332 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800445a:	f000 fa15 	bl	8004888 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800445e:	f000 fd3b 	bl	8004ed8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004462:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004464:	4618      	mov	r0, r3
 8004466:	3738      	adds	r7, #56	; 0x38
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	e000ed04 	.word	0xe000ed04

08004470 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b090      	sub	sp, #64	; 0x40
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800449a:	bf00      	nop
 800449c:	e7fe      	b.n	800449c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d103      	bne.n	80044ac <xQueueGenericSendFromISR+0x3c>
 80044a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <xQueueGenericSendFromISR+0x40>
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <xQueueGenericSendFromISR+0x42>
 80044b0:	2300      	movs	r3, #0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10a      	bne.n	80044cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80044b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044c8:	bf00      	nop
 80044ca:	e7fe      	b.n	80044ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d103      	bne.n	80044da <xQueueGenericSendFromISR+0x6a>
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <xQueueGenericSendFromISR+0x6e>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <xQueueGenericSendFromISR+0x70>
 80044de:	2300      	movs	r3, #0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	623b      	str	r3, [r7, #32]
}
 80044f6:	bf00      	nop
 80044f8:	e7fe      	b.n	80044f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044fa:	f001 fefd 	bl	80062f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044fe:	f3ef 8211 	mrs	r2, BASEPRI
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	61fa      	str	r2, [r7, #28]
 8004514:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004516:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004518:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004522:	429a      	cmp	r2, r3
 8004524:	d302      	bcc.n	800452c <xQueueGenericSendFromISR+0xbc>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b02      	cmp	r3, #2
 800452a:	d12f      	bne.n	800458c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800452c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004542:	f000 f911 	bl	8004768 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004546:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800454a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800454e:	d112      	bne.n	8004576 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	2b00      	cmp	r3, #0
 8004556:	d016      	beq.n	8004586 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455a:	3324      	adds	r3, #36	; 0x24
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fed1 	bl	8005304 <xTaskRemoveFromEventList>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00e      	beq.n	8004586 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00b      	beq.n	8004586 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	e007      	b.n	8004586 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004576:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800457a:	3301      	adds	r3, #1
 800457c:	b2db      	uxtb	r3, r3
 800457e:	b25a      	sxtb	r2, r3
 8004580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004586:	2301      	movs	r3, #1
 8004588:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800458a:	e001      	b.n	8004590 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800458c:	2300      	movs	r3, #0
 800458e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004592:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800459a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800459c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3740      	adds	r7, #64	; 0x40
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08c      	sub	sp, #48	; 0x30
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80045b4:	2300      	movs	r3, #0
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <xQueueReceive+0x30>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	623b      	str	r3, [r7, #32]
}
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d103      	bne.n	80045e6 <xQueueReceive+0x3e>
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <xQueueReceive+0x42>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <xQueueReceive+0x44>
 80045ea:	2300      	movs	r3, #0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <xQueueReceive+0x5e>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	61fb      	str	r3, [r7, #28]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004606:	f001 f83b 	bl	8005680 <xTaskGetSchedulerState>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d102      	bne.n	8004616 <xQueueReceive+0x6e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <xQueueReceive+0x72>
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <xQueueReceive+0x74>
 800461a:	2300      	movs	r3, #0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10a      	bne.n	8004636 <xQueueReceive+0x8e>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	61bb      	str	r3, [r7, #24]
}
 8004632:	bf00      	nop
 8004634:	e7fe      	b.n	8004634 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004636:	f001 fd7d 	bl	8006134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01f      	beq.n	8004686 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800464a:	f000 f8f7 	bl	800483c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	1e5a      	subs	r2, r3, #1
 8004652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004654:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00f      	beq.n	800467e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004660:	3310      	adds	r3, #16
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fe4e 	bl	8005304 <xTaskRemoveFromEventList>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d007      	beq.n	800467e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800466e:	4b3d      	ldr	r3, [pc, #244]	; (8004764 <xQueueReceive+0x1bc>)
 8004670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800467e:	f001 fd89 	bl	8006194 <vPortExitCritical>
				return pdPASS;
 8004682:	2301      	movs	r3, #1
 8004684:	e069      	b.n	800475a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d103      	bne.n	8004694 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800468c:	f001 fd82 	bl	8006194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004690:	2300      	movs	r3, #0
 8004692:	e062      	b.n	800475a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800469a:	f107 0310 	add.w	r3, r7, #16
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fe94 	bl	80053cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046a4:	2301      	movs	r3, #1
 80046a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046a8:	f001 fd74 	bl	8006194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046ac:	f000 fc06 	bl	8004ebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046b0:	f001 fd40 	bl	8006134 <vPortEnterCritical>
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046ba:	b25b      	sxtb	r3, r3
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046c0:	d103      	bne.n	80046ca <xQueueReceive+0x122>
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046d0:	b25b      	sxtb	r3, r3
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046d6:	d103      	bne.n	80046e0 <xQueueReceive+0x138>
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046e0:	f001 fd58 	bl	8006194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046e4:	1d3a      	adds	r2, r7, #4
 80046e6:	f107 0310 	add.w	r3, r7, #16
 80046ea:	4611      	mov	r1, r2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fe83 	bl	80053f8 <xTaskCheckForTimeOut>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d123      	bne.n	8004740 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046fa:	f000 f917 	bl	800492c <prvIsQueueEmpty>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d017      	beq.n	8004734 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	3324      	adds	r3, #36	; 0x24
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	4611      	mov	r1, r2
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fda9 	bl	8005264 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004714:	f000 f8b8 	bl	8004888 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004718:	f000 fbde 	bl	8004ed8 <xTaskResumeAll>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d189      	bne.n	8004636 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004722:	4b10      	ldr	r3, [pc, #64]	; (8004764 <xQueueReceive+0x1bc>)
 8004724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	e780      	b.n	8004636 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004736:	f000 f8a7 	bl	8004888 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800473a:	f000 fbcd 	bl	8004ed8 <xTaskResumeAll>
 800473e:	e77a      	b.n	8004636 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004742:	f000 f8a1 	bl	8004888 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004746:	f000 fbc7 	bl	8004ed8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800474a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800474c:	f000 f8ee 	bl	800492c <prvIsQueueEmpty>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	f43f af6f 	beq.w	8004636 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004758:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800475a:	4618      	mov	r0, r3
 800475c:	3730      	adds	r7, #48	; 0x30
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10d      	bne.n	80047a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d14d      	bne.n	800482a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	4618      	mov	r0, r3
 8004794:	f000 ff92 	bl	80056bc <xTaskPriorityDisinherit>
 8004798:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	609a      	str	r2, [r3, #8]
 80047a0:	e043      	b.n	800482a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d119      	bne.n	80047dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6858      	ldr	r0, [r3, #4]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	461a      	mov	r2, r3
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	f001 fff4 	bl	80067a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	441a      	add	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d32b      	bcc.n	800482a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	605a      	str	r2, [r3, #4]
 80047da:	e026      	b.n	800482a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68d8      	ldr	r0, [r3, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	461a      	mov	r2, r3
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	f001 ffda 	bl	80067a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	425b      	negs	r3, r3
 80047f6:	441a      	add	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d207      	bcs.n	8004818 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	425b      	negs	r3, r3
 8004812:	441a      	add	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d105      	bne.n	800482a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	3b01      	subs	r3, #1
 8004828:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004832:	697b      	ldr	r3, [r7, #20]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d018      	beq.n	8004880 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	441a      	add	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	429a      	cmp	r2, r3
 8004866:	d303      	bcc.n	8004870 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68d9      	ldr	r1, [r3, #12]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	461a      	mov	r2, r3
 800487a:	6838      	ldr	r0, [r7, #0]
 800487c:	f001 ff90 	bl	80067a0 <memcpy>
	}
}
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004890:	f001 fc50 	bl	8006134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800489a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800489c:	e011      	b.n	80048c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d012      	beq.n	80048cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3324      	adds	r3, #36	; 0x24
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fd2a 	bl	8005304 <xTaskRemoveFromEventList>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048b6:	f000 fe01 	bl	80054bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
 80048bc:	3b01      	subs	r3, #1
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	dce9      	bgt.n	800489e <prvUnlockQueue+0x16>
 80048ca:	e000      	b.n	80048ce <prvUnlockQueue+0x46>
					break;
 80048cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	22ff      	movs	r2, #255	; 0xff
 80048d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80048d6:	f001 fc5d 	bl	8006194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048da:	f001 fc2b 	bl	8006134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048e6:	e011      	b.n	800490c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d012      	beq.n	8004916 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3310      	adds	r3, #16
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fd05 	bl	8005304 <xTaskRemoveFromEventList>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004900:	f000 fddc 	bl	80054bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004904:	7bbb      	ldrb	r3, [r7, #14]
 8004906:	3b01      	subs	r3, #1
 8004908:	b2db      	uxtb	r3, r3
 800490a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800490c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004910:	2b00      	cmp	r3, #0
 8004912:	dce9      	bgt.n	80048e8 <prvUnlockQueue+0x60>
 8004914:	e000      	b.n	8004918 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004916:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	22ff      	movs	r2, #255	; 0xff
 800491c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004920:	f001 fc38 	bl	8006194 <vPortExitCritical>
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004934:	f001 fbfe 	bl	8006134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	2b00      	cmp	r3, #0
 800493e:	d102      	bne.n	8004946 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004940:	2301      	movs	r3, #1
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	e001      	b.n	800494a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800494a:	f001 fc23 	bl	8006194 <vPortExitCritical>

	return xReturn;
 800494e:	68fb      	ldr	r3, [r7, #12]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004960:	f001 fbe8 	bl	8006134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496c:	429a      	cmp	r2, r3
 800496e:	d102      	bne.n	8004976 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004970:	2301      	movs	r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	e001      	b.n	800497a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800497a:	f001 fc0b 	bl	8006194 <vPortExitCritical>

	return xReturn;
 800497e:	68fb      	ldr	r3, [r7, #12]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	e014      	b.n	80049c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004998:	4a0f      	ldr	r2, [pc, #60]	; (80049d8 <vQueueAddToRegistry+0x50>)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10b      	bne.n	80049bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80049a4:	490c      	ldr	r1, [pc, #48]	; (80049d8 <vQueueAddToRegistry+0x50>)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80049ae:	4a0a      	ldr	r2, [pc, #40]	; (80049d8 <vQueueAddToRegistry+0x50>)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	4413      	add	r3, r2
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80049ba:	e006      	b.n	80049ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3301      	adds	r3, #1
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b07      	cmp	r3, #7
 80049c6:	d9e7      	bls.n	8004998 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	20004c14 	.word	0x20004c14

080049dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049ec:	f001 fba2 	bl	8006134 <vPortEnterCritical>
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049f6:	b25b      	sxtb	r3, r3
 80049f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049fc:	d103      	bne.n	8004a06 <vQueueWaitForMessageRestricted+0x2a>
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a0c:	b25b      	sxtb	r3, r3
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a12:	d103      	bne.n	8004a1c <vQueueWaitForMessageRestricted+0x40>
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a1c:	f001 fbba 	bl	8006194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d106      	bne.n	8004a36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	3324      	adds	r3, #36	; 0x24
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	68b9      	ldr	r1, [r7, #8]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fc3b 	bl	80052ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a36:	6978      	ldr	r0, [r7, #20]
 8004a38:	f7ff ff26 	bl	8004888 <prvUnlockQueue>
	}
 8004a3c:	bf00      	nop
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08e      	sub	sp, #56	; 0x38
 8004a48:	af04      	add	r7, sp, #16
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	623b      	str	r3, [r7, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <xTaskCreateStatic+0x46>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	61fb      	str	r3, [r7, #28]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a8a:	235c      	movs	r3, #92	; 0x5c
 8004a8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	2b5c      	cmp	r3, #92	; 0x5c
 8004a92:	d00a      	beq.n	8004aaa <xTaskCreateStatic+0x66>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	61bb      	str	r3, [r7, #24]
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004aaa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01e      	beq.n	8004af0 <xTaskCreateStatic+0xac>
 8004ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01b      	beq.n	8004af0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004aca:	2300      	movs	r3, #0
 8004acc:	9303      	str	r3, [sp, #12]
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	9302      	str	r3, [sp, #8]
 8004ad2:	f107 0314 	add.w	r3, r7, #20
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f850 	bl	8004b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ae8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004aea:	f000 f8dd 	bl	8004ca8 <prvAddNewTaskToReadyList>
 8004aee:	e001      	b.n	8004af4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004af4:	697b      	ldr	r3, [r7, #20]
	}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3728      	adds	r7, #40	; 0x28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b08c      	sub	sp, #48	; 0x30
 8004b02:	af04      	add	r7, sp, #16
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b0e:	88fb      	ldrh	r3, [r7, #6]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4618      	mov	r0, r3
 8004b14:	f001 fc30 	bl	8006378 <pvPortMalloc>
 8004b18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00e      	beq.n	8004b3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b20:	205c      	movs	r0, #92	; 0x5c
 8004b22:	f001 fc29 	bl	8006378 <pvPortMalloc>
 8004b26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	631a      	str	r2, [r3, #48]	; 0x30
 8004b34:	e005      	b.n	8004b42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b36:	6978      	ldr	r0, [r7, #20]
 8004b38:	f001 fcea 	bl	8006510 <vPortFree>
 8004b3c:	e001      	b.n	8004b42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d017      	beq.n	8004b78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b50:	88fa      	ldrh	r2, [r7, #6]
 8004b52:	2300      	movs	r3, #0
 8004b54:	9303      	str	r3, [sp, #12]
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	9302      	str	r3, [sp, #8]
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f80e 	bl	8004b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b6c:	69f8      	ldr	r0, [r7, #28]
 8004b6e:	f000 f89b 	bl	8004ca8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b72:	2301      	movs	r3, #1
 8004b74:	61bb      	str	r3, [r7, #24]
 8004b76:	e002      	b.n	8004b7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
	}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3720      	adds	r7, #32
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	21a5      	movs	r1, #165	; 0xa5
 8004ba2:	f001 fe0b 	bl	80067bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	f023 0307 	bic.w	r3, r3, #7
 8004bbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	617b      	str	r3, [r7, #20]
}
 8004bdc:	bf00      	nop
 8004bde:	e7fe      	b.n	8004bde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01f      	beq.n	8004c26 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004be6:	2300      	movs	r3, #0
 8004be8:	61fb      	str	r3, [r7, #28]
 8004bea:	e012      	b.n	8004c12 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	7819      	ldrb	r1, [r3, #0]
 8004bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	3334      	adds	r3, #52	; 0x34
 8004bfc:	460a      	mov	r2, r1
 8004bfe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	4413      	add	r3, r2
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d006      	beq.n	8004c1a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	61fb      	str	r3, [r7, #28]
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	2b0f      	cmp	r3, #15
 8004c16:	d9e9      	bls.n	8004bec <prvInitialiseNewTask+0x64>
 8004c18:	e000      	b.n	8004c1c <prvInitialiseNewTask+0x94>
			{
				break;
 8004c1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c24:	e003      	b.n	8004c2e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	2b37      	cmp	r3, #55	; 0x37
 8004c32:	d901      	bls.n	8004c38 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c34:	2337      	movs	r3, #55	; 0x37
 8004c36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	2200      	movs	r2, #0
 8004c48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff f978 	bl	8003f44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	3318      	adds	r3, #24
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff f973 	bl	8003f44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	2200      	movs	r2, #0
 8004c78:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	68f9      	ldr	r1, [r7, #12]
 8004c86:	69b8      	ldr	r0, [r7, #24]
 8004c88:	f001 f928 	bl	8005edc <pxPortInitialiseStack>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c9e:	bf00      	nop
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004cb0:	f001 fa40 	bl	8006134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004cb4:	4b2d      	ldr	r3, [pc, #180]	; (8004d6c <prvAddNewTaskToReadyList+0xc4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	4a2c      	ldr	r2, [pc, #176]	; (8004d6c <prvAddNewTaskToReadyList+0xc4>)
 8004cbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cbe:	4b2c      	ldr	r3, [pc, #176]	; (8004d70 <prvAddNewTaskToReadyList+0xc8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cc6:	4a2a      	ldr	r2, [pc, #168]	; (8004d70 <prvAddNewTaskToReadyList+0xc8>)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ccc:	4b27      	ldr	r3, [pc, #156]	; (8004d6c <prvAddNewTaskToReadyList+0xc4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d110      	bne.n	8004cf6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cd4:	f000 fc16 	bl	8005504 <prvInitialiseTaskLists>
 8004cd8:	e00d      	b.n	8004cf6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cda:	4b26      	ldr	r3, [pc, #152]	; (8004d74 <prvAddNewTaskToReadyList+0xcc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d109      	bne.n	8004cf6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ce2:	4b23      	ldr	r3, [pc, #140]	; (8004d70 <prvAddNewTaskToReadyList+0xc8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d802      	bhi.n	8004cf6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cf0:	4a1f      	ldr	r2, [pc, #124]	; (8004d70 <prvAddNewTaskToReadyList+0xc8>)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cf6:	4b20      	ldr	r3, [pc, #128]	; (8004d78 <prvAddNewTaskToReadyList+0xd0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <prvAddNewTaskToReadyList+0xd0>)
 8004cfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d00:	4b1d      	ldr	r3, [pc, #116]	; (8004d78 <prvAddNewTaskToReadyList+0xd0>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <prvAddNewTaskToReadyList+0xd4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d903      	bls.n	8004d1c <prvAddNewTaskToReadyList+0x74>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	4a18      	ldr	r2, [pc, #96]	; (8004d7c <prvAddNewTaskToReadyList+0xd4>)
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4a15      	ldr	r2, [pc, #84]	; (8004d80 <prvAddNewTaskToReadyList+0xd8>)
 8004d2a:	441a      	add	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	4619      	mov	r1, r3
 8004d32:	4610      	mov	r0, r2
 8004d34:	f7ff f913 	bl	8003f5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d38:	f001 fa2c 	bl	8006194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <prvAddNewTaskToReadyList+0xcc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00e      	beq.n	8004d62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d44:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <prvAddNewTaskToReadyList+0xc8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d207      	bcs.n	8004d62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d52:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <prvAddNewTaskToReadyList+0xdc>)
 8004d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d62:	bf00      	nop
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000e88 	.word	0x20000e88
 8004d70:	200009b4 	.word	0x200009b4
 8004d74:	20000e94 	.word	0x20000e94
 8004d78:	20000ea4 	.word	0x20000ea4
 8004d7c:	20000e90 	.word	0x20000e90
 8004d80:	200009b8 	.word	0x200009b8
 8004d84:	e000ed04 	.word	0xe000ed04

08004d88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d017      	beq.n	8004dca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d9a:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <vTaskDelay+0x60>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <vTaskDelay+0x30>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	60bb      	str	r3, [r7, #8]
}
 8004db4:	bf00      	nop
 8004db6:	e7fe      	b.n	8004db6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004db8:	f000 f880 	bl	8004ebc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fcea 	bl	8005798 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004dc4:	f000 f888 	bl	8004ed8 <xTaskResumeAll>
 8004dc8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d107      	bne.n	8004de0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004dd0:	4b06      	ldr	r3, [pc, #24]	; (8004dec <vTaskDelay+0x64>)
 8004dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004de0:	bf00      	nop
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20000eb0 	.word	0x20000eb0
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08a      	sub	sp, #40	; 0x28
 8004df4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dfe:	463a      	mov	r2, r7
 8004e00:	1d39      	adds	r1, r7, #4
 8004e02:	f107 0308 	add.w	r3, r7, #8
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff f848 	bl	8003e9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e0c:	6839      	ldr	r1, [r7, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	9202      	str	r2, [sp, #8]
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	2300      	movs	r3, #0
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	460a      	mov	r2, r1
 8004e1e:	4921      	ldr	r1, [pc, #132]	; (8004ea4 <vTaskStartScheduler+0xb4>)
 8004e20:	4821      	ldr	r0, [pc, #132]	; (8004ea8 <vTaskStartScheduler+0xb8>)
 8004e22:	f7ff fe0f 	bl	8004a44 <xTaskCreateStatic>
 8004e26:	4603      	mov	r3, r0
 8004e28:	4a20      	ldr	r2, [pc, #128]	; (8004eac <vTaskStartScheduler+0xbc>)
 8004e2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e2c:	4b1f      	ldr	r3, [pc, #124]	; (8004eac <vTaskStartScheduler+0xbc>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e34:	2301      	movs	r3, #1
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	e001      	b.n	8004e3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d102      	bne.n	8004e4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e44:	f000 fcfc 	bl	8005840 <xTimerCreateTimerTask>
 8004e48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d116      	bne.n	8004e7e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	613b      	str	r3, [r7, #16]
}
 8004e62:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e64:	4b12      	ldr	r3, [pc, #72]	; (8004eb0 <vTaskStartScheduler+0xc0>)
 8004e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <vTaskStartScheduler+0xc4>)
 8004e6e:	2201      	movs	r2, #1
 8004e70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e72:	4b11      	ldr	r3, [pc, #68]	; (8004eb8 <vTaskStartScheduler+0xc8>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e78:	f001 f8ba 	bl	8005ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e7c:	e00e      	b.n	8004e9c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e84:	d10a      	bne.n	8004e9c <vTaskStartScheduler+0xac>
	__asm volatile
 8004e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	60fb      	str	r3, [r7, #12]
}
 8004e98:	bf00      	nop
 8004e9a:	e7fe      	b.n	8004e9a <vTaskStartScheduler+0xaa>
}
 8004e9c:	bf00      	nop
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	0800b024 	.word	0x0800b024
 8004ea8:	080054d5 	.word	0x080054d5
 8004eac:	20000eac 	.word	0x20000eac
 8004eb0:	20000ea8 	.word	0x20000ea8
 8004eb4:	20000e94 	.word	0x20000e94
 8004eb8:	20000e8c 	.word	0x20000e8c

08004ebc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ec0:	4b04      	ldr	r3, [pc, #16]	; (8004ed4 <vTaskSuspendAll+0x18>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	4a03      	ldr	r2, [pc, #12]	; (8004ed4 <vTaskSuspendAll+0x18>)
 8004ec8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004eca:	bf00      	nop
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	20000eb0 	.word	0x20000eb0

08004ed8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ee6:	4b42      	ldr	r3, [pc, #264]	; (8004ff0 <xTaskResumeAll+0x118>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <xTaskResumeAll+0x2c>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	603b      	str	r3, [r7, #0]
}
 8004f00:	bf00      	nop
 8004f02:	e7fe      	b.n	8004f02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f04:	f001 f916 	bl	8006134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f08:	4b39      	ldr	r3, [pc, #228]	; (8004ff0 <xTaskResumeAll+0x118>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	4a38      	ldr	r2, [pc, #224]	; (8004ff0 <xTaskResumeAll+0x118>)
 8004f10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f12:	4b37      	ldr	r3, [pc, #220]	; (8004ff0 <xTaskResumeAll+0x118>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d162      	bne.n	8004fe0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f1a:	4b36      	ldr	r3, [pc, #216]	; (8004ff4 <xTaskResumeAll+0x11c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d05e      	beq.n	8004fe0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f22:	e02f      	b.n	8004f84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f24:	4b34      	ldr	r3, [pc, #208]	; (8004ff8 <xTaskResumeAll+0x120>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3318      	adds	r3, #24
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff f871 	bl	8004018 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff f86c 	bl	8004018 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f44:	4b2d      	ldr	r3, [pc, #180]	; (8004ffc <xTaskResumeAll+0x124>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d903      	bls.n	8004f54 <xTaskResumeAll+0x7c>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	4a2a      	ldr	r2, [pc, #168]	; (8004ffc <xTaskResumeAll+0x124>)
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4a27      	ldr	r2, [pc, #156]	; (8005000 <xTaskResumeAll+0x128>)
 8004f62:	441a      	add	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3304      	adds	r3, #4
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	f7fe fff7 	bl	8003f5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f74:	4b23      	ldr	r3, [pc, #140]	; (8005004 <xTaskResumeAll+0x12c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d302      	bcc.n	8004f84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004f7e:	4b22      	ldr	r3, [pc, #136]	; (8005008 <xTaskResumeAll+0x130>)
 8004f80:	2201      	movs	r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f84:	4b1c      	ldr	r3, [pc, #112]	; (8004ff8 <xTaskResumeAll+0x120>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1cb      	bne.n	8004f24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f92:	f000 fb55 	bl	8005640 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f96:	4b1d      	ldr	r3, [pc, #116]	; (800500c <xTaskResumeAll+0x134>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d010      	beq.n	8004fc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004fa2:	f000 f847 	bl	8005034 <xTaskIncrementTick>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004fac:	4b16      	ldr	r3, [pc, #88]	; (8005008 <xTaskResumeAll+0x130>)
 8004fae:	2201      	movs	r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f1      	bne.n	8004fa2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004fbe:	4b13      	ldr	r3, [pc, #76]	; (800500c <xTaskResumeAll+0x134>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004fc4:	4b10      	ldr	r3, [pc, #64]	; (8005008 <xTaskResumeAll+0x130>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d009      	beq.n	8004fe0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fd0:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <xTaskResumeAll+0x138>)
 8004fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fe0:	f001 f8d8 	bl	8006194 <vPortExitCritical>

	return xAlreadyYielded;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000eb0 	.word	0x20000eb0
 8004ff4:	20000e88 	.word	0x20000e88
 8004ff8:	20000e48 	.word	0x20000e48
 8004ffc:	20000e90 	.word	0x20000e90
 8005000:	200009b8 	.word	0x200009b8
 8005004:	200009b4 	.word	0x200009b4
 8005008:	20000e9c 	.word	0x20000e9c
 800500c:	20000e98 	.word	0x20000e98
 8005010:	e000ed04 	.word	0xe000ed04

08005014 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800501a:	4b05      	ldr	r3, [pc, #20]	; (8005030 <xTaskGetTickCount+0x1c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005020:	687b      	ldr	r3, [r7, #4]
}
 8005022:	4618      	mov	r0, r3
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	20000e8c 	.word	0x20000e8c

08005034 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800503e:	4b4f      	ldr	r3, [pc, #316]	; (800517c <xTaskIncrementTick+0x148>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f040 808f 	bne.w	8005166 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005048:	4b4d      	ldr	r3, [pc, #308]	; (8005180 <xTaskIncrementTick+0x14c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3301      	adds	r3, #1
 800504e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005050:	4a4b      	ldr	r2, [pc, #300]	; (8005180 <xTaskIncrementTick+0x14c>)
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d120      	bne.n	800509e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800505c:	4b49      	ldr	r3, [pc, #292]	; (8005184 <xTaskIncrementTick+0x150>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <xTaskIncrementTick+0x48>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	603b      	str	r3, [r7, #0]
}
 8005078:	bf00      	nop
 800507a:	e7fe      	b.n	800507a <xTaskIncrementTick+0x46>
 800507c:	4b41      	ldr	r3, [pc, #260]	; (8005184 <xTaskIncrementTick+0x150>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	4b41      	ldr	r3, [pc, #260]	; (8005188 <xTaskIncrementTick+0x154>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a3f      	ldr	r2, [pc, #252]	; (8005184 <xTaskIncrementTick+0x150>)
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	4a3f      	ldr	r2, [pc, #252]	; (8005188 <xTaskIncrementTick+0x154>)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	4b3e      	ldr	r3, [pc, #248]	; (800518c <xTaskIncrementTick+0x158>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3301      	adds	r3, #1
 8005096:	4a3d      	ldr	r2, [pc, #244]	; (800518c <xTaskIncrementTick+0x158>)
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	f000 fad1 	bl	8005640 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800509e:	4b3c      	ldr	r3, [pc, #240]	; (8005190 <xTaskIncrementTick+0x15c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d349      	bcc.n	800513c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050a8:	4b36      	ldr	r3, [pc, #216]	; (8005184 <xTaskIncrementTick+0x150>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d104      	bne.n	80050bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050b2:	4b37      	ldr	r3, [pc, #220]	; (8005190 <xTaskIncrementTick+0x15c>)
 80050b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050b8:	601a      	str	r2, [r3, #0]
					break;
 80050ba:	e03f      	b.n	800513c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050bc:	4b31      	ldr	r3, [pc, #196]	; (8005184 <xTaskIncrementTick+0x150>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d203      	bcs.n	80050dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050d4:	4a2e      	ldr	r2, [pc, #184]	; (8005190 <xTaskIncrementTick+0x15c>)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80050da:	e02f      	b.n	800513c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	3304      	adds	r3, #4
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fe ff99 	bl	8004018 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d004      	beq.n	80050f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	3318      	adds	r3, #24
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fe ff90 	bl	8004018 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fc:	4b25      	ldr	r3, [pc, #148]	; (8005194 <xTaskIncrementTick+0x160>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d903      	bls.n	800510c <xTaskIncrementTick+0xd8>
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	4a22      	ldr	r2, [pc, #136]	; (8005194 <xTaskIncrementTick+0x160>)
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4a1f      	ldr	r2, [pc, #124]	; (8005198 <xTaskIncrementTick+0x164>)
 800511a:	441a      	add	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	3304      	adds	r3, #4
 8005120:	4619      	mov	r1, r3
 8005122:	4610      	mov	r0, r2
 8005124:	f7fe ff1b 	bl	8003f5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512c:	4b1b      	ldr	r3, [pc, #108]	; (800519c <xTaskIncrementTick+0x168>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	429a      	cmp	r2, r3
 8005134:	d3b8      	bcc.n	80050a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005136:	2301      	movs	r3, #1
 8005138:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800513a:	e7b5      	b.n	80050a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800513c:	4b17      	ldr	r3, [pc, #92]	; (800519c <xTaskIncrementTick+0x168>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005142:	4915      	ldr	r1, [pc, #84]	; (8005198 <xTaskIncrementTick+0x164>)
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d901      	bls.n	8005158 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005154:	2301      	movs	r3, #1
 8005156:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005158:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <xTaskIncrementTick+0x16c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d007      	beq.n	8005170 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005160:	2301      	movs	r3, #1
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	e004      	b.n	8005170 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005166:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <xTaskIncrementTick+0x170>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3301      	adds	r3, #1
 800516c:	4a0d      	ldr	r2, [pc, #52]	; (80051a4 <xTaskIncrementTick+0x170>)
 800516e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005170:	697b      	ldr	r3, [r7, #20]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20000eb0 	.word	0x20000eb0
 8005180:	20000e8c 	.word	0x20000e8c
 8005184:	20000e40 	.word	0x20000e40
 8005188:	20000e44 	.word	0x20000e44
 800518c:	20000ea0 	.word	0x20000ea0
 8005190:	20000ea8 	.word	0x20000ea8
 8005194:	20000e90 	.word	0x20000e90
 8005198:	200009b8 	.word	0x200009b8
 800519c:	200009b4 	.word	0x200009b4
 80051a0:	20000e9c 	.word	0x20000e9c
 80051a4:	20000e98 	.word	0x20000e98

080051a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051ae:	4b28      	ldr	r3, [pc, #160]	; (8005250 <vTaskSwitchContext+0xa8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051b6:	4b27      	ldr	r3, [pc, #156]	; (8005254 <vTaskSwitchContext+0xac>)
 80051b8:	2201      	movs	r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051bc:	e041      	b.n	8005242 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80051be:	4b25      	ldr	r3, [pc, #148]	; (8005254 <vTaskSwitchContext+0xac>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051c4:	4b24      	ldr	r3, [pc, #144]	; (8005258 <vTaskSwitchContext+0xb0>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	e010      	b.n	80051ee <vTaskSwitchContext+0x46>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	607b      	str	r3, [r7, #4]
}
 80051e4:	bf00      	nop
 80051e6:	e7fe      	b.n	80051e6 <vTaskSwitchContext+0x3e>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	491b      	ldr	r1, [pc, #108]	; (800525c <vTaskSwitchContext+0xb4>)
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	440b      	add	r3, r1
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0e4      	beq.n	80051cc <vTaskSwitchContext+0x24>
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4a13      	ldr	r2, [pc, #76]	; (800525c <vTaskSwitchContext+0xb4>)
 800520e:	4413      	add	r3, r2
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	605a      	str	r2, [r3, #4]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	3308      	adds	r3, #8
 8005224:	429a      	cmp	r2, r3
 8005226:	d104      	bne.n	8005232 <vTaskSwitchContext+0x8a>
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	605a      	str	r2, [r3, #4]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	4a09      	ldr	r2, [pc, #36]	; (8005260 <vTaskSwitchContext+0xb8>)
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	4a06      	ldr	r2, [pc, #24]	; (8005258 <vTaskSwitchContext+0xb0>)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6013      	str	r3, [r2, #0]
}
 8005242:	bf00      	nop
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	20000eb0 	.word	0x20000eb0
 8005254:	20000e9c 	.word	0x20000e9c
 8005258:	20000e90 	.word	0x20000e90
 800525c:	200009b8 	.word	0x200009b8
 8005260:	200009b4 	.word	0x200009b4

08005264 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	60fb      	str	r3, [r7, #12]
}
 8005286:	bf00      	nop
 8005288:	e7fe      	b.n	8005288 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800528a:	4b07      	ldr	r3, [pc, #28]	; (80052a8 <vTaskPlaceOnEventList+0x44>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3318      	adds	r3, #24
 8005290:	4619      	mov	r1, r3
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fe fe87 	bl	8003fa6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005298:	2101      	movs	r1, #1
 800529a:	6838      	ldr	r0, [r7, #0]
 800529c:	f000 fa7c 	bl	8005798 <prvAddCurrentTaskToDelayedList>
}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	200009b4 	.word	0x200009b4

080052ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	617b      	str	r3, [r7, #20]
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052d4:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <vTaskPlaceOnEventListRestricted+0x54>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3318      	adds	r3, #24
 80052da:	4619      	mov	r1, r3
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f7fe fe3e 	bl	8003f5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80052e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	68b8      	ldr	r0, [r7, #8]
 80052f2:	f000 fa51 	bl	8005798 <prvAddCurrentTaskToDelayedList>
	}
 80052f6:	bf00      	nop
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	200009b4 	.word	0x200009b4

08005304 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10a      	bne.n	8005330 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	60fb      	str	r3, [r7, #12]
}
 800532c:	bf00      	nop
 800532e:	e7fe      	b.n	800532e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	3318      	adds	r3, #24
 8005334:	4618      	mov	r0, r3
 8005336:	f7fe fe6f 	bl	8004018 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800533a:	4b1e      	ldr	r3, [pc, #120]	; (80053b4 <xTaskRemoveFromEventList+0xb0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d11d      	bne.n	800537e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	3304      	adds	r3, #4
 8005346:	4618      	mov	r0, r3
 8005348:	f7fe fe66 	bl	8004018 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005350:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <xTaskRemoveFromEventList+0xb4>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d903      	bls.n	8005360 <xTaskRemoveFromEventList+0x5c>
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	4a16      	ldr	r2, [pc, #88]	; (80053b8 <xTaskRemoveFromEventList+0xb4>)
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005364:	4613      	mov	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4a13      	ldr	r2, [pc, #76]	; (80053bc <xTaskRemoveFromEventList+0xb8>)
 800536e:	441a      	add	r2, r3
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	3304      	adds	r3, #4
 8005374:	4619      	mov	r1, r3
 8005376:	4610      	mov	r0, r2
 8005378:	f7fe fdf1 	bl	8003f5e <vListInsertEnd>
 800537c:	e005      	b.n	800538a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	3318      	adds	r3, #24
 8005382:	4619      	mov	r1, r3
 8005384:	480e      	ldr	r0, [pc, #56]	; (80053c0 <xTaskRemoveFromEventList+0xbc>)
 8005386:	f7fe fdea 	bl	8003f5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538e:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <xTaskRemoveFromEventList+0xc0>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	429a      	cmp	r2, r3
 8005396:	d905      	bls.n	80053a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005398:	2301      	movs	r3, #1
 800539a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800539c:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <xTaskRemoveFromEventList+0xc4>)
 800539e:	2201      	movs	r2, #1
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	e001      	b.n	80053a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80053a8:	697b      	ldr	r3, [r7, #20]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000eb0 	.word	0x20000eb0
 80053b8:	20000e90 	.word	0x20000e90
 80053bc:	200009b8 	.word	0x200009b8
 80053c0:	20000e48 	.word	0x20000e48
 80053c4:	200009b4 	.word	0x200009b4
 80053c8:	20000e9c 	.word	0x20000e9c

080053cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053d4:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <vTaskInternalSetTimeOutState+0x24>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053dc:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <vTaskInternalSetTimeOutState+0x28>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	605a      	str	r2, [r3, #4]
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	20000ea0 	.word	0x20000ea0
 80053f4:	20000e8c 	.word	0x20000e8c

080053f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	613b      	str	r3, [r7, #16]
}
 800541a:	bf00      	nop
 800541c:	e7fe      	b.n	800541c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	60fb      	str	r3, [r7, #12]
}
 8005436:	bf00      	nop
 8005438:	e7fe      	b.n	8005438 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800543a:	f000 fe7b 	bl	8006134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800543e:	4b1d      	ldr	r3, [pc, #116]	; (80054b4 <xTaskCheckForTimeOut+0xbc>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005456:	d102      	bne.n	800545e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005458:	2300      	movs	r3, #0
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	e023      	b.n	80054a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	4b15      	ldr	r3, [pc, #84]	; (80054b8 <xTaskCheckForTimeOut+0xc0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d007      	beq.n	800547a <xTaskCheckForTimeOut+0x82>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	429a      	cmp	r2, r3
 8005472:	d302      	bcc.n	800547a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005474:	2301      	movs	r3, #1
 8005476:	61fb      	str	r3, [r7, #28]
 8005478:	e015      	b.n	80054a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	429a      	cmp	r2, r3
 8005482:	d20b      	bcs.n	800549c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	1ad2      	subs	r2, r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff ff9b 	bl	80053cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	e004      	b.n	80054a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054a2:	2301      	movs	r3, #1
 80054a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80054a6:	f000 fe75 	bl	8006194 <vPortExitCritical>

	return xReturn;
 80054aa:	69fb      	ldr	r3, [r7, #28]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3720      	adds	r7, #32
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20000e8c 	.word	0x20000e8c
 80054b8:	20000ea0 	.word	0x20000ea0

080054bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054c0:	4b03      	ldr	r3, [pc, #12]	; (80054d0 <vTaskMissedYield+0x14>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
}
 80054c6:	bf00      	nop
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	20000e9c 	.word	0x20000e9c

080054d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054dc:	f000 f852 	bl	8005584 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054e0:	4b06      	ldr	r3, [pc, #24]	; (80054fc <prvIdleTask+0x28>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d9f9      	bls.n	80054dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80054e8:	4b05      	ldr	r3, [pc, #20]	; (8005500 <prvIdleTask+0x2c>)
 80054ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054f8:	e7f0      	b.n	80054dc <prvIdleTask+0x8>
 80054fa:	bf00      	nop
 80054fc:	200009b8 	.word	0x200009b8
 8005500:	e000ed04 	.word	0xe000ed04

08005504 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800550a:	2300      	movs	r3, #0
 800550c:	607b      	str	r3, [r7, #4]
 800550e:	e00c      	b.n	800552a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4a12      	ldr	r2, [pc, #72]	; (8005564 <prvInitialiseTaskLists+0x60>)
 800551c:	4413      	add	r3, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe fcf0 	bl	8003f04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3301      	adds	r3, #1
 8005528:	607b      	str	r3, [r7, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b37      	cmp	r3, #55	; 0x37
 800552e:	d9ef      	bls.n	8005510 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005530:	480d      	ldr	r0, [pc, #52]	; (8005568 <prvInitialiseTaskLists+0x64>)
 8005532:	f7fe fce7 	bl	8003f04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005536:	480d      	ldr	r0, [pc, #52]	; (800556c <prvInitialiseTaskLists+0x68>)
 8005538:	f7fe fce4 	bl	8003f04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800553c:	480c      	ldr	r0, [pc, #48]	; (8005570 <prvInitialiseTaskLists+0x6c>)
 800553e:	f7fe fce1 	bl	8003f04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005542:	480c      	ldr	r0, [pc, #48]	; (8005574 <prvInitialiseTaskLists+0x70>)
 8005544:	f7fe fcde 	bl	8003f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005548:	480b      	ldr	r0, [pc, #44]	; (8005578 <prvInitialiseTaskLists+0x74>)
 800554a:	f7fe fcdb 	bl	8003f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800554e:	4b0b      	ldr	r3, [pc, #44]	; (800557c <prvInitialiseTaskLists+0x78>)
 8005550:	4a05      	ldr	r2, [pc, #20]	; (8005568 <prvInitialiseTaskLists+0x64>)
 8005552:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005554:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <prvInitialiseTaskLists+0x7c>)
 8005556:	4a05      	ldr	r2, [pc, #20]	; (800556c <prvInitialiseTaskLists+0x68>)
 8005558:	601a      	str	r2, [r3, #0]
}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	200009b8 	.word	0x200009b8
 8005568:	20000e18 	.word	0x20000e18
 800556c:	20000e2c 	.word	0x20000e2c
 8005570:	20000e48 	.word	0x20000e48
 8005574:	20000e5c 	.word	0x20000e5c
 8005578:	20000e74 	.word	0x20000e74
 800557c:	20000e40 	.word	0x20000e40
 8005580:	20000e44 	.word	0x20000e44

08005584 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800558a:	e019      	b.n	80055c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800558c:	f000 fdd2 	bl	8006134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005590:	4b10      	ldr	r3, [pc, #64]	; (80055d4 <prvCheckTasksWaitingTermination+0x50>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3304      	adds	r3, #4
 800559c:	4618      	mov	r0, r3
 800559e:	f7fe fd3b 	bl	8004018 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055a2:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <prvCheckTasksWaitingTermination+0x54>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	4a0b      	ldr	r2, [pc, #44]	; (80055d8 <prvCheckTasksWaitingTermination+0x54>)
 80055aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055ac:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <prvCheckTasksWaitingTermination+0x58>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	4a0a      	ldr	r2, [pc, #40]	; (80055dc <prvCheckTasksWaitingTermination+0x58>)
 80055b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80055b6:	f000 fded 	bl	8006194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f810 	bl	80055e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055c0:	4b06      	ldr	r3, [pc, #24]	; (80055dc <prvCheckTasksWaitingTermination+0x58>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e1      	bne.n	800558c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20000e5c 	.word	0x20000e5c
 80055d8:	20000e88 	.word	0x20000e88
 80055dc:	20000e70 	.word	0x20000e70

080055e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d108      	bne.n	8005604 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 ff8a 	bl	8006510 <vPortFree>
				vPortFree( pxTCB );
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 ff87 	bl	8006510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005602:	e018      	b.n	8005636 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800560a:	2b01      	cmp	r3, #1
 800560c:	d103      	bne.n	8005616 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 ff7e 	bl	8006510 <vPortFree>
	}
 8005614:	e00f      	b.n	8005636 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800561c:	2b02      	cmp	r3, #2
 800561e:	d00a      	beq.n	8005636 <prvDeleteTCB+0x56>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	60fb      	str	r3, [r7, #12]
}
 8005632:	bf00      	nop
 8005634:	e7fe      	b.n	8005634 <prvDeleteTCB+0x54>
	}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
	...

08005640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005646:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <prvResetNextTaskUnblockTime+0x38>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d104      	bne.n	800565a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005650:	4b0a      	ldr	r3, [pc, #40]	; (800567c <prvResetNextTaskUnblockTime+0x3c>)
 8005652:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005656:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005658:	e008      	b.n	800566c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800565a:	4b07      	ldr	r3, [pc, #28]	; (8005678 <prvResetNextTaskUnblockTime+0x38>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	4a04      	ldr	r2, [pc, #16]	; (800567c <prvResetNextTaskUnblockTime+0x3c>)
 800566a:	6013      	str	r3, [r2, #0]
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	20000e40 	.word	0x20000e40
 800567c:	20000ea8 	.word	0x20000ea8

08005680 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005686:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <xTaskGetSchedulerState+0x34>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d102      	bne.n	8005694 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800568e:	2301      	movs	r3, #1
 8005690:	607b      	str	r3, [r7, #4]
 8005692:	e008      	b.n	80056a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005694:	4b08      	ldr	r3, [pc, #32]	; (80056b8 <xTaskGetSchedulerState+0x38>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d102      	bne.n	80056a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800569c:	2302      	movs	r3, #2
 800569e:	607b      	str	r3, [r7, #4]
 80056a0:	e001      	b.n	80056a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80056a2:	2300      	movs	r3, #0
 80056a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80056a6:	687b      	ldr	r3, [r7, #4]
	}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	20000e94 	.word	0x20000e94
 80056b8:	20000eb0 	.word	0x20000eb0

080056bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d056      	beq.n	8005780 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056d2:	4b2e      	ldr	r3, [pc, #184]	; (800578c <xTaskPriorityDisinherit+0xd0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d00a      	beq.n	80056f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	60fb      	str	r3, [r7, #12]
}
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10a      	bne.n	8005710 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	60bb      	str	r3, [r7, #8]
}
 800570c:	bf00      	nop
 800570e:	e7fe      	b.n	800570e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005714:	1e5a      	subs	r2, r3, #1
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005722:	429a      	cmp	r2, r3
 8005724:	d02c      	beq.n	8005780 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800572a:	2b00      	cmp	r3, #0
 800572c:	d128      	bne.n	8005780 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	3304      	adds	r3, #4
 8005732:	4618      	mov	r0, r3
 8005734:	f7fe fc70 	bl	8004018 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005750:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <xTaskPriorityDisinherit+0xd4>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	429a      	cmp	r2, r3
 8005756:	d903      	bls.n	8005760 <xTaskPriorityDisinherit+0xa4>
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	4a0c      	ldr	r2, [pc, #48]	; (8005790 <xTaskPriorityDisinherit+0xd4>)
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4a09      	ldr	r2, [pc, #36]	; (8005794 <xTaskPriorityDisinherit+0xd8>)
 800576e:	441a      	add	r2, r3
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	3304      	adds	r3, #4
 8005774:	4619      	mov	r1, r3
 8005776:	4610      	mov	r0, r2
 8005778:	f7fe fbf1 	bl	8003f5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800577c:	2301      	movs	r3, #1
 800577e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005780:	697b      	ldr	r3, [r7, #20]
	}
 8005782:	4618      	mov	r0, r3
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	200009b4 	.word	0x200009b4
 8005790:	20000e90 	.word	0x20000e90
 8005794:	200009b8 	.word	0x200009b8

08005798 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057a2:	4b21      	ldr	r3, [pc, #132]	; (8005828 <prvAddCurrentTaskToDelayedList+0x90>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057a8:	4b20      	ldr	r3, [pc, #128]	; (800582c <prvAddCurrentTaskToDelayedList+0x94>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3304      	adds	r3, #4
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fe fc32 	bl	8004018 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ba:	d10a      	bne.n	80057d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d007      	beq.n	80057d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057c2:	4b1a      	ldr	r3, [pc, #104]	; (800582c <prvAddCurrentTaskToDelayedList+0x94>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3304      	adds	r3, #4
 80057c8:	4619      	mov	r1, r3
 80057ca:	4819      	ldr	r0, [pc, #100]	; (8005830 <prvAddCurrentTaskToDelayedList+0x98>)
 80057cc:	f7fe fbc7 	bl	8003f5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057d0:	e026      	b.n	8005820 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4413      	add	r3, r2
 80057d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057da:	4b14      	ldr	r3, [pc, #80]	; (800582c <prvAddCurrentTaskToDelayedList+0x94>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d209      	bcs.n	80057fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057ea:	4b12      	ldr	r3, [pc, #72]	; (8005834 <prvAddCurrentTaskToDelayedList+0x9c>)
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	4b0f      	ldr	r3, [pc, #60]	; (800582c <prvAddCurrentTaskToDelayedList+0x94>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f7fe fbd5 	bl	8003fa6 <vListInsert>
}
 80057fc:	e010      	b.n	8005820 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057fe:	4b0e      	ldr	r3, [pc, #56]	; (8005838 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	4b0a      	ldr	r3, [pc, #40]	; (800582c <prvAddCurrentTaskToDelayedList+0x94>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3304      	adds	r3, #4
 8005808:	4619      	mov	r1, r3
 800580a:	4610      	mov	r0, r2
 800580c:	f7fe fbcb 	bl	8003fa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005810:	4b0a      	ldr	r3, [pc, #40]	; (800583c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	429a      	cmp	r2, r3
 8005818:	d202      	bcs.n	8005820 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800581a:	4a08      	ldr	r2, [pc, #32]	; (800583c <prvAddCurrentTaskToDelayedList+0xa4>)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6013      	str	r3, [r2, #0]
}
 8005820:	bf00      	nop
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20000e8c 	.word	0x20000e8c
 800582c:	200009b4 	.word	0x200009b4
 8005830:	20000e74 	.word	0x20000e74
 8005834:	20000e44 	.word	0x20000e44
 8005838:	20000e40 	.word	0x20000e40
 800583c:	20000ea8 	.word	0x20000ea8

08005840 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08a      	sub	sp, #40	; 0x28
 8005844:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005846:	2300      	movs	r3, #0
 8005848:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800584a:	f000 fb07 	bl	8005e5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800584e:	4b1c      	ldr	r3, [pc, #112]	; (80058c0 <xTimerCreateTimerTask+0x80>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d021      	beq.n	800589a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800585e:	1d3a      	adds	r2, r7, #4
 8005860:	f107 0108 	add.w	r1, r7, #8
 8005864:	f107 030c 	add.w	r3, r7, #12
 8005868:	4618      	mov	r0, r3
 800586a:	f7fe fb31 	bl	8003ed0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	9202      	str	r2, [sp, #8]
 8005876:	9301      	str	r3, [sp, #4]
 8005878:	2302      	movs	r3, #2
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	2300      	movs	r3, #0
 800587e:	460a      	mov	r2, r1
 8005880:	4910      	ldr	r1, [pc, #64]	; (80058c4 <xTimerCreateTimerTask+0x84>)
 8005882:	4811      	ldr	r0, [pc, #68]	; (80058c8 <xTimerCreateTimerTask+0x88>)
 8005884:	f7ff f8de 	bl	8004a44 <xTaskCreateStatic>
 8005888:	4603      	mov	r3, r0
 800588a:	4a10      	ldr	r2, [pc, #64]	; (80058cc <xTimerCreateTimerTask+0x8c>)
 800588c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800588e:	4b0f      	ldr	r3, [pc, #60]	; (80058cc <xTimerCreateTimerTask+0x8c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005896:	2301      	movs	r3, #1
 8005898:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	613b      	str	r3, [r7, #16]
}
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80058b6:	697b      	ldr	r3, [r7, #20]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	20000ee4 	.word	0x20000ee4
 80058c4:	0800b02c 	.word	0x0800b02c
 80058c8:	08005a05 	.word	0x08005a05
 80058cc:	20000ee8 	.word	0x20000ee8

080058d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08a      	sub	sp, #40	; 0x28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80058de:	2300      	movs	r3, #0
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10a      	bne.n	80058fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	623b      	str	r3, [r7, #32]
}
 80058fa:	bf00      	nop
 80058fc:	e7fe      	b.n	80058fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058fe:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <xTimerGenericCommand+0x98>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d02a      	beq.n	800595c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b05      	cmp	r3, #5
 8005916:	dc18      	bgt.n	800594a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005918:	f7ff feb2 	bl	8005680 <xTaskGetSchedulerState>
 800591c:	4603      	mov	r3, r0
 800591e:	2b02      	cmp	r3, #2
 8005920:	d109      	bne.n	8005936 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005922:	4b11      	ldr	r3, [pc, #68]	; (8005968 <xTimerGenericCommand+0x98>)
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	f107 0110 	add.w	r1, r7, #16
 800592a:	2300      	movs	r3, #0
 800592c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800592e:	f7fe fca1 	bl	8004274 <xQueueGenericSend>
 8005932:	6278      	str	r0, [r7, #36]	; 0x24
 8005934:	e012      	b.n	800595c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005936:	4b0c      	ldr	r3, [pc, #48]	; (8005968 <xTimerGenericCommand+0x98>)
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	f107 0110 	add.w	r1, r7, #16
 800593e:	2300      	movs	r3, #0
 8005940:	2200      	movs	r2, #0
 8005942:	f7fe fc97 	bl	8004274 <xQueueGenericSend>
 8005946:	6278      	str	r0, [r7, #36]	; 0x24
 8005948:	e008      	b.n	800595c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800594a:	4b07      	ldr	r3, [pc, #28]	; (8005968 <xTimerGenericCommand+0x98>)
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	f107 0110 	add.w	r1, r7, #16
 8005952:	2300      	movs	r3, #0
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	f7fe fd8b 	bl	8004470 <xQueueGenericSendFromISR>
 800595a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800595e:	4618      	mov	r0, r3
 8005960:	3728      	adds	r7, #40	; 0x28
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	20000ee4 	.word	0x20000ee4

0800596c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af02      	add	r7, sp, #8
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005976:	4b22      	ldr	r3, [pc, #136]	; (8005a00 <prvProcessExpiredTimer+0x94>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	3304      	adds	r3, #4
 8005984:	4618      	mov	r0, r3
 8005986:	f7fe fb47 	bl	8004018 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	d022      	beq.n	80059de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	699a      	ldr	r2, [r3, #24]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	18d1      	adds	r1, r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	6978      	ldr	r0, [r7, #20]
 80059a6:	f000 f8d1 	bl	8005b4c <prvInsertTimerInActiveList>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01f      	beq.n	80059f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059b0:	2300      	movs	r3, #0
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	2100      	movs	r1, #0
 80059ba:	6978      	ldr	r0, [r7, #20]
 80059bc:	f7ff ff88 	bl	80058d0 <xTimerGenericCommand>
 80059c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d113      	bne.n	80059f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	60fb      	str	r3, [r7, #12]
}
 80059da:	bf00      	nop
 80059dc:	e7fe      	b.n	80059dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059e4:	f023 0301 	bic.w	r3, r3, #1
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	6978      	ldr	r0, [r7, #20]
 80059f6:	4798      	blx	r3
}
 80059f8:	bf00      	nop
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	20000edc 	.word	0x20000edc

08005a04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a0c:	f107 0308 	add.w	r3, r7, #8
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 f857 	bl	8005ac4 <prvGetNextExpireTime>
 8005a16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f803 	bl	8005a28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a22:	f000 f8d5 	bl	8005bd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a26:	e7f1      	b.n	8005a0c <prvTimerTask+0x8>

08005a28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a32:	f7ff fa43 	bl	8004ebc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a36:	f107 0308 	add.w	r3, r7, #8
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 f866 	bl	8005b0c <prvSampleTimeNow>
 8005a40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d130      	bne.n	8005aaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10a      	bne.n	8005a64 <prvProcessTimerOrBlockTask+0x3c>
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d806      	bhi.n	8005a64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a56:	f7ff fa3f 	bl	8004ed8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a5a:	68f9      	ldr	r1, [r7, #12]
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7ff ff85 	bl	800596c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a62:	e024      	b.n	8005aae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d008      	beq.n	8005a7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a6a:	4b13      	ldr	r3, [pc, #76]	; (8005ab8 <prvProcessTimerOrBlockTask+0x90>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <prvProcessTimerOrBlockTask+0x50>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <prvProcessTimerOrBlockTask+0x52>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a7c:	4b0f      	ldr	r3, [pc, #60]	; (8005abc <prvProcessTimerOrBlockTask+0x94>)
 8005a7e:	6818      	ldr	r0, [r3, #0]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	f7fe ffa7 	bl	80049dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a8e:	f7ff fa23 	bl	8004ed8 <xTaskResumeAll>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10a      	bne.n	8005aae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a98:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <prvProcessTimerOrBlockTask+0x98>)
 8005a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	f3bf 8f6f 	isb	sy
}
 8005aa8:	e001      	b.n	8005aae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005aaa:	f7ff fa15 	bl	8004ed8 <xTaskResumeAll>
}
 8005aae:	bf00      	nop
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	20000ee0 	.word	0x20000ee0
 8005abc:	20000ee4 	.word	0x20000ee4
 8005ac0:	e000ed04 	.word	0xe000ed04

08005ac4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005acc:	4b0e      	ldr	r3, [pc, #56]	; (8005b08 <prvGetNextExpireTime+0x44>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <prvGetNextExpireTime+0x16>
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	e000      	b.n	8005adc <prvGetNextExpireTime+0x18>
 8005ada:	2200      	movs	r2, #0
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d105      	bne.n	8005af4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ae8:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <prvGetNextExpireTime+0x44>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	e001      	b.n	8005af8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005af8:	68fb      	ldr	r3, [r7, #12]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	20000edc 	.word	0x20000edc

08005b0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b14:	f7ff fa7e 	bl	8005014 <xTaskGetTickCount>
 8005b18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <prvSampleTimeNow+0x3c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d205      	bcs.n	8005b30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b24:	f000 f936 	bl	8005d94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	e002      	b.n	8005b36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b36:	4a04      	ldr	r2, [pc, #16]	; (8005b48 <prvSampleTimeNow+0x3c>)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20000eec 	.word	0x20000eec

08005b4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d812      	bhi.n	8005b98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	1ad2      	subs	r2, r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d302      	bcc.n	8005b86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b80:	2301      	movs	r3, #1
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	e01b      	b.n	8005bbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b86:	4b10      	ldr	r3, [pc, #64]	; (8005bc8 <prvInsertTimerInActiveList+0x7c>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4610      	mov	r0, r2
 8005b92:	f7fe fa08 	bl	8003fa6 <vListInsert>
 8005b96:	e012      	b.n	8005bbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d206      	bcs.n	8005bae <prvInsertTimerInActiveList+0x62>
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d302      	bcc.n	8005bae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	e007      	b.n	8005bbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bae:	4b07      	ldr	r3, [pc, #28]	; (8005bcc <prvInsertTimerInActiveList+0x80>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4610      	mov	r0, r2
 8005bba:	f7fe f9f4 	bl	8003fa6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005bbe:	697b      	ldr	r3, [r7, #20]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20000ee0 	.word	0x20000ee0
 8005bcc:	20000edc 	.word	0x20000edc

08005bd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08e      	sub	sp, #56	; 0x38
 8005bd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bd6:	e0ca      	b.n	8005d6e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	da18      	bge.n	8005c10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005bde:	1d3b      	adds	r3, r7, #4
 8005be0:	3304      	adds	r3, #4
 8005be2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10a      	bne.n	8005c00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	61fb      	str	r3, [r7, #28]
}
 8005bfc:	bf00      	nop
 8005bfe:	e7fe      	b.n	8005bfe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c06:	6850      	ldr	r0, [r2, #4]
 8005c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c0a:	6892      	ldr	r2, [r2, #8]
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f2c0 80aa 	blt.w	8005d6c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d004      	beq.n	8005c2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	3304      	adds	r3, #4
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fe f9f5 	bl	8004018 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c2e:	463b      	mov	r3, r7
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff ff6b 	bl	8005b0c <prvSampleTimeNow>
 8005c36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b09      	cmp	r3, #9
 8005c3c:	f200 8097 	bhi.w	8005d6e <prvProcessReceivedCommands+0x19e>
 8005c40:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <prvProcessReceivedCommands+0x78>)
 8005c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c46:	bf00      	nop
 8005c48:	08005c71 	.word	0x08005c71
 8005c4c:	08005c71 	.word	0x08005c71
 8005c50:	08005c71 	.word	0x08005c71
 8005c54:	08005ce5 	.word	0x08005ce5
 8005c58:	08005cf9 	.word	0x08005cf9
 8005c5c:	08005d43 	.word	0x08005d43
 8005c60:	08005c71 	.word	0x08005c71
 8005c64:	08005c71 	.word	0x08005c71
 8005c68:	08005ce5 	.word	0x08005ce5
 8005c6c:	08005cf9 	.word	0x08005cf9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c76:	f043 0301 	orr.w	r3, r3, #1
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	18d1      	adds	r1, r2, r3
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c90:	f7ff ff5c 	bl	8005b4c <prvInsertTimerInActiveList>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d069      	beq.n	8005d6e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d05e      	beq.n	8005d6e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	441a      	add	r2, r3
 8005cb8:	2300      	movs	r3, #0
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cc2:	f7ff fe05 	bl	80058d0 <xTimerGenericCommand>
 8005cc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d14f      	bne.n	8005d6e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	61bb      	str	r3, [r7, #24]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cea:	f023 0301 	bic.w	r3, r3, #1
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005cf6:	e03a      	b.n	8005d6e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cfe:	f043 0301 	orr.w	r3, r3, #1
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	617b      	str	r3, [r7, #20]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	18d1      	adds	r1, r2, r3
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d3c:	f7ff ff06 	bl	8005b4c <prvInsertTimerInActiveList>
					break;
 8005d40:	e015      	b.n	8005d6e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d103      	bne.n	8005d58 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d52:	f000 fbdd 	bl	8006510 <vPortFree>
 8005d56:	e00a      	b.n	8005d6e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d5e:	f023 0301 	bic.w	r3, r3, #1
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d6a:	e000      	b.n	8005d6e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005d6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d6e:	4b08      	ldr	r3, [pc, #32]	; (8005d90 <prvProcessReceivedCommands+0x1c0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	1d39      	adds	r1, r7, #4
 8005d74:	2200      	movs	r2, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe fc16 	bl	80045a8 <xQueueReceive>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f47f af2a 	bne.w	8005bd8 <prvProcessReceivedCommands+0x8>
	}
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	3730      	adds	r7, #48	; 0x30
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20000ee4 	.word	0x20000ee4

08005d94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d9a:	e048      	b.n	8005e2e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d9c:	4b2d      	ldr	r3, [pc, #180]	; (8005e54 <prvSwitchTimerLists+0xc0>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005da6:	4b2b      	ldr	r3, [pc, #172]	; (8005e54 <prvSwitchTimerLists+0xc0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3304      	adds	r3, #4
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe f92f 	bl	8004018 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d02e      	beq.n	8005e2e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d90e      	bls.n	8005e00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dee:	4b19      	ldr	r3, [pc, #100]	; (8005e54 <prvSwitchTimerLists+0xc0>)
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3304      	adds	r3, #4
 8005df6:	4619      	mov	r1, r3
 8005df8:	4610      	mov	r0, r2
 8005dfa:	f7fe f8d4 	bl	8003fa6 <vListInsert>
 8005dfe:	e016      	b.n	8005e2e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e00:	2300      	movs	r3, #0
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	2300      	movs	r3, #0
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	2100      	movs	r1, #0
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f7ff fd60 	bl	80058d0 <xTimerGenericCommand>
 8005e10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	603b      	str	r3, [r7, #0]
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e2e:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <prvSwitchTimerLists+0xc0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1b1      	bne.n	8005d9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e38:	4b06      	ldr	r3, [pc, #24]	; (8005e54 <prvSwitchTimerLists+0xc0>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e3e:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <prvSwitchTimerLists+0xc4>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a04      	ldr	r2, [pc, #16]	; (8005e54 <prvSwitchTimerLists+0xc0>)
 8005e44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e46:	4a04      	ldr	r2, [pc, #16]	; (8005e58 <prvSwitchTimerLists+0xc4>)
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	6013      	str	r3, [r2, #0]
}
 8005e4c:	bf00      	nop
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	20000edc 	.word	0x20000edc
 8005e58:	20000ee0 	.word	0x20000ee0

08005e5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e62:	f000 f967 	bl	8006134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e66:	4b15      	ldr	r3, [pc, #84]	; (8005ebc <prvCheckForValidListAndQueue+0x60>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d120      	bne.n	8005eb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e6e:	4814      	ldr	r0, [pc, #80]	; (8005ec0 <prvCheckForValidListAndQueue+0x64>)
 8005e70:	f7fe f848 	bl	8003f04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e74:	4813      	ldr	r0, [pc, #76]	; (8005ec4 <prvCheckForValidListAndQueue+0x68>)
 8005e76:	f7fe f845 	bl	8003f04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e7a:	4b13      	ldr	r3, [pc, #76]	; (8005ec8 <prvCheckForValidListAndQueue+0x6c>)
 8005e7c:	4a10      	ldr	r2, [pc, #64]	; (8005ec0 <prvCheckForValidListAndQueue+0x64>)
 8005e7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e80:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <prvCheckForValidListAndQueue+0x70>)
 8005e82:	4a10      	ldr	r2, [pc, #64]	; (8005ec4 <prvCheckForValidListAndQueue+0x68>)
 8005e84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e86:	2300      	movs	r3, #0
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <prvCheckForValidListAndQueue+0x74>)
 8005e8c:	4a11      	ldr	r2, [pc, #68]	; (8005ed4 <prvCheckForValidListAndQueue+0x78>)
 8005e8e:	2110      	movs	r1, #16
 8005e90:	200a      	movs	r0, #10
 8005e92:	f7fe f953 	bl	800413c <xQueueGenericCreateStatic>
 8005e96:	4603      	mov	r3, r0
 8005e98:	4a08      	ldr	r2, [pc, #32]	; (8005ebc <prvCheckForValidListAndQueue+0x60>)
 8005e9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e9c:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <prvCheckForValidListAndQueue+0x60>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ea4:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <prvCheckForValidListAndQueue+0x60>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	490b      	ldr	r1, [pc, #44]	; (8005ed8 <prvCheckForValidListAndQueue+0x7c>)
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fe fd6c 	bl	8004988 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005eb0:	f000 f970 	bl	8006194 <vPortExitCritical>
}
 8005eb4:	bf00      	nop
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	20000ee4 	.word	0x20000ee4
 8005ec0:	20000eb4 	.word	0x20000eb4
 8005ec4:	20000ec8 	.word	0x20000ec8
 8005ec8:	20000edc 	.word	0x20000edc
 8005ecc:	20000ee0 	.word	0x20000ee0
 8005ed0:	20000f90 	.word	0x20000f90
 8005ed4:	20000ef0 	.word	0x20000ef0
 8005ed8:	0800b034 	.word	0x0800b034

08005edc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3b04      	subs	r3, #4
 8005eec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3b04      	subs	r3, #4
 8005efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f023 0201 	bic.w	r2, r3, #1
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3b04      	subs	r3, #4
 8005f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f0c:	4a0c      	ldr	r2, [pc, #48]	; (8005f40 <pxPortInitialiseStack+0x64>)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	3b14      	subs	r3, #20
 8005f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3b04      	subs	r3, #4
 8005f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f06f 0202 	mvn.w	r2, #2
 8005f2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3b20      	subs	r3, #32
 8005f30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f32:	68fb      	ldr	r3, [r7, #12]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	08005f45 	.word	0x08005f45

08005f44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f4e:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <prvTaskExitError+0x54>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f56:	d00a      	beq.n	8005f6e <prvTaskExitError+0x2a>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	60fb      	str	r3, [r7, #12]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <prvTaskExitError+0x28>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	60bb      	str	r3, [r7, #8]
}
 8005f80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f82:	bf00      	nop
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0fc      	beq.n	8005f84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f8a:	bf00      	nop
 8005f8c:	bf00      	nop
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	2000000c 	.word	0x2000000c
 8005f9c:	00000000 	.word	0x00000000

08005fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fa0:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <pxCurrentTCBConst2>)
 8005fa2:	6819      	ldr	r1, [r3, #0]
 8005fa4:	6808      	ldr	r0, [r1, #0]
 8005fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005faa:	f380 8809 	msr	PSP, r0
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f04f 0000 	mov.w	r0, #0
 8005fb6:	f380 8811 	msr	BASEPRI, r0
 8005fba:	4770      	bx	lr
 8005fbc:	f3af 8000 	nop.w

08005fc0 <pxCurrentTCBConst2>:
 8005fc0:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop

08005fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005fc8:	4808      	ldr	r0, [pc, #32]	; (8005fec <prvPortStartFirstTask+0x24>)
 8005fca:	6800      	ldr	r0, [r0, #0]
 8005fcc:	6800      	ldr	r0, [r0, #0]
 8005fce:	f380 8808 	msr	MSP, r0
 8005fd2:	f04f 0000 	mov.w	r0, #0
 8005fd6:	f380 8814 	msr	CONTROL, r0
 8005fda:	b662      	cpsie	i
 8005fdc:	b661      	cpsie	f
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	df00      	svc	0
 8005fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fea:	bf00      	nop
 8005fec:	e000ed08 	.word	0xe000ed08

08005ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ff6:	4b46      	ldr	r3, [pc, #280]	; (8006110 <xPortStartScheduler+0x120>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a46      	ldr	r2, [pc, #280]	; (8006114 <xPortStartScheduler+0x124>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d10a      	bne.n	8006016 <xPortStartScheduler+0x26>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	613b      	str	r3, [r7, #16]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006016:	4b3e      	ldr	r3, [pc, #248]	; (8006110 <xPortStartScheduler+0x120>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a3f      	ldr	r2, [pc, #252]	; (8006118 <xPortStartScheduler+0x128>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d10a      	bne.n	8006036 <xPortStartScheduler+0x46>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	60fb      	str	r3, [r7, #12]
}
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006036:	4b39      	ldr	r3, [pc, #228]	; (800611c <xPortStartScheduler+0x12c>)
 8006038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	b2db      	uxtb	r3, r3
 8006040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	22ff      	movs	r2, #255	; 0xff
 8006046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006058:	b2da      	uxtb	r2, r3
 800605a:	4b31      	ldr	r3, [pc, #196]	; (8006120 <xPortStartScheduler+0x130>)
 800605c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800605e:	4b31      	ldr	r3, [pc, #196]	; (8006124 <xPortStartScheduler+0x134>)
 8006060:	2207      	movs	r2, #7
 8006062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006064:	e009      	b.n	800607a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006066:	4b2f      	ldr	r3, [pc, #188]	; (8006124 <xPortStartScheduler+0x134>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3b01      	subs	r3, #1
 800606c:	4a2d      	ldr	r2, [pc, #180]	; (8006124 <xPortStartScheduler+0x134>)
 800606e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	b2db      	uxtb	r3, r3
 8006078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800607a:	78fb      	ldrb	r3, [r7, #3]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006082:	2b80      	cmp	r3, #128	; 0x80
 8006084:	d0ef      	beq.n	8006066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006086:	4b27      	ldr	r3, [pc, #156]	; (8006124 <xPortStartScheduler+0x134>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f1c3 0307 	rsb	r3, r3, #7
 800608e:	2b04      	cmp	r3, #4
 8006090:	d00a      	beq.n	80060a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	60bb      	str	r3, [r7, #8]
}
 80060a4:	bf00      	nop
 80060a6:	e7fe      	b.n	80060a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060a8:	4b1e      	ldr	r3, [pc, #120]	; (8006124 <xPortStartScheduler+0x134>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	4a1d      	ldr	r2, [pc, #116]	; (8006124 <xPortStartScheduler+0x134>)
 80060b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060b2:	4b1c      	ldr	r3, [pc, #112]	; (8006124 <xPortStartScheduler+0x134>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060ba:	4a1a      	ldr	r2, [pc, #104]	; (8006124 <xPortStartScheduler+0x134>)
 80060bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060c6:	4b18      	ldr	r3, [pc, #96]	; (8006128 <xPortStartScheduler+0x138>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a17      	ldr	r2, [pc, #92]	; (8006128 <xPortStartScheduler+0x138>)
 80060cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060d2:	4b15      	ldr	r3, [pc, #84]	; (8006128 <xPortStartScheduler+0x138>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a14      	ldr	r2, [pc, #80]	; (8006128 <xPortStartScheduler+0x138>)
 80060d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80060dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060de:	f000 f8dd 	bl	800629c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060e2:	4b12      	ldr	r3, [pc, #72]	; (800612c <xPortStartScheduler+0x13c>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060e8:	f000 f8fc 	bl	80062e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060ec:	4b10      	ldr	r3, [pc, #64]	; (8006130 <xPortStartScheduler+0x140>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a0f      	ldr	r2, [pc, #60]	; (8006130 <xPortStartScheduler+0x140>)
 80060f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80060f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060f8:	f7ff ff66 	bl	8005fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060fc:	f7ff f854 	bl	80051a8 <vTaskSwitchContext>
	prvTaskExitError();
 8006100:	f7ff ff20 	bl	8005f44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	e000ed00 	.word	0xe000ed00
 8006114:	410fc271 	.word	0x410fc271
 8006118:	410fc270 	.word	0x410fc270
 800611c:	e000e400 	.word	0xe000e400
 8006120:	20000fe0 	.word	0x20000fe0
 8006124:	20000fe4 	.word	0x20000fe4
 8006128:	e000ed20 	.word	0xe000ed20
 800612c:	2000000c 	.word	0x2000000c
 8006130:	e000ef34 	.word	0xe000ef34

08006134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	607b      	str	r3, [r7, #4]
}
 800614c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800614e:	4b0f      	ldr	r3, [pc, #60]	; (800618c <vPortEnterCritical+0x58>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3301      	adds	r3, #1
 8006154:	4a0d      	ldr	r2, [pc, #52]	; (800618c <vPortEnterCritical+0x58>)
 8006156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006158:	4b0c      	ldr	r3, [pc, #48]	; (800618c <vPortEnterCritical+0x58>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d10f      	bne.n	8006180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006160:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <vPortEnterCritical+0x5c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <vPortEnterCritical+0x4c>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	603b      	str	r3, [r7, #0]
}
 800617c:	bf00      	nop
 800617e:	e7fe      	b.n	800617e <vPortEnterCritical+0x4a>
	}
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	2000000c 	.word	0x2000000c
 8006190:	e000ed04 	.word	0xe000ed04

08006194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800619a:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <vPortExitCritical+0x50>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10a      	bne.n	80061b8 <vPortExitCritical+0x24>
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	607b      	str	r3, [r7, #4]
}
 80061b4:	bf00      	nop
 80061b6:	e7fe      	b.n	80061b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <vPortExitCritical+0x50>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3b01      	subs	r3, #1
 80061be:	4a09      	ldr	r2, [pc, #36]	; (80061e4 <vPortExitCritical+0x50>)
 80061c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061c2:	4b08      	ldr	r3, [pc, #32]	; (80061e4 <vPortExitCritical+0x50>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d105      	bne.n	80061d6 <vPortExitCritical+0x42>
 80061ca:	2300      	movs	r3, #0
 80061cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	f383 8811 	msr	BASEPRI, r3
}
 80061d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	2000000c 	.word	0x2000000c
	...

080061f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061f0:	f3ef 8009 	mrs	r0, PSP
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	4b15      	ldr	r3, [pc, #84]	; (8006250 <pxCurrentTCBConst>)
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	f01e 0f10 	tst.w	lr, #16
 8006200:	bf08      	it	eq
 8006202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620a:	6010      	str	r0, [r2, #0]
 800620c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006214:	f380 8811 	msr	BASEPRI, r0
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f7fe ffc2 	bl	80051a8 <vTaskSwitchContext>
 8006224:	f04f 0000 	mov.w	r0, #0
 8006228:	f380 8811 	msr	BASEPRI, r0
 800622c:	bc09      	pop	{r0, r3}
 800622e:	6819      	ldr	r1, [r3, #0]
 8006230:	6808      	ldr	r0, [r1, #0]
 8006232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006236:	f01e 0f10 	tst.w	lr, #16
 800623a:	bf08      	it	eq
 800623c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006240:	f380 8809 	msr	PSP, r0
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	f3af 8000 	nop.w

08006250 <pxCurrentTCBConst>:
 8006250:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop

08006258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	607b      	str	r3, [r7, #4]
}
 8006270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006272:	f7fe fedf 	bl	8005034 <xTaskIncrementTick>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800627c:	4b06      	ldr	r3, [pc, #24]	; (8006298 <xPortSysTickHandler+0x40>)
 800627e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	2300      	movs	r3, #0
 8006286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	f383 8811 	msr	BASEPRI, r3
}
 800628e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006290:	bf00      	nop
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	e000ed04 	.word	0xe000ed04

0800629c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062a0:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <vPortSetupTimerInterrupt+0x34>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062a6:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <vPortSetupTimerInterrupt+0x38>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062ac:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <vPortSetupTimerInterrupt+0x3c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <vPortSetupTimerInterrupt+0x40>)
 80062b2:	fba2 2303 	umull	r2, r3, r2, r3
 80062b6:	099b      	lsrs	r3, r3, #6
 80062b8:	4a09      	ldr	r2, [pc, #36]	; (80062e0 <vPortSetupTimerInterrupt+0x44>)
 80062ba:	3b01      	subs	r3, #1
 80062bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062be:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <vPortSetupTimerInterrupt+0x34>)
 80062c0:	2207      	movs	r2, #7
 80062c2:	601a      	str	r2, [r3, #0]
}
 80062c4:	bf00      	nop
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	e000e010 	.word	0xe000e010
 80062d4:	e000e018 	.word	0xe000e018
 80062d8:	20000000 	.word	0x20000000
 80062dc:	10624dd3 	.word	0x10624dd3
 80062e0:	e000e014 	.word	0xe000e014

080062e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80062f4 <vPortEnableVFP+0x10>
 80062e8:	6801      	ldr	r1, [r0, #0]
 80062ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062ee:	6001      	str	r1, [r0, #0]
 80062f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062f2:	bf00      	nop
 80062f4:	e000ed88 	.word	0xe000ed88

080062f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062fe:	f3ef 8305 	mrs	r3, IPSR
 8006302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b0f      	cmp	r3, #15
 8006308:	d914      	bls.n	8006334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800630a:	4a17      	ldr	r2, [pc, #92]	; (8006368 <vPortValidateInterruptPriority+0x70>)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006314:	4b15      	ldr	r3, [pc, #84]	; (800636c <vPortValidateInterruptPriority+0x74>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	7afa      	ldrb	r2, [r7, #11]
 800631a:	429a      	cmp	r2, r3
 800631c:	d20a      	bcs.n	8006334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	607b      	str	r3, [r7, #4]
}
 8006330:	bf00      	nop
 8006332:	e7fe      	b.n	8006332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006334:	4b0e      	ldr	r3, [pc, #56]	; (8006370 <vPortValidateInterruptPriority+0x78>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800633c:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <vPortValidateInterruptPriority+0x7c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	429a      	cmp	r2, r3
 8006342:	d90a      	bls.n	800635a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	603b      	str	r3, [r7, #0]
}
 8006356:	bf00      	nop
 8006358:	e7fe      	b.n	8006358 <vPortValidateInterruptPriority+0x60>
	}
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	e000e3f0 	.word	0xe000e3f0
 800636c:	20000fe0 	.word	0x20000fe0
 8006370:	e000ed0c 	.word	0xe000ed0c
 8006374:	20000fe4 	.word	0x20000fe4

08006378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08a      	sub	sp, #40	; 0x28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006380:	2300      	movs	r3, #0
 8006382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006384:	f7fe fd9a 	bl	8004ebc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006388:	4b5b      	ldr	r3, [pc, #364]	; (80064f8 <pvPortMalloc+0x180>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006390:	f000 f920 	bl	80065d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006394:	4b59      	ldr	r3, [pc, #356]	; (80064fc <pvPortMalloc+0x184>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4013      	ands	r3, r2
 800639c:	2b00      	cmp	r3, #0
 800639e:	f040 8093 	bne.w	80064c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d01d      	beq.n	80063e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80063a8:	2208      	movs	r2, #8
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4413      	add	r3, r2
 80063ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d014      	beq.n	80063e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f023 0307 	bic.w	r3, r3, #7
 80063c0:	3308      	adds	r3, #8
 80063c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <pvPortMalloc+0x6c>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	617b      	str	r3, [r7, #20]
}
 80063e0:	bf00      	nop
 80063e2:	e7fe      	b.n	80063e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d06e      	beq.n	80064c8 <pvPortMalloc+0x150>
 80063ea:	4b45      	ldr	r3, [pc, #276]	; (8006500 <pvPortMalloc+0x188>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d869      	bhi.n	80064c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063f4:	4b43      	ldr	r3, [pc, #268]	; (8006504 <pvPortMalloc+0x18c>)
 80063f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063f8:	4b42      	ldr	r3, [pc, #264]	; (8006504 <pvPortMalloc+0x18c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063fe:	e004      	b.n	800640a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	429a      	cmp	r2, r3
 8006412:	d903      	bls.n	800641c <pvPortMalloc+0xa4>
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1f1      	bne.n	8006400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800641c:	4b36      	ldr	r3, [pc, #216]	; (80064f8 <pvPortMalloc+0x180>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006422:	429a      	cmp	r2, r3
 8006424:	d050      	beq.n	80064c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2208      	movs	r2, #8
 800642c:	4413      	add	r3, r2
 800642e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	1ad2      	subs	r2, r2, r3
 8006440:	2308      	movs	r3, #8
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	429a      	cmp	r2, r3
 8006446:	d91f      	bls.n	8006488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4413      	add	r3, r2
 800644e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <pvPortMalloc+0xf8>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	613b      	str	r3, [r7, #16]
}
 800646c:	bf00      	nop
 800646e:	e7fe      	b.n	800646e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	1ad2      	subs	r2, r2, r3
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006482:	69b8      	ldr	r0, [r7, #24]
 8006484:	f000 f908 	bl	8006698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006488:	4b1d      	ldr	r3, [pc, #116]	; (8006500 <pvPortMalloc+0x188>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	4a1b      	ldr	r2, [pc, #108]	; (8006500 <pvPortMalloc+0x188>)
 8006494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006496:	4b1a      	ldr	r3, [pc, #104]	; (8006500 <pvPortMalloc+0x188>)
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	4b1b      	ldr	r3, [pc, #108]	; (8006508 <pvPortMalloc+0x190>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d203      	bcs.n	80064aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064a2:	4b17      	ldr	r3, [pc, #92]	; (8006500 <pvPortMalloc+0x188>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a18      	ldr	r2, [pc, #96]	; (8006508 <pvPortMalloc+0x190>)
 80064a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	4b13      	ldr	r3, [pc, #76]	; (80064fc <pvPortMalloc+0x184>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	431a      	orrs	r2, r3
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80064be:	4b13      	ldr	r3, [pc, #76]	; (800650c <pvPortMalloc+0x194>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3301      	adds	r3, #1
 80064c4:	4a11      	ldr	r2, [pc, #68]	; (800650c <pvPortMalloc+0x194>)
 80064c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064c8:	f7fe fd06 	bl	8004ed8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <pvPortMalloc+0x174>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	60fb      	str	r3, [r7, #12]
}
 80064e8:	bf00      	nop
 80064ea:	e7fe      	b.n	80064ea <pvPortMalloc+0x172>
	return pvReturn;
 80064ec:	69fb      	ldr	r3, [r7, #28]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3728      	adds	r7, #40	; 0x28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20004bf0 	.word	0x20004bf0
 80064fc:	20004c04 	.word	0x20004c04
 8006500:	20004bf4 	.word	0x20004bf4
 8006504:	20004be8 	.word	0x20004be8
 8006508:	20004bf8 	.word	0x20004bf8
 800650c:	20004bfc 	.word	0x20004bfc

08006510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d04d      	beq.n	80065be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006522:	2308      	movs	r3, #8
 8006524:	425b      	negs	r3, r3
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4413      	add	r3, r2
 800652a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	4b24      	ldr	r3, [pc, #144]	; (80065c8 <vPortFree+0xb8>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4013      	ands	r3, r2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <vPortFree+0x44>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	60fb      	str	r3, [r7, #12]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00a      	beq.n	8006572 <vPortFree+0x62>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	60bb      	str	r3, [r7, #8]
}
 800656e:	bf00      	nop
 8006570:	e7fe      	b.n	8006570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <vPortFree+0xb8>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4013      	ands	r3, r2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d01e      	beq.n	80065be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d11a      	bne.n	80065be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	4b0e      	ldr	r3, [pc, #56]	; (80065c8 <vPortFree+0xb8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	43db      	mvns	r3, r3
 8006592:	401a      	ands	r2, r3
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006598:	f7fe fc90 	bl	8004ebc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	4b0a      	ldr	r3, [pc, #40]	; (80065cc <vPortFree+0xbc>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4413      	add	r3, r2
 80065a6:	4a09      	ldr	r2, [pc, #36]	; (80065cc <vPortFree+0xbc>)
 80065a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065aa:	6938      	ldr	r0, [r7, #16]
 80065ac:	f000 f874 	bl	8006698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <vPortFree+0xc0>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3301      	adds	r3, #1
 80065b6:	4a06      	ldr	r2, [pc, #24]	; (80065d0 <vPortFree+0xc0>)
 80065b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80065ba:	f7fe fc8d 	bl	8004ed8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065be:	bf00      	nop
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20004c04 	.word	0x20004c04
 80065cc:	20004bf4 	.word	0x20004bf4
 80065d0:	20004c00 	.word	0x20004c00

080065d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80065de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065e0:	4b27      	ldr	r3, [pc, #156]	; (8006680 <prvHeapInit+0xac>)
 80065e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00c      	beq.n	8006608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3307      	adds	r3, #7
 80065f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0307 	bic.w	r3, r3, #7
 80065fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	4a1f      	ldr	r2, [pc, #124]	; (8006680 <prvHeapInit+0xac>)
 8006604:	4413      	add	r3, r2
 8006606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800660c:	4a1d      	ldr	r2, [pc, #116]	; (8006684 <prvHeapInit+0xb0>)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006612:	4b1c      	ldr	r3, [pc, #112]	; (8006684 <prvHeapInit+0xb0>)
 8006614:	2200      	movs	r2, #0
 8006616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	4413      	add	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006620:	2208      	movs	r2, #8
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	1a9b      	subs	r3, r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0307 	bic.w	r3, r3, #7
 800662e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4a15      	ldr	r2, [pc, #84]	; (8006688 <prvHeapInit+0xb4>)
 8006634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006636:	4b14      	ldr	r3, [pc, #80]	; (8006688 <prvHeapInit+0xb4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2200      	movs	r2, #0
 800663c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800663e:	4b12      	ldr	r3, [pc, #72]	; (8006688 <prvHeapInit+0xb4>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	1ad2      	subs	r2, r2, r3
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006654:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <prvHeapInit+0xb4>)
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	4a0a      	ldr	r2, [pc, #40]	; (800668c <prvHeapInit+0xb8>)
 8006662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	4a09      	ldr	r2, [pc, #36]	; (8006690 <prvHeapInit+0xbc>)
 800666a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800666c:	4b09      	ldr	r3, [pc, #36]	; (8006694 <prvHeapInit+0xc0>)
 800666e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006672:	601a      	str	r2, [r3, #0]
}
 8006674:	bf00      	nop
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	20000fe8 	.word	0x20000fe8
 8006684:	20004be8 	.word	0x20004be8
 8006688:	20004bf0 	.word	0x20004bf0
 800668c:	20004bf8 	.word	0x20004bf8
 8006690:	20004bf4 	.word	0x20004bf4
 8006694:	20004c04 	.word	0x20004c04

08006698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066a0:	4b28      	ldr	r3, [pc, #160]	; (8006744 <prvInsertBlockIntoFreeList+0xac>)
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	e002      	b.n	80066ac <prvInsertBlockIntoFreeList+0x14>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d8f7      	bhi.n	80066a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	4413      	add	r3, r2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d108      	bne.n	80066da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	441a      	add	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	441a      	add	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d118      	bne.n	8006720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	4b15      	ldr	r3, [pc, #84]	; (8006748 <prvInsertBlockIntoFreeList+0xb0>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d00d      	beq.n	8006716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	441a      	add	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	e008      	b.n	8006728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006716:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <prvInsertBlockIntoFreeList+0xb0>)
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	e003      	b.n	8006728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	429a      	cmp	r2, r3
 800672e:	d002      	beq.n	8006736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006736:	bf00      	nop
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	20004be8 	.word	0x20004be8
 8006748:	20004bf0 	.word	0x20004bf0

0800674c <__errno>:
 800674c:	4b01      	ldr	r3, [pc, #4]	; (8006754 <__errno+0x8>)
 800674e:	6818      	ldr	r0, [r3, #0]
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	20000010 	.word	0x20000010

08006758 <__libc_init_array>:
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	4d0d      	ldr	r5, [pc, #52]	; (8006790 <__libc_init_array+0x38>)
 800675c:	4c0d      	ldr	r4, [pc, #52]	; (8006794 <__libc_init_array+0x3c>)
 800675e:	1b64      	subs	r4, r4, r5
 8006760:	10a4      	asrs	r4, r4, #2
 8006762:	2600      	movs	r6, #0
 8006764:	42a6      	cmp	r6, r4
 8006766:	d109      	bne.n	800677c <__libc_init_array+0x24>
 8006768:	4d0b      	ldr	r5, [pc, #44]	; (8006798 <__libc_init_array+0x40>)
 800676a:	4c0c      	ldr	r4, [pc, #48]	; (800679c <__libc_init_array+0x44>)
 800676c:	f004 fc48 	bl	800b000 <_init>
 8006770:	1b64      	subs	r4, r4, r5
 8006772:	10a4      	asrs	r4, r4, #2
 8006774:	2600      	movs	r6, #0
 8006776:	42a6      	cmp	r6, r4
 8006778:	d105      	bne.n	8006786 <__libc_init_array+0x2e>
 800677a:	bd70      	pop	{r4, r5, r6, pc}
 800677c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006780:	4798      	blx	r3
 8006782:	3601      	adds	r6, #1
 8006784:	e7ee      	b.n	8006764 <__libc_init_array+0xc>
 8006786:	f855 3b04 	ldr.w	r3, [r5], #4
 800678a:	4798      	blx	r3
 800678c:	3601      	adds	r6, #1
 800678e:	e7f2      	b.n	8006776 <__libc_init_array+0x1e>
 8006790:	0800b534 	.word	0x0800b534
 8006794:	0800b534 	.word	0x0800b534
 8006798:	0800b534 	.word	0x0800b534
 800679c:	0800b538 	.word	0x0800b538

080067a0 <memcpy>:
 80067a0:	440a      	add	r2, r1
 80067a2:	4291      	cmp	r1, r2
 80067a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80067a8:	d100      	bne.n	80067ac <memcpy+0xc>
 80067aa:	4770      	bx	lr
 80067ac:	b510      	push	{r4, lr}
 80067ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067b6:	4291      	cmp	r1, r2
 80067b8:	d1f9      	bne.n	80067ae <memcpy+0xe>
 80067ba:	bd10      	pop	{r4, pc}

080067bc <memset>:
 80067bc:	4402      	add	r2, r0
 80067be:	4603      	mov	r3, r0
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d100      	bne.n	80067c6 <memset+0xa>
 80067c4:	4770      	bx	lr
 80067c6:	f803 1b01 	strb.w	r1, [r3], #1
 80067ca:	e7f9      	b.n	80067c0 <memset+0x4>

080067cc <__cvt>:
 80067cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067d0:	ec55 4b10 	vmov	r4, r5, d0
 80067d4:	2d00      	cmp	r5, #0
 80067d6:	460e      	mov	r6, r1
 80067d8:	4619      	mov	r1, r3
 80067da:	462b      	mov	r3, r5
 80067dc:	bfbb      	ittet	lt
 80067de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80067e2:	461d      	movlt	r5, r3
 80067e4:	2300      	movge	r3, #0
 80067e6:	232d      	movlt	r3, #45	; 0x2d
 80067e8:	700b      	strb	r3, [r1, #0]
 80067ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80067f0:	4691      	mov	r9, r2
 80067f2:	f023 0820 	bic.w	r8, r3, #32
 80067f6:	bfbc      	itt	lt
 80067f8:	4622      	movlt	r2, r4
 80067fa:	4614      	movlt	r4, r2
 80067fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006800:	d005      	beq.n	800680e <__cvt+0x42>
 8006802:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006806:	d100      	bne.n	800680a <__cvt+0x3e>
 8006808:	3601      	adds	r6, #1
 800680a:	2102      	movs	r1, #2
 800680c:	e000      	b.n	8006810 <__cvt+0x44>
 800680e:	2103      	movs	r1, #3
 8006810:	ab03      	add	r3, sp, #12
 8006812:	9301      	str	r3, [sp, #4]
 8006814:	ab02      	add	r3, sp, #8
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	ec45 4b10 	vmov	d0, r4, r5
 800681c:	4653      	mov	r3, sl
 800681e:	4632      	mov	r2, r6
 8006820:	f001 fdb6 	bl	8008390 <_dtoa_r>
 8006824:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006828:	4607      	mov	r7, r0
 800682a:	d102      	bne.n	8006832 <__cvt+0x66>
 800682c:	f019 0f01 	tst.w	r9, #1
 8006830:	d022      	beq.n	8006878 <__cvt+0xac>
 8006832:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006836:	eb07 0906 	add.w	r9, r7, r6
 800683a:	d110      	bne.n	800685e <__cvt+0x92>
 800683c:	783b      	ldrb	r3, [r7, #0]
 800683e:	2b30      	cmp	r3, #48	; 0x30
 8006840:	d10a      	bne.n	8006858 <__cvt+0x8c>
 8006842:	2200      	movs	r2, #0
 8006844:	2300      	movs	r3, #0
 8006846:	4620      	mov	r0, r4
 8006848:	4629      	mov	r1, r5
 800684a:	f7fa f93d 	bl	8000ac8 <__aeabi_dcmpeq>
 800684e:	b918      	cbnz	r0, 8006858 <__cvt+0x8c>
 8006850:	f1c6 0601 	rsb	r6, r6, #1
 8006854:	f8ca 6000 	str.w	r6, [sl]
 8006858:	f8da 3000 	ldr.w	r3, [sl]
 800685c:	4499      	add	r9, r3
 800685e:	2200      	movs	r2, #0
 8006860:	2300      	movs	r3, #0
 8006862:	4620      	mov	r0, r4
 8006864:	4629      	mov	r1, r5
 8006866:	f7fa f92f 	bl	8000ac8 <__aeabi_dcmpeq>
 800686a:	b108      	cbz	r0, 8006870 <__cvt+0xa4>
 800686c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006870:	2230      	movs	r2, #48	; 0x30
 8006872:	9b03      	ldr	r3, [sp, #12]
 8006874:	454b      	cmp	r3, r9
 8006876:	d307      	bcc.n	8006888 <__cvt+0xbc>
 8006878:	9b03      	ldr	r3, [sp, #12]
 800687a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800687c:	1bdb      	subs	r3, r3, r7
 800687e:	4638      	mov	r0, r7
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	b004      	add	sp, #16
 8006884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006888:	1c59      	adds	r1, r3, #1
 800688a:	9103      	str	r1, [sp, #12]
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	e7f0      	b.n	8006872 <__cvt+0xa6>

08006890 <__exponent>:
 8006890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006892:	4603      	mov	r3, r0
 8006894:	2900      	cmp	r1, #0
 8006896:	bfb8      	it	lt
 8006898:	4249      	neglt	r1, r1
 800689a:	f803 2b02 	strb.w	r2, [r3], #2
 800689e:	bfb4      	ite	lt
 80068a0:	222d      	movlt	r2, #45	; 0x2d
 80068a2:	222b      	movge	r2, #43	; 0x2b
 80068a4:	2909      	cmp	r1, #9
 80068a6:	7042      	strb	r2, [r0, #1]
 80068a8:	dd2a      	ble.n	8006900 <__exponent+0x70>
 80068aa:	f10d 0407 	add.w	r4, sp, #7
 80068ae:	46a4      	mov	ip, r4
 80068b0:	270a      	movs	r7, #10
 80068b2:	46a6      	mov	lr, r4
 80068b4:	460a      	mov	r2, r1
 80068b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80068ba:	fb07 1516 	mls	r5, r7, r6, r1
 80068be:	3530      	adds	r5, #48	; 0x30
 80068c0:	2a63      	cmp	r2, #99	; 0x63
 80068c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80068c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80068ca:	4631      	mov	r1, r6
 80068cc:	dcf1      	bgt.n	80068b2 <__exponent+0x22>
 80068ce:	3130      	adds	r1, #48	; 0x30
 80068d0:	f1ae 0502 	sub.w	r5, lr, #2
 80068d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80068d8:	1c44      	adds	r4, r0, #1
 80068da:	4629      	mov	r1, r5
 80068dc:	4561      	cmp	r1, ip
 80068de:	d30a      	bcc.n	80068f6 <__exponent+0x66>
 80068e0:	f10d 0209 	add.w	r2, sp, #9
 80068e4:	eba2 020e 	sub.w	r2, r2, lr
 80068e8:	4565      	cmp	r5, ip
 80068ea:	bf88      	it	hi
 80068ec:	2200      	movhi	r2, #0
 80068ee:	4413      	add	r3, r2
 80068f0:	1a18      	subs	r0, r3, r0
 80068f2:	b003      	add	sp, #12
 80068f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80068fe:	e7ed      	b.n	80068dc <__exponent+0x4c>
 8006900:	2330      	movs	r3, #48	; 0x30
 8006902:	3130      	adds	r1, #48	; 0x30
 8006904:	7083      	strb	r3, [r0, #2]
 8006906:	70c1      	strb	r1, [r0, #3]
 8006908:	1d03      	adds	r3, r0, #4
 800690a:	e7f1      	b.n	80068f0 <__exponent+0x60>

0800690c <_printf_float>:
 800690c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006910:	ed2d 8b02 	vpush	{d8}
 8006914:	b08d      	sub	sp, #52	; 0x34
 8006916:	460c      	mov	r4, r1
 8006918:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800691c:	4616      	mov	r6, r2
 800691e:	461f      	mov	r7, r3
 8006920:	4605      	mov	r5, r0
 8006922:	f002 fe91 	bl	8009648 <_localeconv_r>
 8006926:	f8d0 a000 	ldr.w	sl, [r0]
 800692a:	4650      	mov	r0, sl
 800692c:	f7f9 fc50 	bl	80001d0 <strlen>
 8006930:	2300      	movs	r3, #0
 8006932:	930a      	str	r3, [sp, #40]	; 0x28
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	9305      	str	r3, [sp, #20]
 8006938:	f8d8 3000 	ldr.w	r3, [r8]
 800693c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006940:	3307      	adds	r3, #7
 8006942:	f023 0307 	bic.w	r3, r3, #7
 8006946:	f103 0208 	add.w	r2, r3, #8
 800694a:	f8c8 2000 	str.w	r2, [r8]
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006956:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800695a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800695e:	9307      	str	r3, [sp, #28]
 8006960:	f8cd 8018 	str.w	r8, [sp, #24]
 8006964:	ee08 0a10 	vmov	s16, r0
 8006968:	4b9f      	ldr	r3, [pc, #636]	; (8006be8 <_printf_float+0x2dc>)
 800696a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800696e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006972:	f7fa f8db 	bl	8000b2c <__aeabi_dcmpun>
 8006976:	bb88      	cbnz	r0, 80069dc <_printf_float+0xd0>
 8006978:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800697c:	4b9a      	ldr	r3, [pc, #616]	; (8006be8 <_printf_float+0x2dc>)
 800697e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006982:	f7fa f8b5 	bl	8000af0 <__aeabi_dcmple>
 8006986:	bb48      	cbnz	r0, 80069dc <_printf_float+0xd0>
 8006988:	2200      	movs	r2, #0
 800698a:	2300      	movs	r3, #0
 800698c:	4640      	mov	r0, r8
 800698e:	4649      	mov	r1, r9
 8006990:	f7fa f8a4 	bl	8000adc <__aeabi_dcmplt>
 8006994:	b110      	cbz	r0, 800699c <_printf_float+0x90>
 8006996:	232d      	movs	r3, #45	; 0x2d
 8006998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800699c:	4b93      	ldr	r3, [pc, #588]	; (8006bec <_printf_float+0x2e0>)
 800699e:	4894      	ldr	r0, [pc, #592]	; (8006bf0 <_printf_float+0x2e4>)
 80069a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80069a4:	bf94      	ite	ls
 80069a6:	4698      	movls	r8, r3
 80069a8:	4680      	movhi	r8, r0
 80069aa:	2303      	movs	r3, #3
 80069ac:	6123      	str	r3, [r4, #16]
 80069ae:	9b05      	ldr	r3, [sp, #20]
 80069b0:	f023 0204 	bic.w	r2, r3, #4
 80069b4:	6022      	str	r2, [r4, #0]
 80069b6:	f04f 0900 	mov.w	r9, #0
 80069ba:	9700      	str	r7, [sp, #0]
 80069bc:	4633      	mov	r3, r6
 80069be:	aa0b      	add	r2, sp, #44	; 0x2c
 80069c0:	4621      	mov	r1, r4
 80069c2:	4628      	mov	r0, r5
 80069c4:	f000 f9d8 	bl	8006d78 <_printf_common>
 80069c8:	3001      	adds	r0, #1
 80069ca:	f040 8090 	bne.w	8006aee <_printf_float+0x1e2>
 80069ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069d2:	b00d      	add	sp, #52	; 0x34
 80069d4:	ecbd 8b02 	vpop	{d8}
 80069d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069dc:	4642      	mov	r2, r8
 80069de:	464b      	mov	r3, r9
 80069e0:	4640      	mov	r0, r8
 80069e2:	4649      	mov	r1, r9
 80069e4:	f7fa f8a2 	bl	8000b2c <__aeabi_dcmpun>
 80069e8:	b140      	cbz	r0, 80069fc <_printf_float+0xf0>
 80069ea:	464b      	mov	r3, r9
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	bfbc      	itt	lt
 80069f0:	232d      	movlt	r3, #45	; 0x2d
 80069f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80069f6:	487f      	ldr	r0, [pc, #508]	; (8006bf4 <_printf_float+0x2e8>)
 80069f8:	4b7f      	ldr	r3, [pc, #508]	; (8006bf8 <_printf_float+0x2ec>)
 80069fa:	e7d1      	b.n	80069a0 <_printf_float+0x94>
 80069fc:	6863      	ldr	r3, [r4, #4]
 80069fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a02:	9206      	str	r2, [sp, #24]
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	d13f      	bne.n	8006a88 <_printf_float+0x17c>
 8006a08:	2306      	movs	r3, #6
 8006a0a:	6063      	str	r3, [r4, #4]
 8006a0c:	9b05      	ldr	r3, [sp, #20]
 8006a0e:	6861      	ldr	r1, [r4, #4]
 8006a10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a14:	2300      	movs	r3, #0
 8006a16:	9303      	str	r3, [sp, #12]
 8006a18:	ab0a      	add	r3, sp, #40	; 0x28
 8006a1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a1e:	ab09      	add	r3, sp, #36	; 0x24
 8006a20:	ec49 8b10 	vmov	d0, r8, r9
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	6022      	str	r2, [r4, #0]
 8006a28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	f7ff fecd 	bl	80067cc <__cvt>
 8006a32:	9b06      	ldr	r3, [sp, #24]
 8006a34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a36:	2b47      	cmp	r3, #71	; 0x47
 8006a38:	4680      	mov	r8, r0
 8006a3a:	d108      	bne.n	8006a4e <_printf_float+0x142>
 8006a3c:	1cc8      	adds	r0, r1, #3
 8006a3e:	db02      	blt.n	8006a46 <_printf_float+0x13a>
 8006a40:	6863      	ldr	r3, [r4, #4]
 8006a42:	4299      	cmp	r1, r3
 8006a44:	dd41      	ble.n	8006aca <_printf_float+0x1be>
 8006a46:	f1ab 0b02 	sub.w	fp, fp, #2
 8006a4a:	fa5f fb8b 	uxtb.w	fp, fp
 8006a4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a52:	d820      	bhi.n	8006a96 <_printf_float+0x18a>
 8006a54:	3901      	subs	r1, #1
 8006a56:	465a      	mov	r2, fp
 8006a58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a5c:	9109      	str	r1, [sp, #36]	; 0x24
 8006a5e:	f7ff ff17 	bl	8006890 <__exponent>
 8006a62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a64:	1813      	adds	r3, r2, r0
 8006a66:	2a01      	cmp	r2, #1
 8006a68:	4681      	mov	r9, r0
 8006a6a:	6123      	str	r3, [r4, #16]
 8006a6c:	dc02      	bgt.n	8006a74 <_printf_float+0x168>
 8006a6e:	6822      	ldr	r2, [r4, #0]
 8006a70:	07d2      	lsls	r2, r2, #31
 8006a72:	d501      	bpl.n	8006a78 <_printf_float+0x16c>
 8006a74:	3301      	adds	r3, #1
 8006a76:	6123      	str	r3, [r4, #16]
 8006a78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d09c      	beq.n	80069ba <_printf_float+0xae>
 8006a80:	232d      	movs	r3, #45	; 0x2d
 8006a82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a86:	e798      	b.n	80069ba <_printf_float+0xae>
 8006a88:	9a06      	ldr	r2, [sp, #24]
 8006a8a:	2a47      	cmp	r2, #71	; 0x47
 8006a8c:	d1be      	bne.n	8006a0c <_printf_float+0x100>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1bc      	bne.n	8006a0c <_printf_float+0x100>
 8006a92:	2301      	movs	r3, #1
 8006a94:	e7b9      	b.n	8006a0a <_printf_float+0xfe>
 8006a96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a9a:	d118      	bne.n	8006ace <_printf_float+0x1c2>
 8006a9c:	2900      	cmp	r1, #0
 8006a9e:	6863      	ldr	r3, [r4, #4]
 8006aa0:	dd0b      	ble.n	8006aba <_printf_float+0x1ae>
 8006aa2:	6121      	str	r1, [r4, #16]
 8006aa4:	b913      	cbnz	r3, 8006aac <_printf_float+0x1a0>
 8006aa6:	6822      	ldr	r2, [r4, #0]
 8006aa8:	07d0      	lsls	r0, r2, #31
 8006aaa:	d502      	bpl.n	8006ab2 <_printf_float+0x1a6>
 8006aac:	3301      	adds	r3, #1
 8006aae:	440b      	add	r3, r1
 8006ab0:	6123      	str	r3, [r4, #16]
 8006ab2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ab4:	f04f 0900 	mov.w	r9, #0
 8006ab8:	e7de      	b.n	8006a78 <_printf_float+0x16c>
 8006aba:	b913      	cbnz	r3, 8006ac2 <_printf_float+0x1b6>
 8006abc:	6822      	ldr	r2, [r4, #0]
 8006abe:	07d2      	lsls	r2, r2, #31
 8006ac0:	d501      	bpl.n	8006ac6 <_printf_float+0x1ba>
 8006ac2:	3302      	adds	r3, #2
 8006ac4:	e7f4      	b.n	8006ab0 <_printf_float+0x1a4>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e7f2      	b.n	8006ab0 <_printf_float+0x1a4>
 8006aca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad0:	4299      	cmp	r1, r3
 8006ad2:	db05      	blt.n	8006ae0 <_printf_float+0x1d4>
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	6121      	str	r1, [r4, #16]
 8006ad8:	07d8      	lsls	r0, r3, #31
 8006ada:	d5ea      	bpl.n	8006ab2 <_printf_float+0x1a6>
 8006adc:	1c4b      	adds	r3, r1, #1
 8006ade:	e7e7      	b.n	8006ab0 <_printf_float+0x1a4>
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	bfd4      	ite	le
 8006ae4:	f1c1 0202 	rsble	r2, r1, #2
 8006ae8:	2201      	movgt	r2, #1
 8006aea:	4413      	add	r3, r2
 8006aec:	e7e0      	b.n	8006ab0 <_printf_float+0x1a4>
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	055a      	lsls	r2, r3, #21
 8006af2:	d407      	bmi.n	8006b04 <_printf_float+0x1f8>
 8006af4:	6923      	ldr	r3, [r4, #16]
 8006af6:	4642      	mov	r2, r8
 8006af8:	4631      	mov	r1, r6
 8006afa:	4628      	mov	r0, r5
 8006afc:	47b8      	blx	r7
 8006afe:	3001      	adds	r0, #1
 8006b00:	d12c      	bne.n	8006b5c <_printf_float+0x250>
 8006b02:	e764      	b.n	80069ce <_printf_float+0xc2>
 8006b04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b08:	f240 80e0 	bls.w	8006ccc <_printf_float+0x3c0>
 8006b0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b10:	2200      	movs	r2, #0
 8006b12:	2300      	movs	r3, #0
 8006b14:	f7f9 ffd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d034      	beq.n	8006b86 <_printf_float+0x27a>
 8006b1c:	4a37      	ldr	r2, [pc, #220]	; (8006bfc <_printf_float+0x2f0>)
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4631      	mov	r1, r6
 8006b22:	4628      	mov	r0, r5
 8006b24:	47b8      	blx	r7
 8006b26:	3001      	adds	r0, #1
 8006b28:	f43f af51 	beq.w	80069ce <_printf_float+0xc2>
 8006b2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b30:	429a      	cmp	r2, r3
 8006b32:	db02      	blt.n	8006b3a <_printf_float+0x22e>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	07d8      	lsls	r0, r3, #31
 8006b38:	d510      	bpl.n	8006b5c <_printf_float+0x250>
 8006b3a:	ee18 3a10 	vmov	r3, s16
 8006b3e:	4652      	mov	r2, sl
 8006b40:	4631      	mov	r1, r6
 8006b42:	4628      	mov	r0, r5
 8006b44:	47b8      	blx	r7
 8006b46:	3001      	adds	r0, #1
 8006b48:	f43f af41 	beq.w	80069ce <_printf_float+0xc2>
 8006b4c:	f04f 0800 	mov.w	r8, #0
 8006b50:	f104 091a 	add.w	r9, r4, #26
 8006b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b56:	3b01      	subs	r3, #1
 8006b58:	4543      	cmp	r3, r8
 8006b5a:	dc09      	bgt.n	8006b70 <_printf_float+0x264>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	079b      	lsls	r3, r3, #30
 8006b60:	f100 8105 	bmi.w	8006d6e <_printf_float+0x462>
 8006b64:	68e0      	ldr	r0, [r4, #12]
 8006b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b68:	4298      	cmp	r0, r3
 8006b6a:	bfb8      	it	lt
 8006b6c:	4618      	movlt	r0, r3
 8006b6e:	e730      	b.n	80069d2 <_printf_float+0xc6>
 8006b70:	2301      	movs	r3, #1
 8006b72:	464a      	mov	r2, r9
 8006b74:	4631      	mov	r1, r6
 8006b76:	4628      	mov	r0, r5
 8006b78:	47b8      	blx	r7
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	f43f af27 	beq.w	80069ce <_printf_float+0xc2>
 8006b80:	f108 0801 	add.w	r8, r8, #1
 8006b84:	e7e6      	b.n	8006b54 <_printf_float+0x248>
 8006b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	dc39      	bgt.n	8006c00 <_printf_float+0x2f4>
 8006b8c:	4a1b      	ldr	r2, [pc, #108]	; (8006bfc <_printf_float+0x2f0>)
 8006b8e:	2301      	movs	r3, #1
 8006b90:	4631      	mov	r1, r6
 8006b92:	4628      	mov	r0, r5
 8006b94:	47b8      	blx	r7
 8006b96:	3001      	adds	r0, #1
 8006b98:	f43f af19 	beq.w	80069ce <_printf_float+0xc2>
 8006b9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	d102      	bne.n	8006baa <_printf_float+0x29e>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	07d9      	lsls	r1, r3, #31
 8006ba8:	d5d8      	bpl.n	8006b5c <_printf_float+0x250>
 8006baa:	ee18 3a10 	vmov	r3, s16
 8006bae:	4652      	mov	r2, sl
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	47b8      	blx	r7
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	f43f af09 	beq.w	80069ce <_printf_float+0xc2>
 8006bbc:	f04f 0900 	mov.w	r9, #0
 8006bc0:	f104 0a1a 	add.w	sl, r4, #26
 8006bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc6:	425b      	negs	r3, r3
 8006bc8:	454b      	cmp	r3, r9
 8006bca:	dc01      	bgt.n	8006bd0 <_printf_float+0x2c4>
 8006bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bce:	e792      	b.n	8006af6 <_printf_float+0x1ea>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	4652      	mov	r2, sl
 8006bd4:	4631      	mov	r1, r6
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	47b8      	blx	r7
 8006bda:	3001      	adds	r0, #1
 8006bdc:	f43f aef7 	beq.w	80069ce <_printf_float+0xc2>
 8006be0:	f109 0901 	add.w	r9, r9, #1
 8006be4:	e7ee      	b.n	8006bc4 <_printf_float+0x2b8>
 8006be6:	bf00      	nop
 8006be8:	7fefffff 	.word	0x7fefffff
 8006bec:	0800b07c 	.word	0x0800b07c
 8006bf0:	0800b080 	.word	0x0800b080
 8006bf4:	0800b088 	.word	0x0800b088
 8006bf8:	0800b084 	.word	0x0800b084
 8006bfc:	0800b08c 	.word	0x0800b08c
 8006c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c04:	429a      	cmp	r2, r3
 8006c06:	bfa8      	it	ge
 8006c08:	461a      	movge	r2, r3
 8006c0a:	2a00      	cmp	r2, #0
 8006c0c:	4691      	mov	r9, r2
 8006c0e:	dc37      	bgt.n	8006c80 <_printf_float+0x374>
 8006c10:	f04f 0b00 	mov.w	fp, #0
 8006c14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c18:	f104 021a 	add.w	r2, r4, #26
 8006c1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c1e:	9305      	str	r3, [sp, #20]
 8006c20:	eba3 0309 	sub.w	r3, r3, r9
 8006c24:	455b      	cmp	r3, fp
 8006c26:	dc33      	bgt.n	8006c90 <_printf_float+0x384>
 8006c28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	db3b      	blt.n	8006ca8 <_printf_float+0x39c>
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	07da      	lsls	r2, r3, #31
 8006c34:	d438      	bmi.n	8006ca8 <_printf_float+0x39c>
 8006c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c38:	9b05      	ldr	r3, [sp, #20]
 8006c3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	eba2 0901 	sub.w	r9, r2, r1
 8006c42:	4599      	cmp	r9, r3
 8006c44:	bfa8      	it	ge
 8006c46:	4699      	movge	r9, r3
 8006c48:	f1b9 0f00 	cmp.w	r9, #0
 8006c4c:	dc35      	bgt.n	8006cba <_printf_float+0x3ae>
 8006c4e:	f04f 0800 	mov.w	r8, #0
 8006c52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c56:	f104 0a1a 	add.w	sl, r4, #26
 8006c5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c5e:	1a9b      	subs	r3, r3, r2
 8006c60:	eba3 0309 	sub.w	r3, r3, r9
 8006c64:	4543      	cmp	r3, r8
 8006c66:	f77f af79 	ble.w	8006b5c <_printf_float+0x250>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	4652      	mov	r2, sl
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4628      	mov	r0, r5
 8006c72:	47b8      	blx	r7
 8006c74:	3001      	adds	r0, #1
 8006c76:	f43f aeaa 	beq.w	80069ce <_printf_float+0xc2>
 8006c7a:	f108 0801 	add.w	r8, r8, #1
 8006c7e:	e7ec      	b.n	8006c5a <_printf_float+0x34e>
 8006c80:	4613      	mov	r3, r2
 8006c82:	4631      	mov	r1, r6
 8006c84:	4642      	mov	r2, r8
 8006c86:	4628      	mov	r0, r5
 8006c88:	47b8      	blx	r7
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	d1c0      	bne.n	8006c10 <_printf_float+0x304>
 8006c8e:	e69e      	b.n	80069ce <_printf_float+0xc2>
 8006c90:	2301      	movs	r3, #1
 8006c92:	4631      	mov	r1, r6
 8006c94:	4628      	mov	r0, r5
 8006c96:	9205      	str	r2, [sp, #20]
 8006c98:	47b8      	blx	r7
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	f43f ae97 	beq.w	80069ce <_printf_float+0xc2>
 8006ca0:	9a05      	ldr	r2, [sp, #20]
 8006ca2:	f10b 0b01 	add.w	fp, fp, #1
 8006ca6:	e7b9      	b.n	8006c1c <_printf_float+0x310>
 8006ca8:	ee18 3a10 	vmov	r3, s16
 8006cac:	4652      	mov	r2, sl
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	47b8      	blx	r7
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d1be      	bne.n	8006c36 <_printf_float+0x32a>
 8006cb8:	e689      	b.n	80069ce <_printf_float+0xc2>
 8006cba:	9a05      	ldr	r2, [sp, #20]
 8006cbc:	464b      	mov	r3, r9
 8006cbe:	4442      	add	r2, r8
 8006cc0:	4631      	mov	r1, r6
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	47b8      	blx	r7
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	d1c1      	bne.n	8006c4e <_printf_float+0x342>
 8006cca:	e680      	b.n	80069ce <_printf_float+0xc2>
 8006ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cce:	2a01      	cmp	r2, #1
 8006cd0:	dc01      	bgt.n	8006cd6 <_printf_float+0x3ca>
 8006cd2:	07db      	lsls	r3, r3, #31
 8006cd4:	d538      	bpl.n	8006d48 <_printf_float+0x43c>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	4642      	mov	r2, r8
 8006cda:	4631      	mov	r1, r6
 8006cdc:	4628      	mov	r0, r5
 8006cde:	47b8      	blx	r7
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	f43f ae74 	beq.w	80069ce <_printf_float+0xc2>
 8006ce6:	ee18 3a10 	vmov	r3, s16
 8006cea:	4652      	mov	r2, sl
 8006cec:	4631      	mov	r1, r6
 8006cee:	4628      	mov	r0, r5
 8006cf0:	47b8      	blx	r7
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	f43f ae6b 	beq.w	80069ce <_printf_float+0xc2>
 8006cf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f7f9 fee2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d04:	b9d8      	cbnz	r0, 8006d3e <_printf_float+0x432>
 8006d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d08:	f108 0201 	add.w	r2, r8, #1
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	4631      	mov	r1, r6
 8006d10:	4628      	mov	r0, r5
 8006d12:	47b8      	blx	r7
 8006d14:	3001      	adds	r0, #1
 8006d16:	d10e      	bne.n	8006d36 <_printf_float+0x42a>
 8006d18:	e659      	b.n	80069ce <_printf_float+0xc2>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	4652      	mov	r2, sl
 8006d1e:	4631      	mov	r1, r6
 8006d20:	4628      	mov	r0, r5
 8006d22:	47b8      	blx	r7
 8006d24:	3001      	adds	r0, #1
 8006d26:	f43f ae52 	beq.w	80069ce <_printf_float+0xc2>
 8006d2a:	f108 0801 	add.w	r8, r8, #1
 8006d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d30:	3b01      	subs	r3, #1
 8006d32:	4543      	cmp	r3, r8
 8006d34:	dcf1      	bgt.n	8006d1a <_printf_float+0x40e>
 8006d36:	464b      	mov	r3, r9
 8006d38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d3c:	e6dc      	b.n	8006af8 <_printf_float+0x1ec>
 8006d3e:	f04f 0800 	mov.w	r8, #0
 8006d42:	f104 0a1a 	add.w	sl, r4, #26
 8006d46:	e7f2      	b.n	8006d2e <_printf_float+0x422>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	4642      	mov	r2, r8
 8006d4c:	e7df      	b.n	8006d0e <_printf_float+0x402>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	464a      	mov	r2, r9
 8006d52:	4631      	mov	r1, r6
 8006d54:	4628      	mov	r0, r5
 8006d56:	47b8      	blx	r7
 8006d58:	3001      	adds	r0, #1
 8006d5a:	f43f ae38 	beq.w	80069ce <_printf_float+0xc2>
 8006d5e:	f108 0801 	add.w	r8, r8, #1
 8006d62:	68e3      	ldr	r3, [r4, #12]
 8006d64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d66:	1a5b      	subs	r3, r3, r1
 8006d68:	4543      	cmp	r3, r8
 8006d6a:	dcf0      	bgt.n	8006d4e <_printf_float+0x442>
 8006d6c:	e6fa      	b.n	8006b64 <_printf_float+0x258>
 8006d6e:	f04f 0800 	mov.w	r8, #0
 8006d72:	f104 0919 	add.w	r9, r4, #25
 8006d76:	e7f4      	b.n	8006d62 <_printf_float+0x456>

08006d78 <_printf_common>:
 8006d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d7c:	4616      	mov	r6, r2
 8006d7e:	4699      	mov	r9, r3
 8006d80:	688a      	ldr	r2, [r1, #8]
 8006d82:	690b      	ldr	r3, [r1, #16]
 8006d84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	bfb8      	it	lt
 8006d8c:	4613      	movlt	r3, r2
 8006d8e:	6033      	str	r3, [r6, #0]
 8006d90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d94:	4607      	mov	r7, r0
 8006d96:	460c      	mov	r4, r1
 8006d98:	b10a      	cbz	r2, 8006d9e <_printf_common+0x26>
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	6033      	str	r3, [r6, #0]
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	0699      	lsls	r1, r3, #26
 8006da2:	bf42      	ittt	mi
 8006da4:	6833      	ldrmi	r3, [r6, #0]
 8006da6:	3302      	addmi	r3, #2
 8006da8:	6033      	strmi	r3, [r6, #0]
 8006daa:	6825      	ldr	r5, [r4, #0]
 8006dac:	f015 0506 	ands.w	r5, r5, #6
 8006db0:	d106      	bne.n	8006dc0 <_printf_common+0x48>
 8006db2:	f104 0a19 	add.w	sl, r4, #25
 8006db6:	68e3      	ldr	r3, [r4, #12]
 8006db8:	6832      	ldr	r2, [r6, #0]
 8006dba:	1a9b      	subs	r3, r3, r2
 8006dbc:	42ab      	cmp	r3, r5
 8006dbe:	dc26      	bgt.n	8006e0e <_printf_common+0x96>
 8006dc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006dc4:	1e13      	subs	r3, r2, #0
 8006dc6:	6822      	ldr	r2, [r4, #0]
 8006dc8:	bf18      	it	ne
 8006dca:	2301      	movne	r3, #1
 8006dcc:	0692      	lsls	r2, r2, #26
 8006dce:	d42b      	bmi.n	8006e28 <_printf_common+0xb0>
 8006dd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	47c0      	blx	r8
 8006dda:	3001      	adds	r0, #1
 8006ddc:	d01e      	beq.n	8006e1c <_printf_common+0xa4>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	68e5      	ldr	r5, [r4, #12]
 8006de2:	6832      	ldr	r2, [r6, #0]
 8006de4:	f003 0306 	and.w	r3, r3, #6
 8006de8:	2b04      	cmp	r3, #4
 8006dea:	bf08      	it	eq
 8006dec:	1aad      	subeq	r5, r5, r2
 8006dee:	68a3      	ldr	r3, [r4, #8]
 8006df0:	6922      	ldr	r2, [r4, #16]
 8006df2:	bf0c      	ite	eq
 8006df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006df8:	2500      	movne	r5, #0
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	bfc4      	itt	gt
 8006dfe:	1a9b      	subgt	r3, r3, r2
 8006e00:	18ed      	addgt	r5, r5, r3
 8006e02:	2600      	movs	r6, #0
 8006e04:	341a      	adds	r4, #26
 8006e06:	42b5      	cmp	r5, r6
 8006e08:	d11a      	bne.n	8006e40 <_printf_common+0xc8>
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	e008      	b.n	8006e20 <_printf_common+0xa8>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	4652      	mov	r2, sl
 8006e12:	4649      	mov	r1, r9
 8006e14:	4638      	mov	r0, r7
 8006e16:	47c0      	blx	r8
 8006e18:	3001      	adds	r0, #1
 8006e1a:	d103      	bne.n	8006e24 <_printf_common+0xac>
 8006e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e24:	3501      	adds	r5, #1
 8006e26:	e7c6      	b.n	8006db6 <_printf_common+0x3e>
 8006e28:	18e1      	adds	r1, r4, r3
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	2030      	movs	r0, #48	; 0x30
 8006e2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e32:	4422      	add	r2, r4
 8006e34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e3c:	3302      	adds	r3, #2
 8006e3e:	e7c7      	b.n	8006dd0 <_printf_common+0x58>
 8006e40:	2301      	movs	r3, #1
 8006e42:	4622      	mov	r2, r4
 8006e44:	4649      	mov	r1, r9
 8006e46:	4638      	mov	r0, r7
 8006e48:	47c0      	blx	r8
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	d0e6      	beq.n	8006e1c <_printf_common+0xa4>
 8006e4e:	3601      	adds	r6, #1
 8006e50:	e7d9      	b.n	8006e06 <_printf_common+0x8e>
	...

08006e54 <_printf_i>:
 8006e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e58:	460c      	mov	r4, r1
 8006e5a:	4691      	mov	r9, r2
 8006e5c:	7e27      	ldrb	r7, [r4, #24]
 8006e5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e60:	2f78      	cmp	r7, #120	; 0x78
 8006e62:	4680      	mov	r8, r0
 8006e64:	469a      	mov	sl, r3
 8006e66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e6a:	d807      	bhi.n	8006e7c <_printf_i+0x28>
 8006e6c:	2f62      	cmp	r7, #98	; 0x62
 8006e6e:	d80a      	bhi.n	8006e86 <_printf_i+0x32>
 8006e70:	2f00      	cmp	r7, #0
 8006e72:	f000 80d8 	beq.w	8007026 <_printf_i+0x1d2>
 8006e76:	2f58      	cmp	r7, #88	; 0x58
 8006e78:	f000 80a3 	beq.w	8006fc2 <_printf_i+0x16e>
 8006e7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e84:	e03a      	b.n	8006efc <_printf_i+0xa8>
 8006e86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e8a:	2b15      	cmp	r3, #21
 8006e8c:	d8f6      	bhi.n	8006e7c <_printf_i+0x28>
 8006e8e:	a001      	add	r0, pc, #4	; (adr r0, 8006e94 <_printf_i+0x40>)
 8006e90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e94:	08006eed 	.word	0x08006eed
 8006e98:	08006f01 	.word	0x08006f01
 8006e9c:	08006e7d 	.word	0x08006e7d
 8006ea0:	08006e7d 	.word	0x08006e7d
 8006ea4:	08006e7d 	.word	0x08006e7d
 8006ea8:	08006e7d 	.word	0x08006e7d
 8006eac:	08006f01 	.word	0x08006f01
 8006eb0:	08006e7d 	.word	0x08006e7d
 8006eb4:	08006e7d 	.word	0x08006e7d
 8006eb8:	08006e7d 	.word	0x08006e7d
 8006ebc:	08006e7d 	.word	0x08006e7d
 8006ec0:	0800700d 	.word	0x0800700d
 8006ec4:	08006f31 	.word	0x08006f31
 8006ec8:	08006fef 	.word	0x08006fef
 8006ecc:	08006e7d 	.word	0x08006e7d
 8006ed0:	08006e7d 	.word	0x08006e7d
 8006ed4:	0800702f 	.word	0x0800702f
 8006ed8:	08006e7d 	.word	0x08006e7d
 8006edc:	08006f31 	.word	0x08006f31
 8006ee0:	08006e7d 	.word	0x08006e7d
 8006ee4:	08006e7d 	.word	0x08006e7d
 8006ee8:	08006ff7 	.word	0x08006ff7
 8006eec:	680b      	ldr	r3, [r1, #0]
 8006eee:	1d1a      	adds	r2, r3, #4
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	600a      	str	r2, [r1, #0]
 8006ef4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006efc:	2301      	movs	r3, #1
 8006efe:	e0a3      	b.n	8007048 <_printf_i+0x1f4>
 8006f00:	6825      	ldr	r5, [r4, #0]
 8006f02:	6808      	ldr	r0, [r1, #0]
 8006f04:	062e      	lsls	r6, r5, #24
 8006f06:	f100 0304 	add.w	r3, r0, #4
 8006f0a:	d50a      	bpl.n	8006f22 <_printf_i+0xce>
 8006f0c:	6805      	ldr	r5, [r0, #0]
 8006f0e:	600b      	str	r3, [r1, #0]
 8006f10:	2d00      	cmp	r5, #0
 8006f12:	da03      	bge.n	8006f1c <_printf_i+0xc8>
 8006f14:	232d      	movs	r3, #45	; 0x2d
 8006f16:	426d      	negs	r5, r5
 8006f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f1c:	485e      	ldr	r0, [pc, #376]	; (8007098 <_printf_i+0x244>)
 8006f1e:	230a      	movs	r3, #10
 8006f20:	e019      	b.n	8006f56 <_printf_i+0x102>
 8006f22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006f26:	6805      	ldr	r5, [r0, #0]
 8006f28:	600b      	str	r3, [r1, #0]
 8006f2a:	bf18      	it	ne
 8006f2c:	b22d      	sxthne	r5, r5
 8006f2e:	e7ef      	b.n	8006f10 <_printf_i+0xbc>
 8006f30:	680b      	ldr	r3, [r1, #0]
 8006f32:	6825      	ldr	r5, [r4, #0]
 8006f34:	1d18      	adds	r0, r3, #4
 8006f36:	6008      	str	r0, [r1, #0]
 8006f38:	0628      	lsls	r0, r5, #24
 8006f3a:	d501      	bpl.n	8006f40 <_printf_i+0xec>
 8006f3c:	681d      	ldr	r5, [r3, #0]
 8006f3e:	e002      	b.n	8006f46 <_printf_i+0xf2>
 8006f40:	0669      	lsls	r1, r5, #25
 8006f42:	d5fb      	bpl.n	8006f3c <_printf_i+0xe8>
 8006f44:	881d      	ldrh	r5, [r3, #0]
 8006f46:	4854      	ldr	r0, [pc, #336]	; (8007098 <_printf_i+0x244>)
 8006f48:	2f6f      	cmp	r7, #111	; 0x6f
 8006f4a:	bf0c      	ite	eq
 8006f4c:	2308      	moveq	r3, #8
 8006f4e:	230a      	movne	r3, #10
 8006f50:	2100      	movs	r1, #0
 8006f52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f56:	6866      	ldr	r6, [r4, #4]
 8006f58:	60a6      	str	r6, [r4, #8]
 8006f5a:	2e00      	cmp	r6, #0
 8006f5c:	bfa2      	ittt	ge
 8006f5e:	6821      	ldrge	r1, [r4, #0]
 8006f60:	f021 0104 	bicge.w	r1, r1, #4
 8006f64:	6021      	strge	r1, [r4, #0]
 8006f66:	b90d      	cbnz	r5, 8006f6c <_printf_i+0x118>
 8006f68:	2e00      	cmp	r6, #0
 8006f6a:	d04d      	beq.n	8007008 <_printf_i+0x1b4>
 8006f6c:	4616      	mov	r6, r2
 8006f6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f72:	fb03 5711 	mls	r7, r3, r1, r5
 8006f76:	5dc7      	ldrb	r7, [r0, r7]
 8006f78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f7c:	462f      	mov	r7, r5
 8006f7e:	42bb      	cmp	r3, r7
 8006f80:	460d      	mov	r5, r1
 8006f82:	d9f4      	bls.n	8006f6e <_printf_i+0x11a>
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d10b      	bne.n	8006fa0 <_printf_i+0x14c>
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	07df      	lsls	r7, r3, #31
 8006f8c:	d508      	bpl.n	8006fa0 <_printf_i+0x14c>
 8006f8e:	6923      	ldr	r3, [r4, #16]
 8006f90:	6861      	ldr	r1, [r4, #4]
 8006f92:	4299      	cmp	r1, r3
 8006f94:	bfde      	ittt	le
 8006f96:	2330      	movle	r3, #48	; 0x30
 8006f98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f9c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006fa0:	1b92      	subs	r2, r2, r6
 8006fa2:	6122      	str	r2, [r4, #16]
 8006fa4:	f8cd a000 	str.w	sl, [sp]
 8006fa8:	464b      	mov	r3, r9
 8006faa:	aa03      	add	r2, sp, #12
 8006fac:	4621      	mov	r1, r4
 8006fae:	4640      	mov	r0, r8
 8006fb0:	f7ff fee2 	bl	8006d78 <_printf_common>
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d14c      	bne.n	8007052 <_printf_i+0x1fe>
 8006fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fbc:	b004      	add	sp, #16
 8006fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc2:	4835      	ldr	r0, [pc, #212]	; (8007098 <_printf_i+0x244>)
 8006fc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	680e      	ldr	r6, [r1, #0]
 8006fcc:	061f      	lsls	r7, r3, #24
 8006fce:	f856 5b04 	ldr.w	r5, [r6], #4
 8006fd2:	600e      	str	r6, [r1, #0]
 8006fd4:	d514      	bpl.n	8007000 <_printf_i+0x1ac>
 8006fd6:	07d9      	lsls	r1, r3, #31
 8006fd8:	bf44      	itt	mi
 8006fda:	f043 0320 	orrmi.w	r3, r3, #32
 8006fde:	6023      	strmi	r3, [r4, #0]
 8006fe0:	b91d      	cbnz	r5, 8006fea <_printf_i+0x196>
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	f023 0320 	bic.w	r3, r3, #32
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	2310      	movs	r3, #16
 8006fec:	e7b0      	b.n	8006f50 <_printf_i+0xfc>
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	f043 0320 	orr.w	r3, r3, #32
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	2378      	movs	r3, #120	; 0x78
 8006ff8:	4828      	ldr	r0, [pc, #160]	; (800709c <_printf_i+0x248>)
 8006ffa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ffe:	e7e3      	b.n	8006fc8 <_printf_i+0x174>
 8007000:	065e      	lsls	r6, r3, #25
 8007002:	bf48      	it	mi
 8007004:	b2ad      	uxthmi	r5, r5
 8007006:	e7e6      	b.n	8006fd6 <_printf_i+0x182>
 8007008:	4616      	mov	r6, r2
 800700a:	e7bb      	b.n	8006f84 <_printf_i+0x130>
 800700c:	680b      	ldr	r3, [r1, #0]
 800700e:	6826      	ldr	r6, [r4, #0]
 8007010:	6960      	ldr	r0, [r4, #20]
 8007012:	1d1d      	adds	r5, r3, #4
 8007014:	600d      	str	r5, [r1, #0]
 8007016:	0635      	lsls	r5, r6, #24
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	d501      	bpl.n	8007020 <_printf_i+0x1cc>
 800701c:	6018      	str	r0, [r3, #0]
 800701e:	e002      	b.n	8007026 <_printf_i+0x1d2>
 8007020:	0671      	lsls	r1, r6, #25
 8007022:	d5fb      	bpl.n	800701c <_printf_i+0x1c8>
 8007024:	8018      	strh	r0, [r3, #0]
 8007026:	2300      	movs	r3, #0
 8007028:	6123      	str	r3, [r4, #16]
 800702a:	4616      	mov	r6, r2
 800702c:	e7ba      	b.n	8006fa4 <_printf_i+0x150>
 800702e:	680b      	ldr	r3, [r1, #0]
 8007030:	1d1a      	adds	r2, r3, #4
 8007032:	600a      	str	r2, [r1, #0]
 8007034:	681e      	ldr	r6, [r3, #0]
 8007036:	6862      	ldr	r2, [r4, #4]
 8007038:	2100      	movs	r1, #0
 800703a:	4630      	mov	r0, r6
 800703c:	f7f9 f8d0 	bl	80001e0 <memchr>
 8007040:	b108      	cbz	r0, 8007046 <_printf_i+0x1f2>
 8007042:	1b80      	subs	r0, r0, r6
 8007044:	6060      	str	r0, [r4, #4]
 8007046:	6863      	ldr	r3, [r4, #4]
 8007048:	6123      	str	r3, [r4, #16]
 800704a:	2300      	movs	r3, #0
 800704c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007050:	e7a8      	b.n	8006fa4 <_printf_i+0x150>
 8007052:	6923      	ldr	r3, [r4, #16]
 8007054:	4632      	mov	r2, r6
 8007056:	4649      	mov	r1, r9
 8007058:	4640      	mov	r0, r8
 800705a:	47d0      	blx	sl
 800705c:	3001      	adds	r0, #1
 800705e:	d0ab      	beq.n	8006fb8 <_printf_i+0x164>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	079b      	lsls	r3, r3, #30
 8007064:	d413      	bmi.n	800708e <_printf_i+0x23a>
 8007066:	68e0      	ldr	r0, [r4, #12]
 8007068:	9b03      	ldr	r3, [sp, #12]
 800706a:	4298      	cmp	r0, r3
 800706c:	bfb8      	it	lt
 800706e:	4618      	movlt	r0, r3
 8007070:	e7a4      	b.n	8006fbc <_printf_i+0x168>
 8007072:	2301      	movs	r3, #1
 8007074:	4632      	mov	r2, r6
 8007076:	4649      	mov	r1, r9
 8007078:	4640      	mov	r0, r8
 800707a:	47d0      	blx	sl
 800707c:	3001      	adds	r0, #1
 800707e:	d09b      	beq.n	8006fb8 <_printf_i+0x164>
 8007080:	3501      	adds	r5, #1
 8007082:	68e3      	ldr	r3, [r4, #12]
 8007084:	9903      	ldr	r1, [sp, #12]
 8007086:	1a5b      	subs	r3, r3, r1
 8007088:	42ab      	cmp	r3, r5
 800708a:	dcf2      	bgt.n	8007072 <_printf_i+0x21e>
 800708c:	e7eb      	b.n	8007066 <_printf_i+0x212>
 800708e:	2500      	movs	r5, #0
 8007090:	f104 0619 	add.w	r6, r4, #25
 8007094:	e7f5      	b.n	8007082 <_printf_i+0x22e>
 8007096:	bf00      	nop
 8007098:	0800b08e 	.word	0x0800b08e
 800709c:	0800b09f 	.word	0x0800b09f

080070a0 <_scanf_float>:
 80070a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a4:	b087      	sub	sp, #28
 80070a6:	4617      	mov	r7, r2
 80070a8:	9303      	str	r3, [sp, #12]
 80070aa:	688b      	ldr	r3, [r1, #8]
 80070ac:	1e5a      	subs	r2, r3, #1
 80070ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80070b2:	bf83      	ittte	hi
 80070b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80070b8:	195b      	addhi	r3, r3, r5
 80070ba:	9302      	strhi	r3, [sp, #8]
 80070bc:	2300      	movls	r3, #0
 80070be:	bf86      	itte	hi
 80070c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80070c4:	608b      	strhi	r3, [r1, #8]
 80070c6:	9302      	strls	r3, [sp, #8]
 80070c8:	680b      	ldr	r3, [r1, #0]
 80070ca:	468b      	mov	fp, r1
 80070cc:	2500      	movs	r5, #0
 80070ce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80070d2:	f84b 3b1c 	str.w	r3, [fp], #28
 80070d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80070da:	4680      	mov	r8, r0
 80070dc:	460c      	mov	r4, r1
 80070de:	465e      	mov	r6, fp
 80070e0:	46aa      	mov	sl, r5
 80070e2:	46a9      	mov	r9, r5
 80070e4:	9501      	str	r5, [sp, #4]
 80070e6:	68a2      	ldr	r2, [r4, #8]
 80070e8:	b152      	cbz	r2, 8007100 <_scanf_float+0x60>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	2b4e      	cmp	r3, #78	; 0x4e
 80070f0:	d864      	bhi.n	80071bc <_scanf_float+0x11c>
 80070f2:	2b40      	cmp	r3, #64	; 0x40
 80070f4:	d83c      	bhi.n	8007170 <_scanf_float+0xd0>
 80070f6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80070fa:	b2c8      	uxtb	r0, r1
 80070fc:	280e      	cmp	r0, #14
 80070fe:	d93a      	bls.n	8007176 <_scanf_float+0xd6>
 8007100:	f1b9 0f00 	cmp.w	r9, #0
 8007104:	d003      	beq.n	800710e <_scanf_float+0x6e>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007112:	f1ba 0f01 	cmp.w	sl, #1
 8007116:	f200 8113 	bhi.w	8007340 <_scanf_float+0x2a0>
 800711a:	455e      	cmp	r6, fp
 800711c:	f200 8105 	bhi.w	800732a <_scanf_float+0x28a>
 8007120:	2501      	movs	r5, #1
 8007122:	4628      	mov	r0, r5
 8007124:	b007      	add	sp, #28
 8007126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800712e:	2a0d      	cmp	r2, #13
 8007130:	d8e6      	bhi.n	8007100 <_scanf_float+0x60>
 8007132:	a101      	add	r1, pc, #4	; (adr r1, 8007138 <_scanf_float+0x98>)
 8007134:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007138:	08007277 	.word	0x08007277
 800713c:	08007101 	.word	0x08007101
 8007140:	08007101 	.word	0x08007101
 8007144:	08007101 	.word	0x08007101
 8007148:	080072d7 	.word	0x080072d7
 800714c:	080072af 	.word	0x080072af
 8007150:	08007101 	.word	0x08007101
 8007154:	08007101 	.word	0x08007101
 8007158:	08007285 	.word	0x08007285
 800715c:	08007101 	.word	0x08007101
 8007160:	08007101 	.word	0x08007101
 8007164:	08007101 	.word	0x08007101
 8007168:	08007101 	.word	0x08007101
 800716c:	0800723d 	.word	0x0800723d
 8007170:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007174:	e7db      	b.n	800712e <_scanf_float+0x8e>
 8007176:	290e      	cmp	r1, #14
 8007178:	d8c2      	bhi.n	8007100 <_scanf_float+0x60>
 800717a:	a001      	add	r0, pc, #4	; (adr r0, 8007180 <_scanf_float+0xe0>)
 800717c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007180:	0800722f 	.word	0x0800722f
 8007184:	08007101 	.word	0x08007101
 8007188:	0800722f 	.word	0x0800722f
 800718c:	080072c3 	.word	0x080072c3
 8007190:	08007101 	.word	0x08007101
 8007194:	080071dd 	.word	0x080071dd
 8007198:	08007219 	.word	0x08007219
 800719c:	08007219 	.word	0x08007219
 80071a0:	08007219 	.word	0x08007219
 80071a4:	08007219 	.word	0x08007219
 80071a8:	08007219 	.word	0x08007219
 80071ac:	08007219 	.word	0x08007219
 80071b0:	08007219 	.word	0x08007219
 80071b4:	08007219 	.word	0x08007219
 80071b8:	08007219 	.word	0x08007219
 80071bc:	2b6e      	cmp	r3, #110	; 0x6e
 80071be:	d809      	bhi.n	80071d4 <_scanf_float+0x134>
 80071c0:	2b60      	cmp	r3, #96	; 0x60
 80071c2:	d8b2      	bhi.n	800712a <_scanf_float+0x8a>
 80071c4:	2b54      	cmp	r3, #84	; 0x54
 80071c6:	d077      	beq.n	80072b8 <_scanf_float+0x218>
 80071c8:	2b59      	cmp	r3, #89	; 0x59
 80071ca:	d199      	bne.n	8007100 <_scanf_float+0x60>
 80071cc:	2d07      	cmp	r5, #7
 80071ce:	d197      	bne.n	8007100 <_scanf_float+0x60>
 80071d0:	2508      	movs	r5, #8
 80071d2:	e029      	b.n	8007228 <_scanf_float+0x188>
 80071d4:	2b74      	cmp	r3, #116	; 0x74
 80071d6:	d06f      	beq.n	80072b8 <_scanf_float+0x218>
 80071d8:	2b79      	cmp	r3, #121	; 0x79
 80071da:	e7f6      	b.n	80071ca <_scanf_float+0x12a>
 80071dc:	6821      	ldr	r1, [r4, #0]
 80071de:	05c8      	lsls	r0, r1, #23
 80071e0:	d51a      	bpl.n	8007218 <_scanf_float+0x178>
 80071e2:	9b02      	ldr	r3, [sp, #8]
 80071e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80071e8:	6021      	str	r1, [r4, #0]
 80071ea:	f109 0901 	add.w	r9, r9, #1
 80071ee:	b11b      	cbz	r3, 80071f8 <_scanf_float+0x158>
 80071f0:	3b01      	subs	r3, #1
 80071f2:	3201      	adds	r2, #1
 80071f4:	9302      	str	r3, [sp, #8]
 80071f6:	60a2      	str	r2, [r4, #8]
 80071f8:	68a3      	ldr	r3, [r4, #8]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	60a3      	str	r3, [r4, #8]
 80071fe:	6923      	ldr	r3, [r4, #16]
 8007200:	3301      	adds	r3, #1
 8007202:	6123      	str	r3, [r4, #16]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3b01      	subs	r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	607b      	str	r3, [r7, #4]
 800720c:	f340 8084 	ble.w	8007318 <_scanf_float+0x278>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	3301      	adds	r3, #1
 8007214:	603b      	str	r3, [r7, #0]
 8007216:	e766      	b.n	80070e6 <_scanf_float+0x46>
 8007218:	eb1a 0f05 	cmn.w	sl, r5
 800721c:	f47f af70 	bne.w	8007100 <_scanf_float+0x60>
 8007220:	6822      	ldr	r2, [r4, #0]
 8007222:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007226:	6022      	str	r2, [r4, #0]
 8007228:	f806 3b01 	strb.w	r3, [r6], #1
 800722c:	e7e4      	b.n	80071f8 <_scanf_float+0x158>
 800722e:	6822      	ldr	r2, [r4, #0]
 8007230:	0610      	lsls	r0, r2, #24
 8007232:	f57f af65 	bpl.w	8007100 <_scanf_float+0x60>
 8007236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800723a:	e7f4      	b.n	8007226 <_scanf_float+0x186>
 800723c:	f1ba 0f00 	cmp.w	sl, #0
 8007240:	d10e      	bne.n	8007260 <_scanf_float+0x1c0>
 8007242:	f1b9 0f00 	cmp.w	r9, #0
 8007246:	d10e      	bne.n	8007266 <_scanf_float+0x1c6>
 8007248:	6822      	ldr	r2, [r4, #0]
 800724a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800724e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007252:	d108      	bne.n	8007266 <_scanf_float+0x1c6>
 8007254:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007258:	6022      	str	r2, [r4, #0]
 800725a:	f04f 0a01 	mov.w	sl, #1
 800725e:	e7e3      	b.n	8007228 <_scanf_float+0x188>
 8007260:	f1ba 0f02 	cmp.w	sl, #2
 8007264:	d055      	beq.n	8007312 <_scanf_float+0x272>
 8007266:	2d01      	cmp	r5, #1
 8007268:	d002      	beq.n	8007270 <_scanf_float+0x1d0>
 800726a:	2d04      	cmp	r5, #4
 800726c:	f47f af48 	bne.w	8007100 <_scanf_float+0x60>
 8007270:	3501      	adds	r5, #1
 8007272:	b2ed      	uxtb	r5, r5
 8007274:	e7d8      	b.n	8007228 <_scanf_float+0x188>
 8007276:	f1ba 0f01 	cmp.w	sl, #1
 800727a:	f47f af41 	bne.w	8007100 <_scanf_float+0x60>
 800727e:	f04f 0a02 	mov.w	sl, #2
 8007282:	e7d1      	b.n	8007228 <_scanf_float+0x188>
 8007284:	b97d      	cbnz	r5, 80072a6 <_scanf_float+0x206>
 8007286:	f1b9 0f00 	cmp.w	r9, #0
 800728a:	f47f af3c 	bne.w	8007106 <_scanf_float+0x66>
 800728e:	6822      	ldr	r2, [r4, #0]
 8007290:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007294:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007298:	f47f af39 	bne.w	800710e <_scanf_float+0x6e>
 800729c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80072a0:	6022      	str	r2, [r4, #0]
 80072a2:	2501      	movs	r5, #1
 80072a4:	e7c0      	b.n	8007228 <_scanf_float+0x188>
 80072a6:	2d03      	cmp	r5, #3
 80072a8:	d0e2      	beq.n	8007270 <_scanf_float+0x1d0>
 80072aa:	2d05      	cmp	r5, #5
 80072ac:	e7de      	b.n	800726c <_scanf_float+0x1cc>
 80072ae:	2d02      	cmp	r5, #2
 80072b0:	f47f af26 	bne.w	8007100 <_scanf_float+0x60>
 80072b4:	2503      	movs	r5, #3
 80072b6:	e7b7      	b.n	8007228 <_scanf_float+0x188>
 80072b8:	2d06      	cmp	r5, #6
 80072ba:	f47f af21 	bne.w	8007100 <_scanf_float+0x60>
 80072be:	2507      	movs	r5, #7
 80072c0:	e7b2      	b.n	8007228 <_scanf_float+0x188>
 80072c2:	6822      	ldr	r2, [r4, #0]
 80072c4:	0591      	lsls	r1, r2, #22
 80072c6:	f57f af1b 	bpl.w	8007100 <_scanf_float+0x60>
 80072ca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80072ce:	6022      	str	r2, [r4, #0]
 80072d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80072d4:	e7a8      	b.n	8007228 <_scanf_float+0x188>
 80072d6:	6822      	ldr	r2, [r4, #0]
 80072d8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80072dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80072e0:	d006      	beq.n	80072f0 <_scanf_float+0x250>
 80072e2:	0550      	lsls	r0, r2, #21
 80072e4:	f57f af0c 	bpl.w	8007100 <_scanf_float+0x60>
 80072e8:	f1b9 0f00 	cmp.w	r9, #0
 80072ec:	f43f af0f 	beq.w	800710e <_scanf_float+0x6e>
 80072f0:	0591      	lsls	r1, r2, #22
 80072f2:	bf58      	it	pl
 80072f4:	9901      	ldrpl	r1, [sp, #4]
 80072f6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80072fa:	bf58      	it	pl
 80072fc:	eba9 0101 	subpl.w	r1, r9, r1
 8007300:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007304:	bf58      	it	pl
 8007306:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800730a:	6022      	str	r2, [r4, #0]
 800730c:	f04f 0900 	mov.w	r9, #0
 8007310:	e78a      	b.n	8007228 <_scanf_float+0x188>
 8007312:	f04f 0a03 	mov.w	sl, #3
 8007316:	e787      	b.n	8007228 <_scanf_float+0x188>
 8007318:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800731c:	4639      	mov	r1, r7
 800731e:	4640      	mov	r0, r8
 8007320:	4798      	blx	r3
 8007322:	2800      	cmp	r0, #0
 8007324:	f43f aedf 	beq.w	80070e6 <_scanf_float+0x46>
 8007328:	e6ea      	b.n	8007100 <_scanf_float+0x60>
 800732a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800732e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007332:	463a      	mov	r2, r7
 8007334:	4640      	mov	r0, r8
 8007336:	4798      	blx	r3
 8007338:	6923      	ldr	r3, [r4, #16]
 800733a:	3b01      	subs	r3, #1
 800733c:	6123      	str	r3, [r4, #16]
 800733e:	e6ec      	b.n	800711a <_scanf_float+0x7a>
 8007340:	1e6b      	subs	r3, r5, #1
 8007342:	2b06      	cmp	r3, #6
 8007344:	d825      	bhi.n	8007392 <_scanf_float+0x2f2>
 8007346:	2d02      	cmp	r5, #2
 8007348:	d836      	bhi.n	80073b8 <_scanf_float+0x318>
 800734a:	455e      	cmp	r6, fp
 800734c:	f67f aee8 	bls.w	8007120 <_scanf_float+0x80>
 8007350:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007354:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007358:	463a      	mov	r2, r7
 800735a:	4640      	mov	r0, r8
 800735c:	4798      	blx	r3
 800735e:	6923      	ldr	r3, [r4, #16]
 8007360:	3b01      	subs	r3, #1
 8007362:	6123      	str	r3, [r4, #16]
 8007364:	e7f1      	b.n	800734a <_scanf_float+0x2aa>
 8007366:	9802      	ldr	r0, [sp, #8]
 8007368:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800736c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007370:	9002      	str	r0, [sp, #8]
 8007372:	463a      	mov	r2, r7
 8007374:	4640      	mov	r0, r8
 8007376:	4798      	blx	r3
 8007378:	6923      	ldr	r3, [r4, #16]
 800737a:	3b01      	subs	r3, #1
 800737c:	6123      	str	r3, [r4, #16]
 800737e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007382:	fa5f fa8a 	uxtb.w	sl, sl
 8007386:	f1ba 0f02 	cmp.w	sl, #2
 800738a:	d1ec      	bne.n	8007366 <_scanf_float+0x2c6>
 800738c:	3d03      	subs	r5, #3
 800738e:	b2ed      	uxtb	r5, r5
 8007390:	1b76      	subs	r6, r6, r5
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	05da      	lsls	r2, r3, #23
 8007396:	d52f      	bpl.n	80073f8 <_scanf_float+0x358>
 8007398:	055b      	lsls	r3, r3, #21
 800739a:	d510      	bpl.n	80073be <_scanf_float+0x31e>
 800739c:	455e      	cmp	r6, fp
 800739e:	f67f aebf 	bls.w	8007120 <_scanf_float+0x80>
 80073a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073aa:	463a      	mov	r2, r7
 80073ac:	4640      	mov	r0, r8
 80073ae:	4798      	blx	r3
 80073b0:	6923      	ldr	r3, [r4, #16]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	6123      	str	r3, [r4, #16]
 80073b6:	e7f1      	b.n	800739c <_scanf_float+0x2fc>
 80073b8:	46aa      	mov	sl, r5
 80073ba:	9602      	str	r6, [sp, #8]
 80073bc:	e7df      	b.n	800737e <_scanf_float+0x2de>
 80073be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80073c2:	6923      	ldr	r3, [r4, #16]
 80073c4:	2965      	cmp	r1, #101	; 0x65
 80073c6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80073ca:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80073ce:	6123      	str	r3, [r4, #16]
 80073d0:	d00c      	beq.n	80073ec <_scanf_float+0x34c>
 80073d2:	2945      	cmp	r1, #69	; 0x45
 80073d4:	d00a      	beq.n	80073ec <_scanf_float+0x34c>
 80073d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073da:	463a      	mov	r2, r7
 80073dc:	4640      	mov	r0, r8
 80073de:	4798      	blx	r3
 80073e0:	6923      	ldr	r3, [r4, #16]
 80073e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	1eb5      	subs	r5, r6, #2
 80073ea:	6123      	str	r3, [r4, #16]
 80073ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073f0:	463a      	mov	r2, r7
 80073f2:	4640      	mov	r0, r8
 80073f4:	4798      	blx	r3
 80073f6:	462e      	mov	r6, r5
 80073f8:	6825      	ldr	r5, [r4, #0]
 80073fa:	f015 0510 	ands.w	r5, r5, #16
 80073fe:	d158      	bne.n	80074b2 <_scanf_float+0x412>
 8007400:	7035      	strb	r5, [r6, #0]
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800740c:	d11c      	bne.n	8007448 <_scanf_float+0x3a8>
 800740e:	9b01      	ldr	r3, [sp, #4]
 8007410:	454b      	cmp	r3, r9
 8007412:	eba3 0209 	sub.w	r2, r3, r9
 8007416:	d124      	bne.n	8007462 <_scanf_float+0x3c2>
 8007418:	2200      	movs	r2, #0
 800741a:	4659      	mov	r1, fp
 800741c:	4640      	mov	r0, r8
 800741e:	f000 fe9d 	bl	800815c <_strtod_r>
 8007422:	9b03      	ldr	r3, [sp, #12]
 8007424:	6821      	ldr	r1, [r4, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f011 0f02 	tst.w	r1, #2
 800742c:	ec57 6b10 	vmov	r6, r7, d0
 8007430:	f103 0204 	add.w	r2, r3, #4
 8007434:	d020      	beq.n	8007478 <_scanf_float+0x3d8>
 8007436:	9903      	ldr	r1, [sp, #12]
 8007438:	600a      	str	r2, [r1, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	e9c3 6700 	strd	r6, r7, [r3]
 8007440:	68e3      	ldr	r3, [r4, #12]
 8007442:	3301      	adds	r3, #1
 8007444:	60e3      	str	r3, [r4, #12]
 8007446:	e66c      	b.n	8007122 <_scanf_float+0x82>
 8007448:	9b04      	ldr	r3, [sp, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0e4      	beq.n	8007418 <_scanf_float+0x378>
 800744e:	9905      	ldr	r1, [sp, #20]
 8007450:	230a      	movs	r3, #10
 8007452:	462a      	mov	r2, r5
 8007454:	3101      	adds	r1, #1
 8007456:	4640      	mov	r0, r8
 8007458:	f000 ff0a 	bl	8008270 <_strtol_r>
 800745c:	9b04      	ldr	r3, [sp, #16]
 800745e:	9e05      	ldr	r6, [sp, #20]
 8007460:	1ac2      	subs	r2, r0, r3
 8007462:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007466:	429e      	cmp	r6, r3
 8007468:	bf28      	it	cs
 800746a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800746e:	4912      	ldr	r1, [pc, #72]	; (80074b8 <_scanf_float+0x418>)
 8007470:	4630      	mov	r0, r6
 8007472:	f000 f82b 	bl	80074cc <siprintf>
 8007476:	e7cf      	b.n	8007418 <_scanf_float+0x378>
 8007478:	f011 0f04 	tst.w	r1, #4
 800747c:	9903      	ldr	r1, [sp, #12]
 800747e:	600a      	str	r2, [r1, #0]
 8007480:	d1db      	bne.n	800743a <_scanf_float+0x39a>
 8007482:	f8d3 8000 	ldr.w	r8, [r3]
 8007486:	ee10 2a10 	vmov	r2, s0
 800748a:	ee10 0a10 	vmov	r0, s0
 800748e:	463b      	mov	r3, r7
 8007490:	4639      	mov	r1, r7
 8007492:	f7f9 fb4b 	bl	8000b2c <__aeabi_dcmpun>
 8007496:	b128      	cbz	r0, 80074a4 <_scanf_float+0x404>
 8007498:	4808      	ldr	r0, [pc, #32]	; (80074bc <_scanf_float+0x41c>)
 800749a:	f000 f811 	bl	80074c0 <nanf>
 800749e:	ed88 0a00 	vstr	s0, [r8]
 80074a2:	e7cd      	b.n	8007440 <_scanf_float+0x3a0>
 80074a4:	4630      	mov	r0, r6
 80074a6:	4639      	mov	r1, r7
 80074a8:	f7f9 fb9e 	bl	8000be8 <__aeabi_d2f>
 80074ac:	f8c8 0000 	str.w	r0, [r8]
 80074b0:	e7c6      	b.n	8007440 <_scanf_float+0x3a0>
 80074b2:	2500      	movs	r5, #0
 80074b4:	e635      	b.n	8007122 <_scanf_float+0x82>
 80074b6:	bf00      	nop
 80074b8:	0800b0b0 	.word	0x0800b0b0
 80074bc:	0800b4c8 	.word	0x0800b4c8

080074c0 <nanf>:
 80074c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80074c8 <nanf+0x8>
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	7fc00000 	.word	0x7fc00000

080074cc <siprintf>:
 80074cc:	b40e      	push	{r1, r2, r3}
 80074ce:	b500      	push	{lr}
 80074d0:	b09c      	sub	sp, #112	; 0x70
 80074d2:	ab1d      	add	r3, sp, #116	; 0x74
 80074d4:	9002      	str	r0, [sp, #8]
 80074d6:	9006      	str	r0, [sp, #24]
 80074d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074dc:	4809      	ldr	r0, [pc, #36]	; (8007504 <siprintf+0x38>)
 80074de:	9107      	str	r1, [sp, #28]
 80074e0:	9104      	str	r1, [sp, #16]
 80074e2:	4909      	ldr	r1, [pc, #36]	; (8007508 <siprintf+0x3c>)
 80074e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074e8:	9105      	str	r1, [sp, #20]
 80074ea:	6800      	ldr	r0, [r0, #0]
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	a902      	add	r1, sp, #8
 80074f0:	f002 fe98 	bl	800a224 <_svfiprintf_r>
 80074f4:	9b02      	ldr	r3, [sp, #8]
 80074f6:	2200      	movs	r2, #0
 80074f8:	701a      	strb	r2, [r3, #0]
 80074fa:	b01c      	add	sp, #112	; 0x70
 80074fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007500:	b003      	add	sp, #12
 8007502:	4770      	bx	lr
 8007504:	20000010 	.word	0x20000010
 8007508:	ffff0208 	.word	0xffff0208

0800750c <sulp>:
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	4604      	mov	r4, r0
 8007510:	460d      	mov	r5, r1
 8007512:	ec45 4b10 	vmov	d0, r4, r5
 8007516:	4616      	mov	r6, r2
 8007518:	f002 fc20 	bl	8009d5c <__ulp>
 800751c:	ec51 0b10 	vmov	r0, r1, d0
 8007520:	b17e      	cbz	r6, 8007542 <sulp+0x36>
 8007522:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007526:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800752a:	2b00      	cmp	r3, #0
 800752c:	dd09      	ble.n	8007542 <sulp+0x36>
 800752e:	051b      	lsls	r3, r3, #20
 8007530:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007534:	2400      	movs	r4, #0
 8007536:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800753a:	4622      	mov	r2, r4
 800753c:	462b      	mov	r3, r5
 800753e:	f7f9 f85b 	bl	80005f8 <__aeabi_dmul>
 8007542:	bd70      	pop	{r4, r5, r6, pc}
 8007544:	0000      	movs	r0, r0
	...

08007548 <_strtod_l>:
 8007548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800754c:	b0a3      	sub	sp, #140	; 0x8c
 800754e:	461f      	mov	r7, r3
 8007550:	2300      	movs	r3, #0
 8007552:	931e      	str	r3, [sp, #120]	; 0x78
 8007554:	4ba4      	ldr	r3, [pc, #656]	; (80077e8 <_strtod_l+0x2a0>)
 8007556:	9219      	str	r2, [sp, #100]	; 0x64
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	9307      	str	r3, [sp, #28]
 800755c:	4604      	mov	r4, r0
 800755e:	4618      	mov	r0, r3
 8007560:	4688      	mov	r8, r1
 8007562:	f7f8 fe35 	bl	80001d0 <strlen>
 8007566:	f04f 0a00 	mov.w	sl, #0
 800756a:	4605      	mov	r5, r0
 800756c:	f04f 0b00 	mov.w	fp, #0
 8007570:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007574:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007576:	781a      	ldrb	r2, [r3, #0]
 8007578:	2a2b      	cmp	r2, #43	; 0x2b
 800757a:	d04c      	beq.n	8007616 <_strtod_l+0xce>
 800757c:	d839      	bhi.n	80075f2 <_strtod_l+0xaa>
 800757e:	2a0d      	cmp	r2, #13
 8007580:	d832      	bhi.n	80075e8 <_strtod_l+0xa0>
 8007582:	2a08      	cmp	r2, #8
 8007584:	d832      	bhi.n	80075ec <_strtod_l+0xa4>
 8007586:	2a00      	cmp	r2, #0
 8007588:	d03c      	beq.n	8007604 <_strtod_l+0xbc>
 800758a:	2300      	movs	r3, #0
 800758c:	930e      	str	r3, [sp, #56]	; 0x38
 800758e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007590:	7833      	ldrb	r3, [r6, #0]
 8007592:	2b30      	cmp	r3, #48	; 0x30
 8007594:	f040 80b4 	bne.w	8007700 <_strtod_l+0x1b8>
 8007598:	7873      	ldrb	r3, [r6, #1]
 800759a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800759e:	2b58      	cmp	r3, #88	; 0x58
 80075a0:	d16c      	bne.n	800767c <_strtod_l+0x134>
 80075a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075a4:	9301      	str	r3, [sp, #4]
 80075a6:	ab1e      	add	r3, sp, #120	; 0x78
 80075a8:	9702      	str	r7, [sp, #8]
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	4a8f      	ldr	r2, [pc, #572]	; (80077ec <_strtod_l+0x2a4>)
 80075ae:	ab1f      	add	r3, sp, #124	; 0x7c
 80075b0:	a91d      	add	r1, sp, #116	; 0x74
 80075b2:	4620      	mov	r0, r4
 80075b4:	f001 fd40 	bl	8009038 <__gethex>
 80075b8:	f010 0707 	ands.w	r7, r0, #7
 80075bc:	4605      	mov	r5, r0
 80075be:	d005      	beq.n	80075cc <_strtod_l+0x84>
 80075c0:	2f06      	cmp	r7, #6
 80075c2:	d12a      	bne.n	800761a <_strtod_l+0xd2>
 80075c4:	3601      	adds	r6, #1
 80075c6:	2300      	movs	r3, #0
 80075c8:	961d      	str	r6, [sp, #116]	; 0x74
 80075ca:	930e      	str	r3, [sp, #56]	; 0x38
 80075cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f040 8596 	bne.w	8008100 <_strtod_l+0xbb8>
 80075d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075d6:	b1db      	cbz	r3, 8007610 <_strtod_l+0xc8>
 80075d8:	4652      	mov	r2, sl
 80075da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80075de:	ec43 2b10 	vmov	d0, r2, r3
 80075e2:	b023      	add	sp, #140	; 0x8c
 80075e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e8:	2a20      	cmp	r2, #32
 80075ea:	d1ce      	bne.n	800758a <_strtod_l+0x42>
 80075ec:	3301      	adds	r3, #1
 80075ee:	931d      	str	r3, [sp, #116]	; 0x74
 80075f0:	e7c0      	b.n	8007574 <_strtod_l+0x2c>
 80075f2:	2a2d      	cmp	r2, #45	; 0x2d
 80075f4:	d1c9      	bne.n	800758a <_strtod_l+0x42>
 80075f6:	2201      	movs	r2, #1
 80075f8:	920e      	str	r2, [sp, #56]	; 0x38
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	921d      	str	r2, [sp, #116]	; 0x74
 80075fe:	785b      	ldrb	r3, [r3, #1]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1c4      	bne.n	800758e <_strtod_l+0x46>
 8007604:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007606:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800760a:	2b00      	cmp	r3, #0
 800760c:	f040 8576 	bne.w	80080fc <_strtod_l+0xbb4>
 8007610:	4652      	mov	r2, sl
 8007612:	465b      	mov	r3, fp
 8007614:	e7e3      	b.n	80075de <_strtod_l+0x96>
 8007616:	2200      	movs	r2, #0
 8007618:	e7ee      	b.n	80075f8 <_strtod_l+0xb0>
 800761a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800761c:	b13a      	cbz	r2, 800762e <_strtod_l+0xe6>
 800761e:	2135      	movs	r1, #53	; 0x35
 8007620:	a820      	add	r0, sp, #128	; 0x80
 8007622:	f002 fca6 	bl	8009f72 <__copybits>
 8007626:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007628:	4620      	mov	r0, r4
 800762a:	f002 f86b 	bl	8009704 <_Bfree>
 800762e:	3f01      	subs	r7, #1
 8007630:	2f05      	cmp	r7, #5
 8007632:	d807      	bhi.n	8007644 <_strtod_l+0xfc>
 8007634:	e8df f007 	tbb	[pc, r7]
 8007638:	1d180b0e 	.word	0x1d180b0e
 800763c:	030e      	.short	0x030e
 800763e:	f04f 0b00 	mov.w	fp, #0
 8007642:	46da      	mov	sl, fp
 8007644:	0728      	lsls	r0, r5, #28
 8007646:	d5c1      	bpl.n	80075cc <_strtod_l+0x84>
 8007648:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800764c:	e7be      	b.n	80075cc <_strtod_l+0x84>
 800764e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007652:	e7f7      	b.n	8007644 <_strtod_l+0xfc>
 8007654:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007658:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800765a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800765e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007662:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007666:	e7ed      	b.n	8007644 <_strtod_l+0xfc>
 8007668:	f8df b184 	ldr.w	fp, [pc, #388]	; 80077f0 <_strtod_l+0x2a8>
 800766c:	f04f 0a00 	mov.w	sl, #0
 8007670:	e7e8      	b.n	8007644 <_strtod_l+0xfc>
 8007672:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007676:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800767a:	e7e3      	b.n	8007644 <_strtod_l+0xfc>
 800767c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	921d      	str	r2, [sp, #116]	; 0x74
 8007682:	785b      	ldrb	r3, [r3, #1]
 8007684:	2b30      	cmp	r3, #48	; 0x30
 8007686:	d0f9      	beq.n	800767c <_strtod_l+0x134>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d09f      	beq.n	80075cc <_strtod_l+0x84>
 800768c:	2301      	movs	r3, #1
 800768e:	f04f 0900 	mov.w	r9, #0
 8007692:	9304      	str	r3, [sp, #16]
 8007694:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007696:	930a      	str	r3, [sp, #40]	; 0x28
 8007698:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800769c:	464f      	mov	r7, r9
 800769e:	220a      	movs	r2, #10
 80076a0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80076a2:	7806      	ldrb	r6, [r0, #0]
 80076a4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80076a8:	b2d9      	uxtb	r1, r3
 80076aa:	2909      	cmp	r1, #9
 80076ac:	d92a      	bls.n	8007704 <_strtod_l+0x1bc>
 80076ae:	9907      	ldr	r1, [sp, #28]
 80076b0:	462a      	mov	r2, r5
 80076b2:	f002 fed1 	bl	800a458 <strncmp>
 80076b6:	b398      	cbz	r0, 8007720 <_strtod_l+0x1d8>
 80076b8:	2000      	movs	r0, #0
 80076ba:	4633      	mov	r3, r6
 80076bc:	463d      	mov	r5, r7
 80076be:	9007      	str	r0, [sp, #28]
 80076c0:	4602      	mov	r2, r0
 80076c2:	2b65      	cmp	r3, #101	; 0x65
 80076c4:	d001      	beq.n	80076ca <_strtod_l+0x182>
 80076c6:	2b45      	cmp	r3, #69	; 0x45
 80076c8:	d118      	bne.n	80076fc <_strtod_l+0x1b4>
 80076ca:	b91d      	cbnz	r5, 80076d4 <_strtod_l+0x18c>
 80076cc:	9b04      	ldr	r3, [sp, #16]
 80076ce:	4303      	orrs	r3, r0
 80076d0:	d098      	beq.n	8007604 <_strtod_l+0xbc>
 80076d2:	2500      	movs	r5, #0
 80076d4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80076d8:	f108 0301 	add.w	r3, r8, #1
 80076dc:	931d      	str	r3, [sp, #116]	; 0x74
 80076de:	f898 3001 	ldrb.w	r3, [r8, #1]
 80076e2:	2b2b      	cmp	r3, #43	; 0x2b
 80076e4:	d075      	beq.n	80077d2 <_strtod_l+0x28a>
 80076e6:	2b2d      	cmp	r3, #45	; 0x2d
 80076e8:	d07b      	beq.n	80077e2 <_strtod_l+0x29a>
 80076ea:	f04f 0c00 	mov.w	ip, #0
 80076ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80076f2:	2909      	cmp	r1, #9
 80076f4:	f240 8082 	bls.w	80077fc <_strtod_l+0x2b4>
 80076f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80076fc:	2600      	movs	r6, #0
 80076fe:	e09d      	b.n	800783c <_strtod_l+0x2f4>
 8007700:	2300      	movs	r3, #0
 8007702:	e7c4      	b.n	800768e <_strtod_l+0x146>
 8007704:	2f08      	cmp	r7, #8
 8007706:	bfd8      	it	le
 8007708:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800770a:	f100 0001 	add.w	r0, r0, #1
 800770e:	bfda      	itte	le
 8007710:	fb02 3301 	mlale	r3, r2, r1, r3
 8007714:	9309      	strle	r3, [sp, #36]	; 0x24
 8007716:	fb02 3909 	mlagt	r9, r2, r9, r3
 800771a:	3701      	adds	r7, #1
 800771c:	901d      	str	r0, [sp, #116]	; 0x74
 800771e:	e7bf      	b.n	80076a0 <_strtod_l+0x158>
 8007720:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007722:	195a      	adds	r2, r3, r5
 8007724:	921d      	str	r2, [sp, #116]	; 0x74
 8007726:	5d5b      	ldrb	r3, [r3, r5]
 8007728:	2f00      	cmp	r7, #0
 800772a:	d037      	beq.n	800779c <_strtod_l+0x254>
 800772c:	9007      	str	r0, [sp, #28]
 800772e:	463d      	mov	r5, r7
 8007730:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007734:	2a09      	cmp	r2, #9
 8007736:	d912      	bls.n	800775e <_strtod_l+0x216>
 8007738:	2201      	movs	r2, #1
 800773a:	e7c2      	b.n	80076c2 <_strtod_l+0x17a>
 800773c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	921d      	str	r2, [sp, #116]	; 0x74
 8007742:	785b      	ldrb	r3, [r3, #1]
 8007744:	3001      	adds	r0, #1
 8007746:	2b30      	cmp	r3, #48	; 0x30
 8007748:	d0f8      	beq.n	800773c <_strtod_l+0x1f4>
 800774a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800774e:	2a08      	cmp	r2, #8
 8007750:	f200 84db 	bhi.w	800810a <_strtod_l+0xbc2>
 8007754:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007756:	9007      	str	r0, [sp, #28]
 8007758:	2000      	movs	r0, #0
 800775a:	920a      	str	r2, [sp, #40]	; 0x28
 800775c:	4605      	mov	r5, r0
 800775e:	3b30      	subs	r3, #48	; 0x30
 8007760:	f100 0201 	add.w	r2, r0, #1
 8007764:	d014      	beq.n	8007790 <_strtod_l+0x248>
 8007766:	9907      	ldr	r1, [sp, #28]
 8007768:	4411      	add	r1, r2
 800776a:	9107      	str	r1, [sp, #28]
 800776c:	462a      	mov	r2, r5
 800776e:	eb00 0e05 	add.w	lr, r0, r5
 8007772:	210a      	movs	r1, #10
 8007774:	4572      	cmp	r2, lr
 8007776:	d113      	bne.n	80077a0 <_strtod_l+0x258>
 8007778:	182a      	adds	r2, r5, r0
 800777a:	2a08      	cmp	r2, #8
 800777c:	f105 0501 	add.w	r5, r5, #1
 8007780:	4405      	add	r5, r0
 8007782:	dc1c      	bgt.n	80077be <_strtod_l+0x276>
 8007784:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007786:	220a      	movs	r2, #10
 8007788:	fb02 3301 	mla	r3, r2, r1, r3
 800778c:	9309      	str	r3, [sp, #36]	; 0x24
 800778e:	2200      	movs	r2, #0
 8007790:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007792:	1c59      	adds	r1, r3, #1
 8007794:	911d      	str	r1, [sp, #116]	; 0x74
 8007796:	785b      	ldrb	r3, [r3, #1]
 8007798:	4610      	mov	r0, r2
 800779a:	e7c9      	b.n	8007730 <_strtod_l+0x1e8>
 800779c:	4638      	mov	r0, r7
 800779e:	e7d2      	b.n	8007746 <_strtod_l+0x1fe>
 80077a0:	2a08      	cmp	r2, #8
 80077a2:	dc04      	bgt.n	80077ae <_strtod_l+0x266>
 80077a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077a6:	434e      	muls	r6, r1
 80077a8:	9609      	str	r6, [sp, #36]	; 0x24
 80077aa:	3201      	adds	r2, #1
 80077ac:	e7e2      	b.n	8007774 <_strtod_l+0x22c>
 80077ae:	f102 0c01 	add.w	ip, r2, #1
 80077b2:	f1bc 0f10 	cmp.w	ip, #16
 80077b6:	bfd8      	it	le
 80077b8:	fb01 f909 	mulle.w	r9, r1, r9
 80077bc:	e7f5      	b.n	80077aa <_strtod_l+0x262>
 80077be:	2d10      	cmp	r5, #16
 80077c0:	bfdc      	itt	le
 80077c2:	220a      	movle	r2, #10
 80077c4:	fb02 3909 	mlale	r9, r2, r9, r3
 80077c8:	e7e1      	b.n	800778e <_strtod_l+0x246>
 80077ca:	2300      	movs	r3, #0
 80077cc:	9307      	str	r3, [sp, #28]
 80077ce:	2201      	movs	r2, #1
 80077d0:	e77c      	b.n	80076cc <_strtod_l+0x184>
 80077d2:	f04f 0c00 	mov.w	ip, #0
 80077d6:	f108 0302 	add.w	r3, r8, #2
 80077da:	931d      	str	r3, [sp, #116]	; 0x74
 80077dc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80077e0:	e785      	b.n	80076ee <_strtod_l+0x1a6>
 80077e2:	f04f 0c01 	mov.w	ip, #1
 80077e6:	e7f6      	b.n	80077d6 <_strtod_l+0x28e>
 80077e8:	0800b308 	.word	0x0800b308
 80077ec:	0800b0b8 	.word	0x0800b0b8
 80077f0:	7ff00000 	.word	0x7ff00000
 80077f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80077f6:	1c59      	adds	r1, r3, #1
 80077f8:	911d      	str	r1, [sp, #116]	; 0x74
 80077fa:	785b      	ldrb	r3, [r3, #1]
 80077fc:	2b30      	cmp	r3, #48	; 0x30
 80077fe:	d0f9      	beq.n	80077f4 <_strtod_l+0x2ac>
 8007800:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007804:	2908      	cmp	r1, #8
 8007806:	f63f af79 	bhi.w	80076fc <_strtod_l+0x1b4>
 800780a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800780e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007810:	9308      	str	r3, [sp, #32]
 8007812:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007814:	1c59      	adds	r1, r3, #1
 8007816:	911d      	str	r1, [sp, #116]	; 0x74
 8007818:	785b      	ldrb	r3, [r3, #1]
 800781a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800781e:	2e09      	cmp	r6, #9
 8007820:	d937      	bls.n	8007892 <_strtod_l+0x34a>
 8007822:	9e08      	ldr	r6, [sp, #32]
 8007824:	1b89      	subs	r1, r1, r6
 8007826:	2908      	cmp	r1, #8
 8007828:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800782c:	dc02      	bgt.n	8007834 <_strtod_l+0x2ec>
 800782e:	4576      	cmp	r6, lr
 8007830:	bfa8      	it	ge
 8007832:	4676      	movge	r6, lr
 8007834:	f1bc 0f00 	cmp.w	ip, #0
 8007838:	d000      	beq.n	800783c <_strtod_l+0x2f4>
 800783a:	4276      	negs	r6, r6
 800783c:	2d00      	cmp	r5, #0
 800783e:	d14f      	bne.n	80078e0 <_strtod_l+0x398>
 8007840:	9904      	ldr	r1, [sp, #16]
 8007842:	4301      	orrs	r1, r0
 8007844:	f47f aec2 	bne.w	80075cc <_strtod_l+0x84>
 8007848:	2a00      	cmp	r2, #0
 800784a:	f47f aedb 	bne.w	8007604 <_strtod_l+0xbc>
 800784e:	2b69      	cmp	r3, #105	; 0x69
 8007850:	d027      	beq.n	80078a2 <_strtod_l+0x35a>
 8007852:	dc24      	bgt.n	800789e <_strtod_l+0x356>
 8007854:	2b49      	cmp	r3, #73	; 0x49
 8007856:	d024      	beq.n	80078a2 <_strtod_l+0x35a>
 8007858:	2b4e      	cmp	r3, #78	; 0x4e
 800785a:	f47f aed3 	bne.w	8007604 <_strtod_l+0xbc>
 800785e:	499e      	ldr	r1, [pc, #632]	; (8007ad8 <_strtod_l+0x590>)
 8007860:	a81d      	add	r0, sp, #116	; 0x74
 8007862:	f001 fe41 	bl	80094e8 <__match>
 8007866:	2800      	cmp	r0, #0
 8007868:	f43f aecc 	beq.w	8007604 <_strtod_l+0xbc>
 800786c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b28      	cmp	r3, #40	; 0x28
 8007872:	d12d      	bne.n	80078d0 <_strtod_l+0x388>
 8007874:	4999      	ldr	r1, [pc, #612]	; (8007adc <_strtod_l+0x594>)
 8007876:	aa20      	add	r2, sp, #128	; 0x80
 8007878:	a81d      	add	r0, sp, #116	; 0x74
 800787a:	f001 fe49 	bl	8009510 <__hexnan>
 800787e:	2805      	cmp	r0, #5
 8007880:	d126      	bne.n	80078d0 <_strtod_l+0x388>
 8007882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007884:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007888:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800788c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007890:	e69c      	b.n	80075cc <_strtod_l+0x84>
 8007892:	210a      	movs	r1, #10
 8007894:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007898:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800789c:	e7b9      	b.n	8007812 <_strtod_l+0x2ca>
 800789e:	2b6e      	cmp	r3, #110	; 0x6e
 80078a0:	e7db      	b.n	800785a <_strtod_l+0x312>
 80078a2:	498f      	ldr	r1, [pc, #572]	; (8007ae0 <_strtod_l+0x598>)
 80078a4:	a81d      	add	r0, sp, #116	; 0x74
 80078a6:	f001 fe1f 	bl	80094e8 <__match>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	f43f aeaa 	beq.w	8007604 <_strtod_l+0xbc>
 80078b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078b2:	498c      	ldr	r1, [pc, #560]	; (8007ae4 <_strtod_l+0x59c>)
 80078b4:	3b01      	subs	r3, #1
 80078b6:	a81d      	add	r0, sp, #116	; 0x74
 80078b8:	931d      	str	r3, [sp, #116]	; 0x74
 80078ba:	f001 fe15 	bl	80094e8 <__match>
 80078be:	b910      	cbnz	r0, 80078c6 <_strtod_l+0x37e>
 80078c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078c2:	3301      	adds	r3, #1
 80078c4:	931d      	str	r3, [sp, #116]	; 0x74
 80078c6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007af4 <_strtod_l+0x5ac>
 80078ca:	f04f 0a00 	mov.w	sl, #0
 80078ce:	e67d      	b.n	80075cc <_strtod_l+0x84>
 80078d0:	4885      	ldr	r0, [pc, #532]	; (8007ae8 <_strtod_l+0x5a0>)
 80078d2:	f002 fda9 	bl	800a428 <nan>
 80078d6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80078da:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80078de:	e675      	b.n	80075cc <_strtod_l+0x84>
 80078e0:	9b07      	ldr	r3, [sp, #28]
 80078e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078e4:	1af3      	subs	r3, r6, r3
 80078e6:	2f00      	cmp	r7, #0
 80078e8:	bf08      	it	eq
 80078ea:	462f      	moveq	r7, r5
 80078ec:	2d10      	cmp	r5, #16
 80078ee:	9308      	str	r3, [sp, #32]
 80078f0:	46a8      	mov	r8, r5
 80078f2:	bfa8      	it	ge
 80078f4:	f04f 0810 	movge.w	r8, #16
 80078f8:	f7f8 fe04 	bl	8000504 <__aeabi_ui2d>
 80078fc:	2d09      	cmp	r5, #9
 80078fe:	4682      	mov	sl, r0
 8007900:	468b      	mov	fp, r1
 8007902:	dd13      	ble.n	800792c <_strtod_l+0x3e4>
 8007904:	4b79      	ldr	r3, [pc, #484]	; (8007aec <_strtod_l+0x5a4>)
 8007906:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800790a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800790e:	f7f8 fe73 	bl	80005f8 <__aeabi_dmul>
 8007912:	4682      	mov	sl, r0
 8007914:	4648      	mov	r0, r9
 8007916:	468b      	mov	fp, r1
 8007918:	f7f8 fdf4 	bl	8000504 <__aeabi_ui2d>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4650      	mov	r0, sl
 8007922:	4659      	mov	r1, fp
 8007924:	f7f8 fcb2 	bl	800028c <__adddf3>
 8007928:	4682      	mov	sl, r0
 800792a:	468b      	mov	fp, r1
 800792c:	2d0f      	cmp	r5, #15
 800792e:	dc38      	bgt.n	80079a2 <_strtod_l+0x45a>
 8007930:	9b08      	ldr	r3, [sp, #32]
 8007932:	2b00      	cmp	r3, #0
 8007934:	f43f ae4a 	beq.w	80075cc <_strtod_l+0x84>
 8007938:	dd24      	ble.n	8007984 <_strtod_l+0x43c>
 800793a:	2b16      	cmp	r3, #22
 800793c:	dc0b      	bgt.n	8007956 <_strtod_l+0x40e>
 800793e:	4d6b      	ldr	r5, [pc, #428]	; (8007aec <_strtod_l+0x5a4>)
 8007940:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007944:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007948:	4652      	mov	r2, sl
 800794a:	465b      	mov	r3, fp
 800794c:	f7f8 fe54 	bl	80005f8 <__aeabi_dmul>
 8007950:	4682      	mov	sl, r0
 8007952:	468b      	mov	fp, r1
 8007954:	e63a      	b.n	80075cc <_strtod_l+0x84>
 8007956:	9a08      	ldr	r2, [sp, #32]
 8007958:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800795c:	4293      	cmp	r3, r2
 800795e:	db20      	blt.n	80079a2 <_strtod_l+0x45a>
 8007960:	4c62      	ldr	r4, [pc, #392]	; (8007aec <_strtod_l+0x5a4>)
 8007962:	f1c5 050f 	rsb	r5, r5, #15
 8007966:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800796a:	4652      	mov	r2, sl
 800796c:	465b      	mov	r3, fp
 800796e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007972:	f7f8 fe41 	bl	80005f8 <__aeabi_dmul>
 8007976:	9b08      	ldr	r3, [sp, #32]
 8007978:	1b5d      	subs	r5, r3, r5
 800797a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800797e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007982:	e7e3      	b.n	800794c <_strtod_l+0x404>
 8007984:	9b08      	ldr	r3, [sp, #32]
 8007986:	3316      	adds	r3, #22
 8007988:	db0b      	blt.n	80079a2 <_strtod_l+0x45a>
 800798a:	9b07      	ldr	r3, [sp, #28]
 800798c:	4a57      	ldr	r2, [pc, #348]	; (8007aec <_strtod_l+0x5a4>)
 800798e:	1b9e      	subs	r6, r3, r6
 8007990:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007994:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007998:	4650      	mov	r0, sl
 800799a:	4659      	mov	r1, fp
 800799c:	f7f8 ff56 	bl	800084c <__aeabi_ddiv>
 80079a0:	e7d6      	b.n	8007950 <_strtod_l+0x408>
 80079a2:	9b08      	ldr	r3, [sp, #32]
 80079a4:	eba5 0808 	sub.w	r8, r5, r8
 80079a8:	4498      	add	r8, r3
 80079aa:	f1b8 0f00 	cmp.w	r8, #0
 80079ae:	dd71      	ble.n	8007a94 <_strtod_l+0x54c>
 80079b0:	f018 030f 	ands.w	r3, r8, #15
 80079b4:	d00a      	beq.n	80079cc <_strtod_l+0x484>
 80079b6:	494d      	ldr	r1, [pc, #308]	; (8007aec <_strtod_l+0x5a4>)
 80079b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079bc:	4652      	mov	r2, sl
 80079be:	465b      	mov	r3, fp
 80079c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079c4:	f7f8 fe18 	bl	80005f8 <__aeabi_dmul>
 80079c8:	4682      	mov	sl, r0
 80079ca:	468b      	mov	fp, r1
 80079cc:	f038 080f 	bics.w	r8, r8, #15
 80079d0:	d04d      	beq.n	8007a6e <_strtod_l+0x526>
 80079d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80079d6:	dd22      	ble.n	8007a1e <_strtod_l+0x4d6>
 80079d8:	2500      	movs	r5, #0
 80079da:	462e      	mov	r6, r5
 80079dc:	9509      	str	r5, [sp, #36]	; 0x24
 80079de:	9507      	str	r5, [sp, #28]
 80079e0:	2322      	movs	r3, #34	; 0x22
 80079e2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8007af4 <_strtod_l+0x5ac>
 80079e6:	6023      	str	r3, [r4, #0]
 80079e8:	f04f 0a00 	mov.w	sl, #0
 80079ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f43f adec 	beq.w	80075cc <_strtod_l+0x84>
 80079f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80079f6:	4620      	mov	r0, r4
 80079f8:	f001 fe84 	bl	8009704 <_Bfree>
 80079fc:	9907      	ldr	r1, [sp, #28]
 80079fe:	4620      	mov	r0, r4
 8007a00:	f001 fe80 	bl	8009704 <_Bfree>
 8007a04:	4631      	mov	r1, r6
 8007a06:	4620      	mov	r0, r4
 8007a08:	f001 fe7c 	bl	8009704 <_Bfree>
 8007a0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f001 fe78 	bl	8009704 <_Bfree>
 8007a14:	4629      	mov	r1, r5
 8007a16:	4620      	mov	r0, r4
 8007a18:	f001 fe74 	bl	8009704 <_Bfree>
 8007a1c:	e5d6      	b.n	80075cc <_strtod_l+0x84>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007a24:	4650      	mov	r0, sl
 8007a26:	4659      	mov	r1, fp
 8007a28:	4699      	mov	r9, r3
 8007a2a:	f1b8 0f01 	cmp.w	r8, #1
 8007a2e:	dc21      	bgt.n	8007a74 <_strtod_l+0x52c>
 8007a30:	b10b      	cbz	r3, 8007a36 <_strtod_l+0x4ee>
 8007a32:	4682      	mov	sl, r0
 8007a34:	468b      	mov	fp, r1
 8007a36:	4b2e      	ldr	r3, [pc, #184]	; (8007af0 <_strtod_l+0x5a8>)
 8007a38:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007a3c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007a40:	4652      	mov	r2, sl
 8007a42:	465b      	mov	r3, fp
 8007a44:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007a48:	f7f8 fdd6 	bl	80005f8 <__aeabi_dmul>
 8007a4c:	4b29      	ldr	r3, [pc, #164]	; (8007af4 <_strtod_l+0x5ac>)
 8007a4e:	460a      	mov	r2, r1
 8007a50:	400b      	ands	r3, r1
 8007a52:	4929      	ldr	r1, [pc, #164]	; (8007af8 <_strtod_l+0x5b0>)
 8007a54:	428b      	cmp	r3, r1
 8007a56:	4682      	mov	sl, r0
 8007a58:	d8be      	bhi.n	80079d8 <_strtod_l+0x490>
 8007a5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007a5e:	428b      	cmp	r3, r1
 8007a60:	bf86      	itte	hi
 8007a62:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007afc <_strtod_l+0x5b4>
 8007a66:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8007a6a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007a6e:	2300      	movs	r3, #0
 8007a70:	9304      	str	r3, [sp, #16]
 8007a72:	e081      	b.n	8007b78 <_strtod_l+0x630>
 8007a74:	f018 0f01 	tst.w	r8, #1
 8007a78:	d007      	beq.n	8007a8a <_strtod_l+0x542>
 8007a7a:	4b1d      	ldr	r3, [pc, #116]	; (8007af0 <_strtod_l+0x5a8>)
 8007a7c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a84:	f7f8 fdb8 	bl	80005f8 <__aeabi_dmul>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	f109 0901 	add.w	r9, r9, #1
 8007a8e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007a92:	e7ca      	b.n	8007a2a <_strtod_l+0x4e2>
 8007a94:	d0eb      	beq.n	8007a6e <_strtod_l+0x526>
 8007a96:	f1c8 0800 	rsb	r8, r8, #0
 8007a9a:	f018 020f 	ands.w	r2, r8, #15
 8007a9e:	d00a      	beq.n	8007ab6 <_strtod_l+0x56e>
 8007aa0:	4b12      	ldr	r3, [pc, #72]	; (8007aec <_strtod_l+0x5a4>)
 8007aa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aa6:	4650      	mov	r0, sl
 8007aa8:	4659      	mov	r1, fp
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	f7f8 fecd 	bl	800084c <__aeabi_ddiv>
 8007ab2:	4682      	mov	sl, r0
 8007ab4:	468b      	mov	fp, r1
 8007ab6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007aba:	d0d8      	beq.n	8007a6e <_strtod_l+0x526>
 8007abc:	f1b8 0f1f 	cmp.w	r8, #31
 8007ac0:	dd1e      	ble.n	8007b00 <_strtod_l+0x5b8>
 8007ac2:	2500      	movs	r5, #0
 8007ac4:	462e      	mov	r6, r5
 8007ac6:	9509      	str	r5, [sp, #36]	; 0x24
 8007ac8:	9507      	str	r5, [sp, #28]
 8007aca:	2322      	movs	r3, #34	; 0x22
 8007acc:	f04f 0a00 	mov.w	sl, #0
 8007ad0:	f04f 0b00 	mov.w	fp, #0
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	e789      	b.n	80079ec <_strtod_l+0x4a4>
 8007ad8:	0800b089 	.word	0x0800b089
 8007adc:	0800b0cc 	.word	0x0800b0cc
 8007ae0:	0800b081 	.word	0x0800b081
 8007ae4:	0800b20c 	.word	0x0800b20c
 8007ae8:	0800b4c8 	.word	0x0800b4c8
 8007aec:	0800b3a8 	.word	0x0800b3a8
 8007af0:	0800b380 	.word	0x0800b380
 8007af4:	7ff00000 	.word	0x7ff00000
 8007af8:	7ca00000 	.word	0x7ca00000
 8007afc:	7fefffff 	.word	0x7fefffff
 8007b00:	f018 0310 	ands.w	r3, r8, #16
 8007b04:	bf18      	it	ne
 8007b06:	236a      	movne	r3, #106	; 0x6a
 8007b08:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007ec0 <_strtod_l+0x978>
 8007b0c:	9304      	str	r3, [sp, #16]
 8007b0e:	4650      	mov	r0, sl
 8007b10:	4659      	mov	r1, fp
 8007b12:	2300      	movs	r3, #0
 8007b14:	f018 0f01 	tst.w	r8, #1
 8007b18:	d004      	beq.n	8007b24 <_strtod_l+0x5dc>
 8007b1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007b1e:	f7f8 fd6b 	bl	80005f8 <__aeabi_dmul>
 8007b22:	2301      	movs	r3, #1
 8007b24:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007b28:	f109 0908 	add.w	r9, r9, #8
 8007b2c:	d1f2      	bne.n	8007b14 <_strtod_l+0x5cc>
 8007b2e:	b10b      	cbz	r3, 8007b34 <_strtod_l+0x5ec>
 8007b30:	4682      	mov	sl, r0
 8007b32:	468b      	mov	fp, r1
 8007b34:	9b04      	ldr	r3, [sp, #16]
 8007b36:	b1bb      	cbz	r3, 8007b68 <_strtod_l+0x620>
 8007b38:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007b3c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	4659      	mov	r1, fp
 8007b44:	dd10      	ble.n	8007b68 <_strtod_l+0x620>
 8007b46:	2b1f      	cmp	r3, #31
 8007b48:	f340 8128 	ble.w	8007d9c <_strtod_l+0x854>
 8007b4c:	2b34      	cmp	r3, #52	; 0x34
 8007b4e:	bfde      	ittt	le
 8007b50:	3b20      	suble	r3, #32
 8007b52:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8007b56:	fa02 f303 	lslle.w	r3, r2, r3
 8007b5a:	f04f 0a00 	mov.w	sl, #0
 8007b5e:	bfcc      	ite	gt
 8007b60:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007b64:	ea03 0b01 	andle.w	fp, r3, r1
 8007b68:	2200      	movs	r2, #0
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	4650      	mov	r0, sl
 8007b6e:	4659      	mov	r1, fp
 8007b70:	f7f8 ffaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	d1a4      	bne.n	8007ac2 <_strtod_l+0x57a>
 8007b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b7e:	462b      	mov	r3, r5
 8007b80:	463a      	mov	r2, r7
 8007b82:	4620      	mov	r0, r4
 8007b84:	f001 fe2a 	bl	80097dc <__s2b>
 8007b88:	9009      	str	r0, [sp, #36]	; 0x24
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	f43f af24 	beq.w	80079d8 <_strtod_l+0x490>
 8007b90:	9b07      	ldr	r3, [sp, #28]
 8007b92:	1b9e      	subs	r6, r3, r6
 8007b94:	9b08      	ldr	r3, [sp, #32]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bfb4      	ite	lt
 8007b9a:	4633      	movlt	r3, r6
 8007b9c:	2300      	movge	r3, #0
 8007b9e:	9310      	str	r3, [sp, #64]	; 0x40
 8007ba0:	9b08      	ldr	r3, [sp, #32]
 8007ba2:	2500      	movs	r5, #0
 8007ba4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007ba8:	9318      	str	r3, [sp, #96]	; 0x60
 8007baa:	462e      	mov	r6, r5
 8007bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bae:	4620      	mov	r0, r4
 8007bb0:	6859      	ldr	r1, [r3, #4]
 8007bb2:	f001 fd67 	bl	8009684 <_Balloc>
 8007bb6:	9007      	str	r0, [sp, #28]
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	f43f af11 	beq.w	80079e0 <_strtod_l+0x498>
 8007bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc0:	691a      	ldr	r2, [r3, #16]
 8007bc2:	3202      	adds	r2, #2
 8007bc4:	f103 010c 	add.w	r1, r3, #12
 8007bc8:	0092      	lsls	r2, r2, #2
 8007bca:	300c      	adds	r0, #12
 8007bcc:	f7fe fde8 	bl	80067a0 <memcpy>
 8007bd0:	ec4b ab10 	vmov	d0, sl, fp
 8007bd4:	aa20      	add	r2, sp, #128	; 0x80
 8007bd6:	a91f      	add	r1, sp, #124	; 0x7c
 8007bd8:	4620      	mov	r0, r4
 8007bda:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007bde:	f002 f939 	bl	8009e54 <__d2b>
 8007be2:	901e      	str	r0, [sp, #120]	; 0x78
 8007be4:	2800      	cmp	r0, #0
 8007be6:	f43f aefb 	beq.w	80079e0 <_strtod_l+0x498>
 8007bea:	2101      	movs	r1, #1
 8007bec:	4620      	mov	r0, r4
 8007bee:	f001 fe8f 	bl	8009910 <__i2b>
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	f43f aef3 	beq.w	80079e0 <_strtod_l+0x498>
 8007bfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007bfc:	9904      	ldr	r1, [sp, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	bfab      	itete	ge
 8007c02:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8007c04:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8007c06:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007c08:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8007c0c:	bfac      	ite	ge
 8007c0e:	eb03 0902 	addge.w	r9, r3, r2
 8007c12:	1ad7      	sublt	r7, r2, r3
 8007c14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c16:	eba3 0801 	sub.w	r8, r3, r1
 8007c1a:	4490      	add	r8, r2
 8007c1c:	4ba3      	ldr	r3, [pc, #652]	; (8007eac <_strtod_l+0x964>)
 8007c1e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007c22:	4598      	cmp	r8, r3
 8007c24:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007c28:	f280 80cc 	bge.w	8007dc4 <_strtod_l+0x87c>
 8007c2c:	eba3 0308 	sub.w	r3, r3, r8
 8007c30:	2b1f      	cmp	r3, #31
 8007c32:	eba2 0203 	sub.w	r2, r2, r3
 8007c36:	f04f 0101 	mov.w	r1, #1
 8007c3a:	f300 80b6 	bgt.w	8007daa <_strtod_l+0x862>
 8007c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c42:	9311      	str	r3, [sp, #68]	; 0x44
 8007c44:	2300      	movs	r3, #0
 8007c46:	930c      	str	r3, [sp, #48]	; 0x30
 8007c48:	eb09 0802 	add.w	r8, r9, r2
 8007c4c:	9b04      	ldr	r3, [sp, #16]
 8007c4e:	45c1      	cmp	r9, r8
 8007c50:	4417      	add	r7, r2
 8007c52:	441f      	add	r7, r3
 8007c54:	464b      	mov	r3, r9
 8007c56:	bfa8      	it	ge
 8007c58:	4643      	movge	r3, r8
 8007c5a:	42bb      	cmp	r3, r7
 8007c5c:	bfa8      	it	ge
 8007c5e:	463b      	movge	r3, r7
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	bfc2      	ittt	gt
 8007c64:	eba8 0803 	subgt.w	r8, r8, r3
 8007c68:	1aff      	subgt	r7, r7, r3
 8007c6a:	eba9 0903 	subgt.w	r9, r9, r3
 8007c6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	dd17      	ble.n	8007ca4 <_strtod_l+0x75c>
 8007c74:	4631      	mov	r1, r6
 8007c76:	461a      	mov	r2, r3
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f001 ff05 	bl	8009a88 <__pow5mult>
 8007c7e:	4606      	mov	r6, r0
 8007c80:	2800      	cmp	r0, #0
 8007c82:	f43f aead 	beq.w	80079e0 <_strtod_l+0x498>
 8007c86:	4601      	mov	r1, r0
 8007c88:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f001 fe56 	bl	800993c <__multiply>
 8007c90:	900f      	str	r0, [sp, #60]	; 0x3c
 8007c92:	2800      	cmp	r0, #0
 8007c94:	f43f aea4 	beq.w	80079e0 <_strtod_l+0x498>
 8007c98:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f001 fd32 	bl	8009704 <_Bfree>
 8007ca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ca2:	931e      	str	r3, [sp, #120]	; 0x78
 8007ca4:	f1b8 0f00 	cmp.w	r8, #0
 8007ca8:	f300 8091 	bgt.w	8007dce <_strtod_l+0x886>
 8007cac:	9b08      	ldr	r3, [sp, #32]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	dd08      	ble.n	8007cc4 <_strtod_l+0x77c>
 8007cb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007cb4:	9907      	ldr	r1, [sp, #28]
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f001 fee6 	bl	8009a88 <__pow5mult>
 8007cbc:	9007      	str	r0, [sp, #28]
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	f43f ae8e 	beq.w	80079e0 <_strtod_l+0x498>
 8007cc4:	2f00      	cmp	r7, #0
 8007cc6:	dd08      	ble.n	8007cda <_strtod_l+0x792>
 8007cc8:	9907      	ldr	r1, [sp, #28]
 8007cca:	463a      	mov	r2, r7
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f001 ff35 	bl	8009b3c <__lshift>
 8007cd2:	9007      	str	r0, [sp, #28]
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	f43f ae83 	beq.w	80079e0 <_strtod_l+0x498>
 8007cda:	f1b9 0f00 	cmp.w	r9, #0
 8007cde:	dd08      	ble.n	8007cf2 <_strtod_l+0x7aa>
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	464a      	mov	r2, r9
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f001 ff29 	bl	8009b3c <__lshift>
 8007cea:	4606      	mov	r6, r0
 8007cec:	2800      	cmp	r0, #0
 8007cee:	f43f ae77 	beq.w	80079e0 <_strtod_l+0x498>
 8007cf2:	9a07      	ldr	r2, [sp, #28]
 8007cf4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f001 ffa8 	bl	8009c4c <__mdiff>
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	f43f ae6e 	beq.w	80079e0 <_strtod_l+0x498>
 8007d04:	68c3      	ldr	r3, [r0, #12]
 8007d06:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60c3      	str	r3, [r0, #12]
 8007d0c:	4631      	mov	r1, r6
 8007d0e:	f001 ff81 	bl	8009c14 <__mcmp>
 8007d12:	2800      	cmp	r0, #0
 8007d14:	da65      	bge.n	8007de2 <_strtod_l+0x89a>
 8007d16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d18:	ea53 030a 	orrs.w	r3, r3, sl
 8007d1c:	f040 8087 	bne.w	8007e2e <_strtod_l+0x8e6>
 8007d20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f040 8082 	bne.w	8007e2e <_strtod_l+0x8e6>
 8007d2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007d2e:	0d1b      	lsrs	r3, r3, #20
 8007d30:	051b      	lsls	r3, r3, #20
 8007d32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007d36:	d97a      	bls.n	8007e2e <_strtod_l+0x8e6>
 8007d38:	696b      	ldr	r3, [r5, #20]
 8007d3a:	b913      	cbnz	r3, 8007d42 <_strtod_l+0x7fa>
 8007d3c:	692b      	ldr	r3, [r5, #16]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	dd75      	ble.n	8007e2e <_strtod_l+0x8e6>
 8007d42:	4629      	mov	r1, r5
 8007d44:	2201      	movs	r2, #1
 8007d46:	4620      	mov	r0, r4
 8007d48:	f001 fef8 	bl	8009b3c <__lshift>
 8007d4c:	4631      	mov	r1, r6
 8007d4e:	4605      	mov	r5, r0
 8007d50:	f001 ff60 	bl	8009c14 <__mcmp>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	dd6a      	ble.n	8007e2e <_strtod_l+0x8e6>
 8007d58:	9904      	ldr	r1, [sp, #16]
 8007d5a:	4a55      	ldr	r2, [pc, #340]	; (8007eb0 <_strtod_l+0x968>)
 8007d5c:	465b      	mov	r3, fp
 8007d5e:	2900      	cmp	r1, #0
 8007d60:	f000 8085 	beq.w	8007e6e <_strtod_l+0x926>
 8007d64:	ea02 010b 	and.w	r1, r2, fp
 8007d68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007d6c:	dc7f      	bgt.n	8007e6e <_strtod_l+0x926>
 8007d6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007d72:	f77f aeaa 	ble.w	8007aca <_strtod_l+0x582>
 8007d76:	4a4f      	ldr	r2, [pc, #316]	; (8007eb4 <_strtod_l+0x96c>)
 8007d78:	2300      	movs	r3, #0
 8007d7a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007d7e:	4650      	mov	r0, sl
 8007d80:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8007d84:	4659      	mov	r1, fp
 8007d86:	f7f8 fc37 	bl	80005f8 <__aeabi_dmul>
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4303      	orrs	r3, r0
 8007d8e:	bf08      	it	eq
 8007d90:	2322      	moveq	r3, #34	; 0x22
 8007d92:	4682      	mov	sl, r0
 8007d94:	468b      	mov	fp, r1
 8007d96:	bf08      	it	eq
 8007d98:	6023      	streq	r3, [r4, #0]
 8007d9a:	e62b      	b.n	80079f4 <_strtod_l+0x4ac>
 8007d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007da0:	fa02 f303 	lsl.w	r3, r2, r3
 8007da4:	ea03 0a0a 	and.w	sl, r3, sl
 8007da8:	e6de      	b.n	8007b68 <_strtod_l+0x620>
 8007daa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007dae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007db2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007db6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007dba:	fa01 f308 	lsl.w	r3, r1, r8
 8007dbe:	930c      	str	r3, [sp, #48]	; 0x30
 8007dc0:	9111      	str	r1, [sp, #68]	; 0x44
 8007dc2:	e741      	b.n	8007c48 <_strtod_l+0x700>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	930c      	str	r3, [sp, #48]	; 0x30
 8007dc8:	2301      	movs	r3, #1
 8007dca:	9311      	str	r3, [sp, #68]	; 0x44
 8007dcc:	e73c      	b.n	8007c48 <_strtod_l+0x700>
 8007dce:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007dd0:	4642      	mov	r2, r8
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f001 feb2 	bl	8009b3c <__lshift>
 8007dd8:	901e      	str	r0, [sp, #120]	; 0x78
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	f47f af66 	bne.w	8007cac <_strtod_l+0x764>
 8007de0:	e5fe      	b.n	80079e0 <_strtod_l+0x498>
 8007de2:	465f      	mov	r7, fp
 8007de4:	d16e      	bne.n	8007ec4 <_strtod_l+0x97c>
 8007de6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007de8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dec:	b342      	cbz	r2, 8007e40 <_strtod_l+0x8f8>
 8007dee:	4a32      	ldr	r2, [pc, #200]	; (8007eb8 <_strtod_l+0x970>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d128      	bne.n	8007e46 <_strtod_l+0x8fe>
 8007df4:	9b04      	ldr	r3, [sp, #16]
 8007df6:	4650      	mov	r0, sl
 8007df8:	b1eb      	cbz	r3, 8007e36 <_strtod_l+0x8ee>
 8007dfa:	4a2d      	ldr	r2, [pc, #180]	; (8007eb0 <_strtod_l+0x968>)
 8007dfc:	403a      	ands	r2, r7
 8007dfe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007e02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007e06:	d819      	bhi.n	8007e3c <_strtod_l+0x8f4>
 8007e08:	0d12      	lsrs	r2, r2, #20
 8007e0a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e12:	4298      	cmp	r0, r3
 8007e14:	d117      	bne.n	8007e46 <_strtod_l+0x8fe>
 8007e16:	4b29      	ldr	r3, [pc, #164]	; (8007ebc <_strtod_l+0x974>)
 8007e18:	429f      	cmp	r7, r3
 8007e1a:	d102      	bne.n	8007e22 <_strtod_l+0x8da>
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	f43f addf 	beq.w	80079e0 <_strtod_l+0x498>
 8007e22:	4b23      	ldr	r3, [pc, #140]	; (8007eb0 <_strtod_l+0x968>)
 8007e24:	403b      	ands	r3, r7
 8007e26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007e2a:	f04f 0a00 	mov.w	sl, #0
 8007e2e:	9b04      	ldr	r3, [sp, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1a0      	bne.n	8007d76 <_strtod_l+0x82e>
 8007e34:	e5de      	b.n	80079f4 <_strtod_l+0x4ac>
 8007e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e3a:	e7ea      	b.n	8007e12 <_strtod_l+0x8ca>
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	e7e8      	b.n	8007e12 <_strtod_l+0x8ca>
 8007e40:	ea53 030a 	orrs.w	r3, r3, sl
 8007e44:	d088      	beq.n	8007d58 <_strtod_l+0x810>
 8007e46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e48:	b1db      	cbz	r3, 8007e82 <_strtod_l+0x93a>
 8007e4a:	423b      	tst	r3, r7
 8007e4c:	d0ef      	beq.n	8007e2e <_strtod_l+0x8e6>
 8007e4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e50:	9a04      	ldr	r2, [sp, #16]
 8007e52:	4650      	mov	r0, sl
 8007e54:	4659      	mov	r1, fp
 8007e56:	b1c3      	cbz	r3, 8007e8a <_strtod_l+0x942>
 8007e58:	f7ff fb58 	bl	800750c <sulp>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e64:	f7f8 fa12 	bl	800028c <__adddf3>
 8007e68:	4682      	mov	sl, r0
 8007e6a:	468b      	mov	fp, r1
 8007e6c:	e7df      	b.n	8007e2e <_strtod_l+0x8e6>
 8007e6e:	4013      	ands	r3, r2
 8007e70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007e74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007e78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007e7c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007e80:	e7d5      	b.n	8007e2e <_strtod_l+0x8e6>
 8007e82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e84:	ea13 0f0a 	tst.w	r3, sl
 8007e88:	e7e0      	b.n	8007e4c <_strtod_l+0x904>
 8007e8a:	f7ff fb3f 	bl	800750c <sulp>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e96:	f7f8 f9f7 	bl	8000288 <__aeabi_dsub>
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	4682      	mov	sl, r0
 8007ea0:	468b      	mov	fp, r1
 8007ea2:	f7f8 fe11 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d0c1      	beq.n	8007e2e <_strtod_l+0x8e6>
 8007eaa:	e60e      	b.n	8007aca <_strtod_l+0x582>
 8007eac:	fffffc02 	.word	0xfffffc02
 8007eb0:	7ff00000 	.word	0x7ff00000
 8007eb4:	39500000 	.word	0x39500000
 8007eb8:	000fffff 	.word	0x000fffff
 8007ebc:	7fefffff 	.word	0x7fefffff
 8007ec0:	0800b0e0 	.word	0x0800b0e0
 8007ec4:	4631      	mov	r1, r6
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	f002 f820 	bl	8009f0c <__ratio>
 8007ecc:	ec59 8b10 	vmov	r8, r9, d0
 8007ed0:	ee10 0a10 	vmov	r0, s0
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007eda:	4649      	mov	r1, r9
 8007edc:	f7f8 fe08 	bl	8000af0 <__aeabi_dcmple>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d07c      	beq.n	8007fde <_strtod_l+0xa96>
 8007ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d04c      	beq.n	8007f84 <_strtod_l+0xa3c>
 8007eea:	4b95      	ldr	r3, [pc, #596]	; (8008140 <_strtod_l+0xbf8>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007ef2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008140 <_strtod_l+0xbf8>
 8007ef6:	f04f 0800 	mov.w	r8, #0
 8007efa:	4b92      	ldr	r3, [pc, #584]	; (8008144 <_strtod_l+0xbfc>)
 8007efc:	403b      	ands	r3, r7
 8007efe:	9311      	str	r3, [sp, #68]	; 0x44
 8007f00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007f02:	4b91      	ldr	r3, [pc, #580]	; (8008148 <_strtod_l+0xc00>)
 8007f04:	429a      	cmp	r2, r3
 8007f06:	f040 80b2 	bne.w	800806e <_strtod_l+0xb26>
 8007f0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f12:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007f16:	ec4b ab10 	vmov	d0, sl, fp
 8007f1a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8007f1e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007f22:	f001 ff1b 	bl	8009d5c <__ulp>
 8007f26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f2a:	ec53 2b10 	vmov	r2, r3, d0
 8007f2e:	f7f8 fb63 	bl	80005f8 <__aeabi_dmul>
 8007f32:	4652      	mov	r2, sl
 8007f34:	465b      	mov	r3, fp
 8007f36:	f7f8 f9a9 	bl	800028c <__adddf3>
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4981      	ldr	r1, [pc, #516]	; (8008144 <_strtod_l+0xbfc>)
 8007f3e:	4a83      	ldr	r2, [pc, #524]	; (800814c <_strtod_l+0xc04>)
 8007f40:	4019      	ands	r1, r3
 8007f42:	4291      	cmp	r1, r2
 8007f44:	4682      	mov	sl, r0
 8007f46:	d95e      	bls.n	8008006 <_strtod_l+0xabe>
 8007f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f4a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d103      	bne.n	8007f5a <_strtod_l+0xa12>
 8007f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f54:	3301      	adds	r3, #1
 8007f56:	f43f ad43 	beq.w	80079e0 <_strtod_l+0x498>
 8007f5a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008158 <_strtod_l+0xc10>
 8007f5e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007f62:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007f64:	4620      	mov	r0, r4
 8007f66:	f001 fbcd 	bl	8009704 <_Bfree>
 8007f6a:	9907      	ldr	r1, [sp, #28]
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f001 fbc9 	bl	8009704 <_Bfree>
 8007f72:	4631      	mov	r1, r6
 8007f74:	4620      	mov	r0, r4
 8007f76:	f001 fbc5 	bl	8009704 <_Bfree>
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f001 fbc1 	bl	8009704 <_Bfree>
 8007f82:	e613      	b.n	8007bac <_strtod_l+0x664>
 8007f84:	f1ba 0f00 	cmp.w	sl, #0
 8007f88:	d11b      	bne.n	8007fc2 <_strtod_l+0xa7a>
 8007f8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f8e:	b9f3      	cbnz	r3, 8007fce <_strtod_l+0xa86>
 8007f90:	4b6b      	ldr	r3, [pc, #428]	; (8008140 <_strtod_l+0xbf8>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	4640      	mov	r0, r8
 8007f96:	4649      	mov	r1, r9
 8007f98:	f7f8 fda0 	bl	8000adc <__aeabi_dcmplt>
 8007f9c:	b9d0      	cbnz	r0, 8007fd4 <_strtod_l+0xa8c>
 8007f9e:	4640      	mov	r0, r8
 8007fa0:	4649      	mov	r1, r9
 8007fa2:	4b6b      	ldr	r3, [pc, #428]	; (8008150 <_strtod_l+0xc08>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f7f8 fb27 	bl	80005f8 <__aeabi_dmul>
 8007faa:	4680      	mov	r8, r0
 8007fac:	4689      	mov	r9, r1
 8007fae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007fb2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8007fb6:	931b      	str	r3, [sp, #108]	; 0x6c
 8007fb8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007fbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007fc0:	e79b      	b.n	8007efa <_strtod_l+0x9b2>
 8007fc2:	f1ba 0f01 	cmp.w	sl, #1
 8007fc6:	d102      	bne.n	8007fce <_strtod_l+0xa86>
 8007fc8:	2f00      	cmp	r7, #0
 8007fca:	f43f ad7e 	beq.w	8007aca <_strtod_l+0x582>
 8007fce:	4b61      	ldr	r3, [pc, #388]	; (8008154 <_strtod_l+0xc0c>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	e78c      	b.n	8007eee <_strtod_l+0x9a6>
 8007fd4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008150 <_strtod_l+0xc08>
 8007fd8:	f04f 0800 	mov.w	r8, #0
 8007fdc:	e7e7      	b.n	8007fae <_strtod_l+0xa66>
 8007fde:	4b5c      	ldr	r3, [pc, #368]	; (8008150 <_strtod_l+0xc08>)
 8007fe0:	4640      	mov	r0, r8
 8007fe2:	4649      	mov	r1, r9
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f7f8 fb07 	bl	80005f8 <__aeabi_dmul>
 8007fea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fec:	4680      	mov	r8, r0
 8007fee:	4689      	mov	r9, r1
 8007ff0:	b933      	cbnz	r3, 8008000 <_strtod_l+0xab8>
 8007ff2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ff6:	9012      	str	r0, [sp, #72]	; 0x48
 8007ff8:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ffa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007ffe:	e7dd      	b.n	8007fbc <_strtod_l+0xa74>
 8008000:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008004:	e7f9      	b.n	8007ffa <_strtod_l+0xab2>
 8008006:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800800a:	9b04      	ldr	r3, [sp, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1a8      	bne.n	8007f62 <_strtod_l+0xa1a>
 8008010:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008014:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008016:	0d1b      	lsrs	r3, r3, #20
 8008018:	051b      	lsls	r3, r3, #20
 800801a:	429a      	cmp	r2, r3
 800801c:	d1a1      	bne.n	8007f62 <_strtod_l+0xa1a>
 800801e:	4640      	mov	r0, r8
 8008020:	4649      	mov	r1, r9
 8008022:	f7f8 fe49 	bl	8000cb8 <__aeabi_d2lz>
 8008026:	f7f8 fab9 	bl	800059c <__aeabi_l2d>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	4640      	mov	r0, r8
 8008030:	4649      	mov	r1, r9
 8008032:	f7f8 f929 	bl	8000288 <__aeabi_dsub>
 8008036:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008038:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800803c:	ea43 030a 	orr.w	r3, r3, sl
 8008040:	4313      	orrs	r3, r2
 8008042:	4680      	mov	r8, r0
 8008044:	4689      	mov	r9, r1
 8008046:	d053      	beq.n	80080f0 <_strtod_l+0xba8>
 8008048:	a335      	add	r3, pc, #212	; (adr r3, 8008120 <_strtod_l+0xbd8>)
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	f7f8 fd45 	bl	8000adc <__aeabi_dcmplt>
 8008052:	2800      	cmp	r0, #0
 8008054:	f47f acce 	bne.w	80079f4 <_strtod_l+0x4ac>
 8008058:	a333      	add	r3, pc, #204	; (adr r3, 8008128 <_strtod_l+0xbe0>)
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	4640      	mov	r0, r8
 8008060:	4649      	mov	r1, r9
 8008062:	f7f8 fd59 	bl	8000b18 <__aeabi_dcmpgt>
 8008066:	2800      	cmp	r0, #0
 8008068:	f43f af7b 	beq.w	8007f62 <_strtod_l+0xa1a>
 800806c:	e4c2      	b.n	80079f4 <_strtod_l+0x4ac>
 800806e:	9b04      	ldr	r3, [sp, #16]
 8008070:	b333      	cbz	r3, 80080c0 <_strtod_l+0xb78>
 8008072:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008074:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008078:	d822      	bhi.n	80080c0 <_strtod_l+0xb78>
 800807a:	a32d      	add	r3, pc, #180	; (adr r3, 8008130 <_strtod_l+0xbe8>)
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	4640      	mov	r0, r8
 8008082:	4649      	mov	r1, r9
 8008084:	f7f8 fd34 	bl	8000af0 <__aeabi_dcmple>
 8008088:	b1a0      	cbz	r0, 80080b4 <_strtod_l+0xb6c>
 800808a:	4649      	mov	r1, r9
 800808c:	4640      	mov	r0, r8
 800808e:	f7f8 fd8b 	bl	8000ba8 <__aeabi_d2uiz>
 8008092:	2801      	cmp	r0, #1
 8008094:	bf38      	it	cc
 8008096:	2001      	movcc	r0, #1
 8008098:	f7f8 fa34 	bl	8000504 <__aeabi_ui2d>
 800809c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800809e:	4680      	mov	r8, r0
 80080a0:	4689      	mov	r9, r1
 80080a2:	bb13      	cbnz	r3, 80080ea <_strtod_l+0xba2>
 80080a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080a8:	9014      	str	r0, [sp, #80]	; 0x50
 80080aa:	9315      	str	r3, [sp, #84]	; 0x54
 80080ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80080b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80080b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80080b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80080bc:	1a9b      	subs	r3, r3, r2
 80080be:	930d      	str	r3, [sp, #52]	; 0x34
 80080c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080c4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80080c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80080cc:	f001 fe46 	bl	8009d5c <__ulp>
 80080d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080d4:	ec53 2b10 	vmov	r2, r3, d0
 80080d8:	f7f8 fa8e 	bl	80005f8 <__aeabi_dmul>
 80080dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80080e0:	f7f8 f8d4 	bl	800028c <__adddf3>
 80080e4:	4682      	mov	sl, r0
 80080e6:	468b      	mov	fp, r1
 80080e8:	e78f      	b.n	800800a <_strtod_l+0xac2>
 80080ea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80080ee:	e7dd      	b.n	80080ac <_strtod_l+0xb64>
 80080f0:	a311      	add	r3, pc, #68	; (adr r3, 8008138 <_strtod_l+0xbf0>)
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	f7f8 fcf1 	bl	8000adc <__aeabi_dcmplt>
 80080fa:	e7b4      	b.n	8008066 <_strtod_l+0xb1e>
 80080fc:	2300      	movs	r3, #0
 80080fe:	930e      	str	r3, [sp, #56]	; 0x38
 8008100:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008102:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008104:	6013      	str	r3, [r2, #0]
 8008106:	f7ff ba65 	b.w	80075d4 <_strtod_l+0x8c>
 800810a:	2b65      	cmp	r3, #101	; 0x65
 800810c:	f43f ab5d 	beq.w	80077ca <_strtod_l+0x282>
 8008110:	2b45      	cmp	r3, #69	; 0x45
 8008112:	f43f ab5a 	beq.w	80077ca <_strtod_l+0x282>
 8008116:	2201      	movs	r2, #1
 8008118:	f7ff bb92 	b.w	8007840 <_strtod_l+0x2f8>
 800811c:	f3af 8000 	nop.w
 8008120:	94a03595 	.word	0x94a03595
 8008124:	3fdfffff 	.word	0x3fdfffff
 8008128:	35afe535 	.word	0x35afe535
 800812c:	3fe00000 	.word	0x3fe00000
 8008130:	ffc00000 	.word	0xffc00000
 8008134:	41dfffff 	.word	0x41dfffff
 8008138:	94a03595 	.word	0x94a03595
 800813c:	3fcfffff 	.word	0x3fcfffff
 8008140:	3ff00000 	.word	0x3ff00000
 8008144:	7ff00000 	.word	0x7ff00000
 8008148:	7fe00000 	.word	0x7fe00000
 800814c:	7c9fffff 	.word	0x7c9fffff
 8008150:	3fe00000 	.word	0x3fe00000
 8008154:	bff00000 	.word	0xbff00000
 8008158:	7fefffff 	.word	0x7fefffff

0800815c <_strtod_r>:
 800815c:	4b01      	ldr	r3, [pc, #4]	; (8008164 <_strtod_r+0x8>)
 800815e:	f7ff b9f3 	b.w	8007548 <_strtod_l>
 8008162:	bf00      	nop
 8008164:	20000078 	.word	0x20000078

08008168 <_strtol_l.isra.0>:
 8008168:	2b01      	cmp	r3, #1
 800816a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800816e:	d001      	beq.n	8008174 <_strtol_l.isra.0+0xc>
 8008170:	2b24      	cmp	r3, #36	; 0x24
 8008172:	d906      	bls.n	8008182 <_strtol_l.isra.0+0x1a>
 8008174:	f7fe faea 	bl	800674c <__errno>
 8008178:	2316      	movs	r3, #22
 800817a:	6003      	str	r3, [r0, #0]
 800817c:	2000      	movs	r0, #0
 800817e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008182:	4f3a      	ldr	r7, [pc, #232]	; (800826c <_strtol_l.isra.0+0x104>)
 8008184:	468e      	mov	lr, r1
 8008186:	4676      	mov	r6, lr
 8008188:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800818c:	5de5      	ldrb	r5, [r4, r7]
 800818e:	f015 0508 	ands.w	r5, r5, #8
 8008192:	d1f8      	bne.n	8008186 <_strtol_l.isra.0+0x1e>
 8008194:	2c2d      	cmp	r4, #45	; 0x2d
 8008196:	d134      	bne.n	8008202 <_strtol_l.isra.0+0x9a>
 8008198:	f89e 4000 	ldrb.w	r4, [lr]
 800819c:	f04f 0801 	mov.w	r8, #1
 80081a0:	f106 0e02 	add.w	lr, r6, #2
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d05c      	beq.n	8008262 <_strtol_l.isra.0+0xfa>
 80081a8:	2b10      	cmp	r3, #16
 80081aa:	d10c      	bne.n	80081c6 <_strtol_l.isra.0+0x5e>
 80081ac:	2c30      	cmp	r4, #48	; 0x30
 80081ae:	d10a      	bne.n	80081c6 <_strtol_l.isra.0+0x5e>
 80081b0:	f89e 4000 	ldrb.w	r4, [lr]
 80081b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80081b8:	2c58      	cmp	r4, #88	; 0x58
 80081ba:	d14d      	bne.n	8008258 <_strtol_l.isra.0+0xf0>
 80081bc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80081c0:	2310      	movs	r3, #16
 80081c2:	f10e 0e02 	add.w	lr, lr, #2
 80081c6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80081ca:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80081ce:	2600      	movs	r6, #0
 80081d0:	fbbc f9f3 	udiv	r9, ip, r3
 80081d4:	4635      	mov	r5, r6
 80081d6:	fb03 ca19 	mls	sl, r3, r9, ip
 80081da:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80081de:	2f09      	cmp	r7, #9
 80081e0:	d818      	bhi.n	8008214 <_strtol_l.isra.0+0xac>
 80081e2:	463c      	mov	r4, r7
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	dd24      	ble.n	8008232 <_strtol_l.isra.0+0xca>
 80081e8:	2e00      	cmp	r6, #0
 80081ea:	db1f      	blt.n	800822c <_strtol_l.isra.0+0xc4>
 80081ec:	45a9      	cmp	r9, r5
 80081ee:	d31d      	bcc.n	800822c <_strtol_l.isra.0+0xc4>
 80081f0:	d101      	bne.n	80081f6 <_strtol_l.isra.0+0x8e>
 80081f2:	45a2      	cmp	sl, r4
 80081f4:	db1a      	blt.n	800822c <_strtol_l.isra.0+0xc4>
 80081f6:	fb05 4503 	mla	r5, r5, r3, r4
 80081fa:	2601      	movs	r6, #1
 80081fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008200:	e7eb      	b.n	80081da <_strtol_l.isra.0+0x72>
 8008202:	2c2b      	cmp	r4, #43	; 0x2b
 8008204:	bf08      	it	eq
 8008206:	f89e 4000 	ldrbeq.w	r4, [lr]
 800820a:	46a8      	mov	r8, r5
 800820c:	bf08      	it	eq
 800820e:	f106 0e02 	addeq.w	lr, r6, #2
 8008212:	e7c7      	b.n	80081a4 <_strtol_l.isra.0+0x3c>
 8008214:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008218:	2f19      	cmp	r7, #25
 800821a:	d801      	bhi.n	8008220 <_strtol_l.isra.0+0xb8>
 800821c:	3c37      	subs	r4, #55	; 0x37
 800821e:	e7e1      	b.n	80081e4 <_strtol_l.isra.0+0x7c>
 8008220:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008224:	2f19      	cmp	r7, #25
 8008226:	d804      	bhi.n	8008232 <_strtol_l.isra.0+0xca>
 8008228:	3c57      	subs	r4, #87	; 0x57
 800822a:	e7db      	b.n	80081e4 <_strtol_l.isra.0+0x7c>
 800822c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008230:	e7e4      	b.n	80081fc <_strtol_l.isra.0+0x94>
 8008232:	2e00      	cmp	r6, #0
 8008234:	da05      	bge.n	8008242 <_strtol_l.isra.0+0xda>
 8008236:	2322      	movs	r3, #34	; 0x22
 8008238:	6003      	str	r3, [r0, #0]
 800823a:	4665      	mov	r5, ip
 800823c:	b942      	cbnz	r2, 8008250 <_strtol_l.isra.0+0xe8>
 800823e:	4628      	mov	r0, r5
 8008240:	e79d      	b.n	800817e <_strtol_l.isra.0+0x16>
 8008242:	f1b8 0f00 	cmp.w	r8, #0
 8008246:	d000      	beq.n	800824a <_strtol_l.isra.0+0xe2>
 8008248:	426d      	negs	r5, r5
 800824a:	2a00      	cmp	r2, #0
 800824c:	d0f7      	beq.n	800823e <_strtol_l.isra.0+0xd6>
 800824e:	b10e      	cbz	r6, 8008254 <_strtol_l.isra.0+0xec>
 8008250:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8008254:	6011      	str	r1, [r2, #0]
 8008256:	e7f2      	b.n	800823e <_strtol_l.isra.0+0xd6>
 8008258:	2430      	movs	r4, #48	; 0x30
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1b3      	bne.n	80081c6 <_strtol_l.isra.0+0x5e>
 800825e:	2308      	movs	r3, #8
 8008260:	e7b1      	b.n	80081c6 <_strtol_l.isra.0+0x5e>
 8008262:	2c30      	cmp	r4, #48	; 0x30
 8008264:	d0a4      	beq.n	80081b0 <_strtol_l.isra.0+0x48>
 8008266:	230a      	movs	r3, #10
 8008268:	e7ad      	b.n	80081c6 <_strtol_l.isra.0+0x5e>
 800826a:	bf00      	nop
 800826c:	0800b109 	.word	0x0800b109

08008270 <_strtol_r>:
 8008270:	f7ff bf7a 	b.w	8008168 <_strtol_l.isra.0>

08008274 <quorem>:
 8008274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008278:	6903      	ldr	r3, [r0, #16]
 800827a:	690c      	ldr	r4, [r1, #16]
 800827c:	42a3      	cmp	r3, r4
 800827e:	4607      	mov	r7, r0
 8008280:	f2c0 8081 	blt.w	8008386 <quorem+0x112>
 8008284:	3c01      	subs	r4, #1
 8008286:	f101 0814 	add.w	r8, r1, #20
 800828a:	f100 0514 	add.w	r5, r0, #20
 800828e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008292:	9301      	str	r3, [sp, #4]
 8008294:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008298:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800829c:	3301      	adds	r3, #1
 800829e:	429a      	cmp	r2, r3
 80082a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80082a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80082ac:	d331      	bcc.n	8008312 <quorem+0x9e>
 80082ae:	f04f 0e00 	mov.w	lr, #0
 80082b2:	4640      	mov	r0, r8
 80082b4:	46ac      	mov	ip, r5
 80082b6:	46f2      	mov	sl, lr
 80082b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80082bc:	b293      	uxth	r3, r2
 80082be:	fb06 e303 	mla	r3, r6, r3, lr
 80082c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	ebaa 0303 	sub.w	r3, sl, r3
 80082cc:	0c12      	lsrs	r2, r2, #16
 80082ce:	f8dc a000 	ldr.w	sl, [ip]
 80082d2:	fb06 e202 	mla	r2, r6, r2, lr
 80082d6:	fa13 f38a 	uxtah	r3, r3, sl
 80082da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082de:	fa1f fa82 	uxth.w	sl, r2
 80082e2:	f8dc 2000 	ldr.w	r2, [ip]
 80082e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80082ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082f4:	4581      	cmp	r9, r0
 80082f6:	f84c 3b04 	str.w	r3, [ip], #4
 80082fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082fe:	d2db      	bcs.n	80082b8 <quorem+0x44>
 8008300:	f855 300b 	ldr.w	r3, [r5, fp]
 8008304:	b92b      	cbnz	r3, 8008312 <quorem+0x9e>
 8008306:	9b01      	ldr	r3, [sp, #4]
 8008308:	3b04      	subs	r3, #4
 800830a:	429d      	cmp	r5, r3
 800830c:	461a      	mov	r2, r3
 800830e:	d32e      	bcc.n	800836e <quorem+0xfa>
 8008310:	613c      	str	r4, [r7, #16]
 8008312:	4638      	mov	r0, r7
 8008314:	f001 fc7e 	bl	8009c14 <__mcmp>
 8008318:	2800      	cmp	r0, #0
 800831a:	db24      	blt.n	8008366 <quorem+0xf2>
 800831c:	3601      	adds	r6, #1
 800831e:	4628      	mov	r0, r5
 8008320:	f04f 0c00 	mov.w	ip, #0
 8008324:	f858 2b04 	ldr.w	r2, [r8], #4
 8008328:	f8d0 e000 	ldr.w	lr, [r0]
 800832c:	b293      	uxth	r3, r2
 800832e:	ebac 0303 	sub.w	r3, ip, r3
 8008332:	0c12      	lsrs	r2, r2, #16
 8008334:	fa13 f38e 	uxtah	r3, r3, lr
 8008338:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800833c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008340:	b29b      	uxth	r3, r3
 8008342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008346:	45c1      	cmp	r9, r8
 8008348:	f840 3b04 	str.w	r3, [r0], #4
 800834c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008350:	d2e8      	bcs.n	8008324 <quorem+0xb0>
 8008352:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008356:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800835a:	b922      	cbnz	r2, 8008366 <quorem+0xf2>
 800835c:	3b04      	subs	r3, #4
 800835e:	429d      	cmp	r5, r3
 8008360:	461a      	mov	r2, r3
 8008362:	d30a      	bcc.n	800837a <quorem+0x106>
 8008364:	613c      	str	r4, [r7, #16]
 8008366:	4630      	mov	r0, r6
 8008368:	b003      	add	sp, #12
 800836a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836e:	6812      	ldr	r2, [r2, #0]
 8008370:	3b04      	subs	r3, #4
 8008372:	2a00      	cmp	r2, #0
 8008374:	d1cc      	bne.n	8008310 <quorem+0x9c>
 8008376:	3c01      	subs	r4, #1
 8008378:	e7c7      	b.n	800830a <quorem+0x96>
 800837a:	6812      	ldr	r2, [r2, #0]
 800837c:	3b04      	subs	r3, #4
 800837e:	2a00      	cmp	r2, #0
 8008380:	d1f0      	bne.n	8008364 <quorem+0xf0>
 8008382:	3c01      	subs	r4, #1
 8008384:	e7eb      	b.n	800835e <quorem+0xea>
 8008386:	2000      	movs	r0, #0
 8008388:	e7ee      	b.n	8008368 <quorem+0xf4>
 800838a:	0000      	movs	r0, r0
 800838c:	0000      	movs	r0, r0
	...

08008390 <_dtoa_r>:
 8008390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008394:	ed2d 8b02 	vpush	{d8}
 8008398:	ec57 6b10 	vmov	r6, r7, d0
 800839c:	b095      	sub	sp, #84	; 0x54
 800839e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80083a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80083a4:	9105      	str	r1, [sp, #20]
 80083a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80083aa:	4604      	mov	r4, r0
 80083ac:	9209      	str	r2, [sp, #36]	; 0x24
 80083ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80083b0:	b975      	cbnz	r5, 80083d0 <_dtoa_r+0x40>
 80083b2:	2010      	movs	r0, #16
 80083b4:	f001 f94c 	bl	8009650 <malloc>
 80083b8:	4602      	mov	r2, r0
 80083ba:	6260      	str	r0, [r4, #36]	; 0x24
 80083bc:	b920      	cbnz	r0, 80083c8 <_dtoa_r+0x38>
 80083be:	4bb2      	ldr	r3, [pc, #712]	; (8008688 <_dtoa_r+0x2f8>)
 80083c0:	21ea      	movs	r1, #234	; 0xea
 80083c2:	48b2      	ldr	r0, [pc, #712]	; (800868c <_dtoa_r+0x2fc>)
 80083c4:	f002 f868 	bl	800a498 <__assert_func>
 80083c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083cc:	6005      	str	r5, [r0, #0]
 80083ce:	60c5      	str	r5, [r0, #12]
 80083d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083d2:	6819      	ldr	r1, [r3, #0]
 80083d4:	b151      	cbz	r1, 80083ec <_dtoa_r+0x5c>
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	604a      	str	r2, [r1, #4]
 80083da:	2301      	movs	r3, #1
 80083dc:	4093      	lsls	r3, r2
 80083de:	608b      	str	r3, [r1, #8]
 80083e0:	4620      	mov	r0, r4
 80083e2:	f001 f98f 	bl	8009704 <_Bfree>
 80083e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	1e3b      	subs	r3, r7, #0
 80083ee:	bfb9      	ittee	lt
 80083f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083f4:	9303      	strlt	r3, [sp, #12]
 80083f6:	2300      	movge	r3, #0
 80083f8:	f8c8 3000 	strge.w	r3, [r8]
 80083fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008400:	4ba3      	ldr	r3, [pc, #652]	; (8008690 <_dtoa_r+0x300>)
 8008402:	bfbc      	itt	lt
 8008404:	2201      	movlt	r2, #1
 8008406:	f8c8 2000 	strlt.w	r2, [r8]
 800840a:	ea33 0309 	bics.w	r3, r3, r9
 800840e:	d11b      	bne.n	8008448 <_dtoa_r+0xb8>
 8008410:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008412:	f242 730f 	movw	r3, #9999	; 0x270f
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800841c:	4333      	orrs	r3, r6
 800841e:	f000 857a 	beq.w	8008f16 <_dtoa_r+0xb86>
 8008422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008424:	b963      	cbnz	r3, 8008440 <_dtoa_r+0xb0>
 8008426:	4b9b      	ldr	r3, [pc, #620]	; (8008694 <_dtoa_r+0x304>)
 8008428:	e024      	b.n	8008474 <_dtoa_r+0xe4>
 800842a:	4b9b      	ldr	r3, [pc, #620]	; (8008698 <_dtoa_r+0x308>)
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	3308      	adds	r3, #8
 8008430:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	9800      	ldr	r0, [sp, #0]
 8008436:	b015      	add	sp, #84	; 0x54
 8008438:	ecbd 8b02 	vpop	{d8}
 800843c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008440:	4b94      	ldr	r3, [pc, #592]	; (8008694 <_dtoa_r+0x304>)
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	3303      	adds	r3, #3
 8008446:	e7f3      	b.n	8008430 <_dtoa_r+0xa0>
 8008448:	ed9d 7b02 	vldr	d7, [sp, #8]
 800844c:	2200      	movs	r2, #0
 800844e:	ec51 0b17 	vmov	r0, r1, d7
 8008452:	2300      	movs	r3, #0
 8008454:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008458:	f7f8 fb36 	bl	8000ac8 <__aeabi_dcmpeq>
 800845c:	4680      	mov	r8, r0
 800845e:	b158      	cbz	r0, 8008478 <_dtoa_r+0xe8>
 8008460:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008462:	2301      	movs	r3, #1
 8008464:	6013      	str	r3, [r2, #0]
 8008466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 8551 	beq.w	8008f10 <_dtoa_r+0xb80>
 800846e:	488b      	ldr	r0, [pc, #556]	; (800869c <_dtoa_r+0x30c>)
 8008470:	6018      	str	r0, [r3, #0]
 8008472:	1e43      	subs	r3, r0, #1
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	e7dd      	b.n	8008434 <_dtoa_r+0xa4>
 8008478:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800847c:	aa12      	add	r2, sp, #72	; 0x48
 800847e:	a913      	add	r1, sp, #76	; 0x4c
 8008480:	4620      	mov	r0, r4
 8008482:	f001 fce7 	bl	8009e54 <__d2b>
 8008486:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800848a:	4683      	mov	fp, r0
 800848c:	2d00      	cmp	r5, #0
 800848e:	d07c      	beq.n	800858a <_dtoa_r+0x1fa>
 8008490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008492:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008496:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800849a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800849e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80084a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80084a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80084aa:	4b7d      	ldr	r3, [pc, #500]	; (80086a0 <_dtoa_r+0x310>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	4630      	mov	r0, r6
 80084b0:	4639      	mov	r1, r7
 80084b2:	f7f7 fee9 	bl	8000288 <__aeabi_dsub>
 80084b6:	a36e      	add	r3, pc, #440	; (adr r3, 8008670 <_dtoa_r+0x2e0>)
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	f7f8 f89c 	bl	80005f8 <__aeabi_dmul>
 80084c0:	a36d      	add	r3, pc, #436	; (adr r3, 8008678 <_dtoa_r+0x2e8>)
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	f7f7 fee1 	bl	800028c <__adddf3>
 80084ca:	4606      	mov	r6, r0
 80084cc:	4628      	mov	r0, r5
 80084ce:	460f      	mov	r7, r1
 80084d0:	f7f8 f828 	bl	8000524 <__aeabi_i2d>
 80084d4:	a36a      	add	r3, pc, #424	; (adr r3, 8008680 <_dtoa_r+0x2f0>)
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	f7f8 f88d 	bl	80005f8 <__aeabi_dmul>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	4630      	mov	r0, r6
 80084e4:	4639      	mov	r1, r7
 80084e6:	f7f7 fed1 	bl	800028c <__adddf3>
 80084ea:	4606      	mov	r6, r0
 80084ec:	460f      	mov	r7, r1
 80084ee:	f7f8 fb33 	bl	8000b58 <__aeabi_d2iz>
 80084f2:	2200      	movs	r2, #0
 80084f4:	4682      	mov	sl, r0
 80084f6:	2300      	movs	r3, #0
 80084f8:	4630      	mov	r0, r6
 80084fa:	4639      	mov	r1, r7
 80084fc:	f7f8 faee 	bl	8000adc <__aeabi_dcmplt>
 8008500:	b148      	cbz	r0, 8008516 <_dtoa_r+0x186>
 8008502:	4650      	mov	r0, sl
 8008504:	f7f8 f80e 	bl	8000524 <__aeabi_i2d>
 8008508:	4632      	mov	r2, r6
 800850a:	463b      	mov	r3, r7
 800850c:	f7f8 fadc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008510:	b908      	cbnz	r0, 8008516 <_dtoa_r+0x186>
 8008512:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008516:	f1ba 0f16 	cmp.w	sl, #22
 800851a:	d854      	bhi.n	80085c6 <_dtoa_r+0x236>
 800851c:	4b61      	ldr	r3, [pc, #388]	; (80086a4 <_dtoa_r+0x314>)
 800851e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008526:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800852a:	f7f8 fad7 	bl	8000adc <__aeabi_dcmplt>
 800852e:	2800      	cmp	r0, #0
 8008530:	d04b      	beq.n	80085ca <_dtoa_r+0x23a>
 8008532:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008536:	2300      	movs	r3, #0
 8008538:	930e      	str	r3, [sp, #56]	; 0x38
 800853a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800853c:	1b5d      	subs	r5, r3, r5
 800853e:	1e6b      	subs	r3, r5, #1
 8008540:	9304      	str	r3, [sp, #16]
 8008542:	bf43      	ittte	mi
 8008544:	2300      	movmi	r3, #0
 8008546:	f1c5 0801 	rsbmi	r8, r5, #1
 800854a:	9304      	strmi	r3, [sp, #16]
 800854c:	f04f 0800 	movpl.w	r8, #0
 8008550:	f1ba 0f00 	cmp.w	sl, #0
 8008554:	db3b      	blt.n	80085ce <_dtoa_r+0x23e>
 8008556:	9b04      	ldr	r3, [sp, #16]
 8008558:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800855c:	4453      	add	r3, sl
 800855e:	9304      	str	r3, [sp, #16]
 8008560:	2300      	movs	r3, #0
 8008562:	9306      	str	r3, [sp, #24]
 8008564:	9b05      	ldr	r3, [sp, #20]
 8008566:	2b09      	cmp	r3, #9
 8008568:	d869      	bhi.n	800863e <_dtoa_r+0x2ae>
 800856a:	2b05      	cmp	r3, #5
 800856c:	bfc4      	itt	gt
 800856e:	3b04      	subgt	r3, #4
 8008570:	9305      	strgt	r3, [sp, #20]
 8008572:	9b05      	ldr	r3, [sp, #20]
 8008574:	f1a3 0302 	sub.w	r3, r3, #2
 8008578:	bfcc      	ite	gt
 800857a:	2500      	movgt	r5, #0
 800857c:	2501      	movle	r5, #1
 800857e:	2b03      	cmp	r3, #3
 8008580:	d869      	bhi.n	8008656 <_dtoa_r+0x2c6>
 8008582:	e8df f003 	tbb	[pc, r3]
 8008586:	4e2c      	.short	0x4e2c
 8008588:	5a4c      	.short	0x5a4c
 800858a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800858e:	441d      	add	r5, r3
 8008590:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008594:	2b20      	cmp	r3, #32
 8008596:	bfc1      	itttt	gt
 8008598:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800859c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80085a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80085a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80085a8:	bfda      	itte	le
 80085aa:	f1c3 0320 	rsble	r3, r3, #32
 80085ae:	fa06 f003 	lslle.w	r0, r6, r3
 80085b2:	4318      	orrgt	r0, r3
 80085b4:	f7f7 ffa6 	bl	8000504 <__aeabi_ui2d>
 80085b8:	2301      	movs	r3, #1
 80085ba:	4606      	mov	r6, r0
 80085bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80085c0:	3d01      	subs	r5, #1
 80085c2:	9310      	str	r3, [sp, #64]	; 0x40
 80085c4:	e771      	b.n	80084aa <_dtoa_r+0x11a>
 80085c6:	2301      	movs	r3, #1
 80085c8:	e7b6      	b.n	8008538 <_dtoa_r+0x1a8>
 80085ca:	900e      	str	r0, [sp, #56]	; 0x38
 80085cc:	e7b5      	b.n	800853a <_dtoa_r+0x1aa>
 80085ce:	f1ca 0300 	rsb	r3, sl, #0
 80085d2:	9306      	str	r3, [sp, #24]
 80085d4:	2300      	movs	r3, #0
 80085d6:	eba8 080a 	sub.w	r8, r8, sl
 80085da:	930d      	str	r3, [sp, #52]	; 0x34
 80085dc:	e7c2      	b.n	8008564 <_dtoa_r+0x1d4>
 80085de:	2300      	movs	r3, #0
 80085e0:	9308      	str	r3, [sp, #32]
 80085e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	dc39      	bgt.n	800865c <_dtoa_r+0x2cc>
 80085e8:	f04f 0901 	mov.w	r9, #1
 80085ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80085f0:	464b      	mov	r3, r9
 80085f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80085f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80085f8:	2200      	movs	r2, #0
 80085fa:	6042      	str	r2, [r0, #4]
 80085fc:	2204      	movs	r2, #4
 80085fe:	f102 0614 	add.w	r6, r2, #20
 8008602:	429e      	cmp	r6, r3
 8008604:	6841      	ldr	r1, [r0, #4]
 8008606:	d92f      	bls.n	8008668 <_dtoa_r+0x2d8>
 8008608:	4620      	mov	r0, r4
 800860a:	f001 f83b 	bl	8009684 <_Balloc>
 800860e:	9000      	str	r0, [sp, #0]
 8008610:	2800      	cmp	r0, #0
 8008612:	d14b      	bne.n	80086ac <_dtoa_r+0x31c>
 8008614:	4b24      	ldr	r3, [pc, #144]	; (80086a8 <_dtoa_r+0x318>)
 8008616:	4602      	mov	r2, r0
 8008618:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800861c:	e6d1      	b.n	80083c2 <_dtoa_r+0x32>
 800861e:	2301      	movs	r3, #1
 8008620:	e7de      	b.n	80085e0 <_dtoa_r+0x250>
 8008622:	2300      	movs	r3, #0
 8008624:	9308      	str	r3, [sp, #32]
 8008626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008628:	eb0a 0903 	add.w	r9, sl, r3
 800862c:	f109 0301 	add.w	r3, r9, #1
 8008630:	2b01      	cmp	r3, #1
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	bfb8      	it	lt
 8008636:	2301      	movlt	r3, #1
 8008638:	e7dd      	b.n	80085f6 <_dtoa_r+0x266>
 800863a:	2301      	movs	r3, #1
 800863c:	e7f2      	b.n	8008624 <_dtoa_r+0x294>
 800863e:	2501      	movs	r5, #1
 8008640:	2300      	movs	r3, #0
 8008642:	9305      	str	r3, [sp, #20]
 8008644:	9508      	str	r5, [sp, #32]
 8008646:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800864a:	2200      	movs	r2, #0
 800864c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008650:	2312      	movs	r3, #18
 8008652:	9209      	str	r2, [sp, #36]	; 0x24
 8008654:	e7cf      	b.n	80085f6 <_dtoa_r+0x266>
 8008656:	2301      	movs	r3, #1
 8008658:	9308      	str	r3, [sp, #32]
 800865a:	e7f4      	b.n	8008646 <_dtoa_r+0x2b6>
 800865c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008660:	f8cd 9004 	str.w	r9, [sp, #4]
 8008664:	464b      	mov	r3, r9
 8008666:	e7c6      	b.n	80085f6 <_dtoa_r+0x266>
 8008668:	3101      	adds	r1, #1
 800866a:	6041      	str	r1, [r0, #4]
 800866c:	0052      	lsls	r2, r2, #1
 800866e:	e7c6      	b.n	80085fe <_dtoa_r+0x26e>
 8008670:	636f4361 	.word	0x636f4361
 8008674:	3fd287a7 	.word	0x3fd287a7
 8008678:	8b60c8b3 	.word	0x8b60c8b3
 800867c:	3fc68a28 	.word	0x3fc68a28
 8008680:	509f79fb 	.word	0x509f79fb
 8008684:	3fd34413 	.word	0x3fd34413
 8008688:	0800b216 	.word	0x0800b216
 800868c:	0800b22d 	.word	0x0800b22d
 8008690:	7ff00000 	.word	0x7ff00000
 8008694:	0800b212 	.word	0x0800b212
 8008698:	0800b209 	.word	0x0800b209
 800869c:	0800b08d 	.word	0x0800b08d
 80086a0:	3ff80000 	.word	0x3ff80000
 80086a4:	0800b3a8 	.word	0x0800b3a8
 80086a8:	0800b28c 	.word	0x0800b28c
 80086ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086ae:	9a00      	ldr	r2, [sp, #0]
 80086b0:	601a      	str	r2, [r3, #0]
 80086b2:	9b01      	ldr	r3, [sp, #4]
 80086b4:	2b0e      	cmp	r3, #14
 80086b6:	f200 80ad 	bhi.w	8008814 <_dtoa_r+0x484>
 80086ba:	2d00      	cmp	r5, #0
 80086bc:	f000 80aa 	beq.w	8008814 <_dtoa_r+0x484>
 80086c0:	f1ba 0f00 	cmp.w	sl, #0
 80086c4:	dd36      	ble.n	8008734 <_dtoa_r+0x3a4>
 80086c6:	4ac3      	ldr	r2, [pc, #780]	; (80089d4 <_dtoa_r+0x644>)
 80086c8:	f00a 030f 	and.w	r3, sl, #15
 80086cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086d0:	ed93 7b00 	vldr	d7, [r3]
 80086d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80086d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80086dc:	eeb0 8a47 	vmov.f32	s16, s14
 80086e0:	eef0 8a67 	vmov.f32	s17, s15
 80086e4:	d016      	beq.n	8008714 <_dtoa_r+0x384>
 80086e6:	4bbc      	ldr	r3, [pc, #752]	; (80089d8 <_dtoa_r+0x648>)
 80086e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80086ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086f0:	f7f8 f8ac 	bl	800084c <__aeabi_ddiv>
 80086f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086f8:	f007 070f 	and.w	r7, r7, #15
 80086fc:	2503      	movs	r5, #3
 80086fe:	4eb6      	ldr	r6, [pc, #728]	; (80089d8 <_dtoa_r+0x648>)
 8008700:	b957      	cbnz	r7, 8008718 <_dtoa_r+0x388>
 8008702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008706:	ec53 2b18 	vmov	r2, r3, d8
 800870a:	f7f8 f89f 	bl	800084c <__aeabi_ddiv>
 800870e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008712:	e029      	b.n	8008768 <_dtoa_r+0x3d8>
 8008714:	2502      	movs	r5, #2
 8008716:	e7f2      	b.n	80086fe <_dtoa_r+0x36e>
 8008718:	07f9      	lsls	r1, r7, #31
 800871a:	d508      	bpl.n	800872e <_dtoa_r+0x39e>
 800871c:	ec51 0b18 	vmov	r0, r1, d8
 8008720:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008724:	f7f7 ff68 	bl	80005f8 <__aeabi_dmul>
 8008728:	ec41 0b18 	vmov	d8, r0, r1
 800872c:	3501      	adds	r5, #1
 800872e:	107f      	asrs	r7, r7, #1
 8008730:	3608      	adds	r6, #8
 8008732:	e7e5      	b.n	8008700 <_dtoa_r+0x370>
 8008734:	f000 80a6 	beq.w	8008884 <_dtoa_r+0x4f4>
 8008738:	f1ca 0600 	rsb	r6, sl, #0
 800873c:	4ba5      	ldr	r3, [pc, #660]	; (80089d4 <_dtoa_r+0x644>)
 800873e:	4fa6      	ldr	r7, [pc, #664]	; (80089d8 <_dtoa_r+0x648>)
 8008740:	f006 020f 	and.w	r2, r6, #15
 8008744:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008750:	f7f7 ff52 	bl	80005f8 <__aeabi_dmul>
 8008754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008758:	1136      	asrs	r6, r6, #4
 800875a:	2300      	movs	r3, #0
 800875c:	2502      	movs	r5, #2
 800875e:	2e00      	cmp	r6, #0
 8008760:	f040 8085 	bne.w	800886e <_dtoa_r+0x4de>
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1d2      	bne.n	800870e <_dtoa_r+0x37e>
 8008768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 808c 	beq.w	8008888 <_dtoa_r+0x4f8>
 8008770:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008774:	4b99      	ldr	r3, [pc, #612]	; (80089dc <_dtoa_r+0x64c>)
 8008776:	2200      	movs	r2, #0
 8008778:	4630      	mov	r0, r6
 800877a:	4639      	mov	r1, r7
 800877c:	f7f8 f9ae 	bl	8000adc <__aeabi_dcmplt>
 8008780:	2800      	cmp	r0, #0
 8008782:	f000 8081 	beq.w	8008888 <_dtoa_r+0x4f8>
 8008786:	9b01      	ldr	r3, [sp, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d07d      	beq.n	8008888 <_dtoa_r+0x4f8>
 800878c:	f1b9 0f00 	cmp.w	r9, #0
 8008790:	dd3c      	ble.n	800880c <_dtoa_r+0x47c>
 8008792:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008796:	9307      	str	r3, [sp, #28]
 8008798:	2200      	movs	r2, #0
 800879a:	4b91      	ldr	r3, [pc, #580]	; (80089e0 <_dtoa_r+0x650>)
 800879c:	4630      	mov	r0, r6
 800879e:	4639      	mov	r1, r7
 80087a0:	f7f7 ff2a 	bl	80005f8 <__aeabi_dmul>
 80087a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087a8:	3501      	adds	r5, #1
 80087aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80087ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80087b2:	4628      	mov	r0, r5
 80087b4:	f7f7 feb6 	bl	8000524 <__aeabi_i2d>
 80087b8:	4632      	mov	r2, r6
 80087ba:	463b      	mov	r3, r7
 80087bc:	f7f7 ff1c 	bl	80005f8 <__aeabi_dmul>
 80087c0:	4b88      	ldr	r3, [pc, #544]	; (80089e4 <_dtoa_r+0x654>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	f7f7 fd62 	bl	800028c <__adddf3>
 80087c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80087cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087d0:	9303      	str	r3, [sp, #12]
 80087d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d15c      	bne.n	8008892 <_dtoa_r+0x502>
 80087d8:	4b83      	ldr	r3, [pc, #524]	; (80089e8 <_dtoa_r+0x658>)
 80087da:	2200      	movs	r2, #0
 80087dc:	4630      	mov	r0, r6
 80087de:	4639      	mov	r1, r7
 80087e0:	f7f7 fd52 	bl	8000288 <__aeabi_dsub>
 80087e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087e8:	4606      	mov	r6, r0
 80087ea:	460f      	mov	r7, r1
 80087ec:	f7f8 f994 	bl	8000b18 <__aeabi_dcmpgt>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	f040 8296 	bne.w	8008d22 <_dtoa_r+0x992>
 80087f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80087fa:	4630      	mov	r0, r6
 80087fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008800:	4639      	mov	r1, r7
 8008802:	f7f8 f96b 	bl	8000adc <__aeabi_dcmplt>
 8008806:	2800      	cmp	r0, #0
 8008808:	f040 8288 	bne.w	8008d1c <_dtoa_r+0x98c>
 800880c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008810:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008814:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008816:	2b00      	cmp	r3, #0
 8008818:	f2c0 8158 	blt.w	8008acc <_dtoa_r+0x73c>
 800881c:	f1ba 0f0e 	cmp.w	sl, #14
 8008820:	f300 8154 	bgt.w	8008acc <_dtoa_r+0x73c>
 8008824:	4b6b      	ldr	r3, [pc, #428]	; (80089d4 <_dtoa_r+0x644>)
 8008826:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800882a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800882e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008830:	2b00      	cmp	r3, #0
 8008832:	f280 80e3 	bge.w	80089fc <_dtoa_r+0x66c>
 8008836:	9b01      	ldr	r3, [sp, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	f300 80df 	bgt.w	80089fc <_dtoa_r+0x66c>
 800883e:	f040 826d 	bne.w	8008d1c <_dtoa_r+0x98c>
 8008842:	4b69      	ldr	r3, [pc, #420]	; (80089e8 <_dtoa_r+0x658>)
 8008844:	2200      	movs	r2, #0
 8008846:	4640      	mov	r0, r8
 8008848:	4649      	mov	r1, r9
 800884a:	f7f7 fed5 	bl	80005f8 <__aeabi_dmul>
 800884e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008852:	f7f8 f957 	bl	8000b04 <__aeabi_dcmpge>
 8008856:	9e01      	ldr	r6, [sp, #4]
 8008858:	4637      	mov	r7, r6
 800885a:	2800      	cmp	r0, #0
 800885c:	f040 8243 	bne.w	8008ce6 <_dtoa_r+0x956>
 8008860:	9d00      	ldr	r5, [sp, #0]
 8008862:	2331      	movs	r3, #49	; 0x31
 8008864:	f805 3b01 	strb.w	r3, [r5], #1
 8008868:	f10a 0a01 	add.w	sl, sl, #1
 800886c:	e23f      	b.n	8008cee <_dtoa_r+0x95e>
 800886e:	07f2      	lsls	r2, r6, #31
 8008870:	d505      	bpl.n	800887e <_dtoa_r+0x4ee>
 8008872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008876:	f7f7 febf 	bl	80005f8 <__aeabi_dmul>
 800887a:	3501      	adds	r5, #1
 800887c:	2301      	movs	r3, #1
 800887e:	1076      	asrs	r6, r6, #1
 8008880:	3708      	adds	r7, #8
 8008882:	e76c      	b.n	800875e <_dtoa_r+0x3ce>
 8008884:	2502      	movs	r5, #2
 8008886:	e76f      	b.n	8008768 <_dtoa_r+0x3d8>
 8008888:	9b01      	ldr	r3, [sp, #4]
 800888a:	f8cd a01c 	str.w	sl, [sp, #28]
 800888e:	930c      	str	r3, [sp, #48]	; 0x30
 8008890:	e78d      	b.n	80087ae <_dtoa_r+0x41e>
 8008892:	9900      	ldr	r1, [sp, #0]
 8008894:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008898:	4b4e      	ldr	r3, [pc, #312]	; (80089d4 <_dtoa_r+0x644>)
 800889a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800889e:	4401      	add	r1, r0
 80088a0:	9102      	str	r1, [sp, #8]
 80088a2:	9908      	ldr	r1, [sp, #32]
 80088a4:	eeb0 8a47 	vmov.f32	s16, s14
 80088a8:	eef0 8a67 	vmov.f32	s17, s15
 80088ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088b4:	2900      	cmp	r1, #0
 80088b6:	d045      	beq.n	8008944 <_dtoa_r+0x5b4>
 80088b8:	494c      	ldr	r1, [pc, #304]	; (80089ec <_dtoa_r+0x65c>)
 80088ba:	2000      	movs	r0, #0
 80088bc:	f7f7 ffc6 	bl	800084c <__aeabi_ddiv>
 80088c0:	ec53 2b18 	vmov	r2, r3, d8
 80088c4:	f7f7 fce0 	bl	8000288 <__aeabi_dsub>
 80088c8:	9d00      	ldr	r5, [sp, #0]
 80088ca:	ec41 0b18 	vmov	d8, r0, r1
 80088ce:	4639      	mov	r1, r7
 80088d0:	4630      	mov	r0, r6
 80088d2:	f7f8 f941 	bl	8000b58 <__aeabi_d2iz>
 80088d6:	900c      	str	r0, [sp, #48]	; 0x30
 80088d8:	f7f7 fe24 	bl	8000524 <__aeabi_i2d>
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	4630      	mov	r0, r6
 80088e2:	4639      	mov	r1, r7
 80088e4:	f7f7 fcd0 	bl	8000288 <__aeabi_dsub>
 80088e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088ea:	3330      	adds	r3, #48	; 0x30
 80088ec:	f805 3b01 	strb.w	r3, [r5], #1
 80088f0:	ec53 2b18 	vmov	r2, r3, d8
 80088f4:	4606      	mov	r6, r0
 80088f6:	460f      	mov	r7, r1
 80088f8:	f7f8 f8f0 	bl	8000adc <__aeabi_dcmplt>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d165      	bne.n	80089cc <_dtoa_r+0x63c>
 8008900:	4632      	mov	r2, r6
 8008902:	463b      	mov	r3, r7
 8008904:	4935      	ldr	r1, [pc, #212]	; (80089dc <_dtoa_r+0x64c>)
 8008906:	2000      	movs	r0, #0
 8008908:	f7f7 fcbe 	bl	8000288 <__aeabi_dsub>
 800890c:	ec53 2b18 	vmov	r2, r3, d8
 8008910:	f7f8 f8e4 	bl	8000adc <__aeabi_dcmplt>
 8008914:	2800      	cmp	r0, #0
 8008916:	f040 80b9 	bne.w	8008a8c <_dtoa_r+0x6fc>
 800891a:	9b02      	ldr	r3, [sp, #8]
 800891c:	429d      	cmp	r5, r3
 800891e:	f43f af75 	beq.w	800880c <_dtoa_r+0x47c>
 8008922:	4b2f      	ldr	r3, [pc, #188]	; (80089e0 <_dtoa_r+0x650>)
 8008924:	ec51 0b18 	vmov	r0, r1, d8
 8008928:	2200      	movs	r2, #0
 800892a:	f7f7 fe65 	bl	80005f8 <__aeabi_dmul>
 800892e:	4b2c      	ldr	r3, [pc, #176]	; (80089e0 <_dtoa_r+0x650>)
 8008930:	ec41 0b18 	vmov	d8, r0, r1
 8008934:	2200      	movs	r2, #0
 8008936:	4630      	mov	r0, r6
 8008938:	4639      	mov	r1, r7
 800893a:	f7f7 fe5d 	bl	80005f8 <__aeabi_dmul>
 800893e:	4606      	mov	r6, r0
 8008940:	460f      	mov	r7, r1
 8008942:	e7c4      	b.n	80088ce <_dtoa_r+0x53e>
 8008944:	ec51 0b17 	vmov	r0, r1, d7
 8008948:	f7f7 fe56 	bl	80005f8 <__aeabi_dmul>
 800894c:	9b02      	ldr	r3, [sp, #8]
 800894e:	9d00      	ldr	r5, [sp, #0]
 8008950:	930c      	str	r3, [sp, #48]	; 0x30
 8008952:	ec41 0b18 	vmov	d8, r0, r1
 8008956:	4639      	mov	r1, r7
 8008958:	4630      	mov	r0, r6
 800895a:	f7f8 f8fd 	bl	8000b58 <__aeabi_d2iz>
 800895e:	9011      	str	r0, [sp, #68]	; 0x44
 8008960:	f7f7 fde0 	bl	8000524 <__aeabi_i2d>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	4630      	mov	r0, r6
 800896a:	4639      	mov	r1, r7
 800896c:	f7f7 fc8c 	bl	8000288 <__aeabi_dsub>
 8008970:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008972:	3330      	adds	r3, #48	; 0x30
 8008974:	f805 3b01 	strb.w	r3, [r5], #1
 8008978:	9b02      	ldr	r3, [sp, #8]
 800897a:	429d      	cmp	r5, r3
 800897c:	4606      	mov	r6, r0
 800897e:	460f      	mov	r7, r1
 8008980:	f04f 0200 	mov.w	r2, #0
 8008984:	d134      	bne.n	80089f0 <_dtoa_r+0x660>
 8008986:	4b19      	ldr	r3, [pc, #100]	; (80089ec <_dtoa_r+0x65c>)
 8008988:	ec51 0b18 	vmov	r0, r1, d8
 800898c:	f7f7 fc7e 	bl	800028c <__adddf3>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	4630      	mov	r0, r6
 8008996:	4639      	mov	r1, r7
 8008998:	f7f8 f8be 	bl	8000b18 <__aeabi_dcmpgt>
 800899c:	2800      	cmp	r0, #0
 800899e:	d175      	bne.n	8008a8c <_dtoa_r+0x6fc>
 80089a0:	ec53 2b18 	vmov	r2, r3, d8
 80089a4:	4911      	ldr	r1, [pc, #68]	; (80089ec <_dtoa_r+0x65c>)
 80089a6:	2000      	movs	r0, #0
 80089a8:	f7f7 fc6e 	bl	8000288 <__aeabi_dsub>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	4630      	mov	r0, r6
 80089b2:	4639      	mov	r1, r7
 80089b4:	f7f8 f892 	bl	8000adc <__aeabi_dcmplt>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	f43f af27 	beq.w	800880c <_dtoa_r+0x47c>
 80089be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089c0:	1e6b      	subs	r3, r5, #1
 80089c2:	930c      	str	r3, [sp, #48]	; 0x30
 80089c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089c8:	2b30      	cmp	r3, #48	; 0x30
 80089ca:	d0f8      	beq.n	80089be <_dtoa_r+0x62e>
 80089cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80089d0:	e04a      	b.n	8008a68 <_dtoa_r+0x6d8>
 80089d2:	bf00      	nop
 80089d4:	0800b3a8 	.word	0x0800b3a8
 80089d8:	0800b380 	.word	0x0800b380
 80089dc:	3ff00000 	.word	0x3ff00000
 80089e0:	40240000 	.word	0x40240000
 80089e4:	401c0000 	.word	0x401c0000
 80089e8:	40140000 	.word	0x40140000
 80089ec:	3fe00000 	.word	0x3fe00000
 80089f0:	4baf      	ldr	r3, [pc, #700]	; (8008cb0 <_dtoa_r+0x920>)
 80089f2:	f7f7 fe01 	bl	80005f8 <__aeabi_dmul>
 80089f6:	4606      	mov	r6, r0
 80089f8:	460f      	mov	r7, r1
 80089fa:	e7ac      	b.n	8008956 <_dtoa_r+0x5c6>
 80089fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008a00:	9d00      	ldr	r5, [sp, #0]
 8008a02:	4642      	mov	r2, r8
 8008a04:	464b      	mov	r3, r9
 8008a06:	4630      	mov	r0, r6
 8008a08:	4639      	mov	r1, r7
 8008a0a:	f7f7 ff1f 	bl	800084c <__aeabi_ddiv>
 8008a0e:	f7f8 f8a3 	bl	8000b58 <__aeabi_d2iz>
 8008a12:	9002      	str	r0, [sp, #8]
 8008a14:	f7f7 fd86 	bl	8000524 <__aeabi_i2d>
 8008a18:	4642      	mov	r2, r8
 8008a1a:	464b      	mov	r3, r9
 8008a1c:	f7f7 fdec 	bl	80005f8 <__aeabi_dmul>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4630      	mov	r0, r6
 8008a26:	4639      	mov	r1, r7
 8008a28:	f7f7 fc2e 	bl	8000288 <__aeabi_dsub>
 8008a2c:	9e02      	ldr	r6, [sp, #8]
 8008a2e:	9f01      	ldr	r7, [sp, #4]
 8008a30:	3630      	adds	r6, #48	; 0x30
 8008a32:	f805 6b01 	strb.w	r6, [r5], #1
 8008a36:	9e00      	ldr	r6, [sp, #0]
 8008a38:	1bae      	subs	r6, r5, r6
 8008a3a:	42b7      	cmp	r7, r6
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	d137      	bne.n	8008ab2 <_dtoa_r+0x722>
 8008a42:	f7f7 fc23 	bl	800028c <__adddf3>
 8008a46:	4642      	mov	r2, r8
 8008a48:	464b      	mov	r3, r9
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	460f      	mov	r7, r1
 8008a4e:	f7f8 f863 	bl	8000b18 <__aeabi_dcmpgt>
 8008a52:	b9c8      	cbnz	r0, 8008a88 <_dtoa_r+0x6f8>
 8008a54:	4642      	mov	r2, r8
 8008a56:	464b      	mov	r3, r9
 8008a58:	4630      	mov	r0, r6
 8008a5a:	4639      	mov	r1, r7
 8008a5c:	f7f8 f834 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a60:	b110      	cbz	r0, 8008a68 <_dtoa_r+0x6d8>
 8008a62:	9b02      	ldr	r3, [sp, #8]
 8008a64:	07d9      	lsls	r1, r3, #31
 8008a66:	d40f      	bmi.n	8008a88 <_dtoa_r+0x6f8>
 8008a68:	4620      	mov	r0, r4
 8008a6a:	4659      	mov	r1, fp
 8008a6c:	f000 fe4a 	bl	8009704 <_Bfree>
 8008a70:	2300      	movs	r3, #0
 8008a72:	702b      	strb	r3, [r5, #0]
 8008a74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a76:	f10a 0001 	add.w	r0, sl, #1
 8008a7a:	6018      	str	r0, [r3, #0]
 8008a7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f43f acd8 	beq.w	8008434 <_dtoa_r+0xa4>
 8008a84:	601d      	str	r5, [r3, #0]
 8008a86:	e4d5      	b.n	8008434 <_dtoa_r+0xa4>
 8008a88:	f8cd a01c 	str.w	sl, [sp, #28]
 8008a8c:	462b      	mov	r3, r5
 8008a8e:	461d      	mov	r5, r3
 8008a90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a94:	2a39      	cmp	r2, #57	; 0x39
 8008a96:	d108      	bne.n	8008aaa <_dtoa_r+0x71a>
 8008a98:	9a00      	ldr	r2, [sp, #0]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d1f7      	bne.n	8008a8e <_dtoa_r+0x6fe>
 8008a9e:	9a07      	ldr	r2, [sp, #28]
 8008aa0:	9900      	ldr	r1, [sp, #0]
 8008aa2:	3201      	adds	r2, #1
 8008aa4:	9207      	str	r2, [sp, #28]
 8008aa6:	2230      	movs	r2, #48	; 0x30
 8008aa8:	700a      	strb	r2, [r1, #0]
 8008aaa:	781a      	ldrb	r2, [r3, #0]
 8008aac:	3201      	adds	r2, #1
 8008aae:	701a      	strb	r2, [r3, #0]
 8008ab0:	e78c      	b.n	80089cc <_dtoa_r+0x63c>
 8008ab2:	4b7f      	ldr	r3, [pc, #508]	; (8008cb0 <_dtoa_r+0x920>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f7f7 fd9f 	bl	80005f8 <__aeabi_dmul>
 8008aba:	2200      	movs	r2, #0
 8008abc:	2300      	movs	r3, #0
 8008abe:	4606      	mov	r6, r0
 8008ac0:	460f      	mov	r7, r1
 8008ac2:	f7f8 f801 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d09b      	beq.n	8008a02 <_dtoa_r+0x672>
 8008aca:	e7cd      	b.n	8008a68 <_dtoa_r+0x6d8>
 8008acc:	9a08      	ldr	r2, [sp, #32]
 8008ace:	2a00      	cmp	r2, #0
 8008ad0:	f000 80c4 	beq.w	8008c5c <_dtoa_r+0x8cc>
 8008ad4:	9a05      	ldr	r2, [sp, #20]
 8008ad6:	2a01      	cmp	r2, #1
 8008ad8:	f300 80a8 	bgt.w	8008c2c <_dtoa_r+0x89c>
 8008adc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ade:	2a00      	cmp	r2, #0
 8008ae0:	f000 80a0 	beq.w	8008c24 <_dtoa_r+0x894>
 8008ae4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ae8:	9e06      	ldr	r6, [sp, #24]
 8008aea:	4645      	mov	r5, r8
 8008aec:	9a04      	ldr	r2, [sp, #16]
 8008aee:	2101      	movs	r1, #1
 8008af0:	441a      	add	r2, r3
 8008af2:	4620      	mov	r0, r4
 8008af4:	4498      	add	r8, r3
 8008af6:	9204      	str	r2, [sp, #16]
 8008af8:	f000 ff0a 	bl	8009910 <__i2b>
 8008afc:	4607      	mov	r7, r0
 8008afe:	2d00      	cmp	r5, #0
 8008b00:	dd0b      	ble.n	8008b1a <_dtoa_r+0x78a>
 8008b02:	9b04      	ldr	r3, [sp, #16]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	dd08      	ble.n	8008b1a <_dtoa_r+0x78a>
 8008b08:	42ab      	cmp	r3, r5
 8008b0a:	9a04      	ldr	r2, [sp, #16]
 8008b0c:	bfa8      	it	ge
 8008b0e:	462b      	movge	r3, r5
 8008b10:	eba8 0803 	sub.w	r8, r8, r3
 8008b14:	1aed      	subs	r5, r5, r3
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	9304      	str	r3, [sp, #16]
 8008b1a:	9b06      	ldr	r3, [sp, #24]
 8008b1c:	b1fb      	cbz	r3, 8008b5e <_dtoa_r+0x7ce>
 8008b1e:	9b08      	ldr	r3, [sp, #32]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 809f 	beq.w	8008c64 <_dtoa_r+0x8d4>
 8008b26:	2e00      	cmp	r6, #0
 8008b28:	dd11      	ble.n	8008b4e <_dtoa_r+0x7be>
 8008b2a:	4639      	mov	r1, r7
 8008b2c:	4632      	mov	r2, r6
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 ffaa 	bl	8009a88 <__pow5mult>
 8008b34:	465a      	mov	r2, fp
 8008b36:	4601      	mov	r1, r0
 8008b38:	4607      	mov	r7, r0
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 fefe 	bl	800993c <__multiply>
 8008b40:	4659      	mov	r1, fp
 8008b42:	9007      	str	r0, [sp, #28]
 8008b44:	4620      	mov	r0, r4
 8008b46:	f000 fddd 	bl	8009704 <_Bfree>
 8008b4a:	9b07      	ldr	r3, [sp, #28]
 8008b4c:	469b      	mov	fp, r3
 8008b4e:	9b06      	ldr	r3, [sp, #24]
 8008b50:	1b9a      	subs	r2, r3, r6
 8008b52:	d004      	beq.n	8008b5e <_dtoa_r+0x7ce>
 8008b54:	4659      	mov	r1, fp
 8008b56:	4620      	mov	r0, r4
 8008b58:	f000 ff96 	bl	8009a88 <__pow5mult>
 8008b5c:	4683      	mov	fp, r0
 8008b5e:	2101      	movs	r1, #1
 8008b60:	4620      	mov	r0, r4
 8008b62:	f000 fed5 	bl	8009910 <__i2b>
 8008b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	dd7c      	ble.n	8008c68 <_dtoa_r+0x8d8>
 8008b6e:	461a      	mov	r2, r3
 8008b70:	4601      	mov	r1, r0
 8008b72:	4620      	mov	r0, r4
 8008b74:	f000 ff88 	bl	8009a88 <__pow5mult>
 8008b78:	9b05      	ldr	r3, [sp, #20]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	dd76      	ble.n	8008c6e <_dtoa_r+0x8de>
 8008b80:	2300      	movs	r3, #0
 8008b82:	9306      	str	r3, [sp, #24]
 8008b84:	6933      	ldr	r3, [r6, #16]
 8008b86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b8a:	6918      	ldr	r0, [r3, #16]
 8008b8c:	f000 fe70 	bl	8009870 <__hi0bits>
 8008b90:	f1c0 0020 	rsb	r0, r0, #32
 8008b94:	9b04      	ldr	r3, [sp, #16]
 8008b96:	4418      	add	r0, r3
 8008b98:	f010 001f 	ands.w	r0, r0, #31
 8008b9c:	f000 8086 	beq.w	8008cac <_dtoa_r+0x91c>
 8008ba0:	f1c0 0320 	rsb	r3, r0, #32
 8008ba4:	2b04      	cmp	r3, #4
 8008ba6:	dd7f      	ble.n	8008ca8 <_dtoa_r+0x918>
 8008ba8:	f1c0 001c 	rsb	r0, r0, #28
 8008bac:	9b04      	ldr	r3, [sp, #16]
 8008bae:	4403      	add	r3, r0
 8008bb0:	4480      	add	r8, r0
 8008bb2:	4405      	add	r5, r0
 8008bb4:	9304      	str	r3, [sp, #16]
 8008bb6:	f1b8 0f00 	cmp.w	r8, #0
 8008bba:	dd05      	ble.n	8008bc8 <_dtoa_r+0x838>
 8008bbc:	4659      	mov	r1, fp
 8008bbe:	4642      	mov	r2, r8
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f000 ffbb 	bl	8009b3c <__lshift>
 8008bc6:	4683      	mov	fp, r0
 8008bc8:	9b04      	ldr	r3, [sp, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	dd05      	ble.n	8008bda <_dtoa_r+0x84a>
 8008bce:	4631      	mov	r1, r6
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f000 ffb2 	bl	8009b3c <__lshift>
 8008bd8:	4606      	mov	r6, r0
 8008bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d069      	beq.n	8008cb4 <_dtoa_r+0x924>
 8008be0:	4631      	mov	r1, r6
 8008be2:	4658      	mov	r0, fp
 8008be4:	f001 f816 	bl	8009c14 <__mcmp>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	da63      	bge.n	8008cb4 <_dtoa_r+0x924>
 8008bec:	2300      	movs	r3, #0
 8008bee:	4659      	mov	r1, fp
 8008bf0:	220a      	movs	r2, #10
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 fda8 	bl	8009748 <__multadd>
 8008bf8:	9b08      	ldr	r3, [sp, #32]
 8008bfa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008bfe:	4683      	mov	fp, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 818f 	beq.w	8008f24 <_dtoa_r+0xb94>
 8008c06:	4639      	mov	r1, r7
 8008c08:	2300      	movs	r3, #0
 8008c0a:	220a      	movs	r2, #10
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f000 fd9b 	bl	8009748 <__multadd>
 8008c12:	f1b9 0f00 	cmp.w	r9, #0
 8008c16:	4607      	mov	r7, r0
 8008c18:	f300 808e 	bgt.w	8008d38 <_dtoa_r+0x9a8>
 8008c1c:	9b05      	ldr	r3, [sp, #20]
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	dc50      	bgt.n	8008cc4 <_dtoa_r+0x934>
 8008c22:	e089      	b.n	8008d38 <_dtoa_r+0x9a8>
 8008c24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c2a:	e75d      	b.n	8008ae8 <_dtoa_r+0x758>
 8008c2c:	9b01      	ldr	r3, [sp, #4]
 8008c2e:	1e5e      	subs	r6, r3, #1
 8008c30:	9b06      	ldr	r3, [sp, #24]
 8008c32:	42b3      	cmp	r3, r6
 8008c34:	bfbf      	itttt	lt
 8008c36:	9b06      	ldrlt	r3, [sp, #24]
 8008c38:	9606      	strlt	r6, [sp, #24]
 8008c3a:	1af2      	sublt	r2, r6, r3
 8008c3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008c3e:	bfb6      	itet	lt
 8008c40:	189b      	addlt	r3, r3, r2
 8008c42:	1b9e      	subge	r6, r3, r6
 8008c44:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008c46:	9b01      	ldr	r3, [sp, #4]
 8008c48:	bfb8      	it	lt
 8008c4a:	2600      	movlt	r6, #0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	bfb5      	itete	lt
 8008c50:	eba8 0503 	sublt.w	r5, r8, r3
 8008c54:	9b01      	ldrge	r3, [sp, #4]
 8008c56:	2300      	movlt	r3, #0
 8008c58:	4645      	movge	r5, r8
 8008c5a:	e747      	b.n	8008aec <_dtoa_r+0x75c>
 8008c5c:	9e06      	ldr	r6, [sp, #24]
 8008c5e:	9f08      	ldr	r7, [sp, #32]
 8008c60:	4645      	mov	r5, r8
 8008c62:	e74c      	b.n	8008afe <_dtoa_r+0x76e>
 8008c64:	9a06      	ldr	r2, [sp, #24]
 8008c66:	e775      	b.n	8008b54 <_dtoa_r+0x7c4>
 8008c68:	9b05      	ldr	r3, [sp, #20]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	dc18      	bgt.n	8008ca0 <_dtoa_r+0x910>
 8008c6e:	9b02      	ldr	r3, [sp, #8]
 8008c70:	b9b3      	cbnz	r3, 8008ca0 <_dtoa_r+0x910>
 8008c72:	9b03      	ldr	r3, [sp, #12]
 8008c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c78:	b9a3      	cbnz	r3, 8008ca4 <_dtoa_r+0x914>
 8008c7a:	9b03      	ldr	r3, [sp, #12]
 8008c7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c80:	0d1b      	lsrs	r3, r3, #20
 8008c82:	051b      	lsls	r3, r3, #20
 8008c84:	b12b      	cbz	r3, 8008c92 <_dtoa_r+0x902>
 8008c86:	9b04      	ldr	r3, [sp, #16]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	9304      	str	r3, [sp, #16]
 8008c8c:	f108 0801 	add.w	r8, r8, #1
 8008c90:	2301      	movs	r3, #1
 8008c92:	9306      	str	r3, [sp, #24]
 8008c94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f47f af74 	bne.w	8008b84 <_dtoa_r+0x7f4>
 8008c9c:	2001      	movs	r0, #1
 8008c9e:	e779      	b.n	8008b94 <_dtoa_r+0x804>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	e7f6      	b.n	8008c92 <_dtoa_r+0x902>
 8008ca4:	9b02      	ldr	r3, [sp, #8]
 8008ca6:	e7f4      	b.n	8008c92 <_dtoa_r+0x902>
 8008ca8:	d085      	beq.n	8008bb6 <_dtoa_r+0x826>
 8008caa:	4618      	mov	r0, r3
 8008cac:	301c      	adds	r0, #28
 8008cae:	e77d      	b.n	8008bac <_dtoa_r+0x81c>
 8008cb0:	40240000 	.word	0x40240000
 8008cb4:	9b01      	ldr	r3, [sp, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	dc38      	bgt.n	8008d2c <_dtoa_r+0x99c>
 8008cba:	9b05      	ldr	r3, [sp, #20]
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	dd35      	ble.n	8008d2c <_dtoa_r+0x99c>
 8008cc0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008cc4:	f1b9 0f00 	cmp.w	r9, #0
 8008cc8:	d10d      	bne.n	8008ce6 <_dtoa_r+0x956>
 8008cca:	4631      	mov	r1, r6
 8008ccc:	464b      	mov	r3, r9
 8008cce:	2205      	movs	r2, #5
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f000 fd39 	bl	8009748 <__multadd>
 8008cd6:	4601      	mov	r1, r0
 8008cd8:	4606      	mov	r6, r0
 8008cda:	4658      	mov	r0, fp
 8008cdc:	f000 ff9a 	bl	8009c14 <__mcmp>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	f73f adbd 	bgt.w	8008860 <_dtoa_r+0x4d0>
 8008ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ce8:	9d00      	ldr	r5, [sp, #0]
 8008cea:	ea6f 0a03 	mvn.w	sl, r3
 8008cee:	f04f 0800 	mov.w	r8, #0
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f000 fd05 	bl	8009704 <_Bfree>
 8008cfa:	2f00      	cmp	r7, #0
 8008cfc:	f43f aeb4 	beq.w	8008a68 <_dtoa_r+0x6d8>
 8008d00:	f1b8 0f00 	cmp.w	r8, #0
 8008d04:	d005      	beq.n	8008d12 <_dtoa_r+0x982>
 8008d06:	45b8      	cmp	r8, r7
 8008d08:	d003      	beq.n	8008d12 <_dtoa_r+0x982>
 8008d0a:	4641      	mov	r1, r8
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f000 fcf9 	bl	8009704 <_Bfree>
 8008d12:	4639      	mov	r1, r7
 8008d14:	4620      	mov	r0, r4
 8008d16:	f000 fcf5 	bl	8009704 <_Bfree>
 8008d1a:	e6a5      	b.n	8008a68 <_dtoa_r+0x6d8>
 8008d1c:	2600      	movs	r6, #0
 8008d1e:	4637      	mov	r7, r6
 8008d20:	e7e1      	b.n	8008ce6 <_dtoa_r+0x956>
 8008d22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008d24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008d28:	4637      	mov	r7, r6
 8008d2a:	e599      	b.n	8008860 <_dtoa_r+0x4d0>
 8008d2c:	9b08      	ldr	r3, [sp, #32]
 8008d2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 80fd 	beq.w	8008f32 <_dtoa_r+0xba2>
 8008d38:	2d00      	cmp	r5, #0
 8008d3a:	dd05      	ble.n	8008d48 <_dtoa_r+0x9b8>
 8008d3c:	4639      	mov	r1, r7
 8008d3e:	462a      	mov	r2, r5
 8008d40:	4620      	mov	r0, r4
 8008d42:	f000 fefb 	bl	8009b3c <__lshift>
 8008d46:	4607      	mov	r7, r0
 8008d48:	9b06      	ldr	r3, [sp, #24]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d05c      	beq.n	8008e08 <_dtoa_r+0xa78>
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	4620      	mov	r0, r4
 8008d52:	f000 fc97 	bl	8009684 <_Balloc>
 8008d56:	4605      	mov	r5, r0
 8008d58:	b928      	cbnz	r0, 8008d66 <_dtoa_r+0x9d6>
 8008d5a:	4b80      	ldr	r3, [pc, #512]	; (8008f5c <_dtoa_r+0xbcc>)
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d62:	f7ff bb2e 	b.w	80083c2 <_dtoa_r+0x32>
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	3202      	adds	r2, #2
 8008d6a:	0092      	lsls	r2, r2, #2
 8008d6c:	f107 010c 	add.w	r1, r7, #12
 8008d70:	300c      	adds	r0, #12
 8008d72:	f7fd fd15 	bl	80067a0 <memcpy>
 8008d76:	2201      	movs	r2, #1
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f000 fede 	bl	8009b3c <__lshift>
 8008d80:	9b00      	ldr	r3, [sp, #0]
 8008d82:	3301      	adds	r3, #1
 8008d84:	9301      	str	r3, [sp, #4]
 8008d86:	9b00      	ldr	r3, [sp, #0]
 8008d88:	444b      	add	r3, r9
 8008d8a:	9307      	str	r3, [sp, #28]
 8008d8c:	9b02      	ldr	r3, [sp, #8]
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	46b8      	mov	r8, r7
 8008d94:	9306      	str	r3, [sp, #24]
 8008d96:	4607      	mov	r7, r0
 8008d98:	9b01      	ldr	r3, [sp, #4]
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	4658      	mov	r0, fp
 8008da0:	9302      	str	r3, [sp, #8]
 8008da2:	f7ff fa67 	bl	8008274 <quorem>
 8008da6:	4603      	mov	r3, r0
 8008da8:	3330      	adds	r3, #48	; 0x30
 8008daa:	9004      	str	r0, [sp, #16]
 8008dac:	4641      	mov	r1, r8
 8008dae:	4658      	mov	r0, fp
 8008db0:	9308      	str	r3, [sp, #32]
 8008db2:	f000 ff2f 	bl	8009c14 <__mcmp>
 8008db6:	463a      	mov	r2, r7
 8008db8:	4681      	mov	r9, r0
 8008dba:	4631      	mov	r1, r6
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f000 ff45 	bl	8009c4c <__mdiff>
 8008dc2:	68c2      	ldr	r2, [r0, #12]
 8008dc4:	9b08      	ldr	r3, [sp, #32]
 8008dc6:	4605      	mov	r5, r0
 8008dc8:	bb02      	cbnz	r2, 8008e0c <_dtoa_r+0xa7c>
 8008dca:	4601      	mov	r1, r0
 8008dcc:	4658      	mov	r0, fp
 8008dce:	f000 ff21 	bl	8009c14 <__mcmp>
 8008dd2:	9b08      	ldr	r3, [sp, #32]
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	4620      	mov	r0, r4
 8008dda:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008dde:	f000 fc91 	bl	8009704 <_Bfree>
 8008de2:	9b05      	ldr	r3, [sp, #20]
 8008de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008de6:	9d01      	ldr	r5, [sp, #4]
 8008de8:	ea43 0102 	orr.w	r1, r3, r2
 8008dec:	9b06      	ldr	r3, [sp, #24]
 8008dee:	430b      	orrs	r3, r1
 8008df0:	9b08      	ldr	r3, [sp, #32]
 8008df2:	d10d      	bne.n	8008e10 <_dtoa_r+0xa80>
 8008df4:	2b39      	cmp	r3, #57	; 0x39
 8008df6:	d029      	beq.n	8008e4c <_dtoa_r+0xabc>
 8008df8:	f1b9 0f00 	cmp.w	r9, #0
 8008dfc:	dd01      	ble.n	8008e02 <_dtoa_r+0xa72>
 8008dfe:	9b04      	ldr	r3, [sp, #16]
 8008e00:	3331      	adds	r3, #49	; 0x31
 8008e02:	9a02      	ldr	r2, [sp, #8]
 8008e04:	7013      	strb	r3, [r2, #0]
 8008e06:	e774      	b.n	8008cf2 <_dtoa_r+0x962>
 8008e08:	4638      	mov	r0, r7
 8008e0a:	e7b9      	b.n	8008d80 <_dtoa_r+0x9f0>
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	e7e2      	b.n	8008dd6 <_dtoa_r+0xa46>
 8008e10:	f1b9 0f00 	cmp.w	r9, #0
 8008e14:	db06      	blt.n	8008e24 <_dtoa_r+0xa94>
 8008e16:	9905      	ldr	r1, [sp, #20]
 8008e18:	ea41 0909 	orr.w	r9, r1, r9
 8008e1c:	9906      	ldr	r1, [sp, #24]
 8008e1e:	ea59 0101 	orrs.w	r1, r9, r1
 8008e22:	d120      	bne.n	8008e66 <_dtoa_r+0xad6>
 8008e24:	2a00      	cmp	r2, #0
 8008e26:	ddec      	ble.n	8008e02 <_dtoa_r+0xa72>
 8008e28:	4659      	mov	r1, fp
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	9301      	str	r3, [sp, #4]
 8008e30:	f000 fe84 	bl	8009b3c <__lshift>
 8008e34:	4631      	mov	r1, r6
 8008e36:	4683      	mov	fp, r0
 8008e38:	f000 feec 	bl	8009c14 <__mcmp>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	9b01      	ldr	r3, [sp, #4]
 8008e40:	dc02      	bgt.n	8008e48 <_dtoa_r+0xab8>
 8008e42:	d1de      	bne.n	8008e02 <_dtoa_r+0xa72>
 8008e44:	07da      	lsls	r2, r3, #31
 8008e46:	d5dc      	bpl.n	8008e02 <_dtoa_r+0xa72>
 8008e48:	2b39      	cmp	r3, #57	; 0x39
 8008e4a:	d1d8      	bne.n	8008dfe <_dtoa_r+0xa6e>
 8008e4c:	9a02      	ldr	r2, [sp, #8]
 8008e4e:	2339      	movs	r3, #57	; 0x39
 8008e50:	7013      	strb	r3, [r2, #0]
 8008e52:	462b      	mov	r3, r5
 8008e54:	461d      	mov	r5, r3
 8008e56:	3b01      	subs	r3, #1
 8008e58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e5c:	2a39      	cmp	r2, #57	; 0x39
 8008e5e:	d050      	beq.n	8008f02 <_dtoa_r+0xb72>
 8008e60:	3201      	adds	r2, #1
 8008e62:	701a      	strb	r2, [r3, #0]
 8008e64:	e745      	b.n	8008cf2 <_dtoa_r+0x962>
 8008e66:	2a00      	cmp	r2, #0
 8008e68:	dd03      	ble.n	8008e72 <_dtoa_r+0xae2>
 8008e6a:	2b39      	cmp	r3, #57	; 0x39
 8008e6c:	d0ee      	beq.n	8008e4c <_dtoa_r+0xabc>
 8008e6e:	3301      	adds	r3, #1
 8008e70:	e7c7      	b.n	8008e02 <_dtoa_r+0xa72>
 8008e72:	9a01      	ldr	r2, [sp, #4]
 8008e74:	9907      	ldr	r1, [sp, #28]
 8008e76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e7a:	428a      	cmp	r2, r1
 8008e7c:	d02a      	beq.n	8008ed4 <_dtoa_r+0xb44>
 8008e7e:	4659      	mov	r1, fp
 8008e80:	2300      	movs	r3, #0
 8008e82:	220a      	movs	r2, #10
 8008e84:	4620      	mov	r0, r4
 8008e86:	f000 fc5f 	bl	8009748 <__multadd>
 8008e8a:	45b8      	cmp	r8, r7
 8008e8c:	4683      	mov	fp, r0
 8008e8e:	f04f 0300 	mov.w	r3, #0
 8008e92:	f04f 020a 	mov.w	r2, #10
 8008e96:	4641      	mov	r1, r8
 8008e98:	4620      	mov	r0, r4
 8008e9a:	d107      	bne.n	8008eac <_dtoa_r+0xb1c>
 8008e9c:	f000 fc54 	bl	8009748 <__multadd>
 8008ea0:	4680      	mov	r8, r0
 8008ea2:	4607      	mov	r7, r0
 8008ea4:	9b01      	ldr	r3, [sp, #4]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	e775      	b.n	8008d98 <_dtoa_r+0xa08>
 8008eac:	f000 fc4c 	bl	8009748 <__multadd>
 8008eb0:	4639      	mov	r1, r7
 8008eb2:	4680      	mov	r8, r0
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	220a      	movs	r2, #10
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f000 fc45 	bl	8009748 <__multadd>
 8008ebe:	4607      	mov	r7, r0
 8008ec0:	e7f0      	b.n	8008ea4 <_dtoa_r+0xb14>
 8008ec2:	f1b9 0f00 	cmp.w	r9, #0
 8008ec6:	9a00      	ldr	r2, [sp, #0]
 8008ec8:	bfcc      	ite	gt
 8008eca:	464d      	movgt	r5, r9
 8008ecc:	2501      	movle	r5, #1
 8008ece:	4415      	add	r5, r2
 8008ed0:	f04f 0800 	mov.w	r8, #0
 8008ed4:	4659      	mov	r1, fp
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	4620      	mov	r0, r4
 8008eda:	9301      	str	r3, [sp, #4]
 8008edc:	f000 fe2e 	bl	8009b3c <__lshift>
 8008ee0:	4631      	mov	r1, r6
 8008ee2:	4683      	mov	fp, r0
 8008ee4:	f000 fe96 	bl	8009c14 <__mcmp>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	dcb2      	bgt.n	8008e52 <_dtoa_r+0xac2>
 8008eec:	d102      	bne.n	8008ef4 <_dtoa_r+0xb64>
 8008eee:	9b01      	ldr	r3, [sp, #4]
 8008ef0:	07db      	lsls	r3, r3, #31
 8008ef2:	d4ae      	bmi.n	8008e52 <_dtoa_r+0xac2>
 8008ef4:	462b      	mov	r3, r5
 8008ef6:	461d      	mov	r5, r3
 8008ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008efc:	2a30      	cmp	r2, #48	; 0x30
 8008efe:	d0fa      	beq.n	8008ef6 <_dtoa_r+0xb66>
 8008f00:	e6f7      	b.n	8008cf2 <_dtoa_r+0x962>
 8008f02:	9a00      	ldr	r2, [sp, #0]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d1a5      	bne.n	8008e54 <_dtoa_r+0xac4>
 8008f08:	f10a 0a01 	add.w	sl, sl, #1
 8008f0c:	2331      	movs	r3, #49	; 0x31
 8008f0e:	e779      	b.n	8008e04 <_dtoa_r+0xa74>
 8008f10:	4b13      	ldr	r3, [pc, #76]	; (8008f60 <_dtoa_r+0xbd0>)
 8008f12:	f7ff baaf 	b.w	8008474 <_dtoa_r+0xe4>
 8008f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f47f aa86 	bne.w	800842a <_dtoa_r+0x9a>
 8008f1e:	4b11      	ldr	r3, [pc, #68]	; (8008f64 <_dtoa_r+0xbd4>)
 8008f20:	f7ff baa8 	b.w	8008474 <_dtoa_r+0xe4>
 8008f24:	f1b9 0f00 	cmp.w	r9, #0
 8008f28:	dc03      	bgt.n	8008f32 <_dtoa_r+0xba2>
 8008f2a:	9b05      	ldr	r3, [sp, #20]
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	f73f aec9 	bgt.w	8008cc4 <_dtoa_r+0x934>
 8008f32:	9d00      	ldr	r5, [sp, #0]
 8008f34:	4631      	mov	r1, r6
 8008f36:	4658      	mov	r0, fp
 8008f38:	f7ff f99c 	bl	8008274 <quorem>
 8008f3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008f40:	f805 3b01 	strb.w	r3, [r5], #1
 8008f44:	9a00      	ldr	r2, [sp, #0]
 8008f46:	1aaa      	subs	r2, r5, r2
 8008f48:	4591      	cmp	r9, r2
 8008f4a:	ddba      	ble.n	8008ec2 <_dtoa_r+0xb32>
 8008f4c:	4659      	mov	r1, fp
 8008f4e:	2300      	movs	r3, #0
 8008f50:	220a      	movs	r2, #10
 8008f52:	4620      	mov	r0, r4
 8008f54:	f000 fbf8 	bl	8009748 <__multadd>
 8008f58:	4683      	mov	fp, r0
 8008f5a:	e7eb      	b.n	8008f34 <_dtoa_r+0xba4>
 8008f5c:	0800b28c 	.word	0x0800b28c
 8008f60:	0800b08c 	.word	0x0800b08c
 8008f64:	0800b209 	.word	0x0800b209

08008f68 <rshift>:
 8008f68:	6903      	ldr	r3, [r0, #16]
 8008f6a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008f6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f72:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008f76:	f100 0414 	add.w	r4, r0, #20
 8008f7a:	dd45      	ble.n	8009008 <rshift+0xa0>
 8008f7c:	f011 011f 	ands.w	r1, r1, #31
 8008f80:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008f84:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008f88:	d10c      	bne.n	8008fa4 <rshift+0x3c>
 8008f8a:	f100 0710 	add.w	r7, r0, #16
 8008f8e:	4629      	mov	r1, r5
 8008f90:	42b1      	cmp	r1, r6
 8008f92:	d334      	bcc.n	8008ffe <rshift+0x96>
 8008f94:	1a9b      	subs	r3, r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	1eea      	subs	r2, r5, #3
 8008f9a:	4296      	cmp	r6, r2
 8008f9c:	bf38      	it	cc
 8008f9e:	2300      	movcc	r3, #0
 8008fa0:	4423      	add	r3, r4
 8008fa2:	e015      	b.n	8008fd0 <rshift+0x68>
 8008fa4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008fa8:	f1c1 0820 	rsb	r8, r1, #32
 8008fac:	40cf      	lsrs	r7, r1
 8008fae:	f105 0e04 	add.w	lr, r5, #4
 8008fb2:	46a1      	mov	r9, r4
 8008fb4:	4576      	cmp	r6, lr
 8008fb6:	46f4      	mov	ip, lr
 8008fb8:	d815      	bhi.n	8008fe6 <rshift+0x7e>
 8008fba:	1a9b      	subs	r3, r3, r2
 8008fbc:	009a      	lsls	r2, r3, #2
 8008fbe:	3a04      	subs	r2, #4
 8008fc0:	3501      	adds	r5, #1
 8008fc2:	42ae      	cmp	r6, r5
 8008fc4:	bf38      	it	cc
 8008fc6:	2200      	movcc	r2, #0
 8008fc8:	18a3      	adds	r3, r4, r2
 8008fca:	50a7      	str	r7, [r4, r2]
 8008fcc:	b107      	cbz	r7, 8008fd0 <rshift+0x68>
 8008fce:	3304      	adds	r3, #4
 8008fd0:	1b1a      	subs	r2, r3, r4
 8008fd2:	42a3      	cmp	r3, r4
 8008fd4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008fd8:	bf08      	it	eq
 8008fda:	2300      	moveq	r3, #0
 8008fdc:	6102      	str	r2, [r0, #16]
 8008fde:	bf08      	it	eq
 8008fe0:	6143      	streq	r3, [r0, #20]
 8008fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fe6:	f8dc c000 	ldr.w	ip, [ip]
 8008fea:	fa0c fc08 	lsl.w	ip, ip, r8
 8008fee:	ea4c 0707 	orr.w	r7, ip, r7
 8008ff2:	f849 7b04 	str.w	r7, [r9], #4
 8008ff6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ffa:	40cf      	lsrs	r7, r1
 8008ffc:	e7da      	b.n	8008fb4 <rshift+0x4c>
 8008ffe:	f851 cb04 	ldr.w	ip, [r1], #4
 8009002:	f847 cf04 	str.w	ip, [r7, #4]!
 8009006:	e7c3      	b.n	8008f90 <rshift+0x28>
 8009008:	4623      	mov	r3, r4
 800900a:	e7e1      	b.n	8008fd0 <rshift+0x68>

0800900c <__hexdig_fun>:
 800900c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009010:	2b09      	cmp	r3, #9
 8009012:	d802      	bhi.n	800901a <__hexdig_fun+0xe>
 8009014:	3820      	subs	r0, #32
 8009016:	b2c0      	uxtb	r0, r0
 8009018:	4770      	bx	lr
 800901a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800901e:	2b05      	cmp	r3, #5
 8009020:	d801      	bhi.n	8009026 <__hexdig_fun+0x1a>
 8009022:	3847      	subs	r0, #71	; 0x47
 8009024:	e7f7      	b.n	8009016 <__hexdig_fun+0xa>
 8009026:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800902a:	2b05      	cmp	r3, #5
 800902c:	d801      	bhi.n	8009032 <__hexdig_fun+0x26>
 800902e:	3827      	subs	r0, #39	; 0x27
 8009030:	e7f1      	b.n	8009016 <__hexdig_fun+0xa>
 8009032:	2000      	movs	r0, #0
 8009034:	4770      	bx	lr
	...

08009038 <__gethex>:
 8009038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903c:	ed2d 8b02 	vpush	{d8}
 8009040:	b089      	sub	sp, #36	; 0x24
 8009042:	ee08 0a10 	vmov	s16, r0
 8009046:	9304      	str	r3, [sp, #16]
 8009048:	4bbc      	ldr	r3, [pc, #752]	; (800933c <__gethex+0x304>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	9301      	str	r3, [sp, #4]
 800904e:	4618      	mov	r0, r3
 8009050:	468b      	mov	fp, r1
 8009052:	4690      	mov	r8, r2
 8009054:	f7f7 f8bc 	bl	80001d0 <strlen>
 8009058:	9b01      	ldr	r3, [sp, #4]
 800905a:	f8db 2000 	ldr.w	r2, [fp]
 800905e:	4403      	add	r3, r0
 8009060:	4682      	mov	sl, r0
 8009062:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009066:	9305      	str	r3, [sp, #20]
 8009068:	1c93      	adds	r3, r2, #2
 800906a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800906e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009072:	32fe      	adds	r2, #254	; 0xfe
 8009074:	18d1      	adds	r1, r2, r3
 8009076:	461f      	mov	r7, r3
 8009078:	f813 0b01 	ldrb.w	r0, [r3], #1
 800907c:	9100      	str	r1, [sp, #0]
 800907e:	2830      	cmp	r0, #48	; 0x30
 8009080:	d0f8      	beq.n	8009074 <__gethex+0x3c>
 8009082:	f7ff ffc3 	bl	800900c <__hexdig_fun>
 8009086:	4604      	mov	r4, r0
 8009088:	2800      	cmp	r0, #0
 800908a:	d13a      	bne.n	8009102 <__gethex+0xca>
 800908c:	9901      	ldr	r1, [sp, #4]
 800908e:	4652      	mov	r2, sl
 8009090:	4638      	mov	r0, r7
 8009092:	f001 f9e1 	bl	800a458 <strncmp>
 8009096:	4605      	mov	r5, r0
 8009098:	2800      	cmp	r0, #0
 800909a:	d168      	bne.n	800916e <__gethex+0x136>
 800909c:	f817 000a 	ldrb.w	r0, [r7, sl]
 80090a0:	eb07 060a 	add.w	r6, r7, sl
 80090a4:	f7ff ffb2 	bl	800900c <__hexdig_fun>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	d062      	beq.n	8009172 <__gethex+0x13a>
 80090ac:	4633      	mov	r3, r6
 80090ae:	7818      	ldrb	r0, [r3, #0]
 80090b0:	2830      	cmp	r0, #48	; 0x30
 80090b2:	461f      	mov	r7, r3
 80090b4:	f103 0301 	add.w	r3, r3, #1
 80090b8:	d0f9      	beq.n	80090ae <__gethex+0x76>
 80090ba:	f7ff ffa7 	bl	800900c <__hexdig_fun>
 80090be:	2301      	movs	r3, #1
 80090c0:	fab0 f480 	clz	r4, r0
 80090c4:	0964      	lsrs	r4, r4, #5
 80090c6:	4635      	mov	r5, r6
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	463a      	mov	r2, r7
 80090cc:	4616      	mov	r6, r2
 80090ce:	3201      	adds	r2, #1
 80090d0:	7830      	ldrb	r0, [r6, #0]
 80090d2:	f7ff ff9b 	bl	800900c <__hexdig_fun>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d1f8      	bne.n	80090cc <__gethex+0x94>
 80090da:	9901      	ldr	r1, [sp, #4]
 80090dc:	4652      	mov	r2, sl
 80090de:	4630      	mov	r0, r6
 80090e0:	f001 f9ba 	bl	800a458 <strncmp>
 80090e4:	b980      	cbnz	r0, 8009108 <__gethex+0xd0>
 80090e6:	b94d      	cbnz	r5, 80090fc <__gethex+0xc4>
 80090e8:	eb06 050a 	add.w	r5, r6, sl
 80090ec:	462a      	mov	r2, r5
 80090ee:	4616      	mov	r6, r2
 80090f0:	3201      	adds	r2, #1
 80090f2:	7830      	ldrb	r0, [r6, #0]
 80090f4:	f7ff ff8a 	bl	800900c <__hexdig_fun>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d1f8      	bne.n	80090ee <__gethex+0xb6>
 80090fc:	1bad      	subs	r5, r5, r6
 80090fe:	00ad      	lsls	r5, r5, #2
 8009100:	e004      	b.n	800910c <__gethex+0xd4>
 8009102:	2400      	movs	r4, #0
 8009104:	4625      	mov	r5, r4
 8009106:	e7e0      	b.n	80090ca <__gethex+0x92>
 8009108:	2d00      	cmp	r5, #0
 800910a:	d1f7      	bne.n	80090fc <__gethex+0xc4>
 800910c:	7833      	ldrb	r3, [r6, #0]
 800910e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009112:	2b50      	cmp	r3, #80	; 0x50
 8009114:	d13b      	bne.n	800918e <__gethex+0x156>
 8009116:	7873      	ldrb	r3, [r6, #1]
 8009118:	2b2b      	cmp	r3, #43	; 0x2b
 800911a:	d02c      	beq.n	8009176 <__gethex+0x13e>
 800911c:	2b2d      	cmp	r3, #45	; 0x2d
 800911e:	d02e      	beq.n	800917e <__gethex+0x146>
 8009120:	1c71      	adds	r1, r6, #1
 8009122:	f04f 0900 	mov.w	r9, #0
 8009126:	7808      	ldrb	r0, [r1, #0]
 8009128:	f7ff ff70 	bl	800900c <__hexdig_fun>
 800912c:	1e43      	subs	r3, r0, #1
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b18      	cmp	r3, #24
 8009132:	d82c      	bhi.n	800918e <__gethex+0x156>
 8009134:	f1a0 0210 	sub.w	r2, r0, #16
 8009138:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800913c:	f7ff ff66 	bl	800900c <__hexdig_fun>
 8009140:	1e43      	subs	r3, r0, #1
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2b18      	cmp	r3, #24
 8009146:	d91d      	bls.n	8009184 <__gethex+0x14c>
 8009148:	f1b9 0f00 	cmp.w	r9, #0
 800914c:	d000      	beq.n	8009150 <__gethex+0x118>
 800914e:	4252      	negs	r2, r2
 8009150:	4415      	add	r5, r2
 8009152:	f8cb 1000 	str.w	r1, [fp]
 8009156:	b1e4      	cbz	r4, 8009192 <__gethex+0x15a>
 8009158:	9b00      	ldr	r3, [sp, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	bf14      	ite	ne
 800915e:	2700      	movne	r7, #0
 8009160:	2706      	moveq	r7, #6
 8009162:	4638      	mov	r0, r7
 8009164:	b009      	add	sp, #36	; 0x24
 8009166:	ecbd 8b02 	vpop	{d8}
 800916a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916e:	463e      	mov	r6, r7
 8009170:	4625      	mov	r5, r4
 8009172:	2401      	movs	r4, #1
 8009174:	e7ca      	b.n	800910c <__gethex+0xd4>
 8009176:	f04f 0900 	mov.w	r9, #0
 800917a:	1cb1      	adds	r1, r6, #2
 800917c:	e7d3      	b.n	8009126 <__gethex+0xee>
 800917e:	f04f 0901 	mov.w	r9, #1
 8009182:	e7fa      	b.n	800917a <__gethex+0x142>
 8009184:	230a      	movs	r3, #10
 8009186:	fb03 0202 	mla	r2, r3, r2, r0
 800918a:	3a10      	subs	r2, #16
 800918c:	e7d4      	b.n	8009138 <__gethex+0x100>
 800918e:	4631      	mov	r1, r6
 8009190:	e7df      	b.n	8009152 <__gethex+0x11a>
 8009192:	1bf3      	subs	r3, r6, r7
 8009194:	3b01      	subs	r3, #1
 8009196:	4621      	mov	r1, r4
 8009198:	2b07      	cmp	r3, #7
 800919a:	dc0b      	bgt.n	80091b4 <__gethex+0x17c>
 800919c:	ee18 0a10 	vmov	r0, s16
 80091a0:	f000 fa70 	bl	8009684 <_Balloc>
 80091a4:	4604      	mov	r4, r0
 80091a6:	b940      	cbnz	r0, 80091ba <__gethex+0x182>
 80091a8:	4b65      	ldr	r3, [pc, #404]	; (8009340 <__gethex+0x308>)
 80091aa:	4602      	mov	r2, r0
 80091ac:	21de      	movs	r1, #222	; 0xde
 80091ae:	4865      	ldr	r0, [pc, #404]	; (8009344 <__gethex+0x30c>)
 80091b0:	f001 f972 	bl	800a498 <__assert_func>
 80091b4:	3101      	adds	r1, #1
 80091b6:	105b      	asrs	r3, r3, #1
 80091b8:	e7ee      	b.n	8009198 <__gethex+0x160>
 80091ba:	f100 0914 	add.w	r9, r0, #20
 80091be:	f04f 0b00 	mov.w	fp, #0
 80091c2:	f1ca 0301 	rsb	r3, sl, #1
 80091c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80091ca:	f8cd b000 	str.w	fp, [sp]
 80091ce:	9306      	str	r3, [sp, #24]
 80091d0:	42b7      	cmp	r7, r6
 80091d2:	d340      	bcc.n	8009256 <__gethex+0x21e>
 80091d4:	9802      	ldr	r0, [sp, #8]
 80091d6:	9b00      	ldr	r3, [sp, #0]
 80091d8:	f840 3b04 	str.w	r3, [r0], #4
 80091dc:	eba0 0009 	sub.w	r0, r0, r9
 80091e0:	1080      	asrs	r0, r0, #2
 80091e2:	0146      	lsls	r6, r0, #5
 80091e4:	6120      	str	r0, [r4, #16]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 fb42 	bl	8009870 <__hi0bits>
 80091ec:	1a30      	subs	r0, r6, r0
 80091ee:	f8d8 6000 	ldr.w	r6, [r8]
 80091f2:	42b0      	cmp	r0, r6
 80091f4:	dd63      	ble.n	80092be <__gethex+0x286>
 80091f6:	1b87      	subs	r7, r0, r6
 80091f8:	4639      	mov	r1, r7
 80091fa:	4620      	mov	r0, r4
 80091fc:	f000 fedc 	bl	8009fb8 <__any_on>
 8009200:	4682      	mov	sl, r0
 8009202:	b1a8      	cbz	r0, 8009230 <__gethex+0x1f8>
 8009204:	1e7b      	subs	r3, r7, #1
 8009206:	1159      	asrs	r1, r3, #5
 8009208:	f003 021f 	and.w	r2, r3, #31
 800920c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009210:	f04f 0a01 	mov.w	sl, #1
 8009214:	fa0a f202 	lsl.w	r2, sl, r2
 8009218:	420a      	tst	r2, r1
 800921a:	d009      	beq.n	8009230 <__gethex+0x1f8>
 800921c:	4553      	cmp	r3, sl
 800921e:	dd05      	ble.n	800922c <__gethex+0x1f4>
 8009220:	1eb9      	subs	r1, r7, #2
 8009222:	4620      	mov	r0, r4
 8009224:	f000 fec8 	bl	8009fb8 <__any_on>
 8009228:	2800      	cmp	r0, #0
 800922a:	d145      	bne.n	80092b8 <__gethex+0x280>
 800922c:	f04f 0a02 	mov.w	sl, #2
 8009230:	4639      	mov	r1, r7
 8009232:	4620      	mov	r0, r4
 8009234:	f7ff fe98 	bl	8008f68 <rshift>
 8009238:	443d      	add	r5, r7
 800923a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800923e:	42ab      	cmp	r3, r5
 8009240:	da4c      	bge.n	80092dc <__gethex+0x2a4>
 8009242:	ee18 0a10 	vmov	r0, s16
 8009246:	4621      	mov	r1, r4
 8009248:	f000 fa5c 	bl	8009704 <_Bfree>
 800924c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800924e:	2300      	movs	r3, #0
 8009250:	6013      	str	r3, [r2, #0]
 8009252:	27a3      	movs	r7, #163	; 0xa3
 8009254:	e785      	b.n	8009162 <__gethex+0x12a>
 8009256:	1e73      	subs	r3, r6, #1
 8009258:	9a05      	ldr	r2, [sp, #20]
 800925a:	9303      	str	r3, [sp, #12]
 800925c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009260:	4293      	cmp	r3, r2
 8009262:	d019      	beq.n	8009298 <__gethex+0x260>
 8009264:	f1bb 0f20 	cmp.w	fp, #32
 8009268:	d107      	bne.n	800927a <__gethex+0x242>
 800926a:	9b02      	ldr	r3, [sp, #8]
 800926c:	9a00      	ldr	r2, [sp, #0]
 800926e:	f843 2b04 	str.w	r2, [r3], #4
 8009272:	9302      	str	r3, [sp, #8]
 8009274:	2300      	movs	r3, #0
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	469b      	mov	fp, r3
 800927a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800927e:	f7ff fec5 	bl	800900c <__hexdig_fun>
 8009282:	9b00      	ldr	r3, [sp, #0]
 8009284:	f000 000f 	and.w	r0, r0, #15
 8009288:	fa00 f00b 	lsl.w	r0, r0, fp
 800928c:	4303      	orrs	r3, r0
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	f10b 0b04 	add.w	fp, fp, #4
 8009294:	9b03      	ldr	r3, [sp, #12]
 8009296:	e00d      	b.n	80092b4 <__gethex+0x27c>
 8009298:	9b03      	ldr	r3, [sp, #12]
 800929a:	9a06      	ldr	r2, [sp, #24]
 800929c:	4413      	add	r3, r2
 800929e:	42bb      	cmp	r3, r7
 80092a0:	d3e0      	bcc.n	8009264 <__gethex+0x22c>
 80092a2:	4618      	mov	r0, r3
 80092a4:	9901      	ldr	r1, [sp, #4]
 80092a6:	9307      	str	r3, [sp, #28]
 80092a8:	4652      	mov	r2, sl
 80092aa:	f001 f8d5 	bl	800a458 <strncmp>
 80092ae:	9b07      	ldr	r3, [sp, #28]
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d1d7      	bne.n	8009264 <__gethex+0x22c>
 80092b4:	461e      	mov	r6, r3
 80092b6:	e78b      	b.n	80091d0 <__gethex+0x198>
 80092b8:	f04f 0a03 	mov.w	sl, #3
 80092bc:	e7b8      	b.n	8009230 <__gethex+0x1f8>
 80092be:	da0a      	bge.n	80092d6 <__gethex+0x29e>
 80092c0:	1a37      	subs	r7, r6, r0
 80092c2:	4621      	mov	r1, r4
 80092c4:	ee18 0a10 	vmov	r0, s16
 80092c8:	463a      	mov	r2, r7
 80092ca:	f000 fc37 	bl	8009b3c <__lshift>
 80092ce:	1bed      	subs	r5, r5, r7
 80092d0:	4604      	mov	r4, r0
 80092d2:	f100 0914 	add.w	r9, r0, #20
 80092d6:	f04f 0a00 	mov.w	sl, #0
 80092da:	e7ae      	b.n	800923a <__gethex+0x202>
 80092dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80092e0:	42a8      	cmp	r0, r5
 80092e2:	dd72      	ble.n	80093ca <__gethex+0x392>
 80092e4:	1b45      	subs	r5, r0, r5
 80092e6:	42ae      	cmp	r6, r5
 80092e8:	dc36      	bgt.n	8009358 <__gethex+0x320>
 80092ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d02a      	beq.n	8009348 <__gethex+0x310>
 80092f2:	2b03      	cmp	r3, #3
 80092f4:	d02c      	beq.n	8009350 <__gethex+0x318>
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d115      	bne.n	8009326 <__gethex+0x2ee>
 80092fa:	42ae      	cmp	r6, r5
 80092fc:	d113      	bne.n	8009326 <__gethex+0x2ee>
 80092fe:	2e01      	cmp	r6, #1
 8009300:	d10b      	bne.n	800931a <__gethex+0x2e2>
 8009302:	9a04      	ldr	r2, [sp, #16]
 8009304:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	2301      	movs	r3, #1
 800930c:	6123      	str	r3, [r4, #16]
 800930e:	f8c9 3000 	str.w	r3, [r9]
 8009312:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009314:	2762      	movs	r7, #98	; 0x62
 8009316:	601c      	str	r4, [r3, #0]
 8009318:	e723      	b.n	8009162 <__gethex+0x12a>
 800931a:	1e71      	subs	r1, r6, #1
 800931c:	4620      	mov	r0, r4
 800931e:	f000 fe4b 	bl	8009fb8 <__any_on>
 8009322:	2800      	cmp	r0, #0
 8009324:	d1ed      	bne.n	8009302 <__gethex+0x2ca>
 8009326:	ee18 0a10 	vmov	r0, s16
 800932a:	4621      	mov	r1, r4
 800932c:	f000 f9ea 	bl	8009704 <_Bfree>
 8009330:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009332:	2300      	movs	r3, #0
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	2750      	movs	r7, #80	; 0x50
 8009338:	e713      	b.n	8009162 <__gethex+0x12a>
 800933a:	bf00      	nop
 800933c:	0800b308 	.word	0x0800b308
 8009340:	0800b28c 	.word	0x0800b28c
 8009344:	0800b29d 	.word	0x0800b29d
 8009348:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1eb      	bne.n	8009326 <__gethex+0x2ee>
 800934e:	e7d8      	b.n	8009302 <__gethex+0x2ca>
 8009350:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1d5      	bne.n	8009302 <__gethex+0x2ca>
 8009356:	e7e6      	b.n	8009326 <__gethex+0x2ee>
 8009358:	1e6f      	subs	r7, r5, #1
 800935a:	f1ba 0f00 	cmp.w	sl, #0
 800935e:	d131      	bne.n	80093c4 <__gethex+0x38c>
 8009360:	b127      	cbz	r7, 800936c <__gethex+0x334>
 8009362:	4639      	mov	r1, r7
 8009364:	4620      	mov	r0, r4
 8009366:	f000 fe27 	bl	8009fb8 <__any_on>
 800936a:	4682      	mov	sl, r0
 800936c:	117b      	asrs	r3, r7, #5
 800936e:	2101      	movs	r1, #1
 8009370:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009374:	f007 071f 	and.w	r7, r7, #31
 8009378:	fa01 f707 	lsl.w	r7, r1, r7
 800937c:	421f      	tst	r7, r3
 800937e:	4629      	mov	r1, r5
 8009380:	4620      	mov	r0, r4
 8009382:	bf18      	it	ne
 8009384:	f04a 0a02 	orrne.w	sl, sl, #2
 8009388:	1b76      	subs	r6, r6, r5
 800938a:	f7ff fded 	bl	8008f68 <rshift>
 800938e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009392:	2702      	movs	r7, #2
 8009394:	f1ba 0f00 	cmp.w	sl, #0
 8009398:	d048      	beq.n	800942c <__gethex+0x3f4>
 800939a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d015      	beq.n	80093ce <__gethex+0x396>
 80093a2:	2b03      	cmp	r3, #3
 80093a4:	d017      	beq.n	80093d6 <__gethex+0x39e>
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d109      	bne.n	80093be <__gethex+0x386>
 80093aa:	f01a 0f02 	tst.w	sl, #2
 80093ae:	d006      	beq.n	80093be <__gethex+0x386>
 80093b0:	f8d9 0000 	ldr.w	r0, [r9]
 80093b4:	ea4a 0a00 	orr.w	sl, sl, r0
 80093b8:	f01a 0f01 	tst.w	sl, #1
 80093bc:	d10e      	bne.n	80093dc <__gethex+0x3a4>
 80093be:	f047 0710 	orr.w	r7, r7, #16
 80093c2:	e033      	b.n	800942c <__gethex+0x3f4>
 80093c4:	f04f 0a01 	mov.w	sl, #1
 80093c8:	e7d0      	b.n	800936c <__gethex+0x334>
 80093ca:	2701      	movs	r7, #1
 80093cc:	e7e2      	b.n	8009394 <__gethex+0x35c>
 80093ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093d0:	f1c3 0301 	rsb	r3, r3, #1
 80093d4:	9315      	str	r3, [sp, #84]	; 0x54
 80093d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d0f0      	beq.n	80093be <__gethex+0x386>
 80093dc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80093e0:	f104 0314 	add.w	r3, r4, #20
 80093e4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80093e8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80093ec:	f04f 0c00 	mov.w	ip, #0
 80093f0:	4618      	mov	r0, r3
 80093f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80093fa:	d01c      	beq.n	8009436 <__gethex+0x3fe>
 80093fc:	3201      	adds	r2, #1
 80093fe:	6002      	str	r2, [r0, #0]
 8009400:	2f02      	cmp	r7, #2
 8009402:	f104 0314 	add.w	r3, r4, #20
 8009406:	d13f      	bne.n	8009488 <__gethex+0x450>
 8009408:	f8d8 2000 	ldr.w	r2, [r8]
 800940c:	3a01      	subs	r2, #1
 800940e:	42b2      	cmp	r2, r6
 8009410:	d10a      	bne.n	8009428 <__gethex+0x3f0>
 8009412:	1171      	asrs	r1, r6, #5
 8009414:	2201      	movs	r2, #1
 8009416:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800941a:	f006 061f 	and.w	r6, r6, #31
 800941e:	fa02 f606 	lsl.w	r6, r2, r6
 8009422:	421e      	tst	r6, r3
 8009424:	bf18      	it	ne
 8009426:	4617      	movne	r7, r2
 8009428:	f047 0720 	orr.w	r7, r7, #32
 800942c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800942e:	601c      	str	r4, [r3, #0]
 8009430:	9b04      	ldr	r3, [sp, #16]
 8009432:	601d      	str	r5, [r3, #0]
 8009434:	e695      	b.n	8009162 <__gethex+0x12a>
 8009436:	4299      	cmp	r1, r3
 8009438:	f843 cc04 	str.w	ip, [r3, #-4]
 800943c:	d8d8      	bhi.n	80093f0 <__gethex+0x3b8>
 800943e:	68a3      	ldr	r3, [r4, #8]
 8009440:	459b      	cmp	fp, r3
 8009442:	db19      	blt.n	8009478 <__gethex+0x440>
 8009444:	6861      	ldr	r1, [r4, #4]
 8009446:	ee18 0a10 	vmov	r0, s16
 800944a:	3101      	adds	r1, #1
 800944c:	f000 f91a 	bl	8009684 <_Balloc>
 8009450:	4681      	mov	r9, r0
 8009452:	b918      	cbnz	r0, 800945c <__gethex+0x424>
 8009454:	4b1a      	ldr	r3, [pc, #104]	; (80094c0 <__gethex+0x488>)
 8009456:	4602      	mov	r2, r0
 8009458:	2184      	movs	r1, #132	; 0x84
 800945a:	e6a8      	b.n	80091ae <__gethex+0x176>
 800945c:	6922      	ldr	r2, [r4, #16]
 800945e:	3202      	adds	r2, #2
 8009460:	f104 010c 	add.w	r1, r4, #12
 8009464:	0092      	lsls	r2, r2, #2
 8009466:	300c      	adds	r0, #12
 8009468:	f7fd f99a 	bl	80067a0 <memcpy>
 800946c:	4621      	mov	r1, r4
 800946e:	ee18 0a10 	vmov	r0, s16
 8009472:	f000 f947 	bl	8009704 <_Bfree>
 8009476:	464c      	mov	r4, r9
 8009478:	6923      	ldr	r3, [r4, #16]
 800947a:	1c5a      	adds	r2, r3, #1
 800947c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009480:	6122      	str	r2, [r4, #16]
 8009482:	2201      	movs	r2, #1
 8009484:	615a      	str	r2, [r3, #20]
 8009486:	e7bb      	b.n	8009400 <__gethex+0x3c8>
 8009488:	6922      	ldr	r2, [r4, #16]
 800948a:	455a      	cmp	r2, fp
 800948c:	dd0b      	ble.n	80094a6 <__gethex+0x46e>
 800948e:	2101      	movs	r1, #1
 8009490:	4620      	mov	r0, r4
 8009492:	f7ff fd69 	bl	8008f68 <rshift>
 8009496:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800949a:	3501      	adds	r5, #1
 800949c:	42ab      	cmp	r3, r5
 800949e:	f6ff aed0 	blt.w	8009242 <__gethex+0x20a>
 80094a2:	2701      	movs	r7, #1
 80094a4:	e7c0      	b.n	8009428 <__gethex+0x3f0>
 80094a6:	f016 061f 	ands.w	r6, r6, #31
 80094aa:	d0fa      	beq.n	80094a2 <__gethex+0x46a>
 80094ac:	449a      	add	sl, r3
 80094ae:	f1c6 0620 	rsb	r6, r6, #32
 80094b2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80094b6:	f000 f9db 	bl	8009870 <__hi0bits>
 80094ba:	42b0      	cmp	r0, r6
 80094bc:	dbe7      	blt.n	800948e <__gethex+0x456>
 80094be:	e7f0      	b.n	80094a2 <__gethex+0x46a>
 80094c0:	0800b28c 	.word	0x0800b28c

080094c4 <L_shift>:
 80094c4:	f1c2 0208 	rsb	r2, r2, #8
 80094c8:	0092      	lsls	r2, r2, #2
 80094ca:	b570      	push	{r4, r5, r6, lr}
 80094cc:	f1c2 0620 	rsb	r6, r2, #32
 80094d0:	6843      	ldr	r3, [r0, #4]
 80094d2:	6804      	ldr	r4, [r0, #0]
 80094d4:	fa03 f506 	lsl.w	r5, r3, r6
 80094d8:	432c      	orrs	r4, r5
 80094da:	40d3      	lsrs	r3, r2
 80094dc:	6004      	str	r4, [r0, #0]
 80094de:	f840 3f04 	str.w	r3, [r0, #4]!
 80094e2:	4288      	cmp	r0, r1
 80094e4:	d3f4      	bcc.n	80094d0 <L_shift+0xc>
 80094e6:	bd70      	pop	{r4, r5, r6, pc}

080094e8 <__match>:
 80094e8:	b530      	push	{r4, r5, lr}
 80094ea:	6803      	ldr	r3, [r0, #0]
 80094ec:	3301      	adds	r3, #1
 80094ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094f2:	b914      	cbnz	r4, 80094fa <__match+0x12>
 80094f4:	6003      	str	r3, [r0, #0]
 80094f6:	2001      	movs	r0, #1
 80094f8:	bd30      	pop	{r4, r5, pc}
 80094fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009502:	2d19      	cmp	r5, #25
 8009504:	bf98      	it	ls
 8009506:	3220      	addls	r2, #32
 8009508:	42a2      	cmp	r2, r4
 800950a:	d0f0      	beq.n	80094ee <__match+0x6>
 800950c:	2000      	movs	r0, #0
 800950e:	e7f3      	b.n	80094f8 <__match+0x10>

08009510 <__hexnan>:
 8009510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009514:	680b      	ldr	r3, [r1, #0]
 8009516:	6801      	ldr	r1, [r0, #0]
 8009518:	115e      	asrs	r6, r3, #5
 800951a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800951e:	f013 031f 	ands.w	r3, r3, #31
 8009522:	b087      	sub	sp, #28
 8009524:	bf18      	it	ne
 8009526:	3604      	addne	r6, #4
 8009528:	2500      	movs	r5, #0
 800952a:	1f37      	subs	r7, r6, #4
 800952c:	4682      	mov	sl, r0
 800952e:	4690      	mov	r8, r2
 8009530:	9301      	str	r3, [sp, #4]
 8009532:	f846 5c04 	str.w	r5, [r6, #-4]
 8009536:	46b9      	mov	r9, r7
 8009538:	463c      	mov	r4, r7
 800953a:	9502      	str	r5, [sp, #8]
 800953c:	46ab      	mov	fp, r5
 800953e:	784a      	ldrb	r2, [r1, #1]
 8009540:	1c4b      	adds	r3, r1, #1
 8009542:	9303      	str	r3, [sp, #12]
 8009544:	b342      	cbz	r2, 8009598 <__hexnan+0x88>
 8009546:	4610      	mov	r0, r2
 8009548:	9105      	str	r1, [sp, #20]
 800954a:	9204      	str	r2, [sp, #16]
 800954c:	f7ff fd5e 	bl	800900c <__hexdig_fun>
 8009550:	2800      	cmp	r0, #0
 8009552:	d14f      	bne.n	80095f4 <__hexnan+0xe4>
 8009554:	9a04      	ldr	r2, [sp, #16]
 8009556:	9905      	ldr	r1, [sp, #20]
 8009558:	2a20      	cmp	r2, #32
 800955a:	d818      	bhi.n	800958e <__hexnan+0x7e>
 800955c:	9b02      	ldr	r3, [sp, #8]
 800955e:	459b      	cmp	fp, r3
 8009560:	dd13      	ble.n	800958a <__hexnan+0x7a>
 8009562:	454c      	cmp	r4, r9
 8009564:	d206      	bcs.n	8009574 <__hexnan+0x64>
 8009566:	2d07      	cmp	r5, #7
 8009568:	dc04      	bgt.n	8009574 <__hexnan+0x64>
 800956a:	462a      	mov	r2, r5
 800956c:	4649      	mov	r1, r9
 800956e:	4620      	mov	r0, r4
 8009570:	f7ff ffa8 	bl	80094c4 <L_shift>
 8009574:	4544      	cmp	r4, r8
 8009576:	d950      	bls.n	800961a <__hexnan+0x10a>
 8009578:	2300      	movs	r3, #0
 800957a:	f1a4 0904 	sub.w	r9, r4, #4
 800957e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009582:	f8cd b008 	str.w	fp, [sp, #8]
 8009586:	464c      	mov	r4, r9
 8009588:	461d      	mov	r5, r3
 800958a:	9903      	ldr	r1, [sp, #12]
 800958c:	e7d7      	b.n	800953e <__hexnan+0x2e>
 800958e:	2a29      	cmp	r2, #41	; 0x29
 8009590:	d156      	bne.n	8009640 <__hexnan+0x130>
 8009592:	3102      	adds	r1, #2
 8009594:	f8ca 1000 	str.w	r1, [sl]
 8009598:	f1bb 0f00 	cmp.w	fp, #0
 800959c:	d050      	beq.n	8009640 <__hexnan+0x130>
 800959e:	454c      	cmp	r4, r9
 80095a0:	d206      	bcs.n	80095b0 <__hexnan+0xa0>
 80095a2:	2d07      	cmp	r5, #7
 80095a4:	dc04      	bgt.n	80095b0 <__hexnan+0xa0>
 80095a6:	462a      	mov	r2, r5
 80095a8:	4649      	mov	r1, r9
 80095aa:	4620      	mov	r0, r4
 80095ac:	f7ff ff8a 	bl	80094c4 <L_shift>
 80095b0:	4544      	cmp	r4, r8
 80095b2:	d934      	bls.n	800961e <__hexnan+0x10e>
 80095b4:	f1a8 0204 	sub.w	r2, r8, #4
 80095b8:	4623      	mov	r3, r4
 80095ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80095be:	f842 1f04 	str.w	r1, [r2, #4]!
 80095c2:	429f      	cmp	r7, r3
 80095c4:	d2f9      	bcs.n	80095ba <__hexnan+0xaa>
 80095c6:	1b3b      	subs	r3, r7, r4
 80095c8:	f023 0303 	bic.w	r3, r3, #3
 80095cc:	3304      	adds	r3, #4
 80095ce:	3401      	adds	r4, #1
 80095d0:	3e03      	subs	r6, #3
 80095d2:	42b4      	cmp	r4, r6
 80095d4:	bf88      	it	hi
 80095d6:	2304      	movhi	r3, #4
 80095d8:	4443      	add	r3, r8
 80095da:	2200      	movs	r2, #0
 80095dc:	f843 2b04 	str.w	r2, [r3], #4
 80095e0:	429f      	cmp	r7, r3
 80095e2:	d2fb      	bcs.n	80095dc <__hexnan+0xcc>
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	b91b      	cbnz	r3, 80095f0 <__hexnan+0xe0>
 80095e8:	4547      	cmp	r7, r8
 80095ea:	d127      	bne.n	800963c <__hexnan+0x12c>
 80095ec:	2301      	movs	r3, #1
 80095ee:	603b      	str	r3, [r7, #0]
 80095f0:	2005      	movs	r0, #5
 80095f2:	e026      	b.n	8009642 <__hexnan+0x132>
 80095f4:	3501      	adds	r5, #1
 80095f6:	2d08      	cmp	r5, #8
 80095f8:	f10b 0b01 	add.w	fp, fp, #1
 80095fc:	dd06      	ble.n	800960c <__hexnan+0xfc>
 80095fe:	4544      	cmp	r4, r8
 8009600:	d9c3      	bls.n	800958a <__hexnan+0x7a>
 8009602:	2300      	movs	r3, #0
 8009604:	f844 3c04 	str.w	r3, [r4, #-4]
 8009608:	2501      	movs	r5, #1
 800960a:	3c04      	subs	r4, #4
 800960c:	6822      	ldr	r2, [r4, #0]
 800960e:	f000 000f 	and.w	r0, r0, #15
 8009612:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009616:	6022      	str	r2, [r4, #0]
 8009618:	e7b7      	b.n	800958a <__hexnan+0x7a>
 800961a:	2508      	movs	r5, #8
 800961c:	e7b5      	b.n	800958a <__hexnan+0x7a>
 800961e:	9b01      	ldr	r3, [sp, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d0df      	beq.n	80095e4 <__hexnan+0xd4>
 8009624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009628:	f1c3 0320 	rsb	r3, r3, #32
 800962c:	fa22 f303 	lsr.w	r3, r2, r3
 8009630:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009634:	401a      	ands	r2, r3
 8009636:	f846 2c04 	str.w	r2, [r6, #-4]
 800963a:	e7d3      	b.n	80095e4 <__hexnan+0xd4>
 800963c:	3f04      	subs	r7, #4
 800963e:	e7d1      	b.n	80095e4 <__hexnan+0xd4>
 8009640:	2004      	movs	r0, #4
 8009642:	b007      	add	sp, #28
 8009644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009648 <_localeconv_r>:
 8009648:	4800      	ldr	r0, [pc, #0]	; (800964c <_localeconv_r+0x4>)
 800964a:	4770      	bx	lr
 800964c:	20000168 	.word	0x20000168

08009650 <malloc>:
 8009650:	4b02      	ldr	r3, [pc, #8]	; (800965c <malloc+0xc>)
 8009652:	4601      	mov	r1, r0
 8009654:	6818      	ldr	r0, [r3, #0]
 8009656:	f000 bd2f 	b.w	800a0b8 <_malloc_r>
 800965a:	bf00      	nop
 800965c:	20000010 	.word	0x20000010

08009660 <__ascii_mbtowc>:
 8009660:	b082      	sub	sp, #8
 8009662:	b901      	cbnz	r1, 8009666 <__ascii_mbtowc+0x6>
 8009664:	a901      	add	r1, sp, #4
 8009666:	b142      	cbz	r2, 800967a <__ascii_mbtowc+0x1a>
 8009668:	b14b      	cbz	r3, 800967e <__ascii_mbtowc+0x1e>
 800966a:	7813      	ldrb	r3, [r2, #0]
 800966c:	600b      	str	r3, [r1, #0]
 800966e:	7812      	ldrb	r2, [r2, #0]
 8009670:	1e10      	subs	r0, r2, #0
 8009672:	bf18      	it	ne
 8009674:	2001      	movne	r0, #1
 8009676:	b002      	add	sp, #8
 8009678:	4770      	bx	lr
 800967a:	4610      	mov	r0, r2
 800967c:	e7fb      	b.n	8009676 <__ascii_mbtowc+0x16>
 800967e:	f06f 0001 	mvn.w	r0, #1
 8009682:	e7f8      	b.n	8009676 <__ascii_mbtowc+0x16>

08009684 <_Balloc>:
 8009684:	b570      	push	{r4, r5, r6, lr}
 8009686:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009688:	4604      	mov	r4, r0
 800968a:	460d      	mov	r5, r1
 800968c:	b976      	cbnz	r6, 80096ac <_Balloc+0x28>
 800968e:	2010      	movs	r0, #16
 8009690:	f7ff ffde 	bl	8009650 <malloc>
 8009694:	4602      	mov	r2, r0
 8009696:	6260      	str	r0, [r4, #36]	; 0x24
 8009698:	b920      	cbnz	r0, 80096a4 <_Balloc+0x20>
 800969a:	4b18      	ldr	r3, [pc, #96]	; (80096fc <_Balloc+0x78>)
 800969c:	4818      	ldr	r0, [pc, #96]	; (8009700 <_Balloc+0x7c>)
 800969e:	2166      	movs	r1, #102	; 0x66
 80096a0:	f000 fefa 	bl	800a498 <__assert_func>
 80096a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096a8:	6006      	str	r6, [r0, #0]
 80096aa:	60c6      	str	r6, [r0, #12]
 80096ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80096ae:	68f3      	ldr	r3, [r6, #12]
 80096b0:	b183      	cbz	r3, 80096d4 <_Balloc+0x50>
 80096b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096ba:	b9b8      	cbnz	r0, 80096ec <_Balloc+0x68>
 80096bc:	2101      	movs	r1, #1
 80096be:	fa01 f605 	lsl.w	r6, r1, r5
 80096c2:	1d72      	adds	r2, r6, #5
 80096c4:	0092      	lsls	r2, r2, #2
 80096c6:	4620      	mov	r0, r4
 80096c8:	f000 fc97 	bl	8009ffa <_calloc_r>
 80096cc:	b160      	cbz	r0, 80096e8 <_Balloc+0x64>
 80096ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096d2:	e00e      	b.n	80096f2 <_Balloc+0x6e>
 80096d4:	2221      	movs	r2, #33	; 0x21
 80096d6:	2104      	movs	r1, #4
 80096d8:	4620      	mov	r0, r4
 80096da:	f000 fc8e 	bl	8009ffa <_calloc_r>
 80096de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096e0:	60f0      	str	r0, [r6, #12]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1e4      	bne.n	80096b2 <_Balloc+0x2e>
 80096e8:	2000      	movs	r0, #0
 80096ea:	bd70      	pop	{r4, r5, r6, pc}
 80096ec:	6802      	ldr	r2, [r0, #0]
 80096ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096f2:	2300      	movs	r3, #0
 80096f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096f8:	e7f7      	b.n	80096ea <_Balloc+0x66>
 80096fa:	bf00      	nop
 80096fc:	0800b216 	.word	0x0800b216
 8009700:	0800b31c 	.word	0x0800b31c

08009704 <_Bfree>:
 8009704:	b570      	push	{r4, r5, r6, lr}
 8009706:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009708:	4605      	mov	r5, r0
 800970a:	460c      	mov	r4, r1
 800970c:	b976      	cbnz	r6, 800972c <_Bfree+0x28>
 800970e:	2010      	movs	r0, #16
 8009710:	f7ff ff9e 	bl	8009650 <malloc>
 8009714:	4602      	mov	r2, r0
 8009716:	6268      	str	r0, [r5, #36]	; 0x24
 8009718:	b920      	cbnz	r0, 8009724 <_Bfree+0x20>
 800971a:	4b09      	ldr	r3, [pc, #36]	; (8009740 <_Bfree+0x3c>)
 800971c:	4809      	ldr	r0, [pc, #36]	; (8009744 <_Bfree+0x40>)
 800971e:	218a      	movs	r1, #138	; 0x8a
 8009720:	f000 feba 	bl	800a498 <__assert_func>
 8009724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009728:	6006      	str	r6, [r0, #0]
 800972a:	60c6      	str	r6, [r0, #12]
 800972c:	b13c      	cbz	r4, 800973e <_Bfree+0x3a>
 800972e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009730:	6862      	ldr	r2, [r4, #4]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009738:	6021      	str	r1, [r4, #0]
 800973a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800973e:	bd70      	pop	{r4, r5, r6, pc}
 8009740:	0800b216 	.word	0x0800b216
 8009744:	0800b31c 	.word	0x0800b31c

08009748 <__multadd>:
 8009748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800974c:	690e      	ldr	r6, [r1, #16]
 800974e:	4607      	mov	r7, r0
 8009750:	4698      	mov	r8, r3
 8009752:	460c      	mov	r4, r1
 8009754:	f101 0014 	add.w	r0, r1, #20
 8009758:	2300      	movs	r3, #0
 800975a:	6805      	ldr	r5, [r0, #0]
 800975c:	b2a9      	uxth	r1, r5
 800975e:	fb02 8101 	mla	r1, r2, r1, r8
 8009762:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009766:	0c2d      	lsrs	r5, r5, #16
 8009768:	fb02 c505 	mla	r5, r2, r5, ip
 800976c:	b289      	uxth	r1, r1
 800976e:	3301      	adds	r3, #1
 8009770:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009774:	429e      	cmp	r6, r3
 8009776:	f840 1b04 	str.w	r1, [r0], #4
 800977a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800977e:	dcec      	bgt.n	800975a <__multadd+0x12>
 8009780:	f1b8 0f00 	cmp.w	r8, #0
 8009784:	d022      	beq.n	80097cc <__multadd+0x84>
 8009786:	68a3      	ldr	r3, [r4, #8]
 8009788:	42b3      	cmp	r3, r6
 800978a:	dc19      	bgt.n	80097c0 <__multadd+0x78>
 800978c:	6861      	ldr	r1, [r4, #4]
 800978e:	4638      	mov	r0, r7
 8009790:	3101      	adds	r1, #1
 8009792:	f7ff ff77 	bl	8009684 <_Balloc>
 8009796:	4605      	mov	r5, r0
 8009798:	b928      	cbnz	r0, 80097a6 <__multadd+0x5e>
 800979a:	4602      	mov	r2, r0
 800979c:	4b0d      	ldr	r3, [pc, #52]	; (80097d4 <__multadd+0x8c>)
 800979e:	480e      	ldr	r0, [pc, #56]	; (80097d8 <__multadd+0x90>)
 80097a0:	21b5      	movs	r1, #181	; 0xb5
 80097a2:	f000 fe79 	bl	800a498 <__assert_func>
 80097a6:	6922      	ldr	r2, [r4, #16]
 80097a8:	3202      	adds	r2, #2
 80097aa:	f104 010c 	add.w	r1, r4, #12
 80097ae:	0092      	lsls	r2, r2, #2
 80097b0:	300c      	adds	r0, #12
 80097b2:	f7fc fff5 	bl	80067a0 <memcpy>
 80097b6:	4621      	mov	r1, r4
 80097b8:	4638      	mov	r0, r7
 80097ba:	f7ff ffa3 	bl	8009704 <_Bfree>
 80097be:	462c      	mov	r4, r5
 80097c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80097c4:	3601      	adds	r6, #1
 80097c6:	f8c3 8014 	str.w	r8, [r3, #20]
 80097ca:	6126      	str	r6, [r4, #16]
 80097cc:	4620      	mov	r0, r4
 80097ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097d2:	bf00      	nop
 80097d4:	0800b28c 	.word	0x0800b28c
 80097d8:	0800b31c 	.word	0x0800b31c

080097dc <__s2b>:
 80097dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097e0:	460c      	mov	r4, r1
 80097e2:	4615      	mov	r5, r2
 80097e4:	461f      	mov	r7, r3
 80097e6:	2209      	movs	r2, #9
 80097e8:	3308      	adds	r3, #8
 80097ea:	4606      	mov	r6, r0
 80097ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80097f0:	2100      	movs	r1, #0
 80097f2:	2201      	movs	r2, #1
 80097f4:	429a      	cmp	r2, r3
 80097f6:	db09      	blt.n	800980c <__s2b+0x30>
 80097f8:	4630      	mov	r0, r6
 80097fa:	f7ff ff43 	bl	8009684 <_Balloc>
 80097fe:	b940      	cbnz	r0, 8009812 <__s2b+0x36>
 8009800:	4602      	mov	r2, r0
 8009802:	4b19      	ldr	r3, [pc, #100]	; (8009868 <__s2b+0x8c>)
 8009804:	4819      	ldr	r0, [pc, #100]	; (800986c <__s2b+0x90>)
 8009806:	21ce      	movs	r1, #206	; 0xce
 8009808:	f000 fe46 	bl	800a498 <__assert_func>
 800980c:	0052      	lsls	r2, r2, #1
 800980e:	3101      	adds	r1, #1
 8009810:	e7f0      	b.n	80097f4 <__s2b+0x18>
 8009812:	9b08      	ldr	r3, [sp, #32]
 8009814:	6143      	str	r3, [r0, #20]
 8009816:	2d09      	cmp	r5, #9
 8009818:	f04f 0301 	mov.w	r3, #1
 800981c:	6103      	str	r3, [r0, #16]
 800981e:	dd16      	ble.n	800984e <__s2b+0x72>
 8009820:	f104 0909 	add.w	r9, r4, #9
 8009824:	46c8      	mov	r8, r9
 8009826:	442c      	add	r4, r5
 8009828:	f818 3b01 	ldrb.w	r3, [r8], #1
 800982c:	4601      	mov	r1, r0
 800982e:	3b30      	subs	r3, #48	; 0x30
 8009830:	220a      	movs	r2, #10
 8009832:	4630      	mov	r0, r6
 8009834:	f7ff ff88 	bl	8009748 <__multadd>
 8009838:	45a0      	cmp	r8, r4
 800983a:	d1f5      	bne.n	8009828 <__s2b+0x4c>
 800983c:	f1a5 0408 	sub.w	r4, r5, #8
 8009840:	444c      	add	r4, r9
 8009842:	1b2d      	subs	r5, r5, r4
 8009844:	1963      	adds	r3, r4, r5
 8009846:	42bb      	cmp	r3, r7
 8009848:	db04      	blt.n	8009854 <__s2b+0x78>
 800984a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800984e:	340a      	adds	r4, #10
 8009850:	2509      	movs	r5, #9
 8009852:	e7f6      	b.n	8009842 <__s2b+0x66>
 8009854:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009858:	4601      	mov	r1, r0
 800985a:	3b30      	subs	r3, #48	; 0x30
 800985c:	220a      	movs	r2, #10
 800985e:	4630      	mov	r0, r6
 8009860:	f7ff ff72 	bl	8009748 <__multadd>
 8009864:	e7ee      	b.n	8009844 <__s2b+0x68>
 8009866:	bf00      	nop
 8009868:	0800b28c 	.word	0x0800b28c
 800986c:	0800b31c 	.word	0x0800b31c

08009870 <__hi0bits>:
 8009870:	0c03      	lsrs	r3, r0, #16
 8009872:	041b      	lsls	r3, r3, #16
 8009874:	b9d3      	cbnz	r3, 80098ac <__hi0bits+0x3c>
 8009876:	0400      	lsls	r0, r0, #16
 8009878:	2310      	movs	r3, #16
 800987a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800987e:	bf04      	itt	eq
 8009880:	0200      	lsleq	r0, r0, #8
 8009882:	3308      	addeq	r3, #8
 8009884:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009888:	bf04      	itt	eq
 800988a:	0100      	lsleq	r0, r0, #4
 800988c:	3304      	addeq	r3, #4
 800988e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009892:	bf04      	itt	eq
 8009894:	0080      	lsleq	r0, r0, #2
 8009896:	3302      	addeq	r3, #2
 8009898:	2800      	cmp	r0, #0
 800989a:	db05      	blt.n	80098a8 <__hi0bits+0x38>
 800989c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80098a0:	f103 0301 	add.w	r3, r3, #1
 80098a4:	bf08      	it	eq
 80098a6:	2320      	moveq	r3, #32
 80098a8:	4618      	mov	r0, r3
 80098aa:	4770      	bx	lr
 80098ac:	2300      	movs	r3, #0
 80098ae:	e7e4      	b.n	800987a <__hi0bits+0xa>

080098b0 <__lo0bits>:
 80098b0:	6803      	ldr	r3, [r0, #0]
 80098b2:	f013 0207 	ands.w	r2, r3, #7
 80098b6:	4601      	mov	r1, r0
 80098b8:	d00b      	beq.n	80098d2 <__lo0bits+0x22>
 80098ba:	07da      	lsls	r2, r3, #31
 80098bc:	d424      	bmi.n	8009908 <__lo0bits+0x58>
 80098be:	0798      	lsls	r0, r3, #30
 80098c0:	bf49      	itett	mi
 80098c2:	085b      	lsrmi	r3, r3, #1
 80098c4:	089b      	lsrpl	r3, r3, #2
 80098c6:	2001      	movmi	r0, #1
 80098c8:	600b      	strmi	r3, [r1, #0]
 80098ca:	bf5c      	itt	pl
 80098cc:	600b      	strpl	r3, [r1, #0]
 80098ce:	2002      	movpl	r0, #2
 80098d0:	4770      	bx	lr
 80098d2:	b298      	uxth	r0, r3
 80098d4:	b9b0      	cbnz	r0, 8009904 <__lo0bits+0x54>
 80098d6:	0c1b      	lsrs	r3, r3, #16
 80098d8:	2010      	movs	r0, #16
 80098da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80098de:	bf04      	itt	eq
 80098e0:	0a1b      	lsreq	r3, r3, #8
 80098e2:	3008      	addeq	r0, #8
 80098e4:	071a      	lsls	r2, r3, #28
 80098e6:	bf04      	itt	eq
 80098e8:	091b      	lsreq	r3, r3, #4
 80098ea:	3004      	addeq	r0, #4
 80098ec:	079a      	lsls	r2, r3, #30
 80098ee:	bf04      	itt	eq
 80098f0:	089b      	lsreq	r3, r3, #2
 80098f2:	3002      	addeq	r0, #2
 80098f4:	07da      	lsls	r2, r3, #31
 80098f6:	d403      	bmi.n	8009900 <__lo0bits+0x50>
 80098f8:	085b      	lsrs	r3, r3, #1
 80098fa:	f100 0001 	add.w	r0, r0, #1
 80098fe:	d005      	beq.n	800990c <__lo0bits+0x5c>
 8009900:	600b      	str	r3, [r1, #0]
 8009902:	4770      	bx	lr
 8009904:	4610      	mov	r0, r2
 8009906:	e7e8      	b.n	80098da <__lo0bits+0x2a>
 8009908:	2000      	movs	r0, #0
 800990a:	4770      	bx	lr
 800990c:	2020      	movs	r0, #32
 800990e:	4770      	bx	lr

08009910 <__i2b>:
 8009910:	b510      	push	{r4, lr}
 8009912:	460c      	mov	r4, r1
 8009914:	2101      	movs	r1, #1
 8009916:	f7ff feb5 	bl	8009684 <_Balloc>
 800991a:	4602      	mov	r2, r0
 800991c:	b928      	cbnz	r0, 800992a <__i2b+0x1a>
 800991e:	4b05      	ldr	r3, [pc, #20]	; (8009934 <__i2b+0x24>)
 8009920:	4805      	ldr	r0, [pc, #20]	; (8009938 <__i2b+0x28>)
 8009922:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009926:	f000 fdb7 	bl	800a498 <__assert_func>
 800992a:	2301      	movs	r3, #1
 800992c:	6144      	str	r4, [r0, #20]
 800992e:	6103      	str	r3, [r0, #16]
 8009930:	bd10      	pop	{r4, pc}
 8009932:	bf00      	nop
 8009934:	0800b28c 	.word	0x0800b28c
 8009938:	0800b31c 	.word	0x0800b31c

0800993c <__multiply>:
 800993c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009940:	4614      	mov	r4, r2
 8009942:	690a      	ldr	r2, [r1, #16]
 8009944:	6923      	ldr	r3, [r4, #16]
 8009946:	429a      	cmp	r2, r3
 8009948:	bfb8      	it	lt
 800994a:	460b      	movlt	r3, r1
 800994c:	460d      	mov	r5, r1
 800994e:	bfbc      	itt	lt
 8009950:	4625      	movlt	r5, r4
 8009952:	461c      	movlt	r4, r3
 8009954:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009958:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800995c:	68ab      	ldr	r3, [r5, #8]
 800995e:	6869      	ldr	r1, [r5, #4]
 8009960:	eb0a 0709 	add.w	r7, sl, r9
 8009964:	42bb      	cmp	r3, r7
 8009966:	b085      	sub	sp, #20
 8009968:	bfb8      	it	lt
 800996a:	3101      	addlt	r1, #1
 800996c:	f7ff fe8a 	bl	8009684 <_Balloc>
 8009970:	b930      	cbnz	r0, 8009980 <__multiply+0x44>
 8009972:	4602      	mov	r2, r0
 8009974:	4b42      	ldr	r3, [pc, #264]	; (8009a80 <__multiply+0x144>)
 8009976:	4843      	ldr	r0, [pc, #268]	; (8009a84 <__multiply+0x148>)
 8009978:	f240 115d 	movw	r1, #349	; 0x15d
 800997c:	f000 fd8c 	bl	800a498 <__assert_func>
 8009980:	f100 0614 	add.w	r6, r0, #20
 8009984:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009988:	4633      	mov	r3, r6
 800998a:	2200      	movs	r2, #0
 800998c:	4543      	cmp	r3, r8
 800998e:	d31e      	bcc.n	80099ce <__multiply+0x92>
 8009990:	f105 0c14 	add.w	ip, r5, #20
 8009994:	f104 0314 	add.w	r3, r4, #20
 8009998:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800999c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80099a0:	9202      	str	r2, [sp, #8]
 80099a2:	ebac 0205 	sub.w	r2, ip, r5
 80099a6:	3a15      	subs	r2, #21
 80099a8:	f022 0203 	bic.w	r2, r2, #3
 80099ac:	3204      	adds	r2, #4
 80099ae:	f105 0115 	add.w	r1, r5, #21
 80099b2:	458c      	cmp	ip, r1
 80099b4:	bf38      	it	cc
 80099b6:	2204      	movcc	r2, #4
 80099b8:	9201      	str	r2, [sp, #4]
 80099ba:	9a02      	ldr	r2, [sp, #8]
 80099bc:	9303      	str	r3, [sp, #12]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d808      	bhi.n	80099d4 <__multiply+0x98>
 80099c2:	2f00      	cmp	r7, #0
 80099c4:	dc55      	bgt.n	8009a72 <__multiply+0x136>
 80099c6:	6107      	str	r7, [r0, #16]
 80099c8:	b005      	add	sp, #20
 80099ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ce:	f843 2b04 	str.w	r2, [r3], #4
 80099d2:	e7db      	b.n	800998c <__multiply+0x50>
 80099d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80099d8:	f1ba 0f00 	cmp.w	sl, #0
 80099dc:	d020      	beq.n	8009a20 <__multiply+0xe4>
 80099de:	f105 0e14 	add.w	lr, r5, #20
 80099e2:	46b1      	mov	r9, r6
 80099e4:	2200      	movs	r2, #0
 80099e6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80099ea:	f8d9 b000 	ldr.w	fp, [r9]
 80099ee:	b2a1      	uxth	r1, r4
 80099f0:	fa1f fb8b 	uxth.w	fp, fp
 80099f4:	fb0a b101 	mla	r1, sl, r1, fp
 80099f8:	4411      	add	r1, r2
 80099fa:	f8d9 2000 	ldr.w	r2, [r9]
 80099fe:	0c24      	lsrs	r4, r4, #16
 8009a00:	0c12      	lsrs	r2, r2, #16
 8009a02:	fb0a 2404 	mla	r4, sl, r4, r2
 8009a06:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009a0a:	b289      	uxth	r1, r1
 8009a0c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009a10:	45f4      	cmp	ip, lr
 8009a12:	f849 1b04 	str.w	r1, [r9], #4
 8009a16:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009a1a:	d8e4      	bhi.n	80099e6 <__multiply+0xaa>
 8009a1c:	9901      	ldr	r1, [sp, #4]
 8009a1e:	5072      	str	r2, [r6, r1]
 8009a20:	9a03      	ldr	r2, [sp, #12]
 8009a22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a26:	3304      	adds	r3, #4
 8009a28:	f1b9 0f00 	cmp.w	r9, #0
 8009a2c:	d01f      	beq.n	8009a6e <__multiply+0x132>
 8009a2e:	6834      	ldr	r4, [r6, #0]
 8009a30:	f105 0114 	add.w	r1, r5, #20
 8009a34:	46b6      	mov	lr, r6
 8009a36:	f04f 0a00 	mov.w	sl, #0
 8009a3a:	880a      	ldrh	r2, [r1, #0]
 8009a3c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009a40:	fb09 b202 	mla	r2, r9, r2, fp
 8009a44:	4492      	add	sl, r2
 8009a46:	b2a4      	uxth	r4, r4
 8009a48:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009a4c:	f84e 4b04 	str.w	r4, [lr], #4
 8009a50:	f851 4b04 	ldr.w	r4, [r1], #4
 8009a54:	f8be 2000 	ldrh.w	r2, [lr]
 8009a58:	0c24      	lsrs	r4, r4, #16
 8009a5a:	fb09 2404 	mla	r4, r9, r4, r2
 8009a5e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009a62:	458c      	cmp	ip, r1
 8009a64:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009a68:	d8e7      	bhi.n	8009a3a <__multiply+0xfe>
 8009a6a:	9a01      	ldr	r2, [sp, #4]
 8009a6c:	50b4      	str	r4, [r6, r2]
 8009a6e:	3604      	adds	r6, #4
 8009a70:	e7a3      	b.n	80099ba <__multiply+0x7e>
 8009a72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1a5      	bne.n	80099c6 <__multiply+0x8a>
 8009a7a:	3f01      	subs	r7, #1
 8009a7c:	e7a1      	b.n	80099c2 <__multiply+0x86>
 8009a7e:	bf00      	nop
 8009a80:	0800b28c 	.word	0x0800b28c
 8009a84:	0800b31c 	.word	0x0800b31c

08009a88 <__pow5mult>:
 8009a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a8c:	4615      	mov	r5, r2
 8009a8e:	f012 0203 	ands.w	r2, r2, #3
 8009a92:	4606      	mov	r6, r0
 8009a94:	460f      	mov	r7, r1
 8009a96:	d007      	beq.n	8009aa8 <__pow5mult+0x20>
 8009a98:	4c25      	ldr	r4, [pc, #148]	; (8009b30 <__pow5mult+0xa8>)
 8009a9a:	3a01      	subs	r2, #1
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009aa2:	f7ff fe51 	bl	8009748 <__multadd>
 8009aa6:	4607      	mov	r7, r0
 8009aa8:	10ad      	asrs	r5, r5, #2
 8009aaa:	d03d      	beq.n	8009b28 <__pow5mult+0xa0>
 8009aac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009aae:	b97c      	cbnz	r4, 8009ad0 <__pow5mult+0x48>
 8009ab0:	2010      	movs	r0, #16
 8009ab2:	f7ff fdcd 	bl	8009650 <malloc>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	6270      	str	r0, [r6, #36]	; 0x24
 8009aba:	b928      	cbnz	r0, 8009ac8 <__pow5mult+0x40>
 8009abc:	4b1d      	ldr	r3, [pc, #116]	; (8009b34 <__pow5mult+0xac>)
 8009abe:	481e      	ldr	r0, [pc, #120]	; (8009b38 <__pow5mult+0xb0>)
 8009ac0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ac4:	f000 fce8 	bl	800a498 <__assert_func>
 8009ac8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009acc:	6004      	str	r4, [r0, #0]
 8009ace:	60c4      	str	r4, [r0, #12]
 8009ad0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ad4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ad8:	b94c      	cbnz	r4, 8009aee <__pow5mult+0x66>
 8009ada:	f240 2171 	movw	r1, #625	; 0x271
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f7ff ff16 	bl	8009910 <__i2b>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009aea:	4604      	mov	r4, r0
 8009aec:	6003      	str	r3, [r0, #0]
 8009aee:	f04f 0900 	mov.w	r9, #0
 8009af2:	07eb      	lsls	r3, r5, #31
 8009af4:	d50a      	bpl.n	8009b0c <__pow5mult+0x84>
 8009af6:	4639      	mov	r1, r7
 8009af8:	4622      	mov	r2, r4
 8009afa:	4630      	mov	r0, r6
 8009afc:	f7ff ff1e 	bl	800993c <__multiply>
 8009b00:	4639      	mov	r1, r7
 8009b02:	4680      	mov	r8, r0
 8009b04:	4630      	mov	r0, r6
 8009b06:	f7ff fdfd 	bl	8009704 <_Bfree>
 8009b0a:	4647      	mov	r7, r8
 8009b0c:	106d      	asrs	r5, r5, #1
 8009b0e:	d00b      	beq.n	8009b28 <__pow5mult+0xa0>
 8009b10:	6820      	ldr	r0, [r4, #0]
 8009b12:	b938      	cbnz	r0, 8009b24 <__pow5mult+0x9c>
 8009b14:	4622      	mov	r2, r4
 8009b16:	4621      	mov	r1, r4
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f7ff ff0f 	bl	800993c <__multiply>
 8009b1e:	6020      	str	r0, [r4, #0]
 8009b20:	f8c0 9000 	str.w	r9, [r0]
 8009b24:	4604      	mov	r4, r0
 8009b26:	e7e4      	b.n	8009af2 <__pow5mult+0x6a>
 8009b28:	4638      	mov	r0, r7
 8009b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b2e:	bf00      	nop
 8009b30:	0800b470 	.word	0x0800b470
 8009b34:	0800b216 	.word	0x0800b216
 8009b38:	0800b31c 	.word	0x0800b31c

08009b3c <__lshift>:
 8009b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b40:	460c      	mov	r4, r1
 8009b42:	6849      	ldr	r1, [r1, #4]
 8009b44:	6923      	ldr	r3, [r4, #16]
 8009b46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b4a:	68a3      	ldr	r3, [r4, #8]
 8009b4c:	4607      	mov	r7, r0
 8009b4e:	4691      	mov	r9, r2
 8009b50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b54:	f108 0601 	add.w	r6, r8, #1
 8009b58:	42b3      	cmp	r3, r6
 8009b5a:	db0b      	blt.n	8009b74 <__lshift+0x38>
 8009b5c:	4638      	mov	r0, r7
 8009b5e:	f7ff fd91 	bl	8009684 <_Balloc>
 8009b62:	4605      	mov	r5, r0
 8009b64:	b948      	cbnz	r0, 8009b7a <__lshift+0x3e>
 8009b66:	4602      	mov	r2, r0
 8009b68:	4b28      	ldr	r3, [pc, #160]	; (8009c0c <__lshift+0xd0>)
 8009b6a:	4829      	ldr	r0, [pc, #164]	; (8009c10 <__lshift+0xd4>)
 8009b6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b70:	f000 fc92 	bl	800a498 <__assert_func>
 8009b74:	3101      	adds	r1, #1
 8009b76:	005b      	lsls	r3, r3, #1
 8009b78:	e7ee      	b.n	8009b58 <__lshift+0x1c>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f100 0114 	add.w	r1, r0, #20
 8009b80:	f100 0210 	add.w	r2, r0, #16
 8009b84:	4618      	mov	r0, r3
 8009b86:	4553      	cmp	r3, sl
 8009b88:	db33      	blt.n	8009bf2 <__lshift+0xb6>
 8009b8a:	6920      	ldr	r0, [r4, #16]
 8009b8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b90:	f104 0314 	add.w	r3, r4, #20
 8009b94:	f019 091f 	ands.w	r9, r9, #31
 8009b98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ba0:	d02b      	beq.n	8009bfa <__lshift+0xbe>
 8009ba2:	f1c9 0e20 	rsb	lr, r9, #32
 8009ba6:	468a      	mov	sl, r1
 8009ba8:	2200      	movs	r2, #0
 8009baa:	6818      	ldr	r0, [r3, #0]
 8009bac:	fa00 f009 	lsl.w	r0, r0, r9
 8009bb0:	4302      	orrs	r2, r0
 8009bb2:	f84a 2b04 	str.w	r2, [sl], #4
 8009bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bba:	459c      	cmp	ip, r3
 8009bbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009bc0:	d8f3      	bhi.n	8009baa <__lshift+0x6e>
 8009bc2:	ebac 0304 	sub.w	r3, ip, r4
 8009bc6:	3b15      	subs	r3, #21
 8009bc8:	f023 0303 	bic.w	r3, r3, #3
 8009bcc:	3304      	adds	r3, #4
 8009bce:	f104 0015 	add.w	r0, r4, #21
 8009bd2:	4584      	cmp	ip, r0
 8009bd4:	bf38      	it	cc
 8009bd6:	2304      	movcc	r3, #4
 8009bd8:	50ca      	str	r2, [r1, r3]
 8009bda:	b10a      	cbz	r2, 8009be0 <__lshift+0xa4>
 8009bdc:	f108 0602 	add.w	r6, r8, #2
 8009be0:	3e01      	subs	r6, #1
 8009be2:	4638      	mov	r0, r7
 8009be4:	612e      	str	r6, [r5, #16]
 8009be6:	4621      	mov	r1, r4
 8009be8:	f7ff fd8c 	bl	8009704 <_Bfree>
 8009bec:	4628      	mov	r0, r5
 8009bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	e7c5      	b.n	8009b86 <__lshift+0x4a>
 8009bfa:	3904      	subs	r1, #4
 8009bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c00:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c04:	459c      	cmp	ip, r3
 8009c06:	d8f9      	bhi.n	8009bfc <__lshift+0xc0>
 8009c08:	e7ea      	b.n	8009be0 <__lshift+0xa4>
 8009c0a:	bf00      	nop
 8009c0c:	0800b28c 	.word	0x0800b28c
 8009c10:	0800b31c 	.word	0x0800b31c

08009c14 <__mcmp>:
 8009c14:	b530      	push	{r4, r5, lr}
 8009c16:	6902      	ldr	r2, [r0, #16]
 8009c18:	690c      	ldr	r4, [r1, #16]
 8009c1a:	1b12      	subs	r2, r2, r4
 8009c1c:	d10e      	bne.n	8009c3c <__mcmp+0x28>
 8009c1e:	f100 0314 	add.w	r3, r0, #20
 8009c22:	3114      	adds	r1, #20
 8009c24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c34:	42a5      	cmp	r5, r4
 8009c36:	d003      	beq.n	8009c40 <__mcmp+0x2c>
 8009c38:	d305      	bcc.n	8009c46 <__mcmp+0x32>
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	bd30      	pop	{r4, r5, pc}
 8009c40:	4283      	cmp	r3, r0
 8009c42:	d3f3      	bcc.n	8009c2c <__mcmp+0x18>
 8009c44:	e7fa      	b.n	8009c3c <__mcmp+0x28>
 8009c46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c4a:	e7f7      	b.n	8009c3c <__mcmp+0x28>

08009c4c <__mdiff>:
 8009c4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c50:	460c      	mov	r4, r1
 8009c52:	4606      	mov	r6, r0
 8009c54:	4611      	mov	r1, r2
 8009c56:	4620      	mov	r0, r4
 8009c58:	4617      	mov	r7, r2
 8009c5a:	f7ff ffdb 	bl	8009c14 <__mcmp>
 8009c5e:	1e05      	subs	r5, r0, #0
 8009c60:	d110      	bne.n	8009c84 <__mdiff+0x38>
 8009c62:	4629      	mov	r1, r5
 8009c64:	4630      	mov	r0, r6
 8009c66:	f7ff fd0d 	bl	8009684 <_Balloc>
 8009c6a:	b930      	cbnz	r0, 8009c7a <__mdiff+0x2e>
 8009c6c:	4b39      	ldr	r3, [pc, #228]	; (8009d54 <__mdiff+0x108>)
 8009c6e:	4602      	mov	r2, r0
 8009c70:	f240 2132 	movw	r1, #562	; 0x232
 8009c74:	4838      	ldr	r0, [pc, #224]	; (8009d58 <__mdiff+0x10c>)
 8009c76:	f000 fc0f 	bl	800a498 <__assert_func>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c84:	bfa4      	itt	ge
 8009c86:	463b      	movge	r3, r7
 8009c88:	4627      	movge	r7, r4
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	6879      	ldr	r1, [r7, #4]
 8009c8e:	bfa6      	itte	ge
 8009c90:	461c      	movge	r4, r3
 8009c92:	2500      	movge	r5, #0
 8009c94:	2501      	movlt	r5, #1
 8009c96:	f7ff fcf5 	bl	8009684 <_Balloc>
 8009c9a:	b920      	cbnz	r0, 8009ca6 <__mdiff+0x5a>
 8009c9c:	4b2d      	ldr	r3, [pc, #180]	; (8009d54 <__mdiff+0x108>)
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ca4:	e7e6      	b.n	8009c74 <__mdiff+0x28>
 8009ca6:	693e      	ldr	r6, [r7, #16]
 8009ca8:	60c5      	str	r5, [r0, #12]
 8009caa:	6925      	ldr	r5, [r4, #16]
 8009cac:	f107 0114 	add.w	r1, r7, #20
 8009cb0:	f104 0914 	add.w	r9, r4, #20
 8009cb4:	f100 0e14 	add.w	lr, r0, #20
 8009cb8:	f107 0210 	add.w	r2, r7, #16
 8009cbc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009cc0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009cc4:	46f2      	mov	sl, lr
 8009cc6:	2700      	movs	r7, #0
 8009cc8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ccc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009cd0:	fa1f f883 	uxth.w	r8, r3
 8009cd4:	fa17 f78b 	uxtah	r7, r7, fp
 8009cd8:	0c1b      	lsrs	r3, r3, #16
 8009cda:	eba7 0808 	sub.w	r8, r7, r8
 8009cde:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ce2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ce6:	fa1f f888 	uxth.w	r8, r8
 8009cea:	141f      	asrs	r7, r3, #16
 8009cec:	454d      	cmp	r5, r9
 8009cee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009cf2:	f84a 3b04 	str.w	r3, [sl], #4
 8009cf6:	d8e7      	bhi.n	8009cc8 <__mdiff+0x7c>
 8009cf8:	1b2b      	subs	r3, r5, r4
 8009cfa:	3b15      	subs	r3, #21
 8009cfc:	f023 0303 	bic.w	r3, r3, #3
 8009d00:	3304      	adds	r3, #4
 8009d02:	3415      	adds	r4, #21
 8009d04:	42a5      	cmp	r5, r4
 8009d06:	bf38      	it	cc
 8009d08:	2304      	movcc	r3, #4
 8009d0a:	4419      	add	r1, r3
 8009d0c:	4473      	add	r3, lr
 8009d0e:	469e      	mov	lr, r3
 8009d10:	460d      	mov	r5, r1
 8009d12:	4565      	cmp	r5, ip
 8009d14:	d30e      	bcc.n	8009d34 <__mdiff+0xe8>
 8009d16:	f10c 0203 	add.w	r2, ip, #3
 8009d1a:	1a52      	subs	r2, r2, r1
 8009d1c:	f022 0203 	bic.w	r2, r2, #3
 8009d20:	3903      	subs	r1, #3
 8009d22:	458c      	cmp	ip, r1
 8009d24:	bf38      	it	cc
 8009d26:	2200      	movcc	r2, #0
 8009d28:	441a      	add	r2, r3
 8009d2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009d2e:	b17b      	cbz	r3, 8009d50 <__mdiff+0x104>
 8009d30:	6106      	str	r6, [r0, #16]
 8009d32:	e7a5      	b.n	8009c80 <__mdiff+0x34>
 8009d34:	f855 8b04 	ldr.w	r8, [r5], #4
 8009d38:	fa17 f488 	uxtah	r4, r7, r8
 8009d3c:	1422      	asrs	r2, r4, #16
 8009d3e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009d42:	b2a4      	uxth	r4, r4
 8009d44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009d48:	f84e 4b04 	str.w	r4, [lr], #4
 8009d4c:	1417      	asrs	r7, r2, #16
 8009d4e:	e7e0      	b.n	8009d12 <__mdiff+0xc6>
 8009d50:	3e01      	subs	r6, #1
 8009d52:	e7ea      	b.n	8009d2a <__mdiff+0xde>
 8009d54:	0800b28c 	.word	0x0800b28c
 8009d58:	0800b31c 	.word	0x0800b31c

08009d5c <__ulp>:
 8009d5c:	b082      	sub	sp, #8
 8009d5e:	ed8d 0b00 	vstr	d0, [sp]
 8009d62:	9b01      	ldr	r3, [sp, #4]
 8009d64:	4912      	ldr	r1, [pc, #72]	; (8009db0 <__ulp+0x54>)
 8009d66:	4019      	ands	r1, r3
 8009d68:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009d6c:	2900      	cmp	r1, #0
 8009d6e:	dd05      	ble.n	8009d7c <__ulp+0x20>
 8009d70:	2200      	movs	r2, #0
 8009d72:	460b      	mov	r3, r1
 8009d74:	ec43 2b10 	vmov	d0, r2, r3
 8009d78:	b002      	add	sp, #8
 8009d7a:	4770      	bx	lr
 8009d7c:	4249      	negs	r1, r1
 8009d7e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009d82:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009d86:	f04f 0200 	mov.w	r2, #0
 8009d8a:	f04f 0300 	mov.w	r3, #0
 8009d8e:	da04      	bge.n	8009d9a <__ulp+0x3e>
 8009d90:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009d94:	fa41 f300 	asr.w	r3, r1, r0
 8009d98:	e7ec      	b.n	8009d74 <__ulp+0x18>
 8009d9a:	f1a0 0114 	sub.w	r1, r0, #20
 8009d9e:	291e      	cmp	r1, #30
 8009da0:	bfda      	itte	le
 8009da2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009da6:	fa20 f101 	lsrle.w	r1, r0, r1
 8009daa:	2101      	movgt	r1, #1
 8009dac:	460a      	mov	r2, r1
 8009dae:	e7e1      	b.n	8009d74 <__ulp+0x18>
 8009db0:	7ff00000 	.word	0x7ff00000

08009db4 <__b2d>:
 8009db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db6:	6905      	ldr	r5, [r0, #16]
 8009db8:	f100 0714 	add.w	r7, r0, #20
 8009dbc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009dc0:	1f2e      	subs	r6, r5, #4
 8009dc2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f7ff fd52 	bl	8009870 <__hi0bits>
 8009dcc:	f1c0 0320 	rsb	r3, r0, #32
 8009dd0:	280a      	cmp	r0, #10
 8009dd2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009e50 <__b2d+0x9c>
 8009dd6:	600b      	str	r3, [r1, #0]
 8009dd8:	dc14      	bgt.n	8009e04 <__b2d+0x50>
 8009dda:	f1c0 0e0b 	rsb	lr, r0, #11
 8009dde:	fa24 f10e 	lsr.w	r1, r4, lr
 8009de2:	42b7      	cmp	r7, r6
 8009de4:	ea41 030c 	orr.w	r3, r1, ip
 8009de8:	bf34      	ite	cc
 8009dea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009dee:	2100      	movcs	r1, #0
 8009df0:	3015      	adds	r0, #21
 8009df2:	fa04 f000 	lsl.w	r0, r4, r0
 8009df6:	fa21 f10e 	lsr.w	r1, r1, lr
 8009dfa:	ea40 0201 	orr.w	r2, r0, r1
 8009dfe:	ec43 2b10 	vmov	d0, r2, r3
 8009e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e04:	42b7      	cmp	r7, r6
 8009e06:	bf3a      	itte	cc
 8009e08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009e0c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009e10:	2100      	movcs	r1, #0
 8009e12:	380b      	subs	r0, #11
 8009e14:	d017      	beq.n	8009e46 <__b2d+0x92>
 8009e16:	f1c0 0c20 	rsb	ip, r0, #32
 8009e1a:	fa04 f500 	lsl.w	r5, r4, r0
 8009e1e:	42be      	cmp	r6, r7
 8009e20:	fa21 f40c 	lsr.w	r4, r1, ip
 8009e24:	ea45 0504 	orr.w	r5, r5, r4
 8009e28:	bf8c      	ite	hi
 8009e2a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009e2e:	2400      	movls	r4, #0
 8009e30:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009e34:	fa01 f000 	lsl.w	r0, r1, r0
 8009e38:	fa24 f40c 	lsr.w	r4, r4, ip
 8009e3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009e40:	ea40 0204 	orr.w	r2, r0, r4
 8009e44:	e7db      	b.n	8009dfe <__b2d+0x4a>
 8009e46:	ea44 030c 	orr.w	r3, r4, ip
 8009e4a:	460a      	mov	r2, r1
 8009e4c:	e7d7      	b.n	8009dfe <__b2d+0x4a>
 8009e4e:	bf00      	nop
 8009e50:	3ff00000 	.word	0x3ff00000

08009e54 <__d2b>:
 8009e54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e58:	4689      	mov	r9, r1
 8009e5a:	2101      	movs	r1, #1
 8009e5c:	ec57 6b10 	vmov	r6, r7, d0
 8009e60:	4690      	mov	r8, r2
 8009e62:	f7ff fc0f 	bl	8009684 <_Balloc>
 8009e66:	4604      	mov	r4, r0
 8009e68:	b930      	cbnz	r0, 8009e78 <__d2b+0x24>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	4b25      	ldr	r3, [pc, #148]	; (8009f04 <__d2b+0xb0>)
 8009e6e:	4826      	ldr	r0, [pc, #152]	; (8009f08 <__d2b+0xb4>)
 8009e70:	f240 310a 	movw	r1, #778	; 0x30a
 8009e74:	f000 fb10 	bl	800a498 <__assert_func>
 8009e78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e80:	bb35      	cbnz	r5, 8009ed0 <__d2b+0x7c>
 8009e82:	2e00      	cmp	r6, #0
 8009e84:	9301      	str	r3, [sp, #4]
 8009e86:	d028      	beq.n	8009eda <__d2b+0x86>
 8009e88:	4668      	mov	r0, sp
 8009e8a:	9600      	str	r6, [sp, #0]
 8009e8c:	f7ff fd10 	bl	80098b0 <__lo0bits>
 8009e90:	9900      	ldr	r1, [sp, #0]
 8009e92:	b300      	cbz	r0, 8009ed6 <__d2b+0x82>
 8009e94:	9a01      	ldr	r2, [sp, #4]
 8009e96:	f1c0 0320 	rsb	r3, r0, #32
 8009e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9e:	430b      	orrs	r3, r1
 8009ea0:	40c2      	lsrs	r2, r0
 8009ea2:	6163      	str	r3, [r4, #20]
 8009ea4:	9201      	str	r2, [sp, #4]
 8009ea6:	9b01      	ldr	r3, [sp, #4]
 8009ea8:	61a3      	str	r3, [r4, #24]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	bf14      	ite	ne
 8009eae:	2202      	movne	r2, #2
 8009eb0:	2201      	moveq	r2, #1
 8009eb2:	6122      	str	r2, [r4, #16]
 8009eb4:	b1d5      	cbz	r5, 8009eec <__d2b+0x98>
 8009eb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009eba:	4405      	add	r5, r0
 8009ebc:	f8c9 5000 	str.w	r5, [r9]
 8009ec0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ec4:	f8c8 0000 	str.w	r0, [r8]
 8009ec8:	4620      	mov	r0, r4
 8009eca:	b003      	add	sp, #12
 8009ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ed4:	e7d5      	b.n	8009e82 <__d2b+0x2e>
 8009ed6:	6161      	str	r1, [r4, #20]
 8009ed8:	e7e5      	b.n	8009ea6 <__d2b+0x52>
 8009eda:	a801      	add	r0, sp, #4
 8009edc:	f7ff fce8 	bl	80098b0 <__lo0bits>
 8009ee0:	9b01      	ldr	r3, [sp, #4]
 8009ee2:	6163      	str	r3, [r4, #20]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	6122      	str	r2, [r4, #16]
 8009ee8:	3020      	adds	r0, #32
 8009eea:	e7e3      	b.n	8009eb4 <__d2b+0x60>
 8009eec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ef0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ef4:	f8c9 0000 	str.w	r0, [r9]
 8009ef8:	6918      	ldr	r0, [r3, #16]
 8009efa:	f7ff fcb9 	bl	8009870 <__hi0bits>
 8009efe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f02:	e7df      	b.n	8009ec4 <__d2b+0x70>
 8009f04:	0800b28c 	.word	0x0800b28c
 8009f08:	0800b31c 	.word	0x0800b31c

08009f0c <__ratio>:
 8009f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	4688      	mov	r8, r1
 8009f12:	4669      	mov	r1, sp
 8009f14:	4681      	mov	r9, r0
 8009f16:	f7ff ff4d 	bl	8009db4 <__b2d>
 8009f1a:	a901      	add	r1, sp, #4
 8009f1c:	4640      	mov	r0, r8
 8009f1e:	ec55 4b10 	vmov	r4, r5, d0
 8009f22:	f7ff ff47 	bl	8009db4 <__b2d>
 8009f26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f2a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009f2e:	eba3 0c02 	sub.w	ip, r3, r2
 8009f32:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009f36:	1a9b      	subs	r3, r3, r2
 8009f38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009f3c:	ec51 0b10 	vmov	r0, r1, d0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	bfd6      	itet	le
 8009f44:	460a      	movle	r2, r1
 8009f46:	462a      	movgt	r2, r5
 8009f48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009f4c:	468b      	mov	fp, r1
 8009f4e:	462f      	mov	r7, r5
 8009f50:	bfd4      	ite	le
 8009f52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009f56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	ee10 2a10 	vmov	r2, s0
 8009f60:	465b      	mov	r3, fp
 8009f62:	4639      	mov	r1, r7
 8009f64:	f7f6 fc72 	bl	800084c <__aeabi_ddiv>
 8009f68:	ec41 0b10 	vmov	d0, r0, r1
 8009f6c:	b003      	add	sp, #12
 8009f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f72 <__copybits>:
 8009f72:	3901      	subs	r1, #1
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	1149      	asrs	r1, r1, #5
 8009f78:	6914      	ldr	r4, [r2, #16]
 8009f7a:	3101      	adds	r1, #1
 8009f7c:	f102 0314 	add.w	r3, r2, #20
 8009f80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009f84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009f88:	1f05      	subs	r5, r0, #4
 8009f8a:	42a3      	cmp	r3, r4
 8009f8c:	d30c      	bcc.n	8009fa8 <__copybits+0x36>
 8009f8e:	1aa3      	subs	r3, r4, r2
 8009f90:	3b11      	subs	r3, #17
 8009f92:	f023 0303 	bic.w	r3, r3, #3
 8009f96:	3211      	adds	r2, #17
 8009f98:	42a2      	cmp	r2, r4
 8009f9a:	bf88      	it	hi
 8009f9c:	2300      	movhi	r3, #0
 8009f9e:	4418      	add	r0, r3
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4288      	cmp	r0, r1
 8009fa4:	d305      	bcc.n	8009fb2 <__copybits+0x40>
 8009fa6:	bd70      	pop	{r4, r5, r6, pc}
 8009fa8:	f853 6b04 	ldr.w	r6, [r3], #4
 8009fac:	f845 6f04 	str.w	r6, [r5, #4]!
 8009fb0:	e7eb      	b.n	8009f8a <__copybits+0x18>
 8009fb2:	f840 3b04 	str.w	r3, [r0], #4
 8009fb6:	e7f4      	b.n	8009fa2 <__copybits+0x30>

08009fb8 <__any_on>:
 8009fb8:	f100 0214 	add.w	r2, r0, #20
 8009fbc:	6900      	ldr	r0, [r0, #16]
 8009fbe:	114b      	asrs	r3, r1, #5
 8009fc0:	4298      	cmp	r0, r3
 8009fc2:	b510      	push	{r4, lr}
 8009fc4:	db11      	blt.n	8009fea <__any_on+0x32>
 8009fc6:	dd0a      	ble.n	8009fde <__any_on+0x26>
 8009fc8:	f011 011f 	ands.w	r1, r1, #31
 8009fcc:	d007      	beq.n	8009fde <__any_on+0x26>
 8009fce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009fd2:	fa24 f001 	lsr.w	r0, r4, r1
 8009fd6:	fa00 f101 	lsl.w	r1, r0, r1
 8009fda:	428c      	cmp	r4, r1
 8009fdc:	d10b      	bne.n	8009ff6 <__any_on+0x3e>
 8009fde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d803      	bhi.n	8009fee <__any_on+0x36>
 8009fe6:	2000      	movs	r0, #0
 8009fe8:	bd10      	pop	{r4, pc}
 8009fea:	4603      	mov	r3, r0
 8009fec:	e7f7      	b.n	8009fde <__any_on+0x26>
 8009fee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ff2:	2900      	cmp	r1, #0
 8009ff4:	d0f5      	beq.n	8009fe2 <__any_on+0x2a>
 8009ff6:	2001      	movs	r0, #1
 8009ff8:	e7f6      	b.n	8009fe8 <__any_on+0x30>

08009ffa <_calloc_r>:
 8009ffa:	b513      	push	{r0, r1, r4, lr}
 8009ffc:	434a      	muls	r2, r1
 8009ffe:	4611      	mov	r1, r2
 800a000:	9201      	str	r2, [sp, #4]
 800a002:	f000 f859 	bl	800a0b8 <_malloc_r>
 800a006:	4604      	mov	r4, r0
 800a008:	b118      	cbz	r0, 800a012 <_calloc_r+0x18>
 800a00a:	9a01      	ldr	r2, [sp, #4]
 800a00c:	2100      	movs	r1, #0
 800a00e:	f7fc fbd5 	bl	80067bc <memset>
 800a012:	4620      	mov	r0, r4
 800a014:	b002      	add	sp, #8
 800a016:	bd10      	pop	{r4, pc}

0800a018 <_free_r>:
 800a018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a01a:	2900      	cmp	r1, #0
 800a01c:	d048      	beq.n	800a0b0 <_free_r+0x98>
 800a01e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a022:	9001      	str	r0, [sp, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	f1a1 0404 	sub.w	r4, r1, #4
 800a02a:	bfb8      	it	lt
 800a02c:	18e4      	addlt	r4, r4, r3
 800a02e:	f000 fa7d 	bl	800a52c <__malloc_lock>
 800a032:	4a20      	ldr	r2, [pc, #128]	; (800a0b4 <_free_r+0x9c>)
 800a034:	9801      	ldr	r0, [sp, #4]
 800a036:	6813      	ldr	r3, [r2, #0]
 800a038:	4615      	mov	r5, r2
 800a03a:	b933      	cbnz	r3, 800a04a <_free_r+0x32>
 800a03c:	6063      	str	r3, [r4, #4]
 800a03e:	6014      	str	r4, [r2, #0]
 800a040:	b003      	add	sp, #12
 800a042:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a046:	f000 ba77 	b.w	800a538 <__malloc_unlock>
 800a04a:	42a3      	cmp	r3, r4
 800a04c:	d90b      	bls.n	800a066 <_free_r+0x4e>
 800a04e:	6821      	ldr	r1, [r4, #0]
 800a050:	1862      	adds	r2, r4, r1
 800a052:	4293      	cmp	r3, r2
 800a054:	bf04      	itt	eq
 800a056:	681a      	ldreq	r2, [r3, #0]
 800a058:	685b      	ldreq	r3, [r3, #4]
 800a05a:	6063      	str	r3, [r4, #4]
 800a05c:	bf04      	itt	eq
 800a05e:	1852      	addeq	r2, r2, r1
 800a060:	6022      	streq	r2, [r4, #0]
 800a062:	602c      	str	r4, [r5, #0]
 800a064:	e7ec      	b.n	800a040 <_free_r+0x28>
 800a066:	461a      	mov	r2, r3
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	b10b      	cbz	r3, 800a070 <_free_r+0x58>
 800a06c:	42a3      	cmp	r3, r4
 800a06e:	d9fa      	bls.n	800a066 <_free_r+0x4e>
 800a070:	6811      	ldr	r1, [r2, #0]
 800a072:	1855      	adds	r5, r2, r1
 800a074:	42a5      	cmp	r5, r4
 800a076:	d10b      	bne.n	800a090 <_free_r+0x78>
 800a078:	6824      	ldr	r4, [r4, #0]
 800a07a:	4421      	add	r1, r4
 800a07c:	1854      	adds	r4, r2, r1
 800a07e:	42a3      	cmp	r3, r4
 800a080:	6011      	str	r1, [r2, #0]
 800a082:	d1dd      	bne.n	800a040 <_free_r+0x28>
 800a084:	681c      	ldr	r4, [r3, #0]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	6053      	str	r3, [r2, #4]
 800a08a:	4421      	add	r1, r4
 800a08c:	6011      	str	r1, [r2, #0]
 800a08e:	e7d7      	b.n	800a040 <_free_r+0x28>
 800a090:	d902      	bls.n	800a098 <_free_r+0x80>
 800a092:	230c      	movs	r3, #12
 800a094:	6003      	str	r3, [r0, #0]
 800a096:	e7d3      	b.n	800a040 <_free_r+0x28>
 800a098:	6825      	ldr	r5, [r4, #0]
 800a09a:	1961      	adds	r1, r4, r5
 800a09c:	428b      	cmp	r3, r1
 800a09e:	bf04      	itt	eq
 800a0a0:	6819      	ldreq	r1, [r3, #0]
 800a0a2:	685b      	ldreq	r3, [r3, #4]
 800a0a4:	6063      	str	r3, [r4, #4]
 800a0a6:	bf04      	itt	eq
 800a0a8:	1949      	addeq	r1, r1, r5
 800a0aa:	6021      	streq	r1, [r4, #0]
 800a0ac:	6054      	str	r4, [r2, #4]
 800a0ae:	e7c7      	b.n	800a040 <_free_r+0x28>
 800a0b0:	b003      	add	sp, #12
 800a0b2:	bd30      	pop	{r4, r5, pc}
 800a0b4:	20004c08 	.word	0x20004c08

0800a0b8 <_malloc_r>:
 800a0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ba:	1ccd      	adds	r5, r1, #3
 800a0bc:	f025 0503 	bic.w	r5, r5, #3
 800a0c0:	3508      	adds	r5, #8
 800a0c2:	2d0c      	cmp	r5, #12
 800a0c4:	bf38      	it	cc
 800a0c6:	250c      	movcc	r5, #12
 800a0c8:	2d00      	cmp	r5, #0
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	db01      	blt.n	800a0d2 <_malloc_r+0x1a>
 800a0ce:	42a9      	cmp	r1, r5
 800a0d0:	d903      	bls.n	800a0da <_malloc_r+0x22>
 800a0d2:	230c      	movs	r3, #12
 800a0d4:	6033      	str	r3, [r6, #0]
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0da:	f000 fa27 	bl	800a52c <__malloc_lock>
 800a0de:	4921      	ldr	r1, [pc, #132]	; (800a164 <_malloc_r+0xac>)
 800a0e0:	680a      	ldr	r2, [r1, #0]
 800a0e2:	4614      	mov	r4, r2
 800a0e4:	b99c      	cbnz	r4, 800a10e <_malloc_r+0x56>
 800a0e6:	4f20      	ldr	r7, [pc, #128]	; (800a168 <_malloc_r+0xb0>)
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	b923      	cbnz	r3, 800a0f6 <_malloc_r+0x3e>
 800a0ec:	4621      	mov	r1, r4
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f000 f9a2 	bl	800a438 <_sbrk_r>
 800a0f4:	6038      	str	r0, [r7, #0]
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f000 f99d 	bl	800a438 <_sbrk_r>
 800a0fe:	1c43      	adds	r3, r0, #1
 800a100:	d123      	bne.n	800a14a <_malloc_r+0x92>
 800a102:	230c      	movs	r3, #12
 800a104:	6033      	str	r3, [r6, #0]
 800a106:	4630      	mov	r0, r6
 800a108:	f000 fa16 	bl	800a538 <__malloc_unlock>
 800a10c:	e7e3      	b.n	800a0d6 <_malloc_r+0x1e>
 800a10e:	6823      	ldr	r3, [r4, #0]
 800a110:	1b5b      	subs	r3, r3, r5
 800a112:	d417      	bmi.n	800a144 <_malloc_r+0x8c>
 800a114:	2b0b      	cmp	r3, #11
 800a116:	d903      	bls.n	800a120 <_malloc_r+0x68>
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	441c      	add	r4, r3
 800a11c:	6025      	str	r5, [r4, #0]
 800a11e:	e004      	b.n	800a12a <_malloc_r+0x72>
 800a120:	6863      	ldr	r3, [r4, #4]
 800a122:	42a2      	cmp	r2, r4
 800a124:	bf0c      	ite	eq
 800a126:	600b      	streq	r3, [r1, #0]
 800a128:	6053      	strne	r3, [r2, #4]
 800a12a:	4630      	mov	r0, r6
 800a12c:	f000 fa04 	bl	800a538 <__malloc_unlock>
 800a130:	f104 000b 	add.w	r0, r4, #11
 800a134:	1d23      	adds	r3, r4, #4
 800a136:	f020 0007 	bic.w	r0, r0, #7
 800a13a:	1ac2      	subs	r2, r0, r3
 800a13c:	d0cc      	beq.n	800a0d8 <_malloc_r+0x20>
 800a13e:	1a1b      	subs	r3, r3, r0
 800a140:	50a3      	str	r3, [r4, r2]
 800a142:	e7c9      	b.n	800a0d8 <_malloc_r+0x20>
 800a144:	4622      	mov	r2, r4
 800a146:	6864      	ldr	r4, [r4, #4]
 800a148:	e7cc      	b.n	800a0e4 <_malloc_r+0x2c>
 800a14a:	1cc4      	adds	r4, r0, #3
 800a14c:	f024 0403 	bic.w	r4, r4, #3
 800a150:	42a0      	cmp	r0, r4
 800a152:	d0e3      	beq.n	800a11c <_malloc_r+0x64>
 800a154:	1a21      	subs	r1, r4, r0
 800a156:	4630      	mov	r0, r6
 800a158:	f000 f96e 	bl	800a438 <_sbrk_r>
 800a15c:	3001      	adds	r0, #1
 800a15e:	d1dd      	bne.n	800a11c <_malloc_r+0x64>
 800a160:	e7cf      	b.n	800a102 <_malloc_r+0x4a>
 800a162:	bf00      	nop
 800a164:	20004c08 	.word	0x20004c08
 800a168:	20004c0c 	.word	0x20004c0c

0800a16c <__ssputs_r>:
 800a16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a170:	688e      	ldr	r6, [r1, #8]
 800a172:	429e      	cmp	r6, r3
 800a174:	4682      	mov	sl, r0
 800a176:	460c      	mov	r4, r1
 800a178:	4690      	mov	r8, r2
 800a17a:	461f      	mov	r7, r3
 800a17c:	d838      	bhi.n	800a1f0 <__ssputs_r+0x84>
 800a17e:	898a      	ldrh	r2, [r1, #12]
 800a180:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a184:	d032      	beq.n	800a1ec <__ssputs_r+0x80>
 800a186:	6825      	ldr	r5, [r4, #0]
 800a188:	6909      	ldr	r1, [r1, #16]
 800a18a:	eba5 0901 	sub.w	r9, r5, r1
 800a18e:	6965      	ldr	r5, [r4, #20]
 800a190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a198:	3301      	adds	r3, #1
 800a19a:	444b      	add	r3, r9
 800a19c:	106d      	asrs	r5, r5, #1
 800a19e:	429d      	cmp	r5, r3
 800a1a0:	bf38      	it	cc
 800a1a2:	461d      	movcc	r5, r3
 800a1a4:	0553      	lsls	r3, r2, #21
 800a1a6:	d531      	bpl.n	800a20c <__ssputs_r+0xa0>
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	f7ff ff85 	bl	800a0b8 <_malloc_r>
 800a1ae:	4606      	mov	r6, r0
 800a1b0:	b950      	cbnz	r0, 800a1c8 <__ssputs_r+0x5c>
 800a1b2:	230c      	movs	r3, #12
 800a1b4:	f8ca 3000 	str.w	r3, [sl]
 800a1b8:	89a3      	ldrh	r3, [r4, #12]
 800a1ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1be:	81a3      	strh	r3, [r4, #12]
 800a1c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c8:	6921      	ldr	r1, [r4, #16]
 800a1ca:	464a      	mov	r2, r9
 800a1cc:	f7fc fae8 	bl	80067a0 <memcpy>
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1da:	81a3      	strh	r3, [r4, #12]
 800a1dc:	6126      	str	r6, [r4, #16]
 800a1de:	6165      	str	r5, [r4, #20]
 800a1e0:	444e      	add	r6, r9
 800a1e2:	eba5 0509 	sub.w	r5, r5, r9
 800a1e6:	6026      	str	r6, [r4, #0]
 800a1e8:	60a5      	str	r5, [r4, #8]
 800a1ea:	463e      	mov	r6, r7
 800a1ec:	42be      	cmp	r6, r7
 800a1ee:	d900      	bls.n	800a1f2 <__ssputs_r+0x86>
 800a1f0:	463e      	mov	r6, r7
 800a1f2:	4632      	mov	r2, r6
 800a1f4:	6820      	ldr	r0, [r4, #0]
 800a1f6:	4641      	mov	r1, r8
 800a1f8:	f000 f97e 	bl	800a4f8 <memmove>
 800a1fc:	68a3      	ldr	r3, [r4, #8]
 800a1fe:	6822      	ldr	r2, [r4, #0]
 800a200:	1b9b      	subs	r3, r3, r6
 800a202:	4432      	add	r2, r6
 800a204:	60a3      	str	r3, [r4, #8]
 800a206:	6022      	str	r2, [r4, #0]
 800a208:	2000      	movs	r0, #0
 800a20a:	e7db      	b.n	800a1c4 <__ssputs_r+0x58>
 800a20c:	462a      	mov	r2, r5
 800a20e:	f000 f999 	bl	800a544 <_realloc_r>
 800a212:	4606      	mov	r6, r0
 800a214:	2800      	cmp	r0, #0
 800a216:	d1e1      	bne.n	800a1dc <__ssputs_r+0x70>
 800a218:	6921      	ldr	r1, [r4, #16]
 800a21a:	4650      	mov	r0, sl
 800a21c:	f7ff fefc 	bl	800a018 <_free_r>
 800a220:	e7c7      	b.n	800a1b2 <__ssputs_r+0x46>
	...

0800a224 <_svfiprintf_r>:
 800a224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a228:	4698      	mov	r8, r3
 800a22a:	898b      	ldrh	r3, [r1, #12]
 800a22c:	061b      	lsls	r3, r3, #24
 800a22e:	b09d      	sub	sp, #116	; 0x74
 800a230:	4607      	mov	r7, r0
 800a232:	460d      	mov	r5, r1
 800a234:	4614      	mov	r4, r2
 800a236:	d50e      	bpl.n	800a256 <_svfiprintf_r+0x32>
 800a238:	690b      	ldr	r3, [r1, #16]
 800a23a:	b963      	cbnz	r3, 800a256 <_svfiprintf_r+0x32>
 800a23c:	2140      	movs	r1, #64	; 0x40
 800a23e:	f7ff ff3b 	bl	800a0b8 <_malloc_r>
 800a242:	6028      	str	r0, [r5, #0]
 800a244:	6128      	str	r0, [r5, #16]
 800a246:	b920      	cbnz	r0, 800a252 <_svfiprintf_r+0x2e>
 800a248:	230c      	movs	r3, #12
 800a24a:	603b      	str	r3, [r7, #0]
 800a24c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a250:	e0d1      	b.n	800a3f6 <_svfiprintf_r+0x1d2>
 800a252:	2340      	movs	r3, #64	; 0x40
 800a254:	616b      	str	r3, [r5, #20]
 800a256:	2300      	movs	r3, #0
 800a258:	9309      	str	r3, [sp, #36]	; 0x24
 800a25a:	2320      	movs	r3, #32
 800a25c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a260:	f8cd 800c 	str.w	r8, [sp, #12]
 800a264:	2330      	movs	r3, #48	; 0x30
 800a266:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a410 <_svfiprintf_r+0x1ec>
 800a26a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a26e:	f04f 0901 	mov.w	r9, #1
 800a272:	4623      	mov	r3, r4
 800a274:	469a      	mov	sl, r3
 800a276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a27a:	b10a      	cbz	r2, 800a280 <_svfiprintf_r+0x5c>
 800a27c:	2a25      	cmp	r2, #37	; 0x25
 800a27e:	d1f9      	bne.n	800a274 <_svfiprintf_r+0x50>
 800a280:	ebba 0b04 	subs.w	fp, sl, r4
 800a284:	d00b      	beq.n	800a29e <_svfiprintf_r+0x7a>
 800a286:	465b      	mov	r3, fp
 800a288:	4622      	mov	r2, r4
 800a28a:	4629      	mov	r1, r5
 800a28c:	4638      	mov	r0, r7
 800a28e:	f7ff ff6d 	bl	800a16c <__ssputs_r>
 800a292:	3001      	adds	r0, #1
 800a294:	f000 80aa 	beq.w	800a3ec <_svfiprintf_r+0x1c8>
 800a298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a29a:	445a      	add	r2, fp
 800a29c:	9209      	str	r2, [sp, #36]	; 0x24
 800a29e:	f89a 3000 	ldrb.w	r3, [sl]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f000 80a2 	beq.w	800a3ec <_svfiprintf_r+0x1c8>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2b2:	f10a 0a01 	add.w	sl, sl, #1
 800a2b6:	9304      	str	r3, [sp, #16]
 800a2b8:	9307      	str	r3, [sp, #28]
 800a2ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2be:	931a      	str	r3, [sp, #104]	; 0x68
 800a2c0:	4654      	mov	r4, sl
 800a2c2:	2205      	movs	r2, #5
 800a2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c8:	4851      	ldr	r0, [pc, #324]	; (800a410 <_svfiprintf_r+0x1ec>)
 800a2ca:	f7f5 ff89 	bl	80001e0 <memchr>
 800a2ce:	9a04      	ldr	r2, [sp, #16]
 800a2d0:	b9d8      	cbnz	r0, 800a30a <_svfiprintf_r+0xe6>
 800a2d2:	06d0      	lsls	r0, r2, #27
 800a2d4:	bf44      	itt	mi
 800a2d6:	2320      	movmi	r3, #32
 800a2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2dc:	0711      	lsls	r1, r2, #28
 800a2de:	bf44      	itt	mi
 800a2e0:	232b      	movmi	r3, #43	; 0x2b
 800a2e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ea:	2b2a      	cmp	r3, #42	; 0x2a
 800a2ec:	d015      	beq.n	800a31a <_svfiprintf_r+0xf6>
 800a2ee:	9a07      	ldr	r2, [sp, #28]
 800a2f0:	4654      	mov	r4, sl
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	f04f 0c0a 	mov.w	ip, #10
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2fe:	3b30      	subs	r3, #48	; 0x30
 800a300:	2b09      	cmp	r3, #9
 800a302:	d94e      	bls.n	800a3a2 <_svfiprintf_r+0x17e>
 800a304:	b1b0      	cbz	r0, 800a334 <_svfiprintf_r+0x110>
 800a306:	9207      	str	r2, [sp, #28]
 800a308:	e014      	b.n	800a334 <_svfiprintf_r+0x110>
 800a30a:	eba0 0308 	sub.w	r3, r0, r8
 800a30e:	fa09 f303 	lsl.w	r3, r9, r3
 800a312:	4313      	orrs	r3, r2
 800a314:	9304      	str	r3, [sp, #16]
 800a316:	46a2      	mov	sl, r4
 800a318:	e7d2      	b.n	800a2c0 <_svfiprintf_r+0x9c>
 800a31a:	9b03      	ldr	r3, [sp, #12]
 800a31c:	1d19      	adds	r1, r3, #4
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	9103      	str	r1, [sp, #12]
 800a322:	2b00      	cmp	r3, #0
 800a324:	bfbb      	ittet	lt
 800a326:	425b      	neglt	r3, r3
 800a328:	f042 0202 	orrlt.w	r2, r2, #2
 800a32c:	9307      	strge	r3, [sp, #28]
 800a32e:	9307      	strlt	r3, [sp, #28]
 800a330:	bfb8      	it	lt
 800a332:	9204      	strlt	r2, [sp, #16]
 800a334:	7823      	ldrb	r3, [r4, #0]
 800a336:	2b2e      	cmp	r3, #46	; 0x2e
 800a338:	d10c      	bne.n	800a354 <_svfiprintf_r+0x130>
 800a33a:	7863      	ldrb	r3, [r4, #1]
 800a33c:	2b2a      	cmp	r3, #42	; 0x2a
 800a33e:	d135      	bne.n	800a3ac <_svfiprintf_r+0x188>
 800a340:	9b03      	ldr	r3, [sp, #12]
 800a342:	1d1a      	adds	r2, r3, #4
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	9203      	str	r2, [sp, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	bfb8      	it	lt
 800a34c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a350:	3402      	adds	r4, #2
 800a352:	9305      	str	r3, [sp, #20]
 800a354:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a420 <_svfiprintf_r+0x1fc>
 800a358:	7821      	ldrb	r1, [r4, #0]
 800a35a:	2203      	movs	r2, #3
 800a35c:	4650      	mov	r0, sl
 800a35e:	f7f5 ff3f 	bl	80001e0 <memchr>
 800a362:	b140      	cbz	r0, 800a376 <_svfiprintf_r+0x152>
 800a364:	2340      	movs	r3, #64	; 0x40
 800a366:	eba0 000a 	sub.w	r0, r0, sl
 800a36a:	fa03 f000 	lsl.w	r0, r3, r0
 800a36e:	9b04      	ldr	r3, [sp, #16]
 800a370:	4303      	orrs	r3, r0
 800a372:	3401      	adds	r4, #1
 800a374:	9304      	str	r3, [sp, #16]
 800a376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a37a:	4826      	ldr	r0, [pc, #152]	; (800a414 <_svfiprintf_r+0x1f0>)
 800a37c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a380:	2206      	movs	r2, #6
 800a382:	f7f5 ff2d 	bl	80001e0 <memchr>
 800a386:	2800      	cmp	r0, #0
 800a388:	d038      	beq.n	800a3fc <_svfiprintf_r+0x1d8>
 800a38a:	4b23      	ldr	r3, [pc, #140]	; (800a418 <_svfiprintf_r+0x1f4>)
 800a38c:	bb1b      	cbnz	r3, 800a3d6 <_svfiprintf_r+0x1b2>
 800a38e:	9b03      	ldr	r3, [sp, #12]
 800a390:	3307      	adds	r3, #7
 800a392:	f023 0307 	bic.w	r3, r3, #7
 800a396:	3308      	adds	r3, #8
 800a398:	9303      	str	r3, [sp, #12]
 800a39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a39c:	4433      	add	r3, r6
 800a39e:	9309      	str	r3, [sp, #36]	; 0x24
 800a3a0:	e767      	b.n	800a272 <_svfiprintf_r+0x4e>
 800a3a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3a6:	460c      	mov	r4, r1
 800a3a8:	2001      	movs	r0, #1
 800a3aa:	e7a5      	b.n	800a2f8 <_svfiprintf_r+0xd4>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	3401      	adds	r4, #1
 800a3b0:	9305      	str	r3, [sp, #20]
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	f04f 0c0a 	mov.w	ip, #10
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3be:	3a30      	subs	r2, #48	; 0x30
 800a3c0:	2a09      	cmp	r2, #9
 800a3c2:	d903      	bls.n	800a3cc <_svfiprintf_r+0x1a8>
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d0c5      	beq.n	800a354 <_svfiprintf_r+0x130>
 800a3c8:	9105      	str	r1, [sp, #20]
 800a3ca:	e7c3      	b.n	800a354 <_svfiprintf_r+0x130>
 800a3cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e7f0      	b.n	800a3b8 <_svfiprintf_r+0x194>
 800a3d6:	ab03      	add	r3, sp, #12
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	462a      	mov	r2, r5
 800a3dc:	4b0f      	ldr	r3, [pc, #60]	; (800a41c <_svfiprintf_r+0x1f8>)
 800a3de:	a904      	add	r1, sp, #16
 800a3e0:	4638      	mov	r0, r7
 800a3e2:	f7fc fa93 	bl	800690c <_printf_float>
 800a3e6:	1c42      	adds	r2, r0, #1
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	d1d6      	bne.n	800a39a <_svfiprintf_r+0x176>
 800a3ec:	89ab      	ldrh	r3, [r5, #12]
 800a3ee:	065b      	lsls	r3, r3, #25
 800a3f0:	f53f af2c 	bmi.w	800a24c <_svfiprintf_r+0x28>
 800a3f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3f6:	b01d      	add	sp, #116	; 0x74
 800a3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3fc:	ab03      	add	r3, sp, #12
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	462a      	mov	r2, r5
 800a402:	4b06      	ldr	r3, [pc, #24]	; (800a41c <_svfiprintf_r+0x1f8>)
 800a404:	a904      	add	r1, sp, #16
 800a406:	4638      	mov	r0, r7
 800a408:	f7fc fd24 	bl	8006e54 <_printf_i>
 800a40c:	e7eb      	b.n	800a3e6 <_svfiprintf_r+0x1c2>
 800a40e:	bf00      	nop
 800a410:	0800b47c 	.word	0x0800b47c
 800a414:	0800b486 	.word	0x0800b486
 800a418:	0800690d 	.word	0x0800690d
 800a41c:	0800a16d 	.word	0x0800a16d
 800a420:	0800b482 	.word	0x0800b482
 800a424:	00000000 	.word	0x00000000

0800a428 <nan>:
 800a428:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a430 <nan+0x8>
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	00000000 	.word	0x00000000
 800a434:	7ff80000 	.word	0x7ff80000

0800a438 <_sbrk_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4d06      	ldr	r5, [pc, #24]	; (800a454 <_sbrk_r+0x1c>)
 800a43c:	2300      	movs	r3, #0
 800a43e:	4604      	mov	r4, r0
 800a440:	4608      	mov	r0, r1
 800a442:	602b      	str	r3, [r5, #0]
 800a444:	f7f7 f94c 	bl	80016e0 <_sbrk>
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	d102      	bne.n	800a452 <_sbrk_r+0x1a>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	b103      	cbz	r3, 800a452 <_sbrk_r+0x1a>
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	bd38      	pop	{r3, r4, r5, pc}
 800a454:	20004c54 	.word	0x20004c54

0800a458 <strncmp>:
 800a458:	b510      	push	{r4, lr}
 800a45a:	b16a      	cbz	r2, 800a478 <strncmp+0x20>
 800a45c:	3901      	subs	r1, #1
 800a45e:	1884      	adds	r4, r0, r2
 800a460:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a464:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a468:	4293      	cmp	r3, r2
 800a46a:	d103      	bne.n	800a474 <strncmp+0x1c>
 800a46c:	42a0      	cmp	r0, r4
 800a46e:	d001      	beq.n	800a474 <strncmp+0x1c>
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1f5      	bne.n	800a460 <strncmp+0x8>
 800a474:	1a98      	subs	r0, r3, r2
 800a476:	bd10      	pop	{r4, pc}
 800a478:	4610      	mov	r0, r2
 800a47a:	e7fc      	b.n	800a476 <strncmp+0x1e>

0800a47c <__ascii_wctomb>:
 800a47c:	b149      	cbz	r1, 800a492 <__ascii_wctomb+0x16>
 800a47e:	2aff      	cmp	r2, #255	; 0xff
 800a480:	bf85      	ittet	hi
 800a482:	238a      	movhi	r3, #138	; 0x8a
 800a484:	6003      	strhi	r3, [r0, #0]
 800a486:	700a      	strbls	r2, [r1, #0]
 800a488:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a48c:	bf98      	it	ls
 800a48e:	2001      	movls	r0, #1
 800a490:	4770      	bx	lr
 800a492:	4608      	mov	r0, r1
 800a494:	4770      	bx	lr
	...

0800a498 <__assert_func>:
 800a498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a49a:	4614      	mov	r4, r2
 800a49c:	461a      	mov	r2, r3
 800a49e:	4b09      	ldr	r3, [pc, #36]	; (800a4c4 <__assert_func+0x2c>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4605      	mov	r5, r0
 800a4a4:	68d8      	ldr	r0, [r3, #12]
 800a4a6:	b14c      	cbz	r4, 800a4bc <__assert_func+0x24>
 800a4a8:	4b07      	ldr	r3, [pc, #28]	; (800a4c8 <__assert_func+0x30>)
 800a4aa:	9100      	str	r1, [sp, #0]
 800a4ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4b0:	4906      	ldr	r1, [pc, #24]	; (800a4cc <__assert_func+0x34>)
 800a4b2:	462b      	mov	r3, r5
 800a4b4:	f000 f80e 	bl	800a4d4 <fiprintf>
 800a4b8:	f000 fa84 	bl	800a9c4 <abort>
 800a4bc:	4b04      	ldr	r3, [pc, #16]	; (800a4d0 <__assert_func+0x38>)
 800a4be:	461c      	mov	r4, r3
 800a4c0:	e7f3      	b.n	800a4aa <__assert_func+0x12>
 800a4c2:	bf00      	nop
 800a4c4:	20000010 	.word	0x20000010
 800a4c8:	0800b48d 	.word	0x0800b48d
 800a4cc:	0800b49a 	.word	0x0800b49a
 800a4d0:	0800b4c8 	.word	0x0800b4c8

0800a4d4 <fiprintf>:
 800a4d4:	b40e      	push	{r1, r2, r3}
 800a4d6:	b503      	push	{r0, r1, lr}
 800a4d8:	4601      	mov	r1, r0
 800a4da:	ab03      	add	r3, sp, #12
 800a4dc:	4805      	ldr	r0, [pc, #20]	; (800a4f4 <fiprintf+0x20>)
 800a4de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4e2:	6800      	ldr	r0, [r0, #0]
 800a4e4:	9301      	str	r3, [sp, #4]
 800a4e6:	f000 f87d 	bl	800a5e4 <_vfiprintf_r>
 800a4ea:	b002      	add	sp, #8
 800a4ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4f0:	b003      	add	sp, #12
 800a4f2:	4770      	bx	lr
 800a4f4:	20000010 	.word	0x20000010

0800a4f8 <memmove>:
 800a4f8:	4288      	cmp	r0, r1
 800a4fa:	b510      	push	{r4, lr}
 800a4fc:	eb01 0402 	add.w	r4, r1, r2
 800a500:	d902      	bls.n	800a508 <memmove+0x10>
 800a502:	4284      	cmp	r4, r0
 800a504:	4623      	mov	r3, r4
 800a506:	d807      	bhi.n	800a518 <memmove+0x20>
 800a508:	1e43      	subs	r3, r0, #1
 800a50a:	42a1      	cmp	r1, r4
 800a50c:	d008      	beq.n	800a520 <memmove+0x28>
 800a50e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a512:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a516:	e7f8      	b.n	800a50a <memmove+0x12>
 800a518:	4402      	add	r2, r0
 800a51a:	4601      	mov	r1, r0
 800a51c:	428a      	cmp	r2, r1
 800a51e:	d100      	bne.n	800a522 <memmove+0x2a>
 800a520:	bd10      	pop	{r4, pc}
 800a522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a52a:	e7f7      	b.n	800a51c <memmove+0x24>

0800a52c <__malloc_lock>:
 800a52c:	4801      	ldr	r0, [pc, #4]	; (800a534 <__malloc_lock+0x8>)
 800a52e:	f000 bc09 	b.w	800ad44 <__retarget_lock_acquire_recursive>
 800a532:	bf00      	nop
 800a534:	20004c5c 	.word	0x20004c5c

0800a538 <__malloc_unlock>:
 800a538:	4801      	ldr	r0, [pc, #4]	; (800a540 <__malloc_unlock+0x8>)
 800a53a:	f000 bc04 	b.w	800ad46 <__retarget_lock_release_recursive>
 800a53e:	bf00      	nop
 800a540:	20004c5c 	.word	0x20004c5c

0800a544 <_realloc_r>:
 800a544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a546:	4607      	mov	r7, r0
 800a548:	4614      	mov	r4, r2
 800a54a:	460e      	mov	r6, r1
 800a54c:	b921      	cbnz	r1, 800a558 <_realloc_r+0x14>
 800a54e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a552:	4611      	mov	r1, r2
 800a554:	f7ff bdb0 	b.w	800a0b8 <_malloc_r>
 800a558:	b922      	cbnz	r2, 800a564 <_realloc_r+0x20>
 800a55a:	f7ff fd5d 	bl	800a018 <_free_r>
 800a55e:	4625      	mov	r5, r4
 800a560:	4628      	mov	r0, r5
 800a562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a564:	f000 fc54 	bl	800ae10 <_malloc_usable_size_r>
 800a568:	42a0      	cmp	r0, r4
 800a56a:	d20f      	bcs.n	800a58c <_realloc_r+0x48>
 800a56c:	4621      	mov	r1, r4
 800a56e:	4638      	mov	r0, r7
 800a570:	f7ff fda2 	bl	800a0b8 <_malloc_r>
 800a574:	4605      	mov	r5, r0
 800a576:	2800      	cmp	r0, #0
 800a578:	d0f2      	beq.n	800a560 <_realloc_r+0x1c>
 800a57a:	4631      	mov	r1, r6
 800a57c:	4622      	mov	r2, r4
 800a57e:	f7fc f90f 	bl	80067a0 <memcpy>
 800a582:	4631      	mov	r1, r6
 800a584:	4638      	mov	r0, r7
 800a586:	f7ff fd47 	bl	800a018 <_free_r>
 800a58a:	e7e9      	b.n	800a560 <_realloc_r+0x1c>
 800a58c:	4635      	mov	r5, r6
 800a58e:	e7e7      	b.n	800a560 <_realloc_r+0x1c>

0800a590 <__sfputc_r>:
 800a590:	6893      	ldr	r3, [r2, #8]
 800a592:	3b01      	subs	r3, #1
 800a594:	2b00      	cmp	r3, #0
 800a596:	b410      	push	{r4}
 800a598:	6093      	str	r3, [r2, #8]
 800a59a:	da08      	bge.n	800a5ae <__sfputc_r+0x1e>
 800a59c:	6994      	ldr	r4, [r2, #24]
 800a59e:	42a3      	cmp	r3, r4
 800a5a0:	db01      	blt.n	800a5a6 <__sfputc_r+0x16>
 800a5a2:	290a      	cmp	r1, #10
 800a5a4:	d103      	bne.n	800a5ae <__sfputc_r+0x1e>
 800a5a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5aa:	f000 b94b 	b.w	800a844 <__swbuf_r>
 800a5ae:	6813      	ldr	r3, [r2, #0]
 800a5b0:	1c58      	adds	r0, r3, #1
 800a5b2:	6010      	str	r0, [r2, #0]
 800a5b4:	7019      	strb	r1, [r3, #0]
 800a5b6:	4608      	mov	r0, r1
 800a5b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5bc:	4770      	bx	lr

0800a5be <__sfputs_r>:
 800a5be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c0:	4606      	mov	r6, r0
 800a5c2:	460f      	mov	r7, r1
 800a5c4:	4614      	mov	r4, r2
 800a5c6:	18d5      	adds	r5, r2, r3
 800a5c8:	42ac      	cmp	r4, r5
 800a5ca:	d101      	bne.n	800a5d0 <__sfputs_r+0x12>
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	e007      	b.n	800a5e0 <__sfputs_r+0x22>
 800a5d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5d4:	463a      	mov	r2, r7
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	f7ff ffda 	bl	800a590 <__sfputc_r>
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	d1f3      	bne.n	800a5c8 <__sfputs_r+0xa>
 800a5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5e4 <_vfiprintf_r>:
 800a5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e8:	460d      	mov	r5, r1
 800a5ea:	b09d      	sub	sp, #116	; 0x74
 800a5ec:	4614      	mov	r4, r2
 800a5ee:	4698      	mov	r8, r3
 800a5f0:	4606      	mov	r6, r0
 800a5f2:	b118      	cbz	r0, 800a5fc <_vfiprintf_r+0x18>
 800a5f4:	6983      	ldr	r3, [r0, #24]
 800a5f6:	b90b      	cbnz	r3, 800a5fc <_vfiprintf_r+0x18>
 800a5f8:	f000 fb06 	bl	800ac08 <__sinit>
 800a5fc:	4b89      	ldr	r3, [pc, #548]	; (800a824 <_vfiprintf_r+0x240>)
 800a5fe:	429d      	cmp	r5, r3
 800a600:	d11b      	bne.n	800a63a <_vfiprintf_r+0x56>
 800a602:	6875      	ldr	r5, [r6, #4]
 800a604:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a606:	07d9      	lsls	r1, r3, #31
 800a608:	d405      	bmi.n	800a616 <_vfiprintf_r+0x32>
 800a60a:	89ab      	ldrh	r3, [r5, #12]
 800a60c:	059a      	lsls	r2, r3, #22
 800a60e:	d402      	bmi.n	800a616 <_vfiprintf_r+0x32>
 800a610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a612:	f000 fb97 	bl	800ad44 <__retarget_lock_acquire_recursive>
 800a616:	89ab      	ldrh	r3, [r5, #12]
 800a618:	071b      	lsls	r3, r3, #28
 800a61a:	d501      	bpl.n	800a620 <_vfiprintf_r+0x3c>
 800a61c:	692b      	ldr	r3, [r5, #16]
 800a61e:	b9eb      	cbnz	r3, 800a65c <_vfiprintf_r+0x78>
 800a620:	4629      	mov	r1, r5
 800a622:	4630      	mov	r0, r6
 800a624:	f000 f960 	bl	800a8e8 <__swsetup_r>
 800a628:	b1c0      	cbz	r0, 800a65c <_vfiprintf_r+0x78>
 800a62a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a62c:	07dc      	lsls	r4, r3, #31
 800a62e:	d50e      	bpl.n	800a64e <_vfiprintf_r+0x6a>
 800a630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a634:	b01d      	add	sp, #116	; 0x74
 800a636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a63a:	4b7b      	ldr	r3, [pc, #492]	; (800a828 <_vfiprintf_r+0x244>)
 800a63c:	429d      	cmp	r5, r3
 800a63e:	d101      	bne.n	800a644 <_vfiprintf_r+0x60>
 800a640:	68b5      	ldr	r5, [r6, #8]
 800a642:	e7df      	b.n	800a604 <_vfiprintf_r+0x20>
 800a644:	4b79      	ldr	r3, [pc, #484]	; (800a82c <_vfiprintf_r+0x248>)
 800a646:	429d      	cmp	r5, r3
 800a648:	bf08      	it	eq
 800a64a:	68f5      	ldreq	r5, [r6, #12]
 800a64c:	e7da      	b.n	800a604 <_vfiprintf_r+0x20>
 800a64e:	89ab      	ldrh	r3, [r5, #12]
 800a650:	0598      	lsls	r0, r3, #22
 800a652:	d4ed      	bmi.n	800a630 <_vfiprintf_r+0x4c>
 800a654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a656:	f000 fb76 	bl	800ad46 <__retarget_lock_release_recursive>
 800a65a:	e7e9      	b.n	800a630 <_vfiprintf_r+0x4c>
 800a65c:	2300      	movs	r3, #0
 800a65e:	9309      	str	r3, [sp, #36]	; 0x24
 800a660:	2320      	movs	r3, #32
 800a662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a666:	f8cd 800c 	str.w	r8, [sp, #12]
 800a66a:	2330      	movs	r3, #48	; 0x30
 800a66c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a830 <_vfiprintf_r+0x24c>
 800a670:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a674:	f04f 0901 	mov.w	r9, #1
 800a678:	4623      	mov	r3, r4
 800a67a:	469a      	mov	sl, r3
 800a67c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a680:	b10a      	cbz	r2, 800a686 <_vfiprintf_r+0xa2>
 800a682:	2a25      	cmp	r2, #37	; 0x25
 800a684:	d1f9      	bne.n	800a67a <_vfiprintf_r+0x96>
 800a686:	ebba 0b04 	subs.w	fp, sl, r4
 800a68a:	d00b      	beq.n	800a6a4 <_vfiprintf_r+0xc0>
 800a68c:	465b      	mov	r3, fp
 800a68e:	4622      	mov	r2, r4
 800a690:	4629      	mov	r1, r5
 800a692:	4630      	mov	r0, r6
 800a694:	f7ff ff93 	bl	800a5be <__sfputs_r>
 800a698:	3001      	adds	r0, #1
 800a69a:	f000 80aa 	beq.w	800a7f2 <_vfiprintf_r+0x20e>
 800a69e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6a0:	445a      	add	r2, fp
 800a6a2:	9209      	str	r2, [sp, #36]	; 0x24
 800a6a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f000 80a2 	beq.w	800a7f2 <_vfiprintf_r+0x20e>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6b8:	f10a 0a01 	add.w	sl, sl, #1
 800a6bc:	9304      	str	r3, [sp, #16]
 800a6be:	9307      	str	r3, [sp, #28]
 800a6c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6c4:	931a      	str	r3, [sp, #104]	; 0x68
 800a6c6:	4654      	mov	r4, sl
 800a6c8:	2205      	movs	r2, #5
 800a6ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ce:	4858      	ldr	r0, [pc, #352]	; (800a830 <_vfiprintf_r+0x24c>)
 800a6d0:	f7f5 fd86 	bl	80001e0 <memchr>
 800a6d4:	9a04      	ldr	r2, [sp, #16]
 800a6d6:	b9d8      	cbnz	r0, 800a710 <_vfiprintf_r+0x12c>
 800a6d8:	06d1      	lsls	r1, r2, #27
 800a6da:	bf44      	itt	mi
 800a6dc:	2320      	movmi	r3, #32
 800a6de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6e2:	0713      	lsls	r3, r2, #28
 800a6e4:	bf44      	itt	mi
 800a6e6:	232b      	movmi	r3, #43	; 0x2b
 800a6e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a6f0:	2b2a      	cmp	r3, #42	; 0x2a
 800a6f2:	d015      	beq.n	800a720 <_vfiprintf_r+0x13c>
 800a6f4:	9a07      	ldr	r2, [sp, #28]
 800a6f6:	4654      	mov	r4, sl
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	f04f 0c0a 	mov.w	ip, #10
 800a6fe:	4621      	mov	r1, r4
 800a700:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a704:	3b30      	subs	r3, #48	; 0x30
 800a706:	2b09      	cmp	r3, #9
 800a708:	d94e      	bls.n	800a7a8 <_vfiprintf_r+0x1c4>
 800a70a:	b1b0      	cbz	r0, 800a73a <_vfiprintf_r+0x156>
 800a70c:	9207      	str	r2, [sp, #28]
 800a70e:	e014      	b.n	800a73a <_vfiprintf_r+0x156>
 800a710:	eba0 0308 	sub.w	r3, r0, r8
 800a714:	fa09 f303 	lsl.w	r3, r9, r3
 800a718:	4313      	orrs	r3, r2
 800a71a:	9304      	str	r3, [sp, #16]
 800a71c:	46a2      	mov	sl, r4
 800a71e:	e7d2      	b.n	800a6c6 <_vfiprintf_r+0xe2>
 800a720:	9b03      	ldr	r3, [sp, #12]
 800a722:	1d19      	adds	r1, r3, #4
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	9103      	str	r1, [sp, #12]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	bfbb      	ittet	lt
 800a72c:	425b      	neglt	r3, r3
 800a72e:	f042 0202 	orrlt.w	r2, r2, #2
 800a732:	9307      	strge	r3, [sp, #28]
 800a734:	9307      	strlt	r3, [sp, #28]
 800a736:	bfb8      	it	lt
 800a738:	9204      	strlt	r2, [sp, #16]
 800a73a:	7823      	ldrb	r3, [r4, #0]
 800a73c:	2b2e      	cmp	r3, #46	; 0x2e
 800a73e:	d10c      	bne.n	800a75a <_vfiprintf_r+0x176>
 800a740:	7863      	ldrb	r3, [r4, #1]
 800a742:	2b2a      	cmp	r3, #42	; 0x2a
 800a744:	d135      	bne.n	800a7b2 <_vfiprintf_r+0x1ce>
 800a746:	9b03      	ldr	r3, [sp, #12]
 800a748:	1d1a      	adds	r2, r3, #4
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	9203      	str	r2, [sp, #12]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	bfb8      	it	lt
 800a752:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a756:	3402      	adds	r4, #2
 800a758:	9305      	str	r3, [sp, #20]
 800a75a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a840 <_vfiprintf_r+0x25c>
 800a75e:	7821      	ldrb	r1, [r4, #0]
 800a760:	2203      	movs	r2, #3
 800a762:	4650      	mov	r0, sl
 800a764:	f7f5 fd3c 	bl	80001e0 <memchr>
 800a768:	b140      	cbz	r0, 800a77c <_vfiprintf_r+0x198>
 800a76a:	2340      	movs	r3, #64	; 0x40
 800a76c:	eba0 000a 	sub.w	r0, r0, sl
 800a770:	fa03 f000 	lsl.w	r0, r3, r0
 800a774:	9b04      	ldr	r3, [sp, #16]
 800a776:	4303      	orrs	r3, r0
 800a778:	3401      	adds	r4, #1
 800a77a:	9304      	str	r3, [sp, #16]
 800a77c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a780:	482c      	ldr	r0, [pc, #176]	; (800a834 <_vfiprintf_r+0x250>)
 800a782:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a786:	2206      	movs	r2, #6
 800a788:	f7f5 fd2a 	bl	80001e0 <memchr>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d03f      	beq.n	800a810 <_vfiprintf_r+0x22c>
 800a790:	4b29      	ldr	r3, [pc, #164]	; (800a838 <_vfiprintf_r+0x254>)
 800a792:	bb1b      	cbnz	r3, 800a7dc <_vfiprintf_r+0x1f8>
 800a794:	9b03      	ldr	r3, [sp, #12]
 800a796:	3307      	adds	r3, #7
 800a798:	f023 0307 	bic.w	r3, r3, #7
 800a79c:	3308      	adds	r3, #8
 800a79e:	9303      	str	r3, [sp, #12]
 800a7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7a2:	443b      	add	r3, r7
 800a7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a6:	e767      	b.n	800a678 <_vfiprintf_r+0x94>
 800a7a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	2001      	movs	r0, #1
 800a7b0:	e7a5      	b.n	800a6fe <_vfiprintf_r+0x11a>
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	3401      	adds	r4, #1
 800a7b6:	9305      	str	r3, [sp, #20]
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	f04f 0c0a 	mov.w	ip, #10
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7c4:	3a30      	subs	r2, #48	; 0x30
 800a7c6:	2a09      	cmp	r2, #9
 800a7c8:	d903      	bls.n	800a7d2 <_vfiprintf_r+0x1ee>
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d0c5      	beq.n	800a75a <_vfiprintf_r+0x176>
 800a7ce:	9105      	str	r1, [sp, #20]
 800a7d0:	e7c3      	b.n	800a75a <_vfiprintf_r+0x176>
 800a7d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e7f0      	b.n	800a7be <_vfiprintf_r+0x1da>
 800a7dc:	ab03      	add	r3, sp, #12
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	462a      	mov	r2, r5
 800a7e2:	4b16      	ldr	r3, [pc, #88]	; (800a83c <_vfiprintf_r+0x258>)
 800a7e4:	a904      	add	r1, sp, #16
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f7fc f890 	bl	800690c <_printf_float>
 800a7ec:	4607      	mov	r7, r0
 800a7ee:	1c78      	adds	r0, r7, #1
 800a7f0:	d1d6      	bne.n	800a7a0 <_vfiprintf_r+0x1bc>
 800a7f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7f4:	07d9      	lsls	r1, r3, #31
 800a7f6:	d405      	bmi.n	800a804 <_vfiprintf_r+0x220>
 800a7f8:	89ab      	ldrh	r3, [r5, #12]
 800a7fa:	059a      	lsls	r2, r3, #22
 800a7fc:	d402      	bmi.n	800a804 <_vfiprintf_r+0x220>
 800a7fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a800:	f000 faa1 	bl	800ad46 <__retarget_lock_release_recursive>
 800a804:	89ab      	ldrh	r3, [r5, #12]
 800a806:	065b      	lsls	r3, r3, #25
 800a808:	f53f af12 	bmi.w	800a630 <_vfiprintf_r+0x4c>
 800a80c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a80e:	e711      	b.n	800a634 <_vfiprintf_r+0x50>
 800a810:	ab03      	add	r3, sp, #12
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	462a      	mov	r2, r5
 800a816:	4b09      	ldr	r3, [pc, #36]	; (800a83c <_vfiprintf_r+0x258>)
 800a818:	a904      	add	r1, sp, #16
 800a81a:	4630      	mov	r0, r6
 800a81c:	f7fc fb1a 	bl	8006e54 <_printf_i>
 800a820:	e7e4      	b.n	800a7ec <_vfiprintf_r+0x208>
 800a822:	bf00      	nop
 800a824:	0800b4ec 	.word	0x0800b4ec
 800a828:	0800b50c 	.word	0x0800b50c
 800a82c:	0800b4cc 	.word	0x0800b4cc
 800a830:	0800b47c 	.word	0x0800b47c
 800a834:	0800b486 	.word	0x0800b486
 800a838:	0800690d 	.word	0x0800690d
 800a83c:	0800a5bf 	.word	0x0800a5bf
 800a840:	0800b482 	.word	0x0800b482

0800a844 <__swbuf_r>:
 800a844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a846:	460e      	mov	r6, r1
 800a848:	4614      	mov	r4, r2
 800a84a:	4605      	mov	r5, r0
 800a84c:	b118      	cbz	r0, 800a856 <__swbuf_r+0x12>
 800a84e:	6983      	ldr	r3, [r0, #24]
 800a850:	b90b      	cbnz	r3, 800a856 <__swbuf_r+0x12>
 800a852:	f000 f9d9 	bl	800ac08 <__sinit>
 800a856:	4b21      	ldr	r3, [pc, #132]	; (800a8dc <__swbuf_r+0x98>)
 800a858:	429c      	cmp	r4, r3
 800a85a:	d12b      	bne.n	800a8b4 <__swbuf_r+0x70>
 800a85c:	686c      	ldr	r4, [r5, #4]
 800a85e:	69a3      	ldr	r3, [r4, #24]
 800a860:	60a3      	str	r3, [r4, #8]
 800a862:	89a3      	ldrh	r3, [r4, #12]
 800a864:	071a      	lsls	r2, r3, #28
 800a866:	d52f      	bpl.n	800a8c8 <__swbuf_r+0x84>
 800a868:	6923      	ldr	r3, [r4, #16]
 800a86a:	b36b      	cbz	r3, 800a8c8 <__swbuf_r+0x84>
 800a86c:	6923      	ldr	r3, [r4, #16]
 800a86e:	6820      	ldr	r0, [r4, #0]
 800a870:	1ac0      	subs	r0, r0, r3
 800a872:	6963      	ldr	r3, [r4, #20]
 800a874:	b2f6      	uxtb	r6, r6
 800a876:	4283      	cmp	r3, r0
 800a878:	4637      	mov	r7, r6
 800a87a:	dc04      	bgt.n	800a886 <__swbuf_r+0x42>
 800a87c:	4621      	mov	r1, r4
 800a87e:	4628      	mov	r0, r5
 800a880:	f000 f92e 	bl	800aae0 <_fflush_r>
 800a884:	bb30      	cbnz	r0, 800a8d4 <__swbuf_r+0x90>
 800a886:	68a3      	ldr	r3, [r4, #8]
 800a888:	3b01      	subs	r3, #1
 800a88a:	60a3      	str	r3, [r4, #8]
 800a88c:	6823      	ldr	r3, [r4, #0]
 800a88e:	1c5a      	adds	r2, r3, #1
 800a890:	6022      	str	r2, [r4, #0]
 800a892:	701e      	strb	r6, [r3, #0]
 800a894:	6963      	ldr	r3, [r4, #20]
 800a896:	3001      	adds	r0, #1
 800a898:	4283      	cmp	r3, r0
 800a89a:	d004      	beq.n	800a8a6 <__swbuf_r+0x62>
 800a89c:	89a3      	ldrh	r3, [r4, #12]
 800a89e:	07db      	lsls	r3, r3, #31
 800a8a0:	d506      	bpl.n	800a8b0 <__swbuf_r+0x6c>
 800a8a2:	2e0a      	cmp	r6, #10
 800a8a4:	d104      	bne.n	800a8b0 <__swbuf_r+0x6c>
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	f000 f919 	bl	800aae0 <_fflush_r>
 800a8ae:	b988      	cbnz	r0, 800a8d4 <__swbuf_r+0x90>
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8b4:	4b0a      	ldr	r3, [pc, #40]	; (800a8e0 <__swbuf_r+0x9c>)
 800a8b6:	429c      	cmp	r4, r3
 800a8b8:	d101      	bne.n	800a8be <__swbuf_r+0x7a>
 800a8ba:	68ac      	ldr	r4, [r5, #8]
 800a8bc:	e7cf      	b.n	800a85e <__swbuf_r+0x1a>
 800a8be:	4b09      	ldr	r3, [pc, #36]	; (800a8e4 <__swbuf_r+0xa0>)
 800a8c0:	429c      	cmp	r4, r3
 800a8c2:	bf08      	it	eq
 800a8c4:	68ec      	ldreq	r4, [r5, #12]
 800a8c6:	e7ca      	b.n	800a85e <__swbuf_r+0x1a>
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	f000 f80c 	bl	800a8e8 <__swsetup_r>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d0cb      	beq.n	800a86c <__swbuf_r+0x28>
 800a8d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a8d8:	e7ea      	b.n	800a8b0 <__swbuf_r+0x6c>
 800a8da:	bf00      	nop
 800a8dc:	0800b4ec 	.word	0x0800b4ec
 800a8e0:	0800b50c 	.word	0x0800b50c
 800a8e4:	0800b4cc 	.word	0x0800b4cc

0800a8e8 <__swsetup_r>:
 800a8e8:	4b32      	ldr	r3, [pc, #200]	; (800a9b4 <__swsetup_r+0xcc>)
 800a8ea:	b570      	push	{r4, r5, r6, lr}
 800a8ec:	681d      	ldr	r5, [r3, #0]
 800a8ee:	4606      	mov	r6, r0
 800a8f0:	460c      	mov	r4, r1
 800a8f2:	b125      	cbz	r5, 800a8fe <__swsetup_r+0x16>
 800a8f4:	69ab      	ldr	r3, [r5, #24]
 800a8f6:	b913      	cbnz	r3, 800a8fe <__swsetup_r+0x16>
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	f000 f985 	bl	800ac08 <__sinit>
 800a8fe:	4b2e      	ldr	r3, [pc, #184]	; (800a9b8 <__swsetup_r+0xd0>)
 800a900:	429c      	cmp	r4, r3
 800a902:	d10f      	bne.n	800a924 <__swsetup_r+0x3c>
 800a904:	686c      	ldr	r4, [r5, #4]
 800a906:	89a3      	ldrh	r3, [r4, #12]
 800a908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a90c:	0719      	lsls	r1, r3, #28
 800a90e:	d42c      	bmi.n	800a96a <__swsetup_r+0x82>
 800a910:	06dd      	lsls	r5, r3, #27
 800a912:	d411      	bmi.n	800a938 <__swsetup_r+0x50>
 800a914:	2309      	movs	r3, #9
 800a916:	6033      	str	r3, [r6, #0]
 800a918:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a91c:	81a3      	strh	r3, [r4, #12]
 800a91e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a922:	e03e      	b.n	800a9a2 <__swsetup_r+0xba>
 800a924:	4b25      	ldr	r3, [pc, #148]	; (800a9bc <__swsetup_r+0xd4>)
 800a926:	429c      	cmp	r4, r3
 800a928:	d101      	bne.n	800a92e <__swsetup_r+0x46>
 800a92a:	68ac      	ldr	r4, [r5, #8]
 800a92c:	e7eb      	b.n	800a906 <__swsetup_r+0x1e>
 800a92e:	4b24      	ldr	r3, [pc, #144]	; (800a9c0 <__swsetup_r+0xd8>)
 800a930:	429c      	cmp	r4, r3
 800a932:	bf08      	it	eq
 800a934:	68ec      	ldreq	r4, [r5, #12]
 800a936:	e7e6      	b.n	800a906 <__swsetup_r+0x1e>
 800a938:	0758      	lsls	r0, r3, #29
 800a93a:	d512      	bpl.n	800a962 <__swsetup_r+0x7a>
 800a93c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a93e:	b141      	cbz	r1, 800a952 <__swsetup_r+0x6a>
 800a940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a944:	4299      	cmp	r1, r3
 800a946:	d002      	beq.n	800a94e <__swsetup_r+0x66>
 800a948:	4630      	mov	r0, r6
 800a94a:	f7ff fb65 	bl	800a018 <_free_r>
 800a94e:	2300      	movs	r3, #0
 800a950:	6363      	str	r3, [r4, #52]	; 0x34
 800a952:	89a3      	ldrh	r3, [r4, #12]
 800a954:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a958:	81a3      	strh	r3, [r4, #12]
 800a95a:	2300      	movs	r3, #0
 800a95c:	6063      	str	r3, [r4, #4]
 800a95e:	6923      	ldr	r3, [r4, #16]
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	89a3      	ldrh	r3, [r4, #12]
 800a964:	f043 0308 	orr.w	r3, r3, #8
 800a968:	81a3      	strh	r3, [r4, #12]
 800a96a:	6923      	ldr	r3, [r4, #16]
 800a96c:	b94b      	cbnz	r3, 800a982 <__swsetup_r+0x9a>
 800a96e:	89a3      	ldrh	r3, [r4, #12]
 800a970:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a978:	d003      	beq.n	800a982 <__swsetup_r+0x9a>
 800a97a:	4621      	mov	r1, r4
 800a97c:	4630      	mov	r0, r6
 800a97e:	f000 fa07 	bl	800ad90 <__smakebuf_r>
 800a982:	89a0      	ldrh	r0, [r4, #12]
 800a984:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a988:	f010 0301 	ands.w	r3, r0, #1
 800a98c:	d00a      	beq.n	800a9a4 <__swsetup_r+0xbc>
 800a98e:	2300      	movs	r3, #0
 800a990:	60a3      	str	r3, [r4, #8]
 800a992:	6963      	ldr	r3, [r4, #20]
 800a994:	425b      	negs	r3, r3
 800a996:	61a3      	str	r3, [r4, #24]
 800a998:	6923      	ldr	r3, [r4, #16]
 800a99a:	b943      	cbnz	r3, 800a9ae <__swsetup_r+0xc6>
 800a99c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9a0:	d1ba      	bne.n	800a918 <__swsetup_r+0x30>
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
 800a9a4:	0781      	lsls	r1, r0, #30
 800a9a6:	bf58      	it	pl
 800a9a8:	6963      	ldrpl	r3, [r4, #20]
 800a9aa:	60a3      	str	r3, [r4, #8]
 800a9ac:	e7f4      	b.n	800a998 <__swsetup_r+0xb0>
 800a9ae:	2000      	movs	r0, #0
 800a9b0:	e7f7      	b.n	800a9a2 <__swsetup_r+0xba>
 800a9b2:	bf00      	nop
 800a9b4:	20000010 	.word	0x20000010
 800a9b8:	0800b4ec 	.word	0x0800b4ec
 800a9bc:	0800b50c 	.word	0x0800b50c
 800a9c0:	0800b4cc 	.word	0x0800b4cc

0800a9c4 <abort>:
 800a9c4:	b508      	push	{r3, lr}
 800a9c6:	2006      	movs	r0, #6
 800a9c8:	f000 fa52 	bl	800ae70 <raise>
 800a9cc:	2001      	movs	r0, #1
 800a9ce:	f7f6 fe10 	bl	80015f2 <_exit>
	...

0800a9d4 <__sflush_r>:
 800a9d4:	898a      	ldrh	r2, [r1, #12]
 800a9d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9da:	4605      	mov	r5, r0
 800a9dc:	0710      	lsls	r0, r2, #28
 800a9de:	460c      	mov	r4, r1
 800a9e0:	d458      	bmi.n	800aa94 <__sflush_r+0xc0>
 800a9e2:	684b      	ldr	r3, [r1, #4]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	dc05      	bgt.n	800a9f4 <__sflush_r+0x20>
 800a9e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	dc02      	bgt.n	800a9f4 <__sflush_r+0x20>
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9f6:	2e00      	cmp	r6, #0
 800a9f8:	d0f9      	beq.n	800a9ee <__sflush_r+0x1a>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa00:	682f      	ldr	r7, [r5, #0]
 800aa02:	602b      	str	r3, [r5, #0]
 800aa04:	d032      	beq.n	800aa6c <__sflush_r+0x98>
 800aa06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa08:	89a3      	ldrh	r3, [r4, #12]
 800aa0a:	075a      	lsls	r2, r3, #29
 800aa0c:	d505      	bpl.n	800aa1a <__sflush_r+0x46>
 800aa0e:	6863      	ldr	r3, [r4, #4]
 800aa10:	1ac0      	subs	r0, r0, r3
 800aa12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa14:	b10b      	cbz	r3, 800aa1a <__sflush_r+0x46>
 800aa16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa18:	1ac0      	subs	r0, r0, r3
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa20:	6a21      	ldr	r1, [r4, #32]
 800aa22:	4628      	mov	r0, r5
 800aa24:	47b0      	blx	r6
 800aa26:	1c43      	adds	r3, r0, #1
 800aa28:	89a3      	ldrh	r3, [r4, #12]
 800aa2a:	d106      	bne.n	800aa3a <__sflush_r+0x66>
 800aa2c:	6829      	ldr	r1, [r5, #0]
 800aa2e:	291d      	cmp	r1, #29
 800aa30:	d82c      	bhi.n	800aa8c <__sflush_r+0xb8>
 800aa32:	4a2a      	ldr	r2, [pc, #168]	; (800aadc <__sflush_r+0x108>)
 800aa34:	40ca      	lsrs	r2, r1
 800aa36:	07d6      	lsls	r6, r2, #31
 800aa38:	d528      	bpl.n	800aa8c <__sflush_r+0xb8>
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	6062      	str	r2, [r4, #4]
 800aa3e:	04d9      	lsls	r1, r3, #19
 800aa40:	6922      	ldr	r2, [r4, #16]
 800aa42:	6022      	str	r2, [r4, #0]
 800aa44:	d504      	bpl.n	800aa50 <__sflush_r+0x7c>
 800aa46:	1c42      	adds	r2, r0, #1
 800aa48:	d101      	bne.n	800aa4e <__sflush_r+0x7a>
 800aa4a:	682b      	ldr	r3, [r5, #0]
 800aa4c:	b903      	cbnz	r3, 800aa50 <__sflush_r+0x7c>
 800aa4e:	6560      	str	r0, [r4, #84]	; 0x54
 800aa50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa52:	602f      	str	r7, [r5, #0]
 800aa54:	2900      	cmp	r1, #0
 800aa56:	d0ca      	beq.n	800a9ee <__sflush_r+0x1a>
 800aa58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa5c:	4299      	cmp	r1, r3
 800aa5e:	d002      	beq.n	800aa66 <__sflush_r+0x92>
 800aa60:	4628      	mov	r0, r5
 800aa62:	f7ff fad9 	bl	800a018 <_free_r>
 800aa66:	2000      	movs	r0, #0
 800aa68:	6360      	str	r0, [r4, #52]	; 0x34
 800aa6a:	e7c1      	b.n	800a9f0 <__sflush_r+0x1c>
 800aa6c:	6a21      	ldr	r1, [r4, #32]
 800aa6e:	2301      	movs	r3, #1
 800aa70:	4628      	mov	r0, r5
 800aa72:	47b0      	blx	r6
 800aa74:	1c41      	adds	r1, r0, #1
 800aa76:	d1c7      	bne.n	800aa08 <__sflush_r+0x34>
 800aa78:	682b      	ldr	r3, [r5, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d0c4      	beq.n	800aa08 <__sflush_r+0x34>
 800aa7e:	2b1d      	cmp	r3, #29
 800aa80:	d001      	beq.n	800aa86 <__sflush_r+0xb2>
 800aa82:	2b16      	cmp	r3, #22
 800aa84:	d101      	bne.n	800aa8a <__sflush_r+0xb6>
 800aa86:	602f      	str	r7, [r5, #0]
 800aa88:	e7b1      	b.n	800a9ee <__sflush_r+0x1a>
 800aa8a:	89a3      	ldrh	r3, [r4, #12]
 800aa8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa90:	81a3      	strh	r3, [r4, #12]
 800aa92:	e7ad      	b.n	800a9f0 <__sflush_r+0x1c>
 800aa94:	690f      	ldr	r7, [r1, #16]
 800aa96:	2f00      	cmp	r7, #0
 800aa98:	d0a9      	beq.n	800a9ee <__sflush_r+0x1a>
 800aa9a:	0793      	lsls	r3, r2, #30
 800aa9c:	680e      	ldr	r6, [r1, #0]
 800aa9e:	bf08      	it	eq
 800aaa0:	694b      	ldreq	r3, [r1, #20]
 800aaa2:	600f      	str	r7, [r1, #0]
 800aaa4:	bf18      	it	ne
 800aaa6:	2300      	movne	r3, #0
 800aaa8:	eba6 0807 	sub.w	r8, r6, r7
 800aaac:	608b      	str	r3, [r1, #8]
 800aaae:	f1b8 0f00 	cmp.w	r8, #0
 800aab2:	dd9c      	ble.n	800a9ee <__sflush_r+0x1a>
 800aab4:	6a21      	ldr	r1, [r4, #32]
 800aab6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aab8:	4643      	mov	r3, r8
 800aaba:	463a      	mov	r2, r7
 800aabc:	4628      	mov	r0, r5
 800aabe:	47b0      	blx	r6
 800aac0:	2800      	cmp	r0, #0
 800aac2:	dc06      	bgt.n	800aad2 <__sflush_r+0xfe>
 800aac4:	89a3      	ldrh	r3, [r4, #12]
 800aac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaca:	81a3      	strh	r3, [r4, #12]
 800aacc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aad0:	e78e      	b.n	800a9f0 <__sflush_r+0x1c>
 800aad2:	4407      	add	r7, r0
 800aad4:	eba8 0800 	sub.w	r8, r8, r0
 800aad8:	e7e9      	b.n	800aaae <__sflush_r+0xda>
 800aada:	bf00      	nop
 800aadc:	20400001 	.word	0x20400001

0800aae0 <_fflush_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	690b      	ldr	r3, [r1, #16]
 800aae4:	4605      	mov	r5, r0
 800aae6:	460c      	mov	r4, r1
 800aae8:	b913      	cbnz	r3, 800aaf0 <_fflush_r+0x10>
 800aaea:	2500      	movs	r5, #0
 800aaec:	4628      	mov	r0, r5
 800aaee:	bd38      	pop	{r3, r4, r5, pc}
 800aaf0:	b118      	cbz	r0, 800aafa <_fflush_r+0x1a>
 800aaf2:	6983      	ldr	r3, [r0, #24]
 800aaf4:	b90b      	cbnz	r3, 800aafa <_fflush_r+0x1a>
 800aaf6:	f000 f887 	bl	800ac08 <__sinit>
 800aafa:	4b14      	ldr	r3, [pc, #80]	; (800ab4c <_fflush_r+0x6c>)
 800aafc:	429c      	cmp	r4, r3
 800aafe:	d11b      	bne.n	800ab38 <_fflush_r+0x58>
 800ab00:	686c      	ldr	r4, [r5, #4]
 800ab02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d0ef      	beq.n	800aaea <_fflush_r+0xa>
 800ab0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab0c:	07d0      	lsls	r0, r2, #31
 800ab0e:	d404      	bmi.n	800ab1a <_fflush_r+0x3a>
 800ab10:	0599      	lsls	r1, r3, #22
 800ab12:	d402      	bmi.n	800ab1a <_fflush_r+0x3a>
 800ab14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab16:	f000 f915 	bl	800ad44 <__retarget_lock_acquire_recursive>
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	4621      	mov	r1, r4
 800ab1e:	f7ff ff59 	bl	800a9d4 <__sflush_r>
 800ab22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab24:	07da      	lsls	r2, r3, #31
 800ab26:	4605      	mov	r5, r0
 800ab28:	d4e0      	bmi.n	800aaec <_fflush_r+0xc>
 800ab2a:	89a3      	ldrh	r3, [r4, #12]
 800ab2c:	059b      	lsls	r3, r3, #22
 800ab2e:	d4dd      	bmi.n	800aaec <_fflush_r+0xc>
 800ab30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab32:	f000 f908 	bl	800ad46 <__retarget_lock_release_recursive>
 800ab36:	e7d9      	b.n	800aaec <_fflush_r+0xc>
 800ab38:	4b05      	ldr	r3, [pc, #20]	; (800ab50 <_fflush_r+0x70>)
 800ab3a:	429c      	cmp	r4, r3
 800ab3c:	d101      	bne.n	800ab42 <_fflush_r+0x62>
 800ab3e:	68ac      	ldr	r4, [r5, #8]
 800ab40:	e7df      	b.n	800ab02 <_fflush_r+0x22>
 800ab42:	4b04      	ldr	r3, [pc, #16]	; (800ab54 <_fflush_r+0x74>)
 800ab44:	429c      	cmp	r4, r3
 800ab46:	bf08      	it	eq
 800ab48:	68ec      	ldreq	r4, [r5, #12]
 800ab4a:	e7da      	b.n	800ab02 <_fflush_r+0x22>
 800ab4c:	0800b4ec 	.word	0x0800b4ec
 800ab50:	0800b50c 	.word	0x0800b50c
 800ab54:	0800b4cc 	.word	0x0800b4cc

0800ab58 <std>:
 800ab58:	2300      	movs	r3, #0
 800ab5a:	b510      	push	{r4, lr}
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ab62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab66:	6083      	str	r3, [r0, #8]
 800ab68:	8181      	strh	r1, [r0, #12]
 800ab6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ab6c:	81c2      	strh	r2, [r0, #14]
 800ab6e:	6183      	str	r3, [r0, #24]
 800ab70:	4619      	mov	r1, r3
 800ab72:	2208      	movs	r2, #8
 800ab74:	305c      	adds	r0, #92	; 0x5c
 800ab76:	f7fb fe21 	bl	80067bc <memset>
 800ab7a:	4b05      	ldr	r3, [pc, #20]	; (800ab90 <std+0x38>)
 800ab7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ab7e:	4b05      	ldr	r3, [pc, #20]	; (800ab94 <std+0x3c>)
 800ab80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab82:	4b05      	ldr	r3, [pc, #20]	; (800ab98 <std+0x40>)
 800ab84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab86:	4b05      	ldr	r3, [pc, #20]	; (800ab9c <std+0x44>)
 800ab88:	6224      	str	r4, [r4, #32]
 800ab8a:	6323      	str	r3, [r4, #48]	; 0x30
 800ab8c:	bd10      	pop	{r4, pc}
 800ab8e:	bf00      	nop
 800ab90:	0800aea9 	.word	0x0800aea9
 800ab94:	0800aecb 	.word	0x0800aecb
 800ab98:	0800af03 	.word	0x0800af03
 800ab9c:	0800af27 	.word	0x0800af27

0800aba0 <_cleanup_r>:
 800aba0:	4901      	ldr	r1, [pc, #4]	; (800aba8 <_cleanup_r+0x8>)
 800aba2:	f000 b8af 	b.w	800ad04 <_fwalk_reent>
 800aba6:	bf00      	nop
 800aba8:	0800aae1 	.word	0x0800aae1

0800abac <__sfmoreglue>:
 800abac:	b570      	push	{r4, r5, r6, lr}
 800abae:	1e4a      	subs	r2, r1, #1
 800abb0:	2568      	movs	r5, #104	; 0x68
 800abb2:	4355      	muls	r5, r2
 800abb4:	460e      	mov	r6, r1
 800abb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800abba:	f7ff fa7d 	bl	800a0b8 <_malloc_r>
 800abbe:	4604      	mov	r4, r0
 800abc0:	b140      	cbz	r0, 800abd4 <__sfmoreglue+0x28>
 800abc2:	2100      	movs	r1, #0
 800abc4:	e9c0 1600 	strd	r1, r6, [r0]
 800abc8:	300c      	adds	r0, #12
 800abca:	60a0      	str	r0, [r4, #8]
 800abcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abd0:	f7fb fdf4 	bl	80067bc <memset>
 800abd4:	4620      	mov	r0, r4
 800abd6:	bd70      	pop	{r4, r5, r6, pc}

0800abd8 <__sfp_lock_acquire>:
 800abd8:	4801      	ldr	r0, [pc, #4]	; (800abe0 <__sfp_lock_acquire+0x8>)
 800abda:	f000 b8b3 	b.w	800ad44 <__retarget_lock_acquire_recursive>
 800abde:	bf00      	nop
 800abe0:	20004c60 	.word	0x20004c60

0800abe4 <__sfp_lock_release>:
 800abe4:	4801      	ldr	r0, [pc, #4]	; (800abec <__sfp_lock_release+0x8>)
 800abe6:	f000 b8ae 	b.w	800ad46 <__retarget_lock_release_recursive>
 800abea:	bf00      	nop
 800abec:	20004c60 	.word	0x20004c60

0800abf0 <__sinit_lock_acquire>:
 800abf0:	4801      	ldr	r0, [pc, #4]	; (800abf8 <__sinit_lock_acquire+0x8>)
 800abf2:	f000 b8a7 	b.w	800ad44 <__retarget_lock_acquire_recursive>
 800abf6:	bf00      	nop
 800abf8:	20004c5b 	.word	0x20004c5b

0800abfc <__sinit_lock_release>:
 800abfc:	4801      	ldr	r0, [pc, #4]	; (800ac04 <__sinit_lock_release+0x8>)
 800abfe:	f000 b8a2 	b.w	800ad46 <__retarget_lock_release_recursive>
 800ac02:	bf00      	nop
 800ac04:	20004c5b 	.word	0x20004c5b

0800ac08 <__sinit>:
 800ac08:	b510      	push	{r4, lr}
 800ac0a:	4604      	mov	r4, r0
 800ac0c:	f7ff fff0 	bl	800abf0 <__sinit_lock_acquire>
 800ac10:	69a3      	ldr	r3, [r4, #24]
 800ac12:	b11b      	cbz	r3, 800ac1c <__sinit+0x14>
 800ac14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac18:	f7ff bff0 	b.w	800abfc <__sinit_lock_release>
 800ac1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac20:	6523      	str	r3, [r4, #80]	; 0x50
 800ac22:	4b13      	ldr	r3, [pc, #76]	; (800ac70 <__sinit+0x68>)
 800ac24:	4a13      	ldr	r2, [pc, #76]	; (800ac74 <__sinit+0x6c>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac2a:	42a3      	cmp	r3, r4
 800ac2c:	bf04      	itt	eq
 800ac2e:	2301      	moveq	r3, #1
 800ac30:	61a3      	streq	r3, [r4, #24]
 800ac32:	4620      	mov	r0, r4
 800ac34:	f000 f820 	bl	800ac78 <__sfp>
 800ac38:	6060      	str	r0, [r4, #4]
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f000 f81c 	bl	800ac78 <__sfp>
 800ac40:	60a0      	str	r0, [r4, #8]
 800ac42:	4620      	mov	r0, r4
 800ac44:	f000 f818 	bl	800ac78 <__sfp>
 800ac48:	2200      	movs	r2, #0
 800ac4a:	60e0      	str	r0, [r4, #12]
 800ac4c:	2104      	movs	r1, #4
 800ac4e:	6860      	ldr	r0, [r4, #4]
 800ac50:	f7ff ff82 	bl	800ab58 <std>
 800ac54:	68a0      	ldr	r0, [r4, #8]
 800ac56:	2201      	movs	r2, #1
 800ac58:	2109      	movs	r1, #9
 800ac5a:	f7ff ff7d 	bl	800ab58 <std>
 800ac5e:	68e0      	ldr	r0, [r4, #12]
 800ac60:	2202      	movs	r2, #2
 800ac62:	2112      	movs	r1, #18
 800ac64:	f7ff ff78 	bl	800ab58 <std>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	61a3      	str	r3, [r4, #24]
 800ac6c:	e7d2      	b.n	800ac14 <__sinit+0xc>
 800ac6e:	bf00      	nop
 800ac70:	0800b078 	.word	0x0800b078
 800ac74:	0800aba1 	.word	0x0800aba1

0800ac78 <__sfp>:
 800ac78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7a:	4607      	mov	r7, r0
 800ac7c:	f7ff ffac 	bl	800abd8 <__sfp_lock_acquire>
 800ac80:	4b1e      	ldr	r3, [pc, #120]	; (800acfc <__sfp+0x84>)
 800ac82:	681e      	ldr	r6, [r3, #0]
 800ac84:	69b3      	ldr	r3, [r6, #24]
 800ac86:	b913      	cbnz	r3, 800ac8e <__sfp+0x16>
 800ac88:	4630      	mov	r0, r6
 800ac8a:	f7ff ffbd 	bl	800ac08 <__sinit>
 800ac8e:	3648      	adds	r6, #72	; 0x48
 800ac90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac94:	3b01      	subs	r3, #1
 800ac96:	d503      	bpl.n	800aca0 <__sfp+0x28>
 800ac98:	6833      	ldr	r3, [r6, #0]
 800ac9a:	b30b      	cbz	r3, 800ace0 <__sfp+0x68>
 800ac9c:	6836      	ldr	r6, [r6, #0]
 800ac9e:	e7f7      	b.n	800ac90 <__sfp+0x18>
 800aca0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aca4:	b9d5      	cbnz	r5, 800acdc <__sfp+0x64>
 800aca6:	4b16      	ldr	r3, [pc, #88]	; (800ad00 <__sfp+0x88>)
 800aca8:	60e3      	str	r3, [r4, #12]
 800acaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800acae:	6665      	str	r5, [r4, #100]	; 0x64
 800acb0:	f000 f847 	bl	800ad42 <__retarget_lock_init_recursive>
 800acb4:	f7ff ff96 	bl	800abe4 <__sfp_lock_release>
 800acb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800acbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800acc0:	6025      	str	r5, [r4, #0]
 800acc2:	61a5      	str	r5, [r4, #24]
 800acc4:	2208      	movs	r2, #8
 800acc6:	4629      	mov	r1, r5
 800acc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800accc:	f7fb fd76 	bl	80067bc <memset>
 800acd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800acd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acd8:	4620      	mov	r0, r4
 800acda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acdc:	3468      	adds	r4, #104	; 0x68
 800acde:	e7d9      	b.n	800ac94 <__sfp+0x1c>
 800ace0:	2104      	movs	r1, #4
 800ace2:	4638      	mov	r0, r7
 800ace4:	f7ff ff62 	bl	800abac <__sfmoreglue>
 800ace8:	4604      	mov	r4, r0
 800acea:	6030      	str	r0, [r6, #0]
 800acec:	2800      	cmp	r0, #0
 800acee:	d1d5      	bne.n	800ac9c <__sfp+0x24>
 800acf0:	f7ff ff78 	bl	800abe4 <__sfp_lock_release>
 800acf4:	230c      	movs	r3, #12
 800acf6:	603b      	str	r3, [r7, #0]
 800acf8:	e7ee      	b.n	800acd8 <__sfp+0x60>
 800acfa:	bf00      	nop
 800acfc:	0800b078 	.word	0x0800b078
 800ad00:	ffff0001 	.word	0xffff0001

0800ad04 <_fwalk_reent>:
 800ad04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad08:	4606      	mov	r6, r0
 800ad0a:	4688      	mov	r8, r1
 800ad0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad10:	2700      	movs	r7, #0
 800ad12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad16:	f1b9 0901 	subs.w	r9, r9, #1
 800ad1a:	d505      	bpl.n	800ad28 <_fwalk_reent+0x24>
 800ad1c:	6824      	ldr	r4, [r4, #0]
 800ad1e:	2c00      	cmp	r4, #0
 800ad20:	d1f7      	bne.n	800ad12 <_fwalk_reent+0xe>
 800ad22:	4638      	mov	r0, r7
 800ad24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad28:	89ab      	ldrh	r3, [r5, #12]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d907      	bls.n	800ad3e <_fwalk_reent+0x3a>
 800ad2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad32:	3301      	adds	r3, #1
 800ad34:	d003      	beq.n	800ad3e <_fwalk_reent+0x3a>
 800ad36:	4629      	mov	r1, r5
 800ad38:	4630      	mov	r0, r6
 800ad3a:	47c0      	blx	r8
 800ad3c:	4307      	orrs	r7, r0
 800ad3e:	3568      	adds	r5, #104	; 0x68
 800ad40:	e7e9      	b.n	800ad16 <_fwalk_reent+0x12>

0800ad42 <__retarget_lock_init_recursive>:
 800ad42:	4770      	bx	lr

0800ad44 <__retarget_lock_acquire_recursive>:
 800ad44:	4770      	bx	lr

0800ad46 <__retarget_lock_release_recursive>:
 800ad46:	4770      	bx	lr

0800ad48 <__swhatbuf_r>:
 800ad48:	b570      	push	{r4, r5, r6, lr}
 800ad4a:	460e      	mov	r6, r1
 800ad4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad50:	2900      	cmp	r1, #0
 800ad52:	b096      	sub	sp, #88	; 0x58
 800ad54:	4614      	mov	r4, r2
 800ad56:	461d      	mov	r5, r3
 800ad58:	da07      	bge.n	800ad6a <__swhatbuf_r+0x22>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	602b      	str	r3, [r5, #0]
 800ad5e:	89b3      	ldrh	r3, [r6, #12]
 800ad60:	061a      	lsls	r2, r3, #24
 800ad62:	d410      	bmi.n	800ad86 <__swhatbuf_r+0x3e>
 800ad64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad68:	e00e      	b.n	800ad88 <__swhatbuf_r+0x40>
 800ad6a:	466a      	mov	r2, sp
 800ad6c:	f000 f902 	bl	800af74 <_fstat_r>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	dbf2      	blt.n	800ad5a <__swhatbuf_r+0x12>
 800ad74:	9a01      	ldr	r2, [sp, #4]
 800ad76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad7e:	425a      	negs	r2, r3
 800ad80:	415a      	adcs	r2, r3
 800ad82:	602a      	str	r2, [r5, #0]
 800ad84:	e7ee      	b.n	800ad64 <__swhatbuf_r+0x1c>
 800ad86:	2340      	movs	r3, #64	; 0x40
 800ad88:	2000      	movs	r0, #0
 800ad8a:	6023      	str	r3, [r4, #0]
 800ad8c:	b016      	add	sp, #88	; 0x58
 800ad8e:	bd70      	pop	{r4, r5, r6, pc}

0800ad90 <__smakebuf_r>:
 800ad90:	898b      	ldrh	r3, [r1, #12]
 800ad92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad94:	079d      	lsls	r5, r3, #30
 800ad96:	4606      	mov	r6, r0
 800ad98:	460c      	mov	r4, r1
 800ad9a:	d507      	bpl.n	800adac <__smakebuf_r+0x1c>
 800ad9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	6123      	str	r3, [r4, #16]
 800ada4:	2301      	movs	r3, #1
 800ada6:	6163      	str	r3, [r4, #20]
 800ada8:	b002      	add	sp, #8
 800adaa:	bd70      	pop	{r4, r5, r6, pc}
 800adac:	ab01      	add	r3, sp, #4
 800adae:	466a      	mov	r2, sp
 800adb0:	f7ff ffca 	bl	800ad48 <__swhatbuf_r>
 800adb4:	9900      	ldr	r1, [sp, #0]
 800adb6:	4605      	mov	r5, r0
 800adb8:	4630      	mov	r0, r6
 800adba:	f7ff f97d 	bl	800a0b8 <_malloc_r>
 800adbe:	b948      	cbnz	r0, 800add4 <__smakebuf_r+0x44>
 800adc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adc4:	059a      	lsls	r2, r3, #22
 800adc6:	d4ef      	bmi.n	800ada8 <__smakebuf_r+0x18>
 800adc8:	f023 0303 	bic.w	r3, r3, #3
 800adcc:	f043 0302 	orr.w	r3, r3, #2
 800add0:	81a3      	strh	r3, [r4, #12]
 800add2:	e7e3      	b.n	800ad9c <__smakebuf_r+0xc>
 800add4:	4b0d      	ldr	r3, [pc, #52]	; (800ae0c <__smakebuf_r+0x7c>)
 800add6:	62b3      	str	r3, [r6, #40]	; 0x28
 800add8:	89a3      	ldrh	r3, [r4, #12]
 800adda:	6020      	str	r0, [r4, #0]
 800addc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ade0:	81a3      	strh	r3, [r4, #12]
 800ade2:	9b00      	ldr	r3, [sp, #0]
 800ade4:	6163      	str	r3, [r4, #20]
 800ade6:	9b01      	ldr	r3, [sp, #4]
 800ade8:	6120      	str	r0, [r4, #16]
 800adea:	b15b      	cbz	r3, 800ae04 <__smakebuf_r+0x74>
 800adec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adf0:	4630      	mov	r0, r6
 800adf2:	f000 f8d1 	bl	800af98 <_isatty_r>
 800adf6:	b128      	cbz	r0, 800ae04 <__smakebuf_r+0x74>
 800adf8:	89a3      	ldrh	r3, [r4, #12]
 800adfa:	f023 0303 	bic.w	r3, r3, #3
 800adfe:	f043 0301 	orr.w	r3, r3, #1
 800ae02:	81a3      	strh	r3, [r4, #12]
 800ae04:	89a0      	ldrh	r0, [r4, #12]
 800ae06:	4305      	orrs	r5, r0
 800ae08:	81a5      	strh	r5, [r4, #12]
 800ae0a:	e7cd      	b.n	800ada8 <__smakebuf_r+0x18>
 800ae0c:	0800aba1 	.word	0x0800aba1

0800ae10 <_malloc_usable_size_r>:
 800ae10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae14:	1f18      	subs	r0, r3, #4
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	bfbc      	itt	lt
 800ae1a:	580b      	ldrlt	r3, [r1, r0]
 800ae1c:	18c0      	addlt	r0, r0, r3
 800ae1e:	4770      	bx	lr

0800ae20 <_raise_r>:
 800ae20:	291f      	cmp	r1, #31
 800ae22:	b538      	push	{r3, r4, r5, lr}
 800ae24:	4604      	mov	r4, r0
 800ae26:	460d      	mov	r5, r1
 800ae28:	d904      	bls.n	800ae34 <_raise_r+0x14>
 800ae2a:	2316      	movs	r3, #22
 800ae2c:	6003      	str	r3, [r0, #0]
 800ae2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae32:	bd38      	pop	{r3, r4, r5, pc}
 800ae34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae36:	b112      	cbz	r2, 800ae3e <_raise_r+0x1e>
 800ae38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae3c:	b94b      	cbnz	r3, 800ae52 <_raise_r+0x32>
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f000 f830 	bl	800aea4 <_getpid_r>
 800ae44:	462a      	mov	r2, r5
 800ae46:	4601      	mov	r1, r0
 800ae48:	4620      	mov	r0, r4
 800ae4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae4e:	f000 b817 	b.w	800ae80 <_kill_r>
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d00a      	beq.n	800ae6c <_raise_r+0x4c>
 800ae56:	1c59      	adds	r1, r3, #1
 800ae58:	d103      	bne.n	800ae62 <_raise_r+0x42>
 800ae5a:	2316      	movs	r3, #22
 800ae5c:	6003      	str	r3, [r0, #0]
 800ae5e:	2001      	movs	r0, #1
 800ae60:	e7e7      	b.n	800ae32 <_raise_r+0x12>
 800ae62:	2400      	movs	r4, #0
 800ae64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae68:	4628      	mov	r0, r5
 800ae6a:	4798      	blx	r3
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	e7e0      	b.n	800ae32 <_raise_r+0x12>

0800ae70 <raise>:
 800ae70:	4b02      	ldr	r3, [pc, #8]	; (800ae7c <raise+0xc>)
 800ae72:	4601      	mov	r1, r0
 800ae74:	6818      	ldr	r0, [r3, #0]
 800ae76:	f7ff bfd3 	b.w	800ae20 <_raise_r>
 800ae7a:	bf00      	nop
 800ae7c:	20000010 	.word	0x20000010

0800ae80 <_kill_r>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	4d07      	ldr	r5, [pc, #28]	; (800aea0 <_kill_r+0x20>)
 800ae84:	2300      	movs	r3, #0
 800ae86:	4604      	mov	r4, r0
 800ae88:	4608      	mov	r0, r1
 800ae8a:	4611      	mov	r1, r2
 800ae8c:	602b      	str	r3, [r5, #0]
 800ae8e:	f7f6 fba0 	bl	80015d2 <_kill>
 800ae92:	1c43      	adds	r3, r0, #1
 800ae94:	d102      	bne.n	800ae9c <_kill_r+0x1c>
 800ae96:	682b      	ldr	r3, [r5, #0]
 800ae98:	b103      	cbz	r3, 800ae9c <_kill_r+0x1c>
 800ae9a:	6023      	str	r3, [r4, #0]
 800ae9c:	bd38      	pop	{r3, r4, r5, pc}
 800ae9e:	bf00      	nop
 800aea0:	20004c54 	.word	0x20004c54

0800aea4 <_getpid_r>:
 800aea4:	f7f6 bb8d 	b.w	80015c2 <_getpid>

0800aea8 <__sread>:
 800aea8:	b510      	push	{r4, lr}
 800aeaa:	460c      	mov	r4, r1
 800aeac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeb0:	f000 f894 	bl	800afdc <_read_r>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	bfab      	itete	ge
 800aeb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aeba:	89a3      	ldrhlt	r3, [r4, #12]
 800aebc:	181b      	addge	r3, r3, r0
 800aebe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aec2:	bfac      	ite	ge
 800aec4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aec6:	81a3      	strhlt	r3, [r4, #12]
 800aec8:	bd10      	pop	{r4, pc}

0800aeca <__swrite>:
 800aeca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aece:	461f      	mov	r7, r3
 800aed0:	898b      	ldrh	r3, [r1, #12]
 800aed2:	05db      	lsls	r3, r3, #23
 800aed4:	4605      	mov	r5, r0
 800aed6:	460c      	mov	r4, r1
 800aed8:	4616      	mov	r6, r2
 800aeda:	d505      	bpl.n	800aee8 <__swrite+0x1e>
 800aedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aee0:	2302      	movs	r3, #2
 800aee2:	2200      	movs	r2, #0
 800aee4:	f000 f868 	bl	800afb8 <_lseek_r>
 800aee8:	89a3      	ldrh	r3, [r4, #12]
 800aeea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aef2:	81a3      	strh	r3, [r4, #12]
 800aef4:	4632      	mov	r2, r6
 800aef6:	463b      	mov	r3, r7
 800aef8:	4628      	mov	r0, r5
 800aefa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aefe:	f000 b817 	b.w	800af30 <_write_r>

0800af02 <__sseek>:
 800af02:	b510      	push	{r4, lr}
 800af04:	460c      	mov	r4, r1
 800af06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af0a:	f000 f855 	bl	800afb8 <_lseek_r>
 800af0e:	1c43      	adds	r3, r0, #1
 800af10:	89a3      	ldrh	r3, [r4, #12]
 800af12:	bf15      	itete	ne
 800af14:	6560      	strne	r0, [r4, #84]	; 0x54
 800af16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af1e:	81a3      	strheq	r3, [r4, #12]
 800af20:	bf18      	it	ne
 800af22:	81a3      	strhne	r3, [r4, #12]
 800af24:	bd10      	pop	{r4, pc}

0800af26 <__sclose>:
 800af26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af2a:	f000 b813 	b.w	800af54 <_close_r>
	...

0800af30 <_write_r>:
 800af30:	b538      	push	{r3, r4, r5, lr}
 800af32:	4d07      	ldr	r5, [pc, #28]	; (800af50 <_write_r+0x20>)
 800af34:	4604      	mov	r4, r0
 800af36:	4608      	mov	r0, r1
 800af38:	4611      	mov	r1, r2
 800af3a:	2200      	movs	r2, #0
 800af3c:	602a      	str	r2, [r5, #0]
 800af3e:	461a      	mov	r2, r3
 800af40:	f7f6 fb7e 	bl	8001640 <_write>
 800af44:	1c43      	adds	r3, r0, #1
 800af46:	d102      	bne.n	800af4e <_write_r+0x1e>
 800af48:	682b      	ldr	r3, [r5, #0]
 800af4a:	b103      	cbz	r3, 800af4e <_write_r+0x1e>
 800af4c:	6023      	str	r3, [r4, #0]
 800af4e:	bd38      	pop	{r3, r4, r5, pc}
 800af50:	20004c54 	.word	0x20004c54

0800af54 <_close_r>:
 800af54:	b538      	push	{r3, r4, r5, lr}
 800af56:	4d06      	ldr	r5, [pc, #24]	; (800af70 <_close_r+0x1c>)
 800af58:	2300      	movs	r3, #0
 800af5a:	4604      	mov	r4, r0
 800af5c:	4608      	mov	r0, r1
 800af5e:	602b      	str	r3, [r5, #0]
 800af60:	f7f6 fb8a 	bl	8001678 <_close>
 800af64:	1c43      	adds	r3, r0, #1
 800af66:	d102      	bne.n	800af6e <_close_r+0x1a>
 800af68:	682b      	ldr	r3, [r5, #0]
 800af6a:	b103      	cbz	r3, 800af6e <_close_r+0x1a>
 800af6c:	6023      	str	r3, [r4, #0]
 800af6e:	bd38      	pop	{r3, r4, r5, pc}
 800af70:	20004c54 	.word	0x20004c54

0800af74 <_fstat_r>:
 800af74:	b538      	push	{r3, r4, r5, lr}
 800af76:	4d07      	ldr	r5, [pc, #28]	; (800af94 <_fstat_r+0x20>)
 800af78:	2300      	movs	r3, #0
 800af7a:	4604      	mov	r4, r0
 800af7c:	4608      	mov	r0, r1
 800af7e:	4611      	mov	r1, r2
 800af80:	602b      	str	r3, [r5, #0]
 800af82:	f7f6 fb85 	bl	8001690 <_fstat>
 800af86:	1c43      	adds	r3, r0, #1
 800af88:	d102      	bne.n	800af90 <_fstat_r+0x1c>
 800af8a:	682b      	ldr	r3, [r5, #0]
 800af8c:	b103      	cbz	r3, 800af90 <_fstat_r+0x1c>
 800af8e:	6023      	str	r3, [r4, #0]
 800af90:	bd38      	pop	{r3, r4, r5, pc}
 800af92:	bf00      	nop
 800af94:	20004c54 	.word	0x20004c54

0800af98 <_isatty_r>:
 800af98:	b538      	push	{r3, r4, r5, lr}
 800af9a:	4d06      	ldr	r5, [pc, #24]	; (800afb4 <_isatty_r+0x1c>)
 800af9c:	2300      	movs	r3, #0
 800af9e:	4604      	mov	r4, r0
 800afa0:	4608      	mov	r0, r1
 800afa2:	602b      	str	r3, [r5, #0]
 800afa4:	f7f6 fb84 	bl	80016b0 <_isatty>
 800afa8:	1c43      	adds	r3, r0, #1
 800afaa:	d102      	bne.n	800afb2 <_isatty_r+0x1a>
 800afac:	682b      	ldr	r3, [r5, #0]
 800afae:	b103      	cbz	r3, 800afb2 <_isatty_r+0x1a>
 800afb0:	6023      	str	r3, [r4, #0]
 800afb2:	bd38      	pop	{r3, r4, r5, pc}
 800afb4:	20004c54 	.word	0x20004c54

0800afb8 <_lseek_r>:
 800afb8:	b538      	push	{r3, r4, r5, lr}
 800afba:	4d07      	ldr	r5, [pc, #28]	; (800afd8 <_lseek_r+0x20>)
 800afbc:	4604      	mov	r4, r0
 800afbe:	4608      	mov	r0, r1
 800afc0:	4611      	mov	r1, r2
 800afc2:	2200      	movs	r2, #0
 800afc4:	602a      	str	r2, [r5, #0]
 800afc6:	461a      	mov	r2, r3
 800afc8:	f7f6 fb7d 	bl	80016c6 <_lseek>
 800afcc:	1c43      	adds	r3, r0, #1
 800afce:	d102      	bne.n	800afd6 <_lseek_r+0x1e>
 800afd0:	682b      	ldr	r3, [r5, #0]
 800afd2:	b103      	cbz	r3, 800afd6 <_lseek_r+0x1e>
 800afd4:	6023      	str	r3, [r4, #0]
 800afd6:	bd38      	pop	{r3, r4, r5, pc}
 800afd8:	20004c54 	.word	0x20004c54

0800afdc <_read_r>:
 800afdc:	b538      	push	{r3, r4, r5, lr}
 800afde:	4d07      	ldr	r5, [pc, #28]	; (800affc <_read_r+0x20>)
 800afe0:	4604      	mov	r4, r0
 800afe2:	4608      	mov	r0, r1
 800afe4:	4611      	mov	r1, r2
 800afe6:	2200      	movs	r2, #0
 800afe8:	602a      	str	r2, [r5, #0]
 800afea:	461a      	mov	r2, r3
 800afec:	f7f6 fb0b 	bl	8001606 <_read>
 800aff0:	1c43      	adds	r3, r0, #1
 800aff2:	d102      	bne.n	800affa <_read_r+0x1e>
 800aff4:	682b      	ldr	r3, [r5, #0]
 800aff6:	b103      	cbz	r3, 800affa <_read_r+0x1e>
 800aff8:	6023      	str	r3, [r4, #0]
 800affa:	bd38      	pop	{r3, r4, r5, pc}
 800affc:	20004c54 	.word	0x20004c54

0800b000 <_init>:
 800b000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b002:	bf00      	nop
 800b004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b006:	bc08      	pop	{r3}
 800b008:	469e      	mov	lr, r3
 800b00a:	4770      	bx	lr

0800b00c <_fini>:
 800b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00e:	bf00      	nop
 800b010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b012:	bc08      	pop	{r3}
 800b014:	469e      	mov	lr, r3
 800b016:	4770      	bx	lr
