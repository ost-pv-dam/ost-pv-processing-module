
ost-pv-processing-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08009bb0  08009bb0  00019bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a020  0800a020  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a020  0800a020  0001a020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a028  0800a028  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a028  0800a028  0001a028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a02c  0800a02c  0001a02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bc8  200001dc  0800a20c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004da4  0800a20c  00024da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014872  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f35  00000000  00000000  00034ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  000379f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd6  00000000  00000000  00038bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005d9b  00000000  00000000  0003999e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014979  00000000  00000000  0003f739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0c95  00000000  00000000  000540b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005be0  00000000  00000000  00124d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0012a928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b94 	.word	0x08009b94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009b94 	.word	0x08009b94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <calculate_crc>:
#include "SHT30.h"

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8000eae:	23ff      	movs	r3, #255	; 0xff
 8000eb0:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	e020      	b.n	8000efa <calculate_crc+0x56>
		crc ^= data[i];
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	7dfb      	ldrb	r3, [r7, #23]
 8000ec2:	4053      	eors	r3, r2
 8000ec4:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	e010      	b.n	8000eee <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8000ecc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	da06      	bge.n	8000ee2 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8000ed4:	7dfb      	ldrb	r3, [r7, #23]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000ede:	75fb      	strb	r3, [r7, #23]
 8000ee0:	e002      	b.n	8000ee8 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3301      	adds	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	d9eb      	bls.n	8000ecc <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d3da      	bcc.n	8000eb8 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8000f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	371c      	adds	r7, #28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	460a      	mov	r2, r1
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	79bb      	ldrb	r3, [r7, #6]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b29b      	uxth	r3, r3
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <SHT30_init>:

uint8_t SHT30_init(SHT30_t* sht) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af04      	add	r7, sp, #16
 8000f42:	6078      	str	r0, [r7, #4]
	assert(sht->hi2c->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d005      	beq.n	8000f5a <SHT30_init+0x1e>
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <SHT30_init+0x6c>)
 8000f50:	4a16      	ldr	r2, [pc, #88]	; (8000fac <SHT30_init+0x70>)
 8000f52:	2119      	movs	r1, #25
 8000f54:	4816      	ldr	r0, [pc, #88]	; (8000fb0 <SHT30_init+0x74>)
 8000f56:	f005 ff99 	bl	8006e8c <__assert_func>

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(sht->hi2c, SHT30_I2C_ADDR << 1u, SHT30_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	231e      	movs	r3, #30
 8000f60:	9302      	str	r3, [sp, #8]
 8000f62:	2303      	movs	r3, #3
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8000f72:	2188      	movs	r1, #136	; 0x88
 8000f74:	f001 fbb0 	bl	80026d8 <HAL_I2C_Mem_Read>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SHT30_init+0x46>
					  sizeof(status_reg_and_checksum), SHT30_I2C_TIMEOUT) != HAL_OK) {
		return 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e00e      	b.n	8000fa0 <SHT30_init+0x64>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	2102      	movs	r1, #2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff8b 	bl	8000ea4 <calculate_crc>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8000f92:	7bbb      	ldrb	r3, [r7, #14]
 8000f94:	7bfa      	ldrb	r2, [r7, #15]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d001      	beq.n	8000f9e <SHT30_init+0x62>
		return 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <SHT30_init+0x64>
	}

	return 1;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	08009bb0 	.word	0x08009bb0
 8000fac:	08009c64 	.word	0x08009c64
 8000fb0:	08009be8 	.word	0x08009be8

08000fb4 <SHT30_send_cmd>:

uint8_t SHT30_send_cmd(SHT30_t* sht, uint16_t cmd) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(cmd & 0xff00u) >> 8u, cmd & 0xffu};
 8000fc0:	887b      	ldrh	r3, [r7, #2]
 8000fc2:	0a1b      	lsrs	r3, r3, #8
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	733b      	strb	r3, [r7, #12]
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(sht->hi2c, SHT30_I2C_ADDR << 1u, command_buffer, sizeof(command_buffer),
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	f107 020c 	add.w	r2, r7, #12
 8000fd8:	231e      	movs	r3, #30
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2302      	movs	r3, #2
 8000fde:	2188      	movs	r1, #136	; 0x88
 8000fe0:	f001 f856 	bl	8002090 <HAL_I2C_Master_Transmit>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SHT30_send_cmd+0x3a>
								SHT30_I2C_TIMEOUT) != HAL_OK) {
		return 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <SHT30_send_cmd+0x3c>
	}

	return 1;
 8000fee:	2301      	movs	r3, #1

}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <SHT30_read_temp_humidity>:

uint8_t SHT30_read_temp_humidity(SHT30_t* sht, float* temperature, float* humidity) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
	SHT30_send_cmd(sht, SHT30_COMMAND_MEASURE_HIGHREP_STRETCH);
 8001004:	f642 4106 	movw	r1, #11270	; 0x2c06
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f7ff ffd3 	bl	8000fb4 <SHT30_send_cmd>

	HAL_Delay(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f000 fc54 	bl	80018bc <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(sht->hi2c, SHT30_I2C_ADDR << 1u, buffer, sizeof(buffer), SHT30_I2C_TIMEOUT) != HAL_OK) {
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	f107 0214 	add.w	r2, r7, #20
 800101c:	231e      	movs	r3, #30
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2306      	movs	r3, #6
 8001022:	2188      	movs	r1, #136	; 0x88
 8001024:	f001 f932 	bl	800228c <HAL_I2C_Master_Receive>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SHT30_read_temp_humidity+0x3a>
		return 0;
 800102e:	2300      	movs	r3, #0
 8001030:	e04f      	b.n	80010d2 <SHT30_read_temp_humidity+0xda>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2102      	movs	r1, #2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff33 	bl	8000ea4 <calculate_crc>
 800103e:	4603      	mov	r3, r0
 8001040:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	3303      	adds	r3, #3
 8001048:	2102      	movs	r1, #2
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff2a 	bl	8000ea4 <calculate_crc>
 8001050:	4603      	mov	r3, r0
 8001052:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8001054:	7dbb      	ldrb	r3, [r7, #22]
 8001056:	7ffa      	ldrb	r2, [r7, #31]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <SHT30_read_temp_humidity+0x6c>
 800105c:	7e7b      	ldrb	r3, [r7, #25]
 800105e:	7fba      	ldrb	r2, [r7, #30]
 8001060:	429a      	cmp	r2, r3
 8001062:	d001      	beq.n	8001068 <SHT30_read_temp_humidity+0x70>
		return 0;
 8001064:	2300      	movs	r3, #0
 8001066:	e034      	b.n	80010d2 <SHT30_read_temp_humidity+0xda>
	}

	uint16_t temperature_raw = uint8_to_uint16(buffer[0], buffer[1]);
 8001068:	7d3b      	ldrb	r3, [r7, #20]
 800106a:	7d7a      	ldrb	r2, [r7, #21]
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff4e 	bl	8000f10 <uint8_to_uint16>
 8001074:	4603      	mov	r3, r0
 8001076:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	7e3a      	ldrb	r2, [r7, #24]
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff46 	bl	8000f10 <uint8_to_uint16>
 8001084:	4603      	mov	r3, r0
 8001086:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8001088:	8bbb      	ldrh	r3, [r7, #28]
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001092:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80010dc <SHT30_read_temp_humidity+0xe4>
 8001096:	ee27 7a87 	vmul.f32	s14, s15, s14
 800109a:	eddf 6a11 	vldr	s13, [pc, #68]	; 80010e0 <SHT30_read_temp_humidity+0xe8>
 800109e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80010e4 <SHT30_read_temp_humidity+0xec>
 80010a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 80010b0:	8b7b      	ldrh	r3, [r7, #26]
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ba:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80010e8 <SHT30_read_temp_humidity+0xf0>
 80010be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010c2:	eddf 6a07 	vldr	s13, [pc, #28]	; 80010e0 <SHT30_read_temp_humidity+0xe8>
 80010c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	edc3 7a00 	vstr	s15, [r3]

	return 1;
 80010d0:	2301      	movs	r3, #1
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3720      	adds	r7, #32
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	432f0000 	.word	0x432f0000
 80010e0:	477fff00 	.word	0x477fff00
 80010e4:	42340000 	.word	0x42340000
 80010e8:	42c80000 	.word	0x42c80000

080010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f2:	f000 fb71 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f6:	f000 f875 	bl	80011e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fa:	f000 f929 	bl	8001350 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010fe:	f000 f8cf 	bl	80012a0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001102:	f000 f8fb 	bl	80012fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf(msg, "Init\n");
 8001106:	492b      	ldr	r1, [pc, #172]	; (80011b4 <main+0xc8>)
 8001108:	482b      	ldr	r0, [pc, #172]	; (80011b8 <main+0xcc>)
 800110a:	f006 fb43 	bl	8007794 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 100);
 800110e:	2364      	movs	r3, #100	; 0x64
 8001110:	2264      	movs	r2, #100	; 0x64
 8001112:	4929      	ldr	r1, [pc, #164]	; (80011b8 <main+0xcc>)
 8001114:	4829      	ldr	r0, [pc, #164]	; (80011bc <main+0xd0>)
 8001116:	f002 fdc0 	bl	8003c9a <HAL_UART_Transmit>
  if (!SHT30_init(&sht)) {
 800111a:	4829      	ldr	r0, [pc, #164]	; (80011c0 <main+0xd4>)
 800111c:	f7ff ff0e 	bl	8000f3c <SHT30_init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10b      	bne.n	800113e <main+0x52>
	  sprintf(msg, "SHT30 init FAIL\n");
 8001126:	4927      	ldr	r1, [pc, #156]	; (80011c4 <main+0xd8>)
 8001128:	4823      	ldr	r0, [pc, #140]	; (80011b8 <main+0xcc>)
 800112a:	f006 fb33 	bl	8007794 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 100);
 800112e:	2364      	movs	r3, #100	; 0x64
 8001130:	2264      	movs	r2, #100	; 0x64
 8001132:	4921      	ldr	r1, [pc, #132]	; (80011b8 <main+0xcc>)
 8001134:	4821      	ldr	r0, [pc, #132]	; (80011bc <main+0xd0>)
 8001136:	f002 fdb0 	bl	8003c9a <HAL_UART_Transmit>
	  return 0;
 800113a:	2300      	movs	r3, #0
 800113c:	e037      	b.n	80011ae <main+0xc2>
  }

  sprintf(msg, "SHT30 init OK\n");
 800113e:	4922      	ldr	r1, [pc, #136]	; (80011c8 <main+0xdc>)
 8001140:	481d      	ldr	r0, [pc, #116]	; (80011b8 <main+0xcc>)
 8001142:	f006 fb27 	bl	8007794 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 100);
 8001146:	2364      	movs	r3, #100	; 0x64
 8001148:	2264      	movs	r2, #100	; 0x64
 800114a:	491b      	ldr	r1, [pc, #108]	; (80011b8 <main+0xcc>)
 800114c:	481b      	ldr	r0, [pc, #108]	; (80011bc <main+0xd0>)
 800114e:	f002 fda4 	bl	8003c9a <HAL_UART_Transmit>

  SHT30_read_temp_humidity(&sht, &temp, &rh);
 8001152:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <main+0xe0>)
 8001154:	491e      	ldr	r1, [pc, #120]	; (80011d0 <main+0xe4>)
 8001156:	481a      	ldr	r0, [pc, #104]	; (80011c0 <main+0xd4>)
 8001158:	f7ff ff4e 	bl	8000ff8 <SHT30_read_temp_humidity>
  sprintf(msg, "temp: %.2f, rh: %.2f\n", temp, rh);
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <main+0xe4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f9f1 	bl	8000548 <__aeabi_f2d>
 8001166:	4604      	mov	r4, r0
 8001168:	460d      	mov	r5, r1
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <main+0xe0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f9ea 	bl	8000548 <__aeabi_f2d>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	e9cd 2300 	strd	r2, r3, [sp]
 800117c:	4622      	mov	r2, r4
 800117e:	462b      	mov	r3, r5
 8001180:	4914      	ldr	r1, [pc, #80]	; (80011d4 <main+0xe8>)
 8001182:	480d      	ldr	r0, [pc, #52]	; (80011b8 <main+0xcc>)
 8001184:	f006 fb06 	bl	8007794 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 100);
 8001188:	2364      	movs	r3, #100	; 0x64
 800118a:	2264      	movs	r2, #100	; 0x64
 800118c:	490a      	ldr	r1, [pc, #40]	; (80011b8 <main+0xcc>)
 800118e:	480b      	ldr	r0, [pc, #44]	; (80011bc <main+0xd0>)
 8001190:	f002 fd83 	bl	8003c9a <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001194:	f003 f92a 	bl	80043ec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001198:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <main+0xec>)
 800119a:	2100      	movs	r1, #0
 800119c:	480f      	ldr	r0, [pc, #60]	; (80011dc <main+0xf0>)
 800119e:	f003 f96f 	bl	8004480 <osThreadNew>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <main+0xf4>)
 80011a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011a8:	f003 f944 	bl	8004434 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <main+0xc0>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bdb0      	pop	{r4, r5, r7, pc}
 80011b4:	08009c08 	.word	0x08009c08
 80011b8:	20000294 	.word	0x20000294
 80011bc:	2000024c 	.word	0x2000024c
 80011c0:	20000000 	.word	0x20000000
 80011c4:	08009c10 	.word	0x08009c10
 80011c8:	08009c24 	.word	0x08009c24
 80011cc:	200002fc 	.word	0x200002fc
 80011d0:	200002f8 	.word	0x200002f8
 80011d4:	08009c34 	.word	0x08009c34
 80011d8:	08009c70 	.word	0x08009c70
 80011dc:	080013a1 	.word	0x080013a1
 80011e0:	20000290 	.word	0x20000290

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b094      	sub	sp, #80	; 0x50
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	2230      	movs	r2, #48	; 0x30
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f006 fbc2 	bl	800797c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	4b22      	ldr	r3, [pc, #136]	; (8001298 <SystemClock_Config+0xb4>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	4a21      	ldr	r2, [pc, #132]	; (8001298 <SystemClock_Config+0xb4>)
 8001212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001216:	6413      	str	r3, [r2, #64]	; 0x40
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <SystemClock_Config+0xb4>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <SystemClock_Config+0xb8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a1b      	ldr	r2, [pc, #108]	; (800129c <SystemClock_Config+0xb8>)
 800122e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <SystemClock_Config+0xb8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001240:	2302      	movs	r3, #2
 8001242:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001244:	2301      	movs	r3, #1
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001248:	2310      	movs	r3, #16
 800124a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800124c:	2300      	movs	r3, #0
 800124e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001250:	f107 0320 	add.w	r3, r7, #32
 8001254:	4618      	mov	r0, r3
 8001256:	f002 f87b 	bl	8003350 <HAL_RCC_OscConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001260:	f000 f8d4 	bl	800140c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001264:	230f      	movs	r3, #15
 8001266:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f002 fade 	bl	8003840 <HAL_RCC_ClockConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800128a:	f000 f8bf 	bl	800140c <Error_Handler>
  }
}
 800128e:	bf00      	nop
 8001290:	3750      	adds	r7, #80	; 0x50
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40007000 	.word	0x40007000

080012a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012a6:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <MX_I2C1_Init+0x54>)
 80012a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012ac:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <MX_I2C1_Init+0x58>)
 80012ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012de:	f000 fd93 	bl	8001e08 <HAL_I2C_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e8:	f000 f890 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200001f8 	.word	0x200001f8
 80012f4:	40005400 	.word	0x40005400
 80012f8:	000186a0 	.word	0x000186a0

080012fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <MX_USART1_UART_Init+0x50>)
 8001304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001308:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800130c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001334:	f002 fc64 	bl	8003c00 <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800133e:	f000 f865 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000024c 	.word	0x2000024c
 800134c:	40011000 	.word	0x40011000

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_GPIO_Init+0x4c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a0f      	ldr	r2, [pc, #60]	; (800139c <MX_GPIO_Init+0x4c>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <MX_GPIO_Init+0x4c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_GPIO_Init+0x4c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <MX_GPIO_Init+0x4c>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_GPIO_Init+0x4c>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]

}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800

080013a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80013a0:	b5b0      	push	{r4, r5, r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	SHT30_read_temp_humidity(&sht, &temp, &rh);
 80013a8:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <StartDefaultTask+0x54>)
 80013aa:	4913      	ldr	r1, [pc, #76]	; (80013f8 <StartDefaultTask+0x58>)
 80013ac:	4813      	ldr	r0, [pc, #76]	; (80013fc <StartDefaultTask+0x5c>)
 80013ae:	f7ff fe23 	bl	8000ff8 <SHT30_read_temp_humidity>
	sprintf(msg, "temp: %.2f, rh: %.2f\n", temp, rh);
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <StartDefaultTask+0x58>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f8c6 	bl	8000548 <__aeabi_f2d>
 80013bc:	4604      	mov	r4, r0
 80013be:	460d      	mov	r5, r1
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <StartDefaultTask+0x54>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f8bf 	bl	8000548 <__aeabi_f2d>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	e9cd 2300 	strd	r2, r3, [sp]
 80013d2:	4622      	mov	r2, r4
 80013d4:	462b      	mov	r3, r5
 80013d6:	490a      	ldr	r1, [pc, #40]	; (8001400 <StartDefaultTask+0x60>)
 80013d8:	480a      	ldr	r0, [pc, #40]	; (8001404 <StartDefaultTask+0x64>)
 80013da:	f006 f9db 	bl	8007794 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 100);
 80013de:	2364      	movs	r3, #100	; 0x64
 80013e0:	2264      	movs	r2, #100	; 0x64
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <StartDefaultTask+0x64>)
 80013e4:	4808      	ldr	r0, [pc, #32]	; (8001408 <StartDefaultTask+0x68>)
 80013e6:	f002 fc58 	bl	8003c9a <HAL_UART_Transmit>
    osDelay(4000);
 80013ea:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80013ee:	f003 f8d9 	bl	80045a4 <osDelay>
	SHT30_read_temp_humidity(&sht, &temp, &rh);
 80013f2:	e7d9      	b.n	80013a8 <StartDefaultTask+0x8>
 80013f4:	200002fc 	.word	0x200002fc
 80013f8:	200002f8 	.word	0x200002f8
 80013fc:	20000000 	.word	0x20000000
 8001400:	08009c34 	.word	0x08009c34
 8001404:	20000294 	.word	0x20000294
 8001408:	2000024c 	.word	0x2000024c

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	e7fe      	b.n	8001414 <Error_Handler+0x8>
	...

08001418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_MspInit+0x54>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <HAL_MspInit+0x54>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_MspInit+0x54>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_MspInit+0x54>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <HAL_MspInit+0x54>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_MspInit+0x54>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	210f      	movs	r1, #15
 800145a:	f06f 0001 	mvn.w	r0, #1
 800145e:	f000 fb0e 	bl	8001a7e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800

08001470 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a19      	ldr	r2, [pc, #100]	; (80014f4 <HAL_I2C_MspInit+0x84>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d12b      	bne.n	80014ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_I2C_MspInit+0x88>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <HAL_I2C_MspInit+0x88>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_I2C_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ae:	23c0      	movs	r3, #192	; 0xc0
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b2:	2312      	movs	r3, #18
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014be:	2304      	movs	r3, #4
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	480c      	ldr	r0, [pc, #48]	; (80014fc <HAL_I2C_MspInit+0x8c>)
 80014ca:	f000 fb01 	bl	8001ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_I2C_MspInit+0x88>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <HAL_I2C_MspInit+0x88>)
 80014d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_I2C_MspInit+0x88>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40005400 	.word	0x40005400
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020400 	.word	0x40020400

08001500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a19      	ldr	r2, [pc, #100]	; (8001584 <HAL_UART_MspInit+0x84>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d12c      	bne.n	800157c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a17      	ldr	r2, [pc, #92]	; (8001588 <HAL_UART_MspInit+0x88>)
 800152c:	f043 0310 	orr.w	r3, r3, #16
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a10      	ldr	r2, [pc, #64]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800155a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800155e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800156c:	2307      	movs	r3, #7
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <HAL_UART_MspInit+0x8c>)
 8001578:	f000 faaa 	bl	8001ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	; 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40011000 	.word	0x40011000
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000

08001590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <NMI_Handler+0x4>

08001596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <HardFault_Handler+0x4>

0800159c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <MemManage_Handler+0x4>

080015a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <BusFault_Handler+0x4>

080015a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <UsageFault_Handler+0x4>

080015ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c0:	f000 f95c 	bl	800187c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015c4:	f004 fbfc 	bl	8005dc0 <xTaskGetSchedulerState>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d001      	beq.n	80015d2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015ce:	f005 f9e3 	bl	8006998 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
	return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_kill>:

int _kill(int pid, int sig)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015f0:	f006 f9d0 	bl	8007994 <__errno>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2216      	movs	r2, #22
 80015f8:	601a      	str	r2, [r3, #0]
	return -1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <_exit>:

void _exit (int status)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800160e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffe7 	bl	80015e6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001618:	e7fe      	b.n	8001618 <_exit+0x12>

0800161a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e00a      	b.n	8001642 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800162c:	f3af 8000 	nop.w
 8001630:	4601      	mov	r1, r0
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	60ba      	str	r2, [r7, #8]
 8001638:	b2ca      	uxtb	r2, r1
 800163a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3301      	adds	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	429a      	cmp	r2, r3
 8001648:	dbf0      	blt.n	800162c <_read+0x12>
	}

return len;
 800164a:	687b      	ldr	r3, [r7, #4]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e009      	b.n	800167a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	60ba      	str	r2, [r7, #8]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	dbf1      	blt.n	8001666 <_write+0x12>
	}
	return len;
 8001682:	687b      	ldr	r3, [r7, #4]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <_close>:

int _close(int file)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	return -1;
 8001694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b4:	605a      	str	r2, [r3, #4]
	return 0;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_isatty>:

int _isatty(int file)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	return 1;
 80016cc:	2301      	movs	r3, #1
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016da:	b480      	push	{r7}
 80016dc:	b085      	sub	sp, #20
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
	return 0;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016fc:	4a14      	ldr	r2, [pc, #80]	; (8001750 <_sbrk+0x5c>)
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <_sbrk+0x60>)
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <_sbrk+0x64>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <_sbrk+0x68>)
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	429a      	cmp	r2, r3
 8001722:	d207      	bcs.n	8001734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001724:	f006 f936 	bl	8007994 <__errno>
 8001728:	4603      	mov	r3, r0
 800172a:	220c      	movs	r2, #12
 800172c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001732:	e009      	b.n	8001748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <_sbrk+0x64>)
 8001744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20020000 	.word	0x20020000
 8001754:	00000400 	.word	0x00000400
 8001758:	20000300 	.word	0x20000300
 800175c:	20004da8 	.word	0x20004da8

08001760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <SystemInit+0x20>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176a:	4a05      	ldr	r2, [pc, #20]	; (8001780 <SystemInit+0x20>)
 800176c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800178a:	490e      	ldr	r1, [pc, #56]	; (80017c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800178c:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017a0:	4c0b      	ldr	r4, [pc, #44]	; (80017d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017ae:	f7ff ffd7 	bl	8001760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b2:	f006 f8f5 	bl	80079a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b6:	f7ff fc99 	bl	80010ec <main>
  bx  lr    
 80017ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80017c8:	0800a030 	.word	0x0800a030
  ldr r2, =_sbss
 80017cc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80017d0:	20004da4 	.word	0x20004da4

080017d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <HAL_Init+0x40>)
 80017e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <HAL_Init+0x40>)
 80017ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_Init+0x40>)
 80017fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f000 f931 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001806:	200f      	movs	r0, #15
 8001808:	f000 f808 	bl	800181c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180c:	f7ff fe04 	bl	8001418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00

0800181c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x54>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_InitTick+0x58>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f93b 	bl	8001ab6 <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e00e      	b.n	8001868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d80a      	bhi.n	8001866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001858:	f000 f911 	bl	8001a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <HAL_InitTick+0x5c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000004 	.word	0x20000004
 8001874:	2000000c 	.word	0x2000000c
 8001878:	20000008 	.word	0x20000008

0800187c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x20>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x24>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_IncTick+0x24>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	2000000c 	.word	0x2000000c
 80018a0:	20000304 	.word	0x20000304

080018a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_GetTick+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000304 	.word	0x20000304

080018bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff ffee 	bl	80018a4 <HAL_GetTick>
 80018c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018d4:	d005      	beq.n	80018e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_Delay+0x44>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018e2:	bf00      	nop
 80018e4:	f7ff ffde 	bl	80018a4 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d8f7      	bhi.n	80018e4 <HAL_Delay+0x28>
  {
  }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000000c 	.word	0x2000000c

08001904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001920:	4013      	ands	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800192c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001936:	4a04      	ldr	r2, [pc, #16]	; (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	60d3      	str	r3, [r2, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <__NVIC_GetPriorityGrouping+0x18>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	f003 0307 	and.w	r3, r3, #7
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	; (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
         );
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a48:	f7ff ff8e 	bl	8001968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff47 	bl	8001904 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff5c 	bl	800194c <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff8e 	bl	80019bc <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5d 	bl	8001968 <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffb0 	bl	8001a24 <SysTick_Config>
 8001ac4:	4603      	mov	r3, r0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	e16b      	b.n	8001dc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aec:	2201      	movs	r2, #1
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	f040 815a 	bne.w	8001dbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d005      	beq.n	8001b22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d130      	bne.n	8001b84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 0201 	and.w	r2, r3, #1
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d017      	beq.n	8001bc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d123      	bne.n	8001c14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	08da      	lsrs	r2, r3, #3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3208      	adds	r2, #8
 8001bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	08da      	lsrs	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3208      	adds	r2, #8
 8001c0e:	69b9      	ldr	r1, [r7, #24]
 8001c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0203 	and.w	r2, r3, #3
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80b4 	beq.w	8001dbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b60      	ldr	r3, [pc, #384]	; (8001ddc <HAL_GPIO_Init+0x30c>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a5f      	ldr	r2, [pc, #380]	; (8001ddc <HAL_GPIO_Init+0x30c>)
 8001c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
 8001c66:	4b5d      	ldr	r3, [pc, #372]	; (8001ddc <HAL_GPIO_Init+0x30c>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c72:	4a5b      	ldr	r2, [pc, #364]	; (8001de0 <HAL_GPIO_Init+0x310>)
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3302      	adds	r3, #2
 8001c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	220f      	movs	r2, #15
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a52      	ldr	r2, [pc, #328]	; (8001de4 <HAL_GPIO_Init+0x314>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d02b      	beq.n	8001cf6 <HAL_GPIO_Init+0x226>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a51      	ldr	r2, [pc, #324]	; (8001de8 <HAL_GPIO_Init+0x318>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d025      	beq.n	8001cf2 <HAL_GPIO_Init+0x222>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a50      	ldr	r2, [pc, #320]	; (8001dec <HAL_GPIO_Init+0x31c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01f      	beq.n	8001cee <HAL_GPIO_Init+0x21e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4f      	ldr	r2, [pc, #316]	; (8001df0 <HAL_GPIO_Init+0x320>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d019      	beq.n	8001cea <HAL_GPIO_Init+0x21a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4e      	ldr	r2, [pc, #312]	; (8001df4 <HAL_GPIO_Init+0x324>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0x216>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4d      	ldr	r2, [pc, #308]	; (8001df8 <HAL_GPIO_Init+0x328>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00d      	beq.n	8001ce2 <HAL_GPIO_Init+0x212>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4c      	ldr	r2, [pc, #304]	; (8001dfc <HAL_GPIO_Init+0x32c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <HAL_GPIO_Init+0x20e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4b      	ldr	r2, [pc, #300]	; (8001e00 <HAL_GPIO_Init+0x330>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <HAL_GPIO_Init+0x20a>
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	e00e      	b.n	8001cf8 <HAL_GPIO_Init+0x228>
 8001cda:	2308      	movs	r3, #8
 8001cdc:	e00c      	b.n	8001cf8 <HAL_GPIO_Init+0x228>
 8001cde:	2306      	movs	r3, #6
 8001ce0:	e00a      	b.n	8001cf8 <HAL_GPIO_Init+0x228>
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	e008      	b.n	8001cf8 <HAL_GPIO_Init+0x228>
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	e006      	b.n	8001cf8 <HAL_GPIO_Init+0x228>
 8001cea:	2303      	movs	r3, #3
 8001cec:	e004      	b.n	8001cf8 <HAL_GPIO_Init+0x228>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e002      	b.n	8001cf8 <HAL_GPIO_Init+0x228>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x228>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	f002 0203 	and.w	r2, r2, #3
 8001cfe:	0092      	lsls	r2, r2, #2
 8001d00:	4093      	lsls	r3, r2
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d08:	4935      	ldr	r1, [pc, #212]	; (8001de0 <HAL_GPIO_Init+0x310>)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d16:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <HAL_GPIO_Init+0x334>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d3a:	4a32      	ldr	r2, [pc, #200]	; (8001e04 <HAL_GPIO_Init+0x334>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d40:	4b30      	ldr	r3, [pc, #192]	; (8001e04 <HAL_GPIO_Init+0x334>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d64:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <HAL_GPIO_Init+0x334>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6a:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <HAL_GPIO_Init+0x334>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d8e:	4a1d      	ldr	r2, [pc, #116]	; (8001e04 <HAL_GPIO_Init+0x334>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d94:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <HAL_GPIO_Init+0x334>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db8:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <HAL_GPIO_Init+0x334>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b0f      	cmp	r3, #15
 8001dc8:	f67f ae90 	bls.w	8001aec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40013800 	.word	0x40013800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40020400 	.word	0x40020400
 8001dec:	40020800 	.word	0x40020800
 8001df0:	40020c00 	.word	0x40020c00
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40021400 	.word	0x40021400
 8001dfc:	40021800 	.word	0x40021800
 8001e00:	40021c00 	.word	0x40021c00
 8001e04:	40013c00 	.word	0x40013c00

08001e08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e12b      	b.n	8002072 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff fb1e 	bl	8001470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2224      	movs	r2, #36	; 0x24
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0201 	bic.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e6c:	f001 fea0 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 8001e70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4a81      	ldr	r2, [pc, #516]	; (800207c <HAL_I2C_Init+0x274>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d807      	bhi.n	8001e8c <HAL_I2C_Init+0x84>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4a80      	ldr	r2, [pc, #512]	; (8002080 <HAL_I2C_Init+0x278>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	bf94      	ite	ls
 8001e84:	2301      	movls	r3, #1
 8001e86:	2300      	movhi	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	e006      	b.n	8001e9a <HAL_I2C_Init+0x92>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4a7d      	ldr	r2, [pc, #500]	; (8002084 <HAL_I2C_Init+0x27c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	bf94      	ite	ls
 8001e94:	2301      	movls	r3, #1
 8001e96:	2300      	movhi	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e0e7      	b.n	8002072 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4a78      	ldr	r2, [pc, #480]	; (8002088 <HAL_I2C_Init+0x280>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0c9b      	lsrs	r3, r3, #18
 8001eac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4a6a      	ldr	r2, [pc, #424]	; (800207c <HAL_I2C_Init+0x274>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d802      	bhi.n	8001edc <HAL_I2C_Init+0xd4>
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	e009      	b.n	8001ef0 <HAL_I2C_Init+0xe8>
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	4a69      	ldr	r2, [pc, #420]	; (800208c <HAL_I2C_Init+0x284>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	099b      	lsrs	r3, r3, #6
 8001eee:	3301      	adds	r3, #1
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	495c      	ldr	r1, [pc, #368]	; (800207c <HAL_I2C_Init+0x274>)
 8001f0c:	428b      	cmp	r3, r1
 8001f0e:	d819      	bhi.n	8001f44 <HAL_I2C_Init+0x13c>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1e59      	subs	r1, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f1e:	1c59      	adds	r1, r3, #1
 8001f20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f24:	400b      	ands	r3, r1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00a      	beq.n	8001f40 <HAL_I2C_Init+0x138>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1e59      	subs	r1, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f38:	3301      	adds	r3, #1
 8001f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3e:	e051      	b.n	8001fe4 <HAL_I2C_Init+0x1dc>
 8001f40:	2304      	movs	r3, #4
 8001f42:	e04f      	b.n	8001fe4 <HAL_I2C_Init+0x1dc>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d111      	bne.n	8001f70 <HAL_I2C_Init+0x168>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1e58      	subs	r0, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6859      	ldr	r1, [r3, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	440b      	add	r3, r1
 8001f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf0c      	ite	eq
 8001f68:	2301      	moveq	r3, #1
 8001f6a:	2300      	movne	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	e012      	b.n	8001f96 <HAL_I2C_Init+0x18e>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e58      	subs	r0, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	0099      	lsls	r1, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f86:	3301      	adds	r3, #1
 8001f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf0c      	ite	eq
 8001f90:	2301      	moveq	r3, #1
 8001f92:	2300      	movne	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_I2C_Init+0x196>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e022      	b.n	8001fe4 <HAL_I2C_Init+0x1dc>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_I2C_Init+0x1bc>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1e58      	subs	r0, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6859      	ldr	r1, [r3, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	440b      	add	r3, r1
 8001fb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fc2:	e00f      	b.n	8001fe4 <HAL_I2C_Init+0x1dc>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1e58      	subs	r0, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	0099      	lsls	r1, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	6809      	ldr	r1, [r1, #0]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69da      	ldr	r2, [r3, #28]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002012:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6911      	ldr	r1, [r2, #16]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68d2      	ldr	r2, [r2, #12]
 800201e:	4311      	orrs	r1, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	430b      	orrs	r3, r1
 8002026:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	000186a0 	.word	0x000186a0
 8002080:	001e847f 	.word	0x001e847f
 8002084:	003d08ff 	.word	0x003d08ff
 8002088:	431bde83 	.word	0x431bde83
 800208c:	10624dd3 	.word	0x10624dd3

08002090 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	461a      	mov	r2, r3
 800209c:	460b      	mov	r3, r1
 800209e:	817b      	strh	r3, [r7, #10]
 80020a0:	4613      	mov	r3, r2
 80020a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff fbfe 	bl	80018a4 <HAL_GetTick>
 80020a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	f040 80e0 	bne.w	8002278 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2319      	movs	r3, #25
 80020be:	2201      	movs	r2, #1
 80020c0:	4970      	ldr	r1, [pc, #448]	; (8002284 <HAL_I2C_Master_Transmit+0x1f4>)
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 ff66 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020ce:	2302      	movs	r3, #2
 80020d0:	e0d3      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_I2C_Master_Transmit+0x50>
 80020dc:	2302      	movs	r3, #2
 80020de:	e0cc      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ea>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d007      	beq.n	8002106 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0201 	orr.w	r2, r2, #1
 8002104:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002114:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2221      	movs	r2, #33	; 0x21
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2210      	movs	r2, #16
 8002122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	893a      	ldrh	r2, [r7, #8]
 8002136:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4a50      	ldr	r2, [pc, #320]	; (8002288 <HAL_I2C_Master_Transmit+0x1f8>)
 8002146:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002148:	8979      	ldrh	r1, [r7, #10]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	6a3a      	ldr	r2, [r7, #32]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fce8 	bl	8002b24 <I2C_MasterRequestWrite>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e08d      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002174:	e066      	b.n	8002244 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	6a39      	ldr	r1, [r7, #32]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 ffe0 	bl	8003140 <I2C_WaitOnTXEFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00d      	beq.n	80021a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	2b04      	cmp	r3, #4
 800218c:	d107      	bne.n	800219e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e06b      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d11b      	bne.n	8002218 <HAL_I2C_Master_Transmit+0x188>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d017      	beq.n	8002218 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	781a      	ldrb	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	6a39      	ldr	r1, [r7, #32]
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 ffd0 	bl	80031c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00d      	beq.n	8002244 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	2b04      	cmp	r3, #4
 800222e:	d107      	bne.n	8002240 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e01a      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	2b00      	cmp	r3, #0
 800224a:	d194      	bne.n	8002176 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800225a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	e000      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002278:	2302      	movs	r3, #2
  }
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	00100002 	.word	0x00100002
 8002288:	ffff0000 	.word	0xffff0000

0800228c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08c      	sub	sp, #48	; 0x30
 8002290:	af02      	add	r7, sp, #8
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	461a      	mov	r2, r3
 8002298:	460b      	mov	r3, r1
 800229a:	817b      	strh	r3, [r7, #10]
 800229c:	4613      	mov	r3, r2
 800229e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022a0:	f7ff fb00 	bl	80018a4 <HAL_GetTick>
 80022a4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b20      	cmp	r3, #32
 80022b0:	f040 820b 	bne.w	80026ca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2319      	movs	r3, #25
 80022ba:	2201      	movs	r2, #1
 80022bc:	497c      	ldr	r1, [pc, #496]	; (80024b0 <HAL_I2C_Master_Receive+0x224>)
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 fe68 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80022ca:	2302      	movs	r3, #2
 80022cc:	e1fe      	b.n	80026cc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_I2C_Master_Receive+0x50>
 80022d8:	2302      	movs	r3, #2
 80022da:	e1f7      	b.n	80026cc <HAL_I2C_Master_Receive+0x440>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d007      	beq.n	8002302 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002310:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2222      	movs	r2, #34	; 0x22
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2210      	movs	r2, #16
 800231e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	893a      	ldrh	r2, [r7, #8]
 8002332:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4a5c      	ldr	r2, [pc, #368]	; (80024b4 <HAL_I2C_Master_Receive+0x228>)
 8002342:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002344:	8979      	ldrh	r1, [r7, #10]
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 fc6c 	bl	8002c28 <I2C_MasterRequestRead>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e1b8      	b.n	80026cc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235e:	2b00      	cmp	r3, #0
 8002360:	d113      	bne.n	800238a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	623b      	str	r3, [r7, #32]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	623b      	str	r3, [r7, #32]
 8002376:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e18c      	b.n	80026a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238e:	2b01      	cmp	r3, #1
 8002390:	d11b      	bne.n	80023ca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	e16c      	b.n	80026a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d11b      	bne.n	800240a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	e14c      	b.n	80026a4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002418:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002430:	e138      	b.n	80026a4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002436:	2b03      	cmp	r3, #3
 8002438:	f200 80f1 	bhi.w	800261e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002440:	2b01      	cmp	r3, #1
 8002442:	d123      	bne.n	800248c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002446:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fefb 	bl	8003244 <I2C_WaitOnRXNEFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e139      	b.n	80026cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691a      	ldr	r2, [r3, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	855a      	strh	r2, [r3, #42]	; 0x2a
 800248a:	e10b      	b.n	80026a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002490:	2b02      	cmp	r3, #2
 8002492:	d14e      	bne.n	8002532 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	2200      	movs	r2, #0
 800249c:	4906      	ldr	r1, [pc, #24]	; (80024b8 <HAL_I2C_Master_Receive+0x22c>)
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fd78 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e10e      	b.n	80026cc <HAL_I2C_Master_Receive+0x440>
 80024ae:	bf00      	nop
 80024b0:	00100002 	.word	0x00100002
 80024b4:	ffff0000 	.word	0xffff0000
 80024b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002526:	b29b      	uxth	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002530:	e0b8      	b.n	80026a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002538:	2200      	movs	r2, #0
 800253a:	4966      	ldr	r1, [pc, #408]	; (80026d4 <HAL_I2C_Master_Receive+0x448>)
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 fd29 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0bf      	b.n	80026cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800255a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002594:	2200      	movs	r2, #0
 8002596:	494f      	ldr	r1, [pc, #316]	; (80026d4 <HAL_I2C_Master_Receive+0x448>)
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 fcfb 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e091      	b.n	80026cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002612:	b29b      	uxth	r3, r3
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800261c:	e042      	b.n	80026a4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002620:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fe0e 	bl	8003244 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e04c      	b.n	80026cc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b04      	cmp	r3, #4
 8002670:	d118      	bne.n	80026a4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f47f aec2 	bne.w	8002432 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e000      	b.n	80026cc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
  }
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3728      	adds	r7, #40	; 0x28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	00010004 	.word	0x00010004

080026d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08c      	sub	sp, #48	; 0x30
 80026dc:	af02      	add	r7, sp, #8
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	4608      	mov	r0, r1
 80026e2:	4611      	mov	r1, r2
 80026e4:	461a      	mov	r2, r3
 80026e6:	4603      	mov	r3, r0
 80026e8:	817b      	strh	r3, [r7, #10]
 80026ea:	460b      	mov	r3, r1
 80026ec:	813b      	strh	r3, [r7, #8]
 80026ee:	4613      	mov	r3, r2
 80026f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026f2:	f7ff f8d7 	bl	80018a4 <HAL_GetTick>
 80026f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b20      	cmp	r3, #32
 8002702:	f040 8208 	bne.w	8002b16 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	2319      	movs	r3, #25
 800270c:	2201      	movs	r2, #1
 800270e:	497b      	ldr	r1, [pc, #492]	; (80028fc <HAL_I2C_Mem_Read+0x224>)
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 fc3f 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800271c:	2302      	movs	r3, #2
 800271e:	e1fb      	b.n	8002b18 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_I2C_Mem_Read+0x56>
 800272a:	2302      	movs	r3, #2
 800272c:	e1f4      	b.n	8002b18 <HAL_I2C_Mem_Read+0x440>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d007      	beq.n	8002754 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002762:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2222      	movs	r2, #34	; 0x22
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2240      	movs	r2, #64	; 0x40
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800277e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002784:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4a5b      	ldr	r2, [pc, #364]	; (8002900 <HAL_I2C_Mem_Read+0x228>)
 8002794:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002796:	88f8      	ldrh	r0, [r7, #6]
 8002798:	893a      	ldrh	r2, [r7, #8]
 800279a:	8979      	ldrh	r1, [r7, #10]
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	4603      	mov	r3, r0
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fb0c 	bl	8002dc4 <I2C_RequestMemoryRead>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e1b0      	b.n	8002b18 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d113      	bne.n	80027e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027be:	2300      	movs	r3, #0
 80027c0:	623b      	str	r3, [r7, #32]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	623b      	str	r3, [r7, #32]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	623b      	str	r3, [r7, #32]
 80027d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e184      	b.n	8002af0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d11b      	bne.n	8002826 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	e164      	b.n	8002af0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282a:	2b02      	cmp	r3, #2
 800282c:	d11b      	bne.n	8002866 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800283c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800284c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	e144      	b.n	8002af0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800287c:	e138      	b.n	8002af0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002882:	2b03      	cmp	r3, #3
 8002884:	f200 80f1 	bhi.w	8002a6a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	2b01      	cmp	r3, #1
 800288e:	d123      	bne.n	80028d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002892:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fcd5 	bl	8003244 <I2C_WaitOnRXNEFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e139      	b.n	8002b18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028d6:	e10b      	b.n	8002af0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d14e      	bne.n	800297e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e6:	2200      	movs	r2, #0
 80028e8:	4906      	ldr	r1, [pc, #24]	; (8002904 <HAL_I2C_Mem_Read+0x22c>)
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fb52 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e10e      	b.n	8002b18 <HAL_I2C_Mem_Read+0x440>
 80028fa:	bf00      	nop
 80028fc:	00100002 	.word	0x00100002
 8002900:	ffff0000 	.word	0xffff0000
 8002904:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002916:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800297c:	e0b8      	b.n	8002af0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002984:	2200      	movs	r2, #0
 8002986:	4966      	ldr	r1, [pc, #408]	; (8002b20 <HAL_I2C_Mem_Read+0x448>)
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 fb03 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0bf      	b.n	8002b18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	2200      	movs	r2, #0
 80029e2:	494f      	ldr	r1, [pc, #316]	; (8002b20 <HAL_I2C_Mem_Read+0x448>)
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 fad5 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e091      	b.n	8002b18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a68:	e042      	b.n	8002af0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 fbe8 	bl	8003244 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e04c      	b.n	8002b18 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d118      	bne.n	8002af0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f47f aec2 	bne.w	800287e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e000      	b.n	8002b18 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b16:	2302      	movs	r3, #2
  }
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3728      	adds	r7, #40	; 0x28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	00010004 	.word	0x00010004

08002b24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	460b      	mov	r3, r1
 8002b32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d006      	beq.n	8002b4e <I2C_MasterRequestWrite+0x2a>
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d003      	beq.n	8002b4e <I2C_MasterRequestWrite+0x2a>
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b4c:	d108      	bne.n	8002b60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e00b      	b.n	8002b78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	2b12      	cmp	r3, #18
 8002b66:	d107      	bne.n	8002b78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fa05 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00d      	beq.n	8002bac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b9e:	d103      	bne.n	8002ba8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e035      	b.n	8002c18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bb4:	d108      	bne.n	8002bc8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bb6:	897b      	ldrh	r3, [r7, #10]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bc4:	611a      	str	r2, [r3, #16]
 8002bc6:	e01b      	b.n	8002c00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bc8:	897b      	ldrh	r3, [r7, #10]
 8002bca:	11db      	asrs	r3, r3, #7
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f003 0306 	and.w	r3, r3, #6
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f063 030f 	orn	r3, r3, #15
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	490e      	ldr	r1, [pc, #56]	; (8002c20 <I2C_MasterRequestWrite+0xfc>)
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 fa2b 	bl	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e010      	b.n	8002c18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bf6:	897b      	ldrh	r3, [r7, #10]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	4907      	ldr	r1, [pc, #28]	; (8002c24 <I2C_MasterRequestWrite+0x100>)
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fa1b 	bl	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	00010008 	.word	0x00010008
 8002c24:	00010002 	.word	0x00010002

08002c28 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	460b      	mov	r3, r1
 8002c36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d006      	beq.n	8002c62 <I2C_MasterRequestRead+0x3a>
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d003      	beq.n	8002c62 <I2C_MasterRequestRead+0x3a>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c60:	d108      	bne.n	8002c74 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e00b      	b.n	8002c8c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	2b11      	cmp	r3, #17
 8002c7a:	d107      	bne.n	8002c8c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f97b 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00d      	beq.n	8002cc0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb2:	d103      	bne.n	8002cbc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e079      	b.n	8002db4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cc8:	d108      	bne.n	8002cdc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cca:	897b      	ldrh	r3, [r7, #10]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	611a      	str	r2, [r3, #16]
 8002cda:	e05f      	b.n	8002d9c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cdc:	897b      	ldrh	r3, [r7, #10]
 8002cde:	11db      	asrs	r3, r3, #7
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f003 0306 	and.w	r3, r3, #6
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f063 030f 	orn	r3, r3, #15
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4930      	ldr	r1, [pc, #192]	; (8002dbc <I2C_MasterRequestRead+0x194>)
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f9a1 	bl	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e054      	b.n	8002db4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d0a:	897b      	ldrh	r3, [r7, #10]
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4929      	ldr	r1, [pc, #164]	; (8002dc0 <I2C_MasterRequestRead+0x198>)
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f991 	bl	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e044      	b.n	8002db4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d4e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f919 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00d      	beq.n	8002d84 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d76:	d103      	bne.n	8002d80 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e017      	b.n	8002db4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002d84:	897b      	ldrh	r3, [r7, #10]
 8002d86:	11db      	asrs	r3, r3, #7
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f003 0306 	and.w	r3, r3, #6
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f063 030e 	orn	r3, r3, #14
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	4907      	ldr	r1, [pc, #28]	; (8002dc0 <I2C_MasterRequestRead+0x198>)
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f94d 	bl	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	00010008 	.word	0x00010008
 8002dc0:	00010002 	.word	0x00010002

08002dc4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	4608      	mov	r0, r1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	817b      	strh	r3, [r7, #10]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	813b      	strh	r3, [r7, #8]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f8c2 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00d      	beq.n	8002e32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e24:	d103      	bne.n	8002e2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e0aa      	b.n	8002f88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e32:	897b      	ldrh	r3, [r7, #10]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	6a3a      	ldr	r2, [r7, #32]
 8002e46:	4952      	ldr	r1, [pc, #328]	; (8002f90 <I2C_RequestMemoryRead+0x1cc>)
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f8fa 	bl	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e097      	b.n	8002f88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e70:	6a39      	ldr	r1, [r7, #32]
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f964 	bl	8003140 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00d      	beq.n	8002e9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d107      	bne.n	8002e96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e076      	b.n	8002f88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d105      	bne.n	8002eac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ea0:	893b      	ldrh	r3, [r7, #8]
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	611a      	str	r2, [r3, #16]
 8002eaa:	e021      	b.n	8002ef0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002eac:	893b      	ldrh	r3, [r7, #8]
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ebc:	6a39      	ldr	r1, [r7, #32]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f93e 	bl	8003140 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00d      	beq.n	8002ee6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d107      	bne.n	8002ee2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e050      	b.n	8002f88 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ee6:	893b      	ldrh	r3, [r7, #8]
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef2:	6a39      	ldr	r1, [r7, #32]
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f923 	bl	8003140 <I2C_WaitOnTXEFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00d      	beq.n	8002f1c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d107      	bne.n	8002f18 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f16:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e035      	b.n	8002f88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f82b 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00d      	beq.n	8002f60 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f52:	d103      	bne.n	8002f5c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e013      	b.n	8002f88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f60:	897b      	ldrh	r3, [r7, #10]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	6a3a      	ldr	r2, [r7, #32]
 8002f74:	4906      	ldr	r1, [pc, #24]	; (8002f90 <I2C_RequestMemoryRead+0x1cc>)
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f863 	bl	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	00010002 	.word	0x00010002

08002f94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa4:	e025      	b.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fac:	d021      	beq.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fae:	f7fe fc79 	bl	80018a4 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d302      	bcc.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d116      	bne.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f043 0220 	orr.w	r2, r3, #32
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e023      	b.n	800303a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	0c1b      	lsrs	r3, r3, #16
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d10d      	bne.n	8003018 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	43da      	mvns	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4013      	ands	r3, r2
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf0c      	ite	eq
 800300e:	2301      	moveq	r3, #1
 8003010:	2300      	movne	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	e00c      	b.n	8003032 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4013      	ands	r3, r2
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	bf0c      	ite	eq
 800302a:	2301      	moveq	r3, #1
 800302c:	2300      	movne	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	429a      	cmp	r2, r3
 8003036:	d0b6      	beq.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003050:	e051      	b.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003060:	d123      	bne.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003070:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800307a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f043 0204 	orr.w	r2, r3, #4
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e046      	b.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b0:	d021      	beq.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b2:	f7fe fbf7 	bl	80018a4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d302      	bcc.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d116      	bne.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f043 0220 	orr.w	r2, r3, #32
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e020      	b.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	0c1b      	lsrs	r3, r3, #16
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d10c      	bne.n	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4013      	ands	r3, r2
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	bf14      	ite	ne
 8003112:	2301      	movne	r3, #1
 8003114:	2300      	moveq	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	e00b      	b.n	8003132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	43da      	mvns	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	4013      	ands	r3, r2
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf14      	ite	ne
 800312c:	2301      	movne	r3, #1
 800312e:	2300      	moveq	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d18d      	bne.n	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800314c:	e02d      	b.n	80031aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f8ce 	bl	80032f0 <I2C_IsAcknowledgeFailed>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e02d      	b.n	80031ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003164:	d021      	beq.n	80031aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003166:	f7fe fb9d 	bl	80018a4 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	429a      	cmp	r2, r3
 8003174:	d302      	bcc.n	800317c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d116      	bne.n	80031aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f043 0220 	orr.w	r2, r3, #32
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e007      	b.n	80031ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b4:	2b80      	cmp	r3, #128	; 0x80
 80031b6:	d1ca      	bne.n	800314e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031ce:	e02d      	b.n	800322c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f88d 	bl	80032f0 <I2C_IsAcknowledgeFailed>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e02d      	b.n	800323c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031e6:	d021      	beq.n	800322c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e8:	f7fe fb5c 	bl	80018a4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d302      	bcc.n	80031fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d116      	bne.n	800322c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e007      	b.n	800323c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b04      	cmp	r3, #4
 8003238:	d1ca      	bne.n	80031d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003250:	e042      	b.n	80032d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b10      	cmp	r3, #16
 800325e:	d119      	bne.n	8003294 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0210 	mvn.w	r2, #16
 8003268:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e029      	b.n	80032e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003294:	f7fe fb06 	bl	80018a4 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d302      	bcc.n	80032aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d116      	bne.n	80032d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	f043 0220 	orr.w	r2, r3, #32
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e007      	b.n	80032e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d1b5      	bne.n	8003252 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003306:	d11b      	bne.n	8003340 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003310:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	f043 0204 	orr.w	r2, r3, #4
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e267      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d075      	beq.n	800345a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800336e:	4b88      	ldr	r3, [pc, #544]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b04      	cmp	r3, #4
 8003378:	d00c      	beq.n	8003394 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337a:	4b85      	ldr	r3, [pc, #532]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003382:	2b08      	cmp	r3, #8
 8003384:	d112      	bne.n	80033ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003386:	4b82      	ldr	r3, [pc, #520]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003392:	d10b      	bne.n	80033ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	4b7e      	ldr	r3, [pc, #504]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d05b      	beq.n	8003458 <HAL_RCC_OscConfig+0x108>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d157      	bne.n	8003458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e242      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d106      	bne.n	80033c4 <HAL_RCC_OscConfig+0x74>
 80033b6:	4b76      	ldr	r3, [pc, #472]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a75      	ldr	r2, [pc, #468]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e01d      	b.n	8003400 <HAL_RCC_OscConfig+0xb0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x98>
 80033ce:	4b70      	ldr	r3, [pc, #448]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6f      	ldr	r2, [pc, #444]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b6d      	ldr	r3, [pc, #436]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a6c      	ldr	r2, [pc, #432]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0xb0>
 80033e8:	4b69      	ldr	r3, [pc, #420]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a68      	ldr	r2, [pc, #416]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b66      	ldr	r3, [pc, #408]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a65      	ldr	r2, [pc, #404]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d013      	beq.n	8003430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe fa4c 	bl	80018a4 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003410:	f7fe fa48 	bl	80018a4 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	; 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e207      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	4b5b      	ldr	r3, [pc, #364]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0xc0>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe fa38 	bl	80018a4 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003438:	f7fe fa34 	bl	80018a4 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e1f3      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	4b51      	ldr	r3, [pc, #324]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0xe8>
 8003456:	e000      	b.n	800345a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d063      	beq.n	800352e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003466:	4b4a      	ldr	r3, [pc, #296]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00b      	beq.n	800348a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003472:	4b47      	ldr	r3, [pc, #284]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800347a:	2b08      	cmp	r3, #8
 800347c:	d11c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347e:	4b44      	ldr	r3, [pc, #272]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d116      	bne.n	80034b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348a:	4b41      	ldr	r3, [pc, #260]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_RCC_OscConfig+0x152>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d001      	beq.n	80034a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e1c7      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a2:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4937      	ldr	r1, [pc, #220]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b6:	e03a      	b.n	800352e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d020      	beq.n	8003502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c0:	4b34      	ldr	r3, [pc, #208]	; (8003594 <HAL_RCC_OscConfig+0x244>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fe f9ed 	bl	80018a4 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ce:	f7fe f9e9 	bl	80018a4 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e1a8      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e0:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ec:	4b28      	ldr	r3, [pc, #160]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4925      	ldr	r1, [pc, #148]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]
 8003500:	e015      	b.n	800352e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_RCC_OscConfig+0x244>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fe f9cc 	bl	80018a4 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003510:	f7fe f9c8 	bl	80018a4 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e187      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d036      	beq.n	80035a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d016      	beq.n	8003570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003542:	4b15      	ldr	r3, [pc, #84]	; (8003598 <HAL_RCC_OscConfig+0x248>)
 8003544:	2201      	movs	r2, #1
 8003546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7fe f9ac 	bl	80018a4 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003550:	f7fe f9a8 	bl	80018a4 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e167      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0x200>
 800356e:	e01b      	b.n	80035a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003570:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_RCC_OscConfig+0x248>)
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003576:	f7fe f995 	bl	80018a4 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800357c:	e00e      	b.n	800359c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800357e:	f7fe f991 	bl	80018a4 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d907      	bls.n	800359c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e150      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
 8003590:	40023800 	.word	0x40023800
 8003594:	42470000 	.word	0x42470000
 8003598:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800359c:	4b88      	ldr	r3, [pc, #544]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800359e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1ea      	bne.n	800357e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 8097 	beq.w	80036e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b6:	2300      	movs	r3, #0
 80035b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ba:	4b81      	ldr	r3, [pc, #516]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10f      	bne.n	80035e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	4b7d      	ldr	r3, [pc, #500]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	4a7c      	ldr	r2, [pc, #496]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d4:	6413      	str	r3, [r2, #64]	; 0x40
 80035d6:	4b7a      	ldr	r3, [pc, #488]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e2:	2301      	movs	r3, #1
 80035e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e6:	4b77      	ldr	r3, [pc, #476]	; (80037c4 <HAL_RCC_OscConfig+0x474>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d118      	bne.n	8003624 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f2:	4b74      	ldr	r3, [pc, #464]	; (80037c4 <HAL_RCC_OscConfig+0x474>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a73      	ldr	r2, [pc, #460]	; (80037c4 <HAL_RCC_OscConfig+0x474>)
 80035f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fe:	f7fe f951 	bl	80018a4 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003606:	f7fe f94d 	bl	80018a4 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e10c      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	4b6a      	ldr	r3, [pc, #424]	; (80037c4 <HAL_RCC_OscConfig+0x474>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d106      	bne.n	800363a <HAL_RCC_OscConfig+0x2ea>
 800362c:	4b64      	ldr	r3, [pc, #400]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800362e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003630:	4a63      	ldr	r2, [pc, #396]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6713      	str	r3, [r2, #112]	; 0x70
 8003638:	e01c      	b.n	8003674 <HAL_RCC_OscConfig+0x324>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b05      	cmp	r3, #5
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x30c>
 8003642:	4b5f      	ldr	r3, [pc, #380]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	4a5e      	ldr	r2, [pc, #376]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	6713      	str	r3, [r2, #112]	; 0x70
 800364e:	4b5c      	ldr	r3, [pc, #368]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	4a5b      	ldr	r2, [pc, #364]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	6713      	str	r3, [r2, #112]	; 0x70
 800365a:	e00b      	b.n	8003674 <HAL_RCC_OscConfig+0x324>
 800365c:	4b58      	ldr	r3, [pc, #352]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	4a57      	ldr	r2, [pc, #348]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	6713      	str	r3, [r2, #112]	; 0x70
 8003668:	4b55      	ldr	r3, [pc, #340]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4a54      	ldr	r2, [pc, #336]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800366e:	f023 0304 	bic.w	r3, r3, #4
 8003672:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d015      	beq.n	80036a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367c:	f7fe f912 	bl	80018a4 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003682:	e00a      	b.n	800369a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003684:	f7fe f90e 	bl	80018a4 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e0cb      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369a:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0ee      	beq.n	8003684 <HAL_RCC_OscConfig+0x334>
 80036a6:	e014      	b.n	80036d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a8:	f7fe f8fc 	bl	80018a4 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b0:	f7fe f8f8 	bl	80018a4 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0b5      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c6:	4b3e      	ldr	r3, [pc, #248]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1ee      	bne.n	80036b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d105      	bne.n	80036e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d8:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	4a38      	ldr	r2, [pc, #224]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 80a1 	beq.w	8003830 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ee:	4b34      	ldr	r3, [pc, #208]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d05c      	beq.n	80037b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d141      	bne.n	8003786 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <HAL_RCC_OscConfig+0x478>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7fe f8cc 	bl	80018a4 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003710:	f7fe f8c8 	bl	80018a4 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e087      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	019b      	lsls	r3, r3, #6
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	3b01      	subs	r3, #1
 8003748:	041b      	lsls	r3, r3, #16
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	061b      	lsls	r3, r3, #24
 8003752:	491b      	ldr	r1, [pc, #108]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <HAL_RCC_OscConfig+0x478>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fe f8a1 	bl	80018a4 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003766:	f7fe f89d 	bl	80018a4 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e05c      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x416>
 8003784:	e054      	b.n	8003830 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <HAL_RCC_OscConfig+0x478>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe f88a 	bl	80018a4 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe f886 	bl	80018a4 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e045      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x444>
 80037b2:	e03d      	b.n	8003830 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e038      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40007000 	.word	0x40007000
 80037c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_RCC_OscConfig+0x4ec>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d028      	beq.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d121      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d11a      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037fc:	4013      	ands	r3, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003802:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003804:	4293      	cmp	r3, r2
 8003806:	d111      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	085b      	lsrs	r3, r3, #1
 8003814:	3b01      	subs	r3, #1
 8003816:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d107      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800

08003840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0cc      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003854:	4b68      	ldr	r3, [pc, #416]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d90c      	bls.n	800387c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b65      	ldr	r3, [pc, #404]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b63      	ldr	r3, [pc, #396]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0b8      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003894:	4b59      	ldr	r3, [pc, #356]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a58      	ldr	r2, [pc, #352]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800389e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ac:	4b53      	ldr	r3, [pc, #332]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4a52      	ldr	r2, [pc, #328]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b8:	4b50      	ldr	r3, [pc, #320]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	494d      	ldr	r1, [pc, #308]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d044      	beq.n	8003960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b47      	ldr	r3, [pc, #284]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d119      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e07f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d003      	beq.n	80038fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fe:	4b3f      	ldr	r3, [pc, #252]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e06f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390e:	4b3b      	ldr	r3, [pc, #236]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e067      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800391e:	4b37      	ldr	r3, [pc, #220]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f023 0203 	bic.w	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4934      	ldr	r1, [pc, #208]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003930:	f7fd ffb8 	bl	80018a4 <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	e00a      	b.n	800394e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003938:	f7fd ffb4 	bl	80018a4 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	; 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e04f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 020c 	and.w	r2, r3, #12
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	429a      	cmp	r2, r3
 800395e:	d1eb      	bne.n	8003938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003960:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d20c      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396e:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e032      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4916      	ldr	r1, [pc, #88]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b2:	4b12      	ldr	r3, [pc, #72]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	490e      	ldr	r1, [pc, #56]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039c6:	f000 f821 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80039ca:	4602      	mov	r2, r0
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	490a      	ldr	r1, [pc, #40]	; (8003a00 <HAL_RCC_ClockConfig+0x1c0>)
 80039d8:	5ccb      	ldrb	r3, [r1, r3]
 80039da:	fa22 f303 	lsr.w	r3, r2, r3
 80039de:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fd ff18 	bl	800181c <HAL_InitTick>

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023c00 	.word	0x40023c00
 80039fc:	40023800 	.word	0x40023800
 8003a00:	08009c94 	.word	0x08009c94
 8003a04:	20000004 	.word	0x20000004
 8003a08:	20000008 	.word	0x20000008

08003a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a10:	b090      	sub	sp, #64	; 0x40
 8003a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	637b      	str	r3, [r7, #52]	; 0x34
 8003a18:	2300      	movs	r3, #0
 8003a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a24:	4b59      	ldr	r3, [pc, #356]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d00d      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x40>
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	f200 80a1 	bhi.w	8003b78 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0x34>
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a3e:	e09b      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a40:	4b53      	ldr	r3, [pc, #332]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a42:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a44:	e09b      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a46:	4b53      	ldr	r3, [pc, #332]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a4a:	e098      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a4c:	4b4f      	ldr	r3, [pc, #316]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a56:	4b4d      	ldr	r3, [pc, #308]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d028      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a62:	4b4a      	ldr	r3, [pc, #296]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	099b      	lsrs	r3, r3, #6
 8003a68:	2200      	movs	r2, #0
 8003a6a:	623b      	str	r3, [r7, #32]
 8003a6c:	627a      	str	r2, [r7, #36]	; 0x24
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a74:	2100      	movs	r1, #0
 8003a76:	4b47      	ldr	r3, [pc, #284]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a78:	fb03 f201 	mul.w	r2, r3, r1
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	fb00 f303 	mul.w	r3, r0, r3
 8003a82:	4413      	add	r3, r2
 8003a84:	4a43      	ldr	r2, [pc, #268]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a86:	fba0 1202 	umull	r1, r2, r0, r2
 8003a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a8c:	460a      	mov	r2, r1
 8003a8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a92:	4413      	add	r3, r2
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a98:	2200      	movs	r2, #0
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	61fa      	str	r2, [r7, #28]
 8003a9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aa2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003aa6:	f7fd f87f 	bl	8000ba8 <__aeabi_uldivmod>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4613      	mov	r3, r2
 8003ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab2:	e053      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab4:	4b35      	ldr	r3, [pc, #212]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	099b      	lsrs	r3, r3, #6
 8003aba:	2200      	movs	r2, #0
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	617a      	str	r2, [r7, #20]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ac6:	f04f 0b00 	mov.w	fp, #0
 8003aca:	4652      	mov	r2, sl
 8003acc:	465b      	mov	r3, fp
 8003ace:	f04f 0000 	mov.w	r0, #0
 8003ad2:	f04f 0100 	mov.w	r1, #0
 8003ad6:	0159      	lsls	r1, r3, #5
 8003ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003adc:	0150      	lsls	r0, r2, #5
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	ebb2 080a 	subs.w	r8, r2, sl
 8003ae6:	eb63 090b 	sbc.w	r9, r3, fp
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003af6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003afa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003afe:	ebb2 0408 	subs.w	r4, r2, r8
 8003b02:	eb63 0509 	sbc.w	r5, r3, r9
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	00eb      	lsls	r3, r5, #3
 8003b10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b14:	00e2      	lsls	r2, r4, #3
 8003b16:	4614      	mov	r4, r2
 8003b18:	461d      	mov	r5, r3
 8003b1a:	eb14 030a 	adds.w	r3, r4, sl
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	eb45 030b 	adc.w	r3, r5, fp
 8003b24:	607b      	str	r3, [r7, #4]
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b32:	4629      	mov	r1, r5
 8003b34:	028b      	lsls	r3, r1, #10
 8003b36:	4621      	mov	r1, r4
 8003b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	028a      	lsls	r2, r1, #10
 8003b40:	4610      	mov	r0, r2
 8003b42:	4619      	mov	r1, r3
 8003b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b46:	2200      	movs	r2, #0
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	60fa      	str	r2, [r7, #12]
 8003b4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b50:	f7fd f82a 	bl	8000ba8 <__aeabi_uldivmod>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4613      	mov	r3, r2
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	3301      	adds	r3, #1
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b76:	e002      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b7a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3740      	adds	r7, #64	; 0x40
 8003b84:	46bd      	mov	sp, r7
 8003b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	00f42400 	.word	0x00f42400
 8003b94:	017d7840 	.word	0x017d7840

08003b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_RCC_GetHCLKFreq+0x14>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000004 	.word	0x20000004

08003bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bb4:	f7ff fff0 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	0a9b      	lsrs	r3, r3, #10
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	4903      	ldr	r1, [pc, #12]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc6:	5ccb      	ldrb	r3, [r1, r3]
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	08009ca4 	.word	0x08009ca4

08003bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bdc:	f7ff ffdc 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0b5b      	lsrs	r3, r3, #13
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4903      	ldr	r1, [pc, #12]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	08009ca4 	.word	0x08009ca4

08003c00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e03f      	b.n	8003c92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd fc6a 	bl	8001500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2224      	movs	r2, #36	; 0x24
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f929 	bl	8003e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b08a      	sub	sp, #40	; 0x28
 8003c9e:	af02      	add	r7, sp, #8
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	603b      	str	r3, [r7, #0]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	d17c      	bne.n	8003db4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <HAL_UART_Transmit+0x2c>
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e075      	b.n	8003db6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_UART_Transmit+0x3e>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e06e      	b.n	8003db6 <HAL_UART_Transmit+0x11c>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2221      	movs	r2, #33	; 0x21
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cee:	f7fd fdd9 	bl	80018a4 <HAL_GetTick>
 8003cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	88fa      	ldrh	r2, [r7, #6]
 8003cfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d08:	d108      	bne.n	8003d1c <HAL_UART_Transmit+0x82>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d104      	bne.n	8003d1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	e003      	b.n	8003d24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d2c:	e02a      	b.n	8003d84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2200      	movs	r2, #0
 8003d36:	2180      	movs	r1, #128	; 0x80
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f840 	bl	8003dbe <UART_WaitOnFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e036      	b.n	8003db6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10b      	bne.n	8003d66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	3302      	adds	r3, #2
 8003d62:	61bb      	str	r3, [r7, #24]
 8003d64:	e007      	b.n	8003d76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	3301      	adds	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1cf      	bne.n	8003d2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2200      	movs	r2, #0
 8003d96:	2140      	movs	r1, #64	; 0x40
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f810 	bl	8003dbe <UART_WaitOnFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e006      	b.n	8003db6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	e000      	b.n	8003db6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
  }
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b090      	sub	sp, #64	; 0x40
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	603b      	str	r3, [r7, #0]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dce:	e050      	b.n	8003e72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dd6:	d04c      	beq.n	8003e72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d007      	beq.n	8003dee <UART_WaitOnFlagUntilTimeout+0x30>
 8003dde:	f7fd fd61 	bl	80018a4 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d241      	bcs.n	8003e72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e0e:	637a      	str	r2, [r7, #52]	; 0x34
 8003e10:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e5      	bne.n	8003dee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3314      	adds	r3, #20
 8003e28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	613b      	str	r3, [r7, #16]
   return(result);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e42:	623a      	str	r2, [r7, #32]
 8003e44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	69f9      	ldr	r1, [r7, #28]
 8003e48:	6a3a      	ldr	r2, [r7, #32]
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1e5      	bne.n	8003e22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e00f      	b.n	8003e92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	bf0c      	ite	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	2300      	movne	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d09f      	beq.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3740      	adds	r7, #64	; 0x40
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea0:	b0c0      	sub	sp, #256	; 0x100
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb8:	68d9      	ldr	r1, [r3, #12]
 8003eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	ea40 0301 	orr.w	r3, r0, r1
 8003ec4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ef4:	f021 010c 	bic.w	r1, r1, #12
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f02:	430b      	orrs	r3, r1
 8003f04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f16:	6999      	ldr	r1, [r3, #24]
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	ea40 0301 	orr.w	r3, r0, r1
 8003f22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4b8f      	ldr	r3, [pc, #572]	; (8004168 <UART_SetConfig+0x2cc>)
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d005      	beq.n	8003f3c <UART_SetConfig+0xa0>
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4b8d      	ldr	r3, [pc, #564]	; (800416c <UART_SetConfig+0x2d0>)
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d104      	bne.n	8003f46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f3c:	f7ff fe4c 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 8003f40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f44:	e003      	b.n	8003f4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f46:	f7ff fe33 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 8003f4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f58:	f040 810c 	bne.w	8004174 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f60:	2200      	movs	r2, #0
 8003f62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f6e:	4622      	mov	r2, r4
 8003f70:	462b      	mov	r3, r5
 8003f72:	1891      	adds	r1, r2, r2
 8003f74:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f76:	415b      	adcs	r3, r3
 8003f78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f7e:	4621      	mov	r1, r4
 8003f80:	eb12 0801 	adds.w	r8, r2, r1
 8003f84:	4629      	mov	r1, r5
 8003f86:	eb43 0901 	adc.w	r9, r3, r1
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f9e:	4690      	mov	r8, r2
 8003fa0:	4699      	mov	r9, r3
 8003fa2:	4623      	mov	r3, r4
 8003fa4:	eb18 0303 	adds.w	r3, r8, r3
 8003fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fac:	462b      	mov	r3, r5
 8003fae:	eb49 0303 	adc.w	r3, r9, r3
 8003fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fca:	460b      	mov	r3, r1
 8003fcc:	18db      	adds	r3, r3, r3
 8003fce:	653b      	str	r3, [r7, #80]	; 0x50
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	eb42 0303 	adc.w	r3, r2, r3
 8003fd6:	657b      	str	r3, [r7, #84]	; 0x54
 8003fd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fe0:	f7fc fde2 	bl	8000ba8 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4b61      	ldr	r3, [pc, #388]	; (8004170 <UART_SetConfig+0x2d4>)
 8003fea:	fba3 2302 	umull	r2, r3, r3, r2
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	011c      	lsls	r4, r3, #4
 8003ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ffc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004000:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004004:	4642      	mov	r2, r8
 8004006:	464b      	mov	r3, r9
 8004008:	1891      	adds	r1, r2, r2
 800400a:	64b9      	str	r1, [r7, #72]	; 0x48
 800400c:	415b      	adcs	r3, r3
 800400e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004010:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004014:	4641      	mov	r1, r8
 8004016:	eb12 0a01 	adds.w	sl, r2, r1
 800401a:	4649      	mov	r1, r9
 800401c:	eb43 0b01 	adc.w	fp, r3, r1
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800402c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004034:	4692      	mov	sl, r2
 8004036:	469b      	mov	fp, r3
 8004038:	4643      	mov	r3, r8
 800403a:	eb1a 0303 	adds.w	r3, sl, r3
 800403e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004042:	464b      	mov	r3, r9
 8004044:	eb4b 0303 	adc.w	r3, fp, r3
 8004048:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004058:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800405c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004060:	460b      	mov	r3, r1
 8004062:	18db      	adds	r3, r3, r3
 8004064:	643b      	str	r3, [r7, #64]	; 0x40
 8004066:	4613      	mov	r3, r2
 8004068:	eb42 0303 	adc.w	r3, r2, r3
 800406c:	647b      	str	r3, [r7, #68]	; 0x44
 800406e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004072:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004076:	f7fc fd97 	bl	8000ba8 <__aeabi_uldivmod>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4611      	mov	r1, r2
 8004080:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <UART_SetConfig+0x2d4>)
 8004082:	fba3 2301 	umull	r2, r3, r3, r1
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	2264      	movs	r2, #100	; 0x64
 800408a:	fb02 f303 	mul.w	r3, r2, r3
 800408e:	1acb      	subs	r3, r1, r3
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004096:	4b36      	ldr	r3, [pc, #216]	; (8004170 <UART_SetConfig+0x2d4>)
 8004098:	fba3 2302 	umull	r2, r3, r3, r2
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040a4:	441c      	add	r4, r3
 80040a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040b8:	4642      	mov	r2, r8
 80040ba:	464b      	mov	r3, r9
 80040bc:	1891      	adds	r1, r2, r2
 80040be:	63b9      	str	r1, [r7, #56]	; 0x38
 80040c0:	415b      	adcs	r3, r3
 80040c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040c8:	4641      	mov	r1, r8
 80040ca:	1851      	adds	r1, r2, r1
 80040cc:	6339      	str	r1, [r7, #48]	; 0x30
 80040ce:	4649      	mov	r1, r9
 80040d0:	414b      	adcs	r3, r1
 80040d2:	637b      	str	r3, [r7, #52]	; 0x34
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040e0:	4659      	mov	r1, fp
 80040e2:	00cb      	lsls	r3, r1, #3
 80040e4:	4651      	mov	r1, sl
 80040e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ea:	4651      	mov	r1, sl
 80040ec:	00ca      	lsls	r2, r1, #3
 80040ee:	4610      	mov	r0, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	4642      	mov	r2, r8
 80040f6:	189b      	adds	r3, r3, r2
 80040f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040fc:	464b      	mov	r3, r9
 80040fe:	460a      	mov	r2, r1
 8004100:	eb42 0303 	adc.w	r3, r2, r3
 8004104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004114:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004118:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800411c:	460b      	mov	r3, r1
 800411e:	18db      	adds	r3, r3, r3
 8004120:	62bb      	str	r3, [r7, #40]	; 0x28
 8004122:	4613      	mov	r3, r2
 8004124:	eb42 0303 	adc.w	r3, r2, r3
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800412a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800412e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004132:	f7fc fd39 	bl	8000ba8 <__aeabi_uldivmod>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <UART_SetConfig+0x2d4>)
 800413c:	fba3 1302 	umull	r1, r3, r3, r2
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	2164      	movs	r1, #100	; 0x64
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	3332      	adds	r3, #50	; 0x32
 800414e:	4a08      	ldr	r2, [pc, #32]	; (8004170 <UART_SetConfig+0x2d4>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	f003 0207 	and.w	r2, r3, #7
 800415a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4422      	add	r2, r4
 8004162:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004164:	e106      	b.n	8004374 <UART_SetConfig+0x4d8>
 8004166:	bf00      	nop
 8004168:	40011000 	.word	0x40011000
 800416c:	40011400 	.word	0x40011400
 8004170:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004178:	2200      	movs	r2, #0
 800417a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800417e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004182:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004186:	4642      	mov	r2, r8
 8004188:	464b      	mov	r3, r9
 800418a:	1891      	adds	r1, r2, r2
 800418c:	6239      	str	r1, [r7, #32]
 800418e:	415b      	adcs	r3, r3
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
 8004192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004196:	4641      	mov	r1, r8
 8004198:	1854      	adds	r4, r2, r1
 800419a:	4649      	mov	r1, r9
 800419c:	eb43 0501 	adc.w	r5, r3, r1
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	00eb      	lsls	r3, r5, #3
 80041aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ae:	00e2      	lsls	r2, r4, #3
 80041b0:	4614      	mov	r4, r2
 80041b2:	461d      	mov	r5, r3
 80041b4:	4643      	mov	r3, r8
 80041b6:	18e3      	adds	r3, r4, r3
 80041b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041bc:	464b      	mov	r3, r9
 80041be:	eb45 0303 	adc.w	r3, r5, r3
 80041c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041e2:	4629      	mov	r1, r5
 80041e4:	008b      	lsls	r3, r1, #2
 80041e6:	4621      	mov	r1, r4
 80041e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ec:	4621      	mov	r1, r4
 80041ee:	008a      	lsls	r2, r1, #2
 80041f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041f4:	f7fc fcd8 	bl	8000ba8 <__aeabi_uldivmod>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4b60      	ldr	r3, [pc, #384]	; (8004380 <UART_SetConfig+0x4e4>)
 80041fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	011c      	lsls	r4, r3, #4
 8004206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800420a:	2200      	movs	r2, #0
 800420c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004210:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004214:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004218:	4642      	mov	r2, r8
 800421a:	464b      	mov	r3, r9
 800421c:	1891      	adds	r1, r2, r2
 800421e:	61b9      	str	r1, [r7, #24]
 8004220:	415b      	adcs	r3, r3
 8004222:	61fb      	str	r3, [r7, #28]
 8004224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004228:	4641      	mov	r1, r8
 800422a:	1851      	adds	r1, r2, r1
 800422c:	6139      	str	r1, [r7, #16]
 800422e:	4649      	mov	r1, r9
 8004230:	414b      	adcs	r3, r1
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004240:	4659      	mov	r1, fp
 8004242:	00cb      	lsls	r3, r1, #3
 8004244:	4651      	mov	r1, sl
 8004246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800424a:	4651      	mov	r1, sl
 800424c:	00ca      	lsls	r2, r1, #3
 800424e:	4610      	mov	r0, r2
 8004250:	4619      	mov	r1, r3
 8004252:	4603      	mov	r3, r0
 8004254:	4642      	mov	r2, r8
 8004256:	189b      	adds	r3, r3, r2
 8004258:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800425c:	464b      	mov	r3, r9
 800425e:	460a      	mov	r2, r1
 8004260:	eb42 0303 	adc.w	r3, r2, r3
 8004264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	67bb      	str	r3, [r7, #120]	; 0x78
 8004272:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004280:	4649      	mov	r1, r9
 8004282:	008b      	lsls	r3, r1, #2
 8004284:	4641      	mov	r1, r8
 8004286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800428a:	4641      	mov	r1, r8
 800428c:	008a      	lsls	r2, r1, #2
 800428e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004292:	f7fc fc89 	bl	8000ba8 <__aeabi_uldivmod>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4611      	mov	r1, r2
 800429c:	4b38      	ldr	r3, [pc, #224]	; (8004380 <UART_SetConfig+0x4e4>)
 800429e:	fba3 2301 	umull	r2, r3, r3, r1
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2264      	movs	r2, #100	; 0x64
 80042a6:	fb02 f303 	mul.w	r3, r2, r3
 80042aa:	1acb      	subs	r3, r1, r3
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	3332      	adds	r3, #50	; 0x32
 80042b0:	4a33      	ldr	r2, [pc, #204]	; (8004380 <UART_SetConfig+0x4e4>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042bc:	441c      	add	r4, r3
 80042be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c2:	2200      	movs	r2, #0
 80042c4:	673b      	str	r3, [r7, #112]	; 0x70
 80042c6:	677a      	str	r2, [r7, #116]	; 0x74
 80042c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042cc:	4642      	mov	r2, r8
 80042ce:	464b      	mov	r3, r9
 80042d0:	1891      	adds	r1, r2, r2
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	415b      	adcs	r3, r3
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042dc:	4641      	mov	r1, r8
 80042de:	1851      	adds	r1, r2, r1
 80042e0:	6039      	str	r1, [r7, #0]
 80042e2:	4649      	mov	r1, r9
 80042e4:	414b      	adcs	r3, r1
 80042e6:	607b      	str	r3, [r7, #4]
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042f4:	4659      	mov	r1, fp
 80042f6:	00cb      	lsls	r3, r1, #3
 80042f8:	4651      	mov	r1, sl
 80042fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042fe:	4651      	mov	r1, sl
 8004300:	00ca      	lsls	r2, r1, #3
 8004302:	4610      	mov	r0, r2
 8004304:	4619      	mov	r1, r3
 8004306:	4603      	mov	r3, r0
 8004308:	4642      	mov	r2, r8
 800430a:	189b      	adds	r3, r3, r2
 800430c:	66bb      	str	r3, [r7, #104]	; 0x68
 800430e:	464b      	mov	r3, r9
 8004310:	460a      	mov	r2, r1
 8004312:	eb42 0303 	adc.w	r3, r2, r3
 8004316:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	663b      	str	r3, [r7, #96]	; 0x60
 8004322:	667a      	str	r2, [r7, #100]	; 0x64
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004330:	4649      	mov	r1, r9
 8004332:	008b      	lsls	r3, r1, #2
 8004334:	4641      	mov	r1, r8
 8004336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800433a:	4641      	mov	r1, r8
 800433c:	008a      	lsls	r2, r1, #2
 800433e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004342:	f7fc fc31 	bl	8000ba8 <__aeabi_uldivmod>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <UART_SetConfig+0x4e4>)
 800434c:	fba3 1302 	umull	r1, r3, r3, r2
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	2164      	movs	r1, #100	; 0x64
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	3332      	adds	r3, #50	; 0x32
 800435e:	4a08      	ldr	r2, [pc, #32]	; (8004380 <UART_SetConfig+0x4e4>)
 8004360:	fba2 2303 	umull	r2, r3, r2, r3
 8004364:	095b      	lsrs	r3, r3, #5
 8004366:	f003 020f 	and.w	r2, r3, #15
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4422      	add	r2, r4
 8004372:	609a      	str	r2, [r3, #8]
}
 8004374:	bf00      	nop
 8004376:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800437a:	46bd      	mov	sp, r7
 800437c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004380:	51eb851f 	.word	0x51eb851f

08004384 <__NVIC_SetPriority>:
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	6039      	str	r1, [r7, #0]
 800438e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004394:	2b00      	cmp	r3, #0
 8004396:	db0a      	blt.n	80043ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	490c      	ldr	r1, [pc, #48]	; (80043d0 <__NVIC_SetPriority+0x4c>)
 800439e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a2:	0112      	lsls	r2, r2, #4
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	440b      	add	r3, r1
 80043a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043ac:	e00a      	b.n	80043c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	4908      	ldr	r1, [pc, #32]	; (80043d4 <__NVIC_SetPriority+0x50>)
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	3b04      	subs	r3, #4
 80043bc:	0112      	lsls	r2, r2, #4
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	440b      	add	r3, r1
 80043c2:	761a      	strb	r2, [r3, #24]
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	e000e100 	.word	0xe000e100
 80043d4:	e000ed00 	.word	0xe000ed00

080043d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80043dc:	2100      	movs	r1, #0
 80043de:	f06f 0004 	mvn.w	r0, #4
 80043e2:	f7ff ffcf 	bl	8004384 <__NVIC_SetPriority>
#endif
}
 80043e6:	bf00      	nop
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043f2:	f3ef 8305 	mrs	r3, IPSR
 80043f6:	603b      	str	r3, [r7, #0]
  return(result);
 80043f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80043fe:	f06f 0305 	mvn.w	r3, #5
 8004402:	607b      	str	r3, [r7, #4]
 8004404:	e00c      	b.n	8004420 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004406:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <osKernelInitialize+0x44>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d105      	bne.n	800441a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800440e:	4b08      	ldr	r3, [pc, #32]	; (8004430 <osKernelInitialize+0x44>)
 8004410:	2201      	movs	r2, #1
 8004412:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004414:	2300      	movs	r3, #0
 8004416:	607b      	str	r3, [r7, #4]
 8004418:	e002      	b.n	8004420 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800441a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800441e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004420:	687b      	ldr	r3, [r7, #4]
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20000308 	.word	0x20000308

08004434 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800443a:	f3ef 8305 	mrs	r3, IPSR
 800443e:	603b      	str	r3, [r7, #0]
  return(result);
 8004440:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004446:	f06f 0305 	mvn.w	r3, #5
 800444a:	607b      	str	r3, [r7, #4]
 800444c:	e010      	b.n	8004470 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <osKernelStart+0x48>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d109      	bne.n	800446a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004456:	f7ff ffbf 	bl	80043d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800445a:	4b08      	ldr	r3, [pc, #32]	; (800447c <osKernelStart+0x48>)
 800445c:	2202      	movs	r2, #2
 800445e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004460:	f001 f866 	bl	8005530 <vTaskStartScheduler>
      stat = osOK;
 8004464:	2300      	movs	r3, #0
 8004466:	607b      	str	r3, [r7, #4]
 8004468:	e002      	b.n	8004470 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800446a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800446e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004470:	687b      	ldr	r3, [r7, #4]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000308 	.word	0x20000308

08004480 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004480:	b580      	push	{r7, lr}
 8004482:	b08e      	sub	sp, #56	; 0x38
 8004484:	af04      	add	r7, sp, #16
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800448c:	2300      	movs	r3, #0
 800448e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004490:	f3ef 8305 	mrs	r3, IPSR
 8004494:	617b      	str	r3, [r7, #20]
  return(result);
 8004496:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004498:	2b00      	cmp	r3, #0
 800449a:	d17e      	bne.n	800459a <osThreadNew+0x11a>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d07b      	beq.n	800459a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80044a6:	2318      	movs	r3, #24
 80044a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d045      	beq.n	8004546 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <osThreadNew+0x48>
        name = attr->name;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d008      	beq.n	80044ee <osThreadNew+0x6e>
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b38      	cmp	r3, #56	; 0x38
 80044e0:	d805      	bhi.n	80044ee <osThreadNew+0x6e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <osThreadNew+0x72>
        return (NULL);
 80044ee:	2300      	movs	r3, #0
 80044f0:	e054      	b.n	800459c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00e      	beq.n	8004528 <osThreadNew+0xa8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2b5b      	cmp	r3, #91	; 0x5b
 8004510:	d90a      	bls.n	8004528 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004516:	2b00      	cmp	r3, #0
 8004518:	d006      	beq.n	8004528 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <osThreadNew+0xa8>
        mem = 1;
 8004522:	2301      	movs	r3, #1
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	e010      	b.n	800454a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10c      	bne.n	800454a <osThreadNew+0xca>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d108      	bne.n	800454a <osThreadNew+0xca>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <osThreadNew+0xca>
          mem = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	61bb      	str	r3, [r7, #24]
 8004544:	e001      	b.n	800454a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d110      	bne.n	8004572 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004558:	9202      	str	r2, [sp, #8]
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	6a3a      	ldr	r2, [r7, #32]
 8004564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 fe0c 	bl	8005184 <xTaskCreateStatic>
 800456c:	4603      	mov	r3, r0
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	e013      	b.n	800459a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d110      	bne.n	800459a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	b29a      	uxth	r2, r3
 800457c:	f107 0310 	add.w	r3, r7, #16
 8004580:	9301      	str	r3, [sp, #4]
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 fe57 	bl	800523e <xTaskCreate>
 8004590:	4603      	mov	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d001      	beq.n	800459a <osThreadNew+0x11a>
            hTask = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800459a:	693b      	ldr	r3, [r7, #16]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3728      	adds	r7, #40	; 0x28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045ac:	f3ef 8305 	mrs	r3, IPSR
 80045b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80045b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <osDelay+0x1c>
    stat = osErrorISR;
 80045b8:	f06f 0305 	mvn.w	r3, #5
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	e007      	b.n	80045d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 ff7c 	bl	80054c8 <vTaskDelay>
    }
  }

  return (stat);
 80045d0:	68fb      	ldr	r3, [r7, #12]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4a07      	ldr	r2, [pc, #28]	; (8004608 <vApplicationGetIdleTaskMemory+0x2c>)
 80045ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	4a06      	ldr	r2, [pc, #24]	; (800460c <vApplicationGetIdleTaskMemory+0x30>)
 80045f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2280      	movs	r2, #128	; 0x80
 80045f8:	601a      	str	r2, [r3, #0]
}
 80045fa:	bf00      	nop
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	2000030c 	.word	0x2000030c
 800460c:	20000368 	.word	0x20000368

08004610 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4a07      	ldr	r2, [pc, #28]	; (800463c <vApplicationGetTimerTaskMemory+0x2c>)
 8004620:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	4a06      	ldr	r2, [pc, #24]	; (8004640 <vApplicationGetTimerTaskMemory+0x30>)
 8004626:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800462e:	601a      	str	r2, [r3, #0]
}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	20000568 	.word	0x20000568
 8004640:	200005c4 	.word	0x200005c4

08004644 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f103 0208 	add.w	r2, r3, #8
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800465c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f103 0208 	add.w	r2, r3, #8
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f103 0208 	add.w	r2, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	601a      	str	r2, [r3, #0]
}
 80046da:	bf00      	nop
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046fc:	d103      	bne.n	8004706 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e00c      	b.n	8004720 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3308      	adds	r3, #8
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e002      	b.n	8004714 <vListInsert+0x2e>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	429a      	cmp	r2, r3
 800471e:	d2f6      	bcs.n	800470e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	601a      	str	r2, [r3, #0]
}
 800474c:	bf00      	nop
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6892      	ldr	r2, [r2, #8]
 800476e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6852      	ldr	r2, [r2, #4]
 8004778:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	429a      	cmp	r2, r3
 8004782:	d103      	bne.n	800478c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	1e5a      	subs	r2, r3, #1
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10a      	bne.n	80047d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80047d2:	bf00      	nop
 80047d4:	e7fe      	b.n	80047d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047d6:	f002 f84d 	bl	8006874 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e2:	68f9      	ldr	r1, [r7, #12]
 80047e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047e6:	fb01 f303 	mul.w	r3, r1, r3
 80047ea:	441a      	add	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004806:	3b01      	subs	r3, #1
 8004808:	68f9      	ldr	r1, [r7, #12]
 800480a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800480c:	fb01 f303 	mul.w	r3, r1, r3
 8004810:	441a      	add	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	22ff      	movs	r2, #255	; 0xff
 800481a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	22ff      	movs	r2, #255	; 0xff
 8004822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d114      	bne.n	8004856 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01a      	beq.n	800486a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	3310      	adds	r3, #16
 8004838:	4618      	mov	r0, r3
 800483a:	f001 f903 	bl	8005a44 <xTaskRemoveFromEventList>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d012      	beq.n	800486a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004844:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <xQueueGenericReset+0xcc>)
 8004846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	e009      	b.n	800486a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3310      	adds	r3, #16
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fef2 	bl	8004644 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3324      	adds	r3, #36	; 0x24
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff feed 	bl	8004644 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800486a:	f002 f833 	bl	80068d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800486e:	2301      	movs	r3, #1
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	e000ed04 	.word	0xe000ed04

0800487c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08e      	sub	sp, #56	; 0x38
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10a      	bne.n	80048a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048a2:	bf00      	nop
 80048a4:	e7fe      	b.n	80048a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10a      	bne.n	80048c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048be:	bf00      	nop
 80048c0:	e7fe      	b.n	80048c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <xQueueGenericCreateStatic+0x52>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <xQueueGenericCreateStatic+0x56>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <xQueueGenericCreateStatic+0x58>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	623b      	str	r3, [r7, #32]
}
 80048ea:	bf00      	nop
 80048ec:	e7fe      	b.n	80048ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d102      	bne.n	80048fa <xQueueGenericCreateStatic+0x7e>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <xQueueGenericCreateStatic+0x82>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <xQueueGenericCreateStatic+0x84>
 80048fe:	2300      	movs	r3, #0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10a      	bne.n	800491a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	61fb      	str	r3, [r7, #28]
}
 8004916:	bf00      	nop
 8004918:	e7fe      	b.n	8004918 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800491a:	2350      	movs	r3, #80	; 0x50
 800491c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b50      	cmp	r3, #80	; 0x50
 8004922:	d00a      	beq.n	800493a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	61bb      	str	r3, [r7, #24]
}
 8004936:	bf00      	nop
 8004938:	e7fe      	b.n	8004938 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800493a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00d      	beq.n	8004962 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800494e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	4613      	mov	r3, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f805 	bl	800496c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004964:	4618      	mov	r0, r3
 8004966:	3730      	adds	r7, #48	; 0x30
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d103      	bne.n	8004988 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	e002      	b.n	800498e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800499a:	2101      	movs	r1, #1
 800499c:	69b8      	ldr	r0, [r7, #24]
 800499e:	f7ff ff05 	bl	80047ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08e      	sub	sp, #56	; 0x38
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049c2:	2300      	movs	r3, #0
 80049c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10a      	bne.n	80049e6 <xQueueGenericSend+0x32>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d103      	bne.n	80049f4 <xQueueGenericSend+0x40>
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <xQueueGenericSend+0x44>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <xQueueGenericSend+0x46>
 80049f8:	2300      	movs	r3, #0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <xQueueGenericSend+0x60>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a10:	bf00      	nop
 8004a12:	e7fe      	b.n	8004a12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d103      	bne.n	8004a22 <xQueueGenericSend+0x6e>
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <xQueueGenericSend+0x72>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <xQueueGenericSend+0x74>
 8004a26:	2300      	movs	r3, #0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <xQueueGenericSend+0x8e>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	623b      	str	r3, [r7, #32]
}
 8004a3e:	bf00      	nop
 8004a40:	e7fe      	b.n	8004a40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a42:	f001 f9bd 	bl	8005dc0 <xTaskGetSchedulerState>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <xQueueGenericSend+0x9e>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <xQueueGenericSend+0xa2>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <xQueueGenericSend+0xa4>
 8004a56:	2300      	movs	r3, #0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <xQueueGenericSend+0xbe>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	61fb      	str	r3, [r7, #28]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a72:	f001 feff 	bl	8006874 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d302      	bcc.n	8004a88 <xQueueGenericSend+0xd4>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d129      	bne.n	8004adc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a8e:	f000 fa0b 	bl	8004ea8 <prvCopyDataToQueue>
 8004a92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d010      	beq.n	8004abe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	3324      	adds	r3, #36	; 0x24
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 ffcf 	bl	8005a44 <xTaskRemoveFromEventList>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d013      	beq.n	8004ad4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004aac:	4b3f      	ldr	r3, [pc, #252]	; (8004bac <xQueueGenericSend+0x1f8>)
 8004aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	e00a      	b.n	8004ad4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ac4:	4b39      	ldr	r3, [pc, #228]	; (8004bac <xQueueGenericSend+0x1f8>)
 8004ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ad4:	f001 fefe 	bl	80068d4 <vPortExitCritical>
				return pdPASS;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e063      	b.n	8004ba4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d103      	bne.n	8004aea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ae2:	f001 fef7 	bl	80068d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e05c      	b.n	8004ba4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d106      	bne.n	8004afe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004af0:	f107 0314 	add.w	r3, r7, #20
 8004af4:	4618      	mov	r0, r3
 8004af6:	f001 f809 	bl	8005b0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004afa:	2301      	movs	r3, #1
 8004afc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004afe:	f001 fee9 	bl	80068d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b02:	f000 fd7b 	bl	80055fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b06:	f001 feb5 	bl	8006874 <vPortEnterCritical>
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b10:	b25b      	sxtb	r3, r3
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b16:	d103      	bne.n	8004b20 <xQueueGenericSend+0x16c>
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b26:	b25b      	sxtb	r3, r3
 8004b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b2c:	d103      	bne.n	8004b36 <xQueueGenericSend+0x182>
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b36:	f001 fecd 	bl	80068d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b3a:	1d3a      	adds	r2, r7, #4
 8004b3c:	f107 0314 	add.w	r3, r7, #20
 8004b40:	4611      	mov	r1, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fff8 	bl	8005b38 <xTaskCheckForTimeOut>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d124      	bne.n	8004b98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b50:	f000 faa2 	bl	8005098 <prvIsQueueFull>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d018      	beq.n	8004b8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	3310      	adds	r3, #16
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	4611      	mov	r1, r2
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 ff1e 	bl	80059a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b6a:	f000 fa2d 	bl	8004fc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b6e:	f000 fd53 	bl	8005618 <xTaskResumeAll>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f47f af7c 	bne.w	8004a72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004b7a:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <xQueueGenericSend+0x1f8>)
 8004b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	e772      	b.n	8004a72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b8e:	f000 fa1b 	bl	8004fc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b92:	f000 fd41 	bl	8005618 <xTaskResumeAll>
 8004b96:	e76c      	b.n	8004a72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b9a:	f000 fa15 	bl	8004fc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b9e:	f000 fd3b 	bl	8005618 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ba2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3738      	adds	r7, #56	; 0x38
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	e000ed04 	.word	0xe000ed04

08004bb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b090      	sub	sp, #64	; 0x40
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d103      	bne.n	8004bec <xQueueGenericSendFromISR+0x3c>
 8004be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <xQueueGenericSendFromISR+0x40>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <xQueueGenericSendFromISR+0x42>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c08:	bf00      	nop
 8004c0a:	e7fe      	b.n	8004c0a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d103      	bne.n	8004c1a <xQueueGenericSendFromISR+0x6a>
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <xQueueGenericSendFromISR+0x6e>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <xQueueGenericSendFromISR+0x70>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	623b      	str	r3, [r7, #32]
}
 8004c36:	bf00      	nop
 8004c38:	e7fe      	b.n	8004c38 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c3a:	f001 fefd 	bl	8006a38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c3e:	f3ef 8211 	mrs	r2, BASEPRI
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	61fa      	str	r2, [r7, #28]
 8004c54:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c56:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d302      	bcc.n	8004c6c <xQueueGenericSendFromISR+0xbc>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d12f      	bne.n	8004ccc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c82:	f000 f911 	bl	8004ea8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c8e:	d112      	bne.n	8004cb6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d016      	beq.n	8004cc6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9a:	3324      	adds	r3, #36	; 0x24
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fed1 	bl	8005a44 <xTaskRemoveFromEventList>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00e      	beq.n	8004cc6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	e007      	b.n	8004cc6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cba:	3301      	adds	r3, #1
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	b25a      	sxtb	r2, r3
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004cca:	e001      	b.n	8004cd0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cda:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3740      	adds	r7, #64	; 0x40
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08c      	sub	sp, #48	; 0x30
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <xQueueReceive+0x30>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	623b      	str	r3, [r7, #32]
}
 8004d14:	bf00      	nop
 8004d16:	e7fe      	b.n	8004d16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d103      	bne.n	8004d26 <xQueueReceive+0x3e>
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <xQueueReceive+0x42>
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <xQueueReceive+0x44>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <xQueueReceive+0x5e>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	61fb      	str	r3, [r7, #28]
}
 8004d42:	bf00      	nop
 8004d44:	e7fe      	b.n	8004d44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d46:	f001 f83b 	bl	8005dc0 <xTaskGetSchedulerState>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <xQueueReceive+0x6e>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <xQueueReceive+0x72>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <xQueueReceive+0x74>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <xQueueReceive+0x8e>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	61bb      	str	r3, [r7, #24]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d76:	f001 fd7d 	bl	8006874 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d01f      	beq.n	8004dc6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d8a:	f000 f8f7 	bl	8004f7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	1e5a      	subs	r2, r3, #1
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00f      	beq.n	8004dbe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	3310      	adds	r3, #16
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fe4e 	bl	8005a44 <xTaskRemoveFromEventList>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d007      	beq.n	8004dbe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dae:	4b3d      	ldr	r3, [pc, #244]	; (8004ea4 <xQueueReceive+0x1bc>)
 8004db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dbe:	f001 fd89 	bl	80068d4 <vPortExitCritical>
				return pdPASS;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e069      	b.n	8004e9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d103      	bne.n	8004dd4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dcc:	f001 fd82 	bl	80068d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e062      	b.n	8004e9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dda:	f107 0310 	add.w	r3, r7, #16
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fe94 	bl	8005b0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004de4:	2301      	movs	r3, #1
 8004de6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004de8:	f001 fd74 	bl	80068d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dec:	f000 fc06 	bl	80055fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004df0:	f001 fd40 	bl	8006874 <vPortEnterCritical>
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dfa:	b25b      	sxtb	r3, r3
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e00:	d103      	bne.n	8004e0a <xQueueReceive+0x122>
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e10:	b25b      	sxtb	r3, r3
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e16:	d103      	bne.n	8004e20 <xQueueReceive+0x138>
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e20:	f001 fd58 	bl	80068d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e24:	1d3a      	adds	r2, r7, #4
 8004e26:	f107 0310 	add.w	r3, r7, #16
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fe83 	bl	8005b38 <xTaskCheckForTimeOut>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d123      	bne.n	8004e80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e3a:	f000 f917 	bl	800506c <prvIsQueueEmpty>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d017      	beq.n	8004e74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e46:	3324      	adds	r3, #36	; 0x24
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fda9 	bl	80059a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e54:	f000 f8b8 	bl	8004fc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e58:	f000 fbde 	bl	8005618 <xTaskResumeAll>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d189      	bne.n	8004d76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004e62:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <xQueueReceive+0x1bc>)
 8004e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	e780      	b.n	8004d76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e76:	f000 f8a7 	bl	8004fc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e7a:	f000 fbcd 	bl	8005618 <xTaskResumeAll>
 8004e7e:	e77a      	b.n	8004d76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e82:	f000 f8a1 	bl	8004fc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e86:	f000 fbc7 	bl	8005618 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e8c:	f000 f8ee 	bl	800506c <prvIsQueueEmpty>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f43f af6f 	beq.w	8004d76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3730      	adds	r7, #48	; 0x30
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	e000ed04 	.word	0xe000ed04

08004ea8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10d      	bne.n	8004ee2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d14d      	bne.n	8004f6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 ff92 	bl	8005dfc <xTaskPriorityDisinherit>
 8004ed8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	609a      	str	r2, [r3, #8]
 8004ee0:	e043      	b.n	8004f6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d119      	bne.n	8004f1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6858      	ldr	r0, [r3, #4]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	f002 fd7b 	bl	80079ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	441a      	add	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d32b      	bcc.n	8004f6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	e026      	b.n	8004f6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	68d8      	ldr	r0, [r3, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	461a      	mov	r2, r3
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	f002 fd61 	bl	80079ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	425b      	negs	r3, r3
 8004f36:	441a      	add	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d207      	bcs.n	8004f58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	425b      	negs	r3, r3
 8004f52:	441a      	add	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d105      	bne.n	8004f6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f72:	697b      	ldr	r3, [r7, #20]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d018      	beq.n	8004fc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	441a      	add	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d303      	bcc.n	8004fb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68d9      	ldr	r1, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6838      	ldr	r0, [r7, #0]
 8004fbc:	f002 fd17 	bl	80079ee <memcpy>
	}
}
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fd0:	f001 fc50 	bl	8006874 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fdc:	e011      	b.n	8005002 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d012      	beq.n	800500c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3324      	adds	r3, #36	; 0x24
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fd2a 	bl	8005a44 <xTaskRemoveFromEventList>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ff6:	f000 fe01 	bl	8005bfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005006:	2b00      	cmp	r3, #0
 8005008:	dce9      	bgt.n	8004fde <prvUnlockQueue+0x16>
 800500a:	e000      	b.n	800500e <prvUnlockQueue+0x46>
					break;
 800500c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	22ff      	movs	r2, #255	; 0xff
 8005012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005016:	f001 fc5d 	bl	80068d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800501a:	f001 fc2b 	bl	8006874 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005024:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005026:	e011      	b.n	800504c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d012      	beq.n	8005056 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3310      	adds	r3, #16
 8005034:	4618      	mov	r0, r3
 8005036:	f000 fd05 	bl	8005a44 <xTaskRemoveFromEventList>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005040:	f000 fddc 	bl	8005bfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005044:	7bbb      	ldrb	r3, [r7, #14]
 8005046:	3b01      	subs	r3, #1
 8005048:	b2db      	uxtb	r3, r3
 800504a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800504c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005050:	2b00      	cmp	r3, #0
 8005052:	dce9      	bgt.n	8005028 <prvUnlockQueue+0x60>
 8005054:	e000      	b.n	8005058 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005056:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	22ff      	movs	r2, #255	; 0xff
 800505c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005060:	f001 fc38 	bl	80068d4 <vPortExitCritical>
}
 8005064:	bf00      	nop
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005074:	f001 fbfe 	bl	8006874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	2b00      	cmp	r3, #0
 800507e:	d102      	bne.n	8005086 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005080:	2301      	movs	r3, #1
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e001      	b.n	800508a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800508a:	f001 fc23 	bl	80068d4 <vPortExitCritical>

	return xReturn;
 800508e:	68fb      	ldr	r3, [r7, #12]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050a0:	f001 fbe8 	bl	8006874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d102      	bne.n	80050b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050b0:	2301      	movs	r3, #1
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	e001      	b.n	80050ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050ba:	f001 fc0b 	bl	80068d4 <vPortExitCritical>

	return xReturn;
 80050be:	68fb      	ldr	r3, [r7, #12]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	e014      	b.n	8005102 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050d8:	4a0f      	ldr	r2, [pc, #60]	; (8005118 <vQueueAddToRegistry+0x50>)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10b      	bne.n	80050fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050e4:	490c      	ldr	r1, [pc, #48]	; (8005118 <vQueueAddToRegistry+0x50>)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80050ee:	4a0a      	ldr	r2, [pc, #40]	; (8005118 <vQueueAddToRegistry+0x50>)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	4413      	add	r3, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80050fa:	e006      	b.n	800510a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3301      	adds	r3, #1
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b07      	cmp	r3, #7
 8005106:	d9e7      	bls.n	80050d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005108:	bf00      	nop
 800510a:	bf00      	nop
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	200009c4 	.word	0x200009c4

0800511c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800512c:	f001 fba2 	bl	8006874 <vPortEnterCritical>
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005136:	b25b      	sxtb	r3, r3
 8005138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800513c:	d103      	bne.n	8005146 <vQueueWaitForMessageRestricted+0x2a>
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800514c:	b25b      	sxtb	r3, r3
 800514e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005152:	d103      	bne.n	800515c <vQueueWaitForMessageRestricted+0x40>
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800515c:	f001 fbba 	bl	80068d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	2b00      	cmp	r3, #0
 8005166:	d106      	bne.n	8005176 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	3324      	adds	r3, #36	; 0x24
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fc3b 	bl	80059ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005176:	6978      	ldr	r0, [r7, #20]
 8005178:	f7ff ff26 	bl	8004fc8 <prvUnlockQueue>
	}
 800517c:	bf00      	nop
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08e      	sub	sp, #56	; 0x38
 8005188:	af04      	add	r7, sp, #16
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	623b      	str	r3, [r7, #32]
}
 80051aa:	bf00      	nop
 80051ac:	e7fe      	b.n	80051ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10a      	bne.n	80051ca <xTaskCreateStatic+0x46>
	__asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	61fb      	str	r3, [r7, #28]
}
 80051c6:	bf00      	nop
 80051c8:	e7fe      	b.n	80051c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051ca:	235c      	movs	r3, #92	; 0x5c
 80051cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	2b5c      	cmp	r3, #92	; 0x5c
 80051d2:	d00a      	beq.n	80051ea <xTaskCreateStatic+0x66>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	61bb      	str	r3, [r7, #24]
}
 80051e6:	bf00      	nop
 80051e8:	e7fe      	b.n	80051e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d01e      	beq.n	8005230 <xTaskCreateStatic+0xac>
 80051f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01b      	beq.n	8005230 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005200:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	2202      	movs	r2, #2
 8005206:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800520a:	2300      	movs	r3, #0
 800520c:	9303      	str	r3, [sp, #12]
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	9302      	str	r3, [sp, #8]
 8005212:	f107 0314 	add.w	r3, r7, #20
 8005216:	9301      	str	r3, [sp, #4]
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f850 	bl	80052c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800522a:	f000 f8dd 	bl	80053e8 <prvAddNewTaskToReadyList>
 800522e:	e001      	b.n	8005234 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005230:	2300      	movs	r3, #0
 8005232:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005234:	697b      	ldr	r3, [r7, #20]
	}
 8005236:	4618      	mov	r0, r3
 8005238:	3728      	adds	r7, #40	; 0x28
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800523e:	b580      	push	{r7, lr}
 8005240:	b08c      	sub	sp, #48	; 0x30
 8005242:	af04      	add	r7, sp, #16
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	4613      	mov	r3, r2
 800524c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4618      	mov	r0, r3
 8005254:	f001 fc30 	bl	8006ab8 <pvPortMalloc>
 8005258:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00e      	beq.n	800527e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005260:	205c      	movs	r0, #92	; 0x5c
 8005262:	f001 fc29 	bl	8006ab8 <pvPortMalloc>
 8005266:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	631a      	str	r2, [r3, #48]	; 0x30
 8005274:	e005      	b.n	8005282 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005276:	6978      	ldr	r0, [r7, #20]
 8005278:	f001 fcea 	bl	8006c50 <vPortFree>
 800527c:	e001      	b.n	8005282 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d017      	beq.n	80052b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005290:	88fa      	ldrh	r2, [r7, #6]
 8005292:	2300      	movs	r3, #0
 8005294:	9303      	str	r3, [sp, #12]
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	9302      	str	r3, [sp, #8]
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	9301      	str	r3, [sp, #4]
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 f80e 	bl	80052c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052ac:	69f8      	ldr	r0, [r7, #28]
 80052ae:	f000 f89b 	bl	80053e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052b2:	2301      	movs	r3, #1
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	e002      	b.n	80052be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052be:	69bb      	ldr	r3, [r7, #24]
	}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3720      	adds	r7, #32
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	461a      	mov	r2, r3
 80052e0:	21a5      	movs	r1, #165	; 0xa5
 80052e2:	f002 fb4b 	bl	800797c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052f0:	3b01      	subs	r3, #1
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	f023 0307 	bic.w	r3, r3, #7
 80052fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <prvInitialiseNewTask+0x58>
	__asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	617b      	str	r3, [r7, #20]
}
 800531c:	bf00      	nop
 800531e:	e7fe      	b.n	800531e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d01f      	beq.n	8005366 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005326:	2300      	movs	r3, #0
 8005328:	61fb      	str	r3, [r7, #28]
 800532a:	e012      	b.n	8005352 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	7819      	ldrb	r1, [r3, #0]
 8005334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	4413      	add	r3, r2
 800533a:	3334      	adds	r3, #52	; 0x34
 800533c:	460a      	mov	r2, r1
 800533e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	4413      	add	r3, r2
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d006      	beq.n	800535a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	3301      	adds	r3, #1
 8005350:	61fb      	str	r3, [r7, #28]
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	2b0f      	cmp	r3, #15
 8005356:	d9e9      	bls.n	800532c <prvInitialiseNewTask+0x64>
 8005358:	e000      	b.n	800535c <prvInitialiseNewTask+0x94>
			{
				break;
 800535a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005364:	e003      	b.n	800536e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	2b37      	cmp	r3, #55	; 0x37
 8005372:	d901      	bls.n	8005378 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005374:	2337      	movs	r3, #55	; 0x37
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800537c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005382:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	2200      	movs	r2, #0
 8005388:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	3304      	adds	r3, #4
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff f978 	bl	8004684 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005396:	3318      	adds	r3, #24
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff f973 	bl	8004684 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	2200      	movs	r2, #0
 80053b8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	68f9      	ldr	r1, [r7, #12]
 80053c6:	69b8      	ldr	r0, [r7, #24]
 80053c8:	f001 f928 	bl	800661c <pxPortInitialiseStack>
 80053cc:	4602      	mov	r2, r0
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053de:	bf00      	nop
 80053e0:	3720      	adds	r7, #32
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053f0:	f001 fa40 	bl	8006874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053f4:	4b2d      	ldr	r3, [pc, #180]	; (80054ac <prvAddNewTaskToReadyList+0xc4>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3301      	adds	r3, #1
 80053fa:	4a2c      	ldr	r2, [pc, #176]	; (80054ac <prvAddNewTaskToReadyList+0xc4>)
 80053fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053fe:	4b2c      	ldr	r3, [pc, #176]	; (80054b0 <prvAddNewTaskToReadyList+0xc8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d109      	bne.n	800541a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005406:	4a2a      	ldr	r2, [pc, #168]	; (80054b0 <prvAddNewTaskToReadyList+0xc8>)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800540c:	4b27      	ldr	r3, [pc, #156]	; (80054ac <prvAddNewTaskToReadyList+0xc4>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d110      	bne.n	8005436 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005414:	f000 fc16 	bl	8005c44 <prvInitialiseTaskLists>
 8005418:	e00d      	b.n	8005436 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800541a:	4b26      	ldr	r3, [pc, #152]	; (80054b4 <prvAddNewTaskToReadyList+0xcc>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d109      	bne.n	8005436 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005422:	4b23      	ldr	r3, [pc, #140]	; (80054b0 <prvAddNewTaskToReadyList+0xc8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	429a      	cmp	r2, r3
 800542e:	d802      	bhi.n	8005436 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005430:	4a1f      	ldr	r2, [pc, #124]	; (80054b0 <prvAddNewTaskToReadyList+0xc8>)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005436:	4b20      	ldr	r3, [pc, #128]	; (80054b8 <prvAddNewTaskToReadyList+0xd0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3301      	adds	r3, #1
 800543c:	4a1e      	ldr	r2, [pc, #120]	; (80054b8 <prvAddNewTaskToReadyList+0xd0>)
 800543e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005440:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <prvAddNewTaskToReadyList+0xd0>)
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544c:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <prvAddNewTaskToReadyList+0xd4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d903      	bls.n	800545c <prvAddNewTaskToReadyList+0x74>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	4a18      	ldr	r2, [pc, #96]	; (80054bc <prvAddNewTaskToReadyList+0xd4>)
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4a15      	ldr	r2, [pc, #84]	; (80054c0 <prvAddNewTaskToReadyList+0xd8>)
 800546a:	441a      	add	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3304      	adds	r3, #4
 8005470:	4619      	mov	r1, r3
 8005472:	4610      	mov	r0, r2
 8005474:	f7ff f913 	bl	800469e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005478:	f001 fa2c 	bl	80068d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800547c:	4b0d      	ldr	r3, [pc, #52]	; (80054b4 <prvAddNewTaskToReadyList+0xcc>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00e      	beq.n	80054a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005484:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <prvAddNewTaskToReadyList+0xc8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548e:	429a      	cmp	r2, r3
 8005490:	d207      	bcs.n	80054a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005492:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <prvAddNewTaskToReadyList+0xdc>)
 8005494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054a2:	bf00      	nop
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000ed8 	.word	0x20000ed8
 80054b0:	20000a04 	.word	0x20000a04
 80054b4:	20000ee4 	.word	0x20000ee4
 80054b8:	20000ef4 	.word	0x20000ef4
 80054bc:	20000ee0 	.word	0x20000ee0
 80054c0:	20000a08 	.word	0x20000a08
 80054c4:	e000ed04 	.word	0xe000ed04

080054c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054d0:	2300      	movs	r3, #0
 80054d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d017      	beq.n	800550a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054da:	4b13      	ldr	r3, [pc, #76]	; (8005528 <vTaskDelay+0x60>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <vTaskDelay+0x30>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	60bb      	str	r3, [r7, #8]
}
 80054f4:	bf00      	nop
 80054f6:	e7fe      	b.n	80054f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054f8:	f000 f880 	bl	80055fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054fc:	2100      	movs	r1, #0
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fcea 	bl	8005ed8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005504:	f000 f888 	bl	8005618 <xTaskResumeAll>
 8005508:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d107      	bne.n	8005520 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005510:	4b06      	ldr	r3, [pc, #24]	; (800552c <vTaskDelay+0x64>)
 8005512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	20000f00 	.word	0x20000f00
 800552c:	e000ed04 	.word	0xe000ed04

08005530 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08a      	sub	sp, #40	; 0x28
 8005534:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005536:	2300      	movs	r3, #0
 8005538:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800553a:	2300      	movs	r3, #0
 800553c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800553e:	463a      	mov	r2, r7
 8005540:	1d39      	adds	r1, r7, #4
 8005542:	f107 0308 	add.w	r3, r7, #8
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff f848 	bl	80045dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800554c:	6839      	ldr	r1, [r7, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	9202      	str	r2, [sp, #8]
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	2300      	movs	r3, #0
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	2300      	movs	r3, #0
 800555c:	460a      	mov	r2, r1
 800555e:	4921      	ldr	r1, [pc, #132]	; (80055e4 <vTaskStartScheduler+0xb4>)
 8005560:	4821      	ldr	r0, [pc, #132]	; (80055e8 <vTaskStartScheduler+0xb8>)
 8005562:	f7ff fe0f 	bl	8005184 <xTaskCreateStatic>
 8005566:	4603      	mov	r3, r0
 8005568:	4a20      	ldr	r2, [pc, #128]	; (80055ec <vTaskStartScheduler+0xbc>)
 800556a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800556c:	4b1f      	ldr	r3, [pc, #124]	; (80055ec <vTaskStartScheduler+0xbc>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005574:	2301      	movs	r3, #1
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	e001      	b.n	800557e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800557a:	2300      	movs	r3, #0
 800557c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d102      	bne.n	800558a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005584:	f000 fcfc 	bl	8005f80 <xTimerCreateTimerTask>
 8005588:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d116      	bne.n	80055be <vTaskStartScheduler+0x8e>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	613b      	str	r3, [r7, #16]
}
 80055a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055a4:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <vTaskStartScheduler+0xc0>)
 80055a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055ac:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <vTaskStartScheduler+0xc4>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055b2:	4b11      	ldr	r3, [pc, #68]	; (80055f8 <vTaskStartScheduler+0xc8>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055b8:	f001 f8ba 	bl	8006730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055bc:	e00e      	b.n	80055dc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055c4:	d10a      	bne.n	80055dc <vTaskStartScheduler+0xac>
	__asm volatile
 80055c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	60fb      	str	r3, [r7, #12]
}
 80055d8:	bf00      	nop
 80055da:	e7fe      	b.n	80055da <vTaskStartScheduler+0xaa>
}
 80055dc:	bf00      	nop
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	08009c4c 	.word	0x08009c4c
 80055e8:	08005c15 	.word	0x08005c15
 80055ec:	20000efc 	.word	0x20000efc
 80055f0:	20000ef8 	.word	0x20000ef8
 80055f4:	20000ee4 	.word	0x20000ee4
 80055f8:	20000edc 	.word	0x20000edc

080055fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005600:	4b04      	ldr	r3, [pc, #16]	; (8005614 <vTaskSuspendAll+0x18>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3301      	adds	r3, #1
 8005606:	4a03      	ldr	r2, [pc, #12]	; (8005614 <vTaskSuspendAll+0x18>)
 8005608:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800560a:	bf00      	nop
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	20000f00 	.word	0x20000f00

08005618 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005622:	2300      	movs	r3, #0
 8005624:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005626:	4b42      	ldr	r3, [pc, #264]	; (8005730 <xTaskResumeAll+0x118>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10a      	bne.n	8005644 <xTaskResumeAll+0x2c>
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	603b      	str	r3, [r7, #0]
}
 8005640:	bf00      	nop
 8005642:	e7fe      	b.n	8005642 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005644:	f001 f916 	bl	8006874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005648:	4b39      	ldr	r3, [pc, #228]	; (8005730 <xTaskResumeAll+0x118>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3b01      	subs	r3, #1
 800564e:	4a38      	ldr	r2, [pc, #224]	; (8005730 <xTaskResumeAll+0x118>)
 8005650:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005652:	4b37      	ldr	r3, [pc, #220]	; (8005730 <xTaskResumeAll+0x118>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d162      	bne.n	8005720 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800565a:	4b36      	ldr	r3, [pc, #216]	; (8005734 <xTaskResumeAll+0x11c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d05e      	beq.n	8005720 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005662:	e02f      	b.n	80056c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005664:	4b34      	ldr	r3, [pc, #208]	; (8005738 <xTaskResumeAll+0x120>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3318      	adds	r3, #24
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff f871 	bl	8004758 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3304      	adds	r3, #4
 800567a:	4618      	mov	r0, r3
 800567c:	f7ff f86c 	bl	8004758 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005684:	4b2d      	ldr	r3, [pc, #180]	; (800573c <xTaskResumeAll+0x124>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d903      	bls.n	8005694 <xTaskResumeAll+0x7c>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	4a2a      	ldr	r2, [pc, #168]	; (800573c <xTaskResumeAll+0x124>)
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005698:	4613      	mov	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4a27      	ldr	r2, [pc, #156]	; (8005740 <xTaskResumeAll+0x128>)
 80056a2:	441a      	add	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3304      	adds	r3, #4
 80056a8:	4619      	mov	r1, r3
 80056aa:	4610      	mov	r0, r2
 80056ac:	f7fe fff7 	bl	800469e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b4:	4b23      	ldr	r3, [pc, #140]	; (8005744 <xTaskResumeAll+0x12c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d302      	bcc.n	80056c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80056be:	4b22      	ldr	r3, [pc, #136]	; (8005748 <xTaskResumeAll+0x130>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056c4:	4b1c      	ldr	r3, [pc, #112]	; (8005738 <xTaskResumeAll+0x120>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1cb      	bne.n	8005664 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056d2:	f000 fb55 	bl	8005d80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056d6:	4b1d      	ldr	r3, [pc, #116]	; (800574c <xTaskResumeAll+0x134>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d010      	beq.n	8005704 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056e2:	f000 f847 	bl	8005774 <xTaskIncrementTick>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80056ec:	4b16      	ldr	r3, [pc, #88]	; (8005748 <xTaskResumeAll+0x130>)
 80056ee:	2201      	movs	r2, #1
 80056f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f1      	bne.n	80056e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80056fe:	4b13      	ldr	r3, [pc, #76]	; (800574c <xTaskResumeAll+0x134>)
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005704:	4b10      	ldr	r3, [pc, #64]	; (8005748 <xTaskResumeAll+0x130>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d009      	beq.n	8005720 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800570c:	2301      	movs	r3, #1
 800570e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005710:	4b0f      	ldr	r3, [pc, #60]	; (8005750 <xTaskResumeAll+0x138>)
 8005712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005720:	f001 f8d8 	bl	80068d4 <vPortExitCritical>

	return xAlreadyYielded;
 8005724:	68bb      	ldr	r3, [r7, #8]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20000f00 	.word	0x20000f00
 8005734:	20000ed8 	.word	0x20000ed8
 8005738:	20000e98 	.word	0x20000e98
 800573c:	20000ee0 	.word	0x20000ee0
 8005740:	20000a08 	.word	0x20000a08
 8005744:	20000a04 	.word	0x20000a04
 8005748:	20000eec 	.word	0x20000eec
 800574c:	20000ee8 	.word	0x20000ee8
 8005750:	e000ed04 	.word	0xe000ed04

08005754 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800575a:	4b05      	ldr	r3, [pc, #20]	; (8005770 <xTaskGetTickCount+0x1c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005760:	687b      	ldr	r3, [r7, #4]
}
 8005762:	4618      	mov	r0, r3
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	20000edc 	.word	0x20000edc

08005774 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800577e:	4b4f      	ldr	r3, [pc, #316]	; (80058bc <xTaskIncrementTick+0x148>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f040 808f 	bne.w	80058a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005788:	4b4d      	ldr	r3, [pc, #308]	; (80058c0 <xTaskIncrementTick+0x14c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3301      	adds	r3, #1
 800578e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005790:	4a4b      	ldr	r2, [pc, #300]	; (80058c0 <xTaskIncrementTick+0x14c>)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d120      	bne.n	80057de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800579c:	4b49      	ldr	r3, [pc, #292]	; (80058c4 <xTaskIncrementTick+0x150>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <xTaskIncrementTick+0x48>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	603b      	str	r3, [r7, #0]
}
 80057b8:	bf00      	nop
 80057ba:	e7fe      	b.n	80057ba <xTaskIncrementTick+0x46>
 80057bc:	4b41      	ldr	r3, [pc, #260]	; (80058c4 <xTaskIncrementTick+0x150>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	4b41      	ldr	r3, [pc, #260]	; (80058c8 <xTaskIncrementTick+0x154>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a3f      	ldr	r2, [pc, #252]	; (80058c4 <xTaskIncrementTick+0x150>)
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	4a3f      	ldr	r2, [pc, #252]	; (80058c8 <xTaskIncrementTick+0x154>)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	4b3e      	ldr	r3, [pc, #248]	; (80058cc <xTaskIncrementTick+0x158>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3301      	adds	r3, #1
 80057d6:	4a3d      	ldr	r2, [pc, #244]	; (80058cc <xTaskIncrementTick+0x158>)
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	f000 fad1 	bl	8005d80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057de:	4b3c      	ldr	r3, [pc, #240]	; (80058d0 <xTaskIncrementTick+0x15c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d349      	bcc.n	800587c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057e8:	4b36      	ldr	r3, [pc, #216]	; (80058c4 <xTaskIncrementTick+0x150>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d104      	bne.n	80057fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f2:	4b37      	ldr	r3, [pc, #220]	; (80058d0 <xTaskIncrementTick+0x15c>)
 80057f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057f8:	601a      	str	r2, [r3, #0]
					break;
 80057fa:	e03f      	b.n	800587c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057fc:	4b31      	ldr	r3, [pc, #196]	; (80058c4 <xTaskIncrementTick+0x150>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	d203      	bcs.n	800581c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005814:	4a2e      	ldr	r2, [pc, #184]	; (80058d0 <xTaskIncrementTick+0x15c>)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800581a:	e02f      	b.n	800587c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	3304      	adds	r3, #4
 8005820:	4618      	mov	r0, r3
 8005822:	f7fe ff99 	bl	8004758 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	2b00      	cmp	r3, #0
 800582c:	d004      	beq.n	8005838 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	3318      	adds	r3, #24
 8005832:	4618      	mov	r0, r3
 8005834:	f7fe ff90 	bl	8004758 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583c:	4b25      	ldr	r3, [pc, #148]	; (80058d4 <xTaskIncrementTick+0x160>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d903      	bls.n	800584c <xTaskIncrementTick+0xd8>
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	4a22      	ldr	r2, [pc, #136]	; (80058d4 <xTaskIncrementTick+0x160>)
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4a1f      	ldr	r2, [pc, #124]	; (80058d8 <xTaskIncrementTick+0x164>)
 800585a:	441a      	add	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	3304      	adds	r3, #4
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f7fe ff1b 	bl	800469e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586c:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <xTaskIncrementTick+0x168>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005872:	429a      	cmp	r2, r3
 8005874:	d3b8      	bcc.n	80057e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005876:	2301      	movs	r3, #1
 8005878:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800587a:	e7b5      	b.n	80057e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800587c:	4b17      	ldr	r3, [pc, #92]	; (80058dc <xTaskIncrementTick+0x168>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005882:	4915      	ldr	r1, [pc, #84]	; (80058d8 <xTaskIncrementTick+0x164>)
 8005884:	4613      	mov	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d901      	bls.n	8005898 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005894:	2301      	movs	r3, #1
 8005896:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005898:	4b11      	ldr	r3, [pc, #68]	; (80058e0 <xTaskIncrementTick+0x16c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d007      	beq.n	80058b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80058a0:	2301      	movs	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	e004      	b.n	80058b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058a6:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <xTaskIncrementTick+0x170>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3301      	adds	r3, #1
 80058ac:	4a0d      	ldr	r2, [pc, #52]	; (80058e4 <xTaskIncrementTick+0x170>)
 80058ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058b0:	697b      	ldr	r3, [r7, #20]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000f00 	.word	0x20000f00
 80058c0:	20000edc 	.word	0x20000edc
 80058c4:	20000e90 	.word	0x20000e90
 80058c8:	20000e94 	.word	0x20000e94
 80058cc:	20000ef0 	.word	0x20000ef0
 80058d0:	20000ef8 	.word	0x20000ef8
 80058d4:	20000ee0 	.word	0x20000ee0
 80058d8:	20000a08 	.word	0x20000a08
 80058dc:	20000a04 	.word	0x20000a04
 80058e0:	20000eec 	.word	0x20000eec
 80058e4:	20000ee8 	.word	0x20000ee8

080058e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058ee:	4b28      	ldr	r3, [pc, #160]	; (8005990 <vTaskSwitchContext+0xa8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058f6:	4b27      	ldr	r3, [pc, #156]	; (8005994 <vTaskSwitchContext+0xac>)
 80058f8:	2201      	movs	r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058fc:	e041      	b.n	8005982 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80058fe:	4b25      	ldr	r3, [pc, #148]	; (8005994 <vTaskSwitchContext+0xac>)
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005904:	4b24      	ldr	r3, [pc, #144]	; (8005998 <vTaskSwitchContext+0xb0>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	e010      	b.n	800592e <vTaskSwitchContext+0x46>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10a      	bne.n	8005928 <vTaskSwitchContext+0x40>
	__asm volatile
 8005912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	607b      	str	r3, [r7, #4]
}
 8005924:	bf00      	nop
 8005926:	e7fe      	b.n	8005926 <vTaskSwitchContext+0x3e>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3b01      	subs	r3, #1
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	491b      	ldr	r1, [pc, #108]	; (800599c <vTaskSwitchContext+0xb4>)
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	440b      	add	r3, r1
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0e4      	beq.n	800590c <vTaskSwitchContext+0x24>
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4a13      	ldr	r2, [pc, #76]	; (800599c <vTaskSwitchContext+0xb4>)
 800594e:	4413      	add	r3, r2
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	605a      	str	r2, [r3, #4]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	3308      	adds	r3, #8
 8005964:	429a      	cmp	r2, r3
 8005966:	d104      	bne.n	8005972 <vTaskSwitchContext+0x8a>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	605a      	str	r2, [r3, #4]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	4a09      	ldr	r2, [pc, #36]	; (80059a0 <vTaskSwitchContext+0xb8>)
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	4a06      	ldr	r2, [pc, #24]	; (8005998 <vTaskSwitchContext+0xb0>)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6013      	str	r3, [r2, #0]
}
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000f00 	.word	0x20000f00
 8005994:	20000eec 	.word	0x20000eec
 8005998:	20000ee0 	.word	0x20000ee0
 800599c:	20000a08 	.word	0x20000a08
 80059a0:	20000a04 	.word	0x20000a04

080059a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10a      	bne.n	80059ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	60fb      	str	r3, [r7, #12]
}
 80059c6:	bf00      	nop
 80059c8:	e7fe      	b.n	80059c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059ca:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <vTaskPlaceOnEventList+0x44>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3318      	adds	r3, #24
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fe fe87 	bl	80046e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059d8:	2101      	movs	r1, #1
 80059da:	6838      	ldr	r0, [r7, #0]
 80059dc:	f000 fa7c 	bl	8005ed8 <prvAddCurrentTaskToDelayedList>
}
 80059e0:	bf00      	nop
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	20000a04 	.word	0x20000a04

080059ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	617b      	str	r3, [r7, #20]
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a14:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <vTaskPlaceOnEventListRestricted+0x54>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3318      	adds	r3, #24
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f7fe fe3e 	bl	800469e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a2c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a2e:	6879      	ldr	r1, [r7, #4]
 8005a30:	68b8      	ldr	r0, [r7, #8]
 8005a32:	f000 fa51 	bl	8005ed8 <prvAddCurrentTaskToDelayedList>
	}
 8005a36:	bf00      	nop
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000a04 	.word	0x20000a04

08005a44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10a      	bne.n	8005a70 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	60fb      	str	r3, [r7, #12]
}
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	3318      	adds	r3, #24
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fe fe6f 	bl	8004758 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a7a:	4b1e      	ldr	r3, [pc, #120]	; (8005af4 <xTaskRemoveFromEventList+0xb0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d11d      	bne.n	8005abe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	3304      	adds	r3, #4
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fe fe66 	bl	8004758 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a90:	4b19      	ldr	r3, [pc, #100]	; (8005af8 <xTaskRemoveFromEventList+0xb4>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d903      	bls.n	8005aa0 <xTaskRemoveFromEventList+0x5c>
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	4a16      	ldr	r2, [pc, #88]	; (8005af8 <xTaskRemoveFromEventList+0xb4>)
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4a13      	ldr	r2, [pc, #76]	; (8005afc <xTaskRemoveFromEventList+0xb8>)
 8005aae:	441a      	add	r2, r3
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	f7fe fdf1 	bl	800469e <vListInsertEnd>
 8005abc:	e005      	b.n	8005aca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	3318      	adds	r3, #24
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	480e      	ldr	r0, [pc, #56]	; (8005b00 <xTaskRemoveFromEventList+0xbc>)
 8005ac6:	f7fe fdea 	bl	800469e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ace:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <xTaskRemoveFromEventList+0xc0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d905      	bls.n	8005ae4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <xTaskRemoveFromEventList+0xc4>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	e001      	b.n	8005ae8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ae8:	697b      	ldr	r3, [r7, #20]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20000f00 	.word	0x20000f00
 8005af8:	20000ee0 	.word	0x20000ee0
 8005afc:	20000a08 	.word	0x20000a08
 8005b00:	20000e98 	.word	0x20000e98
 8005b04:	20000a04 	.word	0x20000a04
 8005b08:	20000eec 	.word	0x20000eec

08005b0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b14:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <vTaskInternalSetTimeOutState+0x24>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b1c:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <vTaskInternalSetTimeOutState+0x28>)
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	605a      	str	r2, [r3, #4]
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	20000ef0 	.word	0x20000ef0
 8005b34:	20000edc 	.word	0x20000edc

08005b38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	613b      	str	r3, [r7, #16]
}
 8005b5a:	bf00      	nop
 8005b5c:	e7fe      	b.n	8005b5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10a      	bne.n	8005b7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	60fb      	str	r3, [r7, #12]
}
 8005b76:	bf00      	nop
 8005b78:	e7fe      	b.n	8005b78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b7a:	f000 fe7b 	bl	8006874 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b7e:	4b1d      	ldr	r3, [pc, #116]	; (8005bf4 <xTaskCheckForTimeOut+0xbc>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b96:	d102      	bne.n	8005b9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61fb      	str	r3, [r7, #28]
 8005b9c:	e023      	b.n	8005be6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b15      	ldr	r3, [pc, #84]	; (8005bf8 <xTaskCheckForTimeOut+0xc0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d007      	beq.n	8005bba <xTaskCheckForTimeOut+0x82>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d302      	bcc.n	8005bba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	e015      	b.n	8005be6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d20b      	bcs.n	8005bdc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	1ad2      	subs	r2, r2, r3
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff ff9b 	bl	8005b0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	e004      	b.n	8005be6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005be2:	2301      	movs	r3, #1
 8005be4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005be6:	f000 fe75 	bl	80068d4 <vPortExitCritical>

	return xReturn;
 8005bea:	69fb      	ldr	r3, [r7, #28]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	20000edc 	.word	0x20000edc
 8005bf8:	20000ef0 	.word	0x20000ef0

08005bfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c00:	4b03      	ldr	r3, [pc, #12]	; (8005c10 <vTaskMissedYield+0x14>)
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
}
 8005c06:	bf00      	nop
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	20000eec 	.word	0x20000eec

08005c14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c1c:	f000 f852 	bl	8005cc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c20:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <prvIdleTask+0x28>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d9f9      	bls.n	8005c1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c28:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <prvIdleTask+0x2c>)
 8005c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c38:	e7f0      	b.n	8005c1c <prvIdleTask+0x8>
 8005c3a:	bf00      	nop
 8005c3c:	20000a08 	.word	0x20000a08
 8005c40:	e000ed04 	.word	0xe000ed04

08005c44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	607b      	str	r3, [r7, #4]
 8005c4e:	e00c      	b.n	8005c6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4a12      	ldr	r2, [pc, #72]	; (8005ca4 <prvInitialiseTaskLists+0x60>)
 8005c5c:	4413      	add	r3, r2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fe fcf0 	bl	8004644 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3301      	adds	r3, #1
 8005c68:	607b      	str	r3, [r7, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b37      	cmp	r3, #55	; 0x37
 8005c6e:	d9ef      	bls.n	8005c50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c70:	480d      	ldr	r0, [pc, #52]	; (8005ca8 <prvInitialiseTaskLists+0x64>)
 8005c72:	f7fe fce7 	bl	8004644 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c76:	480d      	ldr	r0, [pc, #52]	; (8005cac <prvInitialiseTaskLists+0x68>)
 8005c78:	f7fe fce4 	bl	8004644 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c7c:	480c      	ldr	r0, [pc, #48]	; (8005cb0 <prvInitialiseTaskLists+0x6c>)
 8005c7e:	f7fe fce1 	bl	8004644 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c82:	480c      	ldr	r0, [pc, #48]	; (8005cb4 <prvInitialiseTaskLists+0x70>)
 8005c84:	f7fe fcde 	bl	8004644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c88:	480b      	ldr	r0, [pc, #44]	; (8005cb8 <prvInitialiseTaskLists+0x74>)
 8005c8a:	f7fe fcdb 	bl	8004644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c8e:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <prvInitialiseTaskLists+0x78>)
 8005c90:	4a05      	ldr	r2, [pc, #20]	; (8005ca8 <prvInitialiseTaskLists+0x64>)
 8005c92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c94:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <prvInitialiseTaskLists+0x7c>)
 8005c96:	4a05      	ldr	r2, [pc, #20]	; (8005cac <prvInitialiseTaskLists+0x68>)
 8005c98:	601a      	str	r2, [r3, #0]
}
 8005c9a:	bf00      	nop
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20000a08 	.word	0x20000a08
 8005ca8:	20000e68 	.word	0x20000e68
 8005cac:	20000e7c 	.word	0x20000e7c
 8005cb0:	20000e98 	.word	0x20000e98
 8005cb4:	20000eac 	.word	0x20000eac
 8005cb8:	20000ec4 	.word	0x20000ec4
 8005cbc:	20000e90 	.word	0x20000e90
 8005cc0:	20000e94 	.word	0x20000e94

08005cc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cca:	e019      	b.n	8005d00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ccc:	f000 fdd2 	bl	8006874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cd0:	4b10      	ldr	r3, [pc, #64]	; (8005d14 <prvCheckTasksWaitingTermination+0x50>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fe fd3b 	bl	8004758 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ce2:	4b0d      	ldr	r3, [pc, #52]	; (8005d18 <prvCheckTasksWaitingTermination+0x54>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	4a0b      	ldr	r2, [pc, #44]	; (8005d18 <prvCheckTasksWaitingTermination+0x54>)
 8005cea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cec:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <prvCheckTasksWaitingTermination+0x58>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	4a0a      	ldr	r2, [pc, #40]	; (8005d1c <prvCheckTasksWaitingTermination+0x58>)
 8005cf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cf6:	f000 fded 	bl	80068d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f810 	bl	8005d20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d00:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <prvCheckTasksWaitingTermination+0x58>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e1      	bne.n	8005ccc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d08:	bf00      	nop
 8005d0a:	bf00      	nop
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000eac 	.word	0x20000eac
 8005d18:	20000ed8 	.word	0x20000ed8
 8005d1c:	20000ec0 	.word	0x20000ec0

08005d20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d108      	bne.n	8005d44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 ff8a 	bl	8006c50 <vPortFree>
				vPortFree( pxTCB );
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 ff87 	bl	8006c50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d42:	e018      	b.n	8005d76 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d103      	bne.n	8005d56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 ff7e 	bl	8006c50 <vPortFree>
	}
 8005d54:	e00f      	b.n	8005d76 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d00a      	beq.n	8005d76 <prvDeleteTCB+0x56>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	60fb      	str	r3, [r7, #12]
}
 8005d72:	bf00      	nop
 8005d74:	e7fe      	b.n	8005d74 <prvDeleteTCB+0x54>
	}
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d86:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <prvResetNextTaskUnblockTime+0x38>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d104      	bne.n	8005d9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d90:	4b0a      	ldr	r3, [pc, #40]	; (8005dbc <prvResetNextTaskUnblockTime+0x3c>)
 8005d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d98:	e008      	b.n	8005dac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d9a:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <prvResetNextTaskUnblockTime+0x38>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	4a04      	ldr	r2, [pc, #16]	; (8005dbc <prvResetNextTaskUnblockTime+0x3c>)
 8005daa:	6013      	str	r3, [r2, #0]
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	20000e90 	.word	0x20000e90
 8005dbc:	20000ef8 	.word	0x20000ef8

08005dc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <xTaskGetSchedulerState+0x34>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d102      	bne.n	8005dd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	607b      	str	r3, [r7, #4]
 8005dd2:	e008      	b.n	8005de6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dd4:	4b08      	ldr	r3, [pc, #32]	; (8005df8 <xTaskGetSchedulerState+0x38>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d102      	bne.n	8005de2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ddc:	2302      	movs	r3, #2
 8005dde:	607b      	str	r3, [r7, #4]
 8005de0:	e001      	b.n	8005de6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005de2:	2300      	movs	r3, #0
 8005de4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005de6:	687b      	ldr	r3, [r7, #4]
	}
 8005de8:	4618      	mov	r0, r3
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	20000ee4 	.word	0x20000ee4
 8005df8:	20000f00 	.word	0x20000f00

08005dfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d056      	beq.n	8005ec0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e12:	4b2e      	ldr	r3, [pc, #184]	; (8005ecc <xTaskPriorityDisinherit+0xd0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d00a      	beq.n	8005e32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	60fb      	str	r3, [r7, #12]
}
 8005e2e:	bf00      	nop
 8005e30:	e7fe      	b.n	8005e30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10a      	bne.n	8005e50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	60bb      	str	r3, [r7, #8]
}
 8005e4c:	bf00      	nop
 8005e4e:	e7fe      	b.n	8005e4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e54:	1e5a      	subs	r2, r3, #1
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d02c      	beq.n	8005ec0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d128      	bne.n	8005ec0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	3304      	adds	r3, #4
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe fc70 	bl	8004758 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e90:	4b0f      	ldr	r3, [pc, #60]	; (8005ed0 <xTaskPriorityDisinherit+0xd4>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d903      	bls.n	8005ea0 <xTaskPriorityDisinherit+0xa4>
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	4a0c      	ldr	r2, [pc, #48]	; (8005ed0 <xTaskPriorityDisinherit+0xd4>)
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4a09      	ldr	r2, [pc, #36]	; (8005ed4 <xTaskPriorityDisinherit+0xd8>)
 8005eae:	441a      	add	r2, r3
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	f7fe fbf1 	bl	800469e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ec0:	697b      	ldr	r3, [r7, #20]
	}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000a04 	.word	0x20000a04
 8005ed0:	20000ee0 	.word	0x20000ee0
 8005ed4:	20000a08 	.word	0x20000a08

08005ed8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ee2:	4b21      	ldr	r3, [pc, #132]	; (8005f68 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ee8:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3304      	adds	r3, #4
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fe fc32 	bl	8004758 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005efa:	d10a      	bne.n	8005f12 <prvAddCurrentTaskToDelayedList+0x3a>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d007      	beq.n	8005f12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f02:	4b1a      	ldr	r3, [pc, #104]	; (8005f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3304      	adds	r3, #4
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4819      	ldr	r0, [pc, #100]	; (8005f70 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f0c:	f7fe fbc7 	bl	800469e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f10:	e026      	b.n	8005f60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4413      	add	r3, r2
 8005f18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f1a:	4b14      	ldr	r3, [pc, #80]	; (8005f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d209      	bcs.n	8005f3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f2a:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3304      	adds	r3, #4
 8005f34:	4619      	mov	r1, r3
 8005f36:	4610      	mov	r0, r2
 8005f38:	f7fe fbd5 	bl	80046e6 <vListInsert>
}
 8005f3c:	e010      	b.n	8005f60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f3e:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3304      	adds	r3, #4
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	f7fe fbcb 	bl	80046e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f50:	4b0a      	ldr	r3, [pc, #40]	; (8005f7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d202      	bcs.n	8005f60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f5a:	4a08      	ldr	r2, [pc, #32]	; (8005f7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	6013      	str	r3, [r2, #0]
}
 8005f60:	bf00      	nop
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20000edc 	.word	0x20000edc
 8005f6c:	20000a04 	.word	0x20000a04
 8005f70:	20000ec4 	.word	0x20000ec4
 8005f74:	20000e94 	.word	0x20000e94
 8005f78:	20000e90 	.word	0x20000e90
 8005f7c:	20000ef8 	.word	0x20000ef8

08005f80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08a      	sub	sp, #40	; 0x28
 8005f84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f8a:	f000 fb07 	bl	800659c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f8e:	4b1c      	ldr	r3, [pc, #112]	; (8006000 <xTimerCreateTimerTask+0x80>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d021      	beq.n	8005fda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f9e:	1d3a      	adds	r2, r7, #4
 8005fa0:	f107 0108 	add.w	r1, r7, #8
 8005fa4:	f107 030c 	add.w	r3, r7, #12
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fe fb31 	bl	8004610 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	9202      	str	r2, [sp, #8]
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	2302      	movs	r3, #2
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	460a      	mov	r2, r1
 8005fc0:	4910      	ldr	r1, [pc, #64]	; (8006004 <xTimerCreateTimerTask+0x84>)
 8005fc2:	4811      	ldr	r0, [pc, #68]	; (8006008 <xTimerCreateTimerTask+0x88>)
 8005fc4:	f7ff f8de 	bl	8005184 <xTaskCreateStatic>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	4a10      	ldr	r2, [pc, #64]	; (800600c <xTimerCreateTimerTask+0x8c>)
 8005fcc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005fce:	4b0f      	ldr	r3, [pc, #60]	; (800600c <xTimerCreateTimerTask+0x8c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	613b      	str	r3, [r7, #16]
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ff6:	697b      	ldr	r3, [r7, #20]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20000f34 	.word	0x20000f34
 8006004:	08009c54 	.word	0x08009c54
 8006008:	08006145 	.word	0x08006145
 800600c:	20000f38 	.word	0x20000f38

08006010 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08a      	sub	sp, #40	; 0x28
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800601e:	2300      	movs	r3, #0
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	623b      	str	r3, [r7, #32]
}
 800603a:	bf00      	nop
 800603c:	e7fe      	b.n	800603c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800603e:	4b1a      	ldr	r3, [pc, #104]	; (80060a8 <xTimerGenericCommand+0x98>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d02a      	beq.n	800609c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b05      	cmp	r3, #5
 8006056:	dc18      	bgt.n	800608a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006058:	f7ff feb2 	bl	8005dc0 <xTaskGetSchedulerState>
 800605c:	4603      	mov	r3, r0
 800605e:	2b02      	cmp	r3, #2
 8006060:	d109      	bne.n	8006076 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006062:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <xTimerGenericCommand+0x98>)
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	f107 0110 	add.w	r1, r7, #16
 800606a:	2300      	movs	r3, #0
 800606c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606e:	f7fe fca1 	bl	80049b4 <xQueueGenericSend>
 8006072:	6278      	str	r0, [r7, #36]	; 0x24
 8006074:	e012      	b.n	800609c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006076:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <xTimerGenericCommand+0x98>)
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	f107 0110 	add.w	r1, r7, #16
 800607e:	2300      	movs	r3, #0
 8006080:	2200      	movs	r2, #0
 8006082:	f7fe fc97 	bl	80049b4 <xQueueGenericSend>
 8006086:	6278      	str	r0, [r7, #36]	; 0x24
 8006088:	e008      	b.n	800609c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800608a:	4b07      	ldr	r3, [pc, #28]	; (80060a8 <xTimerGenericCommand+0x98>)
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	f107 0110 	add.w	r1, r7, #16
 8006092:	2300      	movs	r3, #0
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	f7fe fd8b 	bl	8004bb0 <xQueueGenericSendFromISR>
 800609a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3728      	adds	r7, #40	; 0x28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000f34 	.word	0x20000f34

080060ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af02      	add	r7, sp, #8
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060b6:	4b22      	ldr	r3, [pc, #136]	; (8006140 <prvProcessExpiredTimer+0x94>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	3304      	adds	r3, #4
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fe fb47 	bl	8004758 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d022      	beq.n	800611e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	699a      	ldr	r2, [r3, #24]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	18d1      	adds	r1, r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	6978      	ldr	r0, [r7, #20]
 80060e6:	f000 f8d1 	bl	800628c <prvInsertTimerInActiveList>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01f      	beq.n	8006130 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060f0:	2300      	movs	r3, #0
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	2300      	movs	r3, #0
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	2100      	movs	r1, #0
 80060fa:	6978      	ldr	r0, [r7, #20]
 80060fc:	f7ff ff88 	bl	8006010 <xTimerGenericCommand>
 8006100:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d113      	bne.n	8006130 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	60fb      	str	r3, [r7, #12]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006124:	f023 0301 	bic.w	r3, r3, #1
 8006128:	b2da      	uxtb	r2, r3
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	6978      	ldr	r0, [r7, #20]
 8006136:	4798      	blx	r3
}
 8006138:	bf00      	nop
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20000f2c 	.word	0x20000f2c

08006144 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800614c:	f107 0308 	add.w	r3, r7, #8
 8006150:	4618      	mov	r0, r3
 8006152:	f000 f857 	bl	8006204 <prvGetNextExpireTime>
 8006156:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4619      	mov	r1, r3
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 f803 	bl	8006168 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006162:	f000 f8d5 	bl	8006310 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006166:	e7f1      	b.n	800614c <prvTimerTask+0x8>

08006168 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006172:	f7ff fa43 	bl	80055fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006176:	f107 0308 	add.w	r3, r7, #8
 800617a:	4618      	mov	r0, r3
 800617c:	f000 f866 	bl	800624c <prvSampleTimeNow>
 8006180:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d130      	bne.n	80061ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <prvProcessTimerOrBlockTask+0x3c>
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	429a      	cmp	r2, r3
 8006194:	d806      	bhi.n	80061a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006196:	f7ff fa3f 	bl	8005618 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800619a:	68f9      	ldr	r1, [r7, #12]
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff ff85 	bl	80060ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80061a2:	e024      	b.n	80061ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d008      	beq.n	80061bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80061aa:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <prvProcessTimerOrBlockTask+0x90>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <prvProcessTimerOrBlockTask+0x50>
 80061b4:	2301      	movs	r3, #1
 80061b6:	e000      	b.n	80061ba <prvProcessTimerOrBlockTask+0x52>
 80061b8:	2300      	movs	r3, #0
 80061ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80061bc:	4b0f      	ldr	r3, [pc, #60]	; (80061fc <prvProcessTimerOrBlockTask+0x94>)
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	4619      	mov	r1, r3
 80061ca:	f7fe ffa7 	bl	800511c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80061ce:	f7ff fa23 	bl	8005618 <xTaskResumeAll>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10a      	bne.n	80061ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80061d8:	4b09      	ldr	r3, [pc, #36]	; (8006200 <prvProcessTimerOrBlockTask+0x98>)
 80061da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	f3bf 8f6f 	isb	sy
}
 80061e8:	e001      	b.n	80061ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061ea:	f7ff fa15 	bl	8005618 <xTaskResumeAll>
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20000f30 	.word	0x20000f30
 80061fc:	20000f34 	.word	0x20000f34
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800620c:	4b0e      	ldr	r3, [pc, #56]	; (8006248 <prvGetNextExpireTime+0x44>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <prvGetNextExpireTime+0x16>
 8006216:	2201      	movs	r2, #1
 8006218:	e000      	b.n	800621c <prvGetNextExpireTime+0x18>
 800621a:	2200      	movs	r2, #0
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d105      	bne.n	8006234 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006228:	4b07      	ldr	r3, [pc, #28]	; (8006248 <prvGetNextExpireTime+0x44>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	e001      	b.n	8006238 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006238:	68fb      	ldr	r3, [r7, #12]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	20000f2c 	.word	0x20000f2c

0800624c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006254:	f7ff fa7e 	bl	8005754 <xTaskGetTickCount>
 8006258:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800625a:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <prvSampleTimeNow+0x3c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	429a      	cmp	r2, r3
 8006262:	d205      	bcs.n	8006270 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006264:	f000 f936 	bl	80064d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e002      	b.n	8006276 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006276:	4a04      	ldr	r2, [pc, #16]	; (8006288 <prvSampleTimeNow+0x3c>)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800627c:	68fb      	ldr	r3, [r7, #12]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20000f3c 	.word	0x20000f3c

0800628c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
 8006298:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800629a:	2300      	movs	r3, #0
 800629c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d812      	bhi.n	80062d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	1ad2      	subs	r2, r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d302      	bcc.n	80062c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80062c0:	2301      	movs	r3, #1
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	e01b      	b.n	80062fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80062c6:	4b10      	ldr	r3, [pc, #64]	; (8006308 <prvInsertTimerInActiveList+0x7c>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3304      	adds	r3, #4
 80062ce:	4619      	mov	r1, r3
 80062d0:	4610      	mov	r0, r2
 80062d2:	f7fe fa08 	bl	80046e6 <vListInsert>
 80062d6:	e012      	b.n	80062fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d206      	bcs.n	80062ee <prvInsertTimerInActiveList+0x62>
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d302      	bcc.n	80062ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062e8:	2301      	movs	r3, #1
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	e007      	b.n	80062fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062ee:	4b07      	ldr	r3, [pc, #28]	; (800630c <prvInsertTimerInActiveList+0x80>)
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	3304      	adds	r3, #4
 80062f6:	4619      	mov	r1, r3
 80062f8:	4610      	mov	r0, r2
 80062fa:	f7fe f9f4 	bl	80046e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062fe:	697b      	ldr	r3, [r7, #20]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	20000f30 	.word	0x20000f30
 800630c:	20000f2c 	.word	0x20000f2c

08006310 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08e      	sub	sp, #56	; 0x38
 8006314:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006316:	e0ca      	b.n	80064ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	da18      	bge.n	8006350 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800631e:	1d3b      	adds	r3, r7, #4
 8006320:	3304      	adds	r3, #4
 8006322:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10a      	bne.n	8006340 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	61fb      	str	r3, [r7, #28]
}
 800633c:	bf00      	nop
 800633e:	e7fe      	b.n	800633e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006346:	6850      	ldr	r0, [r2, #4]
 8006348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800634a:	6892      	ldr	r2, [r2, #8]
 800634c:	4611      	mov	r1, r2
 800634e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	f2c0 80ab 	blt.w	80064ae <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d004      	beq.n	800636e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	3304      	adds	r3, #4
 8006368:	4618      	mov	r0, r3
 800636a:	f7fe f9f5 	bl	8004758 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800636e:	463b      	mov	r3, r7
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff ff6b 	bl	800624c <prvSampleTimeNow>
 8006376:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b09      	cmp	r3, #9
 800637c:	f200 8096 	bhi.w	80064ac <prvProcessReceivedCommands+0x19c>
 8006380:	a201      	add	r2, pc, #4	; (adr r2, 8006388 <prvProcessReceivedCommands+0x78>)
 8006382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006386:	bf00      	nop
 8006388:	080063b1 	.word	0x080063b1
 800638c:	080063b1 	.word	0x080063b1
 8006390:	080063b1 	.word	0x080063b1
 8006394:	08006425 	.word	0x08006425
 8006398:	08006439 	.word	0x08006439
 800639c:	08006483 	.word	0x08006483
 80063a0:	080063b1 	.word	0x080063b1
 80063a4:	080063b1 	.word	0x080063b1
 80063a8:	08006425 	.word	0x08006425
 80063ac:	08006439 	.word	0x08006439
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	18d1      	adds	r1, r2, r3
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063d0:	f7ff ff5c 	bl	800628c <prvInsertTimerInActiveList>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d069      	beq.n	80064ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d05e      	beq.n	80064ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	441a      	add	r2, r3
 80063f8:	2300      	movs	r3, #0
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	2300      	movs	r3, #0
 80063fe:	2100      	movs	r1, #0
 8006400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006402:	f7ff fe05 	bl	8006010 <xTimerGenericCommand>
 8006406:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d14f      	bne.n	80064ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	61bb      	str	r3, [r7, #24]
}
 8006420:	bf00      	nop
 8006422:	e7fe      	b.n	8006422 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800642a:	f023 0301 	bic.w	r3, r3, #1
 800642e:	b2da      	uxtb	r2, r3
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006436:	e03a      	b.n	80064ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800643e:	f043 0301 	orr.w	r3, r3, #1
 8006442:	b2da      	uxtb	r2, r3
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10a      	bne.n	800646e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	617b      	str	r3, [r7, #20]
}
 800646a:	bf00      	nop
 800646c:	e7fe      	b.n	800646c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	699a      	ldr	r2, [r3, #24]
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	18d1      	adds	r1, r2, r3
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800647a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800647c:	f7ff ff06 	bl	800628c <prvInsertTimerInActiveList>
					break;
 8006480:	e015      	b.n	80064ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d103      	bne.n	8006498 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006492:	f000 fbdd 	bl	8006c50 <vPortFree>
 8006496:	e00a      	b.n	80064ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800649e:	f023 0301 	bic.w	r3, r3, #1
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80064aa:	e000      	b.n	80064ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80064ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064ae:	4b08      	ldr	r3, [pc, #32]	; (80064d0 <prvProcessReceivedCommands+0x1c0>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	1d39      	adds	r1, r7, #4
 80064b4:	2200      	movs	r2, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe fc16 	bl	8004ce8 <xQueueReceive>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f47f af2a 	bne.w	8006318 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80064c4:	bf00      	nop
 80064c6:	bf00      	nop
 80064c8:	3730      	adds	r7, #48	; 0x30
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20000f34 	.word	0x20000f34

080064d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064da:	e048      	b.n	800656e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064dc:	4b2d      	ldr	r3, [pc, #180]	; (8006594 <prvSwitchTimerLists+0xc0>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064e6:	4b2b      	ldr	r3, [pc, #172]	; (8006594 <prvSwitchTimerLists+0xc0>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3304      	adds	r3, #4
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fe f92f 	bl	8004758 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d02e      	beq.n	800656e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	4413      	add	r3, r2
 8006518:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	429a      	cmp	r2, r3
 8006520:	d90e      	bls.n	8006540 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800652e:	4b19      	ldr	r3, [pc, #100]	; (8006594 <prvSwitchTimerLists+0xc0>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3304      	adds	r3, #4
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f7fe f8d4 	bl	80046e6 <vListInsert>
 800653e:	e016      	b.n	800656e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006540:	2300      	movs	r3, #0
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	2300      	movs	r3, #0
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	2100      	movs	r1, #0
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f7ff fd60 	bl	8006010 <xTimerGenericCommand>
 8006550:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	f383 8811 	msr	BASEPRI, r3
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	603b      	str	r3, [r7, #0]
}
 800656a:	bf00      	nop
 800656c:	e7fe      	b.n	800656c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800656e:	4b09      	ldr	r3, [pc, #36]	; (8006594 <prvSwitchTimerLists+0xc0>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1b1      	bne.n	80064dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006578:	4b06      	ldr	r3, [pc, #24]	; (8006594 <prvSwitchTimerLists+0xc0>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800657e:	4b06      	ldr	r3, [pc, #24]	; (8006598 <prvSwitchTimerLists+0xc4>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a04      	ldr	r2, [pc, #16]	; (8006594 <prvSwitchTimerLists+0xc0>)
 8006584:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006586:	4a04      	ldr	r2, [pc, #16]	; (8006598 <prvSwitchTimerLists+0xc4>)
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	6013      	str	r3, [r2, #0]
}
 800658c:	bf00      	nop
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	20000f2c 	.word	0x20000f2c
 8006598:	20000f30 	.word	0x20000f30

0800659c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80065a2:	f000 f967 	bl	8006874 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80065a6:	4b15      	ldr	r3, [pc, #84]	; (80065fc <prvCheckForValidListAndQueue+0x60>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d120      	bne.n	80065f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80065ae:	4814      	ldr	r0, [pc, #80]	; (8006600 <prvCheckForValidListAndQueue+0x64>)
 80065b0:	f7fe f848 	bl	8004644 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80065b4:	4813      	ldr	r0, [pc, #76]	; (8006604 <prvCheckForValidListAndQueue+0x68>)
 80065b6:	f7fe f845 	bl	8004644 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80065ba:	4b13      	ldr	r3, [pc, #76]	; (8006608 <prvCheckForValidListAndQueue+0x6c>)
 80065bc:	4a10      	ldr	r2, [pc, #64]	; (8006600 <prvCheckForValidListAndQueue+0x64>)
 80065be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80065c0:	4b12      	ldr	r3, [pc, #72]	; (800660c <prvCheckForValidListAndQueue+0x70>)
 80065c2:	4a10      	ldr	r2, [pc, #64]	; (8006604 <prvCheckForValidListAndQueue+0x68>)
 80065c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80065c6:	2300      	movs	r3, #0
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	4b11      	ldr	r3, [pc, #68]	; (8006610 <prvCheckForValidListAndQueue+0x74>)
 80065cc:	4a11      	ldr	r2, [pc, #68]	; (8006614 <prvCheckForValidListAndQueue+0x78>)
 80065ce:	2110      	movs	r1, #16
 80065d0:	200a      	movs	r0, #10
 80065d2:	f7fe f953 	bl	800487c <xQueueGenericCreateStatic>
 80065d6:	4603      	mov	r3, r0
 80065d8:	4a08      	ldr	r2, [pc, #32]	; (80065fc <prvCheckForValidListAndQueue+0x60>)
 80065da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80065dc:	4b07      	ldr	r3, [pc, #28]	; (80065fc <prvCheckForValidListAndQueue+0x60>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d005      	beq.n	80065f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80065e4:	4b05      	ldr	r3, [pc, #20]	; (80065fc <prvCheckForValidListAndQueue+0x60>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	490b      	ldr	r1, [pc, #44]	; (8006618 <prvCheckForValidListAndQueue+0x7c>)
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe fd6c 	bl	80050c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065f0:	f000 f970 	bl	80068d4 <vPortExitCritical>
}
 80065f4:	bf00      	nop
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20000f34 	.word	0x20000f34
 8006600:	20000f04 	.word	0x20000f04
 8006604:	20000f18 	.word	0x20000f18
 8006608:	20000f2c 	.word	0x20000f2c
 800660c:	20000f30 	.word	0x20000f30
 8006610:	20000fe0 	.word	0x20000fe0
 8006614:	20000f40 	.word	0x20000f40
 8006618:	08009c5c 	.word	0x08009c5c

0800661c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3b04      	subs	r3, #4
 800662c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3b04      	subs	r3, #4
 800663a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f023 0201 	bic.w	r2, r3, #1
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3b04      	subs	r3, #4
 800664a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800664c:	4a0c      	ldr	r2, [pc, #48]	; (8006680 <pxPortInitialiseStack+0x64>)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	3b14      	subs	r3, #20
 8006656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3b04      	subs	r3, #4
 8006662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f06f 0202 	mvn.w	r2, #2
 800666a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3b20      	subs	r3, #32
 8006670:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006672:	68fb      	ldr	r3, [r7, #12]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	08006685 	.word	0x08006685

08006684 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800668e:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <prvTaskExitError+0x54>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006696:	d00a      	beq.n	80066ae <prvTaskExitError+0x2a>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	60fb      	str	r3, [r7, #12]
}
 80066aa:	bf00      	nop
 80066ac:	e7fe      	b.n	80066ac <prvTaskExitError+0x28>
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	60bb      	str	r3, [r7, #8]
}
 80066c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066c2:	bf00      	nop
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0fc      	beq.n	80066c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066ca:	bf00      	nop
 80066cc:	bf00      	nop
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	20000010 	.word	0x20000010
 80066dc:	00000000 	.word	0x00000000

080066e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066e0:	4b07      	ldr	r3, [pc, #28]	; (8006700 <pxCurrentTCBConst2>)
 80066e2:	6819      	ldr	r1, [r3, #0]
 80066e4:	6808      	ldr	r0, [r1, #0]
 80066e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ea:	f380 8809 	msr	PSP, r0
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f04f 0000 	mov.w	r0, #0
 80066f6:	f380 8811 	msr	BASEPRI, r0
 80066fa:	4770      	bx	lr
 80066fc:	f3af 8000 	nop.w

08006700 <pxCurrentTCBConst2>:
 8006700:	20000a04 	.word	0x20000a04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop

08006708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006708:	4808      	ldr	r0, [pc, #32]	; (800672c <prvPortStartFirstTask+0x24>)
 800670a:	6800      	ldr	r0, [r0, #0]
 800670c:	6800      	ldr	r0, [r0, #0]
 800670e:	f380 8808 	msr	MSP, r0
 8006712:	f04f 0000 	mov.w	r0, #0
 8006716:	f380 8814 	msr	CONTROL, r0
 800671a:	b662      	cpsie	i
 800671c:	b661      	cpsie	f
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	df00      	svc	0
 8006728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800672a:	bf00      	nop
 800672c:	e000ed08 	.word	0xe000ed08

08006730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006736:	4b46      	ldr	r3, [pc, #280]	; (8006850 <xPortStartScheduler+0x120>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a46      	ldr	r2, [pc, #280]	; (8006854 <xPortStartScheduler+0x124>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d10a      	bne.n	8006756 <xPortStartScheduler+0x26>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	613b      	str	r3, [r7, #16]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006756:	4b3e      	ldr	r3, [pc, #248]	; (8006850 <xPortStartScheduler+0x120>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a3f      	ldr	r2, [pc, #252]	; (8006858 <xPortStartScheduler+0x128>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d10a      	bne.n	8006776 <xPortStartScheduler+0x46>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	60fb      	str	r3, [r7, #12]
}
 8006772:	bf00      	nop
 8006774:	e7fe      	b.n	8006774 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006776:	4b39      	ldr	r3, [pc, #228]	; (800685c <xPortStartScheduler+0x12c>)
 8006778:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	b2db      	uxtb	r3, r3
 8006780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	22ff      	movs	r2, #255	; 0xff
 8006786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	b2db      	uxtb	r3, r3
 800678e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006798:	b2da      	uxtb	r2, r3
 800679a:	4b31      	ldr	r3, [pc, #196]	; (8006860 <xPortStartScheduler+0x130>)
 800679c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800679e:	4b31      	ldr	r3, [pc, #196]	; (8006864 <xPortStartScheduler+0x134>)
 80067a0:	2207      	movs	r2, #7
 80067a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067a4:	e009      	b.n	80067ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80067a6:	4b2f      	ldr	r3, [pc, #188]	; (8006864 <xPortStartScheduler+0x134>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	4a2d      	ldr	r2, [pc, #180]	; (8006864 <xPortStartScheduler+0x134>)
 80067ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067ba:	78fb      	ldrb	r3, [r7, #3]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c2:	2b80      	cmp	r3, #128	; 0x80
 80067c4:	d0ef      	beq.n	80067a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067c6:	4b27      	ldr	r3, [pc, #156]	; (8006864 <xPortStartScheduler+0x134>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f1c3 0307 	rsb	r3, r3, #7
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d00a      	beq.n	80067e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	60bb      	str	r3, [r7, #8]
}
 80067e4:	bf00      	nop
 80067e6:	e7fe      	b.n	80067e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067e8:	4b1e      	ldr	r3, [pc, #120]	; (8006864 <xPortStartScheduler+0x134>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	021b      	lsls	r3, r3, #8
 80067ee:	4a1d      	ldr	r2, [pc, #116]	; (8006864 <xPortStartScheduler+0x134>)
 80067f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067f2:	4b1c      	ldr	r3, [pc, #112]	; (8006864 <xPortStartScheduler+0x134>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067fa:	4a1a      	ldr	r2, [pc, #104]	; (8006864 <xPortStartScheduler+0x134>)
 80067fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	b2da      	uxtb	r2, r3
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006806:	4b18      	ldr	r3, [pc, #96]	; (8006868 <xPortStartScheduler+0x138>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a17      	ldr	r2, [pc, #92]	; (8006868 <xPortStartScheduler+0x138>)
 800680c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006812:	4b15      	ldr	r3, [pc, #84]	; (8006868 <xPortStartScheduler+0x138>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a14      	ldr	r2, [pc, #80]	; (8006868 <xPortStartScheduler+0x138>)
 8006818:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800681c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800681e:	f000 f8dd 	bl	80069dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006822:	4b12      	ldr	r3, [pc, #72]	; (800686c <xPortStartScheduler+0x13c>)
 8006824:	2200      	movs	r2, #0
 8006826:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006828:	f000 f8fc 	bl	8006a24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800682c:	4b10      	ldr	r3, [pc, #64]	; (8006870 <xPortStartScheduler+0x140>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a0f      	ldr	r2, [pc, #60]	; (8006870 <xPortStartScheduler+0x140>)
 8006832:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006836:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006838:	f7ff ff66 	bl	8006708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800683c:	f7ff f854 	bl	80058e8 <vTaskSwitchContext>
	prvTaskExitError();
 8006840:	f7ff ff20 	bl	8006684 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	e000ed00 	.word	0xe000ed00
 8006854:	410fc271 	.word	0x410fc271
 8006858:	410fc270 	.word	0x410fc270
 800685c:	e000e400 	.word	0xe000e400
 8006860:	20001030 	.word	0x20001030
 8006864:	20001034 	.word	0x20001034
 8006868:	e000ed20 	.word	0xe000ed20
 800686c:	20000010 	.word	0x20000010
 8006870:	e000ef34 	.word	0xe000ef34

08006874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	607b      	str	r3, [r7, #4]
}
 800688c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800688e:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <vPortEnterCritical+0x58>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3301      	adds	r3, #1
 8006894:	4a0d      	ldr	r2, [pc, #52]	; (80068cc <vPortEnterCritical+0x58>)
 8006896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006898:	4b0c      	ldr	r3, [pc, #48]	; (80068cc <vPortEnterCritical+0x58>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d10f      	bne.n	80068c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068a0:	4b0b      	ldr	r3, [pc, #44]	; (80068d0 <vPortEnterCritical+0x5c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	603b      	str	r3, [r7, #0]
}
 80068bc:	bf00      	nop
 80068be:	e7fe      	b.n	80068be <vPortEnterCritical+0x4a>
	}
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	20000010 	.word	0x20000010
 80068d0:	e000ed04 	.word	0xe000ed04

080068d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068da:	4b12      	ldr	r3, [pc, #72]	; (8006924 <vPortExitCritical+0x50>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10a      	bne.n	80068f8 <vPortExitCritical+0x24>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	607b      	str	r3, [r7, #4]
}
 80068f4:	bf00      	nop
 80068f6:	e7fe      	b.n	80068f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068f8:	4b0a      	ldr	r3, [pc, #40]	; (8006924 <vPortExitCritical+0x50>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3b01      	subs	r3, #1
 80068fe:	4a09      	ldr	r2, [pc, #36]	; (8006924 <vPortExitCritical+0x50>)
 8006900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006902:	4b08      	ldr	r3, [pc, #32]	; (8006924 <vPortExitCritical+0x50>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d105      	bne.n	8006916 <vPortExitCritical+0x42>
 800690a:	2300      	movs	r3, #0
 800690c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	f383 8811 	msr	BASEPRI, r3
}
 8006914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	20000010 	.word	0x20000010
	...

08006930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006930:	f3ef 8009 	mrs	r0, PSP
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	4b15      	ldr	r3, [pc, #84]	; (8006990 <pxCurrentTCBConst>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	f01e 0f10 	tst.w	lr, #16
 8006940:	bf08      	it	eq
 8006942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694a:	6010      	str	r0, [r2, #0]
 800694c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006954:	f380 8811 	msr	BASEPRI, r0
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f7fe ffc2 	bl	80058e8 <vTaskSwitchContext>
 8006964:	f04f 0000 	mov.w	r0, #0
 8006968:	f380 8811 	msr	BASEPRI, r0
 800696c:	bc09      	pop	{r0, r3}
 800696e:	6819      	ldr	r1, [r3, #0]
 8006970:	6808      	ldr	r0, [r1, #0]
 8006972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006976:	f01e 0f10 	tst.w	lr, #16
 800697a:	bf08      	it	eq
 800697c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006980:	f380 8809 	msr	PSP, r0
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	f3af 8000 	nop.w

08006990 <pxCurrentTCBConst>:
 8006990:	20000a04 	.word	0x20000a04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop

08006998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	607b      	str	r3, [r7, #4]
}
 80069b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069b2:	f7fe fedf 	bl	8005774 <xTaskIncrementTick>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069bc:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <xPortSysTickHandler+0x40>)
 80069be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	2300      	movs	r3, #0
 80069c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	f383 8811 	msr	BASEPRI, r3
}
 80069ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069d0:	bf00      	nop
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	e000ed04 	.word	0xe000ed04

080069dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069e0:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <vPortSetupTimerInterrupt+0x34>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069e6:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <vPortSetupTimerInterrupt+0x38>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069ec:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <vPortSetupTimerInterrupt+0x3c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a0a      	ldr	r2, [pc, #40]	; (8006a1c <vPortSetupTimerInterrupt+0x40>)
 80069f2:	fba2 2303 	umull	r2, r3, r2, r3
 80069f6:	099b      	lsrs	r3, r3, #6
 80069f8:	4a09      	ldr	r2, [pc, #36]	; (8006a20 <vPortSetupTimerInterrupt+0x44>)
 80069fa:	3b01      	subs	r3, #1
 80069fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069fe:	4b04      	ldr	r3, [pc, #16]	; (8006a10 <vPortSetupTimerInterrupt+0x34>)
 8006a00:	2207      	movs	r2, #7
 8006a02:	601a      	str	r2, [r3, #0]
}
 8006a04:	bf00      	nop
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	e000e010 	.word	0xe000e010
 8006a14:	e000e018 	.word	0xe000e018
 8006a18:	20000004 	.word	0x20000004
 8006a1c:	10624dd3 	.word	0x10624dd3
 8006a20:	e000e014 	.word	0xe000e014

08006a24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a34 <vPortEnableVFP+0x10>
 8006a28:	6801      	ldr	r1, [r0, #0]
 8006a2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a2e:	6001      	str	r1, [r0, #0]
 8006a30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a32:	bf00      	nop
 8006a34:	e000ed88 	.word	0xe000ed88

08006a38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a3e:	f3ef 8305 	mrs	r3, IPSR
 8006a42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b0f      	cmp	r3, #15
 8006a48:	d914      	bls.n	8006a74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a4a:	4a17      	ldr	r2, [pc, #92]	; (8006aa8 <vPortValidateInterruptPriority+0x70>)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4413      	add	r3, r2
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a54:	4b15      	ldr	r3, [pc, #84]	; (8006aac <vPortValidateInterruptPriority+0x74>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	7afa      	ldrb	r2, [r7, #11]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d20a      	bcs.n	8006a74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	607b      	str	r3, [r7, #4]
}
 8006a70:	bf00      	nop
 8006a72:	e7fe      	b.n	8006a72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a74:	4b0e      	ldr	r3, [pc, #56]	; (8006ab0 <vPortValidateInterruptPriority+0x78>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a7c:	4b0d      	ldr	r3, [pc, #52]	; (8006ab4 <vPortValidateInterruptPriority+0x7c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d90a      	bls.n	8006a9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	603b      	str	r3, [r7, #0]
}
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <vPortValidateInterruptPriority+0x60>
	}
 8006a9a:	bf00      	nop
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	e000e3f0 	.word	0xe000e3f0
 8006aac:	20001030 	.word	0x20001030
 8006ab0:	e000ed0c 	.word	0xe000ed0c
 8006ab4:	20001034 	.word	0x20001034

08006ab8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08a      	sub	sp, #40	; 0x28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ac4:	f7fe fd9a 	bl	80055fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ac8:	4b5b      	ldr	r3, [pc, #364]	; (8006c38 <pvPortMalloc+0x180>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ad0:	f000 f920 	bl	8006d14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ad4:	4b59      	ldr	r3, [pc, #356]	; (8006c3c <pvPortMalloc+0x184>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4013      	ands	r3, r2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f040 8093 	bne.w	8006c08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01d      	beq.n	8006b24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ae8:	2208      	movs	r2, #8
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4413      	add	r3, r2
 8006aee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d014      	beq.n	8006b24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f023 0307 	bic.w	r3, r3, #7
 8006b00:	3308      	adds	r3, #8
 8006b02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f003 0307 	and.w	r3, r3, #7
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <pvPortMalloc+0x6c>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	617b      	str	r3, [r7, #20]
}
 8006b20:	bf00      	nop
 8006b22:	e7fe      	b.n	8006b22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d06e      	beq.n	8006c08 <pvPortMalloc+0x150>
 8006b2a:	4b45      	ldr	r3, [pc, #276]	; (8006c40 <pvPortMalloc+0x188>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d869      	bhi.n	8006c08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b34:	4b43      	ldr	r3, [pc, #268]	; (8006c44 <pvPortMalloc+0x18c>)
 8006b36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b38:	4b42      	ldr	r3, [pc, #264]	; (8006c44 <pvPortMalloc+0x18c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b3e:	e004      	b.n	8006b4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d903      	bls.n	8006b5c <pvPortMalloc+0xa4>
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1f1      	bne.n	8006b40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b5c:	4b36      	ldr	r3, [pc, #216]	; (8006c38 <pvPortMalloc+0x180>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d050      	beq.n	8006c08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2208      	movs	r2, #8
 8006b6c:	4413      	add	r3, r2
 8006b6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	1ad2      	subs	r2, r2, r3
 8006b80:	2308      	movs	r3, #8
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d91f      	bls.n	8006bc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	f003 0307 	and.w	r3, r3, #7
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00a      	beq.n	8006bb0 <pvPortMalloc+0xf8>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	613b      	str	r3, [r7, #16]
}
 8006bac:	bf00      	nop
 8006bae:	e7fe      	b.n	8006bae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	1ad2      	subs	r2, r2, r3
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bc2:	69b8      	ldr	r0, [r7, #24]
 8006bc4:	f000 f908 	bl	8006dd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bc8:	4b1d      	ldr	r3, [pc, #116]	; (8006c40 <pvPortMalloc+0x188>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	4a1b      	ldr	r2, [pc, #108]	; (8006c40 <pvPortMalloc+0x188>)
 8006bd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bd6:	4b1a      	ldr	r3, [pc, #104]	; (8006c40 <pvPortMalloc+0x188>)
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	4b1b      	ldr	r3, [pc, #108]	; (8006c48 <pvPortMalloc+0x190>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d203      	bcs.n	8006bea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006be2:	4b17      	ldr	r3, [pc, #92]	; (8006c40 <pvPortMalloc+0x188>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a18      	ldr	r2, [pc, #96]	; (8006c48 <pvPortMalloc+0x190>)
 8006be8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <pvPortMalloc+0x184>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006bfe:	4b13      	ldr	r3, [pc, #76]	; (8006c4c <pvPortMalloc+0x194>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3301      	adds	r3, #1
 8006c04:	4a11      	ldr	r2, [pc, #68]	; (8006c4c <pvPortMalloc+0x194>)
 8006c06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c08:	f7fe fd06 	bl	8005618 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	f003 0307 	and.w	r3, r3, #7
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <pvPortMalloc+0x174>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	60fb      	str	r3, [r7, #12]
}
 8006c28:	bf00      	nop
 8006c2a:	e7fe      	b.n	8006c2a <pvPortMalloc+0x172>
	return pvReturn;
 8006c2c:	69fb      	ldr	r3, [r7, #28]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3728      	adds	r7, #40	; 0x28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20004c40 	.word	0x20004c40
 8006c3c:	20004c54 	.word	0x20004c54
 8006c40:	20004c44 	.word	0x20004c44
 8006c44:	20004c38 	.word	0x20004c38
 8006c48:	20004c48 	.word	0x20004c48
 8006c4c:	20004c4c 	.word	0x20004c4c

08006c50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d04d      	beq.n	8006cfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c62:	2308      	movs	r3, #8
 8006c64:	425b      	negs	r3, r3
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	4413      	add	r3, r2
 8006c6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	4b24      	ldr	r3, [pc, #144]	; (8006d08 <vPortFree+0xb8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10a      	bne.n	8006c94 <vPortFree+0x44>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	60fb      	str	r3, [r7, #12]
}
 8006c90:	bf00      	nop
 8006c92:	e7fe      	b.n	8006c92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00a      	beq.n	8006cb2 <vPortFree+0x62>
	__asm volatile
 8006c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	60bb      	str	r3, [r7, #8]
}
 8006cae:	bf00      	nop
 8006cb0:	e7fe      	b.n	8006cb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	4b14      	ldr	r3, [pc, #80]	; (8006d08 <vPortFree+0xb8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d01e      	beq.n	8006cfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d11a      	bne.n	8006cfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	4b0e      	ldr	r3, [pc, #56]	; (8006d08 <vPortFree+0xb8>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	43db      	mvns	r3, r3
 8006cd2:	401a      	ands	r2, r3
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006cd8:	f7fe fc90 	bl	80055fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <vPortFree+0xbc>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	4a09      	ldr	r2, [pc, #36]	; (8006d0c <vPortFree+0xbc>)
 8006ce8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cea:	6938      	ldr	r0, [r7, #16]
 8006cec:	f000 f874 	bl	8006dd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006cf0:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <vPortFree+0xc0>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	4a06      	ldr	r2, [pc, #24]	; (8006d10 <vPortFree+0xc0>)
 8006cf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006cfa:	f7fe fc8d 	bl	8005618 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cfe:	bf00      	nop
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20004c54 	.word	0x20004c54
 8006d0c:	20004c44 	.word	0x20004c44
 8006d10:	20004c50 	.word	0x20004c50

08006d14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d20:	4b27      	ldr	r3, [pc, #156]	; (8006dc0 <prvHeapInit+0xac>)
 8006d22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00c      	beq.n	8006d48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3307      	adds	r3, #7
 8006d32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0307 	bic.w	r3, r3, #7
 8006d3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	4a1f      	ldr	r2, [pc, #124]	; (8006dc0 <prvHeapInit+0xac>)
 8006d44:	4413      	add	r3, r2
 8006d46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d4c:	4a1d      	ldr	r2, [pc, #116]	; (8006dc4 <prvHeapInit+0xb0>)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d52:	4b1c      	ldr	r3, [pc, #112]	; (8006dc4 <prvHeapInit+0xb0>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d60:	2208      	movs	r2, #8
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	1a9b      	subs	r3, r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0307 	bic.w	r3, r3, #7
 8006d6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4a15      	ldr	r2, [pc, #84]	; (8006dc8 <prvHeapInit+0xb4>)
 8006d74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d76:	4b14      	ldr	r3, [pc, #80]	; (8006dc8 <prvHeapInit+0xb4>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d7e:	4b12      	ldr	r3, [pc, #72]	; (8006dc8 <prvHeapInit+0xb4>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	1ad2      	subs	r2, r2, r3
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d94:	4b0c      	ldr	r3, [pc, #48]	; (8006dc8 <prvHeapInit+0xb4>)
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	4a0a      	ldr	r2, [pc, #40]	; (8006dcc <prvHeapInit+0xb8>)
 8006da2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	4a09      	ldr	r2, [pc, #36]	; (8006dd0 <prvHeapInit+0xbc>)
 8006daa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dac:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <prvHeapInit+0xc0>)
 8006dae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006db2:	601a      	str	r2, [r3, #0]
}
 8006db4:	bf00      	nop
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	20001038 	.word	0x20001038
 8006dc4:	20004c38 	.word	0x20004c38
 8006dc8:	20004c40 	.word	0x20004c40
 8006dcc:	20004c48 	.word	0x20004c48
 8006dd0:	20004c44 	.word	0x20004c44
 8006dd4:	20004c54 	.word	0x20004c54

08006dd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006de0:	4b28      	ldr	r3, [pc, #160]	; (8006e84 <prvInsertBlockIntoFreeList+0xac>)
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	e002      	b.n	8006dec <prvInsertBlockIntoFreeList+0x14>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d8f7      	bhi.n	8006de6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	4413      	add	r3, r2
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d108      	bne.n	8006e1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	441a      	add	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	441a      	add	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d118      	bne.n	8006e60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	4b15      	ldr	r3, [pc, #84]	; (8006e88 <prvInsertBlockIntoFreeList+0xb0>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d00d      	beq.n	8006e56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	441a      	add	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	e008      	b.n	8006e68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e56:	4b0c      	ldr	r3, [pc, #48]	; (8006e88 <prvInsertBlockIntoFreeList+0xb0>)
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	e003      	b.n	8006e68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d002      	beq.n	8006e76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e76:	bf00      	nop
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	20004c38 	.word	0x20004c38
 8006e88:	20004c40 	.word	0x20004c40

08006e8c <__assert_func>:
 8006e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e8e:	4614      	mov	r4, r2
 8006e90:	461a      	mov	r2, r3
 8006e92:	4b09      	ldr	r3, [pc, #36]	; (8006eb8 <__assert_func+0x2c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4605      	mov	r5, r0
 8006e98:	68d8      	ldr	r0, [r3, #12]
 8006e9a:	b14c      	cbz	r4, 8006eb0 <__assert_func+0x24>
 8006e9c:	4b07      	ldr	r3, [pc, #28]	; (8006ebc <__assert_func+0x30>)
 8006e9e:	9100      	str	r1, [sp, #0]
 8006ea0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ea4:	4906      	ldr	r1, [pc, #24]	; (8006ec0 <__assert_func+0x34>)
 8006ea6:	462b      	mov	r3, r5
 8006ea8:	f000 fd38 	bl	800791c <fiprintf>
 8006eac:	f000 fdad 	bl	8007a0a <abort>
 8006eb0:	4b04      	ldr	r3, [pc, #16]	; (8006ec4 <__assert_func+0x38>)
 8006eb2:	461c      	mov	r4, r3
 8006eb4:	e7f3      	b.n	8006e9e <__assert_func+0x12>
 8006eb6:	bf00      	nop
 8006eb8:	2000006c 	.word	0x2000006c
 8006ebc:	08009cac 	.word	0x08009cac
 8006ec0:	08009cb9 	.word	0x08009cb9
 8006ec4:	08009ce7 	.word	0x08009ce7

08006ec8 <__cvt>:
 8006ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ecc:	ec55 4b10 	vmov	r4, r5, d0
 8006ed0:	2d00      	cmp	r5, #0
 8006ed2:	460e      	mov	r6, r1
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	462b      	mov	r3, r5
 8006ed8:	bfbb      	ittet	lt
 8006eda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ede:	461d      	movlt	r5, r3
 8006ee0:	2300      	movge	r3, #0
 8006ee2:	232d      	movlt	r3, #45	; 0x2d
 8006ee4:	700b      	strb	r3, [r1, #0]
 8006ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ee8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006eec:	4691      	mov	r9, r2
 8006eee:	f023 0820 	bic.w	r8, r3, #32
 8006ef2:	bfbc      	itt	lt
 8006ef4:	4622      	movlt	r2, r4
 8006ef6:	4614      	movlt	r4, r2
 8006ef8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006efc:	d005      	beq.n	8006f0a <__cvt+0x42>
 8006efe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f02:	d100      	bne.n	8006f06 <__cvt+0x3e>
 8006f04:	3601      	adds	r6, #1
 8006f06:	2102      	movs	r1, #2
 8006f08:	e000      	b.n	8006f0c <__cvt+0x44>
 8006f0a:	2103      	movs	r1, #3
 8006f0c:	ab03      	add	r3, sp, #12
 8006f0e:	9301      	str	r3, [sp, #4]
 8006f10:	ab02      	add	r3, sp, #8
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	ec45 4b10 	vmov	d0, r4, r5
 8006f18:	4653      	mov	r3, sl
 8006f1a:	4632      	mov	r2, r6
 8006f1c:	f000 fe04 	bl	8007b28 <_dtoa_r>
 8006f20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f24:	4607      	mov	r7, r0
 8006f26:	d102      	bne.n	8006f2e <__cvt+0x66>
 8006f28:	f019 0f01 	tst.w	r9, #1
 8006f2c:	d022      	beq.n	8006f74 <__cvt+0xac>
 8006f2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f32:	eb07 0906 	add.w	r9, r7, r6
 8006f36:	d110      	bne.n	8006f5a <__cvt+0x92>
 8006f38:	783b      	ldrb	r3, [r7, #0]
 8006f3a:	2b30      	cmp	r3, #48	; 0x30
 8006f3c:	d10a      	bne.n	8006f54 <__cvt+0x8c>
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2300      	movs	r3, #0
 8006f42:	4620      	mov	r0, r4
 8006f44:	4629      	mov	r1, r5
 8006f46:	f7f9 fdbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f4a:	b918      	cbnz	r0, 8006f54 <__cvt+0x8c>
 8006f4c:	f1c6 0601 	rsb	r6, r6, #1
 8006f50:	f8ca 6000 	str.w	r6, [sl]
 8006f54:	f8da 3000 	ldr.w	r3, [sl]
 8006f58:	4499      	add	r9, r3
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	4620      	mov	r0, r4
 8006f60:	4629      	mov	r1, r5
 8006f62:	f7f9 fdb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f66:	b108      	cbz	r0, 8006f6c <__cvt+0xa4>
 8006f68:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f6c:	2230      	movs	r2, #48	; 0x30
 8006f6e:	9b03      	ldr	r3, [sp, #12]
 8006f70:	454b      	cmp	r3, r9
 8006f72:	d307      	bcc.n	8006f84 <__cvt+0xbc>
 8006f74:	9b03      	ldr	r3, [sp, #12]
 8006f76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f78:	1bdb      	subs	r3, r3, r7
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	b004      	add	sp, #16
 8006f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f84:	1c59      	adds	r1, r3, #1
 8006f86:	9103      	str	r1, [sp, #12]
 8006f88:	701a      	strb	r2, [r3, #0]
 8006f8a:	e7f0      	b.n	8006f6e <__cvt+0xa6>

08006f8c <__exponent>:
 8006f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2900      	cmp	r1, #0
 8006f92:	bfb8      	it	lt
 8006f94:	4249      	neglt	r1, r1
 8006f96:	f803 2b02 	strb.w	r2, [r3], #2
 8006f9a:	bfb4      	ite	lt
 8006f9c:	222d      	movlt	r2, #45	; 0x2d
 8006f9e:	222b      	movge	r2, #43	; 0x2b
 8006fa0:	2909      	cmp	r1, #9
 8006fa2:	7042      	strb	r2, [r0, #1]
 8006fa4:	dd2a      	ble.n	8006ffc <__exponent+0x70>
 8006fa6:	f10d 0207 	add.w	r2, sp, #7
 8006faa:	4617      	mov	r7, r2
 8006fac:	260a      	movs	r6, #10
 8006fae:	4694      	mov	ip, r2
 8006fb0:	fb91 f5f6 	sdiv	r5, r1, r6
 8006fb4:	fb06 1415 	mls	r4, r6, r5, r1
 8006fb8:	3430      	adds	r4, #48	; 0x30
 8006fba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006fbe:	460c      	mov	r4, r1
 8006fc0:	2c63      	cmp	r4, #99	; 0x63
 8006fc2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	dcf1      	bgt.n	8006fae <__exponent+0x22>
 8006fca:	3130      	adds	r1, #48	; 0x30
 8006fcc:	f1ac 0402 	sub.w	r4, ip, #2
 8006fd0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006fd4:	1c41      	adds	r1, r0, #1
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	42ba      	cmp	r2, r7
 8006fda:	d30a      	bcc.n	8006ff2 <__exponent+0x66>
 8006fdc:	f10d 0209 	add.w	r2, sp, #9
 8006fe0:	eba2 020c 	sub.w	r2, r2, ip
 8006fe4:	42bc      	cmp	r4, r7
 8006fe6:	bf88      	it	hi
 8006fe8:	2200      	movhi	r2, #0
 8006fea:	4413      	add	r3, r2
 8006fec:	1a18      	subs	r0, r3, r0
 8006fee:	b003      	add	sp, #12
 8006ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006ff6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006ffa:	e7ed      	b.n	8006fd8 <__exponent+0x4c>
 8006ffc:	2330      	movs	r3, #48	; 0x30
 8006ffe:	3130      	adds	r1, #48	; 0x30
 8007000:	7083      	strb	r3, [r0, #2]
 8007002:	70c1      	strb	r1, [r0, #3]
 8007004:	1d03      	adds	r3, r0, #4
 8007006:	e7f1      	b.n	8006fec <__exponent+0x60>

08007008 <_printf_float>:
 8007008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700c:	ed2d 8b02 	vpush	{d8}
 8007010:	b08d      	sub	sp, #52	; 0x34
 8007012:	460c      	mov	r4, r1
 8007014:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007018:	4616      	mov	r6, r2
 800701a:	461f      	mov	r7, r3
 800701c:	4605      	mov	r5, r0
 800701e:	f000 fcb5 	bl	800798c <_localeconv_r>
 8007022:	f8d0 a000 	ldr.w	sl, [r0]
 8007026:	4650      	mov	r0, sl
 8007028:	f7f9 f922 	bl	8000270 <strlen>
 800702c:	2300      	movs	r3, #0
 800702e:	930a      	str	r3, [sp, #40]	; 0x28
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	9305      	str	r3, [sp, #20]
 8007034:	f8d8 3000 	ldr.w	r3, [r8]
 8007038:	f894 b018 	ldrb.w	fp, [r4, #24]
 800703c:	3307      	adds	r3, #7
 800703e:	f023 0307 	bic.w	r3, r3, #7
 8007042:	f103 0208 	add.w	r2, r3, #8
 8007046:	f8c8 2000 	str.w	r2, [r8]
 800704a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800704e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007052:	9307      	str	r3, [sp, #28]
 8007054:	f8cd 8018 	str.w	r8, [sp, #24]
 8007058:	ee08 0a10 	vmov	s16, r0
 800705c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007060:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007064:	4b9e      	ldr	r3, [pc, #632]	; (80072e0 <_printf_float+0x2d8>)
 8007066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800706a:	f7f9 fd5f 	bl	8000b2c <__aeabi_dcmpun>
 800706e:	bb88      	cbnz	r0, 80070d4 <_printf_float+0xcc>
 8007070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007074:	4b9a      	ldr	r3, [pc, #616]	; (80072e0 <_printf_float+0x2d8>)
 8007076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800707a:	f7f9 fd39 	bl	8000af0 <__aeabi_dcmple>
 800707e:	bb48      	cbnz	r0, 80070d4 <_printf_float+0xcc>
 8007080:	2200      	movs	r2, #0
 8007082:	2300      	movs	r3, #0
 8007084:	4640      	mov	r0, r8
 8007086:	4649      	mov	r1, r9
 8007088:	f7f9 fd28 	bl	8000adc <__aeabi_dcmplt>
 800708c:	b110      	cbz	r0, 8007094 <_printf_float+0x8c>
 800708e:	232d      	movs	r3, #45	; 0x2d
 8007090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007094:	4a93      	ldr	r2, [pc, #588]	; (80072e4 <_printf_float+0x2dc>)
 8007096:	4b94      	ldr	r3, [pc, #592]	; (80072e8 <_printf_float+0x2e0>)
 8007098:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800709c:	bf94      	ite	ls
 800709e:	4690      	movls	r8, r2
 80070a0:	4698      	movhi	r8, r3
 80070a2:	2303      	movs	r3, #3
 80070a4:	6123      	str	r3, [r4, #16]
 80070a6:	9b05      	ldr	r3, [sp, #20]
 80070a8:	f023 0304 	bic.w	r3, r3, #4
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	f04f 0900 	mov.w	r9, #0
 80070b2:	9700      	str	r7, [sp, #0]
 80070b4:	4633      	mov	r3, r6
 80070b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80070b8:	4621      	mov	r1, r4
 80070ba:	4628      	mov	r0, r5
 80070bc:	f000 f9da 	bl	8007474 <_printf_common>
 80070c0:	3001      	adds	r0, #1
 80070c2:	f040 8090 	bne.w	80071e6 <_printf_float+0x1de>
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070ca:	b00d      	add	sp, #52	; 0x34
 80070cc:	ecbd 8b02 	vpop	{d8}
 80070d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d4:	4642      	mov	r2, r8
 80070d6:	464b      	mov	r3, r9
 80070d8:	4640      	mov	r0, r8
 80070da:	4649      	mov	r1, r9
 80070dc:	f7f9 fd26 	bl	8000b2c <__aeabi_dcmpun>
 80070e0:	b140      	cbz	r0, 80070f4 <_printf_float+0xec>
 80070e2:	464b      	mov	r3, r9
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	bfbc      	itt	lt
 80070e8:	232d      	movlt	r3, #45	; 0x2d
 80070ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80070ee:	4a7f      	ldr	r2, [pc, #508]	; (80072ec <_printf_float+0x2e4>)
 80070f0:	4b7f      	ldr	r3, [pc, #508]	; (80072f0 <_printf_float+0x2e8>)
 80070f2:	e7d1      	b.n	8007098 <_printf_float+0x90>
 80070f4:	6863      	ldr	r3, [r4, #4]
 80070f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80070fa:	9206      	str	r2, [sp, #24]
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	d13f      	bne.n	8007180 <_printf_float+0x178>
 8007100:	2306      	movs	r3, #6
 8007102:	6063      	str	r3, [r4, #4]
 8007104:	9b05      	ldr	r3, [sp, #20]
 8007106:	6861      	ldr	r1, [r4, #4]
 8007108:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800710c:	2300      	movs	r3, #0
 800710e:	9303      	str	r3, [sp, #12]
 8007110:	ab0a      	add	r3, sp, #40	; 0x28
 8007112:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007116:	ab09      	add	r3, sp, #36	; 0x24
 8007118:	ec49 8b10 	vmov	d0, r8, r9
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	6022      	str	r2, [r4, #0]
 8007120:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007124:	4628      	mov	r0, r5
 8007126:	f7ff fecf 	bl	8006ec8 <__cvt>
 800712a:	9b06      	ldr	r3, [sp, #24]
 800712c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800712e:	2b47      	cmp	r3, #71	; 0x47
 8007130:	4680      	mov	r8, r0
 8007132:	d108      	bne.n	8007146 <_printf_float+0x13e>
 8007134:	1cc8      	adds	r0, r1, #3
 8007136:	db02      	blt.n	800713e <_printf_float+0x136>
 8007138:	6863      	ldr	r3, [r4, #4]
 800713a:	4299      	cmp	r1, r3
 800713c:	dd41      	ble.n	80071c2 <_printf_float+0x1ba>
 800713e:	f1ab 0302 	sub.w	r3, fp, #2
 8007142:	fa5f fb83 	uxtb.w	fp, r3
 8007146:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800714a:	d820      	bhi.n	800718e <_printf_float+0x186>
 800714c:	3901      	subs	r1, #1
 800714e:	465a      	mov	r2, fp
 8007150:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007154:	9109      	str	r1, [sp, #36]	; 0x24
 8007156:	f7ff ff19 	bl	8006f8c <__exponent>
 800715a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800715c:	1813      	adds	r3, r2, r0
 800715e:	2a01      	cmp	r2, #1
 8007160:	4681      	mov	r9, r0
 8007162:	6123      	str	r3, [r4, #16]
 8007164:	dc02      	bgt.n	800716c <_printf_float+0x164>
 8007166:	6822      	ldr	r2, [r4, #0]
 8007168:	07d2      	lsls	r2, r2, #31
 800716a:	d501      	bpl.n	8007170 <_printf_float+0x168>
 800716c:	3301      	adds	r3, #1
 800716e:	6123      	str	r3, [r4, #16]
 8007170:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007174:	2b00      	cmp	r3, #0
 8007176:	d09c      	beq.n	80070b2 <_printf_float+0xaa>
 8007178:	232d      	movs	r3, #45	; 0x2d
 800717a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800717e:	e798      	b.n	80070b2 <_printf_float+0xaa>
 8007180:	9a06      	ldr	r2, [sp, #24]
 8007182:	2a47      	cmp	r2, #71	; 0x47
 8007184:	d1be      	bne.n	8007104 <_printf_float+0xfc>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1bc      	bne.n	8007104 <_printf_float+0xfc>
 800718a:	2301      	movs	r3, #1
 800718c:	e7b9      	b.n	8007102 <_printf_float+0xfa>
 800718e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007192:	d118      	bne.n	80071c6 <_printf_float+0x1be>
 8007194:	2900      	cmp	r1, #0
 8007196:	6863      	ldr	r3, [r4, #4]
 8007198:	dd0b      	ble.n	80071b2 <_printf_float+0x1aa>
 800719a:	6121      	str	r1, [r4, #16]
 800719c:	b913      	cbnz	r3, 80071a4 <_printf_float+0x19c>
 800719e:	6822      	ldr	r2, [r4, #0]
 80071a0:	07d0      	lsls	r0, r2, #31
 80071a2:	d502      	bpl.n	80071aa <_printf_float+0x1a2>
 80071a4:	3301      	adds	r3, #1
 80071a6:	440b      	add	r3, r1
 80071a8:	6123      	str	r3, [r4, #16]
 80071aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80071ac:	f04f 0900 	mov.w	r9, #0
 80071b0:	e7de      	b.n	8007170 <_printf_float+0x168>
 80071b2:	b913      	cbnz	r3, 80071ba <_printf_float+0x1b2>
 80071b4:	6822      	ldr	r2, [r4, #0]
 80071b6:	07d2      	lsls	r2, r2, #31
 80071b8:	d501      	bpl.n	80071be <_printf_float+0x1b6>
 80071ba:	3302      	adds	r3, #2
 80071bc:	e7f4      	b.n	80071a8 <_printf_float+0x1a0>
 80071be:	2301      	movs	r3, #1
 80071c0:	e7f2      	b.n	80071a8 <_printf_float+0x1a0>
 80071c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80071c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c8:	4299      	cmp	r1, r3
 80071ca:	db05      	blt.n	80071d8 <_printf_float+0x1d0>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	6121      	str	r1, [r4, #16]
 80071d0:	07d8      	lsls	r0, r3, #31
 80071d2:	d5ea      	bpl.n	80071aa <_printf_float+0x1a2>
 80071d4:	1c4b      	adds	r3, r1, #1
 80071d6:	e7e7      	b.n	80071a8 <_printf_float+0x1a0>
 80071d8:	2900      	cmp	r1, #0
 80071da:	bfd4      	ite	le
 80071dc:	f1c1 0202 	rsble	r2, r1, #2
 80071e0:	2201      	movgt	r2, #1
 80071e2:	4413      	add	r3, r2
 80071e4:	e7e0      	b.n	80071a8 <_printf_float+0x1a0>
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	055a      	lsls	r2, r3, #21
 80071ea:	d407      	bmi.n	80071fc <_printf_float+0x1f4>
 80071ec:	6923      	ldr	r3, [r4, #16]
 80071ee:	4642      	mov	r2, r8
 80071f0:	4631      	mov	r1, r6
 80071f2:	4628      	mov	r0, r5
 80071f4:	47b8      	blx	r7
 80071f6:	3001      	adds	r0, #1
 80071f8:	d12c      	bne.n	8007254 <_printf_float+0x24c>
 80071fa:	e764      	b.n	80070c6 <_printf_float+0xbe>
 80071fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007200:	f240 80e0 	bls.w	80073c4 <_printf_float+0x3bc>
 8007204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007208:	2200      	movs	r2, #0
 800720a:	2300      	movs	r3, #0
 800720c:	f7f9 fc5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007210:	2800      	cmp	r0, #0
 8007212:	d034      	beq.n	800727e <_printf_float+0x276>
 8007214:	4a37      	ldr	r2, [pc, #220]	; (80072f4 <_printf_float+0x2ec>)
 8007216:	2301      	movs	r3, #1
 8007218:	4631      	mov	r1, r6
 800721a:	4628      	mov	r0, r5
 800721c:	47b8      	blx	r7
 800721e:	3001      	adds	r0, #1
 8007220:	f43f af51 	beq.w	80070c6 <_printf_float+0xbe>
 8007224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007228:	429a      	cmp	r2, r3
 800722a:	db02      	blt.n	8007232 <_printf_float+0x22a>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	07d8      	lsls	r0, r3, #31
 8007230:	d510      	bpl.n	8007254 <_printf_float+0x24c>
 8007232:	ee18 3a10 	vmov	r3, s16
 8007236:	4652      	mov	r2, sl
 8007238:	4631      	mov	r1, r6
 800723a:	4628      	mov	r0, r5
 800723c:	47b8      	blx	r7
 800723e:	3001      	adds	r0, #1
 8007240:	f43f af41 	beq.w	80070c6 <_printf_float+0xbe>
 8007244:	f04f 0800 	mov.w	r8, #0
 8007248:	f104 091a 	add.w	r9, r4, #26
 800724c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800724e:	3b01      	subs	r3, #1
 8007250:	4543      	cmp	r3, r8
 8007252:	dc09      	bgt.n	8007268 <_printf_float+0x260>
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	079b      	lsls	r3, r3, #30
 8007258:	f100 8107 	bmi.w	800746a <_printf_float+0x462>
 800725c:	68e0      	ldr	r0, [r4, #12]
 800725e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007260:	4298      	cmp	r0, r3
 8007262:	bfb8      	it	lt
 8007264:	4618      	movlt	r0, r3
 8007266:	e730      	b.n	80070ca <_printf_float+0xc2>
 8007268:	2301      	movs	r3, #1
 800726a:	464a      	mov	r2, r9
 800726c:	4631      	mov	r1, r6
 800726e:	4628      	mov	r0, r5
 8007270:	47b8      	blx	r7
 8007272:	3001      	adds	r0, #1
 8007274:	f43f af27 	beq.w	80070c6 <_printf_float+0xbe>
 8007278:	f108 0801 	add.w	r8, r8, #1
 800727c:	e7e6      	b.n	800724c <_printf_float+0x244>
 800727e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007280:	2b00      	cmp	r3, #0
 8007282:	dc39      	bgt.n	80072f8 <_printf_float+0x2f0>
 8007284:	4a1b      	ldr	r2, [pc, #108]	; (80072f4 <_printf_float+0x2ec>)
 8007286:	2301      	movs	r3, #1
 8007288:	4631      	mov	r1, r6
 800728a:	4628      	mov	r0, r5
 800728c:	47b8      	blx	r7
 800728e:	3001      	adds	r0, #1
 8007290:	f43f af19 	beq.w	80070c6 <_printf_float+0xbe>
 8007294:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007298:	4313      	orrs	r3, r2
 800729a:	d102      	bne.n	80072a2 <_printf_float+0x29a>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	07d9      	lsls	r1, r3, #31
 80072a0:	d5d8      	bpl.n	8007254 <_printf_float+0x24c>
 80072a2:	ee18 3a10 	vmov	r3, s16
 80072a6:	4652      	mov	r2, sl
 80072a8:	4631      	mov	r1, r6
 80072aa:	4628      	mov	r0, r5
 80072ac:	47b8      	blx	r7
 80072ae:	3001      	adds	r0, #1
 80072b0:	f43f af09 	beq.w	80070c6 <_printf_float+0xbe>
 80072b4:	f04f 0900 	mov.w	r9, #0
 80072b8:	f104 0a1a 	add.w	sl, r4, #26
 80072bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072be:	425b      	negs	r3, r3
 80072c0:	454b      	cmp	r3, r9
 80072c2:	dc01      	bgt.n	80072c8 <_printf_float+0x2c0>
 80072c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c6:	e792      	b.n	80071ee <_printf_float+0x1e6>
 80072c8:	2301      	movs	r3, #1
 80072ca:	4652      	mov	r2, sl
 80072cc:	4631      	mov	r1, r6
 80072ce:	4628      	mov	r0, r5
 80072d0:	47b8      	blx	r7
 80072d2:	3001      	adds	r0, #1
 80072d4:	f43f aef7 	beq.w	80070c6 <_printf_float+0xbe>
 80072d8:	f109 0901 	add.w	r9, r9, #1
 80072dc:	e7ee      	b.n	80072bc <_printf_float+0x2b4>
 80072de:	bf00      	nop
 80072e0:	7fefffff 	.word	0x7fefffff
 80072e4:	08009ce8 	.word	0x08009ce8
 80072e8:	08009cec 	.word	0x08009cec
 80072ec:	08009cf0 	.word	0x08009cf0
 80072f0:	08009cf4 	.word	0x08009cf4
 80072f4:	08009cf8 	.word	0x08009cf8
 80072f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072fc:	429a      	cmp	r2, r3
 80072fe:	bfa8      	it	ge
 8007300:	461a      	movge	r2, r3
 8007302:	2a00      	cmp	r2, #0
 8007304:	4691      	mov	r9, r2
 8007306:	dc37      	bgt.n	8007378 <_printf_float+0x370>
 8007308:	f04f 0b00 	mov.w	fp, #0
 800730c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007310:	f104 021a 	add.w	r2, r4, #26
 8007314:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007316:	9305      	str	r3, [sp, #20]
 8007318:	eba3 0309 	sub.w	r3, r3, r9
 800731c:	455b      	cmp	r3, fp
 800731e:	dc33      	bgt.n	8007388 <_printf_float+0x380>
 8007320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007324:	429a      	cmp	r2, r3
 8007326:	db3b      	blt.n	80073a0 <_printf_float+0x398>
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	07da      	lsls	r2, r3, #31
 800732c:	d438      	bmi.n	80073a0 <_printf_float+0x398>
 800732e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007332:	eba2 0903 	sub.w	r9, r2, r3
 8007336:	9b05      	ldr	r3, [sp, #20]
 8007338:	1ad2      	subs	r2, r2, r3
 800733a:	4591      	cmp	r9, r2
 800733c:	bfa8      	it	ge
 800733e:	4691      	movge	r9, r2
 8007340:	f1b9 0f00 	cmp.w	r9, #0
 8007344:	dc35      	bgt.n	80073b2 <_printf_float+0x3aa>
 8007346:	f04f 0800 	mov.w	r8, #0
 800734a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800734e:	f104 0a1a 	add.w	sl, r4, #26
 8007352:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007356:	1a9b      	subs	r3, r3, r2
 8007358:	eba3 0309 	sub.w	r3, r3, r9
 800735c:	4543      	cmp	r3, r8
 800735e:	f77f af79 	ble.w	8007254 <_printf_float+0x24c>
 8007362:	2301      	movs	r3, #1
 8007364:	4652      	mov	r2, sl
 8007366:	4631      	mov	r1, r6
 8007368:	4628      	mov	r0, r5
 800736a:	47b8      	blx	r7
 800736c:	3001      	adds	r0, #1
 800736e:	f43f aeaa 	beq.w	80070c6 <_printf_float+0xbe>
 8007372:	f108 0801 	add.w	r8, r8, #1
 8007376:	e7ec      	b.n	8007352 <_printf_float+0x34a>
 8007378:	4613      	mov	r3, r2
 800737a:	4631      	mov	r1, r6
 800737c:	4642      	mov	r2, r8
 800737e:	4628      	mov	r0, r5
 8007380:	47b8      	blx	r7
 8007382:	3001      	adds	r0, #1
 8007384:	d1c0      	bne.n	8007308 <_printf_float+0x300>
 8007386:	e69e      	b.n	80070c6 <_printf_float+0xbe>
 8007388:	2301      	movs	r3, #1
 800738a:	4631      	mov	r1, r6
 800738c:	4628      	mov	r0, r5
 800738e:	9205      	str	r2, [sp, #20]
 8007390:	47b8      	blx	r7
 8007392:	3001      	adds	r0, #1
 8007394:	f43f ae97 	beq.w	80070c6 <_printf_float+0xbe>
 8007398:	9a05      	ldr	r2, [sp, #20]
 800739a:	f10b 0b01 	add.w	fp, fp, #1
 800739e:	e7b9      	b.n	8007314 <_printf_float+0x30c>
 80073a0:	ee18 3a10 	vmov	r3, s16
 80073a4:	4652      	mov	r2, sl
 80073a6:	4631      	mov	r1, r6
 80073a8:	4628      	mov	r0, r5
 80073aa:	47b8      	blx	r7
 80073ac:	3001      	adds	r0, #1
 80073ae:	d1be      	bne.n	800732e <_printf_float+0x326>
 80073b0:	e689      	b.n	80070c6 <_printf_float+0xbe>
 80073b2:	9a05      	ldr	r2, [sp, #20]
 80073b4:	464b      	mov	r3, r9
 80073b6:	4442      	add	r2, r8
 80073b8:	4631      	mov	r1, r6
 80073ba:	4628      	mov	r0, r5
 80073bc:	47b8      	blx	r7
 80073be:	3001      	adds	r0, #1
 80073c0:	d1c1      	bne.n	8007346 <_printf_float+0x33e>
 80073c2:	e680      	b.n	80070c6 <_printf_float+0xbe>
 80073c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073c6:	2a01      	cmp	r2, #1
 80073c8:	dc01      	bgt.n	80073ce <_printf_float+0x3c6>
 80073ca:	07db      	lsls	r3, r3, #31
 80073cc:	d53a      	bpl.n	8007444 <_printf_float+0x43c>
 80073ce:	2301      	movs	r3, #1
 80073d0:	4642      	mov	r2, r8
 80073d2:	4631      	mov	r1, r6
 80073d4:	4628      	mov	r0, r5
 80073d6:	47b8      	blx	r7
 80073d8:	3001      	adds	r0, #1
 80073da:	f43f ae74 	beq.w	80070c6 <_printf_float+0xbe>
 80073de:	ee18 3a10 	vmov	r3, s16
 80073e2:	4652      	mov	r2, sl
 80073e4:	4631      	mov	r1, r6
 80073e6:	4628      	mov	r0, r5
 80073e8:	47b8      	blx	r7
 80073ea:	3001      	adds	r0, #1
 80073ec:	f43f ae6b 	beq.w	80070c6 <_printf_float+0xbe>
 80073f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073f4:	2200      	movs	r2, #0
 80073f6:	2300      	movs	r3, #0
 80073f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80073fc:	f7f9 fb64 	bl	8000ac8 <__aeabi_dcmpeq>
 8007400:	b9d8      	cbnz	r0, 800743a <_printf_float+0x432>
 8007402:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007406:	f108 0201 	add.w	r2, r8, #1
 800740a:	4631      	mov	r1, r6
 800740c:	4628      	mov	r0, r5
 800740e:	47b8      	blx	r7
 8007410:	3001      	adds	r0, #1
 8007412:	d10e      	bne.n	8007432 <_printf_float+0x42a>
 8007414:	e657      	b.n	80070c6 <_printf_float+0xbe>
 8007416:	2301      	movs	r3, #1
 8007418:	4652      	mov	r2, sl
 800741a:	4631      	mov	r1, r6
 800741c:	4628      	mov	r0, r5
 800741e:	47b8      	blx	r7
 8007420:	3001      	adds	r0, #1
 8007422:	f43f ae50 	beq.w	80070c6 <_printf_float+0xbe>
 8007426:	f108 0801 	add.w	r8, r8, #1
 800742a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800742c:	3b01      	subs	r3, #1
 800742e:	4543      	cmp	r3, r8
 8007430:	dcf1      	bgt.n	8007416 <_printf_float+0x40e>
 8007432:	464b      	mov	r3, r9
 8007434:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007438:	e6da      	b.n	80071f0 <_printf_float+0x1e8>
 800743a:	f04f 0800 	mov.w	r8, #0
 800743e:	f104 0a1a 	add.w	sl, r4, #26
 8007442:	e7f2      	b.n	800742a <_printf_float+0x422>
 8007444:	2301      	movs	r3, #1
 8007446:	4642      	mov	r2, r8
 8007448:	e7df      	b.n	800740a <_printf_float+0x402>
 800744a:	2301      	movs	r3, #1
 800744c:	464a      	mov	r2, r9
 800744e:	4631      	mov	r1, r6
 8007450:	4628      	mov	r0, r5
 8007452:	47b8      	blx	r7
 8007454:	3001      	adds	r0, #1
 8007456:	f43f ae36 	beq.w	80070c6 <_printf_float+0xbe>
 800745a:	f108 0801 	add.w	r8, r8, #1
 800745e:	68e3      	ldr	r3, [r4, #12]
 8007460:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007462:	1a5b      	subs	r3, r3, r1
 8007464:	4543      	cmp	r3, r8
 8007466:	dcf0      	bgt.n	800744a <_printf_float+0x442>
 8007468:	e6f8      	b.n	800725c <_printf_float+0x254>
 800746a:	f04f 0800 	mov.w	r8, #0
 800746e:	f104 0919 	add.w	r9, r4, #25
 8007472:	e7f4      	b.n	800745e <_printf_float+0x456>

08007474 <_printf_common>:
 8007474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007478:	4616      	mov	r6, r2
 800747a:	4699      	mov	r9, r3
 800747c:	688a      	ldr	r2, [r1, #8]
 800747e:	690b      	ldr	r3, [r1, #16]
 8007480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007484:	4293      	cmp	r3, r2
 8007486:	bfb8      	it	lt
 8007488:	4613      	movlt	r3, r2
 800748a:	6033      	str	r3, [r6, #0]
 800748c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007490:	4607      	mov	r7, r0
 8007492:	460c      	mov	r4, r1
 8007494:	b10a      	cbz	r2, 800749a <_printf_common+0x26>
 8007496:	3301      	adds	r3, #1
 8007498:	6033      	str	r3, [r6, #0]
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	0699      	lsls	r1, r3, #26
 800749e:	bf42      	ittt	mi
 80074a0:	6833      	ldrmi	r3, [r6, #0]
 80074a2:	3302      	addmi	r3, #2
 80074a4:	6033      	strmi	r3, [r6, #0]
 80074a6:	6825      	ldr	r5, [r4, #0]
 80074a8:	f015 0506 	ands.w	r5, r5, #6
 80074ac:	d106      	bne.n	80074bc <_printf_common+0x48>
 80074ae:	f104 0a19 	add.w	sl, r4, #25
 80074b2:	68e3      	ldr	r3, [r4, #12]
 80074b4:	6832      	ldr	r2, [r6, #0]
 80074b6:	1a9b      	subs	r3, r3, r2
 80074b8:	42ab      	cmp	r3, r5
 80074ba:	dc26      	bgt.n	800750a <_printf_common+0x96>
 80074bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074c0:	1e13      	subs	r3, r2, #0
 80074c2:	6822      	ldr	r2, [r4, #0]
 80074c4:	bf18      	it	ne
 80074c6:	2301      	movne	r3, #1
 80074c8:	0692      	lsls	r2, r2, #26
 80074ca:	d42b      	bmi.n	8007524 <_printf_common+0xb0>
 80074cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074d0:	4649      	mov	r1, r9
 80074d2:	4638      	mov	r0, r7
 80074d4:	47c0      	blx	r8
 80074d6:	3001      	adds	r0, #1
 80074d8:	d01e      	beq.n	8007518 <_printf_common+0xa4>
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	6922      	ldr	r2, [r4, #16]
 80074de:	f003 0306 	and.w	r3, r3, #6
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	bf02      	ittt	eq
 80074e6:	68e5      	ldreq	r5, [r4, #12]
 80074e8:	6833      	ldreq	r3, [r6, #0]
 80074ea:	1aed      	subeq	r5, r5, r3
 80074ec:	68a3      	ldr	r3, [r4, #8]
 80074ee:	bf0c      	ite	eq
 80074f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074f4:	2500      	movne	r5, #0
 80074f6:	4293      	cmp	r3, r2
 80074f8:	bfc4      	itt	gt
 80074fa:	1a9b      	subgt	r3, r3, r2
 80074fc:	18ed      	addgt	r5, r5, r3
 80074fe:	2600      	movs	r6, #0
 8007500:	341a      	adds	r4, #26
 8007502:	42b5      	cmp	r5, r6
 8007504:	d11a      	bne.n	800753c <_printf_common+0xc8>
 8007506:	2000      	movs	r0, #0
 8007508:	e008      	b.n	800751c <_printf_common+0xa8>
 800750a:	2301      	movs	r3, #1
 800750c:	4652      	mov	r2, sl
 800750e:	4649      	mov	r1, r9
 8007510:	4638      	mov	r0, r7
 8007512:	47c0      	blx	r8
 8007514:	3001      	adds	r0, #1
 8007516:	d103      	bne.n	8007520 <_printf_common+0xac>
 8007518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800751c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007520:	3501      	adds	r5, #1
 8007522:	e7c6      	b.n	80074b2 <_printf_common+0x3e>
 8007524:	18e1      	adds	r1, r4, r3
 8007526:	1c5a      	adds	r2, r3, #1
 8007528:	2030      	movs	r0, #48	; 0x30
 800752a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800752e:	4422      	add	r2, r4
 8007530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007538:	3302      	adds	r3, #2
 800753a:	e7c7      	b.n	80074cc <_printf_common+0x58>
 800753c:	2301      	movs	r3, #1
 800753e:	4622      	mov	r2, r4
 8007540:	4649      	mov	r1, r9
 8007542:	4638      	mov	r0, r7
 8007544:	47c0      	blx	r8
 8007546:	3001      	adds	r0, #1
 8007548:	d0e6      	beq.n	8007518 <_printf_common+0xa4>
 800754a:	3601      	adds	r6, #1
 800754c:	e7d9      	b.n	8007502 <_printf_common+0x8e>
	...

08007550 <_printf_i>:
 8007550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007554:	7e0f      	ldrb	r7, [r1, #24]
 8007556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007558:	2f78      	cmp	r7, #120	; 0x78
 800755a:	4691      	mov	r9, r2
 800755c:	4680      	mov	r8, r0
 800755e:	460c      	mov	r4, r1
 8007560:	469a      	mov	sl, r3
 8007562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007566:	d807      	bhi.n	8007578 <_printf_i+0x28>
 8007568:	2f62      	cmp	r7, #98	; 0x62
 800756a:	d80a      	bhi.n	8007582 <_printf_i+0x32>
 800756c:	2f00      	cmp	r7, #0
 800756e:	f000 80d4 	beq.w	800771a <_printf_i+0x1ca>
 8007572:	2f58      	cmp	r7, #88	; 0x58
 8007574:	f000 80c0 	beq.w	80076f8 <_printf_i+0x1a8>
 8007578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800757c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007580:	e03a      	b.n	80075f8 <_printf_i+0xa8>
 8007582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007586:	2b15      	cmp	r3, #21
 8007588:	d8f6      	bhi.n	8007578 <_printf_i+0x28>
 800758a:	a101      	add	r1, pc, #4	; (adr r1, 8007590 <_printf_i+0x40>)
 800758c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007590:	080075e9 	.word	0x080075e9
 8007594:	080075fd 	.word	0x080075fd
 8007598:	08007579 	.word	0x08007579
 800759c:	08007579 	.word	0x08007579
 80075a0:	08007579 	.word	0x08007579
 80075a4:	08007579 	.word	0x08007579
 80075a8:	080075fd 	.word	0x080075fd
 80075ac:	08007579 	.word	0x08007579
 80075b0:	08007579 	.word	0x08007579
 80075b4:	08007579 	.word	0x08007579
 80075b8:	08007579 	.word	0x08007579
 80075bc:	08007701 	.word	0x08007701
 80075c0:	08007629 	.word	0x08007629
 80075c4:	080076bb 	.word	0x080076bb
 80075c8:	08007579 	.word	0x08007579
 80075cc:	08007579 	.word	0x08007579
 80075d0:	08007723 	.word	0x08007723
 80075d4:	08007579 	.word	0x08007579
 80075d8:	08007629 	.word	0x08007629
 80075dc:	08007579 	.word	0x08007579
 80075e0:	08007579 	.word	0x08007579
 80075e4:	080076c3 	.word	0x080076c3
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	1d1a      	adds	r2, r3, #4
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	602a      	str	r2, [r5, #0]
 80075f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075f8:	2301      	movs	r3, #1
 80075fa:	e09f      	b.n	800773c <_printf_i+0x1ec>
 80075fc:	6820      	ldr	r0, [r4, #0]
 80075fe:	682b      	ldr	r3, [r5, #0]
 8007600:	0607      	lsls	r7, r0, #24
 8007602:	f103 0104 	add.w	r1, r3, #4
 8007606:	6029      	str	r1, [r5, #0]
 8007608:	d501      	bpl.n	800760e <_printf_i+0xbe>
 800760a:	681e      	ldr	r6, [r3, #0]
 800760c:	e003      	b.n	8007616 <_printf_i+0xc6>
 800760e:	0646      	lsls	r6, r0, #25
 8007610:	d5fb      	bpl.n	800760a <_printf_i+0xba>
 8007612:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007616:	2e00      	cmp	r6, #0
 8007618:	da03      	bge.n	8007622 <_printf_i+0xd2>
 800761a:	232d      	movs	r3, #45	; 0x2d
 800761c:	4276      	negs	r6, r6
 800761e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007622:	485a      	ldr	r0, [pc, #360]	; (800778c <_printf_i+0x23c>)
 8007624:	230a      	movs	r3, #10
 8007626:	e012      	b.n	800764e <_printf_i+0xfe>
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	6820      	ldr	r0, [r4, #0]
 800762c:	1d19      	adds	r1, r3, #4
 800762e:	6029      	str	r1, [r5, #0]
 8007630:	0605      	lsls	r5, r0, #24
 8007632:	d501      	bpl.n	8007638 <_printf_i+0xe8>
 8007634:	681e      	ldr	r6, [r3, #0]
 8007636:	e002      	b.n	800763e <_printf_i+0xee>
 8007638:	0641      	lsls	r1, r0, #25
 800763a:	d5fb      	bpl.n	8007634 <_printf_i+0xe4>
 800763c:	881e      	ldrh	r6, [r3, #0]
 800763e:	4853      	ldr	r0, [pc, #332]	; (800778c <_printf_i+0x23c>)
 8007640:	2f6f      	cmp	r7, #111	; 0x6f
 8007642:	bf0c      	ite	eq
 8007644:	2308      	moveq	r3, #8
 8007646:	230a      	movne	r3, #10
 8007648:	2100      	movs	r1, #0
 800764a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800764e:	6865      	ldr	r5, [r4, #4]
 8007650:	60a5      	str	r5, [r4, #8]
 8007652:	2d00      	cmp	r5, #0
 8007654:	bfa2      	ittt	ge
 8007656:	6821      	ldrge	r1, [r4, #0]
 8007658:	f021 0104 	bicge.w	r1, r1, #4
 800765c:	6021      	strge	r1, [r4, #0]
 800765e:	b90e      	cbnz	r6, 8007664 <_printf_i+0x114>
 8007660:	2d00      	cmp	r5, #0
 8007662:	d04b      	beq.n	80076fc <_printf_i+0x1ac>
 8007664:	4615      	mov	r5, r2
 8007666:	fbb6 f1f3 	udiv	r1, r6, r3
 800766a:	fb03 6711 	mls	r7, r3, r1, r6
 800766e:	5dc7      	ldrb	r7, [r0, r7]
 8007670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007674:	4637      	mov	r7, r6
 8007676:	42bb      	cmp	r3, r7
 8007678:	460e      	mov	r6, r1
 800767a:	d9f4      	bls.n	8007666 <_printf_i+0x116>
 800767c:	2b08      	cmp	r3, #8
 800767e:	d10b      	bne.n	8007698 <_printf_i+0x148>
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	07de      	lsls	r6, r3, #31
 8007684:	d508      	bpl.n	8007698 <_printf_i+0x148>
 8007686:	6923      	ldr	r3, [r4, #16]
 8007688:	6861      	ldr	r1, [r4, #4]
 800768a:	4299      	cmp	r1, r3
 800768c:	bfde      	ittt	le
 800768e:	2330      	movle	r3, #48	; 0x30
 8007690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007694:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007698:	1b52      	subs	r2, r2, r5
 800769a:	6122      	str	r2, [r4, #16]
 800769c:	f8cd a000 	str.w	sl, [sp]
 80076a0:	464b      	mov	r3, r9
 80076a2:	aa03      	add	r2, sp, #12
 80076a4:	4621      	mov	r1, r4
 80076a6:	4640      	mov	r0, r8
 80076a8:	f7ff fee4 	bl	8007474 <_printf_common>
 80076ac:	3001      	adds	r0, #1
 80076ae:	d14a      	bne.n	8007746 <_printf_i+0x1f6>
 80076b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076b4:	b004      	add	sp, #16
 80076b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	f043 0320 	orr.w	r3, r3, #32
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	4833      	ldr	r0, [pc, #204]	; (8007790 <_printf_i+0x240>)
 80076c4:	2778      	movs	r7, #120	; 0x78
 80076c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	6829      	ldr	r1, [r5, #0]
 80076ce:	061f      	lsls	r7, r3, #24
 80076d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80076d4:	d402      	bmi.n	80076dc <_printf_i+0x18c>
 80076d6:	065f      	lsls	r7, r3, #25
 80076d8:	bf48      	it	mi
 80076da:	b2b6      	uxthmi	r6, r6
 80076dc:	07df      	lsls	r7, r3, #31
 80076de:	bf48      	it	mi
 80076e0:	f043 0320 	orrmi.w	r3, r3, #32
 80076e4:	6029      	str	r1, [r5, #0]
 80076e6:	bf48      	it	mi
 80076e8:	6023      	strmi	r3, [r4, #0]
 80076ea:	b91e      	cbnz	r6, 80076f4 <_printf_i+0x1a4>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	f023 0320 	bic.w	r3, r3, #32
 80076f2:	6023      	str	r3, [r4, #0]
 80076f4:	2310      	movs	r3, #16
 80076f6:	e7a7      	b.n	8007648 <_printf_i+0xf8>
 80076f8:	4824      	ldr	r0, [pc, #144]	; (800778c <_printf_i+0x23c>)
 80076fa:	e7e4      	b.n	80076c6 <_printf_i+0x176>
 80076fc:	4615      	mov	r5, r2
 80076fe:	e7bd      	b.n	800767c <_printf_i+0x12c>
 8007700:	682b      	ldr	r3, [r5, #0]
 8007702:	6826      	ldr	r6, [r4, #0]
 8007704:	6961      	ldr	r1, [r4, #20]
 8007706:	1d18      	adds	r0, r3, #4
 8007708:	6028      	str	r0, [r5, #0]
 800770a:	0635      	lsls	r5, r6, #24
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	d501      	bpl.n	8007714 <_printf_i+0x1c4>
 8007710:	6019      	str	r1, [r3, #0]
 8007712:	e002      	b.n	800771a <_printf_i+0x1ca>
 8007714:	0670      	lsls	r0, r6, #25
 8007716:	d5fb      	bpl.n	8007710 <_printf_i+0x1c0>
 8007718:	8019      	strh	r1, [r3, #0]
 800771a:	2300      	movs	r3, #0
 800771c:	6123      	str	r3, [r4, #16]
 800771e:	4615      	mov	r5, r2
 8007720:	e7bc      	b.n	800769c <_printf_i+0x14c>
 8007722:	682b      	ldr	r3, [r5, #0]
 8007724:	1d1a      	adds	r2, r3, #4
 8007726:	602a      	str	r2, [r5, #0]
 8007728:	681d      	ldr	r5, [r3, #0]
 800772a:	6862      	ldr	r2, [r4, #4]
 800772c:	2100      	movs	r1, #0
 800772e:	4628      	mov	r0, r5
 8007730:	f7f8 fd4e 	bl	80001d0 <memchr>
 8007734:	b108      	cbz	r0, 800773a <_printf_i+0x1ea>
 8007736:	1b40      	subs	r0, r0, r5
 8007738:	6060      	str	r0, [r4, #4]
 800773a:	6863      	ldr	r3, [r4, #4]
 800773c:	6123      	str	r3, [r4, #16]
 800773e:	2300      	movs	r3, #0
 8007740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007744:	e7aa      	b.n	800769c <_printf_i+0x14c>
 8007746:	6923      	ldr	r3, [r4, #16]
 8007748:	462a      	mov	r2, r5
 800774a:	4649      	mov	r1, r9
 800774c:	4640      	mov	r0, r8
 800774e:	47d0      	blx	sl
 8007750:	3001      	adds	r0, #1
 8007752:	d0ad      	beq.n	80076b0 <_printf_i+0x160>
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	079b      	lsls	r3, r3, #30
 8007758:	d413      	bmi.n	8007782 <_printf_i+0x232>
 800775a:	68e0      	ldr	r0, [r4, #12]
 800775c:	9b03      	ldr	r3, [sp, #12]
 800775e:	4298      	cmp	r0, r3
 8007760:	bfb8      	it	lt
 8007762:	4618      	movlt	r0, r3
 8007764:	e7a6      	b.n	80076b4 <_printf_i+0x164>
 8007766:	2301      	movs	r3, #1
 8007768:	4632      	mov	r2, r6
 800776a:	4649      	mov	r1, r9
 800776c:	4640      	mov	r0, r8
 800776e:	47d0      	blx	sl
 8007770:	3001      	adds	r0, #1
 8007772:	d09d      	beq.n	80076b0 <_printf_i+0x160>
 8007774:	3501      	adds	r5, #1
 8007776:	68e3      	ldr	r3, [r4, #12]
 8007778:	9903      	ldr	r1, [sp, #12]
 800777a:	1a5b      	subs	r3, r3, r1
 800777c:	42ab      	cmp	r3, r5
 800777e:	dcf2      	bgt.n	8007766 <_printf_i+0x216>
 8007780:	e7eb      	b.n	800775a <_printf_i+0x20a>
 8007782:	2500      	movs	r5, #0
 8007784:	f104 0619 	add.w	r6, r4, #25
 8007788:	e7f5      	b.n	8007776 <_printf_i+0x226>
 800778a:	bf00      	nop
 800778c:	08009cfa 	.word	0x08009cfa
 8007790:	08009d0b 	.word	0x08009d0b

08007794 <siprintf>:
 8007794:	b40e      	push	{r1, r2, r3}
 8007796:	b500      	push	{lr}
 8007798:	b09c      	sub	sp, #112	; 0x70
 800779a:	ab1d      	add	r3, sp, #116	; 0x74
 800779c:	9002      	str	r0, [sp, #8]
 800779e:	9006      	str	r0, [sp, #24]
 80077a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077a4:	4809      	ldr	r0, [pc, #36]	; (80077cc <siprintf+0x38>)
 80077a6:	9107      	str	r1, [sp, #28]
 80077a8:	9104      	str	r1, [sp, #16]
 80077aa:	4909      	ldr	r1, [pc, #36]	; (80077d0 <siprintf+0x3c>)
 80077ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80077b0:	9105      	str	r1, [sp, #20]
 80077b2:	6800      	ldr	r0, [r0, #0]
 80077b4:	9301      	str	r3, [sp, #4]
 80077b6:	a902      	add	r1, sp, #8
 80077b8:	f001 f802 	bl	80087c0 <_svfiprintf_r>
 80077bc:	9b02      	ldr	r3, [sp, #8]
 80077be:	2200      	movs	r2, #0
 80077c0:	701a      	strb	r2, [r3, #0]
 80077c2:	b01c      	add	sp, #112	; 0x70
 80077c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077c8:	b003      	add	sp, #12
 80077ca:	4770      	bx	lr
 80077cc:	2000006c 	.word	0x2000006c
 80077d0:	ffff0208 	.word	0xffff0208

080077d4 <std>:
 80077d4:	2300      	movs	r3, #0
 80077d6:	b510      	push	{r4, lr}
 80077d8:	4604      	mov	r4, r0
 80077da:	e9c0 3300 	strd	r3, r3, [r0]
 80077de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077e2:	6083      	str	r3, [r0, #8]
 80077e4:	8181      	strh	r1, [r0, #12]
 80077e6:	6643      	str	r3, [r0, #100]	; 0x64
 80077e8:	81c2      	strh	r2, [r0, #14]
 80077ea:	6183      	str	r3, [r0, #24]
 80077ec:	4619      	mov	r1, r3
 80077ee:	2208      	movs	r2, #8
 80077f0:	305c      	adds	r0, #92	; 0x5c
 80077f2:	f000 f8c3 	bl	800797c <memset>
 80077f6:	4b0d      	ldr	r3, [pc, #52]	; (800782c <std+0x58>)
 80077f8:	6263      	str	r3, [r4, #36]	; 0x24
 80077fa:	4b0d      	ldr	r3, [pc, #52]	; (8007830 <std+0x5c>)
 80077fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80077fe:	4b0d      	ldr	r3, [pc, #52]	; (8007834 <std+0x60>)
 8007800:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007802:	4b0d      	ldr	r3, [pc, #52]	; (8007838 <std+0x64>)
 8007804:	6323      	str	r3, [r4, #48]	; 0x30
 8007806:	4b0d      	ldr	r3, [pc, #52]	; (800783c <std+0x68>)
 8007808:	6224      	str	r4, [r4, #32]
 800780a:	429c      	cmp	r4, r3
 800780c:	d006      	beq.n	800781c <std+0x48>
 800780e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007812:	4294      	cmp	r4, r2
 8007814:	d002      	beq.n	800781c <std+0x48>
 8007816:	33d0      	adds	r3, #208	; 0xd0
 8007818:	429c      	cmp	r4, r3
 800781a:	d105      	bne.n	8007828 <std+0x54>
 800781c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007824:	f000 b8e0 	b.w	80079e8 <__retarget_lock_init_recursive>
 8007828:	bd10      	pop	{r4, pc}
 800782a:	bf00      	nop
 800782c:	08009601 	.word	0x08009601
 8007830:	08009623 	.word	0x08009623
 8007834:	0800965b 	.word	0x0800965b
 8007838:	0800967f 	.word	0x0800967f
 800783c:	20004c58 	.word	0x20004c58

08007840 <stdio_exit_handler>:
 8007840:	4a02      	ldr	r2, [pc, #8]	; (800784c <stdio_exit_handler+0xc>)
 8007842:	4903      	ldr	r1, [pc, #12]	; (8007850 <stdio_exit_handler+0x10>)
 8007844:	4803      	ldr	r0, [pc, #12]	; (8007854 <stdio_exit_handler+0x14>)
 8007846:	f000 b87b 	b.w	8007940 <_fwalk_sglue>
 800784a:	bf00      	nop
 800784c:	20000014 	.word	0x20000014
 8007850:	08008ea1 	.word	0x08008ea1
 8007854:	20000020 	.word	0x20000020

08007858 <cleanup_stdio>:
 8007858:	6841      	ldr	r1, [r0, #4]
 800785a:	4b0c      	ldr	r3, [pc, #48]	; (800788c <cleanup_stdio+0x34>)
 800785c:	4299      	cmp	r1, r3
 800785e:	b510      	push	{r4, lr}
 8007860:	4604      	mov	r4, r0
 8007862:	d001      	beq.n	8007868 <cleanup_stdio+0x10>
 8007864:	f001 fb1c 	bl	8008ea0 <_fflush_r>
 8007868:	68a1      	ldr	r1, [r4, #8]
 800786a:	4b09      	ldr	r3, [pc, #36]	; (8007890 <cleanup_stdio+0x38>)
 800786c:	4299      	cmp	r1, r3
 800786e:	d002      	beq.n	8007876 <cleanup_stdio+0x1e>
 8007870:	4620      	mov	r0, r4
 8007872:	f001 fb15 	bl	8008ea0 <_fflush_r>
 8007876:	68e1      	ldr	r1, [r4, #12]
 8007878:	4b06      	ldr	r3, [pc, #24]	; (8007894 <cleanup_stdio+0x3c>)
 800787a:	4299      	cmp	r1, r3
 800787c:	d004      	beq.n	8007888 <cleanup_stdio+0x30>
 800787e:	4620      	mov	r0, r4
 8007880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007884:	f001 bb0c 	b.w	8008ea0 <_fflush_r>
 8007888:	bd10      	pop	{r4, pc}
 800788a:	bf00      	nop
 800788c:	20004c58 	.word	0x20004c58
 8007890:	20004cc0 	.word	0x20004cc0
 8007894:	20004d28 	.word	0x20004d28

08007898 <global_stdio_init.part.0>:
 8007898:	b510      	push	{r4, lr}
 800789a:	4b0b      	ldr	r3, [pc, #44]	; (80078c8 <global_stdio_init.part.0+0x30>)
 800789c:	4c0b      	ldr	r4, [pc, #44]	; (80078cc <global_stdio_init.part.0+0x34>)
 800789e:	4a0c      	ldr	r2, [pc, #48]	; (80078d0 <global_stdio_init.part.0+0x38>)
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	4620      	mov	r0, r4
 80078a4:	2200      	movs	r2, #0
 80078a6:	2104      	movs	r1, #4
 80078a8:	f7ff ff94 	bl	80077d4 <std>
 80078ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80078b0:	2201      	movs	r2, #1
 80078b2:	2109      	movs	r1, #9
 80078b4:	f7ff ff8e 	bl	80077d4 <std>
 80078b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80078bc:	2202      	movs	r2, #2
 80078be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c2:	2112      	movs	r1, #18
 80078c4:	f7ff bf86 	b.w	80077d4 <std>
 80078c8:	20004d90 	.word	0x20004d90
 80078cc:	20004c58 	.word	0x20004c58
 80078d0:	08007841 	.word	0x08007841

080078d4 <__sfp_lock_acquire>:
 80078d4:	4801      	ldr	r0, [pc, #4]	; (80078dc <__sfp_lock_acquire+0x8>)
 80078d6:	f000 b888 	b.w	80079ea <__retarget_lock_acquire_recursive>
 80078da:	bf00      	nop
 80078dc:	20004d95 	.word	0x20004d95

080078e0 <__sfp_lock_release>:
 80078e0:	4801      	ldr	r0, [pc, #4]	; (80078e8 <__sfp_lock_release+0x8>)
 80078e2:	f000 b883 	b.w	80079ec <__retarget_lock_release_recursive>
 80078e6:	bf00      	nop
 80078e8:	20004d95 	.word	0x20004d95

080078ec <__sinit>:
 80078ec:	b510      	push	{r4, lr}
 80078ee:	4604      	mov	r4, r0
 80078f0:	f7ff fff0 	bl	80078d4 <__sfp_lock_acquire>
 80078f4:	6a23      	ldr	r3, [r4, #32]
 80078f6:	b11b      	cbz	r3, 8007900 <__sinit+0x14>
 80078f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078fc:	f7ff bff0 	b.w	80078e0 <__sfp_lock_release>
 8007900:	4b04      	ldr	r3, [pc, #16]	; (8007914 <__sinit+0x28>)
 8007902:	6223      	str	r3, [r4, #32]
 8007904:	4b04      	ldr	r3, [pc, #16]	; (8007918 <__sinit+0x2c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1f5      	bne.n	80078f8 <__sinit+0xc>
 800790c:	f7ff ffc4 	bl	8007898 <global_stdio_init.part.0>
 8007910:	e7f2      	b.n	80078f8 <__sinit+0xc>
 8007912:	bf00      	nop
 8007914:	08007859 	.word	0x08007859
 8007918:	20004d90 	.word	0x20004d90

0800791c <fiprintf>:
 800791c:	b40e      	push	{r1, r2, r3}
 800791e:	b503      	push	{r0, r1, lr}
 8007920:	4601      	mov	r1, r0
 8007922:	ab03      	add	r3, sp, #12
 8007924:	4805      	ldr	r0, [pc, #20]	; (800793c <fiprintf+0x20>)
 8007926:	f853 2b04 	ldr.w	r2, [r3], #4
 800792a:	6800      	ldr	r0, [r0, #0]
 800792c:	9301      	str	r3, [sp, #4]
 800792e:	f001 f86f 	bl	8008a10 <_vfiprintf_r>
 8007932:	b002      	add	sp, #8
 8007934:	f85d eb04 	ldr.w	lr, [sp], #4
 8007938:	b003      	add	sp, #12
 800793a:	4770      	bx	lr
 800793c:	2000006c 	.word	0x2000006c

08007940 <_fwalk_sglue>:
 8007940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007944:	4607      	mov	r7, r0
 8007946:	4688      	mov	r8, r1
 8007948:	4614      	mov	r4, r2
 800794a:	2600      	movs	r6, #0
 800794c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007950:	f1b9 0901 	subs.w	r9, r9, #1
 8007954:	d505      	bpl.n	8007962 <_fwalk_sglue+0x22>
 8007956:	6824      	ldr	r4, [r4, #0]
 8007958:	2c00      	cmp	r4, #0
 800795a:	d1f7      	bne.n	800794c <_fwalk_sglue+0xc>
 800795c:	4630      	mov	r0, r6
 800795e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007962:	89ab      	ldrh	r3, [r5, #12]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d907      	bls.n	8007978 <_fwalk_sglue+0x38>
 8007968:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800796c:	3301      	adds	r3, #1
 800796e:	d003      	beq.n	8007978 <_fwalk_sglue+0x38>
 8007970:	4629      	mov	r1, r5
 8007972:	4638      	mov	r0, r7
 8007974:	47c0      	blx	r8
 8007976:	4306      	orrs	r6, r0
 8007978:	3568      	adds	r5, #104	; 0x68
 800797a:	e7e9      	b.n	8007950 <_fwalk_sglue+0x10>

0800797c <memset>:
 800797c:	4402      	add	r2, r0
 800797e:	4603      	mov	r3, r0
 8007980:	4293      	cmp	r3, r2
 8007982:	d100      	bne.n	8007986 <memset+0xa>
 8007984:	4770      	bx	lr
 8007986:	f803 1b01 	strb.w	r1, [r3], #1
 800798a:	e7f9      	b.n	8007980 <memset+0x4>

0800798c <_localeconv_r>:
 800798c:	4800      	ldr	r0, [pc, #0]	; (8007990 <_localeconv_r+0x4>)
 800798e:	4770      	bx	lr
 8007990:	20000160 	.word	0x20000160

08007994 <__errno>:
 8007994:	4b01      	ldr	r3, [pc, #4]	; (800799c <__errno+0x8>)
 8007996:	6818      	ldr	r0, [r3, #0]
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	2000006c 	.word	0x2000006c

080079a0 <__libc_init_array>:
 80079a0:	b570      	push	{r4, r5, r6, lr}
 80079a2:	4d0d      	ldr	r5, [pc, #52]	; (80079d8 <__libc_init_array+0x38>)
 80079a4:	4c0d      	ldr	r4, [pc, #52]	; (80079dc <__libc_init_array+0x3c>)
 80079a6:	1b64      	subs	r4, r4, r5
 80079a8:	10a4      	asrs	r4, r4, #2
 80079aa:	2600      	movs	r6, #0
 80079ac:	42a6      	cmp	r6, r4
 80079ae:	d109      	bne.n	80079c4 <__libc_init_array+0x24>
 80079b0:	4d0b      	ldr	r5, [pc, #44]	; (80079e0 <__libc_init_array+0x40>)
 80079b2:	4c0c      	ldr	r4, [pc, #48]	; (80079e4 <__libc_init_array+0x44>)
 80079b4:	f002 f8ee 	bl	8009b94 <_init>
 80079b8:	1b64      	subs	r4, r4, r5
 80079ba:	10a4      	asrs	r4, r4, #2
 80079bc:	2600      	movs	r6, #0
 80079be:	42a6      	cmp	r6, r4
 80079c0:	d105      	bne.n	80079ce <__libc_init_array+0x2e>
 80079c2:	bd70      	pop	{r4, r5, r6, pc}
 80079c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c8:	4798      	blx	r3
 80079ca:	3601      	adds	r6, #1
 80079cc:	e7ee      	b.n	80079ac <__libc_init_array+0xc>
 80079ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d2:	4798      	blx	r3
 80079d4:	3601      	adds	r6, #1
 80079d6:	e7f2      	b.n	80079be <__libc_init_array+0x1e>
 80079d8:	0800a028 	.word	0x0800a028
 80079dc:	0800a028 	.word	0x0800a028
 80079e0:	0800a028 	.word	0x0800a028
 80079e4:	0800a02c 	.word	0x0800a02c

080079e8 <__retarget_lock_init_recursive>:
 80079e8:	4770      	bx	lr

080079ea <__retarget_lock_acquire_recursive>:
 80079ea:	4770      	bx	lr

080079ec <__retarget_lock_release_recursive>:
 80079ec:	4770      	bx	lr

080079ee <memcpy>:
 80079ee:	440a      	add	r2, r1
 80079f0:	4291      	cmp	r1, r2
 80079f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80079f6:	d100      	bne.n	80079fa <memcpy+0xc>
 80079f8:	4770      	bx	lr
 80079fa:	b510      	push	{r4, lr}
 80079fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a04:	4291      	cmp	r1, r2
 8007a06:	d1f9      	bne.n	80079fc <memcpy+0xe>
 8007a08:	bd10      	pop	{r4, pc}

08007a0a <abort>:
 8007a0a:	b508      	push	{r3, lr}
 8007a0c:	2006      	movs	r0, #6
 8007a0e:	f001 fff9 	bl	8009a04 <raise>
 8007a12:	2001      	movs	r0, #1
 8007a14:	f7f9 fdf7 	bl	8001606 <_exit>

08007a18 <quorem>:
 8007a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	6903      	ldr	r3, [r0, #16]
 8007a1e:	690c      	ldr	r4, [r1, #16]
 8007a20:	42a3      	cmp	r3, r4
 8007a22:	4607      	mov	r7, r0
 8007a24:	db7e      	blt.n	8007b24 <quorem+0x10c>
 8007a26:	3c01      	subs	r4, #1
 8007a28:	f101 0814 	add.w	r8, r1, #20
 8007a2c:	f100 0514 	add.w	r5, r0, #20
 8007a30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a34:	9301      	str	r3, [sp, #4]
 8007a36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	429a      	cmp	r2, r3
 8007a42:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a4e:	d331      	bcc.n	8007ab4 <quorem+0x9c>
 8007a50:	f04f 0e00 	mov.w	lr, #0
 8007a54:	4640      	mov	r0, r8
 8007a56:	46ac      	mov	ip, r5
 8007a58:	46f2      	mov	sl, lr
 8007a5a:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a5e:	b293      	uxth	r3, r2
 8007a60:	fb06 e303 	mla	r3, r6, r3, lr
 8007a64:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a68:	0c1a      	lsrs	r2, r3, #16
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	ebaa 0303 	sub.w	r3, sl, r3
 8007a70:	f8dc a000 	ldr.w	sl, [ip]
 8007a74:	fa13 f38a 	uxtah	r3, r3, sl
 8007a78:	fb06 220e 	mla	r2, r6, lr, r2
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	9b00      	ldr	r3, [sp, #0]
 8007a80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a84:	b292      	uxth	r2, r2
 8007a86:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a8e:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a92:	4581      	cmp	r9, r0
 8007a94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a98:	f84c 3b04 	str.w	r3, [ip], #4
 8007a9c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007aa0:	d2db      	bcs.n	8007a5a <quorem+0x42>
 8007aa2:	f855 300b 	ldr.w	r3, [r5, fp]
 8007aa6:	b92b      	cbnz	r3, 8007ab4 <quorem+0x9c>
 8007aa8:	9b01      	ldr	r3, [sp, #4]
 8007aaa:	3b04      	subs	r3, #4
 8007aac:	429d      	cmp	r5, r3
 8007aae:	461a      	mov	r2, r3
 8007ab0:	d32c      	bcc.n	8007b0c <quorem+0xf4>
 8007ab2:	613c      	str	r4, [r7, #16]
 8007ab4:	4638      	mov	r0, r7
 8007ab6:	f001 fca3 	bl	8009400 <__mcmp>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	db22      	blt.n	8007b04 <quorem+0xec>
 8007abe:	3601      	adds	r6, #1
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ac8:	f8d1 c000 	ldr.w	ip, [r1]
 8007acc:	b293      	uxth	r3, r2
 8007ace:	1ac3      	subs	r3, r0, r3
 8007ad0:	0c12      	lsrs	r2, r2, #16
 8007ad2:	fa13 f38c 	uxtah	r3, r3, ip
 8007ad6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007ada:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ae4:	45c1      	cmp	r9, r8
 8007ae6:	f841 3b04 	str.w	r3, [r1], #4
 8007aea:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007aee:	d2e9      	bcs.n	8007ac4 <quorem+0xac>
 8007af0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007af4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007af8:	b922      	cbnz	r2, 8007b04 <quorem+0xec>
 8007afa:	3b04      	subs	r3, #4
 8007afc:	429d      	cmp	r5, r3
 8007afe:	461a      	mov	r2, r3
 8007b00:	d30a      	bcc.n	8007b18 <quorem+0x100>
 8007b02:	613c      	str	r4, [r7, #16]
 8007b04:	4630      	mov	r0, r6
 8007b06:	b003      	add	sp, #12
 8007b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0c:	6812      	ldr	r2, [r2, #0]
 8007b0e:	3b04      	subs	r3, #4
 8007b10:	2a00      	cmp	r2, #0
 8007b12:	d1ce      	bne.n	8007ab2 <quorem+0x9a>
 8007b14:	3c01      	subs	r4, #1
 8007b16:	e7c9      	b.n	8007aac <quorem+0x94>
 8007b18:	6812      	ldr	r2, [r2, #0]
 8007b1a:	3b04      	subs	r3, #4
 8007b1c:	2a00      	cmp	r2, #0
 8007b1e:	d1f0      	bne.n	8007b02 <quorem+0xea>
 8007b20:	3c01      	subs	r4, #1
 8007b22:	e7eb      	b.n	8007afc <quorem+0xe4>
 8007b24:	2000      	movs	r0, #0
 8007b26:	e7ee      	b.n	8007b06 <quorem+0xee>

08007b28 <_dtoa_r>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	ed2d 8b04 	vpush	{d8-d9}
 8007b30:	69c5      	ldr	r5, [r0, #28]
 8007b32:	b093      	sub	sp, #76	; 0x4c
 8007b34:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007b38:	ec57 6b10 	vmov	r6, r7, d0
 8007b3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b40:	9107      	str	r1, [sp, #28]
 8007b42:	4604      	mov	r4, r0
 8007b44:	920a      	str	r2, [sp, #40]	; 0x28
 8007b46:	930d      	str	r3, [sp, #52]	; 0x34
 8007b48:	b975      	cbnz	r5, 8007b68 <_dtoa_r+0x40>
 8007b4a:	2010      	movs	r0, #16
 8007b4c:	f001 f87a 	bl	8008c44 <malloc>
 8007b50:	4602      	mov	r2, r0
 8007b52:	61e0      	str	r0, [r4, #28]
 8007b54:	b920      	cbnz	r0, 8007b60 <_dtoa_r+0x38>
 8007b56:	4bae      	ldr	r3, [pc, #696]	; (8007e10 <_dtoa_r+0x2e8>)
 8007b58:	21ef      	movs	r1, #239	; 0xef
 8007b5a:	48ae      	ldr	r0, [pc, #696]	; (8007e14 <_dtoa_r+0x2ec>)
 8007b5c:	f7ff f996 	bl	8006e8c <__assert_func>
 8007b60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b64:	6005      	str	r5, [r0, #0]
 8007b66:	60c5      	str	r5, [r0, #12]
 8007b68:	69e3      	ldr	r3, [r4, #28]
 8007b6a:	6819      	ldr	r1, [r3, #0]
 8007b6c:	b151      	cbz	r1, 8007b84 <_dtoa_r+0x5c>
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	604a      	str	r2, [r1, #4]
 8007b72:	2301      	movs	r3, #1
 8007b74:	4093      	lsls	r3, r2
 8007b76:	608b      	str	r3, [r1, #8]
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f001 fa05 	bl	8008f88 <_Bfree>
 8007b7e:	69e3      	ldr	r3, [r4, #28]
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	1e3b      	subs	r3, r7, #0
 8007b86:	bfbb      	ittet	lt
 8007b88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b8c:	9303      	strlt	r3, [sp, #12]
 8007b8e:	2300      	movge	r3, #0
 8007b90:	2201      	movlt	r2, #1
 8007b92:	bfac      	ite	ge
 8007b94:	f8c8 3000 	strge.w	r3, [r8]
 8007b98:	f8c8 2000 	strlt.w	r2, [r8]
 8007b9c:	4b9e      	ldr	r3, [pc, #632]	; (8007e18 <_dtoa_r+0x2f0>)
 8007b9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007ba2:	ea33 0308 	bics.w	r3, r3, r8
 8007ba6:	d11b      	bne.n	8007be0 <_dtoa_r+0xb8>
 8007ba8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007baa:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bae:	6013      	str	r3, [r2, #0]
 8007bb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007bb4:	4333      	orrs	r3, r6
 8007bb6:	f000 8593 	beq.w	80086e0 <_dtoa_r+0xbb8>
 8007bba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bbc:	b963      	cbnz	r3, 8007bd8 <_dtoa_r+0xb0>
 8007bbe:	4b97      	ldr	r3, [pc, #604]	; (8007e1c <_dtoa_r+0x2f4>)
 8007bc0:	e027      	b.n	8007c12 <_dtoa_r+0xea>
 8007bc2:	4b97      	ldr	r3, [pc, #604]	; (8007e20 <_dtoa_r+0x2f8>)
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	9800      	ldr	r0, [sp, #0]
 8007bce:	b013      	add	sp, #76	; 0x4c
 8007bd0:	ecbd 8b04 	vpop	{d8-d9}
 8007bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd8:	4b90      	ldr	r3, [pc, #576]	; (8007e1c <_dtoa_r+0x2f4>)
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	3303      	adds	r3, #3
 8007bde:	e7f3      	b.n	8007bc8 <_dtoa_r+0xa0>
 8007be0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007be4:	2200      	movs	r2, #0
 8007be6:	ec51 0b17 	vmov	r0, r1, d7
 8007bea:	eeb0 8a47 	vmov.f32	s16, s14
 8007bee:	eef0 8a67 	vmov.f32	s17, s15
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f7f8 ff68 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bf8:	4681      	mov	r9, r0
 8007bfa:	b160      	cbz	r0, 8007c16 <_dtoa_r+0xee>
 8007bfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bfe:	2301      	movs	r3, #1
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 8568 	beq.w	80086da <_dtoa_r+0xbb2>
 8007c0a:	4b86      	ldr	r3, [pc, #536]	; (8007e24 <_dtoa_r+0x2fc>)
 8007c0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	e7da      	b.n	8007bcc <_dtoa_r+0xa4>
 8007c16:	aa10      	add	r2, sp, #64	; 0x40
 8007c18:	a911      	add	r1, sp, #68	; 0x44
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	eeb0 0a48 	vmov.f32	s0, s16
 8007c20:	eef0 0a68 	vmov.f32	s1, s17
 8007c24:	f001 fc92 	bl	800954c <__d2b>
 8007c28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007c2c:	4682      	mov	sl, r0
 8007c2e:	2d00      	cmp	r5, #0
 8007c30:	d07f      	beq.n	8007d32 <_dtoa_r+0x20a>
 8007c32:	ee18 3a90 	vmov	r3, s17
 8007c36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007c3e:	ec51 0b18 	vmov	r0, r1, d8
 8007c42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007c46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007c4e:	4619      	mov	r1, r3
 8007c50:	2200      	movs	r2, #0
 8007c52:	4b75      	ldr	r3, [pc, #468]	; (8007e28 <_dtoa_r+0x300>)
 8007c54:	f7f8 fb18 	bl	8000288 <__aeabi_dsub>
 8007c58:	a367      	add	r3, pc, #412	; (adr r3, 8007df8 <_dtoa_r+0x2d0>)
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	f7f8 fccb 	bl	80005f8 <__aeabi_dmul>
 8007c62:	a367      	add	r3, pc, #412	; (adr r3, 8007e00 <_dtoa_r+0x2d8>)
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	f7f8 fb10 	bl	800028c <__adddf3>
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	4628      	mov	r0, r5
 8007c70:	460f      	mov	r7, r1
 8007c72:	f7f8 fc57 	bl	8000524 <__aeabi_i2d>
 8007c76:	a364      	add	r3, pc, #400	; (adr r3, 8007e08 <_dtoa_r+0x2e0>)
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	f7f8 fcbc 	bl	80005f8 <__aeabi_dmul>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	4630      	mov	r0, r6
 8007c86:	4639      	mov	r1, r7
 8007c88:	f7f8 fb00 	bl	800028c <__adddf3>
 8007c8c:	4606      	mov	r6, r0
 8007c8e:	460f      	mov	r7, r1
 8007c90:	f7f8 ff62 	bl	8000b58 <__aeabi_d2iz>
 8007c94:	2200      	movs	r2, #0
 8007c96:	4683      	mov	fp, r0
 8007c98:	2300      	movs	r3, #0
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	4639      	mov	r1, r7
 8007c9e:	f7f8 ff1d 	bl	8000adc <__aeabi_dcmplt>
 8007ca2:	b148      	cbz	r0, 8007cb8 <_dtoa_r+0x190>
 8007ca4:	4658      	mov	r0, fp
 8007ca6:	f7f8 fc3d 	bl	8000524 <__aeabi_i2d>
 8007caa:	4632      	mov	r2, r6
 8007cac:	463b      	mov	r3, r7
 8007cae:	f7f8 ff0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cb2:	b908      	cbnz	r0, 8007cb8 <_dtoa_r+0x190>
 8007cb4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007cb8:	f1bb 0f16 	cmp.w	fp, #22
 8007cbc:	d857      	bhi.n	8007d6e <_dtoa_r+0x246>
 8007cbe:	4b5b      	ldr	r3, [pc, #364]	; (8007e2c <_dtoa_r+0x304>)
 8007cc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	ec51 0b18 	vmov	r0, r1, d8
 8007ccc:	f7f8 ff06 	bl	8000adc <__aeabi_dcmplt>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d04e      	beq.n	8007d72 <_dtoa_r+0x24a>
 8007cd4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007cd8:	2300      	movs	r3, #0
 8007cda:	930c      	str	r3, [sp, #48]	; 0x30
 8007cdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cde:	1b5b      	subs	r3, r3, r5
 8007ce0:	1e5a      	subs	r2, r3, #1
 8007ce2:	bf45      	ittet	mi
 8007ce4:	f1c3 0301 	rsbmi	r3, r3, #1
 8007ce8:	9305      	strmi	r3, [sp, #20]
 8007cea:	2300      	movpl	r3, #0
 8007cec:	2300      	movmi	r3, #0
 8007cee:	9206      	str	r2, [sp, #24]
 8007cf0:	bf54      	ite	pl
 8007cf2:	9305      	strpl	r3, [sp, #20]
 8007cf4:	9306      	strmi	r3, [sp, #24]
 8007cf6:	f1bb 0f00 	cmp.w	fp, #0
 8007cfa:	db3c      	blt.n	8007d76 <_dtoa_r+0x24e>
 8007cfc:	9b06      	ldr	r3, [sp, #24]
 8007cfe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007d02:	445b      	add	r3, fp
 8007d04:	9306      	str	r3, [sp, #24]
 8007d06:	2300      	movs	r3, #0
 8007d08:	9308      	str	r3, [sp, #32]
 8007d0a:	9b07      	ldr	r3, [sp, #28]
 8007d0c:	2b09      	cmp	r3, #9
 8007d0e:	d868      	bhi.n	8007de2 <_dtoa_r+0x2ba>
 8007d10:	2b05      	cmp	r3, #5
 8007d12:	bfc4      	itt	gt
 8007d14:	3b04      	subgt	r3, #4
 8007d16:	9307      	strgt	r3, [sp, #28]
 8007d18:	9b07      	ldr	r3, [sp, #28]
 8007d1a:	f1a3 0302 	sub.w	r3, r3, #2
 8007d1e:	bfcc      	ite	gt
 8007d20:	2500      	movgt	r5, #0
 8007d22:	2501      	movle	r5, #1
 8007d24:	2b03      	cmp	r3, #3
 8007d26:	f200 8085 	bhi.w	8007e34 <_dtoa_r+0x30c>
 8007d2a:	e8df f003 	tbb	[pc, r3]
 8007d2e:	3b2e      	.short	0x3b2e
 8007d30:	5839      	.short	0x5839
 8007d32:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007d36:	441d      	add	r5, r3
 8007d38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d3c:	2b20      	cmp	r3, #32
 8007d3e:	bfc1      	itttt	gt
 8007d40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d44:	fa08 f803 	lslgt.w	r8, r8, r3
 8007d48:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007d4c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007d50:	bfd6      	itet	le
 8007d52:	f1c3 0320 	rsble	r3, r3, #32
 8007d56:	ea48 0003 	orrgt.w	r0, r8, r3
 8007d5a:	fa06 f003 	lslle.w	r0, r6, r3
 8007d5e:	f7f8 fbd1 	bl	8000504 <__aeabi_ui2d>
 8007d62:	2201      	movs	r2, #1
 8007d64:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007d68:	3d01      	subs	r5, #1
 8007d6a:	920e      	str	r2, [sp, #56]	; 0x38
 8007d6c:	e76f      	b.n	8007c4e <_dtoa_r+0x126>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e7b3      	b.n	8007cda <_dtoa_r+0x1b2>
 8007d72:	900c      	str	r0, [sp, #48]	; 0x30
 8007d74:	e7b2      	b.n	8007cdc <_dtoa_r+0x1b4>
 8007d76:	9b05      	ldr	r3, [sp, #20]
 8007d78:	eba3 030b 	sub.w	r3, r3, fp
 8007d7c:	9305      	str	r3, [sp, #20]
 8007d7e:	f1cb 0300 	rsb	r3, fp, #0
 8007d82:	9308      	str	r3, [sp, #32]
 8007d84:	2300      	movs	r3, #0
 8007d86:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d88:	e7bf      	b.n	8007d0a <_dtoa_r+0x1e2>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	dc52      	bgt.n	8007e3a <_dtoa_r+0x312>
 8007d94:	2301      	movs	r3, #1
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	9304      	str	r3, [sp, #16]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	920a      	str	r2, [sp, #40]	; 0x28
 8007d9e:	e00b      	b.n	8007db8 <_dtoa_r+0x290>
 8007da0:	2301      	movs	r3, #1
 8007da2:	e7f3      	b.n	8007d8c <_dtoa_r+0x264>
 8007da4:	2300      	movs	r3, #0
 8007da6:	9309      	str	r3, [sp, #36]	; 0x24
 8007da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007daa:	445b      	add	r3, fp
 8007dac:	9301      	str	r3, [sp, #4]
 8007dae:	3301      	adds	r3, #1
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	9304      	str	r3, [sp, #16]
 8007db4:	bfb8      	it	lt
 8007db6:	2301      	movlt	r3, #1
 8007db8:	69e0      	ldr	r0, [r4, #28]
 8007dba:	2100      	movs	r1, #0
 8007dbc:	2204      	movs	r2, #4
 8007dbe:	f102 0614 	add.w	r6, r2, #20
 8007dc2:	429e      	cmp	r6, r3
 8007dc4:	d93d      	bls.n	8007e42 <_dtoa_r+0x31a>
 8007dc6:	6041      	str	r1, [r0, #4]
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f001 f89d 	bl	8008f08 <_Balloc>
 8007dce:	9000      	str	r0, [sp, #0]
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	d139      	bne.n	8007e48 <_dtoa_r+0x320>
 8007dd4:	4b16      	ldr	r3, [pc, #88]	; (8007e30 <_dtoa_r+0x308>)
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	f240 11af 	movw	r1, #431	; 0x1af
 8007ddc:	e6bd      	b.n	8007b5a <_dtoa_r+0x32>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e7e1      	b.n	8007da6 <_dtoa_r+0x27e>
 8007de2:	2501      	movs	r5, #1
 8007de4:	2300      	movs	r3, #0
 8007de6:	9307      	str	r3, [sp, #28]
 8007de8:	9509      	str	r5, [sp, #36]	; 0x24
 8007dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	9304      	str	r3, [sp, #16]
 8007df2:	2200      	movs	r2, #0
 8007df4:	2312      	movs	r3, #18
 8007df6:	e7d1      	b.n	8007d9c <_dtoa_r+0x274>
 8007df8:	636f4361 	.word	0x636f4361
 8007dfc:	3fd287a7 	.word	0x3fd287a7
 8007e00:	8b60c8b3 	.word	0x8b60c8b3
 8007e04:	3fc68a28 	.word	0x3fc68a28
 8007e08:	509f79fb 	.word	0x509f79fb
 8007e0c:	3fd34413 	.word	0x3fd34413
 8007e10:	08009d29 	.word	0x08009d29
 8007e14:	08009d40 	.word	0x08009d40
 8007e18:	7ff00000 	.word	0x7ff00000
 8007e1c:	08009d25 	.word	0x08009d25
 8007e20:	08009d1c 	.word	0x08009d1c
 8007e24:	08009cf9 	.word	0x08009cf9
 8007e28:	3ff80000 	.word	0x3ff80000
 8007e2c:	08009e40 	.word	0x08009e40
 8007e30:	08009d98 	.word	0x08009d98
 8007e34:	2301      	movs	r3, #1
 8007e36:	9309      	str	r3, [sp, #36]	; 0x24
 8007e38:	e7d7      	b.n	8007dea <_dtoa_r+0x2c2>
 8007e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e3c:	9301      	str	r3, [sp, #4]
 8007e3e:	9304      	str	r3, [sp, #16]
 8007e40:	e7ba      	b.n	8007db8 <_dtoa_r+0x290>
 8007e42:	3101      	adds	r1, #1
 8007e44:	0052      	lsls	r2, r2, #1
 8007e46:	e7ba      	b.n	8007dbe <_dtoa_r+0x296>
 8007e48:	69e3      	ldr	r3, [r4, #28]
 8007e4a:	9a00      	ldr	r2, [sp, #0]
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	9b04      	ldr	r3, [sp, #16]
 8007e50:	2b0e      	cmp	r3, #14
 8007e52:	f200 80a8 	bhi.w	8007fa6 <_dtoa_r+0x47e>
 8007e56:	2d00      	cmp	r5, #0
 8007e58:	f000 80a5 	beq.w	8007fa6 <_dtoa_r+0x47e>
 8007e5c:	f1bb 0f00 	cmp.w	fp, #0
 8007e60:	dd38      	ble.n	8007ed4 <_dtoa_r+0x3ac>
 8007e62:	4bc0      	ldr	r3, [pc, #768]	; (8008164 <_dtoa_r+0x63c>)
 8007e64:	f00b 020f 	and.w	r2, fp, #15
 8007e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007e70:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007e74:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007e78:	d019      	beq.n	8007eae <_dtoa_r+0x386>
 8007e7a:	4bbb      	ldr	r3, [pc, #748]	; (8008168 <_dtoa_r+0x640>)
 8007e7c:	ec51 0b18 	vmov	r0, r1, d8
 8007e80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e84:	f7f8 fce2 	bl	800084c <__aeabi_ddiv>
 8007e88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e8c:	f008 080f 	and.w	r8, r8, #15
 8007e90:	2503      	movs	r5, #3
 8007e92:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008168 <_dtoa_r+0x640>
 8007e96:	f1b8 0f00 	cmp.w	r8, #0
 8007e9a:	d10a      	bne.n	8007eb2 <_dtoa_r+0x38a>
 8007e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ea0:	4632      	mov	r2, r6
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	f7f8 fcd2 	bl	800084c <__aeabi_ddiv>
 8007ea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eac:	e02b      	b.n	8007f06 <_dtoa_r+0x3de>
 8007eae:	2502      	movs	r5, #2
 8007eb0:	e7ef      	b.n	8007e92 <_dtoa_r+0x36a>
 8007eb2:	f018 0f01 	tst.w	r8, #1
 8007eb6:	d008      	beq.n	8007eca <_dtoa_r+0x3a2>
 8007eb8:	4630      	mov	r0, r6
 8007eba:	4639      	mov	r1, r7
 8007ebc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007ec0:	f7f8 fb9a 	bl	80005f8 <__aeabi_dmul>
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	460f      	mov	r7, r1
 8007eca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007ece:	f109 0908 	add.w	r9, r9, #8
 8007ed2:	e7e0      	b.n	8007e96 <_dtoa_r+0x36e>
 8007ed4:	f000 809f 	beq.w	8008016 <_dtoa_r+0x4ee>
 8007ed8:	f1cb 0600 	rsb	r6, fp, #0
 8007edc:	4ba1      	ldr	r3, [pc, #644]	; (8008164 <_dtoa_r+0x63c>)
 8007ede:	4fa2      	ldr	r7, [pc, #648]	; (8008168 <_dtoa_r+0x640>)
 8007ee0:	f006 020f 	and.w	r2, r6, #15
 8007ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eec:	ec51 0b18 	vmov	r0, r1, d8
 8007ef0:	f7f8 fb82 	bl	80005f8 <__aeabi_dmul>
 8007ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ef8:	1136      	asrs	r6, r6, #4
 8007efa:	2300      	movs	r3, #0
 8007efc:	2502      	movs	r5, #2
 8007efe:	2e00      	cmp	r6, #0
 8007f00:	d17e      	bne.n	8008000 <_dtoa_r+0x4d8>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1d0      	bne.n	8007ea8 <_dtoa_r+0x380>
 8007f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f08:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 8084 	beq.w	800801a <_dtoa_r+0x4f2>
 8007f12:	4b96      	ldr	r3, [pc, #600]	; (800816c <_dtoa_r+0x644>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	4640      	mov	r0, r8
 8007f18:	4649      	mov	r1, r9
 8007f1a:	f7f8 fddf 	bl	8000adc <__aeabi_dcmplt>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d07b      	beq.n	800801a <_dtoa_r+0x4f2>
 8007f22:	9b04      	ldr	r3, [sp, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d078      	beq.n	800801a <_dtoa_r+0x4f2>
 8007f28:	9b01      	ldr	r3, [sp, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	dd39      	ble.n	8007fa2 <_dtoa_r+0x47a>
 8007f2e:	4b90      	ldr	r3, [pc, #576]	; (8008170 <_dtoa_r+0x648>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	4640      	mov	r0, r8
 8007f34:	4649      	mov	r1, r9
 8007f36:	f7f8 fb5f 	bl	80005f8 <__aeabi_dmul>
 8007f3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f3e:	9e01      	ldr	r6, [sp, #4]
 8007f40:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007f44:	3501      	adds	r5, #1
 8007f46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	f7f8 faea 	bl	8000524 <__aeabi_i2d>
 8007f50:	4642      	mov	r2, r8
 8007f52:	464b      	mov	r3, r9
 8007f54:	f7f8 fb50 	bl	80005f8 <__aeabi_dmul>
 8007f58:	4b86      	ldr	r3, [pc, #536]	; (8008174 <_dtoa_r+0x64c>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f7f8 f996 	bl	800028c <__adddf3>
 8007f60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f68:	9303      	str	r3, [sp, #12]
 8007f6a:	2e00      	cmp	r6, #0
 8007f6c:	d158      	bne.n	8008020 <_dtoa_r+0x4f8>
 8007f6e:	4b82      	ldr	r3, [pc, #520]	; (8008178 <_dtoa_r+0x650>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	4640      	mov	r0, r8
 8007f74:	4649      	mov	r1, r9
 8007f76:	f7f8 f987 	bl	8000288 <__aeabi_dsub>
 8007f7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f7e:	4680      	mov	r8, r0
 8007f80:	4689      	mov	r9, r1
 8007f82:	f7f8 fdc9 	bl	8000b18 <__aeabi_dcmpgt>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	f040 8296 	bne.w	80084b8 <_dtoa_r+0x990>
 8007f8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007f90:	4640      	mov	r0, r8
 8007f92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f96:	4649      	mov	r1, r9
 8007f98:	f7f8 fda0 	bl	8000adc <__aeabi_dcmplt>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	f040 8289 	bne.w	80084b4 <_dtoa_r+0x98c>
 8007fa2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007fa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f2c0 814e 	blt.w	800824a <_dtoa_r+0x722>
 8007fae:	f1bb 0f0e 	cmp.w	fp, #14
 8007fb2:	f300 814a 	bgt.w	800824a <_dtoa_r+0x722>
 8007fb6:	4b6b      	ldr	r3, [pc, #428]	; (8008164 <_dtoa_r+0x63c>)
 8007fb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007fbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f280 80dc 	bge.w	8008180 <_dtoa_r+0x658>
 8007fc8:	9b04      	ldr	r3, [sp, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f300 80d8 	bgt.w	8008180 <_dtoa_r+0x658>
 8007fd0:	f040 826f 	bne.w	80084b2 <_dtoa_r+0x98a>
 8007fd4:	4b68      	ldr	r3, [pc, #416]	; (8008178 <_dtoa_r+0x650>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	4640      	mov	r0, r8
 8007fda:	4649      	mov	r1, r9
 8007fdc:	f7f8 fb0c 	bl	80005f8 <__aeabi_dmul>
 8007fe0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fe4:	f7f8 fd8e 	bl	8000b04 <__aeabi_dcmpge>
 8007fe8:	9e04      	ldr	r6, [sp, #16]
 8007fea:	4637      	mov	r7, r6
 8007fec:	2800      	cmp	r0, #0
 8007fee:	f040 8245 	bne.w	800847c <_dtoa_r+0x954>
 8007ff2:	9d00      	ldr	r5, [sp, #0]
 8007ff4:	2331      	movs	r3, #49	; 0x31
 8007ff6:	f805 3b01 	strb.w	r3, [r5], #1
 8007ffa:	f10b 0b01 	add.w	fp, fp, #1
 8007ffe:	e241      	b.n	8008484 <_dtoa_r+0x95c>
 8008000:	07f2      	lsls	r2, r6, #31
 8008002:	d505      	bpl.n	8008010 <_dtoa_r+0x4e8>
 8008004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008008:	f7f8 faf6 	bl	80005f8 <__aeabi_dmul>
 800800c:	3501      	adds	r5, #1
 800800e:	2301      	movs	r3, #1
 8008010:	1076      	asrs	r6, r6, #1
 8008012:	3708      	adds	r7, #8
 8008014:	e773      	b.n	8007efe <_dtoa_r+0x3d6>
 8008016:	2502      	movs	r5, #2
 8008018:	e775      	b.n	8007f06 <_dtoa_r+0x3de>
 800801a:	9e04      	ldr	r6, [sp, #16]
 800801c:	465f      	mov	r7, fp
 800801e:	e792      	b.n	8007f46 <_dtoa_r+0x41e>
 8008020:	9900      	ldr	r1, [sp, #0]
 8008022:	4b50      	ldr	r3, [pc, #320]	; (8008164 <_dtoa_r+0x63c>)
 8008024:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008028:	4431      	add	r1, r6
 800802a:	9102      	str	r1, [sp, #8]
 800802c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800802e:	eeb0 9a47 	vmov.f32	s18, s14
 8008032:	eef0 9a67 	vmov.f32	s19, s15
 8008036:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800803a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800803e:	2900      	cmp	r1, #0
 8008040:	d044      	beq.n	80080cc <_dtoa_r+0x5a4>
 8008042:	494e      	ldr	r1, [pc, #312]	; (800817c <_dtoa_r+0x654>)
 8008044:	2000      	movs	r0, #0
 8008046:	f7f8 fc01 	bl	800084c <__aeabi_ddiv>
 800804a:	ec53 2b19 	vmov	r2, r3, d9
 800804e:	f7f8 f91b 	bl	8000288 <__aeabi_dsub>
 8008052:	9d00      	ldr	r5, [sp, #0]
 8008054:	ec41 0b19 	vmov	d9, r0, r1
 8008058:	4649      	mov	r1, r9
 800805a:	4640      	mov	r0, r8
 800805c:	f7f8 fd7c 	bl	8000b58 <__aeabi_d2iz>
 8008060:	4606      	mov	r6, r0
 8008062:	f7f8 fa5f 	bl	8000524 <__aeabi_i2d>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	4640      	mov	r0, r8
 800806c:	4649      	mov	r1, r9
 800806e:	f7f8 f90b 	bl	8000288 <__aeabi_dsub>
 8008072:	3630      	adds	r6, #48	; 0x30
 8008074:	f805 6b01 	strb.w	r6, [r5], #1
 8008078:	ec53 2b19 	vmov	r2, r3, d9
 800807c:	4680      	mov	r8, r0
 800807e:	4689      	mov	r9, r1
 8008080:	f7f8 fd2c 	bl	8000adc <__aeabi_dcmplt>
 8008084:	2800      	cmp	r0, #0
 8008086:	d164      	bne.n	8008152 <_dtoa_r+0x62a>
 8008088:	4642      	mov	r2, r8
 800808a:	464b      	mov	r3, r9
 800808c:	4937      	ldr	r1, [pc, #220]	; (800816c <_dtoa_r+0x644>)
 800808e:	2000      	movs	r0, #0
 8008090:	f7f8 f8fa 	bl	8000288 <__aeabi_dsub>
 8008094:	ec53 2b19 	vmov	r2, r3, d9
 8008098:	f7f8 fd20 	bl	8000adc <__aeabi_dcmplt>
 800809c:	2800      	cmp	r0, #0
 800809e:	f040 80b6 	bne.w	800820e <_dtoa_r+0x6e6>
 80080a2:	9b02      	ldr	r3, [sp, #8]
 80080a4:	429d      	cmp	r5, r3
 80080a6:	f43f af7c 	beq.w	8007fa2 <_dtoa_r+0x47a>
 80080aa:	4b31      	ldr	r3, [pc, #196]	; (8008170 <_dtoa_r+0x648>)
 80080ac:	ec51 0b19 	vmov	r0, r1, d9
 80080b0:	2200      	movs	r2, #0
 80080b2:	f7f8 faa1 	bl	80005f8 <__aeabi_dmul>
 80080b6:	4b2e      	ldr	r3, [pc, #184]	; (8008170 <_dtoa_r+0x648>)
 80080b8:	ec41 0b19 	vmov	d9, r0, r1
 80080bc:	2200      	movs	r2, #0
 80080be:	4640      	mov	r0, r8
 80080c0:	4649      	mov	r1, r9
 80080c2:	f7f8 fa99 	bl	80005f8 <__aeabi_dmul>
 80080c6:	4680      	mov	r8, r0
 80080c8:	4689      	mov	r9, r1
 80080ca:	e7c5      	b.n	8008058 <_dtoa_r+0x530>
 80080cc:	ec51 0b17 	vmov	r0, r1, d7
 80080d0:	f7f8 fa92 	bl	80005f8 <__aeabi_dmul>
 80080d4:	9b02      	ldr	r3, [sp, #8]
 80080d6:	9d00      	ldr	r5, [sp, #0]
 80080d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80080da:	ec41 0b19 	vmov	d9, r0, r1
 80080de:	4649      	mov	r1, r9
 80080e0:	4640      	mov	r0, r8
 80080e2:	f7f8 fd39 	bl	8000b58 <__aeabi_d2iz>
 80080e6:	4606      	mov	r6, r0
 80080e8:	f7f8 fa1c 	bl	8000524 <__aeabi_i2d>
 80080ec:	3630      	adds	r6, #48	; 0x30
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	4640      	mov	r0, r8
 80080f4:	4649      	mov	r1, r9
 80080f6:	f7f8 f8c7 	bl	8000288 <__aeabi_dsub>
 80080fa:	f805 6b01 	strb.w	r6, [r5], #1
 80080fe:	9b02      	ldr	r3, [sp, #8]
 8008100:	429d      	cmp	r5, r3
 8008102:	4680      	mov	r8, r0
 8008104:	4689      	mov	r9, r1
 8008106:	f04f 0200 	mov.w	r2, #0
 800810a:	d124      	bne.n	8008156 <_dtoa_r+0x62e>
 800810c:	4b1b      	ldr	r3, [pc, #108]	; (800817c <_dtoa_r+0x654>)
 800810e:	ec51 0b19 	vmov	r0, r1, d9
 8008112:	f7f8 f8bb 	bl	800028c <__adddf3>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	4640      	mov	r0, r8
 800811c:	4649      	mov	r1, r9
 800811e:	f7f8 fcfb 	bl	8000b18 <__aeabi_dcmpgt>
 8008122:	2800      	cmp	r0, #0
 8008124:	d173      	bne.n	800820e <_dtoa_r+0x6e6>
 8008126:	ec53 2b19 	vmov	r2, r3, d9
 800812a:	4914      	ldr	r1, [pc, #80]	; (800817c <_dtoa_r+0x654>)
 800812c:	2000      	movs	r0, #0
 800812e:	f7f8 f8ab 	bl	8000288 <__aeabi_dsub>
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	4640      	mov	r0, r8
 8008138:	4649      	mov	r1, r9
 800813a:	f7f8 fccf 	bl	8000adc <__aeabi_dcmplt>
 800813e:	2800      	cmp	r0, #0
 8008140:	f43f af2f 	beq.w	8007fa2 <_dtoa_r+0x47a>
 8008144:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008146:	1e6b      	subs	r3, r5, #1
 8008148:	930f      	str	r3, [sp, #60]	; 0x3c
 800814a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800814e:	2b30      	cmp	r3, #48	; 0x30
 8008150:	d0f8      	beq.n	8008144 <_dtoa_r+0x61c>
 8008152:	46bb      	mov	fp, r7
 8008154:	e04a      	b.n	80081ec <_dtoa_r+0x6c4>
 8008156:	4b06      	ldr	r3, [pc, #24]	; (8008170 <_dtoa_r+0x648>)
 8008158:	f7f8 fa4e 	bl	80005f8 <__aeabi_dmul>
 800815c:	4680      	mov	r8, r0
 800815e:	4689      	mov	r9, r1
 8008160:	e7bd      	b.n	80080de <_dtoa_r+0x5b6>
 8008162:	bf00      	nop
 8008164:	08009e40 	.word	0x08009e40
 8008168:	08009e18 	.word	0x08009e18
 800816c:	3ff00000 	.word	0x3ff00000
 8008170:	40240000 	.word	0x40240000
 8008174:	401c0000 	.word	0x401c0000
 8008178:	40140000 	.word	0x40140000
 800817c:	3fe00000 	.word	0x3fe00000
 8008180:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008184:	9d00      	ldr	r5, [sp, #0]
 8008186:	4642      	mov	r2, r8
 8008188:	464b      	mov	r3, r9
 800818a:	4630      	mov	r0, r6
 800818c:	4639      	mov	r1, r7
 800818e:	f7f8 fb5d 	bl	800084c <__aeabi_ddiv>
 8008192:	f7f8 fce1 	bl	8000b58 <__aeabi_d2iz>
 8008196:	9001      	str	r0, [sp, #4]
 8008198:	f7f8 f9c4 	bl	8000524 <__aeabi_i2d>
 800819c:	4642      	mov	r2, r8
 800819e:	464b      	mov	r3, r9
 80081a0:	f7f8 fa2a 	bl	80005f8 <__aeabi_dmul>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4630      	mov	r0, r6
 80081aa:	4639      	mov	r1, r7
 80081ac:	f7f8 f86c 	bl	8000288 <__aeabi_dsub>
 80081b0:	9e01      	ldr	r6, [sp, #4]
 80081b2:	9f04      	ldr	r7, [sp, #16]
 80081b4:	3630      	adds	r6, #48	; 0x30
 80081b6:	f805 6b01 	strb.w	r6, [r5], #1
 80081ba:	9e00      	ldr	r6, [sp, #0]
 80081bc:	1bae      	subs	r6, r5, r6
 80081be:	42b7      	cmp	r7, r6
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	d134      	bne.n	8008230 <_dtoa_r+0x708>
 80081c6:	f7f8 f861 	bl	800028c <__adddf3>
 80081ca:	4642      	mov	r2, r8
 80081cc:	464b      	mov	r3, r9
 80081ce:	4606      	mov	r6, r0
 80081d0:	460f      	mov	r7, r1
 80081d2:	f7f8 fca1 	bl	8000b18 <__aeabi_dcmpgt>
 80081d6:	b9c8      	cbnz	r0, 800820c <_dtoa_r+0x6e4>
 80081d8:	4642      	mov	r2, r8
 80081da:	464b      	mov	r3, r9
 80081dc:	4630      	mov	r0, r6
 80081de:	4639      	mov	r1, r7
 80081e0:	f7f8 fc72 	bl	8000ac8 <__aeabi_dcmpeq>
 80081e4:	b110      	cbz	r0, 80081ec <_dtoa_r+0x6c4>
 80081e6:	9b01      	ldr	r3, [sp, #4]
 80081e8:	07db      	lsls	r3, r3, #31
 80081ea:	d40f      	bmi.n	800820c <_dtoa_r+0x6e4>
 80081ec:	4651      	mov	r1, sl
 80081ee:	4620      	mov	r0, r4
 80081f0:	f000 feca 	bl	8008f88 <_Bfree>
 80081f4:	2300      	movs	r3, #0
 80081f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081f8:	702b      	strb	r3, [r5, #0]
 80081fa:	f10b 0301 	add.w	r3, fp, #1
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008202:	2b00      	cmp	r3, #0
 8008204:	f43f ace2 	beq.w	8007bcc <_dtoa_r+0xa4>
 8008208:	601d      	str	r5, [r3, #0]
 800820a:	e4df      	b.n	8007bcc <_dtoa_r+0xa4>
 800820c:	465f      	mov	r7, fp
 800820e:	462b      	mov	r3, r5
 8008210:	461d      	mov	r5, r3
 8008212:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008216:	2a39      	cmp	r2, #57	; 0x39
 8008218:	d106      	bne.n	8008228 <_dtoa_r+0x700>
 800821a:	9a00      	ldr	r2, [sp, #0]
 800821c:	429a      	cmp	r2, r3
 800821e:	d1f7      	bne.n	8008210 <_dtoa_r+0x6e8>
 8008220:	9900      	ldr	r1, [sp, #0]
 8008222:	2230      	movs	r2, #48	; 0x30
 8008224:	3701      	adds	r7, #1
 8008226:	700a      	strb	r2, [r1, #0]
 8008228:	781a      	ldrb	r2, [r3, #0]
 800822a:	3201      	adds	r2, #1
 800822c:	701a      	strb	r2, [r3, #0]
 800822e:	e790      	b.n	8008152 <_dtoa_r+0x62a>
 8008230:	4ba3      	ldr	r3, [pc, #652]	; (80084c0 <_dtoa_r+0x998>)
 8008232:	2200      	movs	r2, #0
 8008234:	f7f8 f9e0 	bl	80005f8 <__aeabi_dmul>
 8008238:	2200      	movs	r2, #0
 800823a:	2300      	movs	r3, #0
 800823c:	4606      	mov	r6, r0
 800823e:	460f      	mov	r7, r1
 8008240:	f7f8 fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 8008244:	2800      	cmp	r0, #0
 8008246:	d09e      	beq.n	8008186 <_dtoa_r+0x65e>
 8008248:	e7d0      	b.n	80081ec <_dtoa_r+0x6c4>
 800824a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800824c:	2a00      	cmp	r2, #0
 800824e:	f000 80ca 	beq.w	80083e6 <_dtoa_r+0x8be>
 8008252:	9a07      	ldr	r2, [sp, #28]
 8008254:	2a01      	cmp	r2, #1
 8008256:	f300 80ad 	bgt.w	80083b4 <_dtoa_r+0x88c>
 800825a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800825c:	2a00      	cmp	r2, #0
 800825e:	f000 80a5 	beq.w	80083ac <_dtoa_r+0x884>
 8008262:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008266:	9e08      	ldr	r6, [sp, #32]
 8008268:	9d05      	ldr	r5, [sp, #20]
 800826a:	9a05      	ldr	r2, [sp, #20]
 800826c:	441a      	add	r2, r3
 800826e:	9205      	str	r2, [sp, #20]
 8008270:	9a06      	ldr	r2, [sp, #24]
 8008272:	2101      	movs	r1, #1
 8008274:	441a      	add	r2, r3
 8008276:	4620      	mov	r0, r4
 8008278:	9206      	str	r2, [sp, #24]
 800827a:	f000 ff3b 	bl	80090f4 <__i2b>
 800827e:	4607      	mov	r7, r0
 8008280:	b165      	cbz	r5, 800829c <_dtoa_r+0x774>
 8008282:	9b06      	ldr	r3, [sp, #24]
 8008284:	2b00      	cmp	r3, #0
 8008286:	dd09      	ble.n	800829c <_dtoa_r+0x774>
 8008288:	42ab      	cmp	r3, r5
 800828a:	9a05      	ldr	r2, [sp, #20]
 800828c:	bfa8      	it	ge
 800828e:	462b      	movge	r3, r5
 8008290:	1ad2      	subs	r2, r2, r3
 8008292:	9205      	str	r2, [sp, #20]
 8008294:	9a06      	ldr	r2, [sp, #24]
 8008296:	1aed      	subs	r5, r5, r3
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	9306      	str	r3, [sp, #24]
 800829c:	9b08      	ldr	r3, [sp, #32]
 800829e:	b1f3      	cbz	r3, 80082de <_dtoa_r+0x7b6>
 80082a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 80a3 	beq.w	80083ee <_dtoa_r+0x8c6>
 80082a8:	2e00      	cmp	r6, #0
 80082aa:	dd10      	ble.n	80082ce <_dtoa_r+0x7a6>
 80082ac:	4639      	mov	r1, r7
 80082ae:	4632      	mov	r2, r6
 80082b0:	4620      	mov	r0, r4
 80082b2:	f000 ffdf 	bl	8009274 <__pow5mult>
 80082b6:	4652      	mov	r2, sl
 80082b8:	4601      	mov	r1, r0
 80082ba:	4607      	mov	r7, r0
 80082bc:	4620      	mov	r0, r4
 80082be:	f000 ff2f 	bl	8009120 <__multiply>
 80082c2:	4651      	mov	r1, sl
 80082c4:	4680      	mov	r8, r0
 80082c6:	4620      	mov	r0, r4
 80082c8:	f000 fe5e 	bl	8008f88 <_Bfree>
 80082cc:	46c2      	mov	sl, r8
 80082ce:	9b08      	ldr	r3, [sp, #32]
 80082d0:	1b9a      	subs	r2, r3, r6
 80082d2:	d004      	beq.n	80082de <_dtoa_r+0x7b6>
 80082d4:	4651      	mov	r1, sl
 80082d6:	4620      	mov	r0, r4
 80082d8:	f000 ffcc 	bl	8009274 <__pow5mult>
 80082dc:	4682      	mov	sl, r0
 80082de:	2101      	movs	r1, #1
 80082e0:	4620      	mov	r0, r4
 80082e2:	f000 ff07 	bl	80090f4 <__i2b>
 80082e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	4606      	mov	r6, r0
 80082ec:	f340 8081 	ble.w	80083f2 <_dtoa_r+0x8ca>
 80082f0:	461a      	mov	r2, r3
 80082f2:	4601      	mov	r1, r0
 80082f4:	4620      	mov	r0, r4
 80082f6:	f000 ffbd 	bl	8009274 <__pow5mult>
 80082fa:	9b07      	ldr	r3, [sp, #28]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	4606      	mov	r6, r0
 8008300:	dd7a      	ble.n	80083f8 <_dtoa_r+0x8d0>
 8008302:	f04f 0800 	mov.w	r8, #0
 8008306:	6933      	ldr	r3, [r6, #16]
 8008308:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800830c:	6918      	ldr	r0, [r3, #16]
 800830e:	f000 fea3 	bl	8009058 <__hi0bits>
 8008312:	f1c0 0020 	rsb	r0, r0, #32
 8008316:	9b06      	ldr	r3, [sp, #24]
 8008318:	4418      	add	r0, r3
 800831a:	f010 001f 	ands.w	r0, r0, #31
 800831e:	f000 8094 	beq.w	800844a <_dtoa_r+0x922>
 8008322:	f1c0 0320 	rsb	r3, r0, #32
 8008326:	2b04      	cmp	r3, #4
 8008328:	f340 8085 	ble.w	8008436 <_dtoa_r+0x90e>
 800832c:	9b05      	ldr	r3, [sp, #20]
 800832e:	f1c0 001c 	rsb	r0, r0, #28
 8008332:	4403      	add	r3, r0
 8008334:	9305      	str	r3, [sp, #20]
 8008336:	9b06      	ldr	r3, [sp, #24]
 8008338:	4403      	add	r3, r0
 800833a:	4405      	add	r5, r0
 800833c:	9306      	str	r3, [sp, #24]
 800833e:	9b05      	ldr	r3, [sp, #20]
 8008340:	2b00      	cmp	r3, #0
 8008342:	dd05      	ble.n	8008350 <_dtoa_r+0x828>
 8008344:	4651      	mov	r1, sl
 8008346:	461a      	mov	r2, r3
 8008348:	4620      	mov	r0, r4
 800834a:	f000 ffed 	bl	8009328 <__lshift>
 800834e:	4682      	mov	sl, r0
 8008350:	9b06      	ldr	r3, [sp, #24]
 8008352:	2b00      	cmp	r3, #0
 8008354:	dd05      	ble.n	8008362 <_dtoa_r+0x83a>
 8008356:	4631      	mov	r1, r6
 8008358:	461a      	mov	r2, r3
 800835a:	4620      	mov	r0, r4
 800835c:	f000 ffe4 	bl	8009328 <__lshift>
 8008360:	4606      	mov	r6, r0
 8008362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008364:	2b00      	cmp	r3, #0
 8008366:	d072      	beq.n	800844e <_dtoa_r+0x926>
 8008368:	4631      	mov	r1, r6
 800836a:	4650      	mov	r0, sl
 800836c:	f001 f848 	bl	8009400 <__mcmp>
 8008370:	2800      	cmp	r0, #0
 8008372:	da6c      	bge.n	800844e <_dtoa_r+0x926>
 8008374:	2300      	movs	r3, #0
 8008376:	4651      	mov	r1, sl
 8008378:	220a      	movs	r2, #10
 800837a:	4620      	mov	r0, r4
 800837c:	f000 fe26 	bl	8008fcc <__multadd>
 8008380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008382:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008386:	4682      	mov	sl, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 81b0 	beq.w	80086ee <_dtoa_r+0xbc6>
 800838e:	2300      	movs	r3, #0
 8008390:	4639      	mov	r1, r7
 8008392:	220a      	movs	r2, #10
 8008394:	4620      	mov	r0, r4
 8008396:	f000 fe19 	bl	8008fcc <__multadd>
 800839a:	9b01      	ldr	r3, [sp, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	4607      	mov	r7, r0
 80083a0:	f300 8096 	bgt.w	80084d0 <_dtoa_r+0x9a8>
 80083a4:	9b07      	ldr	r3, [sp, #28]
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	dc59      	bgt.n	800845e <_dtoa_r+0x936>
 80083aa:	e091      	b.n	80084d0 <_dtoa_r+0x9a8>
 80083ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083b2:	e758      	b.n	8008266 <_dtoa_r+0x73e>
 80083b4:	9b04      	ldr	r3, [sp, #16]
 80083b6:	1e5e      	subs	r6, r3, #1
 80083b8:	9b08      	ldr	r3, [sp, #32]
 80083ba:	42b3      	cmp	r3, r6
 80083bc:	bfbf      	itttt	lt
 80083be:	9b08      	ldrlt	r3, [sp, #32]
 80083c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80083c2:	9608      	strlt	r6, [sp, #32]
 80083c4:	1af3      	sublt	r3, r6, r3
 80083c6:	bfb4      	ite	lt
 80083c8:	18d2      	addlt	r2, r2, r3
 80083ca:	1b9e      	subge	r6, r3, r6
 80083cc:	9b04      	ldr	r3, [sp, #16]
 80083ce:	bfbc      	itt	lt
 80083d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80083d2:	2600      	movlt	r6, #0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	bfb7      	itett	lt
 80083d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80083dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80083e0:	1a9d      	sublt	r5, r3, r2
 80083e2:	2300      	movlt	r3, #0
 80083e4:	e741      	b.n	800826a <_dtoa_r+0x742>
 80083e6:	9e08      	ldr	r6, [sp, #32]
 80083e8:	9d05      	ldr	r5, [sp, #20]
 80083ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80083ec:	e748      	b.n	8008280 <_dtoa_r+0x758>
 80083ee:	9a08      	ldr	r2, [sp, #32]
 80083f0:	e770      	b.n	80082d4 <_dtoa_r+0x7ac>
 80083f2:	9b07      	ldr	r3, [sp, #28]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	dc19      	bgt.n	800842c <_dtoa_r+0x904>
 80083f8:	9b02      	ldr	r3, [sp, #8]
 80083fa:	b9bb      	cbnz	r3, 800842c <_dtoa_r+0x904>
 80083fc:	9b03      	ldr	r3, [sp, #12]
 80083fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008402:	b99b      	cbnz	r3, 800842c <_dtoa_r+0x904>
 8008404:	9b03      	ldr	r3, [sp, #12]
 8008406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800840a:	0d1b      	lsrs	r3, r3, #20
 800840c:	051b      	lsls	r3, r3, #20
 800840e:	b183      	cbz	r3, 8008432 <_dtoa_r+0x90a>
 8008410:	9b05      	ldr	r3, [sp, #20]
 8008412:	3301      	adds	r3, #1
 8008414:	9305      	str	r3, [sp, #20]
 8008416:	9b06      	ldr	r3, [sp, #24]
 8008418:	3301      	adds	r3, #1
 800841a:	9306      	str	r3, [sp, #24]
 800841c:	f04f 0801 	mov.w	r8, #1
 8008420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008422:	2b00      	cmp	r3, #0
 8008424:	f47f af6f 	bne.w	8008306 <_dtoa_r+0x7de>
 8008428:	2001      	movs	r0, #1
 800842a:	e774      	b.n	8008316 <_dtoa_r+0x7ee>
 800842c:	f04f 0800 	mov.w	r8, #0
 8008430:	e7f6      	b.n	8008420 <_dtoa_r+0x8f8>
 8008432:	4698      	mov	r8, r3
 8008434:	e7f4      	b.n	8008420 <_dtoa_r+0x8f8>
 8008436:	d082      	beq.n	800833e <_dtoa_r+0x816>
 8008438:	9a05      	ldr	r2, [sp, #20]
 800843a:	331c      	adds	r3, #28
 800843c:	441a      	add	r2, r3
 800843e:	9205      	str	r2, [sp, #20]
 8008440:	9a06      	ldr	r2, [sp, #24]
 8008442:	441a      	add	r2, r3
 8008444:	441d      	add	r5, r3
 8008446:	9206      	str	r2, [sp, #24]
 8008448:	e779      	b.n	800833e <_dtoa_r+0x816>
 800844a:	4603      	mov	r3, r0
 800844c:	e7f4      	b.n	8008438 <_dtoa_r+0x910>
 800844e:	9b04      	ldr	r3, [sp, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	dc37      	bgt.n	80084c4 <_dtoa_r+0x99c>
 8008454:	9b07      	ldr	r3, [sp, #28]
 8008456:	2b02      	cmp	r3, #2
 8008458:	dd34      	ble.n	80084c4 <_dtoa_r+0x99c>
 800845a:	9b04      	ldr	r3, [sp, #16]
 800845c:	9301      	str	r3, [sp, #4]
 800845e:	9b01      	ldr	r3, [sp, #4]
 8008460:	b963      	cbnz	r3, 800847c <_dtoa_r+0x954>
 8008462:	4631      	mov	r1, r6
 8008464:	2205      	movs	r2, #5
 8008466:	4620      	mov	r0, r4
 8008468:	f000 fdb0 	bl	8008fcc <__multadd>
 800846c:	4601      	mov	r1, r0
 800846e:	4606      	mov	r6, r0
 8008470:	4650      	mov	r0, sl
 8008472:	f000 ffc5 	bl	8009400 <__mcmp>
 8008476:	2800      	cmp	r0, #0
 8008478:	f73f adbb 	bgt.w	8007ff2 <_dtoa_r+0x4ca>
 800847c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800847e:	9d00      	ldr	r5, [sp, #0]
 8008480:	ea6f 0b03 	mvn.w	fp, r3
 8008484:	f04f 0800 	mov.w	r8, #0
 8008488:	4631      	mov	r1, r6
 800848a:	4620      	mov	r0, r4
 800848c:	f000 fd7c 	bl	8008f88 <_Bfree>
 8008490:	2f00      	cmp	r7, #0
 8008492:	f43f aeab 	beq.w	80081ec <_dtoa_r+0x6c4>
 8008496:	f1b8 0f00 	cmp.w	r8, #0
 800849a:	d005      	beq.n	80084a8 <_dtoa_r+0x980>
 800849c:	45b8      	cmp	r8, r7
 800849e:	d003      	beq.n	80084a8 <_dtoa_r+0x980>
 80084a0:	4641      	mov	r1, r8
 80084a2:	4620      	mov	r0, r4
 80084a4:	f000 fd70 	bl	8008f88 <_Bfree>
 80084a8:	4639      	mov	r1, r7
 80084aa:	4620      	mov	r0, r4
 80084ac:	f000 fd6c 	bl	8008f88 <_Bfree>
 80084b0:	e69c      	b.n	80081ec <_dtoa_r+0x6c4>
 80084b2:	2600      	movs	r6, #0
 80084b4:	4637      	mov	r7, r6
 80084b6:	e7e1      	b.n	800847c <_dtoa_r+0x954>
 80084b8:	46bb      	mov	fp, r7
 80084ba:	4637      	mov	r7, r6
 80084bc:	e599      	b.n	8007ff2 <_dtoa_r+0x4ca>
 80084be:	bf00      	nop
 80084c0:	40240000 	.word	0x40240000
 80084c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f000 80c8 	beq.w	800865c <_dtoa_r+0xb34>
 80084cc:	9b04      	ldr	r3, [sp, #16]
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	2d00      	cmp	r5, #0
 80084d2:	dd05      	ble.n	80084e0 <_dtoa_r+0x9b8>
 80084d4:	4639      	mov	r1, r7
 80084d6:	462a      	mov	r2, r5
 80084d8:	4620      	mov	r0, r4
 80084da:	f000 ff25 	bl	8009328 <__lshift>
 80084de:	4607      	mov	r7, r0
 80084e0:	f1b8 0f00 	cmp.w	r8, #0
 80084e4:	d05b      	beq.n	800859e <_dtoa_r+0xa76>
 80084e6:	6879      	ldr	r1, [r7, #4]
 80084e8:	4620      	mov	r0, r4
 80084ea:	f000 fd0d 	bl	8008f08 <_Balloc>
 80084ee:	4605      	mov	r5, r0
 80084f0:	b928      	cbnz	r0, 80084fe <_dtoa_r+0x9d6>
 80084f2:	4b83      	ldr	r3, [pc, #524]	; (8008700 <_dtoa_r+0xbd8>)
 80084f4:	4602      	mov	r2, r0
 80084f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80084fa:	f7ff bb2e 	b.w	8007b5a <_dtoa_r+0x32>
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	3202      	adds	r2, #2
 8008502:	0092      	lsls	r2, r2, #2
 8008504:	f107 010c 	add.w	r1, r7, #12
 8008508:	300c      	adds	r0, #12
 800850a:	f7ff fa70 	bl	80079ee <memcpy>
 800850e:	2201      	movs	r2, #1
 8008510:	4629      	mov	r1, r5
 8008512:	4620      	mov	r0, r4
 8008514:	f000 ff08 	bl	8009328 <__lshift>
 8008518:	9b00      	ldr	r3, [sp, #0]
 800851a:	3301      	adds	r3, #1
 800851c:	9304      	str	r3, [sp, #16]
 800851e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008522:	4413      	add	r3, r2
 8008524:	9308      	str	r3, [sp, #32]
 8008526:	9b02      	ldr	r3, [sp, #8]
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	46b8      	mov	r8, r7
 800852e:	9306      	str	r3, [sp, #24]
 8008530:	4607      	mov	r7, r0
 8008532:	9b04      	ldr	r3, [sp, #16]
 8008534:	4631      	mov	r1, r6
 8008536:	3b01      	subs	r3, #1
 8008538:	4650      	mov	r0, sl
 800853a:	9301      	str	r3, [sp, #4]
 800853c:	f7ff fa6c 	bl	8007a18 <quorem>
 8008540:	4641      	mov	r1, r8
 8008542:	9002      	str	r0, [sp, #8]
 8008544:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008548:	4650      	mov	r0, sl
 800854a:	f000 ff59 	bl	8009400 <__mcmp>
 800854e:	463a      	mov	r2, r7
 8008550:	9005      	str	r0, [sp, #20]
 8008552:	4631      	mov	r1, r6
 8008554:	4620      	mov	r0, r4
 8008556:	f000 ff6f 	bl	8009438 <__mdiff>
 800855a:	68c2      	ldr	r2, [r0, #12]
 800855c:	4605      	mov	r5, r0
 800855e:	bb02      	cbnz	r2, 80085a2 <_dtoa_r+0xa7a>
 8008560:	4601      	mov	r1, r0
 8008562:	4650      	mov	r0, sl
 8008564:	f000 ff4c 	bl	8009400 <__mcmp>
 8008568:	4602      	mov	r2, r0
 800856a:	4629      	mov	r1, r5
 800856c:	4620      	mov	r0, r4
 800856e:	9209      	str	r2, [sp, #36]	; 0x24
 8008570:	f000 fd0a 	bl	8008f88 <_Bfree>
 8008574:	9b07      	ldr	r3, [sp, #28]
 8008576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008578:	9d04      	ldr	r5, [sp, #16]
 800857a:	ea43 0102 	orr.w	r1, r3, r2
 800857e:	9b06      	ldr	r3, [sp, #24]
 8008580:	4319      	orrs	r1, r3
 8008582:	d110      	bne.n	80085a6 <_dtoa_r+0xa7e>
 8008584:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008588:	d029      	beq.n	80085de <_dtoa_r+0xab6>
 800858a:	9b05      	ldr	r3, [sp, #20]
 800858c:	2b00      	cmp	r3, #0
 800858e:	dd02      	ble.n	8008596 <_dtoa_r+0xa6e>
 8008590:	9b02      	ldr	r3, [sp, #8]
 8008592:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008596:	9b01      	ldr	r3, [sp, #4]
 8008598:	f883 9000 	strb.w	r9, [r3]
 800859c:	e774      	b.n	8008488 <_dtoa_r+0x960>
 800859e:	4638      	mov	r0, r7
 80085a0:	e7ba      	b.n	8008518 <_dtoa_r+0x9f0>
 80085a2:	2201      	movs	r2, #1
 80085a4:	e7e1      	b.n	800856a <_dtoa_r+0xa42>
 80085a6:	9b05      	ldr	r3, [sp, #20]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	db04      	blt.n	80085b6 <_dtoa_r+0xa8e>
 80085ac:	9907      	ldr	r1, [sp, #28]
 80085ae:	430b      	orrs	r3, r1
 80085b0:	9906      	ldr	r1, [sp, #24]
 80085b2:	430b      	orrs	r3, r1
 80085b4:	d120      	bne.n	80085f8 <_dtoa_r+0xad0>
 80085b6:	2a00      	cmp	r2, #0
 80085b8:	dded      	ble.n	8008596 <_dtoa_r+0xa6e>
 80085ba:	4651      	mov	r1, sl
 80085bc:	2201      	movs	r2, #1
 80085be:	4620      	mov	r0, r4
 80085c0:	f000 feb2 	bl	8009328 <__lshift>
 80085c4:	4631      	mov	r1, r6
 80085c6:	4682      	mov	sl, r0
 80085c8:	f000 ff1a 	bl	8009400 <__mcmp>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	dc03      	bgt.n	80085d8 <_dtoa_r+0xab0>
 80085d0:	d1e1      	bne.n	8008596 <_dtoa_r+0xa6e>
 80085d2:	f019 0f01 	tst.w	r9, #1
 80085d6:	d0de      	beq.n	8008596 <_dtoa_r+0xa6e>
 80085d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80085dc:	d1d8      	bne.n	8008590 <_dtoa_r+0xa68>
 80085de:	9a01      	ldr	r2, [sp, #4]
 80085e0:	2339      	movs	r3, #57	; 0x39
 80085e2:	7013      	strb	r3, [r2, #0]
 80085e4:	462b      	mov	r3, r5
 80085e6:	461d      	mov	r5, r3
 80085e8:	3b01      	subs	r3, #1
 80085ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085ee:	2a39      	cmp	r2, #57	; 0x39
 80085f0:	d06c      	beq.n	80086cc <_dtoa_r+0xba4>
 80085f2:	3201      	adds	r2, #1
 80085f4:	701a      	strb	r2, [r3, #0]
 80085f6:	e747      	b.n	8008488 <_dtoa_r+0x960>
 80085f8:	2a00      	cmp	r2, #0
 80085fa:	dd07      	ble.n	800860c <_dtoa_r+0xae4>
 80085fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008600:	d0ed      	beq.n	80085de <_dtoa_r+0xab6>
 8008602:	9a01      	ldr	r2, [sp, #4]
 8008604:	f109 0301 	add.w	r3, r9, #1
 8008608:	7013      	strb	r3, [r2, #0]
 800860a:	e73d      	b.n	8008488 <_dtoa_r+0x960>
 800860c:	9b04      	ldr	r3, [sp, #16]
 800860e:	9a08      	ldr	r2, [sp, #32]
 8008610:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008614:	4293      	cmp	r3, r2
 8008616:	d043      	beq.n	80086a0 <_dtoa_r+0xb78>
 8008618:	4651      	mov	r1, sl
 800861a:	2300      	movs	r3, #0
 800861c:	220a      	movs	r2, #10
 800861e:	4620      	mov	r0, r4
 8008620:	f000 fcd4 	bl	8008fcc <__multadd>
 8008624:	45b8      	cmp	r8, r7
 8008626:	4682      	mov	sl, r0
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	f04f 020a 	mov.w	r2, #10
 8008630:	4641      	mov	r1, r8
 8008632:	4620      	mov	r0, r4
 8008634:	d107      	bne.n	8008646 <_dtoa_r+0xb1e>
 8008636:	f000 fcc9 	bl	8008fcc <__multadd>
 800863a:	4680      	mov	r8, r0
 800863c:	4607      	mov	r7, r0
 800863e:	9b04      	ldr	r3, [sp, #16]
 8008640:	3301      	adds	r3, #1
 8008642:	9304      	str	r3, [sp, #16]
 8008644:	e775      	b.n	8008532 <_dtoa_r+0xa0a>
 8008646:	f000 fcc1 	bl	8008fcc <__multadd>
 800864a:	4639      	mov	r1, r7
 800864c:	4680      	mov	r8, r0
 800864e:	2300      	movs	r3, #0
 8008650:	220a      	movs	r2, #10
 8008652:	4620      	mov	r0, r4
 8008654:	f000 fcba 	bl	8008fcc <__multadd>
 8008658:	4607      	mov	r7, r0
 800865a:	e7f0      	b.n	800863e <_dtoa_r+0xb16>
 800865c:	9b04      	ldr	r3, [sp, #16]
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	9d00      	ldr	r5, [sp, #0]
 8008662:	4631      	mov	r1, r6
 8008664:	4650      	mov	r0, sl
 8008666:	f7ff f9d7 	bl	8007a18 <quorem>
 800866a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800866e:	9b00      	ldr	r3, [sp, #0]
 8008670:	f805 9b01 	strb.w	r9, [r5], #1
 8008674:	1aea      	subs	r2, r5, r3
 8008676:	9b01      	ldr	r3, [sp, #4]
 8008678:	4293      	cmp	r3, r2
 800867a:	dd07      	ble.n	800868c <_dtoa_r+0xb64>
 800867c:	4651      	mov	r1, sl
 800867e:	2300      	movs	r3, #0
 8008680:	220a      	movs	r2, #10
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fca2 	bl	8008fcc <__multadd>
 8008688:	4682      	mov	sl, r0
 800868a:	e7ea      	b.n	8008662 <_dtoa_r+0xb3a>
 800868c:	9b01      	ldr	r3, [sp, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	bfc8      	it	gt
 8008692:	461d      	movgt	r5, r3
 8008694:	9b00      	ldr	r3, [sp, #0]
 8008696:	bfd8      	it	le
 8008698:	2501      	movle	r5, #1
 800869a:	441d      	add	r5, r3
 800869c:	f04f 0800 	mov.w	r8, #0
 80086a0:	4651      	mov	r1, sl
 80086a2:	2201      	movs	r2, #1
 80086a4:	4620      	mov	r0, r4
 80086a6:	f000 fe3f 	bl	8009328 <__lshift>
 80086aa:	4631      	mov	r1, r6
 80086ac:	4682      	mov	sl, r0
 80086ae:	f000 fea7 	bl	8009400 <__mcmp>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	dc96      	bgt.n	80085e4 <_dtoa_r+0xabc>
 80086b6:	d102      	bne.n	80086be <_dtoa_r+0xb96>
 80086b8:	f019 0f01 	tst.w	r9, #1
 80086bc:	d192      	bne.n	80085e4 <_dtoa_r+0xabc>
 80086be:	462b      	mov	r3, r5
 80086c0:	461d      	mov	r5, r3
 80086c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086c6:	2a30      	cmp	r2, #48	; 0x30
 80086c8:	d0fa      	beq.n	80086c0 <_dtoa_r+0xb98>
 80086ca:	e6dd      	b.n	8008488 <_dtoa_r+0x960>
 80086cc:	9a00      	ldr	r2, [sp, #0]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d189      	bne.n	80085e6 <_dtoa_r+0xabe>
 80086d2:	f10b 0b01 	add.w	fp, fp, #1
 80086d6:	2331      	movs	r3, #49	; 0x31
 80086d8:	e796      	b.n	8008608 <_dtoa_r+0xae0>
 80086da:	4b0a      	ldr	r3, [pc, #40]	; (8008704 <_dtoa_r+0xbdc>)
 80086dc:	f7ff ba99 	b.w	8007c12 <_dtoa_r+0xea>
 80086e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f47f aa6d 	bne.w	8007bc2 <_dtoa_r+0x9a>
 80086e8:	4b07      	ldr	r3, [pc, #28]	; (8008708 <_dtoa_r+0xbe0>)
 80086ea:	f7ff ba92 	b.w	8007c12 <_dtoa_r+0xea>
 80086ee:	9b01      	ldr	r3, [sp, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	dcb5      	bgt.n	8008660 <_dtoa_r+0xb38>
 80086f4:	9b07      	ldr	r3, [sp, #28]
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	f73f aeb1 	bgt.w	800845e <_dtoa_r+0x936>
 80086fc:	e7b0      	b.n	8008660 <_dtoa_r+0xb38>
 80086fe:	bf00      	nop
 8008700:	08009d98 	.word	0x08009d98
 8008704:	08009cf8 	.word	0x08009cf8
 8008708:	08009d1c 	.word	0x08009d1c

0800870c <__ssputs_r>:
 800870c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008710:	688e      	ldr	r6, [r1, #8]
 8008712:	461f      	mov	r7, r3
 8008714:	42be      	cmp	r6, r7
 8008716:	680b      	ldr	r3, [r1, #0]
 8008718:	4682      	mov	sl, r0
 800871a:	460c      	mov	r4, r1
 800871c:	4690      	mov	r8, r2
 800871e:	d82c      	bhi.n	800877a <__ssputs_r+0x6e>
 8008720:	898a      	ldrh	r2, [r1, #12]
 8008722:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008726:	d026      	beq.n	8008776 <__ssputs_r+0x6a>
 8008728:	6965      	ldr	r5, [r4, #20]
 800872a:	6909      	ldr	r1, [r1, #16]
 800872c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008730:	eba3 0901 	sub.w	r9, r3, r1
 8008734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008738:	1c7b      	adds	r3, r7, #1
 800873a:	444b      	add	r3, r9
 800873c:	106d      	asrs	r5, r5, #1
 800873e:	429d      	cmp	r5, r3
 8008740:	bf38      	it	cc
 8008742:	461d      	movcc	r5, r3
 8008744:	0553      	lsls	r3, r2, #21
 8008746:	d527      	bpl.n	8008798 <__ssputs_r+0x8c>
 8008748:	4629      	mov	r1, r5
 800874a:	f000 faa3 	bl	8008c94 <_malloc_r>
 800874e:	4606      	mov	r6, r0
 8008750:	b360      	cbz	r0, 80087ac <__ssputs_r+0xa0>
 8008752:	6921      	ldr	r1, [r4, #16]
 8008754:	464a      	mov	r2, r9
 8008756:	f7ff f94a 	bl	80079ee <memcpy>
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008764:	81a3      	strh	r3, [r4, #12]
 8008766:	6126      	str	r6, [r4, #16]
 8008768:	6165      	str	r5, [r4, #20]
 800876a:	444e      	add	r6, r9
 800876c:	eba5 0509 	sub.w	r5, r5, r9
 8008770:	6026      	str	r6, [r4, #0]
 8008772:	60a5      	str	r5, [r4, #8]
 8008774:	463e      	mov	r6, r7
 8008776:	42be      	cmp	r6, r7
 8008778:	d900      	bls.n	800877c <__ssputs_r+0x70>
 800877a:	463e      	mov	r6, r7
 800877c:	6820      	ldr	r0, [r4, #0]
 800877e:	4632      	mov	r2, r6
 8008780:	4641      	mov	r1, r8
 8008782:	f001 f8a7 	bl	80098d4 <memmove>
 8008786:	68a3      	ldr	r3, [r4, #8]
 8008788:	1b9b      	subs	r3, r3, r6
 800878a:	60a3      	str	r3, [r4, #8]
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	4433      	add	r3, r6
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	2000      	movs	r0, #0
 8008794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008798:	462a      	mov	r2, r5
 800879a:	f000 ff74 	bl	8009686 <_realloc_r>
 800879e:	4606      	mov	r6, r0
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d1e0      	bne.n	8008766 <__ssputs_r+0x5a>
 80087a4:	6921      	ldr	r1, [r4, #16]
 80087a6:	4650      	mov	r0, sl
 80087a8:	f001 f980 	bl	8009aac <_free_r>
 80087ac:	230c      	movs	r3, #12
 80087ae:	f8ca 3000 	str.w	r3, [sl]
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b8:	81a3      	strh	r3, [r4, #12]
 80087ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087be:	e7e9      	b.n	8008794 <__ssputs_r+0x88>

080087c0 <_svfiprintf_r>:
 80087c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c4:	4698      	mov	r8, r3
 80087c6:	898b      	ldrh	r3, [r1, #12]
 80087c8:	061b      	lsls	r3, r3, #24
 80087ca:	b09d      	sub	sp, #116	; 0x74
 80087cc:	4607      	mov	r7, r0
 80087ce:	460d      	mov	r5, r1
 80087d0:	4614      	mov	r4, r2
 80087d2:	d50e      	bpl.n	80087f2 <_svfiprintf_r+0x32>
 80087d4:	690b      	ldr	r3, [r1, #16]
 80087d6:	b963      	cbnz	r3, 80087f2 <_svfiprintf_r+0x32>
 80087d8:	2140      	movs	r1, #64	; 0x40
 80087da:	f000 fa5b 	bl	8008c94 <_malloc_r>
 80087de:	6028      	str	r0, [r5, #0]
 80087e0:	6128      	str	r0, [r5, #16]
 80087e2:	b920      	cbnz	r0, 80087ee <_svfiprintf_r+0x2e>
 80087e4:	230c      	movs	r3, #12
 80087e6:	603b      	str	r3, [r7, #0]
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087ec:	e0d0      	b.n	8008990 <_svfiprintf_r+0x1d0>
 80087ee:	2340      	movs	r3, #64	; 0x40
 80087f0:	616b      	str	r3, [r5, #20]
 80087f2:	2300      	movs	r3, #0
 80087f4:	9309      	str	r3, [sp, #36]	; 0x24
 80087f6:	2320      	movs	r3, #32
 80087f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008800:	2330      	movs	r3, #48	; 0x30
 8008802:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80089a8 <_svfiprintf_r+0x1e8>
 8008806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800880a:	f04f 0901 	mov.w	r9, #1
 800880e:	4623      	mov	r3, r4
 8008810:	469a      	mov	sl, r3
 8008812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008816:	b10a      	cbz	r2, 800881c <_svfiprintf_r+0x5c>
 8008818:	2a25      	cmp	r2, #37	; 0x25
 800881a:	d1f9      	bne.n	8008810 <_svfiprintf_r+0x50>
 800881c:	ebba 0b04 	subs.w	fp, sl, r4
 8008820:	d00b      	beq.n	800883a <_svfiprintf_r+0x7a>
 8008822:	465b      	mov	r3, fp
 8008824:	4622      	mov	r2, r4
 8008826:	4629      	mov	r1, r5
 8008828:	4638      	mov	r0, r7
 800882a:	f7ff ff6f 	bl	800870c <__ssputs_r>
 800882e:	3001      	adds	r0, #1
 8008830:	f000 80a9 	beq.w	8008986 <_svfiprintf_r+0x1c6>
 8008834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008836:	445a      	add	r2, fp
 8008838:	9209      	str	r2, [sp, #36]	; 0x24
 800883a:	f89a 3000 	ldrb.w	r3, [sl]
 800883e:	2b00      	cmp	r3, #0
 8008840:	f000 80a1 	beq.w	8008986 <_svfiprintf_r+0x1c6>
 8008844:	2300      	movs	r3, #0
 8008846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800884a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800884e:	f10a 0a01 	add.w	sl, sl, #1
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	9307      	str	r3, [sp, #28]
 8008856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800885a:	931a      	str	r3, [sp, #104]	; 0x68
 800885c:	4654      	mov	r4, sl
 800885e:	2205      	movs	r2, #5
 8008860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008864:	4850      	ldr	r0, [pc, #320]	; (80089a8 <_svfiprintf_r+0x1e8>)
 8008866:	f7f7 fcb3 	bl	80001d0 <memchr>
 800886a:	9a04      	ldr	r2, [sp, #16]
 800886c:	b9d8      	cbnz	r0, 80088a6 <_svfiprintf_r+0xe6>
 800886e:	06d0      	lsls	r0, r2, #27
 8008870:	bf44      	itt	mi
 8008872:	2320      	movmi	r3, #32
 8008874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008878:	0711      	lsls	r1, r2, #28
 800887a:	bf44      	itt	mi
 800887c:	232b      	movmi	r3, #43	; 0x2b
 800887e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008882:	f89a 3000 	ldrb.w	r3, [sl]
 8008886:	2b2a      	cmp	r3, #42	; 0x2a
 8008888:	d015      	beq.n	80088b6 <_svfiprintf_r+0xf6>
 800888a:	9a07      	ldr	r2, [sp, #28]
 800888c:	4654      	mov	r4, sl
 800888e:	2000      	movs	r0, #0
 8008890:	f04f 0c0a 	mov.w	ip, #10
 8008894:	4621      	mov	r1, r4
 8008896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800889a:	3b30      	subs	r3, #48	; 0x30
 800889c:	2b09      	cmp	r3, #9
 800889e:	d94d      	bls.n	800893c <_svfiprintf_r+0x17c>
 80088a0:	b1b0      	cbz	r0, 80088d0 <_svfiprintf_r+0x110>
 80088a2:	9207      	str	r2, [sp, #28]
 80088a4:	e014      	b.n	80088d0 <_svfiprintf_r+0x110>
 80088a6:	eba0 0308 	sub.w	r3, r0, r8
 80088aa:	fa09 f303 	lsl.w	r3, r9, r3
 80088ae:	4313      	orrs	r3, r2
 80088b0:	9304      	str	r3, [sp, #16]
 80088b2:	46a2      	mov	sl, r4
 80088b4:	e7d2      	b.n	800885c <_svfiprintf_r+0x9c>
 80088b6:	9b03      	ldr	r3, [sp, #12]
 80088b8:	1d19      	adds	r1, r3, #4
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	9103      	str	r1, [sp, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	bfbb      	ittet	lt
 80088c2:	425b      	neglt	r3, r3
 80088c4:	f042 0202 	orrlt.w	r2, r2, #2
 80088c8:	9307      	strge	r3, [sp, #28]
 80088ca:	9307      	strlt	r3, [sp, #28]
 80088cc:	bfb8      	it	lt
 80088ce:	9204      	strlt	r2, [sp, #16]
 80088d0:	7823      	ldrb	r3, [r4, #0]
 80088d2:	2b2e      	cmp	r3, #46	; 0x2e
 80088d4:	d10c      	bne.n	80088f0 <_svfiprintf_r+0x130>
 80088d6:	7863      	ldrb	r3, [r4, #1]
 80088d8:	2b2a      	cmp	r3, #42	; 0x2a
 80088da:	d134      	bne.n	8008946 <_svfiprintf_r+0x186>
 80088dc:	9b03      	ldr	r3, [sp, #12]
 80088de:	1d1a      	adds	r2, r3, #4
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	9203      	str	r2, [sp, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	bfb8      	it	lt
 80088e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80088ec:	3402      	adds	r4, #2
 80088ee:	9305      	str	r3, [sp, #20]
 80088f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80089b8 <_svfiprintf_r+0x1f8>
 80088f4:	7821      	ldrb	r1, [r4, #0]
 80088f6:	2203      	movs	r2, #3
 80088f8:	4650      	mov	r0, sl
 80088fa:	f7f7 fc69 	bl	80001d0 <memchr>
 80088fe:	b138      	cbz	r0, 8008910 <_svfiprintf_r+0x150>
 8008900:	9b04      	ldr	r3, [sp, #16]
 8008902:	eba0 000a 	sub.w	r0, r0, sl
 8008906:	2240      	movs	r2, #64	; 0x40
 8008908:	4082      	lsls	r2, r0
 800890a:	4313      	orrs	r3, r2
 800890c:	3401      	adds	r4, #1
 800890e:	9304      	str	r3, [sp, #16]
 8008910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008914:	4825      	ldr	r0, [pc, #148]	; (80089ac <_svfiprintf_r+0x1ec>)
 8008916:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800891a:	2206      	movs	r2, #6
 800891c:	f7f7 fc58 	bl	80001d0 <memchr>
 8008920:	2800      	cmp	r0, #0
 8008922:	d038      	beq.n	8008996 <_svfiprintf_r+0x1d6>
 8008924:	4b22      	ldr	r3, [pc, #136]	; (80089b0 <_svfiprintf_r+0x1f0>)
 8008926:	bb1b      	cbnz	r3, 8008970 <_svfiprintf_r+0x1b0>
 8008928:	9b03      	ldr	r3, [sp, #12]
 800892a:	3307      	adds	r3, #7
 800892c:	f023 0307 	bic.w	r3, r3, #7
 8008930:	3308      	adds	r3, #8
 8008932:	9303      	str	r3, [sp, #12]
 8008934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008936:	4433      	add	r3, r6
 8008938:	9309      	str	r3, [sp, #36]	; 0x24
 800893a:	e768      	b.n	800880e <_svfiprintf_r+0x4e>
 800893c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008940:	460c      	mov	r4, r1
 8008942:	2001      	movs	r0, #1
 8008944:	e7a6      	b.n	8008894 <_svfiprintf_r+0xd4>
 8008946:	2300      	movs	r3, #0
 8008948:	3401      	adds	r4, #1
 800894a:	9305      	str	r3, [sp, #20]
 800894c:	4619      	mov	r1, r3
 800894e:	f04f 0c0a 	mov.w	ip, #10
 8008952:	4620      	mov	r0, r4
 8008954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008958:	3a30      	subs	r2, #48	; 0x30
 800895a:	2a09      	cmp	r2, #9
 800895c:	d903      	bls.n	8008966 <_svfiprintf_r+0x1a6>
 800895e:	2b00      	cmp	r3, #0
 8008960:	d0c6      	beq.n	80088f0 <_svfiprintf_r+0x130>
 8008962:	9105      	str	r1, [sp, #20]
 8008964:	e7c4      	b.n	80088f0 <_svfiprintf_r+0x130>
 8008966:	fb0c 2101 	mla	r1, ip, r1, r2
 800896a:	4604      	mov	r4, r0
 800896c:	2301      	movs	r3, #1
 800896e:	e7f0      	b.n	8008952 <_svfiprintf_r+0x192>
 8008970:	ab03      	add	r3, sp, #12
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	462a      	mov	r2, r5
 8008976:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <_svfiprintf_r+0x1f4>)
 8008978:	a904      	add	r1, sp, #16
 800897a:	4638      	mov	r0, r7
 800897c:	f7fe fb44 	bl	8007008 <_printf_float>
 8008980:	1c42      	adds	r2, r0, #1
 8008982:	4606      	mov	r6, r0
 8008984:	d1d6      	bne.n	8008934 <_svfiprintf_r+0x174>
 8008986:	89ab      	ldrh	r3, [r5, #12]
 8008988:	065b      	lsls	r3, r3, #25
 800898a:	f53f af2d 	bmi.w	80087e8 <_svfiprintf_r+0x28>
 800898e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008990:	b01d      	add	sp, #116	; 0x74
 8008992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008996:	ab03      	add	r3, sp, #12
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	462a      	mov	r2, r5
 800899c:	4b05      	ldr	r3, [pc, #20]	; (80089b4 <_svfiprintf_r+0x1f4>)
 800899e:	a904      	add	r1, sp, #16
 80089a0:	4638      	mov	r0, r7
 80089a2:	f7fe fdd5 	bl	8007550 <_printf_i>
 80089a6:	e7eb      	b.n	8008980 <_svfiprintf_r+0x1c0>
 80089a8:	08009da9 	.word	0x08009da9
 80089ac:	08009db3 	.word	0x08009db3
 80089b0:	08007009 	.word	0x08007009
 80089b4:	0800870d 	.word	0x0800870d
 80089b8:	08009daf 	.word	0x08009daf

080089bc <__sfputc_r>:
 80089bc:	6893      	ldr	r3, [r2, #8]
 80089be:	3b01      	subs	r3, #1
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	b410      	push	{r4}
 80089c4:	6093      	str	r3, [r2, #8]
 80089c6:	da08      	bge.n	80089da <__sfputc_r+0x1e>
 80089c8:	6994      	ldr	r4, [r2, #24]
 80089ca:	42a3      	cmp	r3, r4
 80089cc:	db01      	blt.n	80089d2 <__sfputc_r+0x16>
 80089ce:	290a      	cmp	r1, #10
 80089d0:	d103      	bne.n	80089da <__sfputc_r+0x1e>
 80089d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089d6:	f000 be85 	b.w	80096e4 <__swbuf_r>
 80089da:	6813      	ldr	r3, [r2, #0]
 80089dc:	1c58      	adds	r0, r3, #1
 80089de:	6010      	str	r0, [r2, #0]
 80089e0:	7019      	strb	r1, [r3, #0]
 80089e2:	4608      	mov	r0, r1
 80089e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <__sfputs_r>:
 80089ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ec:	4606      	mov	r6, r0
 80089ee:	460f      	mov	r7, r1
 80089f0:	4614      	mov	r4, r2
 80089f2:	18d5      	adds	r5, r2, r3
 80089f4:	42ac      	cmp	r4, r5
 80089f6:	d101      	bne.n	80089fc <__sfputs_r+0x12>
 80089f8:	2000      	movs	r0, #0
 80089fa:	e007      	b.n	8008a0c <__sfputs_r+0x22>
 80089fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a00:	463a      	mov	r2, r7
 8008a02:	4630      	mov	r0, r6
 8008a04:	f7ff ffda 	bl	80089bc <__sfputc_r>
 8008a08:	1c43      	adds	r3, r0, #1
 8008a0a:	d1f3      	bne.n	80089f4 <__sfputs_r+0xa>
 8008a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a10 <_vfiprintf_r>:
 8008a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	460d      	mov	r5, r1
 8008a16:	b09d      	sub	sp, #116	; 0x74
 8008a18:	4614      	mov	r4, r2
 8008a1a:	4698      	mov	r8, r3
 8008a1c:	4606      	mov	r6, r0
 8008a1e:	b118      	cbz	r0, 8008a28 <_vfiprintf_r+0x18>
 8008a20:	6a03      	ldr	r3, [r0, #32]
 8008a22:	b90b      	cbnz	r3, 8008a28 <_vfiprintf_r+0x18>
 8008a24:	f7fe ff62 	bl	80078ec <__sinit>
 8008a28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a2a:	07d9      	lsls	r1, r3, #31
 8008a2c:	d405      	bmi.n	8008a3a <_vfiprintf_r+0x2a>
 8008a2e:	89ab      	ldrh	r3, [r5, #12]
 8008a30:	059a      	lsls	r2, r3, #22
 8008a32:	d402      	bmi.n	8008a3a <_vfiprintf_r+0x2a>
 8008a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a36:	f7fe ffd8 	bl	80079ea <__retarget_lock_acquire_recursive>
 8008a3a:	89ab      	ldrh	r3, [r5, #12]
 8008a3c:	071b      	lsls	r3, r3, #28
 8008a3e:	d501      	bpl.n	8008a44 <_vfiprintf_r+0x34>
 8008a40:	692b      	ldr	r3, [r5, #16]
 8008a42:	b99b      	cbnz	r3, 8008a6c <_vfiprintf_r+0x5c>
 8008a44:	4629      	mov	r1, r5
 8008a46:	4630      	mov	r0, r6
 8008a48:	f000 fe8a 	bl	8009760 <__swsetup_r>
 8008a4c:	b170      	cbz	r0, 8008a6c <_vfiprintf_r+0x5c>
 8008a4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a50:	07dc      	lsls	r4, r3, #31
 8008a52:	d504      	bpl.n	8008a5e <_vfiprintf_r+0x4e>
 8008a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a58:	b01d      	add	sp, #116	; 0x74
 8008a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a5e:	89ab      	ldrh	r3, [r5, #12]
 8008a60:	0598      	lsls	r0, r3, #22
 8008a62:	d4f7      	bmi.n	8008a54 <_vfiprintf_r+0x44>
 8008a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a66:	f7fe ffc1 	bl	80079ec <__retarget_lock_release_recursive>
 8008a6a:	e7f3      	b.n	8008a54 <_vfiprintf_r+0x44>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a70:	2320      	movs	r3, #32
 8008a72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a76:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a7a:	2330      	movs	r3, #48	; 0x30
 8008a7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008c30 <_vfiprintf_r+0x220>
 8008a80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a84:	f04f 0901 	mov.w	r9, #1
 8008a88:	4623      	mov	r3, r4
 8008a8a:	469a      	mov	sl, r3
 8008a8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a90:	b10a      	cbz	r2, 8008a96 <_vfiprintf_r+0x86>
 8008a92:	2a25      	cmp	r2, #37	; 0x25
 8008a94:	d1f9      	bne.n	8008a8a <_vfiprintf_r+0x7a>
 8008a96:	ebba 0b04 	subs.w	fp, sl, r4
 8008a9a:	d00b      	beq.n	8008ab4 <_vfiprintf_r+0xa4>
 8008a9c:	465b      	mov	r3, fp
 8008a9e:	4622      	mov	r2, r4
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7ff ffa1 	bl	80089ea <__sfputs_r>
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	f000 80a9 	beq.w	8008c00 <_vfiprintf_r+0x1f0>
 8008aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ab0:	445a      	add	r2, fp
 8008ab2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 80a1 	beq.w	8008c00 <_vfiprintf_r+0x1f0>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ac8:	f10a 0a01 	add.w	sl, sl, #1
 8008acc:	9304      	str	r3, [sp, #16]
 8008ace:	9307      	str	r3, [sp, #28]
 8008ad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ad4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ad6:	4654      	mov	r4, sl
 8008ad8:	2205      	movs	r2, #5
 8008ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ade:	4854      	ldr	r0, [pc, #336]	; (8008c30 <_vfiprintf_r+0x220>)
 8008ae0:	f7f7 fb76 	bl	80001d0 <memchr>
 8008ae4:	9a04      	ldr	r2, [sp, #16]
 8008ae6:	b9d8      	cbnz	r0, 8008b20 <_vfiprintf_r+0x110>
 8008ae8:	06d1      	lsls	r1, r2, #27
 8008aea:	bf44      	itt	mi
 8008aec:	2320      	movmi	r3, #32
 8008aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008af2:	0713      	lsls	r3, r2, #28
 8008af4:	bf44      	itt	mi
 8008af6:	232b      	movmi	r3, #43	; 0x2b
 8008af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008afc:	f89a 3000 	ldrb.w	r3, [sl]
 8008b00:	2b2a      	cmp	r3, #42	; 0x2a
 8008b02:	d015      	beq.n	8008b30 <_vfiprintf_r+0x120>
 8008b04:	9a07      	ldr	r2, [sp, #28]
 8008b06:	4654      	mov	r4, sl
 8008b08:	2000      	movs	r0, #0
 8008b0a:	f04f 0c0a 	mov.w	ip, #10
 8008b0e:	4621      	mov	r1, r4
 8008b10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b14:	3b30      	subs	r3, #48	; 0x30
 8008b16:	2b09      	cmp	r3, #9
 8008b18:	d94d      	bls.n	8008bb6 <_vfiprintf_r+0x1a6>
 8008b1a:	b1b0      	cbz	r0, 8008b4a <_vfiprintf_r+0x13a>
 8008b1c:	9207      	str	r2, [sp, #28]
 8008b1e:	e014      	b.n	8008b4a <_vfiprintf_r+0x13a>
 8008b20:	eba0 0308 	sub.w	r3, r0, r8
 8008b24:	fa09 f303 	lsl.w	r3, r9, r3
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	9304      	str	r3, [sp, #16]
 8008b2c:	46a2      	mov	sl, r4
 8008b2e:	e7d2      	b.n	8008ad6 <_vfiprintf_r+0xc6>
 8008b30:	9b03      	ldr	r3, [sp, #12]
 8008b32:	1d19      	adds	r1, r3, #4
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	9103      	str	r1, [sp, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	bfbb      	ittet	lt
 8008b3c:	425b      	neglt	r3, r3
 8008b3e:	f042 0202 	orrlt.w	r2, r2, #2
 8008b42:	9307      	strge	r3, [sp, #28]
 8008b44:	9307      	strlt	r3, [sp, #28]
 8008b46:	bfb8      	it	lt
 8008b48:	9204      	strlt	r2, [sp, #16]
 8008b4a:	7823      	ldrb	r3, [r4, #0]
 8008b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8008b4e:	d10c      	bne.n	8008b6a <_vfiprintf_r+0x15a>
 8008b50:	7863      	ldrb	r3, [r4, #1]
 8008b52:	2b2a      	cmp	r3, #42	; 0x2a
 8008b54:	d134      	bne.n	8008bc0 <_vfiprintf_r+0x1b0>
 8008b56:	9b03      	ldr	r3, [sp, #12]
 8008b58:	1d1a      	adds	r2, r3, #4
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	9203      	str	r2, [sp, #12]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	bfb8      	it	lt
 8008b62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008b66:	3402      	adds	r4, #2
 8008b68:	9305      	str	r3, [sp, #20]
 8008b6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008c40 <_vfiprintf_r+0x230>
 8008b6e:	7821      	ldrb	r1, [r4, #0]
 8008b70:	2203      	movs	r2, #3
 8008b72:	4650      	mov	r0, sl
 8008b74:	f7f7 fb2c 	bl	80001d0 <memchr>
 8008b78:	b138      	cbz	r0, 8008b8a <_vfiprintf_r+0x17a>
 8008b7a:	9b04      	ldr	r3, [sp, #16]
 8008b7c:	eba0 000a 	sub.w	r0, r0, sl
 8008b80:	2240      	movs	r2, #64	; 0x40
 8008b82:	4082      	lsls	r2, r0
 8008b84:	4313      	orrs	r3, r2
 8008b86:	3401      	adds	r4, #1
 8008b88:	9304      	str	r3, [sp, #16]
 8008b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b8e:	4829      	ldr	r0, [pc, #164]	; (8008c34 <_vfiprintf_r+0x224>)
 8008b90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b94:	2206      	movs	r2, #6
 8008b96:	f7f7 fb1b 	bl	80001d0 <memchr>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d03f      	beq.n	8008c1e <_vfiprintf_r+0x20e>
 8008b9e:	4b26      	ldr	r3, [pc, #152]	; (8008c38 <_vfiprintf_r+0x228>)
 8008ba0:	bb1b      	cbnz	r3, 8008bea <_vfiprintf_r+0x1da>
 8008ba2:	9b03      	ldr	r3, [sp, #12]
 8008ba4:	3307      	adds	r3, #7
 8008ba6:	f023 0307 	bic.w	r3, r3, #7
 8008baa:	3308      	adds	r3, #8
 8008bac:	9303      	str	r3, [sp, #12]
 8008bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb0:	443b      	add	r3, r7
 8008bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb4:	e768      	b.n	8008a88 <_vfiprintf_r+0x78>
 8008bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bba:	460c      	mov	r4, r1
 8008bbc:	2001      	movs	r0, #1
 8008bbe:	e7a6      	b.n	8008b0e <_vfiprintf_r+0xfe>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	3401      	adds	r4, #1
 8008bc4:	9305      	str	r3, [sp, #20]
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	f04f 0c0a 	mov.w	ip, #10
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bd2:	3a30      	subs	r2, #48	; 0x30
 8008bd4:	2a09      	cmp	r2, #9
 8008bd6:	d903      	bls.n	8008be0 <_vfiprintf_r+0x1d0>
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0c6      	beq.n	8008b6a <_vfiprintf_r+0x15a>
 8008bdc:	9105      	str	r1, [sp, #20]
 8008bde:	e7c4      	b.n	8008b6a <_vfiprintf_r+0x15a>
 8008be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008be4:	4604      	mov	r4, r0
 8008be6:	2301      	movs	r3, #1
 8008be8:	e7f0      	b.n	8008bcc <_vfiprintf_r+0x1bc>
 8008bea:	ab03      	add	r3, sp, #12
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	462a      	mov	r2, r5
 8008bf0:	4b12      	ldr	r3, [pc, #72]	; (8008c3c <_vfiprintf_r+0x22c>)
 8008bf2:	a904      	add	r1, sp, #16
 8008bf4:	4630      	mov	r0, r6
 8008bf6:	f7fe fa07 	bl	8007008 <_printf_float>
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	1c78      	adds	r0, r7, #1
 8008bfe:	d1d6      	bne.n	8008bae <_vfiprintf_r+0x19e>
 8008c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c02:	07d9      	lsls	r1, r3, #31
 8008c04:	d405      	bmi.n	8008c12 <_vfiprintf_r+0x202>
 8008c06:	89ab      	ldrh	r3, [r5, #12]
 8008c08:	059a      	lsls	r2, r3, #22
 8008c0a:	d402      	bmi.n	8008c12 <_vfiprintf_r+0x202>
 8008c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c0e:	f7fe feed 	bl	80079ec <__retarget_lock_release_recursive>
 8008c12:	89ab      	ldrh	r3, [r5, #12]
 8008c14:	065b      	lsls	r3, r3, #25
 8008c16:	f53f af1d 	bmi.w	8008a54 <_vfiprintf_r+0x44>
 8008c1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c1c:	e71c      	b.n	8008a58 <_vfiprintf_r+0x48>
 8008c1e:	ab03      	add	r3, sp, #12
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	462a      	mov	r2, r5
 8008c24:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <_vfiprintf_r+0x22c>)
 8008c26:	a904      	add	r1, sp, #16
 8008c28:	4630      	mov	r0, r6
 8008c2a:	f7fe fc91 	bl	8007550 <_printf_i>
 8008c2e:	e7e4      	b.n	8008bfa <_vfiprintf_r+0x1ea>
 8008c30:	08009da9 	.word	0x08009da9
 8008c34:	08009db3 	.word	0x08009db3
 8008c38:	08007009 	.word	0x08007009
 8008c3c:	080089eb 	.word	0x080089eb
 8008c40:	08009daf 	.word	0x08009daf

08008c44 <malloc>:
 8008c44:	4b02      	ldr	r3, [pc, #8]	; (8008c50 <malloc+0xc>)
 8008c46:	4601      	mov	r1, r0
 8008c48:	6818      	ldr	r0, [r3, #0]
 8008c4a:	f000 b823 	b.w	8008c94 <_malloc_r>
 8008c4e:	bf00      	nop
 8008c50:	2000006c 	.word	0x2000006c

08008c54 <sbrk_aligned>:
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	4e0e      	ldr	r6, [pc, #56]	; (8008c90 <sbrk_aligned+0x3c>)
 8008c58:	460c      	mov	r4, r1
 8008c5a:	6831      	ldr	r1, [r6, #0]
 8008c5c:	4605      	mov	r5, r0
 8008c5e:	b911      	cbnz	r1, 8008c66 <sbrk_aligned+0x12>
 8008c60:	f000 feec 	bl	8009a3c <_sbrk_r>
 8008c64:	6030      	str	r0, [r6, #0]
 8008c66:	4621      	mov	r1, r4
 8008c68:	4628      	mov	r0, r5
 8008c6a:	f000 fee7 	bl	8009a3c <_sbrk_r>
 8008c6e:	1c43      	adds	r3, r0, #1
 8008c70:	d00a      	beq.n	8008c88 <sbrk_aligned+0x34>
 8008c72:	1cc4      	adds	r4, r0, #3
 8008c74:	f024 0403 	bic.w	r4, r4, #3
 8008c78:	42a0      	cmp	r0, r4
 8008c7a:	d007      	beq.n	8008c8c <sbrk_aligned+0x38>
 8008c7c:	1a21      	subs	r1, r4, r0
 8008c7e:	4628      	mov	r0, r5
 8008c80:	f000 fedc 	bl	8009a3c <_sbrk_r>
 8008c84:	3001      	adds	r0, #1
 8008c86:	d101      	bne.n	8008c8c <sbrk_aligned+0x38>
 8008c88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}
 8008c90:	20004d9c 	.word	0x20004d9c

08008c94 <_malloc_r>:
 8008c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c98:	1ccd      	adds	r5, r1, #3
 8008c9a:	f025 0503 	bic.w	r5, r5, #3
 8008c9e:	3508      	adds	r5, #8
 8008ca0:	2d0c      	cmp	r5, #12
 8008ca2:	bf38      	it	cc
 8008ca4:	250c      	movcc	r5, #12
 8008ca6:	2d00      	cmp	r5, #0
 8008ca8:	4607      	mov	r7, r0
 8008caa:	db01      	blt.n	8008cb0 <_malloc_r+0x1c>
 8008cac:	42a9      	cmp	r1, r5
 8008cae:	d905      	bls.n	8008cbc <_malloc_r+0x28>
 8008cb0:	230c      	movs	r3, #12
 8008cb2:	603b      	str	r3, [r7, #0]
 8008cb4:	2600      	movs	r6, #0
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d90 <_malloc_r+0xfc>
 8008cc0:	f000 f916 	bl	8008ef0 <__malloc_lock>
 8008cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8008cc8:	461c      	mov	r4, r3
 8008cca:	bb5c      	cbnz	r4, 8008d24 <_malloc_r+0x90>
 8008ccc:	4629      	mov	r1, r5
 8008cce:	4638      	mov	r0, r7
 8008cd0:	f7ff ffc0 	bl	8008c54 <sbrk_aligned>
 8008cd4:	1c43      	adds	r3, r0, #1
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	d155      	bne.n	8008d86 <_malloc_r+0xf2>
 8008cda:	f8d8 4000 	ldr.w	r4, [r8]
 8008cde:	4626      	mov	r6, r4
 8008ce0:	2e00      	cmp	r6, #0
 8008ce2:	d145      	bne.n	8008d70 <_malloc_r+0xdc>
 8008ce4:	2c00      	cmp	r4, #0
 8008ce6:	d048      	beq.n	8008d7a <_malloc_r+0xe6>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	4631      	mov	r1, r6
 8008cec:	4638      	mov	r0, r7
 8008cee:	eb04 0903 	add.w	r9, r4, r3
 8008cf2:	f000 fea3 	bl	8009a3c <_sbrk_r>
 8008cf6:	4581      	cmp	r9, r0
 8008cf8:	d13f      	bne.n	8008d7a <_malloc_r+0xe6>
 8008cfa:	6821      	ldr	r1, [r4, #0]
 8008cfc:	1a6d      	subs	r5, r5, r1
 8008cfe:	4629      	mov	r1, r5
 8008d00:	4638      	mov	r0, r7
 8008d02:	f7ff ffa7 	bl	8008c54 <sbrk_aligned>
 8008d06:	3001      	adds	r0, #1
 8008d08:	d037      	beq.n	8008d7a <_malloc_r+0xe6>
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	442b      	add	r3, r5
 8008d0e:	6023      	str	r3, [r4, #0]
 8008d10:	f8d8 3000 	ldr.w	r3, [r8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d038      	beq.n	8008d8a <_malloc_r+0xf6>
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	42a2      	cmp	r2, r4
 8008d1c:	d12b      	bne.n	8008d76 <_malloc_r+0xe2>
 8008d1e:	2200      	movs	r2, #0
 8008d20:	605a      	str	r2, [r3, #4]
 8008d22:	e00f      	b.n	8008d44 <_malloc_r+0xb0>
 8008d24:	6822      	ldr	r2, [r4, #0]
 8008d26:	1b52      	subs	r2, r2, r5
 8008d28:	d41f      	bmi.n	8008d6a <_malloc_r+0xd6>
 8008d2a:	2a0b      	cmp	r2, #11
 8008d2c:	d917      	bls.n	8008d5e <_malloc_r+0xca>
 8008d2e:	1961      	adds	r1, r4, r5
 8008d30:	42a3      	cmp	r3, r4
 8008d32:	6025      	str	r5, [r4, #0]
 8008d34:	bf18      	it	ne
 8008d36:	6059      	strne	r1, [r3, #4]
 8008d38:	6863      	ldr	r3, [r4, #4]
 8008d3a:	bf08      	it	eq
 8008d3c:	f8c8 1000 	streq.w	r1, [r8]
 8008d40:	5162      	str	r2, [r4, r5]
 8008d42:	604b      	str	r3, [r1, #4]
 8008d44:	4638      	mov	r0, r7
 8008d46:	f104 060b 	add.w	r6, r4, #11
 8008d4a:	f000 f8d7 	bl	8008efc <__malloc_unlock>
 8008d4e:	f026 0607 	bic.w	r6, r6, #7
 8008d52:	1d23      	adds	r3, r4, #4
 8008d54:	1af2      	subs	r2, r6, r3
 8008d56:	d0ae      	beq.n	8008cb6 <_malloc_r+0x22>
 8008d58:	1b9b      	subs	r3, r3, r6
 8008d5a:	50a3      	str	r3, [r4, r2]
 8008d5c:	e7ab      	b.n	8008cb6 <_malloc_r+0x22>
 8008d5e:	42a3      	cmp	r3, r4
 8008d60:	6862      	ldr	r2, [r4, #4]
 8008d62:	d1dd      	bne.n	8008d20 <_malloc_r+0x8c>
 8008d64:	f8c8 2000 	str.w	r2, [r8]
 8008d68:	e7ec      	b.n	8008d44 <_malloc_r+0xb0>
 8008d6a:	4623      	mov	r3, r4
 8008d6c:	6864      	ldr	r4, [r4, #4]
 8008d6e:	e7ac      	b.n	8008cca <_malloc_r+0x36>
 8008d70:	4634      	mov	r4, r6
 8008d72:	6876      	ldr	r6, [r6, #4]
 8008d74:	e7b4      	b.n	8008ce0 <_malloc_r+0x4c>
 8008d76:	4613      	mov	r3, r2
 8008d78:	e7cc      	b.n	8008d14 <_malloc_r+0x80>
 8008d7a:	230c      	movs	r3, #12
 8008d7c:	603b      	str	r3, [r7, #0]
 8008d7e:	4638      	mov	r0, r7
 8008d80:	f000 f8bc 	bl	8008efc <__malloc_unlock>
 8008d84:	e797      	b.n	8008cb6 <_malloc_r+0x22>
 8008d86:	6025      	str	r5, [r4, #0]
 8008d88:	e7dc      	b.n	8008d44 <_malloc_r+0xb0>
 8008d8a:	605b      	str	r3, [r3, #4]
 8008d8c:	deff      	udf	#255	; 0xff
 8008d8e:	bf00      	nop
 8008d90:	20004d98 	.word	0x20004d98

08008d94 <__sflush_r>:
 8008d94:	898a      	ldrh	r2, [r1, #12]
 8008d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	0710      	lsls	r0, r2, #28
 8008d9e:	460c      	mov	r4, r1
 8008da0:	d458      	bmi.n	8008e54 <__sflush_r+0xc0>
 8008da2:	684b      	ldr	r3, [r1, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	dc05      	bgt.n	8008db4 <__sflush_r+0x20>
 8008da8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	dc02      	bgt.n	8008db4 <__sflush_r+0x20>
 8008dae:	2000      	movs	r0, #0
 8008db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008db6:	2e00      	cmp	r6, #0
 8008db8:	d0f9      	beq.n	8008dae <__sflush_r+0x1a>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008dc0:	682f      	ldr	r7, [r5, #0]
 8008dc2:	6a21      	ldr	r1, [r4, #32]
 8008dc4:	602b      	str	r3, [r5, #0]
 8008dc6:	d032      	beq.n	8008e2e <__sflush_r+0x9a>
 8008dc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008dca:	89a3      	ldrh	r3, [r4, #12]
 8008dcc:	075a      	lsls	r2, r3, #29
 8008dce:	d505      	bpl.n	8008ddc <__sflush_r+0x48>
 8008dd0:	6863      	ldr	r3, [r4, #4]
 8008dd2:	1ac0      	subs	r0, r0, r3
 8008dd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dd6:	b10b      	cbz	r3, 8008ddc <__sflush_r+0x48>
 8008dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dda:	1ac0      	subs	r0, r0, r3
 8008ddc:	2300      	movs	r3, #0
 8008dde:	4602      	mov	r2, r0
 8008de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008de2:	6a21      	ldr	r1, [r4, #32]
 8008de4:	4628      	mov	r0, r5
 8008de6:	47b0      	blx	r6
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	89a3      	ldrh	r3, [r4, #12]
 8008dec:	d106      	bne.n	8008dfc <__sflush_r+0x68>
 8008dee:	6829      	ldr	r1, [r5, #0]
 8008df0:	291d      	cmp	r1, #29
 8008df2:	d82b      	bhi.n	8008e4c <__sflush_r+0xb8>
 8008df4:	4a29      	ldr	r2, [pc, #164]	; (8008e9c <__sflush_r+0x108>)
 8008df6:	410a      	asrs	r2, r1
 8008df8:	07d6      	lsls	r6, r2, #31
 8008dfa:	d427      	bmi.n	8008e4c <__sflush_r+0xb8>
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	6062      	str	r2, [r4, #4]
 8008e00:	04d9      	lsls	r1, r3, #19
 8008e02:	6922      	ldr	r2, [r4, #16]
 8008e04:	6022      	str	r2, [r4, #0]
 8008e06:	d504      	bpl.n	8008e12 <__sflush_r+0x7e>
 8008e08:	1c42      	adds	r2, r0, #1
 8008e0a:	d101      	bne.n	8008e10 <__sflush_r+0x7c>
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	b903      	cbnz	r3, 8008e12 <__sflush_r+0x7e>
 8008e10:	6560      	str	r0, [r4, #84]	; 0x54
 8008e12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e14:	602f      	str	r7, [r5, #0]
 8008e16:	2900      	cmp	r1, #0
 8008e18:	d0c9      	beq.n	8008dae <__sflush_r+0x1a>
 8008e1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e1e:	4299      	cmp	r1, r3
 8008e20:	d002      	beq.n	8008e28 <__sflush_r+0x94>
 8008e22:	4628      	mov	r0, r5
 8008e24:	f000 fe42 	bl	8009aac <_free_r>
 8008e28:	2000      	movs	r0, #0
 8008e2a:	6360      	str	r0, [r4, #52]	; 0x34
 8008e2c:	e7c0      	b.n	8008db0 <__sflush_r+0x1c>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4628      	mov	r0, r5
 8008e32:	47b0      	blx	r6
 8008e34:	1c41      	adds	r1, r0, #1
 8008e36:	d1c8      	bne.n	8008dca <__sflush_r+0x36>
 8008e38:	682b      	ldr	r3, [r5, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0c5      	beq.n	8008dca <__sflush_r+0x36>
 8008e3e:	2b1d      	cmp	r3, #29
 8008e40:	d001      	beq.n	8008e46 <__sflush_r+0xb2>
 8008e42:	2b16      	cmp	r3, #22
 8008e44:	d101      	bne.n	8008e4a <__sflush_r+0xb6>
 8008e46:	602f      	str	r7, [r5, #0]
 8008e48:	e7b1      	b.n	8008dae <__sflush_r+0x1a>
 8008e4a:	89a3      	ldrh	r3, [r4, #12]
 8008e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e50:	81a3      	strh	r3, [r4, #12]
 8008e52:	e7ad      	b.n	8008db0 <__sflush_r+0x1c>
 8008e54:	690f      	ldr	r7, [r1, #16]
 8008e56:	2f00      	cmp	r7, #0
 8008e58:	d0a9      	beq.n	8008dae <__sflush_r+0x1a>
 8008e5a:	0793      	lsls	r3, r2, #30
 8008e5c:	680e      	ldr	r6, [r1, #0]
 8008e5e:	bf08      	it	eq
 8008e60:	694b      	ldreq	r3, [r1, #20]
 8008e62:	600f      	str	r7, [r1, #0]
 8008e64:	bf18      	it	ne
 8008e66:	2300      	movne	r3, #0
 8008e68:	eba6 0807 	sub.w	r8, r6, r7
 8008e6c:	608b      	str	r3, [r1, #8]
 8008e6e:	f1b8 0f00 	cmp.w	r8, #0
 8008e72:	dd9c      	ble.n	8008dae <__sflush_r+0x1a>
 8008e74:	6a21      	ldr	r1, [r4, #32]
 8008e76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e78:	4643      	mov	r3, r8
 8008e7a:	463a      	mov	r2, r7
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	47b0      	blx	r6
 8008e80:	2800      	cmp	r0, #0
 8008e82:	dc06      	bgt.n	8008e92 <__sflush_r+0xfe>
 8008e84:	89a3      	ldrh	r3, [r4, #12]
 8008e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e8a:	81a3      	strh	r3, [r4, #12]
 8008e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e90:	e78e      	b.n	8008db0 <__sflush_r+0x1c>
 8008e92:	4407      	add	r7, r0
 8008e94:	eba8 0800 	sub.w	r8, r8, r0
 8008e98:	e7e9      	b.n	8008e6e <__sflush_r+0xda>
 8008e9a:	bf00      	nop
 8008e9c:	dfbffffe 	.word	0xdfbffffe

08008ea0 <_fflush_r>:
 8008ea0:	b538      	push	{r3, r4, r5, lr}
 8008ea2:	690b      	ldr	r3, [r1, #16]
 8008ea4:	4605      	mov	r5, r0
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	b913      	cbnz	r3, 8008eb0 <_fflush_r+0x10>
 8008eaa:	2500      	movs	r5, #0
 8008eac:	4628      	mov	r0, r5
 8008eae:	bd38      	pop	{r3, r4, r5, pc}
 8008eb0:	b118      	cbz	r0, 8008eba <_fflush_r+0x1a>
 8008eb2:	6a03      	ldr	r3, [r0, #32]
 8008eb4:	b90b      	cbnz	r3, 8008eba <_fflush_r+0x1a>
 8008eb6:	f7fe fd19 	bl	80078ec <__sinit>
 8008eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d0f3      	beq.n	8008eaa <_fflush_r+0xa>
 8008ec2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ec4:	07d0      	lsls	r0, r2, #31
 8008ec6:	d404      	bmi.n	8008ed2 <_fflush_r+0x32>
 8008ec8:	0599      	lsls	r1, r3, #22
 8008eca:	d402      	bmi.n	8008ed2 <_fflush_r+0x32>
 8008ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ece:	f7fe fd8c 	bl	80079ea <__retarget_lock_acquire_recursive>
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	f7ff ff5d 	bl	8008d94 <__sflush_r>
 8008eda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008edc:	07da      	lsls	r2, r3, #31
 8008ede:	4605      	mov	r5, r0
 8008ee0:	d4e4      	bmi.n	8008eac <_fflush_r+0xc>
 8008ee2:	89a3      	ldrh	r3, [r4, #12]
 8008ee4:	059b      	lsls	r3, r3, #22
 8008ee6:	d4e1      	bmi.n	8008eac <_fflush_r+0xc>
 8008ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eea:	f7fe fd7f 	bl	80079ec <__retarget_lock_release_recursive>
 8008eee:	e7dd      	b.n	8008eac <_fflush_r+0xc>

08008ef0 <__malloc_lock>:
 8008ef0:	4801      	ldr	r0, [pc, #4]	; (8008ef8 <__malloc_lock+0x8>)
 8008ef2:	f7fe bd7a 	b.w	80079ea <__retarget_lock_acquire_recursive>
 8008ef6:	bf00      	nop
 8008ef8:	20004d94 	.word	0x20004d94

08008efc <__malloc_unlock>:
 8008efc:	4801      	ldr	r0, [pc, #4]	; (8008f04 <__malloc_unlock+0x8>)
 8008efe:	f7fe bd75 	b.w	80079ec <__retarget_lock_release_recursive>
 8008f02:	bf00      	nop
 8008f04:	20004d94 	.word	0x20004d94

08008f08 <_Balloc>:
 8008f08:	b570      	push	{r4, r5, r6, lr}
 8008f0a:	69c6      	ldr	r6, [r0, #28]
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	460d      	mov	r5, r1
 8008f10:	b976      	cbnz	r6, 8008f30 <_Balloc+0x28>
 8008f12:	2010      	movs	r0, #16
 8008f14:	f7ff fe96 	bl	8008c44 <malloc>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	61e0      	str	r0, [r4, #28]
 8008f1c:	b920      	cbnz	r0, 8008f28 <_Balloc+0x20>
 8008f1e:	4b18      	ldr	r3, [pc, #96]	; (8008f80 <_Balloc+0x78>)
 8008f20:	4818      	ldr	r0, [pc, #96]	; (8008f84 <_Balloc+0x7c>)
 8008f22:	216b      	movs	r1, #107	; 0x6b
 8008f24:	f7fd ffb2 	bl	8006e8c <__assert_func>
 8008f28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f2c:	6006      	str	r6, [r0, #0]
 8008f2e:	60c6      	str	r6, [r0, #12]
 8008f30:	69e6      	ldr	r6, [r4, #28]
 8008f32:	68f3      	ldr	r3, [r6, #12]
 8008f34:	b183      	cbz	r3, 8008f58 <_Balloc+0x50>
 8008f36:	69e3      	ldr	r3, [r4, #28]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f3e:	b9b8      	cbnz	r0, 8008f70 <_Balloc+0x68>
 8008f40:	2101      	movs	r1, #1
 8008f42:	fa01 f605 	lsl.w	r6, r1, r5
 8008f46:	1d72      	adds	r2, r6, #5
 8008f48:	0092      	lsls	r2, r2, #2
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 fd98 	bl	8009a80 <_calloc_r>
 8008f50:	b160      	cbz	r0, 8008f6c <_Balloc+0x64>
 8008f52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f56:	e00e      	b.n	8008f76 <_Balloc+0x6e>
 8008f58:	2221      	movs	r2, #33	; 0x21
 8008f5a:	2104      	movs	r1, #4
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f000 fd8f 	bl	8009a80 <_calloc_r>
 8008f62:	69e3      	ldr	r3, [r4, #28]
 8008f64:	60f0      	str	r0, [r6, #12]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1e4      	bne.n	8008f36 <_Balloc+0x2e>
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	bd70      	pop	{r4, r5, r6, pc}
 8008f70:	6802      	ldr	r2, [r0, #0]
 8008f72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f76:	2300      	movs	r3, #0
 8008f78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f7c:	e7f7      	b.n	8008f6e <_Balloc+0x66>
 8008f7e:	bf00      	nop
 8008f80:	08009d29 	.word	0x08009d29
 8008f84:	08009dba 	.word	0x08009dba

08008f88 <_Bfree>:
 8008f88:	b570      	push	{r4, r5, r6, lr}
 8008f8a:	69c6      	ldr	r6, [r0, #28]
 8008f8c:	4605      	mov	r5, r0
 8008f8e:	460c      	mov	r4, r1
 8008f90:	b976      	cbnz	r6, 8008fb0 <_Bfree+0x28>
 8008f92:	2010      	movs	r0, #16
 8008f94:	f7ff fe56 	bl	8008c44 <malloc>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	61e8      	str	r0, [r5, #28]
 8008f9c:	b920      	cbnz	r0, 8008fa8 <_Bfree+0x20>
 8008f9e:	4b09      	ldr	r3, [pc, #36]	; (8008fc4 <_Bfree+0x3c>)
 8008fa0:	4809      	ldr	r0, [pc, #36]	; (8008fc8 <_Bfree+0x40>)
 8008fa2:	218f      	movs	r1, #143	; 0x8f
 8008fa4:	f7fd ff72 	bl	8006e8c <__assert_func>
 8008fa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fac:	6006      	str	r6, [r0, #0]
 8008fae:	60c6      	str	r6, [r0, #12]
 8008fb0:	b13c      	cbz	r4, 8008fc2 <_Bfree+0x3a>
 8008fb2:	69eb      	ldr	r3, [r5, #28]
 8008fb4:	6862      	ldr	r2, [r4, #4]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fbc:	6021      	str	r1, [r4, #0]
 8008fbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fc2:	bd70      	pop	{r4, r5, r6, pc}
 8008fc4:	08009d29 	.word	0x08009d29
 8008fc8:	08009dba 	.word	0x08009dba

08008fcc <__multadd>:
 8008fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd0:	690d      	ldr	r5, [r1, #16]
 8008fd2:	4607      	mov	r7, r0
 8008fd4:	460c      	mov	r4, r1
 8008fd6:	461e      	mov	r6, r3
 8008fd8:	f101 0c14 	add.w	ip, r1, #20
 8008fdc:	2000      	movs	r0, #0
 8008fde:	f8dc 3000 	ldr.w	r3, [ip]
 8008fe2:	b299      	uxth	r1, r3
 8008fe4:	fb02 6101 	mla	r1, r2, r1, r6
 8008fe8:	0c1e      	lsrs	r6, r3, #16
 8008fea:	0c0b      	lsrs	r3, r1, #16
 8008fec:	fb02 3306 	mla	r3, r2, r6, r3
 8008ff0:	b289      	uxth	r1, r1
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ff8:	4285      	cmp	r5, r0
 8008ffa:	f84c 1b04 	str.w	r1, [ip], #4
 8008ffe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009002:	dcec      	bgt.n	8008fde <__multadd+0x12>
 8009004:	b30e      	cbz	r6, 800904a <__multadd+0x7e>
 8009006:	68a3      	ldr	r3, [r4, #8]
 8009008:	42ab      	cmp	r3, r5
 800900a:	dc19      	bgt.n	8009040 <__multadd+0x74>
 800900c:	6861      	ldr	r1, [r4, #4]
 800900e:	4638      	mov	r0, r7
 8009010:	3101      	adds	r1, #1
 8009012:	f7ff ff79 	bl	8008f08 <_Balloc>
 8009016:	4680      	mov	r8, r0
 8009018:	b928      	cbnz	r0, 8009026 <__multadd+0x5a>
 800901a:	4602      	mov	r2, r0
 800901c:	4b0c      	ldr	r3, [pc, #48]	; (8009050 <__multadd+0x84>)
 800901e:	480d      	ldr	r0, [pc, #52]	; (8009054 <__multadd+0x88>)
 8009020:	21ba      	movs	r1, #186	; 0xba
 8009022:	f7fd ff33 	bl	8006e8c <__assert_func>
 8009026:	6922      	ldr	r2, [r4, #16]
 8009028:	3202      	adds	r2, #2
 800902a:	f104 010c 	add.w	r1, r4, #12
 800902e:	0092      	lsls	r2, r2, #2
 8009030:	300c      	adds	r0, #12
 8009032:	f7fe fcdc 	bl	80079ee <memcpy>
 8009036:	4621      	mov	r1, r4
 8009038:	4638      	mov	r0, r7
 800903a:	f7ff ffa5 	bl	8008f88 <_Bfree>
 800903e:	4644      	mov	r4, r8
 8009040:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009044:	3501      	adds	r5, #1
 8009046:	615e      	str	r6, [r3, #20]
 8009048:	6125      	str	r5, [r4, #16]
 800904a:	4620      	mov	r0, r4
 800904c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009050:	08009d98 	.word	0x08009d98
 8009054:	08009dba 	.word	0x08009dba

08009058 <__hi0bits>:
 8009058:	0c03      	lsrs	r3, r0, #16
 800905a:	041b      	lsls	r3, r3, #16
 800905c:	b9d3      	cbnz	r3, 8009094 <__hi0bits+0x3c>
 800905e:	0400      	lsls	r0, r0, #16
 8009060:	2310      	movs	r3, #16
 8009062:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009066:	bf04      	itt	eq
 8009068:	0200      	lsleq	r0, r0, #8
 800906a:	3308      	addeq	r3, #8
 800906c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009070:	bf04      	itt	eq
 8009072:	0100      	lsleq	r0, r0, #4
 8009074:	3304      	addeq	r3, #4
 8009076:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800907a:	bf04      	itt	eq
 800907c:	0080      	lsleq	r0, r0, #2
 800907e:	3302      	addeq	r3, #2
 8009080:	2800      	cmp	r0, #0
 8009082:	db05      	blt.n	8009090 <__hi0bits+0x38>
 8009084:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009088:	f103 0301 	add.w	r3, r3, #1
 800908c:	bf08      	it	eq
 800908e:	2320      	moveq	r3, #32
 8009090:	4618      	mov	r0, r3
 8009092:	4770      	bx	lr
 8009094:	2300      	movs	r3, #0
 8009096:	e7e4      	b.n	8009062 <__hi0bits+0xa>

08009098 <__lo0bits>:
 8009098:	6803      	ldr	r3, [r0, #0]
 800909a:	f013 0207 	ands.w	r2, r3, #7
 800909e:	d00c      	beq.n	80090ba <__lo0bits+0x22>
 80090a0:	07d9      	lsls	r1, r3, #31
 80090a2:	d422      	bmi.n	80090ea <__lo0bits+0x52>
 80090a4:	079a      	lsls	r2, r3, #30
 80090a6:	bf49      	itett	mi
 80090a8:	085b      	lsrmi	r3, r3, #1
 80090aa:	089b      	lsrpl	r3, r3, #2
 80090ac:	6003      	strmi	r3, [r0, #0]
 80090ae:	2201      	movmi	r2, #1
 80090b0:	bf5c      	itt	pl
 80090b2:	6003      	strpl	r3, [r0, #0]
 80090b4:	2202      	movpl	r2, #2
 80090b6:	4610      	mov	r0, r2
 80090b8:	4770      	bx	lr
 80090ba:	b299      	uxth	r1, r3
 80090bc:	b909      	cbnz	r1, 80090c2 <__lo0bits+0x2a>
 80090be:	0c1b      	lsrs	r3, r3, #16
 80090c0:	2210      	movs	r2, #16
 80090c2:	b2d9      	uxtb	r1, r3
 80090c4:	b909      	cbnz	r1, 80090ca <__lo0bits+0x32>
 80090c6:	3208      	adds	r2, #8
 80090c8:	0a1b      	lsrs	r3, r3, #8
 80090ca:	0719      	lsls	r1, r3, #28
 80090cc:	bf04      	itt	eq
 80090ce:	091b      	lsreq	r3, r3, #4
 80090d0:	3204      	addeq	r2, #4
 80090d2:	0799      	lsls	r1, r3, #30
 80090d4:	bf04      	itt	eq
 80090d6:	089b      	lsreq	r3, r3, #2
 80090d8:	3202      	addeq	r2, #2
 80090da:	07d9      	lsls	r1, r3, #31
 80090dc:	d403      	bmi.n	80090e6 <__lo0bits+0x4e>
 80090de:	085b      	lsrs	r3, r3, #1
 80090e0:	f102 0201 	add.w	r2, r2, #1
 80090e4:	d003      	beq.n	80090ee <__lo0bits+0x56>
 80090e6:	6003      	str	r3, [r0, #0]
 80090e8:	e7e5      	b.n	80090b6 <__lo0bits+0x1e>
 80090ea:	2200      	movs	r2, #0
 80090ec:	e7e3      	b.n	80090b6 <__lo0bits+0x1e>
 80090ee:	2220      	movs	r2, #32
 80090f0:	e7e1      	b.n	80090b6 <__lo0bits+0x1e>
	...

080090f4 <__i2b>:
 80090f4:	b510      	push	{r4, lr}
 80090f6:	460c      	mov	r4, r1
 80090f8:	2101      	movs	r1, #1
 80090fa:	f7ff ff05 	bl	8008f08 <_Balloc>
 80090fe:	4602      	mov	r2, r0
 8009100:	b928      	cbnz	r0, 800910e <__i2b+0x1a>
 8009102:	4b05      	ldr	r3, [pc, #20]	; (8009118 <__i2b+0x24>)
 8009104:	4805      	ldr	r0, [pc, #20]	; (800911c <__i2b+0x28>)
 8009106:	f240 1145 	movw	r1, #325	; 0x145
 800910a:	f7fd febf 	bl	8006e8c <__assert_func>
 800910e:	2301      	movs	r3, #1
 8009110:	6144      	str	r4, [r0, #20]
 8009112:	6103      	str	r3, [r0, #16]
 8009114:	bd10      	pop	{r4, pc}
 8009116:	bf00      	nop
 8009118:	08009d98 	.word	0x08009d98
 800911c:	08009dba 	.word	0x08009dba

08009120 <__multiply>:
 8009120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009124:	4691      	mov	r9, r2
 8009126:	690a      	ldr	r2, [r1, #16]
 8009128:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800912c:	429a      	cmp	r2, r3
 800912e:	bfb8      	it	lt
 8009130:	460b      	movlt	r3, r1
 8009132:	460c      	mov	r4, r1
 8009134:	bfbc      	itt	lt
 8009136:	464c      	movlt	r4, r9
 8009138:	4699      	movlt	r9, r3
 800913a:	6927      	ldr	r7, [r4, #16]
 800913c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009140:	68a3      	ldr	r3, [r4, #8]
 8009142:	6861      	ldr	r1, [r4, #4]
 8009144:	eb07 060a 	add.w	r6, r7, sl
 8009148:	42b3      	cmp	r3, r6
 800914a:	b085      	sub	sp, #20
 800914c:	bfb8      	it	lt
 800914e:	3101      	addlt	r1, #1
 8009150:	f7ff feda 	bl	8008f08 <_Balloc>
 8009154:	b930      	cbnz	r0, 8009164 <__multiply+0x44>
 8009156:	4602      	mov	r2, r0
 8009158:	4b44      	ldr	r3, [pc, #272]	; (800926c <__multiply+0x14c>)
 800915a:	4845      	ldr	r0, [pc, #276]	; (8009270 <__multiply+0x150>)
 800915c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009160:	f7fd fe94 	bl	8006e8c <__assert_func>
 8009164:	f100 0514 	add.w	r5, r0, #20
 8009168:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800916c:	462b      	mov	r3, r5
 800916e:	2200      	movs	r2, #0
 8009170:	4543      	cmp	r3, r8
 8009172:	d321      	bcc.n	80091b8 <__multiply+0x98>
 8009174:	f104 0314 	add.w	r3, r4, #20
 8009178:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800917c:	f109 0314 	add.w	r3, r9, #20
 8009180:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009184:	9202      	str	r2, [sp, #8]
 8009186:	1b3a      	subs	r2, r7, r4
 8009188:	3a15      	subs	r2, #21
 800918a:	f022 0203 	bic.w	r2, r2, #3
 800918e:	3204      	adds	r2, #4
 8009190:	f104 0115 	add.w	r1, r4, #21
 8009194:	428f      	cmp	r7, r1
 8009196:	bf38      	it	cc
 8009198:	2204      	movcc	r2, #4
 800919a:	9201      	str	r2, [sp, #4]
 800919c:	9a02      	ldr	r2, [sp, #8]
 800919e:	9303      	str	r3, [sp, #12]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d80c      	bhi.n	80091be <__multiply+0x9e>
 80091a4:	2e00      	cmp	r6, #0
 80091a6:	dd03      	ble.n	80091b0 <__multiply+0x90>
 80091a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d05b      	beq.n	8009268 <__multiply+0x148>
 80091b0:	6106      	str	r6, [r0, #16]
 80091b2:	b005      	add	sp, #20
 80091b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b8:	f843 2b04 	str.w	r2, [r3], #4
 80091bc:	e7d8      	b.n	8009170 <__multiply+0x50>
 80091be:	f8b3 a000 	ldrh.w	sl, [r3]
 80091c2:	f1ba 0f00 	cmp.w	sl, #0
 80091c6:	d024      	beq.n	8009212 <__multiply+0xf2>
 80091c8:	f104 0e14 	add.w	lr, r4, #20
 80091cc:	46a9      	mov	r9, r5
 80091ce:	f04f 0c00 	mov.w	ip, #0
 80091d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091d6:	f8d9 1000 	ldr.w	r1, [r9]
 80091da:	fa1f fb82 	uxth.w	fp, r2
 80091de:	b289      	uxth	r1, r1
 80091e0:	fb0a 110b 	mla	r1, sl, fp, r1
 80091e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80091e8:	f8d9 2000 	ldr.w	r2, [r9]
 80091ec:	4461      	add	r1, ip
 80091ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091f2:	fb0a c20b 	mla	r2, sl, fp, ip
 80091f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091fa:	b289      	uxth	r1, r1
 80091fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009200:	4577      	cmp	r7, lr
 8009202:	f849 1b04 	str.w	r1, [r9], #4
 8009206:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800920a:	d8e2      	bhi.n	80091d2 <__multiply+0xb2>
 800920c:	9a01      	ldr	r2, [sp, #4]
 800920e:	f845 c002 	str.w	ip, [r5, r2]
 8009212:	9a03      	ldr	r2, [sp, #12]
 8009214:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009218:	3304      	adds	r3, #4
 800921a:	f1b9 0f00 	cmp.w	r9, #0
 800921e:	d021      	beq.n	8009264 <__multiply+0x144>
 8009220:	6829      	ldr	r1, [r5, #0]
 8009222:	f104 0c14 	add.w	ip, r4, #20
 8009226:	46ae      	mov	lr, r5
 8009228:	f04f 0a00 	mov.w	sl, #0
 800922c:	f8bc b000 	ldrh.w	fp, [ip]
 8009230:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009234:	fb09 220b 	mla	r2, r9, fp, r2
 8009238:	4452      	add	r2, sl
 800923a:	b289      	uxth	r1, r1
 800923c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009240:	f84e 1b04 	str.w	r1, [lr], #4
 8009244:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009248:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800924c:	f8be 1000 	ldrh.w	r1, [lr]
 8009250:	fb09 110a 	mla	r1, r9, sl, r1
 8009254:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009258:	4567      	cmp	r7, ip
 800925a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800925e:	d8e5      	bhi.n	800922c <__multiply+0x10c>
 8009260:	9a01      	ldr	r2, [sp, #4]
 8009262:	50a9      	str	r1, [r5, r2]
 8009264:	3504      	adds	r5, #4
 8009266:	e799      	b.n	800919c <__multiply+0x7c>
 8009268:	3e01      	subs	r6, #1
 800926a:	e79b      	b.n	80091a4 <__multiply+0x84>
 800926c:	08009d98 	.word	0x08009d98
 8009270:	08009dba 	.word	0x08009dba

08009274 <__pow5mult>:
 8009274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009278:	4615      	mov	r5, r2
 800927a:	f012 0203 	ands.w	r2, r2, #3
 800927e:	4606      	mov	r6, r0
 8009280:	460f      	mov	r7, r1
 8009282:	d007      	beq.n	8009294 <__pow5mult+0x20>
 8009284:	4c25      	ldr	r4, [pc, #148]	; (800931c <__pow5mult+0xa8>)
 8009286:	3a01      	subs	r2, #1
 8009288:	2300      	movs	r3, #0
 800928a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800928e:	f7ff fe9d 	bl	8008fcc <__multadd>
 8009292:	4607      	mov	r7, r0
 8009294:	10ad      	asrs	r5, r5, #2
 8009296:	d03d      	beq.n	8009314 <__pow5mult+0xa0>
 8009298:	69f4      	ldr	r4, [r6, #28]
 800929a:	b97c      	cbnz	r4, 80092bc <__pow5mult+0x48>
 800929c:	2010      	movs	r0, #16
 800929e:	f7ff fcd1 	bl	8008c44 <malloc>
 80092a2:	4602      	mov	r2, r0
 80092a4:	61f0      	str	r0, [r6, #28]
 80092a6:	b928      	cbnz	r0, 80092b4 <__pow5mult+0x40>
 80092a8:	4b1d      	ldr	r3, [pc, #116]	; (8009320 <__pow5mult+0xac>)
 80092aa:	481e      	ldr	r0, [pc, #120]	; (8009324 <__pow5mult+0xb0>)
 80092ac:	f240 11b3 	movw	r1, #435	; 0x1b3
 80092b0:	f7fd fdec 	bl	8006e8c <__assert_func>
 80092b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092b8:	6004      	str	r4, [r0, #0]
 80092ba:	60c4      	str	r4, [r0, #12]
 80092bc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80092c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092c4:	b94c      	cbnz	r4, 80092da <__pow5mult+0x66>
 80092c6:	f240 2171 	movw	r1, #625	; 0x271
 80092ca:	4630      	mov	r0, r6
 80092cc:	f7ff ff12 	bl	80090f4 <__i2b>
 80092d0:	2300      	movs	r3, #0
 80092d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80092d6:	4604      	mov	r4, r0
 80092d8:	6003      	str	r3, [r0, #0]
 80092da:	f04f 0900 	mov.w	r9, #0
 80092de:	07eb      	lsls	r3, r5, #31
 80092e0:	d50a      	bpl.n	80092f8 <__pow5mult+0x84>
 80092e2:	4639      	mov	r1, r7
 80092e4:	4622      	mov	r2, r4
 80092e6:	4630      	mov	r0, r6
 80092e8:	f7ff ff1a 	bl	8009120 <__multiply>
 80092ec:	4639      	mov	r1, r7
 80092ee:	4680      	mov	r8, r0
 80092f0:	4630      	mov	r0, r6
 80092f2:	f7ff fe49 	bl	8008f88 <_Bfree>
 80092f6:	4647      	mov	r7, r8
 80092f8:	106d      	asrs	r5, r5, #1
 80092fa:	d00b      	beq.n	8009314 <__pow5mult+0xa0>
 80092fc:	6820      	ldr	r0, [r4, #0]
 80092fe:	b938      	cbnz	r0, 8009310 <__pow5mult+0x9c>
 8009300:	4622      	mov	r2, r4
 8009302:	4621      	mov	r1, r4
 8009304:	4630      	mov	r0, r6
 8009306:	f7ff ff0b 	bl	8009120 <__multiply>
 800930a:	6020      	str	r0, [r4, #0]
 800930c:	f8c0 9000 	str.w	r9, [r0]
 8009310:	4604      	mov	r4, r0
 8009312:	e7e4      	b.n	80092de <__pow5mult+0x6a>
 8009314:	4638      	mov	r0, r7
 8009316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800931a:	bf00      	nop
 800931c:	08009f08 	.word	0x08009f08
 8009320:	08009d29 	.word	0x08009d29
 8009324:	08009dba 	.word	0x08009dba

08009328 <__lshift>:
 8009328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800932c:	460c      	mov	r4, r1
 800932e:	6849      	ldr	r1, [r1, #4]
 8009330:	6923      	ldr	r3, [r4, #16]
 8009332:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009336:	68a3      	ldr	r3, [r4, #8]
 8009338:	4607      	mov	r7, r0
 800933a:	4691      	mov	r9, r2
 800933c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009340:	f108 0601 	add.w	r6, r8, #1
 8009344:	42b3      	cmp	r3, r6
 8009346:	db0b      	blt.n	8009360 <__lshift+0x38>
 8009348:	4638      	mov	r0, r7
 800934a:	f7ff fddd 	bl	8008f08 <_Balloc>
 800934e:	4605      	mov	r5, r0
 8009350:	b948      	cbnz	r0, 8009366 <__lshift+0x3e>
 8009352:	4602      	mov	r2, r0
 8009354:	4b28      	ldr	r3, [pc, #160]	; (80093f8 <__lshift+0xd0>)
 8009356:	4829      	ldr	r0, [pc, #164]	; (80093fc <__lshift+0xd4>)
 8009358:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800935c:	f7fd fd96 	bl	8006e8c <__assert_func>
 8009360:	3101      	adds	r1, #1
 8009362:	005b      	lsls	r3, r3, #1
 8009364:	e7ee      	b.n	8009344 <__lshift+0x1c>
 8009366:	2300      	movs	r3, #0
 8009368:	f100 0114 	add.w	r1, r0, #20
 800936c:	f100 0210 	add.w	r2, r0, #16
 8009370:	4618      	mov	r0, r3
 8009372:	4553      	cmp	r3, sl
 8009374:	db33      	blt.n	80093de <__lshift+0xb6>
 8009376:	6920      	ldr	r0, [r4, #16]
 8009378:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800937c:	f104 0314 	add.w	r3, r4, #20
 8009380:	f019 091f 	ands.w	r9, r9, #31
 8009384:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009388:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800938c:	d02b      	beq.n	80093e6 <__lshift+0xbe>
 800938e:	f1c9 0e20 	rsb	lr, r9, #32
 8009392:	468a      	mov	sl, r1
 8009394:	2200      	movs	r2, #0
 8009396:	6818      	ldr	r0, [r3, #0]
 8009398:	fa00 f009 	lsl.w	r0, r0, r9
 800939c:	4310      	orrs	r0, r2
 800939e:	f84a 0b04 	str.w	r0, [sl], #4
 80093a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093a6:	459c      	cmp	ip, r3
 80093a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80093ac:	d8f3      	bhi.n	8009396 <__lshift+0x6e>
 80093ae:	ebac 0304 	sub.w	r3, ip, r4
 80093b2:	3b15      	subs	r3, #21
 80093b4:	f023 0303 	bic.w	r3, r3, #3
 80093b8:	3304      	adds	r3, #4
 80093ba:	f104 0015 	add.w	r0, r4, #21
 80093be:	4584      	cmp	ip, r0
 80093c0:	bf38      	it	cc
 80093c2:	2304      	movcc	r3, #4
 80093c4:	50ca      	str	r2, [r1, r3]
 80093c6:	b10a      	cbz	r2, 80093cc <__lshift+0xa4>
 80093c8:	f108 0602 	add.w	r6, r8, #2
 80093cc:	3e01      	subs	r6, #1
 80093ce:	4638      	mov	r0, r7
 80093d0:	612e      	str	r6, [r5, #16]
 80093d2:	4621      	mov	r1, r4
 80093d4:	f7ff fdd8 	bl	8008f88 <_Bfree>
 80093d8:	4628      	mov	r0, r5
 80093da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093de:	f842 0f04 	str.w	r0, [r2, #4]!
 80093e2:	3301      	adds	r3, #1
 80093e4:	e7c5      	b.n	8009372 <__lshift+0x4a>
 80093e6:	3904      	subs	r1, #4
 80093e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80093f0:	459c      	cmp	ip, r3
 80093f2:	d8f9      	bhi.n	80093e8 <__lshift+0xc0>
 80093f4:	e7ea      	b.n	80093cc <__lshift+0xa4>
 80093f6:	bf00      	nop
 80093f8:	08009d98 	.word	0x08009d98
 80093fc:	08009dba 	.word	0x08009dba

08009400 <__mcmp>:
 8009400:	b530      	push	{r4, r5, lr}
 8009402:	6902      	ldr	r2, [r0, #16]
 8009404:	690c      	ldr	r4, [r1, #16]
 8009406:	1b12      	subs	r2, r2, r4
 8009408:	d10e      	bne.n	8009428 <__mcmp+0x28>
 800940a:	f100 0314 	add.w	r3, r0, #20
 800940e:	3114      	adds	r1, #20
 8009410:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009414:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009418:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800941c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009420:	42a5      	cmp	r5, r4
 8009422:	d003      	beq.n	800942c <__mcmp+0x2c>
 8009424:	d305      	bcc.n	8009432 <__mcmp+0x32>
 8009426:	2201      	movs	r2, #1
 8009428:	4610      	mov	r0, r2
 800942a:	bd30      	pop	{r4, r5, pc}
 800942c:	4283      	cmp	r3, r0
 800942e:	d3f3      	bcc.n	8009418 <__mcmp+0x18>
 8009430:	e7fa      	b.n	8009428 <__mcmp+0x28>
 8009432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009436:	e7f7      	b.n	8009428 <__mcmp+0x28>

08009438 <__mdiff>:
 8009438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800943c:	460c      	mov	r4, r1
 800943e:	4606      	mov	r6, r0
 8009440:	4611      	mov	r1, r2
 8009442:	4620      	mov	r0, r4
 8009444:	4690      	mov	r8, r2
 8009446:	f7ff ffdb 	bl	8009400 <__mcmp>
 800944a:	1e05      	subs	r5, r0, #0
 800944c:	d110      	bne.n	8009470 <__mdiff+0x38>
 800944e:	4629      	mov	r1, r5
 8009450:	4630      	mov	r0, r6
 8009452:	f7ff fd59 	bl	8008f08 <_Balloc>
 8009456:	b930      	cbnz	r0, 8009466 <__mdiff+0x2e>
 8009458:	4b3a      	ldr	r3, [pc, #232]	; (8009544 <__mdiff+0x10c>)
 800945a:	4602      	mov	r2, r0
 800945c:	f240 2137 	movw	r1, #567	; 0x237
 8009460:	4839      	ldr	r0, [pc, #228]	; (8009548 <__mdiff+0x110>)
 8009462:	f7fd fd13 	bl	8006e8c <__assert_func>
 8009466:	2301      	movs	r3, #1
 8009468:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800946c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009470:	bfa4      	itt	ge
 8009472:	4643      	movge	r3, r8
 8009474:	46a0      	movge	r8, r4
 8009476:	4630      	mov	r0, r6
 8009478:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800947c:	bfa6      	itte	ge
 800947e:	461c      	movge	r4, r3
 8009480:	2500      	movge	r5, #0
 8009482:	2501      	movlt	r5, #1
 8009484:	f7ff fd40 	bl	8008f08 <_Balloc>
 8009488:	b920      	cbnz	r0, 8009494 <__mdiff+0x5c>
 800948a:	4b2e      	ldr	r3, [pc, #184]	; (8009544 <__mdiff+0x10c>)
 800948c:	4602      	mov	r2, r0
 800948e:	f240 2145 	movw	r1, #581	; 0x245
 8009492:	e7e5      	b.n	8009460 <__mdiff+0x28>
 8009494:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009498:	6926      	ldr	r6, [r4, #16]
 800949a:	60c5      	str	r5, [r0, #12]
 800949c:	f104 0914 	add.w	r9, r4, #20
 80094a0:	f108 0514 	add.w	r5, r8, #20
 80094a4:	f100 0e14 	add.w	lr, r0, #20
 80094a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80094ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80094b0:	f108 0210 	add.w	r2, r8, #16
 80094b4:	46f2      	mov	sl, lr
 80094b6:	2100      	movs	r1, #0
 80094b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80094bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094c0:	fa11 f88b 	uxtah	r8, r1, fp
 80094c4:	b299      	uxth	r1, r3
 80094c6:	0c1b      	lsrs	r3, r3, #16
 80094c8:	eba8 0801 	sub.w	r8, r8, r1
 80094cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094d0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094d4:	fa1f f888 	uxth.w	r8, r8
 80094d8:	1419      	asrs	r1, r3, #16
 80094da:	454e      	cmp	r6, r9
 80094dc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094e0:	f84a 3b04 	str.w	r3, [sl], #4
 80094e4:	d8e8      	bhi.n	80094b8 <__mdiff+0x80>
 80094e6:	1b33      	subs	r3, r6, r4
 80094e8:	3b15      	subs	r3, #21
 80094ea:	f023 0303 	bic.w	r3, r3, #3
 80094ee:	3304      	adds	r3, #4
 80094f0:	3415      	adds	r4, #21
 80094f2:	42a6      	cmp	r6, r4
 80094f4:	bf38      	it	cc
 80094f6:	2304      	movcc	r3, #4
 80094f8:	441d      	add	r5, r3
 80094fa:	4473      	add	r3, lr
 80094fc:	469e      	mov	lr, r3
 80094fe:	462e      	mov	r6, r5
 8009500:	4566      	cmp	r6, ip
 8009502:	d30e      	bcc.n	8009522 <__mdiff+0xea>
 8009504:	f10c 0203 	add.w	r2, ip, #3
 8009508:	1b52      	subs	r2, r2, r5
 800950a:	f022 0203 	bic.w	r2, r2, #3
 800950e:	3d03      	subs	r5, #3
 8009510:	45ac      	cmp	ip, r5
 8009512:	bf38      	it	cc
 8009514:	2200      	movcc	r2, #0
 8009516:	4413      	add	r3, r2
 8009518:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800951c:	b17a      	cbz	r2, 800953e <__mdiff+0x106>
 800951e:	6107      	str	r7, [r0, #16]
 8009520:	e7a4      	b.n	800946c <__mdiff+0x34>
 8009522:	f856 8b04 	ldr.w	r8, [r6], #4
 8009526:	fa11 f288 	uxtah	r2, r1, r8
 800952a:	1414      	asrs	r4, r2, #16
 800952c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009530:	b292      	uxth	r2, r2
 8009532:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009536:	f84e 2b04 	str.w	r2, [lr], #4
 800953a:	1421      	asrs	r1, r4, #16
 800953c:	e7e0      	b.n	8009500 <__mdiff+0xc8>
 800953e:	3f01      	subs	r7, #1
 8009540:	e7ea      	b.n	8009518 <__mdiff+0xe0>
 8009542:	bf00      	nop
 8009544:	08009d98 	.word	0x08009d98
 8009548:	08009dba 	.word	0x08009dba

0800954c <__d2b>:
 800954c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009550:	460f      	mov	r7, r1
 8009552:	2101      	movs	r1, #1
 8009554:	ec59 8b10 	vmov	r8, r9, d0
 8009558:	4616      	mov	r6, r2
 800955a:	f7ff fcd5 	bl	8008f08 <_Balloc>
 800955e:	4604      	mov	r4, r0
 8009560:	b930      	cbnz	r0, 8009570 <__d2b+0x24>
 8009562:	4602      	mov	r2, r0
 8009564:	4b24      	ldr	r3, [pc, #144]	; (80095f8 <__d2b+0xac>)
 8009566:	4825      	ldr	r0, [pc, #148]	; (80095fc <__d2b+0xb0>)
 8009568:	f240 310f 	movw	r1, #783	; 0x30f
 800956c:	f7fd fc8e 	bl	8006e8c <__assert_func>
 8009570:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009574:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009578:	bb2d      	cbnz	r5, 80095c6 <__d2b+0x7a>
 800957a:	9301      	str	r3, [sp, #4]
 800957c:	f1b8 0300 	subs.w	r3, r8, #0
 8009580:	d026      	beq.n	80095d0 <__d2b+0x84>
 8009582:	4668      	mov	r0, sp
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	f7ff fd87 	bl	8009098 <__lo0bits>
 800958a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800958e:	b1e8      	cbz	r0, 80095cc <__d2b+0x80>
 8009590:	f1c0 0320 	rsb	r3, r0, #32
 8009594:	fa02 f303 	lsl.w	r3, r2, r3
 8009598:	430b      	orrs	r3, r1
 800959a:	40c2      	lsrs	r2, r0
 800959c:	6163      	str	r3, [r4, #20]
 800959e:	9201      	str	r2, [sp, #4]
 80095a0:	9b01      	ldr	r3, [sp, #4]
 80095a2:	61a3      	str	r3, [r4, #24]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	bf14      	ite	ne
 80095a8:	2202      	movne	r2, #2
 80095aa:	2201      	moveq	r2, #1
 80095ac:	6122      	str	r2, [r4, #16]
 80095ae:	b1bd      	cbz	r5, 80095e0 <__d2b+0x94>
 80095b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80095b4:	4405      	add	r5, r0
 80095b6:	603d      	str	r5, [r7, #0]
 80095b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095bc:	6030      	str	r0, [r6, #0]
 80095be:	4620      	mov	r0, r4
 80095c0:	b003      	add	sp, #12
 80095c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095ca:	e7d6      	b.n	800957a <__d2b+0x2e>
 80095cc:	6161      	str	r1, [r4, #20]
 80095ce:	e7e7      	b.n	80095a0 <__d2b+0x54>
 80095d0:	a801      	add	r0, sp, #4
 80095d2:	f7ff fd61 	bl	8009098 <__lo0bits>
 80095d6:	9b01      	ldr	r3, [sp, #4]
 80095d8:	6163      	str	r3, [r4, #20]
 80095da:	3020      	adds	r0, #32
 80095dc:	2201      	movs	r2, #1
 80095de:	e7e5      	b.n	80095ac <__d2b+0x60>
 80095e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095e8:	6038      	str	r0, [r7, #0]
 80095ea:	6918      	ldr	r0, [r3, #16]
 80095ec:	f7ff fd34 	bl	8009058 <__hi0bits>
 80095f0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095f4:	e7e2      	b.n	80095bc <__d2b+0x70>
 80095f6:	bf00      	nop
 80095f8:	08009d98 	.word	0x08009d98
 80095fc:	08009dba 	.word	0x08009dba

08009600 <__sread>:
 8009600:	b510      	push	{r4, lr}
 8009602:	460c      	mov	r4, r1
 8009604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009608:	f000 f9c2 	bl	8009990 <_read_r>
 800960c:	2800      	cmp	r0, #0
 800960e:	bfab      	itete	ge
 8009610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009612:	89a3      	ldrhlt	r3, [r4, #12]
 8009614:	181b      	addge	r3, r3, r0
 8009616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800961a:	bfac      	ite	ge
 800961c:	6563      	strge	r3, [r4, #84]	; 0x54
 800961e:	81a3      	strhlt	r3, [r4, #12]
 8009620:	bd10      	pop	{r4, pc}

08009622 <__swrite>:
 8009622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009626:	461f      	mov	r7, r3
 8009628:	898b      	ldrh	r3, [r1, #12]
 800962a:	05db      	lsls	r3, r3, #23
 800962c:	4605      	mov	r5, r0
 800962e:	460c      	mov	r4, r1
 8009630:	4616      	mov	r6, r2
 8009632:	d505      	bpl.n	8009640 <__swrite+0x1e>
 8009634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009638:	2302      	movs	r3, #2
 800963a:	2200      	movs	r2, #0
 800963c:	f000 f996 	bl	800996c <_lseek_r>
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800964a:	81a3      	strh	r3, [r4, #12]
 800964c:	4632      	mov	r2, r6
 800964e:	463b      	mov	r3, r7
 8009650:	4628      	mov	r0, r5
 8009652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009656:	f000 ba01 	b.w	8009a5c <_write_r>

0800965a <__sseek>:
 800965a:	b510      	push	{r4, lr}
 800965c:	460c      	mov	r4, r1
 800965e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009662:	f000 f983 	bl	800996c <_lseek_r>
 8009666:	1c43      	adds	r3, r0, #1
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	bf15      	itete	ne
 800966c:	6560      	strne	r0, [r4, #84]	; 0x54
 800966e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009676:	81a3      	strheq	r3, [r4, #12]
 8009678:	bf18      	it	ne
 800967a:	81a3      	strhne	r3, [r4, #12]
 800967c:	bd10      	pop	{r4, pc}

0800967e <__sclose>:
 800967e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009682:	f000 b941 	b.w	8009908 <_close_r>

08009686 <_realloc_r>:
 8009686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800968a:	4680      	mov	r8, r0
 800968c:	4614      	mov	r4, r2
 800968e:	460e      	mov	r6, r1
 8009690:	b921      	cbnz	r1, 800969c <_realloc_r+0x16>
 8009692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009696:	4611      	mov	r1, r2
 8009698:	f7ff bafc 	b.w	8008c94 <_malloc_r>
 800969c:	b92a      	cbnz	r2, 80096aa <_realloc_r+0x24>
 800969e:	f000 fa05 	bl	8009aac <_free_r>
 80096a2:	4625      	mov	r5, r4
 80096a4:	4628      	mov	r0, r5
 80096a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096aa:	f000 fa5d 	bl	8009b68 <_malloc_usable_size_r>
 80096ae:	4284      	cmp	r4, r0
 80096b0:	4607      	mov	r7, r0
 80096b2:	d802      	bhi.n	80096ba <_realloc_r+0x34>
 80096b4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096b8:	d812      	bhi.n	80096e0 <_realloc_r+0x5a>
 80096ba:	4621      	mov	r1, r4
 80096bc:	4640      	mov	r0, r8
 80096be:	f7ff fae9 	bl	8008c94 <_malloc_r>
 80096c2:	4605      	mov	r5, r0
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d0ed      	beq.n	80096a4 <_realloc_r+0x1e>
 80096c8:	42bc      	cmp	r4, r7
 80096ca:	4622      	mov	r2, r4
 80096cc:	4631      	mov	r1, r6
 80096ce:	bf28      	it	cs
 80096d0:	463a      	movcs	r2, r7
 80096d2:	f7fe f98c 	bl	80079ee <memcpy>
 80096d6:	4631      	mov	r1, r6
 80096d8:	4640      	mov	r0, r8
 80096da:	f000 f9e7 	bl	8009aac <_free_r>
 80096de:	e7e1      	b.n	80096a4 <_realloc_r+0x1e>
 80096e0:	4635      	mov	r5, r6
 80096e2:	e7df      	b.n	80096a4 <_realloc_r+0x1e>

080096e4 <__swbuf_r>:
 80096e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e6:	460e      	mov	r6, r1
 80096e8:	4614      	mov	r4, r2
 80096ea:	4605      	mov	r5, r0
 80096ec:	b118      	cbz	r0, 80096f6 <__swbuf_r+0x12>
 80096ee:	6a03      	ldr	r3, [r0, #32]
 80096f0:	b90b      	cbnz	r3, 80096f6 <__swbuf_r+0x12>
 80096f2:	f7fe f8fb 	bl	80078ec <__sinit>
 80096f6:	69a3      	ldr	r3, [r4, #24]
 80096f8:	60a3      	str	r3, [r4, #8]
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	071a      	lsls	r2, r3, #28
 80096fe:	d525      	bpl.n	800974c <__swbuf_r+0x68>
 8009700:	6923      	ldr	r3, [r4, #16]
 8009702:	b31b      	cbz	r3, 800974c <__swbuf_r+0x68>
 8009704:	6823      	ldr	r3, [r4, #0]
 8009706:	6922      	ldr	r2, [r4, #16]
 8009708:	1a98      	subs	r0, r3, r2
 800970a:	6963      	ldr	r3, [r4, #20]
 800970c:	b2f6      	uxtb	r6, r6
 800970e:	4283      	cmp	r3, r0
 8009710:	4637      	mov	r7, r6
 8009712:	dc04      	bgt.n	800971e <__swbuf_r+0x3a>
 8009714:	4621      	mov	r1, r4
 8009716:	4628      	mov	r0, r5
 8009718:	f7ff fbc2 	bl	8008ea0 <_fflush_r>
 800971c:	b9e0      	cbnz	r0, 8009758 <__swbuf_r+0x74>
 800971e:	68a3      	ldr	r3, [r4, #8]
 8009720:	3b01      	subs	r3, #1
 8009722:	60a3      	str	r3, [r4, #8]
 8009724:	6823      	ldr	r3, [r4, #0]
 8009726:	1c5a      	adds	r2, r3, #1
 8009728:	6022      	str	r2, [r4, #0]
 800972a:	701e      	strb	r6, [r3, #0]
 800972c:	6962      	ldr	r2, [r4, #20]
 800972e:	1c43      	adds	r3, r0, #1
 8009730:	429a      	cmp	r2, r3
 8009732:	d004      	beq.n	800973e <__swbuf_r+0x5a>
 8009734:	89a3      	ldrh	r3, [r4, #12]
 8009736:	07db      	lsls	r3, r3, #31
 8009738:	d506      	bpl.n	8009748 <__swbuf_r+0x64>
 800973a:	2e0a      	cmp	r6, #10
 800973c:	d104      	bne.n	8009748 <__swbuf_r+0x64>
 800973e:	4621      	mov	r1, r4
 8009740:	4628      	mov	r0, r5
 8009742:	f7ff fbad 	bl	8008ea0 <_fflush_r>
 8009746:	b938      	cbnz	r0, 8009758 <__swbuf_r+0x74>
 8009748:	4638      	mov	r0, r7
 800974a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800974c:	4621      	mov	r1, r4
 800974e:	4628      	mov	r0, r5
 8009750:	f000 f806 	bl	8009760 <__swsetup_r>
 8009754:	2800      	cmp	r0, #0
 8009756:	d0d5      	beq.n	8009704 <__swbuf_r+0x20>
 8009758:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800975c:	e7f4      	b.n	8009748 <__swbuf_r+0x64>
	...

08009760 <__swsetup_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4b2a      	ldr	r3, [pc, #168]	; (800980c <__swsetup_r+0xac>)
 8009764:	4605      	mov	r5, r0
 8009766:	6818      	ldr	r0, [r3, #0]
 8009768:	460c      	mov	r4, r1
 800976a:	b118      	cbz	r0, 8009774 <__swsetup_r+0x14>
 800976c:	6a03      	ldr	r3, [r0, #32]
 800976e:	b90b      	cbnz	r3, 8009774 <__swsetup_r+0x14>
 8009770:	f7fe f8bc 	bl	80078ec <__sinit>
 8009774:	89a3      	ldrh	r3, [r4, #12]
 8009776:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800977a:	0718      	lsls	r0, r3, #28
 800977c:	d422      	bmi.n	80097c4 <__swsetup_r+0x64>
 800977e:	06d9      	lsls	r1, r3, #27
 8009780:	d407      	bmi.n	8009792 <__swsetup_r+0x32>
 8009782:	2309      	movs	r3, #9
 8009784:	602b      	str	r3, [r5, #0]
 8009786:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800978a:	81a3      	strh	r3, [r4, #12]
 800978c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009790:	e034      	b.n	80097fc <__swsetup_r+0x9c>
 8009792:	0758      	lsls	r0, r3, #29
 8009794:	d512      	bpl.n	80097bc <__swsetup_r+0x5c>
 8009796:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009798:	b141      	cbz	r1, 80097ac <__swsetup_r+0x4c>
 800979a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800979e:	4299      	cmp	r1, r3
 80097a0:	d002      	beq.n	80097a8 <__swsetup_r+0x48>
 80097a2:	4628      	mov	r0, r5
 80097a4:	f000 f982 	bl	8009aac <_free_r>
 80097a8:	2300      	movs	r3, #0
 80097aa:	6363      	str	r3, [r4, #52]	; 0x34
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097b2:	81a3      	strh	r3, [r4, #12]
 80097b4:	2300      	movs	r3, #0
 80097b6:	6063      	str	r3, [r4, #4]
 80097b8:	6923      	ldr	r3, [r4, #16]
 80097ba:	6023      	str	r3, [r4, #0]
 80097bc:	89a3      	ldrh	r3, [r4, #12]
 80097be:	f043 0308 	orr.w	r3, r3, #8
 80097c2:	81a3      	strh	r3, [r4, #12]
 80097c4:	6923      	ldr	r3, [r4, #16]
 80097c6:	b94b      	cbnz	r3, 80097dc <__swsetup_r+0x7c>
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097d2:	d003      	beq.n	80097dc <__swsetup_r+0x7c>
 80097d4:	4621      	mov	r1, r4
 80097d6:	4628      	mov	r0, r5
 80097d8:	f000 f840 	bl	800985c <__smakebuf_r>
 80097dc:	89a0      	ldrh	r0, [r4, #12]
 80097de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097e2:	f010 0301 	ands.w	r3, r0, #1
 80097e6:	d00a      	beq.n	80097fe <__swsetup_r+0x9e>
 80097e8:	2300      	movs	r3, #0
 80097ea:	60a3      	str	r3, [r4, #8]
 80097ec:	6963      	ldr	r3, [r4, #20]
 80097ee:	425b      	negs	r3, r3
 80097f0:	61a3      	str	r3, [r4, #24]
 80097f2:	6923      	ldr	r3, [r4, #16]
 80097f4:	b943      	cbnz	r3, 8009808 <__swsetup_r+0xa8>
 80097f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097fa:	d1c4      	bne.n	8009786 <__swsetup_r+0x26>
 80097fc:	bd38      	pop	{r3, r4, r5, pc}
 80097fe:	0781      	lsls	r1, r0, #30
 8009800:	bf58      	it	pl
 8009802:	6963      	ldrpl	r3, [r4, #20]
 8009804:	60a3      	str	r3, [r4, #8]
 8009806:	e7f4      	b.n	80097f2 <__swsetup_r+0x92>
 8009808:	2000      	movs	r0, #0
 800980a:	e7f7      	b.n	80097fc <__swsetup_r+0x9c>
 800980c:	2000006c 	.word	0x2000006c

08009810 <__swhatbuf_r>:
 8009810:	b570      	push	{r4, r5, r6, lr}
 8009812:	460c      	mov	r4, r1
 8009814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009818:	2900      	cmp	r1, #0
 800981a:	b096      	sub	sp, #88	; 0x58
 800981c:	4615      	mov	r5, r2
 800981e:	461e      	mov	r6, r3
 8009820:	da0d      	bge.n	800983e <__swhatbuf_r+0x2e>
 8009822:	89a3      	ldrh	r3, [r4, #12]
 8009824:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009828:	f04f 0100 	mov.w	r1, #0
 800982c:	bf0c      	ite	eq
 800982e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009832:	2340      	movne	r3, #64	; 0x40
 8009834:	2000      	movs	r0, #0
 8009836:	6031      	str	r1, [r6, #0]
 8009838:	602b      	str	r3, [r5, #0]
 800983a:	b016      	add	sp, #88	; 0x58
 800983c:	bd70      	pop	{r4, r5, r6, pc}
 800983e:	466a      	mov	r2, sp
 8009840:	f000 f872 	bl	8009928 <_fstat_r>
 8009844:	2800      	cmp	r0, #0
 8009846:	dbec      	blt.n	8009822 <__swhatbuf_r+0x12>
 8009848:	9901      	ldr	r1, [sp, #4]
 800984a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800984e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009852:	4259      	negs	r1, r3
 8009854:	4159      	adcs	r1, r3
 8009856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800985a:	e7eb      	b.n	8009834 <__swhatbuf_r+0x24>

0800985c <__smakebuf_r>:
 800985c:	898b      	ldrh	r3, [r1, #12]
 800985e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009860:	079d      	lsls	r5, r3, #30
 8009862:	4606      	mov	r6, r0
 8009864:	460c      	mov	r4, r1
 8009866:	d507      	bpl.n	8009878 <__smakebuf_r+0x1c>
 8009868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800986c:	6023      	str	r3, [r4, #0]
 800986e:	6123      	str	r3, [r4, #16]
 8009870:	2301      	movs	r3, #1
 8009872:	6163      	str	r3, [r4, #20]
 8009874:	b002      	add	sp, #8
 8009876:	bd70      	pop	{r4, r5, r6, pc}
 8009878:	ab01      	add	r3, sp, #4
 800987a:	466a      	mov	r2, sp
 800987c:	f7ff ffc8 	bl	8009810 <__swhatbuf_r>
 8009880:	9900      	ldr	r1, [sp, #0]
 8009882:	4605      	mov	r5, r0
 8009884:	4630      	mov	r0, r6
 8009886:	f7ff fa05 	bl	8008c94 <_malloc_r>
 800988a:	b948      	cbnz	r0, 80098a0 <__smakebuf_r+0x44>
 800988c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009890:	059a      	lsls	r2, r3, #22
 8009892:	d4ef      	bmi.n	8009874 <__smakebuf_r+0x18>
 8009894:	f023 0303 	bic.w	r3, r3, #3
 8009898:	f043 0302 	orr.w	r3, r3, #2
 800989c:	81a3      	strh	r3, [r4, #12]
 800989e:	e7e3      	b.n	8009868 <__smakebuf_r+0xc>
 80098a0:	89a3      	ldrh	r3, [r4, #12]
 80098a2:	6020      	str	r0, [r4, #0]
 80098a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a8:	81a3      	strh	r3, [r4, #12]
 80098aa:	9b00      	ldr	r3, [sp, #0]
 80098ac:	6163      	str	r3, [r4, #20]
 80098ae:	9b01      	ldr	r3, [sp, #4]
 80098b0:	6120      	str	r0, [r4, #16]
 80098b2:	b15b      	cbz	r3, 80098cc <__smakebuf_r+0x70>
 80098b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098b8:	4630      	mov	r0, r6
 80098ba:	f000 f847 	bl	800994c <_isatty_r>
 80098be:	b128      	cbz	r0, 80098cc <__smakebuf_r+0x70>
 80098c0:	89a3      	ldrh	r3, [r4, #12]
 80098c2:	f023 0303 	bic.w	r3, r3, #3
 80098c6:	f043 0301 	orr.w	r3, r3, #1
 80098ca:	81a3      	strh	r3, [r4, #12]
 80098cc:	89a3      	ldrh	r3, [r4, #12]
 80098ce:	431d      	orrs	r5, r3
 80098d0:	81a5      	strh	r5, [r4, #12]
 80098d2:	e7cf      	b.n	8009874 <__smakebuf_r+0x18>

080098d4 <memmove>:
 80098d4:	4288      	cmp	r0, r1
 80098d6:	b510      	push	{r4, lr}
 80098d8:	eb01 0402 	add.w	r4, r1, r2
 80098dc:	d902      	bls.n	80098e4 <memmove+0x10>
 80098de:	4284      	cmp	r4, r0
 80098e0:	4623      	mov	r3, r4
 80098e2:	d807      	bhi.n	80098f4 <memmove+0x20>
 80098e4:	1e43      	subs	r3, r0, #1
 80098e6:	42a1      	cmp	r1, r4
 80098e8:	d008      	beq.n	80098fc <memmove+0x28>
 80098ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098f2:	e7f8      	b.n	80098e6 <memmove+0x12>
 80098f4:	4402      	add	r2, r0
 80098f6:	4601      	mov	r1, r0
 80098f8:	428a      	cmp	r2, r1
 80098fa:	d100      	bne.n	80098fe <memmove+0x2a>
 80098fc:	bd10      	pop	{r4, pc}
 80098fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009906:	e7f7      	b.n	80098f8 <memmove+0x24>

08009908 <_close_r>:
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	4d06      	ldr	r5, [pc, #24]	; (8009924 <_close_r+0x1c>)
 800990c:	2300      	movs	r3, #0
 800990e:	4604      	mov	r4, r0
 8009910:	4608      	mov	r0, r1
 8009912:	602b      	str	r3, [r5, #0]
 8009914:	f7f7 feba 	bl	800168c <_close>
 8009918:	1c43      	adds	r3, r0, #1
 800991a:	d102      	bne.n	8009922 <_close_r+0x1a>
 800991c:	682b      	ldr	r3, [r5, #0]
 800991e:	b103      	cbz	r3, 8009922 <_close_r+0x1a>
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	bd38      	pop	{r3, r4, r5, pc}
 8009924:	20004da0 	.word	0x20004da0

08009928 <_fstat_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	4d07      	ldr	r5, [pc, #28]	; (8009948 <_fstat_r+0x20>)
 800992c:	2300      	movs	r3, #0
 800992e:	4604      	mov	r4, r0
 8009930:	4608      	mov	r0, r1
 8009932:	4611      	mov	r1, r2
 8009934:	602b      	str	r3, [r5, #0]
 8009936:	f7f7 feb5 	bl	80016a4 <_fstat>
 800993a:	1c43      	adds	r3, r0, #1
 800993c:	d102      	bne.n	8009944 <_fstat_r+0x1c>
 800993e:	682b      	ldr	r3, [r5, #0]
 8009940:	b103      	cbz	r3, 8009944 <_fstat_r+0x1c>
 8009942:	6023      	str	r3, [r4, #0]
 8009944:	bd38      	pop	{r3, r4, r5, pc}
 8009946:	bf00      	nop
 8009948:	20004da0 	.word	0x20004da0

0800994c <_isatty_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4d06      	ldr	r5, [pc, #24]	; (8009968 <_isatty_r+0x1c>)
 8009950:	2300      	movs	r3, #0
 8009952:	4604      	mov	r4, r0
 8009954:	4608      	mov	r0, r1
 8009956:	602b      	str	r3, [r5, #0]
 8009958:	f7f7 feb4 	bl	80016c4 <_isatty>
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	d102      	bne.n	8009966 <_isatty_r+0x1a>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	b103      	cbz	r3, 8009966 <_isatty_r+0x1a>
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	bd38      	pop	{r3, r4, r5, pc}
 8009968:	20004da0 	.word	0x20004da0

0800996c <_lseek_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	4d07      	ldr	r5, [pc, #28]	; (800998c <_lseek_r+0x20>)
 8009970:	4604      	mov	r4, r0
 8009972:	4608      	mov	r0, r1
 8009974:	4611      	mov	r1, r2
 8009976:	2200      	movs	r2, #0
 8009978:	602a      	str	r2, [r5, #0]
 800997a:	461a      	mov	r2, r3
 800997c:	f7f7 fead 	bl	80016da <_lseek>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d102      	bne.n	800998a <_lseek_r+0x1e>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	b103      	cbz	r3, 800998a <_lseek_r+0x1e>
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	20004da0 	.word	0x20004da0

08009990 <_read_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4d07      	ldr	r5, [pc, #28]	; (80099b0 <_read_r+0x20>)
 8009994:	4604      	mov	r4, r0
 8009996:	4608      	mov	r0, r1
 8009998:	4611      	mov	r1, r2
 800999a:	2200      	movs	r2, #0
 800999c:	602a      	str	r2, [r5, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	f7f7 fe3b 	bl	800161a <_read>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d102      	bne.n	80099ae <_read_r+0x1e>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	b103      	cbz	r3, 80099ae <_read_r+0x1e>
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	20004da0 	.word	0x20004da0

080099b4 <_raise_r>:
 80099b4:	291f      	cmp	r1, #31
 80099b6:	b538      	push	{r3, r4, r5, lr}
 80099b8:	4604      	mov	r4, r0
 80099ba:	460d      	mov	r5, r1
 80099bc:	d904      	bls.n	80099c8 <_raise_r+0x14>
 80099be:	2316      	movs	r3, #22
 80099c0:	6003      	str	r3, [r0, #0]
 80099c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099c6:	bd38      	pop	{r3, r4, r5, pc}
 80099c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80099ca:	b112      	cbz	r2, 80099d2 <_raise_r+0x1e>
 80099cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099d0:	b94b      	cbnz	r3, 80099e6 <_raise_r+0x32>
 80099d2:	4620      	mov	r0, r4
 80099d4:	f000 f830 	bl	8009a38 <_getpid_r>
 80099d8:	462a      	mov	r2, r5
 80099da:	4601      	mov	r1, r0
 80099dc:	4620      	mov	r0, r4
 80099de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099e2:	f000 b817 	b.w	8009a14 <_kill_r>
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d00a      	beq.n	8009a00 <_raise_r+0x4c>
 80099ea:	1c59      	adds	r1, r3, #1
 80099ec:	d103      	bne.n	80099f6 <_raise_r+0x42>
 80099ee:	2316      	movs	r3, #22
 80099f0:	6003      	str	r3, [r0, #0]
 80099f2:	2001      	movs	r0, #1
 80099f4:	e7e7      	b.n	80099c6 <_raise_r+0x12>
 80099f6:	2400      	movs	r4, #0
 80099f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80099fc:	4628      	mov	r0, r5
 80099fe:	4798      	blx	r3
 8009a00:	2000      	movs	r0, #0
 8009a02:	e7e0      	b.n	80099c6 <_raise_r+0x12>

08009a04 <raise>:
 8009a04:	4b02      	ldr	r3, [pc, #8]	; (8009a10 <raise+0xc>)
 8009a06:	4601      	mov	r1, r0
 8009a08:	6818      	ldr	r0, [r3, #0]
 8009a0a:	f7ff bfd3 	b.w	80099b4 <_raise_r>
 8009a0e:	bf00      	nop
 8009a10:	2000006c 	.word	0x2000006c

08009a14 <_kill_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4d07      	ldr	r5, [pc, #28]	; (8009a34 <_kill_r+0x20>)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	4608      	mov	r0, r1
 8009a1e:	4611      	mov	r1, r2
 8009a20:	602b      	str	r3, [r5, #0]
 8009a22:	f7f7 fde0 	bl	80015e6 <_kill>
 8009a26:	1c43      	adds	r3, r0, #1
 8009a28:	d102      	bne.n	8009a30 <_kill_r+0x1c>
 8009a2a:	682b      	ldr	r3, [r5, #0]
 8009a2c:	b103      	cbz	r3, 8009a30 <_kill_r+0x1c>
 8009a2e:	6023      	str	r3, [r4, #0]
 8009a30:	bd38      	pop	{r3, r4, r5, pc}
 8009a32:	bf00      	nop
 8009a34:	20004da0 	.word	0x20004da0

08009a38 <_getpid_r>:
 8009a38:	f7f7 bdcd 	b.w	80015d6 <_getpid>

08009a3c <_sbrk_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4d06      	ldr	r5, [pc, #24]	; (8009a58 <_sbrk_r+0x1c>)
 8009a40:	2300      	movs	r3, #0
 8009a42:	4604      	mov	r4, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	602b      	str	r3, [r5, #0]
 8009a48:	f7f7 fe54 	bl	80016f4 <_sbrk>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d102      	bne.n	8009a56 <_sbrk_r+0x1a>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	b103      	cbz	r3, 8009a56 <_sbrk_r+0x1a>
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	20004da0 	.word	0x20004da0

08009a5c <_write_r>:
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	4d07      	ldr	r5, [pc, #28]	; (8009a7c <_write_r+0x20>)
 8009a60:	4604      	mov	r4, r0
 8009a62:	4608      	mov	r0, r1
 8009a64:	4611      	mov	r1, r2
 8009a66:	2200      	movs	r2, #0
 8009a68:	602a      	str	r2, [r5, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f7f7 fdf2 	bl	8001654 <_write>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d102      	bne.n	8009a7a <_write_r+0x1e>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	b103      	cbz	r3, 8009a7a <_write_r+0x1e>
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	20004da0 	.word	0x20004da0

08009a80 <_calloc_r>:
 8009a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a82:	fba1 2402 	umull	r2, r4, r1, r2
 8009a86:	b94c      	cbnz	r4, 8009a9c <_calloc_r+0x1c>
 8009a88:	4611      	mov	r1, r2
 8009a8a:	9201      	str	r2, [sp, #4]
 8009a8c:	f7ff f902 	bl	8008c94 <_malloc_r>
 8009a90:	9a01      	ldr	r2, [sp, #4]
 8009a92:	4605      	mov	r5, r0
 8009a94:	b930      	cbnz	r0, 8009aa4 <_calloc_r+0x24>
 8009a96:	4628      	mov	r0, r5
 8009a98:	b003      	add	sp, #12
 8009a9a:	bd30      	pop	{r4, r5, pc}
 8009a9c:	220c      	movs	r2, #12
 8009a9e:	6002      	str	r2, [r0, #0]
 8009aa0:	2500      	movs	r5, #0
 8009aa2:	e7f8      	b.n	8009a96 <_calloc_r+0x16>
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	f7fd ff69 	bl	800797c <memset>
 8009aaa:	e7f4      	b.n	8009a96 <_calloc_r+0x16>

08009aac <_free_r>:
 8009aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aae:	2900      	cmp	r1, #0
 8009ab0:	d044      	beq.n	8009b3c <_free_r+0x90>
 8009ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ab6:	9001      	str	r0, [sp, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f1a1 0404 	sub.w	r4, r1, #4
 8009abe:	bfb8      	it	lt
 8009ac0:	18e4      	addlt	r4, r4, r3
 8009ac2:	f7ff fa15 	bl	8008ef0 <__malloc_lock>
 8009ac6:	4a1e      	ldr	r2, [pc, #120]	; (8009b40 <_free_r+0x94>)
 8009ac8:	9801      	ldr	r0, [sp, #4]
 8009aca:	6813      	ldr	r3, [r2, #0]
 8009acc:	b933      	cbnz	r3, 8009adc <_free_r+0x30>
 8009ace:	6063      	str	r3, [r4, #4]
 8009ad0:	6014      	str	r4, [r2, #0]
 8009ad2:	b003      	add	sp, #12
 8009ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ad8:	f7ff ba10 	b.w	8008efc <__malloc_unlock>
 8009adc:	42a3      	cmp	r3, r4
 8009ade:	d908      	bls.n	8009af2 <_free_r+0x46>
 8009ae0:	6825      	ldr	r5, [r4, #0]
 8009ae2:	1961      	adds	r1, r4, r5
 8009ae4:	428b      	cmp	r3, r1
 8009ae6:	bf01      	itttt	eq
 8009ae8:	6819      	ldreq	r1, [r3, #0]
 8009aea:	685b      	ldreq	r3, [r3, #4]
 8009aec:	1949      	addeq	r1, r1, r5
 8009aee:	6021      	streq	r1, [r4, #0]
 8009af0:	e7ed      	b.n	8009ace <_free_r+0x22>
 8009af2:	461a      	mov	r2, r3
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	b10b      	cbz	r3, 8009afc <_free_r+0x50>
 8009af8:	42a3      	cmp	r3, r4
 8009afa:	d9fa      	bls.n	8009af2 <_free_r+0x46>
 8009afc:	6811      	ldr	r1, [r2, #0]
 8009afe:	1855      	adds	r5, r2, r1
 8009b00:	42a5      	cmp	r5, r4
 8009b02:	d10b      	bne.n	8009b1c <_free_r+0x70>
 8009b04:	6824      	ldr	r4, [r4, #0]
 8009b06:	4421      	add	r1, r4
 8009b08:	1854      	adds	r4, r2, r1
 8009b0a:	42a3      	cmp	r3, r4
 8009b0c:	6011      	str	r1, [r2, #0]
 8009b0e:	d1e0      	bne.n	8009ad2 <_free_r+0x26>
 8009b10:	681c      	ldr	r4, [r3, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	6053      	str	r3, [r2, #4]
 8009b16:	440c      	add	r4, r1
 8009b18:	6014      	str	r4, [r2, #0]
 8009b1a:	e7da      	b.n	8009ad2 <_free_r+0x26>
 8009b1c:	d902      	bls.n	8009b24 <_free_r+0x78>
 8009b1e:	230c      	movs	r3, #12
 8009b20:	6003      	str	r3, [r0, #0]
 8009b22:	e7d6      	b.n	8009ad2 <_free_r+0x26>
 8009b24:	6825      	ldr	r5, [r4, #0]
 8009b26:	1961      	adds	r1, r4, r5
 8009b28:	428b      	cmp	r3, r1
 8009b2a:	bf04      	itt	eq
 8009b2c:	6819      	ldreq	r1, [r3, #0]
 8009b2e:	685b      	ldreq	r3, [r3, #4]
 8009b30:	6063      	str	r3, [r4, #4]
 8009b32:	bf04      	itt	eq
 8009b34:	1949      	addeq	r1, r1, r5
 8009b36:	6021      	streq	r1, [r4, #0]
 8009b38:	6054      	str	r4, [r2, #4]
 8009b3a:	e7ca      	b.n	8009ad2 <_free_r+0x26>
 8009b3c:	b003      	add	sp, #12
 8009b3e:	bd30      	pop	{r4, r5, pc}
 8009b40:	20004d98 	.word	0x20004d98

08009b44 <__ascii_mbtowc>:
 8009b44:	b082      	sub	sp, #8
 8009b46:	b901      	cbnz	r1, 8009b4a <__ascii_mbtowc+0x6>
 8009b48:	a901      	add	r1, sp, #4
 8009b4a:	b142      	cbz	r2, 8009b5e <__ascii_mbtowc+0x1a>
 8009b4c:	b14b      	cbz	r3, 8009b62 <__ascii_mbtowc+0x1e>
 8009b4e:	7813      	ldrb	r3, [r2, #0]
 8009b50:	600b      	str	r3, [r1, #0]
 8009b52:	7812      	ldrb	r2, [r2, #0]
 8009b54:	1e10      	subs	r0, r2, #0
 8009b56:	bf18      	it	ne
 8009b58:	2001      	movne	r0, #1
 8009b5a:	b002      	add	sp, #8
 8009b5c:	4770      	bx	lr
 8009b5e:	4610      	mov	r0, r2
 8009b60:	e7fb      	b.n	8009b5a <__ascii_mbtowc+0x16>
 8009b62:	f06f 0001 	mvn.w	r0, #1
 8009b66:	e7f8      	b.n	8009b5a <__ascii_mbtowc+0x16>

08009b68 <_malloc_usable_size_r>:
 8009b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b6c:	1f18      	subs	r0, r3, #4
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	bfbc      	itt	lt
 8009b72:	580b      	ldrlt	r3, [r1, r0]
 8009b74:	18c0      	addlt	r0, r0, r3
 8009b76:	4770      	bx	lr

08009b78 <__ascii_wctomb>:
 8009b78:	b149      	cbz	r1, 8009b8e <__ascii_wctomb+0x16>
 8009b7a:	2aff      	cmp	r2, #255	; 0xff
 8009b7c:	bf85      	ittet	hi
 8009b7e:	238a      	movhi	r3, #138	; 0x8a
 8009b80:	6003      	strhi	r3, [r0, #0]
 8009b82:	700a      	strbls	r2, [r1, #0]
 8009b84:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009b88:	bf98      	it	ls
 8009b8a:	2001      	movls	r0, #1
 8009b8c:	4770      	bx	lr
 8009b8e:	4608      	mov	r0, r1
 8009b90:	4770      	bx	lr
	...

08009b94 <_init>:
 8009b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b96:	bf00      	nop
 8009b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b9a:	bc08      	pop	{r3}
 8009b9c:	469e      	mov	lr, r3
 8009b9e:	4770      	bx	lr

08009ba0 <_fini>:
 8009ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba2:	bf00      	nop
 8009ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba6:	bc08      	pop	{r3}
 8009ba8:	469e      	mov	lr, r3
 8009baa:	4770      	bx	lr
