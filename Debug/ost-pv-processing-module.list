
ost-pv-processing-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  0800bb58  0800bb58  0001bb58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c380  0800c380  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c380  0800c380  0001c380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c388  0800c388  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c388  0800c388  0001c388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c390  0800c390  0001c390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d2c  200001dc  0800c574  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f08  0800c574  00024f08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000228d3  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041d3  00000000  00000000  00042b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001940  00000000  00000000  00046cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000137c  00000000  00000000  00048638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004dea  00000000  00000000  000499b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019447  00000000  00000000  0004e79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f67e8  00000000  00000000  00067be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000080c8  00000000  00000000  0015e3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00166498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb3c 	.word	0x0800bb3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800bb3c 	.word	0x0800bb3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <_ZL13calculate_crcPKhj>:
#include <SHT30.hpp>

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8000eee:	23ff      	movs	r3, #255	; 0xff
 8000ef0:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	e020      	b.n	8000f3a <_ZL13calculate_crcPKhj+0x56>
		crc ^= data[i];
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4413      	add	r3, r2
 8000efe:	781a      	ldrb	r2, [r3, #0]
 8000f00:	7dfb      	ldrb	r3, [r7, #23]
 8000f02:	4053      	eors	r3, r2
 8000f04:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	e010      	b.n	8000f2e <_ZL13calculate_crcPKhj+0x4a>
			if ((crc & 0x80u) != 0) {
 8000f0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	da06      	bge.n	8000f22 <_ZL13calculate_crcPKhj+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8000f14:	7dfb      	ldrb	r3, [r7, #23]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000f1e:	75fb      	strb	r3, [r7, #23]
 8000f20:	e002      	b.n	8000f28 <_ZL13calculate_crcPKhj+0x44>
			} else {
				crc <<= 1u;
 8000f22:	7dfb      	ldrb	r3, [r7, #23]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2b07      	cmp	r3, #7
 8000f32:	d9eb      	bls.n	8000f0c <_ZL13calculate_crcPKhj+0x28>
	for (size_t i = 0; i < length; i++) {
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	3301      	adds	r3, #1
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d3da      	bcc.n	8000ef8 <_ZL13calculate_crcPKhj+0x14>
			}
		}
	}
	return crc;
 8000f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	371c      	adds	r7, #28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_ZL15uint8_to_uint16hh>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	460a      	mov	r2, r1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b29b      	uxth	r3, r3
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_Z14SHT30_send_cmdP7SHT30_tt>:
	}

	return 1;
}

uint8_t SHT30_send_cmd(SHT30_t* sht, uint16_t cmd) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(uint8_t)((cmd & 0xff00u) >> 8u), uint8_t(cmd & 0xffu)};
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	733b      	strb	r3, [r7, #12]
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(sht->hi2c, SHT30_I2C_ADDR << 1u, command_buffer, sizeof(command_buffer),
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	f107 020c 	add.w	r2, r7, #12
 8000fa0:	231e      	movs	r3, #30
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	2188      	movs	r1, #136	; 0x88
 8000fa8:	f003 fa00 	bl	80043ac <HAL_I2C_Master_Transmit>
 8000fac:	4603      	mov	r3, r0
								SHT30_I2C_TIMEOUT) != HAL_OK) {
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bf14      	ite	ne
 8000fb2:	2301      	movne	r3, #1
 8000fb4:	2300      	moveq	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
	if (HAL_I2C_Master_Transmit(sht->hi2c, SHT30_I2C_ADDR << 1u, command_buffer, sizeof(command_buffer),
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <_Z14SHT30_send_cmdP7SHT30_tt+0x44>
		return 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e000      	b.n	8000fc2 <_Z14SHT30_send_cmdP7SHT30_tt+0x46>
	}

	return 1;
 8000fc0:	2301      	movs	r3, #1

}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_>:

uint8_t SHT30_read_temp_humidity(SHT30_t* sht, float* temperature, float* humidity) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
	SHT30_send_cmd(sht, SHT30_COMMAND_MEASURE_HIGHREP_STRETCH);
 8000fd8:	f642 4106 	movw	r1, #11270	; 0x2c06
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f7ff ffcd 	bl	8000f7c <_Z14SHT30_send_cmdP7SHT30_tt>

	HAL_Delay(1);
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f002 fb7c 	bl	80036e0 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(sht->hi2c, SHT30_I2C_ADDR << 1u, buffer, sizeof(buffer), SHT30_I2C_TIMEOUT) != HAL_OK) {
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	f107 0214 	add.w	r2, r7, #20
 8000ff0:	231e      	movs	r3, #30
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	2188      	movs	r1, #136	; 0x88
 8000ff8:	f003 fad6 	bl	80045a8 <HAL_I2C_Master_Receive>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bf14      	ite	ne
 8001002:	2301      	movne	r3, #1
 8001004:	2300      	moveq	r3, #0
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0x44>
		return 0;
 800100c:	2300      	movs	r3, #0
 800100e:	e04f      	b.n	80010b0 <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0xe4>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2102      	movs	r1, #2
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff64 	bl	8000ee4 <_ZL13calculate_crcPKhj>
 800101c:	4603      	mov	r3, r0
 800101e:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	3303      	adds	r3, #3
 8001026:	2102      	movs	r1, #2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5b 	bl	8000ee4 <_ZL13calculate_crcPKhj>
 800102e:	4603      	mov	r3, r0
 8001030:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8001032:	7dbb      	ldrb	r3, [r7, #22]
 8001034:	7ffa      	ldrb	r2, [r7, #31]
 8001036:	429a      	cmp	r2, r3
 8001038:	d103      	bne.n	8001042 <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0x76>
 800103a:	7e7b      	ldrb	r3, [r7, #25]
 800103c:	7fba      	ldrb	r2, [r7, #30]
 800103e:	429a      	cmp	r2, r3
 8001040:	d001      	beq.n	8001046 <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0x7a>
		return 0;
 8001042:	2300      	movs	r3, #0
 8001044:	e034      	b.n	80010b0 <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0xe4>
	}

	uint16_t temperature_raw = uint8_to_uint16(buffer[0], buffer[1]);
 8001046:	7d3b      	ldrb	r3, [r7, #20]
 8001048:	7d7a      	ldrb	r2, [r7, #21]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff7f 	bl	8000f50 <_ZL15uint8_to_uint16hh>
 8001052:	4603      	mov	r3, r0
 8001054:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	7e3a      	ldrb	r2, [r7, #24]
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff77 	bl	8000f50 <_ZL15uint8_to_uint16hh>
 8001062:	4603      	mov	r3, r0
 8001064:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8001066:	8bbb      	ldrh	r3, [r7, #28]
 8001068:	ee07 3a90 	vmov	s15, r3
 800106c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001070:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80010b8 <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0xec>
 8001074:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001078:	eddf 6a10 	vldr	s13, [pc, #64]	; 80010bc <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0xf0>
 800107c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001080:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80010c0 <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0xf4>
 8001084:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 800108e:	8b7b      	ldrh	r3, [r7, #26]
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001098:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80010c4 <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0xf8>
 800109c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010a0:	eddf 6a06 	vldr	s13, [pc, #24]	; 80010bc <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0xf0>
 80010a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edc3 7a00 	vstr	s15, [r3]

	return 1;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	432f0000 	.word	0x432f0000
 80010bc:	477fff00 	.word	0x477fff00
 80010c0:	42340000 	.word	0x42340000
 80010c4:	42c80000 	.word	0x42c80000

080010c8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_ZNKSt4hashIhEclEh>:

  /// Explicit specialization for signed char.
  _Cxx_hashtable_define_trivial_hash(signed char)

  /// Explicit specialization for unsigned char.
  _Cxx_hashtable_define_trivial_hash(unsigned char)
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 8001116:	b480      	push	{r7}
 8001118:	b085      	sub	sp, #20
 800111a:	af00      	add	r7, sp, #0
 800111c:	60f8      	str	r0, [r7, #12]
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	fbb3 f2f2 	udiv	r2, r3, r2
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	fb01 f202 	mul.w	r2, r1, r2
 8001130:	1a9b      	subs	r3, r3, r2
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	ed87 0a00 	vstr	s0, [r7]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEEC1ERKS9_>:
		      const allocator_type& __a = allocator_type())
	: _M_h(__first, __last, __n, __hf, __eql, __a)
	{ }

      /// Copy constructor.
      unordered_map(const unordered_map&) = default;
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fb10 	bl	80017b2 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSG_>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEED1Ev>:
    class unordered_map
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fb4a 	bl	8001840 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <_ZN8SelectorC1ESt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS1_EEE>:
	uint16_t pin;
};

class Selector {
public:
	Selector(const std::unordered_map<uint8_t, GPIOPortPin> panel_gpio) : panel_gpio(panel_gpio) {}
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6839      	ldr	r1, [r7, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ffd9 	bl	800117c <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEEC1ERKS9_>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d8:	f002 fa10 	bl	80035fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011dc:	f000 f83a 	bl	8001254 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e0:	f000 f9fa 	bl	80015d8 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80011e4:	f000 f904 	bl	80013f0 <_ZL12MX_I2C1_Initv>
  MX_USART1_UART_Init();
 80011e8:	f000 f96a 	bl	80014c0 <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 80011ec:	f000 f8a4 	bl	8001338 <_ZL12MX_ADC1_Initv>
  MX_I2C2_Init();
 80011f0:	f000 f932 	bl	8001458 <_ZL12MX_I2C2_Initv>
//  MX_SDIO_SD_Init();
  MX_USART2_UART_Init();
 80011f4:	f000 f992 	bl	800151c <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 80011f8:	f000 f9c0 	bl	800157c <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  sprintf(msg, "Init\n");
 80011fc:	490d      	ldr	r1, [pc, #52]	; (8001234 <main+0x60>)
 80011fe:	480e      	ldr	r0, [pc, #56]	; (8001238 <main+0x64>)
 8001200:	f008 fb56 	bl	80098b0 <siprintf>
  sprintf(msg, "SHT30 init OK\n");
  HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 100);
#endif

#ifdef SELECTOR_D
  selector.deselect_all();
 8001204:	480d      	ldr	r0, [pc, #52]	; (800123c <main+0x68>)
 8001206:	f001 feaa 	bl	8002f5e <_ZN8Selector12deselect_allEv>
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800120a:	f004 ff6f 	bl	80060ec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800120e:	4a0c      	ldr	r2, [pc, #48]	; (8001240 <main+0x6c>)
 8001210:	2100      	movs	r1, #0
 8001212:	480c      	ldr	r0, [pc, #48]	; (8001244 <main+0x70>)
 8001214:	f004 ffb4 	bl	8006180 <osThreadNew>
 8001218:	4603      	mov	r3, r0
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <main+0x74>)
 800121c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
#ifdef SELECTOR_D
  selectorTaskHandle = osThreadNew(SelectorCycleTask, NULL, &defaultTask_attributes);
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <main+0x6c>)
 8001220:	2100      	movs	r1, #0
 8001222:	480a      	ldr	r0, [pc, #40]	; (800124c <main+0x78>)
 8001224:	f004 ffac 	bl	8006180 <osThreadNew>
 8001228:	4603      	mov	r3, r0
 800122a:	4a09      	ldr	r2, [pc, #36]	; (8001250 <main+0x7c>)
 800122c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800122e:	f004 ff81 	bl	8006134 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001232:	e7fe      	b.n	8001232 <main+0x5e>
 8001234:	0800bb64 	.word	0x0800bb64
 8001238:	200003f0 	.word	0x200003f0
 800123c:	200003d4 	.word	0x200003d4
 8001240:	0800bbc0 	.word	0x0800bbc0
 8001244:	0800170d 	.word	0x0800170d
 8001248:	200003b4 	.word	0x200003b4
 800124c:	08001699 	.word	0x08001699
 8001250:	2000045c 	.word	0x2000045c

08001254 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b094      	sub	sp, #80	; 0x50
 8001258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	2230      	movs	r2, #48	; 0x30
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f008 fc18 	bl	8009a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <_Z18SystemClock_Configv+0xdc>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	4a2b      	ldr	r2, [pc, #172]	; (8001330 <_Z18SystemClock_Configv+0xdc>)
 8001282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001286:	6413      	str	r3, [r2, #64]	; 0x40
 8001288:	4b29      	ldr	r3, [pc, #164]	; (8001330 <_Z18SystemClock_Configv+0xdc>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	4b26      	ldr	r3, [pc, #152]	; (8001334 <_Z18SystemClock_Configv+0xe0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a25      	ldr	r2, [pc, #148]	; (8001334 <_Z18SystemClock_Configv+0xe0>)
 800129e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b23      	ldr	r3, [pc, #140]	; (8001334 <_Z18SystemClock_Configv+0xe0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012b0:	2302      	movs	r3, #2
 80012b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b4:	2301      	movs	r3, #1
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b8:	2310      	movs	r3, #16
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012bc:	2302      	movs	r3, #2
 80012be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012c0:	2300      	movs	r3, #0
 80012c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012c4:	2310      	movs	r3, #16
 80012c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80012c8:	23c0      	movs	r3, #192	; 0xc0
 80012ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012d0:	2304      	movs	r3, #4
 80012d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d4:	f107 0320 	add.w	r3, r7, #32
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 feb9 	bl	8005050 <HAL_RCC_OscConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	bf14      	ite	ne
 80012e4:	2301      	movne	r3, #1
 80012e6:	2300      	moveq	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80012ee:	f000 fa43 	bl	8001778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f2:	230f      	movs	r3, #15
 80012f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f004 f917 	bl	8005540 <HAL_RCC_ClockConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	bf14      	ite	ne
 8001318:	2301      	movne	r3, #1
 800131a:	2300      	moveq	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8001322:	f000 fa29 	bl	8001778 <Error_Handler>
  }
}
 8001326:	bf00      	nop
 8001328:	3750      	adds	r7, #80	; 0x50
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40007000 	.word	0x40007000

08001338 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800133e:	463b      	mov	r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <_ZL12MX_ADC1_Initv+0xac>)
 800134c:	4a26      	ldr	r2, [pc, #152]	; (80013e8 <_ZL12MX_ADC1_Initv+0xb0>)
 800134e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001350:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <_ZL12MX_ADC1_Initv+0xac>)
 8001352:	2200      	movs	r2, #0
 8001354:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <_ZL12MX_ADC1_Initv+0xac>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800135c:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <_ZL12MX_ADC1_Initv+0xac>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <_ZL12MX_ADC1_Initv+0xac>)
 8001364:	2200      	movs	r2, #0
 8001366:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001368:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <_ZL12MX_ADC1_Initv+0xac>)
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <_ZL12MX_ADC1_Initv+0xac>)
 8001372:	2200      	movs	r2, #0
 8001374:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001376:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <_ZL12MX_ADC1_Initv+0xac>)
 8001378:	4a1c      	ldr	r2, [pc, #112]	; (80013ec <_ZL12MX_ADC1_Initv+0xb4>)
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <_ZL12MX_ADC1_Initv+0xac>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <_ZL12MX_ADC1_Initv+0xac>)
 8001384:	2201      	movs	r2, #1
 8001386:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <_ZL12MX_ADC1_Initv+0xac>)
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <_ZL12MX_ADC1_Initv+0xac>)
 8001392:	2201      	movs	r2, #1
 8001394:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001396:	4813      	ldr	r0, [pc, #76]	; (80013e4 <_ZL12MX_ADC1_Initv+0xac>)
 8001398:	f002 f9c6 	bl	8003728 <HAL_ADC_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	bf14      	ite	ne
 80013a2:	2301      	movne	r3, #1
 80013a4:	2300      	moveq	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 80013ac:	f000 f9e4 	bl	8001778 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013bc:	463b      	mov	r3, r7
 80013be:	4619      	mov	r1, r3
 80013c0:	4808      	ldr	r0, [pc, #32]	; (80013e4 <_ZL12MX_ADC1_Initv+0xac>)
 80013c2:	f002 f9f5 	bl	80037b0 <HAL_ADC_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf14      	ite	ne
 80013cc:	2301      	movne	r3, #1
 80013ce:	2300      	moveq	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 80013d6:	f000 f9cf 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200001f8 	.word	0x200001f8
 80013e8:	40012000 	.word	0x40012000
 80013ec:	0f000001 	.word	0x0f000001

080013f0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <_ZL12MX_I2C1_Initv+0x5c>)
 80013f6:	4a16      	ldr	r2, [pc, #88]	; (8001450 <_ZL12MX_I2C1_Initv+0x60>)
 80013f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <_ZL12MX_I2C1_Initv+0x5c>)
 80013fc:	4a15      	ldr	r2, [pc, #84]	; (8001454 <_ZL12MX_I2C1_Initv+0x64>)
 80013fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <_ZL12MX_I2C1_Initv+0x5c>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <_ZL12MX_I2C1_Initv+0x5c>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <_ZL12MX_I2C1_Initv+0x5c>)
 800140e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001412:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <_ZL12MX_I2C1_Initv+0x5c>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <_ZL12MX_I2C1_Initv+0x5c>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <_ZL12MX_I2C1_Initv+0x5c>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <_ZL12MX_I2C1_Initv+0x5c>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800142c:	4807      	ldr	r0, [pc, #28]	; (800144c <_ZL12MX_I2C1_Initv+0x5c>)
 800142e:	f002 fe79 	bl	8004124 <HAL_I2C_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf14      	ite	ne
 8001438:	2301      	movne	r3, #1
 800143a:	2300      	moveq	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001442:	f000 f999 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000240 	.word	0x20000240
 8001450:	40005400 	.word	0x40005400
 8001454:	000186a0 	.word	0x000186a0

08001458 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <_ZL12MX_I2C2_Initv+0x5c>)
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <_ZL12MX_I2C2_Initv+0x60>)
 8001460:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <_ZL12MX_I2C2_Initv+0x5c>)
 8001464:	4a15      	ldr	r2, [pc, #84]	; (80014bc <_ZL12MX_I2C2_Initv+0x64>)
 8001466:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <_ZL12MX_I2C2_Initv+0x5c>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <_ZL12MX_I2C2_Initv+0x5c>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <_ZL12MX_I2C2_Initv+0x5c>)
 8001476:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800147a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147c:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <_ZL12MX_I2C2_Initv+0x5c>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <_ZL12MX_I2C2_Initv+0x5c>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <_ZL12MX_I2C2_Initv+0x5c>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <_ZL12MX_I2C2_Initv+0x5c>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001494:	4807      	ldr	r0, [pc, #28]	; (80014b4 <_ZL12MX_I2C2_Initv+0x5c>)
 8001496:	f002 fe45 	bl	8004124 <HAL_I2C_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf14      	ite	ne
 80014a0:	2301      	movne	r3, #1
 80014a2:	2300      	moveq	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80014aa:	f000 f965 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000294 	.word	0x20000294
 80014b8:	40005800 	.word	0x40005800
 80014bc:	000186a0 	.word	0x000186a0

080014c0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <_ZL19MX_USART1_UART_Initv+0x54>)
 80014c6:	4a14      	ldr	r2, [pc, #80]	; (8001518 <_ZL19MX_USART1_UART_Initv+0x58>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <_ZL19MX_USART1_UART_Initv+0x54>)
 80014cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <_ZL19MX_USART1_UART_Initv+0x54>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <_ZL19MX_USART1_UART_Initv+0x54>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <_ZL19MX_USART1_UART_Initv+0x54>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <_ZL19MX_USART1_UART_Initv+0x54>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <_ZL19MX_USART1_UART_Initv+0x54>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <_ZL19MX_USART1_UART_Initv+0x54>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014f6:	4807      	ldr	r0, [pc, #28]	; (8001514 <_ZL19MX_USART1_UART_Initv+0x54>)
 80014f8:	f004 fa02 	bl	8005900 <HAL_UART_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	bf14      	ite	ne
 8001502:	2301      	movne	r3, #1
 8001504:	2300      	moveq	r3, #0
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800150c:	f000 f934 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200002e8 	.word	0x200002e8
 8001518:	40011000 	.word	0x40011000

0800151c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001522:	4a15      	ldr	r2, [pc, #84]	; (8001578 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8001524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001548:	f44f 7240 	mov.w	r2, #768	; 0x300
 800154c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001550:	2200      	movs	r2, #0
 8001552:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001554:	4807      	ldr	r0, [pc, #28]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001556:	f004 f9d3 	bl	8005900 <HAL_UART_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	bf14      	ite	ne
 8001560:	2301      	movne	r3, #1
 8001562:	2300      	moveq	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <_ZL19MX_USART2_UART_Initv+0x52>
  {
    Error_Handler();
 800156a:	f000 f905 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2000032c 	.word	0x2000032c
 8001578:	40004400 	.word	0x40004400

0800157c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001582:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001584:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800158c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80015b4:	f004 f9a4 	bl	8005900 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bf14      	ite	ne
 80015be:	2301      	movne	r3, #1
 80015c0:	2300      	moveq	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80015c8:	f000 f8d6 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000370 	.word	0x20000370
 80015d4:	40004800 	.word	0x40004800

080015d8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b27      	ldr	r3, [pc, #156]	; (8001690 <_ZL12MX_GPIO_Initv+0xb8>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a26      	ldr	r2, [pc, #152]	; (8001690 <_ZL12MX_GPIO_Initv+0xb8>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <_ZL12MX_GPIO_Initv+0xb8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <_ZL12MX_GPIO_Initv+0xb8>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a1f      	ldr	r2, [pc, #124]	; (8001690 <_ZL12MX_GPIO_Initv+0xb8>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <_ZL12MX_GPIO_Initv+0xb8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <_ZL12MX_GPIO_Initv+0xb8>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a18      	ldr	r2, [pc, #96]	; (8001690 <_ZL12MX_GPIO_Initv+0xb8>)
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <_ZL12MX_GPIO_Initv+0xb8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <_ZL12MX_GPIO_Initv+0xb8>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a11      	ldr	r2, [pc, #68]	; (8001690 <_ZL12MX_GPIO_Initv+0xb8>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <_ZL12MX_GPIO_Initv+0xb8>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Panel0_Pin|Panel1_Pin|Panel2_Pin, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001664:	480b      	ldr	r0, [pc, #44]	; (8001694 <_ZL12MX_GPIO_Initv+0xbc>)
 8001666:	f002 fd43 	bl	80040f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Panel0_Pin Panel1_Pin Panel2_Pin */
  GPIO_InitStruct.Pin = Panel0_Pin|Panel1_Pin|Panel2_Pin;
 800166a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	4804      	ldr	r0, [pc, #16]	; (8001694 <_ZL12MX_GPIO_Initv+0xbc>)
 8001684:	f002 fb98 	bl	8003db8 <HAL_GPIO_Init>

}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	; 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	40020c00 	.word	0x40020c00

08001698 <_Z17SelectorCycleTaskPv>:

/* USER CODE BEGIN 4 */
void SelectorCycleTask(void* argument) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	for(;;) {
		for (const auto& panel : panels) {
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <_Z17SelectorCycleTaskPv+0x6c>)
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	6978      	ldr	r0, [r7, #20]
 80016a6:	f000 f90e 	bl	80018c6 <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE5beginEv>
 80016aa:	4603      	mov	r3, r0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f000 f916 	bl	80018e0 <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE3endEv>
 80016b4:	4603      	mov	r3, r0
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	e014      	b.n	80016e4 <_Z17SelectorCycleTaskPv+0x4c>
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f93c 	bl	800193c <_ZNKSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEdeEv>
 80016c4:	6138      	str	r0, [r7, #16]
			selector.select(panel.first);
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	4619      	mov	r1, r3
 80016cc:	480e      	ldr	r0, [pc, #56]	; (8001708 <_Z17SelectorCycleTaskPv+0x70>)
 80016ce:	f001 fc07 	bl	8002ee0 <_ZN8Selector6selectEh>
			osDelay(1000);
 80016d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016d6:	f004 fde5 	bl	80062a4 <osDelay>
		for (const auto& panel : panels) {
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f91f 	bl	8001922 <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEppEv>
 80016e4:	f107 0208 	add.w	r2, r7, #8
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f903 	bl	80018fa <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EEES7_>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1df      	bne.n	80016ba <_Z17SelectorCycleTaskPv+0x22>
		}
		osDelay(10000);
 80016fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80016fe:	f004 fdd1 	bl	80062a4 <osDelay>
	}
 8001702:	e7cd      	b.n	80016a0 <_Z17SelectorCycleTaskPv+0x8>
 8001704:	200003b8 	.word	0x200003b8
 8001708:	200003d4 	.word	0x200003d4

0800170c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800170c:	b5b0      	push	{r4, r5, r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af02      	add	r7, sp, #8
 8001712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	SHT30_read_temp_humidity(&sht, &temp, &rh);
 8001714:	4a12      	ldr	r2, [pc, #72]	; (8001760 <_Z16StartDefaultTaskPv+0x54>)
 8001716:	4913      	ldr	r1, [pc, #76]	; (8001764 <_Z16StartDefaultTaskPv+0x58>)
 8001718:	4813      	ldr	r0, [pc, #76]	; (8001768 <_Z16StartDefaultTaskPv+0x5c>)
 800171a:	f7ff fc57 	bl	8000fcc <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_>
	sprintf(msg, "temp: %.2f, rh: %.2f\n", temp, rh);
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <_Z16StartDefaultTaskPv+0x58>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff10 	bl	8000548 <__aeabi_f2d>
 8001728:	4604      	mov	r4, r0
 800172a:	460d      	mov	r5, r1
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <_Z16StartDefaultTaskPv+0x54>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe ff09 	bl	8000548 <__aeabi_f2d>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	e9cd 2300 	strd	r2, r3, [sp]
 800173e:	4622      	mov	r2, r4
 8001740:	462b      	mov	r3, r5
 8001742:	490a      	ldr	r1, [pc, #40]	; (800176c <_Z16StartDefaultTaskPv+0x60>)
 8001744:	480a      	ldr	r0, [pc, #40]	; (8001770 <_Z16StartDefaultTaskPv+0x64>)
 8001746:	f008 f8b3 	bl	80098b0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 100);
 800174a:	2364      	movs	r3, #100	; 0x64
 800174c:	2264      	movs	r2, #100	; 0x64
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <_Z16StartDefaultTaskPv+0x64>)
 8001750:	4808      	ldr	r0, [pc, #32]	; (8001774 <_Z16StartDefaultTaskPv+0x68>)
 8001752:	f004 f922 	bl	800599a <HAL_UART_Transmit>
    osDelay(4000);
 8001756:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800175a:	f004 fda3 	bl	80062a4 <osDelay>
	SHT30_read_temp_humidity(&sht, &temp, &rh);
 800175e:	e7d9      	b.n	8001714 <_Z16StartDefaultTaskPv+0x8>
 8001760:	20000458 	.word	0x20000458
 8001764:	20000454 	.word	0x20000454
 8001768:	20000000 	.word	0x20000000
 800176c:	0800bb6c 	.word	0x0800bb6c
 8001770:	200003f0 	.word	0x200003f0
 8001774:	200002e8 	.word	0x200002e8

08001778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177c:	b672      	cpsid	i
}
 800177e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001780:	e7fe      	b.n	8001780 <Error_Handler+0x8>

08001782 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EED1Ev>:
	   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    struct _Hashtable_ebo_helper;

  /// Specialization using EBO.
  template<int _Nm, typename _Tp>
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f90a 	bl	80019a4 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEED1Ev>:
  /**
   * This type deals with all allocation and keeps an allocator instance
   * through inheritance to benefit from EBO when possible.
   */
  template<typename _NodeAlloc>
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffed 	bl	8001782 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EED1Ev>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSG_>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	6039      	str	r1, [r7, #0]
    _Hashtable(const _Hashtable& __ht)
    : __hashtable_base(__ht),
      __map_base(__ht),
      __rehash_base(__ht),
      __hashtable_alloc(
	__node_alloc_traits::_S_select_on_copy(__ht._M_node_allocator())),
 80017bc:	6838      	ldr	r0, [r7, #0]
 80017be:	f000 f8e5 	bl	800198c <_ZNKSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 80017c2:	4602      	mov	r2, r0
      __enable_default_ctor(__ht),
      _M_buckets(nullptr),
      _M_bucket_count(__ht._M_bucket_count),
      _M_element_count(__ht._M_element_count),
      _M_rehash_policy(__ht._M_rehash_policy)
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	4611      	mov	r1, r2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 f8d0 	bl	8001970 <_ZN9__gnu_cxx14__alloc_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEES7_E17_S_select_on_copyERKS8_>
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	4619      	mov	r1, r3
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f8f0 	bl	80019bc <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1IS7_EEOT_>
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 f8df 	bl	80019a4 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>
      _M_buckets(nullptr),
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
      _M_bucket_count(__ht._M_bucket_count),
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	605a      	str	r2, [r3, #4]
      _M_rehash_policy(__ht._M_rehash_policy)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3308      	adds	r3, #8
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fc7e 	bl	80010fa <_ZNSt8__detail15_Hash_node_baseC1Ev>
      _M_element_count(__ht._M_element_count),
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	60da      	str	r2, [r3, #12]
      _M_rehash_policy(__ht._M_rehash_policy)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	3310      	adds	r3, #16
 800180c:	3210      	adds	r2, #16
 800180e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001812:	e883 0003 	stmia.w	r3, {r0, r1}
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
    {
      __alloc_node_gen_t __alloc_node_gen(*this);
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f8dc 	bl	80019e0 <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1ERNS_16_Hashtable_allocIS7_EE>
      _M_assign(__ht, __alloc_node_gen);
 8001828:	f107 0308 	add.w	r3, r7, #8
 800182c:	461a      	mov	r2, r3
 800182e:	6839      	ldr	r1, [r7, #0]
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f8e4 	bl	80019fe <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_>
    }
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    ~_Hashtable() noexcept
    {
      clear();
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f956 	bl	8001afa <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f973 	bl	8001b3a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ffa0 	bl	800179a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEED1Ev>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_ZNSaISt4pairIKh11GPIOPortPinEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f974 	bl	8001b5a <_ZN9__gnu_cxx13new_allocatorISt4pairIKh11GPIOPortPinEEC1Ev>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_ZNSaISt4pairIKh11GPIOPortPinEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f973 	bl	8001b70 <_ZN9__gnu_cxx13new_allocatorISt4pairIKh11GPIOPortPinEED1Ev>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEEC1ESt16initializer_listIS7_EjRKS2_RKS4_RKS8_>:
       *  @param  __a  An allocator object.
       *
       *  Create an %unordered_map consisting of copies of the elements in the
       *  list. This is linear in N (where N is @a __l.size()).
       */
      unordered_map(initializer_list<value_type> __l,
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af04      	add	r7, sp, #16
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	1d38      	adds	r0, r7, #4
 800189e:	e880 0006 	stmia.w	r0, {r1, r2}
 80018a2:	603b      	str	r3, [r7, #0]
		    size_type __n = 0,
		    const hasher& __hf = hasher(),
		    const key_equal& __eql = key_equal(),
		    const allocator_type& __a = allocator_type())
      : _M_h(__l, __n, __hf, __eql, __a)
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	1d3a      	adds	r2, r7, #4
 80018b6:	ca06      	ldmia	r2, {r1, r2}
 80018b8:	f000 f965 	bl	8001b86 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listIS3_EjRKSA_RKS8_RKS4_>
      { }
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %unordered_map.
       */
      iterator
      begin() noexcept
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
      { return _M_h.begin(); }
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 f97c 	bl	8001bce <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE3endEv>:
      /**
       *  Returns a read/write iterator that points one past the last element in
       *  the %unordered_map.
       */
      iterator
      end() noexcept
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
      { return _M_h.end(); }
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f982 	bl	8001bf4 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EEES7_>:
      operator!=(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
      { return __x._M_cur != __y._M_cur; }
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	bf14      	ite	ne
 8001910:	2301      	movne	r3, #1
 8001912:	2300      	moveq	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEppEv>:
      operator++() noexcept
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
	this->_M_incr();
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	f000 f970 	bl	8001c12 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EE7_M_incrEv>
	return *this;
 8001932:	687b      	ldr	r3, [r7, #4]
      }
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <_ZNKSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEdeEv>:
      operator*() const noexcept
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_v(); }
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3304      	adds	r3, #4
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f971 	bl	8001c32 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>
 8001950:	4603      	mov	r3, r0
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_ZN9__gnu_cxx14__alloc_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEES7_E17_S_select_on_copyERKS8_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6839      	ldr	r1, [r7, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f963 	bl	8001c4a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE37select_on_container_copy_constructionERKS7_>
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <_ZNKSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>:
      __node_alloc_type&
      _M_node_allocator()
      { return __ebo_node_alloc::_M_get(); }

      const __node_alloc_type&
      _M_node_allocator() const
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_cget(); }
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f973 	bl	8001c80 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EE7_M_cgetEv>
 800199a:	4603      	mov	r3, r0
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>:
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f972 	bl	8001c96 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1IS7_EEOT_>:
	_Hashtable_alloc(_Alloc&& __a)
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
	: __ebo_node_alloc(std::forward<_Alloc>(__a))
 80019c6:	6838      	ldr	r0, [r7, #0]
 80019c8:	f000 f970 	bl	8001cac <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4619      	mov	r1, r3
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f976 	bl	8001cc2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EEC1IS7_EEOT_>
	{ }
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1ERNS_16_Hashtable_allocIS7_EE>:
      _AllocNode(__hashtable_alloc& __h)
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
      : _M_h(__h) { }
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b08a      	sub	sp, #40	; 0x28
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
	__buckets_ptr __buckets = nullptr;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
	if (!_M_buckets)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0x2c>
	  _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 f962 	bl	8001ce6 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 8001a22:	61f8      	str	r0, [r7, #28]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	601a      	str	r2, [r3, #0]
	    if (!__ht._M_before_begin._M_nxt)
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d05f      	beq.n	8001af2 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0xf4>
	    __node_ptr __ht_n = __ht._M_begin();
 8001a32:	68b8      	ldr	r0, [r7, #8]
 8001a34:	f000 f974 	bl	8001d20 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8001a38:	6278      	str	r0, [r7, #36]	; 0x24
	      = __node_gen(__fwd_value_for<_Ht>(__ht_n->_M_v()));
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 f8f7 	bl	8001c32 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f976 	bl	8001d38 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15__fwd_value_forIRKSG_EENSt11conditionalIXsrSt19is_lvalue_referenceIT_E5valueERKS3_OS3_E4typeERS3_>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f97d 	bl	8001d50 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEclIRKS5_EEPS6_OT_>
 8001a56:	61b8      	str	r0, [r7, #24]
	    this->_M_copy_code(*__this_n, *__ht_n);
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	1d19      	adds	r1, r3, #4
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	3304      	adds	r3, #4
 8001a60:	461a      	mov	r2, r3
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f988 	bl	8001d78 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_copy_codeERNS_21_Hash_node_code_cacheILb0EEERKSC_>
	    _M_update_bbegin(__this_n);
 8001a68:	69b9      	ldr	r1, [r7, #24]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 f990 	bl	8001d90 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEPNS5_10_Hash_nodeIS3_Lb0EEE>
	    __node_ptr __prev_n = __this_n;
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	623b      	str	r3, [r7, #32]
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
 8001a74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a76:	f000 f99a 	bl	8001dae <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8001a7a:	6278      	str	r0, [r7, #36]	; 0x24
 8001a7c:	e035      	b.n	8001aea <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0xec>
		__this_n = __node_gen(__fwd_value_for<_Ht>(__ht_n->_M_v()));
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	3304      	adds	r3, #4
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f8d5 	bl	8001c32 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f954 	bl	8001d38 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15__fwd_value_forIRKSG_EENSt11conditionalIXsrSt19is_lvalue_referenceIT_E5valueERKS3_OS3_E4typeERS3_>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4619      	mov	r1, r3
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f95b 	bl	8001d50 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEclIRKS5_EEPS6_OT_>
 8001a9a:	61b8      	str	r0, [r7, #24]
		__prev_n->_M_nxt = __this_n;
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	601a      	str	r2, [r3, #0]
		this->_M_copy_code(*__this_n, *__ht_n);
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	1d19      	adds	r1, r3, #4
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 f963 	bl	8001d78 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_copy_codeERNS_21_Hash_node_code_cacheILb0EEERKSC_>
		size_type __bkt = _M_bucket_index(*__this_n);
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f984 	bl	8001dc6 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>
 8001abe:	6178      	str	r0, [r7, #20]
		if (!_M_buckets[__bkt])
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d106      	bne.n	8001ade <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0xe0>
		  _M_buckets[__bkt] = __prev_n;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	6a3a      	ldr	r2, [r7, #32]
 8001adc:	601a      	str	r2, [r3, #0]
		__prev_n = __this_n;
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	623b      	str	r3, [r7, #32]
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
 8001ae2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ae4:	f000 f963 	bl	8001dae <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8001ae8:	6278      	str	r0, [r7, #36]	; 0x24
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1c6      	bne.n	8001a7e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0x80>
 8001af0:	e000      	b.n	8001af4 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0xf6>
	      return;
 8001af2:	bf00      	nop
      }
 8001af4:	3728      	adds	r7, #40	; 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f90c 	bl	8001d20 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f96b 	bl	8001de8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_deallocate_nodesEPS6_>
      __builtin_memset(_M_buckets, 0,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	461a      	mov	r2, r3
 8001b20:	2100      	movs	r1, #0
 8001b22:	f007 ffb9 	bl	8009a98 <memset>
      _M_element_count = 0;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
    }
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6819      	ldr	r1, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f963 	bl	8001e18 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj>
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <_ZN9__gnu_cxx13new_allocatorISt4pairIKh11GPIOPortPinEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <_ZN9__gnu_cxx13new_allocatorISt4pairIKh11GPIOPortPinEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listIS3_EjRKSA_RKS8_RKS4_>:
      _Hashtable(initializer_list<value_type> __l,
 8001b86:	b5b0      	push	{r4, r5, r7, lr}
 8001b88:	b088      	sub	sp, #32
 8001b8a:	af04      	add	r7, sp, #16
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	1d38      	adds	r0, r7, #4
 8001b90:	e880 0006 	stmia.w	r0, {r1, r2}
 8001b94:	603b      	str	r3, [r7, #0]
		   __hf, __eql, __a, __unique_keys{})
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f954 	bl	8001e46 <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE5beginEv>
 8001b9e:	4604      	mov	r4, r0
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f95b 	bl	8001e5e <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE3endEv>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f88d 500c 	strb.w	r5, [sp, #12]
 8001bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb0:	9302      	str	r3, [sp, #8]
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 f962 	bl	8001e88 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS3_EET_SK_jRKSA_RKS8_RKS4_St17integral_constantIbLb1EE>
      { }
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bdb0      	pop	{r4, r5, r7, pc}

08001bce <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>:
      begin() noexcept
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
      { return iterator(_M_begin()); }
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f8a2 	bl	8001d20 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 f972 	bl	8001ece <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>:
      end() noexcept
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
      { return iterator(nullptr); }
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f963 	bl	8001ece <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EE7_M_incrEv>:
      _M_incr() noexcept
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
      { _M_cur = _M_cur->_M_next(); }
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f8c5 	bl	8001dae <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8001c24:	4602      	mov	r2, r0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>:
      _M_v() noexcept
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f956 	bl	8001eec <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE37select_on_container_copy_constructionERKS7_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static _GLIBCXX20_CONSTEXPR allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8001c54:	6839      	ldr	r1, [r7, #0]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f804 	bl	8001c64 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1ERKS6_>
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001c6e:	6839      	ldr	r1, [r7, #0]
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f948 	bl	8001f06 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1ERKS8_>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>:
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EEC1IS7_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 8001ccc:	6838      	ldr	r0, [r7, #0]
 8001cce:	f7ff ffed 	bl	8001cac <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffc4 	bl	8001c64 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1ERKS6_>
	{ }
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	bf0c      	ite	eq
 8001cf6:	2301      	moveq	r3, #1
 8001cf8:	2300      	movne	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3318      	adds	r3, #24
 8001d0a:	e005      	b.n	8001d18 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 8001d0c:	6839      	ldr	r1, [r7, #0]
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f905 	bl	8001f1e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_allocate_bucketsEj>
 8001d14:	4603      	mov	r3, r0
 8001d16:	bf00      	nop
      }
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15__fwd_value_forIRKSG_EENSt11conditionalIXsrSt19is_lvalue_referenceIT_E5valueERKS3_OS3_E4typeERS3_>:
	__fwd_value_for(value_type& __val) noexcept
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	{ return std::move(__val); }
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f919 	bl	8001f78 <_ZSt4moveIRSt4pairIKh11GPIOPortPinEEONSt16remove_referenceIT_E4typeEOS6_>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEclIRKS5_EEPS6_OT_>:
	operator()(_Arg&& __arg) const
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
	{ return _M_h._M_allocate_node(std::forward<_Arg>(__arg)); }
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681c      	ldr	r4, [r3, #0]
 8001d5e:	6838      	ldr	r0, [r7, #0]
 8001d60:	f000 f915 	bl	8001f8e <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4619      	mov	r1, r3
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f000 f928 	bl	8001fbe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE16_M_allocate_nodeIJRKS5_EEEPS6_DpOT_>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd90      	pop	{r4, r7, pc}

08001d78 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_copy_codeERNS_21_Hash_node_code_cacheILb0EEERKSC_>:
      _M_copy_code(_Hash_node_code_cache<false>&,
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
      { }
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEPNS5_10_Hash_nodeIS3_Lb0EEE>:
      _M_update_bbegin(__node_ptr __n)
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
	_M_before_begin._M_nxt = __n;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	609a      	str	r2, [r3, #8]
	_M_update_bbegin();
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f93f 	bl	8002024 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEv>
      }
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>:
      _M_bucket_index(const __node_value_type& __n) const noexcept
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f947 	bl	800206c <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb0EEEj>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_deallocate_nodesEPS6_>:
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
    {
      while (__n)
 8001df2:	e009      	b.n	8001e08 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_deallocate_nodesEPS6_+0x20>
	{
	  __node_ptr __tmp = __n;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 8001df8:	6838      	ldr	r0, [r7, #0]
 8001dfa:	f7ff ffd8 	bl	8001dae <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8001dfe:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 8001e00:	68f9      	ldr	r1, [r7, #12]
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f954 	bl	80020b0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE18_M_deallocate_nodeEPS6_>
      while (__n)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f2      	bne.n	8001df4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_deallocate_nodesEPS6_+0xc>
	}
    }
 8001e0e:	bf00      	nop
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f95d 	bl	80020e6 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS5_15_Hash_node_baseE>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d105      	bne.n	8001e3e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f96d 	bl	8002116 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 8001e3c:	e000      	b.n	8001e40 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj+0x28>
	  return;
 8001e3e:	bf00      	nop
      }
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8001e5e:	b590      	push	{r4, r7, lr}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ffed 	bl	8001e46 <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE5beginEv>
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f974 	bl	800215c <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE4sizeEv>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4423      	add	r3, r4
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd90      	pop	{r4, r7, pc}

08001e88 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS3_EET_SK_jRKSA_RKS8_RKS4_St17integral_constantIbLb1EE>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
      : _Hashtable(__bkt_count_hint, __h, __eq, __a)
 8001e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	6a3a      	ldr	r2, [r7, #32]
 8001e9e:	6839      	ldr	r1, [r7, #0]
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 f967 	bl	8002174 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSA_RKS8_RKS4_>
	for (; __f != __l; ++__f)
 8001ea6:	e009      	b.n	8001ebc <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS3_EET_SK_jRKSA_RKS8_RKS4_St17integral_constantIbLb1EE+0x34>
	  this->insert(*__f);
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	68f9      	ldr	r1, [r7, #12]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 f987 	bl	80021c4 <_ZNSt8__detail12_Insert_baseIhSt4pairIKh11GPIOPortPinESaIS4_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKS4_>
	for (; __f != __l; ++__f)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	330c      	adds	r3, #12
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d1f1      	bne.n	8001ea8 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS3_EET_SK_jRKSA_RKS8_RKS4_St17integral_constantIbLb1EE+0x20>
      }
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6839      	ldr	r1, [r7, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 f98f 	bl	8002200 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>:
      _M_valptr() noexcept
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f991 	bl	800221e <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE6_M_ptrEv>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1ERKS8_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_allocate_bucketsEj>:

  template<typename _NodeAlloc>
    auto
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 8001f1e:	b590      	push	{r4, r7, lr}
 8001f20:	b087      	sub	sp, #28
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]
    -> __buckets_ptr
    {
      __buckets_alloc_type __alloc(_M_node_allocator());
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f984 	bl	8002236 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f989 	bl	800224e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEERKSaIT_E>

      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	6839      	ldr	r1, [r7, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f99c 	bl	8002280 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 8001f48:	6178      	str	r0, [r7, #20]
      __buckets_ptr __p = std::__to_address(__ptr);
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f000 f9a7 	bl	800229e <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 8001f50:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4610      	mov	r0, r2
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	f007 fd9b 	bl	8009a98 <memset>
      return __p;
 8001f62:	693c      	ldr	r4, [r7, #16]
    }
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 f97d 	bl	8002268 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 8001f6e:	4623      	mov	r3, r4
    }
 8001f70:	4618      	mov	r0, r3
 8001f72:	371c      	adds	r7, #28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd90      	pop	{r4, r7, pc}

08001f78 <_ZSt4moveIRSt4pairIKh11GPIOPortPinEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <_ZNSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEC1Ev>:
    struct _Hash_node
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff f8a3 	bl	80010fa <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE16_M_allocate_nodeIJRKS5_EEEPS6_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8001fbe:	b5b0      	push	{r4, r5, r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f934 	bl	8002236 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f96e 	bl	80022b4 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE8allocateERS7_j>
 8001fd8:	60f8      	str	r0, [r7, #12]
	__node_ptr __n = std::__to_address(__nptr);
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f979 	bl	80022d2 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_S8_>
 8001fe0:	60b8      	str	r0, [r7, #8]
	    ::new ((void*)__n) __node_type;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	2010      	movs	r0, #16
 8001fe8:	f7ff f86e 	bl	80010c8 <_ZnwjPv>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ffd8 	bl	8001fa4 <_ZNSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f91e 	bl	8002236 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	3304      	adds	r3, #4
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff73 	bl	8001eec <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>
 8002006:	4605      	mov	r5, r0
 8002008:	6838      	ldr	r0, [r7, #0]
 800200a:	f7ff ffc0 	bl	8001f8e <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 800200e:	4603      	mov	r3, r0
 8002010:	461a      	mov	r2, r3
 8002012:	4629      	mov	r1, r5
 8002014:	4620      	mov	r0, r4
 8002016:	f000 f967 	bl	80022e8 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>
	    return __n;
 800201a:	68bb      	ldr	r3, [r7, #8]
      }
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bdb0      	pop	{r4, r5, r7, pc}

08002024 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEv>:
      _M_update_bbegin()
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	if (_M_begin())
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fe77 	bl	8001d20 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d010      	beq.n	8002064 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEv+0x40>
	  _M_buckets[_M_bucket_index(*_M_begin())] = &_M_before_begin;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681c      	ldr	r4, [r3, #0]
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fe6a 	bl	8001d20 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 800204c:	4603      	mov	r3, r0
 800204e:	3304      	adds	r3, #4
 8002050:	4619      	mov	r1, r3
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff feb7 	bl	8001dc6 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>
 8002058:	4603      	mov	r3, r0
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4423      	add	r3, r4
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	3208      	adds	r2, #8
 8002062:	601a      	str	r2, [r3, #0]
      }
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bd90      	pop	{r4, r7, pc}

0800206c <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb0EEEj>:
      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f96a 	bl	8002354 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>
 8002080:	4602      	mov	r2, r0
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f000 f96f 	bl	800236c <_ZNKSt8__detail10_Select1stclIRKSt4pairIKh11GPIOPortPinEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>
 800208e:	4603      	mov	r3, r0
 8002090:	4619      	mov	r1, r3
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f94a 	bl	800232c <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 8002098:	4601      	mov	r1, r0
 800209a:	f107 0310 	add.w	r3, r7, #16
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff f838 	bl	8001116 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 80020a6:	4603      	mov	r3, r0
      }
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE18_M_deallocate_nodeEPS6_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8bb 	bl	8002236 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 80020c0:	4604      	mov	r4, r0
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	3304      	adds	r3, #4
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff10 	bl	8001eec <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4619      	mov	r1, r3
 80020d0:	4620      	mov	r0, r4
 80020d2:	f000 f95c 	bl	800238e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE7destroyIS5_EEvRS7_PT_>
      _M_deallocate_node_ptr(__n);
 80020d6:	6839      	ldr	r1, [r7, #0]
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f965 	bl	80023a8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE22_M_deallocate_node_ptrEPS6_>
    }
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd90      	pop	{r4, r7, pc}

080020e6 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS5_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3318      	adds	r3, #24
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	bf0c      	ite	eq
 80020fa:	2301      	moveq	r3, #1
 80020fc:	2300      	movne	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf14      	ite	ne
 8002104:	2301      	movne	r3, #1
 8002106:	2300      	moveq	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
    _M_deallocate_buckets(__buckets_ptr __bkts,
			  std::size_t __bkt_count)
    {
      typedef typename __buckets_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 8002122:	68b8      	ldr	r0, [r7, #8]
 8002124:	f000 f956 	bl	80023d4 <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 8002128:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f883 	bl	8002236 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 8002130:	4602      	mov	r2, r0
 8002132:	f107 0310 	add.w	r3, r7, #16
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f000 f888 	bl	800224e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 800213e:	f107 0310 	add.w	r3, r7, #16
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6979      	ldr	r1, [r7, #20]
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f950 	bl	80023ec <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 800214c:	f107 0310 	add.w	r3, r7, #16
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f889 	bl	8002268 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE4sizeEv>:
      size() const noexcept { return _M_len; }
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSA_RKS8_RKS4_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
    : _Hashtable(__h, __eq, __a)
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f93e 	bl	800240a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSA_RKS8_RKS4_>
      auto __bkt_count = _M_rehash_policy._M_next_bkt(__bkt_count_hint);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	3310      	adds	r3, #16
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	4618      	mov	r0, r3
 8002196:	f006 fd13 	bl	8008bc0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 800219a:	6178      	str	r0, [r7, #20]
      if (__bkt_count > _M_bucket_count)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d909      	bls.n	80021ba <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSA_RKS8_RKS4_+0x46>
	  _M_buckets = _M_allocate_buckets(__bkt_count);
 80021a6:	6979      	ldr	r1, [r7, #20]
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f7ff fd9c 	bl	8001ce6 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 80021ae:	4602      	mov	r2, r0
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	601a      	str	r2, [r3, #0]
	  _M_bucket_count = __bkt_count;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	605a      	str	r2, [r3, #4]
    }
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <_ZNSt8__detail12_Insert_baseIhSt4pairIKh11GPIOPortPinESaIS4_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKS4_>:
      insert(const value_type& __v)
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
	__hashtable& __h = _M_conjure_hashtable();
 80021d0:	68b8      	ldr	r0, [r7, #8]
 80021d2:	f000 f95a 	bl	800248a <_ZNSt8__detail12_Insert_baseIhSt4pairIKh11GPIOPortPinESaIS4_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>
 80021d6:	6178      	str	r0, [r7, #20]
	__node_gen_type __node_gen(__h);
 80021d8:	f107 0310 	add.w	r3, r7, #16
 80021dc:	6979      	ldr	r1, [r7, #20]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fbfe 	bl	80019e0 <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1ERNS_16_Hashtable_allocIS7_EE>
	return __h._M_insert(__v, __node_gen, __unique_keys{});
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f107 0310 	add.w	r3, r7, #16
 80021ea:	f88d 4000 	strb.w	r4, [sp]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6979      	ldr	r1, [r7, #20]
 80021f2:	f000 f955 	bl	80024a0 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS3_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEES0_INS5_14_Node_iteratorIS3_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>
 80021f6:	bf00      	nop
      }
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	371c      	adds	r7, #28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd90      	pop	{r4, r7, pc}

08002200 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f99d 	bl	8002566 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE7_M_addrEv>
 800222c:	4603      	mov	r3, r0
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f99c 	bl	800257c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EE6_M_getEv>
 8002244:	4603      	mov	r3, r0
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	6039      	str	r1, [r7, #0]
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f99a 	bl	8002592 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f999 	bl	80025a8 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800228a:	2200      	movs	r2, #0
 800228c:	6839      	ldr	r1, [r7, #0]
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f9a1 	bl	80025d6 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 8002294:	4603      	mov	r3, r0
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 80022a6:	687b      	ldr	r3, [r7, #4]
    }
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80022be:	2200      	movs	r2, #0
 80022c0:	6839      	ldr	r1, [r7, #0]
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f9bc 	bl	8002640 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE8allocateEjPKv>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_S8_>:
    __to_address(_Tp* __ptr) noexcept
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
      return __ptr;
 80022da:	687b      	ldr	r3, [r7, #4]
    }
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff fe4a 	bl	8001f8e <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 80022fa:	4603      	mov	r3, r0
 80022fc:	461a      	mov	r2, r3
 80022fe:	68b9      	ldr	r1, [r7, #8]
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f9c6 	bl	8002692 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>
	}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f9cf 	bl	80026c2 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE10deallocateEPS7_j>
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>:
      _M_hash_code(const _Key& __k) const
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
	return _M_hash()(__k);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f9d3 	bl	80026e2 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 800233c:	4602      	mov	r2, r0
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	4619      	mov	r1, r3
 8002344:	4610      	mov	r0, r2
 8002346:	f7fe fecb 	bl	80010e0 <_ZNKSt4hashIhEclEh>
 800234a:	4603      	mov	r3, r0
      }
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>:
      _M_v() const noexcept
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f9cc 	bl	80026fa <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>
 8002362:	4603      	mov	r3, r0
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_ZNKSt8__detail10_Select1stclIRKSt4pairIKh11GPIOPortPinEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>:
      operator()(_Tp&& __x) const noexcept
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 8002376:	6838      	ldr	r0, [r7, #0]
 8002378:	f7ff fe09 	bl	8001f8e <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 800237c:	4603      	mov	r3, r0
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f9c8 	bl	8002714 <_ZSt3getILj0EKh11GPIOPortPinERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS6_>
 8002384:	4603      	mov	r3, r0
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8002398:	6839      	ldr	r1, [r7, #0]
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f9c6 	bl	800272c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE7destroyIS6_EEvPT_>
	}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE22_M_deallocate_node_ptrEPS6_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 80023b2:	6838      	ldr	r0, [r7, #0]
 80023b4:	f000 f9c5 	bl	8002742 <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE10pointer_toERS6_>
 80023b8:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ff3b 	bl	8002236 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2201      	movs	r2, #1
 80023c4:	68f9      	ldr	r1, [r7, #12]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ffa1 	bl	800230e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE10deallocateERS7_PS6_j>
    }
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f9bc 	bl	800275a <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	68b9      	ldr	r1, [r7, #8]
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 f9b8 	bl	8002772 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSA_RKS8_RKS4_>:
      _Hashtable(const _Hash& __h, const _Equal& __eq,
 800240a:	b590      	push	{r4, r7, lr}
 800240c:	b087      	sub	sp, #28
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
	__enable_default_ctor(_Enable_default_constructor_tag{})
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	68b9      	ldr	r1, [r7, #8]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f9c5 	bl	80027ac <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKS9_RKS7_>
	__hashtable_alloc(__node_alloc_type(__a)),
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	6839      	ldr	r1, [r7, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f9b2 	bl	8002792 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1IS4_EERKSaIT_E>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 800242e:	f107 0314 	add.w	r3, r7, #20
 8002432:	4619      	mov	r1, r3
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f7ff fac1 	bl	80019bc <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1IS7_EEOT_>
	__hashtable_alloc(__node_alloc_type(__a)),
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fab0 	bl	80019a4 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 8002444:	4621      	mov	r1, r4
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f9c3 	bl	80027d2 <_ZNSt27_Enable_default_constructorILb1ENSt8__detail15_Hash_node_baseEEC1ESt31_Enable_default_constructor_tag>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f103 0218 	add.w	r2, r3, #24
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3308      	adds	r3, #8
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe fe4a 	bl	80010fa <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	60da      	str	r2, [r3, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3310      	adds	r3, #16
 8002470:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe fe62 	bl	800113e <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
      { }
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4618      	mov	r0, r3
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	bd90      	pop	{r4, r7, pc}

0800248a <_ZNSt8__detail12_Insert_baseIhSt4pairIKh11GPIOPortPinESaIS4_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>:
      _M_conjure_hashtable()
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
      { return *(static_cast<__hashtable*>(this)); }
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS3_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEES0_INS5_14_Node_iteratorIS3_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b090      	sub	sp, #64	; 0x40
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
	const key_type& __k = _ExtractKey{}(__v);
 80024ae:	f107 031c 	add.w	r3, r7, #28
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff59 	bl	800236c <_ZNKSt8__detail10_Select1stclIRKSt4pairIKh11GPIOPortPinEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>
 80024ba:	6378      	str	r0, [r7, #52]	; 0x34
	__hash_code __code = this->_M_hash_code(__k);
 80024bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024be:	68b8      	ldr	r0, [r7, #8]
 80024c0:	f7ff ff34 	bl	800232c <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 80024c4:	6338      	str	r0, [r7, #48]	; 0x30
	size_type __bkt = _M_bucket_index(__code);
 80024c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024c8:	68b8      	ldr	r0, [r7, #8]
 80024ca:	f000 f98e 	bl	80027ea <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 80024ce:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (__node_ptr __node = _M_find_node(__bkt, __k, __code))
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024d6:	68b8      	ldr	r0, [r7, #8]
 80024d8:	f000 f998 	bl	800280c <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>
 80024dc:	62b8      	str	r0, [r7, #40]	; 0x28
 80024de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d011      	beq.n	8002508 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS3_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEES0_INS5_14_Node_iteratorIS3_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE+0x68>
	  return { iterator(__node), false };
 80024e4:	f107 0320 	add.w	r3, r7, #32
 80024e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fcef 	bl	8001ece <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80024f6:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80024fa:	f107 0320 	add.w	r3, r7, #32
 80024fe:	4619      	mov	r1, r3
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f99c 	bl	800283e <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKh11GPIOPortPinELb0ELb0EEEbEC1IS5_bLb1EEEOT_OT0_>
      }
 8002506:	e02a      	b.n	800255e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS3_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEES0_INS5_14_Node_iteratorIS3_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE+0xbe>
	_Scoped_node __node{ __node_gen(std::forward<_Arg>(__v)), this };
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff fd40 	bl	8001f8e <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 800250e:	4603      	mov	r3, r0
 8002510:	4619      	mov	r1, r3
 8002512:	6838      	ldr	r0, [r7, #0]
 8002514:	f7ff fc1c 	bl	8001d50 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEclIRKS5_EEPS6_OT_>
 8002518:	4601      	mov	r1, r0
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	4618      	mov	r0, r3
 8002522:	f000 f9a5 	bl	8002870 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNS5_10_Hash_nodeIS3_Lb0EEEPNS5_16_Hashtable_allocISaISJ_EEE>
	  = _M_insert_unique_node(__bkt, __code, __node._M_node);
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2201      	movs	r2, #1
 800252a:	9200      	str	r2, [sp, #0]
 800252c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800252e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002530:	68b8      	ldr	r0, [r7, #8]
 8002532:	f000 f9c5 	bl	80028c0 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS5_10_Hash_nodeIS3_Lb0EEEj>
 8002536:	4603      	mov	r3, r0
 8002538:	613b      	str	r3, [r7, #16]
	__node._M_node = nullptr;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
	return { __pos, true };
 800253e:	2301      	movs	r3, #1
 8002540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002544:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8002548:	f107 0310 	add.w	r3, r7, #16
 800254c:	4619      	mov	r1, r3
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f9ff 	bl	8002952 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKh11GPIOPortPinELb0ELb0EEEbEC1IRS5_bLb1EEEOT_OT0_>
      }
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4618      	mov	r0, r3
 800255a:	f000 f99c 	bl	8002896 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	3738      	adds	r7, #56	; 0x38
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE7_M_addrEv>:
      _M_addr() noexcept
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800256e:	687b      	ldr	r3, [r7, #4]
      }
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80025c6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f7ff ffeb 	bl	80025be <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	4293      	cmp	r3, r2
 80025ee:	bf8c      	ite	hi
 80025f0:	2301      	movhi	r3, #1
 80025f2:	2300      	movls	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	bf14      	ite	ne
 80025fa:	2301      	movne	r3, #1
 80025fc:	2300      	moveq	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d007      	beq.n	8002614 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260a:	d301      	bcc.n	8002610 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800260c:	f006 fad4 	bl	8008bb8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002610:	f006 facf 	bl	8008bb2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4618      	mov	r0, r3
 800261a:	f006 fab9 	bl	8008b90 <_Znwj>
 800261e:	4603      	mov	r3, r0
      }
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002630:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f7ff ffeb 	bl	8002628 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE11_M_max_sizeEv>
 8002652:	4602      	mov	r2, r0
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4293      	cmp	r3, r2
 8002658:	bf8c      	ite	hi
 800265a:	2301      	movhi	r3, #1
 800265c:	2300      	movls	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf14      	ite	ne
 8002664:	2301      	movne	r3, #1
 8002666:	2300      	moveq	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002674:	d301      	bcc.n	800267a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8002676:	f006 fa9f 	bl	8008bb8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800267a:	f006 fa9a 	bl	8008bb2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	4618      	mov	r0, r3
 8002684:	f006 fa84 	bl	8008b90 <_Znwj>
 8002688:	4603      	mov	r3, r0
      }
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002692:	b590      	push	{r4, r7, lr}
 8002694:	b085      	sub	sp, #20
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fc75 	bl	8001f8e <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 80026a4:	4604      	mov	r4, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	4619      	mov	r1, r3
 80026aa:	200c      	movs	r0, #12
 80026ac:	f7fe fd0c 	bl	80010c8 <_ZnwjPv>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4622      	mov	r2, r4
 80026b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80026b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd90      	pop	{r4, r7, pc}

080026c2 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	68b8      	ldr	r0, [r7, #8]
 80026d6:	f006 fa59 	bl	8008b8c <_ZdlPvj>
      }
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>:
      _M_hash() const { return __ebo_hash::_M_cget(); }
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f94a 	bl	8002984 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EE7_M_cgetEv>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>:
      _M_valptr() const noexcept
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f948 	bl	800299a <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE6_M_ptrEv>
 800270a:	4603      	mov	r3, r0
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <_ZSt3getILj0EKh11GPIOPortPinERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS6_>:
    get(pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(const pair<_Tp1, _Tp2>& __in) noexcept
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__const_get(__in); }
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f948 	bl	80029b2 <_ZNSt10__pair_getILj0EE11__const_getIKh11GPIOPortPinEERKT_RKSt4pairIS4_T0_E>
 8002722:	4603      	mov	r3, r0
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE7destroyIS6_EEvPT_>:
	destroy(_Up* __p)
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE10pointer_toERS6_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f93c 	bl	80029c8 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_RS7_>
 8002750:	4603      	mov	r3, r0
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f93c 	bl	80029e0 <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8002768:	4603      	mov	r3, r0
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4619      	mov	r1, r3
 8002784:	68b8      	ldr	r0, [r7, #8]
 8002786:	f006 fa01 	bl	8008b8c <_ZdlPvj>
      }
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1IS4_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	6039      	str	r1, [r7, #0]
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f92a 	bl	80029f6 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1Ev>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKS9_RKS7_>:
      _Hashtable_base(const _Hash& __hash, const _Equal& __eq)
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
      : __hash_code_base(__hash), _EqualEBO(__eq)
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f926 	bl	8002a0c <_ZNSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKS7_>
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f930 	bl	8002a28 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EEC1IRKS2_EEOT_>
      { }
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <_ZNSt27_Enable_default_constructorILb1ENSt8__detail15_Hash_node_baseEEC1ESt31_Enable_default_constructor_tag>:
    _Enable_default_constructor&
    operator=(_Enable_default_constructor&&) noexcept = default;

    // Can be used in other ctors.
    constexpr explicit
    _Enable_default_constructor(_Enable_default_constructor_tag) { }
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	7039      	strb	r1, [r7, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>:
      _M_bucket_index(__hash_code __c) const
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	461a      	mov	r2, r3
 80027fa:	6839      	ldr	r1, [r7, #0]
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f920 	bl	8002a42 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>
 8002802:	4603      	mov	r3, r0
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f920 	bl	8002a66 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j>
 8002826:	6178      	str	r0, [r7, #20]
	if (__before_n)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j+0x28>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	e000      	b.n	8002836 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j+0x2a>
	return nullptr;
 8002834:	2300      	movs	r3, #0
      }
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKh11GPIOPortPinELb0ELb0EEEbEC1IS5_bLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800284a:	68b8      	ldr	r0, [r7, #8]
 800284c:	f000 f950 	bl	8002af0 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6812      	ldr	r2, [r2, #0]
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff f87e 	bl	800195a <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800285e:	4603      	mov	r3, r0
 8002860:	781a      	ldrb	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	711a      	strb	r2, [r3, #4]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNS5_10_Hash_nodeIS3_Lb0EEEPNS5_16_Hashtable_allocISaISJ_EEE>:
	_Scoped_node(__node_ptr __n, __hashtable_alloc* __h)
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
	: _M_h(__h), _M_node(__n) { }
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4619      	mov	r1, r3
 80028b0:	4610      	mov	r0, r2
 80028b2:	f7ff fbfd 	bl	80020b0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE18_M_deallocate_nodeEPS6_>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS5_10_Hash_nodeIS3_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b08d      	sub	sp, #52	; 0x34
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3310      	adds	r3, #16
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fc46 	bl	8001164 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 80028d8:	4603      	mov	r3, r0
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	f107 031c 	add.w	r3, r7, #28
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f103 0110 	add.w	r1, r3, #16
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	68dc      	ldr	r4, [r3, #12]
 80028f0:	f107 0014 	add.w	r0, r7, #20
 80028f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	4623      	mov	r3, r4
 80028fa:	f006 f9a5 	bl	8008c48 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 80028fe:	7d3b      	ldrb	r3, [r7, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS5_10_Hash_nodeIS3_Lb0EEEj+0x5a>
	  _M_rehash(__do_rehash.second, __saved_state);
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002908:	4619      	mov	r1, r3
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f8fb 	bl	8002b06 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__code);
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f7ff ff69 	bl	80027ea <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8002918:	60b8      	str	r0, [r7, #8]
      this->_M_store_code(*__node, __code);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	3304      	adds	r3, #4
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4619      	mov	r1, r3
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f8fe 	bl	8002b24 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f905 	bl	8002b3c <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE>
      ++_M_element_count;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 800293c:	f107 0320 	add.w	r3, r7, #32
 8002940:	6839      	ldr	r1, [r7, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fac3 	bl	8001ece <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 8002948:	6a3b      	ldr	r3, [r7, #32]
    }
 800294a:	4618      	mov	r0, r3
 800294c:	372c      	adds	r7, #44	; 0x2c
 800294e:	46bd      	mov	sp, r7
 8002950:	bd90      	pop	{r4, r7, pc}

08002952 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKh11GPIOPortPinELb0ELb0EEEbEC1IRS5_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800295e:	68b8      	ldr	r0, [r7, #8]
 8002960:	f000 f933 	bl	8002bca <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002964:	4602      	mov	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7fe fff4 	bl	800195a <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8002972:	4603      	mov	r3, r0
 8002974:	781a      	ldrb	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	711a      	strb	r2, [r3, #4]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f91c 	bl	8002be0 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE7_M_addrEv>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <_ZNSt10__pair_getILj0EE11__const_getIKh11GPIOPortPinEERKT_RKSt4pairIS4_T0_E>:
	__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
	{ return __pair.first; }
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_RS7_>:
    addressof(_Tp& __r) noexcept
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f910 	bl	8002bf6 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_RS7_>
 80029d6:	4603      	mov	r3, r0
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <_ZNSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKS7_>:
      _Hash_code_base(const _Hash& __hash) : __ebo_hash(__hash) { }
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	6839      	ldr	r1, [r7, #0]
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f8f7 	bl	8002c0c <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EEC1IRKS2_EEOT_>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EEC1IRKS2_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 8002a32:	6838      	ldr	r0, [r7, #0]
 8002a34:	f000 f8f7 	bl	8002c26 <_ZSt7forwardIRKSt8equal_toIhEEOT_RNSt16remove_referenceIS4_E4typeE>
	{ }
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>:
      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__c, __bkt_count); }
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe fb5d 	bl	8001116 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	603b      	str	r3, [r7, #0]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x26>
	return nullptr;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e02d      	b.n	8002ae8 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x82>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	3304      	adds	r3, #4
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f8ce 	bl	8002c3c <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS4_Lb0EEE>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x44>
	    return __prev_p;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	e01e      	b.n	8002ae8 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x82>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00c      	beq.n	8002acc <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x66>
 8002ab2:	6938      	ldr	r0, [r7, #16]
 8002ab4:	f7ff f97b 	bl	8001dae <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	3304      	adds	r3, #4
 8002abc:	4619      	mov	r1, r3
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f7ff f981 	bl	8001dc6 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d001      	beq.n	8002ad0 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x6a>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x6c>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x7e>
	  __prev_p = __p;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 8002ada:	6938      	ldr	r0, [r7, #16]
 8002adc:	f7ff f967 	bl	8001dae <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8002ae0:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 8002ae2:	e7d6      	b.n	8002a92 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x2c>
	    break;
 8002ae4:	bf00      	nop
      return nullptr;
 8002ae6:	2300      	movs	r3, #0
    }
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys{});
 8002b12:	461a      	mov	r2, r3
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f8bd 	bl	8002c96 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>:
      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
      { }
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002b3c:	b590      	push	{r4, r7, lr}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d011      	beq.n	8002b7c <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	601a      	str	r2, [r3, #0]
    }
 8002b7a:	e022      	b.n	8002bc2 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE+0x86>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00f      	beq.n	8002bb2 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE+0x76>
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681c      	ldr	r4, [r3, #0]
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff f909 	bl	8001dae <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f7ff f90f 	bl	8001dc6 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4423      	add	r3, r4
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	3208      	adds	r2, #8
 8002bc0:	601a      	str	r2, [r3, #0]
    }
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd90      	pop	{r4, r7, pc}

08002bca <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE7_M_addrEv>:
      _M_addr() const noexcept
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 8002be8:	687b      	ldr	r3, [r7, #4]
      }
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EEC1IRKS2_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 8002c16:	6838      	ldr	r0, [r7, #0]
 8002c18:	f000 f8a1 	bl	8002d5e <_ZSt7forwardIRKSt4hashIhEEOT_RNSt16remove_referenceIS4_E4typeE>
	{ }
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <_ZSt7forwardIRKSt8equal_toIhEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS4_Lb0EEE>:
      _M_equals(const _Key& __k, __hash_code __c,
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 8002c4a:	6839      	ldr	r1, [r7, #0]
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f891 	bl	8002d74 <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d019      	beq.n	8002c8c <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS4_Lb0EEE+0x50>
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f897 	bl	8002d8c <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 8002c5e:	4604      	mov	r4, r0
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fb76 	bl	8002354 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fb7b 	bl	800236c <_ZNKSt8__detail10_Select1stclIRKSt4pairIKh11GPIOPortPinEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>
 8002c76:	4603      	mov	r3, r0
 8002c78:	461a      	mov	r2, r3
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	f000 f891 	bl	8002da4 <_ZNKSt8equal_toIhEclERKhS2_>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS4_Lb0EEE+0x50>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e000      	b.n	8002c8e <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS4_Lb0EEE+0x52>
 8002c8c:	2300      	movs	r3, #0
      }
 8002c8e:	4618      	mov	r0, r3
 8002c90:	371c      	adds	r7, #28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd90      	pop	{r4, r7, pc}

08002c96 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b08a      	sub	sp, #40	; 0x28
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	713a      	strb	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7ff f81e 	bl	8001ce6 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 8002caa:	61f8      	str	r0, [r7, #28]
      __node_ptr __p = _M_begin();
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f7ff f837 	bl	8001d20 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8002cb2:	6278      	str	r0, [r7, #36]	; 0x24
      _M_before_begin._M_nxt = nullptr;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	623b      	str	r3, [r7, #32]
      while (__p)
 8002cbe:	e03e      	b.n	8002d3e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa8>
	{
	  __node_ptr __next = __p->_M_next();
 8002cc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cc2:	f7ff f874 	bl	8001dae <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8002cc6:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	3304      	adds	r3, #4
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7ff f9cb 	bl	800206c <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb0EEEj>
 8002cd6:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	4413      	add	r3, r2
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d11a      	bne.n	8002d1c <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf2:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	3208      	adds	r2, #8
 8002d00:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d14:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	623b      	str	r3, [r7, #32]
 8002d1a:	e00e      	b.n	8002d3a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	69fa      	ldr	r2, [r7, #28]
 8002d22:	4413      	add	r3, r2
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	4413      	add	r3, r2
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d38:	601a      	str	r2, [r3, #0]
	    }

	  __p = __next;
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
      while (__p)
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1bd      	bne.n	8002cc0 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x2a>
	}

      _M_deallocate_buckets();
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7fe fef8 	bl	8001b3a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	601a      	str	r2, [r3, #0]
    }
 8002d56:	bf00      	nop
 8002d58:	3728      	adds	r7, #40	; 0x28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <_ZSt7forwardIRKSt4hashIhEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>:
      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
      { return true; }
 8002d7e:	2301      	movs	r3, #1
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
      _M_eq() const { return _EqualEBO::_M_cget(); }
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f81a 	bl	8002dce <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EE7_M_cgetEv>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_ZNKSt8equal_toIhEclERKhS2_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <_ZN8SelectorD1Ev>:
class Selector {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe f9d4 	bl	800119c <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEED1Ev>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002e00:	b5b0      	push	{r4, r5, r7, lr}
 8002e02:	b09c      	sub	sp, #112	; 0x70
 8002e04:	af04      	add	r7, sp, #16
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d13e      	bne.n	8002e8e <_Z41__static_initialization_and_destruction_0ii+0x8e>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d139      	bne.n	8002e8e <_Z41__static_initialization_and_destruction_0ii+0x8e>
std::unordered_map<uint8_t, GPIOPortPin> panels = {
 8002e1a:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002e1c:	f107 0414 	add.w	r4, r7, #20
 8002e20:	461d      	mov	r5, r3
 8002e22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e2a:	682b      	ldr	r3, [r5, #0]
 8002e2c:	6023      	str	r3, [r4, #0]
 8002e2e:	f107 0314 	add.w	r3, r7, #20
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	2303      	movs	r3, #3
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe fd11 	bl	8001864 <_ZNSaISt4pairIKh11GPIOPortPinEEC1Ev>
 8002e42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e46:	9302      	str	r3, [sp, #8]
 8002e48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2300      	movs	r3, #0
 8002e56:	f107 020c 	add.w	r2, r7, #12
 8002e5a:	ca06      	ldmia	r2, {r1, r2}
 8002e5c:	4816      	ldr	r0, [pc, #88]	; (8002eb8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002e5e:	f7fe fd19 	bl	8001894 <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEEC1ESt16initializer_listIS7_EjRKS2_RKS4_RKS8_>
 8002e62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fd08 	bl	800187c <_ZNSaISt4pairIKh11GPIOPortPinEED1Ev>
Selector selector(panels);
 8002e6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e70:	4911      	ldr	r1, [pc, #68]	; (8002eb8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe f982 	bl	800117c <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEEC1ERKS9_>
 8002e78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	480f      	ldr	r0, [pc, #60]	; (8002ebc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002e80:	f7fe f999 	bl	80011b6 <_ZN8SelectorC1ESt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS1_EEE>
 8002e84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fe f987 	bl	800119c <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEED1Ev>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <_Z41__static_initialization_and_destruction_0ii+0xaa>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d105      	bne.n	8002eaa <_Z41__static_initialization_and_destruction_0ii+0xaa>
 8002e9e:	4807      	ldr	r0, [pc, #28]	; (8002ebc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002ea0:	f7ff ffa0 	bl	8002de4 <_ZN8SelectorD1Ev>
std::unordered_map<uint8_t, GPIOPortPin> panels = {
 8002ea4:	4804      	ldr	r0, [pc, #16]	; (8002eb8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002ea6:	f7fe f979 	bl	800119c <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEED1Ev>
}
 8002eaa:	bf00      	nop
 8002eac:	3760      	adds	r7, #96	; 0x60
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	0800bb84 	.word	0x0800bb84
 8002eb8:	200003b8 	.word	0x200003b8
 8002ebc:	200003d4 	.word	0x200003d4

08002ec0 <_GLOBAL__sub_I_hadc1>:
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ec8:	2001      	movs	r0, #1
 8002eca:	f7ff ff99 	bl	8002e00 <_Z41__static_initialization_and_destruction_0ii>
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <_GLOBAL__sub_D_hadc1>:
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ed8:	2000      	movs	r0, #0
 8002eda:	f7ff ff91 	bl	8002e00 <_Z41__static_initialization_and_destruction_0ii>
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <_ZN8Selector6selectEh>:
#include "selector.hpp"

using namespace std;

bool Selector::select(uint8_t panel_id) {
 8002ee0:	b590      	push	{r4, r7, lr}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	70fb      	strb	r3, [r7, #3]
	auto it = panel_gpio.find(panel_id);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	1cfa      	adds	r2, r7, #3
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f86a 	bl	8002fcc <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE4findERS6_>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	60bb      	str	r3, [r7, #8]

	if (it == panel_gpio.end()) {
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fcee 	bl	80018e0 <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE3endEv>
 8002f04:	4603      	mov	r3, r0
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	f107 020c 	add.w	r2, r7, #12
 8002f0c:	f107 0308 	add.w	r3, r7, #8
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 f869 	bl	8002fea <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EEES7_>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <_ZN8Selector6selectEh+0x42>
		return false; // panel ID not registered
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e019      	b.n	8002f56 <_ZN8Selector6selectEh+0x76>
	}

	deselect_all();
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f81b 	bl	8002f5e <_ZN8Selector12deselect_allEv>
	HAL_Delay(RELAY_SETTLE_WAIT);
 8002f28:	2064      	movs	r0, #100	; 0x64
 8002f2a:	f000 fbd9 	bl	80036e0 <HAL_Delay>
	HAL_GPIO_WritePin(it->second.port, it->second.pin, GPIO_PIN_SET);
 8002f2e:	f107 0308 	add.w	r3, r7, #8
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 f86d 	bl	8003012 <_ZNKSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEptEv>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	685c      	ldr	r4, [r3, #4]
 8002f3c:	f107 0308 	add.w	r3, r7, #8
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 f866 	bl	8003012 <_ZNKSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEptEv>
 8002f46:	4603      	mov	r3, r0
 8002f48:	891b      	ldrh	r3, [r3, #8]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f001 f8ce 	bl	80040f0 <HAL_GPIO_WritePin>
	return true;
 8002f54:	2301      	movs	r3, #1
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd90      	pop	{r4, r7, pc}

08002f5e <_ZN8Selector12deselect_allEv>:

void Selector::deselect_all() {
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b088      	sub	sp, #32
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
	for (const auto& panel : panel_gpio) {
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	69f8      	ldr	r0, [r7, #28]
 8002f6c:	f7fe fcab 	bl	80018c6 <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE5beginEv>
 8002f70:	4603      	mov	r3, r0
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	69f8      	ldr	r0, [r7, #28]
 8002f76:	f7fe fcb3 	bl	80018e0 <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE3endEv>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	e015      	b.n	8002fac <_ZN8Selector12deselect_allEv+0x4e>
 8002f80:	f107 0310 	add.w	r3, r7, #16
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fe fcd9 	bl	800193c <_ZNKSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEdeEv>
 8002f8a:	61b8      	str	r0, [r7, #24]
		const GPIOPortPin& gpio = panel.second;
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	889b      	ldrh	r3, [r3, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f001 f8a7 	bl	80040f0 <HAL_GPIO_WritePin>
	for (const auto& panel : panel_gpio) {
 8002fa2:	f107 0310 	add.w	r3, r7, #16
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe fcbb 	bl	8001922 <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEppEv>
 8002fac:	f107 020c 	add.w	r2, r7, #12
 8002fb0:	f107 0310 	add.w	r3, r7, #16
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fc9f 	bl	80018fa <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EEES7_>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1de      	bne.n	8002f80 <_ZN8Selector12deselect_allEv+0x22>
	}
}
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
 8002fc6:	3720      	adds	r7, #32
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE4findERS6_>:
       *  the key matches.  If successful the function returns an iterator
       *  pointing to the sought after element.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */
      iterator
      find(const key_type& __x)
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
      { return _M_h.find(__x); }
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6839      	ldr	r1, [r7, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 f828 	bl	8003030 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS1_>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EEES7_>:
      operator==(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <_ZNKSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEptEv>:
      operator->() const noexcept
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_valptr(); }
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	3304      	adds	r3, #4
 8003020:	4618      	mov	r0, r3
 8003022:	f7fe ff63 	bl	8001eec <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>
 8003026:	4603      	mov	r3, r0
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS1_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
      __hash_code __code = this->_M_hash_code(__k);
 800303a:	6839      	ldr	r1, [r7, #0]
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff f975 	bl	800232c <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 8003042:	6178      	str	r0, [r7, #20]
      std::size_t __bkt = _M_bucket_index(__code);
 8003044:	6979      	ldr	r1, [r7, #20]
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff fbcf 	bl	80027ea <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 800304c:	6138      	str	r0, [r7, #16]
      return iterator(_M_find_node(__bkt, __k, __code));
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	6939      	ldr	r1, [r7, #16]
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff fbd9 	bl	800280c <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>
 800305a:	4602      	mov	r2, r0
 800305c:	f107 030c 	add.w	r3, r7, #12
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe ff33 	bl	8001ece <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 8003068:	68fb      	ldr	r3, [r7, #12]
    }
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_MspInit+0x54>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	4a11      	ldr	r2, [pc, #68]	; (80030c8 <HAL_MspInit+0x54>)
 8003084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003088:	6453      	str	r3, [r2, #68]	; 0x44
 800308a:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <HAL_MspInit+0x54>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_MspInit+0x54>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <HAL_MspInit+0x54>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6413      	str	r3, [r2, #64]	; 0x40
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <HAL_MspInit+0x54>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030b2:	2200      	movs	r2, #0
 80030b4:	210f      	movs	r1, #15
 80030b6:	f06f 0001 	mvn.w	r0, #1
 80030ba:	f000 fe54 	bl	8003d66 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800

080030cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	; 0x28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	60da      	str	r2, [r3, #12]
 80030e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a17      	ldr	r2, [pc, #92]	; (8003148 <HAL_ADC_MspInit+0x7c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d127      	bne.n	800313e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	4b16      	ldr	r3, [pc, #88]	; (800314c <HAL_ADC_MspInit+0x80>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	4a15      	ldr	r2, [pc, #84]	; (800314c <HAL_ADC_MspInit+0x80>)
 80030f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fc:	6453      	str	r3, [r2, #68]	; 0x44
 80030fe:	4b13      	ldr	r3, [pc, #76]	; (800314c <HAL_ADC_MspInit+0x80>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	4b0f      	ldr	r3, [pc, #60]	; (800314c <HAL_ADC_MspInit+0x80>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	4a0e      	ldr	r2, [pc, #56]	; (800314c <HAL_ADC_MspInit+0x80>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	6313      	str	r3, [r2, #48]	; 0x30
 800311a:	4b0c      	ldr	r3, [pc, #48]	; (800314c <HAL_ADC_MspInit+0x80>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003126:	231f      	movs	r3, #31
 8003128:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800312a:	2303      	movs	r3, #3
 800312c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003132:	f107 0314 	add.w	r3, r7, #20
 8003136:	4619      	mov	r1, r3
 8003138:	4805      	ldr	r0, [pc, #20]	; (8003150 <HAL_ADC_MspInit+0x84>)
 800313a:	f000 fe3d 	bl	8003db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800313e:	bf00      	nop
 8003140:	3728      	adds	r7, #40	; 0x28
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40012000 	.word	0x40012000
 800314c:	40023800 	.word	0x40023800
 8003150:	40020000 	.word	0x40020000

08003154 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08c      	sub	sp, #48	; 0x30
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315c:	f107 031c 	add.w	r3, r7, #28
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a32      	ldr	r2, [pc, #200]	; (800323c <HAL_I2C_MspInit+0xe8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d12c      	bne.n	80031d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	4b31      	ldr	r3, [pc, #196]	; (8003240 <HAL_I2C_MspInit+0xec>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	4a30      	ldr	r2, [pc, #192]	; (8003240 <HAL_I2C_MspInit+0xec>)
 8003180:	f043 0302 	orr.w	r3, r3, #2
 8003184:	6313      	str	r3, [r2, #48]	; 0x30
 8003186:	4b2e      	ldr	r3, [pc, #184]	; (8003240 <HAL_I2C_MspInit+0xec>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003192:	23c0      	movs	r3, #192	; 0xc0
 8003194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003196:	2312      	movs	r3, #18
 8003198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800319a:	2301      	movs	r3, #1
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319e:	2303      	movs	r3, #3
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031a2:	2304      	movs	r3, #4
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a6:	f107 031c 	add.w	r3, r7, #28
 80031aa:	4619      	mov	r1, r3
 80031ac:	4825      	ldr	r0, [pc, #148]	; (8003244 <HAL_I2C_MspInit+0xf0>)
 80031ae:	f000 fe03 	bl	8003db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	4b22      	ldr	r3, [pc, #136]	; (8003240 <HAL_I2C_MspInit+0xec>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	4a21      	ldr	r2, [pc, #132]	; (8003240 <HAL_I2C_MspInit+0xec>)
 80031bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031c0:	6413      	str	r3, [r2, #64]	; 0x40
 80031c2:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <HAL_I2C_MspInit+0xec>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80031ce:	e031      	b.n	8003234 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <HAL_I2C_MspInit+0xf4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d12c      	bne.n	8003234 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	4b18      	ldr	r3, [pc, #96]	; (8003240 <HAL_I2C_MspInit+0xec>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	4a17      	ldr	r2, [pc, #92]	; (8003240 <HAL_I2C_MspInit+0xec>)
 80031e4:	f043 0302 	orr.w	r3, r3, #2
 80031e8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <HAL_I2C_MspInit+0xec>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031fc:	2312      	movs	r3, #18
 80031fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003200:	2301      	movs	r3, #1
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003204:	2303      	movs	r3, #3
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003208:	2304      	movs	r3, #4
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320c:	f107 031c 	add.w	r3, r7, #28
 8003210:	4619      	mov	r1, r3
 8003212:	480c      	ldr	r0, [pc, #48]	; (8003244 <HAL_I2C_MspInit+0xf0>)
 8003214:	f000 fdd0 	bl	8003db8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HAL_I2C_MspInit+0xec>)
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	4a07      	ldr	r2, [pc, #28]	; (8003240 <HAL_I2C_MspInit+0xec>)
 8003222:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003226:	6413      	str	r3, [r2, #64]	; 0x40
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_I2C_MspInit+0xec>)
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
}
 8003234:	bf00      	nop
 8003236:	3730      	adds	r7, #48	; 0x30
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40005400 	.word	0x40005400
 8003240:	40023800 	.word	0x40023800
 8003244:	40020400 	.word	0x40020400
 8003248:	40005800 	.word	0x40005800

0800324c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08e      	sub	sp, #56	; 0x38
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a4c      	ldr	r2, [pc, #304]	; (800339c <HAL_UART_MspInit+0x150>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d12d      	bne.n	80032ca <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	623b      	str	r3, [r7, #32]
 8003272:	4b4b      	ldr	r3, [pc, #300]	; (80033a0 <HAL_UART_MspInit+0x154>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	4a4a      	ldr	r2, [pc, #296]	; (80033a0 <HAL_UART_MspInit+0x154>)
 8003278:	f043 0310 	orr.w	r3, r3, #16
 800327c:	6453      	str	r3, [r2, #68]	; 0x44
 800327e:	4b48      	ldr	r3, [pc, #288]	; (80033a0 <HAL_UART_MspInit+0x154>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	623b      	str	r3, [r7, #32]
 8003288:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	4b44      	ldr	r3, [pc, #272]	; (80033a0 <HAL_UART_MspInit+0x154>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	4a43      	ldr	r2, [pc, #268]	; (80033a0 <HAL_UART_MspInit+0x154>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6313      	str	r3, [r2, #48]	; 0x30
 800329a:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <HAL_UART_MspInit+0x154>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	61fb      	str	r3, [r7, #28]
 80032a4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ac:	2302      	movs	r3, #2
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b4:	2303      	movs	r3, #3
 80032b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032b8:	2307      	movs	r3, #7
 80032ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c0:	4619      	mov	r1, r3
 80032c2:	4838      	ldr	r0, [pc, #224]	; (80033a4 <HAL_UART_MspInit+0x158>)
 80032c4:	f000 fd78 	bl	8003db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80032c8:	e063      	b.n	8003392 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a36      	ldr	r2, [pc, #216]	; (80033a8 <HAL_UART_MspInit+0x15c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d12c      	bne.n	800332e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <HAL_UART_MspInit+0x154>)
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	4a30      	ldr	r2, [pc, #192]	; (80033a0 <HAL_UART_MspInit+0x154>)
 80032de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e2:	6413      	str	r3, [r2, #64]	; 0x40
 80032e4:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <HAL_UART_MspInit+0x154>)
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <HAL_UART_MspInit+0x154>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	4a29      	ldr	r2, [pc, #164]	; (80033a0 <HAL_UART_MspInit+0x154>)
 80032fa:	f043 0308 	orr.w	r3, r3, #8
 80032fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <HAL_UART_MspInit+0x154>)
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800330c:	2378      	movs	r3, #120	; 0x78
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003310:	2302      	movs	r3, #2
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003318:	2303      	movs	r3, #3
 800331a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800331c:	2307      	movs	r3, #7
 800331e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003324:	4619      	mov	r1, r3
 8003326:	4821      	ldr	r0, [pc, #132]	; (80033ac <HAL_UART_MspInit+0x160>)
 8003328:	f000 fd46 	bl	8003db8 <HAL_GPIO_Init>
}
 800332c:	e031      	b.n	8003392 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1f      	ldr	r2, [pc, #124]	; (80033b0 <HAL_UART_MspInit+0x164>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d12c      	bne.n	8003392 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <HAL_UART_MspInit+0x154>)
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	4a17      	ldr	r2, [pc, #92]	; (80033a0 <HAL_UART_MspInit+0x154>)
 8003342:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003346:	6413      	str	r3, [r2, #64]	; 0x40
 8003348:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <HAL_UART_MspInit+0x154>)
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <HAL_UART_MspInit+0x154>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	4a10      	ldr	r2, [pc, #64]	; (80033a0 <HAL_UART_MspInit+0x154>)
 800335e:	f043 0308 	orr.w	r3, r3, #8
 8003362:	6313      	str	r3, [r2, #48]	; 0x30
 8003364:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <HAL_UART_MspInit+0x154>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003370:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003376:	2302      	movs	r3, #2
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337e:	2303      	movs	r3, #3
 8003380:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003382:	2307      	movs	r3, #7
 8003384:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800338a:	4619      	mov	r1, r3
 800338c:	4807      	ldr	r0, [pc, #28]	; (80033ac <HAL_UART_MspInit+0x160>)
 800338e:	f000 fd13 	bl	8003db8 <HAL_GPIO_Init>
}
 8003392:	bf00      	nop
 8003394:	3738      	adds	r7, #56	; 0x38
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40011000 	.word	0x40011000
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40020000 	.word	0x40020000
 80033a8:	40004400 	.word	0x40004400
 80033ac:	40020c00 	.word	0x40020c00
 80033b0:	40004800 	.word	0x40004800

080033b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033b8:	e7fe      	b.n	80033b8 <NMI_Handler+0x4>

080033ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ba:	b480      	push	{r7}
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033be:	e7fe      	b.n	80033be <HardFault_Handler+0x4>

080033c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033c4:	e7fe      	b.n	80033c4 <MemManage_Handler+0x4>

080033c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ca:	e7fe      	b.n	80033ca <BusFault_Handler+0x4>

080033cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033d0:	e7fe      	b.n	80033d0 <UsageFault_Handler+0x4>

080033d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033d2:	b480      	push	{r7}
 80033d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033e4:	f000 f95c 	bl	80036a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80033e8:	f004 fb6a 	bl	8007ac0 <xTaskGetSchedulerState>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d001      	beq.n	80033f6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80033f2:	f005 f951 	bl	8008698 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}

080033fa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033fa:	b480      	push	{r7}
 80033fc:	af00      	add	r7, sp, #0
	return 1;
 80033fe:	2301      	movs	r3, #1
}
 8003400:	4618      	mov	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <_kill>:

int _kill(int pid, int sig)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003414:	f006 fba0 	bl	8009b58 <__errno>
 8003418:	4603      	mov	r3, r0
 800341a:	2216      	movs	r2, #22
 800341c:	601a      	str	r2, [r3, #0]
	return -1;
 800341e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <_exit>:

void _exit (int status)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003432:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff ffe7 	bl	800340a <_kill>
	while (1) {}		/* Make sure we hang here */
 800343c:	e7fe      	b.n	800343c <_exit+0x12>

0800343e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b086      	sub	sp, #24
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	e00a      	b.n	8003466 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003450:	f3af 8000 	nop.w
 8003454:	4601      	mov	r1, r0
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	60ba      	str	r2, [r7, #8]
 800345c:	b2ca      	uxtb	r2, r1
 800345e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3301      	adds	r3, #1
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	dbf0      	blt.n	8003450 <_read+0x12>
	}

return len;
 800346e:	687b      	ldr	r3, [r7, #4]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	e009      	b.n	800349e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	60ba      	str	r2, [r7, #8]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3301      	adds	r3, #1
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	dbf1      	blt.n	800348a <_write+0x12>
	}
	return len;
 80034a6:	687b      	ldr	r3, [r7, #4]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <_close>:

int _close(int file)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	return -1;
 80034b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80034bc:	4618      	mov	r0, r3
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034d8:	605a      	str	r2, [r3, #4]
	return 0;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <_isatty>:

int _isatty(int file)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	return 1;
 80034f0:	2301      	movs	r3, #1
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034fe:	b480      	push	{r7}
 8003500:	b085      	sub	sp, #20
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
	return 0;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003520:	4a14      	ldr	r2, [pc, #80]	; (8003574 <_sbrk+0x5c>)
 8003522:	4b15      	ldr	r3, [pc, #84]	; (8003578 <_sbrk+0x60>)
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800352c:	4b13      	ldr	r3, [pc, #76]	; (800357c <_sbrk+0x64>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d102      	bne.n	800353a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003534:	4b11      	ldr	r3, [pc, #68]	; (800357c <_sbrk+0x64>)
 8003536:	4a12      	ldr	r2, [pc, #72]	; (8003580 <_sbrk+0x68>)
 8003538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800353a:	4b10      	ldr	r3, [pc, #64]	; (800357c <_sbrk+0x64>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	429a      	cmp	r2, r3
 8003546:	d207      	bcs.n	8003558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003548:	f006 fb06 	bl	8009b58 <__errno>
 800354c:	4603      	mov	r3, r0
 800354e:	220c      	movs	r2, #12
 8003550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003556:	e009      	b.n	800356c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003558:	4b08      	ldr	r3, [pc, #32]	; (800357c <_sbrk+0x64>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800355e:	4b07      	ldr	r3, [pc, #28]	; (800357c <_sbrk+0x64>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	4a05      	ldr	r2, [pc, #20]	; (800357c <_sbrk+0x64>)
 8003568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800356a:	68fb      	ldr	r3, [r7, #12]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	20020000 	.word	0x20020000
 8003578:	00000400 	.word	0x00000400
 800357c:	20000460 	.word	0x20000460
 8003580:	20004f08 	.word	0x20004f08

08003584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <SystemInit+0x20>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358e:	4a05      	ldr	r2, [pc, #20]	; (80035a4 <SystemInit+0x20>)
 8003590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80035a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035ac:	480d      	ldr	r0, [pc, #52]	; (80035e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035ae:	490e      	ldr	r1, [pc, #56]	; (80035e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035b0:	4a0e      	ldr	r2, [pc, #56]	; (80035ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035b4:	e002      	b.n	80035bc <LoopCopyDataInit>

080035b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ba:	3304      	adds	r3, #4

080035bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035c0:	d3f9      	bcc.n	80035b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035c2:	4a0b      	ldr	r2, [pc, #44]	; (80035f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035c4:	4c0b      	ldr	r4, [pc, #44]	; (80035f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035c8:	e001      	b.n	80035ce <LoopFillZerobss>

080035ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035cc:	3204      	adds	r2, #4

080035ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035d0:	d3fb      	bcc.n	80035ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035d2:	f7ff ffd7 	bl	8003584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035d6:	f006 fac5 	bl	8009b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035da:	f7fd fdfb 	bl	80011d4 <main>
  bx  lr    
 80035de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035e8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80035ec:	0800c398 	.word	0x0800c398
  ldr r2, =_sbss
 80035f0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80035f4:	20004f08 	.word	0x20004f08

080035f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035f8:	e7fe      	b.n	80035f8 <ADC_IRQHandler>
	...

080035fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003600:	4b0e      	ldr	r3, [pc, #56]	; (800363c <HAL_Init+0x40>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a0d      	ldr	r2, [pc, #52]	; (800363c <HAL_Init+0x40>)
 8003606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800360a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <HAL_Init+0x40>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a0a      	ldr	r2, [pc, #40]	; (800363c <HAL_Init+0x40>)
 8003612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003616:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003618:	4b08      	ldr	r3, [pc, #32]	; (800363c <HAL_Init+0x40>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a07      	ldr	r2, [pc, #28]	; (800363c <HAL_Init+0x40>)
 800361e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003624:	2003      	movs	r0, #3
 8003626:	f000 fb93 	bl	8003d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800362a:	200f      	movs	r0, #15
 800362c:	f000 f808 	bl	8003640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003630:	f7ff fd20 	bl	8003074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40023c00 	.word	0x40023c00

08003640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003648:	4b12      	ldr	r3, [pc, #72]	; (8003694 <HAL_InitTick+0x54>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4b12      	ldr	r3, [pc, #72]	; (8003698 <HAL_InitTick+0x58>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	4619      	mov	r1, r3
 8003652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003656:	fbb3 f3f1 	udiv	r3, r3, r1
 800365a:	fbb2 f3f3 	udiv	r3, r2, r3
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fb9d 	bl	8003d9e <HAL_SYSTICK_Config>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e00e      	b.n	800368c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b0f      	cmp	r3, #15
 8003672:	d80a      	bhi.n	800368a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003674:	2200      	movs	r2, #0
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800367c:	f000 fb73 	bl	8003d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003680:	4a06      	ldr	r2, [pc, #24]	; (800369c <HAL_InitTick+0x5c>)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	e000      	b.n	800368c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
}
 800368c:	4618      	mov	r0, r3
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000004 	.word	0x20000004
 8003698:	2000000c 	.word	0x2000000c
 800369c:	20000008 	.word	0x20000008

080036a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036a4:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_IncTick+0x20>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	461a      	mov	r2, r3
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_IncTick+0x24>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4413      	add	r3, r2
 80036b0:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <HAL_IncTick+0x24>)
 80036b2:	6013      	str	r3, [r2, #0]
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	2000000c 	.word	0x2000000c
 80036c4:	20000464 	.word	0x20000464

080036c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return uwTick;
 80036cc:	4b03      	ldr	r3, [pc, #12]	; (80036dc <HAL_GetTick+0x14>)
 80036ce:	681b      	ldr	r3, [r3, #0]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20000464 	.word	0x20000464

080036e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036e8:	f7ff ffee 	bl	80036c8 <HAL_GetTick>
 80036ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036f8:	d005      	beq.n	8003706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036fa:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <HAL_Delay+0x44>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4413      	add	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003706:	bf00      	nop
 8003708:	f7ff ffde 	bl	80036c8 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	429a      	cmp	r2, r3
 8003716:	d8f7      	bhi.n	8003708 <HAL_Delay+0x28>
  {
  }
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	2000000c 	.word	0x2000000c

08003728 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e033      	b.n	80037a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff fcc0 	bl	80030cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	d118      	bne.n	8003798 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800376e:	f023 0302 	bic.w	r3, r3, #2
 8003772:	f043 0202 	orr.w	r2, r3, #2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f93a 	bl	80039f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f023 0303 	bic.w	r3, r3, #3
 800378e:	f043 0201 	orr.w	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
 8003796:	e001      	b.n	800379c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x1c>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e105      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x228>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b09      	cmp	r3, #9
 80037da:	d925      	bls.n	8003828 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68d9      	ldr	r1, [r3, #12]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	461a      	mov	r2, r3
 80037ea:	4613      	mov	r3, r2
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	4413      	add	r3, r2
 80037f0:	3b1e      	subs	r3, #30
 80037f2:	2207      	movs	r2, #7
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43da      	mvns	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	400a      	ands	r2, r1
 8003800:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68d9      	ldr	r1, [r3, #12]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	4618      	mov	r0, r3
 8003814:	4603      	mov	r3, r0
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4403      	add	r3, r0
 800381a:	3b1e      	subs	r3, #30
 800381c:	409a      	lsls	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	e022      	b.n	800386e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6919      	ldr	r1, [r3, #16]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	b29b      	uxth	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	4613      	mov	r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	4413      	add	r3, r2
 800383c:	2207      	movs	r2, #7
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43da      	mvns	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	400a      	ands	r2, r1
 800384a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6919      	ldr	r1, [r3, #16]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	b29b      	uxth	r3, r3
 800385c:	4618      	mov	r0, r3
 800385e:	4603      	mov	r3, r0
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4403      	add	r3, r0
 8003864:	409a      	lsls	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b06      	cmp	r3, #6
 8003874:	d824      	bhi.n	80038c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	3b05      	subs	r3, #5
 8003888:	221f      	movs	r2, #31
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	400a      	ands	r2, r1
 8003896:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	4618      	mov	r0, r3
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	3b05      	subs	r3, #5
 80038b2:	fa00 f203 	lsl.w	r2, r0, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	635a      	str	r2, [r3, #52]	; 0x34
 80038be:	e04c      	b.n	800395a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b0c      	cmp	r3, #12
 80038c6:	d824      	bhi.n	8003912 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	3b23      	subs	r3, #35	; 0x23
 80038da:	221f      	movs	r2, #31
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43da      	mvns	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	400a      	ands	r2, r1
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	4618      	mov	r0, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	3b23      	subs	r3, #35	; 0x23
 8003904:	fa00 f203 	lsl.w	r2, r0, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	631a      	str	r2, [r3, #48]	; 0x30
 8003910:	e023      	b.n	800395a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	3b41      	subs	r3, #65	; 0x41
 8003924:	221f      	movs	r2, #31
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43da      	mvns	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	400a      	ands	r2, r1
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	4618      	mov	r0, r3
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	3b41      	subs	r3, #65	; 0x41
 800394e:	fa00 f203 	lsl.w	r2, r0, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800395a:	4b22      	ldr	r3, [pc, #136]	; (80039e4 <HAL_ADC_ConfigChannel+0x234>)
 800395c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a21      	ldr	r2, [pc, #132]	; (80039e8 <HAL_ADC_ConfigChannel+0x238>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d109      	bne.n	800397c <HAL_ADC_ConfigChannel+0x1cc>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b12      	cmp	r3, #18
 800396e:	d105      	bne.n	800397c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a19      	ldr	r2, [pc, #100]	; (80039e8 <HAL_ADC_ConfigChannel+0x238>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d123      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x21e>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b10      	cmp	r3, #16
 800398c:	d003      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x1e6>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b11      	cmp	r3, #17
 8003994:	d11b      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b10      	cmp	r3, #16
 80039a8:	d111      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039aa:	4b10      	ldr	r3, [pc, #64]	; (80039ec <HAL_ADC_ConfigChannel+0x23c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a10      	ldr	r2, [pc, #64]	; (80039f0 <HAL_ADC_ConfigChannel+0x240>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	0c9a      	lsrs	r2, r3, #18
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039c0:	e002      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f9      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	40012300 	.word	0x40012300
 80039e8:	40012000 	.word	0x40012000
 80039ec:	20000004 	.word	0x20000004
 80039f0:	431bde83 	.word	0x431bde83

080039f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039fc:	4b79      	ldr	r3, [pc, #484]	; (8003be4 <ADC_Init+0x1f0>)
 80039fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	431a      	orrs	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	021a      	lsls	r2, r3, #8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6859      	ldr	r1, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6899      	ldr	r1, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	4a58      	ldr	r2, [pc, #352]	; (8003be8 <ADC_Init+0x1f4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d022      	beq.n	8003ad2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6899      	ldr	r1, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6899      	ldr	r1, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]
 8003ad0:	e00f      	b.n	8003af2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ae0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003af0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0202 	bic.w	r2, r2, #2
 8003b00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6899      	ldr	r1, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	7e1b      	ldrb	r3, [r3, #24]
 8003b0c:	005a      	lsls	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01b      	beq.n	8003b58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6859      	ldr	r1, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	035a      	lsls	r2, r3, #13
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	e007      	b.n	8003b68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	051a      	lsls	r2, r3, #20
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6899      	ldr	r1, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003baa:	025a      	lsls	r2, r3, #9
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6899      	ldr	r1, [r3, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	029a      	lsls	r2, r3, #10
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	609a      	str	r2, [r3, #8]
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	40012300 	.word	0x40012300
 8003be8:	0f000001 	.word	0x0f000001

08003bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <__NVIC_SetPriorityGrouping+0x44>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c1e:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <__NVIC_SetPriorityGrouping+0x44>)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	60d3      	str	r3, [r2, #12]
}
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	e000ed00 	.word	0xe000ed00

08003c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c38:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <__NVIC_GetPriorityGrouping+0x18>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	f003 0307 	and.w	r3, r3, #7
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	6039      	str	r1, [r7, #0]
 8003c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	db0a      	blt.n	8003c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	490c      	ldr	r1, [pc, #48]	; (8003c9c <__NVIC_SetPriority+0x4c>)
 8003c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6e:	0112      	lsls	r2, r2, #4
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	440b      	add	r3, r1
 8003c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c78:	e00a      	b.n	8003c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	4908      	ldr	r1, [pc, #32]	; (8003ca0 <__NVIC_SetPriority+0x50>)
 8003c80:	79fb      	ldrb	r3, [r7, #7]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	3b04      	subs	r3, #4
 8003c88:	0112      	lsls	r2, r2, #4
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	761a      	strb	r2, [r3, #24]
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	e000e100 	.word	0xe000e100
 8003ca0:	e000ed00 	.word	0xe000ed00

08003ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b089      	sub	sp, #36	; 0x24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f1c3 0307 	rsb	r3, r3, #7
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	bf28      	it	cs
 8003cc2:	2304      	movcs	r3, #4
 8003cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	2b06      	cmp	r3, #6
 8003ccc:	d902      	bls.n	8003cd4 <NVIC_EncodePriority+0x30>
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3b03      	subs	r3, #3
 8003cd2:	e000      	b.n	8003cd6 <NVIC_EncodePriority+0x32>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	401a      	ands	r2, r3
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf6:	43d9      	mvns	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cfc:	4313      	orrs	r3, r2
         );
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3724      	adds	r7, #36	; 0x24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
	...

08003d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d1c:	d301      	bcc.n	8003d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e00f      	b.n	8003d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d22:	4a0a      	ldr	r2, [pc, #40]	; (8003d4c <SysTick_Config+0x40>)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d2a:	210f      	movs	r1, #15
 8003d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d30:	f7ff ff8e 	bl	8003c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <SysTick_Config+0x40>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d3a:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <SysTick_Config+0x40>)
 8003d3c:	2207      	movs	r2, #7
 8003d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	e000e010 	.word	0xe000e010

08003d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff ff47 	bl	8003bec <__NVIC_SetPriorityGrouping>
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b086      	sub	sp, #24
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d78:	f7ff ff5c 	bl	8003c34 <__NVIC_GetPriorityGrouping>
 8003d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	6978      	ldr	r0, [r7, #20]
 8003d84:	f7ff ff8e 	bl	8003ca4 <NVIC_EncodePriority>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff ff5d 	bl	8003c50 <__NVIC_SetPriority>
}
 8003d96:	bf00      	nop
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b082      	sub	sp, #8
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff ffb0 	bl	8003d0c <SysTick_Config>
 8003dac:	4603      	mov	r3, r0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b089      	sub	sp, #36	; 0x24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
 8003dd2:	e16b      	b.n	80040ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4013      	ands	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	f040 815a 	bne.w	80040a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d005      	beq.n	8003e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d130      	bne.n	8003e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	2203      	movs	r2, #3
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e40:	2201      	movs	r2, #1
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	f003 0201 	and.w	r2, r3, #1
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d017      	beq.n	8003ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	2203      	movs	r2, #3
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 0303 	and.w	r3, r3, #3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d123      	bne.n	8003efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	08da      	lsrs	r2, r3, #3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3208      	adds	r2, #8
 8003ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	220f      	movs	r2, #15
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	08da      	lsrs	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3208      	adds	r2, #8
 8003ef6:	69b9      	ldr	r1, [r7, #24]
 8003ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	2203      	movs	r2, #3
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4013      	ands	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 0203 	and.w	r2, r3, #3
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80b4 	beq.w	80040a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	4b60      	ldr	r3, [pc, #384]	; (80040c4 <HAL_GPIO_Init+0x30c>)
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	4a5f      	ldr	r2, [pc, #380]	; (80040c4 <HAL_GPIO_Init+0x30c>)
 8003f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f4e:	4b5d      	ldr	r3, [pc, #372]	; (80040c4 <HAL_GPIO_Init+0x30c>)
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f5a:	4a5b      	ldr	r2, [pc, #364]	; (80040c8 <HAL_GPIO_Init+0x310>)
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	089b      	lsrs	r3, r3, #2
 8003f60:	3302      	adds	r3, #2
 8003f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	220f      	movs	r2, #15
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43db      	mvns	r3, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a52      	ldr	r2, [pc, #328]	; (80040cc <HAL_GPIO_Init+0x314>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d02b      	beq.n	8003fde <HAL_GPIO_Init+0x226>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a51      	ldr	r2, [pc, #324]	; (80040d0 <HAL_GPIO_Init+0x318>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d025      	beq.n	8003fda <HAL_GPIO_Init+0x222>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a50      	ldr	r2, [pc, #320]	; (80040d4 <HAL_GPIO_Init+0x31c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d01f      	beq.n	8003fd6 <HAL_GPIO_Init+0x21e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a4f      	ldr	r2, [pc, #316]	; (80040d8 <HAL_GPIO_Init+0x320>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d019      	beq.n	8003fd2 <HAL_GPIO_Init+0x21a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a4e      	ldr	r2, [pc, #312]	; (80040dc <HAL_GPIO_Init+0x324>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d013      	beq.n	8003fce <HAL_GPIO_Init+0x216>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a4d      	ldr	r2, [pc, #308]	; (80040e0 <HAL_GPIO_Init+0x328>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00d      	beq.n	8003fca <HAL_GPIO_Init+0x212>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a4c      	ldr	r2, [pc, #304]	; (80040e4 <HAL_GPIO_Init+0x32c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d007      	beq.n	8003fc6 <HAL_GPIO_Init+0x20e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a4b      	ldr	r2, [pc, #300]	; (80040e8 <HAL_GPIO_Init+0x330>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d101      	bne.n	8003fc2 <HAL_GPIO_Init+0x20a>
 8003fbe:	2307      	movs	r3, #7
 8003fc0:	e00e      	b.n	8003fe0 <HAL_GPIO_Init+0x228>
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	e00c      	b.n	8003fe0 <HAL_GPIO_Init+0x228>
 8003fc6:	2306      	movs	r3, #6
 8003fc8:	e00a      	b.n	8003fe0 <HAL_GPIO_Init+0x228>
 8003fca:	2305      	movs	r3, #5
 8003fcc:	e008      	b.n	8003fe0 <HAL_GPIO_Init+0x228>
 8003fce:	2304      	movs	r3, #4
 8003fd0:	e006      	b.n	8003fe0 <HAL_GPIO_Init+0x228>
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e004      	b.n	8003fe0 <HAL_GPIO_Init+0x228>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e002      	b.n	8003fe0 <HAL_GPIO_Init+0x228>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <HAL_GPIO_Init+0x228>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	f002 0203 	and.w	r2, r2, #3
 8003fe6:	0092      	lsls	r2, r2, #2
 8003fe8:	4093      	lsls	r3, r2
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ff0:	4935      	ldr	r1, [pc, #212]	; (80040c8 <HAL_GPIO_Init+0x310>)
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	089b      	lsrs	r3, r3, #2
 8003ff6:	3302      	adds	r3, #2
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ffe:	4b3b      	ldr	r3, [pc, #236]	; (80040ec <HAL_GPIO_Init+0x334>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	43db      	mvns	r3, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4013      	ands	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004022:	4a32      	ldr	r2, [pc, #200]	; (80040ec <HAL_GPIO_Init+0x334>)
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004028:	4b30      	ldr	r3, [pc, #192]	; (80040ec <HAL_GPIO_Init+0x334>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	43db      	mvns	r3, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800404c:	4a27      	ldr	r2, [pc, #156]	; (80040ec <HAL_GPIO_Init+0x334>)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004052:	4b26      	ldr	r3, [pc, #152]	; (80040ec <HAL_GPIO_Init+0x334>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004076:	4a1d      	ldr	r2, [pc, #116]	; (80040ec <HAL_GPIO_Init+0x334>)
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800407c:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <HAL_GPIO_Init+0x334>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040a0:	4a12      	ldr	r2, [pc, #72]	; (80040ec <HAL_GPIO_Init+0x334>)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	3301      	adds	r3, #1
 80040aa:	61fb      	str	r3, [r7, #28]
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	2b0f      	cmp	r3, #15
 80040b0:	f67f ae90 	bls.w	8003dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	3724      	adds	r7, #36	; 0x24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40013800 	.word	0x40013800
 80040cc:	40020000 	.word	0x40020000
 80040d0:	40020400 	.word	0x40020400
 80040d4:	40020800 	.word	0x40020800
 80040d8:	40020c00 	.word	0x40020c00
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40021400 	.word	0x40021400
 80040e4:	40021800 	.word	0x40021800
 80040e8:	40021c00 	.word	0x40021c00
 80040ec:	40013c00 	.word	0x40013c00

080040f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	807b      	strh	r3, [r7, #2]
 80040fc:	4613      	mov	r3, r2
 80040fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004100:	787b      	ldrb	r3, [r7, #1]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004106:	887a      	ldrh	r2, [r7, #2]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800410c:	e003      	b.n	8004116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800410e:	887b      	ldrh	r3, [r7, #2]
 8004110:	041a      	lsls	r2, r3, #16
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	619a      	str	r2, [r3, #24]
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e12b      	b.n	800438e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff f802 	bl	8003154 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2224      	movs	r2, #36	; 0x24
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0201 	bic.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004176:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004186:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004188:	f001 fb92 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 800418c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4a81      	ldr	r2, [pc, #516]	; (8004398 <HAL_I2C_Init+0x274>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d807      	bhi.n	80041a8 <HAL_I2C_Init+0x84>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4a80      	ldr	r2, [pc, #512]	; (800439c <HAL_I2C_Init+0x278>)
 800419c:	4293      	cmp	r3, r2
 800419e:	bf94      	ite	ls
 80041a0:	2301      	movls	r3, #1
 80041a2:	2300      	movhi	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	e006      	b.n	80041b6 <HAL_I2C_Init+0x92>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4a7d      	ldr	r2, [pc, #500]	; (80043a0 <HAL_I2C_Init+0x27c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	bf94      	ite	ls
 80041b0:	2301      	movls	r3, #1
 80041b2:	2300      	movhi	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e0e7      	b.n	800438e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4a78      	ldr	r2, [pc, #480]	; (80043a4 <HAL_I2C_Init+0x280>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	0c9b      	lsrs	r3, r3, #18
 80041c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	4a6a      	ldr	r2, [pc, #424]	; (8004398 <HAL_I2C_Init+0x274>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d802      	bhi.n	80041f8 <HAL_I2C_Init+0xd4>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	3301      	adds	r3, #1
 80041f6:	e009      	b.n	800420c <HAL_I2C_Init+0xe8>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041fe:	fb02 f303 	mul.w	r3, r2, r3
 8004202:	4a69      	ldr	r2, [pc, #420]	; (80043a8 <HAL_I2C_Init+0x284>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	099b      	lsrs	r3, r3, #6
 800420a:	3301      	adds	r3, #1
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	430b      	orrs	r3, r1
 8004212:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800421e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	495c      	ldr	r1, [pc, #368]	; (8004398 <HAL_I2C_Init+0x274>)
 8004228:	428b      	cmp	r3, r1
 800422a:	d819      	bhi.n	8004260 <HAL_I2C_Init+0x13c>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1e59      	subs	r1, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	fbb1 f3f3 	udiv	r3, r1, r3
 800423a:	1c59      	adds	r1, r3, #1
 800423c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004240:	400b      	ands	r3, r1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <HAL_I2C_Init+0x138>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1e59      	subs	r1, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	fbb1 f3f3 	udiv	r3, r1, r3
 8004254:	3301      	adds	r3, #1
 8004256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800425a:	e051      	b.n	8004300 <HAL_I2C_Init+0x1dc>
 800425c:	2304      	movs	r3, #4
 800425e:	e04f      	b.n	8004300 <HAL_I2C_Init+0x1dc>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d111      	bne.n	800428c <HAL_I2C_Init+0x168>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	1e58      	subs	r0, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6859      	ldr	r1, [r3, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	440b      	add	r3, r1
 8004276:	fbb0 f3f3 	udiv	r3, r0, r3
 800427a:	3301      	adds	r3, #1
 800427c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004280:	2b00      	cmp	r3, #0
 8004282:	bf0c      	ite	eq
 8004284:	2301      	moveq	r3, #1
 8004286:	2300      	movne	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	e012      	b.n	80042b2 <HAL_I2C_Init+0x18e>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1e58      	subs	r0, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6859      	ldr	r1, [r3, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	0099      	lsls	r1, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	fbb0 f3f3 	udiv	r3, r0, r3
 80042a2:	3301      	adds	r3, #1
 80042a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <HAL_I2C_Init+0x196>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e022      	b.n	8004300 <HAL_I2C_Init+0x1dc>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10e      	bne.n	80042e0 <HAL_I2C_Init+0x1bc>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1e58      	subs	r0, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6859      	ldr	r1, [r3, #4]
 80042ca:	460b      	mov	r3, r1
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	440b      	add	r3, r1
 80042d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80042d4:	3301      	adds	r3, #1
 80042d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042de:	e00f      	b.n	8004300 <HAL_I2C_Init+0x1dc>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	1e58      	subs	r0, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6859      	ldr	r1, [r3, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	0099      	lsls	r1, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042f6:	3301      	adds	r3, #1
 80042f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	6809      	ldr	r1, [r1, #0]
 8004304:	4313      	orrs	r3, r2
 8004306:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69da      	ldr	r2, [r3, #28]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800432e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6911      	ldr	r1, [r2, #16]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68d2      	ldr	r2, [r2, #12]
 800433a:	4311      	orrs	r1, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	430b      	orrs	r3, r1
 8004342:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	000186a0 	.word	0x000186a0
 800439c:	001e847f 	.word	0x001e847f
 80043a0:	003d08ff 	.word	0x003d08ff
 80043a4:	431bde83 	.word	0x431bde83
 80043a8:	10624dd3 	.word	0x10624dd3

080043ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	607a      	str	r2, [r7, #4]
 80043b6:	461a      	mov	r2, r3
 80043b8:	460b      	mov	r3, r1
 80043ba:	817b      	strh	r3, [r7, #10]
 80043bc:	4613      	mov	r3, r2
 80043be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043c0:	f7ff f982 	bl	80036c8 <HAL_GetTick>
 80043c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	f040 80e0 	bne.w	8004594 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	2319      	movs	r3, #25
 80043da:	2201      	movs	r2, #1
 80043dc:	4970      	ldr	r1, [pc, #448]	; (80045a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fc58 	bl	8004c94 <I2C_WaitOnFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80043ea:	2302      	movs	r3, #2
 80043ec:	e0d3      	b.n	8004596 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_I2C_Master_Transmit+0x50>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e0cc      	b.n	8004596 <HAL_I2C_Master_Transmit+0x1ea>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b01      	cmp	r3, #1
 8004410:	d007      	beq.n	8004422 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004430:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2221      	movs	r2, #33	; 0x21
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2210      	movs	r2, #16
 800443e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	893a      	ldrh	r2, [r7, #8]
 8004452:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a50      	ldr	r2, [pc, #320]	; (80045a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004464:	8979      	ldrh	r1, [r7, #10]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	6a3a      	ldr	r2, [r7, #32]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fac2 	bl	80049f4 <I2C_MasterRequestWrite>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e08d      	b.n	8004596 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447a:	2300      	movs	r3, #0
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004490:	e066      	b.n	8004560 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	6a39      	ldr	r1, [r7, #32]
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 fcd2 	bl	8004e40 <I2C_WaitOnTXEFlagUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00d      	beq.n	80044be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d107      	bne.n	80044ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e06b      	b.n	8004596 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	781a      	ldrb	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d11b      	bne.n	8004534 <HAL_I2C_Master_Transmit+0x188>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004500:	2b00      	cmp	r3, #0
 8004502:	d017      	beq.n	8004534 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	781a      	ldrb	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	6a39      	ldr	r1, [r7, #32]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 fcc2 	bl	8004ec2 <I2C_WaitOnBTFFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00d      	beq.n	8004560 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	2b04      	cmp	r3, #4
 800454a:	d107      	bne.n	800455c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e01a      	b.n	8004596 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004564:	2b00      	cmp	r3, #0
 8004566:	d194      	bne.n	8004492 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004576:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	e000      	b.n	8004596 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004594:	2302      	movs	r3, #2
  }
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	00100002 	.word	0x00100002
 80045a4:	ffff0000 	.word	0xffff0000

080045a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08c      	sub	sp, #48	; 0x30
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	461a      	mov	r2, r3
 80045b4:	460b      	mov	r3, r1
 80045b6:	817b      	strh	r3, [r7, #10]
 80045b8:	4613      	mov	r3, r2
 80045ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045bc:	f7ff f884 	bl	80036c8 <HAL_GetTick>
 80045c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	f040 820b 	bne.w	80049e6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	2319      	movs	r3, #25
 80045d6:	2201      	movs	r2, #1
 80045d8:	497c      	ldr	r1, [pc, #496]	; (80047cc <HAL_I2C_Master_Receive+0x224>)
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fb5a 	bl	8004c94 <I2C_WaitOnFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80045e6:	2302      	movs	r3, #2
 80045e8:	e1fe      	b.n	80049e8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_I2C_Master_Receive+0x50>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e1f7      	b.n	80049e8 <HAL_I2C_Master_Receive+0x440>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b01      	cmp	r3, #1
 800460c:	d007      	beq.n	800461e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0201 	orr.w	r2, r2, #1
 800461c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800462c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2222      	movs	r2, #34	; 0x22
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2210      	movs	r2, #16
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	893a      	ldrh	r2, [r7, #8]
 800464e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4a5c      	ldr	r2, [pc, #368]	; (80047d0 <HAL_I2C_Master_Receive+0x228>)
 800465e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004660:	8979      	ldrh	r1, [r7, #10]
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fa46 	bl	8004af8 <I2C_MasterRequestRead>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e1b8      	b.n	80049e8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467a:	2b00      	cmp	r3, #0
 800467c:	d113      	bne.n	80046a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467e:	2300      	movs	r3, #0
 8004680:	623b      	str	r3, [r7, #32]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	623b      	str	r3, [r7, #32]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	623b      	str	r3, [r7, #32]
 8004692:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	e18c      	b.n	80049c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d11b      	bne.n	80046e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	61fb      	str	r3, [r7, #28]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	61fb      	str	r3, [r7, #28]
 80046d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	e16c      	b.n	80049c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d11b      	bne.n	8004726 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800470c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470e:	2300      	movs	r3, #0
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	61bb      	str	r3, [r7, #24]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	e14c      	b.n	80049c0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004734:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800474c:	e138      	b.n	80049c0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004752:	2b03      	cmp	r3, #3
 8004754:	f200 80f1 	bhi.w	800493a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475c:	2b01      	cmp	r3, #1
 800475e:	d123      	bne.n	80047a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 fbed 	bl	8004f44 <I2C_WaitOnRXNEFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e139      	b.n	80049e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047a6:	e10b      	b.n	80049c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d14e      	bne.n	800484e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	2200      	movs	r2, #0
 80047b8:	4906      	ldr	r1, [pc, #24]	; (80047d4 <HAL_I2C_Master_Receive+0x22c>)
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fa6a 	bl	8004c94 <I2C_WaitOnFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e10e      	b.n	80049e8 <HAL_I2C_Master_Receive+0x440>
 80047ca:	bf00      	nop
 80047cc:	00100002 	.word	0x00100002
 80047d0:	ffff0000 	.word	0xffff0000
 80047d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004842:	b29b      	uxth	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800484c:	e0b8      	b.n	80049c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	2200      	movs	r2, #0
 8004856:	4966      	ldr	r1, [pc, #408]	; (80049f0 <HAL_I2C_Master_Receive+0x448>)
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fa1b 	bl	8004c94 <I2C_WaitOnFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0bf      	b.n	80049e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004876:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	2200      	movs	r2, #0
 80048b2:	494f      	ldr	r1, [pc, #316]	; (80049f0 <HAL_I2C_Master_Receive+0x448>)
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f9ed 	bl	8004c94 <I2C_WaitOnFlagUntilTimeout>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e091      	b.n	80049e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691a      	ldr	r2, [r3, #16]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004938:	e042      	b.n	80049c0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800493a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fb00 	bl	8004f44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e04c      	b.n	80049e8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b04      	cmp	r3, #4
 800498c:	d118      	bne.n	80049c0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f47f aec2 	bne.w	800474e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e000      	b.n	80049e8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
  }
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3728      	adds	r7, #40	; 0x28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	00010004 	.word	0x00010004

080049f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	607a      	str	r2, [r7, #4]
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	460b      	mov	r3, r1
 8004a02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d006      	beq.n	8004a1e <I2C_MasterRequestWrite+0x2a>
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d003      	beq.n	8004a1e <I2C_MasterRequestWrite+0x2a>
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a1c:	d108      	bne.n	8004a30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	e00b      	b.n	8004a48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a34:	2b12      	cmp	r3, #18
 8004a36:	d107      	bne.n	8004a48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f91d 	bl	8004c94 <I2C_WaitOnFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00d      	beq.n	8004a7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a6e:	d103      	bne.n	8004a78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e035      	b.n	8004ae8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a84:	d108      	bne.n	8004a98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a86:	897b      	ldrh	r3, [r7, #10]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a94:	611a      	str	r2, [r3, #16]
 8004a96:	e01b      	b.n	8004ad0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a98:	897b      	ldrh	r3, [r7, #10]
 8004a9a:	11db      	asrs	r3, r3, #7
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	f003 0306 	and.w	r3, r3, #6
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	f063 030f 	orn	r3, r3, #15
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	490e      	ldr	r1, [pc, #56]	; (8004af0 <I2C_MasterRequestWrite+0xfc>)
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f943 	bl	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e010      	b.n	8004ae8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ac6:	897b      	ldrh	r3, [r7, #10]
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	4907      	ldr	r1, [pc, #28]	; (8004af4 <I2C_MasterRequestWrite+0x100>)
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f933 	bl	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	00010008 	.word	0x00010008
 8004af4:	00010002 	.word	0x00010002

08004af8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	607a      	str	r2, [r7, #4]
 8004b02:	603b      	str	r3, [r7, #0]
 8004b04:	460b      	mov	r3, r1
 8004b06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b1c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d006      	beq.n	8004b32 <I2C_MasterRequestRead+0x3a>
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d003      	beq.n	8004b32 <I2C_MasterRequestRead+0x3a>
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b30:	d108      	bne.n	8004b44 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	e00b      	b.n	8004b5c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	2b11      	cmp	r3, #17
 8004b4a:	d107      	bne.n	8004b5c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f893 	bl	8004c94 <I2C_WaitOnFlagUntilTimeout>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00d      	beq.n	8004b90 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b82:	d103      	bne.n	8004b8c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e079      	b.n	8004c84 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b98:	d108      	bne.n	8004bac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b9a:	897b      	ldrh	r3, [r7, #10]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	611a      	str	r2, [r3, #16]
 8004baa:	e05f      	b.n	8004c6c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bac:	897b      	ldrh	r3, [r7, #10]
 8004bae:	11db      	asrs	r3, r3, #7
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	f003 0306 	and.w	r3, r3, #6
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	f063 030f 	orn	r3, r3, #15
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	4930      	ldr	r1, [pc, #192]	; (8004c8c <I2C_MasterRequestRead+0x194>)
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f8b9 	bl	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e054      	b.n	8004c84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004bda:	897b      	ldrh	r3, [r7, #10]
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	4929      	ldr	r1, [pc, #164]	; (8004c90 <I2C_MasterRequestRead+0x198>)
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f8a9 	bl	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e044      	b.n	8004c84 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c1e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f831 	bl	8004c94 <I2C_WaitOnFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00d      	beq.n	8004c54 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c46:	d103      	bne.n	8004c50 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c4e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e017      	b.n	8004c84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c54:	897b      	ldrh	r3, [r7, #10]
 8004c56:	11db      	asrs	r3, r3, #7
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	f003 0306 	and.w	r3, r3, #6
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	f063 030e 	orn	r3, r3, #14
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	4907      	ldr	r1, [pc, #28]	; (8004c90 <I2C_MasterRequestRead+0x198>)
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f865 	bl	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	00010008 	.word	0x00010008
 8004c90:	00010002 	.word	0x00010002

08004c94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ca4:	e025      	b.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cac:	d021      	beq.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cae:	f7fe fd0b 	bl	80036c8 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d302      	bcc.n	8004cc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d116      	bne.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f043 0220 	orr.w	r2, r3, #32
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e023      	b.n	8004d3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	0c1b      	lsrs	r3, r3, #16
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d10d      	bne.n	8004d18 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	43da      	mvns	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4013      	ands	r3, r2
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	bf0c      	ite	eq
 8004d0e:	2301      	moveq	r3, #1
 8004d10:	2300      	movne	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	e00c      	b.n	8004d32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	43da      	mvns	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4013      	ands	r3, r2
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	bf0c      	ite	eq
 8004d2a:	2301      	moveq	r3, #1
 8004d2c:	2300      	movne	r3, #0
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d0b6      	beq.n	8004ca6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	607a      	str	r2, [r7, #4]
 8004d4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d50:	e051      	b.n	8004df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d60:	d123      	bne.n	8004daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f043 0204 	orr.w	r2, r3, #4
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e046      	b.n	8004e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004db0:	d021      	beq.n	8004df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db2:	f7fe fc89 	bl	80036c8 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d302      	bcc.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d116      	bne.n	8004df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	f043 0220 	orr.w	r2, r3, #32
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e020      	b.n	8004e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	0c1b      	lsrs	r3, r3, #16
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d10c      	bne.n	8004e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	43da      	mvns	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	bf14      	ite	ne
 8004e12:	2301      	movne	r3, #1
 8004e14:	2300      	moveq	r3, #0
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	e00b      	b.n	8004e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	43da      	mvns	r2, r3
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	4013      	ands	r3, r2
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bf14      	ite	ne
 8004e2c:	2301      	movne	r3, #1
 8004e2e:	2300      	moveq	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d18d      	bne.n	8004d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e4c:	e02d      	b.n	8004eaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 f8ce 	bl	8004ff0 <I2C_IsAcknowledgeFailed>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e02d      	b.n	8004eba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e64:	d021      	beq.n	8004eaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e66:	f7fe fc2f 	bl	80036c8 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d302      	bcc.n	8004e7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d116      	bne.n	8004eaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f043 0220 	orr.w	r2, r3, #32
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e007      	b.n	8004eba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb4:	2b80      	cmp	r3, #128	; 0x80
 8004eb6:	d1ca      	bne.n	8004e4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ece:	e02d      	b.n	8004f2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f88d 	bl	8004ff0 <I2C_IsAcknowledgeFailed>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e02d      	b.n	8004f3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ee6:	d021      	beq.n	8004f2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee8:	f7fe fbee 	bl	80036c8 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d302      	bcc.n	8004efe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d116      	bne.n	8004f2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	f043 0220 	orr.w	r2, r3, #32
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e007      	b.n	8004f3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d1ca      	bne.n	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f50:	e042      	b.n	8004fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b10      	cmp	r3, #16
 8004f5e:	d119      	bne.n	8004f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0210 	mvn.w	r2, #16
 8004f68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e029      	b.n	8004fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f94:	f7fe fb98 	bl	80036c8 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d302      	bcc.n	8004faa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d116      	bne.n	8004fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	f043 0220 	orr.w	r2, r3, #32
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e007      	b.n	8004fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d1b5      	bne.n	8004f52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005006:	d11b      	bne.n	8005040 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005010:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502c:	f043 0204 	orr.w	r2, r3, #4
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e000      	b.n	8005042 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e267      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d075      	beq.n	800515a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800506e:	4b88      	ldr	r3, [pc, #544]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 030c 	and.w	r3, r3, #12
 8005076:	2b04      	cmp	r3, #4
 8005078:	d00c      	beq.n	8005094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800507a:	4b85      	ldr	r3, [pc, #532]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005082:	2b08      	cmp	r3, #8
 8005084:	d112      	bne.n	80050ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005086:	4b82      	ldr	r3, [pc, #520]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800508e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005092:	d10b      	bne.n	80050ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005094:	4b7e      	ldr	r3, [pc, #504]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d05b      	beq.n	8005158 <HAL_RCC_OscConfig+0x108>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d157      	bne.n	8005158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e242      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b4:	d106      	bne.n	80050c4 <HAL_RCC_OscConfig+0x74>
 80050b6:	4b76      	ldr	r3, [pc, #472]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a75      	ldr	r2, [pc, #468]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 80050bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	e01d      	b.n	8005100 <HAL_RCC_OscConfig+0xb0>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050cc:	d10c      	bne.n	80050e8 <HAL_RCC_OscConfig+0x98>
 80050ce:	4b70      	ldr	r3, [pc, #448]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a6f      	ldr	r2, [pc, #444]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 80050d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	4b6d      	ldr	r3, [pc, #436]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a6c      	ldr	r2, [pc, #432]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 80050e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	e00b      	b.n	8005100 <HAL_RCC_OscConfig+0xb0>
 80050e8:	4b69      	ldr	r3, [pc, #420]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a68      	ldr	r2, [pc, #416]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 80050ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	4b66      	ldr	r3, [pc, #408]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a65      	ldr	r2, [pc, #404]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 80050fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d013      	beq.n	8005130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005108:	f7fe fade 	bl	80036c8 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005110:	f7fe fada 	bl	80036c8 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b64      	cmp	r3, #100	; 0x64
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e207      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005122:	4b5b      	ldr	r3, [pc, #364]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCC_OscConfig+0xc0>
 800512e:	e014      	b.n	800515a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7fe faca 	bl	80036c8 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005138:	f7fe fac6 	bl	80036c8 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	; 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e1f3      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800514a:	4b51      	ldr	r3, [pc, #324]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f0      	bne.n	8005138 <HAL_RCC_OscConfig+0xe8>
 8005156:	e000      	b.n	800515a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d063      	beq.n	800522e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005166:	4b4a      	ldr	r3, [pc, #296]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 030c 	and.w	r3, r3, #12
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00b      	beq.n	800518a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005172:	4b47      	ldr	r3, [pc, #284]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800517a:	2b08      	cmp	r3, #8
 800517c:	d11c      	bne.n	80051b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800517e:	4b44      	ldr	r3, [pc, #272]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d116      	bne.n	80051b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800518a:	4b41      	ldr	r3, [pc, #260]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <HAL_RCC_OscConfig+0x152>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d001      	beq.n	80051a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e1c7      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a2:	4b3b      	ldr	r3, [pc, #236]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	4937      	ldr	r1, [pc, #220]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b6:	e03a      	b.n	800522e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d020      	beq.n	8005202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051c0:	4b34      	ldr	r3, [pc, #208]	; (8005294 <HAL_RCC_OscConfig+0x244>)
 80051c2:	2201      	movs	r2, #1
 80051c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c6:	f7fe fa7f 	bl	80036c8 <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051cc:	e008      	b.n	80051e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ce:	f7fe fa7b 	bl	80036c8 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e1a8      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e0:	4b2b      	ldr	r3, [pc, #172]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0f0      	beq.n	80051ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ec:	4b28      	ldr	r3, [pc, #160]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	4925      	ldr	r1, [pc, #148]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	600b      	str	r3, [r1, #0]
 8005200:	e015      	b.n	800522e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005202:	4b24      	ldr	r3, [pc, #144]	; (8005294 <HAL_RCC_OscConfig+0x244>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005208:	f7fe fa5e 	bl	80036c8 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005210:	f7fe fa5a 	bl	80036c8 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e187      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005222:	4b1b      	ldr	r3, [pc, #108]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f0      	bne.n	8005210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d036      	beq.n	80052a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d016      	beq.n	8005270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005242:	4b15      	ldr	r3, [pc, #84]	; (8005298 <HAL_RCC_OscConfig+0x248>)
 8005244:	2201      	movs	r2, #1
 8005246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005248:	f7fe fa3e 	bl	80036c8 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005250:	f7fe fa3a 	bl	80036c8 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e167      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005262:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <HAL_RCC_OscConfig+0x240>)
 8005264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCC_OscConfig+0x200>
 800526e:	e01b      	b.n	80052a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005270:	4b09      	ldr	r3, [pc, #36]	; (8005298 <HAL_RCC_OscConfig+0x248>)
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005276:	f7fe fa27 	bl	80036c8 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800527c:	e00e      	b.n	800529c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800527e:	f7fe fa23 	bl	80036c8 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d907      	bls.n	800529c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e150      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
 8005290:	40023800 	.word	0x40023800
 8005294:	42470000 	.word	0x42470000
 8005298:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800529c:	4b88      	ldr	r3, [pc, #544]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 800529e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1ea      	bne.n	800527e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 8097 	beq.w	80053e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052b6:	2300      	movs	r3, #0
 80052b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ba:	4b81      	ldr	r3, [pc, #516]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10f      	bne.n	80052e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052c6:	2300      	movs	r3, #0
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	4b7d      	ldr	r3, [pc, #500]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	4a7c      	ldr	r2, [pc, #496]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 80052d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d4:	6413      	str	r3, [r2, #64]	; 0x40
 80052d6:	4b7a      	ldr	r3, [pc, #488]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052de:	60bb      	str	r3, [r7, #8]
 80052e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e2:	2301      	movs	r3, #1
 80052e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e6:	4b77      	ldr	r3, [pc, #476]	; (80054c4 <HAL_RCC_OscConfig+0x474>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d118      	bne.n	8005324 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052f2:	4b74      	ldr	r3, [pc, #464]	; (80054c4 <HAL_RCC_OscConfig+0x474>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a73      	ldr	r2, [pc, #460]	; (80054c4 <HAL_RCC_OscConfig+0x474>)
 80052f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052fe:	f7fe f9e3 	bl	80036c8 <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005304:	e008      	b.n	8005318 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005306:	f7fe f9df 	bl	80036c8 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e10c      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005318:	4b6a      	ldr	r3, [pc, #424]	; (80054c4 <HAL_RCC_OscConfig+0x474>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0f0      	beq.n	8005306 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d106      	bne.n	800533a <HAL_RCC_OscConfig+0x2ea>
 800532c:	4b64      	ldr	r3, [pc, #400]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 800532e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005330:	4a63      	ldr	r2, [pc, #396]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	6713      	str	r3, [r2, #112]	; 0x70
 8005338:	e01c      	b.n	8005374 <HAL_RCC_OscConfig+0x324>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2b05      	cmp	r3, #5
 8005340:	d10c      	bne.n	800535c <HAL_RCC_OscConfig+0x30c>
 8005342:	4b5f      	ldr	r3, [pc, #380]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 8005344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005346:	4a5e      	ldr	r2, [pc, #376]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 8005348:	f043 0304 	orr.w	r3, r3, #4
 800534c:	6713      	str	r3, [r2, #112]	; 0x70
 800534e:	4b5c      	ldr	r3, [pc, #368]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 8005350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005352:	4a5b      	ldr	r2, [pc, #364]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 8005354:	f043 0301 	orr.w	r3, r3, #1
 8005358:	6713      	str	r3, [r2, #112]	; 0x70
 800535a:	e00b      	b.n	8005374 <HAL_RCC_OscConfig+0x324>
 800535c:	4b58      	ldr	r3, [pc, #352]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 800535e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005360:	4a57      	ldr	r2, [pc, #348]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 8005362:	f023 0301 	bic.w	r3, r3, #1
 8005366:	6713      	str	r3, [r2, #112]	; 0x70
 8005368:	4b55      	ldr	r3, [pc, #340]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 800536a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536c:	4a54      	ldr	r2, [pc, #336]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 800536e:	f023 0304 	bic.w	r3, r3, #4
 8005372:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d015      	beq.n	80053a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537c:	f7fe f9a4 	bl	80036c8 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005382:	e00a      	b.n	800539a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005384:	f7fe f9a0 	bl	80036c8 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005392:	4293      	cmp	r3, r2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e0cb      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800539a:	4b49      	ldr	r3, [pc, #292]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 800539c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0ee      	beq.n	8005384 <HAL_RCC_OscConfig+0x334>
 80053a6:	e014      	b.n	80053d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053a8:	f7fe f98e 	bl	80036c8 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ae:	e00a      	b.n	80053c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b0:	f7fe f98a 	bl	80036c8 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80053be:	4293      	cmp	r3, r2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e0b5      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053c6:	4b3e      	ldr	r3, [pc, #248]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1ee      	bne.n	80053b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d105      	bne.n	80053e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d8:	4b39      	ldr	r3, [pc, #228]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	4a38      	ldr	r2, [pc, #224]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 80053de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 80a1 	beq.w	8005530 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053ee:	4b34      	ldr	r3, [pc, #208]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 030c 	and.w	r3, r3, #12
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d05c      	beq.n	80054b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d141      	bne.n	8005486 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005402:	4b31      	ldr	r3, [pc, #196]	; (80054c8 <HAL_RCC_OscConfig+0x478>)
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005408:	f7fe f95e 	bl	80036c8 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005410:	f7fe f95a 	bl	80036c8 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e087      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005422:	4b27      	ldr	r3, [pc, #156]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f0      	bne.n	8005410 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69da      	ldr	r2, [r3, #28]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	019b      	lsls	r3, r3, #6
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	085b      	lsrs	r3, r3, #1
 8005446:	3b01      	subs	r3, #1
 8005448:	041b      	lsls	r3, r3, #16
 800544a:	431a      	orrs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005450:	061b      	lsls	r3, r3, #24
 8005452:	491b      	ldr	r1, [pc, #108]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 8005454:	4313      	orrs	r3, r2
 8005456:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005458:	4b1b      	ldr	r3, [pc, #108]	; (80054c8 <HAL_RCC_OscConfig+0x478>)
 800545a:	2201      	movs	r2, #1
 800545c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800545e:	f7fe f933 	bl	80036c8 <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005464:	e008      	b.n	8005478 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005466:	f7fe f92f 	bl	80036c8 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e05c      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005478:	4b11      	ldr	r3, [pc, #68]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0f0      	beq.n	8005466 <HAL_RCC_OscConfig+0x416>
 8005484:	e054      	b.n	8005530 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005486:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <HAL_RCC_OscConfig+0x478>)
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548c:	f7fe f91c 	bl	80036c8 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005494:	f7fe f918 	bl	80036c8 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e045      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a6:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <HAL_RCC_OscConfig+0x470>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1f0      	bne.n	8005494 <HAL_RCC_OscConfig+0x444>
 80054b2:	e03d      	b.n	8005530 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d107      	bne.n	80054cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e038      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
 80054c0:	40023800 	.word	0x40023800
 80054c4:	40007000 	.word	0x40007000
 80054c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054cc:	4b1b      	ldr	r3, [pc, #108]	; (800553c <HAL_RCC_OscConfig+0x4ec>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d028      	beq.n	800552c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d121      	bne.n	800552c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d11a      	bne.n	800552c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054fc:	4013      	ands	r3, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005504:	4293      	cmp	r3, r2
 8005506:	d111      	bne.n	800552c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	085b      	lsrs	r3, r3, #1
 8005514:	3b01      	subs	r3, #1
 8005516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005518:	429a      	cmp	r2, r3
 800551a:	d107      	bne.n	800552c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005528:	429a      	cmp	r2, r3
 800552a:	d001      	beq.n	8005530 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40023800 	.word	0x40023800

08005540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e0cc      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005554:	4b68      	ldr	r3, [pc, #416]	; (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d90c      	bls.n	800557c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005562:	4b65      	ldr	r3, [pc, #404]	; (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800556a:	4b63      	ldr	r3, [pc, #396]	; (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d001      	beq.n	800557c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e0b8      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d020      	beq.n	80055ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005594:	4b59      	ldr	r3, [pc, #356]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	4a58      	ldr	r2, [pc, #352]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800559e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055ac:	4b53      	ldr	r3, [pc, #332]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	4a52      	ldr	r2, [pc, #328]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055b8:	4b50      	ldr	r3, [pc, #320]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	494d      	ldr	r1, [pc, #308]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d044      	beq.n	8005660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d107      	bne.n	80055ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055de:	4b47      	ldr	r3, [pc, #284]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d119      	bne.n	800561e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e07f      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d003      	beq.n	80055fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d107      	bne.n	800560e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055fe:	4b3f      	ldr	r3, [pc, #252]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e06f      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800560e:	4b3b      	ldr	r3, [pc, #236]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e067      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800561e:	4b37      	ldr	r3, [pc, #220]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f023 0203 	bic.w	r2, r3, #3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	4934      	ldr	r1, [pc, #208]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 800562c:	4313      	orrs	r3, r2
 800562e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005630:	f7fe f84a 	bl	80036c8 <HAL_GetTick>
 8005634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005636:	e00a      	b.n	800564e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005638:	f7fe f846 	bl	80036c8 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	f241 3288 	movw	r2, #5000	; 0x1388
 8005646:	4293      	cmp	r3, r2
 8005648:	d901      	bls.n	800564e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e04f      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564e:	4b2b      	ldr	r3, [pc, #172]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 020c 	and.w	r2, r3, #12
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	429a      	cmp	r2, r3
 800565e:	d1eb      	bne.n	8005638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005660:	4b25      	ldr	r3, [pc, #148]	; (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d20c      	bcs.n	8005688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566e:	4b22      	ldr	r3, [pc, #136]	; (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005676:	4b20      	ldr	r3, [pc, #128]	; (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d001      	beq.n	8005688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e032      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005694:	4b19      	ldr	r3, [pc, #100]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4916      	ldr	r1, [pc, #88]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d009      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056b2:	4b12      	ldr	r3, [pc, #72]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	490e      	ldr	r1, [pc, #56]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056c6:	f000 f821 	bl	800570c <HAL_RCC_GetSysClockFreq>
 80056ca:	4602      	mov	r2, r0
 80056cc:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	490a      	ldr	r1, [pc, #40]	; (8005700 <HAL_RCC_ClockConfig+0x1c0>)
 80056d8:	5ccb      	ldrb	r3, [r1, r3]
 80056da:	fa22 f303 	lsr.w	r3, r2, r3
 80056de:	4a09      	ldr	r2, [pc, #36]	; (8005704 <HAL_RCC_ClockConfig+0x1c4>)
 80056e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056e2:	4b09      	ldr	r3, [pc, #36]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fd ffaa 	bl	8003640 <HAL_InitTick>

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	40023c00 	.word	0x40023c00
 80056fc:	40023800 	.word	0x40023800
 8005700:	0800bbe4 	.word	0x0800bbe4
 8005704:	20000004 	.word	0x20000004
 8005708:	20000008 	.word	0x20000008

0800570c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800570c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005710:	b090      	sub	sp, #64	; 0x40
 8005712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	637b      	str	r3, [r7, #52]	; 0x34
 8005718:	2300      	movs	r3, #0
 800571a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800571c:	2300      	movs	r3, #0
 800571e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005724:	4b59      	ldr	r3, [pc, #356]	; (800588c <HAL_RCC_GetSysClockFreq+0x180>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f003 030c 	and.w	r3, r3, #12
 800572c:	2b08      	cmp	r3, #8
 800572e:	d00d      	beq.n	800574c <HAL_RCC_GetSysClockFreq+0x40>
 8005730:	2b08      	cmp	r3, #8
 8005732:	f200 80a1 	bhi.w	8005878 <HAL_RCC_GetSysClockFreq+0x16c>
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <HAL_RCC_GetSysClockFreq+0x34>
 800573a:	2b04      	cmp	r3, #4
 800573c:	d003      	beq.n	8005746 <HAL_RCC_GetSysClockFreq+0x3a>
 800573e:	e09b      	b.n	8005878 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005740:	4b53      	ldr	r3, [pc, #332]	; (8005890 <HAL_RCC_GetSysClockFreq+0x184>)
 8005742:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005744:	e09b      	b.n	800587e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005746:	4b53      	ldr	r3, [pc, #332]	; (8005894 <HAL_RCC_GetSysClockFreq+0x188>)
 8005748:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800574a:	e098      	b.n	800587e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800574c:	4b4f      	ldr	r3, [pc, #316]	; (800588c <HAL_RCC_GetSysClockFreq+0x180>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005754:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005756:	4b4d      	ldr	r3, [pc, #308]	; (800588c <HAL_RCC_GetSysClockFreq+0x180>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d028      	beq.n	80057b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005762:	4b4a      	ldr	r3, [pc, #296]	; (800588c <HAL_RCC_GetSysClockFreq+0x180>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	099b      	lsrs	r3, r3, #6
 8005768:	2200      	movs	r2, #0
 800576a:	623b      	str	r3, [r7, #32]
 800576c:	627a      	str	r2, [r7, #36]	; 0x24
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005774:	2100      	movs	r1, #0
 8005776:	4b47      	ldr	r3, [pc, #284]	; (8005894 <HAL_RCC_GetSysClockFreq+0x188>)
 8005778:	fb03 f201 	mul.w	r2, r3, r1
 800577c:	2300      	movs	r3, #0
 800577e:	fb00 f303 	mul.w	r3, r0, r3
 8005782:	4413      	add	r3, r2
 8005784:	4a43      	ldr	r2, [pc, #268]	; (8005894 <HAL_RCC_GetSysClockFreq+0x188>)
 8005786:	fba0 1202 	umull	r1, r2, r0, r2
 800578a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800578c:	460a      	mov	r2, r1
 800578e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005792:	4413      	add	r3, r2
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005798:	2200      	movs	r2, #0
 800579a:	61bb      	str	r3, [r7, #24]
 800579c:	61fa      	str	r2, [r7, #28]
 800579e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80057a6:	f7fb fa1f 	bl	8000be8 <__aeabi_uldivmod>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4613      	mov	r3, r2
 80057b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b2:	e053      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057b4:	4b35      	ldr	r3, [pc, #212]	; (800588c <HAL_RCC_GetSysClockFreq+0x180>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	099b      	lsrs	r3, r3, #6
 80057ba:	2200      	movs	r2, #0
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	617a      	str	r2, [r7, #20]
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80057c6:	f04f 0b00 	mov.w	fp, #0
 80057ca:	4652      	mov	r2, sl
 80057cc:	465b      	mov	r3, fp
 80057ce:	f04f 0000 	mov.w	r0, #0
 80057d2:	f04f 0100 	mov.w	r1, #0
 80057d6:	0159      	lsls	r1, r3, #5
 80057d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057dc:	0150      	lsls	r0, r2, #5
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	ebb2 080a 	subs.w	r8, r2, sl
 80057e6:	eb63 090b 	sbc.w	r9, r3, fp
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	f04f 0300 	mov.w	r3, #0
 80057f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80057f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80057fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80057fe:	ebb2 0408 	subs.w	r4, r2, r8
 8005802:	eb63 0509 	sbc.w	r5, r3, r9
 8005806:	f04f 0200 	mov.w	r2, #0
 800580a:	f04f 0300 	mov.w	r3, #0
 800580e:	00eb      	lsls	r3, r5, #3
 8005810:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005814:	00e2      	lsls	r2, r4, #3
 8005816:	4614      	mov	r4, r2
 8005818:	461d      	mov	r5, r3
 800581a:	eb14 030a 	adds.w	r3, r4, sl
 800581e:	603b      	str	r3, [r7, #0]
 8005820:	eb45 030b 	adc.w	r3, r5, fp
 8005824:	607b      	str	r3, [r7, #4]
 8005826:	f04f 0200 	mov.w	r2, #0
 800582a:	f04f 0300 	mov.w	r3, #0
 800582e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005832:	4629      	mov	r1, r5
 8005834:	028b      	lsls	r3, r1, #10
 8005836:	4621      	mov	r1, r4
 8005838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800583c:	4621      	mov	r1, r4
 800583e:	028a      	lsls	r2, r1, #10
 8005840:	4610      	mov	r0, r2
 8005842:	4619      	mov	r1, r3
 8005844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005846:	2200      	movs	r2, #0
 8005848:	60bb      	str	r3, [r7, #8]
 800584a:	60fa      	str	r2, [r7, #12]
 800584c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005850:	f7fb f9ca 	bl	8000be8 <__aeabi_uldivmod>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4613      	mov	r3, r2
 800585a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800585c:	4b0b      	ldr	r3, [pc, #44]	; (800588c <HAL_RCC_GetSysClockFreq+0x180>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	0c1b      	lsrs	r3, r3, #16
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	3301      	adds	r3, #1
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800586c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	fbb2 f3f3 	udiv	r3, r2, r3
 8005874:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005876:	e002      	b.n	800587e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <HAL_RCC_GetSysClockFreq+0x184>)
 800587a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800587c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005880:	4618      	mov	r0, r3
 8005882:	3740      	adds	r7, #64	; 0x40
 8005884:	46bd      	mov	sp, r7
 8005886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800588a:	bf00      	nop
 800588c:	40023800 	.word	0x40023800
 8005890:	00f42400 	.word	0x00f42400
 8005894:	017d7840 	.word	0x017d7840

08005898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800589c:	4b03      	ldr	r3, [pc, #12]	; (80058ac <HAL_RCC_GetHCLKFreq+0x14>)
 800589e:	681b      	ldr	r3, [r3, #0]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	20000004 	.word	0x20000004

080058b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058b4:	f7ff fff0 	bl	8005898 <HAL_RCC_GetHCLKFreq>
 80058b8:	4602      	mov	r2, r0
 80058ba:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	0a9b      	lsrs	r3, r3, #10
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	4903      	ldr	r1, [pc, #12]	; (80058d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058c6:	5ccb      	ldrb	r3, [r1, r3]
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40023800 	.word	0x40023800
 80058d4:	0800bbf4 	.word	0x0800bbf4

080058d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058dc:	f7ff ffdc 	bl	8005898 <HAL_RCC_GetHCLKFreq>
 80058e0:	4602      	mov	r2, r0
 80058e2:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	0b5b      	lsrs	r3, r3, #13
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	4903      	ldr	r1, [pc, #12]	; (80058fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80058ee:	5ccb      	ldrb	r3, [r1, r3]
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40023800 	.word	0x40023800
 80058fc:	0800bbf4 	.word	0x0800bbf4

08005900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e03f      	b.n	8005992 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fd fc90 	bl	800324c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2224      	movs	r2, #36	; 0x24
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f929 	bl	8005b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b08a      	sub	sp, #40	; 0x28
 800599e:	af02      	add	r7, sp, #8
 80059a0:	60f8      	str	r0, [r7, #12]
 80059a2:	60b9      	str	r1, [r7, #8]
 80059a4:	603b      	str	r3, [r7, #0]
 80059a6:	4613      	mov	r3, r2
 80059a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b20      	cmp	r3, #32
 80059b8:	d17c      	bne.n	8005ab4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <HAL_UART_Transmit+0x2c>
 80059c0:	88fb      	ldrh	r3, [r7, #6]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e075      	b.n	8005ab6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_UART_Transmit+0x3e>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e06e      	b.n	8005ab6 <HAL_UART_Transmit+0x11c>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2221      	movs	r2, #33	; 0x21
 80059ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059ee:	f7fd fe6b 	bl	80036c8 <HAL_GetTick>
 80059f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	88fa      	ldrh	r2, [r7, #6]
 80059f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	88fa      	ldrh	r2, [r7, #6]
 80059fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a08:	d108      	bne.n	8005a1c <HAL_UART_Transmit+0x82>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d104      	bne.n	8005a1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	61bb      	str	r3, [r7, #24]
 8005a1a:	e003      	b.n	8005a24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a2c:	e02a      	b.n	8005a84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2200      	movs	r2, #0
 8005a36:	2180      	movs	r1, #128	; 0x80
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 f840 	bl	8005abe <UART_WaitOnFlagUntilTimeout>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e036      	b.n	8005ab6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10b      	bne.n	8005a66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	3302      	adds	r3, #2
 8005a62:	61bb      	str	r3, [r7, #24]
 8005a64:	e007      	b.n	8005a76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	781a      	ldrb	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	3301      	adds	r3, #1
 8005a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1cf      	bne.n	8005a2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2200      	movs	r2, #0
 8005a96:	2140      	movs	r1, #64	; 0x40
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f810 	bl	8005abe <UART_WaitOnFlagUntilTimeout>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e006      	b.n	8005ab6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	e000      	b.n	8005ab6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ab4:	2302      	movs	r3, #2
  }
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3720      	adds	r7, #32
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b090      	sub	sp, #64	; 0x40
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	603b      	str	r3, [r7, #0]
 8005aca:	4613      	mov	r3, r2
 8005acc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ace:	e050      	b.n	8005b72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ad6:	d04c      	beq.n	8005b72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <UART_WaitOnFlagUntilTimeout+0x30>
 8005ade:	f7fd fdf3 	bl	80036c8 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d241      	bcs.n	8005b72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	330c      	adds	r3, #12
 8005af4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	330c      	adds	r3, #12
 8005b0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b0e:	637a      	str	r2, [r7, #52]	; 0x34
 8005b10:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e5      	bne.n	8005aee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3314      	adds	r3, #20
 8005b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	613b      	str	r3, [r7, #16]
   return(result);
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3314      	adds	r3, #20
 8005b40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b42:	623a      	str	r2, [r7, #32]
 8005b44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	69f9      	ldr	r1, [r7, #28]
 8005b48:	6a3a      	ldr	r2, [r7, #32]
 8005b4a:	e841 2300 	strex	r3, r2, [r1]
 8005b4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e5      	bne.n	8005b22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e00f      	b.n	8005b92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	bf0c      	ite	eq
 8005b82:	2301      	moveq	r3, #1
 8005b84:	2300      	movne	r3, #0
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	461a      	mov	r2, r3
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d09f      	beq.n	8005ad0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3740      	adds	r7, #64	; 0x40
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ba0:	b0c0      	sub	sp, #256	; 0x100
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb8:	68d9      	ldr	r1, [r3, #12]
 8005bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	ea40 0301 	orr.w	r3, r0, r1
 8005bc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005bf4:	f021 010c 	bic.w	r1, r1, #12
 8005bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c02:	430b      	orrs	r3, r1
 8005c04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c16:	6999      	ldr	r1, [r3, #24]
 8005c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	ea40 0301 	orr.w	r3, r0, r1
 8005c22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	4b8f      	ldr	r3, [pc, #572]	; (8005e68 <UART_SetConfig+0x2cc>)
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d005      	beq.n	8005c3c <UART_SetConfig+0xa0>
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	4b8d      	ldr	r3, [pc, #564]	; (8005e6c <UART_SetConfig+0x2d0>)
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d104      	bne.n	8005c46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c3c:	f7ff fe4c 	bl	80058d8 <HAL_RCC_GetPCLK2Freq>
 8005c40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c44:	e003      	b.n	8005c4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c46:	f7ff fe33 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 8005c4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c58:	f040 810c 	bne.w	8005e74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c60:	2200      	movs	r2, #0
 8005c62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c6e:	4622      	mov	r2, r4
 8005c70:	462b      	mov	r3, r5
 8005c72:	1891      	adds	r1, r2, r2
 8005c74:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c76:	415b      	adcs	r3, r3
 8005c78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c7e:	4621      	mov	r1, r4
 8005c80:	eb12 0801 	adds.w	r8, r2, r1
 8005c84:	4629      	mov	r1, r5
 8005c86:	eb43 0901 	adc.w	r9, r3, r1
 8005c8a:	f04f 0200 	mov.w	r2, #0
 8005c8e:	f04f 0300 	mov.w	r3, #0
 8005c92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c9e:	4690      	mov	r8, r2
 8005ca0:	4699      	mov	r9, r3
 8005ca2:	4623      	mov	r3, r4
 8005ca4:	eb18 0303 	adds.w	r3, r8, r3
 8005ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cac:	462b      	mov	r3, r5
 8005cae:	eb49 0303 	adc.w	r3, r9, r3
 8005cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005cc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005cc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005cca:	460b      	mov	r3, r1
 8005ccc:	18db      	adds	r3, r3, r3
 8005cce:	653b      	str	r3, [r7, #80]	; 0x50
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	eb42 0303 	adc.w	r3, r2, r3
 8005cd6:	657b      	str	r3, [r7, #84]	; 0x54
 8005cd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005cdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ce0:	f7fa ff82 	bl	8000be8 <__aeabi_uldivmod>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4b61      	ldr	r3, [pc, #388]	; (8005e70 <UART_SetConfig+0x2d4>)
 8005cea:	fba3 2302 	umull	r2, r3, r3, r2
 8005cee:	095b      	lsrs	r3, r3, #5
 8005cf0:	011c      	lsls	r4, r3, #4
 8005cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d04:	4642      	mov	r2, r8
 8005d06:	464b      	mov	r3, r9
 8005d08:	1891      	adds	r1, r2, r2
 8005d0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d0c:	415b      	adcs	r3, r3
 8005d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d14:	4641      	mov	r1, r8
 8005d16:	eb12 0a01 	adds.w	sl, r2, r1
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	eb43 0b01 	adc.w	fp, r3, r1
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d34:	4692      	mov	sl, r2
 8005d36:	469b      	mov	fp, r3
 8005d38:	4643      	mov	r3, r8
 8005d3a:	eb1a 0303 	adds.w	r3, sl, r3
 8005d3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d42:	464b      	mov	r3, r9
 8005d44:	eb4b 0303 	adc.w	r3, fp, r3
 8005d48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d60:	460b      	mov	r3, r1
 8005d62:	18db      	adds	r3, r3, r3
 8005d64:	643b      	str	r3, [r7, #64]	; 0x40
 8005d66:	4613      	mov	r3, r2
 8005d68:	eb42 0303 	adc.w	r3, r2, r3
 8005d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d76:	f7fa ff37 	bl	8000be8 <__aeabi_uldivmod>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4b3b      	ldr	r3, [pc, #236]	; (8005e70 <UART_SetConfig+0x2d4>)
 8005d82:	fba3 2301 	umull	r2, r3, r3, r1
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	2264      	movs	r2, #100	; 0x64
 8005d8a:	fb02 f303 	mul.w	r3, r2, r3
 8005d8e:	1acb      	subs	r3, r1, r3
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d96:	4b36      	ldr	r3, [pc, #216]	; (8005e70 <UART_SetConfig+0x2d4>)
 8005d98:	fba3 2302 	umull	r2, r3, r3, r2
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005da4:	441c      	add	r4, r3
 8005da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005db0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005db4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005db8:	4642      	mov	r2, r8
 8005dba:	464b      	mov	r3, r9
 8005dbc:	1891      	adds	r1, r2, r2
 8005dbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005dc0:	415b      	adcs	r3, r3
 8005dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005dc8:	4641      	mov	r1, r8
 8005dca:	1851      	adds	r1, r2, r1
 8005dcc:	6339      	str	r1, [r7, #48]	; 0x30
 8005dce:	4649      	mov	r1, r9
 8005dd0:	414b      	adcs	r3, r1
 8005dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005de0:	4659      	mov	r1, fp
 8005de2:	00cb      	lsls	r3, r1, #3
 8005de4:	4651      	mov	r1, sl
 8005de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dea:	4651      	mov	r1, sl
 8005dec:	00ca      	lsls	r2, r1, #3
 8005dee:	4610      	mov	r0, r2
 8005df0:	4619      	mov	r1, r3
 8005df2:	4603      	mov	r3, r0
 8005df4:	4642      	mov	r2, r8
 8005df6:	189b      	adds	r3, r3, r2
 8005df8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005dfc:	464b      	mov	r3, r9
 8005dfe:	460a      	mov	r2, r1
 8005e00:	eb42 0303 	adc.w	r3, r2, r3
 8005e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	18db      	adds	r3, r3, r3
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e22:	4613      	mov	r3, r2
 8005e24:	eb42 0303 	adc.w	r3, r2, r3
 8005e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e32:	f7fa fed9 	bl	8000be8 <__aeabi_uldivmod>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <UART_SetConfig+0x2d4>)
 8005e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e40:	095b      	lsrs	r3, r3, #5
 8005e42:	2164      	movs	r1, #100	; 0x64
 8005e44:	fb01 f303 	mul.w	r3, r1, r3
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	3332      	adds	r3, #50	; 0x32
 8005e4e:	4a08      	ldr	r2, [pc, #32]	; (8005e70 <UART_SetConfig+0x2d4>)
 8005e50:	fba2 2303 	umull	r2, r3, r2, r3
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	f003 0207 	and.w	r2, r3, #7
 8005e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4422      	add	r2, r4
 8005e62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e64:	e106      	b.n	8006074 <UART_SetConfig+0x4d8>
 8005e66:	bf00      	nop
 8005e68:	40011000 	.word	0x40011000
 8005e6c:	40011400 	.word	0x40011400
 8005e70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e86:	4642      	mov	r2, r8
 8005e88:	464b      	mov	r3, r9
 8005e8a:	1891      	adds	r1, r2, r2
 8005e8c:	6239      	str	r1, [r7, #32]
 8005e8e:	415b      	adcs	r3, r3
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
 8005e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e96:	4641      	mov	r1, r8
 8005e98:	1854      	adds	r4, r2, r1
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	eb43 0501 	adc.w	r5, r3, r1
 8005ea0:	f04f 0200 	mov.w	r2, #0
 8005ea4:	f04f 0300 	mov.w	r3, #0
 8005ea8:	00eb      	lsls	r3, r5, #3
 8005eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eae:	00e2      	lsls	r2, r4, #3
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	461d      	mov	r5, r3
 8005eb4:	4643      	mov	r3, r8
 8005eb6:	18e3      	adds	r3, r4, r3
 8005eb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ebc:	464b      	mov	r3, r9
 8005ebe:	eb45 0303 	adc.w	r3, r5, r3
 8005ec2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ed2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ed6:	f04f 0200 	mov.w	r2, #0
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	008b      	lsls	r3, r1, #2
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eec:	4621      	mov	r1, r4
 8005eee:	008a      	lsls	r2, r1, #2
 8005ef0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ef4:	f7fa fe78 	bl	8000be8 <__aeabi_uldivmod>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4b60      	ldr	r3, [pc, #384]	; (8006080 <UART_SetConfig+0x4e4>)
 8005efe:	fba3 2302 	umull	r2, r3, r3, r2
 8005f02:	095b      	lsrs	r3, r3, #5
 8005f04:	011c      	lsls	r4, r3, #4
 8005f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f18:	4642      	mov	r2, r8
 8005f1a:	464b      	mov	r3, r9
 8005f1c:	1891      	adds	r1, r2, r2
 8005f1e:	61b9      	str	r1, [r7, #24]
 8005f20:	415b      	adcs	r3, r3
 8005f22:	61fb      	str	r3, [r7, #28]
 8005f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f28:	4641      	mov	r1, r8
 8005f2a:	1851      	adds	r1, r2, r1
 8005f2c:	6139      	str	r1, [r7, #16]
 8005f2e:	4649      	mov	r1, r9
 8005f30:	414b      	adcs	r3, r1
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f40:	4659      	mov	r1, fp
 8005f42:	00cb      	lsls	r3, r1, #3
 8005f44:	4651      	mov	r1, sl
 8005f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f4a:	4651      	mov	r1, sl
 8005f4c:	00ca      	lsls	r2, r1, #3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	4619      	mov	r1, r3
 8005f52:	4603      	mov	r3, r0
 8005f54:	4642      	mov	r2, r8
 8005f56:	189b      	adds	r3, r3, r2
 8005f58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f5c:	464b      	mov	r3, r9
 8005f5e:	460a      	mov	r2, r1
 8005f60:	eb42 0303 	adc.w	r3, r2, r3
 8005f64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f80:	4649      	mov	r1, r9
 8005f82:	008b      	lsls	r3, r1, #2
 8005f84:	4641      	mov	r1, r8
 8005f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f8a:	4641      	mov	r1, r8
 8005f8c:	008a      	lsls	r2, r1, #2
 8005f8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f92:	f7fa fe29 	bl	8000be8 <__aeabi_uldivmod>
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	4b38      	ldr	r3, [pc, #224]	; (8006080 <UART_SetConfig+0x4e4>)
 8005f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	2264      	movs	r2, #100	; 0x64
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	1acb      	subs	r3, r1, r3
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	3332      	adds	r3, #50	; 0x32
 8005fb0:	4a33      	ldr	r2, [pc, #204]	; (8006080 <UART_SetConfig+0x4e4>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fbc:	441c      	add	r4, r3
 8005fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	673b      	str	r3, [r7, #112]	; 0x70
 8005fc6:	677a      	str	r2, [r7, #116]	; 0x74
 8005fc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005fcc:	4642      	mov	r2, r8
 8005fce:	464b      	mov	r3, r9
 8005fd0:	1891      	adds	r1, r2, r2
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	415b      	adcs	r3, r3
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fdc:	4641      	mov	r1, r8
 8005fde:	1851      	adds	r1, r2, r1
 8005fe0:	6039      	str	r1, [r7, #0]
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	414b      	adcs	r3, r1
 8005fe6:	607b      	str	r3, [r7, #4]
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	f04f 0300 	mov.w	r3, #0
 8005ff0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ff4:	4659      	mov	r1, fp
 8005ff6:	00cb      	lsls	r3, r1, #3
 8005ff8:	4651      	mov	r1, sl
 8005ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ffe:	4651      	mov	r1, sl
 8006000:	00ca      	lsls	r2, r1, #3
 8006002:	4610      	mov	r0, r2
 8006004:	4619      	mov	r1, r3
 8006006:	4603      	mov	r3, r0
 8006008:	4642      	mov	r2, r8
 800600a:	189b      	adds	r3, r3, r2
 800600c:	66bb      	str	r3, [r7, #104]	; 0x68
 800600e:	464b      	mov	r3, r9
 8006010:	460a      	mov	r2, r1
 8006012:	eb42 0303 	adc.w	r3, r2, r3
 8006016:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	663b      	str	r3, [r7, #96]	; 0x60
 8006022:	667a      	str	r2, [r7, #100]	; 0x64
 8006024:	f04f 0200 	mov.w	r2, #0
 8006028:	f04f 0300 	mov.w	r3, #0
 800602c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006030:	4649      	mov	r1, r9
 8006032:	008b      	lsls	r3, r1, #2
 8006034:	4641      	mov	r1, r8
 8006036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800603a:	4641      	mov	r1, r8
 800603c:	008a      	lsls	r2, r1, #2
 800603e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006042:	f7fa fdd1 	bl	8000be8 <__aeabi_uldivmod>
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	4b0d      	ldr	r3, [pc, #52]	; (8006080 <UART_SetConfig+0x4e4>)
 800604c:	fba3 1302 	umull	r1, r3, r3, r2
 8006050:	095b      	lsrs	r3, r3, #5
 8006052:	2164      	movs	r1, #100	; 0x64
 8006054:	fb01 f303 	mul.w	r3, r1, r3
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	3332      	adds	r3, #50	; 0x32
 800605e:	4a08      	ldr	r2, [pc, #32]	; (8006080 <UART_SetConfig+0x4e4>)
 8006060:	fba2 2303 	umull	r2, r3, r2, r3
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	f003 020f 	and.w	r2, r3, #15
 800606a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4422      	add	r2, r4
 8006072:	609a      	str	r2, [r3, #8]
}
 8006074:	bf00      	nop
 8006076:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800607a:	46bd      	mov	sp, r7
 800607c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006080:	51eb851f 	.word	0x51eb851f

08006084 <__NVIC_SetPriority>:
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	4603      	mov	r3, r0
 800608c:	6039      	str	r1, [r7, #0]
 800608e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006094:	2b00      	cmp	r3, #0
 8006096:	db0a      	blt.n	80060ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	b2da      	uxtb	r2, r3
 800609c:	490c      	ldr	r1, [pc, #48]	; (80060d0 <__NVIC_SetPriority+0x4c>)
 800609e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a2:	0112      	lsls	r2, r2, #4
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	440b      	add	r3, r1
 80060a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80060ac:	e00a      	b.n	80060c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	4908      	ldr	r1, [pc, #32]	; (80060d4 <__NVIC_SetPriority+0x50>)
 80060b4:	79fb      	ldrb	r3, [r7, #7]
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	3b04      	subs	r3, #4
 80060bc:	0112      	lsls	r2, r2, #4
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	440b      	add	r3, r1
 80060c2:	761a      	strb	r2, [r3, #24]
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	e000e100 	.word	0xe000e100
 80060d4:	e000ed00 	.word	0xe000ed00

080060d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80060dc:	2100      	movs	r1, #0
 80060de:	f06f 0004 	mvn.w	r0, #4
 80060e2:	f7ff ffcf 	bl	8006084 <__NVIC_SetPriority>
#endif
}
 80060e6:	bf00      	nop
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060f2:	f3ef 8305 	mrs	r3, IPSR
 80060f6:	603b      	str	r3, [r7, #0]
  return(result);
 80060f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80060fe:	f06f 0305 	mvn.w	r3, #5
 8006102:	607b      	str	r3, [r7, #4]
 8006104:	e00c      	b.n	8006120 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006106:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <osKernelInitialize+0x44>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d105      	bne.n	800611a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800610e:	4b08      	ldr	r3, [pc, #32]	; (8006130 <osKernelInitialize+0x44>)
 8006110:	2201      	movs	r2, #1
 8006112:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006114:	2300      	movs	r3, #0
 8006116:	607b      	str	r3, [r7, #4]
 8006118:	e002      	b.n	8006120 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800611a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800611e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006120:	687b      	ldr	r3, [r7, #4]
}
 8006122:	4618      	mov	r0, r3
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	20000468 	.word	0x20000468

08006134 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800613a:	f3ef 8305 	mrs	r3, IPSR
 800613e:	603b      	str	r3, [r7, #0]
  return(result);
 8006140:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006146:	f06f 0305 	mvn.w	r3, #5
 800614a:	607b      	str	r3, [r7, #4]
 800614c:	e010      	b.n	8006170 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800614e:	4b0b      	ldr	r3, [pc, #44]	; (800617c <osKernelStart+0x48>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d109      	bne.n	800616a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006156:	f7ff ffbf 	bl	80060d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800615a:	4b08      	ldr	r3, [pc, #32]	; (800617c <osKernelStart+0x48>)
 800615c:	2202      	movs	r2, #2
 800615e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006160:	f001 f866 	bl	8007230 <vTaskStartScheduler>
      stat = osOK;
 8006164:	2300      	movs	r3, #0
 8006166:	607b      	str	r3, [r7, #4]
 8006168:	e002      	b.n	8006170 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800616a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800616e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006170:	687b      	ldr	r3, [r7, #4]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	20000468 	.word	0x20000468

08006180 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b08e      	sub	sp, #56	; 0x38
 8006184:	af04      	add	r7, sp, #16
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800618c:	2300      	movs	r3, #0
 800618e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006190:	f3ef 8305 	mrs	r3, IPSR
 8006194:	617b      	str	r3, [r7, #20]
  return(result);
 8006196:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006198:	2b00      	cmp	r3, #0
 800619a:	d17e      	bne.n	800629a <osThreadNew+0x11a>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d07b      	beq.n	800629a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80061a2:	2380      	movs	r3, #128	; 0x80
 80061a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80061a6:	2318      	movs	r3, #24
 80061a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80061ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d045      	beq.n	8006246 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <osThreadNew+0x48>
        name = attr->name;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <osThreadNew+0x6e>
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	2b38      	cmp	r3, #56	; 0x38
 80061e0:	d805      	bhi.n	80061ee <osThreadNew+0x6e>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <osThreadNew+0x72>
        return (NULL);
 80061ee:	2300      	movs	r3, #0
 80061f0:	e054      	b.n	800629c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	089b      	lsrs	r3, r3, #2
 8006200:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00e      	beq.n	8006228 <osThreadNew+0xa8>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	2b5b      	cmp	r3, #91	; 0x5b
 8006210:	d90a      	bls.n	8006228 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006216:	2b00      	cmp	r3, #0
 8006218:	d006      	beq.n	8006228 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <osThreadNew+0xa8>
        mem = 1;
 8006222:	2301      	movs	r3, #1
 8006224:	61bb      	str	r3, [r7, #24]
 8006226:	e010      	b.n	800624a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10c      	bne.n	800624a <osThreadNew+0xca>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d108      	bne.n	800624a <osThreadNew+0xca>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d104      	bne.n	800624a <osThreadNew+0xca>
          mem = 0;
 8006240:	2300      	movs	r3, #0
 8006242:	61bb      	str	r3, [r7, #24]
 8006244:	e001      	b.n	800624a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d110      	bne.n	8006272 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006258:	9202      	str	r2, [sp, #8]
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	6a3a      	ldr	r2, [r7, #32]
 8006264:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 fe0c 	bl	8006e84 <xTaskCreateStatic>
 800626c:	4603      	mov	r3, r0
 800626e:	613b      	str	r3, [r7, #16]
 8006270:	e013      	b.n	800629a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d110      	bne.n	800629a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	b29a      	uxth	r2, r3
 800627c:	f107 0310 	add.w	r3, r7, #16
 8006280:	9301      	str	r3, [sp, #4]
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 fe57 	bl	8006f3e <xTaskCreate>
 8006290:	4603      	mov	r3, r0
 8006292:	2b01      	cmp	r3, #1
 8006294:	d001      	beq.n	800629a <osThreadNew+0x11a>
            hTask = NULL;
 8006296:	2300      	movs	r3, #0
 8006298:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800629a:	693b      	ldr	r3, [r7, #16]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3728      	adds	r7, #40	; 0x28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062ac:	f3ef 8305 	mrs	r3, IPSR
 80062b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80062b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <osDelay+0x1c>
    stat = osErrorISR;
 80062b8:	f06f 0305 	mvn.w	r3, #5
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	e007      	b.n	80062d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 ff7c 	bl	80071c8 <vTaskDelay>
    }
  }

  return (stat);
 80062d0:	68fb      	ldr	r3, [r7, #12]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4a07      	ldr	r2, [pc, #28]	; (8006308 <vApplicationGetIdleTaskMemory+0x2c>)
 80062ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4a06      	ldr	r2, [pc, #24]	; (800630c <vApplicationGetIdleTaskMemory+0x30>)
 80062f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2280      	movs	r2, #128	; 0x80
 80062f8:	601a      	str	r2, [r3, #0]
}
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	2000046c 	.word	0x2000046c
 800630c:	200004c8 	.word	0x200004c8

08006310 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4a07      	ldr	r2, [pc, #28]	; (800633c <vApplicationGetTimerTaskMemory+0x2c>)
 8006320:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	4a06      	ldr	r2, [pc, #24]	; (8006340 <vApplicationGetTimerTaskMemory+0x30>)
 8006326:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800632e:	601a      	str	r2, [r3, #0]
}
 8006330:	bf00      	nop
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	200006c8 	.word	0x200006c8
 8006340:	20000724 	.word	0x20000724

08006344 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f103 0208 	add.w	r2, r3, #8
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800635c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f103 0208 	add.w	r2, r3, #8
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f103 0208 	add.w	r2, r3, #8
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	601a      	str	r2, [r3, #0]
}
 80063da:	bf00      	nop
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063fc:	d103      	bne.n	8006406 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	e00c      	b.n	8006420 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3308      	adds	r3, #8
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	e002      	b.n	8006414 <vListInsert+0x2e>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	429a      	cmp	r2, r3
 800641e:	d2f6      	bcs.n	800640e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	601a      	str	r2, [r3, #0]
}
 800644c:	bf00      	nop
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6892      	ldr	r2, [r2, #8]
 800646e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6852      	ldr	r2, [r2, #4]
 8006478:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	429a      	cmp	r2, r3
 8006482:	d103      	bne.n	800648c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	1e5a      	subs	r2, r3, #1
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10a      	bne.n	80064d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80064d6:	f002 f84d 	bl	8008574 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e2:	68f9      	ldr	r1, [r7, #12]
 80064e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064e6:	fb01 f303 	mul.w	r3, r1, r3
 80064ea:	441a      	add	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006506:	3b01      	subs	r3, #1
 8006508:	68f9      	ldr	r1, [r7, #12]
 800650a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800650c:	fb01 f303 	mul.w	r3, r1, r3
 8006510:	441a      	add	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	22ff      	movs	r2, #255	; 0xff
 800651a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	22ff      	movs	r2, #255	; 0xff
 8006522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d114      	bne.n	8006556 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01a      	beq.n	800656a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3310      	adds	r3, #16
 8006538:	4618      	mov	r0, r3
 800653a:	f001 f903 	bl	8007744 <xTaskRemoveFromEventList>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d012      	beq.n	800656a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006544:	4b0c      	ldr	r3, [pc, #48]	; (8006578 <xQueueGenericReset+0xcc>)
 8006546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	e009      	b.n	800656a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3310      	adds	r3, #16
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff fef2 	bl	8006344 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3324      	adds	r3, #36	; 0x24
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff feed 	bl	8006344 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800656a:	f002 f833 	bl	80085d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800656e:	2301      	movs	r3, #1
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	e000ed04 	.word	0xe000ed04

0800657c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08e      	sub	sp, #56	; 0x38
 8006580:	af02      	add	r7, sp, #8
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10a      	bne.n	80065c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065be:	bf00      	nop
 80065c0:	e7fe      	b.n	80065c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <xQueueGenericCreateStatic+0x52>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <xQueueGenericCreateStatic+0x56>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <xQueueGenericCreateStatic+0x58>
 80065d2:	2300      	movs	r3, #0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10a      	bne.n	80065ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	623b      	str	r3, [r7, #32]
}
 80065ea:	bf00      	nop
 80065ec:	e7fe      	b.n	80065ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <xQueueGenericCreateStatic+0x7e>
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <xQueueGenericCreateStatic+0x82>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <xQueueGenericCreateStatic+0x84>
 80065fe:	2300      	movs	r3, #0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10a      	bne.n	800661a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	61fb      	str	r3, [r7, #28]
}
 8006616:	bf00      	nop
 8006618:	e7fe      	b.n	8006618 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800661a:	2350      	movs	r3, #80	; 0x50
 800661c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2b50      	cmp	r3, #80	; 0x50
 8006622:	d00a      	beq.n	800663a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	61bb      	str	r3, [r7, #24]
}
 8006636:	bf00      	nop
 8006638:	e7fe      	b.n	8006638 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800663a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00d      	beq.n	8006662 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800664e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	4613      	mov	r3, r2
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	68b9      	ldr	r1, [r7, #8]
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f805 	bl	800666c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006664:	4618      	mov	r0, r3
 8006666:	3730      	adds	r7, #48	; 0x30
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d103      	bne.n	8006688 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	e002      	b.n	800668e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800669a:	2101      	movs	r1, #1
 800669c:	69b8      	ldr	r0, [r7, #24]
 800669e:	f7ff ff05 	bl	80064ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	78fa      	ldrb	r2, [r7, #3]
 80066a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80066aa:	bf00      	nop
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08e      	sub	sp, #56	; 0x38
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80066c2:	2300      	movs	r3, #0
 80066c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <xQueueGenericSend+0x32>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d103      	bne.n	80066f4 <xQueueGenericSend+0x40>
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <xQueueGenericSend+0x44>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <xQueueGenericSend+0x46>
 80066f8:	2300      	movs	r3, #0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <xQueueGenericSend+0x60>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d103      	bne.n	8006722 <xQueueGenericSend+0x6e>
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671e:	2b01      	cmp	r3, #1
 8006720:	d101      	bne.n	8006726 <xQueueGenericSend+0x72>
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <xQueueGenericSend+0x74>
 8006726:	2300      	movs	r3, #0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10a      	bne.n	8006742 <xQueueGenericSend+0x8e>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	623b      	str	r3, [r7, #32]
}
 800673e:	bf00      	nop
 8006740:	e7fe      	b.n	8006740 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006742:	f001 f9bd 	bl	8007ac0 <xTaskGetSchedulerState>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d102      	bne.n	8006752 <xQueueGenericSend+0x9e>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <xQueueGenericSend+0xa2>
 8006752:	2301      	movs	r3, #1
 8006754:	e000      	b.n	8006758 <xQueueGenericSend+0xa4>
 8006756:	2300      	movs	r3, #0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10a      	bne.n	8006772 <xQueueGenericSend+0xbe>
	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	61fb      	str	r3, [r7, #28]
}
 800676e:	bf00      	nop
 8006770:	e7fe      	b.n	8006770 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006772:	f001 feff 	bl	8008574 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677e:	429a      	cmp	r2, r3
 8006780:	d302      	bcc.n	8006788 <xQueueGenericSend+0xd4>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d129      	bne.n	80067dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	68b9      	ldr	r1, [r7, #8]
 800678c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800678e:	f000 fa0b 	bl	8006ba8 <prvCopyDataToQueue>
 8006792:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	2b00      	cmp	r3, #0
 800679a:	d010      	beq.n	80067be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	3324      	adds	r3, #36	; 0x24
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 ffcf 	bl	8007744 <xTaskRemoveFromEventList>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d013      	beq.n	80067d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80067ac:	4b3f      	ldr	r3, [pc, #252]	; (80068ac <xQueueGenericSend+0x1f8>)
 80067ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	e00a      	b.n	80067d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80067be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d007      	beq.n	80067d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80067c4:	4b39      	ldr	r3, [pc, #228]	; (80068ac <xQueueGenericSend+0x1f8>)
 80067c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067d4:	f001 fefe 	bl	80085d4 <vPortExitCritical>
				return pdPASS;
 80067d8:	2301      	movs	r3, #1
 80067da:	e063      	b.n	80068a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d103      	bne.n	80067ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067e2:	f001 fef7 	bl	80085d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e05c      	b.n	80068a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d106      	bne.n	80067fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067f0:	f107 0314 	add.w	r3, r7, #20
 80067f4:	4618      	mov	r0, r3
 80067f6:	f001 f809 	bl	800780c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067fa:	2301      	movs	r3, #1
 80067fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067fe:	f001 fee9 	bl	80085d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006802:	f000 fd7b 	bl	80072fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006806:	f001 feb5 	bl	8008574 <vPortEnterCritical>
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006810:	b25b      	sxtb	r3, r3
 8006812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006816:	d103      	bne.n	8006820 <xQueueGenericSend+0x16c>
 8006818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006826:	b25b      	sxtb	r3, r3
 8006828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800682c:	d103      	bne.n	8006836 <xQueueGenericSend+0x182>
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006836:	f001 fecd 	bl	80085d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800683a:	1d3a      	adds	r2, r7, #4
 800683c:	f107 0314 	add.w	r3, r7, #20
 8006840:	4611      	mov	r1, r2
 8006842:	4618      	mov	r0, r3
 8006844:	f000 fff8 	bl	8007838 <xTaskCheckForTimeOut>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d124      	bne.n	8006898 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800684e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006850:	f000 faa2 	bl	8006d98 <prvIsQueueFull>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d018      	beq.n	800688c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	3310      	adds	r3, #16
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	4611      	mov	r1, r2
 8006862:	4618      	mov	r0, r3
 8006864:	f000 ff1e 	bl	80076a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800686a:	f000 fa2d 	bl	8006cc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800686e:	f000 fd53 	bl	8007318 <xTaskResumeAll>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	f47f af7c 	bne.w	8006772 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800687a:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <xQueueGenericSend+0x1f8>)
 800687c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	e772      	b.n	8006772 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800688c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800688e:	f000 fa1b 	bl	8006cc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006892:	f000 fd41 	bl	8007318 <xTaskResumeAll>
 8006896:	e76c      	b.n	8006772 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800689a:	f000 fa15 	bl	8006cc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800689e:	f000 fd3b 	bl	8007318 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80068a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3738      	adds	r7, #56	; 0x38
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	e000ed04 	.word	0xe000ed04

080068b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b090      	sub	sp, #64	; 0x40
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
 80068bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80068c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068da:	bf00      	nop
 80068dc:	e7fe      	b.n	80068dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d103      	bne.n	80068ec <xQueueGenericSendFromISR+0x3c>
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <xQueueGenericSendFromISR+0x40>
 80068ec:	2301      	movs	r3, #1
 80068ee:	e000      	b.n	80068f2 <xQueueGenericSendFromISR+0x42>
 80068f0:	2300      	movs	r3, #0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006908:	bf00      	nop
 800690a:	e7fe      	b.n	800690a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d103      	bne.n	800691a <xQueueGenericSendFromISR+0x6a>
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <xQueueGenericSendFromISR+0x6e>
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <xQueueGenericSendFromISR+0x70>
 800691e:	2300      	movs	r3, #0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10a      	bne.n	800693a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	623b      	str	r3, [r7, #32]
}
 8006936:	bf00      	nop
 8006938:	e7fe      	b.n	8006938 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800693a:	f001 fefd 	bl	8008738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800693e:	f3ef 8211 	mrs	r2, BASEPRI
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	61fa      	str	r2, [r7, #28]
 8006954:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006956:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006958:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800695a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800695e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006962:	429a      	cmp	r2, r3
 8006964:	d302      	bcc.n	800696c <xQueueGenericSendFromISR+0xbc>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b02      	cmp	r3, #2
 800696a:	d12f      	bne.n	80069cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006982:	f000 f911 	bl	8006ba8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006986:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800698a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800698e:	d112      	bne.n	80069b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	2b00      	cmp	r3, #0
 8006996:	d016      	beq.n	80069c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699a:	3324      	adds	r3, #36	; 0x24
 800699c:	4618      	mov	r0, r3
 800699e:	f000 fed1 	bl	8007744 <xTaskRemoveFromEventList>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00e      	beq.n	80069c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	e007      	b.n	80069c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80069b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80069ba:	3301      	adds	r3, #1
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	b25a      	sxtb	r2, r3
 80069c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80069c6:	2301      	movs	r3, #1
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80069ca:	e001      	b.n	80069d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3740      	adds	r7, #64	; 0x40
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08c      	sub	sp, #48	; 0x30
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069f4:	2300      	movs	r3, #0
 80069f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <xQueueReceive+0x30>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	623b      	str	r3, [r7, #32]
}
 8006a14:	bf00      	nop
 8006a16:	e7fe      	b.n	8006a16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d103      	bne.n	8006a26 <xQueueReceive+0x3e>
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <xQueueReceive+0x42>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e000      	b.n	8006a2c <xQueueReceive+0x44>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <xQueueReceive+0x5e>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	61fb      	str	r3, [r7, #28]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a46:	f001 f83b 	bl	8007ac0 <xTaskGetSchedulerState>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d102      	bne.n	8006a56 <xQueueReceive+0x6e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <xQueueReceive+0x72>
 8006a56:	2301      	movs	r3, #1
 8006a58:	e000      	b.n	8006a5c <xQueueReceive+0x74>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <xQueueReceive+0x8e>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	61bb      	str	r3, [r7, #24]
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a76:	f001 fd7d 	bl	8008574 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d01f      	beq.n	8006ac6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a86:	68b9      	ldr	r1, [r7, #8]
 8006a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a8a:	f000 f8f7 	bl	8006c7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	1e5a      	subs	r2, r3, #1
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00f      	beq.n	8006abe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa0:	3310      	adds	r3, #16
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fe4e 	bl	8007744 <xTaskRemoveFromEventList>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d007      	beq.n	8006abe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006aae:	4b3d      	ldr	r3, [pc, #244]	; (8006ba4 <xQueueReceive+0x1bc>)
 8006ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006abe:	f001 fd89 	bl	80085d4 <vPortExitCritical>
				return pdPASS;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e069      	b.n	8006b9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d103      	bne.n	8006ad4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006acc:	f001 fd82 	bl	80085d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e062      	b.n	8006b9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d106      	bne.n	8006ae8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ada:	f107 0310 	add.w	r3, r7, #16
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 fe94 	bl	800780c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ae8:	f001 fd74 	bl	80085d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006aec:	f000 fc06 	bl	80072fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006af0:	f001 fd40 	bl	8008574 <vPortEnterCritical>
 8006af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006afa:	b25b      	sxtb	r3, r3
 8006afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b00:	d103      	bne.n	8006b0a <xQueueReceive+0x122>
 8006b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b10:	b25b      	sxtb	r3, r3
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b16:	d103      	bne.n	8006b20 <xQueueReceive+0x138>
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b20:	f001 fd58 	bl	80085d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b24:	1d3a      	adds	r2, r7, #4
 8006b26:	f107 0310 	add.w	r3, r7, #16
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 fe83 	bl	8007838 <xTaskCheckForTimeOut>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d123      	bne.n	8006b80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b3a:	f000 f917 	bl	8006d6c <prvIsQueueEmpty>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d017      	beq.n	8006b74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	3324      	adds	r3, #36	; 0x24
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fda9 	bl	80076a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b54:	f000 f8b8 	bl	8006cc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b58:	f000 fbde 	bl	8007318 <xTaskResumeAll>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d189      	bne.n	8006a76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006b62:	4b10      	ldr	r3, [pc, #64]	; (8006ba4 <xQueueReceive+0x1bc>)
 8006b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	e780      	b.n	8006a76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b76:	f000 f8a7 	bl	8006cc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b7a:	f000 fbcd 	bl	8007318 <xTaskResumeAll>
 8006b7e:	e77a      	b.n	8006a76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b82:	f000 f8a1 	bl	8006cc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b86:	f000 fbc7 	bl	8007318 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b8c:	f000 f8ee 	bl	8006d6c <prvIsQueueEmpty>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f43f af6f 	beq.w	8006a76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3730      	adds	r7, #48	; 0x30
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	e000ed04 	.word	0xe000ed04

08006ba8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10d      	bne.n	8006be2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d14d      	bne.n	8006c6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 ff92 	bl	8007afc <xTaskPriorityDisinherit>
 8006bd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	609a      	str	r2, [r3, #8]
 8006be0:	e043      	b.n	8006c6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d119      	bne.n	8006c1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6858      	ldr	r0, [r3, #4]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	f002 ffdd 	bl	8009bb2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c00:	441a      	add	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d32b      	bcc.n	8006c6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	605a      	str	r2, [r3, #4]
 8006c1a:	e026      	b.n	8006c6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	68d8      	ldr	r0, [r3, #12]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c24:	461a      	mov	r2, r3
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	f002 ffc3 	bl	8009bb2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c34:	425b      	negs	r3, r3
 8006c36:	441a      	add	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d207      	bcs.n	8006c58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	425b      	negs	r3, r3
 8006c52:	441a      	add	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d105      	bne.n	8006c6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c72:	697b      	ldr	r3, [r7, #20]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d018      	beq.n	8006cc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	441a      	add	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d303      	bcc.n	8006cb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68d9      	ldr	r1, [r3, #12]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6838      	ldr	r0, [r7, #0]
 8006cbc:	f002 ff79 	bl	8009bb2 <memcpy>
	}
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006cd0:	f001 fc50 	bl	8008574 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cdc:	e011      	b.n	8006d02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d012      	beq.n	8006d0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3324      	adds	r3, #36	; 0x24
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fd2a 	bl	8007744 <xTaskRemoveFromEventList>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006cf6:	f000 fe01 	bl	80078fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	dce9      	bgt.n	8006cde <prvUnlockQueue+0x16>
 8006d0a:	e000      	b.n	8006d0e <prvUnlockQueue+0x46>
					break;
 8006d0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	22ff      	movs	r2, #255	; 0xff
 8006d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d16:	f001 fc5d 	bl	80085d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d1a:	f001 fc2b 	bl	8008574 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d26:	e011      	b.n	8006d4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d012      	beq.n	8006d56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3310      	adds	r3, #16
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fd05 	bl	8007744 <xTaskRemoveFromEventList>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d40:	f000 fddc 	bl	80078fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	dce9      	bgt.n	8006d28 <prvUnlockQueue+0x60>
 8006d54:	e000      	b.n	8006d58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	22ff      	movs	r2, #255	; 0xff
 8006d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d60:	f001 fc38 	bl	80085d4 <vPortExitCritical>
}
 8006d64:	bf00      	nop
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d74:	f001 fbfe 	bl	8008574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d102      	bne.n	8006d86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d80:	2301      	movs	r3, #1
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	e001      	b.n	8006d8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d8a:	f001 fc23 	bl	80085d4 <vPortExitCritical>

	return xReturn;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006da0:	f001 fbe8 	bl	8008574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d102      	bne.n	8006db6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006db0:	2301      	movs	r3, #1
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e001      	b.n	8006dba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dba:	f001 fc0b 	bl	80085d4 <vPortExitCritical>

	return xReturn;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	e014      	b.n	8006e02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006dd8:	4a0f      	ldr	r2, [pc, #60]	; (8006e18 <vQueueAddToRegistry+0x50>)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10b      	bne.n	8006dfc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006de4:	490c      	ldr	r1, [pc, #48]	; (8006e18 <vQueueAddToRegistry+0x50>)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006dee:	4a0a      	ldr	r2, [pc, #40]	; (8006e18 <vQueueAddToRegistry+0x50>)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	4413      	add	r3, r2
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006dfa:	e006      	b.n	8006e0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	60fb      	str	r3, [r7, #12]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b07      	cmp	r3, #7
 8006e06:	d9e7      	bls.n	8006dd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e08:	bf00      	nop
 8006e0a:	bf00      	nop
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	20000b24 	.word	0x20000b24

08006e1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e2c:	f001 fba2 	bl	8008574 <vPortEnterCritical>
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e36:	b25b      	sxtb	r3, r3
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e3c:	d103      	bne.n	8006e46 <vQueueWaitForMessageRestricted+0x2a>
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e4c:	b25b      	sxtb	r3, r3
 8006e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e52:	d103      	bne.n	8006e5c <vQueueWaitForMessageRestricted+0x40>
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e5c:	f001 fbba 	bl	80085d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d106      	bne.n	8006e76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	3324      	adds	r3, #36	; 0x24
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	68b9      	ldr	r1, [r7, #8]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 fc3b 	bl	80076ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e76:	6978      	ldr	r0, [r7, #20]
 8006e78:	f7ff ff26 	bl	8006cc8 <prvUnlockQueue>
	}
 8006e7c:	bf00      	nop
 8006e7e:	3718      	adds	r7, #24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08e      	sub	sp, #56	; 0x38
 8006e88:	af04      	add	r7, sp, #16
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10a      	bne.n	8006eae <xTaskCreateStatic+0x2a>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	623b      	str	r3, [r7, #32]
}
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10a      	bne.n	8006eca <xTaskCreateStatic+0x46>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	61fb      	str	r3, [r7, #28]
}
 8006ec6:	bf00      	nop
 8006ec8:	e7fe      	b.n	8006ec8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006eca:	235c      	movs	r3, #92	; 0x5c
 8006ecc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b5c      	cmp	r3, #92	; 0x5c
 8006ed2:	d00a      	beq.n	8006eea <xTaskCreateStatic+0x66>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	61bb      	str	r3, [r7, #24]
}
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006eea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d01e      	beq.n	8006f30 <xTaskCreateStatic+0xac>
 8006ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01b      	beq.n	8006f30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	2202      	movs	r2, #2
 8006f06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	9303      	str	r3, [sp, #12]
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	9302      	str	r3, [sp, #8]
 8006f12:	f107 0314 	add.w	r3, r7, #20
 8006f16:	9301      	str	r3, [sp, #4]
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	68b9      	ldr	r1, [r7, #8]
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f000 f850 	bl	8006fc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f2a:	f000 f8dd 	bl	80070e8 <prvAddNewTaskToReadyList>
 8006f2e:	e001      	b.n	8006f34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f34:	697b      	ldr	r3, [r7, #20]
	}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3728      	adds	r7, #40	; 0x28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b08c      	sub	sp, #48	; 0x30
 8006f42:	af04      	add	r7, sp, #16
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	603b      	str	r3, [r7, #0]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f4e:	88fb      	ldrh	r3, [r7, #6]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f001 fc30 	bl	80087b8 <pvPortMalloc>
 8006f58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00e      	beq.n	8006f7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f60:	205c      	movs	r0, #92	; 0x5c
 8006f62:	f001 fc29 	bl	80087b8 <pvPortMalloc>
 8006f66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	631a      	str	r2, [r3, #48]	; 0x30
 8006f74:	e005      	b.n	8006f82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f76:	6978      	ldr	r0, [r7, #20]
 8006f78:	f001 fcea 	bl	8008950 <vPortFree>
 8006f7c:	e001      	b.n	8006f82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d017      	beq.n	8006fb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f90:	88fa      	ldrh	r2, [r7, #6]
 8006f92:	2300      	movs	r3, #0
 8006f94:	9303      	str	r3, [sp, #12]
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	9302      	str	r3, [sp, #8]
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 f80e 	bl	8006fc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fac:	69f8      	ldr	r0, [r7, #28]
 8006fae:	f000 f89b 	bl	80070e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	e002      	b.n	8006fbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
	}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3720      	adds	r7, #32
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	461a      	mov	r2, r3
 8006fe0:	21a5      	movs	r1, #165	; 0xa5
 8006fe2:	f002 fd59 	bl	8009a98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	f023 0307 	bic.w	r3, r3, #7
 8006ffe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	f003 0307 	and.w	r3, r3, #7
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <prvInitialiseNewTask+0x58>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	617b      	str	r3, [r7, #20]
}
 800701c:	bf00      	nop
 800701e:	e7fe      	b.n	800701e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01f      	beq.n	8007066 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007026:	2300      	movs	r3, #0
 8007028:	61fb      	str	r3, [r7, #28]
 800702a:	e012      	b.n	8007052 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	4413      	add	r3, r2
 8007032:	7819      	ldrb	r1, [r3, #0]
 8007034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	4413      	add	r3, r2
 800703a:	3334      	adds	r3, #52	; 0x34
 800703c:	460a      	mov	r2, r1
 800703e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	4413      	add	r3, r2
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d006      	beq.n	800705a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	3301      	adds	r3, #1
 8007050:	61fb      	str	r3, [r7, #28]
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	2b0f      	cmp	r3, #15
 8007056:	d9e9      	bls.n	800702c <prvInitialiseNewTask+0x64>
 8007058:	e000      	b.n	800705c <prvInitialiseNewTask+0x94>
			{
				break;
 800705a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007064:	e003      	b.n	800706e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800706e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007070:	2b37      	cmp	r3, #55	; 0x37
 8007072:	d901      	bls.n	8007078 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007074:	2337      	movs	r3, #55	; 0x37
 8007076:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800707c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007082:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007086:	2200      	movs	r2, #0
 8007088:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708c:	3304      	adds	r3, #4
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff f978 	bl	8006384 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007096:	3318      	adds	r3, #24
 8007098:	4618      	mov	r0, r3
 800709a:	f7ff f973 	bl	8006384 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	2200      	movs	r2, #0
 80070b8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	68f9      	ldr	r1, [r7, #12]
 80070c6:	69b8      	ldr	r0, [r7, #24]
 80070c8:	f001 f928 	bl	800831c <pxPortInitialiseStack>
 80070cc:	4602      	mov	r2, r0
 80070ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070de:	bf00      	nop
 80070e0:	3720      	adds	r7, #32
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070f0:	f001 fa40 	bl	8008574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070f4:	4b2d      	ldr	r3, [pc, #180]	; (80071ac <prvAddNewTaskToReadyList+0xc4>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3301      	adds	r3, #1
 80070fa:	4a2c      	ldr	r2, [pc, #176]	; (80071ac <prvAddNewTaskToReadyList+0xc4>)
 80070fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070fe:	4b2c      	ldr	r3, [pc, #176]	; (80071b0 <prvAddNewTaskToReadyList+0xc8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007106:	4a2a      	ldr	r2, [pc, #168]	; (80071b0 <prvAddNewTaskToReadyList+0xc8>)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800710c:	4b27      	ldr	r3, [pc, #156]	; (80071ac <prvAddNewTaskToReadyList+0xc4>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d110      	bne.n	8007136 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007114:	f000 fc16 	bl	8007944 <prvInitialiseTaskLists>
 8007118:	e00d      	b.n	8007136 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800711a:	4b26      	ldr	r3, [pc, #152]	; (80071b4 <prvAddNewTaskToReadyList+0xcc>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007122:	4b23      	ldr	r3, [pc, #140]	; (80071b0 <prvAddNewTaskToReadyList+0xc8>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	429a      	cmp	r2, r3
 800712e:	d802      	bhi.n	8007136 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007130:	4a1f      	ldr	r2, [pc, #124]	; (80071b0 <prvAddNewTaskToReadyList+0xc8>)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007136:	4b20      	ldr	r3, [pc, #128]	; (80071b8 <prvAddNewTaskToReadyList+0xd0>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3301      	adds	r3, #1
 800713c:	4a1e      	ldr	r2, [pc, #120]	; (80071b8 <prvAddNewTaskToReadyList+0xd0>)
 800713e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007140:	4b1d      	ldr	r3, [pc, #116]	; (80071b8 <prvAddNewTaskToReadyList+0xd0>)
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714c:	4b1b      	ldr	r3, [pc, #108]	; (80071bc <prvAddNewTaskToReadyList+0xd4>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d903      	bls.n	800715c <prvAddNewTaskToReadyList+0x74>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007158:	4a18      	ldr	r2, [pc, #96]	; (80071bc <prvAddNewTaskToReadyList+0xd4>)
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007160:	4613      	mov	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4a15      	ldr	r2, [pc, #84]	; (80071c0 <prvAddNewTaskToReadyList+0xd8>)
 800716a:	441a      	add	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3304      	adds	r3, #4
 8007170:	4619      	mov	r1, r3
 8007172:	4610      	mov	r0, r2
 8007174:	f7ff f913 	bl	800639e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007178:	f001 fa2c 	bl	80085d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800717c:	4b0d      	ldr	r3, [pc, #52]	; (80071b4 <prvAddNewTaskToReadyList+0xcc>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00e      	beq.n	80071a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007184:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <prvAddNewTaskToReadyList+0xc8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	429a      	cmp	r2, r3
 8007190:	d207      	bcs.n	80071a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007192:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <prvAddNewTaskToReadyList+0xdc>)
 8007194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20001038 	.word	0x20001038
 80071b0:	20000b64 	.word	0x20000b64
 80071b4:	20001044 	.word	0x20001044
 80071b8:	20001054 	.word	0x20001054
 80071bc:	20001040 	.word	0x20001040
 80071c0:	20000b68 	.word	0x20000b68
 80071c4:	e000ed04 	.word	0xe000ed04

080071c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80071d0:	2300      	movs	r3, #0
 80071d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d017      	beq.n	800720a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80071da:	4b13      	ldr	r3, [pc, #76]	; (8007228 <vTaskDelay+0x60>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <vTaskDelay+0x30>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	60bb      	str	r3, [r7, #8]
}
 80071f4:	bf00      	nop
 80071f6:	e7fe      	b.n	80071f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80071f8:	f000 f880 	bl	80072fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80071fc:	2100      	movs	r1, #0
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fcea 	bl	8007bd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007204:	f000 f888 	bl	8007318 <xTaskResumeAll>
 8007208:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d107      	bne.n	8007220 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007210:	4b06      	ldr	r3, [pc, #24]	; (800722c <vTaskDelay+0x64>)
 8007212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007220:	bf00      	nop
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20001060 	.word	0x20001060
 800722c:	e000ed04 	.word	0xe000ed04

08007230 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b08a      	sub	sp, #40	; 0x28
 8007234:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007236:	2300      	movs	r3, #0
 8007238:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800723a:	2300      	movs	r3, #0
 800723c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800723e:	463a      	mov	r2, r7
 8007240:	1d39      	adds	r1, r7, #4
 8007242:	f107 0308 	add.w	r3, r7, #8
 8007246:	4618      	mov	r0, r3
 8007248:	f7ff f848 	bl	80062dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	9202      	str	r2, [sp, #8]
 8007254:	9301      	str	r3, [sp, #4]
 8007256:	2300      	movs	r3, #0
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	2300      	movs	r3, #0
 800725c:	460a      	mov	r2, r1
 800725e:	4921      	ldr	r1, [pc, #132]	; (80072e4 <vTaskStartScheduler+0xb4>)
 8007260:	4821      	ldr	r0, [pc, #132]	; (80072e8 <vTaskStartScheduler+0xb8>)
 8007262:	f7ff fe0f 	bl	8006e84 <xTaskCreateStatic>
 8007266:	4603      	mov	r3, r0
 8007268:	4a20      	ldr	r2, [pc, #128]	; (80072ec <vTaskStartScheduler+0xbc>)
 800726a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800726c:	4b1f      	ldr	r3, [pc, #124]	; (80072ec <vTaskStartScheduler+0xbc>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d002      	beq.n	800727a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007274:	2301      	movs	r3, #1
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	e001      	b.n	800727e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800727a:	2300      	movs	r3, #0
 800727c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d102      	bne.n	800728a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007284:	f000 fcfc 	bl	8007c80 <xTimerCreateTimerTask>
 8007288:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d116      	bne.n	80072be <vTaskStartScheduler+0x8e>
	__asm volatile
 8007290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	613b      	str	r3, [r7, #16]
}
 80072a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80072a4:	4b12      	ldr	r3, [pc, #72]	; (80072f0 <vTaskStartScheduler+0xc0>)
 80072a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80072ac:	4b11      	ldr	r3, [pc, #68]	; (80072f4 <vTaskStartScheduler+0xc4>)
 80072ae:	2201      	movs	r2, #1
 80072b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80072b2:	4b11      	ldr	r3, [pc, #68]	; (80072f8 <vTaskStartScheduler+0xc8>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072b8:	f001 f8ba 	bl	8008430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072bc:	e00e      	b.n	80072dc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072c4:	d10a      	bne.n	80072dc <vTaskStartScheduler+0xac>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	60fb      	str	r3, [r7, #12]
}
 80072d8:	bf00      	nop
 80072da:	e7fe      	b.n	80072da <vTaskStartScheduler+0xaa>
}
 80072dc:	bf00      	nop
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	0800bba8 	.word	0x0800bba8
 80072e8:	08007915 	.word	0x08007915
 80072ec:	2000105c 	.word	0x2000105c
 80072f0:	20001058 	.word	0x20001058
 80072f4:	20001044 	.word	0x20001044
 80072f8:	2000103c 	.word	0x2000103c

080072fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007300:	4b04      	ldr	r3, [pc, #16]	; (8007314 <vTaskSuspendAll+0x18>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3301      	adds	r3, #1
 8007306:	4a03      	ldr	r2, [pc, #12]	; (8007314 <vTaskSuspendAll+0x18>)
 8007308:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800730a:	bf00      	nop
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	20001060 	.word	0x20001060

08007318 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800731e:	2300      	movs	r3, #0
 8007320:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007322:	2300      	movs	r3, #0
 8007324:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007326:	4b42      	ldr	r3, [pc, #264]	; (8007430 <xTaskResumeAll+0x118>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10a      	bne.n	8007344 <xTaskResumeAll+0x2c>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	603b      	str	r3, [r7, #0]
}
 8007340:	bf00      	nop
 8007342:	e7fe      	b.n	8007342 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007344:	f001 f916 	bl	8008574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007348:	4b39      	ldr	r3, [pc, #228]	; (8007430 <xTaskResumeAll+0x118>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3b01      	subs	r3, #1
 800734e:	4a38      	ldr	r2, [pc, #224]	; (8007430 <xTaskResumeAll+0x118>)
 8007350:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007352:	4b37      	ldr	r3, [pc, #220]	; (8007430 <xTaskResumeAll+0x118>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d162      	bne.n	8007420 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800735a:	4b36      	ldr	r3, [pc, #216]	; (8007434 <xTaskResumeAll+0x11c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d05e      	beq.n	8007420 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007362:	e02f      	b.n	80073c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007364:	4b34      	ldr	r3, [pc, #208]	; (8007438 <xTaskResumeAll+0x120>)
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	3318      	adds	r3, #24
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff f871 	bl	8006458 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3304      	adds	r3, #4
 800737a:	4618      	mov	r0, r3
 800737c:	f7ff f86c 	bl	8006458 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007384:	4b2d      	ldr	r3, [pc, #180]	; (800743c <xTaskResumeAll+0x124>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	429a      	cmp	r2, r3
 800738a:	d903      	bls.n	8007394 <xTaskResumeAll+0x7c>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	4a2a      	ldr	r2, [pc, #168]	; (800743c <xTaskResumeAll+0x124>)
 8007392:	6013      	str	r3, [r2, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007398:	4613      	mov	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4a27      	ldr	r2, [pc, #156]	; (8007440 <xTaskResumeAll+0x128>)
 80073a2:	441a      	add	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	3304      	adds	r3, #4
 80073a8:	4619      	mov	r1, r3
 80073aa:	4610      	mov	r0, r2
 80073ac:	f7fe fff7 	bl	800639e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b4:	4b23      	ldr	r3, [pc, #140]	; (8007444 <xTaskResumeAll+0x12c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d302      	bcc.n	80073c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80073be:	4b22      	ldr	r3, [pc, #136]	; (8007448 <xTaskResumeAll+0x130>)
 80073c0:	2201      	movs	r2, #1
 80073c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073c4:	4b1c      	ldr	r3, [pc, #112]	; (8007438 <xTaskResumeAll+0x120>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1cb      	bne.n	8007364 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80073d2:	f000 fb55 	bl	8007a80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80073d6:	4b1d      	ldr	r3, [pc, #116]	; (800744c <xTaskResumeAll+0x134>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d010      	beq.n	8007404 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80073e2:	f000 f847 	bl	8007474 <xTaskIncrementTick>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80073ec:	4b16      	ldr	r3, [pc, #88]	; (8007448 <xTaskResumeAll+0x130>)
 80073ee:	2201      	movs	r2, #1
 80073f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1f1      	bne.n	80073e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80073fe:	4b13      	ldr	r3, [pc, #76]	; (800744c <xTaskResumeAll+0x134>)
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007404:	4b10      	ldr	r3, [pc, #64]	; (8007448 <xTaskResumeAll+0x130>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d009      	beq.n	8007420 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800740c:	2301      	movs	r3, #1
 800740e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007410:	4b0f      	ldr	r3, [pc, #60]	; (8007450 <xTaskResumeAll+0x138>)
 8007412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007420:	f001 f8d8 	bl	80085d4 <vPortExitCritical>

	return xAlreadyYielded;
 8007424:	68bb      	ldr	r3, [r7, #8]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20001060 	.word	0x20001060
 8007434:	20001038 	.word	0x20001038
 8007438:	20000ff8 	.word	0x20000ff8
 800743c:	20001040 	.word	0x20001040
 8007440:	20000b68 	.word	0x20000b68
 8007444:	20000b64 	.word	0x20000b64
 8007448:	2000104c 	.word	0x2000104c
 800744c:	20001048 	.word	0x20001048
 8007450:	e000ed04 	.word	0xe000ed04

08007454 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800745a:	4b05      	ldr	r3, [pc, #20]	; (8007470 <xTaskGetTickCount+0x1c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007460:	687b      	ldr	r3, [r7, #4]
}
 8007462:	4618      	mov	r0, r3
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	2000103c 	.word	0x2000103c

08007474 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800747a:	2300      	movs	r3, #0
 800747c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800747e:	4b4f      	ldr	r3, [pc, #316]	; (80075bc <xTaskIncrementTick+0x148>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	f040 808f 	bne.w	80075a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007488:	4b4d      	ldr	r3, [pc, #308]	; (80075c0 <xTaskIncrementTick+0x14c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3301      	adds	r3, #1
 800748e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007490:	4a4b      	ldr	r2, [pc, #300]	; (80075c0 <xTaskIncrementTick+0x14c>)
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d120      	bne.n	80074de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800749c:	4b49      	ldr	r3, [pc, #292]	; (80075c4 <xTaskIncrementTick+0x150>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <xTaskIncrementTick+0x48>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	603b      	str	r3, [r7, #0]
}
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <xTaskIncrementTick+0x46>
 80074bc:	4b41      	ldr	r3, [pc, #260]	; (80075c4 <xTaskIncrementTick+0x150>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	4b41      	ldr	r3, [pc, #260]	; (80075c8 <xTaskIncrementTick+0x154>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a3f      	ldr	r2, [pc, #252]	; (80075c4 <xTaskIncrementTick+0x150>)
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	4a3f      	ldr	r2, [pc, #252]	; (80075c8 <xTaskIncrementTick+0x154>)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	4b3e      	ldr	r3, [pc, #248]	; (80075cc <xTaskIncrementTick+0x158>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3301      	adds	r3, #1
 80074d6:	4a3d      	ldr	r2, [pc, #244]	; (80075cc <xTaskIncrementTick+0x158>)
 80074d8:	6013      	str	r3, [r2, #0]
 80074da:	f000 fad1 	bl	8007a80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80074de:	4b3c      	ldr	r3, [pc, #240]	; (80075d0 <xTaskIncrementTick+0x15c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d349      	bcc.n	800757c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074e8:	4b36      	ldr	r3, [pc, #216]	; (80075c4 <xTaskIncrementTick+0x150>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d104      	bne.n	80074fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074f2:	4b37      	ldr	r3, [pc, #220]	; (80075d0 <xTaskIncrementTick+0x15c>)
 80074f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074f8:	601a      	str	r2, [r3, #0]
					break;
 80074fa:	e03f      	b.n	800757c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074fc:	4b31      	ldr	r3, [pc, #196]	; (80075c4 <xTaskIncrementTick+0x150>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	429a      	cmp	r2, r3
 8007512:	d203      	bcs.n	800751c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007514:	4a2e      	ldr	r2, [pc, #184]	; (80075d0 <xTaskIncrementTick+0x15c>)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800751a:	e02f      	b.n	800757c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	3304      	adds	r3, #4
 8007520:	4618      	mov	r0, r3
 8007522:	f7fe ff99 	bl	8006458 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752a:	2b00      	cmp	r3, #0
 800752c:	d004      	beq.n	8007538 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	3318      	adds	r3, #24
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe ff90 	bl	8006458 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753c:	4b25      	ldr	r3, [pc, #148]	; (80075d4 <xTaskIncrementTick+0x160>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	429a      	cmp	r2, r3
 8007542:	d903      	bls.n	800754c <xTaskIncrementTick+0xd8>
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	4a22      	ldr	r2, [pc, #136]	; (80075d4 <xTaskIncrementTick+0x160>)
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007550:	4613      	mov	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4a1f      	ldr	r2, [pc, #124]	; (80075d8 <xTaskIncrementTick+0x164>)
 800755a:	441a      	add	r2, r3
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	3304      	adds	r3, #4
 8007560:	4619      	mov	r1, r3
 8007562:	4610      	mov	r0, r2
 8007564:	f7fe ff1b 	bl	800639e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756c:	4b1b      	ldr	r3, [pc, #108]	; (80075dc <xTaskIncrementTick+0x168>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007572:	429a      	cmp	r2, r3
 8007574:	d3b8      	bcc.n	80074e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007576:	2301      	movs	r3, #1
 8007578:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800757a:	e7b5      	b.n	80074e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800757c:	4b17      	ldr	r3, [pc, #92]	; (80075dc <xTaskIncrementTick+0x168>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007582:	4915      	ldr	r1, [pc, #84]	; (80075d8 <xTaskIncrementTick+0x164>)
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	440b      	add	r3, r1
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d901      	bls.n	8007598 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007594:	2301      	movs	r3, #1
 8007596:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007598:	4b11      	ldr	r3, [pc, #68]	; (80075e0 <xTaskIncrementTick+0x16c>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d007      	beq.n	80075b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80075a0:	2301      	movs	r3, #1
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	e004      	b.n	80075b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80075a6:	4b0f      	ldr	r3, [pc, #60]	; (80075e4 <xTaskIncrementTick+0x170>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3301      	adds	r3, #1
 80075ac:	4a0d      	ldr	r2, [pc, #52]	; (80075e4 <xTaskIncrementTick+0x170>)
 80075ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80075b0:	697b      	ldr	r3, [r7, #20]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	20001060 	.word	0x20001060
 80075c0:	2000103c 	.word	0x2000103c
 80075c4:	20000ff0 	.word	0x20000ff0
 80075c8:	20000ff4 	.word	0x20000ff4
 80075cc:	20001050 	.word	0x20001050
 80075d0:	20001058 	.word	0x20001058
 80075d4:	20001040 	.word	0x20001040
 80075d8:	20000b68 	.word	0x20000b68
 80075dc:	20000b64 	.word	0x20000b64
 80075e0:	2000104c 	.word	0x2000104c
 80075e4:	20001048 	.word	0x20001048

080075e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80075ee:	4b28      	ldr	r3, [pc, #160]	; (8007690 <vTaskSwitchContext+0xa8>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80075f6:	4b27      	ldr	r3, [pc, #156]	; (8007694 <vTaskSwitchContext+0xac>)
 80075f8:	2201      	movs	r2, #1
 80075fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80075fc:	e041      	b.n	8007682 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80075fe:	4b25      	ldr	r3, [pc, #148]	; (8007694 <vTaskSwitchContext+0xac>)
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007604:	4b24      	ldr	r3, [pc, #144]	; (8007698 <vTaskSwitchContext+0xb0>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	60fb      	str	r3, [r7, #12]
 800760a:	e010      	b.n	800762e <vTaskSwitchContext+0x46>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10a      	bne.n	8007628 <vTaskSwitchContext+0x40>
	__asm volatile
 8007612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	607b      	str	r3, [r7, #4]
}
 8007624:	bf00      	nop
 8007626:	e7fe      	b.n	8007626 <vTaskSwitchContext+0x3e>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3b01      	subs	r3, #1
 800762c:	60fb      	str	r3, [r7, #12]
 800762e:	491b      	ldr	r1, [pc, #108]	; (800769c <vTaskSwitchContext+0xb4>)
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	4613      	mov	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	440b      	add	r3, r1
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0e4      	beq.n	800760c <vTaskSwitchContext+0x24>
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	4613      	mov	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4a13      	ldr	r2, [pc, #76]	; (800769c <vTaskSwitchContext+0xb4>)
 800764e:	4413      	add	r3, r2
 8007650:	60bb      	str	r3, [r7, #8]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	605a      	str	r2, [r3, #4]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	3308      	adds	r3, #8
 8007664:	429a      	cmp	r2, r3
 8007666:	d104      	bne.n	8007672 <vTaskSwitchContext+0x8a>
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	605a      	str	r2, [r3, #4]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	4a09      	ldr	r2, [pc, #36]	; (80076a0 <vTaskSwitchContext+0xb8>)
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	4a06      	ldr	r2, [pc, #24]	; (8007698 <vTaskSwitchContext+0xb0>)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6013      	str	r3, [r2, #0]
}
 8007682:	bf00      	nop
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	20001060 	.word	0x20001060
 8007694:	2000104c 	.word	0x2000104c
 8007698:	20001040 	.word	0x20001040
 800769c:	20000b68 	.word	0x20000b68
 80076a0:	20000b64 	.word	0x20000b64

080076a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	60fb      	str	r3, [r7, #12]
}
 80076c6:	bf00      	nop
 80076c8:	e7fe      	b.n	80076c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076ca:	4b07      	ldr	r3, [pc, #28]	; (80076e8 <vTaskPlaceOnEventList+0x44>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3318      	adds	r3, #24
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7fe fe87 	bl	80063e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80076d8:	2101      	movs	r1, #1
 80076da:	6838      	ldr	r0, [r7, #0]
 80076dc:	f000 fa7c 	bl	8007bd8 <prvAddCurrentTaskToDelayedList>
}
 80076e0:	bf00      	nop
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	20000b64 	.word	0x20000b64

080076ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10a      	bne.n	8007714 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	617b      	str	r3, [r7, #20]
}
 8007710:	bf00      	nop
 8007712:	e7fe      	b.n	8007712 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007714:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <vTaskPlaceOnEventListRestricted+0x54>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3318      	adds	r3, #24
 800771a:	4619      	mov	r1, r3
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f7fe fe3e 	bl	800639e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800772c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	68b8      	ldr	r0, [r7, #8]
 8007732:	f000 fa51 	bl	8007bd8 <prvAddCurrentTaskToDelayedList>
	}
 8007736:	bf00      	nop
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20000b64 	.word	0x20000b64

08007744 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10a      	bne.n	8007770 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	60fb      	str	r3, [r7, #12]
}
 800776c:	bf00      	nop
 800776e:	e7fe      	b.n	800776e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	3318      	adds	r3, #24
 8007774:	4618      	mov	r0, r3
 8007776:	f7fe fe6f 	bl	8006458 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800777a:	4b1e      	ldr	r3, [pc, #120]	; (80077f4 <xTaskRemoveFromEventList+0xb0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d11d      	bne.n	80077be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	3304      	adds	r3, #4
 8007786:	4618      	mov	r0, r3
 8007788:	f7fe fe66 	bl	8006458 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007790:	4b19      	ldr	r3, [pc, #100]	; (80077f8 <xTaskRemoveFromEventList+0xb4>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	d903      	bls.n	80077a0 <xTaskRemoveFromEventList+0x5c>
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	4a16      	ldr	r2, [pc, #88]	; (80077f8 <xTaskRemoveFromEventList+0xb4>)
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a4:	4613      	mov	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4a13      	ldr	r2, [pc, #76]	; (80077fc <xTaskRemoveFromEventList+0xb8>)
 80077ae:	441a      	add	r2, r3
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	3304      	adds	r3, #4
 80077b4:	4619      	mov	r1, r3
 80077b6:	4610      	mov	r0, r2
 80077b8:	f7fe fdf1 	bl	800639e <vListInsertEnd>
 80077bc:	e005      	b.n	80077ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	3318      	adds	r3, #24
 80077c2:	4619      	mov	r1, r3
 80077c4:	480e      	ldr	r0, [pc, #56]	; (8007800 <xTaskRemoveFromEventList+0xbc>)
 80077c6:	f7fe fdea 	bl	800639e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ce:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <xTaskRemoveFromEventList+0xc0>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d905      	bls.n	80077e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80077d8:	2301      	movs	r3, #1
 80077da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80077dc:	4b0a      	ldr	r3, [pc, #40]	; (8007808 <xTaskRemoveFromEventList+0xc4>)
 80077de:	2201      	movs	r2, #1
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	e001      	b.n	80077e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80077e4:	2300      	movs	r3, #0
 80077e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80077e8:	697b      	ldr	r3, [r7, #20]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	20001060 	.word	0x20001060
 80077f8:	20001040 	.word	0x20001040
 80077fc:	20000b68 	.word	0x20000b68
 8007800:	20000ff8 	.word	0x20000ff8
 8007804:	20000b64 	.word	0x20000b64
 8007808:	2000104c 	.word	0x2000104c

0800780c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007814:	4b06      	ldr	r3, [pc, #24]	; (8007830 <vTaskInternalSetTimeOutState+0x24>)
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800781c:	4b05      	ldr	r3, [pc, #20]	; (8007834 <vTaskInternalSetTimeOutState+0x28>)
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	605a      	str	r2, [r3, #4]
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	20001050 	.word	0x20001050
 8007834:	2000103c 	.word	0x2000103c

08007838 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b088      	sub	sp, #32
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10a      	bne.n	800785e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	613b      	str	r3, [r7, #16]
}
 800785a:	bf00      	nop
 800785c:	e7fe      	b.n	800785c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10a      	bne.n	800787a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	60fb      	str	r3, [r7, #12]
}
 8007876:	bf00      	nop
 8007878:	e7fe      	b.n	8007878 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800787a:	f000 fe7b 	bl	8008574 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800787e:	4b1d      	ldr	r3, [pc, #116]	; (80078f4 <xTaskCheckForTimeOut+0xbc>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007896:	d102      	bne.n	800789e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007898:	2300      	movs	r3, #0
 800789a:	61fb      	str	r3, [r7, #28]
 800789c:	e023      	b.n	80078e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	4b15      	ldr	r3, [pc, #84]	; (80078f8 <xTaskCheckForTimeOut+0xc0>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d007      	beq.n	80078ba <xTaskCheckForTimeOut+0x82>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d302      	bcc.n	80078ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80078b4:	2301      	movs	r3, #1
 80078b6:	61fb      	str	r3, [r7, #28]
 80078b8:	e015      	b.n	80078e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d20b      	bcs.n	80078dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	1ad2      	subs	r2, r2, r3
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff ff9b 	bl	800780c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80078d6:	2300      	movs	r3, #0
 80078d8:	61fb      	str	r3, [r7, #28]
 80078da:	e004      	b.n	80078e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2200      	movs	r2, #0
 80078e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80078e2:	2301      	movs	r3, #1
 80078e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80078e6:	f000 fe75 	bl	80085d4 <vPortExitCritical>

	return xReturn;
 80078ea:	69fb      	ldr	r3, [r7, #28]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3720      	adds	r7, #32
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	2000103c 	.word	0x2000103c
 80078f8:	20001050 	.word	0x20001050

080078fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80078fc:	b480      	push	{r7}
 80078fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007900:	4b03      	ldr	r3, [pc, #12]	; (8007910 <vTaskMissedYield+0x14>)
 8007902:	2201      	movs	r2, #1
 8007904:	601a      	str	r2, [r3, #0]
}
 8007906:	bf00      	nop
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	2000104c 	.word	0x2000104c

08007914 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800791c:	f000 f852 	bl	80079c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007920:	4b06      	ldr	r3, [pc, #24]	; (800793c <prvIdleTask+0x28>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d9f9      	bls.n	800791c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007928:	4b05      	ldr	r3, [pc, #20]	; (8007940 <prvIdleTask+0x2c>)
 800792a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007938:	e7f0      	b.n	800791c <prvIdleTask+0x8>
 800793a:	bf00      	nop
 800793c:	20000b68 	.word	0x20000b68
 8007940:	e000ed04 	.word	0xe000ed04

08007944 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800794a:	2300      	movs	r3, #0
 800794c:	607b      	str	r3, [r7, #4]
 800794e:	e00c      	b.n	800796a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	4613      	mov	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4a12      	ldr	r2, [pc, #72]	; (80079a4 <prvInitialiseTaskLists+0x60>)
 800795c:	4413      	add	r3, r2
 800795e:	4618      	mov	r0, r3
 8007960:	f7fe fcf0 	bl	8006344 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3301      	adds	r3, #1
 8007968:	607b      	str	r3, [r7, #4]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b37      	cmp	r3, #55	; 0x37
 800796e:	d9ef      	bls.n	8007950 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007970:	480d      	ldr	r0, [pc, #52]	; (80079a8 <prvInitialiseTaskLists+0x64>)
 8007972:	f7fe fce7 	bl	8006344 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007976:	480d      	ldr	r0, [pc, #52]	; (80079ac <prvInitialiseTaskLists+0x68>)
 8007978:	f7fe fce4 	bl	8006344 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800797c:	480c      	ldr	r0, [pc, #48]	; (80079b0 <prvInitialiseTaskLists+0x6c>)
 800797e:	f7fe fce1 	bl	8006344 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007982:	480c      	ldr	r0, [pc, #48]	; (80079b4 <prvInitialiseTaskLists+0x70>)
 8007984:	f7fe fcde 	bl	8006344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007988:	480b      	ldr	r0, [pc, #44]	; (80079b8 <prvInitialiseTaskLists+0x74>)
 800798a:	f7fe fcdb 	bl	8006344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800798e:	4b0b      	ldr	r3, [pc, #44]	; (80079bc <prvInitialiseTaskLists+0x78>)
 8007990:	4a05      	ldr	r2, [pc, #20]	; (80079a8 <prvInitialiseTaskLists+0x64>)
 8007992:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007994:	4b0a      	ldr	r3, [pc, #40]	; (80079c0 <prvInitialiseTaskLists+0x7c>)
 8007996:	4a05      	ldr	r2, [pc, #20]	; (80079ac <prvInitialiseTaskLists+0x68>)
 8007998:	601a      	str	r2, [r3, #0]
}
 800799a:	bf00      	nop
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	20000b68 	.word	0x20000b68
 80079a8:	20000fc8 	.word	0x20000fc8
 80079ac:	20000fdc 	.word	0x20000fdc
 80079b0:	20000ff8 	.word	0x20000ff8
 80079b4:	2000100c 	.word	0x2000100c
 80079b8:	20001024 	.word	0x20001024
 80079bc:	20000ff0 	.word	0x20000ff0
 80079c0:	20000ff4 	.word	0x20000ff4

080079c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079ca:	e019      	b.n	8007a00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80079cc:	f000 fdd2 	bl	8008574 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079d0:	4b10      	ldr	r3, [pc, #64]	; (8007a14 <prvCheckTasksWaitingTermination+0x50>)
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3304      	adds	r3, #4
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fe fd3b 	bl	8006458 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80079e2:	4b0d      	ldr	r3, [pc, #52]	; (8007a18 <prvCheckTasksWaitingTermination+0x54>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	4a0b      	ldr	r2, [pc, #44]	; (8007a18 <prvCheckTasksWaitingTermination+0x54>)
 80079ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80079ec:	4b0b      	ldr	r3, [pc, #44]	; (8007a1c <prvCheckTasksWaitingTermination+0x58>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	4a0a      	ldr	r2, [pc, #40]	; (8007a1c <prvCheckTasksWaitingTermination+0x58>)
 80079f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80079f6:	f000 fded 	bl	80085d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f810 	bl	8007a20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a00:	4b06      	ldr	r3, [pc, #24]	; (8007a1c <prvCheckTasksWaitingTermination+0x58>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e1      	bne.n	80079cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a08:	bf00      	nop
 8007a0a:	bf00      	nop
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	2000100c 	.word	0x2000100c
 8007a18:	20001038 	.word	0x20001038
 8007a1c:	20001020 	.word	0x20001020

08007a20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d108      	bne.n	8007a44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 ff8a 	bl	8008950 <vPortFree>
				vPortFree( pxTCB );
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 ff87 	bl	8008950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a42:	e018      	b.n	8007a76 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d103      	bne.n	8007a56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 ff7e 	bl	8008950 <vPortFree>
	}
 8007a54:	e00f      	b.n	8007a76 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d00a      	beq.n	8007a76 <prvDeleteTCB+0x56>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	60fb      	str	r3, [r7, #12]
}
 8007a72:	bf00      	nop
 8007a74:	e7fe      	b.n	8007a74 <prvDeleteTCB+0x54>
	}
 8007a76:	bf00      	nop
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a86:	4b0c      	ldr	r3, [pc, #48]	; (8007ab8 <prvResetNextTaskUnblockTime+0x38>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d104      	bne.n	8007a9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a90:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <prvResetNextTaskUnblockTime+0x3c>)
 8007a92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a98:	e008      	b.n	8007aac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a9a:	4b07      	ldr	r3, [pc, #28]	; (8007ab8 <prvResetNextTaskUnblockTime+0x38>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	4a04      	ldr	r2, [pc, #16]	; (8007abc <prvResetNextTaskUnblockTime+0x3c>)
 8007aaa:	6013      	str	r3, [r2, #0]
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	20000ff0 	.word	0x20000ff0
 8007abc:	20001058 	.word	0x20001058

08007ac0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <xTaskGetSchedulerState+0x34>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d102      	bne.n	8007ad4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	607b      	str	r3, [r7, #4]
 8007ad2:	e008      	b.n	8007ae6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ad4:	4b08      	ldr	r3, [pc, #32]	; (8007af8 <xTaskGetSchedulerState+0x38>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d102      	bne.n	8007ae2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007adc:	2302      	movs	r3, #2
 8007ade:	607b      	str	r3, [r7, #4]
 8007ae0:	e001      	b.n	8007ae6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ae6:	687b      	ldr	r3, [r7, #4]
	}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	20001044 	.word	0x20001044
 8007af8:	20001060 	.word	0x20001060

08007afc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d056      	beq.n	8007bc0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b12:	4b2e      	ldr	r3, [pc, #184]	; (8007bcc <xTaskPriorityDisinherit+0xd0>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d00a      	beq.n	8007b32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	60fb      	str	r3, [r7, #12]
}
 8007b2e:	bf00      	nop
 8007b30:	e7fe      	b.n	8007b30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10a      	bne.n	8007b50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	60bb      	str	r3, [r7, #8]
}
 8007b4c:	bf00      	nop
 8007b4e:	e7fe      	b.n	8007b4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b54:	1e5a      	subs	r2, r3, #1
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d02c      	beq.n	8007bc0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d128      	bne.n	8007bc0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	3304      	adds	r3, #4
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fe fc70 	bl	8006458 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b90:	4b0f      	ldr	r3, [pc, #60]	; (8007bd0 <xTaskPriorityDisinherit+0xd4>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d903      	bls.n	8007ba0 <xTaskPriorityDisinherit+0xa4>
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	4a0c      	ldr	r2, [pc, #48]	; (8007bd0 <xTaskPriorityDisinherit+0xd4>)
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4a09      	ldr	r2, [pc, #36]	; (8007bd4 <xTaskPriorityDisinherit+0xd8>)
 8007bae:	441a      	add	r2, r3
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f7fe fbf1 	bl	800639e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007bc0:	697b      	ldr	r3, [r7, #20]
	}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000b64 	.word	0x20000b64
 8007bd0:	20001040 	.word	0x20001040
 8007bd4:	20000b68 	.word	0x20000b68

08007bd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007be2:	4b21      	ldr	r3, [pc, #132]	; (8007c68 <prvAddCurrentTaskToDelayedList+0x90>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007be8:	4b20      	ldr	r3, [pc, #128]	; (8007c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3304      	adds	r3, #4
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fe fc32 	bl	8006458 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bfa:	d10a      	bne.n	8007c12 <prvAddCurrentTaskToDelayedList+0x3a>
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d007      	beq.n	8007c12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c02:	4b1a      	ldr	r3, [pc, #104]	; (8007c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3304      	adds	r3, #4
 8007c08:	4619      	mov	r1, r3
 8007c0a:	4819      	ldr	r0, [pc, #100]	; (8007c70 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c0c:	f7fe fbc7 	bl	800639e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c10:	e026      	b.n	8007c60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4413      	add	r3, r2
 8007c18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c1a:	4b14      	ldr	r3, [pc, #80]	; (8007c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d209      	bcs.n	8007c3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c2a:	4b12      	ldr	r3, [pc, #72]	; (8007c74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	4b0f      	ldr	r3, [pc, #60]	; (8007c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4619      	mov	r1, r3
 8007c36:	4610      	mov	r0, r2
 8007c38:	f7fe fbd5 	bl	80063e6 <vListInsert>
}
 8007c3c:	e010      	b.n	8007c60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c3e:	4b0e      	ldr	r3, [pc, #56]	; (8007c78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	4b0a      	ldr	r3, [pc, #40]	; (8007c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3304      	adds	r3, #4
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	f7fe fbcb 	bl	80063e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c50:	4b0a      	ldr	r3, [pc, #40]	; (8007c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d202      	bcs.n	8007c60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c5a:	4a08      	ldr	r2, [pc, #32]	; (8007c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	6013      	str	r3, [r2, #0]
}
 8007c60:	bf00      	nop
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	2000103c 	.word	0x2000103c
 8007c6c:	20000b64 	.word	0x20000b64
 8007c70:	20001024 	.word	0x20001024
 8007c74:	20000ff4 	.word	0x20000ff4
 8007c78:	20000ff0 	.word	0x20000ff0
 8007c7c:	20001058 	.word	0x20001058

08007c80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08a      	sub	sp, #40	; 0x28
 8007c84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c86:	2300      	movs	r3, #0
 8007c88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c8a:	f000 fb07 	bl	800829c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c8e:	4b1c      	ldr	r3, [pc, #112]	; (8007d00 <xTimerCreateTimerTask+0x80>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d021      	beq.n	8007cda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c9e:	1d3a      	adds	r2, r7, #4
 8007ca0:	f107 0108 	add.w	r1, r7, #8
 8007ca4:	f107 030c 	add.w	r3, r7, #12
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fe fb31 	bl	8006310 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	9202      	str	r2, [sp, #8]
 8007cb6:	9301      	str	r3, [sp, #4]
 8007cb8:	2302      	movs	r3, #2
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	460a      	mov	r2, r1
 8007cc0:	4910      	ldr	r1, [pc, #64]	; (8007d04 <xTimerCreateTimerTask+0x84>)
 8007cc2:	4811      	ldr	r0, [pc, #68]	; (8007d08 <xTimerCreateTimerTask+0x88>)
 8007cc4:	f7ff f8de 	bl	8006e84 <xTaskCreateStatic>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	4a10      	ldr	r2, [pc, #64]	; (8007d0c <xTimerCreateTimerTask+0x8c>)
 8007ccc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007cce:	4b0f      	ldr	r3, [pc, #60]	; (8007d0c <xTimerCreateTimerTask+0x8c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	613b      	str	r3, [r7, #16]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007cf6:	697b      	ldr	r3, [r7, #20]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	20001094 	.word	0x20001094
 8007d04:	0800bbb0 	.word	0x0800bbb0
 8007d08:	08007e45 	.word	0x08007e45
 8007d0c:	20001098 	.word	0x20001098

08007d10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08a      	sub	sp, #40	; 0x28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
 8007d1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10a      	bne.n	8007d3e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2c:	f383 8811 	msr	BASEPRI, r3
 8007d30:	f3bf 8f6f 	isb	sy
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	623b      	str	r3, [r7, #32]
}
 8007d3a:	bf00      	nop
 8007d3c:	e7fe      	b.n	8007d3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d3e:	4b1a      	ldr	r3, [pc, #104]	; (8007da8 <xTimerGenericCommand+0x98>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d02a      	beq.n	8007d9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b05      	cmp	r3, #5
 8007d56:	dc18      	bgt.n	8007d8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d58:	f7ff feb2 	bl	8007ac0 <xTaskGetSchedulerState>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d109      	bne.n	8007d76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d62:	4b11      	ldr	r3, [pc, #68]	; (8007da8 <xTimerGenericCommand+0x98>)
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	f107 0110 	add.w	r1, r7, #16
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d6e:	f7fe fca1 	bl	80066b4 <xQueueGenericSend>
 8007d72:	6278      	str	r0, [r7, #36]	; 0x24
 8007d74:	e012      	b.n	8007d9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d76:	4b0c      	ldr	r3, [pc, #48]	; (8007da8 <xTimerGenericCommand+0x98>)
 8007d78:	6818      	ldr	r0, [r3, #0]
 8007d7a:	f107 0110 	add.w	r1, r7, #16
 8007d7e:	2300      	movs	r3, #0
 8007d80:	2200      	movs	r2, #0
 8007d82:	f7fe fc97 	bl	80066b4 <xQueueGenericSend>
 8007d86:	6278      	str	r0, [r7, #36]	; 0x24
 8007d88:	e008      	b.n	8007d9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d8a:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <xTimerGenericCommand+0x98>)
 8007d8c:	6818      	ldr	r0, [r3, #0]
 8007d8e:	f107 0110 	add.w	r1, r7, #16
 8007d92:	2300      	movs	r3, #0
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	f7fe fd8b 	bl	80068b0 <xQueueGenericSendFromISR>
 8007d9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3728      	adds	r7, #40	; 0x28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	20001094 	.word	0x20001094

08007dac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b088      	sub	sp, #32
 8007db0:	af02      	add	r7, sp, #8
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007db6:	4b22      	ldr	r3, [pc, #136]	; (8007e40 <prvProcessExpiredTimer+0x94>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fe fb47 	bl	8006458 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d022      	beq.n	8007e1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	699a      	ldr	r2, [r3, #24]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	18d1      	adds	r1, r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	6978      	ldr	r0, [r7, #20]
 8007de6:	f000 f8d1 	bl	8007f8c <prvInsertTimerInActiveList>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d01f      	beq.n	8007e30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007df0:	2300      	movs	r3, #0
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	2300      	movs	r3, #0
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	2100      	movs	r1, #0
 8007dfa:	6978      	ldr	r0, [r7, #20]
 8007dfc:	f7ff ff88 	bl	8007d10 <xTimerGenericCommand>
 8007e00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d113      	bne.n	8007e30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	60fb      	str	r3, [r7, #12]
}
 8007e1a:	bf00      	nop
 8007e1c:	e7fe      	b.n	8007e1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e24:	f023 0301 	bic.w	r3, r3, #1
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	6978      	ldr	r0, [r7, #20]
 8007e36:	4798      	blx	r3
}
 8007e38:	bf00      	nop
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	2000108c 	.word	0x2000108c

08007e44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e4c:	f107 0308 	add.w	r3, r7, #8
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 f857 	bl	8007f04 <prvGetNextExpireTime>
 8007e56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f803 	bl	8007e68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e62:	f000 f8d5 	bl	8008010 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e66:	e7f1      	b.n	8007e4c <prvTimerTask+0x8>

08007e68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e72:	f7ff fa43 	bl	80072fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e76:	f107 0308 	add.w	r3, r7, #8
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 f866 	bl	8007f4c <prvSampleTimeNow>
 8007e80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d130      	bne.n	8007eea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10a      	bne.n	8007ea4 <prvProcessTimerOrBlockTask+0x3c>
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d806      	bhi.n	8007ea4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007e96:	f7ff fa3f 	bl	8007318 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e9a:	68f9      	ldr	r1, [r7, #12]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff ff85 	bl	8007dac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ea2:	e024      	b.n	8007eee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d008      	beq.n	8007ebc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007eaa:	4b13      	ldr	r3, [pc, #76]	; (8007ef8 <prvProcessTimerOrBlockTask+0x90>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <prvProcessTimerOrBlockTask+0x50>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e000      	b.n	8007eba <prvProcessTimerOrBlockTask+0x52>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ebc:	4b0f      	ldr	r3, [pc, #60]	; (8007efc <prvProcessTimerOrBlockTask+0x94>)
 8007ebe:	6818      	ldr	r0, [r3, #0]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	4619      	mov	r1, r3
 8007eca:	f7fe ffa7 	bl	8006e1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ece:	f7ff fa23 	bl	8007318 <xTaskResumeAll>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10a      	bne.n	8007eee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ed8:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <prvProcessTimerOrBlockTask+0x98>)
 8007eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ede:	601a      	str	r2, [r3, #0]
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	f3bf 8f6f 	isb	sy
}
 8007ee8:	e001      	b.n	8007eee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007eea:	f7ff fa15 	bl	8007318 <xTaskResumeAll>
}
 8007eee:	bf00      	nop
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20001090 	.word	0x20001090
 8007efc:	20001094 	.word	0x20001094
 8007f00:	e000ed04 	.word	0xe000ed04

08007f04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f0c:	4b0e      	ldr	r3, [pc, #56]	; (8007f48 <prvGetNextExpireTime+0x44>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <prvGetNextExpireTime+0x16>
 8007f16:	2201      	movs	r2, #1
 8007f18:	e000      	b.n	8007f1c <prvGetNextExpireTime+0x18>
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d105      	bne.n	8007f34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f28:	4b07      	ldr	r3, [pc, #28]	; (8007f48 <prvGetNextExpireTime+0x44>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	60fb      	str	r3, [r7, #12]
 8007f32:	e001      	b.n	8007f38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f34:	2300      	movs	r3, #0
 8007f36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f38:	68fb      	ldr	r3, [r7, #12]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	2000108c 	.word	0x2000108c

08007f4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f54:	f7ff fa7e 	bl	8007454 <xTaskGetTickCount>
 8007f58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f5a:	4b0b      	ldr	r3, [pc, #44]	; (8007f88 <prvSampleTimeNow+0x3c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d205      	bcs.n	8007f70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f64:	f000 f936 	bl	80081d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	e002      	b.n	8007f76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f76:	4a04      	ldr	r2, [pc, #16]	; (8007f88 <prvSampleTimeNow+0x3c>)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	2000109c 	.word	0x2000109c

08007f8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d812      	bhi.n	8007fd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	1ad2      	subs	r2, r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d302      	bcc.n	8007fc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	e01b      	b.n	8007ffe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007fc6:	4b10      	ldr	r3, [pc, #64]	; (8008008 <prvInsertTimerInActiveList+0x7c>)
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3304      	adds	r3, #4
 8007fce:	4619      	mov	r1, r3
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	f7fe fa08 	bl	80063e6 <vListInsert>
 8007fd6:	e012      	b.n	8007ffe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d206      	bcs.n	8007fee <prvInsertTimerInActiveList+0x62>
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d302      	bcc.n	8007fee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	617b      	str	r3, [r7, #20]
 8007fec:	e007      	b.n	8007ffe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007fee:	4b07      	ldr	r3, [pc, #28]	; (800800c <prvInsertTimerInActiveList+0x80>)
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	f7fe f9f4 	bl	80063e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ffe:	697b      	ldr	r3, [r7, #20]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20001090 	.word	0x20001090
 800800c:	2000108c 	.word	0x2000108c

08008010 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08e      	sub	sp, #56	; 0x38
 8008014:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008016:	e0ca      	b.n	80081ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	da18      	bge.n	8008050 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800801e:	1d3b      	adds	r3, r7, #4
 8008020:	3304      	adds	r3, #4
 8008022:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10a      	bne.n	8008040 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800802a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	61fb      	str	r3, [r7, #28]
}
 800803c:	bf00      	nop
 800803e:	e7fe      	b.n	800803e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008046:	6850      	ldr	r0, [r2, #4]
 8008048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800804a:	6892      	ldr	r2, [r2, #8]
 800804c:	4611      	mov	r1, r2
 800804e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	f2c0 80ab 	blt.w	80081ae <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800805c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d004      	beq.n	800806e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	3304      	adds	r3, #4
 8008068:	4618      	mov	r0, r3
 800806a:	f7fe f9f5 	bl	8006458 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800806e:	463b      	mov	r3, r7
 8008070:	4618      	mov	r0, r3
 8008072:	f7ff ff6b 	bl	8007f4c <prvSampleTimeNow>
 8008076:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b09      	cmp	r3, #9
 800807c:	f200 8096 	bhi.w	80081ac <prvProcessReceivedCommands+0x19c>
 8008080:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <prvProcessReceivedCommands+0x78>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	080080b1 	.word	0x080080b1
 800808c:	080080b1 	.word	0x080080b1
 8008090:	080080b1 	.word	0x080080b1
 8008094:	08008125 	.word	0x08008125
 8008098:	08008139 	.word	0x08008139
 800809c:	08008183 	.word	0x08008183
 80080a0:	080080b1 	.word	0x080080b1
 80080a4:	080080b1 	.word	0x080080b1
 80080a8:	08008125 	.word	0x08008125
 80080ac:	08008139 	.word	0x08008139
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080b6:	f043 0301 	orr.w	r3, r3, #1
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	18d1      	adds	r1, r2, r3
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080d0:	f7ff ff5c 	bl	8007f8c <prvInsertTimerInActiveList>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d069      	beq.n	80081ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080e8:	f003 0304 	and.w	r3, r3, #4
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d05e      	beq.n	80081ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	441a      	add	r2, r3
 80080f8:	2300      	movs	r3, #0
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	2300      	movs	r3, #0
 80080fe:	2100      	movs	r1, #0
 8008100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008102:	f7ff fe05 	bl	8007d10 <xTimerGenericCommand>
 8008106:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d14f      	bne.n	80081ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	61bb      	str	r3, [r7, #24]
}
 8008120:	bf00      	nop
 8008122:	e7fe      	b.n	8008122 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008126:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800812a:	f023 0301 	bic.w	r3, r3, #1
 800812e:	b2da      	uxtb	r2, r3
 8008130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008136:	e03a      	b.n	80081ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800813e:	f043 0301 	orr.w	r3, r3, #1
 8008142:	b2da      	uxtb	r2, r3
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10a      	bne.n	800816e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	617b      	str	r3, [r7, #20]
}
 800816a:	bf00      	nop
 800816c:	e7fe      	b.n	800816c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008170:	699a      	ldr	r2, [r3, #24]
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	18d1      	adds	r1, r2, r3
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800817a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800817c:	f7ff ff06 	bl	8007f8c <prvInsertTimerInActiveList>
					break;
 8008180:	e015      	b.n	80081ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d103      	bne.n	8008198 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008192:	f000 fbdd 	bl	8008950 <vPortFree>
 8008196:	e00a      	b.n	80081ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800819e:	f023 0301 	bic.w	r3, r3, #1
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80081aa:	e000      	b.n	80081ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80081ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081ae:	4b08      	ldr	r3, [pc, #32]	; (80081d0 <prvProcessReceivedCommands+0x1c0>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	1d39      	adds	r1, r7, #4
 80081b4:	2200      	movs	r2, #0
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fe fc16 	bl	80069e8 <xQueueReceive>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f47f af2a 	bne.w	8008018 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop
 80081c8:	3730      	adds	r7, #48	; 0x30
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20001094 	.word	0x20001094

080081d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081da:	e048      	b.n	800826e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081dc:	4b2d      	ldr	r3, [pc, #180]	; (8008294 <prvSwitchTimerLists+0xc0>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081e6:	4b2b      	ldr	r3, [pc, #172]	; (8008294 <prvSwitchTimerLists+0xc0>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3304      	adds	r3, #4
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fe f92f 	bl	8006458 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b00      	cmp	r3, #0
 800820e:	d02e      	beq.n	800826e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4413      	add	r3, r2
 8008218:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	429a      	cmp	r2, r3
 8008220:	d90e      	bls.n	8008240 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800822e:	4b19      	ldr	r3, [pc, #100]	; (8008294 <prvSwitchTimerLists+0xc0>)
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3304      	adds	r3, #4
 8008236:	4619      	mov	r1, r3
 8008238:	4610      	mov	r0, r2
 800823a:	f7fe f8d4 	bl	80063e6 <vListInsert>
 800823e:	e016      	b.n	800826e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008240:	2300      	movs	r3, #0
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	2300      	movs	r3, #0
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	2100      	movs	r1, #0
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f7ff fd60 	bl	8007d10 <xTimerGenericCommand>
 8008250:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10a      	bne.n	800826e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	603b      	str	r3, [r7, #0]
}
 800826a:	bf00      	nop
 800826c:	e7fe      	b.n	800826c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800826e:	4b09      	ldr	r3, [pc, #36]	; (8008294 <prvSwitchTimerLists+0xc0>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1b1      	bne.n	80081dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008278:	4b06      	ldr	r3, [pc, #24]	; (8008294 <prvSwitchTimerLists+0xc0>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800827e:	4b06      	ldr	r3, [pc, #24]	; (8008298 <prvSwitchTimerLists+0xc4>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a04      	ldr	r2, [pc, #16]	; (8008294 <prvSwitchTimerLists+0xc0>)
 8008284:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008286:	4a04      	ldr	r2, [pc, #16]	; (8008298 <prvSwitchTimerLists+0xc4>)
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	6013      	str	r3, [r2, #0]
}
 800828c:	bf00      	nop
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	2000108c 	.word	0x2000108c
 8008298:	20001090 	.word	0x20001090

0800829c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80082a2:	f000 f967 	bl	8008574 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80082a6:	4b15      	ldr	r3, [pc, #84]	; (80082fc <prvCheckForValidListAndQueue+0x60>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d120      	bne.n	80082f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80082ae:	4814      	ldr	r0, [pc, #80]	; (8008300 <prvCheckForValidListAndQueue+0x64>)
 80082b0:	f7fe f848 	bl	8006344 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80082b4:	4813      	ldr	r0, [pc, #76]	; (8008304 <prvCheckForValidListAndQueue+0x68>)
 80082b6:	f7fe f845 	bl	8006344 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80082ba:	4b13      	ldr	r3, [pc, #76]	; (8008308 <prvCheckForValidListAndQueue+0x6c>)
 80082bc:	4a10      	ldr	r2, [pc, #64]	; (8008300 <prvCheckForValidListAndQueue+0x64>)
 80082be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80082c0:	4b12      	ldr	r3, [pc, #72]	; (800830c <prvCheckForValidListAndQueue+0x70>)
 80082c2:	4a10      	ldr	r2, [pc, #64]	; (8008304 <prvCheckForValidListAndQueue+0x68>)
 80082c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80082c6:	2300      	movs	r3, #0
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	4b11      	ldr	r3, [pc, #68]	; (8008310 <prvCheckForValidListAndQueue+0x74>)
 80082cc:	4a11      	ldr	r2, [pc, #68]	; (8008314 <prvCheckForValidListAndQueue+0x78>)
 80082ce:	2110      	movs	r1, #16
 80082d0:	200a      	movs	r0, #10
 80082d2:	f7fe f953 	bl	800657c <xQueueGenericCreateStatic>
 80082d6:	4603      	mov	r3, r0
 80082d8:	4a08      	ldr	r2, [pc, #32]	; (80082fc <prvCheckForValidListAndQueue+0x60>)
 80082da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80082dc:	4b07      	ldr	r3, [pc, #28]	; (80082fc <prvCheckForValidListAndQueue+0x60>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d005      	beq.n	80082f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80082e4:	4b05      	ldr	r3, [pc, #20]	; (80082fc <prvCheckForValidListAndQueue+0x60>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	490b      	ldr	r1, [pc, #44]	; (8008318 <prvCheckForValidListAndQueue+0x7c>)
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fe fd6c 	bl	8006dc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082f0:	f000 f970 	bl	80085d4 <vPortExitCritical>
}
 80082f4:	bf00      	nop
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	20001094 	.word	0x20001094
 8008300:	20001064 	.word	0x20001064
 8008304:	20001078 	.word	0x20001078
 8008308:	2000108c 	.word	0x2000108c
 800830c:	20001090 	.word	0x20001090
 8008310:	20001140 	.word	0x20001140
 8008314:	200010a0 	.word	0x200010a0
 8008318:	0800bbb8 	.word	0x0800bbb8

0800831c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3b04      	subs	r3, #4
 800832c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	3b04      	subs	r3, #4
 800833a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	f023 0201 	bic.w	r2, r3, #1
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	3b04      	subs	r3, #4
 800834a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800834c:	4a0c      	ldr	r2, [pc, #48]	; (8008380 <pxPortInitialiseStack+0x64>)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	3b14      	subs	r3, #20
 8008356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	3b04      	subs	r3, #4
 8008362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f06f 0202 	mvn.w	r2, #2
 800836a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3b20      	subs	r3, #32
 8008370:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008372:	68fb      	ldr	r3, [r7, #12]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	08008385 	.word	0x08008385

08008384 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800838a:	2300      	movs	r3, #0
 800838c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800838e:	4b12      	ldr	r3, [pc, #72]	; (80083d8 <prvTaskExitError+0x54>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008396:	d00a      	beq.n	80083ae <prvTaskExitError+0x2a>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	60fb      	str	r3, [r7, #12]
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <prvTaskExitError+0x28>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	60bb      	str	r3, [r7, #8]
}
 80083c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083c2:	bf00      	nop
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d0fc      	beq.n	80083c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083ca:	bf00      	nop
 80083cc:	bf00      	nop
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	20000010 	.word	0x20000010
 80083dc:	00000000 	.word	0x00000000

080083e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083e0:	4b07      	ldr	r3, [pc, #28]	; (8008400 <pxCurrentTCBConst2>)
 80083e2:	6819      	ldr	r1, [r3, #0]
 80083e4:	6808      	ldr	r0, [r1, #0]
 80083e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ea:	f380 8809 	msr	PSP, r0
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f04f 0000 	mov.w	r0, #0
 80083f6:	f380 8811 	msr	BASEPRI, r0
 80083fa:	4770      	bx	lr
 80083fc:	f3af 8000 	nop.w

08008400 <pxCurrentTCBConst2>:
 8008400:	20000b64 	.word	0x20000b64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop

08008408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008408:	4808      	ldr	r0, [pc, #32]	; (800842c <prvPortStartFirstTask+0x24>)
 800840a:	6800      	ldr	r0, [r0, #0]
 800840c:	6800      	ldr	r0, [r0, #0]
 800840e:	f380 8808 	msr	MSP, r0
 8008412:	f04f 0000 	mov.w	r0, #0
 8008416:	f380 8814 	msr	CONTROL, r0
 800841a:	b662      	cpsie	i
 800841c:	b661      	cpsie	f
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	df00      	svc	0
 8008428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800842a:	bf00      	nop
 800842c:	e000ed08 	.word	0xe000ed08

08008430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008436:	4b46      	ldr	r3, [pc, #280]	; (8008550 <xPortStartScheduler+0x120>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a46      	ldr	r2, [pc, #280]	; (8008554 <xPortStartScheduler+0x124>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d10a      	bne.n	8008456 <xPortStartScheduler+0x26>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	613b      	str	r3, [r7, #16]
}
 8008452:	bf00      	nop
 8008454:	e7fe      	b.n	8008454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008456:	4b3e      	ldr	r3, [pc, #248]	; (8008550 <xPortStartScheduler+0x120>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a3f      	ldr	r2, [pc, #252]	; (8008558 <xPortStartScheduler+0x128>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d10a      	bne.n	8008476 <xPortStartScheduler+0x46>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	60fb      	str	r3, [r7, #12]
}
 8008472:	bf00      	nop
 8008474:	e7fe      	b.n	8008474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008476:	4b39      	ldr	r3, [pc, #228]	; (800855c <xPortStartScheduler+0x12c>)
 8008478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	b2db      	uxtb	r3, r3
 8008480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	22ff      	movs	r2, #255	; 0xff
 8008486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	b2db      	uxtb	r3, r3
 800848e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008490:	78fb      	ldrb	r3, [r7, #3]
 8008492:	b2db      	uxtb	r3, r3
 8008494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008498:	b2da      	uxtb	r2, r3
 800849a:	4b31      	ldr	r3, [pc, #196]	; (8008560 <xPortStartScheduler+0x130>)
 800849c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800849e:	4b31      	ldr	r3, [pc, #196]	; (8008564 <xPortStartScheduler+0x134>)
 80084a0:	2207      	movs	r2, #7
 80084a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084a4:	e009      	b.n	80084ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80084a6:	4b2f      	ldr	r3, [pc, #188]	; (8008564 <xPortStartScheduler+0x134>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	4a2d      	ldr	r2, [pc, #180]	; (8008564 <xPortStartScheduler+0x134>)
 80084ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084b0:	78fb      	ldrb	r3, [r7, #3]
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	005b      	lsls	r3, r3, #1
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084ba:	78fb      	ldrb	r3, [r7, #3]
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c2:	2b80      	cmp	r3, #128	; 0x80
 80084c4:	d0ef      	beq.n	80084a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084c6:	4b27      	ldr	r3, [pc, #156]	; (8008564 <xPortStartScheduler+0x134>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f1c3 0307 	rsb	r3, r3, #7
 80084ce:	2b04      	cmp	r3, #4
 80084d0:	d00a      	beq.n	80084e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80084d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	60bb      	str	r3, [r7, #8]
}
 80084e4:	bf00      	nop
 80084e6:	e7fe      	b.n	80084e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084e8:	4b1e      	ldr	r3, [pc, #120]	; (8008564 <xPortStartScheduler+0x134>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	021b      	lsls	r3, r3, #8
 80084ee:	4a1d      	ldr	r2, [pc, #116]	; (8008564 <xPortStartScheduler+0x134>)
 80084f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084f2:	4b1c      	ldr	r3, [pc, #112]	; (8008564 <xPortStartScheduler+0x134>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084fa:	4a1a      	ldr	r2, [pc, #104]	; (8008564 <xPortStartScheduler+0x134>)
 80084fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	b2da      	uxtb	r2, r3
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008506:	4b18      	ldr	r3, [pc, #96]	; (8008568 <xPortStartScheduler+0x138>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a17      	ldr	r2, [pc, #92]	; (8008568 <xPortStartScheduler+0x138>)
 800850c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008512:	4b15      	ldr	r3, [pc, #84]	; (8008568 <xPortStartScheduler+0x138>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a14      	ldr	r2, [pc, #80]	; (8008568 <xPortStartScheduler+0x138>)
 8008518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800851c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800851e:	f000 f8dd 	bl	80086dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008522:	4b12      	ldr	r3, [pc, #72]	; (800856c <xPortStartScheduler+0x13c>)
 8008524:	2200      	movs	r2, #0
 8008526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008528:	f000 f8fc 	bl	8008724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800852c:	4b10      	ldr	r3, [pc, #64]	; (8008570 <xPortStartScheduler+0x140>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a0f      	ldr	r2, [pc, #60]	; (8008570 <xPortStartScheduler+0x140>)
 8008532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008538:	f7ff ff66 	bl	8008408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800853c:	f7ff f854 	bl	80075e8 <vTaskSwitchContext>
	prvTaskExitError();
 8008540:	f7ff ff20 	bl	8008384 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	e000ed00 	.word	0xe000ed00
 8008554:	410fc271 	.word	0x410fc271
 8008558:	410fc270 	.word	0x410fc270
 800855c:	e000e400 	.word	0xe000e400
 8008560:	20001190 	.word	0x20001190
 8008564:	20001194 	.word	0x20001194
 8008568:	e000ed20 	.word	0xe000ed20
 800856c:	20000010 	.word	0x20000010
 8008570:	e000ef34 	.word	0xe000ef34

08008574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	607b      	str	r3, [r7, #4]
}
 800858c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800858e:	4b0f      	ldr	r3, [pc, #60]	; (80085cc <vPortEnterCritical+0x58>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3301      	adds	r3, #1
 8008594:	4a0d      	ldr	r2, [pc, #52]	; (80085cc <vPortEnterCritical+0x58>)
 8008596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008598:	4b0c      	ldr	r3, [pc, #48]	; (80085cc <vPortEnterCritical+0x58>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d10f      	bne.n	80085c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085a0:	4b0b      	ldr	r3, [pc, #44]	; (80085d0 <vPortEnterCritical+0x5c>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00a      	beq.n	80085c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	603b      	str	r3, [r7, #0]
}
 80085bc:	bf00      	nop
 80085be:	e7fe      	b.n	80085be <vPortEnterCritical+0x4a>
	}
}
 80085c0:	bf00      	nop
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	20000010 	.word	0x20000010
 80085d0:	e000ed04 	.word	0xe000ed04

080085d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085da:	4b12      	ldr	r3, [pc, #72]	; (8008624 <vPortExitCritical+0x50>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10a      	bne.n	80085f8 <vPortExitCritical+0x24>
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	607b      	str	r3, [r7, #4]
}
 80085f4:	bf00      	nop
 80085f6:	e7fe      	b.n	80085f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80085f8:	4b0a      	ldr	r3, [pc, #40]	; (8008624 <vPortExitCritical+0x50>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3b01      	subs	r3, #1
 80085fe:	4a09      	ldr	r2, [pc, #36]	; (8008624 <vPortExitCritical+0x50>)
 8008600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008602:	4b08      	ldr	r3, [pc, #32]	; (8008624 <vPortExitCritical+0x50>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d105      	bne.n	8008616 <vPortExitCritical+0x42>
 800860a:	2300      	movs	r3, #0
 800860c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	f383 8811 	msr	BASEPRI, r3
}
 8008614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	20000010 	.word	0x20000010
	...

08008630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008630:	f3ef 8009 	mrs	r0, PSP
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	4b15      	ldr	r3, [pc, #84]	; (8008690 <pxCurrentTCBConst>)
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	f01e 0f10 	tst.w	lr, #16
 8008640:	bf08      	it	eq
 8008642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864a:	6010      	str	r0, [r2, #0]
 800864c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008654:	f380 8811 	msr	BASEPRI, r0
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f7fe ffc2 	bl	80075e8 <vTaskSwitchContext>
 8008664:	f04f 0000 	mov.w	r0, #0
 8008668:	f380 8811 	msr	BASEPRI, r0
 800866c:	bc09      	pop	{r0, r3}
 800866e:	6819      	ldr	r1, [r3, #0]
 8008670:	6808      	ldr	r0, [r1, #0]
 8008672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008676:	f01e 0f10 	tst.w	lr, #16
 800867a:	bf08      	it	eq
 800867c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008680:	f380 8809 	msr	PSP, r0
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	f3af 8000 	nop.w

08008690 <pxCurrentTCBConst>:
 8008690:	20000b64 	.word	0x20000b64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008694:	bf00      	nop
 8008696:	bf00      	nop

08008698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	607b      	str	r3, [r7, #4]
}
 80086b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086b2:	f7fe fedf 	bl	8007474 <xTaskIncrementTick>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086bc:	4b06      	ldr	r3, [pc, #24]	; (80086d8 <xPortSysTickHandler+0x40>)
 80086be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	2300      	movs	r3, #0
 80086c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	f383 8811 	msr	BASEPRI, r3
}
 80086ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80086d0:	bf00      	nop
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	e000ed04 	.word	0xe000ed04

080086dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086e0:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <vPortSetupTimerInterrupt+0x34>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086e6:	4b0b      	ldr	r3, [pc, #44]	; (8008714 <vPortSetupTimerInterrupt+0x38>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086ec:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <vPortSetupTimerInterrupt+0x3c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a0a      	ldr	r2, [pc, #40]	; (800871c <vPortSetupTimerInterrupt+0x40>)
 80086f2:	fba2 2303 	umull	r2, r3, r2, r3
 80086f6:	099b      	lsrs	r3, r3, #6
 80086f8:	4a09      	ldr	r2, [pc, #36]	; (8008720 <vPortSetupTimerInterrupt+0x44>)
 80086fa:	3b01      	subs	r3, #1
 80086fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086fe:	4b04      	ldr	r3, [pc, #16]	; (8008710 <vPortSetupTimerInterrupt+0x34>)
 8008700:	2207      	movs	r2, #7
 8008702:	601a      	str	r2, [r3, #0]
}
 8008704:	bf00      	nop
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	e000e010 	.word	0xe000e010
 8008714:	e000e018 	.word	0xe000e018
 8008718:	20000004 	.word	0x20000004
 800871c:	10624dd3 	.word	0x10624dd3
 8008720:	e000e014 	.word	0xe000e014

08008724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008734 <vPortEnableVFP+0x10>
 8008728:	6801      	ldr	r1, [r0, #0]
 800872a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800872e:	6001      	str	r1, [r0, #0]
 8008730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008732:	bf00      	nop
 8008734:	e000ed88 	.word	0xe000ed88

08008738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800873e:	f3ef 8305 	mrs	r3, IPSR
 8008742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b0f      	cmp	r3, #15
 8008748:	d914      	bls.n	8008774 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800874a:	4a17      	ldr	r2, [pc, #92]	; (80087a8 <vPortValidateInterruptPriority+0x70>)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4413      	add	r3, r2
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008754:	4b15      	ldr	r3, [pc, #84]	; (80087ac <vPortValidateInterruptPriority+0x74>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	7afa      	ldrb	r2, [r7, #11]
 800875a:	429a      	cmp	r2, r3
 800875c:	d20a      	bcs.n	8008774 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	607b      	str	r3, [r7, #4]
}
 8008770:	bf00      	nop
 8008772:	e7fe      	b.n	8008772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008774:	4b0e      	ldr	r3, [pc, #56]	; (80087b0 <vPortValidateInterruptPriority+0x78>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800877c:	4b0d      	ldr	r3, [pc, #52]	; (80087b4 <vPortValidateInterruptPriority+0x7c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	429a      	cmp	r2, r3
 8008782:	d90a      	bls.n	800879a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	603b      	str	r3, [r7, #0]
}
 8008796:	bf00      	nop
 8008798:	e7fe      	b.n	8008798 <vPortValidateInterruptPriority+0x60>
	}
 800879a:	bf00      	nop
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	e000e3f0 	.word	0xe000e3f0
 80087ac:	20001190 	.word	0x20001190
 80087b0:	e000ed0c 	.word	0xe000ed0c
 80087b4:	20001194 	.word	0x20001194

080087b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b08a      	sub	sp, #40	; 0x28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80087c0:	2300      	movs	r3, #0
 80087c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80087c4:	f7fe fd9a 	bl	80072fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80087c8:	4b5b      	ldr	r3, [pc, #364]	; (8008938 <pvPortMalloc+0x180>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d101      	bne.n	80087d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80087d0:	f000 f920 	bl	8008a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087d4:	4b59      	ldr	r3, [pc, #356]	; (800893c <pvPortMalloc+0x184>)
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4013      	ands	r3, r2
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f040 8093 	bne.w	8008908 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d01d      	beq.n	8008824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80087e8:	2208      	movs	r2, #8
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4413      	add	r3, r2
 80087ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f003 0307 	and.w	r3, r3, #7
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d014      	beq.n	8008824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f023 0307 	bic.w	r3, r3, #7
 8008800:	3308      	adds	r3, #8
 8008802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f003 0307 	and.w	r3, r3, #7
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00a      	beq.n	8008824 <pvPortMalloc+0x6c>
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	617b      	str	r3, [r7, #20]
}
 8008820:	bf00      	nop
 8008822:	e7fe      	b.n	8008822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d06e      	beq.n	8008908 <pvPortMalloc+0x150>
 800882a:	4b45      	ldr	r3, [pc, #276]	; (8008940 <pvPortMalloc+0x188>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	429a      	cmp	r2, r3
 8008832:	d869      	bhi.n	8008908 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008834:	4b43      	ldr	r3, [pc, #268]	; (8008944 <pvPortMalloc+0x18c>)
 8008836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008838:	4b42      	ldr	r3, [pc, #264]	; (8008944 <pvPortMalloc+0x18c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800883e:	e004      	b.n	800884a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	429a      	cmp	r2, r3
 8008852:	d903      	bls.n	800885c <pvPortMalloc+0xa4>
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1f1      	bne.n	8008840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800885c:	4b36      	ldr	r3, [pc, #216]	; (8008938 <pvPortMalloc+0x180>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008862:	429a      	cmp	r2, r3
 8008864:	d050      	beq.n	8008908 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008866:	6a3b      	ldr	r3, [r7, #32]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2208      	movs	r2, #8
 800886c:	4413      	add	r3, r2
 800886e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	685a      	ldr	r2, [r3, #4]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	1ad2      	subs	r2, r2, r3
 8008880:	2308      	movs	r3, #8
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	429a      	cmp	r2, r3
 8008886:	d91f      	bls.n	80088c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4413      	add	r3, r2
 800888e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	f003 0307 	and.w	r3, r3, #7
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <pvPortMalloc+0xf8>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	613b      	str	r3, [r7, #16]
}
 80088ac:	bf00      	nop
 80088ae:	e7fe      	b.n	80088ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b2:	685a      	ldr	r2, [r3, #4]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	1ad2      	subs	r2, r2, r3
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088c2:	69b8      	ldr	r0, [r7, #24]
 80088c4:	f000 f908 	bl	8008ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088c8:	4b1d      	ldr	r3, [pc, #116]	; (8008940 <pvPortMalloc+0x188>)
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	4a1b      	ldr	r2, [pc, #108]	; (8008940 <pvPortMalloc+0x188>)
 80088d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088d6:	4b1a      	ldr	r3, [pc, #104]	; (8008940 <pvPortMalloc+0x188>)
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	4b1b      	ldr	r3, [pc, #108]	; (8008948 <pvPortMalloc+0x190>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d203      	bcs.n	80088ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088e2:	4b17      	ldr	r3, [pc, #92]	; (8008940 <pvPortMalloc+0x188>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a18      	ldr	r2, [pc, #96]	; (8008948 <pvPortMalloc+0x190>)
 80088e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	4b13      	ldr	r3, [pc, #76]	; (800893c <pvPortMalloc+0x184>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	431a      	orrs	r2, r3
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	2200      	movs	r2, #0
 80088fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80088fe:	4b13      	ldr	r3, [pc, #76]	; (800894c <pvPortMalloc+0x194>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3301      	adds	r3, #1
 8008904:	4a11      	ldr	r2, [pc, #68]	; (800894c <pvPortMalloc+0x194>)
 8008906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008908:	f7fe fd06 	bl	8007318 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	f003 0307 	and.w	r3, r3, #7
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00a      	beq.n	800892c <pvPortMalloc+0x174>
	__asm volatile
 8008916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	60fb      	str	r3, [r7, #12]
}
 8008928:	bf00      	nop
 800892a:	e7fe      	b.n	800892a <pvPortMalloc+0x172>
	return pvReturn;
 800892c:	69fb      	ldr	r3, [r7, #28]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3728      	adds	r7, #40	; 0x28
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	20004da0 	.word	0x20004da0
 800893c:	20004db4 	.word	0x20004db4
 8008940:	20004da4 	.word	0x20004da4
 8008944:	20004d98 	.word	0x20004d98
 8008948:	20004da8 	.word	0x20004da8
 800894c:	20004dac 	.word	0x20004dac

08008950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d04d      	beq.n	80089fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008962:	2308      	movs	r3, #8
 8008964:	425b      	negs	r3, r3
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	4413      	add	r3, r2
 800896a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	4b24      	ldr	r3, [pc, #144]	; (8008a08 <vPortFree+0xb8>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4013      	ands	r3, r2
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10a      	bne.n	8008994 <vPortFree+0x44>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	60fb      	str	r3, [r7, #12]
}
 8008990:	bf00      	nop
 8008992:	e7fe      	b.n	8008992 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00a      	beq.n	80089b2 <vPortFree+0x62>
	__asm volatile
 800899c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a0:	f383 8811 	msr	BASEPRI, r3
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	60bb      	str	r3, [r7, #8]
}
 80089ae:	bf00      	nop
 80089b0:	e7fe      	b.n	80089b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	4b14      	ldr	r3, [pc, #80]	; (8008a08 <vPortFree+0xb8>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4013      	ands	r3, r2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d01e      	beq.n	80089fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d11a      	bne.n	80089fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	4b0e      	ldr	r3, [pc, #56]	; (8008a08 <vPortFree+0xb8>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	43db      	mvns	r3, r3
 80089d2:	401a      	ands	r2, r3
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80089d8:	f7fe fc90 	bl	80072fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <vPortFree+0xbc>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4413      	add	r3, r2
 80089e6:	4a09      	ldr	r2, [pc, #36]	; (8008a0c <vPortFree+0xbc>)
 80089e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089ea:	6938      	ldr	r0, [r7, #16]
 80089ec:	f000 f874 	bl	8008ad8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80089f0:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <vPortFree+0xc0>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	3301      	adds	r3, #1
 80089f6:	4a06      	ldr	r2, [pc, #24]	; (8008a10 <vPortFree+0xc0>)
 80089f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80089fa:	f7fe fc8d 	bl	8007318 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80089fe:	bf00      	nop
 8008a00:	3718      	adds	r7, #24
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	20004db4 	.word	0x20004db4
 8008a0c:	20004da4 	.word	0x20004da4
 8008a10:	20004db0 	.word	0x20004db0

08008a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a20:	4b27      	ldr	r3, [pc, #156]	; (8008ac0 <prvHeapInit+0xac>)
 8008a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f003 0307 	and.w	r3, r3, #7
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00c      	beq.n	8008a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3307      	adds	r3, #7
 8008a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f023 0307 	bic.w	r3, r3, #7
 8008a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	4a1f      	ldr	r2, [pc, #124]	; (8008ac0 <prvHeapInit+0xac>)
 8008a44:	4413      	add	r3, r2
 8008a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a4c:	4a1d      	ldr	r2, [pc, #116]	; (8008ac4 <prvHeapInit+0xb0>)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a52:	4b1c      	ldr	r3, [pc, #112]	; (8008ac4 <prvHeapInit+0xb0>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a60:	2208      	movs	r2, #8
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	1a9b      	subs	r3, r3, r2
 8008a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f023 0307 	bic.w	r3, r3, #7
 8008a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	4a15      	ldr	r2, [pc, #84]	; (8008ac8 <prvHeapInit+0xb4>)
 8008a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a76:	4b14      	ldr	r3, [pc, #80]	; (8008ac8 <prvHeapInit+0xb4>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a7e:	4b12      	ldr	r3, [pc, #72]	; (8008ac8 <prvHeapInit+0xb4>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2200      	movs	r2, #0
 8008a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	1ad2      	subs	r2, r2, r3
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a94:	4b0c      	ldr	r3, [pc, #48]	; (8008ac8 <prvHeapInit+0xb4>)
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	4a0a      	ldr	r2, [pc, #40]	; (8008acc <prvHeapInit+0xb8>)
 8008aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	4a09      	ldr	r2, [pc, #36]	; (8008ad0 <prvHeapInit+0xbc>)
 8008aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008aac:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <prvHeapInit+0xc0>)
 8008aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ab2:	601a      	str	r2, [r3, #0]
}
 8008ab4:	bf00      	nop
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	20001198 	.word	0x20001198
 8008ac4:	20004d98 	.word	0x20004d98
 8008ac8:	20004da0 	.word	0x20004da0
 8008acc:	20004da8 	.word	0x20004da8
 8008ad0:	20004da4 	.word	0x20004da4
 8008ad4:	20004db4 	.word	0x20004db4

08008ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ae0:	4b28      	ldr	r3, [pc, #160]	; (8008b84 <prvInsertBlockIntoFreeList+0xac>)
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	e002      	b.n	8008aec <prvInsertBlockIntoFreeList+0x14>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d8f7      	bhi.n	8008ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	4413      	add	r3, r2
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d108      	bne.n	8008b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	441a      	add	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	441a      	add	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d118      	bne.n	8008b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	4b15      	ldr	r3, [pc, #84]	; (8008b88 <prvInsertBlockIntoFreeList+0xb0>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d00d      	beq.n	8008b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	441a      	add	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	e008      	b.n	8008b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b56:	4b0c      	ldr	r3, [pc, #48]	; (8008b88 <prvInsertBlockIntoFreeList+0xb0>)
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	601a      	str	r2, [r3, #0]
 8008b5e:	e003      	b.n	8008b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d002      	beq.n	8008b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b76:	bf00      	nop
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	20004d98 	.word	0x20004d98
 8008b88:	20004da0 	.word	0x20004da0

08008b8c <_ZdlPvj>:
 8008b8c:	f000 b8be 	b.w	8008d0c <_ZdlPv>

08008b90 <_Znwj>:
 8008b90:	2801      	cmp	r0, #1
 8008b92:	bf38      	it	cc
 8008b94:	2001      	movcc	r0, #1
 8008b96:	b510      	push	{r4, lr}
 8008b98:	4604      	mov	r4, r0
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f000 fc3c 	bl	8009418 <malloc>
 8008ba0:	b100      	cbz	r0, 8008ba4 <_Znwj+0x14>
 8008ba2:	bd10      	pop	{r4, pc}
 8008ba4:	f000 f8b4 	bl	8008d10 <_ZSt15get_new_handlerv>
 8008ba8:	b908      	cbnz	r0, 8008bae <_Znwj+0x1e>
 8008baa:	f000 f939 	bl	8008e20 <abort>
 8008bae:	4780      	blx	r0
 8008bb0:	e7f3      	b.n	8008b9a <_Znwj+0xa>

08008bb2 <_ZSt17__throw_bad_allocv>:
 8008bb2:	b508      	push	{r3, lr}
 8008bb4:	f000 f934 	bl	8008e20 <abort>

08008bb8 <_ZSt28__throw_bad_array_new_lengthv>:
 8008bb8:	b508      	push	{r3, lr}
 8008bba:	f000 f931 	bl	8008e20 <abort>
	...

08008bc0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 8008bc0:	290d      	cmp	r1, #13
 8008bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	d81c      	bhi.n	8008c02 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x42>
 8008bc8:	2900      	cmp	r1, #0
 8008bca:	d035      	beq.n	8008c38 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x78>
 8008bcc:	4b1b      	ldr	r3, [pc, #108]	; (8008c3c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>)
 8008bce:	5c5c      	ldrb	r4, [r3, r1]
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f7f7 fca7 	bl	8000524 <__aeabi_i2d>
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	6828      	ldr	r0, [r5, #0]
 8008bda:	460f      	mov	r7, r1
 8008bdc:	f7f7 fcb4 	bl	8000548 <__aeabi_f2d>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4630      	mov	r0, r6
 8008be6:	4639      	mov	r1, r7
 8008be8:	f7f7 fd06 	bl	80005f8 <__aeabi_dmul>
 8008bec:	ec41 0b10 	vmov	d0, r0, r1
 8008bf0:	f000 f896 	bl	8008d20 <floor>
 8008bf4:	ec51 0b10 	vmov	r0, r1, d0
 8008bf8:	f7f7 ffd6 	bl	8000ba8 <__aeabi_d2uiz>
 8008bfc:	6068      	str	r0, [r5, #4]
 8008bfe:	4620      	mov	r0, r4
 8008c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c02:	4a0f      	ldr	r2, [pc, #60]	; (8008c40 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x80>)
 8008c04:	23f9      	movs	r3, #249	; 0xf9
 8008c06:	1058      	asrs	r0, r3, #1
 8008c08:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8008c0c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8008c10:	428e      	cmp	r6, r1
 8008c12:	bf3b      	ittet	cc
 8008c14:	1a1b      	subcc	r3, r3, r0
 8008c16:	f103 33ff 	addcc.w	r3, r3, #4294967295	; 0xffffffff
 8008c1a:	4603      	movcs	r3, r0
 8008c1c:	1d22      	addcc	r2, r4, #4
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	dcf1      	bgt.n	8008c06 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x46>
 8008c22:	4b08      	ldr	r3, [pc, #32]	; (8008c44 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x84>)
 8008c24:	6814      	ldr	r4, [r2, #0]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d003      	beq.n	8008c32 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x72>
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f7f7 fc6a 	bl	8000504 <__aeabi_ui2d>
 8008c30:	e7d1      	b.n	8008bd6 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x16>
 8008c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c36:	e7e1      	b.n	8008bfc <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3c>
 8008c38:	2401      	movs	r4, #1
 8008c3a:	e7e0      	b.n	8008bfe <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3e>
 8008c3c:	0800c000 	.word	0x0800c000
 8008c40:	0800bc14 	.word	0x0800bc14
 8008c44:	0800bff8 	.word	0x0800bff8

08008c48 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 8008c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	ed2d 8b02 	vpush	{d8}
 8008c50:	4692      	mov	sl, r2
 8008c52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c54:	eb03 0802 	add.w	r8, r3, r2
 8008c58:	684b      	ldr	r3, [r1, #4]
 8008c5a:	4598      	cmp	r8, r3
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	460d      	mov	r5, r1
 8008c60:	d94d      	bls.n	8008cfe <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xb6>
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	6808      	ldr	r0, [r1, #0]
 8008c66:	bf14      	ite	ne
 8008c68:	f04f 0900 	movne.w	r9, #0
 8008c6c:	f04f 090b 	moveq.w	r9, #11
 8008c70:	f7f7 fc6a 	bl	8000548 <__aeabi_f2d>
 8008c74:	45c8      	cmp	r8, r9
 8008c76:	4606      	mov	r6, r0
 8008c78:	460f      	mov	r7, r1
 8008c7a:	4640      	mov	r0, r8
 8008c7c:	bf38      	it	cc
 8008c7e:	4648      	movcc	r0, r9
 8008c80:	f7f7 fc40 	bl	8000504 <__aeabi_ui2d>
 8008c84:	4632      	mov	r2, r6
 8008c86:	463b      	mov	r3, r7
 8008c88:	f7f7 fde0 	bl	800084c <__aeabi_ddiv>
 8008c8c:	ec41 0b18 	vmov	d8, r0, r1
 8008c90:	4650      	mov	r0, sl
 8008c92:	f7f7 fc37 	bl	8000504 <__aeabi_ui2d>
 8008c96:	ec53 2b18 	vmov	r2, r3, d8
 8008c9a:	4680      	mov	r8, r0
 8008c9c:	4689      	mov	r9, r1
 8008c9e:	f7f7 ff27 	bl	8000af0 <__aeabi_dcmple>
 8008ca2:	b1e8      	cbz	r0, 8008ce0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x98>
 8008ca4:	eeb0 0a48 	vmov.f32	s0, s16
 8008ca8:	eef0 0a68 	vmov.f32	s1, s17
 8008cac:	f000 f838 	bl	8008d20 <floor>
 8008cb0:	4b15      	ldr	r3, [pc, #84]	; (8008d08 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xc0>)
 8008cb2:	ec51 0b10 	vmov	r0, r1, d0
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f7f7 fae8 	bl	800028c <__adddf3>
 8008cbc:	f7f7 ff74 	bl	8000ba8 <__aeabi_d2uiz>
 8008cc0:	ea4f 014a 	mov.w	r1, sl, lsl #1
 8008cc4:	4281      	cmp	r1, r0
 8008cc6:	bf38      	it	cc
 8008cc8:	4601      	movcc	r1, r0
 8008cca:	4628      	mov	r0, r5
 8008ccc:	f7ff ff78 	bl	8008bc0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	7023      	strb	r3, [r4, #0]
 8008cd4:	6060      	str	r0, [r4, #4]
 8008cd6:	ecbd 8b02 	vpop	{d8}
 8008cda:	4620      	mov	r0, r4
 8008cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce0:	4642      	mov	r2, r8
 8008ce2:	464b      	mov	r3, r9
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	4639      	mov	r1, r7
 8008ce8:	f7f7 fc86 	bl	80005f8 <__aeabi_dmul>
 8008cec:	ec41 0b10 	vmov	d0, r0, r1
 8008cf0:	f000 f816 	bl	8008d20 <floor>
 8008cf4:	ec51 0b10 	vmov	r0, r1, d0
 8008cf8:	f7f7 ff56 	bl	8000ba8 <__aeabi_d2uiz>
 8008cfc:	6068      	str	r0, [r5, #4]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	e9c4 3300 	strd	r3, r3, [r4]
 8008d04:	e7e7      	b.n	8008cd6 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x8e>
 8008d06:	bf00      	nop
 8008d08:	3ff00000 	.word	0x3ff00000

08008d0c <_ZdlPv>:
 8008d0c:	f000 bb8c 	b.w	8009428 <free>

08008d10 <_ZSt15get_new_handlerv>:
 8008d10:	4b02      	ldr	r3, [pc, #8]	; (8008d1c <_ZSt15get_new_handlerv+0xc>)
 8008d12:	6818      	ldr	r0, [r3, #0]
 8008d14:	f3bf 8f5b 	dmb	ish
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	20004db8 	.word	0x20004db8

08008d20 <floor>:
 8008d20:	ec51 0b10 	vmov	r0, r1, d0
 8008d24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d2c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8008d30:	2e13      	cmp	r6, #19
 8008d32:	ee10 5a10 	vmov	r5, s0
 8008d36:	ee10 8a10 	vmov	r8, s0
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	dc31      	bgt.n	8008da2 <floor+0x82>
 8008d3e:	2e00      	cmp	r6, #0
 8008d40:	da14      	bge.n	8008d6c <floor+0x4c>
 8008d42:	a333      	add	r3, pc, #204	; (adr r3, 8008e10 <floor+0xf0>)
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	f7f7 faa0 	bl	800028c <__adddf3>
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2300      	movs	r3, #0
 8008d50:	f7f7 fee2 	bl	8000b18 <__aeabi_dcmpgt>
 8008d54:	b138      	cbz	r0, 8008d66 <floor+0x46>
 8008d56:	2c00      	cmp	r4, #0
 8008d58:	da53      	bge.n	8008e02 <floor+0xe2>
 8008d5a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008d5e:	4325      	orrs	r5, r4
 8008d60:	d052      	beq.n	8008e08 <floor+0xe8>
 8008d62:	4c2d      	ldr	r4, [pc, #180]	; (8008e18 <floor+0xf8>)
 8008d64:	2500      	movs	r5, #0
 8008d66:	4621      	mov	r1, r4
 8008d68:	4628      	mov	r0, r5
 8008d6a:	e024      	b.n	8008db6 <floor+0x96>
 8008d6c:	4f2b      	ldr	r7, [pc, #172]	; (8008e1c <floor+0xfc>)
 8008d6e:	4137      	asrs	r7, r6
 8008d70:	ea01 0307 	and.w	r3, r1, r7
 8008d74:	4303      	orrs	r3, r0
 8008d76:	d01e      	beq.n	8008db6 <floor+0x96>
 8008d78:	a325      	add	r3, pc, #148	; (adr r3, 8008e10 <floor+0xf0>)
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	f7f7 fa85 	bl	800028c <__adddf3>
 8008d82:	2200      	movs	r2, #0
 8008d84:	2300      	movs	r3, #0
 8008d86:	f7f7 fec7 	bl	8000b18 <__aeabi_dcmpgt>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d0eb      	beq.n	8008d66 <floor+0x46>
 8008d8e:	2c00      	cmp	r4, #0
 8008d90:	bfbe      	ittt	lt
 8008d92:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008d96:	4133      	asrlt	r3, r6
 8008d98:	18e4      	addlt	r4, r4, r3
 8008d9a:	ea24 0407 	bic.w	r4, r4, r7
 8008d9e:	2500      	movs	r5, #0
 8008da0:	e7e1      	b.n	8008d66 <floor+0x46>
 8008da2:	2e33      	cmp	r6, #51	; 0x33
 8008da4:	dd0b      	ble.n	8008dbe <floor+0x9e>
 8008da6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008daa:	d104      	bne.n	8008db6 <floor+0x96>
 8008dac:	ee10 2a10 	vmov	r2, s0
 8008db0:	460b      	mov	r3, r1
 8008db2:	f7f7 fa6b 	bl	800028c <__adddf3>
 8008db6:	ec41 0b10 	vmov	d0, r0, r1
 8008dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dbe:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8008dc2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008dc6:	40df      	lsrs	r7, r3
 8008dc8:	4238      	tst	r0, r7
 8008dca:	d0f4      	beq.n	8008db6 <floor+0x96>
 8008dcc:	a310      	add	r3, pc, #64	; (adr r3, 8008e10 <floor+0xf0>)
 8008dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd2:	f7f7 fa5b 	bl	800028c <__adddf3>
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f7f7 fe9d 	bl	8000b18 <__aeabi_dcmpgt>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d0c1      	beq.n	8008d66 <floor+0x46>
 8008de2:	2c00      	cmp	r4, #0
 8008de4:	da0a      	bge.n	8008dfc <floor+0xdc>
 8008de6:	2e14      	cmp	r6, #20
 8008de8:	d101      	bne.n	8008dee <floor+0xce>
 8008dea:	3401      	adds	r4, #1
 8008dec:	e006      	b.n	8008dfc <floor+0xdc>
 8008dee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008df2:	2301      	movs	r3, #1
 8008df4:	40b3      	lsls	r3, r6
 8008df6:	441d      	add	r5, r3
 8008df8:	45a8      	cmp	r8, r5
 8008dfa:	d8f6      	bhi.n	8008dea <floor+0xca>
 8008dfc:	ea25 0507 	bic.w	r5, r5, r7
 8008e00:	e7b1      	b.n	8008d66 <floor+0x46>
 8008e02:	2500      	movs	r5, #0
 8008e04:	462c      	mov	r4, r5
 8008e06:	e7ae      	b.n	8008d66 <floor+0x46>
 8008e08:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008e0c:	e7ab      	b.n	8008d66 <floor+0x46>
 8008e0e:	bf00      	nop
 8008e10:	8800759c 	.word	0x8800759c
 8008e14:	7e37e43c 	.word	0x7e37e43c
 8008e18:	bff00000 	.word	0xbff00000
 8008e1c:	000fffff 	.word	0x000fffff

08008e20 <abort>:
 8008e20:	b508      	push	{r3, lr}
 8008e22:	2006      	movs	r0, #6
 8008e24:	f000 fe6c 	bl	8009b00 <raise>
 8008e28:	2001      	movs	r0, #1
 8008e2a:	f7fa fafe 	bl	800342a <_exit>
	...

08008e30 <__assert_func>:
 8008e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e32:	4614      	mov	r4, r2
 8008e34:	461a      	mov	r2, r3
 8008e36:	4b09      	ldr	r3, [pc, #36]	; (8008e5c <__assert_func+0x2c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4605      	mov	r5, r0
 8008e3c:	68d8      	ldr	r0, [r3, #12]
 8008e3e:	b14c      	cbz	r4, 8008e54 <__assert_func+0x24>
 8008e40:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <__assert_func+0x30>)
 8008e42:	9100      	str	r1, [sp, #0]
 8008e44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e48:	4906      	ldr	r1, [pc, #24]	; (8008e64 <__assert_func+0x34>)
 8008e4a:	462b      	mov	r3, r5
 8008e4c:	f000 fdf4 	bl	8009a38 <fiprintf>
 8008e50:	f7ff ffe6 	bl	8008e20 <abort>
 8008e54:	4b04      	ldr	r3, [pc, #16]	; (8008e68 <__assert_func+0x38>)
 8008e56:	461c      	mov	r4, r3
 8008e58:	e7f3      	b.n	8008e42 <__assert_func+0x12>
 8008e5a:	bf00      	nop
 8008e5c:	2000006c 	.word	0x2000006c
 8008e60:	0800c00e 	.word	0x0800c00e
 8008e64:	0800c01b 	.word	0x0800c01b
 8008e68:	0800c049 	.word	0x0800c049

08008e6c <__cvt>:
 8008e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e70:	ec55 4b10 	vmov	r4, r5, d0
 8008e74:	2d00      	cmp	r5, #0
 8008e76:	460e      	mov	r6, r1
 8008e78:	4619      	mov	r1, r3
 8008e7a:	462b      	mov	r3, r5
 8008e7c:	bfbb      	ittet	lt
 8008e7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008e82:	461d      	movlt	r5, r3
 8008e84:	2300      	movge	r3, #0
 8008e86:	232d      	movlt	r3, #45	; 0x2d
 8008e88:	700b      	strb	r3, [r1, #0]
 8008e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008e90:	4691      	mov	r9, r2
 8008e92:	f023 0820 	bic.w	r8, r3, #32
 8008e96:	bfbc      	itt	lt
 8008e98:	4622      	movlt	r2, r4
 8008e9a:	4614      	movlt	r4, r2
 8008e9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ea0:	d005      	beq.n	8008eae <__cvt+0x42>
 8008ea2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ea6:	d100      	bne.n	8008eaa <__cvt+0x3e>
 8008ea8:	3601      	adds	r6, #1
 8008eaa:	2102      	movs	r1, #2
 8008eac:	e000      	b.n	8008eb0 <__cvt+0x44>
 8008eae:	2103      	movs	r1, #3
 8008eb0:	ab03      	add	r3, sp, #12
 8008eb2:	9301      	str	r3, [sp, #4]
 8008eb4:	ab02      	add	r3, sp, #8
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	ec45 4b10 	vmov	d0, r4, r5
 8008ebc:	4653      	mov	r3, sl
 8008ebe:	4632      	mov	r2, r6
 8008ec0:	f000 ff0e 	bl	8009ce0 <_dtoa_r>
 8008ec4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ec8:	4607      	mov	r7, r0
 8008eca:	d102      	bne.n	8008ed2 <__cvt+0x66>
 8008ecc:	f019 0f01 	tst.w	r9, #1
 8008ed0:	d022      	beq.n	8008f18 <__cvt+0xac>
 8008ed2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ed6:	eb07 0906 	add.w	r9, r7, r6
 8008eda:	d110      	bne.n	8008efe <__cvt+0x92>
 8008edc:	783b      	ldrb	r3, [r7, #0]
 8008ede:	2b30      	cmp	r3, #48	; 0x30
 8008ee0:	d10a      	bne.n	8008ef8 <__cvt+0x8c>
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	4629      	mov	r1, r5
 8008eea:	f7f7 fded 	bl	8000ac8 <__aeabi_dcmpeq>
 8008eee:	b918      	cbnz	r0, 8008ef8 <__cvt+0x8c>
 8008ef0:	f1c6 0601 	rsb	r6, r6, #1
 8008ef4:	f8ca 6000 	str.w	r6, [sl]
 8008ef8:	f8da 3000 	ldr.w	r3, [sl]
 8008efc:	4499      	add	r9, r3
 8008efe:	2200      	movs	r2, #0
 8008f00:	2300      	movs	r3, #0
 8008f02:	4620      	mov	r0, r4
 8008f04:	4629      	mov	r1, r5
 8008f06:	f7f7 fddf 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f0a:	b108      	cbz	r0, 8008f10 <__cvt+0xa4>
 8008f0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f10:	2230      	movs	r2, #48	; 0x30
 8008f12:	9b03      	ldr	r3, [sp, #12]
 8008f14:	454b      	cmp	r3, r9
 8008f16:	d307      	bcc.n	8008f28 <__cvt+0xbc>
 8008f18:	9b03      	ldr	r3, [sp, #12]
 8008f1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f1c:	1bdb      	subs	r3, r3, r7
 8008f1e:	4638      	mov	r0, r7
 8008f20:	6013      	str	r3, [r2, #0]
 8008f22:	b004      	add	sp, #16
 8008f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f28:	1c59      	adds	r1, r3, #1
 8008f2a:	9103      	str	r1, [sp, #12]
 8008f2c:	701a      	strb	r2, [r3, #0]
 8008f2e:	e7f0      	b.n	8008f12 <__cvt+0xa6>

08008f30 <__exponent>:
 8008f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f32:	4603      	mov	r3, r0
 8008f34:	2900      	cmp	r1, #0
 8008f36:	bfb8      	it	lt
 8008f38:	4249      	neglt	r1, r1
 8008f3a:	f803 2b02 	strb.w	r2, [r3], #2
 8008f3e:	bfb4      	ite	lt
 8008f40:	222d      	movlt	r2, #45	; 0x2d
 8008f42:	222b      	movge	r2, #43	; 0x2b
 8008f44:	2909      	cmp	r1, #9
 8008f46:	7042      	strb	r2, [r0, #1]
 8008f48:	dd2a      	ble.n	8008fa0 <__exponent+0x70>
 8008f4a:	f10d 0207 	add.w	r2, sp, #7
 8008f4e:	4617      	mov	r7, r2
 8008f50:	260a      	movs	r6, #10
 8008f52:	4694      	mov	ip, r2
 8008f54:	fb91 f5f6 	sdiv	r5, r1, r6
 8008f58:	fb06 1415 	mls	r4, r6, r5, r1
 8008f5c:	3430      	adds	r4, #48	; 0x30
 8008f5e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008f62:	460c      	mov	r4, r1
 8008f64:	2c63      	cmp	r4, #99	; 0x63
 8008f66:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	dcf1      	bgt.n	8008f52 <__exponent+0x22>
 8008f6e:	3130      	adds	r1, #48	; 0x30
 8008f70:	f1ac 0402 	sub.w	r4, ip, #2
 8008f74:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008f78:	1c41      	adds	r1, r0, #1
 8008f7a:	4622      	mov	r2, r4
 8008f7c:	42ba      	cmp	r2, r7
 8008f7e:	d30a      	bcc.n	8008f96 <__exponent+0x66>
 8008f80:	f10d 0209 	add.w	r2, sp, #9
 8008f84:	eba2 020c 	sub.w	r2, r2, ip
 8008f88:	42bc      	cmp	r4, r7
 8008f8a:	bf88      	it	hi
 8008f8c:	2200      	movhi	r2, #0
 8008f8e:	4413      	add	r3, r2
 8008f90:	1a18      	subs	r0, r3, r0
 8008f92:	b003      	add	sp, #12
 8008f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f96:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008f9a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008f9e:	e7ed      	b.n	8008f7c <__exponent+0x4c>
 8008fa0:	2330      	movs	r3, #48	; 0x30
 8008fa2:	3130      	adds	r1, #48	; 0x30
 8008fa4:	7083      	strb	r3, [r0, #2]
 8008fa6:	70c1      	strb	r1, [r0, #3]
 8008fa8:	1d03      	adds	r3, r0, #4
 8008faa:	e7f1      	b.n	8008f90 <__exponent+0x60>

08008fac <_printf_float>:
 8008fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb0:	ed2d 8b02 	vpush	{d8}
 8008fb4:	b08d      	sub	sp, #52	; 0x34
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008fbc:	4616      	mov	r6, r2
 8008fbe:	461f      	mov	r7, r3
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	f000 fd71 	bl	8009aa8 <_localeconv_r>
 8008fc6:	f8d0 a000 	ldr.w	sl, [r0]
 8008fca:	4650      	mov	r0, sl
 8008fcc:	f7f7 f950 	bl	8000270 <strlen>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	9305      	str	r3, [sp, #20]
 8008fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8008fdc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008fe0:	3307      	adds	r3, #7
 8008fe2:	f023 0307 	bic.w	r3, r3, #7
 8008fe6:	f103 0208 	add.w	r2, r3, #8
 8008fea:	f8c8 2000 	str.w	r2, [r8]
 8008fee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ff2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ff6:	9307      	str	r3, [sp, #28]
 8008ff8:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ffc:	ee08 0a10 	vmov	s16, r0
 8009000:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009004:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009008:	4b9e      	ldr	r3, [pc, #632]	; (8009284 <_printf_float+0x2d8>)
 800900a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800900e:	f7f7 fd8d 	bl	8000b2c <__aeabi_dcmpun>
 8009012:	bb88      	cbnz	r0, 8009078 <_printf_float+0xcc>
 8009014:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009018:	4b9a      	ldr	r3, [pc, #616]	; (8009284 <_printf_float+0x2d8>)
 800901a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800901e:	f7f7 fd67 	bl	8000af0 <__aeabi_dcmple>
 8009022:	bb48      	cbnz	r0, 8009078 <_printf_float+0xcc>
 8009024:	2200      	movs	r2, #0
 8009026:	2300      	movs	r3, #0
 8009028:	4640      	mov	r0, r8
 800902a:	4649      	mov	r1, r9
 800902c:	f7f7 fd56 	bl	8000adc <__aeabi_dcmplt>
 8009030:	b110      	cbz	r0, 8009038 <_printf_float+0x8c>
 8009032:	232d      	movs	r3, #45	; 0x2d
 8009034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009038:	4a93      	ldr	r2, [pc, #588]	; (8009288 <_printf_float+0x2dc>)
 800903a:	4b94      	ldr	r3, [pc, #592]	; (800928c <_printf_float+0x2e0>)
 800903c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009040:	bf94      	ite	ls
 8009042:	4690      	movls	r8, r2
 8009044:	4698      	movhi	r8, r3
 8009046:	2303      	movs	r3, #3
 8009048:	6123      	str	r3, [r4, #16]
 800904a:	9b05      	ldr	r3, [sp, #20]
 800904c:	f023 0304 	bic.w	r3, r3, #4
 8009050:	6023      	str	r3, [r4, #0]
 8009052:	f04f 0900 	mov.w	r9, #0
 8009056:	9700      	str	r7, [sp, #0]
 8009058:	4633      	mov	r3, r6
 800905a:	aa0b      	add	r2, sp, #44	; 0x2c
 800905c:	4621      	mov	r1, r4
 800905e:	4628      	mov	r0, r5
 8009060:	f000 fa8a 	bl	8009578 <_printf_common>
 8009064:	3001      	adds	r0, #1
 8009066:	f040 8090 	bne.w	800918a <_printf_float+0x1de>
 800906a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800906e:	b00d      	add	sp, #52	; 0x34
 8009070:	ecbd 8b02 	vpop	{d8}
 8009074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009078:	4642      	mov	r2, r8
 800907a:	464b      	mov	r3, r9
 800907c:	4640      	mov	r0, r8
 800907e:	4649      	mov	r1, r9
 8009080:	f7f7 fd54 	bl	8000b2c <__aeabi_dcmpun>
 8009084:	b140      	cbz	r0, 8009098 <_printf_float+0xec>
 8009086:	464b      	mov	r3, r9
 8009088:	2b00      	cmp	r3, #0
 800908a:	bfbc      	itt	lt
 800908c:	232d      	movlt	r3, #45	; 0x2d
 800908e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009092:	4a7f      	ldr	r2, [pc, #508]	; (8009290 <_printf_float+0x2e4>)
 8009094:	4b7f      	ldr	r3, [pc, #508]	; (8009294 <_printf_float+0x2e8>)
 8009096:	e7d1      	b.n	800903c <_printf_float+0x90>
 8009098:	6863      	ldr	r3, [r4, #4]
 800909a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800909e:	9206      	str	r2, [sp, #24]
 80090a0:	1c5a      	adds	r2, r3, #1
 80090a2:	d13f      	bne.n	8009124 <_printf_float+0x178>
 80090a4:	2306      	movs	r3, #6
 80090a6:	6063      	str	r3, [r4, #4]
 80090a8:	9b05      	ldr	r3, [sp, #20]
 80090aa:	6861      	ldr	r1, [r4, #4]
 80090ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80090b0:	2300      	movs	r3, #0
 80090b2:	9303      	str	r3, [sp, #12]
 80090b4:	ab0a      	add	r3, sp, #40	; 0x28
 80090b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80090ba:	ab09      	add	r3, sp, #36	; 0x24
 80090bc:	ec49 8b10 	vmov	d0, r8, r9
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	6022      	str	r2, [r4, #0]
 80090c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80090c8:	4628      	mov	r0, r5
 80090ca:	f7ff fecf 	bl	8008e6c <__cvt>
 80090ce:	9b06      	ldr	r3, [sp, #24]
 80090d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090d2:	2b47      	cmp	r3, #71	; 0x47
 80090d4:	4680      	mov	r8, r0
 80090d6:	d108      	bne.n	80090ea <_printf_float+0x13e>
 80090d8:	1cc8      	adds	r0, r1, #3
 80090da:	db02      	blt.n	80090e2 <_printf_float+0x136>
 80090dc:	6863      	ldr	r3, [r4, #4]
 80090de:	4299      	cmp	r1, r3
 80090e0:	dd41      	ble.n	8009166 <_printf_float+0x1ba>
 80090e2:	f1ab 0302 	sub.w	r3, fp, #2
 80090e6:	fa5f fb83 	uxtb.w	fp, r3
 80090ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80090ee:	d820      	bhi.n	8009132 <_printf_float+0x186>
 80090f0:	3901      	subs	r1, #1
 80090f2:	465a      	mov	r2, fp
 80090f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80090f8:	9109      	str	r1, [sp, #36]	; 0x24
 80090fa:	f7ff ff19 	bl	8008f30 <__exponent>
 80090fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009100:	1813      	adds	r3, r2, r0
 8009102:	2a01      	cmp	r2, #1
 8009104:	4681      	mov	r9, r0
 8009106:	6123      	str	r3, [r4, #16]
 8009108:	dc02      	bgt.n	8009110 <_printf_float+0x164>
 800910a:	6822      	ldr	r2, [r4, #0]
 800910c:	07d2      	lsls	r2, r2, #31
 800910e:	d501      	bpl.n	8009114 <_printf_float+0x168>
 8009110:	3301      	adds	r3, #1
 8009112:	6123      	str	r3, [r4, #16]
 8009114:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009118:	2b00      	cmp	r3, #0
 800911a:	d09c      	beq.n	8009056 <_printf_float+0xaa>
 800911c:	232d      	movs	r3, #45	; 0x2d
 800911e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009122:	e798      	b.n	8009056 <_printf_float+0xaa>
 8009124:	9a06      	ldr	r2, [sp, #24]
 8009126:	2a47      	cmp	r2, #71	; 0x47
 8009128:	d1be      	bne.n	80090a8 <_printf_float+0xfc>
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1bc      	bne.n	80090a8 <_printf_float+0xfc>
 800912e:	2301      	movs	r3, #1
 8009130:	e7b9      	b.n	80090a6 <_printf_float+0xfa>
 8009132:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009136:	d118      	bne.n	800916a <_printf_float+0x1be>
 8009138:	2900      	cmp	r1, #0
 800913a:	6863      	ldr	r3, [r4, #4]
 800913c:	dd0b      	ble.n	8009156 <_printf_float+0x1aa>
 800913e:	6121      	str	r1, [r4, #16]
 8009140:	b913      	cbnz	r3, 8009148 <_printf_float+0x19c>
 8009142:	6822      	ldr	r2, [r4, #0]
 8009144:	07d0      	lsls	r0, r2, #31
 8009146:	d502      	bpl.n	800914e <_printf_float+0x1a2>
 8009148:	3301      	adds	r3, #1
 800914a:	440b      	add	r3, r1
 800914c:	6123      	str	r3, [r4, #16]
 800914e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009150:	f04f 0900 	mov.w	r9, #0
 8009154:	e7de      	b.n	8009114 <_printf_float+0x168>
 8009156:	b913      	cbnz	r3, 800915e <_printf_float+0x1b2>
 8009158:	6822      	ldr	r2, [r4, #0]
 800915a:	07d2      	lsls	r2, r2, #31
 800915c:	d501      	bpl.n	8009162 <_printf_float+0x1b6>
 800915e:	3302      	adds	r3, #2
 8009160:	e7f4      	b.n	800914c <_printf_float+0x1a0>
 8009162:	2301      	movs	r3, #1
 8009164:	e7f2      	b.n	800914c <_printf_float+0x1a0>
 8009166:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800916a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800916c:	4299      	cmp	r1, r3
 800916e:	db05      	blt.n	800917c <_printf_float+0x1d0>
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	6121      	str	r1, [r4, #16]
 8009174:	07d8      	lsls	r0, r3, #31
 8009176:	d5ea      	bpl.n	800914e <_printf_float+0x1a2>
 8009178:	1c4b      	adds	r3, r1, #1
 800917a:	e7e7      	b.n	800914c <_printf_float+0x1a0>
 800917c:	2900      	cmp	r1, #0
 800917e:	bfd4      	ite	le
 8009180:	f1c1 0202 	rsble	r2, r1, #2
 8009184:	2201      	movgt	r2, #1
 8009186:	4413      	add	r3, r2
 8009188:	e7e0      	b.n	800914c <_printf_float+0x1a0>
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	055a      	lsls	r2, r3, #21
 800918e:	d407      	bmi.n	80091a0 <_printf_float+0x1f4>
 8009190:	6923      	ldr	r3, [r4, #16]
 8009192:	4642      	mov	r2, r8
 8009194:	4631      	mov	r1, r6
 8009196:	4628      	mov	r0, r5
 8009198:	47b8      	blx	r7
 800919a:	3001      	adds	r0, #1
 800919c:	d12c      	bne.n	80091f8 <_printf_float+0x24c>
 800919e:	e764      	b.n	800906a <_printf_float+0xbe>
 80091a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091a4:	f240 80e0 	bls.w	8009368 <_printf_float+0x3bc>
 80091a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091ac:	2200      	movs	r2, #0
 80091ae:	2300      	movs	r3, #0
 80091b0:	f7f7 fc8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d034      	beq.n	8009222 <_printf_float+0x276>
 80091b8:	4a37      	ldr	r2, [pc, #220]	; (8009298 <_printf_float+0x2ec>)
 80091ba:	2301      	movs	r3, #1
 80091bc:	4631      	mov	r1, r6
 80091be:	4628      	mov	r0, r5
 80091c0:	47b8      	blx	r7
 80091c2:	3001      	adds	r0, #1
 80091c4:	f43f af51 	beq.w	800906a <_printf_float+0xbe>
 80091c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091cc:	429a      	cmp	r2, r3
 80091ce:	db02      	blt.n	80091d6 <_printf_float+0x22a>
 80091d0:	6823      	ldr	r3, [r4, #0]
 80091d2:	07d8      	lsls	r0, r3, #31
 80091d4:	d510      	bpl.n	80091f8 <_printf_float+0x24c>
 80091d6:	ee18 3a10 	vmov	r3, s16
 80091da:	4652      	mov	r2, sl
 80091dc:	4631      	mov	r1, r6
 80091de:	4628      	mov	r0, r5
 80091e0:	47b8      	blx	r7
 80091e2:	3001      	adds	r0, #1
 80091e4:	f43f af41 	beq.w	800906a <_printf_float+0xbe>
 80091e8:	f04f 0800 	mov.w	r8, #0
 80091ec:	f104 091a 	add.w	r9, r4, #26
 80091f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091f2:	3b01      	subs	r3, #1
 80091f4:	4543      	cmp	r3, r8
 80091f6:	dc09      	bgt.n	800920c <_printf_float+0x260>
 80091f8:	6823      	ldr	r3, [r4, #0]
 80091fa:	079b      	lsls	r3, r3, #30
 80091fc:	f100 8107 	bmi.w	800940e <_printf_float+0x462>
 8009200:	68e0      	ldr	r0, [r4, #12]
 8009202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009204:	4298      	cmp	r0, r3
 8009206:	bfb8      	it	lt
 8009208:	4618      	movlt	r0, r3
 800920a:	e730      	b.n	800906e <_printf_float+0xc2>
 800920c:	2301      	movs	r3, #1
 800920e:	464a      	mov	r2, r9
 8009210:	4631      	mov	r1, r6
 8009212:	4628      	mov	r0, r5
 8009214:	47b8      	blx	r7
 8009216:	3001      	adds	r0, #1
 8009218:	f43f af27 	beq.w	800906a <_printf_float+0xbe>
 800921c:	f108 0801 	add.w	r8, r8, #1
 8009220:	e7e6      	b.n	80091f0 <_printf_float+0x244>
 8009222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009224:	2b00      	cmp	r3, #0
 8009226:	dc39      	bgt.n	800929c <_printf_float+0x2f0>
 8009228:	4a1b      	ldr	r2, [pc, #108]	; (8009298 <_printf_float+0x2ec>)
 800922a:	2301      	movs	r3, #1
 800922c:	4631      	mov	r1, r6
 800922e:	4628      	mov	r0, r5
 8009230:	47b8      	blx	r7
 8009232:	3001      	adds	r0, #1
 8009234:	f43f af19 	beq.w	800906a <_printf_float+0xbe>
 8009238:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800923c:	4313      	orrs	r3, r2
 800923e:	d102      	bne.n	8009246 <_printf_float+0x29a>
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	07d9      	lsls	r1, r3, #31
 8009244:	d5d8      	bpl.n	80091f8 <_printf_float+0x24c>
 8009246:	ee18 3a10 	vmov	r3, s16
 800924a:	4652      	mov	r2, sl
 800924c:	4631      	mov	r1, r6
 800924e:	4628      	mov	r0, r5
 8009250:	47b8      	blx	r7
 8009252:	3001      	adds	r0, #1
 8009254:	f43f af09 	beq.w	800906a <_printf_float+0xbe>
 8009258:	f04f 0900 	mov.w	r9, #0
 800925c:	f104 0a1a 	add.w	sl, r4, #26
 8009260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009262:	425b      	negs	r3, r3
 8009264:	454b      	cmp	r3, r9
 8009266:	dc01      	bgt.n	800926c <_printf_float+0x2c0>
 8009268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800926a:	e792      	b.n	8009192 <_printf_float+0x1e6>
 800926c:	2301      	movs	r3, #1
 800926e:	4652      	mov	r2, sl
 8009270:	4631      	mov	r1, r6
 8009272:	4628      	mov	r0, r5
 8009274:	47b8      	blx	r7
 8009276:	3001      	adds	r0, #1
 8009278:	f43f aef7 	beq.w	800906a <_printf_float+0xbe>
 800927c:	f109 0901 	add.w	r9, r9, #1
 8009280:	e7ee      	b.n	8009260 <_printf_float+0x2b4>
 8009282:	bf00      	nop
 8009284:	7fefffff 	.word	0x7fefffff
 8009288:	0800c04a 	.word	0x0800c04a
 800928c:	0800c04e 	.word	0x0800c04e
 8009290:	0800c052 	.word	0x0800c052
 8009294:	0800c056 	.word	0x0800c056
 8009298:	0800c05a 	.word	0x0800c05a
 800929c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800929e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092a0:	429a      	cmp	r2, r3
 80092a2:	bfa8      	it	ge
 80092a4:	461a      	movge	r2, r3
 80092a6:	2a00      	cmp	r2, #0
 80092a8:	4691      	mov	r9, r2
 80092aa:	dc37      	bgt.n	800931c <_printf_float+0x370>
 80092ac:	f04f 0b00 	mov.w	fp, #0
 80092b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092b4:	f104 021a 	add.w	r2, r4, #26
 80092b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092ba:	9305      	str	r3, [sp, #20]
 80092bc:	eba3 0309 	sub.w	r3, r3, r9
 80092c0:	455b      	cmp	r3, fp
 80092c2:	dc33      	bgt.n	800932c <_printf_float+0x380>
 80092c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092c8:	429a      	cmp	r2, r3
 80092ca:	db3b      	blt.n	8009344 <_printf_float+0x398>
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	07da      	lsls	r2, r3, #31
 80092d0:	d438      	bmi.n	8009344 <_printf_float+0x398>
 80092d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80092d6:	eba2 0903 	sub.w	r9, r2, r3
 80092da:	9b05      	ldr	r3, [sp, #20]
 80092dc:	1ad2      	subs	r2, r2, r3
 80092de:	4591      	cmp	r9, r2
 80092e0:	bfa8      	it	ge
 80092e2:	4691      	movge	r9, r2
 80092e4:	f1b9 0f00 	cmp.w	r9, #0
 80092e8:	dc35      	bgt.n	8009356 <_printf_float+0x3aa>
 80092ea:	f04f 0800 	mov.w	r8, #0
 80092ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092f2:	f104 0a1a 	add.w	sl, r4, #26
 80092f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092fa:	1a9b      	subs	r3, r3, r2
 80092fc:	eba3 0309 	sub.w	r3, r3, r9
 8009300:	4543      	cmp	r3, r8
 8009302:	f77f af79 	ble.w	80091f8 <_printf_float+0x24c>
 8009306:	2301      	movs	r3, #1
 8009308:	4652      	mov	r2, sl
 800930a:	4631      	mov	r1, r6
 800930c:	4628      	mov	r0, r5
 800930e:	47b8      	blx	r7
 8009310:	3001      	adds	r0, #1
 8009312:	f43f aeaa 	beq.w	800906a <_printf_float+0xbe>
 8009316:	f108 0801 	add.w	r8, r8, #1
 800931a:	e7ec      	b.n	80092f6 <_printf_float+0x34a>
 800931c:	4613      	mov	r3, r2
 800931e:	4631      	mov	r1, r6
 8009320:	4642      	mov	r2, r8
 8009322:	4628      	mov	r0, r5
 8009324:	47b8      	blx	r7
 8009326:	3001      	adds	r0, #1
 8009328:	d1c0      	bne.n	80092ac <_printf_float+0x300>
 800932a:	e69e      	b.n	800906a <_printf_float+0xbe>
 800932c:	2301      	movs	r3, #1
 800932e:	4631      	mov	r1, r6
 8009330:	4628      	mov	r0, r5
 8009332:	9205      	str	r2, [sp, #20]
 8009334:	47b8      	blx	r7
 8009336:	3001      	adds	r0, #1
 8009338:	f43f ae97 	beq.w	800906a <_printf_float+0xbe>
 800933c:	9a05      	ldr	r2, [sp, #20]
 800933e:	f10b 0b01 	add.w	fp, fp, #1
 8009342:	e7b9      	b.n	80092b8 <_printf_float+0x30c>
 8009344:	ee18 3a10 	vmov	r3, s16
 8009348:	4652      	mov	r2, sl
 800934a:	4631      	mov	r1, r6
 800934c:	4628      	mov	r0, r5
 800934e:	47b8      	blx	r7
 8009350:	3001      	adds	r0, #1
 8009352:	d1be      	bne.n	80092d2 <_printf_float+0x326>
 8009354:	e689      	b.n	800906a <_printf_float+0xbe>
 8009356:	9a05      	ldr	r2, [sp, #20]
 8009358:	464b      	mov	r3, r9
 800935a:	4442      	add	r2, r8
 800935c:	4631      	mov	r1, r6
 800935e:	4628      	mov	r0, r5
 8009360:	47b8      	blx	r7
 8009362:	3001      	adds	r0, #1
 8009364:	d1c1      	bne.n	80092ea <_printf_float+0x33e>
 8009366:	e680      	b.n	800906a <_printf_float+0xbe>
 8009368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800936a:	2a01      	cmp	r2, #1
 800936c:	dc01      	bgt.n	8009372 <_printf_float+0x3c6>
 800936e:	07db      	lsls	r3, r3, #31
 8009370:	d53a      	bpl.n	80093e8 <_printf_float+0x43c>
 8009372:	2301      	movs	r3, #1
 8009374:	4642      	mov	r2, r8
 8009376:	4631      	mov	r1, r6
 8009378:	4628      	mov	r0, r5
 800937a:	47b8      	blx	r7
 800937c:	3001      	adds	r0, #1
 800937e:	f43f ae74 	beq.w	800906a <_printf_float+0xbe>
 8009382:	ee18 3a10 	vmov	r3, s16
 8009386:	4652      	mov	r2, sl
 8009388:	4631      	mov	r1, r6
 800938a:	4628      	mov	r0, r5
 800938c:	47b8      	blx	r7
 800938e:	3001      	adds	r0, #1
 8009390:	f43f ae6b 	beq.w	800906a <_printf_float+0xbe>
 8009394:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009398:	2200      	movs	r2, #0
 800939a:	2300      	movs	r3, #0
 800939c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80093a0:	f7f7 fb92 	bl	8000ac8 <__aeabi_dcmpeq>
 80093a4:	b9d8      	cbnz	r0, 80093de <_printf_float+0x432>
 80093a6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80093aa:	f108 0201 	add.w	r2, r8, #1
 80093ae:	4631      	mov	r1, r6
 80093b0:	4628      	mov	r0, r5
 80093b2:	47b8      	blx	r7
 80093b4:	3001      	adds	r0, #1
 80093b6:	d10e      	bne.n	80093d6 <_printf_float+0x42a>
 80093b8:	e657      	b.n	800906a <_printf_float+0xbe>
 80093ba:	2301      	movs	r3, #1
 80093bc:	4652      	mov	r2, sl
 80093be:	4631      	mov	r1, r6
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b8      	blx	r7
 80093c4:	3001      	adds	r0, #1
 80093c6:	f43f ae50 	beq.w	800906a <_printf_float+0xbe>
 80093ca:	f108 0801 	add.w	r8, r8, #1
 80093ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d0:	3b01      	subs	r3, #1
 80093d2:	4543      	cmp	r3, r8
 80093d4:	dcf1      	bgt.n	80093ba <_printf_float+0x40e>
 80093d6:	464b      	mov	r3, r9
 80093d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80093dc:	e6da      	b.n	8009194 <_printf_float+0x1e8>
 80093de:	f04f 0800 	mov.w	r8, #0
 80093e2:	f104 0a1a 	add.w	sl, r4, #26
 80093e6:	e7f2      	b.n	80093ce <_printf_float+0x422>
 80093e8:	2301      	movs	r3, #1
 80093ea:	4642      	mov	r2, r8
 80093ec:	e7df      	b.n	80093ae <_printf_float+0x402>
 80093ee:	2301      	movs	r3, #1
 80093f0:	464a      	mov	r2, r9
 80093f2:	4631      	mov	r1, r6
 80093f4:	4628      	mov	r0, r5
 80093f6:	47b8      	blx	r7
 80093f8:	3001      	adds	r0, #1
 80093fa:	f43f ae36 	beq.w	800906a <_printf_float+0xbe>
 80093fe:	f108 0801 	add.w	r8, r8, #1
 8009402:	68e3      	ldr	r3, [r4, #12]
 8009404:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009406:	1a5b      	subs	r3, r3, r1
 8009408:	4543      	cmp	r3, r8
 800940a:	dcf0      	bgt.n	80093ee <_printf_float+0x442>
 800940c:	e6f8      	b.n	8009200 <_printf_float+0x254>
 800940e:	f04f 0800 	mov.w	r8, #0
 8009412:	f104 0919 	add.w	r9, r4, #25
 8009416:	e7f4      	b.n	8009402 <_printf_float+0x456>

08009418 <malloc>:
 8009418:	4b02      	ldr	r3, [pc, #8]	; (8009424 <malloc+0xc>)
 800941a:	4601      	mov	r1, r0
 800941c:	6818      	ldr	r0, [r3, #0]
 800941e:	f000 b82b 	b.w	8009478 <_malloc_r>
 8009422:	bf00      	nop
 8009424:	2000006c 	.word	0x2000006c

08009428 <free>:
 8009428:	4b02      	ldr	r3, [pc, #8]	; (8009434 <free+0xc>)
 800942a:	4601      	mov	r1, r0
 800942c:	6818      	ldr	r0, [r3, #0]
 800942e:	f001 ba49 	b.w	800a8c4 <_free_r>
 8009432:	bf00      	nop
 8009434:	2000006c 	.word	0x2000006c

08009438 <sbrk_aligned>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	4e0e      	ldr	r6, [pc, #56]	; (8009474 <sbrk_aligned+0x3c>)
 800943c:	460c      	mov	r4, r1
 800943e:	6831      	ldr	r1, [r6, #0]
 8009440:	4605      	mov	r5, r0
 8009442:	b911      	cbnz	r1, 800944a <sbrk_aligned+0x12>
 8009444:	f000 fb78 	bl	8009b38 <_sbrk_r>
 8009448:	6030      	str	r0, [r6, #0]
 800944a:	4621      	mov	r1, r4
 800944c:	4628      	mov	r0, r5
 800944e:	f000 fb73 	bl	8009b38 <_sbrk_r>
 8009452:	1c43      	adds	r3, r0, #1
 8009454:	d00a      	beq.n	800946c <sbrk_aligned+0x34>
 8009456:	1cc4      	adds	r4, r0, #3
 8009458:	f024 0403 	bic.w	r4, r4, #3
 800945c:	42a0      	cmp	r0, r4
 800945e:	d007      	beq.n	8009470 <sbrk_aligned+0x38>
 8009460:	1a21      	subs	r1, r4, r0
 8009462:	4628      	mov	r0, r5
 8009464:	f000 fb68 	bl	8009b38 <_sbrk_r>
 8009468:	3001      	adds	r0, #1
 800946a:	d101      	bne.n	8009470 <sbrk_aligned+0x38>
 800946c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009470:	4620      	mov	r0, r4
 8009472:	bd70      	pop	{r4, r5, r6, pc}
 8009474:	20004dc0 	.word	0x20004dc0

08009478 <_malloc_r>:
 8009478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800947c:	1ccd      	adds	r5, r1, #3
 800947e:	f025 0503 	bic.w	r5, r5, #3
 8009482:	3508      	adds	r5, #8
 8009484:	2d0c      	cmp	r5, #12
 8009486:	bf38      	it	cc
 8009488:	250c      	movcc	r5, #12
 800948a:	2d00      	cmp	r5, #0
 800948c:	4607      	mov	r7, r0
 800948e:	db01      	blt.n	8009494 <_malloc_r+0x1c>
 8009490:	42a9      	cmp	r1, r5
 8009492:	d905      	bls.n	80094a0 <_malloc_r+0x28>
 8009494:	230c      	movs	r3, #12
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	2600      	movs	r6, #0
 800949a:	4630      	mov	r0, r6
 800949c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009574 <_malloc_r+0xfc>
 80094a4:	f000 f9f8 	bl	8009898 <__malloc_lock>
 80094a8:	f8d8 3000 	ldr.w	r3, [r8]
 80094ac:	461c      	mov	r4, r3
 80094ae:	bb5c      	cbnz	r4, 8009508 <_malloc_r+0x90>
 80094b0:	4629      	mov	r1, r5
 80094b2:	4638      	mov	r0, r7
 80094b4:	f7ff ffc0 	bl	8009438 <sbrk_aligned>
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	4604      	mov	r4, r0
 80094bc:	d155      	bne.n	800956a <_malloc_r+0xf2>
 80094be:	f8d8 4000 	ldr.w	r4, [r8]
 80094c2:	4626      	mov	r6, r4
 80094c4:	2e00      	cmp	r6, #0
 80094c6:	d145      	bne.n	8009554 <_malloc_r+0xdc>
 80094c8:	2c00      	cmp	r4, #0
 80094ca:	d048      	beq.n	800955e <_malloc_r+0xe6>
 80094cc:	6823      	ldr	r3, [r4, #0]
 80094ce:	4631      	mov	r1, r6
 80094d0:	4638      	mov	r0, r7
 80094d2:	eb04 0903 	add.w	r9, r4, r3
 80094d6:	f000 fb2f 	bl	8009b38 <_sbrk_r>
 80094da:	4581      	cmp	r9, r0
 80094dc:	d13f      	bne.n	800955e <_malloc_r+0xe6>
 80094de:	6821      	ldr	r1, [r4, #0]
 80094e0:	1a6d      	subs	r5, r5, r1
 80094e2:	4629      	mov	r1, r5
 80094e4:	4638      	mov	r0, r7
 80094e6:	f7ff ffa7 	bl	8009438 <sbrk_aligned>
 80094ea:	3001      	adds	r0, #1
 80094ec:	d037      	beq.n	800955e <_malloc_r+0xe6>
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	442b      	add	r3, r5
 80094f2:	6023      	str	r3, [r4, #0]
 80094f4:	f8d8 3000 	ldr.w	r3, [r8]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d038      	beq.n	800956e <_malloc_r+0xf6>
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	42a2      	cmp	r2, r4
 8009500:	d12b      	bne.n	800955a <_malloc_r+0xe2>
 8009502:	2200      	movs	r2, #0
 8009504:	605a      	str	r2, [r3, #4]
 8009506:	e00f      	b.n	8009528 <_malloc_r+0xb0>
 8009508:	6822      	ldr	r2, [r4, #0]
 800950a:	1b52      	subs	r2, r2, r5
 800950c:	d41f      	bmi.n	800954e <_malloc_r+0xd6>
 800950e:	2a0b      	cmp	r2, #11
 8009510:	d917      	bls.n	8009542 <_malloc_r+0xca>
 8009512:	1961      	adds	r1, r4, r5
 8009514:	42a3      	cmp	r3, r4
 8009516:	6025      	str	r5, [r4, #0]
 8009518:	bf18      	it	ne
 800951a:	6059      	strne	r1, [r3, #4]
 800951c:	6863      	ldr	r3, [r4, #4]
 800951e:	bf08      	it	eq
 8009520:	f8c8 1000 	streq.w	r1, [r8]
 8009524:	5162      	str	r2, [r4, r5]
 8009526:	604b      	str	r3, [r1, #4]
 8009528:	4638      	mov	r0, r7
 800952a:	f104 060b 	add.w	r6, r4, #11
 800952e:	f000 f9b9 	bl	80098a4 <__malloc_unlock>
 8009532:	f026 0607 	bic.w	r6, r6, #7
 8009536:	1d23      	adds	r3, r4, #4
 8009538:	1af2      	subs	r2, r6, r3
 800953a:	d0ae      	beq.n	800949a <_malloc_r+0x22>
 800953c:	1b9b      	subs	r3, r3, r6
 800953e:	50a3      	str	r3, [r4, r2]
 8009540:	e7ab      	b.n	800949a <_malloc_r+0x22>
 8009542:	42a3      	cmp	r3, r4
 8009544:	6862      	ldr	r2, [r4, #4]
 8009546:	d1dd      	bne.n	8009504 <_malloc_r+0x8c>
 8009548:	f8c8 2000 	str.w	r2, [r8]
 800954c:	e7ec      	b.n	8009528 <_malloc_r+0xb0>
 800954e:	4623      	mov	r3, r4
 8009550:	6864      	ldr	r4, [r4, #4]
 8009552:	e7ac      	b.n	80094ae <_malloc_r+0x36>
 8009554:	4634      	mov	r4, r6
 8009556:	6876      	ldr	r6, [r6, #4]
 8009558:	e7b4      	b.n	80094c4 <_malloc_r+0x4c>
 800955a:	4613      	mov	r3, r2
 800955c:	e7cc      	b.n	80094f8 <_malloc_r+0x80>
 800955e:	230c      	movs	r3, #12
 8009560:	603b      	str	r3, [r7, #0]
 8009562:	4638      	mov	r0, r7
 8009564:	f000 f99e 	bl	80098a4 <__malloc_unlock>
 8009568:	e797      	b.n	800949a <_malloc_r+0x22>
 800956a:	6025      	str	r5, [r4, #0]
 800956c:	e7dc      	b.n	8009528 <_malloc_r+0xb0>
 800956e:	605b      	str	r3, [r3, #4]
 8009570:	deff      	udf	#255	; 0xff
 8009572:	bf00      	nop
 8009574:	20004dbc 	.word	0x20004dbc

08009578 <_printf_common>:
 8009578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800957c:	4616      	mov	r6, r2
 800957e:	4699      	mov	r9, r3
 8009580:	688a      	ldr	r2, [r1, #8]
 8009582:	690b      	ldr	r3, [r1, #16]
 8009584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009588:	4293      	cmp	r3, r2
 800958a:	bfb8      	it	lt
 800958c:	4613      	movlt	r3, r2
 800958e:	6033      	str	r3, [r6, #0]
 8009590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009594:	4607      	mov	r7, r0
 8009596:	460c      	mov	r4, r1
 8009598:	b10a      	cbz	r2, 800959e <_printf_common+0x26>
 800959a:	3301      	adds	r3, #1
 800959c:	6033      	str	r3, [r6, #0]
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	0699      	lsls	r1, r3, #26
 80095a2:	bf42      	ittt	mi
 80095a4:	6833      	ldrmi	r3, [r6, #0]
 80095a6:	3302      	addmi	r3, #2
 80095a8:	6033      	strmi	r3, [r6, #0]
 80095aa:	6825      	ldr	r5, [r4, #0]
 80095ac:	f015 0506 	ands.w	r5, r5, #6
 80095b0:	d106      	bne.n	80095c0 <_printf_common+0x48>
 80095b2:	f104 0a19 	add.w	sl, r4, #25
 80095b6:	68e3      	ldr	r3, [r4, #12]
 80095b8:	6832      	ldr	r2, [r6, #0]
 80095ba:	1a9b      	subs	r3, r3, r2
 80095bc:	42ab      	cmp	r3, r5
 80095be:	dc26      	bgt.n	800960e <_printf_common+0x96>
 80095c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095c4:	1e13      	subs	r3, r2, #0
 80095c6:	6822      	ldr	r2, [r4, #0]
 80095c8:	bf18      	it	ne
 80095ca:	2301      	movne	r3, #1
 80095cc:	0692      	lsls	r2, r2, #26
 80095ce:	d42b      	bmi.n	8009628 <_printf_common+0xb0>
 80095d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095d4:	4649      	mov	r1, r9
 80095d6:	4638      	mov	r0, r7
 80095d8:	47c0      	blx	r8
 80095da:	3001      	adds	r0, #1
 80095dc:	d01e      	beq.n	800961c <_printf_common+0xa4>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	6922      	ldr	r2, [r4, #16]
 80095e2:	f003 0306 	and.w	r3, r3, #6
 80095e6:	2b04      	cmp	r3, #4
 80095e8:	bf02      	ittt	eq
 80095ea:	68e5      	ldreq	r5, [r4, #12]
 80095ec:	6833      	ldreq	r3, [r6, #0]
 80095ee:	1aed      	subeq	r5, r5, r3
 80095f0:	68a3      	ldr	r3, [r4, #8]
 80095f2:	bf0c      	ite	eq
 80095f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095f8:	2500      	movne	r5, #0
 80095fa:	4293      	cmp	r3, r2
 80095fc:	bfc4      	itt	gt
 80095fe:	1a9b      	subgt	r3, r3, r2
 8009600:	18ed      	addgt	r5, r5, r3
 8009602:	2600      	movs	r6, #0
 8009604:	341a      	adds	r4, #26
 8009606:	42b5      	cmp	r5, r6
 8009608:	d11a      	bne.n	8009640 <_printf_common+0xc8>
 800960a:	2000      	movs	r0, #0
 800960c:	e008      	b.n	8009620 <_printf_common+0xa8>
 800960e:	2301      	movs	r3, #1
 8009610:	4652      	mov	r2, sl
 8009612:	4649      	mov	r1, r9
 8009614:	4638      	mov	r0, r7
 8009616:	47c0      	blx	r8
 8009618:	3001      	adds	r0, #1
 800961a:	d103      	bne.n	8009624 <_printf_common+0xac>
 800961c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009624:	3501      	adds	r5, #1
 8009626:	e7c6      	b.n	80095b6 <_printf_common+0x3e>
 8009628:	18e1      	adds	r1, r4, r3
 800962a:	1c5a      	adds	r2, r3, #1
 800962c:	2030      	movs	r0, #48	; 0x30
 800962e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009632:	4422      	add	r2, r4
 8009634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800963c:	3302      	adds	r3, #2
 800963e:	e7c7      	b.n	80095d0 <_printf_common+0x58>
 8009640:	2301      	movs	r3, #1
 8009642:	4622      	mov	r2, r4
 8009644:	4649      	mov	r1, r9
 8009646:	4638      	mov	r0, r7
 8009648:	47c0      	blx	r8
 800964a:	3001      	adds	r0, #1
 800964c:	d0e6      	beq.n	800961c <_printf_common+0xa4>
 800964e:	3601      	adds	r6, #1
 8009650:	e7d9      	b.n	8009606 <_printf_common+0x8e>
	...

08009654 <_printf_i>:
 8009654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009658:	7e0f      	ldrb	r7, [r1, #24]
 800965a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800965c:	2f78      	cmp	r7, #120	; 0x78
 800965e:	4691      	mov	r9, r2
 8009660:	4680      	mov	r8, r0
 8009662:	460c      	mov	r4, r1
 8009664:	469a      	mov	sl, r3
 8009666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800966a:	d807      	bhi.n	800967c <_printf_i+0x28>
 800966c:	2f62      	cmp	r7, #98	; 0x62
 800966e:	d80a      	bhi.n	8009686 <_printf_i+0x32>
 8009670:	2f00      	cmp	r7, #0
 8009672:	f000 80d4 	beq.w	800981e <_printf_i+0x1ca>
 8009676:	2f58      	cmp	r7, #88	; 0x58
 8009678:	f000 80c0 	beq.w	80097fc <_printf_i+0x1a8>
 800967c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009684:	e03a      	b.n	80096fc <_printf_i+0xa8>
 8009686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800968a:	2b15      	cmp	r3, #21
 800968c:	d8f6      	bhi.n	800967c <_printf_i+0x28>
 800968e:	a101      	add	r1, pc, #4	; (adr r1, 8009694 <_printf_i+0x40>)
 8009690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009694:	080096ed 	.word	0x080096ed
 8009698:	08009701 	.word	0x08009701
 800969c:	0800967d 	.word	0x0800967d
 80096a0:	0800967d 	.word	0x0800967d
 80096a4:	0800967d 	.word	0x0800967d
 80096a8:	0800967d 	.word	0x0800967d
 80096ac:	08009701 	.word	0x08009701
 80096b0:	0800967d 	.word	0x0800967d
 80096b4:	0800967d 	.word	0x0800967d
 80096b8:	0800967d 	.word	0x0800967d
 80096bc:	0800967d 	.word	0x0800967d
 80096c0:	08009805 	.word	0x08009805
 80096c4:	0800972d 	.word	0x0800972d
 80096c8:	080097bf 	.word	0x080097bf
 80096cc:	0800967d 	.word	0x0800967d
 80096d0:	0800967d 	.word	0x0800967d
 80096d4:	08009827 	.word	0x08009827
 80096d8:	0800967d 	.word	0x0800967d
 80096dc:	0800972d 	.word	0x0800972d
 80096e0:	0800967d 	.word	0x0800967d
 80096e4:	0800967d 	.word	0x0800967d
 80096e8:	080097c7 	.word	0x080097c7
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	1d1a      	adds	r2, r3, #4
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	602a      	str	r2, [r5, #0]
 80096f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096fc:	2301      	movs	r3, #1
 80096fe:	e09f      	b.n	8009840 <_printf_i+0x1ec>
 8009700:	6820      	ldr	r0, [r4, #0]
 8009702:	682b      	ldr	r3, [r5, #0]
 8009704:	0607      	lsls	r7, r0, #24
 8009706:	f103 0104 	add.w	r1, r3, #4
 800970a:	6029      	str	r1, [r5, #0]
 800970c:	d501      	bpl.n	8009712 <_printf_i+0xbe>
 800970e:	681e      	ldr	r6, [r3, #0]
 8009710:	e003      	b.n	800971a <_printf_i+0xc6>
 8009712:	0646      	lsls	r6, r0, #25
 8009714:	d5fb      	bpl.n	800970e <_printf_i+0xba>
 8009716:	f9b3 6000 	ldrsh.w	r6, [r3]
 800971a:	2e00      	cmp	r6, #0
 800971c:	da03      	bge.n	8009726 <_printf_i+0xd2>
 800971e:	232d      	movs	r3, #45	; 0x2d
 8009720:	4276      	negs	r6, r6
 8009722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009726:	485a      	ldr	r0, [pc, #360]	; (8009890 <_printf_i+0x23c>)
 8009728:	230a      	movs	r3, #10
 800972a:	e012      	b.n	8009752 <_printf_i+0xfe>
 800972c:	682b      	ldr	r3, [r5, #0]
 800972e:	6820      	ldr	r0, [r4, #0]
 8009730:	1d19      	adds	r1, r3, #4
 8009732:	6029      	str	r1, [r5, #0]
 8009734:	0605      	lsls	r5, r0, #24
 8009736:	d501      	bpl.n	800973c <_printf_i+0xe8>
 8009738:	681e      	ldr	r6, [r3, #0]
 800973a:	e002      	b.n	8009742 <_printf_i+0xee>
 800973c:	0641      	lsls	r1, r0, #25
 800973e:	d5fb      	bpl.n	8009738 <_printf_i+0xe4>
 8009740:	881e      	ldrh	r6, [r3, #0]
 8009742:	4853      	ldr	r0, [pc, #332]	; (8009890 <_printf_i+0x23c>)
 8009744:	2f6f      	cmp	r7, #111	; 0x6f
 8009746:	bf0c      	ite	eq
 8009748:	2308      	moveq	r3, #8
 800974a:	230a      	movne	r3, #10
 800974c:	2100      	movs	r1, #0
 800974e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009752:	6865      	ldr	r5, [r4, #4]
 8009754:	60a5      	str	r5, [r4, #8]
 8009756:	2d00      	cmp	r5, #0
 8009758:	bfa2      	ittt	ge
 800975a:	6821      	ldrge	r1, [r4, #0]
 800975c:	f021 0104 	bicge.w	r1, r1, #4
 8009760:	6021      	strge	r1, [r4, #0]
 8009762:	b90e      	cbnz	r6, 8009768 <_printf_i+0x114>
 8009764:	2d00      	cmp	r5, #0
 8009766:	d04b      	beq.n	8009800 <_printf_i+0x1ac>
 8009768:	4615      	mov	r5, r2
 800976a:	fbb6 f1f3 	udiv	r1, r6, r3
 800976e:	fb03 6711 	mls	r7, r3, r1, r6
 8009772:	5dc7      	ldrb	r7, [r0, r7]
 8009774:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009778:	4637      	mov	r7, r6
 800977a:	42bb      	cmp	r3, r7
 800977c:	460e      	mov	r6, r1
 800977e:	d9f4      	bls.n	800976a <_printf_i+0x116>
 8009780:	2b08      	cmp	r3, #8
 8009782:	d10b      	bne.n	800979c <_printf_i+0x148>
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	07de      	lsls	r6, r3, #31
 8009788:	d508      	bpl.n	800979c <_printf_i+0x148>
 800978a:	6923      	ldr	r3, [r4, #16]
 800978c:	6861      	ldr	r1, [r4, #4]
 800978e:	4299      	cmp	r1, r3
 8009790:	bfde      	ittt	le
 8009792:	2330      	movle	r3, #48	; 0x30
 8009794:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009798:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800979c:	1b52      	subs	r2, r2, r5
 800979e:	6122      	str	r2, [r4, #16]
 80097a0:	f8cd a000 	str.w	sl, [sp]
 80097a4:	464b      	mov	r3, r9
 80097a6:	aa03      	add	r2, sp, #12
 80097a8:	4621      	mov	r1, r4
 80097aa:	4640      	mov	r0, r8
 80097ac:	f7ff fee4 	bl	8009578 <_printf_common>
 80097b0:	3001      	adds	r0, #1
 80097b2:	d14a      	bne.n	800984a <_printf_i+0x1f6>
 80097b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097b8:	b004      	add	sp, #16
 80097ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	f043 0320 	orr.w	r3, r3, #32
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	4833      	ldr	r0, [pc, #204]	; (8009894 <_printf_i+0x240>)
 80097c8:	2778      	movs	r7, #120	; 0x78
 80097ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	6829      	ldr	r1, [r5, #0]
 80097d2:	061f      	lsls	r7, r3, #24
 80097d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80097d8:	d402      	bmi.n	80097e0 <_printf_i+0x18c>
 80097da:	065f      	lsls	r7, r3, #25
 80097dc:	bf48      	it	mi
 80097de:	b2b6      	uxthmi	r6, r6
 80097e0:	07df      	lsls	r7, r3, #31
 80097e2:	bf48      	it	mi
 80097e4:	f043 0320 	orrmi.w	r3, r3, #32
 80097e8:	6029      	str	r1, [r5, #0]
 80097ea:	bf48      	it	mi
 80097ec:	6023      	strmi	r3, [r4, #0]
 80097ee:	b91e      	cbnz	r6, 80097f8 <_printf_i+0x1a4>
 80097f0:	6823      	ldr	r3, [r4, #0]
 80097f2:	f023 0320 	bic.w	r3, r3, #32
 80097f6:	6023      	str	r3, [r4, #0]
 80097f8:	2310      	movs	r3, #16
 80097fa:	e7a7      	b.n	800974c <_printf_i+0xf8>
 80097fc:	4824      	ldr	r0, [pc, #144]	; (8009890 <_printf_i+0x23c>)
 80097fe:	e7e4      	b.n	80097ca <_printf_i+0x176>
 8009800:	4615      	mov	r5, r2
 8009802:	e7bd      	b.n	8009780 <_printf_i+0x12c>
 8009804:	682b      	ldr	r3, [r5, #0]
 8009806:	6826      	ldr	r6, [r4, #0]
 8009808:	6961      	ldr	r1, [r4, #20]
 800980a:	1d18      	adds	r0, r3, #4
 800980c:	6028      	str	r0, [r5, #0]
 800980e:	0635      	lsls	r5, r6, #24
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	d501      	bpl.n	8009818 <_printf_i+0x1c4>
 8009814:	6019      	str	r1, [r3, #0]
 8009816:	e002      	b.n	800981e <_printf_i+0x1ca>
 8009818:	0670      	lsls	r0, r6, #25
 800981a:	d5fb      	bpl.n	8009814 <_printf_i+0x1c0>
 800981c:	8019      	strh	r1, [r3, #0]
 800981e:	2300      	movs	r3, #0
 8009820:	6123      	str	r3, [r4, #16]
 8009822:	4615      	mov	r5, r2
 8009824:	e7bc      	b.n	80097a0 <_printf_i+0x14c>
 8009826:	682b      	ldr	r3, [r5, #0]
 8009828:	1d1a      	adds	r2, r3, #4
 800982a:	602a      	str	r2, [r5, #0]
 800982c:	681d      	ldr	r5, [r3, #0]
 800982e:	6862      	ldr	r2, [r4, #4]
 8009830:	2100      	movs	r1, #0
 8009832:	4628      	mov	r0, r5
 8009834:	f7f6 fccc 	bl	80001d0 <memchr>
 8009838:	b108      	cbz	r0, 800983e <_printf_i+0x1ea>
 800983a:	1b40      	subs	r0, r0, r5
 800983c:	6060      	str	r0, [r4, #4]
 800983e:	6863      	ldr	r3, [r4, #4]
 8009840:	6123      	str	r3, [r4, #16]
 8009842:	2300      	movs	r3, #0
 8009844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009848:	e7aa      	b.n	80097a0 <_printf_i+0x14c>
 800984a:	6923      	ldr	r3, [r4, #16]
 800984c:	462a      	mov	r2, r5
 800984e:	4649      	mov	r1, r9
 8009850:	4640      	mov	r0, r8
 8009852:	47d0      	blx	sl
 8009854:	3001      	adds	r0, #1
 8009856:	d0ad      	beq.n	80097b4 <_printf_i+0x160>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	079b      	lsls	r3, r3, #30
 800985c:	d413      	bmi.n	8009886 <_printf_i+0x232>
 800985e:	68e0      	ldr	r0, [r4, #12]
 8009860:	9b03      	ldr	r3, [sp, #12]
 8009862:	4298      	cmp	r0, r3
 8009864:	bfb8      	it	lt
 8009866:	4618      	movlt	r0, r3
 8009868:	e7a6      	b.n	80097b8 <_printf_i+0x164>
 800986a:	2301      	movs	r3, #1
 800986c:	4632      	mov	r2, r6
 800986e:	4649      	mov	r1, r9
 8009870:	4640      	mov	r0, r8
 8009872:	47d0      	blx	sl
 8009874:	3001      	adds	r0, #1
 8009876:	d09d      	beq.n	80097b4 <_printf_i+0x160>
 8009878:	3501      	adds	r5, #1
 800987a:	68e3      	ldr	r3, [r4, #12]
 800987c:	9903      	ldr	r1, [sp, #12]
 800987e:	1a5b      	subs	r3, r3, r1
 8009880:	42ab      	cmp	r3, r5
 8009882:	dcf2      	bgt.n	800986a <_printf_i+0x216>
 8009884:	e7eb      	b.n	800985e <_printf_i+0x20a>
 8009886:	2500      	movs	r5, #0
 8009888:	f104 0619 	add.w	r6, r4, #25
 800988c:	e7f5      	b.n	800987a <_printf_i+0x226>
 800988e:	bf00      	nop
 8009890:	0800c05c 	.word	0x0800c05c
 8009894:	0800c06d 	.word	0x0800c06d

08009898 <__malloc_lock>:
 8009898:	4801      	ldr	r0, [pc, #4]	; (80098a0 <__malloc_lock+0x8>)
 800989a:	f000 b988 	b.w	8009bae <__retarget_lock_acquire_recursive>
 800989e:	bf00      	nop
 80098a0:	20004f00 	.word	0x20004f00

080098a4 <__malloc_unlock>:
 80098a4:	4801      	ldr	r0, [pc, #4]	; (80098ac <__malloc_unlock+0x8>)
 80098a6:	f000 b983 	b.w	8009bb0 <__retarget_lock_release_recursive>
 80098aa:	bf00      	nop
 80098ac:	20004f00 	.word	0x20004f00

080098b0 <siprintf>:
 80098b0:	b40e      	push	{r1, r2, r3}
 80098b2:	b500      	push	{lr}
 80098b4:	b09c      	sub	sp, #112	; 0x70
 80098b6:	ab1d      	add	r3, sp, #116	; 0x74
 80098b8:	9002      	str	r0, [sp, #8]
 80098ba:	9006      	str	r0, [sp, #24]
 80098bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098c0:	4809      	ldr	r0, [pc, #36]	; (80098e8 <siprintf+0x38>)
 80098c2:	9107      	str	r1, [sp, #28]
 80098c4:	9104      	str	r1, [sp, #16]
 80098c6:	4909      	ldr	r1, [pc, #36]	; (80098ec <siprintf+0x3c>)
 80098c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80098cc:	9105      	str	r1, [sp, #20]
 80098ce:	6800      	ldr	r0, [r0, #0]
 80098d0:	9301      	str	r3, [sp, #4]
 80098d2:	a902      	add	r1, sp, #8
 80098d4:	f001 f89c 	bl	800aa10 <_svfiprintf_r>
 80098d8:	9b02      	ldr	r3, [sp, #8]
 80098da:	2200      	movs	r2, #0
 80098dc:	701a      	strb	r2, [r3, #0]
 80098de:	b01c      	add	sp, #112	; 0x70
 80098e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80098e4:	b003      	add	sp, #12
 80098e6:	4770      	bx	lr
 80098e8:	2000006c 	.word	0x2000006c
 80098ec:	ffff0208 	.word	0xffff0208

080098f0 <std>:
 80098f0:	2300      	movs	r3, #0
 80098f2:	b510      	push	{r4, lr}
 80098f4:	4604      	mov	r4, r0
 80098f6:	e9c0 3300 	strd	r3, r3, [r0]
 80098fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098fe:	6083      	str	r3, [r0, #8]
 8009900:	8181      	strh	r1, [r0, #12]
 8009902:	6643      	str	r3, [r0, #100]	; 0x64
 8009904:	81c2      	strh	r2, [r0, #14]
 8009906:	6183      	str	r3, [r0, #24]
 8009908:	4619      	mov	r1, r3
 800990a:	2208      	movs	r2, #8
 800990c:	305c      	adds	r0, #92	; 0x5c
 800990e:	f000 f8c3 	bl	8009a98 <memset>
 8009912:	4b0d      	ldr	r3, [pc, #52]	; (8009948 <std+0x58>)
 8009914:	6263      	str	r3, [r4, #36]	; 0x24
 8009916:	4b0d      	ldr	r3, [pc, #52]	; (800994c <std+0x5c>)
 8009918:	62a3      	str	r3, [r4, #40]	; 0x28
 800991a:	4b0d      	ldr	r3, [pc, #52]	; (8009950 <std+0x60>)
 800991c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800991e:	4b0d      	ldr	r3, [pc, #52]	; (8009954 <std+0x64>)
 8009920:	6323      	str	r3, [r4, #48]	; 0x30
 8009922:	4b0d      	ldr	r3, [pc, #52]	; (8009958 <std+0x68>)
 8009924:	6224      	str	r4, [r4, #32]
 8009926:	429c      	cmp	r4, r3
 8009928:	d006      	beq.n	8009938 <std+0x48>
 800992a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800992e:	4294      	cmp	r4, r2
 8009930:	d002      	beq.n	8009938 <std+0x48>
 8009932:	33d0      	adds	r3, #208	; 0xd0
 8009934:	429c      	cmp	r4, r3
 8009936:	d105      	bne.n	8009944 <std+0x54>
 8009938:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800993c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009940:	f000 b934 	b.w	8009bac <__retarget_lock_init_recursive>
 8009944:	bd10      	pop	{r4, pc}
 8009946:	bf00      	nop
 8009948:	0800b6e9 	.word	0x0800b6e9
 800994c:	0800b70b 	.word	0x0800b70b
 8009950:	0800b743 	.word	0x0800b743
 8009954:	0800b767 	.word	0x0800b767
 8009958:	20004dc4 	.word	0x20004dc4

0800995c <stdio_exit_handler>:
 800995c:	4a02      	ldr	r2, [pc, #8]	; (8009968 <stdio_exit_handler+0xc>)
 800995e:	4903      	ldr	r1, [pc, #12]	; (800996c <stdio_exit_handler+0x10>)
 8009960:	4803      	ldr	r0, [pc, #12]	; (8009970 <stdio_exit_handler+0x14>)
 8009962:	f000 b87b 	b.w	8009a5c <_fwalk_sglue>
 8009966:	bf00      	nop
 8009968:	20000014 	.word	0x20000014
 800996c:	0800afa1 	.word	0x0800afa1
 8009970:	20000020 	.word	0x20000020

08009974 <cleanup_stdio>:
 8009974:	6841      	ldr	r1, [r0, #4]
 8009976:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <cleanup_stdio+0x34>)
 8009978:	4299      	cmp	r1, r3
 800997a:	b510      	push	{r4, lr}
 800997c:	4604      	mov	r4, r0
 800997e:	d001      	beq.n	8009984 <cleanup_stdio+0x10>
 8009980:	f001 fb0e 	bl	800afa0 <_fflush_r>
 8009984:	68a1      	ldr	r1, [r4, #8]
 8009986:	4b09      	ldr	r3, [pc, #36]	; (80099ac <cleanup_stdio+0x38>)
 8009988:	4299      	cmp	r1, r3
 800998a:	d002      	beq.n	8009992 <cleanup_stdio+0x1e>
 800998c:	4620      	mov	r0, r4
 800998e:	f001 fb07 	bl	800afa0 <_fflush_r>
 8009992:	68e1      	ldr	r1, [r4, #12]
 8009994:	4b06      	ldr	r3, [pc, #24]	; (80099b0 <cleanup_stdio+0x3c>)
 8009996:	4299      	cmp	r1, r3
 8009998:	d004      	beq.n	80099a4 <cleanup_stdio+0x30>
 800999a:	4620      	mov	r0, r4
 800999c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a0:	f001 bafe 	b.w	800afa0 <_fflush_r>
 80099a4:	bd10      	pop	{r4, pc}
 80099a6:	bf00      	nop
 80099a8:	20004dc4 	.word	0x20004dc4
 80099ac:	20004e2c 	.word	0x20004e2c
 80099b0:	20004e94 	.word	0x20004e94

080099b4 <global_stdio_init.part.0>:
 80099b4:	b510      	push	{r4, lr}
 80099b6:	4b0b      	ldr	r3, [pc, #44]	; (80099e4 <global_stdio_init.part.0+0x30>)
 80099b8:	4c0b      	ldr	r4, [pc, #44]	; (80099e8 <global_stdio_init.part.0+0x34>)
 80099ba:	4a0c      	ldr	r2, [pc, #48]	; (80099ec <global_stdio_init.part.0+0x38>)
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	4620      	mov	r0, r4
 80099c0:	2200      	movs	r2, #0
 80099c2:	2104      	movs	r1, #4
 80099c4:	f7ff ff94 	bl	80098f0 <std>
 80099c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80099cc:	2201      	movs	r2, #1
 80099ce:	2109      	movs	r1, #9
 80099d0:	f7ff ff8e 	bl	80098f0 <std>
 80099d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80099d8:	2202      	movs	r2, #2
 80099da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099de:	2112      	movs	r1, #18
 80099e0:	f7ff bf86 	b.w	80098f0 <std>
 80099e4:	20004efc 	.word	0x20004efc
 80099e8:	20004dc4 	.word	0x20004dc4
 80099ec:	0800995d 	.word	0x0800995d

080099f0 <__sfp_lock_acquire>:
 80099f0:	4801      	ldr	r0, [pc, #4]	; (80099f8 <__sfp_lock_acquire+0x8>)
 80099f2:	f000 b8dc 	b.w	8009bae <__retarget_lock_acquire_recursive>
 80099f6:	bf00      	nop
 80099f8:	20004f01 	.word	0x20004f01

080099fc <__sfp_lock_release>:
 80099fc:	4801      	ldr	r0, [pc, #4]	; (8009a04 <__sfp_lock_release+0x8>)
 80099fe:	f000 b8d7 	b.w	8009bb0 <__retarget_lock_release_recursive>
 8009a02:	bf00      	nop
 8009a04:	20004f01 	.word	0x20004f01

08009a08 <__sinit>:
 8009a08:	b510      	push	{r4, lr}
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	f7ff fff0 	bl	80099f0 <__sfp_lock_acquire>
 8009a10:	6a23      	ldr	r3, [r4, #32]
 8009a12:	b11b      	cbz	r3, 8009a1c <__sinit+0x14>
 8009a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a18:	f7ff bff0 	b.w	80099fc <__sfp_lock_release>
 8009a1c:	4b04      	ldr	r3, [pc, #16]	; (8009a30 <__sinit+0x28>)
 8009a1e:	6223      	str	r3, [r4, #32]
 8009a20:	4b04      	ldr	r3, [pc, #16]	; (8009a34 <__sinit+0x2c>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1f5      	bne.n	8009a14 <__sinit+0xc>
 8009a28:	f7ff ffc4 	bl	80099b4 <global_stdio_init.part.0>
 8009a2c:	e7f2      	b.n	8009a14 <__sinit+0xc>
 8009a2e:	bf00      	nop
 8009a30:	08009975 	.word	0x08009975
 8009a34:	20004efc 	.word	0x20004efc

08009a38 <fiprintf>:
 8009a38:	b40e      	push	{r1, r2, r3}
 8009a3a:	b503      	push	{r0, r1, lr}
 8009a3c:	4601      	mov	r1, r0
 8009a3e:	ab03      	add	r3, sp, #12
 8009a40:	4805      	ldr	r0, [pc, #20]	; (8009a58 <fiprintf+0x20>)
 8009a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a46:	6800      	ldr	r0, [r0, #0]
 8009a48:	9301      	str	r3, [sp, #4]
 8009a4a:	f001 f909 	bl	800ac60 <_vfiprintf_r>
 8009a4e:	b002      	add	sp, #8
 8009a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a54:	b003      	add	sp, #12
 8009a56:	4770      	bx	lr
 8009a58:	2000006c 	.word	0x2000006c

08009a5c <_fwalk_sglue>:
 8009a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a60:	4607      	mov	r7, r0
 8009a62:	4688      	mov	r8, r1
 8009a64:	4614      	mov	r4, r2
 8009a66:	2600      	movs	r6, #0
 8009a68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a6c:	f1b9 0901 	subs.w	r9, r9, #1
 8009a70:	d505      	bpl.n	8009a7e <_fwalk_sglue+0x22>
 8009a72:	6824      	ldr	r4, [r4, #0]
 8009a74:	2c00      	cmp	r4, #0
 8009a76:	d1f7      	bne.n	8009a68 <_fwalk_sglue+0xc>
 8009a78:	4630      	mov	r0, r6
 8009a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a7e:	89ab      	ldrh	r3, [r5, #12]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d907      	bls.n	8009a94 <_fwalk_sglue+0x38>
 8009a84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	d003      	beq.n	8009a94 <_fwalk_sglue+0x38>
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	4638      	mov	r0, r7
 8009a90:	47c0      	blx	r8
 8009a92:	4306      	orrs	r6, r0
 8009a94:	3568      	adds	r5, #104	; 0x68
 8009a96:	e7e9      	b.n	8009a6c <_fwalk_sglue+0x10>

08009a98 <memset>:
 8009a98:	4402      	add	r2, r0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d100      	bne.n	8009aa2 <memset+0xa>
 8009aa0:	4770      	bx	lr
 8009aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8009aa6:	e7f9      	b.n	8009a9c <memset+0x4>

08009aa8 <_localeconv_r>:
 8009aa8:	4800      	ldr	r0, [pc, #0]	; (8009aac <_localeconv_r+0x4>)
 8009aaa:	4770      	bx	lr
 8009aac:	20000160 	.word	0x20000160

08009ab0 <_raise_r>:
 8009ab0:	291f      	cmp	r1, #31
 8009ab2:	b538      	push	{r3, r4, r5, lr}
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	460d      	mov	r5, r1
 8009ab8:	d904      	bls.n	8009ac4 <_raise_r+0x14>
 8009aba:	2316      	movs	r3, #22
 8009abc:	6003      	str	r3, [r0, #0]
 8009abe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ac2:	bd38      	pop	{r3, r4, r5, pc}
 8009ac4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009ac6:	b112      	cbz	r2, 8009ace <_raise_r+0x1e>
 8009ac8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009acc:	b94b      	cbnz	r3, 8009ae2 <_raise_r+0x32>
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f000 f830 	bl	8009b34 <_getpid_r>
 8009ad4:	462a      	mov	r2, r5
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	4620      	mov	r0, r4
 8009ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ade:	f000 b817 	b.w	8009b10 <_kill_r>
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d00a      	beq.n	8009afc <_raise_r+0x4c>
 8009ae6:	1c59      	adds	r1, r3, #1
 8009ae8:	d103      	bne.n	8009af2 <_raise_r+0x42>
 8009aea:	2316      	movs	r3, #22
 8009aec:	6003      	str	r3, [r0, #0]
 8009aee:	2001      	movs	r0, #1
 8009af0:	e7e7      	b.n	8009ac2 <_raise_r+0x12>
 8009af2:	2400      	movs	r4, #0
 8009af4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009af8:	4628      	mov	r0, r5
 8009afa:	4798      	blx	r3
 8009afc:	2000      	movs	r0, #0
 8009afe:	e7e0      	b.n	8009ac2 <_raise_r+0x12>

08009b00 <raise>:
 8009b00:	4b02      	ldr	r3, [pc, #8]	; (8009b0c <raise+0xc>)
 8009b02:	4601      	mov	r1, r0
 8009b04:	6818      	ldr	r0, [r3, #0]
 8009b06:	f7ff bfd3 	b.w	8009ab0 <_raise_r>
 8009b0a:	bf00      	nop
 8009b0c:	2000006c 	.word	0x2000006c

08009b10 <_kill_r>:
 8009b10:	b538      	push	{r3, r4, r5, lr}
 8009b12:	4d07      	ldr	r5, [pc, #28]	; (8009b30 <_kill_r+0x20>)
 8009b14:	2300      	movs	r3, #0
 8009b16:	4604      	mov	r4, r0
 8009b18:	4608      	mov	r0, r1
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	602b      	str	r3, [r5, #0]
 8009b1e:	f7f9 fc74 	bl	800340a <_kill>
 8009b22:	1c43      	adds	r3, r0, #1
 8009b24:	d102      	bne.n	8009b2c <_kill_r+0x1c>
 8009b26:	682b      	ldr	r3, [r5, #0]
 8009b28:	b103      	cbz	r3, 8009b2c <_kill_r+0x1c>
 8009b2a:	6023      	str	r3, [r4, #0]
 8009b2c:	bd38      	pop	{r3, r4, r5, pc}
 8009b2e:	bf00      	nop
 8009b30:	20004f04 	.word	0x20004f04

08009b34 <_getpid_r>:
 8009b34:	f7f9 bc61 	b.w	80033fa <_getpid>

08009b38 <_sbrk_r>:
 8009b38:	b538      	push	{r3, r4, r5, lr}
 8009b3a:	4d06      	ldr	r5, [pc, #24]	; (8009b54 <_sbrk_r+0x1c>)
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	4604      	mov	r4, r0
 8009b40:	4608      	mov	r0, r1
 8009b42:	602b      	str	r3, [r5, #0]
 8009b44:	f7f9 fce8 	bl	8003518 <_sbrk>
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	d102      	bne.n	8009b52 <_sbrk_r+0x1a>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	b103      	cbz	r3, 8009b52 <_sbrk_r+0x1a>
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	20004f04 	.word	0x20004f04

08009b58 <__errno>:
 8009b58:	4b01      	ldr	r3, [pc, #4]	; (8009b60 <__errno+0x8>)
 8009b5a:	6818      	ldr	r0, [r3, #0]
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	2000006c 	.word	0x2000006c

08009b64 <__libc_init_array>:
 8009b64:	b570      	push	{r4, r5, r6, lr}
 8009b66:	4d0d      	ldr	r5, [pc, #52]	; (8009b9c <__libc_init_array+0x38>)
 8009b68:	4c0d      	ldr	r4, [pc, #52]	; (8009ba0 <__libc_init_array+0x3c>)
 8009b6a:	1b64      	subs	r4, r4, r5
 8009b6c:	10a4      	asrs	r4, r4, #2
 8009b6e:	2600      	movs	r6, #0
 8009b70:	42a6      	cmp	r6, r4
 8009b72:	d109      	bne.n	8009b88 <__libc_init_array+0x24>
 8009b74:	4d0b      	ldr	r5, [pc, #44]	; (8009ba4 <__libc_init_array+0x40>)
 8009b76:	4c0c      	ldr	r4, [pc, #48]	; (8009ba8 <__libc_init_array+0x44>)
 8009b78:	f001 ffe0 	bl	800bb3c <_init>
 8009b7c:	1b64      	subs	r4, r4, r5
 8009b7e:	10a4      	asrs	r4, r4, #2
 8009b80:	2600      	movs	r6, #0
 8009b82:	42a6      	cmp	r6, r4
 8009b84:	d105      	bne.n	8009b92 <__libc_init_array+0x2e>
 8009b86:	bd70      	pop	{r4, r5, r6, pc}
 8009b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b8c:	4798      	blx	r3
 8009b8e:	3601      	adds	r6, #1
 8009b90:	e7ee      	b.n	8009b70 <__libc_init_array+0xc>
 8009b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b96:	4798      	blx	r3
 8009b98:	3601      	adds	r6, #1
 8009b9a:	e7f2      	b.n	8009b82 <__libc_init_array+0x1e>
 8009b9c:	0800c388 	.word	0x0800c388
 8009ba0:	0800c388 	.word	0x0800c388
 8009ba4:	0800c388 	.word	0x0800c388
 8009ba8:	0800c390 	.word	0x0800c390

08009bac <__retarget_lock_init_recursive>:
 8009bac:	4770      	bx	lr

08009bae <__retarget_lock_acquire_recursive>:
 8009bae:	4770      	bx	lr

08009bb0 <__retarget_lock_release_recursive>:
 8009bb0:	4770      	bx	lr

08009bb2 <memcpy>:
 8009bb2:	440a      	add	r2, r1
 8009bb4:	4291      	cmp	r1, r2
 8009bb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009bba:	d100      	bne.n	8009bbe <memcpy+0xc>
 8009bbc:	4770      	bx	lr
 8009bbe:	b510      	push	{r4, lr}
 8009bc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bc8:	4291      	cmp	r1, r2
 8009bca:	d1f9      	bne.n	8009bc0 <memcpy+0xe>
 8009bcc:	bd10      	pop	{r4, pc}

08009bce <quorem>:
 8009bce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd2:	6903      	ldr	r3, [r0, #16]
 8009bd4:	690c      	ldr	r4, [r1, #16]
 8009bd6:	42a3      	cmp	r3, r4
 8009bd8:	4607      	mov	r7, r0
 8009bda:	db7e      	blt.n	8009cda <quorem+0x10c>
 8009bdc:	3c01      	subs	r4, #1
 8009bde:	f101 0814 	add.w	r8, r1, #20
 8009be2:	f100 0514 	add.w	r5, r0, #20
 8009be6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bea:	9301      	str	r3, [sp, #4]
 8009bec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009bf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009bfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c00:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c04:	d331      	bcc.n	8009c6a <quorem+0x9c>
 8009c06:	f04f 0e00 	mov.w	lr, #0
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	46ac      	mov	ip, r5
 8009c0e:	46f2      	mov	sl, lr
 8009c10:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c14:	b293      	uxth	r3, r2
 8009c16:	fb06 e303 	mla	r3, r6, r3, lr
 8009c1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c1e:	0c1a      	lsrs	r2, r3, #16
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	ebaa 0303 	sub.w	r3, sl, r3
 8009c26:	f8dc a000 	ldr.w	sl, [ip]
 8009c2a:	fa13 f38a 	uxtah	r3, r3, sl
 8009c2e:	fb06 220e 	mla	r2, r6, lr, r2
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	9b00      	ldr	r3, [sp, #0]
 8009c36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c3a:	b292      	uxth	r2, r2
 8009c3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009c40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c44:	f8bd 3000 	ldrh.w	r3, [sp]
 8009c48:	4581      	cmp	r9, r0
 8009c4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c4e:	f84c 3b04 	str.w	r3, [ip], #4
 8009c52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c56:	d2db      	bcs.n	8009c10 <quorem+0x42>
 8009c58:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c5c:	b92b      	cbnz	r3, 8009c6a <quorem+0x9c>
 8009c5e:	9b01      	ldr	r3, [sp, #4]
 8009c60:	3b04      	subs	r3, #4
 8009c62:	429d      	cmp	r5, r3
 8009c64:	461a      	mov	r2, r3
 8009c66:	d32c      	bcc.n	8009cc2 <quorem+0xf4>
 8009c68:	613c      	str	r4, [r7, #16]
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	f001 fc3c 	bl	800b4e8 <__mcmp>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	db22      	blt.n	8009cba <quorem+0xec>
 8009c74:	3601      	adds	r6, #1
 8009c76:	4629      	mov	r1, r5
 8009c78:	2000      	movs	r0, #0
 8009c7a:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c7e:	f8d1 c000 	ldr.w	ip, [r1]
 8009c82:	b293      	uxth	r3, r2
 8009c84:	1ac3      	subs	r3, r0, r3
 8009c86:	0c12      	lsrs	r2, r2, #16
 8009c88:	fa13 f38c 	uxtah	r3, r3, ip
 8009c8c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009c90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c9a:	45c1      	cmp	r9, r8
 8009c9c:	f841 3b04 	str.w	r3, [r1], #4
 8009ca0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ca4:	d2e9      	bcs.n	8009c7a <quorem+0xac>
 8009ca6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009caa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cae:	b922      	cbnz	r2, 8009cba <quorem+0xec>
 8009cb0:	3b04      	subs	r3, #4
 8009cb2:	429d      	cmp	r5, r3
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	d30a      	bcc.n	8009cce <quorem+0x100>
 8009cb8:	613c      	str	r4, [r7, #16]
 8009cba:	4630      	mov	r0, r6
 8009cbc:	b003      	add	sp, #12
 8009cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc2:	6812      	ldr	r2, [r2, #0]
 8009cc4:	3b04      	subs	r3, #4
 8009cc6:	2a00      	cmp	r2, #0
 8009cc8:	d1ce      	bne.n	8009c68 <quorem+0x9a>
 8009cca:	3c01      	subs	r4, #1
 8009ccc:	e7c9      	b.n	8009c62 <quorem+0x94>
 8009cce:	6812      	ldr	r2, [r2, #0]
 8009cd0:	3b04      	subs	r3, #4
 8009cd2:	2a00      	cmp	r2, #0
 8009cd4:	d1f0      	bne.n	8009cb8 <quorem+0xea>
 8009cd6:	3c01      	subs	r4, #1
 8009cd8:	e7eb      	b.n	8009cb2 <quorem+0xe4>
 8009cda:	2000      	movs	r0, #0
 8009cdc:	e7ee      	b.n	8009cbc <quorem+0xee>
	...

08009ce0 <_dtoa_r>:
 8009ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	ed2d 8b04 	vpush	{d8-d9}
 8009ce8:	69c5      	ldr	r5, [r0, #28]
 8009cea:	b093      	sub	sp, #76	; 0x4c
 8009cec:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009cf0:	ec57 6b10 	vmov	r6, r7, d0
 8009cf4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009cf8:	9107      	str	r1, [sp, #28]
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	920a      	str	r2, [sp, #40]	; 0x28
 8009cfe:	930d      	str	r3, [sp, #52]	; 0x34
 8009d00:	b975      	cbnz	r5, 8009d20 <_dtoa_r+0x40>
 8009d02:	2010      	movs	r0, #16
 8009d04:	f7ff fb88 	bl	8009418 <malloc>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	61e0      	str	r0, [r4, #28]
 8009d0c:	b920      	cbnz	r0, 8009d18 <_dtoa_r+0x38>
 8009d0e:	4bae      	ldr	r3, [pc, #696]	; (8009fc8 <_dtoa_r+0x2e8>)
 8009d10:	21ef      	movs	r1, #239	; 0xef
 8009d12:	48ae      	ldr	r0, [pc, #696]	; (8009fcc <_dtoa_r+0x2ec>)
 8009d14:	f7ff f88c 	bl	8008e30 <__assert_func>
 8009d18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009d1c:	6005      	str	r5, [r0, #0]
 8009d1e:	60c5      	str	r5, [r0, #12]
 8009d20:	69e3      	ldr	r3, [r4, #28]
 8009d22:	6819      	ldr	r1, [r3, #0]
 8009d24:	b151      	cbz	r1, 8009d3c <_dtoa_r+0x5c>
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	604a      	str	r2, [r1, #4]
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4093      	lsls	r3, r2
 8009d2e:	608b      	str	r3, [r1, #8]
 8009d30:	4620      	mov	r0, r4
 8009d32:	f001 f99d 	bl	800b070 <_Bfree>
 8009d36:	69e3      	ldr	r3, [r4, #28]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	1e3b      	subs	r3, r7, #0
 8009d3e:	bfbb      	ittet	lt
 8009d40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d44:	9303      	strlt	r3, [sp, #12]
 8009d46:	2300      	movge	r3, #0
 8009d48:	2201      	movlt	r2, #1
 8009d4a:	bfac      	ite	ge
 8009d4c:	f8c8 3000 	strge.w	r3, [r8]
 8009d50:	f8c8 2000 	strlt.w	r2, [r8]
 8009d54:	4b9e      	ldr	r3, [pc, #632]	; (8009fd0 <_dtoa_r+0x2f0>)
 8009d56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009d5a:	ea33 0308 	bics.w	r3, r3, r8
 8009d5e:	d11b      	bne.n	8009d98 <_dtoa_r+0xb8>
 8009d60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d62:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d66:	6013      	str	r3, [r2, #0]
 8009d68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009d6c:	4333      	orrs	r3, r6
 8009d6e:	f000 8593 	beq.w	800a898 <_dtoa_r+0xbb8>
 8009d72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d74:	b963      	cbnz	r3, 8009d90 <_dtoa_r+0xb0>
 8009d76:	4b97      	ldr	r3, [pc, #604]	; (8009fd4 <_dtoa_r+0x2f4>)
 8009d78:	e027      	b.n	8009dca <_dtoa_r+0xea>
 8009d7a:	4b97      	ldr	r3, [pc, #604]	; (8009fd8 <_dtoa_r+0x2f8>)
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	3308      	adds	r3, #8
 8009d80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d82:	6013      	str	r3, [r2, #0]
 8009d84:	9800      	ldr	r0, [sp, #0]
 8009d86:	b013      	add	sp, #76	; 0x4c
 8009d88:	ecbd 8b04 	vpop	{d8-d9}
 8009d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d90:	4b90      	ldr	r3, [pc, #576]	; (8009fd4 <_dtoa_r+0x2f4>)
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	3303      	adds	r3, #3
 8009d96:	e7f3      	b.n	8009d80 <_dtoa_r+0xa0>
 8009d98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	ec51 0b17 	vmov	r0, r1, d7
 8009da2:	eeb0 8a47 	vmov.f32	s16, s14
 8009da6:	eef0 8a67 	vmov.f32	s17, s15
 8009daa:	2300      	movs	r3, #0
 8009dac:	f7f6 fe8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009db0:	4681      	mov	r9, r0
 8009db2:	b160      	cbz	r0, 8009dce <_dtoa_r+0xee>
 8009db4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009db6:	2301      	movs	r3, #1
 8009db8:	6013      	str	r3, [r2, #0]
 8009dba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 8568 	beq.w	800a892 <_dtoa_r+0xbb2>
 8009dc2:	4b86      	ldr	r3, [pc, #536]	; (8009fdc <_dtoa_r+0x2fc>)
 8009dc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009dc6:	6013      	str	r3, [r2, #0]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	e7da      	b.n	8009d84 <_dtoa_r+0xa4>
 8009dce:	aa10      	add	r2, sp, #64	; 0x40
 8009dd0:	a911      	add	r1, sp, #68	; 0x44
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	eeb0 0a48 	vmov.f32	s0, s16
 8009dd8:	eef0 0a68 	vmov.f32	s1, s17
 8009ddc:	f001 fc2a 	bl	800b634 <__d2b>
 8009de0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009de4:	4682      	mov	sl, r0
 8009de6:	2d00      	cmp	r5, #0
 8009de8:	d07f      	beq.n	8009eea <_dtoa_r+0x20a>
 8009dea:	ee18 3a90 	vmov	r3, s17
 8009dee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009df2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009df6:	ec51 0b18 	vmov	r0, r1, d8
 8009dfa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009dfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e02:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009e06:	4619      	mov	r1, r3
 8009e08:	2200      	movs	r2, #0
 8009e0a:	4b75      	ldr	r3, [pc, #468]	; (8009fe0 <_dtoa_r+0x300>)
 8009e0c:	f7f6 fa3c 	bl	8000288 <__aeabi_dsub>
 8009e10:	a367      	add	r3, pc, #412	; (adr r3, 8009fb0 <_dtoa_r+0x2d0>)
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	f7f6 fbef 	bl	80005f8 <__aeabi_dmul>
 8009e1a:	a367      	add	r3, pc, #412	; (adr r3, 8009fb8 <_dtoa_r+0x2d8>)
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	f7f6 fa34 	bl	800028c <__adddf3>
 8009e24:	4606      	mov	r6, r0
 8009e26:	4628      	mov	r0, r5
 8009e28:	460f      	mov	r7, r1
 8009e2a:	f7f6 fb7b 	bl	8000524 <__aeabi_i2d>
 8009e2e:	a364      	add	r3, pc, #400	; (adr r3, 8009fc0 <_dtoa_r+0x2e0>)
 8009e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e34:	f7f6 fbe0 	bl	80005f8 <__aeabi_dmul>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	4639      	mov	r1, r7
 8009e40:	f7f6 fa24 	bl	800028c <__adddf3>
 8009e44:	4606      	mov	r6, r0
 8009e46:	460f      	mov	r7, r1
 8009e48:	f7f6 fe86 	bl	8000b58 <__aeabi_d2iz>
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	4683      	mov	fp, r0
 8009e50:	2300      	movs	r3, #0
 8009e52:	4630      	mov	r0, r6
 8009e54:	4639      	mov	r1, r7
 8009e56:	f7f6 fe41 	bl	8000adc <__aeabi_dcmplt>
 8009e5a:	b148      	cbz	r0, 8009e70 <_dtoa_r+0x190>
 8009e5c:	4658      	mov	r0, fp
 8009e5e:	f7f6 fb61 	bl	8000524 <__aeabi_i2d>
 8009e62:	4632      	mov	r2, r6
 8009e64:	463b      	mov	r3, r7
 8009e66:	f7f6 fe2f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e6a:	b908      	cbnz	r0, 8009e70 <_dtoa_r+0x190>
 8009e6c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009e70:	f1bb 0f16 	cmp.w	fp, #22
 8009e74:	d857      	bhi.n	8009f26 <_dtoa_r+0x246>
 8009e76:	4b5b      	ldr	r3, [pc, #364]	; (8009fe4 <_dtoa_r+0x304>)
 8009e78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	ec51 0b18 	vmov	r0, r1, d8
 8009e84:	f7f6 fe2a 	bl	8000adc <__aeabi_dcmplt>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d04e      	beq.n	8009f2a <_dtoa_r+0x24a>
 8009e8c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009e90:	2300      	movs	r3, #0
 8009e92:	930c      	str	r3, [sp, #48]	; 0x30
 8009e94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e96:	1b5b      	subs	r3, r3, r5
 8009e98:	1e5a      	subs	r2, r3, #1
 8009e9a:	bf45      	ittet	mi
 8009e9c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009ea0:	9305      	strmi	r3, [sp, #20]
 8009ea2:	2300      	movpl	r3, #0
 8009ea4:	2300      	movmi	r3, #0
 8009ea6:	9206      	str	r2, [sp, #24]
 8009ea8:	bf54      	ite	pl
 8009eaa:	9305      	strpl	r3, [sp, #20]
 8009eac:	9306      	strmi	r3, [sp, #24]
 8009eae:	f1bb 0f00 	cmp.w	fp, #0
 8009eb2:	db3c      	blt.n	8009f2e <_dtoa_r+0x24e>
 8009eb4:	9b06      	ldr	r3, [sp, #24]
 8009eb6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009eba:	445b      	add	r3, fp
 8009ebc:	9306      	str	r3, [sp, #24]
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	9308      	str	r3, [sp, #32]
 8009ec2:	9b07      	ldr	r3, [sp, #28]
 8009ec4:	2b09      	cmp	r3, #9
 8009ec6:	d868      	bhi.n	8009f9a <_dtoa_r+0x2ba>
 8009ec8:	2b05      	cmp	r3, #5
 8009eca:	bfc4      	itt	gt
 8009ecc:	3b04      	subgt	r3, #4
 8009ece:	9307      	strgt	r3, [sp, #28]
 8009ed0:	9b07      	ldr	r3, [sp, #28]
 8009ed2:	f1a3 0302 	sub.w	r3, r3, #2
 8009ed6:	bfcc      	ite	gt
 8009ed8:	2500      	movgt	r5, #0
 8009eda:	2501      	movle	r5, #1
 8009edc:	2b03      	cmp	r3, #3
 8009ede:	f200 8085 	bhi.w	8009fec <_dtoa_r+0x30c>
 8009ee2:	e8df f003 	tbb	[pc, r3]
 8009ee6:	3b2e      	.short	0x3b2e
 8009ee8:	5839      	.short	0x5839
 8009eea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009eee:	441d      	add	r5, r3
 8009ef0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009ef4:	2b20      	cmp	r3, #32
 8009ef6:	bfc1      	itttt	gt
 8009ef8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009efc:	fa08 f803 	lslgt.w	r8, r8, r3
 8009f00:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009f04:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009f08:	bfd6      	itet	le
 8009f0a:	f1c3 0320 	rsble	r3, r3, #32
 8009f0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009f12:	fa06 f003 	lslle.w	r0, r6, r3
 8009f16:	f7f6 faf5 	bl	8000504 <__aeabi_ui2d>
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009f20:	3d01      	subs	r5, #1
 8009f22:	920e      	str	r2, [sp, #56]	; 0x38
 8009f24:	e76f      	b.n	8009e06 <_dtoa_r+0x126>
 8009f26:	2301      	movs	r3, #1
 8009f28:	e7b3      	b.n	8009e92 <_dtoa_r+0x1b2>
 8009f2a:	900c      	str	r0, [sp, #48]	; 0x30
 8009f2c:	e7b2      	b.n	8009e94 <_dtoa_r+0x1b4>
 8009f2e:	9b05      	ldr	r3, [sp, #20]
 8009f30:	eba3 030b 	sub.w	r3, r3, fp
 8009f34:	9305      	str	r3, [sp, #20]
 8009f36:	f1cb 0300 	rsb	r3, fp, #0
 8009f3a:	9308      	str	r3, [sp, #32]
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f40:	e7bf      	b.n	8009ec2 <_dtoa_r+0x1e2>
 8009f42:	2300      	movs	r3, #0
 8009f44:	9309      	str	r3, [sp, #36]	; 0x24
 8009f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	dc52      	bgt.n	8009ff2 <_dtoa_r+0x312>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	9301      	str	r3, [sp, #4]
 8009f50:	9304      	str	r3, [sp, #16]
 8009f52:	461a      	mov	r2, r3
 8009f54:	920a      	str	r2, [sp, #40]	; 0x28
 8009f56:	e00b      	b.n	8009f70 <_dtoa_r+0x290>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e7f3      	b.n	8009f44 <_dtoa_r+0x264>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f62:	445b      	add	r3, fp
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	3301      	adds	r3, #1
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	9304      	str	r3, [sp, #16]
 8009f6c:	bfb8      	it	lt
 8009f6e:	2301      	movlt	r3, #1
 8009f70:	69e0      	ldr	r0, [r4, #28]
 8009f72:	2100      	movs	r1, #0
 8009f74:	2204      	movs	r2, #4
 8009f76:	f102 0614 	add.w	r6, r2, #20
 8009f7a:	429e      	cmp	r6, r3
 8009f7c:	d93d      	bls.n	8009ffa <_dtoa_r+0x31a>
 8009f7e:	6041      	str	r1, [r0, #4]
 8009f80:	4620      	mov	r0, r4
 8009f82:	f001 f835 	bl	800aff0 <_Balloc>
 8009f86:	9000      	str	r0, [sp, #0]
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	d139      	bne.n	800a000 <_dtoa_r+0x320>
 8009f8c:	4b16      	ldr	r3, [pc, #88]	; (8009fe8 <_dtoa_r+0x308>)
 8009f8e:	4602      	mov	r2, r0
 8009f90:	f240 11af 	movw	r1, #431	; 0x1af
 8009f94:	e6bd      	b.n	8009d12 <_dtoa_r+0x32>
 8009f96:	2301      	movs	r3, #1
 8009f98:	e7e1      	b.n	8009f5e <_dtoa_r+0x27e>
 8009f9a:	2501      	movs	r5, #1
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	9307      	str	r3, [sp, #28]
 8009fa0:	9509      	str	r5, [sp, #36]	; 0x24
 8009fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fa6:	9301      	str	r3, [sp, #4]
 8009fa8:	9304      	str	r3, [sp, #16]
 8009faa:	2200      	movs	r2, #0
 8009fac:	2312      	movs	r3, #18
 8009fae:	e7d1      	b.n	8009f54 <_dtoa_r+0x274>
 8009fb0:	636f4361 	.word	0x636f4361
 8009fb4:	3fd287a7 	.word	0x3fd287a7
 8009fb8:	8b60c8b3 	.word	0x8b60c8b3
 8009fbc:	3fc68a28 	.word	0x3fc68a28
 8009fc0:	509f79fb 	.word	0x509f79fb
 8009fc4:	3fd34413 	.word	0x3fd34413
 8009fc8:	0800c08b 	.word	0x0800c08b
 8009fcc:	0800c0a2 	.word	0x0800c0a2
 8009fd0:	7ff00000 	.word	0x7ff00000
 8009fd4:	0800c087 	.word	0x0800c087
 8009fd8:	0800c07e 	.word	0x0800c07e
 8009fdc:	0800c05b 	.word	0x0800c05b
 8009fe0:	3ff80000 	.word	0x3ff80000
 8009fe4:	0800c1a0 	.word	0x0800c1a0
 8009fe8:	0800c0fa 	.word	0x0800c0fa
 8009fec:	2301      	movs	r3, #1
 8009fee:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff0:	e7d7      	b.n	8009fa2 <_dtoa_r+0x2c2>
 8009ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ff4:	9301      	str	r3, [sp, #4]
 8009ff6:	9304      	str	r3, [sp, #16]
 8009ff8:	e7ba      	b.n	8009f70 <_dtoa_r+0x290>
 8009ffa:	3101      	adds	r1, #1
 8009ffc:	0052      	lsls	r2, r2, #1
 8009ffe:	e7ba      	b.n	8009f76 <_dtoa_r+0x296>
 800a000:	69e3      	ldr	r3, [r4, #28]
 800a002:	9a00      	ldr	r2, [sp, #0]
 800a004:	601a      	str	r2, [r3, #0]
 800a006:	9b04      	ldr	r3, [sp, #16]
 800a008:	2b0e      	cmp	r3, #14
 800a00a:	f200 80a8 	bhi.w	800a15e <_dtoa_r+0x47e>
 800a00e:	2d00      	cmp	r5, #0
 800a010:	f000 80a5 	beq.w	800a15e <_dtoa_r+0x47e>
 800a014:	f1bb 0f00 	cmp.w	fp, #0
 800a018:	dd38      	ble.n	800a08c <_dtoa_r+0x3ac>
 800a01a:	4bc0      	ldr	r3, [pc, #768]	; (800a31c <_dtoa_r+0x63c>)
 800a01c:	f00b 020f 	and.w	r2, fp, #15
 800a020:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a024:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a028:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a02c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a030:	d019      	beq.n	800a066 <_dtoa_r+0x386>
 800a032:	4bbb      	ldr	r3, [pc, #748]	; (800a320 <_dtoa_r+0x640>)
 800a034:	ec51 0b18 	vmov	r0, r1, d8
 800a038:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a03c:	f7f6 fc06 	bl	800084c <__aeabi_ddiv>
 800a040:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a044:	f008 080f 	and.w	r8, r8, #15
 800a048:	2503      	movs	r5, #3
 800a04a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a320 <_dtoa_r+0x640>
 800a04e:	f1b8 0f00 	cmp.w	r8, #0
 800a052:	d10a      	bne.n	800a06a <_dtoa_r+0x38a>
 800a054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a058:	4632      	mov	r2, r6
 800a05a:	463b      	mov	r3, r7
 800a05c:	f7f6 fbf6 	bl	800084c <__aeabi_ddiv>
 800a060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a064:	e02b      	b.n	800a0be <_dtoa_r+0x3de>
 800a066:	2502      	movs	r5, #2
 800a068:	e7ef      	b.n	800a04a <_dtoa_r+0x36a>
 800a06a:	f018 0f01 	tst.w	r8, #1
 800a06e:	d008      	beq.n	800a082 <_dtoa_r+0x3a2>
 800a070:	4630      	mov	r0, r6
 800a072:	4639      	mov	r1, r7
 800a074:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a078:	f7f6 fabe 	bl	80005f8 <__aeabi_dmul>
 800a07c:	3501      	adds	r5, #1
 800a07e:	4606      	mov	r6, r0
 800a080:	460f      	mov	r7, r1
 800a082:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a086:	f109 0908 	add.w	r9, r9, #8
 800a08a:	e7e0      	b.n	800a04e <_dtoa_r+0x36e>
 800a08c:	f000 809f 	beq.w	800a1ce <_dtoa_r+0x4ee>
 800a090:	f1cb 0600 	rsb	r6, fp, #0
 800a094:	4ba1      	ldr	r3, [pc, #644]	; (800a31c <_dtoa_r+0x63c>)
 800a096:	4fa2      	ldr	r7, [pc, #648]	; (800a320 <_dtoa_r+0x640>)
 800a098:	f006 020f 	and.w	r2, r6, #15
 800a09c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a4:	ec51 0b18 	vmov	r0, r1, d8
 800a0a8:	f7f6 faa6 	bl	80005f8 <__aeabi_dmul>
 800a0ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0b0:	1136      	asrs	r6, r6, #4
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	2502      	movs	r5, #2
 800a0b6:	2e00      	cmp	r6, #0
 800a0b8:	d17e      	bne.n	800a1b8 <_dtoa_r+0x4d8>
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1d0      	bne.n	800a060 <_dtoa_r+0x380>
 800a0be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f000 8084 	beq.w	800a1d2 <_dtoa_r+0x4f2>
 800a0ca:	4b96      	ldr	r3, [pc, #600]	; (800a324 <_dtoa_r+0x644>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	4640      	mov	r0, r8
 800a0d0:	4649      	mov	r1, r9
 800a0d2:	f7f6 fd03 	bl	8000adc <__aeabi_dcmplt>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d07b      	beq.n	800a1d2 <_dtoa_r+0x4f2>
 800a0da:	9b04      	ldr	r3, [sp, #16]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d078      	beq.n	800a1d2 <_dtoa_r+0x4f2>
 800a0e0:	9b01      	ldr	r3, [sp, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	dd39      	ble.n	800a15a <_dtoa_r+0x47a>
 800a0e6:	4b90      	ldr	r3, [pc, #576]	; (800a328 <_dtoa_r+0x648>)
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	4640      	mov	r0, r8
 800a0ec:	4649      	mov	r1, r9
 800a0ee:	f7f6 fa83 	bl	80005f8 <__aeabi_dmul>
 800a0f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0f6:	9e01      	ldr	r6, [sp, #4]
 800a0f8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a0fc:	3501      	adds	r5, #1
 800a0fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a102:	4628      	mov	r0, r5
 800a104:	f7f6 fa0e 	bl	8000524 <__aeabi_i2d>
 800a108:	4642      	mov	r2, r8
 800a10a:	464b      	mov	r3, r9
 800a10c:	f7f6 fa74 	bl	80005f8 <__aeabi_dmul>
 800a110:	4b86      	ldr	r3, [pc, #536]	; (800a32c <_dtoa_r+0x64c>)
 800a112:	2200      	movs	r2, #0
 800a114:	f7f6 f8ba 	bl	800028c <__adddf3>
 800a118:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a11c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a120:	9303      	str	r3, [sp, #12]
 800a122:	2e00      	cmp	r6, #0
 800a124:	d158      	bne.n	800a1d8 <_dtoa_r+0x4f8>
 800a126:	4b82      	ldr	r3, [pc, #520]	; (800a330 <_dtoa_r+0x650>)
 800a128:	2200      	movs	r2, #0
 800a12a:	4640      	mov	r0, r8
 800a12c:	4649      	mov	r1, r9
 800a12e:	f7f6 f8ab 	bl	8000288 <__aeabi_dsub>
 800a132:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a136:	4680      	mov	r8, r0
 800a138:	4689      	mov	r9, r1
 800a13a:	f7f6 fced 	bl	8000b18 <__aeabi_dcmpgt>
 800a13e:	2800      	cmp	r0, #0
 800a140:	f040 8296 	bne.w	800a670 <_dtoa_r+0x990>
 800a144:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a148:	4640      	mov	r0, r8
 800a14a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a14e:	4649      	mov	r1, r9
 800a150:	f7f6 fcc4 	bl	8000adc <__aeabi_dcmplt>
 800a154:	2800      	cmp	r0, #0
 800a156:	f040 8289 	bne.w	800a66c <_dtoa_r+0x98c>
 800a15a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a15e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a160:	2b00      	cmp	r3, #0
 800a162:	f2c0 814e 	blt.w	800a402 <_dtoa_r+0x722>
 800a166:	f1bb 0f0e 	cmp.w	fp, #14
 800a16a:	f300 814a 	bgt.w	800a402 <_dtoa_r+0x722>
 800a16e:	4b6b      	ldr	r3, [pc, #428]	; (800a31c <_dtoa_r+0x63c>)
 800a170:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a174:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f280 80dc 	bge.w	800a338 <_dtoa_r+0x658>
 800a180:	9b04      	ldr	r3, [sp, #16]
 800a182:	2b00      	cmp	r3, #0
 800a184:	f300 80d8 	bgt.w	800a338 <_dtoa_r+0x658>
 800a188:	f040 826f 	bne.w	800a66a <_dtoa_r+0x98a>
 800a18c:	4b68      	ldr	r3, [pc, #416]	; (800a330 <_dtoa_r+0x650>)
 800a18e:	2200      	movs	r2, #0
 800a190:	4640      	mov	r0, r8
 800a192:	4649      	mov	r1, r9
 800a194:	f7f6 fa30 	bl	80005f8 <__aeabi_dmul>
 800a198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a19c:	f7f6 fcb2 	bl	8000b04 <__aeabi_dcmpge>
 800a1a0:	9e04      	ldr	r6, [sp, #16]
 800a1a2:	4637      	mov	r7, r6
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	f040 8245 	bne.w	800a634 <_dtoa_r+0x954>
 800a1aa:	9d00      	ldr	r5, [sp, #0]
 800a1ac:	2331      	movs	r3, #49	; 0x31
 800a1ae:	f805 3b01 	strb.w	r3, [r5], #1
 800a1b2:	f10b 0b01 	add.w	fp, fp, #1
 800a1b6:	e241      	b.n	800a63c <_dtoa_r+0x95c>
 800a1b8:	07f2      	lsls	r2, r6, #31
 800a1ba:	d505      	bpl.n	800a1c8 <_dtoa_r+0x4e8>
 800a1bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1c0:	f7f6 fa1a 	bl	80005f8 <__aeabi_dmul>
 800a1c4:	3501      	adds	r5, #1
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	1076      	asrs	r6, r6, #1
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	e773      	b.n	800a0b6 <_dtoa_r+0x3d6>
 800a1ce:	2502      	movs	r5, #2
 800a1d0:	e775      	b.n	800a0be <_dtoa_r+0x3de>
 800a1d2:	9e04      	ldr	r6, [sp, #16]
 800a1d4:	465f      	mov	r7, fp
 800a1d6:	e792      	b.n	800a0fe <_dtoa_r+0x41e>
 800a1d8:	9900      	ldr	r1, [sp, #0]
 800a1da:	4b50      	ldr	r3, [pc, #320]	; (800a31c <_dtoa_r+0x63c>)
 800a1dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1e0:	4431      	add	r1, r6
 800a1e2:	9102      	str	r1, [sp, #8]
 800a1e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1e6:	eeb0 9a47 	vmov.f32	s18, s14
 800a1ea:	eef0 9a67 	vmov.f32	s19, s15
 800a1ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a1f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1f6:	2900      	cmp	r1, #0
 800a1f8:	d044      	beq.n	800a284 <_dtoa_r+0x5a4>
 800a1fa:	494e      	ldr	r1, [pc, #312]	; (800a334 <_dtoa_r+0x654>)
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	f7f6 fb25 	bl	800084c <__aeabi_ddiv>
 800a202:	ec53 2b19 	vmov	r2, r3, d9
 800a206:	f7f6 f83f 	bl	8000288 <__aeabi_dsub>
 800a20a:	9d00      	ldr	r5, [sp, #0]
 800a20c:	ec41 0b19 	vmov	d9, r0, r1
 800a210:	4649      	mov	r1, r9
 800a212:	4640      	mov	r0, r8
 800a214:	f7f6 fca0 	bl	8000b58 <__aeabi_d2iz>
 800a218:	4606      	mov	r6, r0
 800a21a:	f7f6 f983 	bl	8000524 <__aeabi_i2d>
 800a21e:	4602      	mov	r2, r0
 800a220:	460b      	mov	r3, r1
 800a222:	4640      	mov	r0, r8
 800a224:	4649      	mov	r1, r9
 800a226:	f7f6 f82f 	bl	8000288 <__aeabi_dsub>
 800a22a:	3630      	adds	r6, #48	; 0x30
 800a22c:	f805 6b01 	strb.w	r6, [r5], #1
 800a230:	ec53 2b19 	vmov	r2, r3, d9
 800a234:	4680      	mov	r8, r0
 800a236:	4689      	mov	r9, r1
 800a238:	f7f6 fc50 	bl	8000adc <__aeabi_dcmplt>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d164      	bne.n	800a30a <_dtoa_r+0x62a>
 800a240:	4642      	mov	r2, r8
 800a242:	464b      	mov	r3, r9
 800a244:	4937      	ldr	r1, [pc, #220]	; (800a324 <_dtoa_r+0x644>)
 800a246:	2000      	movs	r0, #0
 800a248:	f7f6 f81e 	bl	8000288 <__aeabi_dsub>
 800a24c:	ec53 2b19 	vmov	r2, r3, d9
 800a250:	f7f6 fc44 	bl	8000adc <__aeabi_dcmplt>
 800a254:	2800      	cmp	r0, #0
 800a256:	f040 80b6 	bne.w	800a3c6 <_dtoa_r+0x6e6>
 800a25a:	9b02      	ldr	r3, [sp, #8]
 800a25c:	429d      	cmp	r5, r3
 800a25e:	f43f af7c 	beq.w	800a15a <_dtoa_r+0x47a>
 800a262:	4b31      	ldr	r3, [pc, #196]	; (800a328 <_dtoa_r+0x648>)
 800a264:	ec51 0b19 	vmov	r0, r1, d9
 800a268:	2200      	movs	r2, #0
 800a26a:	f7f6 f9c5 	bl	80005f8 <__aeabi_dmul>
 800a26e:	4b2e      	ldr	r3, [pc, #184]	; (800a328 <_dtoa_r+0x648>)
 800a270:	ec41 0b19 	vmov	d9, r0, r1
 800a274:	2200      	movs	r2, #0
 800a276:	4640      	mov	r0, r8
 800a278:	4649      	mov	r1, r9
 800a27a:	f7f6 f9bd 	bl	80005f8 <__aeabi_dmul>
 800a27e:	4680      	mov	r8, r0
 800a280:	4689      	mov	r9, r1
 800a282:	e7c5      	b.n	800a210 <_dtoa_r+0x530>
 800a284:	ec51 0b17 	vmov	r0, r1, d7
 800a288:	f7f6 f9b6 	bl	80005f8 <__aeabi_dmul>
 800a28c:	9b02      	ldr	r3, [sp, #8]
 800a28e:	9d00      	ldr	r5, [sp, #0]
 800a290:	930f      	str	r3, [sp, #60]	; 0x3c
 800a292:	ec41 0b19 	vmov	d9, r0, r1
 800a296:	4649      	mov	r1, r9
 800a298:	4640      	mov	r0, r8
 800a29a:	f7f6 fc5d 	bl	8000b58 <__aeabi_d2iz>
 800a29e:	4606      	mov	r6, r0
 800a2a0:	f7f6 f940 	bl	8000524 <__aeabi_i2d>
 800a2a4:	3630      	adds	r6, #48	; 0x30
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	4649      	mov	r1, r9
 800a2ae:	f7f5 ffeb 	bl	8000288 <__aeabi_dsub>
 800a2b2:	f805 6b01 	strb.w	r6, [r5], #1
 800a2b6:	9b02      	ldr	r3, [sp, #8]
 800a2b8:	429d      	cmp	r5, r3
 800a2ba:	4680      	mov	r8, r0
 800a2bc:	4689      	mov	r9, r1
 800a2be:	f04f 0200 	mov.w	r2, #0
 800a2c2:	d124      	bne.n	800a30e <_dtoa_r+0x62e>
 800a2c4:	4b1b      	ldr	r3, [pc, #108]	; (800a334 <_dtoa_r+0x654>)
 800a2c6:	ec51 0b19 	vmov	r0, r1, d9
 800a2ca:	f7f5 ffdf 	bl	800028c <__adddf3>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	4649      	mov	r1, r9
 800a2d6:	f7f6 fc1f 	bl	8000b18 <__aeabi_dcmpgt>
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d173      	bne.n	800a3c6 <_dtoa_r+0x6e6>
 800a2de:	ec53 2b19 	vmov	r2, r3, d9
 800a2e2:	4914      	ldr	r1, [pc, #80]	; (800a334 <_dtoa_r+0x654>)
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	f7f5 ffcf 	bl	8000288 <__aeabi_dsub>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	4649      	mov	r1, r9
 800a2f2:	f7f6 fbf3 	bl	8000adc <__aeabi_dcmplt>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	f43f af2f 	beq.w	800a15a <_dtoa_r+0x47a>
 800a2fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a2fe:	1e6b      	subs	r3, r5, #1
 800a300:	930f      	str	r3, [sp, #60]	; 0x3c
 800a302:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a306:	2b30      	cmp	r3, #48	; 0x30
 800a308:	d0f8      	beq.n	800a2fc <_dtoa_r+0x61c>
 800a30a:	46bb      	mov	fp, r7
 800a30c:	e04a      	b.n	800a3a4 <_dtoa_r+0x6c4>
 800a30e:	4b06      	ldr	r3, [pc, #24]	; (800a328 <_dtoa_r+0x648>)
 800a310:	f7f6 f972 	bl	80005f8 <__aeabi_dmul>
 800a314:	4680      	mov	r8, r0
 800a316:	4689      	mov	r9, r1
 800a318:	e7bd      	b.n	800a296 <_dtoa_r+0x5b6>
 800a31a:	bf00      	nop
 800a31c:	0800c1a0 	.word	0x0800c1a0
 800a320:	0800c178 	.word	0x0800c178
 800a324:	3ff00000 	.word	0x3ff00000
 800a328:	40240000 	.word	0x40240000
 800a32c:	401c0000 	.word	0x401c0000
 800a330:	40140000 	.word	0x40140000
 800a334:	3fe00000 	.word	0x3fe00000
 800a338:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a33c:	9d00      	ldr	r5, [sp, #0]
 800a33e:	4642      	mov	r2, r8
 800a340:	464b      	mov	r3, r9
 800a342:	4630      	mov	r0, r6
 800a344:	4639      	mov	r1, r7
 800a346:	f7f6 fa81 	bl	800084c <__aeabi_ddiv>
 800a34a:	f7f6 fc05 	bl	8000b58 <__aeabi_d2iz>
 800a34e:	9001      	str	r0, [sp, #4]
 800a350:	f7f6 f8e8 	bl	8000524 <__aeabi_i2d>
 800a354:	4642      	mov	r2, r8
 800a356:	464b      	mov	r3, r9
 800a358:	f7f6 f94e 	bl	80005f8 <__aeabi_dmul>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	4630      	mov	r0, r6
 800a362:	4639      	mov	r1, r7
 800a364:	f7f5 ff90 	bl	8000288 <__aeabi_dsub>
 800a368:	9e01      	ldr	r6, [sp, #4]
 800a36a:	9f04      	ldr	r7, [sp, #16]
 800a36c:	3630      	adds	r6, #48	; 0x30
 800a36e:	f805 6b01 	strb.w	r6, [r5], #1
 800a372:	9e00      	ldr	r6, [sp, #0]
 800a374:	1bae      	subs	r6, r5, r6
 800a376:	42b7      	cmp	r7, r6
 800a378:	4602      	mov	r2, r0
 800a37a:	460b      	mov	r3, r1
 800a37c:	d134      	bne.n	800a3e8 <_dtoa_r+0x708>
 800a37e:	f7f5 ff85 	bl	800028c <__adddf3>
 800a382:	4642      	mov	r2, r8
 800a384:	464b      	mov	r3, r9
 800a386:	4606      	mov	r6, r0
 800a388:	460f      	mov	r7, r1
 800a38a:	f7f6 fbc5 	bl	8000b18 <__aeabi_dcmpgt>
 800a38e:	b9c8      	cbnz	r0, 800a3c4 <_dtoa_r+0x6e4>
 800a390:	4642      	mov	r2, r8
 800a392:	464b      	mov	r3, r9
 800a394:	4630      	mov	r0, r6
 800a396:	4639      	mov	r1, r7
 800a398:	f7f6 fb96 	bl	8000ac8 <__aeabi_dcmpeq>
 800a39c:	b110      	cbz	r0, 800a3a4 <_dtoa_r+0x6c4>
 800a39e:	9b01      	ldr	r3, [sp, #4]
 800a3a0:	07db      	lsls	r3, r3, #31
 800a3a2:	d40f      	bmi.n	800a3c4 <_dtoa_r+0x6e4>
 800a3a4:	4651      	mov	r1, sl
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f000 fe62 	bl	800b070 <_Bfree>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3b0:	702b      	strb	r3, [r5, #0]
 800a3b2:	f10b 0301 	add.w	r3, fp, #1
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f43f ace2 	beq.w	8009d84 <_dtoa_r+0xa4>
 800a3c0:	601d      	str	r5, [r3, #0]
 800a3c2:	e4df      	b.n	8009d84 <_dtoa_r+0xa4>
 800a3c4:	465f      	mov	r7, fp
 800a3c6:	462b      	mov	r3, r5
 800a3c8:	461d      	mov	r5, r3
 800a3ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3ce:	2a39      	cmp	r2, #57	; 0x39
 800a3d0:	d106      	bne.n	800a3e0 <_dtoa_r+0x700>
 800a3d2:	9a00      	ldr	r2, [sp, #0]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d1f7      	bne.n	800a3c8 <_dtoa_r+0x6e8>
 800a3d8:	9900      	ldr	r1, [sp, #0]
 800a3da:	2230      	movs	r2, #48	; 0x30
 800a3dc:	3701      	adds	r7, #1
 800a3de:	700a      	strb	r2, [r1, #0]
 800a3e0:	781a      	ldrb	r2, [r3, #0]
 800a3e2:	3201      	adds	r2, #1
 800a3e4:	701a      	strb	r2, [r3, #0]
 800a3e6:	e790      	b.n	800a30a <_dtoa_r+0x62a>
 800a3e8:	4ba3      	ldr	r3, [pc, #652]	; (800a678 <_dtoa_r+0x998>)
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f7f6 f904 	bl	80005f8 <__aeabi_dmul>
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	4606      	mov	r6, r0
 800a3f6:	460f      	mov	r7, r1
 800a3f8:	f7f6 fb66 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d09e      	beq.n	800a33e <_dtoa_r+0x65e>
 800a400:	e7d0      	b.n	800a3a4 <_dtoa_r+0x6c4>
 800a402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a404:	2a00      	cmp	r2, #0
 800a406:	f000 80ca 	beq.w	800a59e <_dtoa_r+0x8be>
 800a40a:	9a07      	ldr	r2, [sp, #28]
 800a40c:	2a01      	cmp	r2, #1
 800a40e:	f300 80ad 	bgt.w	800a56c <_dtoa_r+0x88c>
 800a412:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a414:	2a00      	cmp	r2, #0
 800a416:	f000 80a5 	beq.w	800a564 <_dtoa_r+0x884>
 800a41a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a41e:	9e08      	ldr	r6, [sp, #32]
 800a420:	9d05      	ldr	r5, [sp, #20]
 800a422:	9a05      	ldr	r2, [sp, #20]
 800a424:	441a      	add	r2, r3
 800a426:	9205      	str	r2, [sp, #20]
 800a428:	9a06      	ldr	r2, [sp, #24]
 800a42a:	2101      	movs	r1, #1
 800a42c:	441a      	add	r2, r3
 800a42e:	4620      	mov	r0, r4
 800a430:	9206      	str	r2, [sp, #24]
 800a432:	f000 fed3 	bl	800b1dc <__i2b>
 800a436:	4607      	mov	r7, r0
 800a438:	b165      	cbz	r5, 800a454 <_dtoa_r+0x774>
 800a43a:	9b06      	ldr	r3, [sp, #24]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	dd09      	ble.n	800a454 <_dtoa_r+0x774>
 800a440:	42ab      	cmp	r3, r5
 800a442:	9a05      	ldr	r2, [sp, #20]
 800a444:	bfa8      	it	ge
 800a446:	462b      	movge	r3, r5
 800a448:	1ad2      	subs	r2, r2, r3
 800a44a:	9205      	str	r2, [sp, #20]
 800a44c:	9a06      	ldr	r2, [sp, #24]
 800a44e:	1aed      	subs	r5, r5, r3
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	9306      	str	r3, [sp, #24]
 800a454:	9b08      	ldr	r3, [sp, #32]
 800a456:	b1f3      	cbz	r3, 800a496 <_dtoa_r+0x7b6>
 800a458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 80a3 	beq.w	800a5a6 <_dtoa_r+0x8c6>
 800a460:	2e00      	cmp	r6, #0
 800a462:	dd10      	ble.n	800a486 <_dtoa_r+0x7a6>
 800a464:	4639      	mov	r1, r7
 800a466:	4632      	mov	r2, r6
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 ff77 	bl	800b35c <__pow5mult>
 800a46e:	4652      	mov	r2, sl
 800a470:	4601      	mov	r1, r0
 800a472:	4607      	mov	r7, r0
 800a474:	4620      	mov	r0, r4
 800a476:	f000 fec7 	bl	800b208 <__multiply>
 800a47a:	4651      	mov	r1, sl
 800a47c:	4680      	mov	r8, r0
 800a47e:	4620      	mov	r0, r4
 800a480:	f000 fdf6 	bl	800b070 <_Bfree>
 800a484:	46c2      	mov	sl, r8
 800a486:	9b08      	ldr	r3, [sp, #32]
 800a488:	1b9a      	subs	r2, r3, r6
 800a48a:	d004      	beq.n	800a496 <_dtoa_r+0x7b6>
 800a48c:	4651      	mov	r1, sl
 800a48e:	4620      	mov	r0, r4
 800a490:	f000 ff64 	bl	800b35c <__pow5mult>
 800a494:	4682      	mov	sl, r0
 800a496:	2101      	movs	r1, #1
 800a498:	4620      	mov	r0, r4
 800a49a:	f000 fe9f 	bl	800b1dc <__i2b>
 800a49e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	4606      	mov	r6, r0
 800a4a4:	f340 8081 	ble.w	800a5aa <_dtoa_r+0x8ca>
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	4601      	mov	r1, r0
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f000 ff55 	bl	800b35c <__pow5mult>
 800a4b2:	9b07      	ldr	r3, [sp, #28]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	4606      	mov	r6, r0
 800a4b8:	dd7a      	ble.n	800a5b0 <_dtoa_r+0x8d0>
 800a4ba:	f04f 0800 	mov.w	r8, #0
 800a4be:	6933      	ldr	r3, [r6, #16]
 800a4c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a4c4:	6918      	ldr	r0, [r3, #16]
 800a4c6:	f000 fe3b 	bl	800b140 <__hi0bits>
 800a4ca:	f1c0 0020 	rsb	r0, r0, #32
 800a4ce:	9b06      	ldr	r3, [sp, #24]
 800a4d0:	4418      	add	r0, r3
 800a4d2:	f010 001f 	ands.w	r0, r0, #31
 800a4d6:	f000 8094 	beq.w	800a602 <_dtoa_r+0x922>
 800a4da:	f1c0 0320 	rsb	r3, r0, #32
 800a4de:	2b04      	cmp	r3, #4
 800a4e0:	f340 8085 	ble.w	800a5ee <_dtoa_r+0x90e>
 800a4e4:	9b05      	ldr	r3, [sp, #20]
 800a4e6:	f1c0 001c 	rsb	r0, r0, #28
 800a4ea:	4403      	add	r3, r0
 800a4ec:	9305      	str	r3, [sp, #20]
 800a4ee:	9b06      	ldr	r3, [sp, #24]
 800a4f0:	4403      	add	r3, r0
 800a4f2:	4405      	add	r5, r0
 800a4f4:	9306      	str	r3, [sp, #24]
 800a4f6:	9b05      	ldr	r3, [sp, #20]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	dd05      	ble.n	800a508 <_dtoa_r+0x828>
 800a4fc:	4651      	mov	r1, sl
 800a4fe:	461a      	mov	r2, r3
 800a500:	4620      	mov	r0, r4
 800a502:	f000 ff85 	bl	800b410 <__lshift>
 800a506:	4682      	mov	sl, r0
 800a508:	9b06      	ldr	r3, [sp, #24]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	dd05      	ble.n	800a51a <_dtoa_r+0x83a>
 800a50e:	4631      	mov	r1, r6
 800a510:	461a      	mov	r2, r3
 800a512:	4620      	mov	r0, r4
 800a514:	f000 ff7c 	bl	800b410 <__lshift>
 800a518:	4606      	mov	r6, r0
 800a51a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d072      	beq.n	800a606 <_dtoa_r+0x926>
 800a520:	4631      	mov	r1, r6
 800a522:	4650      	mov	r0, sl
 800a524:	f000 ffe0 	bl	800b4e8 <__mcmp>
 800a528:	2800      	cmp	r0, #0
 800a52a:	da6c      	bge.n	800a606 <_dtoa_r+0x926>
 800a52c:	2300      	movs	r3, #0
 800a52e:	4651      	mov	r1, sl
 800a530:	220a      	movs	r2, #10
 800a532:	4620      	mov	r0, r4
 800a534:	f000 fdbe 	bl	800b0b4 <__multadd>
 800a538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a53a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a53e:	4682      	mov	sl, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	f000 81b0 	beq.w	800a8a6 <_dtoa_r+0xbc6>
 800a546:	2300      	movs	r3, #0
 800a548:	4639      	mov	r1, r7
 800a54a:	220a      	movs	r2, #10
 800a54c:	4620      	mov	r0, r4
 800a54e:	f000 fdb1 	bl	800b0b4 <__multadd>
 800a552:	9b01      	ldr	r3, [sp, #4]
 800a554:	2b00      	cmp	r3, #0
 800a556:	4607      	mov	r7, r0
 800a558:	f300 8096 	bgt.w	800a688 <_dtoa_r+0x9a8>
 800a55c:	9b07      	ldr	r3, [sp, #28]
 800a55e:	2b02      	cmp	r3, #2
 800a560:	dc59      	bgt.n	800a616 <_dtoa_r+0x936>
 800a562:	e091      	b.n	800a688 <_dtoa_r+0x9a8>
 800a564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a566:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a56a:	e758      	b.n	800a41e <_dtoa_r+0x73e>
 800a56c:	9b04      	ldr	r3, [sp, #16]
 800a56e:	1e5e      	subs	r6, r3, #1
 800a570:	9b08      	ldr	r3, [sp, #32]
 800a572:	42b3      	cmp	r3, r6
 800a574:	bfbf      	itttt	lt
 800a576:	9b08      	ldrlt	r3, [sp, #32]
 800a578:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a57a:	9608      	strlt	r6, [sp, #32]
 800a57c:	1af3      	sublt	r3, r6, r3
 800a57e:	bfb4      	ite	lt
 800a580:	18d2      	addlt	r2, r2, r3
 800a582:	1b9e      	subge	r6, r3, r6
 800a584:	9b04      	ldr	r3, [sp, #16]
 800a586:	bfbc      	itt	lt
 800a588:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a58a:	2600      	movlt	r6, #0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	bfb7      	itett	lt
 800a590:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a594:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a598:	1a9d      	sublt	r5, r3, r2
 800a59a:	2300      	movlt	r3, #0
 800a59c:	e741      	b.n	800a422 <_dtoa_r+0x742>
 800a59e:	9e08      	ldr	r6, [sp, #32]
 800a5a0:	9d05      	ldr	r5, [sp, #20]
 800a5a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a5a4:	e748      	b.n	800a438 <_dtoa_r+0x758>
 800a5a6:	9a08      	ldr	r2, [sp, #32]
 800a5a8:	e770      	b.n	800a48c <_dtoa_r+0x7ac>
 800a5aa:	9b07      	ldr	r3, [sp, #28]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	dc19      	bgt.n	800a5e4 <_dtoa_r+0x904>
 800a5b0:	9b02      	ldr	r3, [sp, #8]
 800a5b2:	b9bb      	cbnz	r3, 800a5e4 <_dtoa_r+0x904>
 800a5b4:	9b03      	ldr	r3, [sp, #12]
 800a5b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5ba:	b99b      	cbnz	r3, 800a5e4 <_dtoa_r+0x904>
 800a5bc:	9b03      	ldr	r3, [sp, #12]
 800a5be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5c2:	0d1b      	lsrs	r3, r3, #20
 800a5c4:	051b      	lsls	r3, r3, #20
 800a5c6:	b183      	cbz	r3, 800a5ea <_dtoa_r+0x90a>
 800a5c8:	9b05      	ldr	r3, [sp, #20]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	9305      	str	r3, [sp, #20]
 800a5ce:	9b06      	ldr	r3, [sp, #24]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	9306      	str	r3, [sp, #24]
 800a5d4:	f04f 0801 	mov.w	r8, #1
 800a5d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f47f af6f 	bne.w	800a4be <_dtoa_r+0x7de>
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	e774      	b.n	800a4ce <_dtoa_r+0x7ee>
 800a5e4:	f04f 0800 	mov.w	r8, #0
 800a5e8:	e7f6      	b.n	800a5d8 <_dtoa_r+0x8f8>
 800a5ea:	4698      	mov	r8, r3
 800a5ec:	e7f4      	b.n	800a5d8 <_dtoa_r+0x8f8>
 800a5ee:	d082      	beq.n	800a4f6 <_dtoa_r+0x816>
 800a5f0:	9a05      	ldr	r2, [sp, #20]
 800a5f2:	331c      	adds	r3, #28
 800a5f4:	441a      	add	r2, r3
 800a5f6:	9205      	str	r2, [sp, #20]
 800a5f8:	9a06      	ldr	r2, [sp, #24]
 800a5fa:	441a      	add	r2, r3
 800a5fc:	441d      	add	r5, r3
 800a5fe:	9206      	str	r2, [sp, #24]
 800a600:	e779      	b.n	800a4f6 <_dtoa_r+0x816>
 800a602:	4603      	mov	r3, r0
 800a604:	e7f4      	b.n	800a5f0 <_dtoa_r+0x910>
 800a606:	9b04      	ldr	r3, [sp, #16]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	dc37      	bgt.n	800a67c <_dtoa_r+0x99c>
 800a60c:	9b07      	ldr	r3, [sp, #28]
 800a60e:	2b02      	cmp	r3, #2
 800a610:	dd34      	ble.n	800a67c <_dtoa_r+0x99c>
 800a612:	9b04      	ldr	r3, [sp, #16]
 800a614:	9301      	str	r3, [sp, #4]
 800a616:	9b01      	ldr	r3, [sp, #4]
 800a618:	b963      	cbnz	r3, 800a634 <_dtoa_r+0x954>
 800a61a:	4631      	mov	r1, r6
 800a61c:	2205      	movs	r2, #5
 800a61e:	4620      	mov	r0, r4
 800a620:	f000 fd48 	bl	800b0b4 <__multadd>
 800a624:	4601      	mov	r1, r0
 800a626:	4606      	mov	r6, r0
 800a628:	4650      	mov	r0, sl
 800a62a:	f000 ff5d 	bl	800b4e8 <__mcmp>
 800a62e:	2800      	cmp	r0, #0
 800a630:	f73f adbb 	bgt.w	800a1aa <_dtoa_r+0x4ca>
 800a634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a636:	9d00      	ldr	r5, [sp, #0]
 800a638:	ea6f 0b03 	mvn.w	fp, r3
 800a63c:	f04f 0800 	mov.w	r8, #0
 800a640:	4631      	mov	r1, r6
 800a642:	4620      	mov	r0, r4
 800a644:	f000 fd14 	bl	800b070 <_Bfree>
 800a648:	2f00      	cmp	r7, #0
 800a64a:	f43f aeab 	beq.w	800a3a4 <_dtoa_r+0x6c4>
 800a64e:	f1b8 0f00 	cmp.w	r8, #0
 800a652:	d005      	beq.n	800a660 <_dtoa_r+0x980>
 800a654:	45b8      	cmp	r8, r7
 800a656:	d003      	beq.n	800a660 <_dtoa_r+0x980>
 800a658:	4641      	mov	r1, r8
 800a65a:	4620      	mov	r0, r4
 800a65c:	f000 fd08 	bl	800b070 <_Bfree>
 800a660:	4639      	mov	r1, r7
 800a662:	4620      	mov	r0, r4
 800a664:	f000 fd04 	bl	800b070 <_Bfree>
 800a668:	e69c      	b.n	800a3a4 <_dtoa_r+0x6c4>
 800a66a:	2600      	movs	r6, #0
 800a66c:	4637      	mov	r7, r6
 800a66e:	e7e1      	b.n	800a634 <_dtoa_r+0x954>
 800a670:	46bb      	mov	fp, r7
 800a672:	4637      	mov	r7, r6
 800a674:	e599      	b.n	800a1aa <_dtoa_r+0x4ca>
 800a676:	bf00      	nop
 800a678:	40240000 	.word	0x40240000
 800a67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f000 80c8 	beq.w	800a814 <_dtoa_r+0xb34>
 800a684:	9b04      	ldr	r3, [sp, #16]
 800a686:	9301      	str	r3, [sp, #4]
 800a688:	2d00      	cmp	r5, #0
 800a68a:	dd05      	ble.n	800a698 <_dtoa_r+0x9b8>
 800a68c:	4639      	mov	r1, r7
 800a68e:	462a      	mov	r2, r5
 800a690:	4620      	mov	r0, r4
 800a692:	f000 febd 	bl	800b410 <__lshift>
 800a696:	4607      	mov	r7, r0
 800a698:	f1b8 0f00 	cmp.w	r8, #0
 800a69c:	d05b      	beq.n	800a756 <_dtoa_r+0xa76>
 800a69e:	6879      	ldr	r1, [r7, #4]
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f000 fca5 	bl	800aff0 <_Balloc>
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	b928      	cbnz	r0, 800a6b6 <_dtoa_r+0x9d6>
 800a6aa:	4b83      	ldr	r3, [pc, #524]	; (800a8b8 <_dtoa_r+0xbd8>)
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a6b2:	f7ff bb2e 	b.w	8009d12 <_dtoa_r+0x32>
 800a6b6:	693a      	ldr	r2, [r7, #16]
 800a6b8:	3202      	adds	r2, #2
 800a6ba:	0092      	lsls	r2, r2, #2
 800a6bc:	f107 010c 	add.w	r1, r7, #12
 800a6c0:	300c      	adds	r0, #12
 800a6c2:	f7ff fa76 	bl	8009bb2 <memcpy>
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f000 fea0 	bl	800b410 <__lshift>
 800a6d0:	9b00      	ldr	r3, [sp, #0]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	9304      	str	r3, [sp, #16]
 800a6d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6da:	4413      	add	r3, r2
 800a6dc:	9308      	str	r3, [sp, #32]
 800a6de:	9b02      	ldr	r3, [sp, #8]
 800a6e0:	f003 0301 	and.w	r3, r3, #1
 800a6e4:	46b8      	mov	r8, r7
 800a6e6:	9306      	str	r3, [sp, #24]
 800a6e8:	4607      	mov	r7, r0
 800a6ea:	9b04      	ldr	r3, [sp, #16]
 800a6ec:	4631      	mov	r1, r6
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	4650      	mov	r0, sl
 800a6f2:	9301      	str	r3, [sp, #4]
 800a6f4:	f7ff fa6b 	bl	8009bce <quorem>
 800a6f8:	4641      	mov	r1, r8
 800a6fa:	9002      	str	r0, [sp, #8]
 800a6fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a700:	4650      	mov	r0, sl
 800a702:	f000 fef1 	bl	800b4e8 <__mcmp>
 800a706:	463a      	mov	r2, r7
 800a708:	9005      	str	r0, [sp, #20]
 800a70a:	4631      	mov	r1, r6
 800a70c:	4620      	mov	r0, r4
 800a70e:	f000 ff07 	bl	800b520 <__mdiff>
 800a712:	68c2      	ldr	r2, [r0, #12]
 800a714:	4605      	mov	r5, r0
 800a716:	bb02      	cbnz	r2, 800a75a <_dtoa_r+0xa7a>
 800a718:	4601      	mov	r1, r0
 800a71a:	4650      	mov	r0, sl
 800a71c:	f000 fee4 	bl	800b4e8 <__mcmp>
 800a720:	4602      	mov	r2, r0
 800a722:	4629      	mov	r1, r5
 800a724:	4620      	mov	r0, r4
 800a726:	9209      	str	r2, [sp, #36]	; 0x24
 800a728:	f000 fca2 	bl	800b070 <_Bfree>
 800a72c:	9b07      	ldr	r3, [sp, #28]
 800a72e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a730:	9d04      	ldr	r5, [sp, #16]
 800a732:	ea43 0102 	orr.w	r1, r3, r2
 800a736:	9b06      	ldr	r3, [sp, #24]
 800a738:	4319      	orrs	r1, r3
 800a73a:	d110      	bne.n	800a75e <_dtoa_r+0xa7e>
 800a73c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a740:	d029      	beq.n	800a796 <_dtoa_r+0xab6>
 800a742:	9b05      	ldr	r3, [sp, #20]
 800a744:	2b00      	cmp	r3, #0
 800a746:	dd02      	ble.n	800a74e <_dtoa_r+0xa6e>
 800a748:	9b02      	ldr	r3, [sp, #8]
 800a74a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a74e:	9b01      	ldr	r3, [sp, #4]
 800a750:	f883 9000 	strb.w	r9, [r3]
 800a754:	e774      	b.n	800a640 <_dtoa_r+0x960>
 800a756:	4638      	mov	r0, r7
 800a758:	e7ba      	b.n	800a6d0 <_dtoa_r+0x9f0>
 800a75a:	2201      	movs	r2, #1
 800a75c:	e7e1      	b.n	800a722 <_dtoa_r+0xa42>
 800a75e:	9b05      	ldr	r3, [sp, #20]
 800a760:	2b00      	cmp	r3, #0
 800a762:	db04      	blt.n	800a76e <_dtoa_r+0xa8e>
 800a764:	9907      	ldr	r1, [sp, #28]
 800a766:	430b      	orrs	r3, r1
 800a768:	9906      	ldr	r1, [sp, #24]
 800a76a:	430b      	orrs	r3, r1
 800a76c:	d120      	bne.n	800a7b0 <_dtoa_r+0xad0>
 800a76e:	2a00      	cmp	r2, #0
 800a770:	dded      	ble.n	800a74e <_dtoa_r+0xa6e>
 800a772:	4651      	mov	r1, sl
 800a774:	2201      	movs	r2, #1
 800a776:	4620      	mov	r0, r4
 800a778:	f000 fe4a 	bl	800b410 <__lshift>
 800a77c:	4631      	mov	r1, r6
 800a77e:	4682      	mov	sl, r0
 800a780:	f000 feb2 	bl	800b4e8 <__mcmp>
 800a784:	2800      	cmp	r0, #0
 800a786:	dc03      	bgt.n	800a790 <_dtoa_r+0xab0>
 800a788:	d1e1      	bne.n	800a74e <_dtoa_r+0xa6e>
 800a78a:	f019 0f01 	tst.w	r9, #1
 800a78e:	d0de      	beq.n	800a74e <_dtoa_r+0xa6e>
 800a790:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a794:	d1d8      	bne.n	800a748 <_dtoa_r+0xa68>
 800a796:	9a01      	ldr	r2, [sp, #4]
 800a798:	2339      	movs	r3, #57	; 0x39
 800a79a:	7013      	strb	r3, [r2, #0]
 800a79c:	462b      	mov	r3, r5
 800a79e:	461d      	mov	r5, r3
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a7a6:	2a39      	cmp	r2, #57	; 0x39
 800a7a8:	d06c      	beq.n	800a884 <_dtoa_r+0xba4>
 800a7aa:	3201      	adds	r2, #1
 800a7ac:	701a      	strb	r2, [r3, #0]
 800a7ae:	e747      	b.n	800a640 <_dtoa_r+0x960>
 800a7b0:	2a00      	cmp	r2, #0
 800a7b2:	dd07      	ble.n	800a7c4 <_dtoa_r+0xae4>
 800a7b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a7b8:	d0ed      	beq.n	800a796 <_dtoa_r+0xab6>
 800a7ba:	9a01      	ldr	r2, [sp, #4]
 800a7bc:	f109 0301 	add.w	r3, r9, #1
 800a7c0:	7013      	strb	r3, [r2, #0]
 800a7c2:	e73d      	b.n	800a640 <_dtoa_r+0x960>
 800a7c4:	9b04      	ldr	r3, [sp, #16]
 800a7c6:	9a08      	ldr	r2, [sp, #32]
 800a7c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d043      	beq.n	800a858 <_dtoa_r+0xb78>
 800a7d0:	4651      	mov	r1, sl
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	220a      	movs	r2, #10
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f000 fc6c 	bl	800b0b4 <__multadd>
 800a7dc:	45b8      	cmp	r8, r7
 800a7de:	4682      	mov	sl, r0
 800a7e0:	f04f 0300 	mov.w	r3, #0
 800a7e4:	f04f 020a 	mov.w	r2, #10
 800a7e8:	4641      	mov	r1, r8
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	d107      	bne.n	800a7fe <_dtoa_r+0xb1e>
 800a7ee:	f000 fc61 	bl	800b0b4 <__multadd>
 800a7f2:	4680      	mov	r8, r0
 800a7f4:	4607      	mov	r7, r0
 800a7f6:	9b04      	ldr	r3, [sp, #16]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	9304      	str	r3, [sp, #16]
 800a7fc:	e775      	b.n	800a6ea <_dtoa_r+0xa0a>
 800a7fe:	f000 fc59 	bl	800b0b4 <__multadd>
 800a802:	4639      	mov	r1, r7
 800a804:	4680      	mov	r8, r0
 800a806:	2300      	movs	r3, #0
 800a808:	220a      	movs	r2, #10
 800a80a:	4620      	mov	r0, r4
 800a80c:	f000 fc52 	bl	800b0b4 <__multadd>
 800a810:	4607      	mov	r7, r0
 800a812:	e7f0      	b.n	800a7f6 <_dtoa_r+0xb16>
 800a814:	9b04      	ldr	r3, [sp, #16]
 800a816:	9301      	str	r3, [sp, #4]
 800a818:	9d00      	ldr	r5, [sp, #0]
 800a81a:	4631      	mov	r1, r6
 800a81c:	4650      	mov	r0, sl
 800a81e:	f7ff f9d6 	bl	8009bce <quorem>
 800a822:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a826:	9b00      	ldr	r3, [sp, #0]
 800a828:	f805 9b01 	strb.w	r9, [r5], #1
 800a82c:	1aea      	subs	r2, r5, r3
 800a82e:	9b01      	ldr	r3, [sp, #4]
 800a830:	4293      	cmp	r3, r2
 800a832:	dd07      	ble.n	800a844 <_dtoa_r+0xb64>
 800a834:	4651      	mov	r1, sl
 800a836:	2300      	movs	r3, #0
 800a838:	220a      	movs	r2, #10
 800a83a:	4620      	mov	r0, r4
 800a83c:	f000 fc3a 	bl	800b0b4 <__multadd>
 800a840:	4682      	mov	sl, r0
 800a842:	e7ea      	b.n	800a81a <_dtoa_r+0xb3a>
 800a844:	9b01      	ldr	r3, [sp, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	bfc8      	it	gt
 800a84a:	461d      	movgt	r5, r3
 800a84c:	9b00      	ldr	r3, [sp, #0]
 800a84e:	bfd8      	it	le
 800a850:	2501      	movle	r5, #1
 800a852:	441d      	add	r5, r3
 800a854:	f04f 0800 	mov.w	r8, #0
 800a858:	4651      	mov	r1, sl
 800a85a:	2201      	movs	r2, #1
 800a85c:	4620      	mov	r0, r4
 800a85e:	f000 fdd7 	bl	800b410 <__lshift>
 800a862:	4631      	mov	r1, r6
 800a864:	4682      	mov	sl, r0
 800a866:	f000 fe3f 	bl	800b4e8 <__mcmp>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	dc96      	bgt.n	800a79c <_dtoa_r+0xabc>
 800a86e:	d102      	bne.n	800a876 <_dtoa_r+0xb96>
 800a870:	f019 0f01 	tst.w	r9, #1
 800a874:	d192      	bne.n	800a79c <_dtoa_r+0xabc>
 800a876:	462b      	mov	r3, r5
 800a878:	461d      	mov	r5, r3
 800a87a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a87e:	2a30      	cmp	r2, #48	; 0x30
 800a880:	d0fa      	beq.n	800a878 <_dtoa_r+0xb98>
 800a882:	e6dd      	b.n	800a640 <_dtoa_r+0x960>
 800a884:	9a00      	ldr	r2, [sp, #0]
 800a886:	429a      	cmp	r2, r3
 800a888:	d189      	bne.n	800a79e <_dtoa_r+0xabe>
 800a88a:	f10b 0b01 	add.w	fp, fp, #1
 800a88e:	2331      	movs	r3, #49	; 0x31
 800a890:	e796      	b.n	800a7c0 <_dtoa_r+0xae0>
 800a892:	4b0a      	ldr	r3, [pc, #40]	; (800a8bc <_dtoa_r+0xbdc>)
 800a894:	f7ff ba99 	b.w	8009dca <_dtoa_r+0xea>
 800a898:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f47f aa6d 	bne.w	8009d7a <_dtoa_r+0x9a>
 800a8a0:	4b07      	ldr	r3, [pc, #28]	; (800a8c0 <_dtoa_r+0xbe0>)
 800a8a2:	f7ff ba92 	b.w	8009dca <_dtoa_r+0xea>
 800a8a6:	9b01      	ldr	r3, [sp, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	dcb5      	bgt.n	800a818 <_dtoa_r+0xb38>
 800a8ac:	9b07      	ldr	r3, [sp, #28]
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	f73f aeb1 	bgt.w	800a616 <_dtoa_r+0x936>
 800a8b4:	e7b0      	b.n	800a818 <_dtoa_r+0xb38>
 800a8b6:	bf00      	nop
 800a8b8:	0800c0fa 	.word	0x0800c0fa
 800a8bc:	0800c05a 	.word	0x0800c05a
 800a8c0:	0800c07e 	.word	0x0800c07e

0800a8c4 <_free_r>:
 800a8c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8c6:	2900      	cmp	r1, #0
 800a8c8:	d044      	beq.n	800a954 <_free_r+0x90>
 800a8ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8ce:	9001      	str	r0, [sp, #4]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f1a1 0404 	sub.w	r4, r1, #4
 800a8d6:	bfb8      	it	lt
 800a8d8:	18e4      	addlt	r4, r4, r3
 800a8da:	f7fe ffdd 	bl	8009898 <__malloc_lock>
 800a8de:	4a1e      	ldr	r2, [pc, #120]	; (800a958 <_free_r+0x94>)
 800a8e0:	9801      	ldr	r0, [sp, #4]
 800a8e2:	6813      	ldr	r3, [r2, #0]
 800a8e4:	b933      	cbnz	r3, 800a8f4 <_free_r+0x30>
 800a8e6:	6063      	str	r3, [r4, #4]
 800a8e8:	6014      	str	r4, [r2, #0]
 800a8ea:	b003      	add	sp, #12
 800a8ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8f0:	f7fe bfd8 	b.w	80098a4 <__malloc_unlock>
 800a8f4:	42a3      	cmp	r3, r4
 800a8f6:	d908      	bls.n	800a90a <_free_r+0x46>
 800a8f8:	6825      	ldr	r5, [r4, #0]
 800a8fa:	1961      	adds	r1, r4, r5
 800a8fc:	428b      	cmp	r3, r1
 800a8fe:	bf01      	itttt	eq
 800a900:	6819      	ldreq	r1, [r3, #0]
 800a902:	685b      	ldreq	r3, [r3, #4]
 800a904:	1949      	addeq	r1, r1, r5
 800a906:	6021      	streq	r1, [r4, #0]
 800a908:	e7ed      	b.n	800a8e6 <_free_r+0x22>
 800a90a:	461a      	mov	r2, r3
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	b10b      	cbz	r3, 800a914 <_free_r+0x50>
 800a910:	42a3      	cmp	r3, r4
 800a912:	d9fa      	bls.n	800a90a <_free_r+0x46>
 800a914:	6811      	ldr	r1, [r2, #0]
 800a916:	1855      	adds	r5, r2, r1
 800a918:	42a5      	cmp	r5, r4
 800a91a:	d10b      	bne.n	800a934 <_free_r+0x70>
 800a91c:	6824      	ldr	r4, [r4, #0]
 800a91e:	4421      	add	r1, r4
 800a920:	1854      	adds	r4, r2, r1
 800a922:	42a3      	cmp	r3, r4
 800a924:	6011      	str	r1, [r2, #0]
 800a926:	d1e0      	bne.n	800a8ea <_free_r+0x26>
 800a928:	681c      	ldr	r4, [r3, #0]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	6053      	str	r3, [r2, #4]
 800a92e:	440c      	add	r4, r1
 800a930:	6014      	str	r4, [r2, #0]
 800a932:	e7da      	b.n	800a8ea <_free_r+0x26>
 800a934:	d902      	bls.n	800a93c <_free_r+0x78>
 800a936:	230c      	movs	r3, #12
 800a938:	6003      	str	r3, [r0, #0]
 800a93a:	e7d6      	b.n	800a8ea <_free_r+0x26>
 800a93c:	6825      	ldr	r5, [r4, #0]
 800a93e:	1961      	adds	r1, r4, r5
 800a940:	428b      	cmp	r3, r1
 800a942:	bf04      	itt	eq
 800a944:	6819      	ldreq	r1, [r3, #0]
 800a946:	685b      	ldreq	r3, [r3, #4]
 800a948:	6063      	str	r3, [r4, #4]
 800a94a:	bf04      	itt	eq
 800a94c:	1949      	addeq	r1, r1, r5
 800a94e:	6021      	streq	r1, [r4, #0]
 800a950:	6054      	str	r4, [r2, #4]
 800a952:	e7ca      	b.n	800a8ea <_free_r+0x26>
 800a954:	b003      	add	sp, #12
 800a956:	bd30      	pop	{r4, r5, pc}
 800a958:	20004dbc 	.word	0x20004dbc

0800a95c <__ssputs_r>:
 800a95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a960:	688e      	ldr	r6, [r1, #8]
 800a962:	461f      	mov	r7, r3
 800a964:	42be      	cmp	r6, r7
 800a966:	680b      	ldr	r3, [r1, #0]
 800a968:	4682      	mov	sl, r0
 800a96a:	460c      	mov	r4, r1
 800a96c:	4690      	mov	r8, r2
 800a96e:	d82c      	bhi.n	800a9ca <__ssputs_r+0x6e>
 800a970:	898a      	ldrh	r2, [r1, #12]
 800a972:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a976:	d026      	beq.n	800a9c6 <__ssputs_r+0x6a>
 800a978:	6965      	ldr	r5, [r4, #20]
 800a97a:	6909      	ldr	r1, [r1, #16]
 800a97c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a980:	eba3 0901 	sub.w	r9, r3, r1
 800a984:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a988:	1c7b      	adds	r3, r7, #1
 800a98a:	444b      	add	r3, r9
 800a98c:	106d      	asrs	r5, r5, #1
 800a98e:	429d      	cmp	r5, r3
 800a990:	bf38      	it	cc
 800a992:	461d      	movcc	r5, r3
 800a994:	0553      	lsls	r3, r2, #21
 800a996:	d527      	bpl.n	800a9e8 <__ssputs_r+0x8c>
 800a998:	4629      	mov	r1, r5
 800a99a:	f7fe fd6d 	bl	8009478 <_malloc_r>
 800a99e:	4606      	mov	r6, r0
 800a9a0:	b360      	cbz	r0, 800a9fc <__ssputs_r+0xa0>
 800a9a2:	6921      	ldr	r1, [r4, #16]
 800a9a4:	464a      	mov	r2, r9
 800a9a6:	f7ff f904 	bl	8009bb2 <memcpy>
 800a9aa:	89a3      	ldrh	r3, [r4, #12]
 800a9ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9b4:	81a3      	strh	r3, [r4, #12]
 800a9b6:	6126      	str	r6, [r4, #16]
 800a9b8:	6165      	str	r5, [r4, #20]
 800a9ba:	444e      	add	r6, r9
 800a9bc:	eba5 0509 	sub.w	r5, r5, r9
 800a9c0:	6026      	str	r6, [r4, #0]
 800a9c2:	60a5      	str	r5, [r4, #8]
 800a9c4:	463e      	mov	r6, r7
 800a9c6:	42be      	cmp	r6, r7
 800a9c8:	d900      	bls.n	800a9cc <__ssputs_r+0x70>
 800a9ca:	463e      	mov	r6, r7
 800a9cc:	6820      	ldr	r0, [r4, #0]
 800a9ce:	4632      	mov	r2, r6
 800a9d0:	4641      	mov	r1, r8
 800a9d2:	f000 fff3 	bl	800b9bc <memmove>
 800a9d6:	68a3      	ldr	r3, [r4, #8]
 800a9d8:	1b9b      	subs	r3, r3, r6
 800a9da:	60a3      	str	r3, [r4, #8]
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	4433      	add	r3, r6
 800a9e0:	6023      	str	r3, [r4, #0]
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9e8:	462a      	mov	r2, r5
 800a9ea:	f000 fec0 	bl	800b76e <_realloc_r>
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d1e0      	bne.n	800a9b6 <__ssputs_r+0x5a>
 800a9f4:	6921      	ldr	r1, [r4, #16]
 800a9f6:	4650      	mov	r0, sl
 800a9f8:	f7ff ff64 	bl	800a8c4 <_free_r>
 800a9fc:	230c      	movs	r3, #12
 800a9fe:	f8ca 3000 	str.w	r3, [sl]
 800aa02:	89a3      	ldrh	r3, [r4, #12]
 800aa04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa08:	81a3      	strh	r3, [r4, #12]
 800aa0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa0e:	e7e9      	b.n	800a9e4 <__ssputs_r+0x88>

0800aa10 <_svfiprintf_r>:
 800aa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa14:	4698      	mov	r8, r3
 800aa16:	898b      	ldrh	r3, [r1, #12]
 800aa18:	061b      	lsls	r3, r3, #24
 800aa1a:	b09d      	sub	sp, #116	; 0x74
 800aa1c:	4607      	mov	r7, r0
 800aa1e:	460d      	mov	r5, r1
 800aa20:	4614      	mov	r4, r2
 800aa22:	d50e      	bpl.n	800aa42 <_svfiprintf_r+0x32>
 800aa24:	690b      	ldr	r3, [r1, #16]
 800aa26:	b963      	cbnz	r3, 800aa42 <_svfiprintf_r+0x32>
 800aa28:	2140      	movs	r1, #64	; 0x40
 800aa2a:	f7fe fd25 	bl	8009478 <_malloc_r>
 800aa2e:	6028      	str	r0, [r5, #0]
 800aa30:	6128      	str	r0, [r5, #16]
 800aa32:	b920      	cbnz	r0, 800aa3e <_svfiprintf_r+0x2e>
 800aa34:	230c      	movs	r3, #12
 800aa36:	603b      	str	r3, [r7, #0]
 800aa38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa3c:	e0d0      	b.n	800abe0 <_svfiprintf_r+0x1d0>
 800aa3e:	2340      	movs	r3, #64	; 0x40
 800aa40:	616b      	str	r3, [r5, #20]
 800aa42:	2300      	movs	r3, #0
 800aa44:	9309      	str	r3, [sp, #36]	; 0x24
 800aa46:	2320      	movs	r3, #32
 800aa48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa50:	2330      	movs	r3, #48	; 0x30
 800aa52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800abf8 <_svfiprintf_r+0x1e8>
 800aa56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa5a:	f04f 0901 	mov.w	r9, #1
 800aa5e:	4623      	mov	r3, r4
 800aa60:	469a      	mov	sl, r3
 800aa62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa66:	b10a      	cbz	r2, 800aa6c <_svfiprintf_r+0x5c>
 800aa68:	2a25      	cmp	r2, #37	; 0x25
 800aa6a:	d1f9      	bne.n	800aa60 <_svfiprintf_r+0x50>
 800aa6c:	ebba 0b04 	subs.w	fp, sl, r4
 800aa70:	d00b      	beq.n	800aa8a <_svfiprintf_r+0x7a>
 800aa72:	465b      	mov	r3, fp
 800aa74:	4622      	mov	r2, r4
 800aa76:	4629      	mov	r1, r5
 800aa78:	4638      	mov	r0, r7
 800aa7a:	f7ff ff6f 	bl	800a95c <__ssputs_r>
 800aa7e:	3001      	adds	r0, #1
 800aa80:	f000 80a9 	beq.w	800abd6 <_svfiprintf_r+0x1c6>
 800aa84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa86:	445a      	add	r2, fp
 800aa88:	9209      	str	r2, [sp, #36]	; 0x24
 800aa8a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	f000 80a1 	beq.w	800abd6 <_svfiprintf_r+0x1c6>
 800aa94:	2300      	movs	r3, #0
 800aa96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa9e:	f10a 0a01 	add.w	sl, sl, #1
 800aaa2:	9304      	str	r3, [sp, #16]
 800aaa4:	9307      	str	r3, [sp, #28]
 800aaa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aaaa:	931a      	str	r3, [sp, #104]	; 0x68
 800aaac:	4654      	mov	r4, sl
 800aaae:	2205      	movs	r2, #5
 800aab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aab4:	4850      	ldr	r0, [pc, #320]	; (800abf8 <_svfiprintf_r+0x1e8>)
 800aab6:	f7f5 fb8b 	bl	80001d0 <memchr>
 800aaba:	9a04      	ldr	r2, [sp, #16]
 800aabc:	b9d8      	cbnz	r0, 800aaf6 <_svfiprintf_r+0xe6>
 800aabe:	06d0      	lsls	r0, r2, #27
 800aac0:	bf44      	itt	mi
 800aac2:	2320      	movmi	r3, #32
 800aac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aac8:	0711      	lsls	r1, r2, #28
 800aaca:	bf44      	itt	mi
 800aacc:	232b      	movmi	r3, #43	; 0x2b
 800aace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aad2:	f89a 3000 	ldrb.w	r3, [sl]
 800aad6:	2b2a      	cmp	r3, #42	; 0x2a
 800aad8:	d015      	beq.n	800ab06 <_svfiprintf_r+0xf6>
 800aada:	9a07      	ldr	r2, [sp, #28]
 800aadc:	4654      	mov	r4, sl
 800aade:	2000      	movs	r0, #0
 800aae0:	f04f 0c0a 	mov.w	ip, #10
 800aae4:	4621      	mov	r1, r4
 800aae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaea:	3b30      	subs	r3, #48	; 0x30
 800aaec:	2b09      	cmp	r3, #9
 800aaee:	d94d      	bls.n	800ab8c <_svfiprintf_r+0x17c>
 800aaf0:	b1b0      	cbz	r0, 800ab20 <_svfiprintf_r+0x110>
 800aaf2:	9207      	str	r2, [sp, #28]
 800aaf4:	e014      	b.n	800ab20 <_svfiprintf_r+0x110>
 800aaf6:	eba0 0308 	sub.w	r3, r0, r8
 800aafa:	fa09 f303 	lsl.w	r3, r9, r3
 800aafe:	4313      	orrs	r3, r2
 800ab00:	9304      	str	r3, [sp, #16]
 800ab02:	46a2      	mov	sl, r4
 800ab04:	e7d2      	b.n	800aaac <_svfiprintf_r+0x9c>
 800ab06:	9b03      	ldr	r3, [sp, #12]
 800ab08:	1d19      	adds	r1, r3, #4
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	9103      	str	r1, [sp, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	bfbb      	ittet	lt
 800ab12:	425b      	neglt	r3, r3
 800ab14:	f042 0202 	orrlt.w	r2, r2, #2
 800ab18:	9307      	strge	r3, [sp, #28]
 800ab1a:	9307      	strlt	r3, [sp, #28]
 800ab1c:	bfb8      	it	lt
 800ab1e:	9204      	strlt	r2, [sp, #16]
 800ab20:	7823      	ldrb	r3, [r4, #0]
 800ab22:	2b2e      	cmp	r3, #46	; 0x2e
 800ab24:	d10c      	bne.n	800ab40 <_svfiprintf_r+0x130>
 800ab26:	7863      	ldrb	r3, [r4, #1]
 800ab28:	2b2a      	cmp	r3, #42	; 0x2a
 800ab2a:	d134      	bne.n	800ab96 <_svfiprintf_r+0x186>
 800ab2c:	9b03      	ldr	r3, [sp, #12]
 800ab2e:	1d1a      	adds	r2, r3, #4
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	9203      	str	r2, [sp, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	bfb8      	it	lt
 800ab38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ab3c:	3402      	adds	r4, #2
 800ab3e:	9305      	str	r3, [sp, #20]
 800ab40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ac08 <_svfiprintf_r+0x1f8>
 800ab44:	7821      	ldrb	r1, [r4, #0]
 800ab46:	2203      	movs	r2, #3
 800ab48:	4650      	mov	r0, sl
 800ab4a:	f7f5 fb41 	bl	80001d0 <memchr>
 800ab4e:	b138      	cbz	r0, 800ab60 <_svfiprintf_r+0x150>
 800ab50:	9b04      	ldr	r3, [sp, #16]
 800ab52:	eba0 000a 	sub.w	r0, r0, sl
 800ab56:	2240      	movs	r2, #64	; 0x40
 800ab58:	4082      	lsls	r2, r0
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	3401      	adds	r4, #1
 800ab5e:	9304      	str	r3, [sp, #16]
 800ab60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab64:	4825      	ldr	r0, [pc, #148]	; (800abfc <_svfiprintf_r+0x1ec>)
 800ab66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab6a:	2206      	movs	r2, #6
 800ab6c:	f7f5 fb30 	bl	80001d0 <memchr>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d038      	beq.n	800abe6 <_svfiprintf_r+0x1d6>
 800ab74:	4b22      	ldr	r3, [pc, #136]	; (800ac00 <_svfiprintf_r+0x1f0>)
 800ab76:	bb1b      	cbnz	r3, 800abc0 <_svfiprintf_r+0x1b0>
 800ab78:	9b03      	ldr	r3, [sp, #12]
 800ab7a:	3307      	adds	r3, #7
 800ab7c:	f023 0307 	bic.w	r3, r3, #7
 800ab80:	3308      	adds	r3, #8
 800ab82:	9303      	str	r3, [sp, #12]
 800ab84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab86:	4433      	add	r3, r6
 800ab88:	9309      	str	r3, [sp, #36]	; 0x24
 800ab8a:	e768      	b.n	800aa5e <_svfiprintf_r+0x4e>
 800ab8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab90:	460c      	mov	r4, r1
 800ab92:	2001      	movs	r0, #1
 800ab94:	e7a6      	b.n	800aae4 <_svfiprintf_r+0xd4>
 800ab96:	2300      	movs	r3, #0
 800ab98:	3401      	adds	r4, #1
 800ab9a:	9305      	str	r3, [sp, #20]
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	f04f 0c0a 	mov.w	ip, #10
 800aba2:	4620      	mov	r0, r4
 800aba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aba8:	3a30      	subs	r2, #48	; 0x30
 800abaa:	2a09      	cmp	r2, #9
 800abac:	d903      	bls.n	800abb6 <_svfiprintf_r+0x1a6>
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d0c6      	beq.n	800ab40 <_svfiprintf_r+0x130>
 800abb2:	9105      	str	r1, [sp, #20]
 800abb4:	e7c4      	b.n	800ab40 <_svfiprintf_r+0x130>
 800abb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800abba:	4604      	mov	r4, r0
 800abbc:	2301      	movs	r3, #1
 800abbe:	e7f0      	b.n	800aba2 <_svfiprintf_r+0x192>
 800abc0:	ab03      	add	r3, sp, #12
 800abc2:	9300      	str	r3, [sp, #0]
 800abc4:	462a      	mov	r2, r5
 800abc6:	4b0f      	ldr	r3, [pc, #60]	; (800ac04 <_svfiprintf_r+0x1f4>)
 800abc8:	a904      	add	r1, sp, #16
 800abca:	4638      	mov	r0, r7
 800abcc:	f7fe f9ee 	bl	8008fac <_printf_float>
 800abd0:	1c42      	adds	r2, r0, #1
 800abd2:	4606      	mov	r6, r0
 800abd4:	d1d6      	bne.n	800ab84 <_svfiprintf_r+0x174>
 800abd6:	89ab      	ldrh	r3, [r5, #12]
 800abd8:	065b      	lsls	r3, r3, #25
 800abda:	f53f af2d 	bmi.w	800aa38 <_svfiprintf_r+0x28>
 800abde:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abe0:	b01d      	add	sp, #116	; 0x74
 800abe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe6:	ab03      	add	r3, sp, #12
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	462a      	mov	r2, r5
 800abec:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <_svfiprintf_r+0x1f4>)
 800abee:	a904      	add	r1, sp, #16
 800abf0:	4638      	mov	r0, r7
 800abf2:	f7fe fd2f 	bl	8009654 <_printf_i>
 800abf6:	e7eb      	b.n	800abd0 <_svfiprintf_r+0x1c0>
 800abf8:	0800c10b 	.word	0x0800c10b
 800abfc:	0800c115 	.word	0x0800c115
 800ac00:	08008fad 	.word	0x08008fad
 800ac04:	0800a95d 	.word	0x0800a95d
 800ac08:	0800c111 	.word	0x0800c111

0800ac0c <__sfputc_r>:
 800ac0c:	6893      	ldr	r3, [r2, #8]
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	b410      	push	{r4}
 800ac14:	6093      	str	r3, [r2, #8]
 800ac16:	da08      	bge.n	800ac2a <__sfputc_r+0x1e>
 800ac18:	6994      	ldr	r4, [r2, #24]
 800ac1a:	42a3      	cmp	r3, r4
 800ac1c:	db01      	blt.n	800ac22 <__sfputc_r+0x16>
 800ac1e:	290a      	cmp	r1, #10
 800ac20:	d103      	bne.n	800ac2a <__sfputc_r+0x1e>
 800ac22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac26:	f000 bdd1 	b.w	800b7cc <__swbuf_r>
 800ac2a:	6813      	ldr	r3, [r2, #0]
 800ac2c:	1c58      	adds	r0, r3, #1
 800ac2e:	6010      	str	r0, [r2, #0]
 800ac30:	7019      	strb	r1, [r3, #0]
 800ac32:	4608      	mov	r0, r1
 800ac34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac38:	4770      	bx	lr

0800ac3a <__sfputs_r>:
 800ac3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3c:	4606      	mov	r6, r0
 800ac3e:	460f      	mov	r7, r1
 800ac40:	4614      	mov	r4, r2
 800ac42:	18d5      	adds	r5, r2, r3
 800ac44:	42ac      	cmp	r4, r5
 800ac46:	d101      	bne.n	800ac4c <__sfputs_r+0x12>
 800ac48:	2000      	movs	r0, #0
 800ac4a:	e007      	b.n	800ac5c <__sfputs_r+0x22>
 800ac4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac50:	463a      	mov	r2, r7
 800ac52:	4630      	mov	r0, r6
 800ac54:	f7ff ffda 	bl	800ac0c <__sfputc_r>
 800ac58:	1c43      	adds	r3, r0, #1
 800ac5a:	d1f3      	bne.n	800ac44 <__sfputs_r+0xa>
 800ac5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac60 <_vfiprintf_r>:
 800ac60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac64:	460d      	mov	r5, r1
 800ac66:	b09d      	sub	sp, #116	; 0x74
 800ac68:	4614      	mov	r4, r2
 800ac6a:	4698      	mov	r8, r3
 800ac6c:	4606      	mov	r6, r0
 800ac6e:	b118      	cbz	r0, 800ac78 <_vfiprintf_r+0x18>
 800ac70:	6a03      	ldr	r3, [r0, #32]
 800ac72:	b90b      	cbnz	r3, 800ac78 <_vfiprintf_r+0x18>
 800ac74:	f7fe fec8 	bl	8009a08 <__sinit>
 800ac78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac7a:	07d9      	lsls	r1, r3, #31
 800ac7c:	d405      	bmi.n	800ac8a <_vfiprintf_r+0x2a>
 800ac7e:	89ab      	ldrh	r3, [r5, #12]
 800ac80:	059a      	lsls	r2, r3, #22
 800ac82:	d402      	bmi.n	800ac8a <_vfiprintf_r+0x2a>
 800ac84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac86:	f7fe ff92 	bl	8009bae <__retarget_lock_acquire_recursive>
 800ac8a:	89ab      	ldrh	r3, [r5, #12]
 800ac8c:	071b      	lsls	r3, r3, #28
 800ac8e:	d501      	bpl.n	800ac94 <_vfiprintf_r+0x34>
 800ac90:	692b      	ldr	r3, [r5, #16]
 800ac92:	b99b      	cbnz	r3, 800acbc <_vfiprintf_r+0x5c>
 800ac94:	4629      	mov	r1, r5
 800ac96:	4630      	mov	r0, r6
 800ac98:	f000 fdd6 	bl	800b848 <__swsetup_r>
 800ac9c:	b170      	cbz	r0, 800acbc <_vfiprintf_r+0x5c>
 800ac9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aca0:	07dc      	lsls	r4, r3, #31
 800aca2:	d504      	bpl.n	800acae <_vfiprintf_r+0x4e>
 800aca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aca8:	b01d      	add	sp, #116	; 0x74
 800acaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acae:	89ab      	ldrh	r3, [r5, #12]
 800acb0:	0598      	lsls	r0, r3, #22
 800acb2:	d4f7      	bmi.n	800aca4 <_vfiprintf_r+0x44>
 800acb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acb6:	f7fe ff7b 	bl	8009bb0 <__retarget_lock_release_recursive>
 800acba:	e7f3      	b.n	800aca4 <_vfiprintf_r+0x44>
 800acbc:	2300      	movs	r3, #0
 800acbe:	9309      	str	r3, [sp, #36]	; 0x24
 800acc0:	2320      	movs	r3, #32
 800acc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800acca:	2330      	movs	r3, #48	; 0x30
 800accc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ae80 <_vfiprintf_r+0x220>
 800acd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acd4:	f04f 0901 	mov.w	r9, #1
 800acd8:	4623      	mov	r3, r4
 800acda:	469a      	mov	sl, r3
 800acdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ace0:	b10a      	cbz	r2, 800ace6 <_vfiprintf_r+0x86>
 800ace2:	2a25      	cmp	r2, #37	; 0x25
 800ace4:	d1f9      	bne.n	800acda <_vfiprintf_r+0x7a>
 800ace6:	ebba 0b04 	subs.w	fp, sl, r4
 800acea:	d00b      	beq.n	800ad04 <_vfiprintf_r+0xa4>
 800acec:	465b      	mov	r3, fp
 800acee:	4622      	mov	r2, r4
 800acf0:	4629      	mov	r1, r5
 800acf2:	4630      	mov	r0, r6
 800acf4:	f7ff ffa1 	bl	800ac3a <__sfputs_r>
 800acf8:	3001      	adds	r0, #1
 800acfa:	f000 80a9 	beq.w	800ae50 <_vfiprintf_r+0x1f0>
 800acfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad00:	445a      	add	r2, fp
 800ad02:	9209      	str	r2, [sp, #36]	; 0x24
 800ad04:	f89a 3000 	ldrb.w	r3, [sl]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	f000 80a1 	beq.w	800ae50 <_vfiprintf_r+0x1f0>
 800ad0e:	2300      	movs	r3, #0
 800ad10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad18:	f10a 0a01 	add.w	sl, sl, #1
 800ad1c:	9304      	str	r3, [sp, #16]
 800ad1e:	9307      	str	r3, [sp, #28]
 800ad20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad24:	931a      	str	r3, [sp, #104]	; 0x68
 800ad26:	4654      	mov	r4, sl
 800ad28:	2205      	movs	r2, #5
 800ad2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad2e:	4854      	ldr	r0, [pc, #336]	; (800ae80 <_vfiprintf_r+0x220>)
 800ad30:	f7f5 fa4e 	bl	80001d0 <memchr>
 800ad34:	9a04      	ldr	r2, [sp, #16]
 800ad36:	b9d8      	cbnz	r0, 800ad70 <_vfiprintf_r+0x110>
 800ad38:	06d1      	lsls	r1, r2, #27
 800ad3a:	bf44      	itt	mi
 800ad3c:	2320      	movmi	r3, #32
 800ad3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad42:	0713      	lsls	r3, r2, #28
 800ad44:	bf44      	itt	mi
 800ad46:	232b      	movmi	r3, #43	; 0x2b
 800ad48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad4c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad50:	2b2a      	cmp	r3, #42	; 0x2a
 800ad52:	d015      	beq.n	800ad80 <_vfiprintf_r+0x120>
 800ad54:	9a07      	ldr	r2, [sp, #28]
 800ad56:	4654      	mov	r4, sl
 800ad58:	2000      	movs	r0, #0
 800ad5a:	f04f 0c0a 	mov.w	ip, #10
 800ad5e:	4621      	mov	r1, r4
 800ad60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad64:	3b30      	subs	r3, #48	; 0x30
 800ad66:	2b09      	cmp	r3, #9
 800ad68:	d94d      	bls.n	800ae06 <_vfiprintf_r+0x1a6>
 800ad6a:	b1b0      	cbz	r0, 800ad9a <_vfiprintf_r+0x13a>
 800ad6c:	9207      	str	r2, [sp, #28]
 800ad6e:	e014      	b.n	800ad9a <_vfiprintf_r+0x13a>
 800ad70:	eba0 0308 	sub.w	r3, r0, r8
 800ad74:	fa09 f303 	lsl.w	r3, r9, r3
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	9304      	str	r3, [sp, #16]
 800ad7c:	46a2      	mov	sl, r4
 800ad7e:	e7d2      	b.n	800ad26 <_vfiprintf_r+0xc6>
 800ad80:	9b03      	ldr	r3, [sp, #12]
 800ad82:	1d19      	adds	r1, r3, #4
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	9103      	str	r1, [sp, #12]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	bfbb      	ittet	lt
 800ad8c:	425b      	neglt	r3, r3
 800ad8e:	f042 0202 	orrlt.w	r2, r2, #2
 800ad92:	9307      	strge	r3, [sp, #28]
 800ad94:	9307      	strlt	r3, [sp, #28]
 800ad96:	bfb8      	it	lt
 800ad98:	9204      	strlt	r2, [sp, #16]
 800ad9a:	7823      	ldrb	r3, [r4, #0]
 800ad9c:	2b2e      	cmp	r3, #46	; 0x2e
 800ad9e:	d10c      	bne.n	800adba <_vfiprintf_r+0x15a>
 800ada0:	7863      	ldrb	r3, [r4, #1]
 800ada2:	2b2a      	cmp	r3, #42	; 0x2a
 800ada4:	d134      	bne.n	800ae10 <_vfiprintf_r+0x1b0>
 800ada6:	9b03      	ldr	r3, [sp, #12]
 800ada8:	1d1a      	adds	r2, r3, #4
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	9203      	str	r2, [sp, #12]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	bfb8      	it	lt
 800adb2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800adb6:	3402      	adds	r4, #2
 800adb8:	9305      	str	r3, [sp, #20]
 800adba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ae90 <_vfiprintf_r+0x230>
 800adbe:	7821      	ldrb	r1, [r4, #0]
 800adc0:	2203      	movs	r2, #3
 800adc2:	4650      	mov	r0, sl
 800adc4:	f7f5 fa04 	bl	80001d0 <memchr>
 800adc8:	b138      	cbz	r0, 800adda <_vfiprintf_r+0x17a>
 800adca:	9b04      	ldr	r3, [sp, #16]
 800adcc:	eba0 000a 	sub.w	r0, r0, sl
 800add0:	2240      	movs	r2, #64	; 0x40
 800add2:	4082      	lsls	r2, r0
 800add4:	4313      	orrs	r3, r2
 800add6:	3401      	adds	r4, #1
 800add8:	9304      	str	r3, [sp, #16]
 800adda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adde:	4829      	ldr	r0, [pc, #164]	; (800ae84 <_vfiprintf_r+0x224>)
 800ade0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ade4:	2206      	movs	r2, #6
 800ade6:	f7f5 f9f3 	bl	80001d0 <memchr>
 800adea:	2800      	cmp	r0, #0
 800adec:	d03f      	beq.n	800ae6e <_vfiprintf_r+0x20e>
 800adee:	4b26      	ldr	r3, [pc, #152]	; (800ae88 <_vfiprintf_r+0x228>)
 800adf0:	bb1b      	cbnz	r3, 800ae3a <_vfiprintf_r+0x1da>
 800adf2:	9b03      	ldr	r3, [sp, #12]
 800adf4:	3307      	adds	r3, #7
 800adf6:	f023 0307 	bic.w	r3, r3, #7
 800adfa:	3308      	adds	r3, #8
 800adfc:	9303      	str	r3, [sp, #12]
 800adfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae00:	443b      	add	r3, r7
 800ae02:	9309      	str	r3, [sp, #36]	; 0x24
 800ae04:	e768      	b.n	800acd8 <_vfiprintf_r+0x78>
 800ae06:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae0a:	460c      	mov	r4, r1
 800ae0c:	2001      	movs	r0, #1
 800ae0e:	e7a6      	b.n	800ad5e <_vfiprintf_r+0xfe>
 800ae10:	2300      	movs	r3, #0
 800ae12:	3401      	adds	r4, #1
 800ae14:	9305      	str	r3, [sp, #20]
 800ae16:	4619      	mov	r1, r3
 800ae18:	f04f 0c0a 	mov.w	ip, #10
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae22:	3a30      	subs	r2, #48	; 0x30
 800ae24:	2a09      	cmp	r2, #9
 800ae26:	d903      	bls.n	800ae30 <_vfiprintf_r+0x1d0>
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d0c6      	beq.n	800adba <_vfiprintf_r+0x15a>
 800ae2c:	9105      	str	r1, [sp, #20]
 800ae2e:	e7c4      	b.n	800adba <_vfiprintf_r+0x15a>
 800ae30:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae34:	4604      	mov	r4, r0
 800ae36:	2301      	movs	r3, #1
 800ae38:	e7f0      	b.n	800ae1c <_vfiprintf_r+0x1bc>
 800ae3a:	ab03      	add	r3, sp, #12
 800ae3c:	9300      	str	r3, [sp, #0]
 800ae3e:	462a      	mov	r2, r5
 800ae40:	4b12      	ldr	r3, [pc, #72]	; (800ae8c <_vfiprintf_r+0x22c>)
 800ae42:	a904      	add	r1, sp, #16
 800ae44:	4630      	mov	r0, r6
 800ae46:	f7fe f8b1 	bl	8008fac <_printf_float>
 800ae4a:	4607      	mov	r7, r0
 800ae4c:	1c78      	adds	r0, r7, #1
 800ae4e:	d1d6      	bne.n	800adfe <_vfiprintf_r+0x19e>
 800ae50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae52:	07d9      	lsls	r1, r3, #31
 800ae54:	d405      	bmi.n	800ae62 <_vfiprintf_r+0x202>
 800ae56:	89ab      	ldrh	r3, [r5, #12]
 800ae58:	059a      	lsls	r2, r3, #22
 800ae5a:	d402      	bmi.n	800ae62 <_vfiprintf_r+0x202>
 800ae5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae5e:	f7fe fea7 	bl	8009bb0 <__retarget_lock_release_recursive>
 800ae62:	89ab      	ldrh	r3, [r5, #12]
 800ae64:	065b      	lsls	r3, r3, #25
 800ae66:	f53f af1d 	bmi.w	800aca4 <_vfiprintf_r+0x44>
 800ae6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae6c:	e71c      	b.n	800aca8 <_vfiprintf_r+0x48>
 800ae6e:	ab03      	add	r3, sp, #12
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	462a      	mov	r2, r5
 800ae74:	4b05      	ldr	r3, [pc, #20]	; (800ae8c <_vfiprintf_r+0x22c>)
 800ae76:	a904      	add	r1, sp, #16
 800ae78:	4630      	mov	r0, r6
 800ae7a:	f7fe fbeb 	bl	8009654 <_printf_i>
 800ae7e:	e7e4      	b.n	800ae4a <_vfiprintf_r+0x1ea>
 800ae80:	0800c10b 	.word	0x0800c10b
 800ae84:	0800c115 	.word	0x0800c115
 800ae88:	08008fad 	.word	0x08008fad
 800ae8c:	0800ac3b 	.word	0x0800ac3b
 800ae90:	0800c111 	.word	0x0800c111

0800ae94 <__sflush_r>:
 800ae94:	898a      	ldrh	r2, [r1, #12]
 800ae96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	0710      	lsls	r0, r2, #28
 800ae9e:	460c      	mov	r4, r1
 800aea0:	d458      	bmi.n	800af54 <__sflush_r+0xc0>
 800aea2:	684b      	ldr	r3, [r1, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	dc05      	bgt.n	800aeb4 <__sflush_r+0x20>
 800aea8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	dc02      	bgt.n	800aeb4 <__sflush_r+0x20>
 800aeae:	2000      	movs	r0, #0
 800aeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aeb6:	2e00      	cmp	r6, #0
 800aeb8:	d0f9      	beq.n	800aeae <__sflush_r+0x1a>
 800aeba:	2300      	movs	r3, #0
 800aebc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aec0:	682f      	ldr	r7, [r5, #0]
 800aec2:	6a21      	ldr	r1, [r4, #32]
 800aec4:	602b      	str	r3, [r5, #0]
 800aec6:	d032      	beq.n	800af2e <__sflush_r+0x9a>
 800aec8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aeca:	89a3      	ldrh	r3, [r4, #12]
 800aecc:	075a      	lsls	r2, r3, #29
 800aece:	d505      	bpl.n	800aedc <__sflush_r+0x48>
 800aed0:	6863      	ldr	r3, [r4, #4]
 800aed2:	1ac0      	subs	r0, r0, r3
 800aed4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aed6:	b10b      	cbz	r3, 800aedc <__sflush_r+0x48>
 800aed8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aeda:	1ac0      	subs	r0, r0, r3
 800aedc:	2300      	movs	r3, #0
 800aede:	4602      	mov	r2, r0
 800aee0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aee2:	6a21      	ldr	r1, [r4, #32]
 800aee4:	4628      	mov	r0, r5
 800aee6:	47b0      	blx	r6
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	89a3      	ldrh	r3, [r4, #12]
 800aeec:	d106      	bne.n	800aefc <__sflush_r+0x68>
 800aeee:	6829      	ldr	r1, [r5, #0]
 800aef0:	291d      	cmp	r1, #29
 800aef2:	d82b      	bhi.n	800af4c <__sflush_r+0xb8>
 800aef4:	4a29      	ldr	r2, [pc, #164]	; (800af9c <__sflush_r+0x108>)
 800aef6:	410a      	asrs	r2, r1
 800aef8:	07d6      	lsls	r6, r2, #31
 800aefa:	d427      	bmi.n	800af4c <__sflush_r+0xb8>
 800aefc:	2200      	movs	r2, #0
 800aefe:	6062      	str	r2, [r4, #4]
 800af00:	04d9      	lsls	r1, r3, #19
 800af02:	6922      	ldr	r2, [r4, #16]
 800af04:	6022      	str	r2, [r4, #0]
 800af06:	d504      	bpl.n	800af12 <__sflush_r+0x7e>
 800af08:	1c42      	adds	r2, r0, #1
 800af0a:	d101      	bne.n	800af10 <__sflush_r+0x7c>
 800af0c:	682b      	ldr	r3, [r5, #0]
 800af0e:	b903      	cbnz	r3, 800af12 <__sflush_r+0x7e>
 800af10:	6560      	str	r0, [r4, #84]	; 0x54
 800af12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af14:	602f      	str	r7, [r5, #0]
 800af16:	2900      	cmp	r1, #0
 800af18:	d0c9      	beq.n	800aeae <__sflush_r+0x1a>
 800af1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af1e:	4299      	cmp	r1, r3
 800af20:	d002      	beq.n	800af28 <__sflush_r+0x94>
 800af22:	4628      	mov	r0, r5
 800af24:	f7ff fcce 	bl	800a8c4 <_free_r>
 800af28:	2000      	movs	r0, #0
 800af2a:	6360      	str	r0, [r4, #52]	; 0x34
 800af2c:	e7c0      	b.n	800aeb0 <__sflush_r+0x1c>
 800af2e:	2301      	movs	r3, #1
 800af30:	4628      	mov	r0, r5
 800af32:	47b0      	blx	r6
 800af34:	1c41      	adds	r1, r0, #1
 800af36:	d1c8      	bne.n	800aeca <__sflush_r+0x36>
 800af38:	682b      	ldr	r3, [r5, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d0c5      	beq.n	800aeca <__sflush_r+0x36>
 800af3e:	2b1d      	cmp	r3, #29
 800af40:	d001      	beq.n	800af46 <__sflush_r+0xb2>
 800af42:	2b16      	cmp	r3, #22
 800af44:	d101      	bne.n	800af4a <__sflush_r+0xb6>
 800af46:	602f      	str	r7, [r5, #0]
 800af48:	e7b1      	b.n	800aeae <__sflush_r+0x1a>
 800af4a:	89a3      	ldrh	r3, [r4, #12]
 800af4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af50:	81a3      	strh	r3, [r4, #12]
 800af52:	e7ad      	b.n	800aeb0 <__sflush_r+0x1c>
 800af54:	690f      	ldr	r7, [r1, #16]
 800af56:	2f00      	cmp	r7, #0
 800af58:	d0a9      	beq.n	800aeae <__sflush_r+0x1a>
 800af5a:	0793      	lsls	r3, r2, #30
 800af5c:	680e      	ldr	r6, [r1, #0]
 800af5e:	bf08      	it	eq
 800af60:	694b      	ldreq	r3, [r1, #20]
 800af62:	600f      	str	r7, [r1, #0]
 800af64:	bf18      	it	ne
 800af66:	2300      	movne	r3, #0
 800af68:	eba6 0807 	sub.w	r8, r6, r7
 800af6c:	608b      	str	r3, [r1, #8]
 800af6e:	f1b8 0f00 	cmp.w	r8, #0
 800af72:	dd9c      	ble.n	800aeae <__sflush_r+0x1a>
 800af74:	6a21      	ldr	r1, [r4, #32]
 800af76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af78:	4643      	mov	r3, r8
 800af7a:	463a      	mov	r2, r7
 800af7c:	4628      	mov	r0, r5
 800af7e:	47b0      	blx	r6
 800af80:	2800      	cmp	r0, #0
 800af82:	dc06      	bgt.n	800af92 <__sflush_r+0xfe>
 800af84:	89a3      	ldrh	r3, [r4, #12]
 800af86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af8a:	81a3      	strh	r3, [r4, #12]
 800af8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af90:	e78e      	b.n	800aeb0 <__sflush_r+0x1c>
 800af92:	4407      	add	r7, r0
 800af94:	eba8 0800 	sub.w	r8, r8, r0
 800af98:	e7e9      	b.n	800af6e <__sflush_r+0xda>
 800af9a:	bf00      	nop
 800af9c:	dfbffffe 	.word	0xdfbffffe

0800afa0 <_fflush_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	690b      	ldr	r3, [r1, #16]
 800afa4:	4605      	mov	r5, r0
 800afa6:	460c      	mov	r4, r1
 800afa8:	b913      	cbnz	r3, 800afb0 <_fflush_r+0x10>
 800afaa:	2500      	movs	r5, #0
 800afac:	4628      	mov	r0, r5
 800afae:	bd38      	pop	{r3, r4, r5, pc}
 800afb0:	b118      	cbz	r0, 800afba <_fflush_r+0x1a>
 800afb2:	6a03      	ldr	r3, [r0, #32]
 800afb4:	b90b      	cbnz	r3, 800afba <_fflush_r+0x1a>
 800afb6:	f7fe fd27 	bl	8009a08 <__sinit>
 800afba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d0f3      	beq.n	800afaa <_fflush_r+0xa>
 800afc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afc4:	07d0      	lsls	r0, r2, #31
 800afc6:	d404      	bmi.n	800afd2 <_fflush_r+0x32>
 800afc8:	0599      	lsls	r1, r3, #22
 800afca:	d402      	bmi.n	800afd2 <_fflush_r+0x32>
 800afcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afce:	f7fe fdee 	bl	8009bae <__retarget_lock_acquire_recursive>
 800afd2:	4628      	mov	r0, r5
 800afd4:	4621      	mov	r1, r4
 800afd6:	f7ff ff5d 	bl	800ae94 <__sflush_r>
 800afda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afdc:	07da      	lsls	r2, r3, #31
 800afde:	4605      	mov	r5, r0
 800afe0:	d4e4      	bmi.n	800afac <_fflush_r+0xc>
 800afe2:	89a3      	ldrh	r3, [r4, #12]
 800afe4:	059b      	lsls	r3, r3, #22
 800afe6:	d4e1      	bmi.n	800afac <_fflush_r+0xc>
 800afe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afea:	f7fe fde1 	bl	8009bb0 <__retarget_lock_release_recursive>
 800afee:	e7dd      	b.n	800afac <_fflush_r+0xc>

0800aff0 <_Balloc>:
 800aff0:	b570      	push	{r4, r5, r6, lr}
 800aff2:	69c6      	ldr	r6, [r0, #28]
 800aff4:	4604      	mov	r4, r0
 800aff6:	460d      	mov	r5, r1
 800aff8:	b976      	cbnz	r6, 800b018 <_Balloc+0x28>
 800affa:	2010      	movs	r0, #16
 800affc:	f7fe fa0c 	bl	8009418 <malloc>
 800b000:	4602      	mov	r2, r0
 800b002:	61e0      	str	r0, [r4, #28]
 800b004:	b920      	cbnz	r0, 800b010 <_Balloc+0x20>
 800b006:	4b18      	ldr	r3, [pc, #96]	; (800b068 <_Balloc+0x78>)
 800b008:	4818      	ldr	r0, [pc, #96]	; (800b06c <_Balloc+0x7c>)
 800b00a:	216b      	movs	r1, #107	; 0x6b
 800b00c:	f7fd ff10 	bl	8008e30 <__assert_func>
 800b010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b014:	6006      	str	r6, [r0, #0]
 800b016:	60c6      	str	r6, [r0, #12]
 800b018:	69e6      	ldr	r6, [r4, #28]
 800b01a:	68f3      	ldr	r3, [r6, #12]
 800b01c:	b183      	cbz	r3, 800b040 <_Balloc+0x50>
 800b01e:	69e3      	ldr	r3, [r4, #28]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b026:	b9b8      	cbnz	r0, 800b058 <_Balloc+0x68>
 800b028:	2101      	movs	r1, #1
 800b02a:	fa01 f605 	lsl.w	r6, r1, r5
 800b02e:	1d72      	adds	r2, r6, #5
 800b030:	0092      	lsls	r2, r2, #2
 800b032:	4620      	mov	r0, r4
 800b034:	f000 fd44 	bl	800bac0 <_calloc_r>
 800b038:	b160      	cbz	r0, 800b054 <_Balloc+0x64>
 800b03a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b03e:	e00e      	b.n	800b05e <_Balloc+0x6e>
 800b040:	2221      	movs	r2, #33	; 0x21
 800b042:	2104      	movs	r1, #4
 800b044:	4620      	mov	r0, r4
 800b046:	f000 fd3b 	bl	800bac0 <_calloc_r>
 800b04a:	69e3      	ldr	r3, [r4, #28]
 800b04c:	60f0      	str	r0, [r6, #12]
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1e4      	bne.n	800b01e <_Balloc+0x2e>
 800b054:	2000      	movs	r0, #0
 800b056:	bd70      	pop	{r4, r5, r6, pc}
 800b058:	6802      	ldr	r2, [r0, #0]
 800b05a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b05e:	2300      	movs	r3, #0
 800b060:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b064:	e7f7      	b.n	800b056 <_Balloc+0x66>
 800b066:	bf00      	nop
 800b068:	0800c08b 	.word	0x0800c08b
 800b06c:	0800c11c 	.word	0x0800c11c

0800b070 <_Bfree>:
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	69c6      	ldr	r6, [r0, #28]
 800b074:	4605      	mov	r5, r0
 800b076:	460c      	mov	r4, r1
 800b078:	b976      	cbnz	r6, 800b098 <_Bfree+0x28>
 800b07a:	2010      	movs	r0, #16
 800b07c:	f7fe f9cc 	bl	8009418 <malloc>
 800b080:	4602      	mov	r2, r0
 800b082:	61e8      	str	r0, [r5, #28]
 800b084:	b920      	cbnz	r0, 800b090 <_Bfree+0x20>
 800b086:	4b09      	ldr	r3, [pc, #36]	; (800b0ac <_Bfree+0x3c>)
 800b088:	4809      	ldr	r0, [pc, #36]	; (800b0b0 <_Bfree+0x40>)
 800b08a:	218f      	movs	r1, #143	; 0x8f
 800b08c:	f7fd fed0 	bl	8008e30 <__assert_func>
 800b090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b094:	6006      	str	r6, [r0, #0]
 800b096:	60c6      	str	r6, [r0, #12]
 800b098:	b13c      	cbz	r4, 800b0aa <_Bfree+0x3a>
 800b09a:	69eb      	ldr	r3, [r5, #28]
 800b09c:	6862      	ldr	r2, [r4, #4]
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0a4:	6021      	str	r1, [r4, #0]
 800b0a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0aa:	bd70      	pop	{r4, r5, r6, pc}
 800b0ac:	0800c08b 	.word	0x0800c08b
 800b0b0:	0800c11c 	.word	0x0800c11c

0800b0b4 <__multadd>:
 800b0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b8:	690d      	ldr	r5, [r1, #16]
 800b0ba:	4607      	mov	r7, r0
 800b0bc:	460c      	mov	r4, r1
 800b0be:	461e      	mov	r6, r3
 800b0c0:	f101 0c14 	add.w	ip, r1, #20
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	f8dc 3000 	ldr.w	r3, [ip]
 800b0ca:	b299      	uxth	r1, r3
 800b0cc:	fb02 6101 	mla	r1, r2, r1, r6
 800b0d0:	0c1e      	lsrs	r6, r3, #16
 800b0d2:	0c0b      	lsrs	r3, r1, #16
 800b0d4:	fb02 3306 	mla	r3, r2, r6, r3
 800b0d8:	b289      	uxth	r1, r1
 800b0da:	3001      	adds	r0, #1
 800b0dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b0e0:	4285      	cmp	r5, r0
 800b0e2:	f84c 1b04 	str.w	r1, [ip], #4
 800b0e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b0ea:	dcec      	bgt.n	800b0c6 <__multadd+0x12>
 800b0ec:	b30e      	cbz	r6, 800b132 <__multadd+0x7e>
 800b0ee:	68a3      	ldr	r3, [r4, #8]
 800b0f0:	42ab      	cmp	r3, r5
 800b0f2:	dc19      	bgt.n	800b128 <__multadd+0x74>
 800b0f4:	6861      	ldr	r1, [r4, #4]
 800b0f6:	4638      	mov	r0, r7
 800b0f8:	3101      	adds	r1, #1
 800b0fa:	f7ff ff79 	bl	800aff0 <_Balloc>
 800b0fe:	4680      	mov	r8, r0
 800b100:	b928      	cbnz	r0, 800b10e <__multadd+0x5a>
 800b102:	4602      	mov	r2, r0
 800b104:	4b0c      	ldr	r3, [pc, #48]	; (800b138 <__multadd+0x84>)
 800b106:	480d      	ldr	r0, [pc, #52]	; (800b13c <__multadd+0x88>)
 800b108:	21ba      	movs	r1, #186	; 0xba
 800b10a:	f7fd fe91 	bl	8008e30 <__assert_func>
 800b10e:	6922      	ldr	r2, [r4, #16]
 800b110:	3202      	adds	r2, #2
 800b112:	f104 010c 	add.w	r1, r4, #12
 800b116:	0092      	lsls	r2, r2, #2
 800b118:	300c      	adds	r0, #12
 800b11a:	f7fe fd4a 	bl	8009bb2 <memcpy>
 800b11e:	4621      	mov	r1, r4
 800b120:	4638      	mov	r0, r7
 800b122:	f7ff ffa5 	bl	800b070 <_Bfree>
 800b126:	4644      	mov	r4, r8
 800b128:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b12c:	3501      	adds	r5, #1
 800b12e:	615e      	str	r6, [r3, #20]
 800b130:	6125      	str	r5, [r4, #16]
 800b132:	4620      	mov	r0, r4
 800b134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b138:	0800c0fa 	.word	0x0800c0fa
 800b13c:	0800c11c 	.word	0x0800c11c

0800b140 <__hi0bits>:
 800b140:	0c03      	lsrs	r3, r0, #16
 800b142:	041b      	lsls	r3, r3, #16
 800b144:	b9d3      	cbnz	r3, 800b17c <__hi0bits+0x3c>
 800b146:	0400      	lsls	r0, r0, #16
 800b148:	2310      	movs	r3, #16
 800b14a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b14e:	bf04      	itt	eq
 800b150:	0200      	lsleq	r0, r0, #8
 800b152:	3308      	addeq	r3, #8
 800b154:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b158:	bf04      	itt	eq
 800b15a:	0100      	lsleq	r0, r0, #4
 800b15c:	3304      	addeq	r3, #4
 800b15e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b162:	bf04      	itt	eq
 800b164:	0080      	lsleq	r0, r0, #2
 800b166:	3302      	addeq	r3, #2
 800b168:	2800      	cmp	r0, #0
 800b16a:	db05      	blt.n	800b178 <__hi0bits+0x38>
 800b16c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b170:	f103 0301 	add.w	r3, r3, #1
 800b174:	bf08      	it	eq
 800b176:	2320      	moveq	r3, #32
 800b178:	4618      	mov	r0, r3
 800b17a:	4770      	bx	lr
 800b17c:	2300      	movs	r3, #0
 800b17e:	e7e4      	b.n	800b14a <__hi0bits+0xa>

0800b180 <__lo0bits>:
 800b180:	6803      	ldr	r3, [r0, #0]
 800b182:	f013 0207 	ands.w	r2, r3, #7
 800b186:	d00c      	beq.n	800b1a2 <__lo0bits+0x22>
 800b188:	07d9      	lsls	r1, r3, #31
 800b18a:	d422      	bmi.n	800b1d2 <__lo0bits+0x52>
 800b18c:	079a      	lsls	r2, r3, #30
 800b18e:	bf49      	itett	mi
 800b190:	085b      	lsrmi	r3, r3, #1
 800b192:	089b      	lsrpl	r3, r3, #2
 800b194:	6003      	strmi	r3, [r0, #0]
 800b196:	2201      	movmi	r2, #1
 800b198:	bf5c      	itt	pl
 800b19a:	6003      	strpl	r3, [r0, #0]
 800b19c:	2202      	movpl	r2, #2
 800b19e:	4610      	mov	r0, r2
 800b1a0:	4770      	bx	lr
 800b1a2:	b299      	uxth	r1, r3
 800b1a4:	b909      	cbnz	r1, 800b1aa <__lo0bits+0x2a>
 800b1a6:	0c1b      	lsrs	r3, r3, #16
 800b1a8:	2210      	movs	r2, #16
 800b1aa:	b2d9      	uxtb	r1, r3
 800b1ac:	b909      	cbnz	r1, 800b1b2 <__lo0bits+0x32>
 800b1ae:	3208      	adds	r2, #8
 800b1b0:	0a1b      	lsrs	r3, r3, #8
 800b1b2:	0719      	lsls	r1, r3, #28
 800b1b4:	bf04      	itt	eq
 800b1b6:	091b      	lsreq	r3, r3, #4
 800b1b8:	3204      	addeq	r2, #4
 800b1ba:	0799      	lsls	r1, r3, #30
 800b1bc:	bf04      	itt	eq
 800b1be:	089b      	lsreq	r3, r3, #2
 800b1c0:	3202      	addeq	r2, #2
 800b1c2:	07d9      	lsls	r1, r3, #31
 800b1c4:	d403      	bmi.n	800b1ce <__lo0bits+0x4e>
 800b1c6:	085b      	lsrs	r3, r3, #1
 800b1c8:	f102 0201 	add.w	r2, r2, #1
 800b1cc:	d003      	beq.n	800b1d6 <__lo0bits+0x56>
 800b1ce:	6003      	str	r3, [r0, #0]
 800b1d0:	e7e5      	b.n	800b19e <__lo0bits+0x1e>
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	e7e3      	b.n	800b19e <__lo0bits+0x1e>
 800b1d6:	2220      	movs	r2, #32
 800b1d8:	e7e1      	b.n	800b19e <__lo0bits+0x1e>
	...

0800b1dc <__i2b>:
 800b1dc:	b510      	push	{r4, lr}
 800b1de:	460c      	mov	r4, r1
 800b1e0:	2101      	movs	r1, #1
 800b1e2:	f7ff ff05 	bl	800aff0 <_Balloc>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	b928      	cbnz	r0, 800b1f6 <__i2b+0x1a>
 800b1ea:	4b05      	ldr	r3, [pc, #20]	; (800b200 <__i2b+0x24>)
 800b1ec:	4805      	ldr	r0, [pc, #20]	; (800b204 <__i2b+0x28>)
 800b1ee:	f240 1145 	movw	r1, #325	; 0x145
 800b1f2:	f7fd fe1d 	bl	8008e30 <__assert_func>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	6144      	str	r4, [r0, #20]
 800b1fa:	6103      	str	r3, [r0, #16]
 800b1fc:	bd10      	pop	{r4, pc}
 800b1fe:	bf00      	nop
 800b200:	0800c0fa 	.word	0x0800c0fa
 800b204:	0800c11c 	.word	0x0800c11c

0800b208 <__multiply>:
 800b208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20c:	4691      	mov	r9, r2
 800b20e:	690a      	ldr	r2, [r1, #16]
 800b210:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b214:	429a      	cmp	r2, r3
 800b216:	bfb8      	it	lt
 800b218:	460b      	movlt	r3, r1
 800b21a:	460c      	mov	r4, r1
 800b21c:	bfbc      	itt	lt
 800b21e:	464c      	movlt	r4, r9
 800b220:	4699      	movlt	r9, r3
 800b222:	6927      	ldr	r7, [r4, #16]
 800b224:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b228:	68a3      	ldr	r3, [r4, #8]
 800b22a:	6861      	ldr	r1, [r4, #4]
 800b22c:	eb07 060a 	add.w	r6, r7, sl
 800b230:	42b3      	cmp	r3, r6
 800b232:	b085      	sub	sp, #20
 800b234:	bfb8      	it	lt
 800b236:	3101      	addlt	r1, #1
 800b238:	f7ff feda 	bl	800aff0 <_Balloc>
 800b23c:	b930      	cbnz	r0, 800b24c <__multiply+0x44>
 800b23e:	4602      	mov	r2, r0
 800b240:	4b44      	ldr	r3, [pc, #272]	; (800b354 <__multiply+0x14c>)
 800b242:	4845      	ldr	r0, [pc, #276]	; (800b358 <__multiply+0x150>)
 800b244:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b248:	f7fd fdf2 	bl	8008e30 <__assert_func>
 800b24c:	f100 0514 	add.w	r5, r0, #20
 800b250:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b254:	462b      	mov	r3, r5
 800b256:	2200      	movs	r2, #0
 800b258:	4543      	cmp	r3, r8
 800b25a:	d321      	bcc.n	800b2a0 <__multiply+0x98>
 800b25c:	f104 0314 	add.w	r3, r4, #20
 800b260:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b264:	f109 0314 	add.w	r3, r9, #20
 800b268:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b26c:	9202      	str	r2, [sp, #8]
 800b26e:	1b3a      	subs	r2, r7, r4
 800b270:	3a15      	subs	r2, #21
 800b272:	f022 0203 	bic.w	r2, r2, #3
 800b276:	3204      	adds	r2, #4
 800b278:	f104 0115 	add.w	r1, r4, #21
 800b27c:	428f      	cmp	r7, r1
 800b27e:	bf38      	it	cc
 800b280:	2204      	movcc	r2, #4
 800b282:	9201      	str	r2, [sp, #4]
 800b284:	9a02      	ldr	r2, [sp, #8]
 800b286:	9303      	str	r3, [sp, #12]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d80c      	bhi.n	800b2a6 <__multiply+0x9e>
 800b28c:	2e00      	cmp	r6, #0
 800b28e:	dd03      	ble.n	800b298 <__multiply+0x90>
 800b290:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b294:	2b00      	cmp	r3, #0
 800b296:	d05b      	beq.n	800b350 <__multiply+0x148>
 800b298:	6106      	str	r6, [r0, #16]
 800b29a:	b005      	add	sp, #20
 800b29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a0:	f843 2b04 	str.w	r2, [r3], #4
 800b2a4:	e7d8      	b.n	800b258 <__multiply+0x50>
 800b2a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b2aa:	f1ba 0f00 	cmp.w	sl, #0
 800b2ae:	d024      	beq.n	800b2fa <__multiply+0xf2>
 800b2b0:	f104 0e14 	add.w	lr, r4, #20
 800b2b4:	46a9      	mov	r9, r5
 800b2b6:	f04f 0c00 	mov.w	ip, #0
 800b2ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b2be:	f8d9 1000 	ldr.w	r1, [r9]
 800b2c2:	fa1f fb82 	uxth.w	fp, r2
 800b2c6:	b289      	uxth	r1, r1
 800b2c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b2cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b2d0:	f8d9 2000 	ldr.w	r2, [r9]
 800b2d4:	4461      	add	r1, ip
 800b2d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2da:	fb0a c20b 	mla	r2, sl, fp, ip
 800b2de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b2e2:	b289      	uxth	r1, r1
 800b2e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2e8:	4577      	cmp	r7, lr
 800b2ea:	f849 1b04 	str.w	r1, [r9], #4
 800b2ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2f2:	d8e2      	bhi.n	800b2ba <__multiply+0xb2>
 800b2f4:	9a01      	ldr	r2, [sp, #4]
 800b2f6:	f845 c002 	str.w	ip, [r5, r2]
 800b2fa:	9a03      	ldr	r2, [sp, #12]
 800b2fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b300:	3304      	adds	r3, #4
 800b302:	f1b9 0f00 	cmp.w	r9, #0
 800b306:	d021      	beq.n	800b34c <__multiply+0x144>
 800b308:	6829      	ldr	r1, [r5, #0]
 800b30a:	f104 0c14 	add.w	ip, r4, #20
 800b30e:	46ae      	mov	lr, r5
 800b310:	f04f 0a00 	mov.w	sl, #0
 800b314:	f8bc b000 	ldrh.w	fp, [ip]
 800b318:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b31c:	fb09 220b 	mla	r2, r9, fp, r2
 800b320:	4452      	add	r2, sl
 800b322:	b289      	uxth	r1, r1
 800b324:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b328:	f84e 1b04 	str.w	r1, [lr], #4
 800b32c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b330:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b334:	f8be 1000 	ldrh.w	r1, [lr]
 800b338:	fb09 110a 	mla	r1, r9, sl, r1
 800b33c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b340:	4567      	cmp	r7, ip
 800b342:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b346:	d8e5      	bhi.n	800b314 <__multiply+0x10c>
 800b348:	9a01      	ldr	r2, [sp, #4]
 800b34a:	50a9      	str	r1, [r5, r2]
 800b34c:	3504      	adds	r5, #4
 800b34e:	e799      	b.n	800b284 <__multiply+0x7c>
 800b350:	3e01      	subs	r6, #1
 800b352:	e79b      	b.n	800b28c <__multiply+0x84>
 800b354:	0800c0fa 	.word	0x0800c0fa
 800b358:	0800c11c 	.word	0x0800c11c

0800b35c <__pow5mult>:
 800b35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b360:	4615      	mov	r5, r2
 800b362:	f012 0203 	ands.w	r2, r2, #3
 800b366:	4606      	mov	r6, r0
 800b368:	460f      	mov	r7, r1
 800b36a:	d007      	beq.n	800b37c <__pow5mult+0x20>
 800b36c:	4c25      	ldr	r4, [pc, #148]	; (800b404 <__pow5mult+0xa8>)
 800b36e:	3a01      	subs	r2, #1
 800b370:	2300      	movs	r3, #0
 800b372:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b376:	f7ff fe9d 	bl	800b0b4 <__multadd>
 800b37a:	4607      	mov	r7, r0
 800b37c:	10ad      	asrs	r5, r5, #2
 800b37e:	d03d      	beq.n	800b3fc <__pow5mult+0xa0>
 800b380:	69f4      	ldr	r4, [r6, #28]
 800b382:	b97c      	cbnz	r4, 800b3a4 <__pow5mult+0x48>
 800b384:	2010      	movs	r0, #16
 800b386:	f7fe f847 	bl	8009418 <malloc>
 800b38a:	4602      	mov	r2, r0
 800b38c:	61f0      	str	r0, [r6, #28]
 800b38e:	b928      	cbnz	r0, 800b39c <__pow5mult+0x40>
 800b390:	4b1d      	ldr	r3, [pc, #116]	; (800b408 <__pow5mult+0xac>)
 800b392:	481e      	ldr	r0, [pc, #120]	; (800b40c <__pow5mult+0xb0>)
 800b394:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b398:	f7fd fd4a 	bl	8008e30 <__assert_func>
 800b39c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3a0:	6004      	str	r4, [r0, #0]
 800b3a2:	60c4      	str	r4, [r0, #12]
 800b3a4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b3a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3ac:	b94c      	cbnz	r4, 800b3c2 <__pow5mult+0x66>
 800b3ae:	f240 2171 	movw	r1, #625	; 0x271
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	f7ff ff12 	bl	800b1dc <__i2b>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3be:	4604      	mov	r4, r0
 800b3c0:	6003      	str	r3, [r0, #0]
 800b3c2:	f04f 0900 	mov.w	r9, #0
 800b3c6:	07eb      	lsls	r3, r5, #31
 800b3c8:	d50a      	bpl.n	800b3e0 <__pow5mult+0x84>
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	4622      	mov	r2, r4
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	f7ff ff1a 	bl	800b208 <__multiply>
 800b3d4:	4639      	mov	r1, r7
 800b3d6:	4680      	mov	r8, r0
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f7ff fe49 	bl	800b070 <_Bfree>
 800b3de:	4647      	mov	r7, r8
 800b3e0:	106d      	asrs	r5, r5, #1
 800b3e2:	d00b      	beq.n	800b3fc <__pow5mult+0xa0>
 800b3e4:	6820      	ldr	r0, [r4, #0]
 800b3e6:	b938      	cbnz	r0, 800b3f8 <__pow5mult+0x9c>
 800b3e8:	4622      	mov	r2, r4
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	f7ff ff0b 	bl	800b208 <__multiply>
 800b3f2:	6020      	str	r0, [r4, #0]
 800b3f4:	f8c0 9000 	str.w	r9, [r0]
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	e7e4      	b.n	800b3c6 <__pow5mult+0x6a>
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b402:	bf00      	nop
 800b404:	0800c268 	.word	0x0800c268
 800b408:	0800c08b 	.word	0x0800c08b
 800b40c:	0800c11c 	.word	0x0800c11c

0800b410 <__lshift>:
 800b410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b414:	460c      	mov	r4, r1
 800b416:	6849      	ldr	r1, [r1, #4]
 800b418:	6923      	ldr	r3, [r4, #16]
 800b41a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b41e:	68a3      	ldr	r3, [r4, #8]
 800b420:	4607      	mov	r7, r0
 800b422:	4691      	mov	r9, r2
 800b424:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b428:	f108 0601 	add.w	r6, r8, #1
 800b42c:	42b3      	cmp	r3, r6
 800b42e:	db0b      	blt.n	800b448 <__lshift+0x38>
 800b430:	4638      	mov	r0, r7
 800b432:	f7ff fddd 	bl	800aff0 <_Balloc>
 800b436:	4605      	mov	r5, r0
 800b438:	b948      	cbnz	r0, 800b44e <__lshift+0x3e>
 800b43a:	4602      	mov	r2, r0
 800b43c:	4b28      	ldr	r3, [pc, #160]	; (800b4e0 <__lshift+0xd0>)
 800b43e:	4829      	ldr	r0, [pc, #164]	; (800b4e4 <__lshift+0xd4>)
 800b440:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b444:	f7fd fcf4 	bl	8008e30 <__assert_func>
 800b448:	3101      	adds	r1, #1
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	e7ee      	b.n	800b42c <__lshift+0x1c>
 800b44e:	2300      	movs	r3, #0
 800b450:	f100 0114 	add.w	r1, r0, #20
 800b454:	f100 0210 	add.w	r2, r0, #16
 800b458:	4618      	mov	r0, r3
 800b45a:	4553      	cmp	r3, sl
 800b45c:	db33      	blt.n	800b4c6 <__lshift+0xb6>
 800b45e:	6920      	ldr	r0, [r4, #16]
 800b460:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b464:	f104 0314 	add.w	r3, r4, #20
 800b468:	f019 091f 	ands.w	r9, r9, #31
 800b46c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b470:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b474:	d02b      	beq.n	800b4ce <__lshift+0xbe>
 800b476:	f1c9 0e20 	rsb	lr, r9, #32
 800b47a:	468a      	mov	sl, r1
 800b47c:	2200      	movs	r2, #0
 800b47e:	6818      	ldr	r0, [r3, #0]
 800b480:	fa00 f009 	lsl.w	r0, r0, r9
 800b484:	4310      	orrs	r0, r2
 800b486:	f84a 0b04 	str.w	r0, [sl], #4
 800b48a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b48e:	459c      	cmp	ip, r3
 800b490:	fa22 f20e 	lsr.w	r2, r2, lr
 800b494:	d8f3      	bhi.n	800b47e <__lshift+0x6e>
 800b496:	ebac 0304 	sub.w	r3, ip, r4
 800b49a:	3b15      	subs	r3, #21
 800b49c:	f023 0303 	bic.w	r3, r3, #3
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	f104 0015 	add.w	r0, r4, #21
 800b4a6:	4584      	cmp	ip, r0
 800b4a8:	bf38      	it	cc
 800b4aa:	2304      	movcc	r3, #4
 800b4ac:	50ca      	str	r2, [r1, r3]
 800b4ae:	b10a      	cbz	r2, 800b4b4 <__lshift+0xa4>
 800b4b0:	f108 0602 	add.w	r6, r8, #2
 800b4b4:	3e01      	subs	r6, #1
 800b4b6:	4638      	mov	r0, r7
 800b4b8:	612e      	str	r6, [r5, #16]
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	f7ff fdd8 	bl	800b070 <_Bfree>
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	e7c5      	b.n	800b45a <__lshift+0x4a>
 800b4ce:	3904      	subs	r1, #4
 800b4d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4d8:	459c      	cmp	ip, r3
 800b4da:	d8f9      	bhi.n	800b4d0 <__lshift+0xc0>
 800b4dc:	e7ea      	b.n	800b4b4 <__lshift+0xa4>
 800b4de:	bf00      	nop
 800b4e0:	0800c0fa 	.word	0x0800c0fa
 800b4e4:	0800c11c 	.word	0x0800c11c

0800b4e8 <__mcmp>:
 800b4e8:	b530      	push	{r4, r5, lr}
 800b4ea:	6902      	ldr	r2, [r0, #16]
 800b4ec:	690c      	ldr	r4, [r1, #16]
 800b4ee:	1b12      	subs	r2, r2, r4
 800b4f0:	d10e      	bne.n	800b510 <__mcmp+0x28>
 800b4f2:	f100 0314 	add.w	r3, r0, #20
 800b4f6:	3114      	adds	r1, #20
 800b4f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b4fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b500:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b504:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b508:	42a5      	cmp	r5, r4
 800b50a:	d003      	beq.n	800b514 <__mcmp+0x2c>
 800b50c:	d305      	bcc.n	800b51a <__mcmp+0x32>
 800b50e:	2201      	movs	r2, #1
 800b510:	4610      	mov	r0, r2
 800b512:	bd30      	pop	{r4, r5, pc}
 800b514:	4283      	cmp	r3, r0
 800b516:	d3f3      	bcc.n	800b500 <__mcmp+0x18>
 800b518:	e7fa      	b.n	800b510 <__mcmp+0x28>
 800b51a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b51e:	e7f7      	b.n	800b510 <__mcmp+0x28>

0800b520 <__mdiff>:
 800b520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b524:	460c      	mov	r4, r1
 800b526:	4606      	mov	r6, r0
 800b528:	4611      	mov	r1, r2
 800b52a:	4620      	mov	r0, r4
 800b52c:	4690      	mov	r8, r2
 800b52e:	f7ff ffdb 	bl	800b4e8 <__mcmp>
 800b532:	1e05      	subs	r5, r0, #0
 800b534:	d110      	bne.n	800b558 <__mdiff+0x38>
 800b536:	4629      	mov	r1, r5
 800b538:	4630      	mov	r0, r6
 800b53a:	f7ff fd59 	bl	800aff0 <_Balloc>
 800b53e:	b930      	cbnz	r0, 800b54e <__mdiff+0x2e>
 800b540:	4b3a      	ldr	r3, [pc, #232]	; (800b62c <__mdiff+0x10c>)
 800b542:	4602      	mov	r2, r0
 800b544:	f240 2137 	movw	r1, #567	; 0x237
 800b548:	4839      	ldr	r0, [pc, #228]	; (800b630 <__mdiff+0x110>)
 800b54a:	f7fd fc71 	bl	8008e30 <__assert_func>
 800b54e:	2301      	movs	r3, #1
 800b550:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b554:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b558:	bfa4      	itt	ge
 800b55a:	4643      	movge	r3, r8
 800b55c:	46a0      	movge	r8, r4
 800b55e:	4630      	mov	r0, r6
 800b560:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b564:	bfa6      	itte	ge
 800b566:	461c      	movge	r4, r3
 800b568:	2500      	movge	r5, #0
 800b56a:	2501      	movlt	r5, #1
 800b56c:	f7ff fd40 	bl	800aff0 <_Balloc>
 800b570:	b920      	cbnz	r0, 800b57c <__mdiff+0x5c>
 800b572:	4b2e      	ldr	r3, [pc, #184]	; (800b62c <__mdiff+0x10c>)
 800b574:	4602      	mov	r2, r0
 800b576:	f240 2145 	movw	r1, #581	; 0x245
 800b57a:	e7e5      	b.n	800b548 <__mdiff+0x28>
 800b57c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b580:	6926      	ldr	r6, [r4, #16]
 800b582:	60c5      	str	r5, [r0, #12]
 800b584:	f104 0914 	add.w	r9, r4, #20
 800b588:	f108 0514 	add.w	r5, r8, #20
 800b58c:	f100 0e14 	add.w	lr, r0, #20
 800b590:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b594:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b598:	f108 0210 	add.w	r2, r8, #16
 800b59c:	46f2      	mov	sl, lr
 800b59e:	2100      	movs	r1, #0
 800b5a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b5a8:	fa11 f88b 	uxtah	r8, r1, fp
 800b5ac:	b299      	uxth	r1, r3
 800b5ae:	0c1b      	lsrs	r3, r3, #16
 800b5b0:	eba8 0801 	sub.w	r8, r8, r1
 800b5b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b5b8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b5bc:	fa1f f888 	uxth.w	r8, r8
 800b5c0:	1419      	asrs	r1, r3, #16
 800b5c2:	454e      	cmp	r6, r9
 800b5c4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b5c8:	f84a 3b04 	str.w	r3, [sl], #4
 800b5cc:	d8e8      	bhi.n	800b5a0 <__mdiff+0x80>
 800b5ce:	1b33      	subs	r3, r6, r4
 800b5d0:	3b15      	subs	r3, #21
 800b5d2:	f023 0303 	bic.w	r3, r3, #3
 800b5d6:	3304      	adds	r3, #4
 800b5d8:	3415      	adds	r4, #21
 800b5da:	42a6      	cmp	r6, r4
 800b5dc:	bf38      	it	cc
 800b5de:	2304      	movcc	r3, #4
 800b5e0:	441d      	add	r5, r3
 800b5e2:	4473      	add	r3, lr
 800b5e4:	469e      	mov	lr, r3
 800b5e6:	462e      	mov	r6, r5
 800b5e8:	4566      	cmp	r6, ip
 800b5ea:	d30e      	bcc.n	800b60a <__mdiff+0xea>
 800b5ec:	f10c 0203 	add.w	r2, ip, #3
 800b5f0:	1b52      	subs	r2, r2, r5
 800b5f2:	f022 0203 	bic.w	r2, r2, #3
 800b5f6:	3d03      	subs	r5, #3
 800b5f8:	45ac      	cmp	ip, r5
 800b5fa:	bf38      	it	cc
 800b5fc:	2200      	movcc	r2, #0
 800b5fe:	4413      	add	r3, r2
 800b600:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b604:	b17a      	cbz	r2, 800b626 <__mdiff+0x106>
 800b606:	6107      	str	r7, [r0, #16]
 800b608:	e7a4      	b.n	800b554 <__mdiff+0x34>
 800b60a:	f856 8b04 	ldr.w	r8, [r6], #4
 800b60e:	fa11 f288 	uxtah	r2, r1, r8
 800b612:	1414      	asrs	r4, r2, #16
 800b614:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b618:	b292      	uxth	r2, r2
 800b61a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b61e:	f84e 2b04 	str.w	r2, [lr], #4
 800b622:	1421      	asrs	r1, r4, #16
 800b624:	e7e0      	b.n	800b5e8 <__mdiff+0xc8>
 800b626:	3f01      	subs	r7, #1
 800b628:	e7ea      	b.n	800b600 <__mdiff+0xe0>
 800b62a:	bf00      	nop
 800b62c:	0800c0fa 	.word	0x0800c0fa
 800b630:	0800c11c 	.word	0x0800c11c

0800b634 <__d2b>:
 800b634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b638:	460f      	mov	r7, r1
 800b63a:	2101      	movs	r1, #1
 800b63c:	ec59 8b10 	vmov	r8, r9, d0
 800b640:	4616      	mov	r6, r2
 800b642:	f7ff fcd5 	bl	800aff0 <_Balloc>
 800b646:	4604      	mov	r4, r0
 800b648:	b930      	cbnz	r0, 800b658 <__d2b+0x24>
 800b64a:	4602      	mov	r2, r0
 800b64c:	4b24      	ldr	r3, [pc, #144]	; (800b6e0 <__d2b+0xac>)
 800b64e:	4825      	ldr	r0, [pc, #148]	; (800b6e4 <__d2b+0xb0>)
 800b650:	f240 310f 	movw	r1, #783	; 0x30f
 800b654:	f7fd fbec 	bl	8008e30 <__assert_func>
 800b658:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b65c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b660:	bb2d      	cbnz	r5, 800b6ae <__d2b+0x7a>
 800b662:	9301      	str	r3, [sp, #4]
 800b664:	f1b8 0300 	subs.w	r3, r8, #0
 800b668:	d026      	beq.n	800b6b8 <__d2b+0x84>
 800b66a:	4668      	mov	r0, sp
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	f7ff fd87 	bl	800b180 <__lo0bits>
 800b672:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b676:	b1e8      	cbz	r0, 800b6b4 <__d2b+0x80>
 800b678:	f1c0 0320 	rsb	r3, r0, #32
 800b67c:	fa02 f303 	lsl.w	r3, r2, r3
 800b680:	430b      	orrs	r3, r1
 800b682:	40c2      	lsrs	r2, r0
 800b684:	6163      	str	r3, [r4, #20]
 800b686:	9201      	str	r2, [sp, #4]
 800b688:	9b01      	ldr	r3, [sp, #4]
 800b68a:	61a3      	str	r3, [r4, #24]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	bf14      	ite	ne
 800b690:	2202      	movne	r2, #2
 800b692:	2201      	moveq	r2, #1
 800b694:	6122      	str	r2, [r4, #16]
 800b696:	b1bd      	cbz	r5, 800b6c8 <__d2b+0x94>
 800b698:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b69c:	4405      	add	r5, r0
 800b69e:	603d      	str	r5, [r7, #0]
 800b6a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6a4:	6030      	str	r0, [r6, #0]
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	b003      	add	sp, #12
 800b6aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6b2:	e7d6      	b.n	800b662 <__d2b+0x2e>
 800b6b4:	6161      	str	r1, [r4, #20]
 800b6b6:	e7e7      	b.n	800b688 <__d2b+0x54>
 800b6b8:	a801      	add	r0, sp, #4
 800b6ba:	f7ff fd61 	bl	800b180 <__lo0bits>
 800b6be:	9b01      	ldr	r3, [sp, #4]
 800b6c0:	6163      	str	r3, [r4, #20]
 800b6c2:	3020      	adds	r0, #32
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	e7e5      	b.n	800b694 <__d2b+0x60>
 800b6c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b6d0:	6038      	str	r0, [r7, #0]
 800b6d2:	6918      	ldr	r0, [r3, #16]
 800b6d4:	f7ff fd34 	bl	800b140 <__hi0bits>
 800b6d8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b6dc:	e7e2      	b.n	800b6a4 <__d2b+0x70>
 800b6de:	bf00      	nop
 800b6e0:	0800c0fa 	.word	0x0800c0fa
 800b6e4:	0800c11c 	.word	0x0800c11c

0800b6e8 <__sread>:
 800b6e8:	b510      	push	{r4, lr}
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f0:	f000 f9c2 	bl	800ba78 <_read_r>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	bfab      	itete	ge
 800b6f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6fa:	89a3      	ldrhlt	r3, [r4, #12]
 800b6fc:	181b      	addge	r3, r3, r0
 800b6fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b702:	bfac      	ite	ge
 800b704:	6563      	strge	r3, [r4, #84]	; 0x54
 800b706:	81a3      	strhlt	r3, [r4, #12]
 800b708:	bd10      	pop	{r4, pc}

0800b70a <__swrite>:
 800b70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b70e:	461f      	mov	r7, r3
 800b710:	898b      	ldrh	r3, [r1, #12]
 800b712:	05db      	lsls	r3, r3, #23
 800b714:	4605      	mov	r5, r0
 800b716:	460c      	mov	r4, r1
 800b718:	4616      	mov	r6, r2
 800b71a:	d505      	bpl.n	800b728 <__swrite+0x1e>
 800b71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b720:	2302      	movs	r3, #2
 800b722:	2200      	movs	r2, #0
 800b724:	f000 f996 	bl	800ba54 <_lseek_r>
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b72e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b732:	81a3      	strh	r3, [r4, #12]
 800b734:	4632      	mov	r2, r6
 800b736:	463b      	mov	r3, r7
 800b738:	4628      	mov	r0, r5
 800b73a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b73e:	f000 b9ad 	b.w	800ba9c <_write_r>

0800b742 <__sseek>:
 800b742:	b510      	push	{r4, lr}
 800b744:	460c      	mov	r4, r1
 800b746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b74a:	f000 f983 	bl	800ba54 <_lseek_r>
 800b74e:	1c43      	adds	r3, r0, #1
 800b750:	89a3      	ldrh	r3, [r4, #12]
 800b752:	bf15      	itete	ne
 800b754:	6560      	strne	r0, [r4, #84]	; 0x54
 800b756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b75a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b75e:	81a3      	strheq	r3, [r4, #12]
 800b760:	bf18      	it	ne
 800b762:	81a3      	strhne	r3, [r4, #12]
 800b764:	bd10      	pop	{r4, pc}

0800b766 <__sclose>:
 800b766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b76a:	f000 b941 	b.w	800b9f0 <_close_r>

0800b76e <_realloc_r>:
 800b76e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b772:	4680      	mov	r8, r0
 800b774:	4614      	mov	r4, r2
 800b776:	460e      	mov	r6, r1
 800b778:	b921      	cbnz	r1, 800b784 <_realloc_r+0x16>
 800b77a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b77e:	4611      	mov	r1, r2
 800b780:	f7fd be7a 	b.w	8009478 <_malloc_r>
 800b784:	b92a      	cbnz	r2, 800b792 <_realloc_r+0x24>
 800b786:	f7ff f89d 	bl	800a8c4 <_free_r>
 800b78a:	4625      	mov	r5, r4
 800b78c:	4628      	mov	r0, r5
 800b78e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b792:	f000 f9bd 	bl	800bb10 <_malloc_usable_size_r>
 800b796:	4284      	cmp	r4, r0
 800b798:	4607      	mov	r7, r0
 800b79a:	d802      	bhi.n	800b7a2 <_realloc_r+0x34>
 800b79c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7a0:	d812      	bhi.n	800b7c8 <_realloc_r+0x5a>
 800b7a2:	4621      	mov	r1, r4
 800b7a4:	4640      	mov	r0, r8
 800b7a6:	f7fd fe67 	bl	8009478 <_malloc_r>
 800b7aa:	4605      	mov	r5, r0
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	d0ed      	beq.n	800b78c <_realloc_r+0x1e>
 800b7b0:	42bc      	cmp	r4, r7
 800b7b2:	4622      	mov	r2, r4
 800b7b4:	4631      	mov	r1, r6
 800b7b6:	bf28      	it	cs
 800b7b8:	463a      	movcs	r2, r7
 800b7ba:	f7fe f9fa 	bl	8009bb2 <memcpy>
 800b7be:	4631      	mov	r1, r6
 800b7c0:	4640      	mov	r0, r8
 800b7c2:	f7ff f87f 	bl	800a8c4 <_free_r>
 800b7c6:	e7e1      	b.n	800b78c <_realloc_r+0x1e>
 800b7c8:	4635      	mov	r5, r6
 800b7ca:	e7df      	b.n	800b78c <_realloc_r+0x1e>

0800b7cc <__swbuf_r>:
 800b7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ce:	460e      	mov	r6, r1
 800b7d0:	4614      	mov	r4, r2
 800b7d2:	4605      	mov	r5, r0
 800b7d4:	b118      	cbz	r0, 800b7de <__swbuf_r+0x12>
 800b7d6:	6a03      	ldr	r3, [r0, #32]
 800b7d8:	b90b      	cbnz	r3, 800b7de <__swbuf_r+0x12>
 800b7da:	f7fe f915 	bl	8009a08 <__sinit>
 800b7de:	69a3      	ldr	r3, [r4, #24]
 800b7e0:	60a3      	str	r3, [r4, #8]
 800b7e2:	89a3      	ldrh	r3, [r4, #12]
 800b7e4:	071a      	lsls	r2, r3, #28
 800b7e6:	d525      	bpl.n	800b834 <__swbuf_r+0x68>
 800b7e8:	6923      	ldr	r3, [r4, #16]
 800b7ea:	b31b      	cbz	r3, 800b834 <__swbuf_r+0x68>
 800b7ec:	6823      	ldr	r3, [r4, #0]
 800b7ee:	6922      	ldr	r2, [r4, #16]
 800b7f0:	1a98      	subs	r0, r3, r2
 800b7f2:	6963      	ldr	r3, [r4, #20]
 800b7f4:	b2f6      	uxtb	r6, r6
 800b7f6:	4283      	cmp	r3, r0
 800b7f8:	4637      	mov	r7, r6
 800b7fa:	dc04      	bgt.n	800b806 <__swbuf_r+0x3a>
 800b7fc:	4621      	mov	r1, r4
 800b7fe:	4628      	mov	r0, r5
 800b800:	f7ff fbce 	bl	800afa0 <_fflush_r>
 800b804:	b9e0      	cbnz	r0, 800b840 <__swbuf_r+0x74>
 800b806:	68a3      	ldr	r3, [r4, #8]
 800b808:	3b01      	subs	r3, #1
 800b80a:	60a3      	str	r3, [r4, #8]
 800b80c:	6823      	ldr	r3, [r4, #0]
 800b80e:	1c5a      	adds	r2, r3, #1
 800b810:	6022      	str	r2, [r4, #0]
 800b812:	701e      	strb	r6, [r3, #0]
 800b814:	6962      	ldr	r2, [r4, #20]
 800b816:	1c43      	adds	r3, r0, #1
 800b818:	429a      	cmp	r2, r3
 800b81a:	d004      	beq.n	800b826 <__swbuf_r+0x5a>
 800b81c:	89a3      	ldrh	r3, [r4, #12]
 800b81e:	07db      	lsls	r3, r3, #31
 800b820:	d506      	bpl.n	800b830 <__swbuf_r+0x64>
 800b822:	2e0a      	cmp	r6, #10
 800b824:	d104      	bne.n	800b830 <__swbuf_r+0x64>
 800b826:	4621      	mov	r1, r4
 800b828:	4628      	mov	r0, r5
 800b82a:	f7ff fbb9 	bl	800afa0 <_fflush_r>
 800b82e:	b938      	cbnz	r0, 800b840 <__swbuf_r+0x74>
 800b830:	4638      	mov	r0, r7
 800b832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b834:	4621      	mov	r1, r4
 800b836:	4628      	mov	r0, r5
 800b838:	f000 f806 	bl	800b848 <__swsetup_r>
 800b83c:	2800      	cmp	r0, #0
 800b83e:	d0d5      	beq.n	800b7ec <__swbuf_r+0x20>
 800b840:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b844:	e7f4      	b.n	800b830 <__swbuf_r+0x64>
	...

0800b848 <__swsetup_r>:
 800b848:	b538      	push	{r3, r4, r5, lr}
 800b84a:	4b2a      	ldr	r3, [pc, #168]	; (800b8f4 <__swsetup_r+0xac>)
 800b84c:	4605      	mov	r5, r0
 800b84e:	6818      	ldr	r0, [r3, #0]
 800b850:	460c      	mov	r4, r1
 800b852:	b118      	cbz	r0, 800b85c <__swsetup_r+0x14>
 800b854:	6a03      	ldr	r3, [r0, #32]
 800b856:	b90b      	cbnz	r3, 800b85c <__swsetup_r+0x14>
 800b858:	f7fe f8d6 	bl	8009a08 <__sinit>
 800b85c:	89a3      	ldrh	r3, [r4, #12]
 800b85e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b862:	0718      	lsls	r0, r3, #28
 800b864:	d422      	bmi.n	800b8ac <__swsetup_r+0x64>
 800b866:	06d9      	lsls	r1, r3, #27
 800b868:	d407      	bmi.n	800b87a <__swsetup_r+0x32>
 800b86a:	2309      	movs	r3, #9
 800b86c:	602b      	str	r3, [r5, #0]
 800b86e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b872:	81a3      	strh	r3, [r4, #12]
 800b874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b878:	e034      	b.n	800b8e4 <__swsetup_r+0x9c>
 800b87a:	0758      	lsls	r0, r3, #29
 800b87c:	d512      	bpl.n	800b8a4 <__swsetup_r+0x5c>
 800b87e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b880:	b141      	cbz	r1, 800b894 <__swsetup_r+0x4c>
 800b882:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b886:	4299      	cmp	r1, r3
 800b888:	d002      	beq.n	800b890 <__swsetup_r+0x48>
 800b88a:	4628      	mov	r0, r5
 800b88c:	f7ff f81a 	bl	800a8c4 <_free_r>
 800b890:	2300      	movs	r3, #0
 800b892:	6363      	str	r3, [r4, #52]	; 0x34
 800b894:	89a3      	ldrh	r3, [r4, #12]
 800b896:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b89a:	81a3      	strh	r3, [r4, #12]
 800b89c:	2300      	movs	r3, #0
 800b89e:	6063      	str	r3, [r4, #4]
 800b8a0:	6923      	ldr	r3, [r4, #16]
 800b8a2:	6023      	str	r3, [r4, #0]
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	f043 0308 	orr.w	r3, r3, #8
 800b8aa:	81a3      	strh	r3, [r4, #12]
 800b8ac:	6923      	ldr	r3, [r4, #16]
 800b8ae:	b94b      	cbnz	r3, 800b8c4 <__swsetup_r+0x7c>
 800b8b0:	89a3      	ldrh	r3, [r4, #12]
 800b8b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b8b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8ba:	d003      	beq.n	800b8c4 <__swsetup_r+0x7c>
 800b8bc:	4621      	mov	r1, r4
 800b8be:	4628      	mov	r0, r5
 800b8c0:	f000 f840 	bl	800b944 <__smakebuf_r>
 800b8c4:	89a0      	ldrh	r0, [r4, #12]
 800b8c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8ca:	f010 0301 	ands.w	r3, r0, #1
 800b8ce:	d00a      	beq.n	800b8e6 <__swsetup_r+0x9e>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	60a3      	str	r3, [r4, #8]
 800b8d4:	6963      	ldr	r3, [r4, #20]
 800b8d6:	425b      	negs	r3, r3
 800b8d8:	61a3      	str	r3, [r4, #24]
 800b8da:	6923      	ldr	r3, [r4, #16]
 800b8dc:	b943      	cbnz	r3, 800b8f0 <__swsetup_r+0xa8>
 800b8de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b8e2:	d1c4      	bne.n	800b86e <__swsetup_r+0x26>
 800b8e4:	bd38      	pop	{r3, r4, r5, pc}
 800b8e6:	0781      	lsls	r1, r0, #30
 800b8e8:	bf58      	it	pl
 800b8ea:	6963      	ldrpl	r3, [r4, #20]
 800b8ec:	60a3      	str	r3, [r4, #8]
 800b8ee:	e7f4      	b.n	800b8da <__swsetup_r+0x92>
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	e7f7      	b.n	800b8e4 <__swsetup_r+0x9c>
 800b8f4:	2000006c 	.word	0x2000006c

0800b8f8 <__swhatbuf_r>:
 800b8f8:	b570      	push	{r4, r5, r6, lr}
 800b8fa:	460c      	mov	r4, r1
 800b8fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b900:	2900      	cmp	r1, #0
 800b902:	b096      	sub	sp, #88	; 0x58
 800b904:	4615      	mov	r5, r2
 800b906:	461e      	mov	r6, r3
 800b908:	da0d      	bge.n	800b926 <__swhatbuf_r+0x2e>
 800b90a:	89a3      	ldrh	r3, [r4, #12]
 800b90c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b910:	f04f 0100 	mov.w	r1, #0
 800b914:	bf0c      	ite	eq
 800b916:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b91a:	2340      	movne	r3, #64	; 0x40
 800b91c:	2000      	movs	r0, #0
 800b91e:	6031      	str	r1, [r6, #0]
 800b920:	602b      	str	r3, [r5, #0]
 800b922:	b016      	add	sp, #88	; 0x58
 800b924:	bd70      	pop	{r4, r5, r6, pc}
 800b926:	466a      	mov	r2, sp
 800b928:	f000 f872 	bl	800ba10 <_fstat_r>
 800b92c:	2800      	cmp	r0, #0
 800b92e:	dbec      	blt.n	800b90a <__swhatbuf_r+0x12>
 800b930:	9901      	ldr	r1, [sp, #4]
 800b932:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b936:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b93a:	4259      	negs	r1, r3
 800b93c:	4159      	adcs	r1, r3
 800b93e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b942:	e7eb      	b.n	800b91c <__swhatbuf_r+0x24>

0800b944 <__smakebuf_r>:
 800b944:	898b      	ldrh	r3, [r1, #12]
 800b946:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b948:	079d      	lsls	r5, r3, #30
 800b94a:	4606      	mov	r6, r0
 800b94c:	460c      	mov	r4, r1
 800b94e:	d507      	bpl.n	800b960 <__smakebuf_r+0x1c>
 800b950:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b954:	6023      	str	r3, [r4, #0]
 800b956:	6123      	str	r3, [r4, #16]
 800b958:	2301      	movs	r3, #1
 800b95a:	6163      	str	r3, [r4, #20]
 800b95c:	b002      	add	sp, #8
 800b95e:	bd70      	pop	{r4, r5, r6, pc}
 800b960:	ab01      	add	r3, sp, #4
 800b962:	466a      	mov	r2, sp
 800b964:	f7ff ffc8 	bl	800b8f8 <__swhatbuf_r>
 800b968:	9900      	ldr	r1, [sp, #0]
 800b96a:	4605      	mov	r5, r0
 800b96c:	4630      	mov	r0, r6
 800b96e:	f7fd fd83 	bl	8009478 <_malloc_r>
 800b972:	b948      	cbnz	r0, 800b988 <__smakebuf_r+0x44>
 800b974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b978:	059a      	lsls	r2, r3, #22
 800b97a:	d4ef      	bmi.n	800b95c <__smakebuf_r+0x18>
 800b97c:	f023 0303 	bic.w	r3, r3, #3
 800b980:	f043 0302 	orr.w	r3, r3, #2
 800b984:	81a3      	strh	r3, [r4, #12]
 800b986:	e7e3      	b.n	800b950 <__smakebuf_r+0xc>
 800b988:	89a3      	ldrh	r3, [r4, #12]
 800b98a:	6020      	str	r0, [r4, #0]
 800b98c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b990:	81a3      	strh	r3, [r4, #12]
 800b992:	9b00      	ldr	r3, [sp, #0]
 800b994:	6163      	str	r3, [r4, #20]
 800b996:	9b01      	ldr	r3, [sp, #4]
 800b998:	6120      	str	r0, [r4, #16]
 800b99a:	b15b      	cbz	r3, 800b9b4 <__smakebuf_r+0x70>
 800b99c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	f000 f847 	bl	800ba34 <_isatty_r>
 800b9a6:	b128      	cbz	r0, 800b9b4 <__smakebuf_r+0x70>
 800b9a8:	89a3      	ldrh	r3, [r4, #12]
 800b9aa:	f023 0303 	bic.w	r3, r3, #3
 800b9ae:	f043 0301 	orr.w	r3, r3, #1
 800b9b2:	81a3      	strh	r3, [r4, #12]
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	431d      	orrs	r5, r3
 800b9b8:	81a5      	strh	r5, [r4, #12]
 800b9ba:	e7cf      	b.n	800b95c <__smakebuf_r+0x18>

0800b9bc <memmove>:
 800b9bc:	4288      	cmp	r0, r1
 800b9be:	b510      	push	{r4, lr}
 800b9c0:	eb01 0402 	add.w	r4, r1, r2
 800b9c4:	d902      	bls.n	800b9cc <memmove+0x10>
 800b9c6:	4284      	cmp	r4, r0
 800b9c8:	4623      	mov	r3, r4
 800b9ca:	d807      	bhi.n	800b9dc <memmove+0x20>
 800b9cc:	1e43      	subs	r3, r0, #1
 800b9ce:	42a1      	cmp	r1, r4
 800b9d0:	d008      	beq.n	800b9e4 <memmove+0x28>
 800b9d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9da:	e7f8      	b.n	800b9ce <memmove+0x12>
 800b9dc:	4402      	add	r2, r0
 800b9de:	4601      	mov	r1, r0
 800b9e0:	428a      	cmp	r2, r1
 800b9e2:	d100      	bne.n	800b9e6 <memmove+0x2a>
 800b9e4:	bd10      	pop	{r4, pc}
 800b9e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9ee:	e7f7      	b.n	800b9e0 <memmove+0x24>

0800b9f0 <_close_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	4d06      	ldr	r5, [pc, #24]	; (800ba0c <_close_r+0x1c>)
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	4608      	mov	r0, r1
 800b9fa:	602b      	str	r3, [r5, #0]
 800b9fc:	f7f7 fd58 	bl	80034b0 <_close>
 800ba00:	1c43      	adds	r3, r0, #1
 800ba02:	d102      	bne.n	800ba0a <_close_r+0x1a>
 800ba04:	682b      	ldr	r3, [r5, #0]
 800ba06:	b103      	cbz	r3, 800ba0a <_close_r+0x1a>
 800ba08:	6023      	str	r3, [r4, #0]
 800ba0a:	bd38      	pop	{r3, r4, r5, pc}
 800ba0c:	20004f04 	.word	0x20004f04

0800ba10 <_fstat_r>:
 800ba10:	b538      	push	{r3, r4, r5, lr}
 800ba12:	4d07      	ldr	r5, [pc, #28]	; (800ba30 <_fstat_r+0x20>)
 800ba14:	2300      	movs	r3, #0
 800ba16:	4604      	mov	r4, r0
 800ba18:	4608      	mov	r0, r1
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	602b      	str	r3, [r5, #0]
 800ba1e:	f7f7 fd53 	bl	80034c8 <_fstat>
 800ba22:	1c43      	adds	r3, r0, #1
 800ba24:	d102      	bne.n	800ba2c <_fstat_r+0x1c>
 800ba26:	682b      	ldr	r3, [r5, #0]
 800ba28:	b103      	cbz	r3, 800ba2c <_fstat_r+0x1c>
 800ba2a:	6023      	str	r3, [r4, #0]
 800ba2c:	bd38      	pop	{r3, r4, r5, pc}
 800ba2e:	bf00      	nop
 800ba30:	20004f04 	.word	0x20004f04

0800ba34 <_isatty_r>:
 800ba34:	b538      	push	{r3, r4, r5, lr}
 800ba36:	4d06      	ldr	r5, [pc, #24]	; (800ba50 <_isatty_r+0x1c>)
 800ba38:	2300      	movs	r3, #0
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	4608      	mov	r0, r1
 800ba3e:	602b      	str	r3, [r5, #0]
 800ba40:	f7f7 fd52 	bl	80034e8 <_isatty>
 800ba44:	1c43      	adds	r3, r0, #1
 800ba46:	d102      	bne.n	800ba4e <_isatty_r+0x1a>
 800ba48:	682b      	ldr	r3, [r5, #0]
 800ba4a:	b103      	cbz	r3, 800ba4e <_isatty_r+0x1a>
 800ba4c:	6023      	str	r3, [r4, #0]
 800ba4e:	bd38      	pop	{r3, r4, r5, pc}
 800ba50:	20004f04 	.word	0x20004f04

0800ba54 <_lseek_r>:
 800ba54:	b538      	push	{r3, r4, r5, lr}
 800ba56:	4d07      	ldr	r5, [pc, #28]	; (800ba74 <_lseek_r+0x20>)
 800ba58:	4604      	mov	r4, r0
 800ba5a:	4608      	mov	r0, r1
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	2200      	movs	r2, #0
 800ba60:	602a      	str	r2, [r5, #0]
 800ba62:	461a      	mov	r2, r3
 800ba64:	f7f7 fd4b 	bl	80034fe <_lseek>
 800ba68:	1c43      	adds	r3, r0, #1
 800ba6a:	d102      	bne.n	800ba72 <_lseek_r+0x1e>
 800ba6c:	682b      	ldr	r3, [r5, #0]
 800ba6e:	b103      	cbz	r3, 800ba72 <_lseek_r+0x1e>
 800ba70:	6023      	str	r3, [r4, #0]
 800ba72:	bd38      	pop	{r3, r4, r5, pc}
 800ba74:	20004f04 	.word	0x20004f04

0800ba78 <_read_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4d07      	ldr	r5, [pc, #28]	; (800ba98 <_read_r+0x20>)
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	4608      	mov	r0, r1
 800ba80:	4611      	mov	r1, r2
 800ba82:	2200      	movs	r2, #0
 800ba84:	602a      	str	r2, [r5, #0]
 800ba86:	461a      	mov	r2, r3
 800ba88:	f7f7 fcd9 	bl	800343e <_read>
 800ba8c:	1c43      	adds	r3, r0, #1
 800ba8e:	d102      	bne.n	800ba96 <_read_r+0x1e>
 800ba90:	682b      	ldr	r3, [r5, #0]
 800ba92:	b103      	cbz	r3, 800ba96 <_read_r+0x1e>
 800ba94:	6023      	str	r3, [r4, #0]
 800ba96:	bd38      	pop	{r3, r4, r5, pc}
 800ba98:	20004f04 	.word	0x20004f04

0800ba9c <_write_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	4d07      	ldr	r5, [pc, #28]	; (800babc <_write_r+0x20>)
 800baa0:	4604      	mov	r4, r0
 800baa2:	4608      	mov	r0, r1
 800baa4:	4611      	mov	r1, r2
 800baa6:	2200      	movs	r2, #0
 800baa8:	602a      	str	r2, [r5, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	f7f7 fce4 	bl	8003478 <_write>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d102      	bne.n	800baba <_write_r+0x1e>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	b103      	cbz	r3, 800baba <_write_r+0x1e>
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	20004f04 	.word	0x20004f04

0800bac0 <_calloc_r>:
 800bac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bac2:	fba1 2402 	umull	r2, r4, r1, r2
 800bac6:	b94c      	cbnz	r4, 800badc <_calloc_r+0x1c>
 800bac8:	4611      	mov	r1, r2
 800baca:	9201      	str	r2, [sp, #4]
 800bacc:	f7fd fcd4 	bl	8009478 <_malloc_r>
 800bad0:	9a01      	ldr	r2, [sp, #4]
 800bad2:	4605      	mov	r5, r0
 800bad4:	b930      	cbnz	r0, 800bae4 <_calloc_r+0x24>
 800bad6:	4628      	mov	r0, r5
 800bad8:	b003      	add	sp, #12
 800bada:	bd30      	pop	{r4, r5, pc}
 800badc:	220c      	movs	r2, #12
 800bade:	6002      	str	r2, [r0, #0]
 800bae0:	2500      	movs	r5, #0
 800bae2:	e7f8      	b.n	800bad6 <_calloc_r+0x16>
 800bae4:	4621      	mov	r1, r4
 800bae6:	f7fd ffd7 	bl	8009a98 <memset>
 800baea:	e7f4      	b.n	800bad6 <_calloc_r+0x16>

0800baec <__ascii_mbtowc>:
 800baec:	b082      	sub	sp, #8
 800baee:	b901      	cbnz	r1, 800baf2 <__ascii_mbtowc+0x6>
 800baf0:	a901      	add	r1, sp, #4
 800baf2:	b142      	cbz	r2, 800bb06 <__ascii_mbtowc+0x1a>
 800baf4:	b14b      	cbz	r3, 800bb0a <__ascii_mbtowc+0x1e>
 800baf6:	7813      	ldrb	r3, [r2, #0]
 800baf8:	600b      	str	r3, [r1, #0]
 800bafa:	7812      	ldrb	r2, [r2, #0]
 800bafc:	1e10      	subs	r0, r2, #0
 800bafe:	bf18      	it	ne
 800bb00:	2001      	movne	r0, #1
 800bb02:	b002      	add	sp, #8
 800bb04:	4770      	bx	lr
 800bb06:	4610      	mov	r0, r2
 800bb08:	e7fb      	b.n	800bb02 <__ascii_mbtowc+0x16>
 800bb0a:	f06f 0001 	mvn.w	r0, #1
 800bb0e:	e7f8      	b.n	800bb02 <__ascii_mbtowc+0x16>

0800bb10 <_malloc_usable_size_r>:
 800bb10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb14:	1f18      	subs	r0, r3, #4
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	bfbc      	itt	lt
 800bb1a:	580b      	ldrlt	r3, [r1, r0]
 800bb1c:	18c0      	addlt	r0, r0, r3
 800bb1e:	4770      	bx	lr

0800bb20 <__ascii_wctomb>:
 800bb20:	b149      	cbz	r1, 800bb36 <__ascii_wctomb+0x16>
 800bb22:	2aff      	cmp	r2, #255	; 0xff
 800bb24:	bf85      	ittet	hi
 800bb26:	238a      	movhi	r3, #138	; 0x8a
 800bb28:	6003      	strhi	r3, [r0, #0]
 800bb2a:	700a      	strbls	r2, [r1, #0]
 800bb2c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bb30:	bf98      	it	ls
 800bb32:	2001      	movls	r0, #1
 800bb34:	4770      	bx	lr
 800bb36:	4608      	mov	r0, r1
 800bb38:	4770      	bx	lr
	...

0800bb3c <_init>:
 800bb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3e:	bf00      	nop
 800bb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb42:	bc08      	pop	{r3}
 800bb44:	469e      	mov	lr, r3
 800bb46:	4770      	bx	lr

0800bb48 <_fini>:
 800bb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4a:	bf00      	nop
 800bb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb4e:	bc08      	pop	{r3}
 800bb50:	469e      	mov	lr, r3
 800bb52:	4770      	bx	lr
