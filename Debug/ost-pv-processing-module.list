
ost-pv-processing-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b204  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  0800b398  0800b398  0001b398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbc0  0800bbc0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbc0  0800bbc0  0001bbc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbc8  0800bbc8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bbc8  0800bbc8  0001bbc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800bbd0  0800bbd0  0001bbd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800bbd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c08  200001dc  0800bdb4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004de4  0800bdb4  00024de4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021397  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f7f  00000000  00000000  000415e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  00045568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012a6  00000000  00000000  00046d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004bfc  00000000  00000000  0004803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018009  00000000  00000000  0004cc3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6443  00000000  00000000  00064c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007c3c  00000000  00000000  0015b088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00162cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b37c 	.word	0x0800b37c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800b37c 	.word	0x0800b37c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <_ZL13calculate_crcPKhj>:
#include <SHT30.hpp>

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8000eee:	23ff      	movs	r3, #255	; 0xff
 8000ef0:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	e020      	b.n	8000f3a <_ZL13calculate_crcPKhj+0x56>
		crc ^= data[i];
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4413      	add	r3, r2
 8000efe:	781a      	ldrb	r2, [r3, #0]
 8000f00:	7dfb      	ldrb	r3, [r7, #23]
 8000f02:	4053      	eors	r3, r2
 8000f04:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	e010      	b.n	8000f2e <_ZL13calculate_crcPKhj+0x4a>
			if ((crc & 0x80u) != 0) {
 8000f0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	da06      	bge.n	8000f22 <_ZL13calculate_crcPKhj+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8000f14:	7dfb      	ldrb	r3, [r7, #23]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000f1e:	75fb      	strb	r3, [r7, #23]
 8000f20:	e002      	b.n	8000f28 <_ZL13calculate_crcPKhj+0x44>
			} else {
				crc <<= 1u;
 8000f22:	7dfb      	ldrb	r3, [r7, #23]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2b07      	cmp	r3, #7
 8000f32:	d9eb      	bls.n	8000f0c <_ZL13calculate_crcPKhj+0x28>
	for (size_t i = 0; i < length; i++) {
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	3301      	adds	r3, #1
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d3da      	bcc.n	8000ef8 <_ZL13calculate_crcPKhj+0x14>
			}
		}
	}
	return crc;
 8000f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	371c      	adds	r7, #28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_ZL15uint8_to_uint16hh>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	460a      	mov	r2, r1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b29b      	uxth	r3, r3
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_Z14SHT30_send_cmdP7SHT30_tt>:
	}

	return 1;
}

uint8_t SHT30_send_cmd(SHT30_t* sht, uint16_t cmd) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(uint8_t)((cmd & 0xff00u) >> 8u), uint8_t(cmd & 0xffu)};
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	733b      	strb	r3, [r7, #12]
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(sht->hi2c, SHT30_I2C_ADDR << 1u, command_buffer, sizeof(command_buffer),
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	f107 020c 	add.w	r2, r7, #12
 8000fa0:	231e      	movs	r3, #30
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	2188      	movs	r1, #136	; 0x88
 8000fa8:	f002 fe1e 	bl	8003be8 <HAL_I2C_Master_Transmit>
 8000fac:	4603      	mov	r3, r0
								SHT30_I2C_TIMEOUT) != HAL_OK) {
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bf14      	ite	ne
 8000fb2:	2301      	movne	r3, #1
 8000fb4:	2300      	moveq	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
	if (HAL_I2C_Master_Transmit(sht->hi2c, SHT30_I2C_ADDR << 1u, command_buffer, sizeof(command_buffer),
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <_Z14SHT30_send_cmdP7SHT30_tt+0x44>
		return 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e000      	b.n	8000fc2 <_Z14SHT30_send_cmdP7SHT30_tt+0x46>
	}

	return 1;
 8000fc0:	2301      	movs	r3, #1

}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_>:

uint8_t SHT30_read_temp_humidity(SHT30_t* sht, float* temperature, float* humidity) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
	SHT30_send_cmd(sht, SHT30_COMMAND_MEASURE_HIGHREP_STRETCH);
 8000fd8:	f642 4106 	movw	r1, #11270	; 0x2c06
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f7ff ffcd 	bl	8000f7c <_Z14SHT30_send_cmdP7SHT30_tt>

	HAL_Delay(1);
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f002 f9fc 	bl	80033e0 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(sht->hi2c, SHT30_I2C_ADDR << 1u, buffer, sizeof(buffer), SHT30_I2C_TIMEOUT) != HAL_OK) {
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	f107 0214 	add.w	r2, r7, #20
 8000ff0:	231e      	movs	r3, #30
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	2188      	movs	r1, #136	; 0x88
 8000ff8:	f002 fef4 	bl	8003de4 <HAL_I2C_Master_Receive>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bf14      	ite	ne
 8001002:	2301      	movne	r3, #1
 8001004:	2300      	moveq	r3, #0
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0x44>
		return 0;
 800100c:	2300      	movs	r3, #0
 800100e:	e04f      	b.n	80010b0 <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0xe4>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2102      	movs	r1, #2
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff64 	bl	8000ee4 <_ZL13calculate_crcPKhj>
 800101c:	4603      	mov	r3, r0
 800101e:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	3303      	adds	r3, #3
 8001026:	2102      	movs	r1, #2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5b 	bl	8000ee4 <_ZL13calculate_crcPKhj>
 800102e:	4603      	mov	r3, r0
 8001030:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8001032:	7dbb      	ldrb	r3, [r7, #22]
 8001034:	7ffa      	ldrb	r2, [r7, #31]
 8001036:	429a      	cmp	r2, r3
 8001038:	d103      	bne.n	8001042 <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0x76>
 800103a:	7e7b      	ldrb	r3, [r7, #25]
 800103c:	7fba      	ldrb	r2, [r7, #30]
 800103e:	429a      	cmp	r2, r3
 8001040:	d001      	beq.n	8001046 <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0x7a>
		return 0;
 8001042:	2300      	movs	r3, #0
 8001044:	e034      	b.n	80010b0 <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0xe4>
	}

	uint16_t temperature_raw = uint8_to_uint16(buffer[0], buffer[1]);
 8001046:	7d3b      	ldrb	r3, [r7, #20]
 8001048:	7d7a      	ldrb	r2, [r7, #21]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff7f 	bl	8000f50 <_ZL15uint8_to_uint16hh>
 8001052:	4603      	mov	r3, r0
 8001054:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	7e3a      	ldrb	r2, [r7, #24]
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff77 	bl	8000f50 <_ZL15uint8_to_uint16hh>
 8001062:	4603      	mov	r3, r0
 8001064:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8001066:	8bbb      	ldrh	r3, [r7, #28]
 8001068:	ee07 3a90 	vmov	s15, r3
 800106c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001070:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80010b8 <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0xec>
 8001074:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001078:	eddf 6a10 	vldr	s13, [pc, #64]	; 80010bc <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0xf0>
 800107c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001080:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80010c0 <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0xf4>
 8001084:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 800108e:	8b7b      	ldrh	r3, [r7, #26]
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001098:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80010c4 <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0xf8>
 800109c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010a0:	eddf 6a06 	vldr	s13, [pc, #24]	; 80010bc <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_+0xf0>
 80010a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edc3 7a00 	vstr	s15, [r3]

	return 1;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	432f0000 	.word	0x432f0000
 80010bc:	477fff00 	.word	0x477fff00
 80010c0:	42340000 	.word	0x42340000
 80010c4:	42c80000 	.word	0x42c80000

080010c8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_ZNKSt4hashIhEclEh>:

  /// Explicit specialization for signed char.
  _Cxx_hashtable_define_trivial_hash(signed char)

  /// Explicit specialization for unsigned char.
  _Cxx_hashtable_define_trivial_hash(unsigned char)
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 8001116:	b480      	push	{r7}
 8001118:	b085      	sub	sp, #20
 800111a:	af00      	add	r7, sp, #0
 800111c:	60f8      	str	r0, [r7, #12]
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	fbb3 f2f2 	udiv	r2, r3, r2
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	fb01 f202 	mul.w	r2, r1, r2
 8001130:	1a9b      	subs	r3, r3, r2
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	ed87 0a00 	vstr	s0, [r7]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEEC1ERKS9_>:
		      const allocator_type& __a = allocator_type())
	: _M_h(__first, __last, __n, __hf, __eql, __a)
	{ }

      /// Copy constructor.
      unordered_map(const unordered_map&) = default;
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f9d4 	bl	800153a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSG_>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEED1Ev>:
    class unordered_map
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fa0e 	bl	80015c8 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <_ZN8SelectorC1ESt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS1_EEE>:
	uint16_t pin;
};

class Selector {
public:
	Selector(const std::unordered_map<uint8_t, GPIOPortPin> panel_gpio) : panel_gpio(panel_gpio) {}
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6839      	ldr	r1, [r7, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ffd9 	bl	800117c <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEEC1ERKS9_>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d8:	f002 f890 	bl	80032fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011dc:	f000 f832 	bl	8001244 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e0:	f000 f8fa 	bl	80013d8 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80011e4:	f000 f896 	bl	8001314 <_ZL12MX_I2C1_Initv>
  MX_USART1_UART_Init();
 80011e8:	f000 f8c8 	bl	800137c <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  sprintf(msg, "Init\n");
 80011ec:	490d      	ldr	r1, [pc, #52]	; (8001224 <main+0x50>)
 80011ee:	480e      	ldr	r0, [pc, #56]	; (8001228 <main+0x54>)
 80011f0:	f007 ff7e 	bl	80090f0 <siprintf>
  sprintf(msg, "SHT30 init OK\n");
  HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 100);
#endif

#ifdef SELECTOR_D
  selector.deselect_all();
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <main+0x58>)
 80011f6:	f001 fd76 	bl	8002ce6 <_ZN8Selector12deselect_allEv>
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011fa:	f004 fb95 	bl	8005928 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011fe:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <main+0x5c>)
 8001200:	2100      	movs	r1, #0
 8001202:	480c      	ldr	r0, [pc, #48]	; (8001234 <main+0x60>)
 8001204:	f004 fbda 	bl	80059bc <osThreadNew>
 8001208:	4603      	mov	r3, r0
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <main+0x64>)
 800120c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
#ifdef SELECTOR_D
  selectorTaskHandle = osThreadNew(SelectorCycleTask, NULL, &defaultTask_attributes);
 800120e:	4a08      	ldr	r2, [pc, #32]	; (8001230 <main+0x5c>)
 8001210:	2100      	movs	r1, #0
 8001212:	480a      	ldr	r0, [pc, #40]	; (800123c <main+0x68>)
 8001214:	f004 fbd2 	bl	80059bc <osThreadNew>
 8001218:	4603      	mov	r3, r0
 800121a:	4a09      	ldr	r2, [pc, #36]	; (8001240 <main+0x6c>)
 800121c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800121e:	f004 fba7 	bl	8005970 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001222:	e7fe      	b.n	8001222 <main+0x4e>
 8001224:	0800b3a4 	.word	0x0800b3a4
 8001228:	200002cc 	.word	0x200002cc
 800122c:	200002b0 	.word	0x200002b0
 8001230:	0800b400 	.word	0x0800b400
 8001234:	08001429 	.word	0x08001429
 8001238:	20000290 	.word	0x20000290
 800123c:	08001495 	.word	0x08001495
 8001240:	20000338 	.word	0x20000338

08001244 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	; 0x50
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	2230      	movs	r2, #48	; 0x30
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f008 f840 	bl	80092d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <_Z18SystemClock_Configv+0xc8>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	4a26      	ldr	r2, [pc, #152]	; (800130c <_Z18SystemClock_Configv+0xc8>)
 8001272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	; 0x40
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <_Z18SystemClock_Configv+0xc8>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <_Z18SystemClock_Configv+0xcc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a20      	ldr	r2, [pc, #128]	; (8001310 <_Z18SystemClock_Configv+0xcc>)
 800128e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <_Z18SystemClock_Configv+0xcc>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012a0:	2302      	movs	r3, #2
 80012a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a4:	2301      	movs	r3, #1
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a8:	2310      	movs	r3, #16
 80012aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 fae9 	bl	800488c <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bf14      	ite	ne
 80012c0:	2301      	movne	r3, #1
 80012c2:	2300      	moveq	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 80012ca:	f000 f919 	bl	8001500 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ce:	230f      	movs	r3, #15
 80012d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 fd47 	bl	8004d7c <HAL_RCC_ClockConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bf14      	ite	ne
 80012f4:	2301      	movne	r3, #1
 80012f6:	2300      	moveq	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 80012fe:	f000 f8ff 	bl	8001500 <Error_Handler>
  }
}
 8001302:	bf00      	nop
 8001304:	3750      	adds	r7, #80	; 0x50
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40007000 	.word	0x40007000

08001314 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <_ZL12MX_I2C1_Initv+0x5c>)
 800131a:	4a16      	ldr	r2, [pc, #88]	; (8001374 <_ZL12MX_I2C1_Initv+0x60>)
 800131c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <_ZL12MX_I2C1_Initv+0x5c>)
 8001320:	4a15      	ldr	r2, [pc, #84]	; (8001378 <_ZL12MX_I2C1_Initv+0x64>)
 8001322:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <_ZL12MX_I2C1_Initv+0x5c>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <_ZL12MX_I2C1_Initv+0x5c>)
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <_ZL12MX_I2C1_Initv+0x5c>)
 8001332:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001336:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001338:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <_ZL12MX_I2C1_Initv+0x5c>)
 800133a:	2200      	movs	r2, #0
 800133c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <_ZL12MX_I2C1_Initv+0x5c>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <_ZL12MX_I2C1_Initv+0x5c>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <_ZL12MX_I2C1_Initv+0x5c>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001350:	4807      	ldr	r0, [pc, #28]	; (8001370 <_ZL12MX_I2C1_Initv+0x5c>)
 8001352:	f002 fb05 	bl	8003960 <HAL_I2C_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	bf14      	ite	ne
 800135c:	2301      	movne	r3, #1
 800135e:	2300      	moveq	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001366:	f000 f8cb 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200001f8 	.word	0x200001f8
 8001374:	40005400 	.word	0x40005400
 8001378:	000186a0 	.word	0x000186a0

0800137c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001382:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001388:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800138c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013b2:	4807      	ldr	r0, [pc, #28]	; (80013d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013b4:	f003 fec2 	bl	800513c <HAL_UART_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	bf14      	ite	ne
 80013be:	2301      	movne	r3, #1
 80013c0:	2300      	moveq	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80013c8:	f000 f89a 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000024c 	.word	0x2000024c
 80013d4:	40011000 	.word	0x40011000

080013d8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <_ZL12MX_GPIO_Initv+0x4c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <_ZL12MX_GPIO_Initv+0x4c>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <_ZL12MX_GPIO_Initv+0x4c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <_ZL12MX_GPIO_Initv+0x4c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a08      	ldr	r2, [pc, #32]	; (8001424 <_ZL12MX_GPIO_Initv+0x4c>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <_ZL12MX_GPIO_Initv+0x4c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800

08001428 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af02      	add	r7, sp, #8
 800142e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	SHT30_read_temp_humidity(&sht, &temp, &rh);
 8001430:	4a12      	ldr	r2, [pc, #72]	; (800147c <_Z16StartDefaultTaskPv+0x54>)
 8001432:	4913      	ldr	r1, [pc, #76]	; (8001480 <_Z16StartDefaultTaskPv+0x58>)
 8001434:	4813      	ldr	r0, [pc, #76]	; (8001484 <_Z16StartDefaultTaskPv+0x5c>)
 8001436:	f7ff fdc9 	bl	8000fcc <_Z24SHT30_read_temp_humidityP7SHT30_tPfS1_>
	sprintf(msg, "temp: %.2f, rh: %.2f\n", temp, rh);
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <_Z16StartDefaultTaskPv+0x58>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f882 	bl	8000548 <__aeabi_f2d>
 8001444:	4604      	mov	r4, r0
 8001446:	460d      	mov	r5, r1
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <_Z16StartDefaultTaskPv+0x54>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f87b 	bl	8000548 <__aeabi_f2d>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	e9cd 2300 	strd	r2, r3, [sp]
 800145a:	4622      	mov	r2, r4
 800145c:	462b      	mov	r3, r5
 800145e:	490a      	ldr	r1, [pc, #40]	; (8001488 <_Z16StartDefaultTaskPv+0x60>)
 8001460:	480a      	ldr	r0, [pc, #40]	; (800148c <_Z16StartDefaultTaskPv+0x64>)
 8001462:	f007 fe45 	bl	80090f0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 100);
 8001466:	2364      	movs	r3, #100	; 0x64
 8001468:	2264      	movs	r2, #100	; 0x64
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <_Z16StartDefaultTaskPv+0x64>)
 800146c:	4808      	ldr	r0, [pc, #32]	; (8001490 <_Z16StartDefaultTaskPv+0x68>)
 800146e:	f003 feb2 	bl	80051d6 <HAL_UART_Transmit>
    osDelay(4000);
 8001472:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001476:	f004 fb33 	bl	8005ae0 <osDelay>
	SHT30_read_temp_humidity(&sht, &temp, &rh);
 800147a:	e7d9      	b.n	8001430 <_Z16StartDefaultTaskPv+0x8>
 800147c:	20000334 	.word	0x20000334
 8001480:	20000330 	.word	0x20000330
 8001484:	20000000 	.word	0x20000000
 8001488:	0800b3ac 	.word	0x0800b3ac
 800148c:	200002cc 	.word	0x200002cc
 8001490:	2000024c 	.word	0x2000024c

08001494 <_Z17SelectorCycleTaskPv>:
  }
  /* USER CODE END 5 */
}

void SelectorCycleTask(void* argument) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	for(;;) {
		for (const auto& panel : panels) {
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <_Z17SelectorCycleTaskPv+0x64>)
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	6978      	ldr	r0, [r7, #20]
 80014a2:	f000 f8d4 	bl	800164e <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE5beginEv>
 80014a6:	4603      	mov	r3, r0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f000 f8dc 	bl	8001668 <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE3endEv>
 80014b0:	4603      	mov	r3, r0
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	e014      	b.n	80014e0 <_Z17SelectorCycleTaskPv+0x4c>
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f902 	bl	80016c4 <_ZNKSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEdeEv>
 80014c0:	6138      	str	r0, [r7, #16]
			selector.select(panel.first);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	480c      	ldr	r0, [pc, #48]	; (80014fc <_Z17SelectorCycleTaskPv+0x68>)
 80014ca:	f001 fbcd 	bl	8002c68 <_ZN8Selector6selectEh>
			osDelay(1000);
 80014ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d2:	f004 fb05 	bl	8005ae0 <osDelay>
		for (const auto& panel : panels) {
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f8e5 	bl	80016aa <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEppEv>
 80014e0:	f107 0208 	add.w	r2, r7, #8
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4611      	mov	r1, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f8c9 	bl	8001682 <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EEES7_>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1df      	bne.n	80014b6 <_Z17SelectorCycleTaskPv+0x22>
		}
	}
 80014f6:	e7d1      	b.n	800149c <_Z17SelectorCycleTaskPv+0x8>
 80014f8:	20000294 	.word	0x20000294
 80014fc:	200002b0 	.word	0x200002b0

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	e7fe      	b.n	8001508 <Error_Handler+0x8>

0800150a <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EED1Ev>:
	   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    struct _Hashtable_ebo_helper;

  /// Specialization using EBO.
  template<int _Nm, typename _Tp>
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f90a 	bl	800172c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEED1Ev>:
  /**
   * This type deals with all allocation and keeps an allocator instance
   * through inheritance to benefit from EBO when possible.
   */
  template<typename _NodeAlloc>
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffed 	bl	800150a <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EED1Ev>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSG_>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
    _Hashtable(const _Hashtable& __ht)
    : __hashtable_base(__ht),
      __map_base(__ht),
      __rehash_base(__ht),
      __hashtable_alloc(
	__node_alloc_traits::_S_select_on_copy(__ht._M_node_allocator())),
 8001544:	6838      	ldr	r0, [r7, #0]
 8001546:	f000 f8e5 	bl	8001714 <_ZNKSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 800154a:	4602      	mov	r2, r0
      __enable_default_ctor(__ht),
      _M_buckets(nullptr),
      _M_bucket_count(__ht._M_bucket_count),
      _M_element_count(__ht._M_element_count),
      _M_rehash_policy(__ht._M_rehash_policy)
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f000 f8d0 	bl	80016f8 <_ZN9__gnu_cxx14__alloc_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEES7_E17_S_select_on_copyERKS8_>
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	4619      	mov	r1, r3
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f8f0 	bl	8001744 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1IS7_EEOT_>
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	4618      	mov	r0, r3
 800156a:	f000 f8df 	bl	800172c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>
      _M_buckets(nullptr),
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
      _M_bucket_count(__ht._M_bucket_count),
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	605a      	str	r2, [r3, #4]
      _M_rehash_policy(__ht._M_rehash_policy)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3308      	adds	r3, #8
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fdba 	bl	80010fa <_ZNSt8__detail15_Hash_node_baseC1Ev>
      _M_element_count(__ht._M_element_count),
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60da      	str	r2, [r3, #12]
      _M_rehash_policy(__ht._M_rehash_policy)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	3310      	adds	r3, #16
 8001594:	3210      	adds	r2, #16
 8001596:	e892 0003 	ldmia.w	r2, {r0, r1}
 800159a:	e883 0003 	stmia.w	r3, {r0, r1}
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
    {
      __alloc_node_gen_t __alloc_node_gen(*this);
 80015a4:	f107 0308 	add.w	r3, r7, #8
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f8dc 	bl	8001768 <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1ERNS_16_Hashtable_allocIS7_EE>
      _M_assign(__ht, __alloc_node_gen);
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	461a      	mov	r2, r3
 80015b6:	6839      	ldr	r1, [r7, #0]
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f8e4 	bl	8001786 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_>
    }
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    ~_Hashtable() noexcept
    {
      clear();
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 f956 	bl	8001882 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f973 	bl	80018c2 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ffa0 	bl	8001522 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEED1Ev>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_ZNSaISt4pairIKh11GPIOPortPinEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f974 	bl	80018e2 <_ZN9__gnu_cxx13new_allocatorISt4pairIKh11GPIOPortPinEEC1Ev>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <_ZNSaISt4pairIKh11GPIOPortPinEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f973 	bl	80018f8 <_ZN9__gnu_cxx13new_allocatorISt4pairIKh11GPIOPortPinEED1Ev>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEEC1ESt16initializer_listIS7_EjRKS2_RKS4_RKS8_>:
       *  @param  __a  An allocator object.
       *
       *  Create an %unordered_map consisting of copies of the elements in the
       *  list. This is linear in N (where N is @a __l.size()).
       */
      unordered_map(initializer_list<value_type> __l,
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af04      	add	r7, sp, #16
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	1d38      	adds	r0, r7, #4
 8001626:	e880 0006 	stmia.w	r0, {r1, r2}
 800162a:	603b      	str	r3, [r7, #0]
		    size_type __n = 0,
		    const hasher& __hf = hasher(),
		    const key_equal& __eql = key_equal(),
		    const allocator_type& __a = allocator_type())
      : _M_h(__l, __n, __hf, __eql, __a)
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	9302      	str	r3, [sp, #8]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	1d3a      	adds	r2, r7, #4
 800163e:	ca06      	ldmia	r2, {r1, r2}
 8001640:	f000 f965 	bl	800190e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listIS3_EjRKSA_RKS8_RKS4_>
      { }
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %unordered_map.
       */
      iterator
      begin() noexcept
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
      { return _M_h.begin(); }
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f97c 	bl	8001956 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>
 800165e:	4603      	mov	r3, r0
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE3endEv>:
      /**
       *  Returns a read/write iterator that points one past the last element in
       *  the %unordered_map.
       */
      iterator
      end() noexcept
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
      { return _M_h.end(); }
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f982 	bl	800197c <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8001678:	4603      	mov	r3, r0
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EEES7_>:
      operator!=(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
      { return __x._M_cur != __y._M_cur; }
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	bf14      	ite	ne
 8001698:	2301      	movne	r3, #1
 800169a:	2300      	moveq	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEppEv>:
      operator++() noexcept
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
	this->_M_incr();
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 f970 	bl	800199a <_ZNSt8__detail19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EE7_M_incrEv>
	return *this;
 80016ba:	687b      	ldr	r3, [r7, #4]
      }
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_ZNKSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEdeEv>:
      operator*() const noexcept
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_v(); }
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3304      	adds	r3, #4
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f971 	bl	80019ba <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>
 80016d8:	4603      	mov	r3, r0
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <_ZN9__gnu_cxx14__alloc_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEES7_E17_S_select_on_copyERKS8_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6839      	ldr	r1, [r7, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f963 	bl	80019d2 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE37select_on_container_copy_constructionERKS7_>
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <_ZNKSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>:
      __node_alloc_type&
      _M_node_allocator()
      { return __ebo_node_alloc::_M_get(); }

      const __node_alloc_type&
      _M_node_allocator() const
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_cget(); }
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 f973 	bl	8001a08 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EE7_M_cgetEv>
 8001722:	4603      	mov	r3, r0
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>:
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f972 	bl	8001a1e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1IS7_EEOT_>:
	_Hashtable_alloc(_Alloc&& __a)
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
	: __ebo_node_alloc(std::forward<_Alloc>(__a))
 800174e:	6838      	ldr	r0, [r7, #0]
 8001750:	f000 f970 	bl	8001a34 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001754:	4603      	mov	r3, r0
 8001756:	4619      	mov	r1, r3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 f976 	bl	8001a4a <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EEC1IS7_EEOT_>
	{ }
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1ERNS_16_Hashtable_allocIS7_EE>:
      _AllocNode(__hashtable_alloc& __h)
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
      : _M_h(__h) { }
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001786:	b580      	push	{r7, lr}
 8001788:	b08a      	sub	sp, #40	; 0x28
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
	__buckets_ptr __buckets = nullptr;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
	if (!_M_buckets)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0x2c>
	  _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4619      	mov	r1, r3
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 f962 	bl	8001a6e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 80017aa:	61f8      	str	r0, [r7, #28]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	601a      	str	r2, [r3, #0]
	    if (!__ht._M_before_begin._M_nxt)
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d05f      	beq.n	800187a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0xf4>
	    __node_ptr __ht_n = __ht._M_begin();
 80017ba:	68b8      	ldr	r0, [r7, #8]
 80017bc:	f000 f974 	bl	8001aa8 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 80017c0:	6278      	str	r0, [r7, #36]	; 0x24
	      = __node_gen(__fwd_value_for<_Ht>(__ht_n->_M_v()));
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	3304      	adds	r3, #4
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f8f7 	bl	80019ba <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f976 	bl	8001ac0 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15__fwd_value_forIRKSG_EENSt11conditionalIXsrSt19is_lvalue_referenceIT_E5valueERKS3_OS3_E4typeERS3_>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4619      	mov	r1, r3
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f97d 	bl	8001ad8 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEclIRKS5_EEPS6_OT_>
 80017de:	61b8      	str	r0, [r7, #24]
	    this->_M_copy_code(*__this_n, *__ht_n);
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	1d19      	adds	r1, r3, #4
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	3304      	adds	r3, #4
 80017e8:	461a      	mov	r2, r3
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 f988 	bl	8001b00 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_copy_codeERNS_21_Hash_node_code_cacheILb0EEERKSC_>
	    _M_update_bbegin(__this_n);
 80017f0:	69b9      	ldr	r1, [r7, #24]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 f990 	bl	8001b18 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEPNS5_10_Hash_nodeIS3_Lb0EEE>
	    __node_ptr __prev_n = __this_n;
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	623b      	str	r3, [r7, #32]
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
 80017fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017fe:	f000 f99a 	bl	8001b36 <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8001802:	6278      	str	r0, [r7, #36]	; 0x24
 8001804:	e035      	b.n	8001872 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0xec>
		__this_n = __node_gen(__fwd_value_for<_Ht>(__ht_n->_M_v()));
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	3304      	adds	r3, #4
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f8d5 	bl	80019ba <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>
 8001810:	4603      	mov	r3, r0
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f954 	bl	8001ac0 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15__fwd_value_forIRKSG_EENSt11conditionalIXsrSt19is_lvalue_referenceIT_E5valueERKS3_OS3_E4typeERS3_>
 8001818:	4603      	mov	r3, r0
 800181a:	4619      	mov	r1, r3
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f95b 	bl	8001ad8 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEclIRKS5_EEPS6_OT_>
 8001822:	61b8      	str	r0, [r7, #24]
		__prev_n->_M_nxt = __this_n;
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	601a      	str	r2, [r3, #0]
		this->_M_copy_code(*__this_n, *__ht_n);
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	1d19      	adds	r1, r3, #4
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	3304      	adds	r3, #4
 8001832:	461a      	mov	r2, r3
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f000 f963 	bl	8001b00 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_copy_codeERNS_21_Hash_node_code_cacheILb0EEERKSC_>
		size_type __bkt = _M_bucket_index(*__this_n);
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	3304      	adds	r3, #4
 800183e:	4619      	mov	r1, r3
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f000 f984 	bl	8001b4e <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>
 8001846:	6178      	str	r0, [r7, #20]
		if (!_M_buckets[__bkt])
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d106      	bne.n	8001866 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0xe0>
		  _M_buckets[__bkt] = __prev_n;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	6a3a      	ldr	r2, [r7, #32]
 8001864:	601a      	str	r2, [r3, #0]
		__prev_n = __this_n;
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	623b      	str	r3, [r7, #32]
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
 800186a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800186c:	f000 f963 	bl	8001b36 <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8001870:	6278      	str	r0, [r7, #36]	; 0x24
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1c6      	bne.n	8001806 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0x80>
 8001878:	e000      	b.n	800187c <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSG_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEEvOT_RKT0_+0xf6>
	      return;
 800187a:	bf00      	nop
      }
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f90c 	bl	8001aa8 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8001890:	4603      	mov	r3, r0
 8001892:	4619      	mov	r1, r3
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f96b 	bl	8001b70 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_deallocate_nodesEPS6_>
      __builtin_memset(_M_buckets, 0,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4610      	mov	r0, r2
 80018a6:	461a      	mov	r2, r3
 80018a8:	2100      	movs	r1, #0
 80018aa:	f007 fd15 	bl	80092d8 <memset>
      _M_element_count = 0;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
    }
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6819      	ldr	r1, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	461a      	mov	r2, r3
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f963 	bl	8001ba0 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj>
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_ZN9__gnu_cxx13new_allocatorISt4pairIKh11GPIOPortPinEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_ZN9__gnu_cxx13new_allocatorISt4pairIKh11GPIOPortPinEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listIS3_EjRKSA_RKS8_RKS4_>:
      _Hashtable(initializer_list<value_type> __l,
 800190e:	b5b0      	push	{r4, r5, r7, lr}
 8001910:	b088      	sub	sp, #32
 8001912:	af04      	add	r7, sp, #16
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	1d38      	adds	r0, r7, #4
 8001918:	e880 0006 	stmia.w	r0, {r1, r2}
 800191c:	603b      	str	r3, [r7, #0]
		   __hf, __eql, __a, __unique_keys{})
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f954 	bl	8001bce <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE5beginEv>
 8001926:	4604      	mov	r4, r0
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f95b 	bl	8001be6 <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE3endEv>
 8001930:	4602      	mov	r2, r0
 8001932:	f88d 500c 	strb.w	r5, [sp, #12]
 8001936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001938:	9302      	str	r3, [sp, #8]
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	4621      	mov	r1, r4
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f962 	bl	8001c10 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS3_EET_SK_jRKSA_RKS8_RKS4_St17integral_constantIbLb1EE>
      { }
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bdb0      	pop	{r4, r5, r7, pc}

08001956 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>:
      begin() noexcept
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
      { return iterator(_M_begin()); }
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f8a2 	bl	8001aa8 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8001964:	4602      	mov	r2, r0
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f000 f972 	bl	8001c56 <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>:
      end() noexcept
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
      { return iterator(nullptr); }
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f963 	bl	8001c56 <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_ZNSt8__detail19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EE7_M_incrEv>:
      _M_incr() noexcept
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
      { _M_cur = _M_cur->_M_next(); }
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f8c5 	bl	8001b36 <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>:
      _M_v() noexcept
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f956 	bl	8001c74 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE37select_on_container_copy_constructionERKS7_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static _GLIBCXX20_CONSTEXPR allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80019dc:	6839      	ldr	r1, [r7, #0]
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f804 	bl	80019ec <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1ERKS6_>
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80019f6:	6839      	ldr	r1, [r7, #0]
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f948 	bl	8001c8e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1ERKS8_>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>:
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EEC1IS7_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 8001a54:	6838      	ldr	r0, [r7, #0]
 8001a56:	f7ff ffed 	bl	8001a34 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffc4 	bl	80019ec <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1ERKS6_>
	{ }
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	bf0c      	ite	eq
 8001a7e:	2301      	moveq	r3, #1
 8001a80:	2300      	movne	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3318      	adds	r3, #24
 8001a92:	e005      	b.n	8001aa0 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 8001a94:	6839      	ldr	r1, [r7, #0]
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f905 	bl	8001ca6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_allocate_bucketsEj>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	bf00      	nop
      }
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15__fwd_value_forIRKSG_EENSt11conditionalIXsrSt19is_lvalue_referenceIT_E5valueERKS3_OS3_E4typeERS3_>:
	__fwd_value_for(value_type& __val) noexcept
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	{ return std::move(__val); }
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f919 	bl	8001d00 <_ZSt4moveIRSt4pairIKh11GPIOPortPinEEONSt16remove_referenceIT_E4typeEOS6_>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEclIRKS5_EEPS6_OT_>:
	operator()(_Arg&& __arg) const
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
	{ return _M_h._M_allocate_node(std::forward<_Arg>(__arg)); }
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681c      	ldr	r4, [r3, #0]
 8001ae6:	6838      	ldr	r0, [r7, #0]
 8001ae8:	f000 f915 	bl	8001d16 <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4619      	mov	r1, r3
 8001af0:	4620      	mov	r0, r4
 8001af2:	f000 f928 	bl	8001d46 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE16_M_allocate_nodeIJRKS5_EEEPS6_DpOT_>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd90      	pop	{r4, r7, pc}

08001b00 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_copy_codeERNS_21_Hash_node_code_cacheILb0EEERKSC_>:
      _M_copy_code(_Hash_node_code_cache<false>&,
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
      { }
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEPNS5_10_Hash_nodeIS3_Lb0EEE>:
      _M_update_bbegin(__node_ptr __n)
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
	_M_before_begin._M_nxt = __n;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	609a      	str	r2, [r3, #8]
	_M_update_bbegin();
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f93f 	bl	8001dac <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEv>
      }
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>:
      _M_bucket_index(const __node_value_type& __n) const noexcept
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	6839      	ldr	r1, [r7, #0]
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f947 	bl	8001df4 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb0EEEj>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_deallocate_nodesEPS6_>:
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    {
      while (__n)
 8001b7a:	e009      	b.n	8001b90 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_deallocate_nodesEPS6_+0x20>
	{
	  __node_ptr __tmp = __n;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 8001b80:	6838      	ldr	r0, [r7, #0]
 8001b82:	f7ff ffd8 	bl	8001b36 <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8001b86:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 8001b88:	68f9      	ldr	r1, [r7, #12]
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f954 	bl	8001e38 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE18_M_deallocate_nodeEPS6_>
      while (__n)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f2      	bne.n	8001b7c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_deallocate_nodesEPS6_+0xc>
	}
    }
 8001b96:	bf00      	nop
 8001b98:	bf00      	nop
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 f95d 	bl	8001e6e <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS5_15_Hash_node_baseE>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d105      	bne.n	8001bc6 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 f96d 	bl	8001e9e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 8001bc4:	e000      	b.n	8001bc8 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj+0x28>
	  return;
 8001bc6:	bf00      	nop
      }
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8001be6:	b590      	push	{r4, r7, lr}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ffed 	bl	8001bce <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE5beginEv>
 8001bf4:	4604      	mov	r4, r0
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f974 	bl	8001ee4 <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE4sizeEv>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4423      	add	r3, r4
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd90      	pop	{r4, r7, pc}

08001c10 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS3_EET_SK_jRKSA_RKS8_RKS4_St17integral_constantIbLb1EE>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
      : _Hashtable(__bkt_count_hint, __h, __eq, __a)
 8001c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	6a3a      	ldr	r2, [r7, #32]
 8001c26:	6839      	ldr	r1, [r7, #0]
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f967 	bl	8001efc <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSA_RKS8_RKS4_>
	for (; __f != __l; ++__f)
 8001c2e:	e009      	b.n	8001c44 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS3_EET_SK_jRKSA_RKS8_RKS4_St17integral_constantIbLb1EE+0x34>
	  this->insert(*__f);
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	68f9      	ldr	r1, [r7, #12]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 f987 	bl	8001f4c <_ZNSt8__detail12_Insert_baseIhSt4pairIKh11GPIOPortPinESaIS4_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKS4_>
	for (; __f != __l; ++__f)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	330c      	adds	r3, #12
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d1f1      	bne.n	8001c30 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS3_EET_SK_jRKSA_RKS8_RKS4_St17integral_constantIbLb1EE+0x20>
      }
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6839      	ldr	r1, [r7, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 f98f 	bl	8001f88 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>:
      _M_valptr() noexcept
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f991 	bl	8001fa6 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE6_M_ptrEv>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1ERKS8_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE19_M_allocate_bucketsEj>:

  template<typename _NodeAlloc>
    auto
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 8001ca6:	b590      	push	{r4, r7, lr}
 8001ca8:	b087      	sub	sp, #28
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
    -> __buckets_ptr
    {
      __buckets_alloc_type __alloc(_M_node_allocator());
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f984 	bl	8001fbe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f989 	bl	8001fd6 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEERKSaIT_E>

      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	6839      	ldr	r1, [r7, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f99c 	bl	8002008 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 8001cd0:	6178      	str	r0, [r7, #20]
      __buckets_ptr __p = std::__to_address(__ptr);
 8001cd2:	6978      	ldr	r0, [r7, #20]
 8001cd4:	f000 f9a7 	bl	8002026 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 8001cd8:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	f007 faf7 	bl	80092d8 <memset>
      return __p;
 8001cea:	693c      	ldr	r4, [r7, #16]
    }
 8001cec:	f107 030c 	add.w	r3, r7, #12
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 f97d 	bl	8001ff0 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 8001cf6:	4623      	mov	r3, r4
    }
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	371c      	adds	r7, #28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd90      	pop	{r4, r7, pc}

08001d00 <_ZSt4moveIRSt4pairIKh11GPIOPortPinEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_ZNSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEC1Ev>:
    struct _Hash_node
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff f9df 	bl	80010fa <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE16_M_allocate_nodeIJRKS5_EEEPS6_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8001d46:	b5b0      	push	{r4, r5, r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f934 	bl	8001fbe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2101      	movs	r1, #1
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f96e 	bl	800203c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE8allocateERS7_j>
 8001d60:	60f8      	str	r0, [r7, #12]
	__node_ptr __n = std::__to_address(__nptr);
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 f979 	bl	800205a <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_S8_>
 8001d68:	60b8      	str	r0, [r7, #8]
	    ::new ((void*)__n) __node_type;
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	2010      	movs	r0, #16
 8001d70:	f7ff f9aa 	bl	80010c8 <_ZnwjPv>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ffd8 	bl	8001d2c <_ZNSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f91e 	bl	8001fbe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 8001d82:	4604      	mov	r4, r0
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	3304      	adds	r3, #4
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff73 	bl	8001c74 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>
 8001d8e:	4605      	mov	r5, r0
 8001d90:	6838      	ldr	r0, [r7, #0]
 8001d92:	f7ff ffc0 	bl	8001d16 <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f000 f967 	bl	8002070 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>
	    return __n;
 8001da2:	68bb      	ldr	r3, [r7, #8]
      }
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bdb0      	pop	{r4, r5, r7, pc}

08001dac <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEv>:
      _M_update_bbegin()
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	if (_M_begin())
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff fe77 	bl	8001aa8 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bf14      	ite	ne
 8001dc0:	2301      	movne	r3, #1
 8001dc2:	2300      	moveq	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d010      	beq.n	8001dec <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_update_bbeginEv+0x40>
	  _M_buckets[_M_bucket_index(*_M_begin())] = &_M_before_begin;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681c      	ldr	r4, [r3, #0]
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff fe6a 	bl	8001aa8 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff feb7 	bl	8001b4e <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>
 8001de0:	4603      	mov	r3, r0
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4423      	add	r3, r4
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	3208      	adds	r2, #8
 8001dea:	601a      	str	r2, [r3, #0]
      }
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd90      	pop	{r4, r7, pc}

08001df4 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb0EEEj>:
      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f96a 	bl	80020dc <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 f96f 	bl	80020f4 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKh11GPIOPortPinEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4619      	mov	r1, r3
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 f94a 	bl	80020b4 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 8001e20:	4601      	mov	r1, r0
 8001e22:	f107 0310 	add.w	r3, r7, #16
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff f974 	bl	8001116 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8001e2e:	4603      	mov	r3, r0
      }
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE18_M_deallocate_nodeEPS6_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8bb 	bl	8001fbe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 8001e48:	4604      	mov	r4, r0
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff10 	bl	8001c74 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4619      	mov	r1, r3
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f000 f95c 	bl	8002116 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE7destroyIS5_EEvRS7_PT_>
      _M_deallocate_node_ptr(__n);
 8001e5e:	6839      	ldr	r1, [r7, #0]
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f965 	bl	8002130 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE22_M_deallocate_node_ptrEPS6_>
    }
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd90      	pop	{r4, r7, pc}

08001e6e <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS5_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3318      	adds	r3, #24
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	bf0c      	ite	eq
 8001e82:	2301      	moveq	r3, #1
 8001e84:	2300      	movne	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
    _M_deallocate_buckets(__buckets_ptr __bkts,
			  std::size_t __bkt_count)
    {
      typedef typename __buckets_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 8001eaa:	68b8      	ldr	r0, [r7, #8]
 8001eac:	f000 f956 	bl	800215c <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 8001eb0:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 f883 	bl	8001fbe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f107 0310 	add.w	r3, r7, #16
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 f888 	bl	8001fd6 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 8001ec6:	f107 0310 	add.w	r3, r7, #16
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6979      	ldr	r1, [r7, #20]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 f950 	bl	8002174 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 8001ed4:	f107 0310 	add.w	r3, r7, #16
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f889 	bl	8001ff0 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <_ZNKSt16initializer_listISt4pairIKh11GPIOPortPinEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSA_RKS8_RKS4_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
    : _Hashtable(__h, __eq, __a)
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 f93e 	bl	8002192 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSA_RKS8_RKS4_>
      auto __bkt_count = _M_rehash_policy._M_next_bkt(__bkt_count_hint);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3310      	adds	r3, #16
 8001f1a:	68b9      	ldr	r1, [r7, #8]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f006 fa6f 	bl	8008400 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8001f22:	6178      	str	r0, [r7, #20]
      if (__bkt_count > _M_bucket_count)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d909      	bls.n	8001f42 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSA_RKS8_RKS4_+0x46>
	  _M_buckets = _M_allocate_buckets(__bkt_count);
 8001f2e:	6979      	ldr	r1, [r7, #20]
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f7ff fd9c 	bl	8001a6e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 8001f36:	4602      	mov	r2, r0
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	601a      	str	r2, [r3, #0]
	  _M_bucket_count = __bkt_count;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	605a      	str	r2, [r3, #4]
    }
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <_ZNSt8__detail12_Insert_baseIhSt4pairIKh11GPIOPortPinESaIS4_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKS4_>:
      insert(const value_type& __v)
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
	__hashtable& __h = _M_conjure_hashtable();
 8001f58:	68b8      	ldr	r0, [r7, #8]
 8001f5a:	f000 f95a 	bl	8002212 <_ZNSt8__detail12_Insert_baseIhSt4pairIKh11GPIOPortPinESaIS4_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>
 8001f5e:	6178      	str	r0, [r7, #20]
	__node_gen_type __node_gen(__h);
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	6979      	ldr	r1, [r7, #20]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fbfe 	bl	8001768 <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1ERNS_16_Hashtable_allocIS7_EE>
	return __h._M_insert(__v, __node_gen, __unique_keys{});
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f107 0310 	add.w	r3, r7, #16
 8001f72:	f88d 4000 	strb.w	r4, [sp]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6979      	ldr	r1, [r7, #20]
 8001f7a:	f000 f955 	bl	8002228 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS3_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEES0_INS5_14_Node_iteratorIS3_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>
 8001f7e:	bf00      	nop
      }
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd90      	pop	{r4, r7, pc}

08001f88 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f99d 	bl	80022ee <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE7_M_addrEv>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f99c 	bl	8002304 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EE6_M_getEv>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	6039      	str	r1, [r7, #0]
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f99a 	bl	800231a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f999 	bl	8002330 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002012:	2200      	movs	r2, #0
 8002014:	6839      	ldr	r1, [r7, #0]
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f9a1 	bl	800235e <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 800201c:	4603      	mov	r3, r0
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800202e:	687b      	ldr	r3, [r7, #4]
    }
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002046:	2200      	movs	r2, #0
 8002048:	6839      	ldr	r1, [r7, #0]
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f9bc 	bl	80023c8 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE8allocateEjPKv>
 8002050:	4603      	mov	r3, r0
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_S8_>:
    __to_address(_Tp* __ptr) noexcept
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
      return __ptr;
 8002062:	687b      	ldr	r3, [r7, #4]
    }
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff fe4a 	bl	8001d16 <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002082:	4603      	mov	r3, r0
 8002084:	461a      	mov	r2, r3
 8002086:	68b9      	ldr	r1, [r7, #8]
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f9c6 	bl	800241a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>
	}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f9cf 	bl	800244a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE10deallocateEPS7_j>
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>:
      _M_hash_code(const _Key& __k) const
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
	return _M_hash()(__k);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f9d3 	bl	800246a <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 80020c4:	4602      	mov	r2, r0
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	4619      	mov	r1, r3
 80020cc:	4610      	mov	r0, r2
 80020ce:	f7ff f807 	bl	80010e0 <_ZNKSt4hashIhEclEh>
 80020d2:	4603      	mov	r3, r0
      }
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>:
      _M_v() const noexcept
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f9cc 	bl	8002482 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKh11GPIOPortPinEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>:
      operator()(_Tp&& __x) const noexcept
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 80020fe:	6838      	ldr	r0, [r7, #0]
 8002100:	f7ff fe09 	bl	8001d16 <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002104:	4603      	mov	r3, r0
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f9c8 	bl	800249c <_ZSt3getILj0EKh11GPIOPortPinERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS6_>
 800210c:	4603      	mov	r3, r0
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8002120:	6839      	ldr	r1, [r7, #0]
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f9c6 	bl	80024b4 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE7destroyIS6_EEvPT_>
	}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE22_M_deallocate_node_ptrEPS6_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 800213a:	6838      	ldr	r0, [r7, #0]
 800213c:	f000 f9c5 	bl	80024ca <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE10pointer_toERS6_>
 8002140:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ff3b 	bl	8001fbe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE17_M_node_allocatorEv>
 8002148:	4603      	mov	r3, r0
 800214a:	2201      	movs	r2, #1
 800214c:	68f9      	ldr	r1, [r7, #12]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ffa1 	bl	8002096 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE10deallocateERS7_PS6_j>
    }
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f9bc 	bl	80024e2 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 800216a:	4603      	mov	r3, r0
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68b9      	ldr	r1, [r7, #8]
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f9b8 	bl	80024fa <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSA_RKS8_RKS4_>:
      _Hashtable(const _Hash& __h, const _Equal& __eq,
 8002192:	b590      	push	{r4, r7, lr}
 8002194:	b087      	sub	sp, #28
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	603b      	str	r3, [r7, #0]
	__enable_default_ctor(_Enable_default_constructor_tag{})
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68b9      	ldr	r1, [r7, #8]
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f9c5 	bl	8002534 <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKS9_RKS7_>
	__hashtable_alloc(__node_alloc_type(__a)),
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	6839      	ldr	r1, [r7, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 f9b2 	bl	800251a <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1IS4_EERKSaIT_E>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f7ff fac1 	bl	8001744 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEC1IS7_EEOT_>
	__hashtable_alloc(__node_alloc_type(__a)),
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fab0 	bl	800172c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEED1Ev>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 80021cc:	4621      	mov	r1, r4
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f9c3 	bl	800255a <_ZNSt27_Enable_default_constructorILb1ENSt8__detail15_Hash_node_baseEEC1ESt31_Enable_default_constructor_tag>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f103 0218 	add.w	r2, r3, #24
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3308      	adds	r3, #8
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe ff86 	bl	80010fa <_ZNSt8__detail15_Hash_node_baseC1Ev>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	60da      	str	r2, [r3, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3310      	adds	r3, #16
 80021f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe ff9e 	bl	800113e <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
      { }
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4618      	mov	r0, r3
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd90      	pop	{r4, r7, pc}

08002212 <_ZNSt8__detail12_Insert_baseIhSt4pairIKh11GPIOPortPinESaIS4_ENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>:
      _M_conjure_hashtable()
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
      { return *(static_cast<__hashtable*>(this)); }
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS3_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEES0_INS5_14_Node_iteratorIS3_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002228:	b580      	push	{r7, lr}
 800222a:	b090      	sub	sp, #64	; 0x40
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
	const key_type& __k = _ExtractKey{}(__v);
 8002236:	f107 031c 	add.w	r3, r7, #28
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff59 	bl	80020f4 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKh11GPIOPortPinEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>
 8002242:	6378      	str	r0, [r7, #52]	; 0x34
	__hash_code __code = this->_M_hash_code(__k);
 8002244:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002246:	68b8      	ldr	r0, [r7, #8]
 8002248:	f7ff ff34 	bl	80020b4 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 800224c:	6338      	str	r0, [r7, #48]	; 0x30
	size_type __bkt = _M_bucket_index(__code);
 800224e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002250:	68b8      	ldr	r0, [r7, #8]
 8002252:	f000 f98e 	bl	8002572 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8002256:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (__node_ptr __node = _M_find_node(__bkt, __k, __code))
 8002258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800225c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800225e:	68b8      	ldr	r0, [r7, #8]
 8002260:	f000 f998 	bl	8002594 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>
 8002264:	62b8      	str	r0, [r7, #40]	; 0x28
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	2b00      	cmp	r3, #0
 800226a:	d011      	beq.n	8002290 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS3_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEES0_INS5_14_Node_iteratorIS3_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE+0x68>
	  return { iterator(__node), false };
 800226c:	f107 0320 	add.w	r3, r7, #32
 8002270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fcef 	bl	8001c56 <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800227e:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8002282:	f107 0320 	add.w	r3, r7, #32
 8002286:	4619      	mov	r1, r3
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f99c 	bl	80025c6 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKh11GPIOPortPinELb0ELb0EEEbEC1IS5_bLb1EEEOT_OT0_>
      }
 800228e:	e02a      	b.n	80022e6 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS3_NS5_10_AllocNodeISaINS5_10_Hash_nodeIS3_Lb0EEEEEEEES0_INS5_14_Node_iteratorIS3_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE+0xbe>
	_Scoped_node __node{ __node_gen(std::forward<_Arg>(__v)), this };
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff fd40 	bl	8001d16 <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002296:	4603      	mov	r3, r0
 8002298:	4619      	mov	r1, r3
 800229a:	6838      	ldr	r0, [r7, #0]
 800229c:	f7ff fc1c 	bl	8001ad8 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEEclIRKS5_EEPS6_OT_>
 80022a0:	4601      	mov	r1, r0
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f9a5 	bl	80025f8 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNS5_10_Hash_nodeIS3_Lb0EEEPNS5_16_Hashtable_allocISaISJ_EEE>
	  = _M_insert_unique_node(__bkt, __code, __node._M_node);
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2201      	movs	r2, #1
 80022b2:	9200      	str	r2, [sp, #0]
 80022b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022b8:	68b8      	ldr	r0, [r7, #8]
 80022ba:	f000 f9c5 	bl	8002648 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS5_10_Hash_nodeIS3_Lb0EEEj>
 80022be:	4603      	mov	r3, r0
 80022c0:	613b      	str	r3, [r7, #16]
	__node._M_node = nullptr;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
	return { __pos, true };
 80022c6:	2301      	movs	r3, #1
 80022c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80022cc:	f107 0227 	add.w	r2, r7, #39	; 0x27
 80022d0:	f107 0310 	add.w	r3, r7, #16
 80022d4:	4619      	mov	r1, r3
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f9ff 	bl	80026da <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKh11GPIOPortPinELb0ELb0EEEbEC1IRS5_bLb1EEEOT_OT0_>
      }
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 f99c 	bl	800261e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	3738      	adds	r7, #56	; 0x38
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE7_M_addrEv>:
      _M_addr() noexcept
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 80022f6:	687b      	ldr	r3, [r7, #4]
      }
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800234e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f7ff ffeb 	bl	8002346 <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 8002370:	4602      	mov	r2, r0
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	4293      	cmp	r3, r2
 8002376:	bf8c      	ite	hi
 8002378:	2301      	movhi	r3, #1
 800237a:	2300      	movls	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	bf14      	ite	ne
 8002382:	2301      	movne	r3, #1
 8002384:	2300      	moveq	r3, #0
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002392:	d301      	bcc.n	8002398 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8002394:	f006 f830 	bl	80083f8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002398:	f006 f82b 	bl	80083f2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f006 f815 	bl	80083d0 <_Znwj>
 80023a6:	4603      	mov	r3, r0
      }
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80023b8:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f7ff ffeb 	bl	80023b0 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE11_M_max_sizeEv>
 80023da:	4602      	mov	r2, r0
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4293      	cmp	r3, r2
 80023e0:	bf8c      	ite	hi
 80023e2:	2301      	movhi	r3, #1
 80023e4:	2300      	movls	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf14      	ite	ne
 80023ec:	2301      	movne	r3, #1
 80023ee:	2300      	moveq	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023fc:	d301      	bcc.n	8002402 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80023fe:	f005 fffb 	bl	80083f8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002402:	f005 fff6 	bl	80083f2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	4618      	mov	r0, r3
 800240c:	f005 ffe0 	bl	80083d0 <_Znwj>
 8002410:	4603      	mov	r3, r0
      }
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800241a:	b590      	push	{r4, r7, lr}
 800241c:	b085      	sub	sp, #20
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff fc75 	bl	8001d16 <_ZSt7forwardIRKSt4pairIKh11GPIOPortPinEEOT_RNSt16remove_referenceIS6_E4typeE>
 800242c:	4604      	mov	r4, r0
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	4619      	mov	r1, r3
 8002432:	200c      	movs	r0, #12
 8002434:	f7fe fe48 	bl	80010c8 <_ZnwjPv>
 8002438:	4603      	mov	r3, r0
 800243a:	4622      	mov	r2, r4
 800243c:	ca07      	ldmia	r2, {r0, r1, r2}
 800243e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bd90      	pop	{r4, r7, pc}

0800244a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	4619      	mov	r1, r3
 800245c:	68b8      	ldr	r0, [r7, #8]
 800245e:	f005 ffb5 	bl	80083cc <_ZdlPvj>
      }
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>:
      _M_hash() const { return __ebo_hash::_M_cget(); }
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f94a 	bl	800270c <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EE7_M_cgetEv>
 8002478:	4603      	mov	r3, r0
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>:
      _M_valptr() const noexcept
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4618      	mov	r0, r3
 800248e:	f000 f948 	bl	8002722 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE6_M_ptrEv>
 8002492:	4603      	mov	r3, r0
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <_ZSt3getILj0EKh11GPIOPortPinERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS6_>:
    get(pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(const pair<_Tp1, _Tp2>& __in) noexcept
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__const_get(__in); }
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f948 	bl	800273a <_ZNSt10__pair_getILj0EE11__const_getIKh11GPIOPortPinEERKT_RKSt4pairIS4_T0_E>
 80024aa:	4603      	mov	r3, r0
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE7destroyIS6_EEvPT_>:
	destroy(_Up* __p)
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEE10pointer_toERS6_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f93c 	bl	8002750 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_RS7_>
 80024d8:	4603      	mov	r3, r0
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f93c 	bl	8002768 <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4619      	mov	r1, r3
 800250c:	68b8      	ldr	r0, [r7, #8]
 800250e:	f005 ff5d 	bl	80083cc <_ZdlPvj>
      }
 8002512:	bf00      	nop
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1IS4_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f92a 	bl	800277e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1Ev>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKS9_RKS7_>:
      _Hashtable_base(const _Hash& __hash, const _Equal& __eq)
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
      : __hash_code_base(__hash), _EqualEBO(__eq)
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f926 	bl	8002794 <_ZNSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKS7_>
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f930 	bl	80027b0 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EEC1IRKS2_EEOT_>
      { }
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <_ZNSt27_Enable_default_constructorILb1ENSt8__detail15_Hash_node_baseEEC1ESt31_Enable_default_constructor_tag>:
    _Enable_default_constructor&
    operator=(_Enable_default_constructor&&) noexcept = default;

    // Can be used in other ctors.
    constexpr explicit
    _Enable_default_constructor(_Enable_default_constructor_tag) { }
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	7039      	strb	r1, [r7, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>:
      _M_bucket_index(__hash_code __c) const
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	461a      	mov	r2, r3
 8002582:	6839      	ldr	r1, [r7, #0]
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f920 	bl	80027ca <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>
 800258a:	4603      	mov	r3, r0
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68b9      	ldr	r1, [r7, #8]
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f920 	bl	80027ee <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j>
 80025ae:	6178      	str	r0, [r7, #20]
	if (__before_n)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j+0x28>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	e000      	b.n	80025be <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j+0x2a>
	return nullptr;
 80025bc:	2300      	movs	r3, #0
      }
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKh11GPIOPortPinELb0ELb0EEEbEC1IS5_bLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80025d2:	68b8      	ldr	r0, [r7, #8]
 80025d4:	f000 f950 	bl	8002878 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80025d8:	4602      	mov	r2, r0
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff f87e 	bl	80016e2 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80025e6:	4603      	mov	r3, r0
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	711a      	strb	r2, [r3, #4]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNS5_10_Hash_nodeIS3_Lb0EEEPNS5_16_Hashtable_allocISaISJ_EEE>:
	_Scoped_node(__node_ptr __n, __hashtable_alloc* __h)
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
	: _M_h(__h), _M_node(__n) { }
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	605a      	str	r2, [r3, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4619      	mov	r1, r3
 8002638:	4610      	mov	r0, r2
 800263a:	f7ff fbfd 	bl	8001e38 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEE18_M_deallocate_nodeEPS6_>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS5_10_Hash_nodeIS3_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b08d      	sub	sp, #52	; 0x34
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3310      	adds	r3, #16
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fd82 	bl	8001164 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 8002660:	4603      	mov	r3, r0
 8002662:	61fb      	str	r3, [r7, #28]
 8002664:	f107 031c 	add.w	r3, r7, #28
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f103 0110 	add.w	r1, r3, #16
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	68dc      	ldr	r4, [r3, #12]
 8002678:	f107 0014 	add.w	r0, r7, #20
 800267c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	4623      	mov	r3, r4
 8002682:	f005 ff01 	bl	8008488 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 8002686:	7d3b      	ldrb	r3, [r7, #20]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS5_10_Hash_nodeIS3_Lb0EEEj+0x5a>
	  _M_rehash(__do_rehash.second, __saved_state);
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002690:	4619      	mov	r1, r3
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f8fb 	bl	800288e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__code);
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f7ff ff69 	bl	8002572 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 80026a0:	60b8      	str	r0, [r7, #8]
      this->_M_store_code(*__node, __code);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	3304      	adds	r3, #4
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	4619      	mov	r1, r3
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f8fe 	bl	80028ac <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	68b9      	ldr	r1, [r7, #8]
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f905 	bl	80028c4 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE>
      ++_M_element_count;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 80026c4:	f107 0320 	add.w	r3, r7, #32
 80026c8:	6839      	ldr	r1, [r7, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fac3 	bl	8001c56 <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 80026d0:	6a3b      	ldr	r3, [r7, #32]
    }
 80026d2:	4618      	mov	r0, r3
 80026d4:	372c      	adds	r7, #44	; 0x2c
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd90      	pop	{r4, r7, pc}

080026da <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKh11GPIOPortPinELb0ELb0EEEbEC1IRS5_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80026e6:	68b8      	ldr	r0, [r7, #8]
 80026e8:	f000 f933 	bl	8002952 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7fe fff4 	bl	80016e2 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80026fa:	4603      	mov	r3, r0
 80026fc:	781a      	ldrb	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	711a      	strb	r2, [r3, #4]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f91c 	bl	8002968 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE7_M_addrEv>
 8002730:	4603      	mov	r3, r0
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <_ZNSt10__pair_getILj0EE11__const_getIKh11GPIOPortPinEERKT_RKSt4pairIS4_T0_E>:
	__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
	{ return __pair.first; }
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_RS7_>:
    addressof(_Tp& __r) noexcept
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f910 	bl	800297e <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_RS7_>
 800275e:	4603      	mov	r3, r0
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <_ZNSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKS7_>:
      _Hash_code_base(const _Hash& __hash) : __ebo_hash(__hash) { }
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	6839      	ldr	r1, [r7, #0]
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f8f7 	bl	8002994 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EEC1IRKS2_EEOT_>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EEC1IRKS2_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 80027ba:	6838      	ldr	r0, [r7, #0]
 80027bc:	f000 f8f7 	bl	80029ae <_ZSt7forwardIRKSt8equal_toIhEEOT_RNSt16remove_referenceIS4_E4typeE>
	{ }
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>:
      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__c, __bkt_count); }
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fc99 	bl	8001116 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	603b      	str	r3, [r7, #0]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x26>
	return nullptr;
 8002810:	2300      	movs	r3, #0
 8002812:	e02d      	b.n	8002870 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x82>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	3304      	adds	r3, #4
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f8ce 	bl	80029c4 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS4_Lb0EEE>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x44>
	    return __prev_p;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	e01e      	b.n	8002870 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x82>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00c      	beq.n	8002854 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x66>
 800283a:	6938      	ldr	r0, [r7, #16]
 800283c:	f7ff f97b 	bl	8001b36 <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8002840:	4603      	mov	r3, r0
 8002842:	3304      	adds	r3, #4
 8002844:	4619      	mov	r1, r3
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f7ff f981 	bl	8001b4e <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>
 800284c:	4602      	mov	r2, r0
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	4293      	cmp	r3, r2
 8002852:	d001      	beq.n	8002858 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x6a>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x6c>
 8002858:	2300      	movs	r3, #0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x7e>
	  __prev_p = __p;
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 8002862:	6938      	ldr	r0, [r7, #16]
 8002864:	f7ff f967 	bl	8001b36 <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8002868:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 800286a:	e7d6      	b.n	800281a <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x2c>
	    break;
 800286c:	bf00      	nop
      return nullptr;
 800286e:	2300      	movs	r3, #0
    }
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys{});
 800289a:	461a      	mov	r2, r3
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f8bd 	bl	8002a1e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>:
      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
      { }
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d011      	beq.n	8002904 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	601a      	str	r2, [r3, #0]
    }
 8002902:	e022      	b.n	800294a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE+0x86>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00f      	beq.n	800293a <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE+0x76>
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681c      	ldr	r4, [r3, #0]
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff f909 	bl	8001b36 <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8002924:	4603      	mov	r3, r0
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f7ff f90f 	bl	8001b4e <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>
 8002930:	4603      	mov	r3, r0
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4423      	add	r3, r4
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	3208      	adds	r2, #8
 8002948:	601a      	str	r2, [r3, #0]
    }
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	bd90      	pop	{r4, r7, pc}

08002952 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKh11GPIOPortPinEE7_M_addrEv>:
      _M_addr() const noexcept
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 8002970:	687b      	ldr	r3, [r7, #4]
      }
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIhELb1EEC1IRKS2_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 800299e:	6838      	ldr	r0, [r7, #0]
 80029a0:	f000 f8a1 	bl	8002ae6 <_ZSt7forwardIRKSt4hashIhEEOT_RNSt16remove_referenceIS4_E4typeE>
	{ }
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <_ZSt7forwardIRKSt8equal_toIhEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4618      	mov	r0, r3
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS4_Lb0EEE>:
      _M_equals(const _Key& __k, __hash_code __c,
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 80029d2:	6839      	ldr	r1, [r7, #0]
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f891 	bl	8002afc <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d019      	beq.n	8002a14 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS4_Lb0EEE+0x50>
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f897 	bl	8002b14 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 80029e6:	4604      	mov	r4, r0
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fb76 	bl	80020dc <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE4_M_vEv>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f107 0314 	add.w	r3, r7, #20
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fb7b 	bl	80020f4 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKh11GPIOPortPinEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>
 80029fe:	4603      	mov	r3, r0
 8002a00:	461a      	mov	r2, r3
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	4620      	mov	r0, r4
 8002a06:	f000 f891 	bl	8002b2c <_ZNKSt8equal_toIhEclERKhS2_>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS4_Lb0EEE+0x50>
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS4_Lb0EEE+0x52>
 8002a14:	2300      	movs	r3, #0
      }
 8002a16:	4618      	mov	r0, r3
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd90      	pop	{r4, r7, pc}

08002a1e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b08a      	sub	sp, #40	; 0x28
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	713a      	strb	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f7ff f81e 	bl	8001a6e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 8002a32:	61f8      	str	r0, [r7, #28]
      __node_ptr __p = _M_begin();
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f7ff f837 	bl	8001aa8 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8002a3a:	6278      	str	r0, [r7, #36]	; 0x24
      _M_before_begin._M_nxt = nullptr;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]
      while (__p)
 8002a46:	e03e      	b.n	8002ac6 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa8>
	{
	  __node_ptr __next = __p->_M_next();
 8002a48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a4a:	f7ff f874 	bl	8001b36 <_ZNKSt8__detail10_Hash_nodeISt4pairIKh11GPIOPortPinELb0EE7_M_nextEv>
 8002a4e:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	3304      	adds	r3, #4
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	4619      	mov	r1, r3
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7ff f9cb 	bl	8001df4 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb0EEEj>
 8002a5e:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	4413      	add	r3, r2
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d11a      	bne.n	8002aa4 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7a:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	4413      	add	r3, r2
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	3208      	adds	r2, #8
 8002a88:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	4413      	add	r3, r2
 8002a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9c:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	623b      	str	r3, [r7, #32]
 8002aa2:	e00e      	b.n	8002ac2 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	4413      	add	r3, r2
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	4413      	add	r3, r2
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac0:	601a      	str	r2, [r3, #0]
	    }

	  __p = __next;
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
      while (__p)
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1bd      	bne.n	8002a48 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x2a>
	}

      _M_deallocate_buckets();
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f7fe fef8 	bl	80018c2 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	601a      	str	r2, [r3, #0]
    }
 8002ade:	bf00      	nop
 8002ae0:	3728      	adds	r7, #40	; 0x28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <_ZSt7forwardIRKSt4hashIhEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <_ZNSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>:
      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
      { return true; }
 8002b06:	2301      	movs	r3, #1
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <_ZNKSt8__detail15_Hashtable_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt8equal_toIhESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
      _M_eq() const { return _EqualEBO::_M_cget(); }
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f81a 	bl	8002b56 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EE7_M_cgetEv>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <_ZNKSt8equal_toIhEclERKhS2_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	781a      	ldrb	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	bf0c      	ite	eq
 8002b44:	2301      	moveq	r3, #1
 8002b46:	2300      	movne	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIhELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <_ZN8SelectorD1Ev>:
class Selector {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fb10 	bl	800119c <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEED1Ev>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002b88:	b5b0      	push	{r4, r5, r7, lr}
 8002b8a:	b09c      	sub	sp, #112	; 0x70
 8002b8c:	af04      	add	r7, sp, #16
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d13e      	bne.n	8002c16 <_Z41__static_initialization_and_destruction_0ii+0x8e>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d139      	bne.n	8002c16 <_Z41__static_initialization_and_destruction_0ii+0x8e>
std::unordered_map<uint8_t, GPIOPortPin> panels = {
 8002ba2:	4b26      	ldr	r3, [pc, #152]	; (8002c3c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002ba4:	f107 0414 	add.w	r4, r7, #20
 8002ba8:	461d      	mov	r5, r3
 8002baa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bb2:	682b      	ldr	r3, [r5, #0]
 8002bb4:	6023      	str	r3, [r4, #0]
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe fd11 	bl	80015ec <_ZNSaISt4pairIKh11GPIOPortPinEEC1Ev>
 8002bca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002bce:	9302      	str	r3, [sp, #8]
 8002bd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f107 020c 	add.w	r2, r7, #12
 8002be2:	ca06      	ldmia	r2, {r1, r2}
 8002be4:	4816      	ldr	r0, [pc, #88]	; (8002c40 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002be6:	f7fe fd19 	bl	800161c <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEEC1ESt16initializer_listIS7_EjRKS2_RKS4_RKS8_>
 8002bea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe fd08 	bl	8001604 <_ZNSaISt4pairIKh11GPIOPortPinEED1Ev>
Selector selector(panels);
 8002bf4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002bf8:	4911      	ldr	r1, [pc, #68]	; (8002c40 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe fabe 	bl	800117c <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEEC1ERKS9_>
 8002c00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c04:	4619      	mov	r1, r3
 8002c06:	480f      	ldr	r0, [pc, #60]	; (8002c44 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002c08:	f7fe fad5 	bl	80011b6 <_ZN8SelectorC1ESt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS1_EEE>
 8002c0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe fac3 	bl	800119c <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEED1Ev>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10a      	bne.n	8002c32 <_Z41__static_initialization_and_destruction_0ii+0xaa>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d105      	bne.n	8002c32 <_Z41__static_initialization_and_destruction_0ii+0xaa>
 8002c26:	4807      	ldr	r0, [pc, #28]	; (8002c44 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002c28:	f7ff ffa0 	bl	8002b6c <_ZN8SelectorD1Ev>
std::unordered_map<uint8_t, GPIOPortPin> panels = {
 8002c2c:	4804      	ldr	r0, [pc, #16]	; (8002c40 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002c2e:	f7fe fab5 	bl	800119c <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEED1Ev>
}
 8002c32:	bf00      	nop
 8002c34:	3760      	adds	r7, #96	; 0x60
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bdb0      	pop	{r4, r5, r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	0800b3c4 	.word	0x0800b3c4
 8002c40:	20000294 	.word	0x20000294
 8002c44:	200002b0 	.word	0x200002b0

08002c48 <_GLOBAL__sub_I_hi2c1>:
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c50:	2001      	movs	r0, #1
 8002c52:	f7ff ff99 	bl	8002b88 <_Z41__static_initialization_and_destruction_0ii>
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <_GLOBAL__sub_D_hi2c1>:
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7ff ff91 	bl	8002b88 <_Z41__static_initialization_and_destruction_0ii>
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <_ZN8Selector6selectEh>:
#include "selector.hpp"

using namespace std;

bool Selector::select(uint8_t panel_id) {
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	70fb      	strb	r3, [r7, #3]
	auto it = panel_gpio.find(panel_id);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	1cfa      	adds	r2, r7, #3
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 f86a 	bl	8002d54 <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE4findERS6_>
 8002c80:	4603      	mov	r3, r0
 8002c82:	60bb      	str	r3, [r7, #8]

	if (it == panel_gpio.end()) {
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe fcee 	bl	8001668 <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE3endEv>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	f107 020c 	add.w	r2, r7, #12
 8002c94:	f107 0308 	add.w	r3, r7, #8
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f869 	bl	8002d72 <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EEES7_>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <_ZN8Selector6selectEh+0x42>
		return false; // panel ID not registered
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e019      	b.n	8002cde <_ZN8Selector6selectEh+0x76>
	}

	deselect_all();
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f81b 	bl	8002ce6 <_ZN8Selector12deselect_allEv>
	HAL_Delay(RELAY_SETTLE_WAIT);
 8002cb0:	2064      	movs	r0, #100	; 0x64
 8002cb2:	f000 fb95 	bl	80033e0 <HAL_Delay>
	HAL_GPIO_WritePin(it->second.port, it->second.pin, GPIO_PIN_SET);
 8002cb6:	f107 0308 	add.w	r3, r7, #8
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f86d 	bl	8002d9a <_ZNKSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEptEv>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	685c      	ldr	r4, [r3, #4]
 8002cc4:	f107 0308 	add.w	r3, r7, #8
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 f866 	bl	8002d9a <_ZNKSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEptEv>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	891b      	ldrh	r3, [r3, #8]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	f000 fe28 	bl	800392c <HAL_GPIO_WritePin>
	return true;
 8002cdc:	2301      	movs	r3, #1
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd90      	pop	{r4, r7, pc}

08002ce6 <_ZN8Selector12deselect_allEv>:

void Selector::deselect_all() {
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b088      	sub	sp, #32
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
	for (const auto& panel : panel_gpio) {
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	69f8      	ldr	r0, [r7, #28]
 8002cf4:	f7fe fcab 	bl	800164e <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE5beginEv>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	69f8      	ldr	r0, [r7, #28]
 8002cfe:	f7fe fcb3 	bl	8001668 <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE3endEv>
 8002d02:	4603      	mov	r3, r0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	e015      	b.n	8002d34 <_ZN8Selector12deselect_allEv+0x4e>
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fe fcd9 	bl	80016c4 <_ZNKSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEdeEv>
 8002d12:	61b8      	str	r0, [r7, #24]
		const GPIOPortPin& gpio = panel.second;
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	3304      	adds	r3, #4
 8002d18:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	889b      	ldrh	r3, [r3, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	4619      	mov	r1, r3
 8002d26:	f000 fe01 	bl	800392c <HAL_GPIO_WritePin>
	for (const auto& panel : panel_gpio) {
 8002d2a:	f107 0310 	add.w	r3, r7, #16
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe fcbb 	bl	80016aa <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEppEv>
 8002d34:	f107 020c 	add.w	r2, r7, #12
 8002d38:	f107 0310 	add.w	r3, r7, #16
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe fc9f 	bl	8001682 <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EEES7_>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1de      	bne.n	8002d08 <_ZN8Selector12deselect_allEv+0x22>
	}
}
 8002d4a:	bf00      	nop
 8002d4c:	bf00      	nop
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <_ZNSt13unordered_mapIh11GPIOPortPinSt4hashIhESt8equal_toIhESaISt4pairIKhS0_EEE4findERS6_>:
       *  the key matches.  If successful the function returns an iterator
       *  pointing to the sought after element.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */
      iterator
      find(const key_type& __x)
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
      { return _M_h.find(__x); }
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6839      	ldr	r1, [r7, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 f828 	bl	8002db8 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS1_>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKh11GPIOPortPinELb0EEES7_>:
      operator==(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <_ZNKSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEptEv>:
      operator->() const noexcept
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_valptr(); }
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3304      	adds	r3, #4
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe ff63 	bl	8001c74 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKh11GPIOPortPinEE9_M_valptrEv>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <_ZNSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS1_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
      __hash_code __code = this->_M_hash_code(__k);
 8002dc2:	6839      	ldr	r1, [r7, #0]
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff f975 	bl	80020b4 <_ZNKSt8__detail15_Hash_code_baseIhSt4pairIKh11GPIOPortPinENS_10_Select1stESt4hashIhENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 8002dca:	6178      	str	r0, [r7, #20]
      std::size_t __bkt = _M_bucket_index(__code);
 8002dcc:	6979      	ldr	r1, [r7, #20]
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff fbcf 	bl	8002572 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8002dd4:	6138      	str	r0, [r7, #16]
      return iterator(_M_find_node(__bkt, __k, __code));
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	6939      	ldr	r1, [r7, #16]
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff fbd9 	bl	8002594 <_ZNKSt10_HashtableIhSt4pairIKh11GPIOPortPinESaIS3_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>
 8002de2:	4602      	mov	r2, r0
 8002de4:	f107 030c 	add.w	r3, r7, #12
 8002de8:	4611      	mov	r1, r2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe ff33 	bl	8001c56 <_ZNSt8__detail14_Node_iteratorISt4pairIKh11GPIOPortPinELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 8002df0:	68fb      	ldr	r3, [r7, #12]
    }
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <HAL_MspInit+0x54>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	4a11      	ldr	r2, [pc, #68]	; (8002e50 <HAL_MspInit+0x54>)
 8002e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e10:	6453      	str	r3, [r2, #68]	; 0x44
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <HAL_MspInit+0x54>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1a:	607b      	str	r3, [r7, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_MspInit+0x54>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <HAL_MspInit+0x54>)
 8002e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2e:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <HAL_MspInit+0x54>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	210f      	movs	r1, #15
 8002e3e:	f06f 0001 	mvn.w	r0, #1
 8002e42:	f000 fbae 	bl	80035a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800

08002e54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08c      	sub	sp, #48	; 0x30
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	f107 031c 	add.w	r3, r7, #28
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a32      	ldr	r2, [pc, #200]	; (8002f3c <HAL_I2C_MspInit+0xe8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d12c      	bne.n	8002ed0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <HAL_I2C_MspInit+0xec>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a30      	ldr	r2, [pc, #192]	; (8002f40 <HAL_I2C_MspInit+0xec>)
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b2e      	ldr	r3, [pc, #184]	; (8002f40 <HAL_I2C_MspInit+0xec>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	61bb      	str	r3, [r7, #24]
 8002e90:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e92:	23c0      	movs	r3, #192	; 0xc0
 8002e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e96:	2312      	movs	r3, #18
 8002e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ea2:	2304      	movs	r3, #4
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea6:	f107 031c 	add.w	r3, r7, #28
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4825      	ldr	r0, [pc, #148]	; (8002f44 <HAL_I2C_MspInit+0xf0>)
 8002eae:	f000 fba1 	bl	80035f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_I2C_MspInit+0xec>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	4a21      	ldr	r2, [pc, #132]	; (8002f40 <HAL_I2C_MspInit+0xec>)
 8002ebc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec2:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <HAL_I2C_MspInit+0xec>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ece:	e031      	b.n	8002f34 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <HAL_I2C_MspInit+0xf4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d12c      	bne.n	8002f34 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <HAL_I2C_MspInit+0xec>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a17      	ldr	r2, [pc, #92]	; (8002f40 <HAL_I2C_MspInit+0xec>)
 8002ee4:	f043 0302 	orr.w	r3, r3, #2
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <HAL_I2C_MspInit+0xec>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ef6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002efc:	2312      	movs	r3, #18
 8002efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f00:	2301      	movs	r3, #1
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f04:	2303      	movs	r3, #3
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f08:	2304      	movs	r3, #4
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f0c:	f107 031c 	add.w	r3, r7, #28
 8002f10:	4619      	mov	r1, r3
 8002f12:	480c      	ldr	r0, [pc, #48]	; (8002f44 <HAL_I2C_MspInit+0xf0>)
 8002f14:	f000 fb6e 	bl	80035f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_I2C_MspInit+0xec>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <HAL_I2C_MspInit+0xec>)
 8002f22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f26:	6413      	str	r3, [r2, #64]	; 0x40
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_I2C_MspInit+0xec>)
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3730      	adds	r7, #48	; 0x30
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40005400 	.word	0x40005400
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40020400 	.word	0x40020400
 8002f48:	40005800 	.word	0x40005800

08002f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08e      	sub	sp, #56	; 0x38
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a4c      	ldr	r2, [pc, #304]	; (800309c <HAL_UART_MspInit+0x150>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d12d      	bne.n	8002fca <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	623b      	str	r3, [r7, #32]
 8002f72:	4b4b      	ldr	r3, [pc, #300]	; (80030a0 <HAL_UART_MspInit+0x154>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	4a4a      	ldr	r2, [pc, #296]	; (80030a0 <HAL_UART_MspInit+0x154>)
 8002f78:	f043 0310 	orr.w	r3, r3, #16
 8002f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f7e:	4b48      	ldr	r3, [pc, #288]	; (80030a0 <HAL_UART_MspInit+0x154>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	623b      	str	r3, [r7, #32]
 8002f88:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	4b44      	ldr	r3, [pc, #272]	; (80030a0 <HAL_UART_MspInit+0x154>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	4a43      	ldr	r2, [pc, #268]	; (80030a0 <HAL_UART_MspInit+0x154>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9a:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <HAL_UART_MspInit+0x154>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	61fb      	str	r3, [r7, #28]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002fa6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fb8:	2307      	movs	r3, #7
 8002fba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4838      	ldr	r0, [pc, #224]	; (80030a4 <HAL_UART_MspInit+0x158>)
 8002fc4:	f000 fb16 	bl	80035f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002fc8:	e063      	b.n	8003092 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a36      	ldr	r2, [pc, #216]	; (80030a8 <HAL_UART_MspInit+0x15c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d12c      	bne.n	800302e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61bb      	str	r3, [r7, #24]
 8002fd8:	4b31      	ldr	r3, [pc, #196]	; (80030a0 <HAL_UART_MspInit+0x154>)
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	4a30      	ldr	r2, [pc, #192]	; (80030a0 <HAL_UART_MspInit+0x154>)
 8002fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe4:	4b2e      	ldr	r3, [pc, #184]	; (80030a0 <HAL_UART_MspInit+0x154>)
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	4b2a      	ldr	r3, [pc, #168]	; (80030a0 <HAL_UART_MspInit+0x154>)
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	4a29      	ldr	r2, [pc, #164]	; (80030a0 <HAL_UART_MspInit+0x154>)
 8002ffa:	f043 0308 	orr.w	r3, r3, #8
 8002ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8003000:	4b27      	ldr	r3, [pc, #156]	; (80030a0 <HAL_UART_MspInit+0x154>)
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800300c:	2378      	movs	r3, #120	; 0x78
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	2302      	movs	r3, #2
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003018:	2303      	movs	r3, #3
 800301a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800301c:	2307      	movs	r3, #7
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003024:	4619      	mov	r1, r3
 8003026:	4821      	ldr	r0, [pc, #132]	; (80030ac <HAL_UART_MspInit+0x160>)
 8003028:	f000 fae4 	bl	80035f4 <HAL_GPIO_Init>
}
 800302c:	e031      	b.n	8003092 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <HAL_UART_MspInit+0x164>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d12c      	bne.n	8003092 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003038:	2300      	movs	r3, #0
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	4b18      	ldr	r3, [pc, #96]	; (80030a0 <HAL_UART_MspInit+0x154>)
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	4a17      	ldr	r2, [pc, #92]	; (80030a0 <HAL_UART_MspInit+0x154>)
 8003042:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003046:	6413      	str	r3, [r2, #64]	; 0x40
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_UART_MspInit+0x154>)
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <HAL_UART_MspInit+0x154>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	4a10      	ldr	r2, [pc, #64]	; (80030a0 <HAL_UART_MspInit+0x154>)
 800305e:	f043 0308 	orr.w	r3, r3, #8
 8003062:	6313      	str	r3, [r2, #48]	; 0x30
 8003064:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <HAL_UART_MspInit+0x154>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003070:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003076:	2302      	movs	r3, #2
 8003078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307e:	2303      	movs	r3, #3
 8003080:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003082:	2307      	movs	r3, #7
 8003084:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800308a:	4619      	mov	r1, r3
 800308c:	4807      	ldr	r0, [pc, #28]	; (80030ac <HAL_UART_MspInit+0x160>)
 800308e:	f000 fab1 	bl	80035f4 <HAL_GPIO_Init>
}
 8003092:	bf00      	nop
 8003094:	3738      	adds	r7, #56	; 0x38
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40011000 	.word	0x40011000
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40020000 	.word	0x40020000
 80030a8:	40004400 	.word	0x40004400
 80030ac:	40020c00 	.word	0x40020c00
 80030b0:	40004800 	.word	0x40004800

080030b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030b8:	e7fe      	b.n	80030b8 <NMI_Handler+0x4>

080030ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030be:	e7fe      	b.n	80030be <HardFault_Handler+0x4>

080030c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030c4:	e7fe      	b.n	80030c4 <MemManage_Handler+0x4>

080030c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ca:	e7fe      	b.n	80030ca <BusFault_Handler+0x4>

080030cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d0:	e7fe      	b.n	80030d0 <UsageFault_Handler+0x4>

080030d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030e4:	f000 f95c 	bl	80033a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80030e8:	f004 f908 	bl	80072fc <xTaskGetSchedulerState>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d001      	beq.n	80030f6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80030f2:	f004 fef1 	bl	8007ed8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}

080030fa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030fa:	b480      	push	{r7}
 80030fc:	af00      	add	r7, sp, #0
	return 1;
 80030fe:	2301      	movs	r3, #1
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <_kill>:

int _kill(int pid, int sig)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003114:	f006 f940 	bl	8009398 <__errno>
 8003118:	4603      	mov	r3, r0
 800311a:	2216      	movs	r2, #22
 800311c:	601a      	str	r2, [r3, #0]
	return -1;
 800311e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <_exit>:

void _exit (int status)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003132:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff ffe7 	bl	800310a <_kill>
	while (1) {}		/* Make sure we hang here */
 800313c:	e7fe      	b.n	800313c <_exit+0x12>

0800313e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b086      	sub	sp, #24
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e00a      	b.n	8003166 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003150:	f3af 8000 	nop.w
 8003154:	4601      	mov	r1, r0
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	60ba      	str	r2, [r7, #8]
 800315c:	b2ca      	uxtb	r2, r1
 800315e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	3301      	adds	r3, #1
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	429a      	cmp	r2, r3
 800316c:	dbf0      	blt.n	8003150 <_read+0x12>
	}

return len;
 800316e:	687b      	ldr	r3, [r7, #4]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	e009      	b.n	800319e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	60ba      	str	r2, [r7, #8]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	3301      	adds	r3, #1
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	dbf1      	blt.n	800318a <_write+0x12>
	}
	return len;
 80031a6:	687b      	ldr	r3, [r7, #4]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <_close>:

int _close(int file)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
	return -1;
 80031b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031d8:	605a      	str	r2, [r3, #4]
	return 0;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <_isatty>:

int _isatty(int file)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
	return 1;
 80031f0:	2301      	movs	r3, #1
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
	return 0;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003220:	4a14      	ldr	r2, [pc, #80]	; (8003274 <_sbrk+0x5c>)
 8003222:	4b15      	ldr	r3, [pc, #84]	; (8003278 <_sbrk+0x60>)
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800322c:	4b13      	ldr	r3, [pc, #76]	; (800327c <_sbrk+0x64>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d102      	bne.n	800323a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003234:	4b11      	ldr	r3, [pc, #68]	; (800327c <_sbrk+0x64>)
 8003236:	4a12      	ldr	r2, [pc, #72]	; (8003280 <_sbrk+0x68>)
 8003238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <_sbrk+0x64>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4413      	add	r3, r2
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	429a      	cmp	r2, r3
 8003246:	d207      	bcs.n	8003258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003248:	f006 f8a6 	bl	8009398 <__errno>
 800324c:	4603      	mov	r3, r0
 800324e:	220c      	movs	r2, #12
 8003250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003256:	e009      	b.n	800326c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003258:	4b08      	ldr	r3, [pc, #32]	; (800327c <_sbrk+0x64>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800325e:	4b07      	ldr	r3, [pc, #28]	; (800327c <_sbrk+0x64>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	4a05      	ldr	r2, [pc, #20]	; (800327c <_sbrk+0x64>)
 8003268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800326a:	68fb      	ldr	r3, [r7, #12]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	20020000 	.word	0x20020000
 8003278:	00000400 	.word	0x00000400
 800327c:	2000033c 	.word	0x2000033c
 8003280:	20004de8 	.word	0x20004de8

08003284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <SystemInit+0x20>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	4a05      	ldr	r2, [pc, #20]	; (80032a4 <SystemInit+0x20>)
 8003290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032ac:	480d      	ldr	r0, [pc, #52]	; (80032e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032ae:	490e      	ldr	r1, [pc, #56]	; (80032e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032b0:	4a0e      	ldr	r2, [pc, #56]	; (80032ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032b4:	e002      	b.n	80032bc <LoopCopyDataInit>

080032b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ba:	3304      	adds	r3, #4

080032bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032c0:	d3f9      	bcc.n	80032b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032c2:	4a0b      	ldr	r2, [pc, #44]	; (80032f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032c4:	4c0b      	ldr	r4, [pc, #44]	; (80032f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032c8:	e001      	b.n	80032ce <LoopFillZerobss>

080032ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032cc:	3204      	adds	r2, #4

080032ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032d0:	d3fb      	bcc.n	80032ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032d2:	f7ff ffd7 	bl	8003284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032d6:	f006 f865 	bl	80093a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032da:	f7fd ff7b 	bl	80011d4 <main>
  bx  lr    
 80032de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032e8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80032ec:	0800bbd8 	.word	0x0800bbd8
  ldr r2, =_sbss
 80032f0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80032f4:	20004de4 	.word	0x20004de4

080032f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032f8:	e7fe      	b.n	80032f8 <ADC_IRQHandler>
	...

080032fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003300:	4b0e      	ldr	r3, [pc, #56]	; (800333c <HAL_Init+0x40>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0d      	ldr	r2, [pc, #52]	; (800333c <HAL_Init+0x40>)
 8003306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800330a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <HAL_Init+0x40>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a0a      	ldr	r2, [pc, #40]	; (800333c <HAL_Init+0x40>)
 8003312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003316:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003318:	4b08      	ldr	r3, [pc, #32]	; (800333c <HAL_Init+0x40>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a07      	ldr	r2, [pc, #28]	; (800333c <HAL_Init+0x40>)
 800331e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003324:	2003      	movs	r0, #3
 8003326:	f000 f931 	bl	800358c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800332a:	200f      	movs	r0, #15
 800332c:	f000 f808 	bl	8003340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003330:	f7ff fd64 	bl	8002dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40023c00 	.word	0x40023c00

08003340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003348:	4b12      	ldr	r3, [pc, #72]	; (8003394 <HAL_InitTick+0x54>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_InitTick+0x58>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	4619      	mov	r1, r3
 8003352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003356:	fbb3 f3f1 	udiv	r3, r3, r1
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f93b 	bl	80035da <HAL_SYSTICK_Config>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e00e      	b.n	800338c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b0f      	cmp	r3, #15
 8003372:	d80a      	bhi.n	800338a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003374:	2200      	movs	r2, #0
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800337c:	f000 f911 	bl	80035a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003380:	4a06      	ldr	r2, [pc, #24]	; (800339c <HAL_InitTick+0x5c>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e000      	b.n	800338c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
}
 800338c:	4618      	mov	r0, r3
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20000004 	.word	0x20000004
 8003398:	2000000c 	.word	0x2000000c
 800339c:	20000008 	.word	0x20000008

080033a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_IncTick+0x20>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_IncTick+0x24>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4413      	add	r3, r2
 80033b0:	4a04      	ldr	r2, [pc, #16]	; (80033c4 <HAL_IncTick+0x24>)
 80033b2:	6013      	str	r3, [r2, #0]
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	2000000c 	.word	0x2000000c
 80033c4:	20000340 	.word	0x20000340

080033c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return uwTick;
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <HAL_GetTick+0x14>)
 80033ce:	681b      	ldr	r3, [r3, #0]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000340 	.word	0x20000340

080033e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033e8:	f7ff ffee 	bl	80033c8 <HAL_GetTick>
 80033ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033f8:	d005      	beq.n	8003406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033fa:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <HAL_Delay+0x44>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4413      	add	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003406:	bf00      	nop
 8003408:	f7ff ffde 	bl	80033c8 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	429a      	cmp	r2, r3
 8003416:	d8f7      	bhi.n	8003408 <HAL_Delay+0x28>
  {
  }
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	2000000c 	.word	0x2000000c

08003428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <__NVIC_SetPriorityGrouping+0x44>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003444:	4013      	ands	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800345a:	4a04      	ldr	r2, [pc, #16]	; (800346c <__NVIC_SetPriorityGrouping+0x44>)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	60d3      	str	r3, [r2, #12]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	e000ed00 	.word	0xe000ed00

08003470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <__NVIC_GetPriorityGrouping+0x18>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	0a1b      	lsrs	r3, r3, #8
 800347a:	f003 0307 	and.w	r3, r3, #7
}
 800347e:	4618      	mov	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	6039      	str	r1, [r7, #0]
 8003496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349c:	2b00      	cmp	r3, #0
 800349e:	db0a      	blt.n	80034b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	490c      	ldr	r1, [pc, #48]	; (80034d8 <__NVIC_SetPriority+0x4c>)
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	0112      	lsls	r2, r2, #4
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	440b      	add	r3, r1
 80034b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b4:	e00a      	b.n	80034cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4908      	ldr	r1, [pc, #32]	; (80034dc <__NVIC_SetPriority+0x50>)
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	3b04      	subs	r3, #4
 80034c4:	0112      	lsls	r2, r2, #4
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	440b      	add	r3, r1
 80034ca:	761a      	strb	r2, [r3, #24]
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000e100 	.word	0xe000e100
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b089      	sub	sp, #36	; 0x24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f1c3 0307 	rsb	r3, r3, #7
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	bf28      	it	cs
 80034fe:	2304      	movcs	r3, #4
 8003500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3304      	adds	r3, #4
 8003506:	2b06      	cmp	r3, #6
 8003508:	d902      	bls.n	8003510 <NVIC_EncodePriority+0x30>
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3b03      	subs	r3, #3
 800350e:	e000      	b.n	8003512 <NVIC_EncodePriority+0x32>
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43da      	mvns	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	401a      	ands	r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003528:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	fa01 f303 	lsl.w	r3, r1, r3
 8003532:	43d9      	mvns	r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003538:	4313      	orrs	r3, r2
         );
}
 800353a:	4618      	mov	r0, r3
 800353c:	3724      	adds	r7, #36	; 0x24
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003558:	d301      	bcc.n	800355e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800355a:	2301      	movs	r3, #1
 800355c:	e00f      	b.n	800357e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800355e:	4a0a      	ldr	r2, [pc, #40]	; (8003588 <SysTick_Config+0x40>)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3b01      	subs	r3, #1
 8003564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003566:	210f      	movs	r1, #15
 8003568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800356c:	f7ff ff8e 	bl	800348c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <SysTick_Config+0x40>)
 8003572:	2200      	movs	r2, #0
 8003574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003576:	4b04      	ldr	r3, [pc, #16]	; (8003588 <SysTick_Config+0x40>)
 8003578:	2207      	movs	r2, #7
 800357a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	e000e010 	.word	0xe000e010

0800358c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff ff47 	bl	8003428 <__NVIC_SetPriorityGrouping>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	4603      	mov	r3, r0
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035b4:	f7ff ff5c 	bl	8003470 <__NVIC_GetPriorityGrouping>
 80035b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	6978      	ldr	r0, [r7, #20]
 80035c0:	f7ff ff8e 	bl	80034e0 <NVIC_EncodePriority>
 80035c4:	4602      	mov	r2, r0
 80035c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff ff5d 	bl	800348c <__NVIC_SetPriority>
}
 80035d2:	bf00      	nop
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff ffb0 	bl	8003548 <SysTick_Config>
 80035e8:	4603      	mov	r3, r0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b089      	sub	sp, #36	; 0x24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	e16b      	b.n	80038e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003610:	2201      	movs	r2, #1
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	429a      	cmp	r2, r3
 800362a:	f040 815a 	bne.w	80038e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b01      	cmp	r3, #1
 8003638:	d005      	beq.n	8003646 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003642:	2b02      	cmp	r3, #2
 8003644:	d130      	bne.n	80036a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2203      	movs	r2, #3
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800367c:	2201      	movs	r2, #1
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 0201 	and.w	r2, r3, #1
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d017      	beq.n	80036e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	2203      	movs	r2, #3
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d123      	bne.n	8003738 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	08da      	lsrs	r2, r3, #3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3208      	adds	r2, #8
 80036f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	220f      	movs	r2, #15
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	08da      	lsrs	r2, r3, #3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3208      	adds	r2, #8
 8003732:	69b9      	ldr	r1, [r7, #24]
 8003734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	2203      	movs	r2, #3
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0203 	and.w	r2, r3, #3
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80b4 	beq.w	80038e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	4b60      	ldr	r3, [pc, #384]	; (8003900 <HAL_GPIO_Init+0x30c>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	4a5f      	ldr	r2, [pc, #380]	; (8003900 <HAL_GPIO_Init+0x30c>)
 8003784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003788:	6453      	str	r3, [r2, #68]	; 0x44
 800378a:	4b5d      	ldr	r3, [pc, #372]	; (8003900 <HAL_GPIO_Init+0x30c>)
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003796:	4a5b      	ldr	r2, [pc, #364]	; (8003904 <HAL_GPIO_Init+0x310>)
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	3302      	adds	r3, #2
 800379e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	220f      	movs	r2, #15
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a52      	ldr	r2, [pc, #328]	; (8003908 <HAL_GPIO_Init+0x314>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d02b      	beq.n	800381a <HAL_GPIO_Init+0x226>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a51      	ldr	r2, [pc, #324]	; (800390c <HAL_GPIO_Init+0x318>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d025      	beq.n	8003816 <HAL_GPIO_Init+0x222>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a50      	ldr	r2, [pc, #320]	; (8003910 <HAL_GPIO_Init+0x31c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d01f      	beq.n	8003812 <HAL_GPIO_Init+0x21e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a4f      	ldr	r2, [pc, #316]	; (8003914 <HAL_GPIO_Init+0x320>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d019      	beq.n	800380e <HAL_GPIO_Init+0x21a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a4e      	ldr	r2, [pc, #312]	; (8003918 <HAL_GPIO_Init+0x324>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_GPIO_Init+0x216>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a4d      	ldr	r2, [pc, #308]	; (800391c <HAL_GPIO_Init+0x328>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00d      	beq.n	8003806 <HAL_GPIO_Init+0x212>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a4c      	ldr	r2, [pc, #304]	; (8003920 <HAL_GPIO_Init+0x32c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d007      	beq.n	8003802 <HAL_GPIO_Init+0x20e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a4b      	ldr	r2, [pc, #300]	; (8003924 <HAL_GPIO_Init+0x330>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <HAL_GPIO_Init+0x20a>
 80037fa:	2307      	movs	r3, #7
 80037fc:	e00e      	b.n	800381c <HAL_GPIO_Init+0x228>
 80037fe:	2308      	movs	r3, #8
 8003800:	e00c      	b.n	800381c <HAL_GPIO_Init+0x228>
 8003802:	2306      	movs	r3, #6
 8003804:	e00a      	b.n	800381c <HAL_GPIO_Init+0x228>
 8003806:	2305      	movs	r3, #5
 8003808:	e008      	b.n	800381c <HAL_GPIO_Init+0x228>
 800380a:	2304      	movs	r3, #4
 800380c:	e006      	b.n	800381c <HAL_GPIO_Init+0x228>
 800380e:	2303      	movs	r3, #3
 8003810:	e004      	b.n	800381c <HAL_GPIO_Init+0x228>
 8003812:	2302      	movs	r3, #2
 8003814:	e002      	b.n	800381c <HAL_GPIO_Init+0x228>
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <HAL_GPIO_Init+0x228>
 800381a:	2300      	movs	r3, #0
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	f002 0203 	and.w	r2, r2, #3
 8003822:	0092      	lsls	r2, r2, #2
 8003824:	4093      	lsls	r3, r2
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800382c:	4935      	ldr	r1, [pc, #212]	; (8003904 <HAL_GPIO_Init+0x310>)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	3302      	adds	r3, #2
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800383a:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <HAL_GPIO_Init+0x334>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800385e:	4a32      	ldr	r2, [pc, #200]	; (8003928 <HAL_GPIO_Init+0x334>)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003864:	4b30      	ldr	r3, [pc, #192]	; (8003928 <HAL_GPIO_Init+0x334>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003888:	4a27      	ldr	r2, [pc, #156]	; (8003928 <HAL_GPIO_Init+0x334>)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800388e:	4b26      	ldr	r3, [pc, #152]	; (8003928 <HAL_GPIO_Init+0x334>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038b2:	4a1d      	ldr	r2, [pc, #116]	; (8003928 <HAL_GPIO_Init+0x334>)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038b8:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <HAL_GPIO_Init+0x334>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038dc:	4a12      	ldr	r2, [pc, #72]	; (8003928 <HAL_GPIO_Init+0x334>)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3301      	adds	r3, #1
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b0f      	cmp	r3, #15
 80038ec:	f67f ae90 	bls.w	8003610 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	3724      	adds	r7, #36	; 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800
 8003904:	40013800 	.word	0x40013800
 8003908:	40020000 	.word	0x40020000
 800390c:	40020400 	.word	0x40020400
 8003910:	40020800 	.word	0x40020800
 8003914:	40020c00 	.word	0x40020c00
 8003918:	40021000 	.word	0x40021000
 800391c:	40021400 	.word	0x40021400
 8003920:	40021800 	.word	0x40021800
 8003924:	40021c00 	.word	0x40021c00
 8003928:	40013c00 	.word	0x40013c00

0800392c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	807b      	strh	r3, [r7, #2]
 8003938:	4613      	mov	r3, r2
 800393a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800393c:	787b      	ldrb	r3, [r7, #1]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003942:	887a      	ldrh	r2, [r7, #2]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003948:	e003      	b.n	8003952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800394a:	887b      	ldrh	r3, [r7, #2]
 800394c:	041a      	lsls	r2, r3, #16
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	619a      	str	r2, [r3, #24]
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e12b      	b.n	8003bca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff fa64 	bl	8002e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	; 0x24
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039c4:	f001 fb92 	bl	80050ec <HAL_RCC_GetPCLK1Freq>
 80039c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4a81      	ldr	r2, [pc, #516]	; (8003bd4 <HAL_I2C_Init+0x274>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d807      	bhi.n	80039e4 <HAL_I2C_Init+0x84>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4a80      	ldr	r2, [pc, #512]	; (8003bd8 <HAL_I2C_Init+0x278>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	bf94      	ite	ls
 80039dc:	2301      	movls	r3, #1
 80039de:	2300      	movhi	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	e006      	b.n	80039f2 <HAL_I2C_Init+0x92>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a7d      	ldr	r2, [pc, #500]	; (8003bdc <HAL_I2C_Init+0x27c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	bf94      	ite	ls
 80039ec:	2301      	movls	r3, #1
 80039ee:	2300      	movhi	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e0e7      	b.n	8003bca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4a78      	ldr	r2, [pc, #480]	; (8003be0 <HAL_I2C_Init+0x280>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	0c9b      	lsrs	r3, r3, #18
 8003a04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4a6a      	ldr	r2, [pc, #424]	; (8003bd4 <HAL_I2C_Init+0x274>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d802      	bhi.n	8003a34 <HAL_I2C_Init+0xd4>
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	3301      	adds	r3, #1
 8003a32:	e009      	b.n	8003a48 <HAL_I2C_Init+0xe8>
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	4a69      	ldr	r2, [pc, #420]	; (8003be4 <HAL_I2C_Init+0x284>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	3301      	adds	r3, #1
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	495c      	ldr	r1, [pc, #368]	; (8003bd4 <HAL_I2C_Init+0x274>)
 8003a64:	428b      	cmp	r3, r1
 8003a66:	d819      	bhi.n	8003a9c <HAL_I2C_Init+0x13c>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1e59      	subs	r1, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a76:	1c59      	adds	r1, r3, #1
 8003a78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a7c:	400b      	ands	r3, r1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_I2C_Init+0x138>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1e59      	subs	r1, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a90:	3301      	adds	r3, #1
 8003a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a96:	e051      	b.n	8003b3c <HAL_I2C_Init+0x1dc>
 8003a98:	2304      	movs	r3, #4
 8003a9a:	e04f      	b.n	8003b3c <HAL_I2C_Init+0x1dc>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d111      	bne.n	8003ac8 <HAL_I2C_Init+0x168>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1e58      	subs	r0, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	440b      	add	r3, r1
 8003ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	e012      	b.n	8003aee <HAL_I2C_Init+0x18e>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1e58      	subs	r0, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6859      	ldr	r1, [r3, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	0099      	lsls	r1, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bf0c      	ite	eq
 8003ae8:	2301      	moveq	r3, #1
 8003aea:	2300      	movne	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_I2C_Init+0x196>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e022      	b.n	8003b3c <HAL_I2C_Init+0x1dc>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10e      	bne.n	8003b1c <HAL_I2C_Init+0x1bc>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1e58      	subs	r0, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6859      	ldr	r1, [r3, #4]
 8003b06:	460b      	mov	r3, r1
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	440b      	add	r3, r1
 8003b0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b10:	3301      	adds	r3, #1
 8003b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b1a:	e00f      	b.n	8003b3c <HAL_I2C_Init+0x1dc>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	1e58      	subs	r0, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	0099      	lsls	r1, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b32:	3301      	adds	r3, #1
 8003b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	6809      	ldr	r1, [r1, #0]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69da      	ldr	r2, [r3, #28]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6911      	ldr	r1, [r2, #16]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	68d2      	ldr	r2, [r2, #12]
 8003b76:	4311      	orrs	r1, r2
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	000186a0 	.word	0x000186a0
 8003bd8:	001e847f 	.word	0x001e847f
 8003bdc:	003d08ff 	.word	0x003d08ff
 8003be0:	431bde83 	.word	0x431bde83
 8003be4:	10624dd3 	.word	0x10624dd3

08003be8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	817b      	strh	r3, [r7, #10]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bfc:	f7ff fbe4 	bl	80033c8 <HAL_GetTick>
 8003c00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	f040 80e0 	bne.w	8003dd0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	2319      	movs	r3, #25
 8003c16:	2201      	movs	r2, #1
 8003c18:	4970      	ldr	r1, [pc, #448]	; (8003ddc <HAL_I2C_Master_Transmit+0x1f4>)
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fc58 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
 8003c28:	e0d3      	b.n	8003dd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_I2C_Master_Transmit+0x50>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e0cc      	b.n	8003dd2 <HAL_I2C_Master_Transmit+0x1ea>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d007      	beq.n	8003c5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0201 	orr.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2221      	movs	r2, #33	; 0x21
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2210      	movs	r2, #16
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	893a      	ldrh	r2, [r7, #8]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a50      	ldr	r2, [pc, #320]	; (8003de0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ca0:	8979      	ldrh	r1, [r7, #10]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	6a3a      	ldr	r2, [r7, #32]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 fac2 	bl	8004230 <I2C_MasterRequestWrite>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e08d      	b.n	8003dd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ccc:	e066      	b.n	8003d9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	6a39      	ldr	r1, [r7, #32]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fcd2 	bl	800467c <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00d      	beq.n	8003cfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d107      	bne.n	8003cf6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e06b      	b.n	8003dd2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	781a      	ldrb	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d11b      	bne.n	8003d70 <HAL_I2C_Master_Transmit+0x188>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d017      	beq.n	8003d70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	781a      	ldrb	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	6a39      	ldr	r1, [r7, #32]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 fcc2 	bl	80046fe <I2C_WaitOnBTFFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00d      	beq.n	8003d9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d107      	bne.n	8003d98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e01a      	b.n	8003dd2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d194      	bne.n	8003cce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e000      	b.n	8003dd2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	00100002 	.word	0x00100002
 8003de0:	ffff0000 	.word	0xffff0000

08003de4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08c      	sub	sp, #48	; 0x30
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	461a      	mov	r2, r3
 8003df0:	460b      	mov	r3, r1
 8003df2:	817b      	strh	r3, [r7, #10]
 8003df4:	4613      	mov	r3, r2
 8003df6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003df8:	f7ff fae6 	bl	80033c8 <HAL_GetTick>
 8003dfc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b20      	cmp	r3, #32
 8003e08:	f040 820b 	bne.w	8004222 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	2319      	movs	r3, #25
 8003e12:	2201      	movs	r2, #1
 8003e14:	497c      	ldr	r1, [pc, #496]	; (8004008 <HAL_I2C_Master_Receive+0x224>)
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 fb5a 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
 8003e24:	e1fe      	b.n	8004224 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_I2C_Master_Receive+0x50>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e1f7      	b.n	8004224 <HAL_I2C_Master_Receive+0x440>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d007      	beq.n	8003e5a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0201 	orr.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2222      	movs	r2, #34	; 0x22
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2210      	movs	r2, #16
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	893a      	ldrh	r2, [r7, #8]
 8003e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4a5c      	ldr	r2, [pc, #368]	; (800400c <HAL_I2C_Master_Receive+0x228>)
 8003e9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e9c:	8979      	ldrh	r1, [r7, #10]
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 fa46 	bl	8004334 <I2C_MasterRequestRead>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e1b8      	b.n	8004224 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d113      	bne.n	8003ee2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	623b      	str	r3, [r7, #32]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	623b      	str	r3, [r7, #32]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	623b      	str	r3, [r7, #32]
 8003ece:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e18c      	b.n	80041fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d11b      	bne.n	8003f22 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	e16c      	b.n	80041fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d11b      	bne.n	8003f62 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	61bb      	str	r3, [r7, #24]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	e14c      	b.n	80041fc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f88:	e138      	b.n	80041fc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	f200 80f1 	bhi.w	8004176 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d123      	bne.n	8003fe4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 fbed 	bl	8004780 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e139      	b.n	8004224 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fe2:	e10b      	b.n	80041fc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d14e      	bne.n	800408a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	4906      	ldr	r1, [pc, #24]	; (8004010 <HAL_I2C_Master_Receive+0x22c>)
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 fa6a 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e10e      	b.n	8004224 <HAL_I2C_Master_Receive+0x440>
 8004006:	bf00      	nop
 8004008:	00100002 	.word	0x00100002
 800400c:	ffff0000 	.word	0xffff0000
 8004010:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691a      	ldr	r2, [r3, #16]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004088:	e0b8      	b.n	80041fc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	2200      	movs	r2, #0
 8004092:	4966      	ldr	r1, [pc, #408]	; (800422c <HAL_I2C_Master_Receive+0x448>)
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fa1b 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0bf      	b.n	8004224 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	2200      	movs	r2, #0
 80040ee:	494f      	ldr	r1, [pc, #316]	; (800422c <HAL_I2C_Master_Receive+0x448>)
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f9ed 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e091      	b.n	8004224 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004174:	e042      	b.n	80041fc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004178:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fb00 	bl	8004780 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e04c      	b.n	8004224 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	b2d2      	uxtb	r2, r2
 8004196:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d118      	bne.n	80041fc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004200:	2b00      	cmp	r3, #0
 8004202:	f47f aec2 	bne.w	8003f8a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	e000      	b.n	8004224 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004222:	2302      	movs	r3, #2
  }
}
 8004224:	4618      	mov	r0, r3
 8004226:	3728      	adds	r7, #40	; 0x28
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	00010004 	.word	0x00010004

08004230 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af02      	add	r7, sp, #8
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	607a      	str	r2, [r7, #4]
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	460b      	mov	r3, r1
 800423e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d006      	beq.n	800425a <I2C_MasterRequestWrite+0x2a>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d003      	beq.n	800425a <I2C_MasterRequestWrite+0x2a>
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004258:	d108      	bne.n	800426c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	e00b      	b.n	8004284 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	2b12      	cmp	r3, #18
 8004272:	d107      	bne.n	8004284 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004282:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f91d 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00d      	beq.n	80042b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042aa:	d103      	bne.n	80042b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e035      	b.n	8004324 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042c0:	d108      	bne.n	80042d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042c2:	897b      	ldrh	r3, [r7, #10]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042d0:	611a      	str	r2, [r3, #16]
 80042d2:	e01b      	b.n	800430c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042d4:	897b      	ldrh	r3, [r7, #10]
 80042d6:	11db      	asrs	r3, r3, #7
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	f003 0306 	and.w	r3, r3, #6
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f063 030f 	orn	r3, r3, #15
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	490e      	ldr	r1, [pc, #56]	; (800432c <I2C_MasterRequestWrite+0xfc>)
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f943 	bl	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e010      	b.n	8004324 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004302:	897b      	ldrh	r3, [r7, #10]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	4907      	ldr	r1, [pc, #28]	; (8004330 <I2C_MasterRequestWrite+0x100>)
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 f933 	bl	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	00010008 	.word	0x00010008
 8004330:	00010002 	.word	0x00010002

08004334 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	607a      	str	r2, [r7, #4]
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	460b      	mov	r3, r1
 8004342:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004358:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b08      	cmp	r3, #8
 800435e:	d006      	beq.n	800436e <I2C_MasterRequestRead+0x3a>
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d003      	beq.n	800436e <I2C_MasterRequestRead+0x3a>
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800436c:	d108      	bne.n	8004380 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e00b      	b.n	8004398 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	2b11      	cmp	r3, #17
 8004386:	d107      	bne.n	8004398 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004396:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f893 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00d      	beq.n	80043cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043be:	d103      	bne.n	80043c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e079      	b.n	80044c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043d4:	d108      	bne.n	80043e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043d6:	897b      	ldrh	r3, [r7, #10]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	611a      	str	r2, [r3, #16]
 80043e6:	e05f      	b.n	80044a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043e8:	897b      	ldrh	r3, [r7, #10]
 80043ea:	11db      	asrs	r3, r3, #7
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f003 0306 	and.w	r3, r3, #6
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f063 030f 	orn	r3, r3, #15
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	4930      	ldr	r1, [pc, #192]	; (80044c8 <I2C_MasterRequestRead+0x194>)
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f8b9 	bl	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e054      	b.n	80044c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004416:	897b      	ldrh	r3, [r7, #10]
 8004418:	b2da      	uxtb	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	4929      	ldr	r1, [pc, #164]	; (80044cc <I2C_MasterRequestRead+0x198>)
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f8a9 	bl	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e044      	b.n	80044c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004436:	2300      	movs	r3, #0
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800445a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f831 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00d      	beq.n	8004490 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004482:	d103      	bne.n	800448c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800448a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e017      	b.n	80044c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004490:	897b      	ldrh	r3, [r7, #10]
 8004492:	11db      	asrs	r3, r3, #7
 8004494:	b2db      	uxtb	r3, r3
 8004496:	f003 0306 	and.w	r3, r3, #6
 800449a:	b2db      	uxtb	r3, r3
 800449c:	f063 030e 	orn	r3, r3, #14
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4907      	ldr	r1, [pc, #28]	; (80044cc <I2C_MasterRequestRead+0x198>)
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f865 	bl	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	00010008 	.word	0x00010008
 80044cc:	00010002 	.word	0x00010002

080044d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e0:	e025      	b.n	800452e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e8:	d021      	beq.n	800452e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ea:	f7fe ff6d 	bl	80033c8 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d302      	bcc.n	8004500 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d116      	bne.n	800452e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f043 0220 	orr.w	r2, r3, #32
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e023      	b.n	8004576 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d10d      	bne.n	8004554 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	43da      	mvns	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4013      	ands	r3, r2
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	bf0c      	ite	eq
 800454a:	2301      	moveq	r3, #1
 800454c:	2300      	movne	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	e00c      	b.n	800456e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	43da      	mvns	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4013      	ands	r3, r2
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	bf0c      	ite	eq
 8004566:	2301      	moveq	r3, #1
 8004568:	2300      	movne	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	461a      	mov	r2, r3
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	429a      	cmp	r2, r3
 8004572:	d0b6      	beq.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800458c:	e051      	b.n	8004632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459c:	d123      	bne.n	80045e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f043 0204 	orr.w	r2, r3, #4
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e046      	b.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ec:	d021      	beq.n	8004632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ee:	f7fe feeb 	bl	80033c8 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d302      	bcc.n	8004604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d116      	bne.n	8004632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2220      	movs	r2, #32
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f043 0220 	orr.w	r2, r3, #32
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e020      	b.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	0c1b      	lsrs	r3, r3, #16
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d10c      	bne.n	8004656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	43da      	mvns	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4013      	ands	r3, r2
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	bf14      	ite	ne
 800464e:	2301      	movne	r3, #1
 8004650:	2300      	moveq	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	e00b      	b.n	800466e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	43da      	mvns	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4013      	ands	r3, r2
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf14      	ite	ne
 8004668:	2301      	movne	r3, #1
 800466a:	2300      	moveq	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d18d      	bne.n	800458e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004688:	e02d      	b.n	80046e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 f8ce 	bl	800482c <I2C_IsAcknowledgeFailed>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e02d      	b.n	80046f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a0:	d021      	beq.n	80046e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a2:	f7fe fe91 	bl	80033c8 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d302      	bcc.n	80046b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d116      	bne.n	80046e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f043 0220 	orr.w	r2, r3, #32
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e007      	b.n	80046f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f0:	2b80      	cmp	r3, #128	; 0x80
 80046f2:	d1ca      	bne.n	800468a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800470a:	e02d      	b.n	8004768 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f88d 	bl	800482c <I2C_IsAcknowledgeFailed>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e02d      	b.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004722:	d021      	beq.n	8004768 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004724:	f7fe fe50 	bl	80033c8 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	429a      	cmp	r2, r3
 8004732:	d302      	bcc.n	800473a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d116      	bne.n	8004768 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	f043 0220 	orr.w	r2, r3, #32
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e007      	b.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b04      	cmp	r3, #4
 8004774:	d1ca      	bne.n	800470c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800478c:	e042      	b.n	8004814 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b10      	cmp	r3, #16
 800479a:	d119      	bne.n	80047d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0210 	mvn.w	r2, #16
 80047a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e029      	b.n	8004824 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d0:	f7fe fdfa 	bl	80033c8 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d302      	bcc.n	80047e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d116      	bne.n	8004814 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	f043 0220 	orr.w	r2, r3, #32
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e007      	b.n	8004824 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481e:	2b40      	cmp	r3, #64	; 0x40
 8004820:	d1b5      	bne.n	800478e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004842:	d11b      	bne.n	800487c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800484c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	f043 0204 	orr.w	r2, r3, #4
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e267      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d075      	beq.n	8004996 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048aa:	4b88      	ldr	r3, [pc, #544]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d00c      	beq.n	80048d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048b6:	4b85      	ldr	r3, [pc, #532]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d112      	bne.n	80048e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c2:	4b82      	ldr	r3, [pc, #520]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ce:	d10b      	bne.n	80048e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d0:	4b7e      	ldr	r3, [pc, #504]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d05b      	beq.n	8004994 <HAL_RCC_OscConfig+0x108>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d157      	bne.n	8004994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e242      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f0:	d106      	bne.n	8004900 <HAL_RCC_OscConfig+0x74>
 80048f2:	4b76      	ldr	r3, [pc, #472]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a75      	ldr	r2, [pc, #468]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 80048f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e01d      	b.n	800493c <HAL_RCC_OscConfig+0xb0>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004908:	d10c      	bne.n	8004924 <HAL_RCC_OscConfig+0x98>
 800490a:	4b70      	ldr	r3, [pc, #448]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a6f      	ldr	r2, [pc, #444]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 8004910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	4b6d      	ldr	r3, [pc, #436]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a6c      	ldr	r2, [pc, #432]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	e00b      	b.n	800493c <HAL_RCC_OscConfig+0xb0>
 8004924:	4b69      	ldr	r3, [pc, #420]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a68      	ldr	r2, [pc, #416]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 800492a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	4b66      	ldr	r3, [pc, #408]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a65      	ldr	r2, [pc, #404]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 8004936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800493a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d013      	beq.n	800496c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004944:	f7fe fd40 	bl	80033c8 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800494c:	f7fe fd3c 	bl	80033c8 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	; 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e207      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495e:	4b5b      	ldr	r3, [pc, #364]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0xc0>
 800496a:	e014      	b.n	8004996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496c:	f7fe fd2c 	bl	80033c8 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004974:	f7fe fd28 	bl	80033c8 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	; 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e1f3      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004986:	4b51      	ldr	r3, [pc, #324]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0xe8>
 8004992:	e000      	b.n	8004996 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d063      	beq.n	8004a6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049a2:	4b4a      	ldr	r3, [pc, #296]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00b      	beq.n	80049c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ae:	4b47      	ldr	r3, [pc, #284]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d11c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ba:	4b44      	ldr	r3, [pc, #272]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d116      	bne.n	80049f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c6:	4b41      	ldr	r3, [pc, #260]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <HAL_RCC_OscConfig+0x152>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d001      	beq.n	80049de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e1c7      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049de:	4b3b      	ldr	r3, [pc, #236]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	4937      	ldr	r1, [pc, #220]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049f2:	e03a      	b.n	8004a6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d020      	beq.n	8004a3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049fc:	4b34      	ldr	r3, [pc, #208]	; (8004ad0 <HAL_RCC_OscConfig+0x244>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a02:	f7fe fce1 	bl	80033c8 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a0a:	f7fe fcdd 	bl	80033c8 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e1a8      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1c:	4b2b      	ldr	r3, [pc, #172]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a28:	4b28      	ldr	r3, [pc, #160]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4925      	ldr	r1, [pc, #148]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	600b      	str	r3, [r1, #0]
 8004a3c:	e015      	b.n	8004a6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a3e:	4b24      	ldr	r3, [pc, #144]	; (8004ad0 <HAL_RCC_OscConfig+0x244>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fe fcc0 	bl	80033c8 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a4c:	f7fe fcbc 	bl	80033c8 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e187      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5e:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d036      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d016      	beq.n	8004aac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a7e:	4b15      	ldr	r3, [pc, #84]	; (8004ad4 <HAL_RCC_OscConfig+0x248>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a84:	f7fe fca0 	bl	80033c8 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a8c:	f7fe fc9c 	bl	80033c8 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e167      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9e:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <HAL_RCC_OscConfig+0x240>)
 8004aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f0      	beq.n	8004a8c <HAL_RCC_OscConfig+0x200>
 8004aaa:	e01b      	b.n	8004ae4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aac:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <HAL_RCC_OscConfig+0x248>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab2:	f7fe fc89 	bl	80033c8 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab8:	e00e      	b.n	8004ad8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aba:	f7fe fc85 	bl	80033c8 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d907      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e150      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	42470000 	.word	0x42470000
 8004ad4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad8:	4b88      	ldr	r3, [pc, #544]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1ea      	bne.n	8004aba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 8097 	beq.w	8004c20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004af2:	2300      	movs	r3, #0
 8004af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004af6:	4b81      	ldr	r3, [pc, #516]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10f      	bne.n	8004b22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b02:	2300      	movs	r3, #0
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	4b7d      	ldr	r3, [pc, #500]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	4a7c      	ldr	r2, [pc, #496]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b10:	6413      	str	r3, [r2, #64]	; 0x40
 8004b12:	4b7a      	ldr	r3, [pc, #488]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b22:	4b77      	ldr	r3, [pc, #476]	; (8004d00 <HAL_RCC_OscConfig+0x474>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d118      	bne.n	8004b60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b2e:	4b74      	ldr	r3, [pc, #464]	; (8004d00 <HAL_RCC_OscConfig+0x474>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a73      	ldr	r2, [pc, #460]	; (8004d00 <HAL_RCC_OscConfig+0x474>)
 8004b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b3a:	f7fe fc45 	bl	80033c8 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b42:	f7fe fc41 	bl	80033c8 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e10c      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b54:	4b6a      	ldr	r3, [pc, #424]	; (8004d00 <HAL_RCC_OscConfig+0x474>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d106      	bne.n	8004b76 <HAL_RCC_OscConfig+0x2ea>
 8004b68:	4b64      	ldr	r3, [pc, #400]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6c:	4a63      	ldr	r2, [pc, #396]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b6e:	f043 0301 	orr.w	r3, r3, #1
 8004b72:	6713      	str	r3, [r2, #112]	; 0x70
 8004b74:	e01c      	b.n	8004bb0 <HAL_RCC_OscConfig+0x324>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b05      	cmp	r3, #5
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x30c>
 8004b7e:	4b5f      	ldr	r3, [pc, #380]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b82:	4a5e      	ldr	r2, [pc, #376]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b84:	f043 0304 	orr.w	r3, r3, #4
 8004b88:	6713      	str	r3, [r2, #112]	; 0x70
 8004b8a:	4b5c      	ldr	r3, [pc, #368]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8e:	4a5b      	ldr	r2, [pc, #364]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	6713      	str	r3, [r2, #112]	; 0x70
 8004b96:	e00b      	b.n	8004bb0 <HAL_RCC_OscConfig+0x324>
 8004b98:	4b58      	ldr	r3, [pc, #352]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	4a57      	ldr	r2, [pc, #348]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b9e:	f023 0301 	bic.w	r3, r3, #1
 8004ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba4:	4b55      	ldr	r3, [pc, #340]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	4a54      	ldr	r2, [pc, #336]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004baa:	f023 0304 	bic.w	r3, r3, #4
 8004bae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d015      	beq.n	8004be4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb8:	f7fe fc06 	bl	80033c8 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bbe:	e00a      	b.n	8004bd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc0:	f7fe fc02 	bl	80033c8 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e0cb      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd6:	4b49      	ldr	r3, [pc, #292]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0ee      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x334>
 8004be2:	e014      	b.n	8004c0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004be4:	f7fe fbf0 	bl	80033c8 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bea:	e00a      	b.n	8004c02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bec:	f7fe fbec 	bl	80033c8 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e0b5      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c02:	4b3e      	ldr	r3, [pc, #248]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1ee      	bne.n	8004bec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d105      	bne.n	8004c20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c14:	4b39      	ldr	r3, [pc, #228]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	4a38      	ldr	r2, [pc, #224]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 80a1 	beq.w	8004d6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c2a:	4b34      	ldr	r3, [pc, #208]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 030c 	and.w	r3, r3, #12
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	d05c      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d141      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3e:	4b31      	ldr	r3, [pc, #196]	; (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fe fbc0 	bl	80033c8 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fe fbbc 	bl	80033c8 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e087      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5e:	4b27      	ldr	r3, [pc, #156]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69da      	ldr	r2, [r3, #28]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	019b      	lsls	r3, r3, #6
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c80:	085b      	lsrs	r3, r3, #1
 8004c82:	3b01      	subs	r3, #1
 8004c84:	041b      	lsls	r3, r3, #16
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	061b      	lsls	r3, r3, #24
 8004c8e:	491b      	ldr	r1, [pc, #108]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c94:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9a:	f7fe fb95 	bl	80033c8 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ca2:	f7fe fb91 	bl	80033c8 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e05c      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x416>
 8004cc0:	e054      	b.n	8004d6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc2:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc8:	f7fe fb7e 	bl	80033c8 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fe fb7a 	bl	80033c8 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e045      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce2:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x444>
 8004cee:	e03d      	b.n	8004d6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d107      	bne.n	8004d08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e038      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	40007000 	.word	0x40007000
 8004d04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d08:	4b1b      	ldr	r3, [pc, #108]	; (8004d78 <HAL_RCC_OscConfig+0x4ec>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d028      	beq.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d121      	bne.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d11a      	bne.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d38:	4013      	ands	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d111      	bne.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	085b      	lsrs	r3, r3, #1
 8004d50:	3b01      	subs	r3, #1
 8004d52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d107      	bne.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d001      	beq.n	8004d6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e000      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40023800 	.word	0x40023800

08004d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0cc      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d90:	4b68      	ldr	r3, [pc, #416]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d90c      	bls.n	8004db8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9e:	4b65      	ldr	r3, [pc, #404]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da6:	4b63      	ldr	r3, [pc, #396]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d001      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0b8      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d020      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dd0:	4b59      	ldr	r3, [pc, #356]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	4a58      	ldr	r2, [pc, #352]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004de8:	4b53      	ldr	r3, [pc, #332]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	4a52      	ldr	r2, [pc, #328]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004df2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df4:	4b50      	ldr	r3, [pc, #320]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	494d      	ldr	r1, [pc, #308]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d044      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d107      	bne.n	8004e2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1a:	4b47      	ldr	r3, [pc, #284]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d119      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e07f      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d003      	beq.n	8004e3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d107      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3a:	4b3f      	ldr	r3, [pc, #252]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e06f      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4a:	4b3b      	ldr	r3, [pc, #236]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e067      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e5a:	4b37      	ldr	r3, [pc, #220]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f023 0203 	bic.w	r2, r3, #3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	4934      	ldr	r1, [pc, #208]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e6c:	f7fe faac 	bl	80033c8 <HAL_GetTick>
 8004e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e72:	e00a      	b.n	8004e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e74:	f7fe faa8 	bl	80033c8 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e04f      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8a:	4b2b      	ldr	r3, [pc, #172]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 020c 	and.w	r2, r3, #12
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d1eb      	bne.n	8004e74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e9c:	4b25      	ldr	r3, [pc, #148]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d20c      	bcs.n	8004ec4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eaa:	4b22      	ldr	r3, [pc, #136]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb2:	4b20      	ldr	r3, [pc, #128]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e032      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ed0:	4b19      	ldr	r3, [pc, #100]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4916      	ldr	r1, [pc, #88]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eee:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	490e      	ldr	r1, [pc, #56]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f02:	f000 f821 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 8004f06:	4602      	mov	r2, r0
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	091b      	lsrs	r3, r3, #4
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	490a      	ldr	r1, [pc, #40]	; (8004f3c <HAL_RCC_ClockConfig+0x1c0>)
 8004f14:	5ccb      	ldrb	r3, [r1, r3]
 8004f16:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1a:	4a09      	ldr	r2, [pc, #36]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f1e:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <HAL_RCC_ClockConfig+0x1c8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fe fa0c 	bl	8003340 <HAL_InitTick>

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40023c00 	.word	0x40023c00
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	0800b424 	.word	0x0800b424
 8004f40:	20000004 	.word	0x20000004
 8004f44:	20000008 	.word	0x20000008

08004f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f4c:	b090      	sub	sp, #64	; 0x40
 8004f4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	637b      	str	r3, [r7, #52]	; 0x34
 8004f54:	2300      	movs	r3, #0
 8004f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f58:	2300      	movs	r3, #0
 8004f5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f60:	4b59      	ldr	r3, [pc, #356]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 030c 	and.w	r3, r3, #12
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d00d      	beq.n	8004f88 <HAL_RCC_GetSysClockFreq+0x40>
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	f200 80a1 	bhi.w	80050b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0x34>
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d003      	beq.n	8004f82 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f7a:	e09b      	b.n	80050b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f7c:	4b53      	ldr	r3, [pc, #332]	; (80050cc <HAL_RCC_GetSysClockFreq+0x184>)
 8004f7e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004f80:	e09b      	b.n	80050ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f82:	4b53      	ldr	r3, [pc, #332]	; (80050d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f86:	e098      	b.n	80050ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f88:	4b4f      	ldr	r3, [pc, #316]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f90:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f92:	4b4d      	ldr	r3, [pc, #308]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d028      	beq.n	8004ff0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f9e:	4b4a      	ldr	r3, [pc, #296]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	099b      	lsrs	r3, r3, #6
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	623b      	str	r3, [r7, #32]
 8004fa8:	627a      	str	r2, [r7, #36]	; 0x24
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4b47      	ldr	r3, [pc, #284]	; (80050d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fb4:	fb03 f201 	mul.w	r2, r3, r1
 8004fb8:	2300      	movs	r3, #0
 8004fba:	fb00 f303 	mul.w	r3, r0, r3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	4a43      	ldr	r2, [pc, #268]	; (80050d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fc2:	fba0 1202 	umull	r1, r2, r0, r2
 8004fc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fc8:	460a      	mov	r2, r1
 8004fca:	62ba      	str	r2, [r7, #40]	; 0x28
 8004fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fce:	4413      	add	r3, r2
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	61bb      	str	r3, [r7, #24]
 8004fd8:	61fa      	str	r2, [r7, #28]
 8004fda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004fe2:	f7fb fe01 	bl	8000be8 <__aeabi_uldivmod>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4613      	mov	r3, r2
 8004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fee:	e053      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ff0:	4b35      	ldr	r3, [pc, #212]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	099b      	lsrs	r3, r3, #6
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	617a      	str	r2, [r7, #20]
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005002:	f04f 0b00 	mov.w	fp, #0
 8005006:	4652      	mov	r2, sl
 8005008:	465b      	mov	r3, fp
 800500a:	f04f 0000 	mov.w	r0, #0
 800500e:	f04f 0100 	mov.w	r1, #0
 8005012:	0159      	lsls	r1, r3, #5
 8005014:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005018:	0150      	lsls	r0, r2, #5
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	ebb2 080a 	subs.w	r8, r2, sl
 8005022:	eb63 090b 	sbc.w	r9, r3, fp
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005032:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005036:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800503a:	ebb2 0408 	subs.w	r4, r2, r8
 800503e:	eb63 0509 	sbc.w	r5, r3, r9
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	00eb      	lsls	r3, r5, #3
 800504c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005050:	00e2      	lsls	r2, r4, #3
 8005052:	4614      	mov	r4, r2
 8005054:	461d      	mov	r5, r3
 8005056:	eb14 030a 	adds.w	r3, r4, sl
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	eb45 030b 	adc.w	r3, r5, fp
 8005060:	607b      	str	r3, [r7, #4]
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800506e:	4629      	mov	r1, r5
 8005070:	028b      	lsls	r3, r1, #10
 8005072:	4621      	mov	r1, r4
 8005074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005078:	4621      	mov	r1, r4
 800507a:	028a      	lsls	r2, r1, #10
 800507c:	4610      	mov	r0, r2
 800507e:	4619      	mov	r1, r3
 8005080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005082:	2200      	movs	r2, #0
 8005084:	60bb      	str	r3, [r7, #8]
 8005086:	60fa      	str	r2, [r7, #12]
 8005088:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800508c:	f7fb fdac 	bl	8000be8 <__aeabi_uldivmod>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4613      	mov	r3, r2
 8005096:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005098:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	0c1b      	lsrs	r3, r3, #16
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	3301      	adds	r3, #1
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80050a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050b2:	e002      	b.n	80050ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050b4:	4b05      	ldr	r3, [pc, #20]	; (80050cc <HAL_RCC_GetSysClockFreq+0x184>)
 80050b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3740      	adds	r7, #64	; 0x40
 80050c0:	46bd      	mov	sp, r7
 80050c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050c6:	bf00      	nop
 80050c8:	40023800 	.word	0x40023800
 80050cc:	00f42400 	.word	0x00f42400
 80050d0:	017d7840 	.word	0x017d7840

080050d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d8:	4b03      	ldr	r3, [pc, #12]	; (80050e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80050da:	681b      	ldr	r3, [r3, #0]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	20000004 	.word	0x20000004

080050ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050f0:	f7ff fff0 	bl	80050d4 <HAL_RCC_GetHCLKFreq>
 80050f4:	4602      	mov	r2, r0
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <HAL_RCC_GetPCLK1Freq+0x20>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	0a9b      	lsrs	r3, r3, #10
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	4903      	ldr	r1, [pc, #12]	; (8005110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005102:	5ccb      	ldrb	r3, [r1, r3]
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005108:	4618      	mov	r0, r3
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40023800 	.word	0x40023800
 8005110:	0800b434 	.word	0x0800b434

08005114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005118:	f7ff ffdc 	bl	80050d4 <HAL_RCC_GetHCLKFreq>
 800511c:	4602      	mov	r2, r0
 800511e:	4b05      	ldr	r3, [pc, #20]	; (8005134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	0b5b      	lsrs	r3, r3, #13
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	4903      	ldr	r1, [pc, #12]	; (8005138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800512a:	5ccb      	ldrb	r3, [r1, r3]
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005130:	4618      	mov	r0, r3
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40023800 	.word	0x40023800
 8005138:	0800b434 	.word	0x0800b434

0800513c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e03f      	b.n	80051ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d106      	bne.n	8005168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7fd fef2 	bl	8002f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2224      	movs	r2, #36	; 0x24
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800517e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f929 	bl	80053d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695a      	ldr	r2, [r3, #20]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b08a      	sub	sp, #40	; 0x28
 80051da:	af02      	add	r7, sp, #8
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	4613      	mov	r3, r2
 80051e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d17c      	bne.n	80052f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <HAL_UART_Transmit+0x2c>
 80051fc:	88fb      	ldrh	r3, [r7, #6]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e075      	b.n	80052f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_UART_Transmit+0x3e>
 8005210:	2302      	movs	r3, #2
 8005212:	e06e      	b.n	80052f2 <HAL_UART_Transmit+0x11c>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2221      	movs	r2, #33	; 0x21
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800522a:	f7fe f8cd 	bl	80033c8 <HAL_GetTick>
 800522e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	88fa      	ldrh	r2, [r7, #6]
 8005234:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	88fa      	ldrh	r2, [r7, #6]
 800523a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005244:	d108      	bne.n	8005258 <HAL_UART_Transmit+0x82>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d104      	bne.n	8005258 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800524e:	2300      	movs	r3, #0
 8005250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	e003      	b.n	8005260 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800525c:	2300      	movs	r3, #0
 800525e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005268:	e02a      	b.n	80052c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2200      	movs	r2, #0
 8005272:	2180      	movs	r1, #128	; 0x80
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 f840 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e036      	b.n	80052f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005298:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	3302      	adds	r3, #2
 800529e:	61bb      	str	r3, [r7, #24]
 80052a0:	e007      	b.n	80052b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	781a      	ldrb	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	3301      	adds	r3, #1
 80052b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1cf      	bne.n	800526a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2200      	movs	r2, #0
 80052d2:	2140      	movs	r1, #64	; 0x40
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f810 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e006      	b.n	80052f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052ec:	2300      	movs	r3, #0
 80052ee:	e000      	b.n	80052f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052f0:	2302      	movs	r3, #2
  }
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3720      	adds	r7, #32
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b090      	sub	sp, #64	; 0x40
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	603b      	str	r3, [r7, #0]
 8005306:	4613      	mov	r3, r2
 8005308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530a:	e050      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005312:	d04c      	beq.n	80053ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005316:	2b00      	cmp	r3, #0
 8005318:	d007      	beq.n	800532a <UART_WaitOnFlagUntilTimeout+0x30>
 800531a:	f7fe f855 	bl	80033c8 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005326:	429a      	cmp	r2, r3
 8005328:	d241      	bcs.n	80053ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	330c      	adds	r3, #12
 8005330:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	330c      	adds	r3, #12
 8005348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800534a:	637a      	str	r2, [r7, #52]	; 0x34
 800534c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e5      	bne.n	800532a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3314      	adds	r3, #20
 8005364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	613b      	str	r3, [r7, #16]
   return(result);
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	63bb      	str	r3, [r7, #56]	; 0x38
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3314      	adds	r3, #20
 800537c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800537e:	623a      	str	r2, [r7, #32]
 8005380:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	69f9      	ldr	r1, [r7, #28]
 8005384:	6a3a      	ldr	r2, [r7, #32]
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	61bb      	str	r3, [r7, #24]
   return(result);
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e5      	bne.n	800535e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e00f      	b.n	80053ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4013      	ands	r3, r2
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	bf0c      	ite	eq
 80053be:	2301      	moveq	r3, #1
 80053c0:	2300      	movne	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d09f      	beq.n	800530c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3740      	adds	r7, #64	; 0x40
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053dc:	b0c0      	sub	sp, #256	; 0x100
 80053de:	af00      	add	r7, sp, #0
 80053e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f4:	68d9      	ldr	r1, [r3, #12]
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	ea40 0301 	orr.w	r3, r0, r1
 8005400:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	431a      	orrs	r2, r3
 8005410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	431a      	orrs	r2, r3
 8005418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005430:	f021 010c 	bic.w	r1, r1, #12
 8005434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800543e:	430b      	orrs	r3, r1
 8005440:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800544e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005452:	6999      	ldr	r1, [r3, #24]
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	ea40 0301 	orr.w	r3, r0, r1
 800545e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	4b8f      	ldr	r3, [pc, #572]	; (80056a4 <UART_SetConfig+0x2cc>)
 8005468:	429a      	cmp	r2, r3
 800546a:	d005      	beq.n	8005478 <UART_SetConfig+0xa0>
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	4b8d      	ldr	r3, [pc, #564]	; (80056a8 <UART_SetConfig+0x2d0>)
 8005474:	429a      	cmp	r2, r3
 8005476:	d104      	bne.n	8005482 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005478:	f7ff fe4c 	bl	8005114 <HAL_RCC_GetPCLK2Freq>
 800547c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005480:	e003      	b.n	800548a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005482:	f7ff fe33 	bl	80050ec <HAL_RCC_GetPCLK1Freq>
 8005486:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800548a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005494:	f040 810c 	bne.w	80056b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800549c:	2200      	movs	r2, #0
 800549e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80054a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80054aa:	4622      	mov	r2, r4
 80054ac:	462b      	mov	r3, r5
 80054ae:	1891      	adds	r1, r2, r2
 80054b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80054b2:	415b      	adcs	r3, r3
 80054b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054ba:	4621      	mov	r1, r4
 80054bc:	eb12 0801 	adds.w	r8, r2, r1
 80054c0:	4629      	mov	r1, r5
 80054c2:	eb43 0901 	adc.w	r9, r3, r1
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054da:	4690      	mov	r8, r2
 80054dc:	4699      	mov	r9, r3
 80054de:	4623      	mov	r3, r4
 80054e0:	eb18 0303 	adds.w	r3, r8, r3
 80054e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054e8:	462b      	mov	r3, r5
 80054ea:	eb49 0303 	adc.w	r3, r9, r3
 80054ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005502:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005506:	460b      	mov	r3, r1
 8005508:	18db      	adds	r3, r3, r3
 800550a:	653b      	str	r3, [r7, #80]	; 0x50
 800550c:	4613      	mov	r3, r2
 800550e:	eb42 0303 	adc.w	r3, r2, r3
 8005512:	657b      	str	r3, [r7, #84]	; 0x54
 8005514:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005518:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800551c:	f7fb fb64 	bl	8000be8 <__aeabi_uldivmod>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	4b61      	ldr	r3, [pc, #388]	; (80056ac <UART_SetConfig+0x2d4>)
 8005526:	fba3 2302 	umull	r2, r3, r3, r2
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	011c      	lsls	r4, r3, #4
 800552e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005532:	2200      	movs	r2, #0
 8005534:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005538:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800553c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005540:	4642      	mov	r2, r8
 8005542:	464b      	mov	r3, r9
 8005544:	1891      	adds	r1, r2, r2
 8005546:	64b9      	str	r1, [r7, #72]	; 0x48
 8005548:	415b      	adcs	r3, r3
 800554a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800554c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005550:	4641      	mov	r1, r8
 8005552:	eb12 0a01 	adds.w	sl, r2, r1
 8005556:	4649      	mov	r1, r9
 8005558:	eb43 0b01 	adc.w	fp, r3, r1
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005568:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800556c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005570:	4692      	mov	sl, r2
 8005572:	469b      	mov	fp, r3
 8005574:	4643      	mov	r3, r8
 8005576:	eb1a 0303 	adds.w	r3, sl, r3
 800557a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800557e:	464b      	mov	r3, r9
 8005580:	eb4b 0303 	adc.w	r3, fp, r3
 8005584:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005594:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005598:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800559c:	460b      	mov	r3, r1
 800559e:	18db      	adds	r3, r3, r3
 80055a0:	643b      	str	r3, [r7, #64]	; 0x40
 80055a2:	4613      	mov	r3, r2
 80055a4:	eb42 0303 	adc.w	r3, r2, r3
 80055a8:	647b      	str	r3, [r7, #68]	; 0x44
 80055aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80055b2:	f7fb fb19 	bl	8000be8 <__aeabi_uldivmod>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4611      	mov	r1, r2
 80055bc:	4b3b      	ldr	r3, [pc, #236]	; (80056ac <UART_SetConfig+0x2d4>)
 80055be:	fba3 2301 	umull	r2, r3, r3, r1
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	2264      	movs	r2, #100	; 0x64
 80055c6:	fb02 f303 	mul.w	r3, r2, r3
 80055ca:	1acb      	subs	r3, r1, r3
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80055d2:	4b36      	ldr	r3, [pc, #216]	; (80056ac <UART_SetConfig+0x2d4>)
 80055d4:	fba3 2302 	umull	r2, r3, r3, r2
 80055d8:	095b      	lsrs	r3, r3, #5
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055e0:	441c      	add	r4, r3
 80055e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80055f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80055f4:	4642      	mov	r2, r8
 80055f6:	464b      	mov	r3, r9
 80055f8:	1891      	adds	r1, r2, r2
 80055fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80055fc:	415b      	adcs	r3, r3
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005604:	4641      	mov	r1, r8
 8005606:	1851      	adds	r1, r2, r1
 8005608:	6339      	str	r1, [r7, #48]	; 0x30
 800560a:	4649      	mov	r1, r9
 800560c:	414b      	adcs	r3, r1
 800560e:	637b      	str	r3, [r7, #52]	; 0x34
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800561c:	4659      	mov	r1, fp
 800561e:	00cb      	lsls	r3, r1, #3
 8005620:	4651      	mov	r1, sl
 8005622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005626:	4651      	mov	r1, sl
 8005628:	00ca      	lsls	r2, r1, #3
 800562a:	4610      	mov	r0, r2
 800562c:	4619      	mov	r1, r3
 800562e:	4603      	mov	r3, r0
 8005630:	4642      	mov	r2, r8
 8005632:	189b      	adds	r3, r3, r2
 8005634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005638:	464b      	mov	r3, r9
 800563a:	460a      	mov	r2, r1
 800563c:	eb42 0303 	adc.w	r3, r2, r3
 8005640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005650:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005654:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005658:	460b      	mov	r3, r1
 800565a:	18db      	adds	r3, r3, r3
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
 800565e:	4613      	mov	r3, r2
 8005660:	eb42 0303 	adc.w	r3, r2, r3
 8005664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800566a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800566e:	f7fb fabb 	bl	8000be8 <__aeabi_uldivmod>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	4b0d      	ldr	r3, [pc, #52]	; (80056ac <UART_SetConfig+0x2d4>)
 8005678:	fba3 1302 	umull	r1, r3, r3, r2
 800567c:	095b      	lsrs	r3, r3, #5
 800567e:	2164      	movs	r1, #100	; 0x64
 8005680:	fb01 f303 	mul.w	r3, r1, r3
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	3332      	adds	r3, #50	; 0x32
 800568a:	4a08      	ldr	r2, [pc, #32]	; (80056ac <UART_SetConfig+0x2d4>)
 800568c:	fba2 2303 	umull	r2, r3, r2, r3
 8005690:	095b      	lsrs	r3, r3, #5
 8005692:	f003 0207 	and.w	r2, r3, #7
 8005696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4422      	add	r2, r4
 800569e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056a0:	e106      	b.n	80058b0 <UART_SetConfig+0x4d8>
 80056a2:	bf00      	nop
 80056a4:	40011000 	.word	0x40011000
 80056a8:	40011400 	.word	0x40011400
 80056ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056b4:	2200      	movs	r2, #0
 80056b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80056be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80056c2:	4642      	mov	r2, r8
 80056c4:	464b      	mov	r3, r9
 80056c6:	1891      	adds	r1, r2, r2
 80056c8:	6239      	str	r1, [r7, #32]
 80056ca:	415b      	adcs	r3, r3
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
 80056ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056d2:	4641      	mov	r1, r8
 80056d4:	1854      	adds	r4, r2, r1
 80056d6:	4649      	mov	r1, r9
 80056d8:	eb43 0501 	adc.w	r5, r3, r1
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	00eb      	lsls	r3, r5, #3
 80056e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056ea:	00e2      	lsls	r2, r4, #3
 80056ec:	4614      	mov	r4, r2
 80056ee:	461d      	mov	r5, r3
 80056f0:	4643      	mov	r3, r8
 80056f2:	18e3      	adds	r3, r4, r3
 80056f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056f8:	464b      	mov	r3, r9
 80056fa:	eb45 0303 	adc.w	r3, r5, r3
 80056fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800570e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800571e:	4629      	mov	r1, r5
 8005720:	008b      	lsls	r3, r1, #2
 8005722:	4621      	mov	r1, r4
 8005724:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005728:	4621      	mov	r1, r4
 800572a:	008a      	lsls	r2, r1, #2
 800572c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005730:	f7fb fa5a 	bl	8000be8 <__aeabi_uldivmod>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4b60      	ldr	r3, [pc, #384]	; (80058bc <UART_SetConfig+0x4e4>)
 800573a:	fba3 2302 	umull	r2, r3, r3, r2
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	011c      	lsls	r4, r3, #4
 8005742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005746:	2200      	movs	r2, #0
 8005748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800574c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005750:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005754:	4642      	mov	r2, r8
 8005756:	464b      	mov	r3, r9
 8005758:	1891      	adds	r1, r2, r2
 800575a:	61b9      	str	r1, [r7, #24]
 800575c:	415b      	adcs	r3, r3
 800575e:	61fb      	str	r3, [r7, #28]
 8005760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005764:	4641      	mov	r1, r8
 8005766:	1851      	adds	r1, r2, r1
 8005768:	6139      	str	r1, [r7, #16]
 800576a:	4649      	mov	r1, r9
 800576c:	414b      	adcs	r3, r1
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800577c:	4659      	mov	r1, fp
 800577e:	00cb      	lsls	r3, r1, #3
 8005780:	4651      	mov	r1, sl
 8005782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005786:	4651      	mov	r1, sl
 8005788:	00ca      	lsls	r2, r1, #3
 800578a:	4610      	mov	r0, r2
 800578c:	4619      	mov	r1, r3
 800578e:	4603      	mov	r3, r0
 8005790:	4642      	mov	r2, r8
 8005792:	189b      	adds	r3, r3, r2
 8005794:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005798:	464b      	mov	r3, r9
 800579a:	460a      	mov	r2, r1
 800579c:	eb42 0303 	adc.w	r3, r2, r3
 80057a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80057ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80057b0:	f04f 0200 	mov.w	r2, #0
 80057b4:	f04f 0300 	mov.w	r3, #0
 80057b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80057bc:	4649      	mov	r1, r9
 80057be:	008b      	lsls	r3, r1, #2
 80057c0:	4641      	mov	r1, r8
 80057c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057c6:	4641      	mov	r1, r8
 80057c8:	008a      	lsls	r2, r1, #2
 80057ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80057ce:	f7fb fa0b 	bl	8000be8 <__aeabi_uldivmod>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4611      	mov	r1, r2
 80057d8:	4b38      	ldr	r3, [pc, #224]	; (80058bc <UART_SetConfig+0x4e4>)
 80057da:	fba3 2301 	umull	r2, r3, r3, r1
 80057de:	095b      	lsrs	r3, r3, #5
 80057e0:	2264      	movs	r2, #100	; 0x64
 80057e2:	fb02 f303 	mul.w	r3, r2, r3
 80057e6:	1acb      	subs	r3, r1, r3
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	3332      	adds	r3, #50	; 0x32
 80057ec:	4a33      	ldr	r2, [pc, #204]	; (80058bc <UART_SetConfig+0x4e4>)
 80057ee:	fba2 2303 	umull	r2, r3, r2, r3
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057f8:	441c      	add	r4, r3
 80057fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057fe:	2200      	movs	r2, #0
 8005800:	673b      	str	r3, [r7, #112]	; 0x70
 8005802:	677a      	str	r2, [r7, #116]	; 0x74
 8005804:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005808:	4642      	mov	r2, r8
 800580a:	464b      	mov	r3, r9
 800580c:	1891      	adds	r1, r2, r2
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	415b      	adcs	r3, r3
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005818:	4641      	mov	r1, r8
 800581a:	1851      	adds	r1, r2, r1
 800581c:	6039      	str	r1, [r7, #0]
 800581e:	4649      	mov	r1, r9
 8005820:	414b      	adcs	r3, r1
 8005822:	607b      	str	r3, [r7, #4]
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005830:	4659      	mov	r1, fp
 8005832:	00cb      	lsls	r3, r1, #3
 8005834:	4651      	mov	r1, sl
 8005836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800583a:	4651      	mov	r1, sl
 800583c:	00ca      	lsls	r2, r1, #3
 800583e:	4610      	mov	r0, r2
 8005840:	4619      	mov	r1, r3
 8005842:	4603      	mov	r3, r0
 8005844:	4642      	mov	r2, r8
 8005846:	189b      	adds	r3, r3, r2
 8005848:	66bb      	str	r3, [r7, #104]	; 0x68
 800584a:	464b      	mov	r3, r9
 800584c:	460a      	mov	r2, r1
 800584e:	eb42 0303 	adc.w	r3, r2, r3
 8005852:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	663b      	str	r3, [r7, #96]	; 0x60
 800585e:	667a      	str	r2, [r7, #100]	; 0x64
 8005860:	f04f 0200 	mov.w	r2, #0
 8005864:	f04f 0300 	mov.w	r3, #0
 8005868:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800586c:	4649      	mov	r1, r9
 800586e:	008b      	lsls	r3, r1, #2
 8005870:	4641      	mov	r1, r8
 8005872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005876:	4641      	mov	r1, r8
 8005878:	008a      	lsls	r2, r1, #2
 800587a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800587e:	f7fb f9b3 	bl	8000be8 <__aeabi_uldivmod>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <UART_SetConfig+0x4e4>)
 8005888:	fba3 1302 	umull	r1, r3, r3, r2
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	2164      	movs	r1, #100	; 0x64
 8005890:	fb01 f303 	mul.w	r3, r1, r3
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	3332      	adds	r3, #50	; 0x32
 800589a:	4a08      	ldr	r2, [pc, #32]	; (80058bc <UART_SetConfig+0x4e4>)
 800589c:	fba2 2303 	umull	r2, r3, r2, r3
 80058a0:	095b      	lsrs	r3, r3, #5
 80058a2:	f003 020f 	and.w	r2, r3, #15
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4422      	add	r2, r4
 80058ae:	609a      	str	r2, [r3, #8]
}
 80058b0:	bf00      	nop
 80058b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80058b6:	46bd      	mov	sp, r7
 80058b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058bc:	51eb851f 	.word	0x51eb851f

080058c0 <__NVIC_SetPriority>:
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	4603      	mov	r3, r0
 80058c8:	6039      	str	r1, [r7, #0]
 80058ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	db0a      	blt.n	80058ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	490c      	ldr	r1, [pc, #48]	; (800590c <__NVIC_SetPriority+0x4c>)
 80058da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058de:	0112      	lsls	r2, r2, #4
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	440b      	add	r3, r1
 80058e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80058e8:	e00a      	b.n	8005900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	4908      	ldr	r1, [pc, #32]	; (8005910 <__NVIC_SetPriority+0x50>)
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	3b04      	subs	r3, #4
 80058f8:	0112      	lsls	r2, r2, #4
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	440b      	add	r3, r1
 80058fe:	761a      	strb	r2, [r3, #24]
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	e000e100 	.word	0xe000e100
 8005910:	e000ed00 	.word	0xe000ed00

08005914 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005918:	2100      	movs	r1, #0
 800591a:	f06f 0004 	mvn.w	r0, #4
 800591e:	f7ff ffcf 	bl	80058c0 <__NVIC_SetPriority>
#endif
}
 8005922:	bf00      	nop
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800592e:	f3ef 8305 	mrs	r3, IPSR
 8005932:	603b      	str	r3, [r7, #0]
  return(result);
 8005934:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800593a:	f06f 0305 	mvn.w	r3, #5
 800593e:	607b      	str	r3, [r7, #4]
 8005940:	e00c      	b.n	800595c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005942:	4b0a      	ldr	r3, [pc, #40]	; (800596c <osKernelInitialize+0x44>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d105      	bne.n	8005956 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800594a:	4b08      	ldr	r3, [pc, #32]	; (800596c <osKernelInitialize+0x44>)
 800594c:	2201      	movs	r2, #1
 800594e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005950:	2300      	movs	r3, #0
 8005952:	607b      	str	r3, [r7, #4]
 8005954:	e002      	b.n	800595c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800595a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800595c:	687b      	ldr	r3, [r7, #4]
}
 800595e:	4618      	mov	r0, r3
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	20000344 	.word	0x20000344

08005970 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005976:	f3ef 8305 	mrs	r3, IPSR
 800597a:	603b      	str	r3, [r7, #0]
  return(result);
 800597c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005982:	f06f 0305 	mvn.w	r3, #5
 8005986:	607b      	str	r3, [r7, #4]
 8005988:	e010      	b.n	80059ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800598a:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <osKernelStart+0x48>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d109      	bne.n	80059a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005992:	f7ff ffbf 	bl	8005914 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005996:	4b08      	ldr	r3, [pc, #32]	; (80059b8 <osKernelStart+0x48>)
 8005998:	2202      	movs	r2, #2
 800599a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800599c:	f001 f866 	bl	8006a6c <vTaskStartScheduler>
      stat = osOK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	607b      	str	r3, [r7, #4]
 80059a4:	e002      	b.n	80059ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80059a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80059ac:	687b      	ldr	r3, [r7, #4]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20000344 	.word	0x20000344

080059bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08e      	sub	sp, #56	; 0x38
 80059c0:	af04      	add	r7, sp, #16
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80059c8:	2300      	movs	r3, #0
 80059ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059cc:	f3ef 8305 	mrs	r3, IPSR
 80059d0:	617b      	str	r3, [r7, #20]
  return(result);
 80059d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d17e      	bne.n	8005ad6 <osThreadNew+0x11a>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d07b      	beq.n	8005ad6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80059de:	2380      	movs	r3, #128	; 0x80
 80059e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80059e2:	2318      	movs	r3, #24
 80059e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80059ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d045      	beq.n	8005a82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <osThreadNew+0x48>
        name = attr->name;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <osThreadNew+0x6e>
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	2b38      	cmp	r3, #56	; 0x38
 8005a1c:	d805      	bhi.n	8005a2a <osThreadNew+0x6e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <osThreadNew+0x72>
        return (NULL);
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	e054      	b.n	8005ad8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	089b      	lsrs	r3, r3, #2
 8005a3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00e      	beq.n	8005a64 <osThreadNew+0xa8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	2b5b      	cmp	r3, #91	; 0x5b
 8005a4c:	d90a      	bls.n	8005a64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d006      	beq.n	8005a64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <osThreadNew+0xa8>
        mem = 1;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	61bb      	str	r3, [r7, #24]
 8005a62:	e010      	b.n	8005a86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10c      	bne.n	8005a86 <osThreadNew+0xca>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d108      	bne.n	8005a86 <osThreadNew+0xca>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d104      	bne.n	8005a86 <osThreadNew+0xca>
          mem = 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61bb      	str	r3, [r7, #24]
 8005a80:	e001      	b.n	8005a86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d110      	bne.n	8005aae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a94:	9202      	str	r2, [sp, #8]
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	6a3a      	ldr	r2, [r7, #32]
 8005aa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 fe0c 	bl	80066c0 <xTaskCreateStatic>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	613b      	str	r3, [r7, #16]
 8005aac:	e013      	b.n	8005ad6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d110      	bne.n	8005ad6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	f107 0310 	add.w	r3, r7, #16
 8005abc:	9301      	str	r3, [sp, #4]
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fe57 	bl	800677a <xTaskCreate>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d001      	beq.n	8005ad6 <osThreadNew+0x11a>
            hTask = NULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ad6:	693b      	ldr	r3, [r7, #16]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3728      	adds	r7, #40	; 0x28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ae8:	f3ef 8305 	mrs	r3, IPSR
 8005aec:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <osDelay+0x1c>
    stat = osErrorISR;
 8005af4:	f06f 0305 	mvn.w	r3, #5
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	e007      	b.n	8005b0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 ff7c 	bl	8006a04 <vTaskDelay>
    }
  }

  return (stat);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4a07      	ldr	r2, [pc, #28]	; (8005b44 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	4a06      	ldr	r2, [pc, #24]	; (8005b48 <vApplicationGetIdleTaskMemory+0x30>)
 8005b2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2280      	movs	r2, #128	; 0x80
 8005b34:	601a      	str	r2, [r3, #0]
}
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20000348 	.word	0x20000348
 8005b48:	200003a4 	.word	0x200003a4

08005b4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4a07      	ldr	r2, [pc, #28]	; (8005b78 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	4a06      	ldr	r2, [pc, #24]	; (8005b7c <vApplicationGetTimerTaskMemory+0x30>)
 8005b62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b6a:	601a      	str	r2, [r3, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	200005a4 	.word	0x200005a4
 8005b7c:	20000600 	.word	0x20000600

08005b80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f103 0208 	add.w	r2, r3, #8
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f103 0208 	add.w	r2, r3, #8
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f103 0208 	add.w	r2, r3, #8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	601a      	str	r2, [r3, #0]
}
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c38:	d103      	bne.n	8005c42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	e00c      	b.n	8005c5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3308      	adds	r3, #8
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	e002      	b.n	8005c50 <vListInsert+0x2e>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d2f6      	bcs.n	8005c4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	601a      	str	r2, [r3, #0]
}
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6892      	ldr	r2, [r2, #8]
 8005caa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6852      	ldr	r2, [r2, #4]
 8005cb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d103      	bne.n	8005cc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	1e5a      	subs	r2, r3, #1
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10a      	bne.n	8005d12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d0e:	bf00      	nop
 8005d10:	e7fe      	b.n	8005d10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d12:	f002 f84f 	bl	8007db4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	68f9      	ldr	r1, [r7, #12]
 8005d20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d22:	fb01 f303 	mul.w	r3, r1, r3
 8005d26:	441a      	add	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d42:	3b01      	subs	r3, #1
 8005d44:	68f9      	ldr	r1, [r7, #12]
 8005d46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d48:	fb01 f303 	mul.w	r3, r1, r3
 8005d4c:	441a      	add	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	22ff      	movs	r2, #255	; 0xff
 8005d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	22ff      	movs	r2, #255	; 0xff
 8005d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d114      	bne.n	8005d92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01a      	beq.n	8005da6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3310      	adds	r3, #16
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 f903 	bl	8006f80 <xTaskRemoveFromEventList>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d012      	beq.n	8005da6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d80:	4b0c      	ldr	r3, [pc, #48]	; (8005db4 <xQueueGenericReset+0xcc>)
 8005d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	e009      	b.n	8005da6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3310      	adds	r3, #16
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fef2 	bl	8005b80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3324      	adds	r3, #36	; 0x24
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff feed 	bl	8005b80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005da6:	f002 f835 	bl	8007e14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005daa:	2301      	movs	r3, #1
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	e000ed04 	.word	0xe000ed04

08005db8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08e      	sub	sp, #56	; 0x38
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005dfa:	bf00      	nop
 8005dfc:	e7fe      	b.n	8005dfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <xQueueGenericCreateStatic+0x52>
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <xQueueGenericCreateStatic+0x56>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e000      	b.n	8005e10 <xQueueGenericCreateStatic+0x58>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	623b      	str	r3, [r7, #32]
}
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d102      	bne.n	8005e36 <xQueueGenericCreateStatic+0x7e>
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <xQueueGenericCreateStatic+0x82>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e000      	b.n	8005e3c <xQueueGenericCreateStatic+0x84>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10a      	bne.n	8005e56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	61fb      	str	r3, [r7, #28]
}
 8005e52:	bf00      	nop
 8005e54:	e7fe      	b.n	8005e54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e56:	2350      	movs	r3, #80	; 0x50
 8005e58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b50      	cmp	r3, #80	; 0x50
 8005e5e:	d00a      	beq.n	8005e76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	61bb      	str	r3, [r7, #24]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00d      	beq.n	8005e9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	4613      	mov	r3, r2
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f805 	bl	8005ea8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3730      	adds	r7, #48	; 0x30
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d103      	bne.n	8005ec4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	e002      	b.n	8005eca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	69b8      	ldr	r0, [r7, #24]
 8005eda:	f7ff ff05 	bl	8005ce8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	78fa      	ldrb	r2, [r7, #3]
 8005ee2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08e      	sub	sp, #56	; 0x38
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005efe:	2300      	movs	r3, #0
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <xQueueGenericSend+0x32>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d103      	bne.n	8005f30 <xQueueGenericSend+0x40>
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <xQueueGenericSend+0x44>
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <xQueueGenericSend+0x46>
 8005f34:	2300      	movs	r3, #0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10a      	bne.n	8005f50 <xQueueGenericSend+0x60>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d103      	bne.n	8005f5e <xQueueGenericSend+0x6e>
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <xQueueGenericSend+0x72>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <xQueueGenericSend+0x74>
 8005f62:	2300      	movs	r3, #0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10a      	bne.n	8005f7e <xQueueGenericSend+0x8e>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	623b      	str	r3, [r7, #32]
}
 8005f7a:	bf00      	nop
 8005f7c:	e7fe      	b.n	8005f7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f7e:	f001 f9bd 	bl	80072fc <xTaskGetSchedulerState>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d102      	bne.n	8005f8e <xQueueGenericSend+0x9e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <xQueueGenericSend+0xa2>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <xQueueGenericSend+0xa4>
 8005f92:	2300      	movs	r3, #0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10a      	bne.n	8005fae <xQueueGenericSend+0xbe>
	__asm volatile
 8005f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	61fb      	str	r3, [r7, #28]
}
 8005faa:	bf00      	nop
 8005fac:	e7fe      	b.n	8005fac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fae:	f001 ff01 	bl	8007db4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d302      	bcc.n	8005fc4 <xQueueGenericSend+0xd4>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d129      	bne.n	8006018 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	68b9      	ldr	r1, [r7, #8]
 8005fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fca:	f000 fa0b 	bl	80063e4 <prvCopyDataToQueue>
 8005fce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d010      	beq.n	8005ffa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	3324      	adds	r3, #36	; 0x24
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 ffcf 	bl	8006f80 <xTaskRemoveFromEventList>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d013      	beq.n	8006010 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fe8:	4b3f      	ldr	r3, [pc, #252]	; (80060e8 <xQueueGenericSend+0x1f8>)
 8005fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	e00a      	b.n	8006010 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d007      	beq.n	8006010 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006000:	4b39      	ldr	r3, [pc, #228]	; (80060e8 <xQueueGenericSend+0x1f8>)
 8006002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006010:	f001 ff00 	bl	8007e14 <vPortExitCritical>
				return pdPASS;
 8006014:	2301      	movs	r3, #1
 8006016:	e063      	b.n	80060e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d103      	bne.n	8006026 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800601e:	f001 fef9 	bl	8007e14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006022:	2300      	movs	r3, #0
 8006024:	e05c      	b.n	80060e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006028:	2b00      	cmp	r3, #0
 800602a:	d106      	bne.n	800603a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800602c:	f107 0314 	add.w	r3, r7, #20
 8006030:	4618      	mov	r0, r3
 8006032:	f001 f809 	bl	8007048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006036:	2301      	movs	r3, #1
 8006038:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800603a:	f001 feeb 	bl	8007e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800603e:	f000 fd7b 	bl	8006b38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006042:	f001 feb7 	bl	8007db4 <vPortEnterCritical>
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800604c:	b25b      	sxtb	r3, r3
 800604e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006052:	d103      	bne.n	800605c <xQueueGenericSend+0x16c>
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006062:	b25b      	sxtb	r3, r3
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006068:	d103      	bne.n	8006072 <xQueueGenericSend+0x182>
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006072:	f001 fecf 	bl	8007e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006076:	1d3a      	adds	r2, r7, #4
 8006078:	f107 0314 	add.w	r3, r7, #20
 800607c:	4611      	mov	r1, r2
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fff8 	bl	8007074 <xTaskCheckForTimeOut>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d124      	bne.n	80060d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800608a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800608c:	f000 faa2 	bl	80065d4 <prvIsQueueFull>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d018      	beq.n	80060c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	3310      	adds	r3, #16
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	4611      	mov	r1, r2
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 ff1e 	bl	8006ee0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80060a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060a6:	f000 fa2d 	bl	8006504 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80060aa:	f000 fd53 	bl	8006b54 <xTaskResumeAll>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f47f af7c 	bne.w	8005fae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80060b6:	4b0c      	ldr	r3, [pc, #48]	; (80060e8 <xQueueGenericSend+0x1f8>)
 80060b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	e772      	b.n	8005fae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060ca:	f000 fa1b 	bl	8006504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060ce:	f000 fd41 	bl	8006b54 <xTaskResumeAll>
 80060d2:	e76c      	b.n	8005fae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060d6:	f000 fa15 	bl	8006504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060da:	f000 fd3b 	bl	8006b54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3738      	adds	r7, #56	; 0x38
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	e000ed04 	.word	0xe000ed04

080060ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b090      	sub	sp, #64	; 0x40
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80060fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10a      	bne.n	800611a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006116:	bf00      	nop
 8006118:	e7fe      	b.n	8006118 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d103      	bne.n	8006128 <xQueueGenericSendFromISR+0x3c>
 8006120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <xQueueGenericSendFromISR+0x40>
 8006128:	2301      	movs	r3, #1
 800612a:	e000      	b.n	800612e <xQueueGenericSendFromISR+0x42>
 800612c:	2300      	movs	r3, #0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10a      	bne.n	8006148 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006144:	bf00      	nop
 8006146:	e7fe      	b.n	8006146 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b02      	cmp	r3, #2
 800614c:	d103      	bne.n	8006156 <xQueueGenericSendFromISR+0x6a>
 800614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <xQueueGenericSendFromISR+0x6e>
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <xQueueGenericSendFromISR+0x70>
 800615a:	2300      	movs	r3, #0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	623b      	str	r3, [r7, #32]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006176:	f001 feff 	bl	8007f78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800617a:	f3ef 8211 	mrs	r2, BASEPRI
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	61fa      	str	r2, [r7, #28]
 8006190:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006192:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006194:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619e:	429a      	cmp	r2, r3
 80061a0:	d302      	bcc.n	80061a8 <xQueueGenericSendFromISR+0xbc>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d12f      	bne.n	8006208 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061be:	f000 f911 	bl	80063e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80061c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061ca:	d112      	bne.n	80061f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d016      	beq.n	8006202 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d6:	3324      	adds	r3, #36	; 0x24
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 fed1 	bl	8006f80 <xTaskRemoveFromEventList>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00e      	beq.n	8006202 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00b      	beq.n	8006202 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	e007      	b.n	8006202 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061f6:	3301      	adds	r3, #1
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	b25a      	sxtb	r2, r3
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006202:	2301      	movs	r3, #1
 8006204:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006206:	e001      	b.n	800620c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006208:	2300      	movs	r3, #0
 800620a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800620c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006216:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800621a:	4618      	mov	r0, r3
 800621c:	3740      	adds	r7, #64	; 0x40
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08c      	sub	sp, #48	; 0x30
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006230:	2300      	movs	r3, #0
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10a      	bne.n	8006254 <xQueueReceive+0x30>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	623b      	str	r3, [r7, #32]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d103      	bne.n	8006262 <xQueueReceive+0x3e>
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <xQueueReceive+0x42>
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <xQueueReceive+0x44>
 8006266:	2300      	movs	r3, #0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10a      	bne.n	8006282 <xQueueReceive+0x5e>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	61fb      	str	r3, [r7, #28]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006282:	f001 f83b 	bl	80072fc <xTaskGetSchedulerState>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d102      	bne.n	8006292 <xQueueReceive+0x6e>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <xQueueReceive+0x72>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <xQueueReceive+0x74>
 8006296:	2300      	movs	r3, #0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <xQueueReceive+0x8e>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	61bb      	str	r3, [r7, #24]
}
 80062ae:	bf00      	nop
 80062b0:	e7fe      	b.n	80062b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062b2:	f001 fd7f 	bl	8007db4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d01f      	beq.n	8006302 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062c2:	68b9      	ldr	r1, [r7, #8]
 80062c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c6:	f000 f8f7 	bl	80064b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	1e5a      	subs	r2, r3, #1
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00f      	beq.n	80062fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	3310      	adds	r3, #16
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fe4e 	bl	8006f80 <xTaskRemoveFromEventList>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062ea:	4b3d      	ldr	r3, [pc, #244]	; (80063e0 <xQueueReceive+0x1bc>)
 80062ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062fa:	f001 fd8b 	bl	8007e14 <vPortExitCritical>
				return pdPASS;
 80062fe:	2301      	movs	r3, #1
 8006300:	e069      	b.n	80063d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d103      	bne.n	8006310 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006308:	f001 fd84 	bl	8007e14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800630c:	2300      	movs	r3, #0
 800630e:	e062      	b.n	80063d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d106      	bne.n	8006324 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006316:	f107 0310 	add.w	r3, r7, #16
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fe94 	bl	8007048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006320:	2301      	movs	r3, #1
 8006322:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006324:	f001 fd76 	bl	8007e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006328:	f000 fc06 	bl	8006b38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800632c:	f001 fd42 	bl	8007db4 <vPortEnterCritical>
 8006330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006332:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006336:	b25b      	sxtb	r3, r3
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800633c:	d103      	bne.n	8006346 <xQueueReceive+0x122>
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800634c:	b25b      	sxtb	r3, r3
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006352:	d103      	bne.n	800635c <xQueueReceive+0x138>
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800635c:	f001 fd5a 	bl	8007e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006360:	1d3a      	adds	r2, r7, #4
 8006362:	f107 0310 	add.w	r3, r7, #16
 8006366:	4611      	mov	r1, r2
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fe83 	bl	8007074 <xTaskCheckForTimeOut>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d123      	bne.n	80063bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006376:	f000 f917 	bl	80065a8 <prvIsQueueEmpty>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d017      	beq.n	80063b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	3324      	adds	r3, #36	; 0x24
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	4611      	mov	r1, r2
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fda9 	bl	8006ee0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800638e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006390:	f000 f8b8 	bl	8006504 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006394:	f000 fbde 	bl	8006b54 <xTaskResumeAll>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d189      	bne.n	80062b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800639e:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <xQueueReceive+0x1bc>)
 80063a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	e780      	b.n	80062b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80063b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b2:	f000 f8a7 	bl	8006504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063b6:	f000 fbcd 	bl	8006b54 <xTaskResumeAll>
 80063ba:	e77a      	b.n	80062b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80063bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063be:	f000 f8a1 	bl	8006504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063c2:	f000 fbc7 	bl	8006b54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063c8:	f000 f8ee 	bl	80065a8 <prvIsQueueEmpty>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f43f af6f 	beq.w	80062b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3730      	adds	r7, #48	; 0x30
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	e000ed04 	.word	0xe000ed04

080063e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063f0:	2300      	movs	r3, #0
 80063f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10d      	bne.n	800641e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d14d      	bne.n	80064a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	4618      	mov	r0, r3
 8006410:	f000 ff92 	bl	8007338 <xTaskPriorityDisinherit>
 8006414:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	609a      	str	r2, [r3, #8]
 800641c:	e043      	b.n	80064a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d119      	bne.n	8006458 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6858      	ldr	r0, [r3, #4]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	461a      	mov	r2, r3
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	f002 ffdf 	bl	80093f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643c:	441a      	add	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	429a      	cmp	r2, r3
 800644c:	d32b      	bcc.n	80064a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	605a      	str	r2, [r3, #4]
 8006456:	e026      	b.n	80064a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	68d8      	ldr	r0, [r3, #12]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006460:	461a      	mov	r2, r3
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	f002 ffc5 	bl	80093f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006470:	425b      	negs	r3, r3
 8006472:	441a      	add	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68da      	ldr	r2, [r3, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d207      	bcs.n	8006494 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	425b      	negs	r3, r3
 800648e:	441a      	add	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b02      	cmp	r3, #2
 8006498:	d105      	bne.n	80064a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80064ae:	697b      	ldr	r3, [r7, #20]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d018      	beq.n	80064fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	441a      	add	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d303      	bcc.n	80064ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68d9      	ldr	r1, [r3, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f4:	461a      	mov	r2, r3
 80064f6:	6838      	ldr	r0, [r7, #0]
 80064f8:	f002 ff7b 	bl	80093f2 <memcpy>
	}
}
 80064fc:	bf00      	nop
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800650c:	f001 fc52 	bl	8007db4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006516:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006518:	e011      	b.n	800653e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	2b00      	cmp	r3, #0
 8006520:	d012      	beq.n	8006548 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	3324      	adds	r3, #36	; 0x24
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fd2a 	bl	8006f80 <xTaskRemoveFromEventList>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006532:	f000 fe01 	bl	8007138 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	3b01      	subs	r3, #1
 800653a:	b2db      	uxtb	r3, r3
 800653c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800653e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006542:	2b00      	cmp	r3, #0
 8006544:	dce9      	bgt.n	800651a <prvUnlockQueue+0x16>
 8006546:	e000      	b.n	800654a <prvUnlockQueue+0x46>
					break;
 8006548:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	22ff      	movs	r2, #255	; 0xff
 800654e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006552:	f001 fc5f 	bl	8007e14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006556:	f001 fc2d 	bl	8007db4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006560:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006562:	e011      	b.n	8006588 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d012      	beq.n	8006592 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3310      	adds	r3, #16
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fd05 	bl	8006f80 <xTaskRemoveFromEventList>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800657c:	f000 fddc 	bl	8007138 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006580:	7bbb      	ldrb	r3, [r7, #14]
 8006582:	3b01      	subs	r3, #1
 8006584:	b2db      	uxtb	r3, r3
 8006586:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800658c:	2b00      	cmp	r3, #0
 800658e:	dce9      	bgt.n	8006564 <prvUnlockQueue+0x60>
 8006590:	e000      	b.n	8006594 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006592:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	22ff      	movs	r2, #255	; 0xff
 8006598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800659c:	f001 fc3a 	bl	8007e14 <vPortExitCritical>
}
 80065a0:	bf00      	nop
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065b0:	f001 fc00 	bl	8007db4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d102      	bne.n	80065c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065bc:	2301      	movs	r3, #1
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	e001      	b.n	80065c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065c6:	f001 fc25 	bl	8007e14 <vPortExitCritical>

	return xReturn;
 80065ca:	68fb      	ldr	r3, [r7, #12]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065dc:	f001 fbea 	bl	8007db4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d102      	bne.n	80065f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065ec:	2301      	movs	r3, #1
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	e001      	b.n	80065f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065f6:	f001 fc0d 	bl	8007e14 <vPortExitCritical>

	return xReturn;
 80065fa:	68fb      	ldr	r3, [r7, #12]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800660e:	2300      	movs	r3, #0
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	e014      	b.n	800663e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006614:	4a0f      	ldr	r2, [pc, #60]	; (8006654 <vQueueAddToRegistry+0x50>)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10b      	bne.n	8006638 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006620:	490c      	ldr	r1, [pc, #48]	; (8006654 <vQueueAddToRegistry+0x50>)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800662a:	4a0a      	ldr	r2, [pc, #40]	; (8006654 <vQueueAddToRegistry+0x50>)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	00db      	lsls	r3, r3, #3
 8006630:	4413      	add	r3, r2
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006636:	e006      	b.n	8006646 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3301      	adds	r3, #1
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b07      	cmp	r3, #7
 8006642:	d9e7      	bls.n	8006614 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006644:	bf00      	nop
 8006646:	bf00      	nop
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	20000a00 	.word	0x20000a00

08006658 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006668:	f001 fba4 	bl	8007db4 <vPortEnterCritical>
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006672:	b25b      	sxtb	r3, r3
 8006674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006678:	d103      	bne.n	8006682 <vQueueWaitForMessageRestricted+0x2a>
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006688:	b25b      	sxtb	r3, r3
 800668a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800668e:	d103      	bne.n	8006698 <vQueueWaitForMessageRestricted+0x40>
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006698:	f001 fbbc 	bl	8007e14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d106      	bne.n	80066b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	3324      	adds	r3, #36	; 0x24
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fc3b 	bl	8006f28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80066b2:	6978      	ldr	r0, [r7, #20]
 80066b4:	f7ff ff26 	bl	8006504 <prvUnlockQueue>
	}
 80066b8:	bf00      	nop
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08e      	sub	sp, #56	; 0x38
 80066c4:	af04      	add	r7, sp, #16
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
 80066cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10a      	bne.n	80066ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	623b      	str	r3, [r7, #32]
}
 80066e6:	bf00      	nop
 80066e8:	e7fe      	b.n	80066e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <xTaskCreateStatic+0x46>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	61fb      	str	r3, [r7, #28]
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006706:	235c      	movs	r3, #92	; 0x5c
 8006708:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2b5c      	cmp	r3, #92	; 0x5c
 800670e:	d00a      	beq.n	8006726 <xTaskCreateStatic+0x66>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	61bb      	str	r3, [r7, #24]
}
 8006722:	bf00      	nop
 8006724:	e7fe      	b.n	8006724 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006726:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	2b00      	cmp	r3, #0
 800672c:	d01e      	beq.n	800676c <xTaskCreateStatic+0xac>
 800672e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01b      	beq.n	800676c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006736:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800673c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	2202      	movs	r2, #2
 8006742:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006746:	2300      	movs	r3, #0
 8006748:	9303      	str	r3, [sp, #12]
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	9302      	str	r3, [sp, #8]
 800674e:	f107 0314 	add.w	r3, r7, #20
 8006752:	9301      	str	r3, [sp, #4]
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	68b9      	ldr	r1, [r7, #8]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 f850 	bl	8006804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006766:	f000 f8dd 	bl	8006924 <prvAddNewTaskToReadyList>
 800676a:	e001      	b.n	8006770 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800676c:	2300      	movs	r3, #0
 800676e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006770:	697b      	ldr	r3, [r7, #20]
	}
 8006772:	4618      	mov	r0, r3
 8006774:	3728      	adds	r7, #40	; 0x28
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800677a:	b580      	push	{r7, lr}
 800677c:	b08c      	sub	sp, #48	; 0x30
 800677e:	af04      	add	r7, sp, #16
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	603b      	str	r3, [r7, #0]
 8006786:	4613      	mov	r3, r2
 8006788:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800678a:	88fb      	ldrh	r3, [r7, #6]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4618      	mov	r0, r3
 8006790:	f001 fc32 	bl	8007ff8 <pvPortMalloc>
 8006794:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00e      	beq.n	80067ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800679c:	205c      	movs	r0, #92	; 0x5c
 800679e:	f001 fc2b 	bl	8007ff8 <pvPortMalloc>
 80067a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	631a      	str	r2, [r3, #48]	; 0x30
 80067b0:	e005      	b.n	80067be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067b2:	6978      	ldr	r0, [r7, #20]
 80067b4:	f001 fcec 	bl	8008190 <vPortFree>
 80067b8:	e001      	b.n	80067be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d017      	beq.n	80067f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067cc:	88fa      	ldrh	r2, [r7, #6]
 80067ce:	2300      	movs	r3, #0
 80067d0:	9303      	str	r3, [sp, #12]
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	9302      	str	r3, [sp, #8]
 80067d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d8:	9301      	str	r3, [sp, #4]
 80067da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 f80e 	bl	8006804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067e8:	69f8      	ldr	r0, [r7, #28]
 80067ea:	f000 f89b 	bl	8006924 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067ee:	2301      	movs	r3, #1
 80067f0:	61bb      	str	r3, [r7, #24]
 80067f2:	e002      	b.n	80067fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067fa:	69bb      	ldr	r3, [r7, #24]
	}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3720      	adds	r7, #32
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	461a      	mov	r2, r3
 800681c:	21a5      	movs	r1, #165	; 0xa5
 800681e:	f002 fd5b 	bl	80092d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800682c:	3b01      	subs	r3, #1
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	f023 0307 	bic.w	r3, r3, #7
 800683a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00a      	beq.n	800685c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	617b      	str	r3, [r7, #20]
}
 8006858:	bf00      	nop
 800685a:	e7fe      	b.n	800685a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d01f      	beq.n	80068a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006862:	2300      	movs	r3, #0
 8006864:	61fb      	str	r3, [r7, #28]
 8006866:	e012      	b.n	800688e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	4413      	add	r3, r2
 800686e:	7819      	ldrb	r1, [r3, #0]
 8006870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	4413      	add	r3, r2
 8006876:	3334      	adds	r3, #52	; 0x34
 8006878:	460a      	mov	r2, r1
 800687a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	4413      	add	r3, r2
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d006      	beq.n	8006896 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	3301      	adds	r3, #1
 800688c:	61fb      	str	r3, [r7, #28]
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	2b0f      	cmp	r3, #15
 8006892:	d9e9      	bls.n	8006868 <prvInitialiseNewTask+0x64>
 8006894:	e000      	b.n	8006898 <prvInitialiseNewTask+0x94>
			{
				break;
 8006896:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068a0:	e003      	b.n	80068aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	2b37      	cmp	r3, #55	; 0x37
 80068ae:	d901      	bls.n	80068b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068b0:	2337      	movs	r3, #55	; 0x37
 80068b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	2200      	movs	r2, #0
 80068c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	3304      	adds	r3, #4
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff f978 	bl	8005bc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	3318      	adds	r3, #24
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7ff f973 	bl	8005bc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f2:	2200      	movs	r2, #0
 80068f4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	68f9      	ldr	r1, [r7, #12]
 8006902:	69b8      	ldr	r0, [r7, #24]
 8006904:	f001 f928 	bl	8007b58 <pxPortInitialiseStack>
 8006908:	4602      	mov	r2, r0
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006918:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800691a:	bf00      	nop
 800691c:	3720      	adds	r7, #32
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800692c:	f001 fa42 	bl	8007db4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006930:	4b2d      	ldr	r3, [pc, #180]	; (80069e8 <prvAddNewTaskToReadyList+0xc4>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3301      	adds	r3, #1
 8006936:	4a2c      	ldr	r2, [pc, #176]	; (80069e8 <prvAddNewTaskToReadyList+0xc4>)
 8006938:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800693a:	4b2c      	ldr	r3, [pc, #176]	; (80069ec <prvAddNewTaskToReadyList+0xc8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006942:	4a2a      	ldr	r2, [pc, #168]	; (80069ec <prvAddNewTaskToReadyList+0xc8>)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006948:	4b27      	ldr	r3, [pc, #156]	; (80069e8 <prvAddNewTaskToReadyList+0xc4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d110      	bne.n	8006972 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006950:	f000 fc16 	bl	8007180 <prvInitialiseTaskLists>
 8006954:	e00d      	b.n	8006972 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006956:	4b26      	ldr	r3, [pc, #152]	; (80069f0 <prvAddNewTaskToReadyList+0xcc>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800695e:	4b23      	ldr	r3, [pc, #140]	; (80069ec <prvAddNewTaskToReadyList+0xc8>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	429a      	cmp	r2, r3
 800696a:	d802      	bhi.n	8006972 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800696c:	4a1f      	ldr	r2, [pc, #124]	; (80069ec <prvAddNewTaskToReadyList+0xc8>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006972:	4b20      	ldr	r3, [pc, #128]	; (80069f4 <prvAddNewTaskToReadyList+0xd0>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3301      	adds	r3, #1
 8006978:	4a1e      	ldr	r2, [pc, #120]	; (80069f4 <prvAddNewTaskToReadyList+0xd0>)
 800697a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800697c:	4b1d      	ldr	r3, [pc, #116]	; (80069f4 <prvAddNewTaskToReadyList+0xd0>)
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006988:	4b1b      	ldr	r3, [pc, #108]	; (80069f8 <prvAddNewTaskToReadyList+0xd4>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	429a      	cmp	r2, r3
 800698e:	d903      	bls.n	8006998 <prvAddNewTaskToReadyList+0x74>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006994:	4a18      	ldr	r2, [pc, #96]	; (80069f8 <prvAddNewTaskToReadyList+0xd4>)
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699c:	4613      	mov	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4a15      	ldr	r2, [pc, #84]	; (80069fc <prvAddNewTaskToReadyList+0xd8>)
 80069a6:	441a      	add	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3304      	adds	r3, #4
 80069ac:	4619      	mov	r1, r3
 80069ae:	4610      	mov	r0, r2
 80069b0:	f7ff f913 	bl	8005bda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069b4:	f001 fa2e 	bl	8007e14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069b8:	4b0d      	ldr	r3, [pc, #52]	; (80069f0 <prvAddNewTaskToReadyList+0xcc>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00e      	beq.n	80069de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069c0:	4b0a      	ldr	r3, [pc, #40]	; (80069ec <prvAddNewTaskToReadyList+0xc8>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d207      	bcs.n	80069de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069ce:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <prvAddNewTaskToReadyList+0xdc>)
 80069d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069de:	bf00      	nop
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20000f14 	.word	0x20000f14
 80069ec:	20000a40 	.word	0x20000a40
 80069f0:	20000f20 	.word	0x20000f20
 80069f4:	20000f30 	.word	0x20000f30
 80069f8:	20000f1c 	.word	0x20000f1c
 80069fc:	20000a44 	.word	0x20000a44
 8006a00:	e000ed04 	.word	0xe000ed04

08006a04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d017      	beq.n	8006a46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a16:	4b13      	ldr	r3, [pc, #76]	; (8006a64 <vTaskDelay+0x60>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00a      	beq.n	8006a34 <vTaskDelay+0x30>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	60bb      	str	r3, [r7, #8]
}
 8006a30:	bf00      	nop
 8006a32:	e7fe      	b.n	8006a32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a34:	f000 f880 	bl	8006b38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a38:	2100      	movs	r1, #0
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fcea 	bl	8007414 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a40:	f000 f888 	bl	8006b54 <xTaskResumeAll>
 8006a44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d107      	bne.n	8006a5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a4c:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <vTaskDelay+0x64>)
 8006a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	20000f3c 	.word	0x20000f3c
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08a      	sub	sp, #40	; 0x28
 8006a70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a7a:	463a      	mov	r2, r7
 8006a7c:	1d39      	adds	r1, r7, #4
 8006a7e:	f107 0308 	add.w	r3, r7, #8
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff f848 	bl	8005b18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	9202      	str	r2, [sp, #8]
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	2300      	movs	r3, #0
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	2300      	movs	r3, #0
 8006a98:	460a      	mov	r2, r1
 8006a9a:	4921      	ldr	r1, [pc, #132]	; (8006b20 <vTaskStartScheduler+0xb4>)
 8006a9c:	4821      	ldr	r0, [pc, #132]	; (8006b24 <vTaskStartScheduler+0xb8>)
 8006a9e:	f7ff fe0f 	bl	80066c0 <xTaskCreateStatic>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	4a20      	ldr	r2, [pc, #128]	; (8006b28 <vTaskStartScheduler+0xbc>)
 8006aa6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006aa8:	4b1f      	ldr	r3, [pc, #124]	; (8006b28 <vTaskStartScheduler+0xbc>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	e001      	b.n	8006aba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d102      	bne.n	8006ac6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ac0:	f000 fcfc 	bl	80074bc <xTimerCreateTimerTask>
 8006ac4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d116      	bne.n	8006afa <vTaskStartScheduler+0x8e>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	613b      	str	r3, [r7, #16]
}
 8006ade:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ae0:	4b12      	ldr	r3, [pc, #72]	; (8006b2c <vTaskStartScheduler+0xc0>)
 8006ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ae6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ae8:	4b11      	ldr	r3, [pc, #68]	; (8006b30 <vTaskStartScheduler+0xc4>)
 8006aea:	2201      	movs	r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006aee:	4b11      	ldr	r3, [pc, #68]	; (8006b34 <vTaskStartScheduler+0xc8>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006af4:	f001 f8bc 	bl	8007c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006af8:	e00e      	b.n	8006b18 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b00:	d10a      	bne.n	8006b18 <vTaskStartScheduler+0xac>
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	60fb      	str	r3, [r7, #12]
}
 8006b14:	bf00      	nop
 8006b16:	e7fe      	b.n	8006b16 <vTaskStartScheduler+0xaa>
}
 8006b18:	bf00      	nop
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	0800b3e8 	.word	0x0800b3e8
 8006b24:	08007151 	.word	0x08007151
 8006b28:	20000f38 	.word	0x20000f38
 8006b2c:	20000f34 	.word	0x20000f34
 8006b30:	20000f20 	.word	0x20000f20
 8006b34:	20000f18 	.word	0x20000f18

08006b38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b3c:	4b04      	ldr	r3, [pc, #16]	; (8006b50 <vTaskSuspendAll+0x18>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3301      	adds	r3, #1
 8006b42:	4a03      	ldr	r2, [pc, #12]	; (8006b50 <vTaskSuspendAll+0x18>)
 8006b44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b46:	bf00      	nop
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	20000f3c 	.word	0x20000f3c

08006b54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b62:	4b42      	ldr	r3, [pc, #264]	; (8006c6c <xTaskResumeAll+0x118>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <xTaskResumeAll+0x2c>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	603b      	str	r3, [r7, #0]
}
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b80:	f001 f918 	bl	8007db4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b84:	4b39      	ldr	r3, [pc, #228]	; (8006c6c <xTaskResumeAll+0x118>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	4a38      	ldr	r2, [pc, #224]	; (8006c6c <xTaskResumeAll+0x118>)
 8006b8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b8e:	4b37      	ldr	r3, [pc, #220]	; (8006c6c <xTaskResumeAll+0x118>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d162      	bne.n	8006c5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b96:	4b36      	ldr	r3, [pc, #216]	; (8006c70 <xTaskResumeAll+0x11c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d05e      	beq.n	8006c5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b9e:	e02f      	b.n	8006c00 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ba0:	4b34      	ldr	r3, [pc, #208]	; (8006c74 <xTaskResumeAll+0x120>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3318      	adds	r3, #24
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7ff f871 	bl	8005c94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff f86c 	bl	8005c94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc0:	4b2d      	ldr	r3, [pc, #180]	; (8006c78 <xTaskResumeAll+0x124>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d903      	bls.n	8006bd0 <xTaskResumeAll+0x7c>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	4a2a      	ldr	r2, [pc, #168]	; (8006c78 <xTaskResumeAll+0x124>)
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4a27      	ldr	r2, [pc, #156]	; (8006c7c <xTaskResumeAll+0x128>)
 8006bde:	441a      	add	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3304      	adds	r3, #4
 8006be4:	4619      	mov	r1, r3
 8006be6:	4610      	mov	r0, r2
 8006be8:	f7fe fff7 	bl	8005bda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf0:	4b23      	ldr	r3, [pc, #140]	; (8006c80 <xTaskResumeAll+0x12c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d302      	bcc.n	8006c00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006bfa:	4b22      	ldr	r3, [pc, #136]	; (8006c84 <xTaskResumeAll+0x130>)
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c00:	4b1c      	ldr	r3, [pc, #112]	; (8006c74 <xTaskResumeAll+0x120>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1cb      	bne.n	8006ba0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c0e:	f000 fb55 	bl	80072bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c12:	4b1d      	ldr	r3, [pc, #116]	; (8006c88 <xTaskResumeAll+0x134>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d010      	beq.n	8006c40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c1e:	f000 f847 	bl	8006cb0 <xTaskIncrementTick>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c28:	4b16      	ldr	r3, [pc, #88]	; (8006c84 <xTaskResumeAll+0x130>)
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3b01      	subs	r3, #1
 8006c32:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1f1      	bne.n	8006c1e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006c3a:	4b13      	ldr	r3, [pc, #76]	; (8006c88 <xTaskResumeAll+0x134>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c40:	4b10      	ldr	r3, [pc, #64]	; (8006c84 <xTaskResumeAll+0x130>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d009      	beq.n	8006c5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c4c:	4b0f      	ldr	r3, [pc, #60]	; (8006c8c <xTaskResumeAll+0x138>)
 8006c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c5c:	f001 f8da 	bl	8007e14 <vPortExitCritical>

	return xAlreadyYielded;
 8006c60:	68bb      	ldr	r3, [r7, #8]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000f3c 	.word	0x20000f3c
 8006c70:	20000f14 	.word	0x20000f14
 8006c74:	20000ed4 	.word	0x20000ed4
 8006c78:	20000f1c 	.word	0x20000f1c
 8006c7c:	20000a44 	.word	0x20000a44
 8006c80:	20000a40 	.word	0x20000a40
 8006c84:	20000f28 	.word	0x20000f28
 8006c88:	20000f24 	.word	0x20000f24
 8006c8c:	e000ed04 	.word	0xe000ed04

08006c90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c96:	4b05      	ldr	r3, [pc, #20]	; (8006cac <xTaskGetTickCount+0x1c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c9c:	687b      	ldr	r3, [r7, #4]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	20000f18 	.word	0x20000f18

08006cb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cba:	4b4f      	ldr	r3, [pc, #316]	; (8006df8 <xTaskIncrementTick+0x148>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f040 808f 	bne.w	8006de2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cc4:	4b4d      	ldr	r3, [pc, #308]	; (8006dfc <xTaskIncrementTick+0x14c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ccc:	4a4b      	ldr	r2, [pc, #300]	; (8006dfc <xTaskIncrementTick+0x14c>)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d120      	bne.n	8006d1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cd8:	4b49      	ldr	r3, [pc, #292]	; (8006e00 <xTaskIncrementTick+0x150>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	603b      	str	r3, [r7, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <xTaskIncrementTick+0x46>
 8006cf8:	4b41      	ldr	r3, [pc, #260]	; (8006e00 <xTaskIncrementTick+0x150>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	4b41      	ldr	r3, [pc, #260]	; (8006e04 <xTaskIncrementTick+0x154>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a3f      	ldr	r2, [pc, #252]	; (8006e00 <xTaskIncrementTick+0x150>)
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	4a3f      	ldr	r2, [pc, #252]	; (8006e04 <xTaskIncrementTick+0x154>)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	4b3e      	ldr	r3, [pc, #248]	; (8006e08 <xTaskIncrementTick+0x158>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3301      	adds	r3, #1
 8006d12:	4a3d      	ldr	r2, [pc, #244]	; (8006e08 <xTaskIncrementTick+0x158>)
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	f000 fad1 	bl	80072bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d1a:	4b3c      	ldr	r3, [pc, #240]	; (8006e0c <xTaskIncrementTick+0x15c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d349      	bcc.n	8006db8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d24:	4b36      	ldr	r3, [pc, #216]	; (8006e00 <xTaskIncrementTick+0x150>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d104      	bne.n	8006d38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d2e:	4b37      	ldr	r3, [pc, #220]	; (8006e0c <xTaskIncrementTick+0x15c>)
 8006d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d34:	601a      	str	r2, [r3, #0]
					break;
 8006d36:	e03f      	b.n	8006db8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d38:	4b31      	ldr	r3, [pc, #196]	; (8006e00 <xTaskIncrementTick+0x150>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d203      	bcs.n	8006d58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d50:	4a2e      	ldr	r2, [pc, #184]	; (8006e0c <xTaskIncrementTick+0x15c>)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d56:	e02f      	b.n	8006db8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fe ff99 	bl	8005c94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d004      	beq.n	8006d74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	3318      	adds	r3, #24
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fe ff90 	bl	8005c94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d78:	4b25      	ldr	r3, [pc, #148]	; (8006e10 <xTaskIncrementTick+0x160>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d903      	bls.n	8006d88 <xTaskIncrementTick+0xd8>
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	4a22      	ldr	r2, [pc, #136]	; (8006e10 <xTaskIncrementTick+0x160>)
 8006d86:	6013      	str	r3, [r2, #0]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4a1f      	ldr	r2, [pc, #124]	; (8006e14 <xTaskIncrementTick+0x164>)
 8006d96:	441a      	add	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4610      	mov	r0, r2
 8006da0:	f7fe ff1b 	bl	8005bda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da8:	4b1b      	ldr	r3, [pc, #108]	; (8006e18 <xTaskIncrementTick+0x168>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d3b8      	bcc.n	8006d24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006db2:	2301      	movs	r3, #1
 8006db4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006db6:	e7b5      	b.n	8006d24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006db8:	4b17      	ldr	r3, [pc, #92]	; (8006e18 <xTaskIncrementTick+0x168>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbe:	4915      	ldr	r1, [pc, #84]	; (8006e14 <xTaskIncrementTick+0x164>)
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	440b      	add	r3, r1
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d901      	bls.n	8006dd4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006dd4:	4b11      	ldr	r3, [pc, #68]	; (8006e1c <xTaskIncrementTick+0x16c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	e004      	b.n	8006dec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006de2:	4b0f      	ldr	r3, [pc, #60]	; (8006e20 <xTaskIncrementTick+0x170>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3301      	adds	r3, #1
 8006de8:	4a0d      	ldr	r2, [pc, #52]	; (8006e20 <xTaskIncrementTick+0x170>)
 8006dea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006dec:	697b      	ldr	r3, [r7, #20]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20000f3c 	.word	0x20000f3c
 8006dfc:	20000f18 	.word	0x20000f18
 8006e00:	20000ecc 	.word	0x20000ecc
 8006e04:	20000ed0 	.word	0x20000ed0
 8006e08:	20000f2c 	.word	0x20000f2c
 8006e0c:	20000f34 	.word	0x20000f34
 8006e10:	20000f1c 	.word	0x20000f1c
 8006e14:	20000a44 	.word	0x20000a44
 8006e18:	20000a40 	.word	0x20000a40
 8006e1c:	20000f28 	.word	0x20000f28
 8006e20:	20000f24 	.word	0x20000f24

08006e24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e2a:	4b28      	ldr	r3, [pc, #160]	; (8006ecc <vTaskSwitchContext+0xa8>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e32:	4b27      	ldr	r3, [pc, #156]	; (8006ed0 <vTaskSwitchContext+0xac>)
 8006e34:	2201      	movs	r2, #1
 8006e36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e38:	e041      	b.n	8006ebe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006e3a:	4b25      	ldr	r3, [pc, #148]	; (8006ed0 <vTaskSwitchContext+0xac>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e40:	4b24      	ldr	r3, [pc, #144]	; (8006ed4 <vTaskSwitchContext+0xb0>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	e010      	b.n	8006e6a <vTaskSwitchContext+0x46>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <vTaskSwitchContext+0x40>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	607b      	str	r3, [r7, #4]
}
 8006e60:	bf00      	nop
 8006e62:	e7fe      	b.n	8006e62 <vTaskSwitchContext+0x3e>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	60fb      	str	r3, [r7, #12]
 8006e6a:	491b      	ldr	r1, [pc, #108]	; (8006ed8 <vTaskSwitchContext+0xb4>)
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	440b      	add	r3, r1
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0e4      	beq.n	8006e48 <vTaskSwitchContext+0x24>
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4613      	mov	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4a13      	ldr	r2, [pc, #76]	; (8006ed8 <vTaskSwitchContext+0xb4>)
 8006e8a:	4413      	add	r3, r2
 8006e8c:	60bb      	str	r3, [r7, #8]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	605a      	str	r2, [r3, #4]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d104      	bne.n	8006eae <vTaskSwitchContext+0x8a>
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	605a      	str	r2, [r3, #4]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	4a09      	ldr	r2, [pc, #36]	; (8006edc <vTaskSwitchContext+0xb8>)
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	4a06      	ldr	r2, [pc, #24]	; (8006ed4 <vTaskSwitchContext+0xb0>)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6013      	str	r3, [r2, #0]
}
 8006ebe:	bf00      	nop
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	20000f3c 	.word	0x20000f3c
 8006ed0:	20000f28 	.word	0x20000f28
 8006ed4:	20000f1c 	.word	0x20000f1c
 8006ed8:	20000a44 	.word	0x20000a44
 8006edc:	20000a40 	.word	0x20000a40

08006ee0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	60fb      	str	r3, [r7, #12]
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f06:	4b07      	ldr	r3, [pc, #28]	; (8006f24 <vTaskPlaceOnEventList+0x44>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3318      	adds	r3, #24
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7fe fe87 	bl	8005c22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f14:	2101      	movs	r1, #1
 8006f16:	6838      	ldr	r0, [r7, #0]
 8006f18:	f000 fa7c 	bl	8007414 <prvAddCurrentTaskToDelayedList>
}
 8006f1c:	bf00      	nop
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	20000a40 	.word	0x20000a40

08006f28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	617b      	str	r3, [r7, #20]
}
 8006f4c:	bf00      	nop
 8006f4e:	e7fe      	b.n	8006f4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f50:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <vTaskPlaceOnEventListRestricted+0x54>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3318      	adds	r3, #24
 8006f56:	4619      	mov	r1, r3
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f7fe fe3e 	bl	8005bda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f6a:	6879      	ldr	r1, [r7, #4]
 8006f6c:	68b8      	ldr	r0, [r7, #8]
 8006f6e:	f000 fa51 	bl	8007414 <prvAddCurrentTaskToDelayedList>
	}
 8006f72:	bf00      	nop
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000a40 	.word	0x20000a40

08006f80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10a      	bne.n	8006fac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	60fb      	str	r3, [r7, #12]
}
 8006fa8:	bf00      	nop
 8006faa:	e7fe      	b.n	8006faa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	3318      	adds	r3, #24
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fe fe6f 	bl	8005c94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fb6:	4b1e      	ldr	r3, [pc, #120]	; (8007030 <xTaskRemoveFromEventList+0xb0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d11d      	bne.n	8006ffa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fe fe66 	bl	8005c94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fcc:	4b19      	ldr	r3, [pc, #100]	; (8007034 <xTaskRemoveFromEventList+0xb4>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d903      	bls.n	8006fdc <xTaskRemoveFromEventList+0x5c>
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd8:	4a16      	ldr	r2, [pc, #88]	; (8007034 <xTaskRemoveFromEventList+0xb4>)
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4a13      	ldr	r2, [pc, #76]	; (8007038 <xTaskRemoveFromEventList+0xb8>)
 8006fea:	441a      	add	r2, r3
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	3304      	adds	r3, #4
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	f7fe fdf1 	bl	8005bda <vListInsertEnd>
 8006ff8:	e005      	b.n	8007006 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	3318      	adds	r3, #24
 8006ffe:	4619      	mov	r1, r3
 8007000:	480e      	ldr	r0, [pc, #56]	; (800703c <xTaskRemoveFromEventList+0xbc>)
 8007002:	f7fe fdea 	bl	8005bda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800700a:	4b0d      	ldr	r3, [pc, #52]	; (8007040 <xTaskRemoveFromEventList+0xc0>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007010:	429a      	cmp	r2, r3
 8007012:	d905      	bls.n	8007020 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007014:	2301      	movs	r3, #1
 8007016:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007018:	4b0a      	ldr	r3, [pc, #40]	; (8007044 <xTaskRemoveFromEventList+0xc4>)
 800701a:	2201      	movs	r2, #1
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	e001      	b.n	8007024 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007020:	2300      	movs	r3, #0
 8007022:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007024:	697b      	ldr	r3, [r7, #20]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20000f3c 	.word	0x20000f3c
 8007034:	20000f1c 	.word	0x20000f1c
 8007038:	20000a44 	.word	0x20000a44
 800703c:	20000ed4 	.word	0x20000ed4
 8007040:	20000a40 	.word	0x20000a40
 8007044:	20000f28 	.word	0x20000f28

08007048 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007050:	4b06      	ldr	r3, [pc, #24]	; (800706c <vTaskInternalSetTimeOutState+0x24>)
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007058:	4b05      	ldr	r3, [pc, #20]	; (8007070 <vTaskInternalSetTimeOutState+0x28>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	605a      	str	r2, [r3, #4]
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	20000f2c 	.word	0x20000f2c
 8007070:	20000f18 	.word	0x20000f18

08007074 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10a      	bne.n	800709a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	613b      	str	r3, [r7, #16]
}
 8007096:	bf00      	nop
 8007098:	e7fe      	b.n	8007098 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10a      	bne.n	80070b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	60fb      	str	r3, [r7, #12]
}
 80070b2:	bf00      	nop
 80070b4:	e7fe      	b.n	80070b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80070b6:	f000 fe7d 	bl	8007db4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070ba:	4b1d      	ldr	r3, [pc, #116]	; (8007130 <xTaskCheckForTimeOut+0xbc>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070d2:	d102      	bne.n	80070da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070d4:	2300      	movs	r3, #0
 80070d6:	61fb      	str	r3, [r7, #28]
 80070d8:	e023      	b.n	8007122 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	4b15      	ldr	r3, [pc, #84]	; (8007134 <xTaskCheckForTimeOut+0xc0>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d007      	beq.n	80070f6 <xTaskCheckForTimeOut+0x82>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d302      	bcc.n	80070f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070f0:	2301      	movs	r3, #1
 80070f2:	61fb      	str	r3, [r7, #28]
 80070f4:	e015      	b.n	8007122 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d20b      	bcs.n	8007118 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	1ad2      	subs	r2, r2, r3
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7ff ff9b 	bl	8007048 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007112:	2300      	movs	r3, #0
 8007114:	61fb      	str	r3, [r7, #28]
 8007116:	e004      	b.n	8007122 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2200      	movs	r2, #0
 800711c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800711e:	2301      	movs	r3, #1
 8007120:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007122:	f000 fe77 	bl	8007e14 <vPortExitCritical>

	return xReturn;
 8007126:	69fb      	ldr	r3, [r7, #28]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3720      	adds	r7, #32
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	20000f18 	.word	0x20000f18
 8007134:	20000f2c 	.word	0x20000f2c

08007138 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800713c:	4b03      	ldr	r3, [pc, #12]	; (800714c <vTaskMissedYield+0x14>)
 800713e:	2201      	movs	r2, #1
 8007140:	601a      	str	r2, [r3, #0]
}
 8007142:	bf00      	nop
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	20000f28 	.word	0x20000f28

08007150 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007158:	f000 f852 	bl	8007200 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800715c:	4b06      	ldr	r3, [pc, #24]	; (8007178 <prvIdleTask+0x28>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d9f9      	bls.n	8007158 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007164:	4b05      	ldr	r3, [pc, #20]	; (800717c <prvIdleTask+0x2c>)
 8007166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007174:	e7f0      	b.n	8007158 <prvIdleTask+0x8>
 8007176:	bf00      	nop
 8007178:	20000a44 	.word	0x20000a44
 800717c:	e000ed04 	.word	0xe000ed04

08007180 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007186:	2300      	movs	r3, #0
 8007188:	607b      	str	r3, [r7, #4]
 800718a:	e00c      	b.n	80071a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	4613      	mov	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4a12      	ldr	r2, [pc, #72]	; (80071e0 <prvInitialiseTaskLists+0x60>)
 8007198:	4413      	add	r3, r2
 800719a:	4618      	mov	r0, r3
 800719c:	f7fe fcf0 	bl	8005b80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	3301      	adds	r3, #1
 80071a4:	607b      	str	r3, [r7, #4]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b37      	cmp	r3, #55	; 0x37
 80071aa:	d9ef      	bls.n	800718c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071ac:	480d      	ldr	r0, [pc, #52]	; (80071e4 <prvInitialiseTaskLists+0x64>)
 80071ae:	f7fe fce7 	bl	8005b80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071b2:	480d      	ldr	r0, [pc, #52]	; (80071e8 <prvInitialiseTaskLists+0x68>)
 80071b4:	f7fe fce4 	bl	8005b80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071b8:	480c      	ldr	r0, [pc, #48]	; (80071ec <prvInitialiseTaskLists+0x6c>)
 80071ba:	f7fe fce1 	bl	8005b80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071be:	480c      	ldr	r0, [pc, #48]	; (80071f0 <prvInitialiseTaskLists+0x70>)
 80071c0:	f7fe fcde 	bl	8005b80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071c4:	480b      	ldr	r0, [pc, #44]	; (80071f4 <prvInitialiseTaskLists+0x74>)
 80071c6:	f7fe fcdb 	bl	8005b80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071ca:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <prvInitialiseTaskLists+0x78>)
 80071cc:	4a05      	ldr	r2, [pc, #20]	; (80071e4 <prvInitialiseTaskLists+0x64>)
 80071ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071d0:	4b0a      	ldr	r3, [pc, #40]	; (80071fc <prvInitialiseTaskLists+0x7c>)
 80071d2:	4a05      	ldr	r2, [pc, #20]	; (80071e8 <prvInitialiseTaskLists+0x68>)
 80071d4:	601a      	str	r2, [r3, #0]
}
 80071d6:	bf00      	nop
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20000a44 	.word	0x20000a44
 80071e4:	20000ea4 	.word	0x20000ea4
 80071e8:	20000eb8 	.word	0x20000eb8
 80071ec:	20000ed4 	.word	0x20000ed4
 80071f0:	20000ee8 	.word	0x20000ee8
 80071f4:	20000f00 	.word	0x20000f00
 80071f8:	20000ecc 	.word	0x20000ecc
 80071fc:	20000ed0 	.word	0x20000ed0

08007200 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007206:	e019      	b.n	800723c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007208:	f000 fdd4 	bl	8007db4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800720c:	4b10      	ldr	r3, [pc, #64]	; (8007250 <prvCheckTasksWaitingTermination+0x50>)
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3304      	adds	r3, #4
 8007218:	4618      	mov	r0, r3
 800721a:	f7fe fd3b 	bl	8005c94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800721e:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <prvCheckTasksWaitingTermination+0x54>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3b01      	subs	r3, #1
 8007224:	4a0b      	ldr	r2, [pc, #44]	; (8007254 <prvCheckTasksWaitingTermination+0x54>)
 8007226:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007228:	4b0b      	ldr	r3, [pc, #44]	; (8007258 <prvCheckTasksWaitingTermination+0x58>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3b01      	subs	r3, #1
 800722e:	4a0a      	ldr	r2, [pc, #40]	; (8007258 <prvCheckTasksWaitingTermination+0x58>)
 8007230:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007232:	f000 fdef 	bl	8007e14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f810 	bl	800725c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800723c:	4b06      	ldr	r3, [pc, #24]	; (8007258 <prvCheckTasksWaitingTermination+0x58>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e1      	bne.n	8007208 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000ee8 	.word	0x20000ee8
 8007254:	20000f14 	.word	0x20000f14
 8007258:	20000efc 	.word	0x20000efc

0800725c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800726a:	2b00      	cmp	r3, #0
 800726c:	d108      	bne.n	8007280 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007272:	4618      	mov	r0, r3
 8007274:	f000 ff8c 	bl	8008190 <vPortFree>
				vPortFree( pxTCB );
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 ff89 	bl	8008190 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800727e:	e018      	b.n	80072b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007286:	2b01      	cmp	r3, #1
 8007288:	d103      	bne.n	8007292 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 ff80 	bl	8008190 <vPortFree>
	}
 8007290:	e00f      	b.n	80072b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007298:	2b02      	cmp	r3, #2
 800729a:	d00a      	beq.n	80072b2 <prvDeleteTCB+0x56>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	60fb      	str	r3, [r7, #12]
}
 80072ae:	bf00      	nop
 80072b0:	e7fe      	b.n	80072b0 <prvDeleteTCB+0x54>
	}
 80072b2:	bf00      	nop
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072c2:	4b0c      	ldr	r3, [pc, #48]	; (80072f4 <prvResetNextTaskUnblockTime+0x38>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d104      	bne.n	80072d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072cc:	4b0a      	ldr	r3, [pc, #40]	; (80072f8 <prvResetNextTaskUnblockTime+0x3c>)
 80072ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072d4:	e008      	b.n	80072e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072d6:	4b07      	ldr	r3, [pc, #28]	; (80072f4 <prvResetNextTaskUnblockTime+0x38>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	4a04      	ldr	r2, [pc, #16]	; (80072f8 <prvResetNextTaskUnblockTime+0x3c>)
 80072e6:	6013      	str	r3, [r2, #0]
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	20000ecc 	.word	0x20000ecc
 80072f8:	20000f34 	.word	0x20000f34

080072fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007302:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <xTaskGetSchedulerState+0x34>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d102      	bne.n	8007310 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800730a:	2301      	movs	r3, #1
 800730c:	607b      	str	r3, [r7, #4]
 800730e:	e008      	b.n	8007322 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007310:	4b08      	ldr	r3, [pc, #32]	; (8007334 <xTaskGetSchedulerState+0x38>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d102      	bne.n	800731e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007318:	2302      	movs	r3, #2
 800731a:	607b      	str	r3, [r7, #4]
 800731c:	e001      	b.n	8007322 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800731e:	2300      	movs	r3, #0
 8007320:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007322:	687b      	ldr	r3, [r7, #4]
	}
 8007324:	4618      	mov	r0, r3
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	20000f20 	.word	0x20000f20
 8007334:	20000f3c 	.word	0x20000f3c

08007338 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007344:	2300      	movs	r3, #0
 8007346:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d056      	beq.n	80073fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800734e:	4b2e      	ldr	r3, [pc, #184]	; (8007408 <xTaskPriorityDisinherit+0xd0>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	429a      	cmp	r2, r3
 8007356:	d00a      	beq.n	800736e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	60fb      	str	r3, [r7, #12]
}
 800736a:	bf00      	nop
 800736c:	e7fe      	b.n	800736c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10a      	bne.n	800738c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	60bb      	str	r3, [r7, #8]
}
 8007388:	bf00      	nop
 800738a:	e7fe      	b.n	800738a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007390:	1e5a      	subs	r2, r3, #1
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800739e:	429a      	cmp	r2, r3
 80073a0:	d02c      	beq.n	80073fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d128      	bne.n	80073fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	3304      	adds	r3, #4
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fe fc70 	bl	8005c94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073cc:	4b0f      	ldr	r3, [pc, #60]	; (800740c <xTaskPriorityDisinherit+0xd4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d903      	bls.n	80073dc <xTaskPriorityDisinherit+0xa4>
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d8:	4a0c      	ldr	r2, [pc, #48]	; (800740c <xTaskPriorityDisinherit+0xd4>)
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4a09      	ldr	r2, [pc, #36]	; (8007410 <xTaskPriorityDisinherit+0xd8>)
 80073ea:	441a      	add	r2, r3
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	3304      	adds	r3, #4
 80073f0:	4619      	mov	r1, r3
 80073f2:	4610      	mov	r0, r2
 80073f4:	f7fe fbf1 	bl	8005bda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073f8:	2301      	movs	r3, #1
 80073fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073fc:	697b      	ldr	r3, [r7, #20]
	}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20000a40 	.word	0x20000a40
 800740c:	20000f1c 	.word	0x20000f1c
 8007410:	20000a44 	.word	0x20000a44

08007414 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800741e:	4b21      	ldr	r3, [pc, #132]	; (80074a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007424:	4b20      	ldr	r3, [pc, #128]	; (80074a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3304      	adds	r3, #4
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe fc32 	bl	8005c94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007436:	d10a      	bne.n	800744e <prvAddCurrentTaskToDelayedList+0x3a>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d007      	beq.n	800744e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800743e:	4b1a      	ldr	r3, [pc, #104]	; (80074a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3304      	adds	r3, #4
 8007444:	4619      	mov	r1, r3
 8007446:	4819      	ldr	r0, [pc, #100]	; (80074ac <prvAddCurrentTaskToDelayedList+0x98>)
 8007448:	f7fe fbc7 	bl	8005bda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800744c:	e026      	b.n	800749c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4413      	add	r3, r2
 8007454:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007456:	4b14      	ldr	r3, [pc, #80]	; (80074a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	429a      	cmp	r2, r3
 8007464:	d209      	bcs.n	800747a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007466:	4b12      	ldr	r3, [pc, #72]	; (80074b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4b0f      	ldr	r3, [pc, #60]	; (80074a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3304      	adds	r3, #4
 8007470:	4619      	mov	r1, r3
 8007472:	4610      	mov	r0, r2
 8007474:	f7fe fbd5 	bl	8005c22 <vListInsert>
}
 8007478:	e010      	b.n	800749c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800747a:	4b0e      	ldr	r3, [pc, #56]	; (80074b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3304      	adds	r3, #4
 8007484:	4619      	mov	r1, r3
 8007486:	4610      	mov	r0, r2
 8007488:	f7fe fbcb 	bl	8005c22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800748c:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	429a      	cmp	r2, r3
 8007494:	d202      	bcs.n	800749c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007496:	4a08      	ldr	r2, [pc, #32]	; (80074b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	6013      	str	r3, [r2, #0]
}
 800749c:	bf00      	nop
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	20000f18 	.word	0x20000f18
 80074a8:	20000a40 	.word	0x20000a40
 80074ac:	20000f00 	.word	0x20000f00
 80074b0:	20000ed0 	.word	0x20000ed0
 80074b4:	20000ecc 	.word	0x20000ecc
 80074b8:	20000f34 	.word	0x20000f34

080074bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	; 0x28
 80074c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80074c6:	f000 fb07 	bl	8007ad8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80074ca:	4b1c      	ldr	r3, [pc, #112]	; (800753c <xTimerCreateTimerTask+0x80>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d021      	beq.n	8007516 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80074da:	1d3a      	adds	r2, r7, #4
 80074dc:	f107 0108 	add.w	r1, r7, #8
 80074e0:	f107 030c 	add.w	r3, r7, #12
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fe fb31 	bl	8005b4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	9202      	str	r2, [sp, #8]
 80074f2:	9301      	str	r3, [sp, #4]
 80074f4:	2302      	movs	r3, #2
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	2300      	movs	r3, #0
 80074fa:	460a      	mov	r2, r1
 80074fc:	4910      	ldr	r1, [pc, #64]	; (8007540 <xTimerCreateTimerTask+0x84>)
 80074fe:	4811      	ldr	r0, [pc, #68]	; (8007544 <xTimerCreateTimerTask+0x88>)
 8007500:	f7ff f8de 	bl	80066c0 <xTaskCreateStatic>
 8007504:	4603      	mov	r3, r0
 8007506:	4a10      	ldr	r2, [pc, #64]	; (8007548 <xTimerCreateTimerTask+0x8c>)
 8007508:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800750a:	4b0f      	ldr	r3, [pc, #60]	; (8007548 <xTimerCreateTimerTask+0x8c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007512:	2301      	movs	r3, #1
 8007514:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10a      	bne.n	8007532 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800751c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	613b      	str	r3, [r7, #16]
}
 800752e:	bf00      	nop
 8007530:	e7fe      	b.n	8007530 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007532:	697b      	ldr	r3, [r7, #20]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	20000f70 	.word	0x20000f70
 8007540:	0800b3f0 	.word	0x0800b3f0
 8007544:	08007681 	.word	0x08007681
 8007548:	20000f74 	.word	0x20000f74

0800754c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08a      	sub	sp, #40	; 0x28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800755a:	2300      	movs	r3, #0
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10a      	bne.n	800757a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	623b      	str	r3, [r7, #32]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800757a:	4b1a      	ldr	r3, [pc, #104]	; (80075e4 <xTimerGenericCommand+0x98>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d02a      	beq.n	80075d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b05      	cmp	r3, #5
 8007592:	dc18      	bgt.n	80075c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007594:	f7ff feb2 	bl	80072fc <xTaskGetSchedulerState>
 8007598:	4603      	mov	r3, r0
 800759a:	2b02      	cmp	r3, #2
 800759c:	d109      	bne.n	80075b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800759e:	4b11      	ldr	r3, [pc, #68]	; (80075e4 <xTimerGenericCommand+0x98>)
 80075a0:	6818      	ldr	r0, [r3, #0]
 80075a2:	f107 0110 	add.w	r1, r7, #16
 80075a6:	2300      	movs	r3, #0
 80075a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075aa:	f7fe fca1 	bl	8005ef0 <xQueueGenericSend>
 80075ae:	6278      	str	r0, [r7, #36]	; 0x24
 80075b0:	e012      	b.n	80075d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80075b2:	4b0c      	ldr	r3, [pc, #48]	; (80075e4 <xTimerGenericCommand+0x98>)
 80075b4:	6818      	ldr	r0, [r3, #0]
 80075b6:	f107 0110 	add.w	r1, r7, #16
 80075ba:	2300      	movs	r3, #0
 80075bc:	2200      	movs	r2, #0
 80075be:	f7fe fc97 	bl	8005ef0 <xQueueGenericSend>
 80075c2:	6278      	str	r0, [r7, #36]	; 0x24
 80075c4:	e008      	b.n	80075d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075c6:	4b07      	ldr	r3, [pc, #28]	; (80075e4 <xTimerGenericCommand+0x98>)
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	f107 0110 	add.w	r1, r7, #16
 80075ce:	2300      	movs	r3, #0
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	f7fe fd8b 	bl	80060ec <xQueueGenericSendFromISR>
 80075d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3728      	adds	r7, #40	; 0x28
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	20000f70 	.word	0x20000f70

080075e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f2:	4b22      	ldr	r3, [pc, #136]	; (800767c <prvProcessExpiredTimer+0x94>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	3304      	adds	r3, #4
 8007600:	4618      	mov	r0, r3
 8007602:	f7fe fb47 	bl	8005c94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b00      	cmp	r3, #0
 8007612:	d022      	beq.n	800765a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	699a      	ldr	r2, [r3, #24]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	18d1      	adds	r1, r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	6978      	ldr	r0, [r7, #20]
 8007622:	f000 f8d1 	bl	80077c8 <prvInsertTimerInActiveList>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d01f      	beq.n	800766c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800762c:	2300      	movs	r3, #0
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	2300      	movs	r3, #0
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	2100      	movs	r1, #0
 8007636:	6978      	ldr	r0, [r7, #20]
 8007638:	f7ff ff88 	bl	800754c <xTimerGenericCommand>
 800763c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d113      	bne.n	800766c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	60fb      	str	r3, [r7, #12]
}
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007660:	f023 0301 	bic.w	r3, r3, #1
 8007664:	b2da      	uxtb	r2, r3
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	6978      	ldr	r0, [r7, #20]
 8007672:	4798      	blx	r3
}
 8007674:	bf00      	nop
 8007676:	3718      	adds	r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	20000f68 	.word	0x20000f68

08007680 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007688:	f107 0308 	add.w	r3, r7, #8
 800768c:	4618      	mov	r0, r3
 800768e:	f000 f857 	bl	8007740 <prvGetNextExpireTime>
 8007692:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	4619      	mov	r1, r3
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 f803 	bl	80076a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800769e:	f000 f8d5 	bl	800784c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076a2:	e7f1      	b.n	8007688 <prvTimerTask+0x8>

080076a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80076ae:	f7ff fa43 	bl	8006b38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076b2:	f107 0308 	add.w	r3, r7, #8
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 f866 	bl	8007788 <prvSampleTimeNow>
 80076bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d130      	bne.n	8007726 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <prvProcessTimerOrBlockTask+0x3c>
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d806      	bhi.n	80076e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80076d2:	f7ff fa3f 	bl	8006b54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076d6:	68f9      	ldr	r1, [r7, #12]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7ff ff85 	bl	80075e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076de:	e024      	b.n	800772a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d008      	beq.n	80076f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076e6:	4b13      	ldr	r3, [pc, #76]	; (8007734 <prvProcessTimerOrBlockTask+0x90>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <prvProcessTimerOrBlockTask+0x50>
 80076f0:	2301      	movs	r3, #1
 80076f2:	e000      	b.n	80076f6 <prvProcessTimerOrBlockTask+0x52>
 80076f4:	2300      	movs	r3, #0
 80076f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076f8:	4b0f      	ldr	r3, [pc, #60]	; (8007738 <prvProcessTimerOrBlockTask+0x94>)
 80076fa:	6818      	ldr	r0, [r3, #0]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	4619      	mov	r1, r3
 8007706:	f7fe ffa7 	bl	8006658 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800770a:	f7ff fa23 	bl	8006b54 <xTaskResumeAll>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10a      	bne.n	800772a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007714:	4b09      	ldr	r3, [pc, #36]	; (800773c <prvProcessTimerOrBlockTask+0x98>)
 8007716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	f3bf 8f6f 	isb	sy
}
 8007724:	e001      	b.n	800772a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007726:	f7ff fa15 	bl	8006b54 <xTaskResumeAll>
}
 800772a:	bf00      	nop
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	20000f6c 	.word	0x20000f6c
 8007738:	20000f70 	.word	0x20000f70
 800773c:	e000ed04 	.word	0xe000ed04

08007740 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007748:	4b0e      	ldr	r3, [pc, #56]	; (8007784 <prvGetNextExpireTime+0x44>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <prvGetNextExpireTime+0x16>
 8007752:	2201      	movs	r2, #1
 8007754:	e000      	b.n	8007758 <prvGetNextExpireTime+0x18>
 8007756:	2200      	movs	r2, #0
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d105      	bne.n	8007770 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007764:	4b07      	ldr	r3, [pc, #28]	; (8007784 <prvGetNextExpireTime+0x44>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	e001      	b.n	8007774 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007774:	68fb      	ldr	r3, [r7, #12]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20000f68 	.word	0x20000f68

08007788 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007790:	f7ff fa7e 	bl	8006c90 <xTaskGetTickCount>
 8007794:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007796:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <prvSampleTimeNow+0x3c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	429a      	cmp	r2, r3
 800779e:	d205      	bcs.n	80077ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80077a0:	f000 f936 	bl	8007a10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	e002      	b.n	80077b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80077b2:	4a04      	ldr	r2, [pc, #16]	; (80077c4 <prvSampleTimeNow+0x3c>)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80077b8:	68fb      	ldr	r3, [r7, #12]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20000f78 	.word	0x20000f78

080077c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80077d6:	2300      	movs	r3, #0
 80077d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d812      	bhi.n	8007814 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	1ad2      	subs	r2, r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d302      	bcc.n	8007802 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077fc:	2301      	movs	r3, #1
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	e01b      	b.n	800783a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007802:	4b10      	ldr	r3, [pc, #64]	; (8007844 <prvInsertTimerInActiveList+0x7c>)
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3304      	adds	r3, #4
 800780a:	4619      	mov	r1, r3
 800780c:	4610      	mov	r0, r2
 800780e:	f7fe fa08 	bl	8005c22 <vListInsert>
 8007812:	e012      	b.n	800783a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d206      	bcs.n	800782a <prvInsertTimerInActiveList+0x62>
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	429a      	cmp	r2, r3
 8007822:	d302      	bcc.n	800782a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007824:	2301      	movs	r3, #1
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	e007      	b.n	800783a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800782a:	4b07      	ldr	r3, [pc, #28]	; (8007848 <prvInsertTimerInActiveList+0x80>)
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	3304      	adds	r3, #4
 8007832:	4619      	mov	r1, r3
 8007834:	4610      	mov	r0, r2
 8007836:	f7fe f9f4 	bl	8005c22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800783a:	697b      	ldr	r3, [r7, #20]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	20000f6c 	.word	0x20000f6c
 8007848:	20000f68 	.word	0x20000f68

0800784c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b08e      	sub	sp, #56	; 0x38
 8007850:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007852:	e0ca      	b.n	80079ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	da18      	bge.n	800788c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800785a:	1d3b      	adds	r3, r7, #4
 800785c:	3304      	adds	r3, #4
 800785e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10a      	bne.n	800787c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	61fb      	str	r3, [r7, #28]
}
 8007878:	bf00      	nop
 800787a:	e7fe      	b.n	800787a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007882:	6850      	ldr	r0, [r2, #4]
 8007884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007886:	6892      	ldr	r2, [r2, #8]
 8007888:	4611      	mov	r1, r2
 800788a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	f2c0 80ab 	blt.w	80079ea <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d004      	beq.n	80078aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a2:	3304      	adds	r3, #4
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fe f9f5 	bl	8005c94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078aa:	463b      	mov	r3, r7
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff ff6b 	bl	8007788 <prvSampleTimeNow>
 80078b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b09      	cmp	r3, #9
 80078b8:	f200 8096 	bhi.w	80079e8 <prvProcessReceivedCommands+0x19c>
 80078bc:	a201      	add	r2, pc, #4	; (adr r2, 80078c4 <prvProcessReceivedCommands+0x78>)
 80078be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c2:	bf00      	nop
 80078c4:	080078ed 	.word	0x080078ed
 80078c8:	080078ed 	.word	0x080078ed
 80078cc:	080078ed 	.word	0x080078ed
 80078d0:	08007961 	.word	0x08007961
 80078d4:	08007975 	.word	0x08007975
 80078d8:	080079bf 	.word	0x080079bf
 80078dc:	080078ed 	.word	0x080078ed
 80078e0:	080078ed 	.word	0x080078ed
 80078e4:	08007961 	.word	0x08007961
 80078e8:	08007975 	.word	0x08007975
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078f2:	f043 0301 	orr.w	r3, r3, #1
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	18d1      	adds	r1, r2, r3
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800790a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800790c:	f7ff ff5c 	bl	80077c8 <prvInsertTimerInActiveList>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d069      	beq.n	80079ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800791c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007924:	f003 0304 	and.w	r3, r3, #4
 8007928:	2b00      	cmp	r3, #0
 800792a:	d05e      	beq.n	80079ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	441a      	add	r2, r3
 8007934:	2300      	movs	r3, #0
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	2300      	movs	r3, #0
 800793a:	2100      	movs	r1, #0
 800793c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800793e:	f7ff fe05 	bl	800754c <xTimerGenericCommand>
 8007942:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d14f      	bne.n	80079ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	61bb      	str	r3, [r7, #24]
}
 800795c:	bf00      	nop
 800795e:	e7fe      	b.n	800795e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007966:	f023 0301 	bic.w	r3, r3, #1
 800796a:	b2da      	uxtb	r2, r3
 800796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007972:	e03a      	b.n	80079ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800797a:	f043 0301 	orr.w	r3, r3, #1
 800797e:	b2da      	uxtb	r2, r3
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	617b      	str	r3, [r7, #20]
}
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	699a      	ldr	r2, [r3, #24]
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	18d1      	adds	r1, r2, r3
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079b8:	f7ff ff06 	bl	80077c8 <prvInsertTimerInActiveList>
					break;
 80079bc:	e015      	b.n	80079ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079c4:	f003 0302 	and.w	r3, r3, #2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d103      	bne.n	80079d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80079cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ce:	f000 fbdf 	bl	8008190 <vPortFree>
 80079d2:	e00a      	b.n	80079ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079da:	f023 0301 	bic.w	r3, r3, #1
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079e6:	e000      	b.n	80079ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80079e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079ea:	4b08      	ldr	r3, [pc, #32]	; (8007a0c <prvProcessReceivedCommands+0x1c0>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	1d39      	adds	r1, r7, #4
 80079f0:	2200      	movs	r2, #0
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fe fc16 	bl	8006224 <xQueueReceive>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f47f af2a 	bne.w	8007854 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007a00:	bf00      	nop
 8007a02:	bf00      	nop
 8007a04:	3730      	adds	r7, #48	; 0x30
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	20000f70 	.word	0x20000f70

08007a10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a16:	e048      	b.n	8007aaa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a18:	4b2d      	ldr	r3, [pc, #180]	; (8007ad0 <prvSwitchTimerLists+0xc0>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a22:	4b2b      	ldr	r3, [pc, #172]	; (8007ad0 <prvSwitchTimerLists+0xc0>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fe f92f 	bl	8005c94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a44:	f003 0304 	and.w	r3, r3, #4
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d02e      	beq.n	8007aaa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	4413      	add	r3, r2
 8007a54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d90e      	bls.n	8007a7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a6a:	4b19      	ldr	r3, [pc, #100]	; (8007ad0 <prvSwitchTimerLists+0xc0>)
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3304      	adds	r3, #4
 8007a72:	4619      	mov	r1, r3
 8007a74:	4610      	mov	r0, r2
 8007a76:	f7fe f8d4 	bl	8005c22 <vListInsert>
 8007a7a:	e016      	b.n	8007aaa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	2300      	movs	r3, #0
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	2100      	movs	r1, #0
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f7ff fd60 	bl	800754c <xTimerGenericCommand>
 8007a8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10a      	bne.n	8007aaa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	603b      	str	r3, [r7, #0]
}
 8007aa6:	bf00      	nop
 8007aa8:	e7fe      	b.n	8007aa8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007aaa:	4b09      	ldr	r3, [pc, #36]	; (8007ad0 <prvSwitchTimerLists+0xc0>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1b1      	bne.n	8007a18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007ab4:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <prvSwitchTimerLists+0xc0>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007aba:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <prvSwitchTimerLists+0xc4>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a04      	ldr	r2, [pc, #16]	; (8007ad0 <prvSwitchTimerLists+0xc0>)
 8007ac0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ac2:	4a04      	ldr	r2, [pc, #16]	; (8007ad4 <prvSwitchTimerLists+0xc4>)
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	6013      	str	r3, [r2, #0]
}
 8007ac8:	bf00      	nop
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	20000f68 	.word	0x20000f68
 8007ad4:	20000f6c 	.word	0x20000f6c

08007ad8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ade:	f000 f969 	bl	8007db4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ae2:	4b15      	ldr	r3, [pc, #84]	; (8007b38 <prvCheckForValidListAndQueue+0x60>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d120      	bne.n	8007b2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007aea:	4814      	ldr	r0, [pc, #80]	; (8007b3c <prvCheckForValidListAndQueue+0x64>)
 8007aec:	f7fe f848 	bl	8005b80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007af0:	4813      	ldr	r0, [pc, #76]	; (8007b40 <prvCheckForValidListAndQueue+0x68>)
 8007af2:	f7fe f845 	bl	8005b80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007af6:	4b13      	ldr	r3, [pc, #76]	; (8007b44 <prvCheckForValidListAndQueue+0x6c>)
 8007af8:	4a10      	ldr	r2, [pc, #64]	; (8007b3c <prvCheckForValidListAndQueue+0x64>)
 8007afa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007afc:	4b12      	ldr	r3, [pc, #72]	; (8007b48 <prvCheckForValidListAndQueue+0x70>)
 8007afe:	4a10      	ldr	r2, [pc, #64]	; (8007b40 <prvCheckForValidListAndQueue+0x68>)
 8007b00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b02:	2300      	movs	r3, #0
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	4b11      	ldr	r3, [pc, #68]	; (8007b4c <prvCheckForValidListAndQueue+0x74>)
 8007b08:	4a11      	ldr	r2, [pc, #68]	; (8007b50 <prvCheckForValidListAndQueue+0x78>)
 8007b0a:	2110      	movs	r1, #16
 8007b0c:	200a      	movs	r0, #10
 8007b0e:	f7fe f953 	bl	8005db8 <xQueueGenericCreateStatic>
 8007b12:	4603      	mov	r3, r0
 8007b14:	4a08      	ldr	r2, [pc, #32]	; (8007b38 <prvCheckForValidListAndQueue+0x60>)
 8007b16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b18:	4b07      	ldr	r3, [pc, #28]	; (8007b38 <prvCheckForValidListAndQueue+0x60>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d005      	beq.n	8007b2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b20:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <prvCheckForValidListAndQueue+0x60>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	490b      	ldr	r1, [pc, #44]	; (8007b54 <prvCheckForValidListAndQueue+0x7c>)
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe fd6c 	bl	8006604 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b2c:	f000 f972 	bl	8007e14 <vPortExitCritical>
}
 8007b30:	bf00      	nop
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20000f70 	.word	0x20000f70
 8007b3c:	20000f40 	.word	0x20000f40
 8007b40:	20000f54 	.word	0x20000f54
 8007b44:	20000f68 	.word	0x20000f68
 8007b48:	20000f6c 	.word	0x20000f6c
 8007b4c:	2000101c 	.word	0x2000101c
 8007b50:	20000f7c 	.word	0x20000f7c
 8007b54:	0800b3f8 	.word	0x0800b3f8

08007b58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	3b04      	subs	r3, #4
 8007b68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3b04      	subs	r3, #4
 8007b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f023 0201 	bic.w	r2, r3, #1
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3b04      	subs	r3, #4
 8007b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b88:	4a0c      	ldr	r2, [pc, #48]	; (8007bbc <pxPortInitialiseStack+0x64>)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3b14      	subs	r3, #20
 8007b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3b04      	subs	r3, #4
 8007b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f06f 0202 	mvn.w	r2, #2
 8007ba6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	3b20      	subs	r3, #32
 8007bac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007bae:	68fb      	ldr	r3, [r7, #12]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	08007bc1 	.word	0x08007bc1

08007bc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bca:	4b12      	ldr	r3, [pc, #72]	; (8007c14 <prvTaskExitError+0x54>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bd2:	d00a      	beq.n	8007bea <prvTaskExitError+0x2a>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	60fb      	str	r3, [r7, #12]
}
 8007be6:	bf00      	nop
 8007be8:	e7fe      	b.n	8007be8 <prvTaskExitError+0x28>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	60bb      	str	r3, [r7, #8]
}
 8007bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bfe:	bf00      	nop
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0fc      	beq.n	8007c00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c06:	bf00      	nop
 8007c08:	bf00      	nop
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	20000010 	.word	0x20000010
	...

08007c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c20:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <pxCurrentTCBConst2>)
 8007c22:	6819      	ldr	r1, [r3, #0]
 8007c24:	6808      	ldr	r0, [r1, #0]
 8007c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2a:	f380 8809 	msr	PSP, r0
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f04f 0000 	mov.w	r0, #0
 8007c36:	f380 8811 	msr	BASEPRI, r0
 8007c3a:	4770      	bx	lr
 8007c3c:	f3af 8000 	nop.w

08007c40 <pxCurrentTCBConst2>:
 8007c40:	20000a40 	.word	0x20000a40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop

08007c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c48:	4808      	ldr	r0, [pc, #32]	; (8007c6c <prvPortStartFirstTask+0x24>)
 8007c4a:	6800      	ldr	r0, [r0, #0]
 8007c4c:	6800      	ldr	r0, [r0, #0]
 8007c4e:	f380 8808 	msr	MSP, r0
 8007c52:	f04f 0000 	mov.w	r0, #0
 8007c56:	f380 8814 	msr	CONTROL, r0
 8007c5a:	b662      	cpsie	i
 8007c5c:	b661      	cpsie	f
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	df00      	svc	0
 8007c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c6a:	bf00      	nop
 8007c6c:	e000ed08 	.word	0xe000ed08

08007c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c76:	4b46      	ldr	r3, [pc, #280]	; (8007d90 <xPortStartScheduler+0x120>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a46      	ldr	r2, [pc, #280]	; (8007d94 <xPortStartScheduler+0x124>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d10a      	bne.n	8007c96 <xPortStartScheduler+0x26>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	613b      	str	r3, [r7, #16]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c96:	4b3e      	ldr	r3, [pc, #248]	; (8007d90 <xPortStartScheduler+0x120>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a3f      	ldr	r2, [pc, #252]	; (8007d98 <xPortStartScheduler+0x128>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d10a      	bne.n	8007cb6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	60fb      	str	r3, [r7, #12]
}
 8007cb2:	bf00      	nop
 8007cb4:	e7fe      	b.n	8007cb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007cb6:	4b39      	ldr	r3, [pc, #228]	; (8007d9c <xPortStartScheduler+0x12c>)
 8007cb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	22ff      	movs	r2, #255	; 0xff
 8007cc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cd0:	78fb      	ldrb	r3, [r7, #3]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	4b31      	ldr	r3, [pc, #196]	; (8007da0 <xPortStartScheduler+0x130>)
 8007cdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cde:	4b31      	ldr	r3, [pc, #196]	; (8007da4 <xPortStartScheduler+0x134>)
 8007ce0:	2207      	movs	r2, #7
 8007ce2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ce4:	e009      	b.n	8007cfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ce6:	4b2f      	ldr	r3, [pc, #188]	; (8007da4 <xPortStartScheduler+0x134>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	4a2d      	ldr	r2, [pc, #180]	; (8007da4 <xPortStartScheduler+0x134>)
 8007cee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	005b      	lsls	r3, r3, #1
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cfa:	78fb      	ldrb	r3, [r7, #3]
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d02:	2b80      	cmp	r3, #128	; 0x80
 8007d04:	d0ef      	beq.n	8007ce6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d06:	4b27      	ldr	r3, [pc, #156]	; (8007da4 <xPortStartScheduler+0x134>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f1c3 0307 	rsb	r3, r3, #7
 8007d0e:	2b04      	cmp	r3, #4
 8007d10:	d00a      	beq.n	8007d28 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	60bb      	str	r3, [r7, #8]
}
 8007d24:	bf00      	nop
 8007d26:	e7fe      	b.n	8007d26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d28:	4b1e      	ldr	r3, [pc, #120]	; (8007da4 <xPortStartScheduler+0x134>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	021b      	lsls	r3, r3, #8
 8007d2e:	4a1d      	ldr	r2, [pc, #116]	; (8007da4 <xPortStartScheduler+0x134>)
 8007d30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d32:	4b1c      	ldr	r3, [pc, #112]	; (8007da4 <xPortStartScheduler+0x134>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d3a:	4a1a      	ldr	r2, [pc, #104]	; (8007da4 <xPortStartScheduler+0x134>)
 8007d3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d46:	4b18      	ldr	r3, [pc, #96]	; (8007da8 <xPortStartScheduler+0x138>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a17      	ldr	r2, [pc, #92]	; (8007da8 <xPortStartScheduler+0x138>)
 8007d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d52:	4b15      	ldr	r3, [pc, #84]	; (8007da8 <xPortStartScheduler+0x138>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a14      	ldr	r2, [pc, #80]	; (8007da8 <xPortStartScheduler+0x138>)
 8007d58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d5e:	f000 f8dd 	bl	8007f1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d62:	4b12      	ldr	r3, [pc, #72]	; (8007dac <xPortStartScheduler+0x13c>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d68:	f000 f8fc 	bl	8007f64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d6c:	4b10      	ldr	r3, [pc, #64]	; (8007db0 <xPortStartScheduler+0x140>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a0f      	ldr	r2, [pc, #60]	; (8007db0 <xPortStartScheduler+0x140>)
 8007d72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d78:	f7ff ff66 	bl	8007c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d7c:	f7ff f852 	bl	8006e24 <vTaskSwitchContext>
	prvTaskExitError();
 8007d80:	f7ff ff1e 	bl	8007bc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	e000ed00 	.word	0xe000ed00
 8007d94:	410fc271 	.word	0x410fc271
 8007d98:	410fc270 	.word	0x410fc270
 8007d9c:	e000e400 	.word	0xe000e400
 8007da0:	2000106c 	.word	0x2000106c
 8007da4:	20001070 	.word	0x20001070
 8007da8:	e000ed20 	.word	0xe000ed20
 8007dac:	20000010 	.word	0x20000010
 8007db0:	e000ef34 	.word	0xe000ef34

08007db4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	607b      	str	r3, [r7, #4]
}
 8007dcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007dce:	4b0f      	ldr	r3, [pc, #60]	; (8007e0c <vPortEnterCritical+0x58>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	4a0d      	ldr	r2, [pc, #52]	; (8007e0c <vPortEnterCritical+0x58>)
 8007dd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007dd8:	4b0c      	ldr	r3, [pc, #48]	; (8007e0c <vPortEnterCritical+0x58>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d10f      	bne.n	8007e00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007de0:	4b0b      	ldr	r3, [pc, #44]	; (8007e10 <vPortEnterCritical+0x5c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <vPortEnterCritical+0x4c>
	__asm volatile
 8007dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	603b      	str	r3, [r7, #0]
}
 8007dfc:	bf00      	nop
 8007dfe:	e7fe      	b.n	8007dfe <vPortEnterCritical+0x4a>
	}
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	20000010 	.word	0x20000010
 8007e10:	e000ed04 	.word	0xe000ed04

08007e14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e1a:	4b12      	ldr	r3, [pc, #72]	; (8007e64 <vPortExitCritical+0x50>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10a      	bne.n	8007e38 <vPortExitCritical+0x24>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	607b      	str	r3, [r7, #4]
}
 8007e34:	bf00      	nop
 8007e36:	e7fe      	b.n	8007e36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e38:	4b0a      	ldr	r3, [pc, #40]	; (8007e64 <vPortExitCritical+0x50>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	4a09      	ldr	r2, [pc, #36]	; (8007e64 <vPortExitCritical+0x50>)
 8007e40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e42:	4b08      	ldr	r3, [pc, #32]	; (8007e64 <vPortExitCritical+0x50>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d105      	bne.n	8007e56 <vPortExitCritical+0x42>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	f383 8811 	msr	BASEPRI, r3
}
 8007e54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	20000010 	.word	0x20000010
	...

08007e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e70:	f3ef 8009 	mrs	r0, PSP
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	4b15      	ldr	r3, [pc, #84]	; (8007ed0 <pxCurrentTCBConst>)
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	f01e 0f10 	tst.w	lr, #16
 8007e80:	bf08      	it	eq
 8007e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8a:	6010      	str	r0, [r2, #0]
 8007e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e94:	f380 8811 	msr	BASEPRI, r0
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f7fe ffc0 	bl	8006e24 <vTaskSwitchContext>
 8007ea4:	f04f 0000 	mov.w	r0, #0
 8007ea8:	f380 8811 	msr	BASEPRI, r0
 8007eac:	bc09      	pop	{r0, r3}
 8007eae:	6819      	ldr	r1, [r3, #0]
 8007eb0:	6808      	ldr	r0, [r1, #0]
 8007eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb6:	f01e 0f10 	tst.w	lr, #16
 8007eba:	bf08      	it	eq
 8007ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ec0:	f380 8809 	msr	PSP, r0
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	f3af 8000 	nop.w

08007ed0 <pxCurrentTCBConst>:
 8007ed0:	20000a40 	.word	0x20000a40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop

08007ed8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	607b      	str	r3, [r7, #4]
}
 8007ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ef2:	f7fe fedd 	bl	8006cb0 <xTaskIncrementTick>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007efc:	4b06      	ldr	r3, [pc, #24]	; (8007f18 <xPortSysTickHandler+0x40>)
 8007efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	2300      	movs	r3, #0
 8007f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	f383 8811 	msr	BASEPRI, r3
}
 8007f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f10:	bf00      	nop
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	e000ed04 	.word	0xe000ed04

08007f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f20:	4b0b      	ldr	r3, [pc, #44]	; (8007f50 <vPortSetupTimerInterrupt+0x34>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f26:	4b0b      	ldr	r3, [pc, #44]	; (8007f54 <vPortSetupTimerInterrupt+0x38>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f2c:	4b0a      	ldr	r3, [pc, #40]	; (8007f58 <vPortSetupTimerInterrupt+0x3c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a0a      	ldr	r2, [pc, #40]	; (8007f5c <vPortSetupTimerInterrupt+0x40>)
 8007f32:	fba2 2303 	umull	r2, r3, r2, r3
 8007f36:	099b      	lsrs	r3, r3, #6
 8007f38:	4a09      	ldr	r2, [pc, #36]	; (8007f60 <vPortSetupTimerInterrupt+0x44>)
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f3e:	4b04      	ldr	r3, [pc, #16]	; (8007f50 <vPortSetupTimerInterrupt+0x34>)
 8007f40:	2207      	movs	r2, #7
 8007f42:	601a      	str	r2, [r3, #0]
}
 8007f44:	bf00      	nop
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	e000e010 	.word	0xe000e010
 8007f54:	e000e018 	.word	0xe000e018
 8007f58:	20000004 	.word	0x20000004
 8007f5c:	10624dd3 	.word	0x10624dd3
 8007f60:	e000e014 	.word	0xe000e014

08007f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f74 <vPortEnableVFP+0x10>
 8007f68:	6801      	ldr	r1, [r0, #0]
 8007f6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f6e:	6001      	str	r1, [r0, #0]
 8007f70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f72:	bf00      	nop
 8007f74:	e000ed88 	.word	0xe000ed88

08007f78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f7e:	f3ef 8305 	mrs	r3, IPSR
 8007f82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b0f      	cmp	r3, #15
 8007f88:	d914      	bls.n	8007fb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f8a:	4a17      	ldr	r2, [pc, #92]	; (8007fe8 <vPortValidateInterruptPriority+0x70>)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4413      	add	r3, r2
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f94:	4b15      	ldr	r3, [pc, #84]	; (8007fec <vPortValidateInterruptPriority+0x74>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	7afa      	ldrb	r2, [r7, #11]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d20a      	bcs.n	8007fb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	607b      	str	r3, [r7, #4]
}
 8007fb0:	bf00      	nop
 8007fb2:	e7fe      	b.n	8007fb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007fb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ff0 <vPortValidateInterruptPriority+0x78>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007fbc:	4b0d      	ldr	r3, [pc, #52]	; (8007ff4 <vPortValidateInterruptPriority+0x7c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d90a      	bls.n	8007fda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	603b      	str	r3, [r7, #0]
}
 8007fd6:	bf00      	nop
 8007fd8:	e7fe      	b.n	8007fd8 <vPortValidateInterruptPriority+0x60>
	}
 8007fda:	bf00      	nop
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	e000e3f0 	.word	0xe000e3f0
 8007fec:	2000106c 	.word	0x2000106c
 8007ff0:	e000ed0c 	.word	0xe000ed0c
 8007ff4:	20001070 	.word	0x20001070

08007ff8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08a      	sub	sp, #40	; 0x28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008000:	2300      	movs	r3, #0
 8008002:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008004:	f7fe fd98 	bl	8006b38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008008:	4b5b      	ldr	r3, [pc, #364]	; (8008178 <pvPortMalloc+0x180>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008010:	f000 f920 	bl	8008254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008014:	4b59      	ldr	r3, [pc, #356]	; (800817c <pvPortMalloc+0x184>)
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4013      	ands	r3, r2
 800801c:	2b00      	cmp	r3, #0
 800801e:	f040 8093 	bne.w	8008148 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d01d      	beq.n	8008064 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008028:	2208      	movs	r2, #8
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4413      	add	r3, r2
 800802e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f003 0307 	and.w	r3, r3, #7
 8008036:	2b00      	cmp	r3, #0
 8008038:	d014      	beq.n	8008064 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f023 0307 	bic.w	r3, r3, #7
 8008040:	3308      	adds	r3, #8
 8008042:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f003 0307 	and.w	r3, r3, #7
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00a      	beq.n	8008064 <pvPortMalloc+0x6c>
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	617b      	str	r3, [r7, #20]
}
 8008060:	bf00      	nop
 8008062:	e7fe      	b.n	8008062 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d06e      	beq.n	8008148 <pvPortMalloc+0x150>
 800806a:	4b45      	ldr	r3, [pc, #276]	; (8008180 <pvPortMalloc+0x188>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	429a      	cmp	r2, r3
 8008072:	d869      	bhi.n	8008148 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008074:	4b43      	ldr	r3, [pc, #268]	; (8008184 <pvPortMalloc+0x18c>)
 8008076:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008078:	4b42      	ldr	r3, [pc, #264]	; (8008184 <pvPortMalloc+0x18c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800807e:	e004      	b.n	800808a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008082:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	429a      	cmp	r2, r3
 8008092:	d903      	bls.n	800809c <pvPortMalloc+0xa4>
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1f1      	bne.n	8008080 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800809c:	4b36      	ldr	r3, [pc, #216]	; (8008178 <pvPortMalloc+0x180>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d050      	beq.n	8008148 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2208      	movs	r2, #8
 80080ac:	4413      	add	r3, r2
 80080ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	1ad2      	subs	r2, r2, r3
 80080c0:	2308      	movs	r3, #8
 80080c2:	005b      	lsls	r3, r3, #1
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d91f      	bls.n	8008108 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4413      	add	r3, r2
 80080ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	f003 0307 	and.w	r3, r3, #7
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00a      	beq.n	80080f0 <pvPortMalloc+0xf8>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	613b      	str	r3, [r7, #16]
}
 80080ec:	bf00      	nop
 80080ee:	e7fe      	b.n	80080ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	1ad2      	subs	r2, r2, r3
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008102:	69b8      	ldr	r0, [r7, #24]
 8008104:	f000 f908 	bl	8008318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008108:	4b1d      	ldr	r3, [pc, #116]	; (8008180 <pvPortMalloc+0x188>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	4a1b      	ldr	r2, [pc, #108]	; (8008180 <pvPortMalloc+0x188>)
 8008114:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008116:	4b1a      	ldr	r3, [pc, #104]	; (8008180 <pvPortMalloc+0x188>)
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	4b1b      	ldr	r3, [pc, #108]	; (8008188 <pvPortMalloc+0x190>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	429a      	cmp	r2, r3
 8008120:	d203      	bcs.n	800812a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008122:	4b17      	ldr	r3, [pc, #92]	; (8008180 <pvPortMalloc+0x188>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a18      	ldr	r2, [pc, #96]	; (8008188 <pvPortMalloc+0x190>)
 8008128:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	4b13      	ldr	r3, [pc, #76]	; (800817c <pvPortMalloc+0x184>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	431a      	orrs	r2, r3
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800813e:	4b13      	ldr	r3, [pc, #76]	; (800818c <pvPortMalloc+0x194>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3301      	adds	r3, #1
 8008144:	4a11      	ldr	r2, [pc, #68]	; (800818c <pvPortMalloc+0x194>)
 8008146:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008148:	f7fe fd04 	bl	8006b54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	f003 0307 	and.w	r3, r3, #7
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <pvPortMalloc+0x174>
	__asm volatile
 8008156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815a:	f383 8811 	msr	BASEPRI, r3
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	60fb      	str	r3, [r7, #12]
}
 8008168:	bf00      	nop
 800816a:	e7fe      	b.n	800816a <pvPortMalloc+0x172>
	return pvReturn;
 800816c:	69fb      	ldr	r3, [r7, #28]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3728      	adds	r7, #40	; 0x28
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	20004c7c 	.word	0x20004c7c
 800817c:	20004c90 	.word	0x20004c90
 8008180:	20004c80 	.word	0x20004c80
 8008184:	20004c74 	.word	0x20004c74
 8008188:	20004c84 	.word	0x20004c84
 800818c:	20004c88 	.word	0x20004c88

08008190 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d04d      	beq.n	800823e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081a2:	2308      	movs	r3, #8
 80081a4:	425b      	negs	r3, r3
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	4413      	add	r3, r2
 80081aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	4b24      	ldr	r3, [pc, #144]	; (8008248 <vPortFree+0xb8>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4013      	ands	r3, r2
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10a      	bne.n	80081d4 <vPortFree+0x44>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	60fb      	str	r3, [r7, #12]
}
 80081d0:	bf00      	nop
 80081d2:	e7fe      	b.n	80081d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00a      	beq.n	80081f2 <vPortFree+0x62>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e0:	f383 8811 	msr	BASEPRI, r3
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	60bb      	str	r3, [r7, #8]
}
 80081ee:	bf00      	nop
 80081f0:	e7fe      	b.n	80081f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	4b14      	ldr	r3, [pc, #80]	; (8008248 <vPortFree+0xb8>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4013      	ands	r3, r2
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d01e      	beq.n	800823e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d11a      	bne.n	800823e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	4b0e      	ldr	r3, [pc, #56]	; (8008248 <vPortFree+0xb8>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	43db      	mvns	r3, r3
 8008212:	401a      	ands	r2, r3
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008218:	f7fe fc8e 	bl	8006b38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	4b0a      	ldr	r3, [pc, #40]	; (800824c <vPortFree+0xbc>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4413      	add	r3, r2
 8008226:	4a09      	ldr	r2, [pc, #36]	; (800824c <vPortFree+0xbc>)
 8008228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800822a:	6938      	ldr	r0, [r7, #16]
 800822c:	f000 f874 	bl	8008318 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008230:	4b07      	ldr	r3, [pc, #28]	; (8008250 <vPortFree+0xc0>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3301      	adds	r3, #1
 8008236:	4a06      	ldr	r2, [pc, #24]	; (8008250 <vPortFree+0xc0>)
 8008238:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800823a:	f7fe fc8b 	bl	8006b54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800823e:	bf00      	nop
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20004c90 	.word	0x20004c90
 800824c:	20004c80 	.word	0x20004c80
 8008250:	20004c8c 	.word	0x20004c8c

08008254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800825a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800825e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008260:	4b27      	ldr	r3, [pc, #156]	; (8008300 <prvHeapInit+0xac>)
 8008262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f003 0307 	and.w	r3, r3, #7
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00c      	beq.n	8008288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	3307      	adds	r3, #7
 8008272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f023 0307 	bic.w	r3, r3, #7
 800827a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	4a1f      	ldr	r2, [pc, #124]	; (8008300 <prvHeapInit+0xac>)
 8008284:	4413      	add	r3, r2
 8008286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800828c:	4a1d      	ldr	r2, [pc, #116]	; (8008304 <prvHeapInit+0xb0>)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008292:	4b1c      	ldr	r3, [pc, #112]	; (8008304 <prvHeapInit+0xb0>)
 8008294:	2200      	movs	r2, #0
 8008296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	4413      	add	r3, r2
 800829e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082a0:	2208      	movs	r2, #8
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	1a9b      	subs	r3, r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f023 0307 	bic.w	r3, r3, #7
 80082ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4a15      	ldr	r2, [pc, #84]	; (8008308 <prvHeapInit+0xb4>)
 80082b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082b6:	4b14      	ldr	r3, [pc, #80]	; (8008308 <prvHeapInit+0xb4>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2200      	movs	r2, #0
 80082bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082be:	4b12      	ldr	r3, [pc, #72]	; (8008308 <prvHeapInit+0xb4>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	1ad2      	subs	r2, r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082d4:	4b0c      	ldr	r3, [pc, #48]	; (8008308 <prvHeapInit+0xb4>)
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	4a0a      	ldr	r2, [pc, #40]	; (800830c <prvHeapInit+0xb8>)
 80082e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	4a09      	ldr	r2, [pc, #36]	; (8008310 <prvHeapInit+0xbc>)
 80082ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082ec:	4b09      	ldr	r3, [pc, #36]	; (8008314 <prvHeapInit+0xc0>)
 80082ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082f2:	601a      	str	r2, [r3, #0]
}
 80082f4:	bf00      	nop
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	20001074 	.word	0x20001074
 8008304:	20004c74 	.word	0x20004c74
 8008308:	20004c7c 	.word	0x20004c7c
 800830c:	20004c84 	.word	0x20004c84
 8008310:	20004c80 	.word	0x20004c80
 8008314:	20004c90 	.word	0x20004c90

08008318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008320:	4b28      	ldr	r3, [pc, #160]	; (80083c4 <prvInsertBlockIntoFreeList+0xac>)
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	e002      	b.n	800832c <prvInsertBlockIntoFreeList+0x14>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	429a      	cmp	r2, r3
 8008334:	d8f7      	bhi.n	8008326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	4413      	add	r3, r2
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	429a      	cmp	r2, r3
 8008346:	d108      	bne.n	800835a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	441a      	add	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	441a      	add	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d118      	bne.n	80083a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	4b15      	ldr	r3, [pc, #84]	; (80083c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	429a      	cmp	r2, r3
 8008378:	d00d      	beq.n	8008396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	441a      	add	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	e008      	b.n	80083a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008396:	4b0c      	ldr	r3, [pc, #48]	; (80083c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	e003      	b.n	80083a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d002      	beq.n	80083b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083b6:	bf00      	nop
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	20004c74 	.word	0x20004c74
 80083c8:	20004c7c 	.word	0x20004c7c

080083cc <_ZdlPvj>:
 80083cc:	f000 b8be 	b.w	800854c <_ZdlPv>

080083d0 <_Znwj>:
 80083d0:	2801      	cmp	r0, #1
 80083d2:	bf38      	it	cc
 80083d4:	2001      	movcc	r0, #1
 80083d6:	b510      	push	{r4, lr}
 80083d8:	4604      	mov	r4, r0
 80083da:	4620      	mov	r0, r4
 80083dc:	f000 fc3c 	bl	8008c58 <malloc>
 80083e0:	b100      	cbz	r0, 80083e4 <_Znwj+0x14>
 80083e2:	bd10      	pop	{r4, pc}
 80083e4:	f000 f8b4 	bl	8008550 <_ZSt15get_new_handlerv>
 80083e8:	b908      	cbnz	r0, 80083ee <_Znwj+0x1e>
 80083ea:	f000 f939 	bl	8008660 <abort>
 80083ee:	4780      	blx	r0
 80083f0:	e7f3      	b.n	80083da <_Znwj+0xa>

080083f2 <_ZSt17__throw_bad_allocv>:
 80083f2:	b508      	push	{r3, lr}
 80083f4:	f000 f934 	bl	8008660 <abort>

080083f8 <_ZSt28__throw_bad_array_new_lengthv>:
 80083f8:	b508      	push	{r3, lr}
 80083fa:	f000 f931 	bl	8008660 <abort>
	...

08008400 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 8008400:	290d      	cmp	r1, #13
 8008402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008404:	4605      	mov	r5, r0
 8008406:	d81c      	bhi.n	8008442 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x42>
 8008408:	2900      	cmp	r1, #0
 800840a:	d035      	beq.n	8008478 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x78>
 800840c:	4b1b      	ldr	r3, [pc, #108]	; (800847c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>)
 800840e:	5c5c      	ldrb	r4, [r3, r1]
 8008410:	4620      	mov	r0, r4
 8008412:	f7f8 f887 	bl	8000524 <__aeabi_i2d>
 8008416:	4606      	mov	r6, r0
 8008418:	6828      	ldr	r0, [r5, #0]
 800841a:	460f      	mov	r7, r1
 800841c:	f7f8 f894 	bl	8000548 <__aeabi_f2d>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	4630      	mov	r0, r6
 8008426:	4639      	mov	r1, r7
 8008428:	f7f8 f8e6 	bl	80005f8 <__aeabi_dmul>
 800842c:	ec41 0b10 	vmov	d0, r0, r1
 8008430:	f000 f896 	bl	8008560 <floor>
 8008434:	ec51 0b10 	vmov	r0, r1, d0
 8008438:	f7f8 fbb6 	bl	8000ba8 <__aeabi_d2uiz>
 800843c:	6068      	str	r0, [r5, #4]
 800843e:	4620      	mov	r0, r4
 8008440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008442:	4a0f      	ldr	r2, [pc, #60]	; (8008480 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x80>)
 8008444:	23f9      	movs	r3, #249	; 0xf9
 8008446:	1058      	asrs	r0, r3, #1
 8008448:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800844c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8008450:	428e      	cmp	r6, r1
 8008452:	bf3b      	ittet	cc
 8008454:	1a1b      	subcc	r3, r3, r0
 8008456:	f103 33ff 	addcc.w	r3, r3, #4294967295	; 0xffffffff
 800845a:	4603      	movcs	r3, r0
 800845c:	1d22      	addcc	r2, r4, #4
 800845e:	2b00      	cmp	r3, #0
 8008460:	dcf1      	bgt.n	8008446 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x46>
 8008462:	4b08      	ldr	r3, [pc, #32]	; (8008484 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x84>)
 8008464:	6814      	ldr	r4, [r2, #0]
 8008466:	429a      	cmp	r2, r3
 8008468:	d003      	beq.n	8008472 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x72>
 800846a:	4620      	mov	r0, r4
 800846c:	f7f8 f84a 	bl	8000504 <__aeabi_ui2d>
 8008470:	e7d1      	b.n	8008416 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x16>
 8008472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008476:	e7e1      	b.n	800843c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3c>
 8008478:	2401      	movs	r4, #1
 800847a:	e7e0      	b.n	800843e <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3e>
 800847c:	0800b840 	.word	0x0800b840
 8008480:	0800b454 	.word	0x0800b454
 8008484:	0800b838 	.word	0x0800b838

08008488 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 8008488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800848c:	ed2d 8b02 	vpush	{d8}
 8008490:	4692      	mov	sl, r2
 8008492:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008494:	eb03 0802 	add.w	r8, r3, r2
 8008498:	684b      	ldr	r3, [r1, #4]
 800849a:	4598      	cmp	r8, r3
 800849c:	4604      	mov	r4, r0
 800849e:	460d      	mov	r5, r1
 80084a0:	d94d      	bls.n	800853e <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xb6>
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	6808      	ldr	r0, [r1, #0]
 80084a6:	bf14      	ite	ne
 80084a8:	f04f 0900 	movne.w	r9, #0
 80084ac:	f04f 090b 	moveq.w	r9, #11
 80084b0:	f7f8 f84a 	bl	8000548 <__aeabi_f2d>
 80084b4:	45c8      	cmp	r8, r9
 80084b6:	4606      	mov	r6, r0
 80084b8:	460f      	mov	r7, r1
 80084ba:	4640      	mov	r0, r8
 80084bc:	bf38      	it	cc
 80084be:	4648      	movcc	r0, r9
 80084c0:	f7f8 f820 	bl	8000504 <__aeabi_ui2d>
 80084c4:	4632      	mov	r2, r6
 80084c6:	463b      	mov	r3, r7
 80084c8:	f7f8 f9c0 	bl	800084c <__aeabi_ddiv>
 80084cc:	ec41 0b18 	vmov	d8, r0, r1
 80084d0:	4650      	mov	r0, sl
 80084d2:	f7f8 f817 	bl	8000504 <__aeabi_ui2d>
 80084d6:	ec53 2b18 	vmov	r2, r3, d8
 80084da:	4680      	mov	r8, r0
 80084dc:	4689      	mov	r9, r1
 80084de:	f7f8 fb07 	bl	8000af0 <__aeabi_dcmple>
 80084e2:	b1e8      	cbz	r0, 8008520 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x98>
 80084e4:	eeb0 0a48 	vmov.f32	s0, s16
 80084e8:	eef0 0a68 	vmov.f32	s1, s17
 80084ec:	f000 f838 	bl	8008560 <floor>
 80084f0:	4b15      	ldr	r3, [pc, #84]	; (8008548 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xc0>)
 80084f2:	ec51 0b10 	vmov	r0, r1, d0
 80084f6:	2200      	movs	r2, #0
 80084f8:	f7f7 fec8 	bl	800028c <__adddf3>
 80084fc:	f7f8 fb54 	bl	8000ba8 <__aeabi_d2uiz>
 8008500:	ea4f 014a 	mov.w	r1, sl, lsl #1
 8008504:	4281      	cmp	r1, r0
 8008506:	bf38      	it	cc
 8008508:	4601      	movcc	r1, r0
 800850a:	4628      	mov	r0, r5
 800850c:	f7ff ff78 	bl	8008400 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8008510:	2301      	movs	r3, #1
 8008512:	7023      	strb	r3, [r4, #0]
 8008514:	6060      	str	r0, [r4, #4]
 8008516:	ecbd 8b02 	vpop	{d8}
 800851a:	4620      	mov	r0, r4
 800851c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008520:	4642      	mov	r2, r8
 8008522:	464b      	mov	r3, r9
 8008524:	4630      	mov	r0, r6
 8008526:	4639      	mov	r1, r7
 8008528:	f7f8 f866 	bl	80005f8 <__aeabi_dmul>
 800852c:	ec41 0b10 	vmov	d0, r0, r1
 8008530:	f000 f816 	bl	8008560 <floor>
 8008534:	ec51 0b10 	vmov	r0, r1, d0
 8008538:	f7f8 fb36 	bl	8000ba8 <__aeabi_d2uiz>
 800853c:	6068      	str	r0, [r5, #4]
 800853e:	2300      	movs	r3, #0
 8008540:	e9c4 3300 	strd	r3, r3, [r4]
 8008544:	e7e7      	b.n	8008516 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x8e>
 8008546:	bf00      	nop
 8008548:	3ff00000 	.word	0x3ff00000

0800854c <_ZdlPv>:
 800854c:	f000 bb8c 	b.w	8008c68 <free>

08008550 <_ZSt15get_new_handlerv>:
 8008550:	4b02      	ldr	r3, [pc, #8]	; (800855c <_ZSt15get_new_handlerv+0xc>)
 8008552:	6818      	ldr	r0, [r3, #0]
 8008554:	f3bf 8f5b 	dmb	ish
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	20004c94 	.word	0x20004c94

08008560 <floor>:
 8008560:	ec51 0b10 	vmov	r0, r1, d0
 8008564:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800856c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8008570:	2e13      	cmp	r6, #19
 8008572:	ee10 5a10 	vmov	r5, s0
 8008576:	ee10 8a10 	vmov	r8, s0
 800857a:	460c      	mov	r4, r1
 800857c:	dc31      	bgt.n	80085e2 <floor+0x82>
 800857e:	2e00      	cmp	r6, #0
 8008580:	da14      	bge.n	80085ac <floor+0x4c>
 8008582:	a333      	add	r3, pc, #204	; (adr r3, 8008650 <floor+0xf0>)
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	f7f7 fe80 	bl	800028c <__adddf3>
 800858c:	2200      	movs	r2, #0
 800858e:	2300      	movs	r3, #0
 8008590:	f7f8 fac2 	bl	8000b18 <__aeabi_dcmpgt>
 8008594:	b138      	cbz	r0, 80085a6 <floor+0x46>
 8008596:	2c00      	cmp	r4, #0
 8008598:	da53      	bge.n	8008642 <floor+0xe2>
 800859a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800859e:	4325      	orrs	r5, r4
 80085a0:	d052      	beq.n	8008648 <floor+0xe8>
 80085a2:	4c2d      	ldr	r4, [pc, #180]	; (8008658 <floor+0xf8>)
 80085a4:	2500      	movs	r5, #0
 80085a6:	4621      	mov	r1, r4
 80085a8:	4628      	mov	r0, r5
 80085aa:	e024      	b.n	80085f6 <floor+0x96>
 80085ac:	4f2b      	ldr	r7, [pc, #172]	; (800865c <floor+0xfc>)
 80085ae:	4137      	asrs	r7, r6
 80085b0:	ea01 0307 	and.w	r3, r1, r7
 80085b4:	4303      	orrs	r3, r0
 80085b6:	d01e      	beq.n	80085f6 <floor+0x96>
 80085b8:	a325      	add	r3, pc, #148	; (adr r3, 8008650 <floor+0xf0>)
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	f7f7 fe65 	bl	800028c <__adddf3>
 80085c2:	2200      	movs	r2, #0
 80085c4:	2300      	movs	r3, #0
 80085c6:	f7f8 faa7 	bl	8000b18 <__aeabi_dcmpgt>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d0eb      	beq.n	80085a6 <floor+0x46>
 80085ce:	2c00      	cmp	r4, #0
 80085d0:	bfbe      	ittt	lt
 80085d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80085d6:	4133      	asrlt	r3, r6
 80085d8:	18e4      	addlt	r4, r4, r3
 80085da:	ea24 0407 	bic.w	r4, r4, r7
 80085de:	2500      	movs	r5, #0
 80085e0:	e7e1      	b.n	80085a6 <floor+0x46>
 80085e2:	2e33      	cmp	r6, #51	; 0x33
 80085e4:	dd0b      	ble.n	80085fe <floor+0x9e>
 80085e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80085ea:	d104      	bne.n	80085f6 <floor+0x96>
 80085ec:	ee10 2a10 	vmov	r2, s0
 80085f0:	460b      	mov	r3, r1
 80085f2:	f7f7 fe4b 	bl	800028c <__adddf3>
 80085f6:	ec41 0b10 	vmov	d0, r0, r1
 80085fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085fe:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8008602:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008606:	40df      	lsrs	r7, r3
 8008608:	4238      	tst	r0, r7
 800860a:	d0f4      	beq.n	80085f6 <floor+0x96>
 800860c:	a310      	add	r3, pc, #64	; (adr r3, 8008650 <floor+0xf0>)
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	f7f7 fe3b 	bl	800028c <__adddf3>
 8008616:	2200      	movs	r2, #0
 8008618:	2300      	movs	r3, #0
 800861a:	f7f8 fa7d 	bl	8000b18 <__aeabi_dcmpgt>
 800861e:	2800      	cmp	r0, #0
 8008620:	d0c1      	beq.n	80085a6 <floor+0x46>
 8008622:	2c00      	cmp	r4, #0
 8008624:	da0a      	bge.n	800863c <floor+0xdc>
 8008626:	2e14      	cmp	r6, #20
 8008628:	d101      	bne.n	800862e <floor+0xce>
 800862a:	3401      	adds	r4, #1
 800862c:	e006      	b.n	800863c <floor+0xdc>
 800862e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008632:	2301      	movs	r3, #1
 8008634:	40b3      	lsls	r3, r6
 8008636:	441d      	add	r5, r3
 8008638:	45a8      	cmp	r8, r5
 800863a:	d8f6      	bhi.n	800862a <floor+0xca>
 800863c:	ea25 0507 	bic.w	r5, r5, r7
 8008640:	e7b1      	b.n	80085a6 <floor+0x46>
 8008642:	2500      	movs	r5, #0
 8008644:	462c      	mov	r4, r5
 8008646:	e7ae      	b.n	80085a6 <floor+0x46>
 8008648:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800864c:	e7ab      	b.n	80085a6 <floor+0x46>
 800864e:	bf00      	nop
 8008650:	8800759c 	.word	0x8800759c
 8008654:	7e37e43c 	.word	0x7e37e43c
 8008658:	bff00000 	.word	0xbff00000
 800865c:	000fffff 	.word	0x000fffff

08008660 <abort>:
 8008660:	b508      	push	{r3, lr}
 8008662:	2006      	movs	r0, #6
 8008664:	f000 fe6c 	bl	8009340 <raise>
 8008668:	2001      	movs	r0, #1
 800866a:	f7fa fd5e 	bl	800312a <_exit>
	...

08008670 <__assert_func>:
 8008670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008672:	4614      	mov	r4, r2
 8008674:	461a      	mov	r2, r3
 8008676:	4b09      	ldr	r3, [pc, #36]	; (800869c <__assert_func+0x2c>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4605      	mov	r5, r0
 800867c:	68d8      	ldr	r0, [r3, #12]
 800867e:	b14c      	cbz	r4, 8008694 <__assert_func+0x24>
 8008680:	4b07      	ldr	r3, [pc, #28]	; (80086a0 <__assert_func+0x30>)
 8008682:	9100      	str	r1, [sp, #0]
 8008684:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008688:	4906      	ldr	r1, [pc, #24]	; (80086a4 <__assert_func+0x34>)
 800868a:	462b      	mov	r3, r5
 800868c:	f000 fdf4 	bl	8009278 <fiprintf>
 8008690:	f7ff ffe6 	bl	8008660 <abort>
 8008694:	4b04      	ldr	r3, [pc, #16]	; (80086a8 <__assert_func+0x38>)
 8008696:	461c      	mov	r4, r3
 8008698:	e7f3      	b.n	8008682 <__assert_func+0x12>
 800869a:	bf00      	nop
 800869c:	2000006c 	.word	0x2000006c
 80086a0:	0800b84e 	.word	0x0800b84e
 80086a4:	0800b85b 	.word	0x0800b85b
 80086a8:	0800b889 	.word	0x0800b889

080086ac <__cvt>:
 80086ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086b0:	ec55 4b10 	vmov	r4, r5, d0
 80086b4:	2d00      	cmp	r5, #0
 80086b6:	460e      	mov	r6, r1
 80086b8:	4619      	mov	r1, r3
 80086ba:	462b      	mov	r3, r5
 80086bc:	bfbb      	ittet	lt
 80086be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80086c2:	461d      	movlt	r5, r3
 80086c4:	2300      	movge	r3, #0
 80086c6:	232d      	movlt	r3, #45	; 0x2d
 80086c8:	700b      	strb	r3, [r1, #0]
 80086ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80086d0:	4691      	mov	r9, r2
 80086d2:	f023 0820 	bic.w	r8, r3, #32
 80086d6:	bfbc      	itt	lt
 80086d8:	4622      	movlt	r2, r4
 80086da:	4614      	movlt	r4, r2
 80086dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086e0:	d005      	beq.n	80086ee <__cvt+0x42>
 80086e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80086e6:	d100      	bne.n	80086ea <__cvt+0x3e>
 80086e8:	3601      	adds	r6, #1
 80086ea:	2102      	movs	r1, #2
 80086ec:	e000      	b.n	80086f0 <__cvt+0x44>
 80086ee:	2103      	movs	r1, #3
 80086f0:	ab03      	add	r3, sp, #12
 80086f2:	9301      	str	r3, [sp, #4]
 80086f4:	ab02      	add	r3, sp, #8
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	ec45 4b10 	vmov	d0, r4, r5
 80086fc:	4653      	mov	r3, sl
 80086fe:	4632      	mov	r2, r6
 8008700:	f000 ff0e 	bl	8009520 <_dtoa_r>
 8008704:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008708:	4607      	mov	r7, r0
 800870a:	d102      	bne.n	8008712 <__cvt+0x66>
 800870c:	f019 0f01 	tst.w	r9, #1
 8008710:	d022      	beq.n	8008758 <__cvt+0xac>
 8008712:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008716:	eb07 0906 	add.w	r9, r7, r6
 800871a:	d110      	bne.n	800873e <__cvt+0x92>
 800871c:	783b      	ldrb	r3, [r7, #0]
 800871e:	2b30      	cmp	r3, #48	; 0x30
 8008720:	d10a      	bne.n	8008738 <__cvt+0x8c>
 8008722:	2200      	movs	r2, #0
 8008724:	2300      	movs	r3, #0
 8008726:	4620      	mov	r0, r4
 8008728:	4629      	mov	r1, r5
 800872a:	f7f8 f9cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800872e:	b918      	cbnz	r0, 8008738 <__cvt+0x8c>
 8008730:	f1c6 0601 	rsb	r6, r6, #1
 8008734:	f8ca 6000 	str.w	r6, [sl]
 8008738:	f8da 3000 	ldr.w	r3, [sl]
 800873c:	4499      	add	r9, r3
 800873e:	2200      	movs	r2, #0
 8008740:	2300      	movs	r3, #0
 8008742:	4620      	mov	r0, r4
 8008744:	4629      	mov	r1, r5
 8008746:	f7f8 f9bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800874a:	b108      	cbz	r0, 8008750 <__cvt+0xa4>
 800874c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008750:	2230      	movs	r2, #48	; 0x30
 8008752:	9b03      	ldr	r3, [sp, #12]
 8008754:	454b      	cmp	r3, r9
 8008756:	d307      	bcc.n	8008768 <__cvt+0xbc>
 8008758:	9b03      	ldr	r3, [sp, #12]
 800875a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800875c:	1bdb      	subs	r3, r3, r7
 800875e:	4638      	mov	r0, r7
 8008760:	6013      	str	r3, [r2, #0]
 8008762:	b004      	add	sp, #16
 8008764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008768:	1c59      	adds	r1, r3, #1
 800876a:	9103      	str	r1, [sp, #12]
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	e7f0      	b.n	8008752 <__cvt+0xa6>

08008770 <__exponent>:
 8008770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008772:	4603      	mov	r3, r0
 8008774:	2900      	cmp	r1, #0
 8008776:	bfb8      	it	lt
 8008778:	4249      	neglt	r1, r1
 800877a:	f803 2b02 	strb.w	r2, [r3], #2
 800877e:	bfb4      	ite	lt
 8008780:	222d      	movlt	r2, #45	; 0x2d
 8008782:	222b      	movge	r2, #43	; 0x2b
 8008784:	2909      	cmp	r1, #9
 8008786:	7042      	strb	r2, [r0, #1]
 8008788:	dd2a      	ble.n	80087e0 <__exponent+0x70>
 800878a:	f10d 0207 	add.w	r2, sp, #7
 800878e:	4617      	mov	r7, r2
 8008790:	260a      	movs	r6, #10
 8008792:	4694      	mov	ip, r2
 8008794:	fb91 f5f6 	sdiv	r5, r1, r6
 8008798:	fb06 1415 	mls	r4, r6, r5, r1
 800879c:	3430      	adds	r4, #48	; 0x30
 800879e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80087a2:	460c      	mov	r4, r1
 80087a4:	2c63      	cmp	r4, #99	; 0x63
 80087a6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80087aa:	4629      	mov	r1, r5
 80087ac:	dcf1      	bgt.n	8008792 <__exponent+0x22>
 80087ae:	3130      	adds	r1, #48	; 0x30
 80087b0:	f1ac 0402 	sub.w	r4, ip, #2
 80087b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80087b8:	1c41      	adds	r1, r0, #1
 80087ba:	4622      	mov	r2, r4
 80087bc:	42ba      	cmp	r2, r7
 80087be:	d30a      	bcc.n	80087d6 <__exponent+0x66>
 80087c0:	f10d 0209 	add.w	r2, sp, #9
 80087c4:	eba2 020c 	sub.w	r2, r2, ip
 80087c8:	42bc      	cmp	r4, r7
 80087ca:	bf88      	it	hi
 80087cc:	2200      	movhi	r2, #0
 80087ce:	4413      	add	r3, r2
 80087d0:	1a18      	subs	r0, r3, r0
 80087d2:	b003      	add	sp, #12
 80087d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80087da:	f801 5f01 	strb.w	r5, [r1, #1]!
 80087de:	e7ed      	b.n	80087bc <__exponent+0x4c>
 80087e0:	2330      	movs	r3, #48	; 0x30
 80087e2:	3130      	adds	r1, #48	; 0x30
 80087e4:	7083      	strb	r3, [r0, #2]
 80087e6:	70c1      	strb	r1, [r0, #3]
 80087e8:	1d03      	adds	r3, r0, #4
 80087ea:	e7f1      	b.n	80087d0 <__exponent+0x60>

080087ec <_printf_float>:
 80087ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f0:	ed2d 8b02 	vpush	{d8}
 80087f4:	b08d      	sub	sp, #52	; 0x34
 80087f6:	460c      	mov	r4, r1
 80087f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80087fc:	4616      	mov	r6, r2
 80087fe:	461f      	mov	r7, r3
 8008800:	4605      	mov	r5, r0
 8008802:	f000 fd71 	bl	80092e8 <_localeconv_r>
 8008806:	f8d0 a000 	ldr.w	sl, [r0]
 800880a:	4650      	mov	r0, sl
 800880c:	f7f7 fd30 	bl	8000270 <strlen>
 8008810:	2300      	movs	r3, #0
 8008812:	930a      	str	r3, [sp, #40]	; 0x28
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	9305      	str	r3, [sp, #20]
 8008818:	f8d8 3000 	ldr.w	r3, [r8]
 800881c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008820:	3307      	adds	r3, #7
 8008822:	f023 0307 	bic.w	r3, r3, #7
 8008826:	f103 0208 	add.w	r2, r3, #8
 800882a:	f8c8 2000 	str.w	r2, [r8]
 800882e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008832:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008836:	9307      	str	r3, [sp, #28]
 8008838:	f8cd 8018 	str.w	r8, [sp, #24]
 800883c:	ee08 0a10 	vmov	s16, r0
 8008840:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008844:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008848:	4b9e      	ldr	r3, [pc, #632]	; (8008ac4 <_printf_float+0x2d8>)
 800884a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800884e:	f7f8 f96d 	bl	8000b2c <__aeabi_dcmpun>
 8008852:	bb88      	cbnz	r0, 80088b8 <_printf_float+0xcc>
 8008854:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008858:	4b9a      	ldr	r3, [pc, #616]	; (8008ac4 <_printf_float+0x2d8>)
 800885a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800885e:	f7f8 f947 	bl	8000af0 <__aeabi_dcmple>
 8008862:	bb48      	cbnz	r0, 80088b8 <_printf_float+0xcc>
 8008864:	2200      	movs	r2, #0
 8008866:	2300      	movs	r3, #0
 8008868:	4640      	mov	r0, r8
 800886a:	4649      	mov	r1, r9
 800886c:	f7f8 f936 	bl	8000adc <__aeabi_dcmplt>
 8008870:	b110      	cbz	r0, 8008878 <_printf_float+0x8c>
 8008872:	232d      	movs	r3, #45	; 0x2d
 8008874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008878:	4a93      	ldr	r2, [pc, #588]	; (8008ac8 <_printf_float+0x2dc>)
 800887a:	4b94      	ldr	r3, [pc, #592]	; (8008acc <_printf_float+0x2e0>)
 800887c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008880:	bf94      	ite	ls
 8008882:	4690      	movls	r8, r2
 8008884:	4698      	movhi	r8, r3
 8008886:	2303      	movs	r3, #3
 8008888:	6123      	str	r3, [r4, #16]
 800888a:	9b05      	ldr	r3, [sp, #20]
 800888c:	f023 0304 	bic.w	r3, r3, #4
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	f04f 0900 	mov.w	r9, #0
 8008896:	9700      	str	r7, [sp, #0]
 8008898:	4633      	mov	r3, r6
 800889a:	aa0b      	add	r2, sp, #44	; 0x2c
 800889c:	4621      	mov	r1, r4
 800889e:	4628      	mov	r0, r5
 80088a0:	f000 fa8a 	bl	8008db8 <_printf_common>
 80088a4:	3001      	adds	r0, #1
 80088a6:	f040 8090 	bne.w	80089ca <_printf_float+0x1de>
 80088aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088ae:	b00d      	add	sp, #52	; 0x34
 80088b0:	ecbd 8b02 	vpop	{d8}
 80088b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b8:	4642      	mov	r2, r8
 80088ba:	464b      	mov	r3, r9
 80088bc:	4640      	mov	r0, r8
 80088be:	4649      	mov	r1, r9
 80088c0:	f7f8 f934 	bl	8000b2c <__aeabi_dcmpun>
 80088c4:	b140      	cbz	r0, 80088d8 <_printf_float+0xec>
 80088c6:	464b      	mov	r3, r9
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	bfbc      	itt	lt
 80088cc:	232d      	movlt	r3, #45	; 0x2d
 80088ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80088d2:	4a7f      	ldr	r2, [pc, #508]	; (8008ad0 <_printf_float+0x2e4>)
 80088d4:	4b7f      	ldr	r3, [pc, #508]	; (8008ad4 <_printf_float+0x2e8>)
 80088d6:	e7d1      	b.n	800887c <_printf_float+0x90>
 80088d8:	6863      	ldr	r3, [r4, #4]
 80088da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80088de:	9206      	str	r2, [sp, #24]
 80088e0:	1c5a      	adds	r2, r3, #1
 80088e2:	d13f      	bne.n	8008964 <_printf_float+0x178>
 80088e4:	2306      	movs	r3, #6
 80088e6:	6063      	str	r3, [r4, #4]
 80088e8:	9b05      	ldr	r3, [sp, #20]
 80088ea:	6861      	ldr	r1, [r4, #4]
 80088ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80088f0:	2300      	movs	r3, #0
 80088f2:	9303      	str	r3, [sp, #12]
 80088f4:	ab0a      	add	r3, sp, #40	; 0x28
 80088f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80088fa:	ab09      	add	r3, sp, #36	; 0x24
 80088fc:	ec49 8b10 	vmov	d0, r8, r9
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	6022      	str	r2, [r4, #0]
 8008904:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008908:	4628      	mov	r0, r5
 800890a:	f7ff fecf 	bl	80086ac <__cvt>
 800890e:	9b06      	ldr	r3, [sp, #24]
 8008910:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008912:	2b47      	cmp	r3, #71	; 0x47
 8008914:	4680      	mov	r8, r0
 8008916:	d108      	bne.n	800892a <_printf_float+0x13e>
 8008918:	1cc8      	adds	r0, r1, #3
 800891a:	db02      	blt.n	8008922 <_printf_float+0x136>
 800891c:	6863      	ldr	r3, [r4, #4]
 800891e:	4299      	cmp	r1, r3
 8008920:	dd41      	ble.n	80089a6 <_printf_float+0x1ba>
 8008922:	f1ab 0302 	sub.w	r3, fp, #2
 8008926:	fa5f fb83 	uxtb.w	fp, r3
 800892a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800892e:	d820      	bhi.n	8008972 <_printf_float+0x186>
 8008930:	3901      	subs	r1, #1
 8008932:	465a      	mov	r2, fp
 8008934:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008938:	9109      	str	r1, [sp, #36]	; 0x24
 800893a:	f7ff ff19 	bl	8008770 <__exponent>
 800893e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008940:	1813      	adds	r3, r2, r0
 8008942:	2a01      	cmp	r2, #1
 8008944:	4681      	mov	r9, r0
 8008946:	6123      	str	r3, [r4, #16]
 8008948:	dc02      	bgt.n	8008950 <_printf_float+0x164>
 800894a:	6822      	ldr	r2, [r4, #0]
 800894c:	07d2      	lsls	r2, r2, #31
 800894e:	d501      	bpl.n	8008954 <_printf_float+0x168>
 8008950:	3301      	adds	r3, #1
 8008952:	6123      	str	r3, [r4, #16]
 8008954:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008958:	2b00      	cmp	r3, #0
 800895a:	d09c      	beq.n	8008896 <_printf_float+0xaa>
 800895c:	232d      	movs	r3, #45	; 0x2d
 800895e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008962:	e798      	b.n	8008896 <_printf_float+0xaa>
 8008964:	9a06      	ldr	r2, [sp, #24]
 8008966:	2a47      	cmp	r2, #71	; 0x47
 8008968:	d1be      	bne.n	80088e8 <_printf_float+0xfc>
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1bc      	bne.n	80088e8 <_printf_float+0xfc>
 800896e:	2301      	movs	r3, #1
 8008970:	e7b9      	b.n	80088e6 <_printf_float+0xfa>
 8008972:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008976:	d118      	bne.n	80089aa <_printf_float+0x1be>
 8008978:	2900      	cmp	r1, #0
 800897a:	6863      	ldr	r3, [r4, #4]
 800897c:	dd0b      	ble.n	8008996 <_printf_float+0x1aa>
 800897e:	6121      	str	r1, [r4, #16]
 8008980:	b913      	cbnz	r3, 8008988 <_printf_float+0x19c>
 8008982:	6822      	ldr	r2, [r4, #0]
 8008984:	07d0      	lsls	r0, r2, #31
 8008986:	d502      	bpl.n	800898e <_printf_float+0x1a2>
 8008988:	3301      	adds	r3, #1
 800898a:	440b      	add	r3, r1
 800898c:	6123      	str	r3, [r4, #16]
 800898e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008990:	f04f 0900 	mov.w	r9, #0
 8008994:	e7de      	b.n	8008954 <_printf_float+0x168>
 8008996:	b913      	cbnz	r3, 800899e <_printf_float+0x1b2>
 8008998:	6822      	ldr	r2, [r4, #0]
 800899a:	07d2      	lsls	r2, r2, #31
 800899c:	d501      	bpl.n	80089a2 <_printf_float+0x1b6>
 800899e:	3302      	adds	r3, #2
 80089a0:	e7f4      	b.n	800898c <_printf_float+0x1a0>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e7f2      	b.n	800898c <_printf_float+0x1a0>
 80089a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80089aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ac:	4299      	cmp	r1, r3
 80089ae:	db05      	blt.n	80089bc <_printf_float+0x1d0>
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	6121      	str	r1, [r4, #16]
 80089b4:	07d8      	lsls	r0, r3, #31
 80089b6:	d5ea      	bpl.n	800898e <_printf_float+0x1a2>
 80089b8:	1c4b      	adds	r3, r1, #1
 80089ba:	e7e7      	b.n	800898c <_printf_float+0x1a0>
 80089bc:	2900      	cmp	r1, #0
 80089be:	bfd4      	ite	le
 80089c0:	f1c1 0202 	rsble	r2, r1, #2
 80089c4:	2201      	movgt	r2, #1
 80089c6:	4413      	add	r3, r2
 80089c8:	e7e0      	b.n	800898c <_printf_float+0x1a0>
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	055a      	lsls	r2, r3, #21
 80089ce:	d407      	bmi.n	80089e0 <_printf_float+0x1f4>
 80089d0:	6923      	ldr	r3, [r4, #16]
 80089d2:	4642      	mov	r2, r8
 80089d4:	4631      	mov	r1, r6
 80089d6:	4628      	mov	r0, r5
 80089d8:	47b8      	blx	r7
 80089da:	3001      	adds	r0, #1
 80089dc:	d12c      	bne.n	8008a38 <_printf_float+0x24c>
 80089de:	e764      	b.n	80088aa <_printf_float+0xbe>
 80089e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089e4:	f240 80e0 	bls.w	8008ba8 <_printf_float+0x3bc>
 80089e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089ec:	2200      	movs	r2, #0
 80089ee:	2300      	movs	r3, #0
 80089f0:	f7f8 f86a 	bl	8000ac8 <__aeabi_dcmpeq>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d034      	beq.n	8008a62 <_printf_float+0x276>
 80089f8:	4a37      	ldr	r2, [pc, #220]	; (8008ad8 <_printf_float+0x2ec>)
 80089fa:	2301      	movs	r3, #1
 80089fc:	4631      	mov	r1, r6
 80089fe:	4628      	mov	r0, r5
 8008a00:	47b8      	blx	r7
 8008a02:	3001      	adds	r0, #1
 8008a04:	f43f af51 	beq.w	80088aa <_printf_float+0xbe>
 8008a08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	db02      	blt.n	8008a16 <_printf_float+0x22a>
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	07d8      	lsls	r0, r3, #31
 8008a14:	d510      	bpl.n	8008a38 <_printf_float+0x24c>
 8008a16:	ee18 3a10 	vmov	r3, s16
 8008a1a:	4652      	mov	r2, sl
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	4628      	mov	r0, r5
 8008a20:	47b8      	blx	r7
 8008a22:	3001      	adds	r0, #1
 8008a24:	f43f af41 	beq.w	80088aa <_printf_float+0xbe>
 8008a28:	f04f 0800 	mov.w	r8, #0
 8008a2c:	f104 091a 	add.w	r9, r4, #26
 8008a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a32:	3b01      	subs	r3, #1
 8008a34:	4543      	cmp	r3, r8
 8008a36:	dc09      	bgt.n	8008a4c <_printf_float+0x260>
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	079b      	lsls	r3, r3, #30
 8008a3c:	f100 8107 	bmi.w	8008c4e <_printf_float+0x462>
 8008a40:	68e0      	ldr	r0, [r4, #12]
 8008a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a44:	4298      	cmp	r0, r3
 8008a46:	bfb8      	it	lt
 8008a48:	4618      	movlt	r0, r3
 8008a4a:	e730      	b.n	80088ae <_printf_float+0xc2>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	464a      	mov	r2, r9
 8008a50:	4631      	mov	r1, r6
 8008a52:	4628      	mov	r0, r5
 8008a54:	47b8      	blx	r7
 8008a56:	3001      	adds	r0, #1
 8008a58:	f43f af27 	beq.w	80088aa <_printf_float+0xbe>
 8008a5c:	f108 0801 	add.w	r8, r8, #1
 8008a60:	e7e6      	b.n	8008a30 <_printf_float+0x244>
 8008a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dc39      	bgt.n	8008adc <_printf_float+0x2f0>
 8008a68:	4a1b      	ldr	r2, [pc, #108]	; (8008ad8 <_printf_float+0x2ec>)
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	4628      	mov	r0, r5
 8008a70:	47b8      	blx	r7
 8008a72:	3001      	adds	r0, #1
 8008a74:	f43f af19 	beq.w	80088aa <_printf_float+0xbe>
 8008a78:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	d102      	bne.n	8008a86 <_printf_float+0x29a>
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	07d9      	lsls	r1, r3, #31
 8008a84:	d5d8      	bpl.n	8008a38 <_printf_float+0x24c>
 8008a86:	ee18 3a10 	vmov	r3, s16
 8008a8a:	4652      	mov	r2, sl
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	4628      	mov	r0, r5
 8008a90:	47b8      	blx	r7
 8008a92:	3001      	adds	r0, #1
 8008a94:	f43f af09 	beq.w	80088aa <_printf_float+0xbe>
 8008a98:	f04f 0900 	mov.w	r9, #0
 8008a9c:	f104 0a1a 	add.w	sl, r4, #26
 8008aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa2:	425b      	negs	r3, r3
 8008aa4:	454b      	cmp	r3, r9
 8008aa6:	dc01      	bgt.n	8008aac <_printf_float+0x2c0>
 8008aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aaa:	e792      	b.n	80089d2 <_printf_float+0x1e6>
 8008aac:	2301      	movs	r3, #1
 8008aae:	4652      	mov	r2, sl
 8008ab0:	4631      	mov	r1, r6
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	47b8      	blx	r7
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	f43f aef7 	beq.w	80088aa <_printf_float+0xbe>
 8008abc:	f109 0901 	add.w	r9, r9, #1
 8008ac0:	e7ee      	b.n	8008aa0 <_printf_float+0x2b4>
 8008ac2:	bf00      	nop
 8008ac4:	7fefffff 	.word	0x7fefffff
 8008ac8:	0800b88a 	.word	0x0800b88a
 8008acc:	0800b88e 	.word	0x0800b88e
 8008ad0:	0800b892 	.word	0x0800b892
 8008ad4:	0800b896 	.word	0x0800b896
 8008ad8:	0800b89a 	.word	0x0800b89a
 8008adc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ade:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	bfa8      	it	ge
 8008ae4:	461a      	movge	r2, r3
 8008ae6:	2a00      	cmp	r2, #0
 8008ae8:	4691      	mov	r9, r2
 8008aea:	dc37      	bgt.n	8008b5c <_printf_float+0x370>
 8008aec:	f04f 0b00 	mov.w	fp, #0
 8008af0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008af4:	f104 021a 	add.w	r2, r4, #26
 8008af8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008afa:	9305      	str	r3, [sp, #20]
 8008afc:	eba3 0309 	sub.w	r3, r3, r9
 8008b00:	455b      	cmp	r3, fp
 8008b02:	dc33      	bgt.n	8008b6c <_printf_float+0x380>
 8008b04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	db3b      	blt.n	8008b84 <_printf_float+0x398>
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	07da      	lsls	r2, r3, #31
 8008b10:	d438      	bmi.n	8008b84 <_printf_float+0x398>
 8008b12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008b16:	eba2 0903 	sub.w	r9, r2, r3
 8008b1a:	9b05      	ldr	r3, [sp, #20]
 8008b1c:	1ad2      	subs	r2, r2, r3
 8008b1e:	4591      	cmp	r9, r2
 8008b20:	bfa8      	it	ge
 8008b22:	4691      	movge	r9, r2
 8008b24:	f1b9 0f00 	cmp.w	r9, #0
 8008b28:	dc35      	bgt.n	8008b96 <_printf_float+0x3aa>
 8008b2a:	f04f 0800 	mov.w	r8, #0
 8008b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b32:	f104 0a1a 	add.w	sl, r4, #26
 8008b36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b3a:	1a9b      	subs	r3, r3, r2
 8008b3c:	eba3 0309 	sub.w	r3, r3, r9
 8008b40:	4543      	cmp	r3, r8
 8008b42:	f77f af79 	ble.w	8008a38 <_printf_float+0x24c>
 8008b46:	2301      	movs	r3, #1
 8008b48:	4652      	mov	r2, sl
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	47b8      	blx	r7
 8008b50:	3001      	adds	r0, #1
 8008b52:	f43f aeaa 	beq.w	80088aa <_printf_float+0xbe>
 8008b56:	f108 0801 	add.w	r8, r8, #1
 8008b5a:	e7ec      	b.n	8008b36 <_printf_float+0x34a>
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	4631      	mov	r1, r6
 8008b60:	4642      	mov	r2, r8
 8008b62:	4628      	mov	r0, r5
 8008b64:	47b8      	blx	r7
 8008b66:	3001      	adds	r0, #1
 8008b68:	d1c0      	bne.n	8008aec <_printf_float+0x300>
 8008b6a:	e69e      	b.n	80088aa <_printf_float+0xbe>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	4631      	mov	r1, r6
 8008b70:	4628      	mov	r0, r5
 8008b72:	9205      	str	r2, [sp, #20]
 8008b74:	47b8      	blx	r7
 8008b76:	3001      	adds	r0, #1
 8008b78:	f43f ae97 	beq.w	80088aa <_printf_float+0xbe>
 8008b7c:	9a05      	ldr	r2, [sp, #20]
 8008b7e:	f10b 0b01 	add.w	fp, fp, #1
 8008b82:	e7b9      	b.n	8008af8 <_printf_float+0x30c>
 8008b84:	ee18 3a10 	vmov	r3, s16
 8008b88:	4652      	mov	r2, sl
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	47b8      	blx	r7
 8008b90:	3001      	adds	r0, #1
 8008b92:	d1be      	bne.n	8008b12 <_printf_float+0x326>
 8008b94:	e689      	b.n	80088aa <_printf_float+0xbe>
 8008b96:	9a05      	ldr	r2, [sp, #20]
 8008b98:	464b      	mov	r3, r9
 8008b9a:	4442      	add	r2, r8
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	47b8      	blx	r7
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	d1c1      	bne.n	8008b2a <_printf_float+0x33e>
 8008ba6:	e680      	b.n	80088aa <_printf_float+0xbe>
 8008ba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008baa:	2a01      	cmp	r2, #1
 8008bac:	dc01      	bgt.n	8008bb2 <_printf_float+0x3c6>
 8008bae:	07db      	lsls	r3, r3, #31
 8008bb0:	d53a      	bpl.n	8008c28 <_printf_float+0x43c>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	4642      	mov	r2, r8
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b8      	blx	r7
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	f43f ae74 	beq.w	80088aa <_printf_float+0xbe>
 8008bc2:	ee18 3a10 	vmov	r3, s16
 8008bc6:	4652      	mov	r2, sl
 8008bc8:	4631      	mov	r1, r6
 8008bca:	4628      	mov	r0, r5
 8008bcc:	47b8      	blx	r7
 8008bce:	3001      	adds	r0, #1
 8008bd0:	f43f ae6b 	beq.w	80088aa <_printf_float+0xbe>
 8008bd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bd8:	2200      	movs	r2, #0
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008be0:	f7f7 ff72 	bl	8000ac8 <__aeabi_dcmpeq>
 8008be4:	b9d8      	cbnz	r0, 8008c1e <_printf_float+0x432>
 8008be6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008bea:	f108 0201 	add.w	r2, r8, #1
 8008bee:	4631      	mov	r1, r6
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	47b8      	blx	r7
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	d10e      	bne.n	8008c16 <_printf_float+0x42a>
 8008bf8:	e657      	b.n	80088aa <_printf_float+0xbe>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	4652      	mov	r2, sl
 8008bfe:	4631      	mov	r1, r6
 8008c00:	4628      	mov	r0, r5
 8008c02:	47b8      	blx	r7
 8008c04:	3001      	adds	r0, #1
 8008c06:	f43f ae50 	beq.w	80088aa <_printf_float+0xbe>
 8008c0a:	f108 0801 	add.w	r8, r8, #1
 8008c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c10:	3b01      	subs	r3, #1
 8008c12:	4543      	cmp	r3, r8
 8008c14:	dcf1      	bgt.n	8008bfa <_printf_float+0x40e>
 8008c16:	464b      	mov	r3, r9
 8008c18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c1c:	e6da      	b.n	80089d4 <_printf_float+0x1e8>
 8008c1e:	f04f 0800 	mov.w	r8, #0
 8008c22:	f104 0a1a 	add.w	sl, r4, #26
 8008c26:	e7f2      	b.n	8008c0e <_printf_float+0x422>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	4642      	mov	r2, r8
 8008c2c:	e7df      	b.n	8008bee <_printf_float+0x402>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	464a      	mov	r2, r9
 8008c32:	4631      	mov	r1, r6
 8008c34:	4628      	mov	r0, r5
 8008c36:	47b8      	blx	r7
 8008c38:	3001      	adds	r0, #1
 8008c3a:	f43f ae36 	beq.w	80088aa <_printf_float+0xbe>
 8008c3e:	f108 0801 	add.w	r8, r8, #1
 8008c42:	68e3      	ldr	r3, [r4, #12]
 8008c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c46:	1a5b      	subs	r3, r3, r1
 8008c48:	4543      	cmp	r3, r8
 8008c4a:	dcf0      	bgt.n	8008c2e <_printf_float+0x442>
 8008c4c:	e6f8      	b.n	8008a40 <_printf_float+0x254>
 8008c4e:	f04f 0800 	mov.w	r8, #0
 8008c52:	f104 0919 	add.w	r9, r4, #25
 8008c56:	e7f4      	b.n	8008c42 <_printf_float+0x456>

08008c58 <malloc>:
 8008c58:	4b02      	ldr	r3, [pc, #8]	; (8008c64 <malloc+0xc>)
 8008c5a:	4601      	mov	r1, r0
 8008c5c:	6818      	ldr	r0, [r3, #0]
 8008c5e:	f000 b82b 	b.w	8008cb8 <_malloc_r>
 8008c62:	bf00      	nop
 8008c64:	2000006c 	.word	0x2000006c

08008c68 <free>:
 8008c68:	4b02      	ldr	r3, [pc, #8]	; (8008c74 <free+0xc>)
 8008c6a:	4601      	mov	r1, r0
 8008c6c:	6818      	ldr	r0, [r3, #0]
 8008c6e:	f001 ba49 	b.w	800a104 <_free_r>
 8008c72:	bf00      	nop
 8008c74:	2000006c 	.word	0x2000006c

08008c78 <sbrk_aligned>:
 8008c78:	b570      	push	{r4, r5, r6, lr}
 8008c7a:	4e0e      	ldr	r6, [pc, #56]	; (8008cb4 <sbrk_aligned+0x3c>)
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	6831      	ldr	r1, [r6, #0]
 8008c80:	4605      	mov	r5, r0
 8008c82:	b911      	cbnz	r1, 8008c8a <sbrk_aligned+0x12>
 8008c84:	f000 fb78 	bl	8009378 <_sbrk_r>
 8008c88:	6030      	str	r0, [r6, #0]
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	f000 fb73 	bl	8009378 <_sbrk_r>
 8008c92:	1c43      	adds	r3, r0, #1
 8008c94:	d00a      	beq.n	8008cac <sbrk_aligned+0x34>
 8008c96:	1cc4      	adds	r4, r0, #3
 8008c98:	f024 0403 	bic.w	r4, r4, #3
 8008c9c:	42a0      	cmp	r0, r4
 8008c9e:	d007      	beq.n	8008cb0 <sbrk_aligned+0x38>
 8008ca0:	1a21      	subs	r1, r4, r0
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	f000 fb68 	bl	8009378 <_sbrk_r>
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d101      	bne.n	8008cb0 <sbrk_aligned+0x38>
 8008cac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	bd70      	pop	{r4, r5, r6, pc}
 8008cb4:	20004c9c 	.word	0x20004c9c

08008cb8 <_malloc_r>:
 8008cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cbc:	1ccd      	adds	r5, r1, #3
 8008cbe:	f025 0503 	bic.w	r5, r5, #3
 8008cc2:	3508      	adds	r5, #8
 8008cc4:	2d0c      	cmp	r5, #12
 8008cc6:	bf38      	it	cc
 8008cc8:	250c      	movcc	r5, #12
 8008cca:	2d00      	cmp	r5, #0
 8008ccc:	4607      	mov	r7, r0
 8008cce:	db01      	blt.n	8008cd4 <_malloc_r+0x1c>
 8008cd0:	42a9      	cmp	r1, r5
 8008cd2:	d905      	bls.n	8008ce0 <_malloc_r+0x28>
 8008cd4:	230c      	movs	r3, #12
 8008cd6:	603b      	str	r3, [r7, #0]
 8008cd8:	2600      	movs	r6, #0
 8008cda:	4630      	mov	r0, r6
 8008cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ce0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008db4 <_malloc_r+0xfc>
 8008ce4:	f000 f9f8 	bl	80090d8 <__malloc_lock>
 8008ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8008cec:	461c      	mov	r4, r3
 8008cee:	bb5c      	cbnz	r4, 8008d48 <_malloc_r+0x90>
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	4638      	mov	r0, r7
 8008cf4:	f7ff ffc0 	bl	8008c78 <sbrk_aligned>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	d155      	bne.n	8008daa <_malloc_r+0xf2>
 8008cfe:	f8d8 4000 	ldr.w	r4, [r8]
 8008d02:	4626      	mov	r6, r4
 8008d04:	2e00      	cmp	r6, #0
 8008d06:	d145      	bne.n	8008d94 <_malloc_r+0xdc>
 8008d08:	2c00      	cmp	r4, #0
 8008d0a:	d048      	beq.n	8008d9e <_malloc_r+0xe6>
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	4631      	mov	r1, r6
 8008d10:	4638      	mov	r0, r7
 8008d12:	eb04 0903 	add.w	r9, r4, r3
 8008d16:	f000 fb2f 	bl	8009378 <_sbrk_r>
 8008d1a:	4581      	cmp	r9, r0
 8008d1c:	d13f      	bne.n	8008d9e <_malloc_r+0xe6>
 8008d1e:	6821      	ldr	r1, [r4, #0]
 8008d20:	1a6d      	subs	r5, r5, r1
 8008d22:	4629      	mov	r1, r5
 8008d24:	4638      	mov	r0, r7
 8008d26:	f7ff ffa7 	bl	8008c78 <sbrk_aligned>
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	d037      	beq.n	8008d9e <_malloc_r+0xe6>
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	442b      	add	r3, r5
 8008d32:	6023      	str	r3, [r4, #0]
 8008d34:	f8d8 3000 	ldr.w	r3, [r8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d038      	beq.n	8008dae <_malloc_r+0xf6>
 8008d3c:	685a      	ldr	r2, [r3, #4]
 8008d3e:	42a2      	cmp	r2, r4
 8008d40:	d12b      	bne.n	8008d9a <_malloc_r+0xe2>
 8008d42:	2200      	movs	r2, #0
 8008d44:	605a      	str	r2, [r3, #4]
 8008d46:	e00f      	b.n	8008d68 <_malloc_r+0xb0>
 8008d48:	6822      	ldr	r2, [r4, #0]
 8008d4a:	1b52      	subs	r2, r2, r5
 8008d4c:	d41f      	bmi.n	8008d8e <_malloc_r+0xd6>
 8008d4e:	2a0b      	cmp	r2, #11
 8008d50:	d917      	bls.n	8008d82 <_malloc_r+0xca>
 8008d52:	1961      	adds	r1, r4, r5
 8008d54:	42a3      	cmp	r3, r4
 8008d56:	6025      	str	r5, [r4, #0]
 8008d58:	bf18      	it	ne
 8008d5a:	6059      	strne	r1, [r3, #4]
 8008d5c:	6863      	ldr	r3, [r4, #4]
 8008d5e:	bf08      	it	eq
 8008d60:	f8c8 1000 	streq.w	r1, [r8]
 8008d64:	5162      	str	r2, [r4, r5]
 8008d66:	604b      	str	r3, [r1, #4]
 8008d68:	4638      	mov	r0, r7
 8008d6a:	f104 060b 	add.w	r6, r4, #11
 8008d6e:	f000 f9b9 	bl	80090e4 <__malloc_unlock>
 8008d72:	f026 0607 	bic.w	r6, r6, #7
 8008d76:	1d23      	adds	r3, r4, #4
 8008d78:	1af2      	subs	r2, r6, r3
 8008d7a:	d0ae      	beq.n	8008cda <_malloc_r+0x22>
 8008d7c:	1b9b      	subs	r3, r3, r6
 8008d7e:	50a3      	str	r3, [r4, r2]
 8008d80:	e7ab      	b.n	8008cda <_malloc_r+0x22>
 8008d82:	42a3      	cmp	r3, r4
 8008d84:	6862      	ldr	r2, [r4, #4]
 8008d86:	d1dd      	bne.n	8008d44 <_malloc_r+0x8c>
 8008d88:	f8c8 2000 	str.w	r2, [r8]
 8008d8c:	e7ec      	b.n	8008d68 <_malloc_r+0xb0>
 8008d8e:	4623      	mov	r3, r4
 8008d90:	6864      	ldr	r4, [r4, #4]
 8008d92:	e7ac      	b.n	8008cee <_malloc_r+0x36>
 8008d94:	4634      	mov	r4, r6
 8008d96:	6876      	ldr	r6, [r6, #4]
 8008d98:	e7b4      	b.n	8008d04 <_malloc_r+0x4c>
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	e7cc      	b.n	8008d38 <_malloc_r+0x80>
 8008d9e:	230c      	movs	r3, #12
 8008da0:	603b      	str	r3, [r7, #0]
 8008da2:	4638      	mov	r0, r7
 8008da4:	f000 f99e 	bl	80090e4 <__malloc_unlock>
 8008da8:	e797      	b.n	8008cda <_malloc_r+0x22>
 8008daa:	6025      	str	r5, [r4, #0]
 8008dac:	e7dc      	b.n	8008d68 <_malloc_r+0xb0>
 8008dae:	605b      	str	r3, [r3, #4]
 8008db0:	deff      	udf	#255	; 0xff
 8008db2:	bf00      	nop
 8008db4:	20004c98 	.word	0x20004c98

08008db8 <_printf_common>:
 8008db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dbc:	4616      	mov	r6, r2
 8008dbe:	4699      	mov	r9, r3
 8008dc0:	688a      	ldr	r2, [r1, #8]
 8008dc2:	690b      	ldr	r3, [r1, #16]
 8008dc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	bfb8      	it	lt
 8008dcc:	4613      	movlt	r3, r2
 8008dce:	6033      	str	r3, [r6, #0]
 8008dd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	b10a      	cbz	r2, 8008dde <_printf_common+0x26>
 8008dda:	3301      	adds	r3, #1
 8008ddc:	6033      	str	r3, [r6, #0]
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	0699      	lsls	r1, r3, #26
 8008de2:	bf42      	ittt	mi
 8008de4:	6833      	ldrmi	r3, [r6, #0]
 8008de6:	3302      	addmi	r3, #2
 8008de8:	6033      	strmi	r3, [r6, #0]
 8008dea:	6825      	ldr	r5, [r4, #0]
 8008dec:	f015 0506 	ands.w	r5, r5, #6
 8008df0:	d106      	bne.n	8008e00 <_printf_common+0x48>
 8008df2:	f104 0a19 	add.w	sl, r4, #25
 8008df6:	68e3      	ldr	r3, [r4, #12]
 8008df8:	6832      	ldr	r2, [r6, #0]
 8008dfa:	1a9b      	subs	r3, r3, r2
 8008dfc:	42ab      	cmp	r3, r5
 8008dfe:	dc26      	bgt.n	8008e4e <_printf_common+0x96>
 8008e00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e04:	1e13      	subs	r3, r2, #0
 8008e06:	6822      	ldr	r2, [r4, #0]
 8008e08:	bf18      	it	ne
 8008e0a:	2301      	movne	r3, #1
 8008e0c:	0692      	lsls	r2, r2, #26
 8008e0e:	d42b      	bmi.n	8008e68 <_printf_common+0xb0>
 8008e10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e14:	4649      	mov	r1, r9
 8008e16:	4638      	mov	r0, r7
 8008e18:	47c0      	blx	r8
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	d01e      	beq.n	8008e5c <_printf_common+0xa4>
 8008e1e:	6823      	ldr	r3, [r4, #0]
 8008e20:	6922      	ldr	r2, [r4, #16]
 8008e22:	f003 0306 	and.w	r3, r3, #6
 8008e26:	2b04      	cmp	r3, #4
 8008e28:	bf02      	ittt	eq
 8008e2a:	68e5      	ldreq	r5, [r4, #12]
 8008e2c:	6833      	ldreq	r3, [r6, #0]
 8008e2e:	1aed      	subeq	r5, r5, r3
 8008e30:	68a3      	ldr	r3, [r4, #8]
 8008e32:	bf0c      	ite	eq
 8008e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e38:	2500      	movne	r5, #0
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	bfc4      	itt	gt
 8008e3e:	1a9b      	subgt	r3, r3, r2
 8008e40:	18ed      	addgt	r5, r5, r3
 8008e42:	2600      	movs	r6, #0
 8008e44:	341a      	adds	r4, #26
 8008e46:	42b5      	cmp	r5, r6
 8008e48:	d11a      	bne.n	8008e80 <_printf_common+0xc8>
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	e008      	b.n	8008e60 <_printf_common+0xa8>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	4652      	mov	r2, sl
 8008e52:	4649      	mov	r1, r9
 8008e54:	4638      	mov	r0, r7
 8008e56:	47c0      	blx	r8
 8008e58:	3001      	adds	r0, #1
 8008e5a:	d103      	bne.n	8008e64 <_printf_common+0xac>
 8008e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e64:	3501      	adds	r5, #1
 8008e66:	e7c6      	b.n	8008df6 <_printf_common+0x3e>
 8008e68:	18e1      	adds	r1, r4, r3
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	2030      	movs	r0, #48	; 0x30
 8008e6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e72:	4422      	add	r2, r4
 8008e74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e7c:	3302      	adds	r3, #2
 8008e7e:	e7c7      	b.n	8008e10 <_printf_common+0x58>
 8008e80:	2301      	movs	r3, #1
 8008e82:	4622      	mov	r2, r4
 8008e84:	4649      	mov	r1, r9
 8008e86:	4638      	mov	r0, r7
 8008e88:	47c0      	blx	r8
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	d0e6      	beq.n	8008e5c <_printf_common+0xa4>
 8008e8e:	3601      	adds	r6, #1
 8008e90:	e7d9      	b.n	8008e46 <_printf_common+0x8e>
	...

08008e94 <_printf_i>:
 8008e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e98:	7e0f      	ldrb	r7, [r1, #24]
 8008e9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e9c:	2f78      	cmp	r7, #120	; 0x78
 8008e9e:	4691      	mov	r9, r2
 8008ea0:	4680      	mov	r8, r0
 8008ea2:	460c      	mov	r4, r1
 8008ea4:	469a      	mov	sl, r3
 8008ea6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008eaa:	d807      	bhi.n	8008ebc <_printf_i+0x28>
 8008eac:	2f62      	cmp	r7, #98	; 0x62
 8008eae:	d80a      	bhi.n	8008ec6 <_printf_i+0x32>
 8008eb0:	2f00      	cmp	r7, #0
 8008eb2:	f000 80d4 	beq.w	800905e <_printf_i+0x1ca>
 8008eb6:	2f58      	cmp	r7, #88	; 0x58
 8008eb8:	f000 80c0 	beq.w	800903c <_printf_i+0x1a8>
 8008ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ec0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ec4:	e03a      	b.n	8008f3c <_printf_i+0xa8>
 8008ec6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008eca:	2b15      	cmp	r3, #21
 8008ecc:	d8f6      	bhi.n	8008ebc <_printf_i+0x28>
 8008ece:	a101      	add	r1, pc, #4	; (adr r1, 8008ed4 <_printf_i+0x40>)
 8008ed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ed4:	08008f2d 	.word	0x08008f2d
 8008ed8:	08008f41 	.word	0x08008f41
 8008edc:	08008ebd 	.word	0x08008ebd
 8008ee0:	08008ebd 	.word	0x08008ebd
 8008ee4:	08008ebd 	.word	0x08008ebd
 8008ee8:	08008ebd 	.word	0x08008ebd
 8008eec:	08008f41 	.word	0x08008f41
 8008ef0:	08008ebd 	.word	0x08008ebd
 8008ef4:	08008ebd 	.word	0x08008ebd
 8008ef8:	08008ebd 	.word	0x08008ebd
 8008efc:	08008ebd 	.word	0x08008ebd
 8008f00:	08009045 	.word	0x08009045
 8008f04:	08008f6d 	.word	0x08008f6d
 8008f08:	08008fff 	.word	0x08008fff
 8008f0c:	08008ebd 	.word	0x08008ebd
 8008f10:	08008ebd 	.word	0x08008ebd
 8008f14:	08009067 	.word	0x08009067
 8008f18:	08008ebd 	.word	0x08008ebd
 8008f1c:	08008f6d 	.word	0x08008f6d
 8008f20:	08008ebd 	.word	0x08008ebd
 8008f24:	08008ebd 	.word	0x08008ebd
 8008f28:	08009007 	.word	0x08009007
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	1d1a      	adds	r2, r3, #4
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	602a      	str	r2, [r5, #0]
 8008f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e09f      	b.n	8009080 <_printf_i+0x1ec>
 8008f40:	6820      	ldr	r0, [r4, #0]
 8008f42:	682b      	ldr	r3, [r5, #0]
 8008f44:	0607      	lsls	r7, r0, #24
 8008f46:	f103 0104 	add.w	r1, r3, #4
 8008f4a:	6029      	str	r1, [r5, #0]
 8008f4c:	d501      	bpl.n	8008f52 <_printf_i+0xbe>
 8008f4e:	681e      	ldr	r6, [r3, #0]
 8008f50:	e003      	b.n	8008f5a <_printf_i+0xc6>
 8008f52:	0646      	lsls	r6, r0, #25
 8008f54:	d5fb      	bpl.n	8008f4e <_printf_i+0xba>
 8008f56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008f5a:	2e00      	cmp	r6, #0
 8008f5c:	da03      	bge.n	8008f66 <_printf_i+0xd2>
 8008f5e:	232d      	movs	r3, #45	; 0x2d
 8008f60:	4276      	negs	r6, r6
 8008f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f66:	485a      	ldr	r0, [pc, #360]	; (80090d0 <_printf_i+0x23c>)
 8008f68:	230a      	movs	r3, #10
 8008f6a:	e012      	b.n	8008f92 <_printf_i+0xfe>
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	6820      	ldr	r0, [r4, #0]
 8008f70:	1d19      	adds	r1, r3, #4
 8008f72:	6029      	str	r1, [r5, #0]
 8008f74:	0605      	lsls	r5, r0, #24
 8008f76:	d501      	bpl.n	8008f7c <_printf_i+0xe8>
 8008f78:	681e      	ldr	r6, [r3, #0]
 8008f7a:	e002      	b.n	8008f82 <_printf_i+0xee>
 8008f7c:	0641      	lsls	r1, r0, #25
 8008f7e:	d5fb      	bpl.n	8008f78 <_printf_i+0xe4>
 8008f80:	881e      	ldrh	r6, [r3, #0]
 8008f82:	4853      	ldr	r0, [pc, #332]	; (80090d0 <_printf_i+0x23c>)
 8008f84:	2f6f      	cmp	r7, #111	; 0x6f
 8008f86:	bf0c      	ite	eq
 8008f88:	2308      	moveq	r3, #8
 8008f8a:	230a      	movne	r3, #10
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f92:	6865      	ldr	r5, [r4, #4]
 8008f94:	60a5      	str	r5, [r4, #8]
 8008f96:	2d00      	cmp	r5, #0
 8008f98:	bfa2      	ittt	ge
 8008f9a:	6821      	ldrge	r1, [r4, #0]
 8008f9c:	f021 0104 	bicge.w	r1, r1, #4
 8008fa0:	6021      	strge	r1, [r4, #0]
 8008fa2:	b90e      	cbnz	r6, 8008fa8 <_printf_i+0x114>
 8008fa4:	2d00      	cmp	r5, #0
 8008fa6:	d04b      	beq.n	8009040 <_printf_i+0x1ac>
 8008fa8:	4615      	mov	r5, r2
 8008faa:	fbb6 f1f3 	udiv	r1, r6, r3
 8008fae:	fb03 6711 	mls	r7, r3, r1, r6
 8008fb2:	5dc7      	ldrb	r7, [r0, r7]
 8008fb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008fb8:	4637      	mov	r7, r6
 8008fba:	42bb      	cmp	r3, r7
 8008fbc:	460e      	mov	r6, r1
 8008fbe:	d9f4      	bls.n	8008faa <_printf_i+0x116>
 8008fc0:	2b08      	cmp	r3, #8
 8008fc2:	d10b      	bne.n	8008fdc <_printf_i+0x148>
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	07de      	lsls	r6, r3, #31
 8008fc8:	d508      	bpl.n	8008fdc <_printf_i+0x148>
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	6861      	ldr	r1, [r4, #4]
 8008fce:	4299      	cmp	r1, r3
 8008fd0:	bfde      	ittt	le
 8008fd2:	2330      	movle	r3, #48	; 0x30
 8008fd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fd8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008fdc:	1b52      	subs	r2, r2, r5
 8008fde:	6122      	str	r2, [r4, #16]
 8008fe0:	f8cd a000 	str.w	sl, [sp]
 8008fe4:	464b      	mov	r3, r9
 8008fe6:	aa03      	add	r2, sp, #12
 8008fe8:	4621      	mov	r1, r4
 8008fea:	4640      	mov	r0, r8
 8008fec:	f7ff fee4 	bl	8008db8 <_printf_common>
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	d14a      	bne.n	800908a <_printf_i+0x1f6>
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ff8:	b004      	add	sp, #16
 8008ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	f043 0320 	orr.w	r3, r3, #32
 8009004:	6023      	str	r3, [r4, #0]
 8009006:	4833      	ldr	r0, [pc, #204]	; (80090d4 <_printf_i+0x240>)
 8009008:	2778      	movs	r7, #120	; 0x78
 800900a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	6829      	ldr	r1, [r5, #0]
 8009012:	061f      	lsls	r7, r3, #24
 8009014:	f851 6b04 	ldr.w	r6, [r1], #4
 8009018:	d402      	bmi.n	8009020 <_printf_i+0x18c>
 800901a:	065f      	lsls	r7, r3, #25
 800901c:	bf48      	it	mi
 800901e:	b2b6      	uxthmi	r6, r6
 8009020:	07df      	lsls	r7, r3, #31
 8009022:	bf48      	it	mi
 8009024:	f043 0320 	orrmi.w	r3, r3, #32
 8009028:	6029      	str	r1, [r5, #0]
 800902a:	bf48      	it	mi
 800902c:	6023      	strmi	r3, [r4, #0]
 800902e:	b91e      	cbnz	r6, 8009038 <_printf_i+0x1a4>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	f023 0320 	bic.w	r3, r3, #32
 8009036:	6023      	str	r3, [r4, #0]
 8009038:	2310      	movs	r3, #16
 800903a:	e7a7      	b.n	8008f8c <_printf_i+0xf8>
 800903c:	4824      	ldr	r0, [pc, #144]	; (80090d0 <_printf_i+0x23c>)
 800903e:	e7e4      	b.n	800900a <_printf_i+0x176>
 8009040:	4615      	mov	r5, r2
 8009042:	e7bd      	b.n	8008fc0 <_printf_i+0x12c>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	6826      	ldr	r6, [r4, #0]
 8009048:	6961      	ldr	r1, [r4, #20]
 800904a:	1d18      	adds	r0, r3, #4
 800904c:	6028      	str	r0, [r5, #0]
 800904e:	0635      	lsls	r5, r6, #24
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	d501      	bpl.n	8009058 <_printf_i+0x1c4>
 8009054:	6019      	str	r1, [r3, #0]
 8009056:	e002      	b.n	800905e <_printf_i+0x1ca>
 8009058:	0670      	lsls	r0, r6, #25
 800905a:	d5fb      	bpl.n	8009054 <_printf_i+0x1c0>
 800905c:	8019      	strh	r1, [r3, #0]
 800905e:	2300      	movs	r3, #0
 8009060:	6123      	str	r3, [r4, #16]
 8009062:	4615      	mov	r5, r2
 8009064:	e7bc      	b.n	8008fe0 <_printf_i+0x14c>
 8009066:	682b      	ldr	r3, [r5, #0]
 8009068:	1d1a      	adds	r2, r3, #4
 800906a:	602a      	str	r2, [r5, #0]
 800906c:	681d      	ldr	r5, [r3, #0]
 800906e:	6862      	ldr	r2, [r4, #4]
 8009070:	2100      	movs	r1, #0
 8009072:	4628      	mov	r0, r5
 8009074:	f7f7 f8ac 	bl	80001d0 <memchr>
 8009078:	b108      	cbz	r0, 800907e <_printf_i+0x1ea>
 800907a:	1b40      	subs	r0, r0, r5
 800907c:	6060      	str	r0, [r4, #4]
 800907e:	6863      	ldr	r3, [r4, #4]
 8009080:	6123      	str	r3, [r4, #16]
 8009082:	2300      	movs	r3, #0
 8009084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009088:	e7aa      	b.n	8008fe0 <_printf_i+0x14c>
 800908a:	6923      	ldr	r3, [r4, #16]
 800908c:	462a      	mov	r2, r5
 800908e:	4649      	mov	r1, r9
 8009090:	4640      	mov	r0, r8
 8009092:	47d0      	blx	sl
 8009094:	3001      	adds	r0, #1
 8009096:	d0ad      	beq.n	8008ff4 <_printf_i+0x160>
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	079b      	lsls	r3, r3, #30
 800909c:	d413      	bmi.n	80090c6 <_printf_i+0x232>
 800909e:	68e0      	ldr	r0, [r4, #12]
 80090a0:	9b03      	ldr	r3, [sp, #12]
 80090a2:	4298      	cmp	r0, r3
 80090a4:	bfb8      	it	lt
 80090a6:	4618      	movlt	r0, r3
 80090a8:	e7a6      	b.n	8008ff8 <_printf_i+0x164>
 80090aa:	2301      	movs	r3, #1
 80090ac:	4632      	mov	r2, r6
 80090ae:	4649      	mov	r1, r9
 80090b0:	4640      	mov	r0, r8
 80090b2:	47d0      	blx	sl
 80090b4:	3001      	adds	r0, #1
 80090b6:	d09d      	beq.n	8008ff4 <_printf_i+0x160>
 80090b8:	3501      	adds	r5, #1
 80090ba:	68e3      	ldr	r3, [r4, #12]
 80090bc:	9903      	ldr	r1, [sp, #12]
 80090be:	1a5b      	subs	r3, r3, r1
 80090c0:	42ab      	cmp	r3, r5
 80090c2:	dcf2      	bgt.n	80090aa <_printf_i+0x216>
 80090c4:	e7eb      	b.n	800909e <_printf_i+0x20a>
 80090c6:	2500      	movs	r5, #0
 80090c8:	f104 0619 	add.w	r6, r4, #25
 80090cc:	e7f5      	b.n	80090ba <_printf_i+0x226>
 80090ce:	bf00      	nop
 80090d0:	0800b89c 	.word	0x0800b89c
 80090d4:	0800b8ad 	.word	0x0800b8ad

080090d8 <__malloc_lock>:
 80090d8:	4801      	ldr	r0, [pc, #4]	; (80090e0 <__malloc_lock+0x8>)
 80090da:	f000 b988 	b.w	80093ee <__retarget_lock_acquire_recursive>
 80090de:	bf00      	nop
 80090e0:	20004ddc 	.word	0x20004ddc

080090e4 <__malloc_unlock>:
 80090e4:	4801      	ldr	r0, [pc, #4]	; (80090ec <__malloc_unlock+0x8>)
 80090e6:	f000 b983 	b.w	80093f0 <__retarget_lock_release_recursive>
 80090ea:	bf00      	nop
 80090ec:	20004ddc 	.word	0x20004ddc

080090f0 <siprintf>:
 80090f0:	b40e      	push	{r1, r2, r3}
 80090f2:	b500      	push	{lr}
 80090f4:	b09c      	sub	sp, #112	; 0x70
 80090f6:	ab1d      	add	r3, sp, #116	; 0x74
 80090f8:	9002      	str	r0, [sp, #8]
 80090fa:	9006      	str	r0, [sp, #24]
 80090fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009100:	4809      	ldr	r0, [pc, #36]	; (8009128 <siprintf+0x38>)
 8009102:	9107      	str	r1, [sp, #28]
 8009104:	9104      	str	r1, [sp, #16]
 8009106:	4909      	ldr	r1, [pc, #36]	; (800912c <siprintf+0x3c>)
 8009108:	f853 2b04 	ldr.w	r2, [r3], #4
 800910c:	9105      	str	r1, [sp, #20]
 800910e:	6800      	ldr	r0, [r0, #0]
 8009110:	9301      	str	r3, [sp, #4]
 8009112:	a902      	add	r1, sp, #8
 8009114:	f001 f89c 	bl	800a250 <_svfiprintf_r>
 8009118:	9b02      	ldr	r3, [sp, #8]
 800911a:	2200      	movs	r2, #0
 800911c:	701a      	strb	r2, [r3, #0]
 800911e:	b01c      	add	sp, #112	; 0x70
 8009120:	f85d eb04 	ldr.w	lr, [sp], #4
 8009124:	b003      	add	sp, #12
 8009126:	4770      	bx	lr
 8009128:	2000006c 	.word	0x2000006c
 800912c:	ffff0208 	.word	0xffff0208

08009130 <std>:
 8009130:	2300      	movs	r3, #0
 8009132:	b510      	push	{r4, lr}
 8009134:	4604      	mov	r4, r0
 8009136:	e9c0 3300 	strd	r3, r3, [r0]
 800913a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800913e:	6083      	str	r3, [r0, #8]
 8009140:	8181      	strh	r1, [r0, #12]
 8009142:	6643      	str	r3, [r0, #100]	; 0x64
 8009144:	81c2      	strh	r2, [r0, #14]
 8009146:	6183      	str	r3, [r0, #24]
 8009148:	4619      	mov	r1, r3
 800914a:	2208      	movs	r2, #8
 800914c:	305c      	adds	r0, #92	; 0x5c
 800914e:	f000 f8c3 	bl	80092d8 <memset>
 8009152:	4b0d      	ldr	r3, [pc, #52]	; (8009188 <std+0x58>)
 8009154:	6263      	str	r3, [r4, #36]	; 0x24
 8009156:	4b0d      	ldr	r3, [pc, #52]	; (800918c <std+0x5c>)
 8009158:	62a3      	str	r3, [r4, #40]	; 0x28
 800915a:	4b0d      	ldr	r3, [pc, #52]	; (8009190 <std+0x60>)
 800915c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800915e:	4b0d      	ldr	r3, [pc, #52]	; (8009194 <std+0x64>)
 8009160:	6323      	str	r3, [r4, #48]	; 0x30
 8009162:	4b0d      	ldr	r3, [pc, #52]	; (8009198 <std+0x68>)
 8009164:	6224      	str	r4, [r4, #32]
 8009166:	429c      	cmp	r4, r3
 8009168:	d006      	beq.n	8009178 <std+0x48>
 800916a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800916e:	4294      	cmp	r4, r2
 8009170:	d002      	beq.n	8009178 <std+0x48>
 8009172:	33d0      	adds	r3, #208	; 0xd0
 8009174:	429c      	cmp	r4, r3
 8009176:	d105      	bne.n	8009184 <std+0x54>
 8009178:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800917c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009180:	f000 b934 	b.w	80093ec <__retarget_lock_init_recursive>
 8009184:	bd10      	pop	{r4, pc}
 8009186:	bf00      	nop
 8009188:	0800af29 	.word	0x0800af29
 800918c:	0800af4b 	.word	0x0800af4b
 8009190:	0800af83 	.word	0x0800af83
 8009194:	0800afa7 	.word	0x0800afa7
 8009198:	20004ca0 	.word	0x20004ca0

0800919c <stdio_exit_handler>:
 800919c:	4a02      	ldr	r2, [pc, #8]	; (80091a8 <stdio_exit_handler+0xc>)
 800919e:	4903      	ldr	r1, [pc, #12]	; (80091ac <stdio_exit_handler+0x10>)
 80091a0:	4803      	ldr	r0, [pc, #12]	; (80091b0 <stdio_exit_handler+0x14>)
 80091a2:	f000 b87b 	b.w	800929c <_fwalk_sglue>
 80091a6:	bf00      	nop
 80091a8:	20000014 	.word	0x20000014
 80091ac:	0800a7e1 	.word	0x0800a7e1
 80091b0:	20000020 	.word	0x20000020

080091b4 <cleanup_stdio>:
 80091b4:	6841      	ldr	r1, [r0, #4]
 80091b6:	4b0c      	ldr	r3, [pc, #48]	; (80091e8 <cleanup_stdio+0x34>)
 80091b8:	4299      	cmp	r1, r3
 80091ba:	b510      	push	{r4, lr}
 80091bc:	4604      	mov	r4, r0
 80091be:	d001      	beq.n	80091c4 <cleanup_stdio+0x10>
 80091c0:	f001 fb0e 	bl	800a7e0 <_fflush_r>
 80091c4:	68a1      	ldr	r1, [r4, #8]
 80091c6:	4b09      	ldr	r3, [pc, #36]	; (80091ec <cleanup_stdio+0x38>)
 80091c8:	4299      	cmp	r1, r3
 80091ca:	d002      	beq.n	80091d2 <cleanup_stdio+0x1e>
 80091cc:	4620      	mov	r0, r4
 80091ce:	f001 fb07 	bl	800a7e0 <_fflush_r>
 80091d2:	68e1      	ldr	r1, [r4, #12]
 80091d4:	4b06      	ldr	r3, [pc, #24]	; (80091f0 <cleanup_stdio+0x3c>)
 80091d6:	4299      	cmp	r1, r3
 80091d8:	d004      	beq.n	80091e4 <cleanup_stdio+0x30>
 80091da:	4620      	mov	r0, r4
 80091dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091e0:	f001 bafe 	b.w	800a7e0 <_fflush_r>
 80091e4:	bd10      	pop	{r4, pc}
 80091e6:	bf00      	nop
 80091e8:	20004ca0 	.word	0x20004ca0
 80091ec:	20004d08 	.word	0x20004d08
 80091f0:	20004d70 	.word	0x20004d70

080091f4 <global_stdio_init.part.0>:
 80091f4:	b510      	push	{r4, lr}
 80091f6:	4b0b      	ldr	r3, [pc, #44]	; (8009224 <global_stdio_init.part.0+0x30>)
 80091f8:	4c0b      	ldr	r4, [pc, #44]	; (8009228 <global_stdio_init.part.0+0x34>)
 80091fa:	4a0c      	ldr	r2, [pc, #48]	; (800922c <global_stdio_init.part.0+0x38>)
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	4620      	mov	r0, r4
 8009200:	2200      	movs	r2, #0
 8009202:	2104      	movs	r1, #4
 8009204:	f7ff ff94 	bl	8009130 <std>
 8009208:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800920c:	2201      	movs	r2, #1
 800920e:	2109      	movs	r1, #9
 8009210:	f7ff ff8e 	bl	8009130 <std>
 8009214:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009218:	2202      	movs	r2, #2
 800921a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800921e:	2112      	movs	r1, #18
 8009220:	f7ff bf86 	b.w	8009130 <std>
 8009224:	20004dd8 	.word	0x20004dd8
 8009228:	20004ca0 	.word	0x20004ca0
 800922c:	0800919d 	.word	0x0800919d

08009230 <__sfp_lock_acquire>:
 8009230:	4801      	ldr	r0, [pc, #4]	; (8009238 <__sfp_lock_acquire+0x8>)
 8009232:	f000 b8dc 	b.w	80093ee <__retarget_lock_acquire_recursive>
 8009236:	bf00      	nop
 8009238:	20004ddd 	.word	0x20004ddd

0800923c <__sfp_lock_release>:
 800923c:	4801      	ldr	r0, [pc, #4]	; (8009244 <__sfp_lock_release+0x8>)
 800923e:	f000 b8d7 	b.w	80093f0 <__retarget_lock_release_recursive>
 8009242:	bf00      	nop
 8009244:	20004ddd 	.word	0x20004ddd

08009248 <__sinit>:
 8009248:	b510      	push	{r4, lr}
 800924a:	4604      	mov	r4, r0
 800924c:	f7ff fff0 	bl	8009230 <__sfp_lock_acquire>
 8009250:	6a23      	ldr	r3, [r4, #32]
 8009252:	b11b      	cbz	r3, 800925c <__sinit+0x14>
 8009254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009258:	f7ff bff0 	b.w	800923c <__sfp_lock_release>
 800925c:	4b04      	ldr	r3, [pc, #16]	; (8009270 <__sinit+0x28>)
 800925e:	6223      	str	r3, [r4, #32]
 8009260:	4b04      	ldr	r3, [pc, #16]	; (8009274 <__sinit+0x2c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1f5      	bne.n	8009254 <__sinit+0xc>
 8009268:	f7ff ffc4 	bl	80091f4 <global_stdio_init.part.0>
 800926c:	e7f2      	b.n	8009254 <__sinit+0xc>
 800926e:	bf00      	nop
 8009270:	080091b5 	.word	0x080091b5
 8009274:	20004dd8 	.word	0x20004dd8

08009278 <fiprintf>:
 8009278:	b40e      	push	{r1, r2, r3}
 800927a:	b503      	push	{r0, r1, lr}
 800927c:	4601      	mov	r1, r0
 800927e:	ab03      	add	r3, sp, #12
 8009280:	4805      	ldr	r0, [pc, #20]	; (8009298 <fiprintf+0x20>)
 8009282:	f853 2b04 	ldr.w	r2, [r3], #4
 8009286:	6800      	ldr	r0, [r0, #0]
 8009288:	9301      	str	r3, [sp, #4]
 800928a:	f001 f909 	bl	800a4a0 <_vfiprintf_r>
 800928e:	b002      	add	sp, #8
 8009290:	f85d eb04 	ldr.w	lr, [sp], #4
 8009294:	b003      	add	sp, #12
 8009296:	4770      	bx	lr
 8009298:	2000006c 	.word	0x2000006c

0800929c <_fwalk_sglue>:
 800929c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092a0:	4607      	mov	r7, r0
 80092a2:	4688      	mov	r8, r1
 80092a4:	4614      	mov	r4, r2
 80092a6:	2600      	movs	r6, #0
 80092a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092ac:	f1b9 0901 	subs.w	r9, r9, #1
 80092b0:	d505      	bpl.n	80092be <_fwalk_sglue+0x22>
 80092b2:	6824      	ldr	r4, [r4, #0]
 80092b4:	2c00      	cmp	r4, #0
 80092b6:	d1f7      	bne.n	80092a8 <_fwalk_sglue+0xc>
 80092b8:	4630      	mov	r0, r6
 80092ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092be:	89ab      	ldrh	r3, [r5, #12]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d907      	bls.n	80092d4 <_fwalk_sglue+0x38>
 80092c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092c8:	3301      	adds	r3, #1
 80092ca:	d003      	beq.n	80092d4 <_fwalk_sglue+0x38>
 80092cc:	4629      	mov	r1, r5
 80092ce:	4638      	mov	r0, r7
 80092d0:	47c0      	blx	r8
 80092d2:	4306      	orrs	r6, r0
 80092d4:	3568      	adds	r5, #104	; 0x68
 80092d6:	e7e9      	b.n	80092ac <_fwalk_sglue+0x10>

080092d8 <memset>:
 80092d8:	4402      	add	r2, r0
 80092da:	4603      	mov	r3, r0
 80092dc:	4293      	cmp	r3, r2
 80092de:	d100      	bne.n	80092e2 <memset+0xa>
 80092e0:	4770      	bx	lr
 80092e2:	f803 1b01 	strb.w	r1, [r3], #1
 80092e6:	e7f9      	b.n	80092dc <memset+0x4>

080092e8 <_localeconv_r>:
 80092e8:	4800      	ldr	r0, [pc, #0]	; (80092ec <_localeconv_r+0x4>)
 80092ea:	4770      	bx	lr
 80092ec:	20000160 	.word	0x20000160

080092f0 <_raise_r>:
 80092f0:	291f      	cmp	r1, #31
 80092f2:	b538      	push	{r3, r4, r5, lr}
 80092f4:	4604      	mov	r4, r0
 80092f6:	460d      	mov	r5, r1
 80092f8:	d904      	bls.n	8009304 <_raise_r+0x14>
 80092fa:	2316      	movs	r3, #22
 80092fc:	6003      	str	r3, [r0, #0]
 80092fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009302:	bd38      	pop	{r3, r4, r5, pc}
 8009304:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009306:	b112      	cbz	r2, 800930e <_raise_r+0x1e>
 8009308:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800930c:	b94b      	cbnz	r3, 8009322 <_raise_r+0x32>
 800930e:	4620      	mov	r0, r4
 8009310:	f000 f830 	bl	8009374 <_getpid_r>
 8009314:	462a      	mov	r2, r5
 8009316:	4601      	mov	r1, r0
 8009318:	4620      	mov	r0, r4
 800931a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800931e:	f000 b817 	b.w	8009350 <_kill_r>
 8009322:	2b01      	cmp	r3, #1
 8009324:	d00a      	beq.n	800933c <_raise_r+0x4c>
 8009326:	1c59      	adds	r1, r3, #1
 8009328:	d103      	bne.n	8009332 <_raise_r+0x42>
 800932a:	2316      	movs	r3, #22
 800932c:	6003      	str	r3, [r0, #0]
 800932e:	2001      	movs	r0, #1
 8009330:	e7e7      	b.n	8009302 <_raise_r+0x12>
 8009332:	2400      	movs	r4, #0
 8009334:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009338:	4628      	mov	r0, r5
 800933a:	4798      	blx	r3
 800933c:	2000      	movs	r0, #0
 800933e:	e7e0      	b.n	8009302 <_raise_r+0x12>

08009340 <raise>:
 8009340:	4b02      	ldr	r3, [pc, #8]	; (800934c <raise+0xc>)
 8009342:	4601      	mov	r1, r0
 8009344:	6818      	ldr	r0, [r3, #0]
 8009346:	f7ff bfd3 	b.w	80092f0 <_raise_r>
 800934a:	bf00      	nop
 800934c:	2000006c 	.word	0x2000006c

08009350 <_kill_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4d07      	ldr	r5, [pc, #28]	; (8009370 <_kill_r+0x20>)
 8009354:	2300      	movs	r3, #0
 8009356:	4604      	mov	r4, r0
 8009358:	4608      	mov	r0, r1
 800935a:	4611      	mov	r1, r2
 800935c:	602b      	str	r3, [r5, #0]
 800935e:	f7f9 fed4 	bl	800310a <_kill>
 8009362:	1c43      	adds	r3, r0, #1
 8009364:	d102      	bne.n	800936c <_kill_r+0x1c>
 8009366:	682b      	ldr	r3, [r5, #0]
 8009368:	b103      	cbz	r3, 800936c <_kill_r+0x1c>
 800936a:	6023      	str	r3, [r4, #0]
 800936c:	bd38      	pop	{r3, r4, r5, pc}
 800936e:	bf00      	nop
 8009370:	20004de0 	.word	0x20004de0

08009374 <_getpid_r>:
 8009374:	f7f9 bec1 	b.w	80030fa <_getpid>

08009378 <_sbrk_r>:
 8009378:	b538      	push	{r3, r4, r5, lr}
 800937a:	4d06      	ldr	r5, [pc, #24]	; (8009394 <_sbrk_r+0x1c>)
 800937c:	2300      	movs	r3, #0
 800937e:	4604      	mov	r4, r0
 8009380:	4608      	mov	r0, r1
 8009382:	602b      	str	r3, [r5, #0]
 8009384:	f7f9 ff48 	bl	8003218 <_sbrk>
 8009388:	1c43      	adds	r3, r0, #1
 800938a:	d102      	bne.n	8009392 <_sbrk_r+0x1a>
 800938c:	682b      	ldr	r3, [r5, #0]
 800938e:	b103      	cbz	r3, 8009392 <_sbrk_r+0x1a>
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	bd38      	pop	{r3, r4, r5, pc}
 8009394:	20004de0 	.word	0x20004de0

08009398 <__errno>:
 8009398:	4b01      	ldr	r3, [pc, #4]	; (80093a0 <__errno+0x8>)
 800939a:	6818      	ldr	r0, [r3, #0]
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	2000006c 	.word	0x2000006c

080093a4 <__libc_init_array>:
 80093a4:	b570      	push	{r4, r5, r6, lr}
 80093a6:	4d0d      	ldr	r5, [pc, #52]	; (80093dc <__libc_init_array+0x38>)
 80093a8:	4c0d      	ldr	r4, [pc, #52]	; (80093e0 <__libc_init_array+0x3c>)
 80093aa:	1b64      	subs	r4, r4, r5
 80093ac:	10a4      	asrs	r4, r4, #2
 80093ae:	2600      	movs	r6, #0
 80093b0:	42a6      	cmp	r6, r4
 80093b2:	d109      	bne.n	80093c8 <__libc_init_array+0x24>
 80093b4:	4d0b      	ldr	r5, [pc, #44]	; (80093e4 <__libc_init_array+0x40>)
 80093b6:	4c0c      	ldr	r4, [pc, #48]	; (80093e8 <__libc_init_array+0x44>)
 80093b8:	f001 ffe0 	bl	800b37c <_init>
 80093bc:	1b64      	subs	r4, r4, r5
 80093be:	10a4      	asrs	r4, r4, #2
 80093c0:	2600      	movs	r6, #0
 80093c2:	42a6      	cmp	r6, r4
 80093c4:	d105      	bne.n	80093d2 <__libc_init_array+0x2e>
 80093c6:	bd70      	pop	{r4, r5, r6, pc}
 80093c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80093cc:	4798      	blx	r3
 80093ce:	3601      	adds	r6, #1
 80093d0:	e7ee      	b.n	80093b0 <__libc_init_array+0xc>
 80093d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80093d6:	4798      	blx	r3
 80093d8:	3601      	adds	r6, #1
 80093da:	e7f2      	b.n	80093c2 <__libc_init_array+0x1e>
 80093dc:	0800bbc8 	.word	0x0800bbc8
 80093e0:	0800bbc8 	.word	0x0800bbc8
 80093e4:	0800bbc8 	.word	0x0800bbc8
 80093e8:	0800bbd0 	.word	0x0800bbd0

080093ec <__retarget_lock_init_recursive>:
 80093ec:	4770      	bx	lr

080093ee <__retarget_lock_acquire_recursive>:
 80093ee:	4770      	bx	lr

080093f0 <__retarget_lock_release_recursive>:
 80093f0:	4770      	bx	lr

080093f2 <memcpy>:
 80093f2:	440a      	add	r2, r1
 80093f4:	4291      	cmp	r1, r2
 80093f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80093fa:	d100      	bne.n	80093fe <memcpy+0xc>
 80093fc:	4770      	bx	lr
 80093fe:	b510      	push	{r4, lr}
 8009400:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009404:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009408:	4291      	cmp	r1, r2
 800940a:	d1f9      	bne.n	8009400 <memcpy+0xe>
 800940c:	bd10      	pop	{r4, pc}

0800940e <quorem>:
 800940e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009412:	6903      	ldr	r3, [r0, #16]
 8009414:	690c      	ldr	r4, [r1, #16]
 8009416:	42a3      	cmp	r3, r4
 8009418:	4607      	mov	r7, r0
 800941a:	db7e      	blt.n	800951a <quorem+0x10c>
 800941c:	3c01      	subs	r4, #1
 800941e:	f101 0814 	add.w	r8, r1, #20
 8009422:	f100 0514 	add.w	r5, r0, #20
 8009426:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800942a:	9301      	str	r3, [sp, #4]
 800942c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009430:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009434:	3301      	adds	r3, #1
 8009436:	429a      	cmp	r2, r3
 8009438:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800943c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009440:	fbb2 f6f3 	udiv	r6, r2, r3
 8009444:	d331      	bcc.n	80094aa <quorem+0x9c>
 8009446:	f04f 0e00 	mov.w	lr, #0
 800944a:	4640      	mov	r0, r8
 800944c:	46ac      	mov	ip, r5
 800944e:	46f2      	mov	sl, lr
 8009450:	f850 2b04 	ldr.w	r2, [r0], #4
 8009454:	b293      	uxth	r3, r2
 8009456:	fb06 e303 	mla	r3, r6, r3, lr
 800945a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800945e:	0c1a      	lsrs	r2, r3, #16
 8009460:	b29b      	uxth	r3, r3
 8009462:	ebaa 0303 	sub.w	r3, sl, r3
 8009466:	f8dc a000 	ldr.w	sl, [ip]
 800946a:	fa13 f38a 	uxtah	r3, r3, sl
 800946e:	fb06 220e 	mla	r2, r6, lr, r2
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	9b00      	ldr	r3, [sp, #0]
 8009476:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800947a:	b292      	uxth	r2, r2
 800947c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009480:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009484:	f8bd 3000 	ldrh.w	r3, [sp]
 8009488:	4581      	cmp	r9, r0
 800948a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800948e:	f84c 3b04 	str.w	r3, [ip], #4
 8009492:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009496:	d2db      	bcs.n	8009450 <quorem+0x42>
 8009498:	f855 300b 	ldr.w	r3, [r5, fp]
 800949c:	b92b      	cbnz	r3, 80094aa <quorem+0x9c>
 800949e:	9b01      	ldr	r3, [sp, #4]
 80094a0:	3b04      	subs	r3, #4
 80094a2:	429d      	cmp	r5, r3
 80094a4:	461a      	mov	r2, r3
 80094a6:	d32c      	bcc.n	8009502 <quorem+0xf4>
 80094a8:	613c      	str	r4, [r7, #16]
 80094aa:	4638      	mov	r0, r7
 80094ac:	f001 fc3c 	bl	800ad28 <__mcmp>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	db22      	blt.n	80094fa <quorem+0xec>
 80094b4:	3601      	adds	r6, #1
 80094b6:	4629      	mov	r1, r5
 80094b8:	2000      	movs	r0, #0
 80094ba:	f858 2b04 	ldr.w	r2, [r8], #4
 80094be:	f8d1 c000 	ldr.w	ip, [r1]
 80094c2:	b293      	uxth	r3, r2
 80094c4:	1ac3      	subs	r3, r0, r3
 80094c6:	0c12      	lsrs	r2, r2, #16
 80094c8:	fa13 f38c 	uxtah	r3, r3, ip
 80094cc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80094d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094da:	45c1      	cmp	r9, r8
 80094dc:	f841 3b04 	str.w	r3, [r1], #4
 80094e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80094e4:	d2e9      	bcs.n	80094ba <quorem+0xac>
 80094e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094ee:	b922      	cbnz	r2, 80094fa <quorem+0xec>
 80094f0:	3b04      	subs	r3, #4
 80094f2:	429d      	cmp	r5, r3
 80094f4:	461a      	mov	r2, r3
 80094f6:	d30a      	bcc.n	800950e <quorem+0x100>
 80094f8:	613c      	str	r4, [r7, #16]
 80094fa:	4630      	mov	r0, r6
 80094fc:	b003      	add	sp, #12
 80094fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009502:	6812      	ldr	r2, [r2, #0]
 8009504:	3b04      	subs	r3, #4
 8009506:	2a00      	cmp	r2, #0
 8009508:	d1ce      	bne.n	80094a8 <quorem+0x9a>
 800950a:	3c01      	subs	r4, #1
 800950c:	e7c9      	b.n	80094a2 <quorem+0x94>
 800950e:	6812      	ldr	r2, [r2, #0]
 8009510:	3b04      	subs	r3, #4
 8009512:	2a00      	cmp	r2, #0
 8009514:	d1f0      	bne.n	80094f8 <quorem+0xea>
 8009516:	3c01      	subs	r4, #1
 8009518:	e7eb      	b.n	80094f2 <quorem+0xe4>
 800951a:	2000      	movs	r0, #0
 800951c:	e7ee      	b.n	80094fc <quorem+0xee>
	...

08009520 <_dtoa_r>:
 8009520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009524:	ed2d 8b04 	vpush	{d8-d9}
 8009528:	69c5      	ldr	r5, [r0, #28]
 800952a:	b093      	sub	sp, #76	; 0x4c
 800952c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009530:	ec57 6b10 	vmov	r6, r7, d0
 8009534:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009538:	9107      	str	r1, [sp, #28]
 800953a:	4604      	mov	r4, r0
 800953c:	920a      	str	r2, [sp, #40]	; 0x28
 800953e:	930d      	str	r3, [sp, #52]	; 0x34
 8009540:	b975      	cbnz	r5, 8009560 <_dtoa_r+0x40>
 8009542:	2010      	movs	r0, #16
 8009544:	f7ff fb88 	bl	8008c58 <malloc>
 8009548:	4602      	mov	r2, r0
 800954a:	61e0      	str	r0, [r4, #28]
 800954c:	b920      	cbnz	r0, 8009558 <_dtoa_r+0x38>
 800954e:	4bae      	ldr	r3, [pc, #696]	; (8009808 <_dtoa_r+0x2e8>)
 8009550:	21ef      	movs	r1, #239	; 0xef
 8009552:	48ae      	ldr	r0, [pc, #696]	; (800980c <_dtoa_r+0x2ec>)
 8009554:	f7ff f88c 	bl	8008670 <__assert_func>
 8009558:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800955c:	6005      	str	r5, [r0, #0]
 800955e:	60c5      	str	r5, [r0, #12]
 8009560:	69e3      	ldr	r3, [r4, #28]
 8009562:	6819      	ldr	r1, [r3, #0]
 8009564:	b151      	cbz	r1, 800957c <_dtoa_r+0x5c>
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	604a      	str	r2, [r1, #4]
 800956a:	2301      	movs	r3, #1
 800956c:	4093      	lsls	r3, r2
 800956e:	608b      	str	r3, [r1, #8]
 8009570:	4620      	mov	r0, r4
 8009572:	f001 f99d 	bl	800a8b0 <_Bfree>
 8009576:	69e3      	ldr	r3, [r4, #28]
 8009578:	2200      	movs	r2, #0
 800957a:	601a      	str	r2, [r3, #0]
 800957c:	1e3b      	subs	r3, r7, #0
 800957e:	bfbb      	ittet	lt
 8009580:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009584:	9303      	strlt	r3, [sp, #12]
 8009586:	2300      	movge	r3, #0
 8009588:	2201      	movlt	r2, #1
 800958a:	bfac      	ite	ge
 800958c:	f8c8 3000 	strge.w	r3, [r8]
 8009590:	f8c8 2000 	strlt.w	r2, [r8]
 8009594:	4b9e      	ldr	r3, [pc, #632]	; (8009810 <_dtoa_r+0x2f0>)
 8009596:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800959a:	ea33 0308 	bics.w	r3, r3, r8
 800959e:	d11b      	bne.n	80095d8 <_dtoa_r+0xb8>
 80095a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80095ac:	4333      	orrs	r3, r6
 80095ae:	f000 8593 	beq.w	800a0d8 <_dtoa_r+0xbb8>
 80095b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095b4:	b963      	cbnz	r3, 80095d0 <_dtoa_r+0xb0>
 80095b6:	4b97      	ldr	r3, [pc, #604]	; (8009814 <_dtoa_r+0x2f4>)
 80095b8:	e027      	b.n	800960a <_dtoa_r+0xea>
 80095ba:	4b97      	ldr	r3, [pc, #604]	; (8009818 <_dtoa_r+0x2f8>)
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	3308      	adds	r3, #8
 80095c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	9800      	ldr	r0, [sp, #0]
 80095c6:	b013      	add	sp, #76	; 0x4c
 80095c8:	ecbd 8b04 	vpop	{d8-d9}
 80095cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d0:	4b90      	ldr	r3, [pc, #576]	; (8009814 <_dtoa_r+0x2f4>)
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	3303      	adds	r3, #3
 80095d6:	e7f3      	b.n	80095c0 <_dtoa_r+0xa0>
 80095d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095dc:	2200      	movs	r2, #0
 80095de:	ec51 0b17 	vmov	r0, r1, d7
 80095e2:	eeb0 8a47 	vmov.f32	s16, s14
 80095e6:	eef0 8a67 	vmov.f32	s17, s15
 80095ea:	2300      	movs	r3, #0
 80095ec:	f7f7 fa6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80095f0:	4681      	mov	r9, r0
 80095f2:	b160      	cbz	r0, 800960e <_dtoa_r+0xee>
 80095f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095f6:	2301      	movs	r3, #1
 80095f8:	6013      	str	r3, [r2, #0]
 80095fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f000 8568 	beq.w	800a0d2 <_dtoa_r+0xbb2>
 8009602:	4b86      	ldr	r3, [pc, #536]	; (800981c <_dtoa_r+0x2fc>)
 8009604:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009606:	6013      	str	r3, [r2, #0]
 8009608:	3b01      	subs	r3, #1
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	e7da      	b.n	80095c4 <_dtoa_r+0xa4>
 800960e:	aa10      	add	r2, sp, #64	; 0x40
 8009610:	a911      	add	r1, sp, #68	; 0x44
 8009612:	4620      	mov	r0, r4
 8009614:	eeb0 0a48 	vmov.f32	s0, s16
 8009618:	eef0 0a68 	vmov.f32	s1, s17
 800961c:	f001 fc2a 	bl	800ae74 <__d2b>
 8009620:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009624:	4682      	mov	sl, r0
 8009626:	2d00      	cmp	r5, #0
 8009628:	d07f      	beq.n	800972a <_dtoa_r+0x20a>
 800962a:	ee18 3a90 	vmov	r3, s17
 800962e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009632:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009636:	ec51 0b18 	vmov	r0, r1, d8
 800963a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800963e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009642:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009646:	4619      	mov	r1, r3
 8009648:	2200      	movs	r2, #0
 800964a:	4b75      	ldr	r3, [pc, #468]	; (8009820 <_dtoa_r+0x300>)
 800964c:	f7f6 fe1c 	bl	8000288 <__aeabi_dsub>
 8009650:	a367      	add	r3, pc, #412	; (adr r3, 80097f0 <_dtoa_r+0x2d0>)
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	f7f6 ffcf 	bl	80005f8 <__aeabi_dmul>
 800965a:	a367      	add	r3, pc, #412	; (adr r3, 80097f8 <_dtoa_r+0x2d8>)
 800965c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009660:	f7f6 fe14 	bl	800028c <__adddf3>
 8009664:	4606      	mov	r6, r0
 8009666:	4628      	mov	r0, r5
 8009668:	460f      	mov	r7, r1
 800966a:	f7f6 ff5b 	bl	8000524 <__aeabi_i2d>
 800966e:	a364      	add	r3, pc, #400	; (adr r3, 8009800 <_dtoa_r+0x2e0>)
 8009670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009674:	f7f6 ffc0 	bl	80005f8 <__aeabi_dmul>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	4630      	mov	r0, r6
 800967e:	4639      	mov	r1, r7
 8009680:	f7f6 fe04 	bl	800028c <__adddf3>
 8009684:	4606      	mov	r6, r0
 8009686:	460f      	mov	r7, r1
 8009688:	f7f7 fa66 	bl	8000b58 <__aeabi_d2iz>
 800968c:	2200      	movs	r2, #0
 800968e:	4683      	mov	fp, r0
 8009690:	2300      	movs	r3, #0
 8009692:	4630      	mov	r0, r6
 8009694:	4639      	mov	r1, r7
 8009696:	f7f7 fa21 	bl	8000adc <__aeabi_dcmplt>
 800969a:	b148      	cbz	r0, 80096b0 <_dtoa_r+0x190>
 800969c:	4658      	mov	r0, fp
 800969e:	f7f6 ff41 	bl	8000524 <__aeabi_i2d>
 80096a2:	4632      	mov	r2, r6
 80096a4:	463b      	mov	r3, r7
 80096a6:	f7f7 fa0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80096aa:	b908      	cbnz	r0, 80096b0 <_dtoa_r+0x190>
 80096ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80096b0:	f1bb 0f16 	cmp.w	fp, #22
 80096b4:	d857      	bhi.n	8009766 <_dtoa_r+0x246>
 80096b6:	4b5b      	ldr	r3, [pc, #364]	; (8009824 <_dtoa_r+0x304>)
 80096b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	ec51 0b18 	vmov	r0, r1, d8
 80096c4:	f7f7 fa0a 	bl	8000adc <__aeabi_dcmplt>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d04e      	beq.n	800976a <_dtoa_r+0x24a>
 80096cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80096d0:	2300      	movs	r3, #0
 80096d2:	930c      	str	r3, [sp, #48]	; 0x30
 80096d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096d6:	1b5b      	subs	r3, r3, r5
 80096d8:	1e5a      	subs	r2, r3, #1
 80096da:	bf45      	ittet	mi
 80096dc:	f1c3 0301 	rsbmi	r3, r3, #1
 80096e0:	9305      	strmi	r3, [sp, #20]
 80096e2:	2300      	movpl	r3, #0
 80096e4:	2300      	movmi	r3, #0
 80096e6:	9206      	str	r2, [sp, #24]
 80096e8:	bf54      	ite	pl
 80096ea:	9305      	strpl	r3, [sp, #20]
 80096ec:	9306      	strmi	r3, [sp, #24]
 80096ee:	f1bb 0f00 	cmp.w	fp, #0
 80096f2:	db3c      	blt.n	800976e <_dtoa_r+0x24e>
 80096f4:	9b06      	ldr	r3, [sp, #24]
 80096f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80096fa:	445b      	add	r3, fp
 80096fc:	9306      	str	r3, [sp, #24]
 80096fe:	2300      	movs	r3, #0
 8009700:	9308      	str	r3, [sp, #32]
 8009702:	9b07      	ldr	r3, [sp, #28]
 8009704:	2b09      	cmp	r3, #9
 8009706:	d868      	bhi.n	80097da <_dtoa_r+0x2ba>
 8009708:	2b05      	cmp	r3, #5
 800970a:	bfc4      	itt	gt
 800970c:	3b04      	subgt	r3, #4
 800970e:	9307      	strgt	r3, [sp, #28]
 8009710:	9b07      	ldr	r3, [sp, #28]
 8009712:	f1a3 0302 	sub.w	r3, r3, #2
 8009716:	bfcc      	ite	gt
 8009718:	2500      	movgt	r5, #0
 800971a:	2501      	movle	r5, #1
 800971c:	2b03      	cmp	r3, #3
 800971e:	f200 8085 	bhi.w	800982c <_dtoa_r+0x30c>
 8009722:	e8df f003 	tbb	[pc, r3]
 8009726:	3b2e      	.short	0x3b2e
 8009728:	5839      	.short	0x5839
 800972a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800972e:	441d      	add	r5, r3
 8009730:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009734:	2b20      	cmp	r3, #32
 8009736:	bfc1      	itttt	gt
 8009738:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800973c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009740:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009744:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009748:	bfd6      	itet	le
 800974a:	f1c3 0320 	rsble	r3, r3, #32
 800974e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009752:	fa06 f003 	lslle.w	r0, r6, r3
 8009756:	f7f6 fed5 	bl	8000504 <__aeabi_ui2d>
 800975a:	2201      	movs	r2, #1
 800975c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009760:	3d01      	subs	r5, #1
 8009762:	920e      	str	r2, [sp, #56]	; 0x38
 8009764:	e76f      	b.n	8009646 <_dtoa_r+0x126>
 8009766:	2301      	movs	r3, #1
 8009768:	e7b3      	b.n	80096d2 <_dtoa_r+0x1b2>
 800976a:	900c      	str	r0, [sp, #48]	; 0x30
 800976c:	e7b2      	b.n	80096d4 <_dtoa_r+0x1b4>
 800976e:	9b05      	ldr	r3, [sp, #20]
 8009770:	eba3 030b 	sub.w	r3, r3, fp
 8009774:	9305      	str	r3, [sp, #20]
 8009776:	f1cb 0300 	rsb	r3, fp, #0
 800977a:	9308      	str	r3, [sp, #32]
 800977c:	2300      	movs	r3, #0
 800977e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009780:	e7bf      	b.n	8009702 <_dtoa_r+0x1e2>
 8009782:	2300      	movs	r3, #0
 8009784:	9309      	str	r3, [sp, #36]	; 0x24
 8009786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009788:	2b00      	cmp	r3, #0
 800978a:	dc52      	bgt.n	8009832 <_dtoa_r+0x312>
 800978c:	2301      	movs	r3, #1
 800978e:	9301      	str	r3, [sp, #4]
 8009790:	9304      	str	r3, [sp, #16]
 8009792:	461a      	mov	r2, r3
 8009794:	920a      	str	r2, [sp, #40]	; 0x28
 8009796:	e00b      	b.n	80097b0 <_dtoa_r+0x290>
 8009798:	2301      	movs	r3, #1
 800979a:	e7f3      	b.n	8009784 <_dtoa_r+0x264>
 800979c:	2300      	movs	r3, #0
 800979e:	9309      	str	r3, [sp, #36]	; 0x24
 80097a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a2:	445b      	add	r3, fp
 80097a4:	9301      	str	r3, [sp, #4]
 80097a6:	3301      	adds	r3, #1
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	9304      	str	r3, [sp, #16]
 80097ac:	bfb8      	it	lt
 80097ae:	2301      	movlt	r3, #1
 80097b0:	69e0      	ldr	r0, [r4, #28]
 80097b2:	2100      	movs	r1, #0
 80097b4:	2204      	movs	r2, #4
 80097b6:	f102 0614 	add.w	r6, r2, #20
 80097ba:	429e      	cmp	r6, r3
 80097bc:	d93d      	bls.n	800983a <_dtoa_r+0x31a>
 80097be:	6041      	str	r1, [r0, #4]
 80097c0:	4620      	mov	r0, r4
 80097c2:	f001 f835 	bl	800a830 <_Balloc>
 80097c6:	9000      	str	r0, [sp, #0]
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d139      	bne.n	8009840 <_dtoa_r+0x320>
 80097cc:	4b16      	ldr	r3, [pc, #88]	; (8009828 <_dtoa_r+0x308>)
 80097ce:	4602      	mov	r2, r0
 80097d0:	f240 11af 	movw	r1, #431	; 0x1af
 80097d4:	e6bd      	b.n	8009552 <_dtoa_r+0x32>
 80097d6:	2301      	movs	r3, #1
 80097d8:	e7e1      	b.n	800979e <_dtoa_r+0x27e>
 80097da:	2501      	movs	r5, #1
 80097dc:	2300      	movs	r3, #0
 80097de:	9307      	str	r3, [sp, #28]
 80097e0:	9509      	str	r5, [sp, #36]	; 0x24
 80097e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097e6:	9301      	str	r3, [sp, #4]
 80097e8:	9304      	str	r3, [sp, #16]
 80097ea:	2200      	movs	r2, #0
 80097ec:	2312      	movs	r3, #18
 80097ee:	e7d1      	b.n	8009794 <_dtoa_r+0x274>
 80097f0:	636f4361 	.word	0x636f4361
 80097f4:	3fd287a7 	.word	0x3fd287a7
 80097f8:	8b60c8b3 	.word	0x8b60c8b3
 80097fc:	3fc68a28 	.word	0x3fc68a28
 8009800:	509f79fb 	.word	0x509f79fb
 8009804:	3fd34413 	.word	0x3fd34413
 8009808:	0800b8cb 	.word	0x0800b8cb
 800980c:	0800b8e2 	.word	0x0800b8e2
 8009810:	7ff00000 	.word	0x7ff00000
 8009814:	0800b8c7 	.word	0x0800b8c7
 8009818:	0800b8be 	.word	0x0800b8be
 800981c:	0800b89b 	.word	0x0800b89b
 8009820:	3ff80000 	.word	0x3ff80000
 8009824:	0800b9e0 	.word	0x0800b9e0
 8009828:	0800b93a 	.word	0x0800b93a
 800982c:	2301      	movs	r3, #1
 800982e:	9309      	str	r3, [sp, #36]	; 0x24
 8009830:	e7d7      	b.n	80097e2 <_dtoa_r+0x2c2>
 8009832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009834:	9301      	str	r3, [sp, #4]
 8009836:	9304      	str	r3, [sp, #16]
 8009838:	e7ba      	b.n	80097b0 <_dtoa_r+0x290>
 800983a:	3101      	adds	r1, #1
 800983c:	0052      	lsls	r2, r2, #1
 800983e:	e7ba      	b.n	80097b6 <_dtoa_r+0x296>
 8009840:	69e3      	ldr	r3, [r4, #28]
 8009842:	9a00      	ldr	r2, [sp, #0]
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	9b04      	ldr	r3, [sp, #16]
 8009848:	2b0e      	cmp	r3, #14
 800984a:	f200 80a8 	bhi.w	800999e <_dtoa_r+0x47e>
 800984e:	2d00      	cmp	r5, #0
 8009850:	f000 80a5 	beq.w	800999e <_dtoa_r+0x47e>
 8009854:	f1bb 0f00 	cmp.w	fp, #0
 8009858:	dd38      	ble.n	80098cc <_dtoa_r+0x3ac>
 800985a:	4bc0      	ldr	r3, [pc, #768]	; (8009b5c <_dtoa_r+0x63c>)
 800985c:	f00b 020f 	and.w	r2, fp, #15
 8009860:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009864:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009868:	e9d3 6700 	ldrd	r6, r7, [r3]
 800986c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009870:	d019      	beq.n	80098a6 <_dtoa_r+0x386>
 8009872:	4bbb      	ldr	r3, [pc, #748]	; (8009b60 <_dtoa_r+0x640>)
 8009874:	ec51 0b18 	vmov	r0, r1, d8
 8009878:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800987c:	f7f6 ffe6 	bl	800084c <__aeabi_ddiv>
 8009880:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009884:	f008 080f 	and.w	r8, r8, #15
 8009888:	2503      	movs	r5, #3
 800988a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009b60 <_dtoa_r+0x640>
 800988e:	f1b8 0f00 	cmp.w	r8, #0
 8009892:	d10a      	bne.n	80098aa <_dtoa_r+0x38a>
 8009894:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009898:	4632      	mov	r2, r6
 800989a:	463b      	mov	r3, r7
 800989c:	f7f6 ffd6 	bl	800084c <__aeabi_ddiv>
 80098a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098a4:	e02b      	b.n	80098fe <_dtoa_r+0x3de>
 80098a6:	2502      	movs	r5, #2
 80098a8:	e7ef      	b.n	800988a <_dtoa_r+0x36a>
 80098aa:	f018 0f01 	tst.w	r8, #1
 80098ae:	d008      	beq.n	80098c2 <_dtoa_r+0x3a2>
 80098b0:	4630      	mov	r0, r6
 80098b2:	4639      	mov	r1, r7
 80098b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80098b8:	f7f6 fe9e 	bl	80005f8 <__aeabi_dmul>
 80098bc:	3501      	adds	r5, #1
 80098be:	4606      	mov	r6, r0
 80098c0:	460f      	mov	r7, r1
 80098c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80098c6:	f109 0908 	add.w	r9, r9, #8
 80098ca:	e7e0      	b.n	800988e <_dtoa_r+0x36e>
 80098cc:	f000 809f 	beq.w	8009a0e <_dtoa_r+0x4ee>
 80098d0:	f1cb 0600 	rsb	r6, fp, #0
 80098d4:	4ba1      	ldr	r3, [pc, #644]	; (8009b5c <_dtoa_r+0x63c>)
 80098d6:	4fa2      	ldr	r7, [pc, #648]	; (8009b60 <_dtoa_r+0x640>)
 80098d8:	f006 020f 	and.w	r2, r6, #15
 80098dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e4:	ec51 0b18 	vmov	r0, r1, d8
 80098e8:	f7f6 fe86 	bl	80005f8 <__aeabi_dmul>
 80098ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098f0:	1136      	asrs	r6, r6, #4
 80098f2:	2300      	movs	r3, #0
 80098f4:	2502      	movs	r5, #2
 80098f6:	2e00      	cmp	r6, #0
 80098f8:	d17e      	bne.n	80099f8 <_dtoa_r+0x4d8>
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1d0      	bne.n	80098a0 <_dtoa_r+0x380>
 80098fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009900:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009904:	2b00      	cmp	r3, #0
 8009906:	f000 8084 	beq.w	8009a12 <_dtoa_r+0x4f2>
 800990a:	4b96      	ldr	r3, [pc, #600]	; (8009b64 <_dtoa_r+0x644>)
 800990c:	2200      	movs	r2, #0
 800990e:	4640      	mov	r0, r8
 8009910:	4649      	mov	r1, r9
 8009912:	f7f7 f8e3 	bl	8000adc <__aeabi_dcmplt>
 8009916:	2800      	cmp	r0, #0
 8009918:	d07b      	beq.n	8009a12 <_dtoa_r+0x4f2>
 800991a:	9b04      	ldr	r3, [sp, #16]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d078      	beq.n	8009a12 <_dtoa_r+0x4f2>
 8009920:	9b01      	ldr	r3, [sp, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	dd39      	ble.n	800999a <_dtoa_r+0x47a>
 8009926:	4b90      	ldr	r3, [pc, #576]	; (8009b68 <_dtoa_r+0x648>)
 8009928:	2200      	movs	r2, #0
 800992a:	4640      	mov	r0, r8
 800992c:	4649      	mov	r1, r9
 800992e:	f7f6 fe63 	bl	80005f8 <__aeabi_dmul>
 8009932:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009936:	9e01      	ldr	r6, [sp, #4]
 8009938:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800993c:	3501      	adds	r5, #1
 800993e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009942:	4628      	mov	r0, r5
 8009944:	f7f6 fdee 	bl	8000524 <__aeabi_i2d>
 8009948:	4642      	mov	r2, r8
 800994a:	464b      	mov	r3, r9
 800994c:	f7f6 fe54 	bl	80005f8 <__aeabi_dmul>
 8009950:	4b86      	ldr	r3, [pc, #536]	; (8009b6c <_dtoa_r+0x64c>)
 8009952:	2200      	movs	r2, #0
 8009954:	f7f6 fc9a 	bl	800028c <__adddf3>
 8009958:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800995c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009960:	9303      	str	r3, [sp, #12]
 8009962:	2e00      	cmp	r6, #0
 8009964:	d158      	bne.n	8009a18 <_dtoa_r+0x4f8>
 8009966:	4b82      	ldr	r3, [pc, #520]	; (8009b70 <_dtoa_r+0x650>)
 8009968:	2200      	movs	r2, #0
 800996a:	4640      	mov	r0, r8
 800996c:	4649      	mov	r1, r9
 800996e:	f7f6 fc8b 	bl	8000288 <__aeabi_dsub>
 8009972:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009976:	4680      	mov	r8, r0
 8009978:	4689      	mov	r9, r1
 800997a:	f7f7 f8cd 	bl	8000b18 <__aeabi_dcmpgt>
 800997e:	2800      	cmp	r0, #0
 8009980:	f040 8296 	bne.w	8009eb0 <_dtoa_r+0x990>
 8009984:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009988:	4640      	mov	r0, r8
 800998a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800998e:	4649      	mov	r1, r9
 8009990:	f7f7 f8a4 	bl	8000adc <__aeabi_dcmplt>
 8009994:	2800      	cmp	r0, #0
 8009996:	f040 8289 	bne.w	8009eac <_dtoa_r+0x98c>
 800999a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800999e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f2c0 814e 	blt.w	8009c42 <_dtoa_r+0x722>
 80099a6:	f1bb 0f0e 	cmp.w	fp, #14
 80099aa:	f300 814a 	bgt.w	8009c42 <_dtoa_r+0x722>
 80099ae:	4b6b      	ldr	r3, [pc, #428]	; (8009b5c <_dtoa_r+0x63c>)
 80099b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f280 80dc 	bge.w	8009b78 <_dtoa_r+0x658>
 80099c0:	9b04      	ldr	r3, [sp, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f300 80d8 	bgt.w	8009b78 <_dtoa_r+0x658>
 80099c8:	f040 826f 	bne.w	8009eaa <_dtoa_r+0x98a>
 80099cc:	4b68      	ldr	r3, [pc, #416]	; (8009b70 <_dtoa_r+0x650>)
 80099ce:	2200      	movs	r2, #0
 80099d0:	4640      	mov	r0, r8
 80099d2:	4649      	mov	r1, r9
 80099d4:	f7f6 fe10 	bl	80005f8 <__aeabi_dmul>
 80099d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099dc:	f7f7 f892 	bl	8000b04 <__aeabi_dcmpge>
 80099e0:	9e04      	ldr	r6, [sp, #16]
 80099e2:	4637      	mov	r7, r6
 80099e4:	2800      	cmp	r0, #0
 80099e6:	f040 8245 	bne.w	8009e74 <_dtoa_r+0x954>
 80099ea:	9d00      	ldr	r5, [sp, #0]
 80099ec:	2331      	movs	r3, #49	; 0x31
 80099ee:	f805 3b01 	strb.w	r3, [r5], #1
 80099f2:	f10b 0b01 	add.w	fp, fp, #1
 80099f6:	e241      	b.n	8009e7c <_dtoa_r+0x95c>
 80099f8:	07f2      	lsls	r2, r6, #31
 80099fa:	d505      	bpl.n	8009a08 <_dtoa_r+0x4e8>
 80099fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a00:	f7f6 fdfa 	bl	80005f8 <__aeabi_dmul>
 8009a04:	3501      	adds	r5, #1
 8009a06:	2301      	movs	r3, #1
 8009a08:	1076      	asrs	r6, r6, #1
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	e773      	b.n	80098f6 <_dtoa_r+0x3d6>
 8009a0e:	2502      	movs	r5, #2
 8009a10:	e775      	b.n	80098fe <_dtoa_r+0x3de>
 8009a12:	9e04      	ldr	r6, [sp, #16]
 8009a14:	465f      	mov	r7, fp
 8009a16:	e792      	b.n	800993e <_dtoa_r+0x41e>
 8009a18:	9900      	ldr	r1, [sp, #0]
 8009a1a:	4b50      	ldr	r3, [pc, #320]	; (8009b5c <_dtoa_r+0x63c>)
 8009a1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a20:	4431      	add	r1, r6
 8009a22:	9102      	str	r1, [sp, #8]
 8009a24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a26:	eeb0 9a47 	vmov.f32	s18, s14
 8009a2a:	eef0 9a67 	vmov.f32	s19, s15
 8009a2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009a32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a36:	2900      	cmp	r1, #0
 8009a38:	d044      	beq.n	8009ac4 <_dtoa_r+0x5a4>
 8009a3a:	494e      	ldr	r1, [pc, #312]	; (8009b74 <_dtoa_r+0x654>)
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	f7f6 ff05 	bl	800084c <__aeabi_ddiv>
 8009a42:	ec53 2b19 	vmov	r2, r3, d9
 8009a46:	f7f6 fc1f 	bl	8000288 <__aeabi_dsub>
 8009a4a:	9d00      	ldr	r5, [sp, #0]
 8009a4c:	ec41 0b19 	vmov	d9, r0, r1
 8009a50:	4649      	mov	r1, r9
 8009a52:	4640      	mov	r0, r8
 8009a54:	f7f7 f880 	bl	8000b58 <__aeabi_d2iz>
 8009a58:	4606      	mov	r6, r0
 8009a5a:	f7f6 fd63 	bl	8000524 <__aeabi_i2d>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	4640      	mov	r0, r8
 8009a64:	4649      	mov	r1, r9
 8009a66:	f7f6 fc0f 	bl	8000288 <__aeabi_dsub>
 8009a6a:	3630      	adds	r6, #48	; 0x30
 8009a6c:	f805 6b01 	strb.w	r6, [r5], #1
 8009a70:	ec53 2b19 	vmov	r2, r3, d9
 8009a74:	4680      	mov	r8, r0
 8009a76:	4689      	mov	r9, r1
 8009a78:	f7f7 f830 	bl	8000adc <__aeabi_dcmplt>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d164      	bne.n	8009b4a <_dtoa_r+0x62a>
 8009a80:	4642      	mov	r2, r8
 8009a82:	464b      	mov	r3, r9
 8009a84:	4937      	ldr	r1, [pc, #220]	; (8009b64 <_dtoa_r+0x644>)
 8009a86:	2000      	movs	r0, #0
 8009a88:	f7f6 fbfe 	bl	8000288 <__aeabi_dsub>
 8009a8c:	ec53 2b19 	vmov	r2, r3, d9
 8009a90:	f7f7 f824 	bl	8000adc <__aeabi_dcmplt>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	f040 80b6 	bne.w	8009c06 <_dtoa_r+0x6e6>
 8009a9a:	9b02      	ldr	r3, [sp, #8]
 8009a9c:	429d      	cmp	r5, r3
 8009a9e:	f43f af7c 	beq.w	800999a <_dtoa_r+0x47a>
 8009aa2:	4b31      	ldr	r3, [pc, #196]	; (8009b68 <_dtoa_r+0x648>)
 8009aa4:	ec51 0b19 	vmov	r0, r1, d9
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f7f6 fda5 	bl	80005f8 <__aeabi_dmul>
 8009aae:	4b2e      	ldr	r3, [pc, #184]	; (8009b68 <_dtoa_r+0x648>)
 8009ab0:	ec41 0b19 	vmov	d9, r0, r1
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	4649      	mov	r1, r9
 8009aba:	f7f6 fd9d 	bl	80005f8 <__aeabi_dmul>
 8009abe:	4680      	mov	r8, r0
 8009ac0:	4689      	mov	r9, r1
 8009ac2:	e7c5      	b.n	8009a50 <_dtoa_r+0x530>
 8009ac4:	ec51 0b17 	vmov	r0, r1, d7
 8009ac8:	f7f6 fd96 	bl	80005f8 <__aeabi_dmul>
 8009acc:	9b02      	ldr	r3, [sp, #8]
 8009ace:	9d00      	ldr	r5, [sp, #0]
 8009ad0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ad2:	ec41 0b19 	vmov	d9, r0, r1
 8009ad6:	4649      	mov	r1, r9
 8009ad8:	4640      	mov	r0, r8
 8009ada:	f7f7 f83d 	bl	8000b58 <__aeabi_d2iz>
 8009ade:	4606      	mov	r6, r0
 8009ae0:	f7f6 fd20 	bl	8000524 <__aeabi_i2d>
 8009ae4:	3630      	adds	r6, #48	; 0x30
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4640      	mov	r0, r8
 8009aec:	4649      	mov	r1, r9
 8009aee:	f7f6 fbcb 	bl	8000288 <__aeabi_dsub>
 8009af2:	f805 6b01 	strb.w	r6, [r5], #1
 8009af6:	9b02      	ldr	r3, [sp, #8]
 8009af8:	429d      	cmp	r5, r3
 8009afa:	4680      	mov	r8, r0
 8009afc:	4689      	mov	r9, r1
 8009afe:	f04f 0200 	mov.w	r2, #0
 8009b02:	d124      	bne.n	8009b4e <_dtoa_r+0x62e>
 8009b04:	4b1b      	ldr	r3, [pc, #108]	; (8009b74 <_dtoa_r+0x654>)
 8009b06:	ec51 0b19 	vmov	r0, r1, d9
 8009b0a:	f7f6 fbbf 	bl	800028c <__adddf3>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	4640      	mov	r0, r8
 8009b14:	4649      	mov	r1, r9
 8009b16:	f7f6 ffff 	bl	8000b18 <__aeabi_dcmpgt>
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	d173      	bne.n	8009c06 <_dtoa_r+0x6e6>
 8009b1e:	ec53 2b19 	vmov	r2, r3, d9
 8009b22:	4914      	ldr	r1, [pc, #80]	; (8009b74 <_dtoa_r+0x654>)
 8009b24:	2000      	movs	r0, #0
 8009b26:	f7f6 fbaf 	bl	8000288 <__aeabi_dsub>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	4640      	mov	r0, r8
 8009b30:	4649      	mov	r1, r9
 8009b32:	f7f6 ffd3 	bl	8000adc <__aeabi_dcmplt>
 8009b36:	2800      	cmp	r0, #0
 8009b38:	f43f af2f 	beq.w	800999a <_dtoa_r+0x47a>
 8009b3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009b3e:	1e6b      	subs	r3, r5, #1
 8009b40:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b46:	2b30      	cmp	r3, #48	; 0x30
 8009b48:	d0f8      	beq.n	8009b3c <_dtoa_r+0x61c>
 8009b4a:	46bb      	mov	fp, r7
 8009b4c:	e04a      	b.n	8009be4 <_dtoa_r+0x6c4>
 8009b4e:	4b06      	ldr	r3, [pc, #24]	; (8009b68 <_dtoa_r+0x648>)
 8009b50:	f7f6 fd52 	bl	80005f8 <__aeabi_dmul>
 8009b54:	4680      	mov	r8, r0
 8009b56:	4689      	mov	r9, r1
 8009b58:	e7bd      	b.n	8009ad6 <_dtoa_r+0x5b6>
 8009b5a:	bf00      	nop
 8009b5c:	0800b9e0 	.word	0x0800b9e0
 8009b60:	0800b9b8 	.word	0x0800b9b8
 8009b64:	3ff00000 	.word	0x3ff00000
 8009b68:	40240000 	.word	0x40240000
 8009b6c:	401c0000 	.word	0x401c0000
 8009b70:	40140000 	.word	0x40140000
 8009b74:	3fe00000 	.word	0x3fe00000
 8009b78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b7c:	9d00      	ldr	r5, [sp, #0]
 8009b7e:	4642      	mov	r2, r8
 8009b80:	464b      	mov	r3, r9
 8009b82:	4630      	mov	r0, r6
 8009b84:	4639      	mov	r1, r7
 8009b86:	f7f6 fe61 	bl	800084c <__aeabi_ddiv>
 8009b8a:	f7f6 ffe5 	bl	8000b58 <__aeabi_d2iz>
 8009b8e:	9001      	str	r0, [sp, #4]
 8009b90:	f7f6 fcc8 	bl	8000524 <__aeabi_i2d>
 8009b94:	4642      	mov	r2, r8
 8009b96:	464b      	mov	r3, r9
 8009b98:	f7f6 fd2e 	bl	80005f8 <__aeabi_dmul>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	f7f6 fb70 	bl	8000288 <__aeabi_dsub>
 8009ba8:	9e01      	ldr	r6, [sp, #4]
 8009baa:	9f04      	ldr	r7, [sp, #16]
 8009bac:	3630      	adds	r6, #48	; 0x30
 8009bae:	f805 6b01 	strb.w	r6, [r5], #1
 8009bb2:	9e00      	ldr	r6, [sp, #0]
 8009bb4:	1bae      	subs	r6, r5, r6
 8009bb6:	42b7      	cmp	r7, r6
 8009bb8:	4602      	mov	r2, r0
 8009bba:	460b      	mov	r3, r1
 8009bbc:	d134      	bne.n	8009c28 <_dtoa_r+0x708>
 8009bbe:	f7f6 fb65 	bl	800028c <__adddf3>
 8009bc2:	4642      	mov	r2, r8
 8009bc4:	464b      	mov	r3, r9
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	460f      	mov	r7, r1
 8009bca:	f7f6 ffa5 	bl	8000b18 <__aeabi_dcmpgt>
 8009bce:	b9c8      	cbnz	r0, 8009c04 <_dtoa_r+0x6e4>
 8009bd0:	4642      	mov	r2, r8
 8009bd2:	464b      	mov	r3, r9
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	4639      	mov	r1, r7
 8009bd8:	f7f6 ff76 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bdc:	b110      	cbz	r0, 8009be4 <_dtoa_r+0x6c4>
 8009bde:	9b01      	ldr	r3, [sp, #4]
 8009be0:	07db      	lsls	r3, r3, #31
 8009be2:	d40f      	bmi.n	8009c04 <_dtoa_r+0x6e4>
 8009be4:	4651      	mov	r1, sl
 8009be6:	4620      	mov	r0, r4
 8009be8:	f000 fe62 	bl	800a8b0 <_Bfree>
 8009bec:	2300      	movs	r3, #0
 8009bee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bf0:	702b      	strb	r3, [r5, #0]
 8009bf2:	f10b 0301 	add.w	r3, fp, #1
 8009bf6:	6013      	str	r3, [r2, #0]
 8009bf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f43f ace2 	beq.w	80095c4 <_dtoa_r+0xa4>
 8009c00:	601d      	str	r5, [r3, #0]
 8009c02:	e4df      	b.n	80095c4 <_dtoa_r+0xa4>
 8009c04:	465f      	mov	r7, fp
 8009c06:	462b      	mov	r3, r5
 8009c08:	461d      	mov	r5, r3
 8009c0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c0e:	2a39      	cmp	r2, #57	; 0x39
 8009c10:	d106      	bne.n	8009c20 <_dtoa_r+0x700>
 8009c12:	9a00      	ldr	r2, [sp, #0]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d1f7      	bne.n	8009c08 <_dtoa_r+0x6e8>
 8009c18:	9900      	ldr	r1, [sp, #0]
 8009c1a:	2230      	movs	r2, #48	; 0x30
 8009c1c:	3701      	adds	r7, #1
 8009c1e:	700a      	strb	r2, [r1, #0]
 8009c20:	781a      	ldrb	r2, [r3, #0]
 8009c22:	3201      	adds	r2, #1
 8009c24:	701a      	strb	r2, [r3, #0]
 8009c26:	e790      	b.n	8009b4a <_dtoa_r+0x62a>
 8009c28:	4ba3      	ldr	r3, [pc, #652]	; (8009eb8 <_dtoa_r+0x998>)
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f7f6 fce4 	bl	80005f8 <__aeabi_dmul>
 8009c30:	2200      	movs	r2, #0
 8009c32:	2300      	movs	r3, #0
 8009c34:	4606      	mov	r6, r0
 8009c36:	460f      	mov	r7, r1
 8009c38:	f7f6 ff46 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d09e      	beq.n	8009b7e <_dtoa_r+0x65e>
 8009c40:	e7d0      	b.n	8009be4 <_dtoa_r+0x6c4>
 8009c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c44:	2a00      	cmp	r2, #0
 8009c46:	f000 80ca 	beq.w	8009dde <_dtoa_r+0x8be>
 8009c4a:	9a07      	ldr	r2, [sp, #28]
 8009c4c:	2a01      	cmp	r2, #1
 8009c4e:	f300 80ad 	bgt.w	8009dac <_dtoa_r+0x88c>
 8009c52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c54:	2a00      	cmp	r2, #0
 8009c56:	f000 80a5 	beq.w	8009da4 <_dtoa_r+0x884>
 8009c5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c5e:	9e08      	ldr	r6, [sp, #32]
 8009c60:	9d05      	ldr	r5, [sp, #20]
 8009c62:	9a05      	ldr	r2, [sp, #20]
 8009c64:	441a      	add	r2, r3
 8009c66:	9205      	str	r2, [sp, #20]
 8009c68:	9a06      	ldr	r2, [sp, #24]
 8009c6a:	2101      	movs	r1, #1
 8009c6c:	441a      	add	r2, r3
 8009c6e:	4620      	mov	r0, r4
 8009c70:	9206      	str	r2, [sp, #24]
 8009c72:	f000 fed3 	bl	800aa1c <__i2b>
 8009c76:	4607      	mov	r7, r0
 8009c78:	b165      	cbz	r5, 8009c94 <_dtoa_r+0x774>
 8009c7a:	9b06      	ldr	r3, [sp, #24]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	dd09      	ble.n	8009c94 <_dtoa_r+0x774>
 8009c80:	42ab      	cmp	r3, r5
 8009c82:	9a05      	ldr	r2, [sp, #20]
 8009c84:	bfa8      	it	ge
 8009c86:	462b      	movge	r3, r5
 8009c88:	1ad2      	subs	r2, r2, r3
 8009c8a:	9205      	str	r2, [sp, #20]
 8009c8c:	9a06      	ldr	r2, [sp, #24]
 8009c8e:	1aed      	subs	r5, r5, r3
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	9306      	str	r3, [sp, #24]
 8009c94:	9b08      	ldr	r3, [sp, #32]
 8009c96:	b1f3      	cbz	r3, 8009cd6 <_dtoa_r+0x7b6>
 8009c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f000 80a3 	beq.w	8009de6 <_dtoa_r+0x8c6>
 8009ca0:	2e00      	cmp	r6, #0
 8009ca2:	dd10      	ble.n	8009cc6 <_dtoa_r+0x7a6>
 8009ca4:	4639      	mov	r1, r7
 8009ca6:	4632      	mov	r2, r6
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f000 ff77 	bl	800ab9c <__pow5mult>
 8009cae:	4652      	mov	r2, sl
 8009cb0:	4601      	mov	r1, r0
 8009cb2:	4607      	mov	r7, r0
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f000 fec7 	bl	800aa48 <__multiply>
 8009cba:	4651      	mov	r1, sl
 8009cbc:	4680      	mov	r8, r0
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f000 fdf6 	bl	800a8b0 <_Bfree>
 8009cc4:	46c2      	mov	sl, r8
 8009cc6:	9b08      	ldr	r3, [sp, #32]
 8009cc8:	1b9a      	subs	r2, r3, r6
 8009cca:	d004      	beq.n	8009cd6 <_dtoa_r+0x7b6>
 8009ccc:	4651      	mov	r1, sl
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f000 ff64 	bl	800ab9c <__pow5mult>
 8009cd4:	4682      	mov	sl, r0
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f000 fe9f 	bl	800aa1c <__i2b>
 8009cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	f340 8081 	ble.w	8009dea <_dtoa_r+0x8ca>
 8009ce8:	461a      	mov	r2, r3
 8009cea:	4601      	mov	r1, r0
 8009cec:	4620      	mov	r0, r4
 8009cee:	f000 ff55 	bl	800ab9c <__pow5mult>
 8009cf2:	9b07      	ldr	r3, [sp, #28]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	4606      	mov	r6, r0
 8009cf8:	dd7a      	ble.n	8009df0 <_dtoa_r+0x8d0>
 8009cfa:	f04f 0800 	mov.w	r8, #0
 8009cfe:	6933      	ldr	r3, [r6, #16]
 8009d00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d04:	6918      	ldr	r0, [r3, #16]
 8009d06:	f000 fe3b 	bl	800a980 <__hi0bits>
 8009d0a:	f1c0 0020 	rsb	r0, r0, #32
 8009d0e:	9b06      	ldr	r3, [sp, #24]
 8009d10:	4418      	add	r0, r3
 8009d12:	f010 001f 	ands.w	r0, r0, #31
 8009d16:	f000 8094 	beq.w	8009e42 <_dtoa_r+0x922>
 8009d1a:	f1c0 0320 	rsb	r3, r0, #32
 8009d1e:	2b04      	cmp	r3, #4
 8009d20:	f340 8085 	ble.w	8009e2e <_dtoa_r+0x90e>
 8009d24:	9b05      	ldr	r3, [sp, #20]
 8009d26:	f1c0 001c 	rsb	r0, r0, #28
 8009d2a:	4403      	add	r3, r0
 8009d2c:	9305      	str	r3, [sp, #20]
 8009d2e:	9b06      	ldr	r3, [sp, #24]
 8009d30:	4403      	add	r3, r0
 8009d32:	4405      	add	r5, r0
 8009d34:	9306      	str	r3, [sp, #24]
 8009d36:	9b05      	ldr	r3, [sp, #20]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	dd05      	ble.n	8009d48 <_dtoa_r+0x828>
 8009d3c:	4651      	mov	r1, sl
 8009d3e:	461a      	mov	r2, r3
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 ff85 	bl	800ac50 <__lshift>
 8009d46:	4682      	mov	sl, r0
 8009d48:	9b06      	ldr	r3, [sp, #24]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	dd05      	ble.n	8009d5a <_dtoa_r+0x83a>
 8009d4e:	4631      	mov	r1, r6
 8009d50:	461a      	mov	r2, r3
 8009d52:	4620      	mov	r0, r4
 8009d54:	f000 ff7c 	bl	800ac50 <__lshift>
 8009d58:	4606      	mov	r6, r0
 8009d5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d072      	beq.n	8009e46 <_dtoa_r+0x926>
 8009d60:	4631      	mov	r1, r6
 8009d62:	4650      	mov	r0, sl
 8009d64:	f000 ffe0 	bl	800ad28 <__mcmp>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	da6c      	bge.n	8009e46 <_dtoa_r+0x926>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	4651      	mov	r1, sl
 8009d70:	220a      	movs	r2, #10
 8009d72:	4620      	mov	r0, r4
 8009d74:	f000 fdbe 	bl	800a8f4 <__multadd>
 8009d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d7a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009d7e:	4682      	mov	sl, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 81b0 	beq.w	800a0e6 <_dtoa_r+0xbc6>
 8009d86:	2300      	movs	r3, #0
 8009d88:	4639      	mov	r1, r7
 8009d8a:	220a      	movs	r2, #10
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f000 fdb1 	bl	800a8f4 <__multadd>
 8009d92:	9b01      	ldr	r3, [sp, #4]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	4607      	mov	r7, r0
 8009d98:	f300 8096 	bgt.w	8009ec8 <_dtoa_r+0x9a8>
 8009d9c:	9b07      	ldr	r3, [sp, #28]
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	dc59      	bgt.n	8009e56 <_dtoa_r+0x936>
 8009da2:	e091      	b.n	8009ec8 <_dtoa_r+0x9a8>
 8009da4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009da6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009daa:	e758      	b.n	8009c5e <_dtoa_r+0x73e>
 8009dac:	9b04      	ldr	r3, [sp, #16]
 8009dae:	1e5e      	subs	r6, r3, #1
 8009db0:	9b08      	ldr	r3, [sp, #32]
 8009db2:	42b3      	cmp	r3, r6
 8009db4:	bfbf      	itttt	lt
 8009db6:	9b08      	ldrlt	r3, [sp, #32]
 8009db8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009dba:	9608      	strlt	r6, [sp, #32]
 8009dbc:	1af3      	sublt	r3, r6, r3
 8009dbe:	bfb4      	ite	lt
 8009dc0:	18d2      	addlt	r2, r2, r3
 8009dc2:	1b9e      	subge	r6, r3, r6
 8009dc4:	9b04      	ldr	r3, [sp, #16]
 8009dc6:	bfbc      	itt	lt
 8009dc8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009dca:	2600      	movlt	r6, #0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	bfb7      	itett	lt
 8009dd0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009dd4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009dd8:	1a9d      	sublt	r5, r3, r2
 8009dda:	2300      	movlt	r3, #0
 8009ddc:	e741      	b.n	8009c62 <_dtoa_r+0x742>
 8009dde:	9e08      	ldr	r6, [sp, #32]
 8009de0:	9d05      	ldr	r5, [sp, #20]
 8009de2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009de4:	e748      	b.n	8009c78 <_dtoa_r+0x758>
 8009de6:	9a08      	ldr	r2, [sp, #32]
 8009de8:	e770      	b.n	8009ccc <_dtoa_r+0x7ac>
 8009dea:	9b07      	ldr	r3, [sp, #28]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	dc19      	bgt.n	8009e24 <_dtoa_r+0x904>
 8009df0:	9b02      	ldr	r3, [sp, #8]
 8009df2:	b9bb      	cbnz	r3, 8009e24 <_dtoa_r+0x904>
 8009df4:	9b03      	ldr	r3, [sp, #12]
 8009df6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dfa:	b99b      	cbnz	r3, 8009e24 <_dtoa_r+0x904>
 8009dfc:	9b03      	ldr	r3, [sp, #12]
 8009dfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e02:	0d1b      	lsrs	r3, r3, #20
 8009e04:	051b      	lsls	r3, r3, #20
 8009e06:	b183      	cbz	r3, 8009e2a <_dtoa_r+0x90a>
 8009e08:	9b05      	ldr	r3, [sp, #20]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	9305      	str	r3, [sp, #20]
 8009e0e:	9b06      	ldr	r3, [sp, #24]
 8009e10:	3301      	adds	r3, #1
 8009e12:	9306      	str	r3, [sp, #24]
 8009e14:	f04f 0801 	mov.w	r8, #1
 8009e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f47f af6f 	bne.w	8009cfe <_dtoa_r+0x7de>
 8009e20:	2001      	movs	r0, #1
 8009e22:	e774      	b.n	8009d0e <_dtoa_r+0x7ee>
 8009e24:	f04f 0800 	mov.w	r8, #0
 8009e28:	e7f6      	b.n	8009e18 <_dtoa_r+0x8f8>
 8009e2a:	4698      	mov	r8, r3
 8009e2c:	e7f4      	b.n	8009e18 <_dtoa_r+0x8f8>
 8009e2e:	d082      	beq.n	8009d36 <_dtoa_r+0x816>
 8009e30:	9a05      	ldr	r2, [sp, #20]
 8009e32:	331c      	adds	r3, #28
 8009e34:	441a      	add	r2, r3
 8009e36:	9205      	str	r2, [sp, #20]
 8009e38:	9a06      	ldr	r2, [sp, #24]
 8009e3a:	441a      	add	r2, r3
 8009e3c:	441d      	add	r5, r3
 8009e3e:	9206      	str	r2, [sp, #24]
 8009e40:	e779      	b.n	8009d36 <_dtoa_r+0x816>
 8009e42:	4603      	mov	r3, r0
 8009e44:	e7f4      	b.n	8009e30 <_dtoa_r+0x910>
 8009e46:	9b04      	ldr	r3, [sp, #16]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	dc37      	bgt.n	8009ebc <_dtoa_r+0x99c>
 8009e4c:	9b07      	ldr	r3, [sp, #28]
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	dd34      	ble.n	8009ebc <_dtoa_r+0x99c>
 8009e52:	9b04      	ldr	r3, [sp, #16]
 8009e54:	9301      	str	r3, [sp, #4]
 8009e56:	9b01      	ldr	r3, [sp, #4]
 8009e58:	b963      	cbnz	r3, 8009e74 <_dtoa_r+0x954>
 8009e5a:	4631      	mov	r1, r6
 8009e5c:	2205      	movs	r2, #5
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f000 fd48 	bl	800a8f4 <__multadd>
 8009e64:	4601      	mov	r1, r0
 8009e66:	4606      	mov	r6, r0
 8009e68:	4650      	mov	r0, sl
 8009e6a:	f000 ff5d 	bl	800ad28 <__mcmp>
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	f73f adbb 	bgt.w	80099ea <_dtoa_r+0x4ca>
 8009e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e76:	9d00      	ldr	r5, [sp, #0]
 8009e78:	ea6f 0b03 	mvn.w	fp, r3
 8009e7c:	f04f 0800 	mov.w	r8, #0
 8009e80:	4631      	mov	r1, r6
 8009e82:	4620      	mov	r0, r4
 8009e84:	f000 fd14 	bl	800a8b0 <_Bfree>
 8009e88:	2f00      	cmp	r7, #0
 8009e8a:	f43f aeab 	beq.w	8009be4 <_dtoa_r+0x6c4>
 8009e8e:	f1b8 0f00 	cmp.w	r8, #0
 8009e92:	d005      	beq.n	8009ea0 <_dtoa_r+0x980>
 8009e94:	45b8      	cmp	r8, r7
 8009e96:	d003      	beq.n	8009ea0 <_dtoa_r+0x980>
 8009e98:	4641      	mov	r1, r8
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f000 fd08 	bl	800a8b0 <_Bfree>
 8009ea0:	4639      	mov	r1, r7
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f000 fd04 	bl	800a8b0 <_Bfree>
 8009ea8:	e69c      	b.n	8009be4 <_dtoa_r+0x6c4>
 8009eaa:	2600      	movs	r6, #0
 8009eac:	4637      	mov	r7, r6
 8009eae:	e7e1      	b.n	8009e74 <_dtoa_r+0x954>
 8009eb0:	46bb      	mov	fp, r7
 8009eb2:	4637      	mov	r7, r6
 8009eb4:	e599      	b.n	80099ea <_dtoa_r+0x4ca>
 8009eb6:	bf00      	nop
 8009eb8:	40240000 	.word	0x40240000
 8009ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 80c8 	beq.w	800a054 <_dtoa_r+0xb34>
 8009ec4:	9b04      	ldr	r3, [sp, #16]
 8009ec6:	9301      	str	r3, [sp, #4]
 8009ec8:	2d00      	cmp	r5, #0
 8009eca:	dd05      	ble.n	8009ed8 <_dtoa_r+0x9b8>
 8009ecc:	4639      	mov	r1, r7
 8009ece:	462a      	mov	r2, r5
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f000 febd 	bl	800ac50 <__lshift>
 8009ed6:	4607      	mov	r7, r0
 8009ed8:	f1b8 0f00 	cmp.w	r8, #0
 8009edc:	d05b      	beq.n	8009f96 <_dtoa_r+0xa76>
 8009ede:	6879      	ldr	r1, [r7, #4]
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f000 fca5 	bl	800a830 <_Balloc>
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	b928      	cbnz	r0, 8009ef6 <_dtoa_r+0x9d6>
 8009eea:	4b83      	ldr	r3, [pc, #524]	; (800a0f8 <_dtoa_r+0xbd8>)
 8009eec:	4602      	mov	r2, r0
 8009eee:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009ef2:	f7ff bb2e 	b.w	8009552 <_dtoa_r+0x32>
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	3202      	adds	r2, #2
 8009efa:	0092      	lsls	r2, r2, #2
 8009efc:	f107 010c 	add.w	r1, r7, #12
 8009f00:	300c      	adds	r0, #12
 8009f02:	f7ff fa76 	bl	80093f2 <memcpy>
 8009f06:	2201      	movs	r2, #1
 8009f08:	4629      	mov	r1, r5
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f000 fea0 	bl	800ac50 <__lshift>
 8009f10:	9b00      	ldr	r3, [sp, #0]
 8009f12:	3301      	adds	r3, #1
 8009f14:	9304      	str	r3, [sp, #16]
 8009f16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	9308      	str	r3, [sp, #32]
 8009f1e:	9b02      	ldr	r3, [sp, #8]
 8009f20:	f003 0301 	and.w	r3, r3, #1
 8009f24:	46b8      	mov	r8, r7
 8009f26:	9306      	str	r3, [sp, #24]
 8009f28:	4607      	mov	r7, r0
 8009f2a:	9b04      	ldr	r3, [sp, #16]
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	4650      	mov	r0, sl
 8009f32:	9301      	str	r3, [sp, #4]
 8009f34:	f7ff fa6b 	bl	800940e <quorem>
 8009f38:	4641      	mov	r1, r8
 8009f3a:	9002      	str	r0, [sp, #8]
 8009f3c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009f40:	4650      	mov	r0, sl
 8009f42:	f000 fef1 	bl	800ad28 <__mcmp>
 8009f46:	463a      	mov	r2, r7
 8009f48:	9005      	str	r0, [sp, #20]
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f000 ff07 	bl	800ad60 <__mdiff>
 8009f52:	68c2      	ldr	r2, [r0, #12]
 8009f54:	4605      	mov	r5, r0
 8009f56:	bb02      	cbnz	r2, 8009f9a <_dtoa_r+0xa7a>
 8009f58:	4601      	mov	r1, r0
 8009f5a:	4650      	mov	r0, sl
 8009f5c:	f000 fee4 	bl	800ad28 <__mcmp>
 8009f60:	4602      	mov	r2, r0
 8009f62:	4629      	mov	r1, r5
 8009f64:	4620      	mov	r0, r4
 8009f66:	9209      	str	r2, [sp, #36]	; 0x24
 8009f68:	f000 fca2 	bl	800a8b0 <_Bfree>
 8009f6c:	9b07      	ldr	r3, [sp, #28]
 8009f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f70:	9d04      	ldr	r5, [sp, #16]
 8009f72:	ea43 0102 	orr.w	r1, r3, r2
 8009f76:	9b06      	ldr	r3, [sp, #24]
 8009f78:	4319      	orrs	r1, r3
 8009f7a:	d110      	bne.n	8009f9e <_dtoa_r+0xa7e>
 8009f7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f80:	d029      	beq.n	8009fd6 <_dtoa_r+0xab6>
 8009f82:	9b05      	ldr	r3, [sp, #20]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	dd02      	ble.n	8009f8e <_dtoa_r+0xa6e>
 8009f88:	9b02      	ldr	r3, [sp, #8]
 8009f8a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009f8e:	9b01      	ldr	r3, [sp, #4]
 8009f90:	f883 9000 	strb.w	r9, [r3]
 8009f94:	e774      	b.n	8009e80 <_dtoa_r+0x960>
 8009f96:	4638      	mov	r0, r7
 8009f98:	e7ba      	b.n	8009f10 <_dtoa_r+0x9f0>
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	e7e1      	b.n	8009f62 <_dtoa_r+0xa42>
 8009f9e:	9b05      	ldr	r3, [sp, #20]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	db04      	blt.n	8009fae <_dtoa_r+0xa8e>
 8009fa4:	9907      	ldr	r1, [sp, #28]
 8009fa6:	430b      	orrs	r3, r1
 8009fa8:	9906      	ldr	r1, [sp, #24]
 8009faa:	430b      	orrs	r3, r1
 8009fac:	d120      	bne.n	8009ff0 <_dtoa_r+0xad0>
 8009fae:	2a00      	cmp	r2, #0
 8009fb0:	dded      	ble.n	8009f8e <_dtoa_r+0xa6e>
 8009fb2:	4651      	mov	r1, sl
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f000 fe4a 	bl	800ac50 <__lshift>
 8009fbc:	4631      	mov	r1, r6
 8009fbe:	4682      	mov	sl, r0
 8009fc0:	f000 feb2 	bl	800ad28 <__mcmp>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	dc03      	bgt.n	8009fd0 <_dtoa_r+0xab0>
 8009fc8:	d1e1      	bne.n	8009f8e <_dtoa_r+0xa6e>
 8009fca:	f019 0f01 	tst.w	r9, #1
 8009fce:	d0de      	beq.n	8009f8e <_dtoa_r+0xa6e>
 8009fd0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009fd4:	d1d8      	bne.n	8009f88 <_dtoa_r+0xa68>
 8009fd6:	9a01      	ldr	r2, [sp, #4]
 8009fd8:	2339      	movs	r3, #57	; 0x39
 8009fda:	7013      	strb	r3, [r2, #0]
 8009fdc:	462b      	mov	r3, r5
 8009fde:	461d      	mov	r5, r3
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009fe6:	2a39      	cmp	r2, #57	; 0x39
 8009fe8:	d06c      	beq.n	800a0c4 <_dtoa_r+0xba4>
 8009fea:	3201      	adds	r2, #1
 8009fec:	701a      	strb	r2, [r3, #0]
 8009fee:	e747      	b.n	8009e80 <_dtoa_r+0x960>
 8009ff0:	2a00      	cmp	r2, #0
 8009ff2:	dd07      	ble.n	800a004 <_dtoa_r+0xae4>
 8009ff4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ff8:	d0ed      	beq.n	8009fd6 <_dtoa_r+0xab6>
 8009ffa:	9a01      	ldr	r2, [sp, #4]
 8009ffc:	f109 0301 	add.w	r3, r9, #1
 800a000:	7013      	strb	r3, [r2, #0]
 800a002:	e73d      	b.n	8009e80 <_dtoa_r+0x960>
 800a004:	9b04      	ldr	r3, [sp, #16]
 800a006:	9a08      	ldr	r2, [sp, #32]
 800a008:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d043      	beq.n	800a098 <_dtoa_r+0xb78>
 800a010:	4651      	mov	r1, sl
 800a012:	2300      	movs	r3, #0
 800a014:	220a      	movs	r2, #10
 800a016:	4620      	mov	r0, r4
 800a018:	f000 fc6c 	bl	800a8f4 <__multadd>
 800a01c:	45b8      	cmp	r8, r7
 800a01e:	4682      	mov	sl, r0
 800a020:	f04f 0300 	mov.w	r3, #0
 800a024:	f04f 020a 	mov.w	r2, #10
 800a028:	4641      	mov	r1, r8
 800a02a:	4620      	mov	r0, r4
 800a02c:	d107      	bne.n	800a03e <_dtoa_r+0xb1e>
 800a02e:	f000 fc61 	bl	800a8f4 <__multadd>
 800a032:	4680      	mov	r8, r0
 800a034:	4607      	mov	r7, r0
 800a036:	9b04      	ldr	r3, [sp, #16]
 800a038:	3301      	adds	r3, #1
 800a03a:	9304      	str	r3, [sp, #16]
 800a03c:	e775      	b.n	8009f2a <_dtoa_r+0xa0a>
 800a03e:	f000 fc59 	bl	800a8f4 <__multadd>
 800a042:	4639      	mov	r1, r7
 800a044:	4680      	mov	r8, r0
 800a046:	2300      	movs	r3, #0
 800a048:	220a      	movs	r2, #10
 800a04a:	4620      	mov	r0, r4
 800a04c:	f000 fc52 	bl	800a8f4 <__multadd>
 800a050:	4607      	mov	r7, r0
 800a052:	e7f0      	b.n	800a036 <_dtoa_r+0xb16>
 800a054:	9b04      	ldr	r3, [sp, #16]
 800a056:	9301      	str	r3, [sp, #4]
 800a058:	9d00      	ldr	r5, [sp, #0]
 800a05a:	4631      	mov	r1, r6
 800a05c:	4650      	mov	r0, sl
 800a05e:	f7ff f9d6 	bl	800940e <quorem>
 800a062:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a066:	9b00      	ldr	r3, [sp, #0]
 800a068:	f805 9b01 	strb.w	r9, [r5], #1
 800a06c:	1aea      	subs	r2, r5, r3
 800a06e:	9b01      	ldr	r3, [sp, #4]
 800a070:	4293      	cmp	r3, r2
 800a072:	dd07      	ble.n	800a084 <_dtoa_r+0xb64>
 800a074:	4651      	mov	r1, sl
 800a076:	2300      	movs	r3, #0
 800a078:	220a      	movs	r2, #10
 800a07a:	4620      	mov	r0, r4
 800a07c:	f000 fc3a 	bl	800a8f4 <__multadd>
 800a080:	4682      	mov	sl, r0
 800a082:	e7ea      	b.n	800a05a <_dtoa_r+0xb3a>
 800a084:	9b01      	ldr	r3, [sp, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	bfc8      	it	gt
 800a08a:	461d      	movgt	r5, r3
 800a08c:	9b00      	ldr	r3, [sp, #0]
 800a08e:	bfd8      	it	le
 800a090:	2501      	movle	r5, #1
 800a092:	441d      	add	r5, r3
 800a094:	f04f 0800 	mov.w	r8, #0
 800a098:	4651      	mov	r1, sl
 800a09a:	2201      	movs	r2, #1
 800a09c:	4620      	mov	r0, r4
 800a09e:	f000 fdd7 	bl	800ac50 <__lshift>
 800a0a2:	4631      	mov	r1, r6
 800a0a4:	4682      	mov	sl, r0
 800a0a6:	f000 fe3f 	bl	800ad28 <__mcmp>
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	dc96      	bgt.n	8009fdc <_dtoa_r+0xabc>
 800a0ae:	d102      	bne.n	800a0b6 <_dtoa_r+0xb96>
 800a0b0:	f019 0f01 	tst.w	r9, #1
 800a0b4:	d192      	bne.n	8009fdc <_dtoa_r+0xabc>
 800a0b6:	462b      	mov	r3, r5
 800a0b8:	461d      	mov	r5, r3
 800a0ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0be:	2a30      	cmp	r2, #48	; 0x30
 800a0c0:	d0fa      	beq.n	800a0b8 <_dtoa_r+0xb98>
 800a0c2:	e6dd      	b.n	8009e80 <_dtoa_r+0x960>
 800a0c4:	9a00      	ldr	r2, [sp, #0]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d189      	bne.n	8009fde <_dtoa_r+0xabe>
 800a0ca:	f10b 0b01 	add.w	fp, fp, #1
 800a0ce:	2331      	movs	r3, #49	; 0x31
 800a0d0:	e796      	b.n	800a000 <_dtoa_r+0xae0>
 800a0d2:	4b0a      	ldr	r3, [pc, #40]	; (800a0fc <_dtoa_r+0xbdc>)
 800a0d4:	f7ff ba99 	b.w	800960a <_dtoa_r+0xea>
 800a0d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f47f aa6d 	bne.w	80095ba <_dtoa_r+0x9a>
 800a0e0:	4b07      	ldr	r3, [pc, #28]	; (800a100 <_dtoa_r+0xbe0>)
 800a0e2:	f7ff ba92 	b.w	800960a <_dtoa_r+0xea>
 800a0e6:	9b01      	ldr	r3, [sp, #4]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	dcb5      	bgt.n	800a058 <_dtoa_r+0xb38>
 800a0ec:	9b07      	ldr	r3, [sp, #28]
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	f73f aeb1 	bgt.w	8009e56 <_dtoa_r+0x936>
 800a0f4:	e7b0      	b.n	800a058 <_dtoa_r+0xb38>
 800a0f6:	bf00      	nop
 800a0f8:	0800b93a 	.word	0x0800b93a
 800a0fc:	0800b89a 	.word	0x0800b89a
 800a100:	0800b8be 	.word	0x0800b8be

0800a104 <_free_r>:
 800a104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a106:	2900      	cmp	r1, #0
 800a108:	d044      	beq.n	800a194 <_free_r+0x90>
 800a10a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a10e:	9001      	str	r0, [sp, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	f1a1 0404 	sub.w	r4, r1, #4
 800a116:	bfb8      	it	lt
 800a118:	18e4      	addlt	r4, r4, r3
 800a11a:	f7fe ffdd 	bl	80090d8 <__malloc_lock>
 800a11e:	4a1e      	ldr	r2, [pc, #120]	; (800a198 <_free_r+0x94>)
 800a120:	9801      	ldr	r0, [sp, #4]
 800a122:	6813      	ldr	r3, [r2, #0]
 800a124:	b933      	cbnz	r3, 800a134 <_free_r+0x30>
 800a126:	6063      	str	r3, [r4, #4]
 800a128:	6014      	str	r4, [r2, #0]
 800a12a:	b003      	add	sp, #12
 800a12c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a130:	f7fe bfd8 	b.w	80090e4 <__malloc_unlock>
 800a134:	42a3      	cmp	r3, r4
 800a136:	d908      	bls.n	800a14a <_free_r+0x46>
 800a138:	6825      	ldr	r5, [r4, #0]
 800a13a:	1961      	adds	r1, r4, r5
 800a13c:	428b      	cmp	r3, r1
 800a13e:	bf01      	itttt	eq
 800a140:	6819      	ldreq	r1, [r3, #0]
 800a142:	685b      	ldreq	r3, [r3, #4]
 800a144:	1949      	addeq	r1, r1, r5
 800a146:	6021      	streq	r1, [r4, #0]
 800a148:	e7ed      	b.n	800a126 <_free_r+0x22>
 800a14a:	461a      	mov	r2, r3
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	b10b      	cbz	r3, 800a154 <_free_r+0x50>
 800a150:	42a3      	cmp	r3, r4
 800a152:	d9fa      	bls.n	800a14a <_free_r+0x46>
 800a154:	6811      	ldr	r1, [r2, #0]
 800a156:	1855      	adds	r5, r2, r1
 800a158:	42a5      	cmp	r5, r4
 800a15a:	d10b      	bne.n	800a174 <_free_r+0x70>
 800a15c:	6824      	ldr	r4, [r4, #0]
 800a15e:	4421      	add	r1, r4
 800a160:	1854      	adds	r4, r2, r1
 800a162:	42a3      	cmp	r3, r4
 800a164:	6011      	str	r1, [r2, #0]
 800a166:	d1e0      	bne.n	800a12a <_free_r+0x26>
 800a168:	681c      	ldr	r4, [r3, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	6053      	str	r3, [r2, #4]
 800a16e:	440c      	add	r4, r1
 800a170:	6014      	str	r4, [r2, #0]
 800a172:	e7da      	b.n	800a12a <_free_r+0x26>
 800a174:	d902      	bls.n	800a17c <_free_r+0x78>
 800a176:	230c      	movs	r3, #12
 800a178:	6003      	str	r3, [r0, #0]
 800a17a:	e7d6      	b.n	800a12a <_free_r+0x26>
 800a17c:	6825      	ldr	r5, [r4, #0]
 800a17e:	1961      	adds	r1, r4, r5
 800a180:	428b      	cmp	r3, r1
 800a182:	bf04      	itt	eq
 800a184:	6819      	ldreq	r1, [r3, #0]
 800a186:	685b      	ldreq	r3, [r3, #4]
 800a188:	6063      	str	r3, [r4, #4]
 800a18a:	bf04      	itt	eq
 800a18c:	1949      	addeq	r1, r1, r5
 800a18e:	6021      	streq	r1, [r4, #0]
 800a190:	6054      	str	r4, [r2, #4]
 800a192:	e7ca      	b.n	800a12a <_free_r+0x26>
 800a194:	b003      	add	sp, #12
 800a196:	bd30      	pop	{r4, r5, pc}
 800a198:	20004c98 	.word	0x20004c98

0800a19c <__ssputs_r>:
 800a19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a0:	688e      	ldr	r6, [r1, #8]
 800a1a2:	461f      	mov	r7, r3
 800a1a4:	42be      	cmp	r6, r7
 800a1a6:	680b      	ldr	r3, [r1, #0]
 800a1a8:	4682      	mov	sl, r0
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	4690      	mov	r8, r2
 800a1ae:	d82c      	bhi.n	800a20a <__ssputs_r+0x6e>
 800a1b0:	898a      	ldrh	r2, [r1, #12]
 800a1b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1b6:	d026      	beq.n	800a206 <__ssputs_r+0x6a>
 800a1b8:	6965      	ldr	r5, [r4, #20]
 800a1ba:	6909      	ldr	r1, [r1, #16]
 800a1bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1c0:	eba3 0901 	sub.w	r9, r3, r1
 800a1c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1c8:	1c7b      	adds	r3, r7, #1
 800a1ca:	444b      	add	r3, r9
 800a1cc:	106d      	asrs	r5, r5, #1
 800a1ce:	429d      	cmp	r5, r3
 800a1d0:	bf38      	it	cc
 800a1d2:	461d      	movcc	r5, r3
 800a1d4:	0553      	lsls	r3, r2, #21
 800a1d6:	d527      	bpl.n	800a228 <__ssputs_r+0x8c>
 800a1d8:	4629      	mov	r1, r5
 800a1da:	f7fe fd6d 	bl	8008cb8 <_malloc_r>
 800a1de:	4606      	mov	r6, r0
 800a1e0:	b360      	cbz	r0, 800a23c <__ssputs_r+0xa0>
 800a1e2:	6921      	ldr	r1, [r4, #16]
 800a1e4:	464a      	mov	r2, r9
 800a1e6:	f7ff f904 	bl	80093f2 <memcpy>
 800a1ea:	89a3      	ldrh	r3, [r4, #12]
 800a1ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f4:	81a3      	strh	r3, [r4, #12]
 800a1f6:	6126      	str	r6, [r4, #16]
 800a1f8:	6165      	str	r5, [r4, #20]
 800a1fa:	444e      	add	r6, r9
 800a1fc:	eba5 0509 	sub.w	r5, r5, r9
 800a200:	6026      	str	r6, [r4, #0]
 800a202:	60a5      	str	r5, [r4, #8]
 800a204:	463e      	mov	r6, r7
 800a206:	42be      	cmp	r6, r7
 800a208:	d900      	bls.n	800a20c <__ssputs_r+0x70>
 800a20a:	463e      	mov	r6, r7
 800a20c:	6820      	ldr	r0, [r4, #0]
 800a20e:	4632      	mov	r2, r6
 800a210:	4641      	mov	r1, r8
 800a212:	f000 fff3 	bl	800b1fc <memmove>
 800a216:	68a3      	ldr	r3, [r4, #8]
 800a218:	1b9b      	subs	r3, r3, r6
 800a21a:	60a3      	str	r3, [r4, #8]
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	4433      	add	r3, r6
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	2000      	movs	r0, #0
 800a224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a228:	462a      	mov	r2, r5
 800a22a:	f000 fec0 	bl	800afae <_realloc_r>
 800a22e:	4606      	mov	r6, r0
 800a230:	2800      	cmp	r0, #0
 800a232:	d1e0      	bne.n	800a1f6 <__ssputs_r+0x5a>
 800a234:	6921      	ldr	r1, [r4, #16]
 800a236:	4650      	mov	r0, sl
 800a238:	f7ff ff64 	bl	800a104 <_free_r>
 800a23c:	230c      	movs	r3, #12
 800a23e:	f8ca 3000 	str.w	r3, [sl]
 800a242:	89a3      	ldrh	r3, [r4, #12]
 800a244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a248:	81a3      	strh	r3, [r4, #12]
 800a24a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a24e:	e7e9      	b.n	800a224 <__ssputs_r+0x88>

0800a250 <_svfiprintf_r>:
 800a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a254:	4698      	mov	r8, r3
 800a256:	898b      	ldrh	r3, [r1, #12]
 800a258:	061b      	lsls	r3, r3, #24
 800a25a:	b09d      	sub	sp, #116	; 0x74
 800a25c:	4607      	mov	r7, r0
 800a25e:	460d      	mov	r5, r1
 800a260:	4614      	mov	r4, r2
 800a262:	d50e      	bpl.n	800a282 <_svfiprintf_r+0x32>
 800a264:	690b      	ldr	r3, [r1, #16]
 800a266:	b963      	cbnz	r3, 800a282 <_svfiprintf_r+0x32>
 800a268:	2140      	movs	r1, #64	; 0x40
 800a26a:	f7fe fd25 	bl	8008cb8 <_malloc_r>
 800a26e:	6028      	str	r0, [r5, #0]
 800a270:	6128      	str	r0, [r5, #16]
 800a272:	b920      	cbnz	r0, 800a27e <_svfiprintf_r+0x2e>
 800a274:	230c      	movs	r3, #12
 800a276:	603b      	str	r3, [r7, #0]
 800a278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a27c:	e0d0      	b.n	800a420 <_svfiprintf_r+0x1d0>
 800a27e:	2340      	movs	r3, #64	; 0x40
 800a280:	616b      	str	r3, [r5, #20]
 800a282:	2300      	movs	r3, #0
 800a284:	9309      	str	r3, [sp, #36]	; 0x24
 800a286:	2320      	movs	r3, #32
 800a288:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a28c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a290:	2330      	movs	r3, #48	; 0x30
 800a292:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a438 <_svfiprintf_r+0x1e8>
 800a296:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a29a:	f04f 0901 	mov.w	r9, #1
 800a29e:	4623      	mov	r3, r4
 800a2a0:	469a      	mov	sl, r3
 800a2a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2a6:	b10a      	cbz	r2, 800a2ac <_svfiprintf_r+0x5c>
 800a2a8:	2a25      	cmp	r2, #37	; 0x25
 800a2aa:	d1f9      	bne.n	800a2a0 <_svfiprintf_r+0x50>
 800a2ac:	ebba 0b04 	subs.w	fp, sl, r4
 800a2b0:	d00b      	beq.n	800a2ca <_svfiprintf_r+0x7a>
 800a2b2:	465b      	mov	r3, fp
 800a2b4:	4622      	mov	r2, r4
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	f7ff ff6f 	bl	800a19c <__ssputs_r>
 800a2be:	3001      	adds	r0, #1
 800a2c0:	f000 80a9 	beq.w	800a416 <_svfiprintf_r+0x1c6>
 800a2c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2c6:	445a      	add	r2, fp
 800a2c8:	9209      	str	r2, [sp, #36]	; 0x24
 800a2ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f000 80a1 	beq.w	800a416 <_svfiprintf_r+0x1c6>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2de:	f10a 0a01 	add.w	sl, sl, #1
 800a2e2:	9304      	str	r3, [sp, #16]
 800a2e4:	9307      	str	r3, [sp, #28]
 800a2e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2ea:	931a      	str	r3, [sp, #104]	; 0x68
 800a2ec:	4654      	mov	r4, sl
 800a2ee:	2205      	movs	r2, #5
 800a2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f4:	4850      	ldr	r0, [pc, #320]	; (800a438 <_svfiprintf_r+0x1e8>)
 800a2f6:	f7f5 ff6b 	bl	80001d0 <memchr>
 800a2fa:	9a04      	ldr	r2, [sp, #16]
 800a2fc:	b9d8      	cbnz	r0, 800a336 <_svfiprintf_r+0xe6>
 800a2fe:	06d0      	lsls	r0, r2, #27
 800a300:	bf44      	itt	mi
 800a302:	2320      	movmi	r3, #32
 800a304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a308:	0711      	lsls	r1, r2, #28
 800a30a:	bf44      	itt	mi
 800a30c:	232b      	movmi	r3, #43	; 0x2b
 800a30e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a312:	f89a 3000 	ldrb.w	r3, [sl]
 800a316:	2b2a      	cmp	r3, #42	; 0x2a
 800a318:	d015      	beq.n	800a346 <_svfiprintf_r+0xf6>
 800a31a:	9a07      	ldr	r2, [sp, #28]
 800a31c:	4654      	mov	r4, sl
 800a31e:	2000      	movs	r0, #0
 800a320:	f04f 0c0a 	mov.w	ip, #10
 800a324:	4621      	mov	r1, r4
 800a326:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a32a:	3b30      	subs	r3, #48	; 0x30
 800a32c:	2b09      	cmp	r3, #9
 800a32e:	d94d      	bls.n	800a3cc <_svfiprintf_r+0x17c>
 800a330:	b1b0      	cbz	r0, 800a360 <_svfiprintf_r+0x110>
 800a332:	9207      	str	r2, [sp, #28]
 800a334:	e014      	b.n	800a360 <_svfiprintf_r+0x110>
 800a336:	eba0 0308 	sub.w	r3, r0, r8
 800a33a:	fa09 f303 	lsl.w	r3, r9, r3
 800a33e:	4313      	orrs	r3, r2
 800a340:	9304      	str	r3, [sp, #16]
 800a342:	46a2      	mov	sl, r4
 800a344:	e7d2      	b.n	800a2ec <_svfiprintf_r+0x9c>
 800a346:	9b03      	ldr	r3, [sp, #12]
 800a348:	1d19      	adds	r1, r3, #4
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	9103      	str	r1, [sp, #12]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	bfbb      	ittet	lt
 800a352:	425b      	neglt	r3, r3
 800a354:	f042 0202 	orrlt.w	r2, r2, #2
 800a358:	9307      	strge	r3, [sp, #28]
 800a35a:	9307      	strlt	r3, [sp, #28]
 800a35c:	bfb8      	it	lt
 800a35e:	9204      	strlt	r2, [sp, #16]
 800a360:	7823      	ldrb	r3, [r4, #0]
 800a362:	2b2e      	cmp	r3, #46	; 0x2e
 800a364:	d10c      	bne.n	800a380 <_svfiprintf_r+0x130>
 800a366:	7863      	ldrb	r3, [r4, #1]
 800a368:	2b2a      	cmp	r3, #42	; 0x2a
 800a36a:	d134      	bne.n	800a3d6 <_svfiprintf_r+0x186>
 800a36c:	9b03      	ldr	r3, [sp, #12]
 800a36e:	1d1a      	adds	r2, r3, #4
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	9203      	str	r2, [sp, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	bfb8      	it	lt
 800a378:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a37c:	3402      	adds	r4, #2
 800a37e:	9305      	str	r3, [sp, #20]
 800a380:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a448 <_svfiprintf_r+0x1f8>
 800a384:	7821      	ldrb	r1, [r4, #0]
 800a386:	2203      	movs	r2, #3
 800a388:	4650      	mov	r0, sl
 800a38a:	f7f5 ff21 	bl	80001d0 <memchr>
 800a38e:	b138      	cbz	r0, 800a3a0 <_svfiprintf_r+0x150>
 800a390:	9b04      	ldr	r3, [sp, #16]
 800a392:	eba0 000a 	sub.w	r0, r0, sl
 800a396:	2240      	movs	r2, #64	; 0x40
 800a398:	4082      	lsls	r2, r0
 800a39a:	4313      	orrs	r3, r2
 800a39c:	3401      	adds	r4, #1
 800a39e:	9304      	str	r3, [sp, #16]
 800a3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3a4:	4825      	ldr	r0, [pc, #148]	; (800a43c <_svfiprintf_r+0x1ec>)
 800a3a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3aa:	2206      	movs	r2, #6
 800a3ac:	f7f5 ff10 	bl	80001d0 <memchr>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d038      	beq.n	800a426 <_svfiprintf_r+0x1d6>
 800a3b4:	4b22      	ldr	r3, [pc, #136]	; (800a440 <_svfiprintf_r+0x1f0>)
 800a3b6:	bb1b      	cbnz	r3, 800a400 <_svfiprintf_r+0x1b0>
 800a3b8:	9b03      	ldr	r3, [sp, #12]
 800a3ba:	3307      	adds	r3, #7
 800a3bc:	f023 0307 	bic.w	r3, r3, #7
 800a3c0:	3308      	adds	r3, #8
 800a3c2:	9303      	str	r3, [sp, #12]
 800a3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3c6:	4433      	add	r3, r6
 800a3c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ca:	e768      	b.n	800a29e <_svfiprintf_r+0x4e>
 800a3cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3d0:	460c      	mov	r4, r1
 800a3d2:	2001      	movs	r0, #1
 800a3d4:	e7a6      	b.n	800a324 <_svfiprintf_r+0xd4>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	3401      	adds	r4, #1
 800a3da:	9305      	str	r3, [sp, #20]
 800a3dc:	4619      	mov	r1, r3
 800a3de:	f04f 0c0a 	mov.w	ip, #10
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3e8:	3a30      	subs	r2, #48	; 0x30
 800a3ea:	2a09      	cmp	r2, #9
 800a3ec:	d903      	bls.n	800a3f6 <_svfiprintf_r+0x1a6>
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d0c6      	beq.n	800a380 <_svfiprintf_r+0x130>
 800a3f2:	9105      	str	r1, [sp, #20]
 800a3f4:	e7c4      	b.n	800a380 <_svfiprintf_r+0x130>
 800a3f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e7f0      	b.n	800a3e2 <_svfiprintf_r+0x192>
 800a400:	ab03      	add	r3, sp, #12
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	462a      	mov	r2, r5
 800a406:	4b0f      	ldr	r3, [pc, #60]	; (800a444 <_svfiprintf_r+0x1f4>)
 800a408:	a904      	add	r1, sp, #16
 800a40a:	4638      	mov	r0, r7
 800a40c:	f7fe f9ee 	bl	80087ec <_printf_float>
 800a410:	1c42      	adds	r2, r0, #1
 800a412:	4606      	mov	r6, r0
 800a414:	d1d6      	bne.n	800a3c4 <_svfiprintf_r+0x174>
 800a416:	89ab      	ldrh	r3, [r5, #12]
 800a418:	065b      	lsls	r3, r3, #25
 800a41a:	f53f af2d 	bmi.w	800a278 <_svfiprintf_r+0x28>
 800a41e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a420:	b01d      	add	sp, #116	; 0x74
 800a422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a426:	ab03      	add	r3, sp, #12
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	462a      	mov	r2, r5
 800a42c:	4b05      	ldr	r3, [pc, #20]	; (800a444 <_svfiprintf_r+0x1f4>)
 800a42e:	a904      	add	r1, sp, #16
 800a430:	4638      	mov	r0, r7
 800a432:	f7fe fd2f 	bl	8008e94 <_printf_i>
 800a436:	e7eb      	b.n	800a410 <_svfiprintf_r+0x1c0>
 800a438:	0800b94b 	.word	0x0800b94b
 800a43c:	0800b955 	.word	0x0800b955
 800a440:	080087ed 	.word	0x080087ed
 800a444:	0800a19d 	.word	0x0800a19d
 800a448:	0800b951 	.word	0x0800b951

0800a44c <__sfputc_r>:
 800a44c:	6893      	ldr	r3, [r2, #8]
 800a44e:	3b01      	subs	r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	b410      	push	{r4}
 800a454:	6093      	str	r3, [r2, #8]
 800a456:	da08      	bge.n	800a46a <__sfputc_r+0x1e>
 800a458:	6994      	ldr	r4, [r2, #24]
 800a45a:	42a3      	cmp	r3, r4
 800a45c:	db01      	blt.n	800a462 <__sfputc_r+0x16>
 800a45e:	290a      	cmp	r1, #10
 800a460:	d103      	bne.n	800a46a <__sfputc_r+0x1e>
 800a462:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a466:	f000 bdd1 	b.w	800b00c <__swbuf_r>
 800a46a:	6813      	ldr	r3, [r2, #0]
 800a46c:	1c58      	adds	r0, r3, #1
 800a46e:	6010      	str	r0, [r2, #0]
 800a470:	7019      	strb	r1, [r3, #0]
 800a472:	4608      	mov	r0, r1
 800a474:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <__sfputs_r>:
 800a47a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47c:	4606      	mov	r6, r0
 800a47e:	460f      	mov	r7, r1
 800a480:	4614      	mov	r4, r2
 800a482:	18d5      	adds	r5, r2, r3
 800a484:	42ac      	cmp	r4, r5
 800a486:	d101      	bne.n	800a48c <__sfputs_r+0x12>
 800a488:	2000      	movs	r0, #0
 800a48a:	e007      	b.n	800a49c <__sfputs_r+0x22>
 800a48c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a490:	463a      	mov	r2, r7
 800a492:	4630      	mov	r0, r6
 800a494:	f7ff ffda 	bl	800a44c <__sfputc_r>
 800a498:	1c43      	adds	r3, r0, #1
 800a49a:	d1f3      	bne.n	800a484 <__sfputs_r+0xa>
 800a49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4a0 <_vfiprintf_r>:
 800a4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a4:	460d      	mov	r5, r1
 800a4a6:	b09d      	sub	sp, #116	; 0x74
 800a4a8:	4614      	mov	r4, r2
 800a4aa:	4698      	mov	r8, r3
 800a4ac:	4606      	mov	r6, r0
 800a4ae:	b118      	cbz	r0, 800a4b8 <_vfiprintf_r+0x18>
 800a4b0:	6a03      	ldr	r3, [r0, #32]
 800a4b2:	b90b      	cbnz	r3, 800a4b8 <_vfiprintf_r+0x18>
 800a4b4:	f7fe fec8 	bl	8009248 <__sinit>
 800a4b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4ba:	07d9      	lsls	r1, r3, #31
 800a4bc:	d405      	bmi.n	800a4ca <_vfiprintf_r+0x2a>
 800a4be:	89ab      	ldrh	r3, [r5, #12]
 800a4c0:	059a      	lsls	r2, r3, #22
 800a4c2:	d402      	bmi.n	800a4ca <_vfiprintf_r+0x2a>
 800a4c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4c6:	f7fe ff92 	bl	80093ee <__retarget_lock_acquire_recursive>
 800a4ca:	89ab      	ldrh	r3, [r5, #12]
 800a4cc:	071b      	lsls	r3, r3, #28
 800a4ce:	d501      	bpl.n	800a4d4 <_vfiprintf_r+0x34>
 800a4d0:	692b      	ldr	r3, [r5, #16]
 800a4d2:	b99b      	cbnz	r3, 800a4fc <_vfiprintf_r+0x5c>
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	f000 fdd6 	bl	800b088 <__swsetup_r>
 800a4dc:	b170      	cbz	r0, 800a4fc <_vfiprintf_r+0x5c>
 800a4de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4e0:	07dc      	lsls	r4, r3, #31
 800a4e2:	d504      	bpl.n	800a4ee <_vfiprintf_r+0x4e>
 800a4e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4e8:	b01d      	add	sp, #116	; 0x74
 800a4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ee:	89ab      	ldrh	r3, [r5, #12]
 800a4f0:	0598      	lsls	r0, r3, #22
 800a4f2:	d4f7      	bmi.n	800a4e4 <_vfiprintf_r+0x44>
 800a4f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4f6:	f7fe ff7b 	bl	80093f0 <__retarget_lock_release_recursive>
 800a4fa:	e7f3      	b.n	800a4e4 <_vfiprintf_r+0x44>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a500:	2320      	movs	r3, #32
 800a502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a506:	f8cd 800c 	str.w	r8, [sp, #12]
 800a50a:	2330      	movs	r3, #48	; 0x30
 800a50c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a6c0 <_vfiprintf_r+0x220>
 800a510:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a514:	f04f 0901 	mov.w	r9, #1
 800a518:	4623      	mov	r3, r4
 800a51a:	469a      	mov	sl, r3
 800a51c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a520:	b10a      	cbz	r2, 800a526 <_vfiprintf_r+0x86>
 800a522:	2a25      	cmp	r2, #37	; 0x25
 800a524:	d1f9      	bne.n	800a51a <_vfiprintf_r+0x7a>
 800a526:	ebba 0b04 	subs.w	fp, sl, r4
 800a52a:	d00b      	beq.n	800a544 <_vfiprintf_r+0xa4>
 800a52c:	465b      	mov	r3, fp
 800a52e:	4622      	mov	r2, r4
 800a530:	4629      	mov	r1, r5
 800a532:	4630      	mov	r0, r6
 800a534:	f7ff ffa1 	bl	800a47a <__sfputs_r>
 800a538:	3001      	adds	r0, #1
 800a53a:	f000 80a9 	beq.w	800a690 <_vfiprintf_r+0x1f0>
 800a53e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a540:	445a      	add	r2, fp
 800a542:	9209      	str	r2, [sp, #36]	; 0x24
 800a544:	f89a 3000 	ldrb.w	r3, [sl]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f000 80a1 	beq.w	800a690 <_vfiprintf_r+0x1f0>
 800a54e:	2300      	movs	r3, #0
 800a550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a558:	f10a 0a01 	add.w	sl, sl, #1
 800a55c:	9304      	str	r3, [sp, #16]
 800a55e:	9307      	str	r3, [sp, #28]
 800a560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a564:	931a      	str	r3, [sp, #104]	; 0x68
 800a566:	4654      	mov	r4, sl
 800a568:	2205      	movs	r2, #5
 800a56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a56e:	4854      	ldr	r0, [pc, #336]	; (800a6c0 <_vfiprintf_r+0x220>)
 800a570:	f7f5 fe2e 	bl	80001d0 <memchr>
 800a574:	9a04      	ldr	r2, [sp, #16]
 800a576:	b9d8      	cbnz	r0, 800a5b0 <_vfiprintf_r+0x110>
 800a578:	06d1      	lsls	r1, r2, #27
 800a57a:	bf44      	itt	mi
 800a57c:	2320      	movmi	r3, #32
 800a57e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a582:	0713      	lsls	r3, r2, #28
 800a584:	bf44      	itt	mi
 800a586:	232b      	movmi	r3, #43	; 0x2b
 800a588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a58c:	f89a 3000 	ldrb.w	r3, [sl]
 800a590:	2b2a      	cmp	r3, #42	; 0x2a
 800a592:	d015      	beq.n	800a5c0 <_vfiprintf_r+0x120>
 800a594:	9a07      	ldr	r2, [sp, #28]
 800a596:	4654      	mov	r4, sl
 800a598:	2000      	movs	r0, #0
 800a59a:	f04f 0c0a 	mov.w	ip, #10
 800a59e:	4621      	mov	r1, r4
 800a5a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5a4:	3b30      	subs	r3, #48	; 0x30
 800a5a6:	2b09      	cmp	r3, #9
 800a5a8:	d94d      	bls.n	800a646 <_vfiprintf_r+0x1a6>
 800a5aa:	b1b0      	cbz	r0, 800a5da <_vfiprintf_r+0x13a>
 800a5ac:	9207      	str	r2, [sp, #28]
 800a5ae:	e014      	b.n	800a5da <_vfiprintf_r+0x13a>
 800a5b0:	eba0 0308 	sub.w	r3, r0, r8
 800a5b4:	fa09 f303 	lsl.w	r3, r9, r3
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	9304      	str	r3, [sp, #16]
 800a5bc:	46a2      	mov	sl, r4
 800a5be:	e7d2      	b.n	800a566 <_vfiprintf_r+0xc6>
 800a5c0:	9b03      	ldr	r3, [sp, #12]
 800a5c2:	1d19      	adds	r1, r3, #4
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	9103      	str	r1, [sp, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	bfbb      	ittet	lt
 800a5cc:	425b      	neglt	r3, r3
 800a5ce:	f042 0202 	orrlt.w	r2, r2, #2
 800a5d2:	9307      	strge	r3, [sp, #28]
 800a5d4:	9307      	strlt	r3, [sp, #28]
 800a5d6:	bfb8      	it	lt
 800a5d8:	9204      	strlt	r2, [sp, #16]
 800a5da:	7823      	ldrb	r3, [r4, #0]
 800a5dc:	2b2e      	cmp	r3, #46	; 0x2e
 800a5de:	d10c      	bne.n	800a5fa <_vfiprintf_r+0x15a>
 800a5e0:	7863      	ldrb	r3, [r4, #1]
 800a5e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a5e4:	d134      	bne.n	800a650 <_vfiprintf_r+0x1b0>
 800a5e6:	9b03      	ldr	r3, [sp, #12]
 800a5e8:	1d1a      	adds	r2, r3, #4
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	9203      	str	r2, [sp, #12]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	bfb8      	it	lt
 800a5f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a5f6:	3402      	adds	r4, #2
 800a5f8:	9305      	str	r3, [sp, #20]
 800a5fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a6d0 <_vfiprintf_r+0x230>
 800a5fe:	7821      	ldrb	r1, [r4, #0]
 800a600:	2203      	movs	r2, #3
 800a602:	4650      	mov	r0, sl
 800a604:	f7f5 fde4 	bl	80001d0 <memchr>
 800a608:	b138      	cbz	r0, 800a61a <_vfiprintf_r+0x17a>
 800a60a:	9b04      	ldr	r3, [sp, #16]
 800a60c:	eba0 000a 	sub.w	r0, r0, sl
 800a610:	2240      	movs	r2, #64	; 0x40
 800a612:	4082      	lsls	r2, r0
 800a614:	4313      	orrs	r3, r2
 800a616:	3401      	adds	r4, #1
 800a618:	9304      	str	r3, [sp, #16]
 800a61a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a61e:	4829      	ldr	r0, [pc, #164]	; (800a6c4 <_vfiprintf_r+0x224>)
 800a620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a624:	2206      	movs	r2, #6
 800a626:	f7f5 fdd3 	bl	80001d0 <memchr>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d03f      	beq.n	800a6ae <_vfiprintf_r+0x20e>
 800a62e:	4b26      	ldr	r3, [pc, #152]	; (800a6c8 <_vfiprintf_r+0x228>)
 800a630:	bb1b      	cbnz	r3, 800a67a <_vfiprintf_r+0x1da>
 800a632:	9b03      	ldr	r3, [sp, #12]
 800a634:	3307      	adds	r3, #7
 800a636:	f023 0307 	bic.w	r3, r3, #7
 800a63a:	3308      	adds	r3, #8
 800a63c:	9303      	str	r3, [sp, #12]
 800a63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a640:	443b      	add	r3, r7
 800a642:	9309      	str	r3, [sp, #36]	; 0x24
 800a644:	e768      	b.n	800a518 <_vfiprintf_r+0x78>
 800a646:	fb0c 3202 	mla	r2, ip, r2, r3
 800a64a:	460c      	mov	r4, r1
 800a64c:	2001      	movs	r0, #1
 800a64e:	e7a6      	b.n	800a59e <_vfiprintf_r+0xfe>
 800a650:	2300      	movs	r3, #0
 800a652:	3401      	adds	r4, #1
 800a654:	9305      	str	r3, [sp, #20]
 800a656:	4619      	mov	r1, r3
 800a658:	f04f 0c0a 	mov.w	ip, #10
 800a65c:	4620      	mov	r0, r4
 800a65e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a662:	3a30      	subs	r2, #48	; 0x30
 800a664:	2a09      	cmp	r2, #9
 800a666:	d903      	bls.n	800a670 <_vfiprintf_r+0x1d0>
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d0c6      	beq.n	800a5fa <_vfiprintf_r+0x15a>
 800a66c:	9105      	str	r1, [sp, #20]
 800a66e:	e7c4      	b.n	800a5fa <_vfiprintf_r+0x15a>
 800a670:	fb0c 2101 	mla	r1, ip, r1, r2
 800a674:	4604      	mov	r4, r0
 800a676:	2301      	movs	r3, #1
 800a678:	e7f0      	b.n	800a65c <_vfiprintf_r+0x1bc>
 800a67a:	ab03      	add	r3, sp, #12
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	462a      	mov	r2, r5
 800a680:	4b12      	ldr	r3, [pc, #72]	; (800a6cc <_vfiprintf_r+0x22c>)
 800a682:	a904      	add	r1, sp, #16
 800a684:	4630      	mov	r0, r6
 800a686:	f7fe f8b1 	bl	80087ec <_printf_float>
 800a68a:	4607      	mov	r7, r0
 800a68c:	1c78      	adds	r0, r7, #1
 800a68e:	d1d6      	bne.n	800a63e <_vfiprintf_r+0x19e>
 800a690:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a692:	07d9      	lsls	r1, r3, #31
 800a694:	d405      	bmi.n	800a6a2 <_vfiprintf_r+0x202>
 800a696:	89ab      	ldrh	r3, [r5, #12]
 800a698:	059a      	lsls	r2, r3, #22
 800a69a:	d402      	bmi.n	800a6a2 <_vfiprintf_r+0x202>
 800a69c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a69e:	f7fe fea7 	bl	80093f0 <__retarget_lock_release_recursive>
 800a6a2:	89ab      	ldrh	r3, [r5, #12]
 800a6a4:	065b      	lsls	r3, r3, #25
 800a6a6:	f53f af1d 	bmi.w	800a4e4 <_vfiprintf_r+0x44>
 800a6aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6ac:	e71c      	b.n	800a4e8 <_vfiprintf_r+0x48>
 800a6ae:	ab03      	add	r3, sp, #12
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	462a      	mov	r2, r5
 800a6b4:	4b05      	ldr	r3, [pc, #20]	; (800a6cc <_vfiprintf_r+0x22c>)
 800a6b6:	a904      	add	r1, sp, #16
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	f7fe fbeb 	bl	8008e94 <_printf_i>
 800a6be:	e7e4      	b.n	800a68a <_vfiprintf_r+0x1ea>
 800a6c0:	0800b94b 	.word	0x0800b94b
 800a6c4:	0800b955 	.word	0x0800b955
 800a6c8:	080087ed 	.word	0x080087ed
 800a6cc:	0800a47b 	.word	0x0800a47b
 800a6d0:	0800b951 	.word	0x0800b951

0800a6d4 <__sflush_r>:
 800a6d4:	898a      	ldrh	r2, [r1, #12]
 800a6d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6da:	4605      	mov	r5, r0
 800a6dc:	0710      	lsls	r0, r2, #28
 800a6de:	460c      	mov	r4, r1
 800a6e0:	d458      	bmi.n	800a794 <__sflush_r+0xc0>
 800a6e2:	684b      	ldr	r3, [r1, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	dc05      	bgt.n	800a6f4 <__sflush_r+0x20>
 800a6e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	dc02      	bgt.n	800a6f4 <__sflush_r+0x20>
 800a6ee:	2000      	movs	r0, #0
 800a6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6f6:	2e00      	cmp	r6, #0
 800a6f8:	d0f9      	beq.n	800a6ee <__sflush_r+0x1a>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a700:	682f      	ldr	r7, [r5, #0]
 800a702:	6a21      	ldr	r1, [r4, #32]
 800a704:	602b      	str	r3, [r5, #0]
 800a706:	d032      	beq.n	800a76e <__sflush_r+0x9a>
 800a708:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	075a      	lsls	r2, r3, #29
 800a70e:	d505      	bpl.n	800a71c <__sflush_r+0x48>
 800a710:	6863      	ldr	r3, [r4, #4]
 800a712:	1ac0      	subs	r0, r0, r3
 800a714:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a716:	b10b      	cbz	r3, 800a71c <__sflush_r+0x48>
 800a718:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a71a:	1ac0      	subs	r0, r0, r3
 800a71c:	2300      	movs	r3, #0
 800a71e:	4602      	mov	r2, r0
 800a720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a722:	6a21      	ldr	r1, [r4, #32]
 800a724:	4628      	mov	r0, r5
 800a726:	47b0      	blx	r6
 800a728:	1c43      	adds	r3, r0, #1
 800a72a:	89a3      	ldrh	r3, [r4, #12]
 800a72c:	d106      	bne.n	800a73c <__sflush_r+0x68>
 800a72e:	6829      	ldr	r1, [r5, #0]
 800a730:	291d      	cmp	r1, #29
 800a732:	d82b      	bhi.n	800a78c <__sflush_r+0xb8>
 800a734:	4a29      	ldr	r2, [pc, #164]	; (800a7dc <__sflush_r+0x108>)
 800a736:	410a      	asrs	r2, r1
 800a738:	07d6      	lsls	r6, r2, #31
 800a73a:	d427      	bmi.n	800a78c <__sflush_r+0xb8>
 800a73c:	2200      	movs	r2, #0
 800a73e:	6062      	str	r2, [r4, #4]
 800a740:	04d9      	lsls	r1, r3, #19
 800a742:	6922      	ldr	r2, [r4, #16]
 800a744:	6022      	str	r2, [r4, #0]
 800a746:	d504      	bpl.n	800a752 <__sflush_r+0x7e>
 800a748:	1c42      	adds	r2, r0, #1
 800a74a:	d101      	bne.n	800a750 <__sflush_r+0x7c>
 800a74c:	682b      	ldr	r3, [r5, #0]
 800a74e:	b903      	cbnz	r3, 800a752 <__sflush_r+0x7e>
 800a750:	6560      	str	r0, [r4, #84]	; 0x54
 800a752:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a754:	602f      	str	r7, [r5, #0]
 800a756:	2900      	cmp	r1, #0
 800a758:	d0c9      	beq.n	800a6ee <__sflush_r+0x1a>
 800a75a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a75e:	4299      	cmp	r1, r3
 800a760:	d002      	beq.n	800a768 <__sflush_r+0x94>
 800a762:	4628      	mov	r0, r5
 800a764:	f7ff fcce 	bl	800a104 <_free_r>
 800a768:	2000      	movs	r0, #0
 800a76a:	6360      	str	r0, [r4, #52]	; 0x34
 800a76c:	e7c0      	b.n	800a6f0 <__sflush_r+0x1c>
 800a76e:	2301      	movs	r3, #1
 800a770:	4628      	mov	r0, r5
 800a772:	47b0      	blx	r6
 800a774:	1c41      	adds	r1, r0, #1
 800a776:	d1c8      	bne.n	800a70a <__sflush_r+0x36>
 800a778:	682b      	ldr	r3, [r5, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0c5      	beq.n	800a70a <__sflush_r+0x36>
 800a77e:	2b1d      	cmp	r3, #29
 800a780:	d001      	beq.n	800a786 <__sflush_r+0xb2>
 800a782:	2b16      	cmp	r3, #22
 800a784:	d101      	bne.n	800a78a <__sflush_r+0xb6>
 800a786:	602f      	str	r7, [r5, #0]
 800a788:	e7b1      	b.n	800a6ee <__sflush_r+0x1a>
 800a78a:	89a3      	ldrh	r3, [r4, #12]
 800a78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a790:	81a3      	strh	r3, [r4, #12]
 800a792:	e7ad      	b.n	800a6f0 <__sflush_r+0x1c>
 800a794:	690f      	ldr	r7, [r1, #16]
 800a796:	2f00      	cmp	r7, #0
 800a798:	d0a9      	beq.n	800a6ee <__sflush_r+0x1a>
 800a79a:	0793      	lsls	r3, r2, #30
 800a79c:	680e      	ldr	r6, [r1, #0]
 800a79e:	bf08      	it	eq
 800a7a0:	694b      	ldreq	r3, [r1, #20]
 800a7a2:	600f      	str	r7, [r1, #0]
 800a7a4:	bf18      	it	ne
 800a7a6:	2300      	movne	r3, #0
 800a7a8:	eba6 0807 	sub.w	r8, r6, r7
 800a7ac:	608b      	str	r3, [r1, #8]
 800a7ae:	f1b8 0f00 	cmp.w	r8, #0
 800a7b2:	dd9c      	ble.n	800a6ee <__sflush_r+0x1a>
 800a7b4:	6a21      	ldr	r1, [r4, #32]
 800a7b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7b8:	4643      	mov	r3, r8
 800a7ba:	463a      	mov	r2, r7
 800a7bc:	4628      	mov	r0, r5
 800a7be:	47b0      	blx	r6
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	dc06      	bgt.n	800a7d2 <__sflush_r+0xfe>
 800a7c4:	89a3      	ldrh	r3, [r4, #12]
 800a7c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ca:	81a3      	strh	r3, [r4, #12]
 800a7cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7d0:	e78e      	b.n	800a6f0 <__sflush_r+0x1c>
 800a7d2:	4407      	add	r7, r0
 800a7d4:	eba8 0800 	sub.w	r8, r8, r0
 800a7d8:	e7e9      	b.n	800a7ae <__sflush_r+0xda>
 800a7da:	bf00      	nop
 800a7dc:	dfbffffe 	.word	0xdfbffffe

0800a7e0 <_fflush_r>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	690b      	ldr	r3, [r1, #16]
 800a7e4:	4605      	mov	r5, r0
 800a7e6:	460c      	mov	r4, r1
 800a7e8:	b913      	cbnz	r3, 800a7f0 <_fflush_r+0x10>
 800a7ea:	2500      	movs	r5, #0
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	bd38      	pop	{r3, r4, r5, pc}
 800a7f0:	b118      	cbz	r0, 800a7fa <_fflush_r+0x1a>
 800a7f2:	6a03      	ldr	r3, [r0, #32]
 800a7f4:	b90b      	cbnz	r3, 800a7fa <_fflush_r+0x1a>
 800a7f6:	f7fe fd27 	bl	8009248 <__sinit>
 800a7fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d0f3      	beq.n	800a7ea <_fflush_r+0xa>
 800a802:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a804:	07d0      	lsls	r0, r2, #31
 800a806:	d404      	bmi.n	800a812 <_fflush_r+0x32>
 800a808:	0599      	lsls	r1, r3, #22
 800a80a:	d402      	bmi.n	800a812 <_fflush_r+0x32>
 800a80c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a80e:	f7fe fdee 	bl	80093ee <__retarget_lock_acquire_recursive>
 800a812:	4628      	mov	r0, r5
 800a814:	4621      	mov	r1, r4
 800a816:	f7ff ff5d 	bl	800a6d4 <__sflush_r>
 800a81a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a81c:	07da      	lsls	r2, r3, #31
 800a81e:	4605      	mov	r5, r0
 800a820:	d4e4      	bmi.n	800a7ec <_fflush_r+0xc>
 800a822:	89a3      	ldrh	r3, [r4, #12]
 800a824:	059b      	lsls	r3, r3, #22
 800a826:	d4e1      	bmi.n	800a7ec <_fflush_r+0xc>
 800a828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a82a:	f7fe fde1 	bl	80093f0 <__retarget_lock_release_recursive>
 800a82e:	e7dd      	b.n	800a7ec <_fflush_r+0xc>

0800a830 <_Balloc>:
 800a830:	b570      	push	{r4, r5, r6, lr}
 800a832:	69c6      	ldr	r6, [r0, #28]
 800a834:	4604      	mov	r4, r0
 800a836:	460d      	mov	r5, r1
 800a838:	b976      	cbnz	r6, 800a858 <_Balloc+0x28>
 800a83a:	2010      	movs	r0, #16
 800a83c:	f7fe fa0c 	bl	8008c58 <malloc>
 800a840:	4602      	mov	r2, r0
 800a842:	61e0      	str	r0, [r4, #28]
 800a844:	b920      	cbnz	r0, 800a850 <_Balloc+0x20>
 800a846:	4b18      	ldr	r3, [pc, #96]	; (800a8a8 <_Balloc+0x78>)
 800a848:	4818      	ldr	r0, [pc, #96]	; (800a8ac <_Balloc+0x7c>)
 800a84a:	216b      	movs	r1, #107	; 0x6b
 800a84c:	f7fd ff10 	bl	8008670 <__assert_func>
 800a850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a854:	6006      	str	r6, [r0, #0]
 800a856:	60c6      	str	r6, [r0, #12]
 800a858:	69e6      	ldr	r6, [r4, #28]
 800a85a:	68f3      	ldr	r3, [r6, #12]
 800a85c:	b183      	cbz	r3, 800a880 <_Balloc+0x50>
 800a85e:	69e3      	ldr	r3, [r4, #28]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a866:	b9b8      	cbnz	r0, 800a898 <_Balloc+0x68>
 800a868:	2101      	movs	r1, #1
 800a86a:	fa01 f605 	lsl.w	r6, r1, r5
 800a86e:	1d72      	adds	r2, r6, #5
 800a870:	0092      	lsls	r2, r2, #2
 800a872:	4620      	mov	r0, r4
 800a874:	f000 fd44 	bl	800b300 <_calloc_r>
 800a878:	b160      	cbz	r0, 800a894 <_Balloc+0x64>
 800a87a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a87e:	e00e      	b.n	800a89e <_Balloc+0x6e>
 800a880:	2221      	movs	r2, #33	; 0x21
 800a882:	2104      	movs	r1, #4
 800a884:	4620      	mov	r0, r4
 800a886:	f000 fd3b 	bl	800b300 <_calloc_r>
 800a88a:	69e3      	ldr	r3, [r4, #28]
 800a88c:	60f0      	str	r0, [r6, #12]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d1e4      	bne.n	800a85e <_Balloc+0x2e>
 800a894:	2000      	movs	r0, #0
 800a896:	bd70      	pop	{r4, r5, r6, pc}
 800a898:	6802      	ldr	r2, [r0, #0]
 800a89a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a89e:	2300      	movs	r3, #0
 800a8a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8a4:	e7f7      	b.n	800a896 <_Balloc+0x66>
 800a8a6:	bf00      	nop
 800a8a8:	0800b8cb 	.word	0x0800b8cb
 800a8ac:	0800b95c 	.word	0x0800b95c

0800a8b0 <_Bfree>:
 800a8b0:	b570      	push	{r4, r5, r6, lr}
 800a8b2:	69c6      	ldr	r6, [r0, #28]
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	b976      	cbnz	r6, 800a8d8 <_Bfree+0x28>
 800a8ba:	2010      	movs	r0, #16
 800a8bc:	f7fe f9cc 	bl	8008c58 <malloc>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	61e8      	str	r0, [r5, #28]
 800a8c4:	b920      	cbnz	r0, 800a8d0 <_Bfree+0x20>
 800a8c6:	4b09      	ldr	r3, [pc, #36]	; (800a8ec <_Bfree+0x3c>)
 800a8c8:	4809      	ldr	r0, [pc, #36]	; (800a8f0 <_Bfree+0x40>)
 800a8ca:	218f      	movs	r1, #143	; 0x8f
 800a8cc:	f7fd fed0 	bl	8008670 <__assert_func>
 800a8d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8d4:	6006      	str	r6, [r0, #0]
 800a8d6:	60c6      	str	r6, [r0, #12]
 800a8d8:	b13c      	cbz	r4, 800a8ea <_Bfree+0x3a>
 800a8da:	69eb      	ldr	r3, [r5, #28]
 800a8dc:	6862      	ldr	r2, [r4, #4]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8e4:	6021      	str	r1, [r4, #0]
 800a8e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8ea:	bd70      	pop	{r4, r5, r6, pc}
 800a8ec:	0800b8cb 	.word	0x0800b8cb
 800a8f0:	0800b95c 	.word	0x0800b95c

0800a8f4 <__multadd>:
 800a8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f8:	690d      	ldr	r5, [r1, #16]
 800a8fa:	4607      	mov	r7, r0
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	461e      	mov	r6, r3
 800a900:	f101 0c14 	add.w	ip, r1, #20
 800a904:	2000      	movs	r0, #0
 800a906:	f8dc 3000 	ldr.w	r3, [ip]
 800a90a:	b299      	uxth	r1, r3
 800a90c:	fb02 6101 	mla	r1, r2, r1, r6
 800a910:	0c1e      	lsrs	r6, r3, #16
 800a912:	0c0b      	lsrs	r3, r1, #16
 800a914:	fb02 3306 	mla	r3, r2, r6, r3
 800a918:	b289      	uxth	r1, r1
 800a91a:	3001      	adds	r0, #1
 800a91c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a920:	4285      	cmp	r5, r0
 800a922:	f84c 1b04 	str.w	r1, [ip], #4
 800a926:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a92a:	dcec      	bgt.n	800a906 <__multadd+0x12>
 800a92c:	b30e      	cbz	r6, 800a972 <__multadd+0x7e>
 800a92e:	68a3      	ldr	r3, [r4, #8]
 800a930:	42ab      	cmp	r3, r5
 800a932:	dc19      	bgt.n	800a968 <__multadd+0x74>
 800a934:	6861      	ldr	r1, [r4, #4]
 800a936:	4638      	mov	r0, r7
 800a938:	3101      	adds	r1, #1
 800a93a:	f7ff ff79 	bl	800a830 <_Balloc>
 800a93e:	4680      	mov	r8, r0
 800a940:	b928      	cbnz	r0, 800a94e <__multadd+0x5a>
 800a942:	4602      	mov	r2, r0
 800a944:	4b0c      	ldr	r3, [pc, #48]	; (800a978 <__multadd+0x84>)
 800a946:	480d      	ldr	r0, [pc, #52]	; (800a97c <__multadd+0x88>)
 800a948:	21ba      	movs	r1, #186	; 0xba
 800a94a:	f7fd fe91 	bl	8008670 <__assert_func>
 800a94e:	6922      	ldr	r2, [r4, #16]
 800a950:	3202      	adds	r2, #2
 800a952:	f104 010c 	add.w	r1, r4, #12
 800a956:	0092      	lsls	r2, r2, #2
 800a958:	300c      	adds	r0, #12
 800a95a:	f7fe fd4a 	bl	80093f2 <memcpy>
 800a95e:	4621      	mov	r1, r4
 800a960:	4638      	mov	r0, r7
 800a962:	f7ff ffa5 	bl	800a8b0 <_Bfree>
 800a966:	4644      	mov	r4, r8
 800a968:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a96c:	3501      	adds	r5, #1
 800a96e:	615e      	str	r6, [r3, #20]
 800a970:	6125      	str	r5, [r4, #16]
 800a972:	4620      	mov	r0, r4
 800a974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a978:	0800b93a 	.word	0x0800b93a
 800a97c:	0800b95c 	.word	0x0800b95c

0800a980 <__hi0bits>:
 800a980:	0c03      	lsrs	r3, r0, #16
 800a982:	041b      	lsls	r3, r3, #16
 800a984:	b9d3      	cbnz	r3, 800a9bc <__hi0bits+0x3c>
 800a986:	0400      	lsls	r0, r0, #16
 800a988:	2310      	movs	r3, #16
 800a98a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a98e:	bf04      	itt	eq
 800a990:	0200      	lsleq	r0, r0, #8
 800a992:	3308      	addeq	r3, #8
 800a994:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a998:	bf04      	itt	eq
 800a99a:	0100      	lsleq	r0, r0, #4
 800a99c:	3304      	addeq	r3, #4
 800a99e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a9a2:	bf04      	itt	eq
 800a9a4:	0080      	lsleq	r0, r0, #2
 800a9a6:	3302      	addeq	r3, #2
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	db05      	blt.n	800a9b8 <__hi0bits+0x38>
 800a9ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a9b0:	f103 0301 	add.w	r3, r3, #1
 800a9b4:	bf08      	it	eq
 800a9b6:	2320      	moveq	r3, #32
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	4770      	bx	lr
 800a9bc:	2300      	movs	r3, #0
 800a9be:	e7e4      	b.n	800a98a <__hi0bits+0xa>

0800a9c0 <__lo0bits>:
 800a9c0:	6803      	ldr	r3, [r0, #0]
 800a9c2:	f013 0207 	ands.w	r2, r3, #7
 800a9c6:	d00c      	beq.n	800a9e2 <__lo0bits+0x22>
 800a9c8:	07d9      	lsls	r1, r3, #31
 800a9ca:	d422      	bmi.n	800aa12 <__lo0bits+0x52>
 800a9cc:	079a      	lsls	r2, r3, #30
 800a9ce:	bf49      	itett	mi
 800a9d0:	085b      	lsrmi	r3, r3, #1
 800a9d2:	089b      	lsrpl	r3, r3, #2
 800a9d4:	6003      	strmi	r3, [r0, #0]
 800a9d6:	2201      	movmi	r2, #1
 800a9d8:	bf5c      	itt	pl
 800a9da:	6003      	strpl	r3, [r0, #0]
 800a9dc:	2202      	movpl	r2, #2
 800a9de:	4610      	mov	r0, r2
 800a9e0:	4770      	bx	lr
 800a9e2:	b299      	uxth	r1, r3
 800a9e4:	b909      	cbnz	r1, 800a9ea <__lo0bits+0x2a>
 800a9e6:	0c1b      	lsrs	r3, r3, #16
 800a9e8:	2210      	movs	r2, #16
 800a9ea:	b2d9      	uxtb	r1, r3
 800a9ec:	b909      	cbnz	r1, 800a9f2 <__lo0bits+0x32>
 800a9ee:	3208      	adds	r2, #8
 800a9f0:	0a1b      	lsrs	r3, r3, #8
 800a9f2:	0719      	lsls	r1, r3, #28
 800a9f4:	bf04      	itt	eq
 800a9f6:	091b      	lsreq	r3, r3, #4
 800a9f8:	3204      	addeq	r2, #4
 800a9fa:	0799      	lsls	r1, r3, #30
 800a9fc:	bf04      	itt	eq
 800a9fe:	089b      	lsreq	r3, r3, #2
 800aa00:	3202      	addeq	r2, #2
 800aa02:	07d9      	lsls	r1, r3, #31
 800aa04:	d403      	bmi.n	800aa0e <__lo0bits+0x4e>
 800aa06:	085b      	lsrs	r3, r3, #1
 800aa08:	f102 0201 	add.w	r2, r2, #1
 800aa0c:	d003      	beq.n	800aa16 <__lo0bits+0x56>
 800aa0e:	6003      	str	r3, [r0, #0]
 800aa10:	e7e5      	b.n	800a9de <__lo0bits+0x1e>
 800aa12:	2200      	movs	r2, #0
 800aa14:	e7e3      	b.n	800a9de <__lo0bits+0x1e>
 800aa16:	2220      	movs	r2, #32
 800aa18:	e7e1      	b.n	800a9de <__lo0bits+0x1e>
	...

0800aa1c <__i2b>:
 800aa1c:	b510      	push	{r4, lr}
 800aa1e:	460c      	mov	r4, r1
 800aa20:	2101      	movs	r1, #1
 800aa22:	f7ff ff05 	bl	800a830 <_Balloc>
 800aa26:	4602      	mov	r2, r0
 800aa28:	b928      	cbnz	r0, 800aa36 <__i2b+0x1a>
 800aa2a:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <__i2b+0x24>)
 800aa2c:	4805      	ldr	r0, [pc, #20]	; (800aa44 <__i2b+0x28>)
 800aa2e:	f240 1145 	movw	r1, #325	; 0x145
 800aa32:	f7fd fe1d 	bl	8008670 <__assert_func>
 800aa36:	2301      	movs	r3, #1
 800aa38:	6144      	str	r4, [r0, #20]
 800aa3a:	6103      	str	r3, [r0, #16]
 800aa3c:	bd10      	pop	{r4, pc}
 800aa3e:	bf00      	nop
 800aa40:	0800b93a 	.word	0x0800b93a
 800aa44:	0800b95c 	.word	0x0800b95c

0800aa48 <__multiply>:
 800aa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	4691      	mov	r9, r2
 800aa4e:	690a      	ldr	r2, [r1, #16]
 800aa50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	bfb8      	it	lt
 800aa58:	460b      	movlt	r3, r1
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	bfbc      	itt	lt
 800aa5e:	464c      	movlt	r4, r9
 800aa60:	4699      	movlt	r9, r3
 800aa62:	6927      	ldr	r7, [r4, #16]
 800aa64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa68:	68a3      	ldr	r3, [r4, #8]
 800aa6a:	6861      	ldr	r1, [r4, #4]
 800aa6c:	eb07 060a 	add.w	r6, r7, sl
 800aa70:	42b3      	cmp	r3, r6
 800aa72:	b085      	sub	sp, #20
 800aa74:	bfb8      	it	lt
 800aa76:	3101      	addlt	r1, #1
 800aa78:	f7ff feda 	bl	800a830 <_Balloc>
 800aa7c:	b930      	cbnz	r0, 800aa8c <__multiply+0x44>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	4b44      	ldr	r3, [pc, #272]	; (800ab94 <__multiply+0x14c>)
 800aa82:	4845      	ldr	r0, [pc, #276]	; (800ab98 <__multiply+0x150>)
 800aa84:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aa88:	f7fd fdf2 	bl	8008670 <__assert_func>
 800aa8c:	f100 0514 	add.w	r5, r0, #20
 800aa90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa94:	462b      	mov	r3, r5
 800aa96:	2200      	movs	r2, #0
 800aa98:	4543      	cmp	r3, r8
 800aa9a:	d321      	bcc.n	800aae0 <__multiply+0x98>
 800aa9c:	f104 0314 	add.w	r3, r4, #20
 800aaa0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aaa4:	f109 0314 	add.w	r3, r9, #20
 800aaa8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aaac:	9202      	str	r2, [sp, #8]
 800aaae:	1b3a      	subs	r2, r7, r4
 800aab0:	3a15      	subs	r2, #21
 800aab2:	f022 0203 	bic.w	r2, r2, #3
 800aab6:	3204      	adds	r2, #4
 800aab8:	f104 0115 	add.w	r1, r4, #21
 800aabc:	428f      	cmp	r7, r1
 800aabe:	bf38      	it	cc
 800aac0:	2204      	movcc	r2, #4
 800aac2:	9201      	str	r2, [sp, #4]
 800aac4:	9a02      	ldr	r2, [sp, #8]
 800aac6:	9303      	str	r3, [sp, #12]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d80c      	bhi.n	800aae6 <__multiply+0x9e>
 800aacc:	2e00      	cmp	r6, #0
 800aace:	dd03      	ble.n	800aad8 <__multiply+0x90>
 800aad0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d05b      	beq.n	800ab90 <__multiply+0x148>
 800aad8:	6106      	str	r6, [r0, #16]
 800aada:	b005      	add	sp, #20
 800aadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae0:	f843 2b04 	str.w	r2, [r3], #4
 800aae4:	e7d8      	b.n	800aa98 <__multiply+0x50>
 800aae6:	f8b3 a000 	ldrh.w	sl, [r3]
 800aaea:	f1ba 0f00 	cmp.w	sl, #0
 800aaee:	d024      	beq.n	800ab3a <__multiply+0xf2>
 800aaf0:	f104 0e14 	add.w	lr, r4, #20
 800aaf4:	46a9      	mov	r9, r5
 800aaf6:	f04f 0c00 	mov.w	ip, #0
 800aafa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aafe:	f8d9 1000 	ldr.w	r1, [r9]
 800ab02:	fa1f fb82 	uxth.w	fp, r2
 800ab06:	b289      	uxth	r1, r1
 800ab08:	fb0a 110b 	mla	r1, sl, fp, r1
 800ab0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ab10:	f8d9 2000 	ldr.w	r2, [r9]
 800ab14:	4461      	add	r1, ip
 800ab16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab1a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ab1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab22:	b289      	uxth	r1, r1
 800ab24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab28:	4577      	cmp	r7, lr
 800ab2a:	f849 1b04 	str.w	r1, [r9], #4
 800ab2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab32:	d8e2      	bhi.n	800aafa <__multiply+0xb2>
 800ab34:	9a01      	ldr	r2, [sp, #4]
 800ab36:	f845 c002 	str.w	ip, [r5, r2]
 800ab3a:	9a03      	ldr	r2, [sp, #12]
 800ab3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab40:	3304      	adds	r3, #4
 800ab42:	f1b9 0f00 	cmp.w	r9, #0
 800ab46:	d021      	beq.n	800ab8c <__multiply+0x144>
 800ab48:	6829      	ldr	r1, [r5, #0]
 800ab4a:	f104 0c14 	add.w	ip, r4, #20
 800ab4e:	46ae      	mov	lr, r5
 800ab50:	f04f 0a00 	mov.w	sl, #0
 800ab54:	f8bc b000 	ldrh.w	fp, [ip]
 800ab58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab5c:	fb09 220b 	mla	r2, r9, fp, r2
 800ab60:	4452      	add	r2, sl
 800ab62:	b289      	uxth	r1, r1
 800ab64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab68:	f84e 1b04 	str.w	r1, [lr], #4
 800ab6c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ab70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab74:	f8be 1000 	ldrh.w	r1, [lr]
 800ab78:	fb09 110a 	mla	r1, r9, sl, r1
 800ab7c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ab80:	4567      	cmp	r7, ip
 800ab82:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab86:	d8e5      	bhi.n	800ab54 <__multiply+0x10c>
 800ab88:	9a01      	ldr	r2, [sp, #4]
 800ab8a:	50a9      	str	r1, [r5, r2]
 800ab8c:	3504      	adds	r5, #4
 800ab8e:	e799      	b.n	800aac4 <__multiply+0x7c>
 800ab90:	3e01      	subs	r6, #1
 800ab92:	e79b      	b.n	800aacc <__multiply+0x84>
 800ab94:	0800b93a 	.word	0x0800b93a
 800ab98:	0800b95c 	.word	0x0800b95c

0800ab9c <__pow5mult>:
 800ab9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aba0:	4615      	mov	r5, r2
 800aba2:	f012 0203 	ands.w	r2, r2, #3
 800aba6:	4606      	mov	r6, r0
 800aba8:	460f      	mov	r7, r1
 800abaa:	d007      	beq.n	800abbc <__pow5mult+0x20>
 800abac:	4c25      	ldr	r4, [pc, #148]	; (800ac44 <__pow5mult+0xa8>)
 800abae:	3a01      	subs	r2, #1
 800abb0:	2300      	movs	r3, #0
 800abb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800abb6:	f7ff fe9d 	bl	800a8f4 <__multadd>
 800abba:	4607      	mov	r7, r0
 800abbc:	10ad      	asrs	r5, r5, #2
 800abbe:	d03d      	beq.n	800ac3c <__pow5mult+0xa0>
 800abc0:	69f4      	ldr	r4, [r6, #28]
 800abc2:	b97c      	cbnz	r4, 800abe4 <__pow5mult+0x48>
 800abc4:	2010      	movs	r0, #16
 800abc6:	f7fe f847 	bl	8008c58 <malloc>
 800abca:	4602      	mov	r2, r0
 800abcc:	61f0      	str	r0, [r6, #28]
 800abce:	b928      	cbnz	r0, 800abdc <__pow5mult+0x40>
 800abd0:	4b1d      	ldr	r3, [pc, #116]	; (800ac48 <__pow5mult+0xac>)
 800abd2:	481e      	ldr	r0, [pc, #120]	; (800ac4c <__pow5mult+0xb0>)
 800abd4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800abd8:	f7fd fd4a 	bl	8008670 <__assert_func>
 800abdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abe0:	6004      	str	r4, [r0, #0]
 800abe2:	60c4      	str	r4, [r0, #12]
 800abe4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800abe8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800abec:	b94c      	cbnz	r4, 800ac02 <__pow5mult+0x66>
 800abee:	f240 2171 	movw	r1, #625	; 0x271
 800abf2:	4630      	mov	r0, r6
 800abf4:	f7ff ff12 	bl	800aa1c <__i2b>
 800abf8:	2300      	movs	r3, #0
 800abfa:	f8c8 0008 	str.w	r0, [r8, #8]
 800abfe:	4604      	mov	r4, r0
 800ac00:	6003      	str	r3, [r0, #0]
 800ac02:	f04f 0900 	mov.w	r9, #0
 800ac06:	07eb      	lsls	r3, r5, #31
 800ac08:	d50a      	bpl.n	800ac20 <__pow5mult+0x84>
 800ac0a:	4639      	mov	r1, r7
 800ac0c:	4622      	mov	r2, r4
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f7ff ff1a 	bl	800aa48 <__multiply>
 800ac14:	4639      	mov	r1, r7
 800ac16:	4680      	mov	r8, r0
 800ac18:	4630      	mov	r0, r6
 800ac1a:	f7ff fe49 	bl	800a8b0 <_Bfree>
 800ac1e:	4647      	mov	r7, r8
 800ac20:	106d      	asrs	r5, r5, #1
 800ac22:	d00b      	beq.n	800ac3c <__pow5mult+0xa0>
 800ac24:	6820      	ldr	r0, [r4, #0]
 800ac26:	b938      	cbnz	r0, 800ac38 <__pow5mult+0x9c>
 800ac28:	4622      	mov	r2, r4
 800ac2a:	4621      	mov	r1, r4
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	f7ff ff0b 	bl	800aa48 <__multiply>
 800ac32:	6020      	str	r0, [r4, #0]
 800ac34:	f8c0 9000 	str.w	r9, [r0]
 800ac38:	4604      	mov	r4, r0
 800ac3a:	e7e4      	b.n	800ac06 <__pow5mult+0x6a>
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac42:	bf00      	nop
 800ac44:	0800baa8 	.word	0x0800baa8
 800ac48:	0800b8cb 	.word	0x0800b8cb
 800ac4c:	0800b95c 	.word	0x0800b95c

0800ac50 <__lshift>:
 800ac50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac54:	460c      	mov	r4, r1
 800ac56:	6849      	ldr	r1, [r1, #4]
 800ac58:	6923      	ldr	r3, [r4, #16]
 800ac5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac5e:	68a3      	ldr	r3, [r4, #8]
 800ac60:	4607      	mov	r7, r0
 800ac62:	4691      	mov	r9, r2
 800ac64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac68:	f108 0601 	add.w	r6, r8, #1
 800ac6c:	42b3      	cmp	r3, r6
 800ac6e:	db0b      	blt.n	800ac88 <__lshift+0x38>
 800ac70:	4638      	mov	r0, r7
 800ac72:	f7ff fddd 	bl	800a830 <_Balloc>
 800ac76:	4605      	mov	r5, r0
 800ac78:	b948      	cbnz	r0, 800ac8e <__lshift+0x3e>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	4b28      	ldr	r3, [pc, #160]	; (800ad20 <__lshift+0xd0>)
 800ac7e:	4829      	ldr	r0, [pc, #164]	; (800ad24 <__lshift+0xd4>)
 800ac80:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ac84:	f7fd fcf4 	bl	8008670 <__assert_func>
 800ac88:	3101      	adds	r1, #1
 800ac8a:	005b      	lsls	r3, r3, #1
 800ac8c:	e7ee      	b.n	800ac6c <__lshift+0x1c>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	f100 0114 	add.w	r1, r0, #20
 800ac94:	f100 0210 	add.w	r2, r0, #16
 800ac98:	4618      	mov	r0, r3
 800ac9a:	4553      	cmp	r3, sl
 800ac9c:	db33      	blt.n	800ad06 <__lshift+0xb6>
 800ac9e:	6920      	ldr	r0, [r4, #16]
 800aca0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aca4:	f104 0314 	add.w	r3, r4, #20
 800aca8:	f019 091f 	ands.w	r9, r9, #31
 800acac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800acb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800acb4:	d02b      	beq.n	800ad0e <__lshift+0xbe>
 800acb6:	f1c9 0e20 	rsb	lr, r9, #32
 800acba:	468a      	mov	sl, r1
 800acbc:	2200      	movs	r2, #0
 800acbe:	6818      	ldr	r0, [r3, #0]
 800acc0:	fa00 f009 	lsl.w	r0, r0, r9
 800acc4:	4310      	orrs	r0, r2
 800acc6:	f84a 0b04 	str.w	r0, [sl], #4
 800acca:	f853 2b04 	ldr.w	r2, [r3], #4
 800acce:	459c      	cmp	ip, r3
 800acd0:	fa22 f20e 	lsr.w	r2, r2, lr
 800acd4:	d8f3      	bhi.n	800acbe <__lshift+0x6e>
 800acd6:	ebac 0304 	sub.w	r3, ip, r4
 800acda:	3b15      	subs	r3, #21
 800acdc:	f023 0303 	bic.w	r3, r3, #3
 800ace0:	3304      	adds	r3, #4
 800ace2:	f104 0015 	add.w	r0, r4, #21
 800ace6:	4584      	cmp	ip, r0
 800ace8:	bf38      	it	cc
 800acea:	2304      	movcc	r3, #4
 800acec:	50ca      	str	r2, [r1, r3]
 800acee:	b10a      	cbz	r2, 800acf4 <__lshift+0xa4>
 800acf0:	f108 0602 	add.w	r6, r8, #2
 800acf4:	3e01      	subs	r6, #1
 800acf6:	4638      	mov	r0, r7
 800acf8:	612e      	str	r6, [r5, #16]
 800acfa:	4621      	mov	r1, r4
 800acfc:	f7ff fdd8 	bl	800a8b0 <_Bfree>
 800ad00:	4628      	mov	r0, r5
 800ad02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad06:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	e7c5      	b.n	800ac9a <__lshift+0x4a>
 800ad0e:	3904      	subs	r1, #4
 800ad10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad14:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad18:	459c      	cmp	ip, r3
 800ad1a:	d8f9      	bhi.n	800ad10 <__lshift+0xc0>
 800ad1c:	e7ea      	b.n	800acf4 <__lshift+0xa4>
 800ad1e:	bf00      	nop
 800ad20:	0800b93a 	.word	0x0800b93a
 800ad24:	0800b95c 	.word	0x0800b95c

0800ad28 <__mcmp>:
 800ad28:	b530      	push	{r4, r5, lr}
 800ad2a:	6902      	ldr	r2, [r0, #16]
 800ad2c:	690c      	ldr	r4, [r1, #16]
 800ad2e:	1b12      	subs	r2, r2, r4
 800ad30:	d10e      	bne.n	800ad50 <__mcmp+0x28>
 800ad32:	f100 0314 	add.w	r3, r0, #20
 800ad36:	3114      	adds	r1, #20
 800ad38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad48:	42a5      	cmp	r5, r4
 800ad4a:	d003      	beq.n	800ad54 <__mcmp+0x2c>
 800ad4c:	d305      	bcc.n	800ad5a <__mcmp+0x32>
 800ad4e:	2201      	movs	r2, #1
 800ad50:	4610      	mov	r0, r2
 800ad52:	bd30      	pop	{r4, r5, pc}
 800ad54:	4283      	cmp	r3, r0
 800ad56:	d3f3      	bcc.n	800ad40 <__mcmp+0x18>
 800ad58:	e7fa      	b.n	800ad50 <__mcmp+0x28>
 800ad5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad5e:	e7f7      	b.n	800ad50 <__mcmp+0x28>

0800ad60 <__mdiff>:
 800ad60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad64:	460c      	mov	r4, r1
 800ad66:	4606      	mov	r6, r0
 800ad68:	4611      	mov	r1, r2
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	4690      	mov	r8, r2
 800ad6e:	f7ff ffdb 	bl	800ad28 <__mcmp>
 800ad72:	1e05      	subs	r5, r0, #0
 800ad74:	d110      	bne.n	800ad98 <__mdiff+0x38>
 800ad76:	4629      	mov	r1, r5
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f7ff fd59 	bl	800a830 <_Balloc>
 800ad7e:	b930      	cbnz	r0, 800ad8e <__mdiff+0x2e>
 800ad80:	4b3a      	ldr	r3, [pc, #232]	; (800ae6c <__mdiff+0x10c>)
 800ad82:	4602      	mov	r2, r0
 800ad84:	f240 2137 	movw	r1, #567	; 0x237
 800ad88:	4839      	ldr	r0, [pc, #228]	; (800ae70 <__mdiff+0x110>)
 800ad8a:	f7fd fc71 	bl	8008670 <__assert_func>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad98:	bfa4      	itt	ge
 800ad9a:	4643      	movge	r3, r8
 800ad9c:	46a0      	movge	r8, r4
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ada4:	bfa6      	itte	ge
 800ada6:	461c      	movge	r4, r3
 800ada8:	2500      	movge	r5, #0
 800adaa:	2501      	movlt	r5, #1
 800adac:	f7ff fd40 	bl	800a830 <_Balloc>
 800adb0:	b920      	cbnz	r0, 800adbc <__mdiff+0x5c>
 800adb2:	4b2e      	ldr	r3, [pc, #184]	; (800ae6c <__mdiff+0x10c>)
 800adb4:	4602      	mov	r2, r0
 800adb6:	f240 2145 	movw	r1, #581	; 0x245
 800adba:	e7e5      	b.n	800ad88 <__mdiff+0x28>
 800adbc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800adc0:	6926      	ldr	r6, [r4, #16]
 800adc2:	60c5      	str	r5, [r0, #12]
 800adc4:	f104 0914 	add.w	r9, r4, #20
 800adc8:	f108 0514 	add.w	r5, r8, #20
 800adcc:	f100 0e14 	add.w	lr, r0, #20
 800add0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800add4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800add8:	f108 0210 	add.w	r2, r8, #16
 800addc:	46f2      	mov	sl, lr
 800adde:	2100      	movs	r1, #0
 800ade0:	f859 3b04 	ldr.w	r3, [r9], #4
 800ade4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ade8:	fa11 f88b 	uxtah	r8, r1, fp
 800adec:	b299      	uxth	r1, r3
 800adee:	0c1b      	lsrs	r3, r3, #16
 800adf0:	eba8 0801 	sub.w	r8, r8, r1
 800adf4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800adf8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800adfc:	fa1f f888 	uxth.w	r8, r8
 800ae00:	1419      	asrs	r1, r3, #16
 800ae02:	454e      	cmp	r6, r9
 800ae04:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ae08:	f84a 3b04 	str.w	r3, [sl], #4
 800ae0c:	d8e8      	bhi.n	800ade0 <__mdiff+0x80>
 800ae0e:	1b33      	subs	r3, r6, r4
 800ae10:	3b15      	subs	r3, #21
 800ae12:	f023 0303 	bic.w	r3, r3, #3
 800ae16:	3304      	adds	r3, #4
 800ae18:	3415      	adds	r4, #21
 800ae1a:	42a6      	cmp	r6, r4
 800ae1c:	bf38      	it	cc
 800ae1e:	2304      	movcc	r3, #4
 800ae20:	441d      	add	r5, r3
 800ae22:	4473      	add	r3, lr
 800ae24:	469e      	mov	lr, r3
 800ae26:	462e      	mov	r6, r5
 800ae28:	4566      	cmp	r6, ip
 800ae2a:	d30e      	bcc.n	800ae4a <__mdiff+0xea>
 800ae2c:	f10c 0203 	add.w	r2, ip, #3
 800ae30:	1b52      	subs	r2, r2, r5
 800ae32:	f022 0203 	bic.w	r2, r2, #3
 800ae36:	3d03      	subs	r5, #3
 800ae38:	45ac      	cmp	ip, r5
 800ae3a:	bf38      	it	cc
 800ae3c:	2200      	movcc	r2, #0
 800ae3e:	4413      	add	r3, r2
 800ae40:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ae44:	b17a      	cbz	r2, 800ae66 <__mdiff+0x106>
 800ae46:	6107      	str	r7, [r0, #16]
 800ae48:	e7a4      	b.n	800ad94 <__mdiff+0x34>
 800ae4a:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae4e:	fa11 f288 	uxtah	r2, r1, r8
 800ae52:	1414      	asrs	r4, r2, #16
 800ae54:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae58:	b292      	uxth	r2, r2
 800ae5a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae5e:	f84e 2b04 	str.w	r2, [lr], #4
 800ae62:	1421      	asrs	r1, r4, #16
 800ae64:	e7e0      	b.n	800ae28 <__mdiff+0xc8>
 800ae66:	3f01      	subs	r7, #1
 800ae68:	e7ea      	b.n	800ae40 <__mdiff+0xe0>
 800ae6a:	bf00      	nop
 800ae6c:	0800b93a 	.word	0x0800b93a
 800ae70:	0800b95c 	.word	0x0800b95c

0800ae74 <__d2b>:
 800ae74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae78:	460f      	mov	r7, r1
 800ae7a:	2101      	movs	r1, #1
 800ae7c:	ec59 8b10 	vmov	r8, r9, d0
 800ae80:	4616      	mov	r6, r2
 800ae82:	f7ff fcd5 	bl	800a830 <_Balloc>
 800ae86:	4604      	mov	r4, r0
 800ae88:	b930      	cbnz	r0, 800ae98 <__d2b+0x24>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	4b24      	ldr	r3, [pc, #144]	; (800af20 <__d2b+0xac>)
 800ae8e:	4825      	ldr	r0, [pc, #148]	; (800af24 <__d2b+0xb0>)
 800ae90:	f240 310f 	movw	r1, #783	; 0x30f
 800ae94:	f7fd fbec 	bl	8008670 <__assert_func>
 800ae98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aea0:	bb2d      	cbnz	r5, 800aeee <__d2b+0x7a>
 800aea2:	9301      	str	r3, [sp, #4]
 800aea4:	f1b8 0300 	subs.w	r3, r8, #0
 800aea8:	d026      	beq.n	800aef8 <__d2b+0x84>
 800aeaa:	4668      	mov	r0, sp
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	f7ff fd87 	bl	800a9c0 <__lo0bits>
 800aeb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aeb6:	b1e8      	cbz	r0, 800aef4 <__d2b+0x80>
 800aeb8:	f1c0 0320 	rsb	r3, r0, #32
 800aebc:	fa02 f303 	lsl.w	r3, r2, r3
 800aec0:	430b      	orrs	r3, r1
 800aec2:	40c2      	lsrs	r2, r0
 800aec4:	6163      	str	r3, [r4, #20]
 800aec6:	9201      	str	r2, [sp, #4]
 800aec8:	9b01      	ldr	r3, [sp, #4]
 800aeca:	61a3      	str	r3, [r4, #24]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	bf14      	ite	ne
 800aed0:	2202      	movne	r2, #2
 800aed2:	2201      	moveq	r2, #1
 800aed4:	6122      	str	r2, [r4, #16]
 800aed6:	b1bd      	cbz	r5, 800af08 <__d2b+0x94>
 800aed8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aedc:	4405      	add	r5, r0
 800aede:	603d      	str	r5, [r7, #0]
 800aee0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aee4:	6030      	str	r0, [r6, #0]
 800aee6:	4620      	mov	r0, r4
 800aee8:	b003      	add	sp, #12
 800aeea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aeee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aef2:	e7d6      	b.n	800aea2 <__d2b+0x2e>
 800aef4:	6161      	str	r1, [r4, #20]
 800aef6:	e7e7      	b.n	800aec8 <__d2b+0x54>
 800aef8:	a801      	add	r0, sp, #4
 800aefa:	f7ff fd61 	bl	800a9c0 <__lo0bits>
 800aefe:	9b01      	ldr	r3, [sp, #4]
 800af00:	6163      	str	r3, [r4, #20]
 800af02:	3020      	adds	r0, #32
 800af04:	2201      	movs	r2, #1
 800af06:	e7e5      	b.n	800aed4 <__d2b+0x60>
 800af08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af10:	6038      	str	r0, [r7, #0]
 800af12:	6918      	ldr	r0, [r3, #16]
 800af14:	f7ff fd34 	bl	800a980 <__hi0bits>
 800af18:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af1c:	e7e2      	b.n	800aee4 <__d2b+0x70>
 800af1e:	bf00      	nop
 800af20:	0800b93a 	.word	0x0800b93a
 800af24:	0800b95c 	.word	0x0800b95c

0800af28 <__sread>:
 800af28:	b510      	push	{r4, lr}
 800af2a:	460c      	mov	r4, r1
 800af2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af30:	f000 f9c2 	bl	800b2b8 <_read_r>
 800af34:	2800      	cmp	r0, #0
 800af36:	bfab      	itete	ge
 800af38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af3a:	89a3      	ldrhlt	r3, [r4, #12]
 800af3c:	181b      	addge	r3, r3, r0
 800af3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af42:	bfac      	ite	ge
 800af44:	6563      	strge	r3, [r4, #84]	; 0x54
 800af46:	81a3      	strhlt	r3, [r4, #12]
 800af48:	bd10      	pop	{r4, pc}

0800af4a <__swrite>:
 800af4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af4e:	461f      	mov	r7, r3
 800af50:	898b      	ldrh	r3, [r1, #12]
 800af52:	05db      	lsls	r3, r3, #23
 800af54:	4605      	mov	r5, r0
 800af56:	460c      	mov	r4, r1
 800af58:	4616      	mov	r6, r2
 800af5a:	d505      	bpl.n	800af68 <__swrite+0x1e>
 800af5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af60:	2302      	movs	r3, #2
 800af62:	2200      	movs	r2, #0
 800af64:	f000 f996 	bl	800b294 <_lseek_r>
 800af68:	89a3      	ldrh	r3, [r4, #12]
 800af6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af72:	81a3      	strh	r3, [r4, #12]
 800af74:	4632      	mov	r2, r6
 800af76:	463b      	mov	r3, r7
 800af78:	4628      	mov	r0, r5
 800af7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af7e:	f000 b9ad 	b.w	800b2dc <_write_r>

0800af82 <__sseek>:
 800af82:	b510      	push	{r4, lr}
 800af84:	460c      	mov	r4, r1
 800af86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af8a:	f000 f983 	bl	800b294 <_lseek_r>
 800af8e:	1c43      	adds	r3, r0, #1
 800af90:	89a3      	ldrh	r3, [r4, #12]
 800af92:	bf15      	itete	ne
 800af94:	6560      	strne	r0, [r4, #84]	; 0x54
 800af96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af9e:	81a3      	strheq	r3, [r4, #12]
 800afa0:	bf18      	it	ne
 800afa2:	81a3      	strhne	r3, [r4, #12]
 800afa4:	bd10      	pop	{r4, pc}

0800afa6 <__sclose>:
 800afa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afaa:	f000 b941 	b.w	800b230 <_close_r>

0800afae <_realloc_r>:
 800afae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afb2:	4680      	mov	r8, r0
 800afb4:	4614      	mov	r4, r2
 800afb6:	460e      	mov	r6, r1
 800afb8:	b921      	cbnz	r1, 800afc4 <_realloc_r+0x16>
 800afba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afbe:	4611      	mov	r1, r2
 800afc0:	f7fd be7a 	b.w	8008cb8 <_malloc_r>
 800afc4:	b92a      	cbnz	r2, 800afd2 <_realloc_r+0x24>
 800afc6:	f7ff f89d 	bl	800a104 <_free_r>
 800afca:	4625      	mov	r5, r4
 800afcc:	4628      	mov	r0, r5
 800afce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd2:	f000 f9bd 	bl	800b350 <_malloc_usable_size_r>
 800afd6:	4284      	cmp	r4, r0
 800afd8:	4607      	mov	r7, r0
 800afda:	d802      	bhi.n	800afe2 <_realloc_r+0x34>
 800afdc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800afe0:	d812      	bhi.n	800b008 <_realloc_r+0x5a>
 800afe2:	4621      	mov	r1, r4
 800afe4:	4640      	mov	r0, r8
 800afe6:	f7fd fe67 	bl	8008cb8 <_malloc_r>
 800afea:	4605      	mov	r5, r0
 800afec:	2800      	cmp	r0, #0
 800afee:	d0ed      	beq.n	800afcc <_realloc_r+0x1e>
 800aff0:	42bc      	cmp	r4, r7
 800aff2:	4622      	mov	r2, r4
 800aff4:	4631      	mov	r1, r6
 800aff6:	bf28      	it	cs
 800aff8:	463a      	movcs	r2, r7
 800affa:	f7fe f9fa 	bl	80093f2 <memcpy>
 800affe:	4631      	mov	r1, r6
 800b000:	4640      	mov	r0, r8
 800b002:	f7ff f87f 	bl	800a104 <_free_r>
 800b006:	e7e1      	b.n	800afcc <_realloc_r+0x1e>
 800b008:	4635      	mov	r5, r6
 800b00a:	e7df      	b.n	800afcc <_realloc_r+0x1e>

0800b00c <__swbuf_r>:
 800b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00e:	460e      	mov	r6, r1
 800b010:	4614      	mov	r4, r2
 800b012:	4605      	mov	r5, r0
 800b014:	b118      	cbz	r0, 800b01e <__swbuf_r+0x12>
 800b016:	6a03      	ldr	r3, [r0, #32]
 800b018:	b90b      	cbnz	r3, 800b01e <__swbuf_r+0x12>
 800b01a:	f7fe f915 	bl	8009248 <__sinit>
 800b01e:	69a3      	ldr	r3, [r4, #24]
 800b020:	60a3      	str	r3, [r4, #8]
 800b022:	89a3      	ldrh	r3, [r4, #12]
 800b024:	071a      	lsls	r2, r3, #28
 800b026:	d525      	bpl.n	800b074 <__swbuf_r+0x68>
 800b028:	6923      	ldr	r3, [r4, #16]
 800b02a:	b31b      	cbz	r3, 800b074 <__swbuf_r+0x68>
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	6922      	ldr	r2, [r4, #16]
 800b030:	1a98      	subs	r0, r3, r2
 800b032:	6963      	ldr	r3, [r4, #20]
 800b034:	b2f6      	uxtb	r6, r6
 800b036:	4283      	cmp	r3, r0
 800b038:	4637      	mov	r7, r6
 800b03a:	dc04      	bgt.n	800b046 <__swbuf_r+0x3a>
 800b03c:	4621      	mov	r1, r4
 800b03e:	4628      	mov	r0, r5
 800b040:	f7ff fbce 	bl	800a7e0 <_fflush_r>
 800b044:	b9e0      	cbnz	r0, 800b080 <__swbuf_r+0x74>
 800b046:	68a3      	ldr	r3, [r4, #8]
 800b048:	3b01      	subs	r3, #1
 800b04a:	60a3      	str	r3, [r4, #8]
 800b04c:	6823      	ldr	r3, [r4, #0]
 800b04e:	1c5a      	adds	r2, r3, #1
 800b050:	6022      	str	r2, [r4, #0]
 800b052:	701e      	strb	r6, [r3, #0]
 800b054:	6962      	ldr	r2, [r4, #20]
 800b056:	1c43      	adds	r3, r0, #1
 800b058:	429a      	cmp	r2, r3
 800b05a:	d004      	beq.n	800b066 <__swbuf_r+0x5a>
 800b05c:	89a3      	ldrh	r3, [r4, #12]
 800b05e:	07db      	lsls	r3, r3, #31
 800b060:	d506      	bpl.n	800b070 <__swbuf_r+0x64>
 800b062:	2e0a      	cmp	r6, #10
 800b064:	d104      	bne.n	800b070 <__swbuf_r+0x64>
 800b066:	4621      	mov	r1, r4
 800b068:	4628      	mov	r0, r5
 800b06a:	f7ff fbb9 	bl	800a7e0 <_fflush_r>
 800b06e:	b938      	cbnz	r0, 800b080 <__swbuf_r+0x74>
 800b070:	4638      	mov	r0, r7
 800b072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b074:	4621      	mov	r1, r4
 800b076:	4628      	mov	r0, r5
 800b078:	f000 f806 	bl	800b088 <__swsetup_r>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	d0d5      	beq.n	800b02c <__swbuf_r+0x20>
 800b080:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b084:	e7f4      	b.n	800b070 <__swbuf_r+0x64>
	...

0800b088 <__swsetup_r>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	4b2a      	ldr	r3, [pc, #168]	; (800b134 <__swsetup_r+0xac>)
 800b08c:	4605      	mov	r5, r0
 800b08e:	6818      	ldr	r0, [r3, #0]
 800b090:	460c      	mov	r4, r1
 800b092:	b118      	cbz	r0, 800b09c <__swsetup_r+0x14>
 800b094:	6a03      	ldr	r3, [r0, #32]
 800b096:	b90b      	cbnz	r3, 800b09c <__swsetup_r+0x14>
 800b098:	f7fe f8d6 	bl	8009248 <__sinit>
 800b09c:	89a3      	ldrh	r3, [r4, #12]
 800b09e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0a2:	0718      	lsls	r0, r3, #28
 800b0a4:	d422      	bmi.n	800b0ec <__swsetup_r+0x64>
 800b0a6:	06d9      	lsls	r1, r3, #27
 800b0a8:	d407      	bmi.n	800b0ba <__swsetup_r+0x32>
 800b0aa:	2309      	movs	r3, #9
 800b0ac:	602b      	str	r3, [r5, #0]
 800b0ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b0b2:	81a3      	strh	r3, [r4, #12]
 800b0b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0b8:	e034      	b.n	800b124 <__swsetup_r+0x9c>
 800b0ba:	0758      	lsls	r0, r3, #29
 800b0bc:	d512      	bpl.n	800b0e4 <__swsetup_r+0x5c>
 800b0be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0c0:	b141      	cbz	r1, 800b0d4 <__swsetup_r+0x4c>
 800b0c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0c6:	4299      	cmp	r1, r3
 800b0c8:	d002      	beq.n	800b0d0 <__swsetup_r+0x48>
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	f7ff f81a 	bl	800a104 <_free_r>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	6363      	str	r3, [r4, #52]	; 0x34
 800b0d4:	89a3      	ldrh	r3, [r4, #12]
 800b0d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0da:	81a3      	strh	r3, [r4, #12]
 800b0dc:	2300      	movs	r3, #0
 800b0de:	6063      	str	r3, [r4, #4]
 800b0e0:	6923      	ldr	r3, [r4, #16]
 800b0e2:	6023      	str	r3, [r4, #0]
 800b0e4:	89a3      	ldrh	r3, [r4, #12]
 800b0e6:	f043 0308 	orr.w	r3, r3, #8
 800b0ea:	81a3      	strh	r3, [r4, #12]
 800b0ec:	6923      	ldr	r3, [r4, #16]
 800b0ee:	b94b      	cbnz	r3, 800b104 <__swsetup_r+0x7c>
 800b0f0:	89a3      	ldrh	r3, [r4, #12]
 800b0f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0fa:	d003      	beq.n	800b104 <__swsetup_r+0x7c>
 800b0fc:	4621      	mov	r1, r4
 800b0fe:	4628      	mov	r0, r5
 800b100:	f000 f840 	bl	800b184 <__smakebuf_r>
 800b104:	89a0      	ldrh	r0, [r4, #12]
 800b106:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b10a:	f010 0301 	ands.w	r3, r0, #1
 800b10e:	d00a      	beq.n	800b126 <__swsetup_r+0x9e>
 800b110:	2300      	movs	r3, #0
 800b112:	60a3      	str	r3, [r4, #8]
 800b114:	6963      	ldr	r3, [r4, #20]
 800b116:	425b      	negs	r3, r3
 800b118:	61a3      	str	r3, [r4, #24]
 800b11a:	6923      	ldr	r3, [r4, #16]
 800b11c:	b943      	cbnz	r3, 800b130 <__swsetup_r+0xa8>
 800b11e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b122:	d1c4      	bne.n	800b0ae <__swsetup_r+0x26>
 800b124:	bd38      	pop	{r3, r4, r5, pc}
 800b126:	0781      	lsls	r1, r0, #30
 800b128:	bf58      	it	pl
 800b12a:	6963      	ldrpl	r3, [r4, #20]
 800b12c:	60a3      	str	r3, [r4, #8]
 800b12e:	e7f4      	b.n	800b11a <__swsetup_r+0x92>
 800b130:	2000      	movs	r0, #0
 800b132:	e7f7      	b.n	800b124 <__swsetup_r+0x9c>
 800b134:	2000006c 	.word	0x2000006c

0800b138 <__swhatbuf_r>:
 800b138:	b570      	push	{r4, r5, r6, lr}
 800b13a:	460c      	mov	r4, r1
 800b13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b140:	2900      	cmp	r1, #0
 800b142:	b096      	sub	sp, #88	; 0x58
 800b144:	4615      	mov	r5, r2
 800b146:	461e      	mov	r6, r3
 800b148:	da0d      	bge.n	800b166 <__swhatbuf_r+0x2e>
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b150:	f04f 0100 	mov.w	r1, #0
 800b154:	bf0c      	ite	eq
 800b156:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b15a:	2340      	movne	r3, #64	; 0x40
 800b15c:	2000      	movs	r0, #0
 800b15e:	6031      	str	r1, [r6, #0]
 800b160:	602b      	str	r3, [r5, #0]
 800b162:	b016      	add	sp, #88	; 0x58
 800b164:	bd70      	pop	{r4, r5, r6, pc}
 800b166:	466a      	mov	r2, sp
 800b168:	f000 f872 	bl	800b250 <_fstat_r>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	dbec      	blt.n	800b14a <__swhatbuf_r+0x12>
 800b170:	9901      	ldr	r1, [sp, #4]
 800b172:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b176:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b17a:	4259      	negs	r1, r3
 800b17c:	4159      	adcs	r1, r3
 800b17e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b182:	e7eb      	b.n	800b15c <__swhatbuf_r+0x24>

0800b184 <__smakebuf_r>:
 800b184:	898b      	ldrh	r3, [r1, #12]
 800b186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b188:	079d      	lsls	r5, r3, #30
 800b18a:	4606      	mov	r6, r0
 800b18c:	460c      	mov	r4, r1
 800b18e:	d507      	bpl.n	800b1a0 <__smakebuf_r+0x1c>
 800b190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b194:	6023      	str	r3, [r4, #0]
 800b196:	6123      	str	r3, [r4, #16]
 800b198:	2301      	movs	r3, #1
 800b19a:	6163      	str	r3, [r4, #20]
 800b19c:	b002      	add	sp, #8
 800b19e:	bd70      	pop	{r4, r5, r6, pc}
 800b1a0:	ab01      	add	r3, sp, #4
 800b1a2:	466a      	mov	r2, sp
 800b1a4:	f7ff ffc8 	bl	800b138 <__swhatbuf_r>
 800b1a8:	9900      	ldr	r1, [sp, #0]
 800b1aa:	4605      	mov	r5, r0
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	f7fd fd83 	bl	8008cb8 <_malloc_r>
 800b1b2:	b948      	cbnz	r0, 800b1c8 <__smakebuf_r+0x44>
 800b1b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1b8:	059a      	lsls	r2, r3, #22
 800b1ba:	d4ef      	bmi.n	800b19c <__smakebuf_r+0x18>
 800b1bc:	f023 0303 	bic.w	r3, r3, #3
 800b1c0:	f043 0302 	orr.w	r3, r3, #2
 800b1c4:	81a3      	strh	r3, [r4, #12]
 800b1c6:	e7e3      	b.n	800b190 <__smakebuf_r+0xc>
 800b1c8:	89a3      	ldrh	r3, [r4, #12]
 800b1ca:	6020      	str	r0, [r4, #0]
 800b1cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1d0:	81a3      	strh	r3, [r4, #12]
 800b1d2:	9b00      	ldr	r3, [sp, #0]
 800b1d4:	6163      	str	r3, [r4, #20]
 800b1d6:	9b01      	ldr	r3, [sp, #4]
 800b1d8:	6120      	str	r0, [r4, #16]
 800b1da:	b15b      	cbz	r3, 800b1f4 <__smakebuf_r+0x70>
 800b1dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f000 f847 	bl	800b274 <_isatty_r>
 800b1e6:	b128      	cbz	r0, 800b1f4 <__smakebuf_r+0x70>
 800b1e8:	89a3      	ldrh	r3, [r4, #12]
 800b1ea:	f023 0303 	bic.w	r3, r3, #3
 800b1ee:	f043 0301 	orr.w	r3, r3, #1
 800b1f2:	81a3      	strh	r3, [r4, #12]
 800b1f4:	89a3      	ldrh	r3, [r4, #12]
 800b1f6:	431d      	orrs	r5, r3
 800b1f8:	81a5      	strh	r5, [r4, #12]
 800b1fa:	e7cf      	b.n	800b19c <__smakebuf_r+0x18>

0800b1fc <memmove>:
 800b1fc:	4288      	cmp	r0, r1
 800b1fe:	b510      	push	{r4, lr}
 800b200:	eb01 0402 	add.w	r4, r1, r2
 800b204:	d902      	bls.n	800b20c <memmove+0x10>
 800b206:	4284      	cmp	r4, r0
 800b208:	4623      	mov	r3, r4
 800b20a:	d807      	bhi.n	800b21c <memmove+0x20>
 800b20c:	1e43      	subs	r3, r0, #1
 800b20e:	42a1      	cmp	r1, r4
 800b210:	d008      	beq.n	800b224 <memmove+0x28>
 800b212:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b21a:	e7f8      	b.n	800b20e <memmove+0x12>
 800b21c:	4402      	add	r2, r0
 800b21e:	4601      	mov	r1, r0
 800b220:	428a      	cmp	r2, r1
 800b222:	d100      	bne.n	800b226 <memmove+0x2a>
 800b224:	bd10      	pop	{r4, pc}
 800b226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b22a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b22e:	e7f7      	b.n	800b220 <memmove+0x24>

0800b230 <_close_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	4d06      	ldr	r5, [pc, #24]	; (800b24c <_close_r+0x1c>)
 800b234:	2300      	movs	r3, #0
 800b236:	4604      	mov	r4, r0
 800b238:	4608      	mov	r0, r1
 800b23a:	602b      	str	r3, [r5, #0]
 800b23c:	f7f7 ffb8 	bl	80031b0 <_close>
 800b240:	1c43      	adds	r3, r0, #1
 800b242:	d102      	bne.n	800b24a <_close_r+0x1a>
 800b244:	682b      	ldr	r3, [r5, #0]
 800b246:	b103      	cbz	r3, 800b24a <_close_r+0x1a>
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	bd38      	pop	{r3, r4, r5, pc}
 800b24c:	20004de0 	.word	0x20004de0

0800b250 <_fstat_r>:
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	4d07      	ldr	r5, [pc, #28]	; (800b270 <_fstat_r+0x20>)
 800b254:	2300      	movs	r3, #0
 800b256:	4604      	mov	r4, r0
 800b258:	4608      	mov	r0, r1
 800b25a:	4611      	mov	r1, r2
 800b25c:	602b      	str	r3, [r5, #0]
 800b25e:	f7f7 ffb3 	bl	80031c8 <_fstat>
 800b262:	1c43      	adds	r3, r0, #1
 800b264:	d102      	bne.n	800b26c <_fstat_r+0x1c>
 800b266:	682b      	ldr	r3, [r5, #0]
 800b268:	b103      	cbz	r3, 800b26c <_fstat_r+0x1c>
 800b26a:	6023      	str	r3, [r4, #0]
 800b26c:	bd38      	pop	{r3, r4, r5, pc}
 800b26e:	bf00      	nop
 800b270:	20004de0 	.word	0x20004de0

0800b274 <_isatty_r>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	4d06      	ldr	r5, [pc, #24]	; (800b290 <_isatty_r+0x1c>)
 800b278:	2300      	movs	r3, #0
 800b27a:	4604      	mov	r4, r0
 800b27c:	4608      	mov	r0, r1
 800b27e:	602b      	str	r3, [r5, #0]
 800b280:	f7f7 ffb2 	bl	80031e8 <_isatty>
 800b284:	1c43      	adds	r3, r0, #1
 800b286:	d102      	bne.n	800b28e <_isatty_r+0x1a>
 800b288:	682b      	ldr	r3, [r5, #0]
 800b28a:	b103      	cbz	r3, 800b28e <_isatty_r+0x1a>
 800b28c:	6023      	str	r3, [r4, #0]
 800b28e:	bd38      	pop	{r3, r4, r5, pc}
 800b290:	20004de0 	.word	0x20004de0

0800b294 <_lseek_r>:
 800b294:	b538      	push	{r3, r4, r5, lr}
 800b296:	4d07      	ldr	r5, [pc, #28]	; (800b2b4 <_lseek_r+0x20>)
 800b298:	4604      	mov	r4, r0
 800b29a:	4608      	mov	r0, r1
 800b29c:	4611      	mov	r1, r2
 800b29e:	2200      	movs	r2, #0
 800b2a0:	602a      	str	r2, [r5, #0]
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	f7f7 ffab 	bl	80031fe <_lseek>
 800b2a8:	1c43      	adds	r3, r0, #1
 800b2aa:	d102      	bne.n	800b2b2 <_lseek_r+0x1e>
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	b103      	cbz	r3, 800b2b2 <_lseek_r+0x1e>
 800b2b0:	6023      	str	r3, [r4, #0]
 800b2b2:	bd38      	pop	{r3, r4, r5, pc}
 800b2b4:	20004de0 	.word	0x20004de0

0800b2b8 <_read_r>:
 800b2b8:	b538      	push	{r3, r4, r5, lr}
 800b2ba:	4d07      	ldr	r5, [pc, #28]	; (800b2d8 <_read_r+0x20>)
 800b2bc:	4604      	mov	r4, r0
 800b2be:	4608      	mov	r0, r1
 800b2c0:	4611      	mov	r1, r2
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	602a      	str	r2, [r5, #0]
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	f7f7 ff39 	bl	800313e <_read>
 800b2cc:	1c43      	adds	r3, r0, #1
 800b2ce:	d102      	bne.n	800b2d6 <_read_r+0x1e>
 800b2d0:	682b      	ldr	r3, [r5, #0]
 800b2d2:	b103      	cbz	r3, 800b2d6 <_read_r+0x1e>
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	bd38      	pop	{r3, r4, r5, pc}
 800b2d8:	20004de0 	.word	0x20004de0

0800b2dc <_write_r>:
 800b2dc:	b538      	push	{r3, r4, r5, lr}
 800b2de:	4d07      	ldr	r5, [pc, #28]	; (800b2fc <_write_r+0x20>)
 800b2e0:	4604      	mov	r4, r0
 800b2e2:	4608      	mov	r0, r1
 800b2e4:	4611      	mov	r1, r2
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	602a      	str	r2, [r5, #0]
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	f7f7 ff44 	bl	8003178 <_write>
 800b2f0:	1c43      	adds	r3, r0, #1
 800b2f2:	d102      	bne.n	800b2fa <_write_r+0x1e>
 800b2f4:	682b      	ldr	r3, [r5, #0]
 800b2f6:	b103      	cbz	r3, 800b2fa <_write_r+0x1e>
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	bd38      	pop	{r3, r4, r5, pc}
 800b2fc:	20004de0 	.word	0x20004de0

0800b300 <_calloc_r>:
 800b300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b302:	fba1 2402 	umull	r2, r4, r1, r2
 800b306:	b94c      	cbnz	r4, 800b31c <_calloc_r+0x1c>
 800b308:	4611      	mov	r1, r2
 800b30a:	9201      	str	r2, [sp, #4]
 800b30c:	f7fd fcd4 	bl	8008cb8 <_malloc_r>
 800b310:	9a01      	ldr	r2, [sp, #4]
 800b312:	4605      	mov	r5, r0
 800b314:	b930      	cbnz	r0, 800b324 <_calloc_r+0x24>
 800b316:	4628      	mov	r0, r5
 800b318:	b003      	add	sp, #12
 800b31a:	bd30      	pop	{r4, r5, pc}
 800b31c:	220c      	movs	r2, #12
 800b31e:	6002      	str	r2, [r0, #0]
 800b320:	2500      	movs	r5, #0
 800b322:	e7f8      	b.n	800b316 <_calloc_r+0x16>
 800b324:	4621      	mov	r1, r4
 800b326:	f7fd ffd7 	bl	80092d8 <memset>
 800b32a:	e7f4      	b.n	800b316 <_calloc_r+0x16>

0800b32c <__ascii_mbtowc>:
 800b32c:	b082      	sub	sp, #8
 800b32e:	b901      	cbnz	r1, 800b332 <__ascii_mbtowc+0x6>
 800b330:	a901      	add	r1, sp, #4
 800b332:	b142      	cbz	r2, 800b346 <__ascii_mbtowc+0x1a>
 800b334:	b14b      	cbz	r3, 800b34a <__ascii_mbtowc+0x1e>
 800b336:	7813      	ldrb	r3, [r2, #0]
 800b338:	600b      	str	r3, [r1, #0]
 800b33a:	7812      	ldrb	r2, [r2, #0]
 800b33c:	1e10      	subs	r0, r2, #0
 800b33e:	bf18      	it	ne
 800b340:	2001      	movne	r0, #1
 800b342:	b002      	add	sp, #8
 800b344:	4770      	bx	lr
 800b346:	4610      	mov	r0, r2
 800b348:	e7fb      	b.n	800b342 <__ascii_mbtowc+0x16>
 800b34a:	f06f 0001 	mvn.w	r0, #1
 800b34e:	e7f8      	b.n	800b342 <__ascii_mbtowc+0x16>

0800b350 <_malloc_usable_size_r>:
 800b350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b354:	1f18      	subs	r0, r3, #4
 800b356:	2b00      	cmp	r3, #0
 800b358:	bfbc      	itt	lt
 800b35a:	580b      	ldrlt	r3, [r1, r0]
 800b35c:	18c0      	addlt	r0, r0, r3
 800b35e:	4770      	bx	lr

0800b360 <__ascii_wctomb>:
 800b360:	b149      	cbz	r1, 800b376 <__ascii_wctomb+0x16>
 800b362:	2aff      	cmp	r2, #255	; 0xff
 800b364:	bf85      	ittet	hi
 800b366:	238a      	movhi	r3, #138	; 0x8a
 800b368:	6003      	strhi	r3, [r0, #0]
 800b36a:	700a      	strbls	r2, [r1, #0]
 800b36c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b370:	bf98      	it	ls
 800b372:	2001      	movls	r0, #1
 800b374:	4770      	bx	lr
 800b376:	4608      	mov	r0, r1
 800b378:	4770      	bx	lr
	...

0800b37c <_init>:
 800b37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37e:	bf00      	nop
 800b380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b382:	bc08      	pop	{r3}
 800b384:	469e      	mov	lr, r3
 800b386:	4770      	bx	lr

0800b388 <_fini>:
 800b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38a:	bf00      	nop
 800b38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b38e:	bc08      	pop	{r3}
 800b390:	469e      	mov	lr, r3
 800b392:	4770      	bx	lr
