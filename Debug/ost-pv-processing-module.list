
ost-pv-processing-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b728  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800b8b8  0800b8b8  0001b8b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be3c  0800be3c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800be3c  0800be3c  0001be3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be44  0800be44  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be44  0800be44  0001be44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be48  0800be48  0001be48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800be4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b28  200001e4  0800c030  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d0c  0800c030  00024d0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c195  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000360f  00000000  00000000  0003c3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  0003f9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  00040c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b6d  00000000  00000000  00041d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a8b  00000000  00000000  000658d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1a29  00000000  00000000  0007b360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014cd89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061d4  00000000  00000000  0014cddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8a0 	.word	0x0800b8a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800b8a0 	.word	0x0800b8a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <_Z19configure_MPL3115A2R17I2C_HandleTypeDef>:

#include "MPL3115A2.h"

HAL_StatusTypeDef result;

void configure_MPL3115A2(I2C_HandleTypeDef &i2c_device) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af04      	add	r7, sp, #16
 8000ff2:	6078      	str	r0, [r7, #4]

	// Data to set the control register 0b00111000 [ALT RAW OS2 OS1 OS0 0 OST SB]
	uint8_t config_data = 0x39;
 8000ff4:	2339      	movs	r3, #57	; 0x39
 8000ff6:	73fb      	strb	r3, [r7, #15]

	result = HAL_I2C_Mem_Write(&i2c_device, MPL3115A2_WRITE_ADDR, CTRL_REG_1,
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2301      	movs	r3, #1
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	f107 030f 	add.w	r3, r7, #15
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	2226      	movs	r2, #38	; 0x26
 800100c:	21c0      	movs	r1, #192	; 0xc0
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f001 fbee 	bl	80027f0 <HAL_I2C_Mem_Write>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	4b02      	ldr	r3, [pc, #8]	; (8001024 <_Z19configure_MPL3115A2R17I2C_HandleTypeDef+0x38>)
 800101a:	701a      	strb	r2, [r3, #0]
			I2C_MEMADD_SIZE_8BIT, &config_data, 1, HAL_MAX_DELAY);
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000200 	.word	0x20000200

08001028 <_Z25read_baromateric_pressureR17I2C_HandleTypeDef>:

float read_baromateric_pressure(I2C_HandleTypeDef &i2c_device) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af04      	add	r7, sp, #16
 800102e:	6078      	str	r0, [r7, #4]
	uint8_t pressure_data[3];
	int32_t pressure_raw;

	// Read pressure data from the sensor (3 bytes)
	result = HAL_I2C_Mem_Read(&i2c_device, MPL3115A2_READ_ADDR, PRESSURE_MSB,
 8001030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2303      	movs	r3, #3
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2201      	movs	r2, #1
 8001044:	21c1      	movs	r1, #193	; 0xc1
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f001 fccc 	bl	80029e4 <HAL_I2C_Mem_Read>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <_Z25read_baromateric_pressureR17I2C_HandleTypeDef+0x68>)
 8001052:	701a      	strb	r2, [r3, #0]
	                          I2C_MEMADD_SIZE_8BIT, pressure_data, 3, HAL_MAX_DELAY);

	// Combine the data bytes to get the pressure value (20 bits)
	pressure_raw = ((int32_t)pressure_data[0] << 12) | ((int32_t)pressure_data[1] << 4) | ((pressure_data[2] >> 4) & 0x0F);
 8001054:	7b3b      	ldrb	r3, [r7, #12]
 8001056:	031a      	lsls	r2, r3, #12
 8001058:	7b7b      	ldrb	r3, [r7, #13]
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	4313      	orrs	r3, r2
 800105e:	7bba      	ldrb	r2, [r7, #14]
 8001060:	0912      	lsrs	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	4313      	orrs	r3, r2
 8001066:	617b      	str	r3, [r7, #20]

	// Convert to a double value in Pascals (adjust as needed)
	float pressure_pascals = (float) pressure_raw / 4.0;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	ee07 3a90 	vmov	s15, r3
 800106e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001072:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001076:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800107a:	edc7 7a04 	vstr	s15, [r7, #16]

    return pressure_pascals;
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	ee07 3a90 	vmov	s15, r3
}
 8001084:	eeb0 0a67 	vmov.f32	s0, s15
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000200 	.word	0x20000200

08001094 <_ZN6VC0706C1EP20__UART_HandleTypeDef>:

#include "VC0706.h"

UART_HandleTypeDef huart1;

VC0706::VC0706(UART_HandleTypeDef *huart) {
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
    this->huart = huart;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	66da      	str	r2, [r3, #108]	; 0x6c
    frame_ptr = 0;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	669a      	str	r2, [r3, #104]	; 0x68
    buffer_len = 0;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    serial_num = 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
}
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <_ZN6VC07065beginEv>:

bool VC0706::begin() {
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
	return reset();
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f805 	bl	80010de <_ZN6VC07065resetEv>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <_ZN6VC07065resetEv>:

bool VC0706::reset() {
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af02      	add	r7, sp, #8
 80010e4:	6078      	str	r0, [r7, #4]
	uint8_t args[] = {0x0};
 80010e6:	2300      	movs	r3, #0
 80010e8:	733b      	strb	r3, [r7, #12]
	return run_command(VC0706_RESET, args, 1, 5);
 80010ea:	f107 020c 	add.w	r2, r7, #12
 80010ee:	2301      	movs	r3, #1
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	2305      	movs	r3, #5
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	2126      	movs	r1, #38	; 0x26
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 f90d 	bl	800131a <_ZN6VC070611run_commandEhPhhhb>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <_ZN6VC070612take_pictureEv>:

bool VC0706::take_picture() {
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af02      	add	r7, sp, #8
 8001110:	6078      	str	r0, [r7, #4]
	frame_ptr = 0;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	669a      	str	r2, [r3, #104]	; 0x68
	uint8_t args[] = {0x1, VC0706_STOPCURRENTFRAME};
 8001118:	2301      	movs	r3, #1
 800111a:	81bb      	strh	r3, [r7, #12]
	bool result = run_command(VC0706_FBUF_CTRL, args, sizeof(args), 5);
 800111c:	f107 020c 	add.w	r2, r7, #12
 8001120:	2301      	movs	r3, #1
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	2305      	movs	r3, #5
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2302      	movs	r3, #2
 800112a:	2136      	movs	r1, #54	; 0x36
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 f8f4 	bl	800131a <_ZN6VC070611run_commandEhPhhhb>
 8001132:	4603      	mov	r3, r0
 8001134:	73fb      	strb	r3, [r7, #15]
	return result;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <_ZN6VC070612read_pictureEh>:

uint8_t* VC0706::read_picture(uint8_t n) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af02      	add	r7, sp, #8
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
	uint8_t args[] = {0x0C,
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	731a      	strb	r2, [r3, #12]
 800115a:	230c      	movs	r3, #12
 800115c:	723b      	strb	r3, [r7, #8]
 800115e:	230a      	movs	r3, #10
 8001160:	72bb      	strb	r3, [r7, #10]
 8001162:	230a      	movs	r3, #10
 8001164:	753b      	strb	r3, [r7, #20]
	                  0x0,
	                  0x0A, 	//MCU mode
	                  (uint8_t)((frame_ptr >> 24) & 0xFF),
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800116a:	0e1b      	lsrs	r3, r3, #24
	                  0,
	                  0,
	                  0,
	                  n,
	                  CAMERADELAY >> 8,
					  CAMERADELAY & 0xFF};
 800116c:	b2db      	uxtb	r3, r3
 800116e:	72fb      	strb	r3, [r7, #11]
	                  (uint8_t)((frame_ptr >> 16) & 0xFF),
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001174:	0c1b      	lsrs	r3, r3, #16
					  CAMERADELAY & 0xFF};
 8001176:	b2db      	uxtb	r3, r3
 8001178:	733b      	strb	r3, [r7, #12]
	                  (uint8_t)((frame_ptr >> 8) & 0xFF),
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800117e:	0a1b      	lsrs	r3, r3, #8
					  CAMERADELAY & 0xFF};
 8001180:	b2db      	uxtb	r3, r3
 8001182:	737b      	strb	r3, [r7, #13]
	                  (uint8_t)(frame_ptr & 0xFF),
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
					  CAMERADELAY & 0xFF};
 8001188:	b2db      	uxtb	r3, r3
 800118a:	73bb      	strb	r3, [r7, #14]
 800118c:	78fb      	ldrb	r3, [r7, #3]
 800118e:	74bb      	strb	r3, [r7, #18]

	bool result = run_command(VC0706_READ_FBUF, args, sizeof(args), 5, false);
 8001190:	f107 0208 	add.w	r2, r7, #8
 8001194:	2300      	movs	r3, #0
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	2305      	movs	r3, #5
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	230d      	movs	r3, #13
 800119e:	2132      	movs	r1, #50	; 0x32
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f8ba 	bl	800131a <_ZN6VC070611run_commandEhPhhhb>
 80011a6:	4603      	mov	r3, r0
 80011a8:	75fb      	strb	r3, [r7, #23]
	if (!result)
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	f083 0301 	eor.w	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <_ZN6VC070612read_pictureEh+0x7a>
		return 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e019      	b.n	80011ee <_ZN6VC070612read_pictureEh+0xae>

	// read into the buffer
	if (read_response(n + 5, CAMERADELAY) == 0)
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	3305      	adds	r3, #5
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	220a      	movs	r2, #10
 80011c2:	4619      	mov	r1, r3
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 f910 	bl	80013ea <_ZN6VC070613read_responseEhh>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	bf0c      	ite	eq
 80011d0:	2301      	moveq	r3, #1
 80011d2:	2300      	movne	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <_ZN6VC070612read_pictureEh+0x9e>
		return 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	e007      	b.n	80011ee <_ZN6VC070612read_pictureEh+0xae>

	frame_ptr += n;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	441a      	add	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	669a      	str	r2, [r3, #104]	; 0x68

	return camera_buff;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3301      	adds	r3, #1
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <_ZN6VC070614get_image_sizeEv>:

uint8_t VC0706::get_image_size() {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	6078      	str	r0, [r7, #4]
	uint8_t args[] = {0x4, 0x4, 0x1, 0x00, 0x19};
 8001200:	4a10      	ldr	r2, [pc, #64]	; (8001244 <_ZN6VC070614get_image_sizeEv+0x4c>)
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	e892 0003 	ldmia.w	r2, {r0, r1}
 800120a:	6018      	str	r0, [r3, #0]
 800120c:	3304      	adds	r3, #4
 800120e:	7019      	strb	r1, [r3, #0]
	if (!run_command(VC0706_READ_DATA, args, sizeof(args), 6))
 8001210:	f107 0208 	add.w	r2, r7, #8
 8001214:	2301      	movs	r3, #1
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	2306      	movs	r3, #6
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2305      	movs	r3, #5
 800121e:	2130      	movs	r1, #48	; 0x30
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 f87a 	bl	800131a <_ZN6VC070611run_commandEhPhhhb>
 8001226:	4603      	mov	r3, r0
 8001228:	f083 0301 	eor.w	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <_ZN6VC070614get_image_sizeEv+0x3e>
		return -1;
 8001232:	23ff      	movs	r3, #255	; 0xff
 8001234:	e001      	b.n	800123a <_ZN6VC070614get_image_sizeEv+0x42>

	return camera_buff[5];
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	799b      	ldrb	r3, [r3, #6]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	0800b8b8 	.word	0x0800b8b8

08001248 <_ZN6VC070614set_image_sizeEh>:

bool VC0706::set_image_size(uint8_t size) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af02      	add	r7, sp, #8
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	70fb      	strb	r3, [r7, #3]
	uint8_t args[] = {0x05, 0x04, 0x01, 0x00, 0x19, size};
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	809a      	strh	r2, [r3, #4]
 800125e:	2305      	movs	r3, #5
 8001260:	723b      	strb	r3, [r7, #8]
 8001262:	2304      	movs	r3, #4
 8001264:	727b      	strb	r3, [r7, #9]
 8001266:	2301      	movs	r3, #1
 8001268:	72bb      	strb	r3, [r7, #10]
 800126a:	2319      	movs	r3, #25
 800126c:	733b      	strb	r3, [r7, #12]
 800126e:	78fb      	ldrb	r3, [r7, #3]
 8001270:	737b      	strb	r3, [r7, #13]

	if (size < VC0706_1024x768)
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	2b32      	cmp	r3, #50	; 0x32
 8001276:	d802      	bhi.n	800127e <_ZN6VC070614set_image_sizeEh+0x36>
    // standard image resolution
		args[1] = 0x04;
 8001278:	2304      	movs	r3, #4
 800127a:	727b      	strb	r3, [r7, #9]
 800127c:	e001      	b.n	8001282 <_ZN6VC070614set_image_sizeEh+0x3a>
	else
	// extended image resolution
		args[1] = 0x05;
 800127e:	2305      	movs	r3, #5
 8001280:	727b      	strb	r3, [r7, #9]

	return run_command(VC0706_WRITE_DATA, args, sizeof(args), 5);
 8001282:	f107 0208 	add.w	r2, r7, #8
 8001286:	2301      	movs	r3, #1
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	2305      	movs	r3, #5
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2306      	movs	r3, #6
 8001290:	2131      	movs	r1, #49	; 0x31
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 f841 	bl	800131a <_ZN6VC070611run_commandEhPhhhb>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_ZN6VC070611frameLengthEv>:
	run_command(VC0706_SET_PORT, args, sizeof(args), 5);

	return (char *)camera_buff;
}

uint32_t VC0706::frameLength(void) {
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af02      	add	r7, sp, #8
 80012a8:	6078      	str	r0, [r7, #4]
  uint8_t args[] = {0x01, 0x00};
 80012aa:	2301      	movs	r3, #1
 80012ac:	813b      	strh	r3, [r7, #8]
  if (!run_command(VC0706_GET_FBUF_LEN, args, sizeof(args), 9))
 80012ae:	f107 0208 	add.w	r2, r7, #8
 80012b2:	2301      	movs	r3, #1
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	2309      	movs	r3, #9
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2302      	movs	r3, #2
 80012bc:	2134      	movs	r1, #52	; 0x34
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f82b 	bl	800131a <_ZN6VC070611run_commandEhPhhhb>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f083 0301 	eor.w	r3, r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <_ZN6VC070611frameLengthEv+0x32>
    return 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	e01e      	b.n	8001312 <_ZN6VC070611frameLengthEv+0x70>

  uint32_t len;
  len = camera_buff[5];
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	799b      	ldrb	r3, [r3, #6]
 80012d8:	60fb      	str	r3, [r7, #12]
  len <<= 8;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	60fb      	str	r3, [r7, #12]
  len |= camera_buff[6];
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	79db      	ldrb	r3, [r3, #7]
 80012e4:	461a      	mov	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
  len <<= 8;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	60fb      	str	r3, [r7, #12]
  len |= camera_buff[7];
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	7a1b      	ldrb	r3, [r3, #8]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  len <<= 8;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	60fb      	str	r3, [r7, #12]
  len |= camera_buff[8];
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7a5b      	ldrb	r3, [r3, #9]
 8001308:	461a      	mov	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4313      	orrs	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]

  return len;
 8001310:	68fb      	ldr	r3, [r7, #12]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <_ZN6VC070611run_commandEhPhhhb>:

bool VC0706::run_command(uint8_t cmd, uint8_t *args, uint8_t argn, uint8_t resplen, bool flushflag){
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	60f8      	str	r0, [r7, #12]
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	461a      	mov	r2, r3
 8001326:	460b      	mov	r3, r1
 8001328:	72fb      	strb	r3, [r7, #11]
 800132a:	4613      	mov	r3, r2
 800132c:	72bb      	strb	r3, [r7, #10]
	// flush out anything in the buffer?
	send_command(cmd, args, argn);
 800132e:	7abb      	ldrb	r3, [r7, #10]
 8001330:	7af9      	ldrb	r1, [r7, #11]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f000 f822 	bl	800137e <_ZN6VC070612send_commandEhPhh>

	uint8_t bytes_read = read_response(resplen, 200);
 800133a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800133e:	22c8      	movs	r2, #200	; 0xc8
 8001340:	4619      	mov	r1, r3
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 f851 	bl	80013ea <_ZN6VC070613read_responseEhh>
 8001348:	4603      	mov	r3, r0
 800134a:	75fb      	strb	r3, [r7, #23]
	if (bytes_read != resplen)
 800134c:	7dfa      	ldrb	r2, [r7, #23]
 800134e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001352:	429a      	cmp	r2, r3
 8001354:	d001      	beq.n	800135a <_ZN6VC070611run_commandEhPhhhb+0x40>
		return false;
 8001356:	2300      	movs	r3, #0
 8001358:	e00d      	b.n	8001376 <_ZN6VC070611run_commandEhPhhhb+0x5c>
	if (!verify_response(cmd))
 800135a:	7afb      	ldrb	r3, [r7, #11]
 800135c:	4619      	mov	r1, r3
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f000 f861 	bl	8001426 <_ZN6VC070615verify_responseEh>
 8001364:	4603      	mov	r3, r0
 8001366:	f083 0301 	eor.w	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <_ZN6VC070611run_commandEhPhhhb+0x5a>
		return false;
 8001370:	2300      	movs	r3, #0
 8001372:	e000      	b.n	8001376 <_ZN6VC070611run_commandEhPhhhb+0x5c>

	return true;
 8001374:	2301      	movs	r3, #1
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_ZN6VC070612send_commandEhPhh>:

void VC0706::send_command(uint8_t cmd, uint8_t args[], uint8_t argn) {
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	461a      	mov	r2, r3
 800138a:	460b      	mov	r3, r1
 800138c:	72fb      	strb	r3, [r7, #11]
 800138e:	4613      	mov	r3, r2
 8001390:	72bb      	strb	r3, [r7, #10]
	// Send the data through USART using HAL functions.
	uint8_t toSend[2] = {0x56, 0x0};
 8001392:	2356      	movs	r3, #86	; 0x56
 8001394:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(this->huart, toSend, 2, HAL_MAX_DELAY);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800139a:	f107 0114 	add.w	r1, r7, #20
 800139e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013a2:	2202      	movs	r2, #2
 80013a4:	f002 fd35 	bl	8003e12 <HAL_UART_Transmit>
	HAL_UART_Transmit(this->huart, &cmd, 1, HAL_MAX_DELAY);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80013ac:	f107 010b 	add.w	r1, r7, #11
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013b4:	2201      	movs	r2, #1
 80013b6:	f002 fd2c 	bl	8003e12 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < argn; i++) {
 80013ba:	2300      	movs	r3, #0
 80013bc:	75fb      	strb	r3, [r7, #23]
 80013be:	7dfa      	ldrb	r2, [r7, #23]
 80013c0:	7abb      	ldrb	r3, [r7, #10]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d20d      	bcs.n	80013e2 <_ZN6VC070612send_commandEhPhh+0x64>
		HAL_UART_Transmit(this->huart, (args + i), 1, HAL_MAX_DELAY);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	18d1      	adds	r1, r2, r3
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d4:	2201      	movs	r2, #1
 80013d6:	f002 fd1c 	bl	8003e12 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < argn; i++) {
 80013da:	7dfb      	ldrb	r3, [r7, #23]
 80013dc:	3301      	adds	r3, #1
 80013de:	75fb      	strb	r3, [r7, #23]
 80013e0:	e7ed      	b.n	80013be <_ZN6VC070612send_commandEhPhh+0x40>
	}
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_ZN6VC070613read_responseEhh>:

uint8_t VC0706::read_response(uint8_t num_bytes, uint8_t timeout) {
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	70fb      	strb	r3, [r7, #3]
 80013f6:	4613      	mov	r3, r2
 80013f8:	70bb      	strb	r3, [r7, #2]
//        HAL_UART_Receive(this->huart, &data, 1, 0); // Non-blocking read to discard data
//    }
//    uint8_t data;
//        HAL_UART_Receive(this->huart, &data, 1, 0);

   	result = HAL_UART_Receive(this->huart, camera_buff, num_bytes, HAL_MAX_DELAY);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	1c59      	adds	r1, r3, #1
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	b29a      	uxth	r2, r3
 8001406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800140a:	f002 fd94 	bl	8003f36 <HAL_UART_Receive>
 800140e:	4603      	mov	r3, r0
 8001410:	73fb      	strb	r3, [r7, #15]
   	if (result == HAL_OK) {
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <_ZN6VC070613read_responseEhh+0x32>
      	return num_bytes;
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	e000      	b.n	800141e <_ZN6VC070613read_responseEhh+0x34>
    }

    return -1;
 800141c:	23ff      	movs	r3, #255	; 0xff
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <_ZN6VC070615verify_responseEh>:


bool VC0706::verify_response(uint8_t cmd){
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	460b      	mov	r3, r1
 8001430:	70fb      	strb	r3, [r7, #3]
	if ((camera_buff[0] != 0x76) || (camera_buff[1] != serial_num) ||
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	785b      	ldrb	r3, [r3, #1]
 8001436:	2b76      	cmp	r3, #118	; 0x76
 8001438:	d10e      	bne.n	8001458 <_ZN6VC070615verify_responseEh+0x32>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	789a      	ldrb	r2, [r3, #2]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d108      	bne.n	8001458 <_ZN6VC070615verify_responseEh+0x32>
		(camera_buff[2] != cmd) || (camera_buff[3] != 0x0))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	78db      	ldrb	r3, [r3, #3]
	if ((camera_buff[0] != 0x76) || (camera_buff[1] != serial_num) ||
 800144a:	78fa      	ldrb	r2, [r7, #3]
 800144c:	429a      	cmp	r2, r3
 800144e:	d103      	bne.n	8001458 <_ZN6VC070615verify_responseEh+0x32>
		(camera_buff[2] != cmd) || (camera_buff[3] != 0x0))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	791b      	ldrb	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <_ZN6VC070615verify_responseEh+0x36>
		return false;
 8001458:	2300      	movs	r3, #0
 800145a:	e000      	b.n	800145e <_ZN6VC070615verify_responseEh+0x38>
	return true;
 800145c:	2301      	movs	r3, #1
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b0ce      	sub	sp, #312	; 0x138
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001472:	f000 fd61 	bl	8001f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001476:	f000 f9a9 	bl	80017cc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800147a:	f000 fad3 	bl	8001a24 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 800147e:	f000 faa3 	bl	80019c8 <_ZL19MX_USART1_UART_Initv>
  MX_I2C2_Init();
 8001482:	f000 fa3f 	bl	8001904 <_ZL12MX_I2C2_Initv>
  MX_I2C1_Init();
 8001486:	f000 fa09 	bl	800189c <_ZL12MX_I2C1_Initv>
  MX_UART4_Init();
 800148a:	f000 fa6f 	bl	800196c <_ZL13MX_UART4_Initv>
//      if (result == HAL_OK) {
//    	  found = true;
//      }
//  }

  VC0706 camera(&huart4);
 800148e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001492:	49c1      	ldr	r1, [pc, #772]	; (8001798 <main+0x32c>)
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fdfd 	bl	8001094 <_ZN6VC0706C1EP20__UART_HandleTypeDef>
  bool status = false;
 800149a:	2300      	movs	r3, #0
 800149c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f


  HAL_Delay(3000);
 80014a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014a4:	f000 fdba 	bl	800201c <HAL_Delay>

  status = camera.begin();
 80014a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fe0a 	bl	80010c6 <_ZN6VC07065beginEv>
 80014b2:	4603      	mov	r3, r0
 80014b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

  for (int i = 0; i < 100; i++) {
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80014be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80014c2:	2b63      	cmp	r3, #99	; 0x63
 80014c4:	dc21      	bgt.n	800150a <main+0x9e>
      uint8_t element = camera.camera_buff[i];
 80014c6:	f107 0279 	add.w	r2, r7, #121	; 0x79
 80014ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80014ce:	4413      	add	r3, r2
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      char msg[20]; // Adjust the buffer size as needed
      int msg_length;

      // Use sprintf to format the message for the current element
      msg_length = sprintf(msg, "Element %d: 0x%02X\n", i, element);
 80014d6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80014da:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80014de:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80014e2:	49ae      	ldr	r1, [pc, #696]	; (800179c <main+0x330>)
 80014e4:	f006 fc42 	bl	8007d6c <siprintf>
 80014e8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

      // Transmit the formatted message via UART
      HAL_UART_Transmit(&huart1, (uint8_t*)msg, msg_length, 100);
 80014ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80014f6:	2364      	movs	r3, #100	; 0x64
 80014f8:	48a9      	ldr	r0, [pc, #676]	; (80017a0 <main+0x334>)
 80014fa:	f002 fc8a 	bl	8003e12 <HAL_UART_Transmit>
  for (int i = 0; i < 100; i++) {
 80014fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001502:	3301      	adds	r3, #1
 8001504:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001508:	e7d9      	b.n	80014be <main+0x52>
  }
  sprintf(msg, "begin done \n\n");
 800150a:	49a6      	ldr	r1, [pc, #664]	; (80017a4 <main+0x338>)
 800150c:	48a6      	ldr	r0, [pc, #664]	; (80017a8 <main+0x33c>)
 800150e:	f006 fc2d 	bl	8007d6c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 100);
 8001512:	2364      	movs	r3, #100	; 0x64
 8001514:	2264      	movs	r2, #100	; 0x64
 8001516:	49a4      	ldr	r1, [pc, #656]	; (80017a8 <main+0x33c>)
 8001518:	48a1      	ldr	r0, [pc, #644]	; (80017a0 <main+0x334>)
 800151a:	f002 fc7a 	bl	8003e12 <HAL_UART_Transmit>

  status = camera.set_image_size(VC0706_640x480);
 800151e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fe8f 	bl	8001248 <_ZN6VC070614set_image_sizeEh>
 800152a:	4603      	mov	r3, r0
 800152c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

  for (int i = 0; i < 100; i++) {
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001536:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800153a:	2b63      	cmp	r3, #99	; 0x63
 800153c:	dc21      	bgt.n	8001582 <main+0x116>
      uint8_t element = camera.camera_buff[i];
 800153e:	f107 0279 	add.w	r2, r7, #121	; 0x79
 8001542:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001546:	4413      	add	r3, r2
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
      char msg[20]; // Adjust the buffer size as needed
      int msg_length;

      // Use sprintf to format the message for the current element
      msg_length = sprintf(msg, "Element %d: 0x%02X\n", i, element);
 800154e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001552:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001556:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800155a:	4990      	ldr	r1, [pc, #576]	; (800179c <main+0x330>)
 800155c:	f006 fc06 	bl	8007d6c <siprintf>
 8001560:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

      // Transmit the formatted message via UART
      HAL_UART_Transmit(&huart1, (uint8_t*)msg, msg_length, 100);
 8001564:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001568:	b29a      	uxth	r2, r3
 800156a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800156e:	2364      	movs	r3, #100	; 0x64
 8001570:	488b      	ldr	r0, [pc, #556]	; (80017a0 <main+0x334>)
 8001572:	f002 fc4e 	bl	8003e12 <HAL_UART_Transmit>
  for (int i = 0; i < 100; i++) {
 8001576:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800157a:	3301      	adds	r3, #1
 800157c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001580:	e7d9      	b.n	8001536 <main+0xca>
  }
  sprintf(msg, "set image size\n\n");
 8001582:	498a      	ldr	r1, [pc, #552]	; (80017ac <main+0x340>)
 8001584:	4888      	ldr	r0, [pc, #544]	; (80017a8 <main+0x33c>)
 8001586:	f006 fbf1 	bl	8007d6c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 100);
 800158a:	2364      	movs	r3, #100	; 0x64
 800158c:	2264      	movs	r2, #100	; 0x64
 800158e:	4986      	ldr	r1, [pc, #536]	; (80017a8 <main+0x33c>)
 8001590:	4883      	ldr	r0, [pc, #524]	; (80017a0 <main+0x334>)
 8001592:	f002 fc3e 	bl	8003e12 <HAL_UART_Transmit>

  HAL_Delay(1000);
 8001596:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800159a:	f000 fd3f 	bl	800201c <HAL_Delay>

  uint8_t size = camera.get_image_size();
 800159e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fe28 	bl	80011f8 <_ZN6VC070614get_image_sizeEv>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

  for (int i = 0; i < 100; i++) {
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80015b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015b8:	2b63      	cmp	r3, #99	; 0x63
 80015ba:	dc21      	bgt.n	8001600 <main+0x194>
      uint8_t element = camera.camera_buff[i];
 80015bc:	f107 0279 	add.w	r2, r7, #121	; 0x79
 80015c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015c4:	4413      	add	r3, r2
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
      char msg[20]; // Adjust the buffer size as needed
      int msg_length;

      // Use sprintf to format the message for the current element
      msg_length = sprintf(msg, "Element %d: 0x%02X\n", i, element);
 80015cc:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80015d0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80015d4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80015d8:	4970      	ldr	r1, [pc, #448]	; (800179c <main+0x330>)
 80015da:	f006 fbc7 	bl	8007d6c <siprintf>
 80015de:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108

      // Transmit the formatted message via UART
      HAL_UART_Transmit(&huart1, (uint8_t*)msg, msg_length, 100);
 80015e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80015ec:	2364      	movs	r3, #100	; 0x64
 80015ee:	486c      	ldr	r0, [pc, #432]	; (80017a0 <main+0x334>)
 80015f0:	f002 fc0f 	bl	8003e12 <HAL_UART_Transmit>
  for (int i = 0; i < 100; i++) {
 80015f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015f8:	3301      	adds	r3, #1
 80015fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80015fe:	e7d9      	b.n	80015b4 <main+0x148>
  }
  sprintf(msg, "get img size\n\n");
 8001600:	496b      	ldr	r1, [pc, #428]	; (80017b0 <main+0x344>)
 8001602:	4869      	ldr	r0, [pc, #420]	; (80017a8 <main+0x33c>)
 8001604:	f006 fbb2 	bl	8007d6c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 100);
 8001608:	2364      	movs	r3, #100	; 0x64
 800160a:	2264      	movs	r2, #100	; 0x64
 800160c:	4966      	ldr	r1, [pc, #408]	; (80017a8 <main+0x33c>)
 800160e:	4864      	ldr	r0, [pc, #400]	; (80017a0 <main+0x334>)
 8001610:	f002 fbff 	bl	8003e12 <HAL_UART_Transmit>

  HAL_Delay(3000);
 8001614:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001618:	f000 fd00 	bl	800201c <HAL_Delay>

  status = camera.take_picture();
 800161c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fd72 	bl	800110a <_ZN6VC070612take_pictureEv>
 8001626:	4603      	mov	r3, r0
 8001628:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

  for (int i = 0; i < 100; i++) {
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001632:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001636:	2b63      	cmp	r3, #99	; 0x63
 8001638:	dc21      	bgt.n	800167e <main+0x212>
      uint8_t element = camera.camera_buff[i];
 800163a:	f107 0279 	add.w	r2, r7, #121	; 0x79
 800163e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001642:	4413      	add	r3, r2
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
      char msg[20]; // Adjust the buffer size as needed
      int msg_length;

      // Use sprintf to format the message for the current element
      msg_length = sprintf(msg, "Element %d: 0x%02X\n", i, element);
 800164a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800164e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001652:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001656:	4951      	ldr	r1, [pc, #324]	; (800179c <main+0x330>)
 8001658:	f006 fb88 	bl	8007d6c <siprintf>
 800165c:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100

      // Transmit the formatted message via UART
      HAL_UART_Transmit(&huart1, (uint8_t*)msg, msg_length, 100);
 8001660:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001664:	b29a      	uxth	r2, r3
 8001666:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800166a:	2364      	movs	r3, #100	; 0x64
 800166c:	484c      	ldr	r0, [pc, #304]	; (80017a0 <main+0x334>)
 800166e:	f002 fbd0 	bl	8003e12 <HAL_UART_Transmit>
  for (int i = 0; i < 100; i++) {
 8001672:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001676:	3301      	adds	r3, #1
 8001678:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800167c:	e7d9      	b.n	8001632 <main+0x1c6>
  }
  sprintf(msg, "take picture \n\n");
 800167e:	494d      	ldr	r1, [pc, #308]	; (80017b4 <main+0x348>)
 8001680:	4849      	ldr	r0, [pc, #292]	; (80017a8 <main+0x33c>)
 8001682:	f006 fb73 	bl	8007d6c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 100);
 8001686:	2364      	movs	r3, #100	; 0x64
 8001688:	2264      	movs	r2, #100	; 0x64
 800168a:	4947      	ldr	r1, [pc, #284]	; (80017a8 <main+0x33c>)
 800168c:	4844      	ldr	r0, [pc, #272]	; (80017a0 <main+0x334>)
 800168e:	f002 fbc0 	bl	8003e12 <HAL_UART_Transmit>



  uint32_t frame_size = camera.frameLength();
 8001692:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fe03 	bl	80012a2 <_ZN6VC070611frameLengthEv>
 800169c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  for (int i = 0; i < 100; i++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016aa:	2b63      	cmp	r3, #99	; 0x63
 80016ac:	dc21      	bgt.n	80016f2 <main+0x286>
      uint8_t element = camera.camera_buff[i];
 80016ae:	f107 0279 	add.w	r2, r7, #121	; 0x79
 80016b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016b6:	4413      	add	r3, r2
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
      char msg[20]; // Adjust the buffer size as needed
      int msg_length;

      // Use sprintf to format the message for the current element
      msg_length = sprintf(msg, "Element %d: 0x%02X\n", i, element);
 80016be:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80016c2:	f107 0014 	add.w	r0, r7, #20
 80016c6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016ca:	4934      	ldr	r1, [pc, #208]	; (800179c <main+0x330>)
 80016cc:	f006 fb4e 	bl	8007d6c <siprintf>
 80016d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4

      // Transmit the formatted message via UART
      HAL_UART_Transmit(&huart1, (uint8_t*)msg, msg_length, 100);
 80016d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016d8:	b29a      	uxth	r2, r3
 80016da:	f107 0114 	add.w	r1, r7, #20
 80016de:	2364      	movs	r3, #100	; 0x64
 80016e0:	482f      	ldr	r0, [pc, #188]	; (80017a0 <main+0x334>)
 80016e2:	f002 fb96 	bl	8003e12 <HAL_UART_Transmit>
  for (int i = 0; i < 100; i++) {
 80016e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016ea:	3301      	adds	r3, #1
 80016ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016f0:	e7d9      	b.n	80016a6 <main+0x23a>
  }
  sprintf(msg, "take picture \n\n");
 80016f2:	4930      	ldr	r1, [pc, #192]	; (80017b4 <main+0x348>)
 80016f4:	482c      	ldr	r0, [pc, #176]	; (80017a8 <main+0x33c>)
 80016f6:	f006 fb39 	bl	8007d6c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 100);
 80016fa:	2364      	movs	r3, #100	; 0x64
 80016fc:	2264      	movs	r2, #100	; 0x64
 80016fe:	492a      	ldr	r1, [pc, #168]	; (80017a8 <main+0x33c>)
 8001700:	4827      	ldr	r0, [pc, #156]	; (80017a0 <main+0x334>)
 8001702:	f002 fb86 	bl	8003e12 <HAL_UART_Transmit>



  uint8_t* buff;

  buff = camera.read_picture(32);
 8001706:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800170a:	2120      	movs	r1, #32
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fd17 	bl	8001140 <_ZN6VC070612read_pictureEh>
 8001712:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

  for (int i = 0; i < 100; i++) {
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800171c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001720:	2b63      	cmp	r3, #99	; 0x63
 8001722:	dc1f      	bgt.n	8001764 <main+0x2f8>
      uint8_t element = camera.camera_buff[i];
 8001724:	f107 0279 	add.w	r2, r7, #121	; 0x79
 8001728:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800172c:	4413      	add	r3, r2
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
      char msg[20]; // Adjust the buffer size as needed
      int msg_length;

      // Use sprintf to format the message for the current element
      msg_length = sprintf(msg, "Element %d: 0x%02X\n", i, element);
 8001734:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8001738:	4638      	mov	r0, r7
 800173a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800173e:	4917      	ldr	r1, [pc, #92]	; (800179c <main+0x330>)
 8001740:	f006 fb14 	bl	8007d6c <siprintf>
 8001744:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8

      // Transmit the formatted message via UART
      HAL_UART_Transmit(&huart1, (uint8_t*)msg, msg_length, 100);
 8001748:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800174c:	b29a      	uxth	r2, r3
 800174e:	4639      	mov	r1, r7
 8001750:	2364      	movs	r3, #100	; 0x64
 8001752:	4813      	ldr	r0, [pc, #76]	; (80017a0 <main+0x334>)
 8001754:	f002 fb5d 	bl	8003e12 <HAL_UART_Transmit>
  for (int i = 0; i < 100; i++) {
 8001758:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800175c:	3301      	adds	r3, #1
 800175e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001762:	e7db      	b.n	800171c <main+0x2b0>
  }
  sprintf(msg, "read picture \n\n");
 8001764:	4914      	ldr	r1, [pc, #80]	; (80017b8 <main+0x34c>)
 8001766:	4810      	ldr	r0, [pc, #64]	; (80017a8 <main+0x33c>)
 8001768:	f006 fb00 	bl	8007d6c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 100);
 800176c:	2364      	movs	r3, #100	; 0x64
 800176e:	2264      	movs	r2, #100	; 0x64
 8001770:	490d      	ldr	r1, [pc, #52]	; (80017a8 <main+0x33c>)
 8001772:	480b      	ldr	r0, [pc, #44]	; (80017a0 <main+0x334>)
 8001774:	f002 fb4d 	bl	8003e12 <HAL_UART_Transmit>

  configure_MPL3115A2(hi2c1);
 8001778:	4810      	ldr	r0, [pc, #64]	; (80017bc <main+0x350>)
 800177a:	f7ff fc37 	bl	8000fec <_Z19configure_MPL3115A2R17I2C_HandleTypeDef>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800177e:	f002 fee7 	bl	8004550 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001782:	4a0f      	ldr	r2, [pc, #60]	; (80017c0 <main+0x354>)
 8001784:	2100      	movs	r1, #0
 8001786:	480f      	ldr	r0, [pc, #60]	; (80017c4 <main+0x358>)
 8001788:	f002 ff2c 	bl	80045e4 <osThreadNew>
 800178c:	4603      	mov	r3, r0
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <main+0x35c>)
 8001790:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001792:	f002 ff01 	bl	8004598 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001796:	e7fe      	b.n	8001796 <main+0x32a>
 8001798:	200002f0 	.word	0x200002f0
 800179c:	0800b8cc 	.word	0x0800b8cc
 80017a0:	20000204 	.word	0x20000204
 80017a4:	0800b8e0 	.word	0x0800b8e0
 80017a8:	20000338 	.word	0x20000338
 80017ac:	0800b8f0 	.word	0x0800b8f0
 80017b0:	0800b904 	.word	0x0800b904
 80017b4:	0800b914 	.word	0x0800b914
 80017b8:	0800b924 	.word	0x0800b924
 80017bc:	20000248 	.word	0x20000248
 80017c0:	0800b94c 	.word	0x0800b94c
 80017c4:	08001a75 	.word	0x08001a75
 80017c8:	20000334 	.word	0x20000334

080017cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b094      	sub	sp, #80	; 0x50
 80017d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	2230      	movs	r2, #48	; 0x30
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f005 fc3e 	bl	800705c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <_Z18SystemClock_Configv+0xc8>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	4a26      	ldr	r2, [pc, #152]	; (8001894 <_Z18SystemClock_Configv+0xc8>)
 80017fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <_Z18SystemClock_Configv+0xc8>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <_Z18SystemClock_Configv+0xcc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a20      	ldr	r2, [pc, #128]	; (8001898 <_Z18SystemClock_Configv+0xcc>)
 8001816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <_Z18SystemClock_Configv+0xcc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001828:	2302      	movs	r3, #2
 800182a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800182c:	2301      	movs	r3, #1
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001830:	2310      	movs	r3, #16
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001834:	2300      	movs	r3, #0
 8001836:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001838:	f107 0320 	add.w	r3, r7, #32
 800183c:	4618      	mov	r0, r3
 800183e:	f001 fe53 	bl	80034e8 <HAL_RCC_OscConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	bf14      	ite	ne
 8001848:	2301      	movne	r3, #1
 800184a:	2300      	moveq	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8001852:	f000 f923 	bl	8001a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001856:	230f      	movs	r3, #15
 8001858:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f002 f8b1 	bl	80039d8 <HAL_RCC_ClockConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf14      	ite	ne
 800187c:	2301      	movne	r3, #1
 800187e:	2300      	moveq	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8001886:	f000 f909 	bl	8001a9c <Error_Handler>
  }
}
 800188a:	bf00      	nop
 800188c:	3750      	adds	r7, #80	; 0x50
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40007000 	.word	0x40007000

0800189c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018a0:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80018a2:	4a16      	ldr	r2, [pc, #88]	; (80018fc <_ZL12MX_I2C1_Initv+0x60>)
 80018a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80018a8:	4a15      	ldr	r2, [pc, #84]	; (8001900 <_ZL12MX_I2C1_Initv+0x64>)
 80018aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80018ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018d8:	4807      	ldr	r0, [pc, #28]	; (80018f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80018da:	f000 fe45 	bl	8002568 <HAL_I2C_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	bf14      	ite	ne
 80018e4:	2301      	movne	r3, #1
 80018e6:	2300      	moveq	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80018ee:	f000 f8d5 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000248 	.word	0x20000248
 80018fc:	40005400 	.word	0x40005400
 8001900:	000186a0 	.word	0x000186a0

08001904 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <_ZL12MX_I2C2_Initv+0x5c>)
 800190a:	4a16      	ldr	r2, [pc, #88]	; (8001964 <_ZL12MX_I2C2_Initv+0x60>)
 800190c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <_ZL12MX_I2C2_Initv+0x5c>)
 8001910:	4a15      	ldr	r2, [pc, #84]	; (8001968 <_ZL12MX_I2C2_Initv+0x64>)
 8001912:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <_ZL12MX_I2C2_Initv+0x5c>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <_ZL12MX_I2C2_Initv+0x5c>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <_ZL12MX_I2C2_Initv+0x5c>)
 8001922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001926:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <_ZL12MX_I2C2_Initv+0x5c>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <_ZL12MX_I2C2_Initv+0x5c>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <_ZL12MX_I2C2_Initv+0x5c>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <_ZL12MX_I2C2_Initv+0x5c>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001940:	4807      	ldr	r0, [pc, #28]	; (8001960 <_ZL12MX_I2C2_Initv+0x5c>)
 8001942:	f000 fe11 	bl	8002568 <HAL_I2C_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf14      	ite	ne
 800194c:	2301      	movne	r3, #1
 800194e:	2300      	moveq	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8001956:	f000 f8a1 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000029c 	.word	0x2000029c
 8001964:	40005800 	.word	0x40005800
 8001968:	000186a0 	.word	0x000186a0

0800196c <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <_ZL13MX_UART4_Initv+0x54>)
 8001972:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <_ZL13MX_UART4_Initv+0x58>)
 8001974:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <_ZL13MX_UART4_Initv+0x54>)
 8001978:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800197c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <_ZL13MX_UART4_Initv+0x54>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <_ZL13MX_UART4_Initv+0x54>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <_ZL13MX_UART4_Initv+0x54>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <_ZL13MX_UART4_Initv+0x54>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <_ZL13MX_UART4_Initv+0x54>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <_ZL13MX_UART4_Initv+0x54>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019a2:	4807      	ldr	r0, [pc, #28]	; (80019c0 <_ZL13MX_UART4_Initv+0x54>)
 80019a4:	f002 f9e8 	bl	8003d78 <HAL_UART_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf14      	ite	ne
 80019ae:	2301      	movne	r3, #1
 80019b0:	2300      	moveq	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 80019b8:	f000 f870 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200002f0 	.word	0x200002f0
 80019c4:	40004c00 	.word	0x40004c00

080019c8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <_ZL19MX_USART1_UART_Initv+0x54>)
 80019ce:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <_ZL19MX_USART1_UART_Initv+0x58>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <_ZL19MX_USART1_UART_Initv+0x54>)
 80019d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <_ZL19MX_USART1_UART_Initv+0x54>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <_ZL19MX_USART1_UART_Initv+0x54>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <_ZL19MX_USART1_UART_Initv+0x54>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <_ZL19MX_USART1_UART_Initv+0x54>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <_ZL19MX_USART1_UART_Initv+0x54>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <_ZL19MX_USART1_UART_Initv+0x54>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019fe:	4807      	ldr	r0, [pc, #28]	; (8001a1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a00:	f002 f9ba 	bl	8003d78 <HAL_UART_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	bf14      	ite	ne
 8001a0a:	2301      	movne	r3, #1
 8001a0c:	2300      	moveq	r3, #0
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001a14:	f000 f842 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000204 	.word	0x20000204
 8001a20:	40011000 	.word	0x40011000

08001a24 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <_ZL12MX_GPIO_Initv+0x4c>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <_ZL12MX_GPIO_Initv+0x4c>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <_ZL12MX_GPIO_Initv+0x4c>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	603b      	str	r3, [r7, #0]
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <_ZL12MX_GPIO_Initv+0x4c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <_ZL12MX_GPIO_Initv+0x4c>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <_ZL12MX_GPIO_Initv+0x4c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]

}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800

08001a74 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		float val = 0.0f;
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]

		val = read_baromateric_pressure(hi2c1);
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <_Z16StartDefaultTaskPv+0x24>)
 8001a84:	f7ff fad0 	bl	8001028 <_Z25read_baromateric_pressureR17I2C_HandleTypeDef>
 8001a88:	ed87 0a03 	vstr	s0, [r7, #12]
//		  sprintf(msg, "pressure:\n");
//
//		  HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 100);


    osDelay(1000);
 8001a8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a90:	f002 fe3a 	bl	8004708 <osDelay>
  }
 8001a94:	e7f2      	b.n	8001a7c <_Z16StartDefaultTaskPv+0x8>
 8001a96:	bf00      	nop
 8001a98:	20000248 	.word	0x20000248

08001a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa0:	b672      	cpsid	i
}
 8001aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <Error_Handler+0x8>
	...

08001aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_MspInit+0x54>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a11      	ldr	r2, [pc, #68]	; (8001afc <HAL_MspInit+0x54>)
 8001ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_MspInit+0x54>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_MspInit+0x54>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_MspInit+0x54>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_MspInit+0x54>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	210f      	movs	r1, #15
 8001aea:	f06f 0001 	mvn.w	r0, #1
 8001aee:	f000 fb76 	bl	80021de <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800

08001b00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08c      	sub	sp, #48	; 0x30
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a32      	ldr	r2, [pc, #200]	; (8001be8 <HAL_I2C_MspInit+0xe8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d12c      	bne.n	8001b7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	4b31      	ldr	r3, [pc, #196]	; (8001bec <HAL_I2C_MspInit+0xec>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a30      	ldr	r2, [pc, #192]	; (8001bec <HAL_I2C_MspInit+0xec>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <HAL_I2C_MspInit+0xec>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	61bb      	str	r3, [r7, #24]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b3e:	23c0      	movs	r3, #192	; 0xc0
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b42:	2312      	movs	r3, #18
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b46:	2301      	movs	r3, #1
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b4e:	2304      	movs	r3, #4
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	4825      	ldr	r0, [pc, #148]	; (8001bf0 <HAL_I2C_MspInit+0xf0>)
 8001b5a:	f000 fb69 	bl	8002230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	4b22      	ldr	r3, [pc, #136]	; (8001bec <HAL_I2C_MspInit+0xec>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	4a21      	ldr	r2, [pc, #132]	; (8001bec <HAL_I2C_MspInit+0xec>)
 8001b68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <HAL_I2C_MspInit+0xec>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b7a:	e031      	b.n	8001be0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <HAL_I2C_MspInit+0xf4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d12c      	bne.n	8001be0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_I2C_MspInit+0xec>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a17      	ldr	r2, [pc, #92]	; (8001bec <HAL_I2C_MspInit+0xec>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_I2C_MspInit+0xec>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ba2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba8:	2312      	movs	r3, #18
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480c      	ldr	r0, [pc, #48]	; (8001bf0 <HAL_I2C_MspInit+0xf0>)
 8001bc0:	f000 fb36 	bl	8002230 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <HAL_I2C_MspInit+0xec>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <HAL_I2C_MspInit+0xec>)
 8001bce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_I2C_MspInit+0xec>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3730      	adds	r7, #48	; 0x30
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40005400 	.word	0x40005400
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020400 	.word	0x40020400
 8001bf4:	40005800 	.word	0x40005800

08001bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08c      	sub	sp, #48	; 0x30
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a32      	ldr	r2, [pc, #200]	; (8001ce0 <HAL_UART_MspInit+0xe8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d12c      	bne.n	8001c74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	4b31      	ldr	r3, [pc, #196]	; (8001ce4 <HAL_UART_MspInit+0xec>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a30      	ldr	r2, [pc, #192]	; (8001ce4 <HAL_UART_MspInit+0xec>)
 8001c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ce4 <HAL_UART_MspInit+0xec>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <HAL_UART_MspInit+0xec>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a29      	ldr	r2, [pc, #164]	; (8001ce4 <HAL_UART_MspInit+0xec>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <HAL_UART_MspInit+0xec>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c52:	2303      	movs	r3, #3
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c62:	2308      	movs	r3, #8
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	f107 031c 	add.w	r3, r7, #28
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	481e      	ldr	r0, [pc, #120]	; (8001ce8 <HAL_UART_MspInit+0xf0>)
 8001c6e:	f000 fadf 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c72:	e031      	b.n	8001cd8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1c      	ldr	r2, [pc, #112]	; (8001cec <HAL_UART_MspInit+0xf4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d12c      	bne.n	8001cd8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_UART_MspInit+0xec>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	4a17      	ldr	r2, [pc, #92]	; (8001ce4 <HAL_UART_MspInit+0xec>)
 8001c88:	f043 0310 	orr.w	r3, r3, #16
 8001c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_UART_MspInit+0xec>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_UART_MspInit+0xec>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a10      	ldr	r2, [pc, #64]	; (8001ce4 <HAL_UART_MspInit+0xec>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_UART_MspInit+0xec>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cb6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cc8:	2307      	movs	r3, #7
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 031c 	add.w	r3, r7, #28
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <HAL_UART_MspInit+0xf0>)
 8001cd4:	f000 faac 	bl	8002230 <HAL_GPIO_Init>
}
 8001cd8:	bf00      	nop
 8001cda:	3730      	adds	r7, #48	; 0x30
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40004c00 	.word	0x40004c00
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	40011000 	.word	0x40011000

08001cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <NMI_Handler+0x4>

08001cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfa:	e7fe      	b.n	8001cfa <HardFault_Handler+0x4>

08001cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <MemManage_Handler+0x4>

08001d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d06:	e7fe      	b.n	8001d06 <BusFault_Handler+0x4>

08001d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <UsageFault_Handler+0x4>

08001d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d20:	f000 f95c 	bl	8001fdc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d24:	f004 f8fe 	bl	8005f24 <xTaskGetSchedulerState>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d001      	beq.n	8001d32 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001d2e:	f004 fee3 	bl	8006af8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
	return 1;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <_kill>:

int _kill(int pid, int sig)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d50:	f005 f94c 	bl	8006fec <__errno>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2216      	movs	r2, #22
 8001d58:	601a      	str	r2, [r3, #0]
	return -1;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_exit>:

void _exit (int status)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ffe7 	bl	8001d46 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d78:	e7fe      	b.n	8001d78 <_exit+0x12>

08001d7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e00a      	b.n	8001da2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d8c:	f3af 8000 	nop.w
 8001d90:	4601      	mov	r1, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	60ba      	str	r2, [r7, #8]
 8001d98:	b2ca      	uxtb	r2, r1
 8001d9a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	dbf0      	blt.n	8001d8c <_read+0x12>
	}

return len;
 8001daa:	687b      	ldr	r3, [r7, #4]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e009      	b.n	8001dda <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	60ba      	str	r2, [r7, #8]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	dbf1      	blt.n	8001dc6 <_write+0x12>
	}
	return len;
 8001de2:	687b      	ldr	r3, [r7, #4]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_close>:

int _close(int file)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	return -1;
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e14:	605a      	str	r2, [r3, #4]
	return 0;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_isatty>:

int _isatty(int file)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	return 1;
 8001e2c:	2301      	movs	r3, #1
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
	return 0;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e5c:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <_sbrk+0x5c>)
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <_sbrk+0x60>)
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e68:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <_sbrk+0x64>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <_sbrk+0x68>)
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d207      	bcs.n	8001e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e84:	f005 f8b2 	bl	8006fec <__errno>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e92:	e009      	b.n	8001ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <_sbrk+0x64>)
 8001ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20020000 	.word	0x20020000
 8001eb4:	00000400 	.word	0x00000400
 8001eb8:	2000039c 	.word	0x2000039c
 8001ebc:	20004d10 	.word	0x20004d10

08001ec0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <SystemInit+0x20>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eca:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <SystemInit+0x20>)
 8001ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee8:	480d      	ldr	r0, [pc, #52]	; (8001f20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eea:	490e      	ldr	r1, [pc, #56]	; (8001f24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eec:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef0:	e002      	b.n	8001ef8 <LoopCopyDataInit>

08001ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef6:	3304      	adds	r3, #4

08001ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001efc:	d3f9      	bcc.n	8001ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f00:	4c0b      	ldr	r4, [pc, #44]	; (8001f30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f04:	e001      	b.n	8001f0a <LoopFillZerobss>

08001f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f08:	3204      	adds	r2, #4

08001f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f0c:	d3fb      	bcc.n	8001f06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f0e:	f7ff ffd7 	bl	8001ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f12:	f005 f871 	bl	8006ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7ff faa9 	bl	800146c <main>
  bx  lr    
 8001f1a:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8001f1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001f28:	0800be4c 	.word	0x0800be4c
  ldr r2, =_sbss
 8001f2c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001f30:	20004d0c 	.word	0x20004d0c

08001f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC_IRQHandler>
	...

08001f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <HAL_Init+0x40>)
 8001f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <HAL_Init+0x40>)
 8001f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_Init+0x40>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f60:	2003      	movs	r0, #3
 8001f62:	f000 f931 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f66:	200f      	movs	r0, #15
 8001f68:	f000 f808 	bl	8001f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f6c:	f7ff fd9c 	bl	8001aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00

08001f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_InitTick+0x54>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_InitTick+0x58>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f93b 	bl	8002216 <HAL_SYSTICK_Config>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00e      	b.n	8001fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b0f      	cmp	r3, #15
 8001fae:	d80a      	bhi.n	8001fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fb8:	f000 f911 	bl	80021de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fbc:	4a06      	ldr	r2, [pc, #24]	; (8001fd8 <HAL_InitTick+0x5c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	20000008 	.word	0x20000008
 8001fd8:	20000004 	.word	0x20000004

08001fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_IncTick+0x20>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_IncTick+0x24>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <HAL_IncTick+0x24>)
 8001fee:	6013      	str	r3, [r2, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000008 	.word	0x20000008
 8002000:	20004cb8 	.word	0x20004cb8

08002004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return uwTick;
 8002008:	4b03      	ldr	r3, [pc, #12]	; (8002018 <HAL_GetTick+0x14>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20004cb8 	.word	0x20004cb8

0800201c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002024:	f7ff ffee 	bl	8002004 <HAL_GetTick>
 8002028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002034:	d005      	beq.n	8002042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_Delay+0x44>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002042:	bf00      	nop
 8002044:	f7ff ffde 	bl	8002004 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	429a      	cmp	r2, r3
 8002052:	d8f7      	bhi.n	8002044 <HAL_Delay+0x28>
  {
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000008 	.word	0x20000008

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	db0a      	blt.n	80020f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	490c      	ldr	r1, [pc, #48]	; (8002114 <__NVIC_SetPriority+0x4c>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f0:	e00a      	b.n	8002108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <__NVIC_SetPriority+0x50>)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3b04      	subs	r3, #4
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	440b      	add	r3, r1
 8002106:	761a      	strb	r2, [r3, #24]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f1c3 0307 	rsb	r3, r3, #7
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf28      	it	cs
 800213a:	2304      	movcs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3304      	adds	r3, #4
 8002142:	2b06      	cmp	r3, #6
 8002144:	d902      	bls.n	800214c <NVIC_EncodePriority+0x30>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3b03      	subs	r3, #3
 800214a:	e000      	b.n	800214e <NVIC_EncodePriority+0x32>
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43d9      	mvns	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	4313      	orrs	r3, r2
         );
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002194:	d301      	bcc.n	800219a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002196:	2301      	movs	r3, #1
 8002198:	e00f      	b.n	80021ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <SysTick_Config+0x40>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a2:	210f      	movs	r1, #15
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021a8:	f7ff ff8e 	bl	80020c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <SysTick_Config+0x40>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <SysTick_Config+0x40>)
 80021b4:	2207      	movs	r2, #7
 80021b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010

080021c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff47 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f0:	f7ff ff5c 	bl	80020ac <__NVIC_GetPriorityGrouping>
 80021f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7ff ff8e 	bl	800211c <NVIC_EncodePriority>
 8002200:	4602      	mov	r2, r0
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff5d 	bl	80020c8 <__NVIC_SetPriority>
}
 800220e:	bf00      	nop
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ffb0 	bl	8002184 <SysTick_Config>
 8002224:	4603      	mov	r3, r0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	e16b      	b.n	8002524 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800224c:	2201      	movs	r2, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	429a      	cmp	r2, r3
 8002266:	f040 815a 	bne.w	800251e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b01      	cmp	r3, #1
 8002274:	d005      	beq.n	8002282 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800227e:	2b02      	cmp	r3, #2
 8002280:	d130      	bne.n	80022e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 0201 	and.w	r2, r3, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d017      	beq.n	8002320 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d123      	bne.n	8002374 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	08da      	lsrs	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3208      	adds	r2, #8
 8002334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	220f      	movs	r2, #15
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	08da      	lsrs	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3208      	adds	r2, #8
 800236e:	69b9      	ldr	r1, [r7, #24]
 8002370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80b4 	beq.w	800251e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b60      	ldr	r3, [pc, #384]	; (800253c <HAL_GPIO_Init+0x30c>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	4a5f      	ldr	r2, [pc, #380]	; (800253c <HAL_GPIO_Init+0x30c>)
 80023c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c4:	6453      	str	r3, [r2, #68]	; 0x44
 80023c6:	4b5d      	ldr	r3, [pc, #372]	; (800253c <HAL_GPIO_Init+0x30c>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023d2:	4a5b      	ldr	r2, [pc, #364]	; (8002540 <HAL_GPIO_Init+0x310>)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	3302      	adds	r3, #2
 80023da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	220f      	movs	r2, #15
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a52      	ldr	r2, [pc, #328]	; (8002544 <HAL_GPIO_Init+0x314>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d02b      	beq.n	8002456 <HAL_GPIO_Init+0x226>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a51      	ldr	r2, [pc, #324]	; (8002548 <HAL_GPIO_Init+0x318>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d025      	beq.n	8002452 <HAL_GPIO_Init+0x222>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a50      	ldr	r2, [pc, #320]	; (800254c <HAL_GPIO_Init+0x31c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d01f      	beq.n	800244e <HAL_GPIO_Init+0x21e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4f      	ldr	r2, [pc, #316]	; (8002550 <HAL_GPIO_Init+0x320>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d019      	beq.n	800244a <HAL_GPIO_Init+0x21a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4e      	ldr	r2, [pc, #312]	; (8002554 <HAL_GPIO_Init+0x324>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <HAL_GPIO_Init+0x216>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4d      	ldr	r2, [pc, #308]	; (8002558 <HAL_GPIO_Init+0x328>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00d      	beq.n	8002442 <HAL_GPIO_Init+0x212>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4c      	ldr	r2, [pc, #304]	; (800255c <HAL_GPIO_Init+0x32c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d007      	beq.n	800243e <HAL_GPIO_Init+0x20e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a4b      	ldr	r2, [pc, #300]	; (8002560 <HAL_GPIO_Init+0x330>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d101      	bne.n	800243a <HAL_GPIO_Init+0x20a>
 8002436:	2307      	movs	r3, #7
 8002438:	e00e      	b.n	8002458 <HAL_GPIO_Init+0x228>
 800243a:	2308      	movs	r3, #8
 800243c:	e00c      	b.n	8002458 <HAL_GPIO_Init+0x228>
 800243e:	2306      	movs	r3, #6
 8002440:	e00a      	b.n	8002458 <HAL_GPIO_Init+0x228>
 8002442:	2305      	movs	r3, #5
 8002444:	e008      	b.n	8002458 <HAL_GPIO_Init+0x228>
 8002446:	2304      	movs	r3, #4
 8002448:	e006      	b.n	8002458 <HAL_GPIO_Init+0x228>
 800244a:	2303      	movs	r3, #3
 800244c:	e004      	b.n	8002458 <HAL_GPIO_Init+0x228>
 800244e:	2302      	movs	r3, #2
 8002450:	e002      	b.n	8002458 <HAL_GPIO_Init+0x228>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_GPIO_Init+0x228>
 8002456:	2300      	movs	r3, #0
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	f002 0203 	and.w	r2, r2, #3
 800245e:	0092      	lsls	r2, r2, #2
 8002460:	4093      	lsls	r3, r2
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002468:	4935      	ldr	r1, [pc, #212]	; (8002540 <HAL_GPIO_Init+0x310>)
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002476:	4b3b      	ldr	r3, [pc, #236]	; (8002564 <HAL_GPIO_Init+0x334>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800249a:	4a32      	ldr	r2, [pc, #200]	; (8002564 <HAL_GPIO_Init+0x334>)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024a0:	4b30      	ldr	r3, [pc, #192]	; (8002564 <HAL_GPIO_Init+0x334>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c4:	4a27      	ldr	r2, [pc, #156]	; (8002564 <HAL_GPIO_Init+0x334>)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ca:	4b26      	ldr	r3, [pc, #152]	; (8002564 <HAL_GPIO_Init+0x334>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ee:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <HAL_GPIO_Init+0x334>)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <HAL_GPIO_Init+0x334>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002518:	4a12      	ldr	r2, [pc, #72]	; (8002564 <HAL_GPIO_Init+0x334>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3301      	adds	r3, #1
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b0f      	cmp	r3, #15
 8002528:	f67f ae90 	bls.w	800224c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3724      	adds	r7, #36	; 0x24
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
 8002540:	40013800 	.word	0x40013800
 8002544:	40020000 	.word	0x40020000
 8002548:	40020400 	.word	0x40020400
 800254c:	40020800 	.word	0x40020800
 8002550:	40020c00 	.word	0x40020c00
 8002554:	40021000 	.word	0x40021000
 8002558:	40021400 	.word	0x40021400
 800255c:	40021800 	.word	0x40021800
 8002560:	40021c00 	.word	0x40021c00
 8002564:	40013c00 	.word	0x40013c00

08002568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e12b      	b.n	80027d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff fab6 	bl	8001b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2224      	movs	r2, #36	; 0x24
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025cc:	f001 fbac 	bl	8003d28 <HAL_RCC_GetPCLK1Freq>
 80025d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4a81      	ldr	r2, [pc, #516]	; (80027dc <HAL_I2C_Init+0x274>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d807      	bhi.n	80025ec <HAL_I2C_Init+0x84>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4a80      	ldr	r2, [pc, #512]	; (80027e0 <HAL_I2C_Init+0x278>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	bf94      	ite	ls
 80025e4:	2301      	movls	r3, #1
 80025e6:	2300      	movhi	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	e006      	b.n	80025fa <HAL_I2C_Init+0x92>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4a7d      	ldr	r2, [pc, #500]	; (80027e4 <HAL_I2C_Init+0x27c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	bf94      	ite	ls
 80025f4:	2301      	movls	r3, #1
 80025f6:	2300      	movhi	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0e7      	b.n	80027d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4a78      	ldr	r2, [pc, #480]	; (80027e8 <HAL_I2C_Init+0x280>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	0c9b      	lsrs	r3, r3, #18
 800260c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	430a      	orrs	r2, r1
 8002620:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4a6a      	ldr	r2, [pc, #424]	; (80027dc <HAL_I2C_Init+0x274>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d802      	bhi.n	800263c <HAL_I2C_Init+0xd4>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	3301      	adds	r3, #1
 800263a:	e009      	b.n	8002650 <HAL_I2C_Init+0xe8>
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	4a69      	ldr	r2, [pc, #420]	; (80027ec <HAL_I2C_Init+0x284>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	099b      	lsrs	r3, r3, #6
 800264e:	3301      	adds	r3, #1
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	430b      	orrs	r3, r1
 8002656:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002662:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	495c      	ldr	r1, [pc, #368]	; (80027dc <HAL_I2C_Init+0x274>)
 800266c:	428b      	cmp	r3, r1
 800266e:	d819      	bhi.n	80026a4 <HAL_I2C_Init+0x13c>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1e59      	subs	r1, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	fbb1 f3f3 	udiv	r3, r1, r3
 800267e:	1c59      	adds	r1, r3, #1
 8002680:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002684:	400b      	ands	r3, r1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_I2C_Init+0x138>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1e59      	subs	r1, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fbb1 f3f3 	udiv	r3, r1, r3
 8002698:	3301      	adds	r3, #1
 800269a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269e:	e051      	b.n	8002744 <HAL_I2C_Init+0x1dc>
 80026a0:	2304      	movs	r3, #4
 80026a2:	e04f      	b.n	8002744 <HAL_I2C_Init+0x1dc>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d111      	bne.n	80026d0 <HAL_I2C_Init+0x168>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1e58      	subs	r0, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	440b      	add	r3, r1
 80026ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80026be:	3301      	adds	r3, #1
 80026c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e012      	b.n	80026f6 <HAL_I2C_Init+0x18e>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1e58      	subs	r0, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	0099      	lsls	r1, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e6:	3301      	adds	r3, #1
 80026e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf0c      	ite	eq
 80026f0:	2301      	moveq	r3, #1
 80026f2:	2300      	movne	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_I2C_Init+0x196>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e022      	b.n	8002744 <HAL_I2C_Init+0x1dc>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10e      	bne.n	8002724 <HAL_I2C_Init+0x1bc>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1e58      	subs	r0, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6859      	ldr	r1, [r3, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	440b      	add	r3, r1
 8002714:	fbb0 f3f3 	udiv	r3, r0, r3
 8002718:	3301      	adds	r3, #1
 800271a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002722:	e00f      	b.n	8002744 <HAL_I2C_Init+0x1dc>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1e58      	subs	r0, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	0099      	lsls	r1, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	fbb0 f3f3 	udiv	r3, r0, r3
 800273a:	3301      	adds	r3, #1
 800273c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	6809      	ldr	r1, [r1, #0]
 8002748:	4313      	orrs	r3, r2
 800274a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002772:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6911      	ldr	r1, [r2, #16]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68d2      	ldr	r2, [r2, #12]
 800277e:	4311      	orrs	r1, r2
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	430b      	orrs	r3, r1
 8002786:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	000186a0 	.word	0x000186a0
 80027e0:	001e847f 	.word	0x001e847f
 80027e4:	003d08ff 	.word	0x003d08ff
 80027e8:	431bde83 	.word	0x431bde83
 80027ec:	10624dd3 	.word	0x10624dd3

080027f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	4608      	mov	r0, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	817b      	strh	r3, [r7, #10]
 8002802:	460b      	mov	r3, r1
 8002804:	813b      	strh	r3, [r7, #8]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800280a:	f7ff fbfb 	bl	8002004 <HAL_GetTick>
 800280e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b20      	cmp	r3, #32
 800281a:	f040 80d9 	bne.w	80029d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	2319      	movs	r3, #25
 8002824:	2201      	movs	r2, #1
 8002826:	496d      	ldr	r1, [pc, #436]	; (80029dc <HAL_I2C_Mem_Write+0x1ec>)
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fc7f 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
 8002836:	e0cc      	b.n	80029d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_I2C_Mem_Write+0x56>
 8002842:	2302      	movs	r3, #2
 8002844:	e0c5      	b.n	80029d2 <HAL_I2C_Mem_Write+0x1e2>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d007      	beq.n	800286c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800287a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2221      	movs	r2, #33	; 0x21
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2240      	movs	r2, #64	; 0x40
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a3a      	ldr	r2, [r7, #32]
 8002896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800289c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a4d      	ldr	r2, [pc, #308]	; (80029e0 <HAL_I2C_Mem_Write+0x1f0>)
 80028ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ae:	88f8      	ldrh	r0, [r7, #6]
 80028b0:	893a      	ldrh	r2, [r7, #8]
 80028b2:	8979      	ldrh	r1, [r7, #10]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	4603      	mov	r3, r0
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 fab6 	bl	8002e30 <I2C_RequestMemoryWrite>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d052      	beq.n	8002970 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e081      	b.n	80029d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fd00 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00d      	beq.n	80028fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d107      	bne.n	80028f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e06b      	b.n	80029d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	781a      	ldrb	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b04      	cmp	r3, #4
 8002936:	d11b      	bne.n	8002970 <HAL_I2C_Mem_Write+0x180>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	d017      	beq.n	8002970 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1aa      	bne.n	80028ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 fcec 	bl	800335a <I2C_WaitOnBTFFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00d      	beq.n	80029a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	2b04      	cmp	r3, #4
 800298e:	d107      	bne.n	80029a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800299e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e016      	b.n	80029d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e000      	b.n	80029d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	00100002 	.word	0x00100002
 80029e0:	ffff0000 	.word	0xffff0000

080029e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08c      	sub	sp, #48	; 0x30
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	4608      	mov	r0, r1
 80029ee:	4611      	mov	r1, r2
 80029f0:	461a      	mov	r2, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	817b      	strh	r3, [r7, #10]
 80029f6:	460b      	mov	r3, r1
 80029f8:	813b      	strh	r3, [r7, #8]
 80029fa:	4613      	mov	r3, r2
 80029fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029fe:	f7ff fb01 	bl	8002004 <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	f040 8208 	bne.w	8002e22 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2319      	movs	r3, #25
 8002a18:	2201      	movs	r2, #1
 8002a1a:	497b      	ldr	r1, [pc, #492]	; (8002c08 <HAL_I2C_Mem_Read+0x224>)
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fb85 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e1fb      	b.n	8002e24 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_I2C_Mem_Read+0x56>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e1f4      	b.n	8002e24 <HAL_I2C_Mem_Read+0x440>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d007      	beq.n	8002a60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2222      	movs	r2, #34	; 0x22
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2240      	movs	r2, #64	; 0x40
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4a5b      	ldr	r2, [pc, #364]	; (8002c0c <HAL_I2C_Mem_Read+0x228>)
 8002aa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aa2:	88f8      	ldrh	r0, [r7, #6]
 8002aa4:	893a      	ldrh	r2, [r7, #8]
 8002aa6:	8979      	ldrh	r1, [r7, #10]
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fa52 	bl	8002f5c <I2C_RequestMemoryRead>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e1b0      	b.n	8002e24 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d113      	bne.n	8002af2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	623b      	str	r3, [r7, #32]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	623b      	str	r3, [r7, #32]
 8002ade:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e184      	b.n	8002dfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d11b      	bne.n	8002b32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e164      	b.n	8002dfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d11b      	bne.n	8002b72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	61bb      	str	r3, [r7, #24]
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	e144      	b.n	8002dfc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b88:	e138      	b.n	8002dfc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	f200 80f1 	bhi.w	8002d76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d123      	bne.n	8002be4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 fc1b 	bl	80033dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e139      	b.n	8002e24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002be2:	e10b      	b.n	8002dfc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d14e      	bne.n	8002c8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	4906      	ldr	r1, [pc, #24]	; (8002c10 <HAL_I2C_Mem_Read+0x22c>)
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 fa98 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e10e      	b.n	8002e24 <HAL_I2C_Mem_Read+0x440>
 8002c06:	bf00      	nop
 8002c08:	00100002 	.word	0x00100002
 8002c0c:	ffff0000 	.word	0xffff0000
 8002c10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691a      	ldr	r2, [r3, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c88:	e0b8      	b.n	8002dfc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	2200      	movs	r2, #0
 8002c92:	4966      	ldr	r1, [pc, #408]	; (8002e2c <HAL_I2C_Mem_Read+0x448>)
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fa49 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0bf      	b.n	8002e24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cec:	2200      	movs	r2, #0
 8002cee:	494f      	ldr	r1, [pc, #316]	; (8002e2c <HAL_I2C_Mem_Read+0x448>)
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 fa1b 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e091      	b.n	8002e24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d74:	e042      	b.n	8002dfc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fb2e 	bl	80033dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e04c      	b.n	8002e24 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d118      	bne.n	8002dfc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f47f aec2 	bne.w	8002b8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e000      	b.n	8002e24 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e22:	2302      	movs	r3, #2
  }
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3728      	adds	r7, #40	; 0x28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	00010004 	.word	0x00010004

08002e30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	4608      	mov	r0, r1
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	817b      	strh	r3, [r7, #10]
 8002e42:	460b      	mov	r3, r1
 8002e44:	813b      	strh	r3, [r7, #8]
 8002e46:	4613      	mov	r3, r2
 8002e48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f960 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00d      	beq.n	8002e8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e80:	d103      	bne.n	8002e8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e05f      	b.n	8002f4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e8e:	897b      	ldrh	r3, [r7, #10]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	461a      	mov	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	6a3a      	ldr	r2, [r7, #32]
 8002ea2:	492d      	ldr	r1, [pc, #180]	; (8002f58 <I2C_RequestMemoryWrite+0x128>)
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f998 	bl	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e04c      	b.n	8002f4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ecc:	6a39      	ldr	r1, [r7, #32]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 fa02 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00d      	beq.n	8002ef6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d107      	bne.n	8002ef2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e02b      	b.n	8002f4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d105      	bne.n	8002f08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002efc:	893b      	ldrh	r3, [r7, #8]
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	611a      	str	r2, [r3, #16]
 8002f06:	e021      	b.n	8002f4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f08:	893b      	ldrh	r3, [r7, #8]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f18:	6a39      	ldr	r1, [r7, #32]
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f9dc 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00d      	beq.n	8002f42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d107      	bne.n	8002f3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e005      	b.n	8002f4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f42:	893b      	ldrh	r3, [r7, #8]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	00010002 	.word	0x00010002

08002f5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	4608      	mov	r0, r1
 8002f66:	4611      	mov	r1, r2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	817b      	strh	r3, [r7, #10]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	813b      	strh	r3, [r7, #8]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f8c2 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fbc:	d103      	bne.n	8002fc6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e0aa      	b.n	8003120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fca:	897b      	ldrh	r3, [r7, #10]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	6a3a      	ldr	r2, [r7, #32]
 8002fde:	4952      	ldr	r1, [pc, #328]	; (8003128 <I2C_RequestMemoryRead+0x1cc>)
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f8fa 	bl	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e097      	b.n	8003120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003008:	6a39      	ldr	r1, [r7, #32]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f964 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00d      	beq.n	8003032 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	2b04      	cmp	r3, #4
 800301c:	d107      	bne.n	800302e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e076      	b.n	8003120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d105      	bne.n	8003044 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003038:	893b      	ldrh	r3, [r7, #8]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	611a      	str	r2, [r3, #16]
 8003042:	e021      	b.n	8003088 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003044:	893b      	ldrh	r3, [r7, #8]
 8003046:	0a1b      	lsrs	r3, r3, #8
 8003048:	b29b      	uxth	r3, r3
 800304a:	b2da      	uxtb	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003054:	6a39      	ldr	r1, [r7, #32]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f93e 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00d      	beq.n	800307e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	2b04      	cmp	r3, #4
 8003068:	d107      	bne.n	800307a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003078:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e050      	b.n	8003120 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800307e:	893b      	ldrh	r3, [r7, #8]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308a:	6a39      	ldr	r1, [r7, #32]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f923 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00d      	beq.n	80030b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	2b04      	cmp	r3, #4
 800309e:	d107      	bne.n	80030b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e035      	b.n	8003120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f82b 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00d      	beq.n	80030f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ea:	d103      	bne.n	80030f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e013      	b.n	8003120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030f8:	897b      	ldrh	r3, [r7, #10]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	b2da      	uxtb	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	6a3a      	ldr	r2, [r7, #32]
 800310c:	4906      	ldr	r1, [pc, #24]	; (8003128 <I2C_RequestMemoryRead+0x1cc>)
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f863 	bl	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	00010002 	.word	0x00010002

0800312c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800313c:	e025      	b.n	800318a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003144:	d021      	beq.n	800318a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003146:	f7fe ff5d 	bl	8002004 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d302      	bcc.n	800315c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d116      	bne.n	800318a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f043 0220 	orr.w	r2, r3, #32
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e023      	b.n	80031d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	d10d      	bne.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	43da      	mvns	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4013      	ands	r3, r2
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bf0c      	ite	eq
 80031a6:	2301      	moveq	r3, #1
 80031a8:	2300      	movne	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	e00c      	b.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	43da      	mvns	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4013      	ands	r3, r2
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bf0c      	ite	eq
 80031c2:	2301      	moveq	r3, #1
 80031c4:	2300      	movne	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d0b6      	beq.n	800313e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031e8:	e051      	b.n	800328e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f8:	d123      	bne.n	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003208:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003212:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f043 0204 	orr.w	r2, r3, #4
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e046      	b.n	80032d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003248:	d021      	beq.n	800328e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324a:	f7fe fedb 	bl	8002004 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	429a      	cmp	r2, r3
 8003258:	d302      	bcc.n	8003260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d116      	bne.n	800328e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f043 0220 	orr.w	r2, r3, #32
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e020      	b.n	80032d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	d10c      	bne.n	80032b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	43da      	mvns	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4013      	ands	r3, r2
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf14      	ite	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	2300      	moveq	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	e00b      	b.n	80032ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	43da      	mvns	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	4013      	ands	r3, r2
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf14      	ite	ne
 80032c4:	2301      	movne	r3, #1
 80032c6:	2300      	moveq	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d18d      	bne.n	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032e4:	e02d      	b.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f8ce 	bl	8003488 <I2C_IsAcknowledgeFailed>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e02d      	b.n	8003352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032fc:	d021      	beq.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fe:	f7fe fe81 	bl	8002004 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	429a      	cmp	r2, r3
 800330c:	d302      	bcc.n	8003314 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d116      	bne.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f043 0220 	orr.w	r2, r3, #32
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e007      	b.n	8003352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334c:	2b80      	cmp	r3, #128	; 0x80
 800334e:	d1ca      	bne.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003366:	e02d      	b.n	80033c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f88d 	bl	8003488 <I2C_IsAcknowledgeFailed>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e02d      	b.n	80033d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800337e:	d021      	beq.n	80033c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003380:	f7fe fe40 	bl	8002004 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	429a      	cmp	r2, r3
 800338e:	d302      	bcc.n	8003396 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d116      	bne.n	80033c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f043 0220 	orr.w	r2, r3, #32
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e007      	b.n	80033d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d1ca      	bne.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033e8:	e042      	b.n	8003470 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d119      	bne.n	800342c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0210 	mvn.w	r2, #16
 8003400:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e029      	b.n	8003480 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342c:	f7fe fdea 	bl	8002004 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	d302      	bcc.n	8003442 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f043 0220 	orr.w	r2, r3, #32
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e007      	b.n	8003480 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b40      	cmp	r3, #64	; 0x40
 800347c:	d1b5      	bne.n	80033ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349e:	d11b      	bne.n	80034d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f043 0204 	orr.w	r2, r3, #4
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e264      	b.n	80039c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d075      	beq.n	80035f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003506:	4ba3      	ldr	r3, [pc, #652]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b04      	cmp	r3, #4
 8003510:	d00c      	beq.n	800352c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003512:	4ba0      	ldr	r3, [pc, #640]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800351a:	2b08      	cmp	r3, #8
 800351c:	d112      	bne.n	8003544 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351e:	4b9d      	ldr	r3, [pc, #628]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800352a:	d10b      	bne.n	8003544 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352c:	4b99      	ldr	r3, [pc, #612]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d05b      	beq.n	80035f0 <HAL_RCC_OscConfig+0x108>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d157      	bne.n	80035f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e23f      	b.n	80039c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354c:	d106      	bne.n	800355c <HAL_RCC_OscConfig+0x74>
 800354e:	4b91      	ldr	r3, [pc, #580]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a90      	ldr	r2, [pc, #576]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e01d      	b.n	8003598 <HAL_RCC_OscConfig+0xb0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0x98>
 8003566:	4b8b      	ldr	r3, [pc, #556]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a8a      	ldr	r2, [pc, #552]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800356c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b88      	ldr	r3, [pc, #544]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a87      	ldr	r2, [pc, #540]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e00b      	b.n	8003598 <HAL_RCC_OscConfig+0xb0>
 8003580:	4b84      	ldr	r3, [pc, #528]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a83      	ldr	r2, [pc, #524]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b81      	ldr	r3, [pc, #516]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a80      	ldr	r2, [pc, #512]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d013      	beq.n	80035c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fe fd30 	bl	8002004 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe fd2c 	bl	8002004 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e204      	b.n	80039c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ba:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0xc0>
 80035c6:	e014      	b.n	80035f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fe fd1c 	bl	8002004 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe fd18 	bl	8002004 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e1f0      	b.n	80039c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e2:	4b6c      	ldr	r3, [pc, #432]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0xe8>
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d063      	beq.n	80036c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035fe:	4b65      	ldr	r3, [pc, #404]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00b      	beq.n	8003622 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360a:	4b62      	ldr	r3, [pc, #392]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003612:	2b08      	cmp	r3, #8
 8003614:	d11c      	bne.n	8003650 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003616:	4b5f      	ldr	r3, [pc, #380]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d116      	bne.n	8003650 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003622:	4b5c      	ldr	r3, [pc, #368]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <HAL_RCC_OscConfig+0x152>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d001      	beq.n	800363a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e1c4      	b.n	80039c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363a:	4b56      	ldr	r3, [pc, #344]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4952      	ldr	r1, [pc, #328]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364e:	e03a      	b.n	80036c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d020      	beq.n	800369a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003658:	4b4f      	ldr	r3, [pc, #316]	; (8003798 <HAL_RCC_OscConfig+0x2b0>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365e:	f7fe fcd1 	bl	8002004 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003666:	f7fe fccd 	bl	8002004 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e1a5      	b.n	80039c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003678:	4b46      	ldr	r3, [pc, #280]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003684:	4b43      	ldr	r3, [pc, #268]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4940      	ldr	r1, [pc, #256]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003694:	4313      	orrs	r3, r2
 8003696:	600b      	str	r3, [r1, #0]
 8003698:	e015      	b.n	80036c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800369a:	4b3f      	ldr	r3, [pc, #252]	; (8003798 <HAL_RCC_OscConfig+0x2b0>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe fcb0 	bl	8002004 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a8:	f7fe fcac 	bl	8002004 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e184      	b.n	80039c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ba:	4b36      	ldr	r3, [pc, #216]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d030      	beq.n	8003734 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d016      	beq.n	8003708 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036da:	4b30      	ldr	r3, [pc, #192]	; (800379c <HAL_RCC_OscConfig+0x2b4>)
 80036dc:	2201      	movs	r2, #1
 80036de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e0:	f7fe fc90 	bl	8002004 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e8:	f7fe fc8c 	bl	8002004 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e164      	b.n	80039c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fa:	4b26      	ldr	r3, [pc, #152]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0x200>
 8003706:	e015      	b.n	8003734 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003708:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_RCC_OscConfig+0x2b4>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370e:	f7fe fc79 	bl	8002004 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003716:	f7fe fc75 	bl	8002004 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e14d      	b.n	80039c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800372a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f0      	bne.n	8003716 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80a0 	beq.w	8003882 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003742:	2300      	movs	r3, #0
 8003744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003746:	4b13      	ldr	r3, [pc, #76]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10f      	bne.n	8003772 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4a0e      	ldr	r2, [pc, #56]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_OscConfig+0x2b8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d121      	bne.n	80037c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <HAL_RCC_OscConfig+0x2b8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a07      	ldr	r2, [pc, #28]	; (80037a0 <HAL_RCC_OscConfig+0x2b8>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378a:	f7fe fc3b 	bl	8002004 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	e011      	b.n	80037b6 <HAL_RCC_OscConfig+0x2ce>
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800
 8003798:	42470000 	.word	0x42470000
 800379c:	42470e80 	.word	0x42470e80
 80037a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a4:	f7fe fc2e 	bl	8002004 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e106      	b.n	80039c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b6:	4b85      	ldr	r3, [pc, #532]	; (80039cc <HAL_RCC_OscConfig+0x4e4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d106      	bne.n	80037d8 <HAL_RCC_OscConfig+0x2f0>
 80037ca:	4b81      	ldr	r3, [pc, #516]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	4a80      	ldr	r2, [pc, #512]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	6713      	str	r3, [r2, #112]	; 0x70
 80037d6:	e01c      	b.n	8003812 <HAL_RCC_OscConfig+0x32a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b05      	cmp	r3, #5
 80037de:	d10c      	bne.n	80037fa <HAL_RCC_OscConfig+0x312>
 80037e0:	4b7b      	ldr	r3, [pc, #492]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	4a7a      	ldr	r2, [pc, #488]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 80037e6:	f043 0304 	orr.w	r3, r3, #4
 80037ea:	6713      	str	r3, [r2, #112]	; 0x70
 80037ec:	4b78      	ldr	r3, [pc, #480]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	4a77      	ldr	r2, [pc, #476]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	6713      	str	r3, [r2, #112]	; 0x70
 80037f8:	e00b      	b.n	8003812 <HAL_RCC_OscConfig+0x32a>
 80037fa:	4b75      	ldr	r3, [pc, #468]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 80037fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fe:	4a74      	ldr	r2, [pc, #464]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	6713      	str	r3, [r2, #112]	; 0x70
 8003806:	4b72      	ldr	r3, [pc, #456]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	4a71      	ldr	r2, [pc, #452]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 800380c:	f023 0304 	bic.w	r3, r3, #4
 8003810:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d015      	beq.n	8003846 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381a:	f7fe fbf3 	bl	8002004 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003820:	e00a      	b.n	8003838 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003822:	f7fe fbef 	bl	8002004 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0c5      	b.n	80039c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003838:	4b65      	ldr	r3, [pc, #404]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0ee      	beq.n	8003822 <HAL_RCC_OscConfig+0x33a>
 8003844:	e014      	b.n	8003870 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003846:	f7fe fbdd 	bl	8002004 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384c:	e00a      	b.n	8003864 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800384e:	f7fe fbd9 	bl	8002004 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	f241 3288 	movw	r2, #5000	; 0x1388
 800385c:	4293      	cmp	r3, r2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e0af      	b.n	80039c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003864:	4b5a      	ldr	r3, [pc, #360]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1ee      	bne.n	800384e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d105      	bne.n	8003882 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003876:	4b56      	ldr	r3, [pc, #344]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	4a55      	ldr	r2, [pc, #340]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 800387c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003880:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 809b 	beq.w	80039c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800388c:	4b50      	ldr	r3, [pc, #320]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 030c 	and.w	r3, r3, #12
 8003894:	2b08      	cmp	r3, #8
 8003896:	d05c      	beq.n	8003952 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d141      	bne.n	8003924 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a0:	4b4c      	ldr	r3, [pc, #304]	; (80039d4 <HAL_RCC_OscConfig+0x4ec>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a6:	f7fe fbad 	bl	8002004 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ae:	f7fe fba9 	bl	8002004 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e081      	b.n	80039c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c0:	4b43      	ldr	r3, [pc, #268]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1f0      	bne.n	80038ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	019b      	lsls	r3, r3, #6
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	3b01      	subs	r3, #1
 80038e6:	041b      	lsls	r3, r3, #16
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	061b      	lsls	r3, r3, #24
 80038f0:	4937      	ldr	r1, [pc, #220]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f6:	4b37      	ldr	r3, [pc, #220]	; (80039d4 <HAL_RCC_OscConfig+0x4ec>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fe fb82 	bl	8002004 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003904:	f7fe fb7e 	bl	8002004 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e056      	b.n	80039c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003916:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x41c>
 8003922:	e04e      	b.n	80039c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003924:	4b2b      	ldr	r3, [pc, #172]	; (80039d4 <HAL_RCC_OscConfig+0x4ec>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392a:	f7fe fb6b 	bl	8002004 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003932:	f7fe fb67 	bl	8002004 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e03f      	b.n	80039c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003944:	4b22      	ldr	r3, [pc, #136]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f0      	bne.n	8003932 <HAL_RCC_OscConfig+0x44a>
 8003950:	e037      	b.n	80039c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e032      	b.n	80039c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800395e:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <HAL_RCC_OscConfig+0x4e8>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d028      	beq.n	80039be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d121      	bne.n	80039be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d11a      	bne.n	80039be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800398e:	4013      	ands	r3, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003994:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003996:	4293      	cmp	r3, r2
 8003998:	d111      	bne.n	80039be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	085b      	lsrs	r3, r3, #1
 80039a6:	3b01      	subs	r3, #1
 80039a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d107      	bne.n	80039be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d001      	beq.n	80039c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40007000 	.word	0x40007000
 80039d0:	40023800 	.word	0x40023800
 80039d4:	42470060 	.word	0x42470060

080039d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0cc      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039ec:	4b68      	ldr	r3, [pc, #416]	; (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d90c      	bls.n	8003a14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fa:	4b65      	ldr	r3, [pc, #404]	; (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a02:	4b63      	ldr	r3, [pc, #396]	; (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0b8      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d020      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a2c:	4b59      	ldr	r3, [pc, #356]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4a58      	ldr	r2, [pc, #352]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a44:	4b53      	ldr	r3, [pc, #332]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4a52      	ldr	r2, [pc, #328]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a50:	4b50      	ldr	r3, [pc, #320]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	494d      	ldr	r1, [pc, #308]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d044      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	4b47      	ldr	r3, [pc, #284]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d119      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e07f      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a96:	4b3f      	ldr	r3, [pc, #252]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e06f      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa6:	4b3b      	ldr	r3, [pc, #236]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e067      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ab6:	4b37      	ldr	r3, [pc, #220]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f023 0203 	bic.w	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4934      	ldr	r1, [pc, #208]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac8:	f7fe fa9c 	bl	8002004 <HAL_GetTick>
 8003acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad0:	f7fe fa98 	bl	8002004 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e04f      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae6:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 020c 	and.w	r2, r3, #12
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d1eb      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003af8:	4b25      	ldr	r3, [pc, #148]	; (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d20c      	bcs.n	8003b20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b06:	4b22      	ldr	r3, [pc, #136]	; (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0e:	4b20      	ldr	r3, [pc, #128]	; (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e032      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b2c:	4b19      	ldr	r3, [pc, #100]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4916      	ldr	r1, [pc, #88]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d009      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b4a:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	490e      	ldr	r1, [pc, #56]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b5e:	f000 f821 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003b62:	4602      	mov	r2, r0
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	490a      	ldr	r1, [pc, #40]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 8003b70:	5ccb      	ldrb	r3, [r1, r3]
 8003b72:	fa22 f303 	lsr.w	r3, r2, r3
 8003b76:	4a09      	ldr	r2, [pc, #36]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b7a:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe f9fc 	bl	8001f7c <HAL_InitTick>

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023c00 	.word	0x40023c00
 8003b94:	40023800 	.word	0x40023800
 8003b98:	0800b970 	.word	0x0800b970
 8003b9c:	20000000 	.word	0x20000000
 8003ba0:	20000004 	.word	0x20000004

08003ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba4:	b5b0      	push	{r4, r5, r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003baa:	2100      	movs	r1, #0
 8003bac:	6079      	str	r1, [r7, #4]
 8003bae:	2100      	movs	r1, #0
 8003bb0:	60f9      	str	r1, [r7, #12]
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bba:	4952      	ldr	r1, [pc, #328]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bbc:	6889      	ldr	r1, [r1, #8]
 8003bbe:	f001 010c 	and.w	r1, r1, #12
 8003bc2:	2908      	cmp	r1, #8
 8003bc4:	d00d      	beq.n	8003be2 <HAL_RCC_GetSysClockFreq+0x3e>
 8003bc6:	2908      	cmp	r1, #8
 8003bc8:	f200 8094 	bhi.w	8003cf4 <HAL_RCC_GetSysClockFreq+0x150>
 8003bcc:	2900      	cmp	r1, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x32>
 8003bd0:	2904      	cmp	r1, #4
 8003bd2:	d003      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x38>
 8003bd4:	e08e      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd6:	4b4c      	ldr	r3, [pc, #304]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x164>)
 8003bd8:	60bb      	str	r3, [r7, #8]
       break;
 8003bda:	e08e      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bdc:	4b4b      	ldr	r3, [pc, #300]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x168>)
 8003bde:	60bb      	str	r3, [r7, #8]
      break;
 8003be0:	e08b      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be2:	4948      	ldr	r1, [pc, #288]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x160>)
 8003be4:	6849      	ldr	r1, [r1, #4]
 8003be6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003bea:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bec:	4945      	ldr	r1, [pc, #276]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bee:	6849      	ldr	r1, [r1, #4]
 8003bf0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003bf4:	2900      	cmp	r1, #0
 8003bf6:	d024      	beq.n	8003c42 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf8:	4942      	ldr	r1, [pc, #264]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bfa:	6849      	ldr	r1, [r1, #4]
 8003bfc:	0989      	lsrs	r1, r1, #6
 8003bfe:	4608      	mov	r0, r1
 8003c00:	f04f 0100 	mov.w	r1, #0
 8003c04:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003c08:	f04f 0500 	mov.w	r5, #0
 8003c0c:	ea00 0204 	and.w	r2, r0, r4
 8003c10:	ea01 0305 	and.w	r3, r1, r5
 8003c14:	493d      	ldr	r1, [pc, #244]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x168>)
 8003c16:	fb01 f003 	mul.w	r0, r1, r3
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	fb01 f102 	mul.w	r1, r1, r2
 8003c20:	1844      	adds	r4, r0, r1
 8003c22:	493a      	ldr	r1, [pc, #232]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x168>)
 8003c24:	fba2 0101 	umull	r0, r1, r2, r1
 8003c28:	1863      	adds	r3, r4, r1
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	f7fd f828 	bl	8000c88 <__aeabi_uldivmod>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	e04a      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c42:	4b30      	ldr	r3, [pc, #192]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	099b      	lsrs	r3, r3, #6
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c52:	f04f 0100 	mov.w	r1, #0
 8003c56:	ea02 0400 	and.w	r4, r2, r0
 8003c5a:	ea03 0501 	and.w	r5, r3, r1
 8003c5e:	4620      	mov	r0, r4
 8003c60:	4629      	mov	r1, r5
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	014b      	lsls	r3, r1, #5
 8003c6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c70:	0142      	lsls	r2, r0, #5
 8003c72:	4610      	mov	r0, r2
 8003c74:	4619      	mov	r1, r3
 8003c76:	1b00      	subs	r0, r0, r4
 8003c78:	eb61 0105 	sbc.w	r1, r1, r5
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	018b      	lsls	r3, r1, #6
 8003c86:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c8a:	0182      	lsls	r2, r0, #6
 8003c8c:	1a12      	subs	r2, r2, r0
 8003c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c92:	f04f 0000 	mov.w	r0, #0
 8003c96:	f04f 0100 	mov.w	r1, #0
 8003c9a:	00d9      	lsls	r1, r3, #3
 8003c9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ca0:	00d0      	lsls	r0, r2, #3
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	1912      	adds	r2, r2, r4
 8003ca8:	eb45 0303 	adc.w	r3, r5, r3
 8003cac:	f04f 0000 	mov.w	r0, #0
 8003cb0:	f04f 0100 	mov.w	r1, #0
 8003cb4:	0299      	lsls	r1, r3, #10
 8003cb6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cba:	0290      	lsls	r0, r2, #10
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	f7fc ffdc 	bl	8000c88 <__aeabi_uldivmod>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x160>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	0c1b      	lsrs	r3, r3, #16
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf0:	60bb      	str	r3, [r7, #8]
      break;
 8003cf2:	e002      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cf4:	4b04      	ldr	r3, [pc, #16]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x164>)
 8003cf6:	60bb      	str	r3, [r7, #8]
      break;
 8003cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bdb0      	pop	{r4, r5, r7, pc}
 8003d04:	40023800 	.word	0x40023800
 8003d08:	00f42400 	.word	0x00f42400
 8003d0c:	017d7840 	.word	0x017d7840

08003d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d14:	4b03      	ldr	r3, [pc, #12]	; (8003d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d16:	681b      	ldr	r3, [r3, #0]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000000 	.word	0x20000000

08003d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d2c:	f7ff fff0 	bl	8003d10 <HAL_RCC_GetHCLKFreq>
 8003d30:	4602      	mov	r2, r0
 8003d32:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	0a9b      	lsrs	r3, r3, #10
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	4903      	ldr	r1, [pc, #12]	; (8003d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d3e:	5ccb      	ldrb	r3, [r1, r3]
 8003d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	0800b980 	.word	0x0800b980

08003d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d54:	f7ff ffdc 	bl	8003d10 <HAL_RCC_GetHCLKFreq>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	0b5b      	lsrs	r3, r3, #13
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	4903      	ldr	r1, [pc, #12]	; (8003d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d66:	5ccb      	ldrb	r3, [r1, r3]
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40023800 	.word	0x40023800
 8003d74:	0800b980 	.word	0x0800b980

08003d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e03f      	b.n	8003e0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd ff2a 	bl	8001bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2224      	movs	r2, #36	; 0x24
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f9cb 	bl	8004158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b08a      	sub	sp, #40	; 0x28
 8003e16:	af02      	add	r7, sp, #8
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	d17c      	bne.n	8003f2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <HAL_UART_Transmit+0x2c>
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e075      	b.n	8003f2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_UART_Transmit+0x3e>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e06e      	b.n	8003f2e <HAL_UART_Transmit+0x11c>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2221      	movs	r2, #33	; 0x21
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e66:	f7fe f8cd 	bl	8002004 <HAL_GetTick>
 8003e6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	88fa      	ldrh	r2, [r7, #6]
 8003e70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	88fa      	ldrh	r2, [r7, #6]
 8003e76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e80:	d108      	bne.n	8003e94 <HAL_UART_Transmit+0x82>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d104      	bne.n	8003e94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	e003      	b.n	8003e9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ea4:	e02a      	b.n	8003efc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2200      	movs	r2, #0
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f8e2 	bl	800407a <UART_WaitOnFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e036      	b.n	8003f2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10b      	bne.n	8003ede <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ed4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	3302      	adds	r3, #2
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	e007      	b.n	8003eee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	781a      	ldrb	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	3301      	adds	r3, #1
 8003eec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1cf      	bne.n	8003ea6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2140      	movs	r1, #64	; 0x40
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f8b2 	bl	800407a <UART_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e006      	b.n	8003f2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e000      	b.n	8003f2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
  }
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3720      	adds	r7, #32
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b08a      	sub	sp, #40	; 0x28
 8003f3a:	af02      	add	r7, sp, #8
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	4613      	mov	r3, r2
 8003f44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	f040 808c 	bne.w	8004070 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_UART_Receive+0x2e>
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e084      	b.n	8004072 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_UART_Receive+0x40>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e07d      	b.n	8004072 <HAL_UART_Receive+0x13c>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2222      	movs	r2, #34	; 0x22
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f92:	f7fe f837 	bl	8002004 <HAL_GetTick>
 8003f96:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	88fa      	ldrh	r2, [r7, #6]
 8003f9c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	88fa      	ldrh	r2, [r7, #6]
 8003fa2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fac:	d108      	bne.n	8003fc0 <HAL_UART_Receive+0x8a>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d104      	bne.n	8003fc0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	e003      	b.n	8003fc8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003fd0:	e043      	b.n	800405a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2120      	movs	r1, #32
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f84c 	bl	800407a <UART_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e042      	b.n	8004072 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10c      	bne.n	800400c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	3302      	adds	r3, #2
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	e01f      	b.n	800404c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004014:	d007      	beq.n	8004026 <HAL_UART_Receive+0xf0>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <HAL_UART_Receive+0xfe>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	b2da      	uxtb	r2, r3
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	e008      	b.n	8004046 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004040:	b2da      	uxtb	r2, r3
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3301      	adds	r3, #1
 800404a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1b6      	bne.n	8003fd2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	e000      	b.n	8004072 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004070:	2302      	movs	r3, #2
  }
}
 8004072:	4618      	mov	r0, r3
 8004074:	3720      	adds	r7, #32
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b090      	sub	sp, #64	; 0x40
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	603b      	str	r3, [r7, #0]
 8004086:	4613      	mov	r3, r2
 8004088:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800408a:	e050      	b.n	800412e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004092:	d04c      	beq.n	800412e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <UART_WaitOnFlagUntilTimeout+0x30>
 800409a:	f7fd ffb3 	bl	8002004 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d241      	bcs.n	800412e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	330c      	adds	r3, #12
 80040b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040ca:	637a      	str	r2, [r7, #52]	; 0x34
 80040cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e5      	bne.n	80040aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3314      	adds	r3, #20
 80040e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	613b      	str	r3, [r7, #16]
   return(result);
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3314      	adds	r3, #20
 80040fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040fe:	623a      	str	r2, [r7, #32]
 8004100:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	69f9      	ldr	r1, [r7, #28]
 8004104:	6a3a      	ldr	r2, [r7, #32]
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	61bb      	str	r3, [r7, #24]
   return(result);
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e5      	bne.n	80040de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e00f      	b.n	800414e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4013      	ands	r3, r2
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	429a      	cmp	r2, r3
 800413c:	bf0c      	ite	eq
 800413e:	2301      	moveq	r3, #1
 8004140:	2300      	movne	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	429a      	cmp	r2, r3
 800414a:	d09f      	beq.n	800408c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3740      	adds	r7, #64	; 0x40
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800415c:	b09f      	sub	sp, #124	; 0x7c
 800415e:	af00      	add	r7, sp, #0
 8004160:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800416c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416e:	68d9      	ldr	r1, [r3, #12]
 8004170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	ea40 0301 	orr.w	r3, r0, r1
 8004178:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800417a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	431a      	orrs	r2, r3
 8004184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	431a      	orrs	r2, r3
 800418a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	4313      	orrs	r3, r2
 8004190:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800419c:	f021 010c 	bic.w	r1, r1, #12
 80041a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041a6:	430b      	orrs	r3, r1
 80041a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b6:	6999      	ldr	r1, [r3, #24]
 80041b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	ea40 0301 	orr.w	r3, r0, r1
 80041c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	4bc5      	ldr	r3, [pc, #788]	; (80044dc <UART_SetConfig+0x384>)
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d004      	beq.n	80041d6 <UART_SetConfig+0x7e>
 80041cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	4bc3      	ldr	r3, [pc, #780]	; (80044e0 <UART_SetConfig+0x388>)
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d103      	bne.n	80041de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041d6:	f7ff fdbb 	bl	8003d50 <HAL_RCC_GetPCLK2Freq>
 80041da:	6778      	str	r0, [r7, #116]	; 0x74
 80041dc:	e002      	b.n	80041e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041de:	f7ff fda3 	bl	8003d28 <HAL_RCC_GetPCLK1Freq>
 80041e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ec:	f040 80b6 	bne.w	800435c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f2:	461c      	mov	r4, r3
 80041f4:	f04f 0500 	mov.w	r5, #0
 80041f8:	4622      	mov	r2, r4
 80041fa:	462b      	mov	r3, r5
 80041fc:	1891      	adds	r1, r2, r2
 80041fe:	6439      	str	r1, [r7, #64]	; 0x40
 8004200:	415b      	adcs	r3, r3
 8004202:	647b      	str	r3, [r7, #68]	; 0x44
 8004204:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004208:	1912      	adds	r2, r2, r4
 800420a:	eb45 0303 	adc.w	r3, r5, r3
 800420e:	f04f 0000 	mov.w	r0, #0
 8004212:	f04f 0100 	mov.w	r1, #0
 8004216:	00d9      	lsls	r1, r3, #3
 8004218:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800421c:	00d0      	lsls	r0, r2, #3
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	1911      	adds	r1, r2, r4
 8004224:	6639      	str	r1, [r7, #96]	; 0x60
 8004226:	416b      	adcs	r3, r5
 8004228:	667b      	str	r3, [r7, #100]	; 0x64
 800422a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	461a      	mov	r2, r3
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	1891      	adds	r1, r2, r2
 8004236:	63b9      	str	r1, [r7, #56]	; 0x38
 8004238:	415b      	adcs	r3, r3
 800423a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800423c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004240:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004244:	f7fc fd20 	bl	8000c88 <__aeabi_uldivmod>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4ba5      	ldr	r3, [pc, #660]	; (80044e4 <UART_SetConfig+0x38c>)
 800424e:	fba3 2302 	umull	r2, r3, r3, r2
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	011e      	lsls	r6, r3, #4
 8004256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004258:	461c      	mov	r4, r3
 800425a:	f04f 0500 	mov.w	r5, #0
 800425e:	4622      	mov	r2, r4
 8004260:	462b      	mov	r3, r5
 8004262:	1891      	adds	r1, r2, r2
 8004264:	6339      	str	r1, [r7, #48]	; 0x30
 8004266:	415b      	adcs	r3, r3
 8004268:	637b      	str	r3, [r7, #52]	; 0x34
 800426a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800426e:	1912      	adds	r2, r2, r4
 8004270:	eb45 0303 	adc.w	r3, r5, r3
 8004274:	f04f 0000 	mov.w	r0, #0
 8004278:	f04f 0100 	mov.w	r1, #0
 800427c:	00d9      	lsls	r1, r3, #3
 800427e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004282:	00d0      	lsls	r0, r2, #3
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	1911      	adds	r1, r2, r4
 800428a:	65b9      	str	r1, [r7, #88]	; 0x58
 800428c:	416b      	adcs	r3, r5
 800428e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	461a      	mov	r2, r3
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	1891      	adds	r1, r2, r2
 800429c:	62b9      	str	r1, [r7, #40]	; 0x28
 800429e:	415b      	adcs	r3, r3
 80042a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80042aa:	f7fc fced 	bl	8000c88 <__aeabi_uldivmod>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4b8c      	ldr	r3, [pc, #560]	; (80044e4 <UART_SetConfig+0x38c>)
 80042b4:	fba3 1302 	umull	r1, r3, r3, r2
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	2164      	movs	r1, #100	; 0x64
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	3332      	adds	r3, #50	; 0x32
 80042c6:	4a87      	ldr	r2, [pc, #540]	; (80044e4 <UART_SetConfig+0x38c>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042d4:	441e      	add	r6, r3
 80042d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d8:	4618      	mov	r0, r3
 80042da:	f04f 0100 	mov.w	r1, #0
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	1894      	adds	r4, r2, r2
 80042e4:	623c      	str	r4, [r7, #32]
 80042e6:	415b      	adcs	r3, r3
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ee:	1812      	adds	r2, r2, r0
 80042f0:	eb41 0303 	adc.w	r3, r1, r3
 80042f4:	f04f 0400 	mov.w	r4, #0
 80042f8:	f04f 0500 	mov.w	r5, #0
 80042fc:	00dd      	lsls	r5, r3, #3
 80042fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004302:	00d4      	lsls	r4, r2, #3
 8004304:	4622      	mov	r2, r4
 8004306:	462b      	mov	r3, r5
 8004308:	1814      	adds	r4, r2, r0
 800430a:	653c      	str	r4, [r7, #80]	; 0x50
 800430c:	414b      	adcs	r3, r1
 800430e:	657b      	str	r3, [r7, #84]	; 0x54
 8004310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	461a      	mov	r2, r3
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	1891      	adds	r1, r2, r2
 800431c:	61b9      	str	r1, [r7, #24]
 800431e:	415b      	adcs	r3, r3
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004326:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800432a:	f7fc fcad 	bl	8000c88 <__aeabi_uldivmod>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4b6c      	ldr	r3, [pc, #432]	; (80044e4 <UART_SetConfig+0x38c>)
 8004334:	fba3 1302 	umull	r1, r3, r3, r2
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	2164      	movs	r1, #100	; 0x64
 800433c:	fb01 f303 	mul.w	r3, r1, r3
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	3332      	adds	r3, #50	; 0x32
 8004346:	4a67      	ldr	r2, [pc, #412]	; (80044e4 <UART_SetConfig+0x38c>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	095b      	lsrs	r3, r3, #5
 800434e:	f003 0207 	and.w	r2, r3, #7
 8004352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4432      	add	r2, r6
 8004358:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800435a:	e0b9      	b.n	80044d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800435c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800435e:	461c      	mov	r4, r3
 8004360:	f04f 0500 	mov.w	r5, #0
 8004364:	4622      	mov	r2, r4
 8004366:	462b      	mov	r3, r5
 8004368:	1891      	adds	r1, r2, r2
 800436a:	6139      	str	r1, [r7, #16]
 800436c:	415b      	adcs	r3, r3
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004374:	1912      	adds	r2, r2, r4
 8004376:	eb45 0303 	adc.w	r3, r5, r3
 800437a:	f04f 0000 	mov.w	r0, #0
 800437e:	f04f 0100 	mov.w	r1, #0
 8004382:	00d9      	lsls	r1, r3, #3
 8004384:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004388:	00d0      	lsls	r0, r2, #3
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	eb12 0804 	adds.w	r8, r2, r4
 8004392:	eb43 0905 	adc.w	r9, r3, r5
 8004396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4618      	mov	r0, r3
 800439c:	f04f 0100 	mov.w	r1, #0
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	008b      	lsls	r3, r1, #2
 80043aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043ae:	0082      	lsls	r2, r0, #2
 80043b0:	4640      	mov	r0, r8
 80043b2:	4649      	mov	r1, r9
 80043b4:	f7fc fc68 	bl	8000c88 <__aeabi_uldivmod>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4b49      	ldr	r3, [pc, #292]	; (80044e4 <UART_SetConfig+0x38c>)
 80043be:	fba3 2302 	umull	r2, r3, r3, r2
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	011e      	lsls	r6, r3, #4
 80043c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c8:	4618      	mov	r0, r3
 80043ca:	f04f 0100 	mov.w	r1, #0
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	1894      	adds	r4, r2, r2
 80043d4:	60bc      	str	r4, [r7, #8]
 80043d6:	415b      	adcs	r3, r3
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043de:	1812      	adds	r2, r2, r0
 80043e0:	eb41 0303 	adc.w	r3, r1, r3
 80043e4:	f04f 0400 	mov.w	r4, #0
 80043e8:	f04f 0500 	mov.w	r5, #0
 80043ec:	00dd      	lsls	r5, r3, #3
 80043ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043f2:	00d4      	lsls	r4, r2, #3
 80043f4:	4622      	mov	r2, r4
 80043f6:	462b      	mov	r3, r5
 80043f8:	1814      	adds	r4, r2, r0
 80043fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80043fc:	414b      	adcs	r3, r1
 80043fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	4618      	mov	r0, r3
 8004406:	f04f 0100 	mov.w	r1, #0
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	008b      	lsls	r3, r1, #2
 8004414:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004418:	0082      	lsls	r2, r0, #2
 800441a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800441e:	f7fc fc33 	bl	8000c88 <__aeabi_uldivmod>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4b2f      	ldr	r3, [pc, #188]	; (80044e4 <UART_SetConfig+0x38c>)
 8004428:	fba3 1302 	umull	r1, r3, r3, r2
 800442c:	095b      	lsrs	r3, r3, #5
 800442e:	2164      	movs	r1, #100	; 0x64
 8004430:	fb01 f303 	mul.w	r3, r1, r3
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	3332      	adds	r3, #50	; 0x32
 800443a:	4a2a      	ldr	r2, [pc, #168]	; (80044e4 <UART_SetConfig+0x38c>)
 800443c:	fba2 2303 	umull	r2, r3, r2, r3
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004446:	441e      	add	r6, r3
 8004448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800444a:	4618      	mov	r0, r3
 800444c:	f04f 0100 	mov.w	r1, #0
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	1894      	adds	r4, r2, r2
 8004456:	603c      	str	r4, [r7, #0]
 8004458:	415b      	adcs	r3, r3
 800445a:	607b      	str	r3, [r7, #4]
 800445c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004460:	1812      	adds	r2, r2, r0
 8004462:	eb41 0303 	adc.w	r3, r1, r3
 8004466:	f04f 0400 	mov.w	r4, #0
 800446a:	f04f 0500 	mov.w	r5, #0
 800446e:	00dd      	lsls	r5, r3, #3
 8004470:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004474:	00d4      	lsls	r4, r2, #3
 8004476:	4622      	mov	r2, r4
 8004478:	462b      	mov	r3, r5
 800447a:	eb12 0a00 	adds.w	sl, r2, r0
 800447e:	eb43 0b01 	adc.w	fp, r3, r1
 8004482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	4618      	mov	r0, r3
 8004488:	f04f 0100 	mov.w	r1, #0
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	008b      	lsls	r3, r1, #2
 8004496:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800449a:	0082      	lsls	r2, r0, #2
 800449c:	4650      	mov	r0, sl
 800449e:	4659      	mov	r1, fp
 80044a0:	f7fc fbf2 	bl	8000c88 <__aeabi_uldivmod>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <UART_SetConfig+0x38c>)
 80044aa:	fba3 1302 	umull	r1, r3, r3, r2
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2164      	movs	r1, #100	; 0x64
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	3332      	adds	r3, #50	; 0x32
 80044bc:	4a09      	ldr	r2, [pc, #36]	; (80044e4 <UART_SetConfig+0x38c>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	f003 020f 	and.w	r2, r3, #15
 80044c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4432      	add	r2, r6
 80044ce:	609a      	str	r2, [r3, #8]
}
 80044d0:	bf00      	nop
 80044d2:	377c      	adds	r7, #124	; 0x7c
 80044d4:	46bd      	mov	sp, r7
 80044d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044da:	bf00      	nop
 80044dc:	40011000 	.word	0x40011000
 80044e0:	40011400 	.word	0x40011400
 80044e4:	51eb851f 	.word	0x51eb851f

080044e8 <__NVIC_SetPriority>:
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	6039      	str	r1, [r7, #0]
 80044f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	db0a      	blt.n	8004512 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	490c      	ldr	r1, [pc, #48]	; (8004534 <__NVIC_SetPriority+0x4c>)
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	0112      	lsls	r2, r2, #4
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	440b      	add	r3, r1
 800450c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004510:	e00a      	b.n	8004528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	b2da      	uxtb	r2, r3
 8004516:	4908      	ldr	r1, [pc, #32]	; (8004538 <__NVIC_SetPriority+0x50>)
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	3b04      	subs	r3, #4
 8004520:	0112      	lsls	r2, r2, #4
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	440b      	add	r3, r1
 8004526:	761a      	strb	r2, [r3, #24]
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	e000e100 	.word	0xe000e100
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004540:	2100      	movs	r1, #0
 8004542:	f06f 0004 	mvn.w	r0, #4
 8004546:	f7ff ffcf 	bl	80044e8 <__NVIC_SetPriority>
#endif
}
 800454a:	bf00      	nop
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004556:	f3ef 8305 	mrs	r3, IPSR
 800455a:	603b      	str	r3, [r7, #0]
  return(result);
 800455c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004562:	f06f 0305 	mvn.w	r3, #5
 8004566:	607b      	str	r3, [r7, #4]
 8004568:	e00c      	b.n	8004584 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800456a:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <osKernelInitialize+0x44>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d105      	bne.n	800457e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004572:	4b08      	ldr	r3, [pc, #32]	; (8004594 <osKernelInitialize+0x44>)
 8004574:	2201      	movs	r2, #1
 8004576:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004578:	2300      	movs	r3, #0
 800457a:	607b      	str	r3, [r7, #4]
 800457c:	e002      	b.n	8004584 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800457e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004582:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004584:	687b      	ldr	r3, [r7, #4]
}
 8004586:	4618      	mov	r0, r3
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	200003a0 	.word	0x200003a0

08004598 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800459e:	f3ef 8305 	mrs	r3, IPSR
 80045a2:	603b      	str	r3, [r7, #0]
  return(result);
 80045a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80045aa:	f06f 0305 	mvn.w	r3, #5
 80045ae:	607b      	str	r3, [r7, #4]
 80045b0:	e010      	b.n	80045d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80045b2:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <osKernelStart+0x48>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d109      	bne.n	80045ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80045ba:	f7ff ffbf 	bl	800453c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80045be:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <osKernelStart+0x48>)
 80045c0:	2202      	movs	r2, #2
 80045c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80045c4:	f001 f866 	bl	8005694 <vTaskStartScheduler>
      stat = osOK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	607b      	str	r3, [r7, #4]
 80045cc:	e002      	b.n	80045d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80045ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045d4:	687b      	ldr	r3, [r7, #4]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	200003a0 	.word	0x200003a0

080045e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08e      	sub	sp, #56	; 0x38
 80045e8:	af04      	add	r7, sp, #16
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f4:	f3ef 8305 	mrs	r3, IPSR
 80045f8:	617b      	str	r3, [r7, #20]
  return(result);
 80045fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d17e      	bne.n	80046fe <osThreadNew+0x11a>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d07b      	beq.n	80046fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004606:	2380      	movs	r3, #128	; 0x80
 8004608:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800460a:	2318      	movs	r3, #24
 800460c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800460e:	2300      	movs	r3, #0
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004616:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d045      	beq.n	80046aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <osThreadNew+0x48>
        name = attr->name;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <osThreadNew+0x6e>
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	2b38      	cmp	r3, #56	; 0x38
 8004644:	d805      	bhi.n	8004652 <osThreadNew+0x6e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <osThreadNew+0x72>
        return (NULL);
 8004652:	2300      	movs	r3, #0
 8004654:	e054      	b.n	8004700 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	089b      	lsrs	r3, r3, #2
 8004664:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00e      	beq.n	800468c <osThreadNew+0xa8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b5b      	cmp	r3, #91	; 0x5b
 8004674:	d90a      	bls.n	800468c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800467a:	2b00      	cmp	r3, #0
 800467c:	d006      	beq.n	800468c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <osThreadNew+0xa8>
        mem = 1;
 8004686:	2301      	movs	r3, #1
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	e010      	b.n	80046ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10c      	bne.n	80046ae <osThreadNew+0xca>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d108      	bne.n	80046ae <osThreadNew+0xca>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d104      	bne.n	80046ae <osThreadNew+0xca>
          mem = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	e001      	b.n	80046ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d110      	bne.n	80046d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046bc:	9202      	str	r2, [sp, #8]
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	6a3a      	ldr	r2, [r7, #32]
 80046c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 fe0c 	bl	80052e8 <xTaskCreateStatic>
 80046d0:	4603      	mov	r3, r0
 80046d2:	613b      	str	r3, [r7, #16]
 80046d4:	e013      	b.n	80046fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d110      	bne.n	80046fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	b29a      	uxth	r2, r3
 80046e0:	f107 0310 	add.w	r3, r7, #16
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fe57 	bl	80053a2 <xTaskCreate>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d001      	beq.n	80046fe <osThreadNew+0x11a>
            hTask = NULL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80046fe:	693b      	ldr	r3, [r7, #16]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3728      	adds	r7, #40	; 0x28
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004710:	f3ef 8305 	mrs	r3, IPSR
 8004714:	60bb      	str	r3, [r7, #8]
  return(result);
 8004716:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <osDelay+0x1c>
    stat = osErrorISR;
 800471c:	f06f 0305 	mvn.w	r3, #5
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	e007      	b.n	8004734 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <osDelay+0x2c>
      vTaskDelay(ticks);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 ff7c 	bl	800562c <vTaskDelay>
    }
  }

  return (stat);
 8004734:	68fb      	ldr	r3, [r7, #12]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4a07      	ldr	r2, [pc, #28]	; (800476c <vApplicationGetIdleTaskMemory+0x2c>)
 8004750:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4a06      	ldr	r2, [pc, #24]	; (8004770 <vApplicationGetIdleTaskMemory+0x30>)
 8004756:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2280      	movs	r2, #128	; 0x80
 800475c:	601a      	str	r2, [r3, #0]
}
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	200003a4 	.word	0x200003a4
 8004770:	20000400 	.word	0x20000400

08004774 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4a07      	ldr	r2, [pc, #28]	; (80047a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004784:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4a06      	ldr	r2, [pc, #24]	; (80047a4 <vApplicationGetTimerTaskMemory+0x30>)
 800478a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004792:	601a      	str	r2, [r3, #0]
}
 8004794:	bf00      	nop
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	20000600 	.word	0x20000600
 80047a4:	2000065c 	.word	0x2000065c

080047a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f103 0208 	add.w	r2, r3, #8
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f103 0208 	add.w	r2, r3, #8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f103 0208 	add.w	r2, r3, #8
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	601a      	str	r2, [r3, #0]
}
 800483e:	bf00      	nop
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800484a:	b480      	push	{r7}
 800484c:	b085      	sub	sp, #20
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004860:	d103      	bne.n	800486a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e00c      	b.n	8004884 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3308      	adds	r3, #8
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	e002      	b.n	8004878 <vListInsert+0x2e>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	429a      	cmp	r2, r3
 8004882:	d2f6      	bcs.n	8004872 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	601a      	str	r2, [r3, #0]
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6892      	ldr	r2, [r2, #8]
 80048d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6852      	ldr	r2, [r2, #4]
 80048dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d103      	bne.n	80048f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	1e5a      	subs	r2, r3, #1
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10a      	bne.n	800493a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004936:	bf00      	nop
 8004938:	e7fe      	b.n	8004938 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800493a:	f002 f84b 	bl	80069d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	68f9      	ldr	r1, [r7, #12]
 8004948:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800494a:	fb01 f303 	mul.w	r3, r1, r3
 800494e:	441a      	add	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	3b01      	subs	r3, #1
 800496c:	68f9      	ldr	r1, [r7, #12]
 800496e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004970:	fb01 f303 	mul.w	r3, r1, r3
 8004974:	441a      	add	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	22ff      	movs	r2, #255	; 0xff
 800497e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	22ff      	movs	r2, #255	; 0xff
 8004986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d114      	bne.n	80049ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01a      	beq.n	80049ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3310      	adds	r3, #16
 800499c:	4618      	mov	r0, r3
 800499e:	f001 f903 	bl	8005ba8 <xTaskRemoveFromEventList>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d012      	beq.n	80049ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <xQueueGenericReset+0xcc>)
 80049aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	e009      	b.n	80049ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3310      	adds	r3, #16
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fef2 	bl	80047a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3324      	adds	r3, #36	; 0x24
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff feed 	bl	80047a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049ce:	f002 f831 	bl	8006a34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049d2:	2301      	movs	r3, #1
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	e000ed04 	.word	0xe000ed04

080049e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08e      	sub	sp, #56	; 0x38
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <xQueueGenericCreateStatic+0x52>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <xQueueGenericCreateStatic+0x56>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <xQueueGenericCreateStatic+0x58>
 8004a36:	2300      	movs	r3, #0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	623b      	str	r3, [r7, #32]
}
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d102      	bne.n	8004a5e <xQueueGenericCreateStatic+0x7e>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <xQueueGenericCreateStatic+0x82>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e000      	b.n	8004a64 <xQueueGenericCreateStatic+0x84>
 8004a62:	2300      	movs	r3, #0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	61fb      	str	r3, [r7, #28]
}
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a7e:	2350      	movs	r3, #80	; 0x50
 8004a80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b50      	cmp	r3, #80	; 0x50
 8004a86:	d00a      	beq.n	8004a9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	61bb      	str	r3, [r7, #24]
}
 8004a9a:	bf00      	nop
 8004a9c:	e7fe      	b.n	8004a9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00d      	beq.n	8004ac6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ab2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	4613      	mov	r3, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f805 	bl	8004ad0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3730      	adds	r7, #48	; 0x30
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d103      	bne.n	8004aec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	e002      	b.n	8004af2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004afe:	2101      	movs	r1, #1
 8004b00:	69b8      	ldr	r0, [r7, #24]
 8004b02:	f7ff ff05 	bl	8004910 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	78fa      	ldrb	r2, [r7, #3]
 8004b0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b0e:	bf00      	nop
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08e      	sub	sp, #56	; 0x38
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b26:	2300      	movs	r3, #0
 8004b28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <xQueueGenericSend+0x32>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d103      	bne.n	8004b58 <xQueueGenericSend+0x40>
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <xQueueGenericSend+0x44>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <xQueueGenericSend+0x46>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <xQueueGenericSend+0x60>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d103      	bne.n	8004b86 <xQueueGenericSend+0x6e>
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <xQueueGenericSend+0x72>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <xQueueGenericSend+0x74>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <xQueueGenericSend+0x8e>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	623b      	str	r3, [r7, #32]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ba6:	f001 f9bd 	bl	8005f24 <xTaskGetSchedulerState>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d102      	bne.n	8004bb6 <xQueueGenericSend+0x9e>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <xQueueGenericSend+0xa2>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <xQueueGenericSend+0xa4>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10a      	bne.n	8004bd6 <xQueueGenericSend+0xbe>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	61fb      	str	r3, [r7, #28]
}
 8004bd2:	bf00      	nop
 8004bd4:	e7fe      	b.n	8004bd4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bd6:	f001 fefd 	bl	80069d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d302      	bcc.n	8004bec <xQueueGenericSend+0xd4>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d129      	bne.n	8004c40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bf2:	f000 fa0b 	bl	800500c <prvCopyDataToQueue>
 8004bf6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d010      	beq.n	8004c22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	3324      	adds	r3, #36	; 0x24
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 ffcf 	bl	8005ba8 <xTaskRemoveFromEventList>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d013      	beq.n	8004c38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c10:	4b3f      	ldr	r3, [pc, #252]	; (8004d10 <xQueueGenericSend+0x1f8>)
 8004c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	e00a      	b.n	8004c38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c28:	4b39      	ldr	r3, [pc, #228]	; (8004d10 <xQueueGenericSend+0x1f8>)
 8004c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c38:	f001 fefc 	bl	8006a34 <vPortExitCritical>
				return pdPASS;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e063      	b.n	8004d08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c46:	f001 fef5 	bl	8006a34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e05c      	b.n	8004d08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d106      	bne.n	8004c62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c54:	f107 0314 	add.w	r3, r7, #20
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f001 f809 	bl	8005c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c62:	f001 fee7 	bl	8006a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c66:	f000 fd7b 	bl	8005760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c6a:	f001 feb3 	bl	80069d4 <vPortEnterCritical>
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c74:	b25b      	sxtb	r3, r3
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c7a:	d103      	bne.n	8004c84 <xQueueGenericSend+0x16c>
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c8a:	b25b      	sxtb	r3, r3
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c90:	d103      	bne.n	8004c9a <xQueueGenericSend+0x182>
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c9a:	f001 fecb 	bl	8006a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c9e:	1d3a      	adds	r2, r7, #4
 8004ca0:	f107 0314 	add.w	r3, r7, #20
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fff8 	bl	8005c9c <xTaskCheckForTimeOut>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d124      	bne.n	8004cfc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cb4:	f000 faa2 	bl	80051fc <prvIsQueueFull>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d018      	beq.n	8004cf0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	3310      	adds	r3, #16
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 ff1e 	bl	8005b08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cce:	f000 fa2d 	bl	800512c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cd2:	f000 fd53 	bl	800577c <xTaskResumeAll>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f47f af7c 	bne.w	8004bd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004cde:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <xQueueGenericSend+0x1f8>)
 8004ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	e772      	b.n	8004bd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cf2:	f000 fa1b 	bl	800512c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cf6:	f000 fd41 	bl	800577c <xTaskResumeAll>
 8004cfa:	e76c      	b.n	8004bd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004cfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cfe:	f000 fa15 	bl	800512c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d02:	f000 fd3b 	bl	800577c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3738      	adds	r7, #56	; 0x38
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	e000ed04 	.word	0xe000ed04

08004d14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b090      	sub	sp, #64	; 0x40
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10a      	bne.n	8004d42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d30:	f383 8811 	msr	BASEPRI, r3
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d3e:	bf00      	nop
 8004d40:	e7fe      	b.n	8004d40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <xQueueGenericSendFromISR+0x3c>
 8004d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <xQueueGenericSendFromISR+0x40>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <xQueueGenericSendFromISR+0x42>
 8004d54:	2300      	movs	r3, #0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10a      	bne.n	8004d70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d6c:	bf00      	nop
 8004d6e:	e7fe      	b.n	8004d6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d103      	bne.n	8004d7e <xQueueGenericSendFromISR+0x6a>
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d101      	bne.n	8004d82 <xQueueGenericSendFromISR+0x6e>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <xQueueGenericSendFromISR+0x70>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10a      	bne.n	8004d9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	623b      	str	r3, [r7, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d9e:	f001 fefb 	bl	8006b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004da2:	f3ef 8211 	mrs	r2, BASEPRI
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	61fa      	str	r2, [r7, #28]
 8004db8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004dba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d302      	bcc.n	8004dd0 <xQueueGenericSendFromISR+0xbc>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d12f      	bne.n	8004e30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004de6:	f000 f911 	bl	800500c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004dea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004df2:	d112      	bne.n	8004e1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d016      	beq.n	8004e2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfe:	3324      	adds	r3, #36	; 0x24
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fed1 	bl	8005ba8 <xTaskRemoveFromEventList>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00e      	beq.n	8004e2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00b      	beq.n	8004e2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	e007      	b.n	8004e2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e1e:	3301      	adds	r3, #1
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	b25a      	sxtb	r2, r3
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004e2e:	e001      	b.n	8004e34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3740      	adds	r7, #64	; 0x40
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08c      	sub	sp, #48	; 0x30
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10a      	bne.n	8004e7c <xQueueReceive+0x30>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	623b      	str	r3, [r7, #32]
}
 8004e78:	bf00      	nop
 8004e7a:	e7fe      	b.n	8004e7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d103      	bne.n	8004e8a <xQueueReceive+0x3e>
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <xQueueReceive+0x42>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <xQueueReceive+0x44>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10a      	bne.n	8004eaa <xQueueReceive+0x5e>
	__asm volatile
 8004e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	61fb      	str	r3, [r7, #28]
}
 8004ea6:	bf00      	nop
 8004ea8:	e7fe      	b.n	8004ea8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eaa:	f001 f83b 	bl	8005f24 <xTaskGetSchedulerState>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d102      	bne.n	8004eba <xQueueReceive+0x6e>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <xQueueReceive+0x72>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <xQueueReceive+0x74>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10a      	bne.n	8004eda <xQueueReceive+0x8e>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	61bb      	str	r3, [r7, #24]
}
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004eda:	f001 fd7b 	bl	80069d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d01f      	beq.n	8004f2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004eea:	68b9      	ldr	r1, [r7, #8]
 8004eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eee:	f000 f8f7 	bl	80050e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	1e5a      	subs	r2, r3, #1
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00f      	beq.n	8004f22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	3310      	adds	r3, #16
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fe4e 	bl	8005ba8 <xTaskRemoveFromEventList>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f12:	4b3d      	ldr	r3, [pc, #244]	; (8005008 <xQueueReceive+0x1bc>)
 8004f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f22:	f001 fd87 	bl	8006a34 <vPortExitCritical>
				return pdPASS;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e069      	b.n	8004ffe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d103      	bne.n	8004f38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f30:	f001 fd80 	bl	8006a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f34:	2300      	movs	r3, #0
 8004f36:	e062      	b.n	8004ffe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f3e:	f107 0310 	add.w	r3, r7, #16
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fe94 	bl	8005c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f4c:	f001 fd72 	bl	8006a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f50:	f000 fc06 	bl	8005760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f54:	f001 fd3e 	bl	80069d4 <vPortEnterCritical>
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f5e:	b25b      	sxtb	r3, r3
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f64:	d103      	bne.n	8004f6e <xQueueReceive+0x122>
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f74:	b25b      	sxtb	r3, r3
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f7a:	d103      	bne.n	8004f84 <xQueueReceive+0x138>
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f84:	f001 fd56 	bl	8006a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f88:	1d3a      	adds	r2, r7, #4
 8004f8a:	f107 0310 	add.w	r3, r7, #16
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fe83 	bl	8005c9c <xTaskCheckForTimeOut>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d123      	bne.n	8004fe4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f9e:	f000 f917 	bl	80051d0 <prvIsQueueEmpty>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d017      	beq.n	8004fd8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004faa:	3324      	adds	r3, #36	; 0x24
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	4611      	mov	r1, r2
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fda9 	bl	8005b08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fb8:	f000 f8b8 	bl	800512c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fbc:	f000 fbde 	bl	800577c <xTaskResumeAll>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d189      	bne.n	8004eda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004fc6:	4b10      	ldr	r3, [pc, #64]	; (8005008 <xQueueReceive+0x1bc>)
 8004fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	e780      	b.n	8004eda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fda:	f000 f8a7 	bl	800512c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fde:	f000 fbcd 	bl	800577c <xTaskResumeAll>
 8004fe2:	e77a      	b.n	8004eda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fe6:	f000 f8a1 	bl	800512c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fea:	f000 fbc7 	bl	800577c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ff0:	f000 f8ee 	bl	80051d0 <prvIsQueueEmpty>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f43f af6f 	beq.w	8004eda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ffc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3730      	adds	r7, #48	; 0x30
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	e000ed04 	.word	0xe000ed04

0800500c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10d      	bne.n	8005046 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d14d      	bne.n	80050ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	4618      	mov	r0, r3
 8005038:	f000 ff92 	bl	8005f60 <xTaskPriorityDisinherit>
 800503c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	e043      	b.n	80050ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d119      	bne.n	8005080 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6858      	ldr	r0, [r3, #4]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005054:	461a      	mov	r2, r3
 8005056:	68b9      	ldr	r1, [r7, #8]
 8005058:	f001 fff2 	bl	8007040 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	441a      	add	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	429a      	cmp	r2, r3
 8005074:	d32b      	bcc.n	80050ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	605a      	str	r2, [r3, #4]
 800507e:	e026      	b.n	80050ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68d8      	ldr	r0, [r3, #12]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	461a      	mov	r2, r3
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	f001 ffd8 	bl	8007040 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	425b      	negs	r3, r3
 800509a:	441a      	add	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d207      	bcs.n	80050bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	425b      	negs	r3, r3
 80050b6:	441a      	add	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d105      	bne.n	80050ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80050d6:	697b      	ldr	r3, [r7, #20]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d018      	beq.n	8005124 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	441a      	add	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	429a      	cmp	r2, r3
 800510a:	d303      	bcc.n	8005114 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68d9      	ldr	r1, [r3, #12]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	461a      	mov	r2, r3
 800511e:	6838      	ldr	r0, [r7, #0]
 8005120:	f001 ff8e 	bl	8007040 <memcpy>
	}
}
 8005124:	bf00      	nop
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005134:	f001 fc4e 	bl	80069d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800513e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005140:	e011      	b.n	8005166 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	2b00      	cmp	r3, #0
 8005148:	d012      	beq.n	8005170 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3324      	adds	r3, #36	; 0x24
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fd2a 	bl	8005ba8 <xTaskRemoveFromEventList>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800515a:	f000 fe01 	bl	8005d60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800515e:	7bfb      	ldrb	r3, [r7, #15]
 8005160:	3b01      	subs	r3, #1
 8005162:	b2db      	uxtb	r3, r3
 8005164:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800516a:	2b00      	cmp	r3, #0
 800516c:	dce9      	bgt.n	8005142 <prvUnlockQueue+0x16>
 800516e:	e000      	b.n	8005172 <prvUnlockQueue+0x46>
					break;
 8005170:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	22ff      	movs	r2, #255	; 0xff
 8005176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800517a:	f001 fc5b 	bl	8006a34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800517e:	f001 fc29 	bl	80069d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005188:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800518a:	e011      	b.n	80051b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d012      	beq.n	80051ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3310      	adds	r3, #16
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fd05 	bl	8005ba8 <xTaskRemoveFromEventList>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051a4:	f000 fddc 	bl	8005d60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051a8:	7bbb      	ldrb	r3, [r7, #14]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	dce9      	bgt.n	800518c <prvUnlockQueue+0x60>
 80051b8:	e000      	b.n	80051bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	22ff      	movs	r2, #255	; 0xff
 80051c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80051c4:	f001 fc36 	bl	8006a34 <vPortExitCritical>
}
 80051c8:	bf00      	nop
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051d8:	f001 fbfc 	bl	80069d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d102      	bne.n	80051ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051e4:	2301      	movs	r3, #1
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	e001      	b.n	80051ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051ee:	f001 fc21 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 80051f2:	68fb      	ldr	r3, [r7, #12]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005204:	f001 fbe6 	bl	80069d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005210:	429a      	cmp	r2, r3
 8005212:	d102      	bne.n	800521a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005214:	2301      	movs	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	e001      	b.n	800521e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800521e:	f001 fc09 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 8005222:	68fb      	ldr	r3, [r7, #12]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	e014      	b.n	8005266 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800523c:	4a0f      	ldr	r2, [pc, #60]	; (800527c <vQueueAddToRegistry+0x50>)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10b      	bne.n	8005260 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005248:	490c      	ldr	r1, [pc, #48]	; (800527c <vQueueAddToRegistry+0x50>)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005252:	4a0a      	ldr	r2, [pc, #40]	; (800527c <vQueueAddToRegistry+0x50>)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4413      	add	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800525e:	e006      	b.n	800526e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3301      	adds	r3, #1
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b07      	cmp	r3, #7
 800526a:	d9e7      	bls.n	800523c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800526c:	bf00      	nop
 800526e:	bf00      	nop
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	20004cbc 	.word	0x20004cbc

08005280 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005290:	f001 fba0 	bl	80069d4 <vPortEnterCritical>
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800529a:	b25b      	sxtb	r3, r3
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052a0:	d103      	bne.n	80052aa <vQueueWaitForMessageRestricted+0x2a>
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052b0:	b25b      	sxtb	r3, r3
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052b6:	d103      	bne.n	80052c0 <vQueueWaitForMessageRestricted+0x40>
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052c0:	f001 fbb8 	bl	8006a34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	3324      	adds	r3, #36	; 0x24
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fc3b 	bl	8005b50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80052da:	6978      	ldr	r0, [r7, #20]
 80052dc:	f7ff ff26 	bl	800512c <prvUnlockQueue>
	}
 80052e0:	bf00      	nop
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08e      	sub	sp, #56	; 0x38
 80052ec:	af04      	add	r7, sp, #16
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <xTaskCreateStatic+0x2a>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	623b      	str	r3, [r7, #32]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10a      	bne.n	800532e <xTaskCreateStatic+0x46>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	61fb      	str	r3, [r7, #28]
}
 800532a:	bf00      	nop
 800532c:	e7fe      	b.n	800532c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800532e:	235c      	movs	r3, #92	; 0x5c
 8005330:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b5c      	cmp	r3, #92	; 0x5c
 8005336:	d00a      	beq.n	800534e <xTaskCreateStatic+0x66>
	__asm volatile
 8005338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	61bb      	str	r3, [r7, #24]
}
 800534a:	bf00      	nop
 800534c:	e7fe      	b.n	800534c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800534e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	2b00      	cmp	r3, #0
 8005354:	d01e      	beq.n	8005394 <xTaskCreateStatic+0xac>
 8005356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01b      	beq.n	8005394 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800535c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005364:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	2202      	movs	r2, #2
 800536a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800536e:	2300      	movs	r3, #0
 8005370:	9303      	str	r3, [sp, #12]
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	9302      	str	r3, [sp, #8]
 8005376:	f107 0314 	add.w	r3, r7, #20
 800537a:	9301      	str	r3, [sp, #4]
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 f850 	bl	800542c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800538c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800538e:	f000 f8dd 	bl	800554c <prvAddNewTaskToReadyList>
 8005392:	e001      	b.n	8005398 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005394:	2300      	movs	r3, #0
 8005396:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005398:	697b      	ldr	r3, [r7, #20]
	}
 800539a:	4618      	mov	r0, r3
 800539c:	3728      	adds	r7, #40	; 0x28
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b08c      	sub	sp, #48	; 0x30
 80053a6:	af04      	add	r7, sp, #16
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4618      	mov	r0, r3
 80053b8:	f001 fc2e 	bl	8006c18 <pvPortMalloc>
 80053bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00e      	beq.n	80053e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053c4:	205c      	movs	r0, #92	; 0x5c
 80053c6:	f001 fc27 	bl	8006c18 <pvPortMalloc>
 80053ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	631a      	str	r2, [r3, #48]	; 0x30
 80053d8:	e005      	b.n	80053e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80053da:	6978      	ldr	r0, [r7, #20]
 80053dc:	f001 fce8 	bl	8006db0 <vPortFree>
 80053e0:	e001      	b.n	80053e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d017      	beq.n	800541c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053f4:	88fa      	ldrh	r2, [r7, #6]
 80053f6:	2300      	movs	r3, #0
 80053f8:	9303      	str	r3, [sp, #12]
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	9302      	str	r3, [sp, #8]
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	9301      	str	r3, [sp, #4]
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f80e 	bl	800542c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005410:	69f8      	ldr	r0, [r7, #28]
 8005412:	f000 f89b 	bl	800554c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005416:	2301      	movs	r3, #1
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	e002      	b.n	8005422 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800541c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005420:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005422:	69bb      	ldr	r3, [r7, #24]
	}
 8005424:	4618      	mov	r0, r3
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	461a      	mov	r2, r3
 8005444:	21a5      	movs	r1, #165	; 0xa5
 8005446:	f001 fe09 	bl	800705c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005454:	3b01      	subs	r3, #1
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	f023 0307 	bic.w	r3, r3, #7
 8005462:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <prvInitialiseNewTask+0x58>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	617b      	str	r3, [r7, #20]
}
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d01f      	beq.n	80054ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800548a:	2300      	movs	r3, #0
 800548c:	61fb      	str	r3, [r7, #28]
 800548e:	e012      	b.n	80054b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	4413      	add	r3, r2
 8005496:	7819      	ldrb	r1, [r3, #0]
 8005498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	4413      	add	r3, r2
 800549e:	3334      	adds	r3, #52	; 0x34
 80054a0:	460a      	mov	r2, r1
 80054a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	4413      	add	r3, r2
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d006      	beq.n	80054be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	3301      	adds	r3, #1
 80054b4:	61fb      	str	r3, [r7, #28]
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	2b0f      	cmp	r3, #15
 80054ba:	d9e9      	bls.n	8005490 <prvInitialiseNewTask+0x64>
 80054bc:	e000      	b.n	80054c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80054be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054c8:	e003      	b.n	80054d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	2b37      	cmp	r3, #55	; 0x37
 80054d6:	d901      	bls.n	80054dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054d8:	2337      	movs	r3, #55	; 0x37
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ea:	2200      	movs	r2, #0
 80054ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	3304      	adds	r3, #4
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff f978 	bl	80047e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	3318      	adds	r3, #24
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff f973 	bl	80047e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005506:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005516:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	2200      	movs	r2, #0
 800551c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	68f9      	ldr	r1, [r7, #12]
 800552a:	69b8      	ldr	r0, [r7, #24]
 800552c:	f001 f928 	bl	8006780 <pxPortInitialiseStack>
 8005530:	4602      	mov	r2, r0
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005540:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005542:	bf00      	nop
 8005544:	3720      	adds	r7, #32
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
	...

0800554c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005554:	f001 fa3e 	bl	80069d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005558:	4b2d      	ldr	r3, [pc, #180]	; (8005610 <prvAddNewTaskToReadyList+0xc4>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3301      	adds	r3, #1
 800555e:	4a2c      	ldr	r2, [pc, #176]	; (8005610 <prvAddNewTaskToReadyList+0xc4>)
 8005560:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005562:	4b2c      	ldr	r3, [pc, #176]	; (8005614 <prvAddNewTaskToReadyList+0xc8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d109      	bne.n	800557e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800556a:	4a2a      	ldr	r2, [pc, #168]	; (8005614 <prvAddNewTaskToReadyList+0xc8>)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005570:	4b27      	ldr	r3, [pc, #156]	; (8005610 <prvAddNewTaskToReadyList+0xc4>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d110      	bne.n	800559a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005578:	f000 fc16 	bl	8005da8 <prvInitialiseTaskLists>
 800557c:	e00d      	b.n	800559a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800557e:	4b26      	ldr	r3, [pc, #152]	; (8005618 <prvAddNewTaskToReadyList+0xcc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005586:	4b23      	ldr	r3, [pc, #140]	; (8005614 <prvAddNewTaskToReadyList+0xc8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	429a      	cmp	r2, r3
 8005592:	d802      	bhi.n	800559a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005594:	4a1f      	ldr	r2, [pc, #124]	; (8005614 <prvAddNewTaskToReadyList+0xc8>)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800559a:	4b20      	ldr	r3, [pc, #128]	; (800561c <prvAddNewTaskToReadyList+0xd0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3301      	adds	r3, #1
 80055a0:	4a1e      	ldr	r2, [pc, #120]	; (800561c <prvAddNewTaskToReadyList+0xd0>)
 80055a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80055a4:	4b1d      	ldr	r3, [pc, #116]	; (800561c <prvAddNewTaskToReadyList+0xd0>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	4b1b      	ldr	r3, [pc, #108]	; (8005620 <prvAddNewTaskToReadyList+0xd4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d903      	bls.n	80055c0 <prvAddNewTaskToReadyList+0x74>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	4a18      	ldr	r2, [pc, #96]	; (8005620 <prvAddNewTaskToReadyList+0xd4>)
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c4:	4613      	mov	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4a15      	ldr	r2, [pc, #84]	; (8005624 <prvAddNewTaskToReadyList+0xd8>)
 80055ce:	441a      	add	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4619      	mov	r1, r3
 80055d6:	4610      	mov	r0, r2
 80055d8:	f7ff f913 	bl	8004802 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055dc:	f001 fa2a 	bl	8006a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055e0:	4b0d      	ldr	r3, [pc, #52]	; (8005618 <prvAddNewTaskToReadyList+0xcc>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00e      	beq.n	8005606 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055e8:	4b0a      	ldr	r3, [pc, #40]	; (8005614 <prvAddNewTaskToReadyList+0xc8>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d207      	bcs.n	8005606 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055f6:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <prvAddNewTaskToReadyList+0xdc>)
 80055f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005606:	bf00      	nop
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	20000f30 	.word	0x20000f30
 8005614:	20000a5c 	.word	0x20000a5c
 8005618:	20000f3c 	.word	0x20000f3c
 800561c:	20000f4c 	.word	0x20000f4c
 8005620:	20000f38 	.word	0x20000f38
 8005624:	20000a60 	.word	0x20000a60
 8005628:	e000ed04 	.word	0xe000ed04

0800562c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d017      	beq.n	800566e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800563e:	4b13      	ldr	r3, [pc, #76]	; (800568c <vTaskDelay+0x60>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <vTaskDelay+0x30>
	__asm volatile
 8005646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	60bb      	str	r3, [r7, #8]
}
 8005658:	bf00      	nop
 800565a:	e7fe      	b.n	800565a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800565c:	f000 f880 	bl	8005760 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005660:	2100      	movs	r1, #0
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fcea 	bl	800603c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005668:	f000 f888 	bl	800577c <xTaskResumeAll>
 800566c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d107      	bne.n	8005684 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005674:	4b06      	ldr	r3, [pc, #24]	; (8005690 <vTaskDelay+0x64>)
 8005676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005684:	bf00      	nop
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20000f58 	.word	0x20000f58
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08a      	sub	sp, #40	; 0x28
 8005698:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800569a:	2300      	movs	r3, #0
 800569c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800569e:	2300      	movs	r3, #0
 80056a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056a2:	463a      	mov	r2, r7
 80056a4:	1d39      	adds	r1, r7, #4
 80056a6:	f107 0308 	add.w	r3, r7, #8
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff f848 	bl	8004740 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056b0:	6839      	ldr	r1, [r7, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	9202      	str	r2, [sp, #8]
 80056b8:	9301      	str	r3, [sp, #4]
 80056ba:	2300      	movs	r3, #0
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	2300      	movs	r3, #0
 80056c0:	460a      	mov	r2, r1
 80056c2:	4921      	ldr	r1, [pc, #132]	; (8005748 <vTaskStartScheduler+0xb4>)
 80056c4:	4821      	ldr	r0, [pc, #132]	; (800574c <vTaskStartScheduler+0xb8>)
 80056c6:	f7ff fe0f 	bl	80052e8 <xTaskCreateStatic>
 80056ca:	4603      	mov	r3, r0
 80056cc:	4a20      	ldr	r2, [pc, #128]	; (8005750 <vTaskStartScheduler+0xbc>)
 80056ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056d0:	4b1f      	ldr	r3, [pc, #124]	; (8005750 <vTaskStartScheduler+0xbc>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056d8:	2301      	movs	r3, #1
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	e001      	b.n	80056e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d102      	bne.n	80056ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80056e8:	f000 fcfc 	bl	80060e4 <xTimerCreateTimerTask>
 80056ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d116      	bne.n	8005722 <vTaskStartScheduler+0x8e>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	613b      	str	r3, [r7, #16]
}
 8005706:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005708:	4b12      	ldr	r3, [pc, #72]	; (8005754 <vTaskStartScheduler+0xc0>)
 800570a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800570e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005710:	4b11      	ldr	r3, [pc, #68]	; (8005758 <vTaskStartScheduler+0xc4>)
 8005712:	2201      	movs	r2, #1
 8005714:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005716:	4b11      	ldr	r3, [pc, #68]	; (800575c <vTaskStartScheduler+0xc8>)
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800571c:	f001 f8b8 	bl	8006890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005720:	e00e      	b.n	8005740 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005728:	d10a      	bne.n	8005740 <vTaskStartScheduler+0xac>
	__asm volatile
 800572a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572e:	f383 8811 	msr	BASEPRI, r3
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	60fb      	str	r3, [r7, #12]
}
 800573c:	bf00      	nop
 800573e:	e7fe      	b.n	800573e <vTaskStartScheduler+0xaa>
}
 8005740:	bf00      	nop
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	0800b934 	.word	0x0800b934
 800574c:	08005d79 	.word	0x08005d79
 8005750:	20000f54 	.word	0x20000f54
 8005754:	20000f50 	.word	0x20000f50
 8005758:	20000f3c 	.word	0x20000f3c
 800575c:	20000f34 	.word	0x20000f34

08005760 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005764:	4b04      	ldr	r3, [pc, #16]	; (8005778 <vTaskSuspendAll+0x18>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3301      	adds	r3, #1
 800576a:	4a03      	ldr	r2, [pc, #12]	; (8005778 <vTaskSuspendAll+0x18>)
 800576c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800576e:	bf00      	nop
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	20000f58 	.word	0x20000f58

0800577c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005786:	2300      	movs	r3, #0
 8005788:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800578a:	4b42      	ldr	r3, [pc, #264]	; (8005894 <xTaskResumeAll+0x118>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	603b      	str	r3, [r7, #0]
}
 80057a4:	bf00      	nop
 80057a6:	e7fe      	b.n	80057a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057a8:	f001 f914 	bl	80069d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057ac:	4b39      	ldr	r3, [pc, #228]	; (8005894 <xTaskResumeAll+0x118>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	4a38      	ldr	r2, [pc, #224]	; (8005894 <xTaskResumeAll+0x118>)
 80057b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b6:	4b37      	ldr	r3, [pc, #220]	; (8005894 <xTaskResumeAll+0x118>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d162      	bne.n	8005884 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057be:	4b36      	ldr	r3, [pc, #216]	; (8005898 <xTaskResumeAll+0x11c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d05e      	beq.n	8005884 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057c6:	e02f      	b.n	8005828 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c8:	4b34      	ldr	r3, [pc, #208]	; (800589c <xTaskResumeAll+0x120>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3318      	adds	r3, #24
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff f871 	bl	80048bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3304      	adds	r3, #4
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff f86c 	bl	80048bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e8:	4b2d      	ldr	r3, [pc, #180]	; (80058a0 <xTaskResumeAll+0x124>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d903      	bls.n	80057f8 <xTaskResumeAll+0x7c>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	4a2a      	ldr	r2, [pc, #168]	; (80058a0 <xTaskResumeAll+0x124>)
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4a27      	ldr	r2, [pc, #156]	; (80058a4 <xTaskResumeAll+0x128>)
 8005806:	441a      	add	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3304      	adds	r3, #4
 800580c:	4619      	mov	r1, r3
 800580e:	4610      	mov	r0, r2
 8005810:	f7fe fff7 	bl	8004802 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	4b23      	ldr	r3, [pc, #140]	; (80058a8 <xTaskResumeAll+0x12c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581e:	429a      	cmp	r2, r3
 8005820:	d302      	bcc.n	8005828 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005822:	4b22      	ldr	r3, [pc, #136]	; (80058ac <xTaskResumeAll+0x130>)
 8005824:	2201      	movs	r2, #1
 8005826:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005828:	4b1c      	ldr	r3, [pc, #112]	; (800589c <xTaskResumeAll+0x120>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1cb      	bne.n	80057c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005836:	f000 fb55 	bl	8005ee4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800583a:	4b1d      	ldr	r3, [pc, #116]	; (80058b0 <xTaskResumeAll+0x134>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d010      	beq.n	8005868 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005846:	f000 f847 	bl	80058d8 <xTaskIncrementTick>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005850:	4b16      	ldr	r3, [pc, #88]	; (80058ac <xTaskResumeAll+0x130>)
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3b01      	subs	r3, #1
 800585a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f1      	bne.n	8005846 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005862:	4b13      	ldr	r3, [pc, #76]	; (80058b0 <xTaskResumeAll+0x134>)
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005868:	4b10      	ldr	r3, [pc, #64]	; (80058ac <xTaskResumeAll+0x130>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d009      	beq.n	8005884 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005870:	2301      	movs	r3, #1
 8005872:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005874:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <xTaskResumeAll+0x138>)
 8005876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005884:	f001 f8d6 	bl	8006a34 <vPortExitCritical>

	return xAlreadyYielded;
 8005888:	68bb      	ldr	r3, [r7, #8]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000f58 	.word	0x20000f58
 8005898:	20000f30 	.word	0x20000f30
 800589c:	20000ef0 	.word	0x20000ef0
 80058a0:	20000f38 	.word	0x20000f38
 80058a4:	20000a60 	.word	0x20000a60
 80058a8:	20000a5c 	.word	0x20000a5c
 80058ac:	20000f44 	.word	0x20000f44
 80058b0:	20000f40 	.word	0x20000f40
 80058b4:	e000ed04 	.word	0xe000ed04

080058b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80058be:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <xTaskGetTickCount+0x1c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058c4:	687b      	ldr	r3, [r7, #4]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	20000f34 	.word	0x20000f34

080058d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058e2:	4b4f      	ldr	r3, [pc, #316]	; (8005a20 <xTaskIncrementTick+0x148>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f040 808f 	bne.w	8005a0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058ec:	4b4d      	ldr	r3, [pc, #308]	; (8005a24 <xTaskIncrementTick+0x14c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3301      	adds	r3, #1
 80058f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058f4:	4a4b      	ldr	r2, [pc, #300]	; (8005a24 <xTaskIncrementTick+0x14c>)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d120      	bne.n	8005942 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005900:	4b49      	ldr	r3, [pc, #292]	; (8005a28 <xTaskIncrementTick+0x150>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <xTaskIncrementTick+0x48>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	603b      	str	r3, [r7, #0]
}
 800591c:	bf00      	nop
 800591e:	e7fe      	b.n	800591e <xTaskIncrementTick+0x46>
 8005920:	4b41      	ldr	r3, [pc, #260]	; (8005a28 <xTaskIncrementTick+0x150>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	4b41      	ldr	r3, [pc, #260]	; (8005a2c <xTaskIncrementTick+0x154>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a3f      	ldr	r2, [pc, #252]	; (8005a28 <xTaskIncrementTick+0x150>)
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	4a3f      	ldr	r2, [pc, #252]	; (8005a2c <xTaskIncrementTick+0x154>)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6013      	str	r3, [r2, #0]
 8005934:	4b3e      	ldr	r3, [pc, #248]	; (8005a30 <xTaskIncrementTick+0x158>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3301      	adds	r3, #1
 800593a:	4a3d      	ldr	r2, [pc, #244]	; (8005a30 <xTaskIncrementTick+0x158>)
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	f000 fad1 	bl	8005ee4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005942:	4b3c      	ldr	r3, [pc, #240]	; (8005a34 <xTaskIncrementTick+0x15c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	429a      	cmp	r2, r3
 800594a:	d349      	bcc.n	80059e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800594c:	4b36      	ldr	r3, [pc, #216]	; (8005a28 <xTaskIncrementTick+0x150>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d104      	bne.n	8005960 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005956:	4b37      	ldr	r3, [pc, #220]	; (8005a34 <xTaskIncrementTick+0x15c>)
 8005958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800595c:	601a      	str	r2, [r3, #0]
					break;
 800595e:	e03f      	b.n	80059e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005960:	4b31      	ldr	r3, [pc, #196]	; (8005a28 <xTaskIncrementTick+0x150>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	429a      	cmp	r2, r3
 8005976:	d203      	bcs.n	8005980 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005978:	4a2e      	ldr	r2, [pc, #184]	; (8005a34 <xTaskIncrementTick+0x15c>)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800597e:	e02f      	b.n	80059e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	3304      	adds	r3, #4
 8005984:	4618      	mov	r0, r3
 8005986:	f7fe ff99 	bl	80048bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	3318      	adds	r3, #24
 8005996:	4618      	mov	r0, r3
 8005998:	f7fe ff90 	bl	80048bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a0:	4b25      	ldr	r3, [pc, #148]	; (8005a38 <xTaskIncrementTick+0x160>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d903      	bls.n	80059b0 <xTaskIncrementTick+0xd8>
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	4a22      	ldr	r2, [pc, #136]	; (8005a38 <xTaskIncrementTick+0x160>)
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4a1f      	ldr	r2, [pc, #124]	; (8005a3c <xTaskIncrementTick+0x164>)
 80059be:	441a      	add	r2, r3
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	3304      	adds	r3, #4
 80059c4:	4619      	mov	r1, r3
 80059c6:	4610      	mov	r0, r2
 80059c8:	f7fe ff1b 	bl	8004802 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d0:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <xTaskIncrementTick+0x168>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d3b8      	bcc.n	800594c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80059da:	2301      	movs	r3, #1
 80059dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059de:	e7b5      	b.n	800594c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059e0:	4b17      	ldr	r3, [pc, #92]	; (8005a40 <xTaskIncrementTick+0x168>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e6:	4915      	ldr	r1, [pc, #84]	; (8005a3c <xTaskIncrementTick+0x164>)
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d901      	bls.n	80059fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80059f8:	2301      	movs	r3, #1
 80059fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059fc:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <xTaskIncrementTick+0x16c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d007      	beq.n	8005a14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a04:	2301      	movs	r3, #1
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	e004      	b.n	8005a14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a0a:	4b0f      	ldr	r3, [pc, #60]	; (8005a48 <xTaskIncrementTick+0x170>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	4a0d      	ldr	r2, [pc, #52]	; (8005a48 <xTaskIncrementTick+0x170>)
 8005a12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a14:	697b      	ldr	r3, [r7, #20]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000f58 	.word	0x20000f58
 8005a24:	20000f34 	.word	0x20000f34
 8005a28:	20000ee8 	.word	0x20000ee8
 8005a2c:	20000eec 	.word	0x20000eec
 8005a30:	20000f48 	.word	0x20000f48
 8005a34:	20000f50 	.word	0x20000f50
 8005a38:	20000f38 	.word	0x20000f38
 8005a3c:	20000a60 	.word	0x20000a60
 8005a40:	20000a5c 	.word	0x20000a5c
 8005a44:	20000f44 	.word	0x20000f44
 8005a48:	20000f40 	.word	0x20000f40

08005a4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a52:	4b28      	ldr	r3, [pc, #160]	; (8005af4 <vTaskSwitchContext+0xa8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a5a:	4b27      	ldr	r3, [pc, #156]	; (8005af8 <vTaskSwitchContext+0xac>)
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a60:	e041      	b.n	8005ae6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005a62:	4b25      	ldr	r3, [pc, #148]	; (8005af8 <vTaskSwitchContext+0xac>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a68:	4b24      	ldr	r3, [pc, #144]	; (8005afc <vTaskSwitchContext+0xb0>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	e010      	b.n	8005a92 <vTaskSwitchContext+0x46>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <vTaskSwitchContext+0x40>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	607b      	str	r3, [r7, #4]
}
 8005a88:	bf00      	nop
 8005a8a:	e7fe      	b.n	8005a8a <vTaskSwitchContext+0x3e>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	491b      	ldr	r1, [pc, #108]	; (8005b00 <vTaskSwitchContext+0xb4>)
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0e4      	beq.n	8005a70 <vTaskSwitchContext+0x24>
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4a13      	ldr	r2, [pc, #76]	; (8005b00 <vTaskSwitchContext+0xb4>)
 8005ab2:	4413      	add	r3, r2
 8005ab4:	60bb      	str	r3, [r7, #8]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	605a      	str	r2, [r3, #4]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d104      	bne.n	8005ad6 <vTaskSwitchContext+0x8a>
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	605a      	str	r2, [r3, #4]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	4a09      	ldr	r2, [pc, #36]	; (8005b04 <vTaskSwitchContext+0xb8>)
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	4a06      	ldr	r2, [pc, #24]	; (8005afc <vTaskSwitchContext+0xb0>)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6013      	str	r3, [r2, #0]
}
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20000f58 	.word	0x20000f58
 8005af8:	20000f44 	.word	0x20000f44
 8005afc:	20000f38 	.word	0x20000f38
 8005b00:	20000a60 	.word	0x20000a60
 8005b04:	20000a5c 	.word	0x20000a5c

08005b08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10a      	bne.n	8005b2e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	60fb      	str	r3, [r7, #12]
}
 8005b2a:	bf00      	nop
 8005b2c:	e7fe      	b.n	8005b2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b2e:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <vTaskPlaceOnEventList+0x44>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3318      	adds	r3, #24
 8005b34:	4619      	mov	r1, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fe fe87 	bl	800484a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	6838      	ldr	r0, [r7, #0]
 8005b40:	f000 fa7c 	bl	800603c <prvAddCurrentTaskToDelayedList>
}
 8005b44:	bf00      	nop
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	20000a5c 	.word	0x20000a5c

08005b50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	617b      	str	r3, [r7, #20]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b78:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3318      	adds	r3, #24
 8005b7e:	4619      	mov	r1, r3
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7fe fe3e 	bl	8004802 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b92:	6879      	ldr	r1, [r7, #4]
 8005b94:	68b8      	ldr	r0, [r7, #8]
 8005b96:	f000 fa51 	bl	800603c <prvAddCurrentTaskToDelayedList>
	}
 8005b9a:	bf00      	nop
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000a5c 	.word	0x20000a5c

08005ba8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	60fb      	str	r3, [r7, #12]
}
 8005bd0:	bf00      	nop
 8005bd2:	e7fe      	b.n	8005bd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	3318      	adds	r3, #24
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7fe fe6f 	bl	80048bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bde:	4b1e      	ldr	r3, [pc, #120]	; (8005c58 <xTaskRemoveFromEventList+0xb0>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d11d      	bne.n	8005c22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	3304      	adds	r3, #4
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe fe66 	bl	80048bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf4:	4b19      	ldr	r3, [pc, #100]	; (8005c5c <xTaskRemoveFromEventList+0xb4>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d903      	bls.n	8005c04 <xTaskRemoveFromEventList+0x5c>
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	4a16      	ldr	r2, [pc, #88]	; (8005c5c <xTaskRemoveFromEventList+0xb4>)
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c08:	4613      	mov	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4a13      	ldr	r2, [pc, #76]	; (8005c60 <xTaskRemoveFromEventList+0xb8>)
 8005c12:	441a      	add	r2, r3
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	3304      	adds	r3, #4
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	f7fe fdf1 	bl	8004802 <vListInsertEnd>
 8005c20:	e005      	b.n	8005c2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	3318      	adds	r3, #24
 8005c26:	4619      	mov	r1, r3
 8005c28:	480e      	ldr	r0, [pc, #56]	; (8005c64 <xTaskRemoveFromEventList+0xbc>)
 8005c2a:	f7fe fdea 	bl	8004802 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c32:	4b0d      	ldr	r3, [pc, #52]	; (8005c68 <xTaskRemoveFromEventList+0xc0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d905      	bls.n	8005c48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c40:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <xTaskRemoveFromEventList+0xc4>)
 8005c42:	2201      	movs	r2, #1
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	e001      	b.n	8005c4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c4c:	697b      	ldr	r3, [r7, #20]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000f58 	.word	0x20000f58
 8005c5c:	20000f38 	.word	0x20000f38
 8005c60:	20000a60 	.word	0x20000a60
 8005c64:	20000ef0 	.word	0x20000ef0
 8005c68:	20000a5c 	.word	0x20000a5c
 8005c6c:	20000f44 	.word	0x20000f44

08005c70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c78:	4b06      	ldr	r3, [pc, #24]	; (8005c94 <vTaskInternalSetTimeOutState+0x24>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c80:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <vTaskInternalSetTimeOutState+0x28>)
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	605a      	str	r2, [r3, #4]
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	20000f48 	.word	0x20000f48
 8005c98:	20000f34 	.word	0x20000f34

08005c9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10a      	bne.n	8005cc2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	613b      	str	r3, [r7, #16]
}
 8005cbe:	bf00      	nop
 8005cc0:	e7fe      	b.n	8005cc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10a      	bne.n	8005cde <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	60fb      	str	r3, [r7, #12]
}
 8005cda:	bf00      	nop
 8005cdc:	e7fe      	b.n	8005cdc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005cde:	f000 fe79 	bl	80069d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ce2:	4b1d      	ldr	r3, [pc, #116]	; (8005d58 <xTaskCheckForTimeOut+0xbc>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cfa:	d102      	bne.n	8005d02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61fb      	str	r3, [r7, #28]
 8005d00:	e023      	b.n	8005d4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	4b15      	ldr	r3, [pc, #84]	; (8005d5c <xTaskCheckForTimeOut+0xc0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d007      	beq.n	8005d1e <xTaskCheckForTimeOut+0x82>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d302      	bcc.n	8005d1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	61fb      	str	r3, [r7, #28]
 8005d1c:	e015      	b.n	8005d4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d20b      	bcs.n	8005d40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	1ad2      	subs	r2, r2, r3
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff ff9b 	bl	8005c70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61fb      	str	r3, [r7, #28]
 8005d3e:	e004      	b.n	8005d4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d46:	2301      	movs	r3, #1
 8005d48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d4a:	f000 fe73 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 8005d4e:	69fb      	ldr	r3, [r7, #28]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3720      	adds	r7, #32
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20000f34 	.word	0x20000f34
 8005d5c:	20000f48 	.word	0x20000f48

08005d60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d64:	4b03      	ldr	r3, [pc, #12]	; (8005d74 <vTaskMissedYield+0x14>)
 8005d66:	2201      	movs	r2, #1
 8005d68:	601a      	str	r2, [r3, #0]
}
 8005d6a:	bf00      	nop
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	20000f44 	.word	0x20000f44

08005d78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d80:	f000 f852 	bl	8005e28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d84:	4b06      	ldr	r3, [pc, #24]	; (8005da0 <prvIdleTask+0x28>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d9f9      	bls.n	8005d80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d8c:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <prvIdleTask+0x2c>)
 8005d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d9c:	e7f0      	b.n	8005d80 <prvIdleTask+0x8>
 8005d9e:	bf00      	nop
 8005da0:	20000a60 	.word	0x20000a60
 8005da4:	e000ed04 	.word	0xe000ed04

08005da8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dae:	2300      	movs	r3, #0
 8005db0:	607b      	str	r3, [r7, #4]
 8005db2:	e00c      	b.n	8005dce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4a12      	ldr	r2, [pc, #72]	; (8005e08 <prvInitialiseTaskLists+0x60>)
 8005dc0:	4413      	add	r3, r2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fe fcf0 	bl	80047a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	607b      	str	r3, [r7, #4]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b37      	cmp	r3, #55	; 0x37
 8005dd2:	d9ef      	bls.n	8005db4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005dd4:	480d      	ldr	r0, [pc, #52]	; (8005e0c <prvInitialiseTaskLists+0x64>)
 8005dd6:	f7fe fce7 	bl	80047a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005dda:	480d      	ldr	r0, [pc, #52]	; (8005e10 <prvInitialiseTaskLists+0x68>)
 8005ddc:	f7fe fce4 	bl	80047a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005de0:	480c      	ldr	r0, [pc, #48]	; (8005e14 <prvInitialiseTaskLists+0x6c>)
 8005de2:	f7fe fce1 	bl	80047a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005de6:	480c      	ldr	r0, [pc, #48]	; (8005e18 <prvInitialiseTaskLists+0x70>)
 8005de8:	f7fe fcde 	bl	80047a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005dec:	480b      	ldr	r0, [pc, #44]	; (8005e1c <prvInitialiseTaskLists+0x74>)
 8005dee:	f7fe fcdb 	bl	80047a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005df2:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <prvInitialiseTaskLists+0x78>)
 8005df4:	4a05      	ldr	r2, [pc, #20]	; (8005e0c <prvInitialiseTaskLists+0x64>)
 8005df6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005df8:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <prvInitialiseTaskLists+0x7c>)
 8005dfa:	4a05      	ldr	r2, [pc, #20]	; (8005e10 <prvInitialiseTaskLists+0x68>)
 8005dfc:	601a      	str	r2, [r3, #0]
}
 8005dfe:	bf00      	nop
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20000a60 	.word	0x20000a60
 8005e0c:	20000ec0 	.word	0x20000ec0
 8005e10:	20000ed4 	.word	0x20000ed4
 8005e14:	20000ef0 	.word	0x20000ef0
 8005e18:	20000f04 	.word	0x20000f04
 8005e1c:	20000f1c 	.word	0x20000f1c
 8005e20:	20000ee8 	.word	0x20000ee8
 8005e24:	20000eec 	.word	0x20000eec

08005e28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e2e:	e019      	b.n	8005e64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e30:	f000 fdd0 	bl	80069d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e34:	4b10      	ldr	r3, [pc, #64]	; (8005e78 <prvCheckTasksWaitingTermination+0x50>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fe fd3b 	bl	80048bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e46:	4b0d      	ldr	r3, [pc, #52]	; (8005e7c <prvCheckTasksWaitingTermination+0x54>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	4a0b      	ldr	r2, [pc, #44]	; (8005e7c <prvCheckTasksWaitingTermination+0x54>)
 8005e4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e50:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <prvCheckTasksWaitingTermination+0x58>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3b01      	subs	r3, #1
 8005e56:	4a0a      	ldr	r2, [pc, #40]	; (8005e80 <prvCheckTasksWaitingTermination+0x58>)
 8005e58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e5a:	f000 fdeb 	bl	8006a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f810 	bl	8005e84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e64:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <prvCheckTasksWaitingTermination+0x58>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e1      	bne.n	8005e30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000f04 	.word	0x20000f04
 8005e7c:	20000f30 	.word	0x20000f30
 8005e80:	20000f18 	.word	0x20000f18

08005e84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d108      	bne.n	8005ea8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 ff88 	bl	8006db0 <vPortFree>
				vPortFree( pxTCB );
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 ff85 	bl	8006db0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ea6:	e018      	b.n	8005eda <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d103      	bne.n	8005eba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 ff7c 	bl	8006db0 <vPortFree>
	}
 8005eb8:	e00f      	b.n	8005eda <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d00a      	beq.n	8005eda <prvDeleteTCB+0x56>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	60fb      	str	r3, [r7, #12]
}
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <prvDeleteTCB+0x54>
	}
 8005eda:	bf00      	nop
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
	...

08005ee4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eea:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <prvResetNextTaskUnblockTime+0x38>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d104      	bne.n	8005efe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <prvResetNextTaskUnblockTime+0x3c>)
 8005ef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005efa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005efc:	e008      	b.n	8005f10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005efe:	4b07      	ldr	r3, [pc, #28]	; (8005f1c <prvResetNextTaskUnblockTime+0x38>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	4a04      	ldr	r2, [pc, #16]	; (8005f20 <prvResetNextTaskUnblockTime+0x3c>)
 8005f0e:	6013      	str	r3, [r2, #0]
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	20000ee8 	.word	0x20000ee8
 8005f20:	20000f50 	.word	0x20000f50

08005f24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f2a:	4b0b      	ldr	r3, [pc, #44]	; (8005f58 <xTaskGetSchedulerState+0x34>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d102      	bne.n	8005f38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f32:	2301      	movs	r3, #1
 8005f34:	607b      	str	r3, [r7, #4]
 8005f36:	e008      	b.n	8005f4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f38:	4b08      	ldr	r3, [pc, #32]	; (8005f5c <xTaskGetSchedulerState+0x38>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d102      	bne.n	8005f46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f40:	2302      	movs	r3, #2
 8005f42:	607b      	str	r3, [r7, #4]
 8005f44:	e001      	b.n	8005f4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f46:	2300      	movs	r3, #0
 8005f48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f4a:	687b      	ldr	r3, [r7, #4]
	}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	20000f3c 	.word	0x20000f3c
 8005f5c:	20000f58 	.word	0x20000f58

08005f60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d056      	beq.n	8006024 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f76:	4b2e      	ldr	r3, [pc, #184]	; (8006030 <xTaskPriorityDisinherit+0xd0>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d00a      	beq.n	8005f96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	60fb      	str	r3, [r7, #12]
}
 8005f92:	bf00      	nop
 8005f94:	e7fe      	b.n	8005f94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10a      	bne.n	8005fb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	60bb      	str	r3, [r7, #8]
}
 8005fb0:	bf00      	nop
 8005fb2:	e7fe      	b.n	8005fb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb8:	1e5a      	subs	r2, r3, #1
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d02c      	beq.n	8006024 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d128      	bne.n	8006024 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fe fc70 	bl	80048bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <xTaskPriorityDisinherit+0xd4>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d903      	bls.n	8006004 <xTaskPriorityDisinherit+0xa4>
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	4a0c      	ldr	r2, [pc, #48]	; (8006034 <xTaskPriorityDisinherit+0xd4>)
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4a09      	ldr	r2, [pc, #36]	; (8006038 <xTaskPriorityDisinherit+0xd8>)
 8006012:	441a      	add	r2, r3
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	3304      	adds	r3, #4
 8006018:	4619      	mov	r1, r3
 800601a:	4610      	mov	r0, r2
 800601c:	f7fe fbf1 	bl	8004802 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006020:	2301      	movs	r3, #1
 8006022:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006024:	697b      	ldr	r3, [r7, #20]
	}
 8006026:	4618      	mov	r0, r3
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	20000a5c 	.word	0x20000a5c
 8006034:	20000f38 	.word	0x20000f38
 8006038:	20000a60 	.word	0x20000a60

0800603c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006046:	4b21      	ldr	r3, [pc, #132]	; (80060cc <prvAddCurrentTaskToDelayedList+0x90>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800604c:	4b20      	ldr	r3, [pc, #128]	; (80060d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3304      	adds	r3, #4
 8006052:	4618      	mov	r0, r3
 8006054:	f7fe fc32 	bl	80048bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800605e:	d10a      	bne.n	8006076 <prvAddCurrentTaskToDelayedList+0x3a>
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d007      	beq.n	8006076 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006066:	4b1a      	ldr	r3, [pc, #104]	; (80060d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3304      	adds	r3, #4
 800606c:	4619      	mov	r1, r3
 800606e:	4819      	ldr	r0, [pc, #100]	; (80060d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006070:	f7fe fbc7 	bl	8004802 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006074:	e026      	b.n	80060c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4413      	add	r3, r2
 800607c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800607e:	4b14      	ldr	r3, [pc, #80]	; (80060d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	429a      	cmp	r2, r3
 800608c:	d209      	bcs.n	80060a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800608e:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b0f      	ldr	r3, [pc, #60]	; (80060d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3304      	adds	r3, #4
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f7fe fbd5 	bl	800484a <vListInsert>
}
 80060a0:	e010      	b.n	80060c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060a2:	4b0e      	ldr	r3, [pc, #56]	; (80060dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3304      	adds	r3, #4
 80060ac:	4619      	mov	r1, r3
 80060ae:	4610      	mov	r0, r2
 80060b0:	f7fe fbcb 	bl	800484a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060b4:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d202      	bcs.n	80060c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060be:	4a08      	ldr	r2, [pc, #32]	; (80060e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	6013      	str	r3, [r2, #0]
}
 80060c4:	bf00      	nop
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	20000f34 	.word	0x20000f34
 80060d0:	20000a5c 	.word	0x20000a5c
 80060d4:	20000f1c 	.word	0x20000f1c
 80060d8:	20000eec 	.word	0x20000eec
 80060dc:	20000ee8 	.word	0x20000ee8
 80060e0:	20000f50 	.word	0x20000f50

080060e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08a      	sub	sp, #40	; 0x28
 80060e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060ee:	f000 fb07 	bl	8006700 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060f2:	4b1c      	ldr	r3, [pc, #112]	; (8006164 <xTimerCreateTimerTask+0x80>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d021      	beq.n	800613e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006102:	1d3a      	adds	r2, r7, #4
 8006104:	f107 0108 	add.w	r1, r7, #8
 8006108:	f107 030c 	add.w	r3, r7, #12
 800610c:	4618      	mov	r0, r3
 800610e:	f7fe fb31 	bl	8004774 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	9202      	str	r2, [sp, #8]
 800611a:	9301      	str	r3, [sp, #4]
 800611c:	2302      	movs	r3, #2
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	2300      	movs	r3, #0
 8006122:	460a      	mov	r2, r1
 8006124:	4910      	ldr	r1, [pc, #64]	; (8006168 <xTimerCreateTimerTask+0x84>)
 8006126:	4811      	ldr	r0, [pc, #68]	; (800616c <xTimerCreateTimerTask+0x88>)
 8006128:	f7ff f8de 	bl	80052e8 <xTaskCreateStatic>
 800612c:	4603      	mov	r3, r0
 800612e:	4a10      	ldr	r2, [pc, #64]	; (8006170 <xTimerCreateTimerTask+0x8c>)
 8006130:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006132:	4b0f      	ldr	r3, [pc, #60]	; (8006170 <xTimerCreateTimerTask+0x8c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800613a:	2301      	movs	r3, #1
 800613c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10a      	bne.n	800615a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	613b      	str	r3, [r7, #16]
}
 8006156:	bf00      	nop
 8006158:	e7fe      	b.n	8006158 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800615a:	697b      	ldr	r3, [r7, #20]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	20000f8c 	.word	0x20000f8c
 8006168:	0800b93c 	.word	0x0800b93c
 800616c:	080062a9 	.word	0x080062a9
 8006170:	20000f90 	.word	0x20000f90

08006174 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	; 0x28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006182:	2300      	movs	r3, #0
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10a      	bne.n	80061a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	623b      	str	r3, [r7, #32]
}
 800619e:	bf00      	nop
 80061a0:	e7fe      	b.n	80061a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80061a2:	4b1a      	ldr	r3, [pc, #104]	; (800620c <xTimerGenericCommand+0x98>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d02a      	beq.n	8006200 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b05      	cmp	r3, #5
 80061ba:	dc18      	bgt.n	80061ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061bc:	f7ff feb2 	bl	8005f24 <xTaskGetSchedulerState>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d109      	bne.n	80061da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061c6:	4b11      	ldr	r3, [pc, #68]	; (800620c <xTimerGenericCommand+0x98>)
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	f107 0110 	add.w	r1, r7, #16
 80061ce:	2300      	movs	r3, #0
 80061d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061d2:	f7fe fca1 	bl	8004b18 <xQueueGenericSend>
 80061d6:	6278      	str	r0, [r7, #36]	; 0x24
 80061d8:	e012      	b.n	8006200 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061da:	4b0c      	ldr	r3, [pc, #48]	; (800620c <xTimerGenericCommand+0x98>)
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	f107 0110 	add.w	r1, r7, #16
 80061e2:	2300      	movs	r3, #0
 80061e4:	2200      	movs	r2, #0
 80061e6:	f7fe fc97 	bl	8004b18 <xQueueGenericSend>
 80061ea:	6278      	str	r0, [r7, #36]	; 0x24
 80061ec:	e008      	b.n	8006200 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061ee:	4b07      	ldr	r3, [pc, #28]	; (800620c <xTimerGenericCommand+0x98>)
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	f107 0110 	add.w	r1, r7, #16
 80061f6:	2300      	movs	r3, #0
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	f7fe fd8b 	bl	8004d14 <xQueueGenericSendFromISR>
 80061fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006202:	4618      	mov	r0, r3
 8006204:	3728      	adds	r7, #40	; 0x28
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	20000f8c 	.word	0x20000f8c

08006210 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b088      	sub	sp, #32
 8006214:	af02      	add	r7, sp, #8
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800621a:	4b22      	ldr	r3, [pc, #136]	; (80062a4 <prvProcessExpiredTimer+0x94>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	3304      	adds	r3, #4
 8006228:	4618      	mov	r0, r3
 800622a:	f7fe fb47 	bl	80048bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d022      	beq.n	8006282 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	699a      	ldr	r2, [r3, #24]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	18d1      	adds	r1, r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	6978      	ldr	r0, [r7, #20]
 800624a:	f000 f8d1 	bl	80063f0 <prvInsertTimerInActiveList>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01f      	beq.n	8006294 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006254:	2300      	movs	r3, #0
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	2300      	movs	r3, #0
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	2100      	movs	r1, #0
 800625e:	6978      	ldr	r0, [r7, #20]
 8006260:	f7ff ff88 	bl	8006174 <xTimerGenericCommand>
 8006264:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d113      	bne.n	8006294 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	60fb      	str	r3, [r7, #12]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006288:	f023 0301 	bic.w	r3, r3, #1
 800628c:	b2da      	uxtb	r2, r3
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	6978      	ldr	r0, [r7, #20]
 800629a:	4798      	blx	r3
}
 800629c:	bf00      	nop
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20000f84 	.word	0x20000f84

080062a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062b0:	f107 0308 	add.w	r3, r7, #8
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 f857 	bl	8006368 <prvGetNextExpireTime>
 80062ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	4619      	mov	r1, r3
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f803 	bl	80062cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062c6:	f000 f8d5 	bl	8006474 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062ca:	e7f1      	b.n	80062b0 <prvTimerTask+0x8>

080062cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062d6:	f7ff fa43 	bl	8005760 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062da:	f107 0308 	add.w	r3, r7, #8
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 f866 	bl	80063b0 <prvSampleTimeNow>
 80062e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d130      	bne.n	800634e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <prvProcessTimerOrBlockTask+0x3c>
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d806      	bhi.n	8006308 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062fa:	f7ff fa3f 	bl	800577c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062fe:	68f9      	ldr	r1, [r7, #12]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff ff85 	bl	8006210 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006306:	e024      	b.n	8006352 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d008      	beq.n	8006320 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800630e:	4b13      	ldr	r3, [pc, #76]	; (800635c <prvProcessTimerOrBlockTask+0x90>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <prvProcessTimerOrBlockTask+0x50>
 8006318:	2301      	movs	r3, #1
 800631a:	e000      	b.n	800631e <prvProcessTimerOrBlockTask+0x52>
 800631c:	2300      	movs	r3, #0
 800631e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006320:	4b0f      	ldr	r3, [pc, #60]	; (8006360 <prvProcessTimerOrBlockTask+0x94>)
 8006322:	6818      	ldr	r0, [r3, #0]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	4619      	mov	r1, r3
 800632e:	f7fe ffa7 	bl	8005280 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006332:	f7ff fa23 	bl	800577c <xTaskResumeAll>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10a      	bne.n	8006352 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800633c:	4b09      	ldr	r3, [pc, #36]	; (8006364 <prvProcessTimerOrBlockTask+0x98>)
 800633e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	f3bf 8f6f 	isb	sy
}
 800634c:	e001      	b.n	8006352 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800634e:	f7ff fa15 	bl	800577c <xTaskResumeAll>
}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20000f88 	.word	0x20000f88
 8006360:	20000f8c 	.word	0x20000f8c
 8006364:	e000ed04 	.word	0xe000ed04

08006368 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006370:	4b0e      	ldr	r3, [pc, #56]	; (80063ac <prvGetNextExpireTime+0x44>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <prvGetNextExpireTime+0x16>
 800637a:	2201      	movs	r2, #1
 800637c:	e000      	b.n	8006380 <prvGetNextExpireTime+0x18>
 800637e:	2200      	movs	r2, #0
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d105      	bne.n	8006398 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800638c:	4b07      	ldr	r3, [pc, #28]	; (80063ac <prvGetNextExpireTime+0x44>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	e001      	b.n	800639c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800639c:	68fb      	ldr	r3, [r7, #12]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	20000f84 	.word	0x20000f84

080063b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063b8:	f7ff fa7e 	bl	80058b8 <xTaskGetTickCount>
 80063bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063be:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <prvSampleTimeNow+0x3c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d205      	bcs.n	80063d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063c8:	f000 f936 	bl	8006638 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	e002      	b.n	80063da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063da:	4a04      	ldr	r2, [pc, #16]	; (80063ec <prvSampleTimeNow+0x3c>)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063e0:	68fb      	ldr	r3, [r7, #12]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000f94 	.word	0x20000f94

080063f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063fe:	2300      	movs	r3, #0
 8006400:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	429a      	cmp	r2, r3
 8006414:	d812      	bhi.n	800643c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	1ad2      	subs	r2, r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	429a      	cmp	r2, r3
 8006422:	d302      	bcc.n	800642a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006424:	2301      	movs	r3, #1
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	e01b      	b.n	8006462 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800642a:	4b10      	ldr	r3, [pc, #64]	; (800646c <prvInsertTimerInActiveList+0x7c>)
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3304      	adds	r3, #4
 8006432:	4619      	mov	r1, r3
 8006434:	4610      	mov	r0, r2
 8006436:	f7fe fa08 	bl	800484a <vListInsert>
 800643a:	e012      	b.n	8006462 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	429a      	cmp	r2, r3
 8006442:	d206      	bcs.n	8006452 <prvInsertTimerInActiveList+0x62>
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	429a      	cmp	r2, r3
 800644a:	d302      	bcc.n	8006452 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800644c:	2301      	movs	r3, #1
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	e007      	b.n	8006462 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006452:	4b07      	ldr	r3, [pc, #28]	; (8006470 <prvInsertTimerInActiveList+0x80>)
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3304      	adds	r3, #4
 800645a:	4619      	mov	r1, r3
 800645c:	4610      	mov	r0, r2
 800645e:	f7fe f9f4 	bl	800484a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006462:	697b      	ldr	r3, [r7, #20]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	20000f88 	.word	0x20000f88
 8006470:	20000f84 	.word	0x20000f84

08006474 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08e      	sub	sp, #56	; 0x38
 8006478:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800647a:	e0ca      	b.n	8006612 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	da18      	bge.n	80064b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006482:	1d3b      	adds	r3, r7, #4
 8006484:	3304      	adds	r3, #4
 8006486:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	61fb      	str	r3, [r7, #28]
}
 80064a0:	bf00      	nop
 80064a2:	e7fe      	b.n	80064a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064aa:	6850      	ldr	r0, [r2, #4]
 80064ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ae:	6892      	ldr	r2, [r2, #8]
 80064b0:	4611      	mov	r1, r2
 80064b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f2c0 80aa 	blt.w	8006610 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	3304      	adds	r3, #4
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe f9f5 	bl	80048bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064d2:	463b      	mov	r3, r7
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff ff6b 	bl	80063b0 <prvSampleTimeNow>
 80064da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b09      	cmp	r3, #9
 80064e0:	f200 8097 	bhi.w	8006612 <prvProcessReceivedCommands+0x19e>
 80064e4:	a201      	add	r2, pc, #4	; (adr r2, 80064ec <prvProcessReceivedCommands+0x78>)
 80064e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ea:	bf00      	nop
 80064ec:	08006515 	.word	0x08006515
 80064f0:	08006515 	.word	0x08006515
 80064f4:	08006515 	.word	0x08006515
 80064f8:	08006589 	.word	0x08006589
 80064fc:	0800659d 	.word	0x0800659d
 8006500:	080065e7 	.word	0x080065e7
 8006504:	08006515 	.word	0x08006515
 8006508:	08006515 	.word	0x08006515
 800650c:	08006589 	.word	0x08006589
 8006510:	0800659d 	.word	0x0800659d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800651a:	f043 0301 	orr.w	r3, r3, #1
 800651e:	b2da      	uxtb	r2, r3
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	18d1      	adds	r1, r2, r3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006534:	f7ff ff5c 	bl	80063f0 <prvInsertTimerInActiveList>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d069      	beq.n	8006612 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006544:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b00      	cmp	r3, #0
 8006552:	d05e      	beq.n	8006612 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	441a      	add	r2, r3
 800655c:	2300      	movs	r3, #0
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	2300      	movs	r3, #0
 8006562:	2100      	movs	r1, #0
 8006564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006566:	f7ff fe05 	bl	8006174 <xTimerGenericCommand>
 800656a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d14f      	bne.n	8006612 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	61bb      	str	r3, [r7, #24]
}
 8006584:	bf00      	nop
 8006586:	e7fe      	b.n	8006586 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800658e:	f023 0301 	bic.w	r3, r3, #1
 8006592:	b2da      	uxtb	r2, r3
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800659a:	e03a      	b.n	8006612 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10a      	bne.n	80065d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	617b      	str	r3, [r7, #20]
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	699a      	ldr	r2, [r3, #24]
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	18d1      	adds	r1, r2, r3
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065e0:	f7ff ff06 	bl	80063f0 <prvInsertTimerInActiveList>
					break;
 80065e4:	e015      	b.n	8006612 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d103      	bne.n	80065fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80065f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f6:	f000 fbdb 	bl	8006db0 <vPortFree>
 80065fa:	e00a      	b.n	8006612 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	b2da      	uxtb	r2, r3
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800660e:	e000      	b.n	8006612 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006610:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006612:	4b08      	ldr	r3, [pc, #32]	; (8006634 <prvProcessReceivedCommands+0x1c0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	1d39      	adds	r1, r7, #4
 8006618:	2200      	movs	r2, #0
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe fc16 	bl	8004e4c <xQueueReceive>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	f47f af2a 	bne.w	800647c <prvProcessReceivedCommands+0x8>
	}
}
 8006628:	bf00      	nop
 800662a:	bf00      	nop
 800662c:	3730      	adds	r7, #48	; 0x30
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20000f8c 	.word	0x20000f8c

08006638 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800663e:	e048      	b.n	80066d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006640:	4b2d      	ldr	r3, [pc, #180]	; (80066f8 <prvSwitchTimerLists+0xc0>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800664a:	4b2b      	ldr	r3, [pc, #172]	; (80066f8 <prvSwitchTimerLists+0xc0>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	3304      	adds	r3, #4
 8006658:	4618      	mov	r0, r3
 800665a:	f7fe f92f 	bl	80048bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b00      	cmp	r3, #0
 8006672:	d02e      	beq.n	80066d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	4413      	add	r3, r2
 800667c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	429a      	cmp	r2, r3
 8006684:	d90e      	bls.n	80066a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006692:	4b19      	ldr	r3, [pc, #100]	; (80066f8 <prvSwitchTimerLists+0xc0>)
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3304      	adds	r3, #4
 800669a:	4619      	mov	r1, r3
 800669c:	4610      	mov	r0, r2
 800669e:	f7fe f8d4 	bl	800484a <vListInsert>
 80066a2:	e016      	b.n	80066d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066a4:	2300      	movs	r3, #0
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	2300      	movs	r3, #0
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	2100      	movs	r1, #0
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f7ff fd60 	bl	8006174 <xTimerGenericCommand>
 80066b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10a      	bne.n	80066d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80066bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	603b      	str	r3, [r7, #0]
}
 80066ce:	bf00      	nop
 80066d0:	e7fe      	b.n	80066d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066d2:	4b09      	ldr	r3, [pc, #36]	; (80066f8 <prvSwitchTimerLists+0xc0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1b1      	bne.n	8006640 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066dc:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <prvSwitchTimerLists+0xc0>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066e2:	4b06      	ldr	r3, [pc, #24]	; (80066fc <prvSwitchTimerLists+0xc4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a04      	ldr	r2, [pc, #16]	; (80066f8 <prvSwitchTimerLists+0xc0>)
 80066e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066ea:	4a04      	ldr	r2, [pc, #16]	; (80066fc <prvSwitchTimerLists+0xc4>)
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	6013      	str	r3, [r2, #0]
}
 80066f0:	bf00      	nop
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20000f84 	.word	0x20000f84
 80066fc:	20000f88 	.word	0x20000f88

08006700 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006706:	f000 f965 	bl	80069d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800670a:	4b15      	ldr	r3, [pc, #84]	; (8006760 <prvCheckForValidListAndQueue+0x60>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d120      	bne.n	8006754 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006712:	4814      	ldr	r0, [pc, #80]	; (8006764 <prvCheckForValidListAndQueue+0x64>)
 8006714:	f7fe f848 	bl	80047a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006718:	4813      	ldr	r0, [pc, #76]	; (8006768 <prvCheckForValidListAndQueue+0x68>)
 800671a:	f7fe f845 	bl	80047a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800671e:	4b13      	ldr	r3, [pc, #76]	; (800676c <prvCheckForValidListAndQueue+0x6c>)
 8006720:	4a10      	ldr	r2, [pc, #64]	; (8006764 <prvCheckForValidListAndQueue+0x64>)
 8006722:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006724:	4b12      	ldr	r3, [pc, #72]	; (8006770 <prvCheckForValidListAndQueue+0x70>)
 8006726:	4a10      	ldr	r2, [pc, #64]	; (8006768 <prvCheckForValidListAndQueue+0x68>)
 8006728:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800672a:	2300      	movs	r3, #0
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	4b11      	ldr	r3, [pc, #68]	; (8006774 <prvCheckForValidListAndQueue+0x74>)
 8006730:	4a11      	ldr	r2, [pc, #68]	; (8006778 <prvCheckForValidListAndQueue+0x78>)
 8006732:	2110      	movs	r1, #16
 8006734:	200a      	movs	r0, #10
 8006736:	f7fe f953 	bl	80049e0 <xQueueGenericCreateStatic>
 800673a:	4603      	mov	r3, r0
 800673c:	4a08      	ldr	r2, [pc, #32]	; (8006760 <prvCheckForValidListAndQueue+0x60>)
 800673e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <prvCheckForValidListAndQueue+0x60>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006748:	4b05      	ldr	r3, [pc, #20]	; (8006760 <prvCheckForValidListAndQueue+0x60>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	490b      	ldr	r1, [pc, #44]	; (800677c <prvCheckForValidListAndQueue+0x7c>)
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe fd6c 	bl	800522c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006754:	f000 f96e 	bl	8006a34 <vPortExitCritical>
}
 8006758:	bf00      	nop
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20000f8c 	.word	0x20000f8c
 8006764:	20000f5c 	.word	0x20000f5c
 8006768:	20000f70 	.word	0x20000f70
 800676c:	20000f84 	.word	0x20000f84
 8006770:	20000f88 	.word	0x20000f88
 8006774:	20001038 	.word	0x20001038
 8006778:	20000f98 	.word	0x20000f98
 800677c:	0800b944 	.word	0x0800b944

08006780 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3b04      	subs	r3, #4
 8006790:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3b04      	subs	r3, #4
 800679e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f023 0201 	bic.w	r2, r3, #1
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3b04      	subs	r3, #4
 80067ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067b0:	4a0c      	ldr	r2, [pc, #48]	; (80067e4 <pxPortInitialiseStack+0x64>)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3b14      	subs	r3, #20
 80067ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3b04      	subs	r3, #4
 80067c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f06f 0202 	mvn.w	r2, #2
 80067ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3b20      	subs	r3, #32
 80067d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067d6:	68fb      	ldr	r3, [r7, #12]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	080067e9 	.word	0x080067e9

080067e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067ee:	2300      	movs	r3, #0
 80067f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067f2:	4b12      	ldr	r3, [pc, #72]	; (800683c <prvTaskExitError+0x54>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067fa:	d00a      	beq.n	8006812 <prvTaskExitError+0x2a>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	60fb      	str	r3, [r7, #12]
}
 800680e:	bf00      	nop
 8006810:	e7fe      	b.n	8006810 <prvTaskExitError+0x28>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	60bb      	str	r3, [r7, #8]
}
 8006824:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006826:	bf00      	nop
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0fc      	beq.n	8006828 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800682e:	bf00      	nop
 8006830:	bf00      	nop
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	2000000c 	.word	0x2000000c

08006840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006840:	4b07      	ldr	r3, [pc, #28]	; (8006860 <pxCurrentTCBConst2>)
 8006842:	6819      	ldr	r1, [r3, #0]
 8006844:	6808      	ldr	r0, [r1, #0]
 8006846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684a:	f380 8809 	msr	PSP, r0
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f04f 0000 	mov.w	r0, #0
 8006856:	f380 8811 	msr	BASEPRI, r0
 800685a:	4770      	bx	lr
 800685c:	f3af 8000 	nop.w

08006860 <pxCurrentTCBConst2>:
 8006860:	20000a5c 	.word	0x20000a5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop

08006868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006868:	4808      	ldr	r0, [pc, #32]	; (800688c <prvPortStartFirstTask+0x24>)
 800686a:	6800      	ldr	r0, [r0, #0]
 800686c:	6800      	ldr	r0, [r0, #0]
 800686e:	f380 8808 	msr	MSP, r0
 8006872:	f04f 0000 	mov.w	r0, #0
 8006876:	f380 8814 	msr	CONTROL, r0
 800687a:	b662      	cpsie	i
 800687c:	b661      	cpsie	f
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	df00      	svc	0
 8006888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800688a:	bf00      	nop
 800688c:	e000ed08 	.word	0xe000ed08

08006890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006896:	4b46      	ldr	r3, [pc, #280]	; (80069b0 <xPortStartScheduler+0x120>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a46      	ldr	r2, [pc, #280]	; (80069b4 <xPortStartScheduler+0x124>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d10a      	bne.n	80068b6 <xPortStartScheduler+0x26>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	613b      	str	r3, [r7, #16]
}
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068b6:	4b3e      	ldr	r3, [pc, #248]	; (80069b0 <xPortStartScheduler+0x120>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a3f      	ldr	r2, [pc, #252]	; (80069b8 <xPortStartScheduler+0x128>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d10a      	bne.n	80068d6 <xPortStartScheduler+0x46>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	60fb      	str	r3, [r7, #12]
}
 80068d2:	bf00      	nop
 80068d4:	e7fe      	b.n	80068d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068d6:	4b39      	ldr	r3, [pc, #228]	; (80069bc <xPortStartScheduler+0x12c>)
 80068d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	22ff      	movs	r2, #255	; 0xff
 80068e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	4b31      	ldr	r3, [pc, #196]	; (80069c0 <xPortStartScheduler+0x130>)
 80068fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068fe:	4b31      	ldr	r3, [pc, #196]	; (80069c4 <xPortStartScheduler+0x134>)
 8006900:	2207      	movs	r2, #7
 8006902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006904:	e009      	b.n	800691a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006906:	4b2f      	ldr	r3, [pc, #188]	; (80069c4 <xPortStartScheduler+0x134>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3b01      	subs	r3, #1
 800690c:	4a2d      	ldr	r2, [pc, #180]	; (80069c4 <xPortStartScheduler+0x134>)
 800690e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	b2db      	uxtb	r3, r3
 8006918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006922:	2b80      	cmp	r3, #128	; 0x80
 8006924:	d0ef      	beq.n	8006906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006926:	4b27      	ldr	r3, [pc, #156]	; (80069c4 <xPortStartScheduler+0x134>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f1c3 0307 	rsb	r3, r3, #7
 800692e:	2b04      	cmp	r3, #4
 8006930:	d00a      	beq.n	8006948 <xPortStartScheduler+0xb8>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	60bb      	str	r3, [r7, #8]
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006948:	4b1e      	ldr	r3, [pc, #120]	; (80069c4 <xPortStartScheduler+0x134>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	4a1d      	ldr	r2, [pc, #116]	; (80069c4 <xPortStartScheduler+0x134>)
 8006950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006952:	4b1c      	ldr	r3, [pc, #112]	; (80069c4 <xPortStartScheduler+0x134>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800695a:	4a1a      	ldr	r2, [pc, #104]	; (80069c4 <xPortStartScheduler+0x134>)
 800695c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006966:	4b18      	ldr	r3, [pc, #96]	; (80069c8 <xPortStartScheduler+0x138>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <xPortStartScheduler+0x138>)
 800696c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006972:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <xPortStartScheduler+0x138>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a14      	ldr	r2, [pc, #80]	; (80069c8 <xPortStartScheduler+0x138>)
 8006978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800697c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800697e:	f000 f8dd 	bl	8006b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006982:	4b12      	ldr	r3, [pc, #72]	; (80069cc <xPortStartScheduler+0x13c>)
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006988:	f000 f8fc 	bl	8006b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800698c:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <xPortStartScheduler+0x140>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a0f      	ldr	r2, [pc, #60]	; (80069d0 <xPortStartScheduler+0x140>)
 8006992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006998:	f7ff ff66 	bl	8006868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800699c:	f7ff f856 	bl	8005a4c <vTaskSwitchContext>
	prvTaskExitError();
 80069a0:	f7ff ff22 	bl	80067e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	e000ed00 	.word	0xe000ed00
 80069b4:	410fc271 	.word	0x410fc271
 80069b8:	410fc270 	.word	0x410fc270
 80069bc:	e000e400 	.word	0xe000e400
 80069c0:	20001088 	.word	0x20001088
 80069c4:	2000108c 	.word	0x2000108c
 80069c8:	e000ed20 	.word	0xe000ed20
 80069cc:	2000000c 	.word	0x2000000c
 80069d0:	e000ef34 	.word	0xe000ef34

080069d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	607b      	str	r3, [r7, #4]
}
 80069ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069ee:	4b0f      	ldr	r3, [pc, #60]	; (8006a2c <vPortEnterCritical+0x58>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3301      	adds	r3, #1
 80069f4:	4a0d      	ldr	r2, [pc, #52]	; (8006a2c <vPortEnterCritical+0x58>)
 80069f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069f8:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <vPortEnterCritical+0x58>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d10f      	bne.n	8006a20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <vPortEnterCritical+0x5c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	603b      	str	r3, [r7, #0]
}
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <vPortEnterCritical+0x4a>
	}
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	2000000c 	.word	0x2000000c
 8006a30:	e000ed04 	.word	0xe000ed04

08006a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a3a:	4b12      	ldr	r3, [pc, #72]	; (8006a84 <vPortExitCritical+0x50>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <vPortExitCritical+0x24>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	607b      	str	r3, [r7, #4]
}
 8006a54:	bf00      	nop
 8006a56:	e7fe      	b.n	8006a56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a58:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <vPortExitCritical+0x50>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	4a09      	ldr	r2, [pc, #36]	; (8006a84 <vPortExitCritical+0x50>)
 8006a60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a62:	4b08      	ldr	r3, [pc, #32]	; (8006a84 <vPortExitCritical+0x50>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d105      	bne.n	8006a76 <vPortExitCritical+0x42>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	f383 8811 	msr	BASEPRI, r3
}
 8006a74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a76:	bf00      	nop
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	2000000c 	.word	0x2000000c
	...

08006a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a90:	f3ef 8009 	mrs	r0, PSP
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	4b15      	ldr	r3, [pc, #84]	; (8006af0 <pxCurrentTCBConst>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	f01e 0f10 	tst.w	lr, #16
 8006aa0:	bf08      	it	eq
 8006aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aaa:	6010      	str	r0, [r2, #0]
 8006aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ab4:	f380 8811 	msr	BASEPRI, r0
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f7fe ffc4 	bl	8005a4c <vTaskSwitchContext>
 8006ac4:	f04f 0000 	mov.w	r0, #0
 8006ac8:	f380 8811 	msr	BASEPRI, r0
 8006acc:	bc09      	pop	{r0, r3}
 8006ace:	6819      	ldr	r1, [r3, #0]
 8006ad0:	6808      	ldr	r0, [r1, #0]
 8006ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad6:	f01e 0f10 	tst.w	lr, #16
 8006ada:	bf08      	it	eq
 8006adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ae0:	f380 8809 	msr	PSP, r0
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	f3af 8000 	nop.w

08006af0 <pxCurrentTCBConst>:
 8006af0:	20000a5c 	.word	0x20000a5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop

08006af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	607b      	str	r3, [r7, #4]
}
 8006b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b12:	f7fe fee1 	bl	80058d8 <xTaskIncrementTick>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b1c:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <xPortSysTickHandler+0x40>)
 8006b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	2300      	movs	r3, #0
 8006b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	f383 8811 	msr	BASEPRI, r3
}
 8006b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b30:	bf00      	nop
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	e000ed04 	.word	0xe000ed04

08006b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b40:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <vPortSetupTimerInterrupt+0x34>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b46:	4b0b      	ldr	r3, [pc, #44]	; (8006b74 <vPortSetupTimerInterrupt+0x38>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <vPortSetupTimerInterrupt+0x3c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a0a      	ldr	r2, [pc, #40]	; (8006b7c <vPortSetupTimerInterrupt+0x40>)
 8006b52:	fba2 2303 	umull	r2, r3, r2, r3
 8006b56:	099b      	lsrs	r3, r3, #6
 8006b58:	4a09      	ldr	r2, [pc, #36]	; (8006b80 <vPortSetupTimerInterrupt+0x44>)
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b5e:	4b04      	ldr	r3, [pc, #16]	; (8006b70 <vPortSetupTimerInterrupt+0x34>)
 8006b60:	2207      	movs	r2, #7
 8006b62:	601a      	str	r2, [r3, #0]
}
 8006b64:	bf00      	nop
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	e000e010 	.word	0xe000e010
 8006b74:	e000e018 	.word	0xe000e018
 8006b78:	20000000 	.word	0x20000000
 8006b7c:	10624dd3 	.word	0x10624dd3
 8006b80:	e000e014 	.word	0xe000e014

08006b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b94 <vPortEnableVFP+0x10>
 8006b88:	6801      	ldr	r1, [r0, #0]
 8006b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b8e:	6001      	str	r1, [r0, #0]
 8006b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b92:	bf00      	nop
 8006b94:	e000ed88 	.word	0xe000ed88

08006b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b9e:	f3ef 8305 	mrs	r3, IPSR
 8006ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b0f      	cmp	r3, #15
 8006ba8:	d914      	bls.n	8006bd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006baa:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <vPortValidateInterruptPriority+0x70>)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bb4:	4b15      	ldr	r3, [pc, #84]	; (8006c0c <vPortValidateInterruptPriority+0x74>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	7afa      	ldrb	r2, [r7, #11]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d20a      	bcs.n	8006bd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	607b      	str	r3, [r7, #4]
}
 8006bd0:	bf00      	nop
 8006bd2:	e7fe      	b.n	8006bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bd4:	4b0e      	ldr	r3, [pc, #56]	; (8006c10 <vPortValidateInterruptPriority+0x78>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bdc:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <vPortValidateInterruptPriority+0x7c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d90a      	bls.n	8006bfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	603b      	str	r3, [r7, #0]
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <vPortValidateInterruptPriority+0x60>
	}
 8006bfa:	bf00      	nop
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	e000e3f0 	.word	0xe000e3f0
 8006c0c:	20001088 	.word	0x20001088
 8006c10:	e000ed0c 	.word	0xe000ed0c
 8006c14:	2000108c 	.word	0x2000108c

08006c18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08a      	sub	sp, #40	; 0x28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c20:	2300      	movs	r3, #0
 8006c22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c24:	f7fe fd9c 	bl	8005760 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c28:	4b5b      	ldr	r3, [pc, #364]	; (8006d98 <pvPortMalloc+0x180>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c30:	f000 f920 	bl	8006e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c34:	4b59      	ldr	r3, [pc, #356]	; (8006d9c <pvPortMalloc+0x184>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f040 8093 	bne.w	8006d68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01d      	beq.n	8006c84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c48:	2208      	movs	r2, #8
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d014      	beq.n	8006c84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f023 0307 	bic.w	r3, r3, #7
 8006c60:	3308      	adds	r3, #8
 8006c62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <pvPortMalloc+0x6c>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	617b      	str	r3, [r7, #20]
}
 8006c80:	bf00      	nop
 8006c82:	e7fe      	b.n	8006c82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d06e      	beq.n	8006d68 <pvPortMalloc+0x150>
 8006c8a:	4b45      	ldr	r3, [pc, #276]	; (8006da0 <pvPortMalloc+0x188>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d869      	bhi.n	8006d68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c94:	4b43      	ldr	r3, [pc, #268]	; (8006da4 <pvPortMalloc+0x18c>)
 8006c96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c98:	4b42      	ldr	r3, [pc, #264]	; (8006da4 <pvPortMalloc+0x18c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c9e:	e004      	b.n	8006caa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d903      	bls.n	8006cbc <pvPortMalloc+0xa4>
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1f1      	bne.n	8006ca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cbc:	4b36      	ldr	r3, [pc, #216]	; (8006d98 <pvPortMalloc+0x180>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d050      	beq.n	8006d68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2208      	movs	r2, #8
 8006ccc:	4413      	add	r3, r2
 8006cce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d91f      	bls.n	8006d28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4413      	add	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <pvPortMalloc+0xf8>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	613b      	str	r3, [r7, #16]
}
 8006d0c:	bf00      	nop
 8006d0e:	e7fe      	b.n	8006d0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	1ad2      	subs	r2, r2, r3
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d22:	69b8      	ldr	r0, [r7, #24]
 8006d24:	f000 f908 	bl	8006f38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d28:	4b1d      	ldr	r3, [pc, #116]	; (8006da0 <pvPortMalloc+0x188>)
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	4a1b      	ldr	r2, [pc, #108]	; (8006da0 <pvPortMalloc+0x188>)
 8006d34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d36:	4b1a      	ldr	r3, [pc, #104]	; (8006da0 <pvPortMalloc+0x188>)
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <pvPortMalloc+0x190>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d203      	bcs.n	8006d4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d42:	4b17      	ldr	r3, [pc, #92]	; (8006da0 <pvPortMalloc+0x188>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a18      	ldr	r2, [pc, #96]	; (8006da8 <pvPortMalloc+0x190>)
 8006d48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	4b13      	ldr	r3, [pc, #76]	; (8006d9c <pvPortMalloc+0x184>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d5e:	4b13      	ldr	r3, [pc, #76]	; (8006dac <pvPortMalloc+0x194>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3301      	adds	r3, #1
 8006d64:	4a11      	ldr	r2, [pc, #68]	; (8006dac <pvPortMalloc+0x194>)
 8006d66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d68:	f7fe fd08 	bl	800577c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <pvPortMalloc+0x174>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	60fb      	str	r3, [r7, #12]
}
 8006d88:	bf00      	nop
 8006d8a:	e7fe      	b.n	8006d8a <pvPortMalloc+0x172>
	return pvReturn;
 8006d8c:	69fb      	ldr	r3, [r7, #28]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3728      	adds	r7, #40	; 0x28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20004c98 	.word	0x20004c98
 8006d9c:	20004cac 	.word	0x20004cac
 8006da0:	20004c9c 	.word	0x20004c9c
 8006da4:	20004c90 	.word	0x20004c90
 8006da8:	20004ca0 	.word	0x20004ca0
 8006dac:	20004ca4 	.word	0x20004ca4

08006db0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d04d      	beq.n	8006e5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	425b      	negs	r3, r3
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4413      	add	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	4b24      	ldr	r3, [pc, #144]	; (8006e68 <vPortFree+0xb8>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10a      	bne.n	8006df4 <vPortFree+0x44>
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	60fb      	str	r3, [r7, #12]
}
 8006df0:	bf00      	nop
 8006df2:	e7fe      	b.n	8006df2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00a      	beq.n	8006e12 <vPortFree+0x62>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60bb      	str	r3, [r7, #8]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <vPortFree+0xb8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01e      	beq.n	8006e5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d11a      	bne.n	8006e5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <vPortFree+0xb8>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	43db      	mvns	r3, r3
 8006e32:	401a      	ands	r2, r3
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e38:	f7fe fc92 	bl	8005760 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <vPortFree+0xbc>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4413      	add	r3, r2
 8006e46:	4a09      	ldr	r2, [pc, #36]	; (8006e6c <vPortFree+0xbc>)
 8006e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e4a:	6938      	ldr	r0, [r7, #16]
 8006e4c:	f000 f874 	bl	8006f38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <vPortFree+0xc0>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3301      	adds	r3, #1
 8006e56:	4a06      	ldr	r2, [pc, #24]	; (8006e70 <vPortFree+0xc0>)
 8006e58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e5a:	f7fe fc8f 	bl	800577c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e5e:	bf00      	nop
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20004cac 	.word	0x20004cac
 8006e6c:	20004c9c 	.word	0x20004c9c
 8006e70:	20004ca8 	.word	0x20004ca8

08006e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e80:	4b27      	ldr	r3, [pc, #156]	; (8006f20 <prvHeapInit+0xac>)
 8006e82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f003 0307 	and.w	r3, r3, #7
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00c      	beq.n	8006ea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3307      	adds	r3, #7
 8006e92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0307 	bic.w	r3, r3, #7
 8006e9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	4a1f      	ldr	r2, [pc, #124]	; (8006f20 <prvHeapInit+0xac>)
 8006ea4:	4413      	add	r3, r2
 8006ea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006eac:	4a1d      	ldr	r2, [pc, #116]	; (8006f24 <prvHeapInit+0xb0>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006eb2:	4b1c      	ldr	r3, [pc, #112]	; (8006f24 <prvHeapInit+0xb0>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ec0:	2208      	movs	r2, #8
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0307 	bic.w	r3, r3, #7
 8006ece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <prvHeapInit+0xb4>)
 8006ed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ed6:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <prvHeapInit+0xb4>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2200      	movs	r2, #0
 8006edc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ede:	4b12      	ldr	r3, [pc, #72]	; (8006f28 <prvHeapInit+0xb4>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	1ad2      	subs	r2, r2, r3
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ef4:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <prvHeapInit+0xb4>)
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	4a0a      	ldr	r2, [pc, #40]	; (8006f2c <prvHeapInit+0xb8>)
 8006f02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	4a09      	ldr	r2, [pc, #36]	; (8006f30 <prvHeapInit+0xbc>)
 8006f0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f0c:	4b09      	ldr	r3, [pc, #36]	; (8006f34 <prvHeapInit+0xc0>)
 8006f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f12:	601a      	str	r2, [r3, #0]
}
 8006f14:	bf00      	nop
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	20001090 	.word	0x20001090
 8006f24:	20004c90 	.word	0x20004c90
 8006f28:	20004c98 	.word	0x20004c98
 8006f2c:	20004ca0 	.word	0x20004ca0
 8006f30:	20004c9c 	.word	0x20004c9c
 8006f34:	20004cac 	.word	0x20004cac

08006f38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f40:	4b28      	ldr	r3, [pc, #160]	; (8006fe4 <prvInsertBlockIntoFreeList+0xac>)
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	e002      	b.n	8006f4c <prvInsertBlockIntoFreeList+0x14>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d8f7      	bhi.n	8006f46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	4413      	add	r3, r2
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d108      	bne.n	8006f7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	441a      	add	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	441a      	add	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d118      	bne.n	8006fc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	4b15      	ldr	r3, [pc, #84]	; (8006fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d00d      	beq.n	8006fb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	441a      	add	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	e008      	b.n	8006fc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fb6:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	e003      	b.n	8006fc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d002      	beq.n	8006fd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20004c90 	.word	0x20004c90
 8006fe8:	20004c98 	.word	0x20004c98

08006fec <__errno>:
 8006fec:	4b01      	ldr	r3, [pc, #4]	; (8006ff4 <__errno+0x8>)
 8006fee:	6818      	ldr	r0, [r3, #0]
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000010 	.word	0x20000010

08006ff8 <__libc_init_array>:
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	4d0d      	ldr	r5, [pc, #52]	; (8007030 <__libc_init_array+0x38>)
 8006ffc:	4c0d      	ldr	r4, [pc, #52]	; (8007034 <__libc_init_array+0x3c>)
 8006ffe:	1b64      	subs	r4, r4, r5
 8007000:	10a4      	asrs	r4, r4, #2
 8007002:	2600      	movs	r6, #0
 8007004:	42a6      	cmp	r6, r4
 8007006:	d109      	bne.n	800701c <__libc_init_array+0x24>
 8007008:	4d0b      	ldr	r5, [pc, #44]	; (8007038 <__libc_init_array+0x40>)
 800700a:	4c0c      	ldr	r4, [pc, #48]	; (800703c <__libc_init_array+0x44>)
 800700c:	f004 fc48 	bl	800b8a0 <_init>
 8007010:	1b64      	subs	r4, r4, r5
 8007012:	10a4      	asrs	r4, r4, #2
 8007014:	2600      	movs	r6, #0
 8007016:	42a6      	cmp	r6, r4
 8007018:	d105      	bne.n	8007026 <__libc_init_array+0x2e>
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007020:	4798      	blx	r3
 8007022:	3601      	adds	r6, #1
 8007024:	e7ee      	b.n	8007004 <__libc_init_array+0xc>
 8007026:	f855 3b04 	ldr.w	r3, [r5], #4
 800702a:	4798      	blx	r3
 800702c:	3601      	adds	r6, #1
 800702e:	e7f2      	b.n	8007016 <__libc_init_array+0x1e>
 8007030:	0800be44 	.word	0x0800be44
 8007034:	0800be44 	.word	0x0800be44
 8007038:	0800be44 	.word	0x0800be44
 800703c:	0800be48 	.word	0x0800be48

08007040 <memcpy>:
 8007040:	440a      	add	r2, r1
 8007042:	4291      	cmp	r1, r2
 8007044:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007048:	d100      	bne.n	800704c <memcpy+0xc>
 800704a:	4770      	bx	lr
 800704c:	b510      	push	{r4, lr}
 800704e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007056:	4291      	cmp	r1, r2
 8007058:	d1f9      	bne.n	800704e <memcpy+0xe>
 800705a:	bd10      	pop	{r4, pc}

0800705c <memset>:
 800705c:	4402      	add	r2, r0
 800705e:	4603      	mov	r3, r0
 8007060:	4293      	cmp	r3, r2
 8007062:	d100      	bne.n	8007066 <memset+0xa>
 8007064:	4770      	bx	lr
 8007066:	f803 1b01 	strb.w	r1, [r3], #1
 800706a:	e7f9      	b.n	8007060 <memset+0x4>

0800706c <__cvt>:
 800706c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007070:	ec55 4b10 	vmov	r4, r5, d0
 8007074:	2d00      	cmp	r5, #0
 8007076:	460e      	mov	r6, r1
 8007078:	4619      	mov	r1, r3
 800707a:	462b      	mov	r3, r5
 800707c:	bfbb      	ittet	lt
 800707e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007082:	461d      	movlt	r5, r3
 8007084:	2300      	movge	r3, #0
 8007086:	232d      	movlt	r3, #45	; 0x2d
 8007088:	700b      	strb	r3, [r1, #0]
 800708a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800708c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007090:	4691      	mov	r9, r2
 8007092:	f023 0820 	bic.w	r8, r3, #32
 8007096:	bfbc      	itt	lt
 8007098:	4622      	movlt	r2, r4
 800709a:	4614      	movlt	r4, r2
 800709c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070a0:	d005      	beq.n	80070ae <__cvt+0x42>
 80070a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80070a6:	d100      	bne.n	80070aa <__cvt+0x3e>
 80070a8:	3601      	adds	r6, #1
 80070aa:	2102      	movs	r1, #2
 80070ac:	e000      	b.n	80070b0 <__cvt+0x44>
 80070ae:	2103      	movs	r1, #3
 80070b0:	ab03      	add	r3, sp, #12
 80070b2:	9301      	str	r3, [sp, #4]
 80070b4:	ab02      	add	r3, sp, #8
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	ec45 4b10 	vmov	d0, r4, r5
 80070bc:	4653      	mov	r3, sl
 80070be:	4632      	mov	r2, r6
 80070c0:	f001 fdb6 	bl	8008c30 <_dtoa_r>
 80070c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80070c8:	4607      	mov	r7, r0
 80070ca:	d102      	bne.n	80070d2 <__cvt+0x66>
 80070cc:	f019 0f01 	tst.w	r9, #1
 80070d0:	d022      	beq.n	8007118 <__cvt+0xac>
 80070d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070d6:	eb07 0906 	add.w	r9, r7, r6
 80070da:	d110      	bne.n	80070fe <__cvt+0x92>
 80070dc:	783b      	ldrb	r3, [r7, #0]
 80070de:	2b30      	cmp	r3, #48	; 0x30
 80070e0:	d10a      	bne.n	80070f8 <__cvt+0x8c>
 80070e2:	2200      	movs	r2, #0
 80070e4:	2300      	movs	r3, #0
 80070e6:	4620      	mov	r0, r4
 80070e8:	4629      	mov	r1, r5
 80070ea:	f7f9 fced 	bl	8000ac8 <__aeabi_dcmpeq>
 80070ee:	b918      	cbnz	r0, 80070f8 <__cvt+0x8c>
 80070f0:	f1c6 0601 	rsb	r6, r6, #1
 80070f4:	f8ca 6000 	str.w	r6, [sl]
 80070f8:	f8da 3000 	ldr.w	r3, [sl]
 80070fc:	4499      	add	r9, r3
 80070fe:	2200      	movs	r2, #0
 8007100:	2300      	movs	r3, #0
 8007102:	4620      	mov	r0, r4
 8007104:	4629      	mov	r1, r5
 8007106:	f7f9 fcdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800710a:	b108      	cbz	r0, 8007110 <__cvt+0xa4>
 800710c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007110:	2230      	movs	r2, #48	; 0x30
 8007112:	9b03      	ldr	r3, [sp, #12]
 8007114:	454b      	cmp	r3, r9
 8007116:	d307      	bcc.n	8007128 <__cvt+0xbc>
 8007118:	9b03      	ldr	r3, [sp, #12]
 800711a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800711c:	1bdb      	subs	r3, r3, r7
 800711e:	4638      	mov	r0, r7
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	b004      	add	sp, #16
 8007124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007128:	1c59      	adds	r1, r3, #1
 800712a:	9103      	str	r1, [sp, #12]
 800712c:	701a      	strb	r2, [r3, #0]
 800712e:	e7f0      	b.n	8007112 <__cvt+0xa6>

08007130 <__exponent>:
 8007130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007132:	4603      	mov	r3, r0
 8007134:	2900      	cmp	r1, #0
 8007136:	bfb8      	it	lt
 8007138:	4249      	neglt	r1, r1
 800713a:	f803 2b02 	strb.w	r2, [r3], #2
 800713e:	bfb4      	ite	lt
 8007140:	222d      	movlt	r2, #45	; 0x2d
 8007142:	222b      	movge	r2, #43	; 0x2b
 8007144:	2909      	cmp	r1, #9
 8007146:	7042      	strb	r2, [r0, #1]
 8007148:	dd2a      	ble.n	80071a0 <__exponent+0x70>
 800714a:	f10d 0407 	add.w	r4, sp, #7
 800714e:	46a4      	mov	ip, r4
 8007150:	270a      	movs	r7, #10
 8007152:	46a6      	mov	lr, r4
 8007154:	460a      	mov	r2, r1
 8007156:	fb91 f6f7 	sdiv	r6, r1, r7
 800715a:	fb07 1516 	mls	r5, r7, r6, r1
 800715e:	3530      	adds	r5, #48	; 0x30
 8007160:	2a63      	cmp	r2, #99	; 0x63
 8007162:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007166:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800716a:	4631      	mov	r1, r6
 800716c:	dcf1      	bgt.n	8007152 <__exponent+0x22>
 800716e:	3130      	adds	r1, #48	; 0x30
 8007170:	f1ae 0502 	sub.w	r5, lr, #2
 8007174:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007178:	1c44      	adds	r4, r0, #1
 800717a:	4629      	mov	r1, r5
 800717c:	4561      	cmp	r1, ip
 800717e:	d30a      	bcc.n	8007196 <__exponent+0x66>
 8007180:	f10d 0209 	add.w	r2, sp, #9
 8007184:	eba2 020e 	sub.w	r2, r2, lr
 8007188:	4565      	cmp	r5, ip
 800718a:	bf88      	it	hi
 800718c:	2200      	movhi	r2, #0
 800718e:	4413      	add	r3, r2
 8007190:	1a18      	subs	r0, r3, r0
 8007192:	b003      	add	sp, #12
 8007194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800719a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800719e:	e7ed      	b.n	800717c <__exponent+0x4c>
 80071a0:	2330      	movs	r3, #48	; 0x30
 80071a2:	3130      	adds	r1, #48	; 0x30
 80071a4:	7083      	strb	r3, [r0, #2]
 80071a6:	70c1      	strb	r1, [r0, #3]
 80071a8:	1d03      	adds	r3, r0, #4
 80071aa:	e7f1      	b.n	8007190 <__exponent+0x60>

080071ac <_printf_float>:
 80071ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b0:	ed2d 8b02 	vpush	{d8}
 80071b4:	b08d      	sub	sp, #52	; 0x34
 80071b6:	460c      	mov	r4, r1
 80071b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80071bc:	4616      	mov	r6, r2
 80071be:	461f      	mov	r7, r3
 80071c0:	4605      	mov	r5, r0
 80071c2:	f002 fe91 	bl	8009ee8 <_localeconv_r>
 80071c6:	f8d0 a000 	ldr.w	sl, [r0]
 80071ca:	4650      	mov	r0, sl
 80071cc:	f7f9 f800 	bl	80001d0 <strlen>
 80071d0:	2300      	movs	r3, #0
 80071d2:	930a      	str	r3, [sp, #40]	; 0x28
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	9305      	str	r3, [sp, #20]
 80071d8:	f8d8 3000 	ldr.w	r3, [r8]
 80071dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80071e0:	3307      	adds	r3, #7
 80071e2:	f023 0307 	bic.w	r3, r3, #7
 80071e6:	f103 0208 	add.w	r2, r3, #8
 80071ea:	f8c8 2000 	str.w	r2, [r8]
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80071f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80071fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071fe:	9307      	str	r3, [sp, #28]
 8007200:	f8cd 8018 	str.w	r8, [sp, #24]
 8007204:	ee08 0a10 	vmov	s16, r0
 8007208:	4b9f      	ldr	r3, [pc, #636]	; (8007488 <_printf_float+0x2dc>)
 800720a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800720e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007212:	f7f9 fc8b 	bl	8000b2c <__aeabi_dcmpun>
 8007216:	bb88      	cbnz	r0, 800727c <_printf_float+0xd0>
 8007218:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800721c:	4b9a      	ldr	r3, [pc, #616]	; (8007488 <_printf_float+0x2dc>)
 800721e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007222:	f7f9 fc65 	bl	8000af0 <__aeabi_dcmple>
 8007226:	bb48      	cbnz	r0, 800727c <_printf_float+0xd0>
 8007228:	2200      	movs	r2, #0
 800722a:	2300      	movs	r3, #0
 800722c:	4640      	mov	r0, r8
 800722e:	4649      	mov	r1, r9
 8007230:	f7f9 fc54 	bl	8000adc <__aeabi_dcmplt>
 8007234:	b110      	cbz	r0, 800723c <_printf_float+0x90>
 8007236:	232d      	movs	r3, #45	; 0x2d
 8007238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800723c:	4b93      	ldr	r3, [pc, #588]	; (800748c <_printf_float+0x2e0>)
 800723e:	4894      	ldr	r0, [pc, #592]	; (8007490 <_printf_float+0x2e4>)
 8007240:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007244:	bf94      	ite	ls
 8007246:	4698      	movls	r8, r3
 8007248:	4680      	movhi	r8, r0
 800724a:	2303      	movs	r3, #3
 800724c:	6123      	str	r3, [r4, #16]
 800724e:	9b05      	ldr	r3, [sp, #20]
 8007250:	f023 0204 	bic.w	r2, r3, #4
 8007254:	6022      	str	r2, [r4, #0]
 8007256:	f04f 0900 	mov.w	r9, #0
 800725a:	9700      	str	r7, [sp, #0]
 800725c:	4633      	mov	r3, r6
 800725e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007260:	4621      	mov	r1, r4
 8007262:	4628      	mov	r0, r5
 8007264:	f000 f9d8 	bl	8007618 <_printf_common>
 8007268:	3001      	adds	r0, #1
 800726a:	f040 8090 	bne.w	800738e <_printf_float+0x1e2>
 800726e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007272:	b00d      	add	sp, #52	; 0x34
 8007274:	ecbd 8b02 	vpop	{d8}
 8007278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800727c:	4642      	mov	r2, r8
 800727e:	464b      	mov	r3, r9
 8007280:	4640      	mov	r0, r8
 8007282:	4649      	mov	r1, r9
 8007284:	f7f9 fc52 	bl	8000b2c <__aeabi_dcmpun>
 8007288:	b140      	cbz	r0, 800729c <_printf_float+0xf0>
 800728a:	464b      	mov	r3, r9
 800728c:	2b00      	cmp	r3, #0
 800728e:	bfbc      	itt	lt
 8007290:	232d      	movlt	r3, #45	; 0x2d
 8007292:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007296:	487f      	ldr	r0, [pc, #508]	; (8007494 <_printf_float+0x2e8>)
 8007298:	4b7f      	ldr	r3, [pc, #508]	; (8007498 <_printf_float+0x2ec>)
 800729a:	e7d1      	b.n	8007240 <_printf_float+0x94>
 800729c:	6863      	ldr	r3, [r4, #4]
 800729e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80072a2:	9206      	str	r2, [sp, #24]
 80072a4:	1c5a      	adds	r2, r3, #1
 80072a6:	d13f      	bne.n	8007328 <_printf_float+0x17c>
 80072a8:	2306      	movs	r3, #6
 80072aa:	6063      	str	r3, [r4, #4]
 80072ac:	9b05      	ldr	r3, [sp, #20]
 80072ae:	6861      	ldr	r1, [r4, #4]
 80072b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80072b4:	2300      	movs	r3, #0
 80072b6:	9303      	str	r3, [sp, #12]
 80072b8:	ab0a      	add	r3, sp, #40	; 0x28
 80072ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80072be:	ab09      	add	r3, sp, #36	; 0x24
 80072c0:	ec49 8b10 	vmov	d0, r8, r9
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	6022      	str	r2, [r4, #0]
 80072c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80072cc:	4628      	mov	r0, r5
 80072ce:	f7ff fecd 	bl	800706c <__cvt>
 80072d2:	9b06      	ldr	r3, [sp, #24]
 80072d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072d6:	2b47      	cmp	r3, #71	; 0x47
 80072d8:	4680      	mov	r8, r0
 80072da:	d108      	bne.n	80072ee <_printf_float+0x142>
 80072dc:	1cc8      	adds	r0, r1, #3
 80072de:	db02      	blt.n	80072e6 <_printf_float+0x13a>
 80072e0:	6863      	ldr	r3, [r4, #4]
 80072e2:	4299      	cmp	r1, r3
 80072e4:	dd41      	ble.n	800736a <_printf_float+0x1be>
 80072e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80072ea:	fa5f fb8b 	uxtb.w	fp, fp
 80072ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072f2:	d820      	bhi.n	8007336 <_printf_float+0x18a>
 80072f4:	3901      	subs	r1, #1
 80072f6:	465a      	mov	r2, fp
 80072f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072fc:	9109      	str	r1, [sp, #36]	; 0x24
 80072fe:	f7ff ff17 	bl	8007130 <__exponent>
 8007302:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007304:	1813      	adds	r3, r2, r0
 8007306:	2a01      	cmp	r2, #1
 8007308:	4681      	mov	r9, r0
 800730a:	6123      	str	r3, [r4, #16]
 800730c:	dc02      	bgt.n	8007314 <_printf_float+0x168>
 800730e:	6822      	ldr	r2, [r4, #0]
 8007310:	07d2      	lsls	r2, r2, #31
 8007312:	d501      	bpl.n	8007318 <_printf_float+0x16c>
 8007314:	3301      	adds	r3, #1
 8007316:	6123      	str	r3, [r4, #16]
 8007318:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800731c:	2b00      	cmp	r3, #0
 800731e:	d09c      	beq.n	800725a <_printf_float+0xae>
 8007320:	232d      	movs	r3, #45	; 0x2d
 8007322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007326:	e798      	b.n	800725a <_printf_float+0xae>
 8007328:	9a06      	ldr	r2, [sp, #24]
 800732a:	2a47      	cmp	r2, #71	; 0x47
 800732c:	d1be      	bne.n	80072ac <_printf_float+0x100>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1bc      	bne.n	80072ac <_printf_float+0x100>
 8007332:	2301      	movs	r3, #1
 8007334:	e7b9      	b.n	80072aa <_printf_float+0xfe>
 8007336:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800733a:	d118      	bne.n	800736e <_printf_float+0x1c2>
 800733c:	2900      	cmp	r1, #0
 800733e:	6863      	ldr	r3, [r4, #4]
 8007340:	dd0b      	ble.n	800735a <_printf_float+0x1ae>
 8007342:	6121      	str	r1, [r4, #16]
 8007344:	b913      	cbnz	r3, 800734c <_printf_float+0x1a0>
 8007346:	6822      	ldr	r2, [r4, #0]
 8007348:	07d0      	lsls	r0, r2, #31
 800734a:	d502      	bpl.n	8007352 <_printf_float+0x1a6>
 800734c:	3301      	adds	r3, #1
 800734e:	440b      	add	r3, r1
 8007350:	6123      	str	r3, [r4, #16]
 8007352:	65a1      	str	r1, [r4, #88]	; 0x58
 8007354:	f04f 0900 	mov.w	r9, #0
 8007358:	e7de      	b.n	8007318 <_printf_float+0x16c>
 800735a:	b913      	cbnz	r3, 8007362 <_printf_float+0x1b6>
 800735c:	6822      	ldr	r2, [r4, #0]
 800735e:	07d2      	lsls	r2, r2, #31
 8007360:	d501      	bpl.n	8007366 <_printf_float+0x1ba>
 8007362:	3302      	adds	r3, #2
 8007364:	e7f4      	b.n	8007350 <_printf_float+0x1a4>
 8007366:	2301      	movs	r3, #1
 8007368:	e7f2      	b.n	8007350 <_printf_float+0x1a4>
 800736a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800736e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007370:	4299      	cmp	r1, r3
 8007372:	db05      	blt.n	8007380 <_printf_float+0x1d4>
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	6121      	str	r1, [r4, #16]
 8007378:	07d8      	lsls	r0, r3, #31
 800737a:	d5ea      	bpl.n	8007352 <_printf_float+0x1a6>
 800737c:	1c4b      	adds	r3, r1, #1
 800737e:	e7e7      	b.n	8007350 <_printf_float+0x1a4>
 8007380:	2900      	cmp	r1, #0
 8007382:	bfd4      	ite	le
 8007384:	f1c1 0202 	rsble	r2, r1, #2
 8007388:	2201      	movgt	r2, #1
 800738a:	4413      	add	r3, r2
 800738c:	e7e0      	b.n	8007350 <_printf_float+0x1a4>
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	055a      	lsls	r2, r3, #21
 8007392:	d407      	bmi.n	80073a4 <_printf_float+0x1f8>
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	4642      	mov	r2, r8
 8007398:	4631      	mov	r1, r6
 800739a:	4628      	mov	r0, r5
 800739c:	47b8      	blx	r7
 800739e:	3001      	adds	r0, #1
 80073a0:	d12c      	bne.n	80073fc <_printf_float+0x250>
 80073a2:	e764      	b.n	800726e <_printf_float+0xc2>
 80073a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80073a8:	f240 80e0 	bls.w	800756c <_printf_float+0x3c0>
 80073ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073b0:	2200      	movs	r2, #0
 80073b2:	2300      	movs	r3, #0
 80073b4:	f7f9 fb88 	bl	8000ac8 <__aeabi_dcmpeq>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d034      	beq.n	8007426 <_printf_float+0x27a>
 80073bc:	4a37      	ldr	r2, [pc, #220]	; (800749c <_printf_float+0x2f0>)
 80073be:	2301      	movs	r3, #1
 80073c0:	4631      	mov	r1, r6
 80073c2:	4628      	mov	r0, r5
 80073c4:	47b8      	blx	r7
 80073c6:	3001      	adds	r0, #1
 80073c8:	f43f af51 	beq.w	800726e <_printf_float+0xc2>
 80073cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073d0:	429a      	cmp	r2, r3
 80073d2:	db02      	blt.n	80073da <_printf_float+0x22e>
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	07d8      	lsls	r0, r3, #31
 80073d8:	d510      	bpl.n	80073fc <_printf_float+0x250>
 80073da:	ee18 3a10 	vmov	r3, s16
 80073de:	4652      	mov	r2, sl
 80073e0:	4631      	mov	r1, r6
 80073e2:	4628      	mov	r0, r5
 80073e4:	47b8      	blx	r7
 80073e6:	3001      	adds	r0, #1
 80073e8:	f43f af41 	beq.w	800726e <_printf_float+0xc2>
 80073ec:	f04f 0800 	mov.w	r8, #0
 80073f0:	f104 091a 	add.w	r9, r4, #26
 80073f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f6:	3b01      	subs	r3, #1
 80073f8:	4543      	cmp	r3, r8
 80073fa:	dc09      	bgt.n	8007410 <_printf_float+0x264>
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	079b      	lsls	r3, r3, #30
 8007400:	f100 8105 	bmi.w	800760e <_printf_float+0x462>
 8007404:	68e0      	ldr	r0, [r4, #12]
 8007406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007408:	4298      	cmp	r0, r3
 800740a:	bfb8      	it	lt
 800740c:	4618      	movlt	r0, r3
 800740e:	e730      	b.n	8007272 <_printf_float+0xc6>
 8007410:	2301      	movs	r3, #1
 8007412:	464a      	mov	r2, r9
 8007414:	4631      	mov	r1, r6
 8007416:	4628      	mov	r0, r5
 8007418:	47b8      	blx	r7
 800741a:	3001      	adds	r0, #1
 800741c:	f43f af27 	beq.w	800726e <_printf_float+0xc2>
 8007420:	f108 0801 	add.w	r8, r8, #1
 8007424:	e7e6      	b.n	80073f4 <_printf_float+0x248>
 8007426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007428:	2b00      	cmp	r3, #0
 800742a:	dc39      	bgt.n	80074a0 <_printf_float+0x2f4>
 800742c:	4a1b      	ldr	r2, [pc, #108]	; (800749c <_printf_float+0x2f0>)
 800742e:	2301      	movs	r3, #1
 8007430:	4631      	mov	r1, r6
 8007432:	4628      	mov	r0, r5
 8007434:	47b8      	blx	r7
 8007436:	3001      	adds	r0, #1
 8007438:	f43f af19 	beq.w	800726e <_printf_float+0xc2>
 800743c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007440:	4313      	orrs	r3, r2
 8007442:	d102      	bne.n	800744a <_printf_float+0x29e>
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	07d9      	lsls	r1, r3, #31
 8007448:	d5d8      	bpl.n	80073fc <_printf_float+0x250>
 800744a:	ee18 3a10 	vmov	r3, s16
 800744e:	4652      	mov	r2, sl
 8007450:	4631      	mov	r1, r6
 8007452:	4628      	mov	r0, r5
 8007454:	47b8      	blx	r7
 8007456:	3001      	adds	r0, #1
 8007458:	f43f af09 	beq.w	800726e <_printf_float+0xc2>
 800745c:	f04f 0900 	mov.w	r9, #0
 8007460:	f104 0a1a 	add.w	sl, r4, #26
 8007464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007466:	425b      	negs	r3, r3
 8007468:	454b      	cmp	r3, r9
 800746a:	dc01      	bgt.n	8007470 <_printf_float+0x2c4>
 800746c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800746e:	e792      	b.n	8007396 <_printf_float+0x1ea>
 8007470:	2301      	movs	r3, #1
 8007472:	4652      	mov	r2, sl
 8007474:	4631      	mov	r1, r6
 8007476:	4628      	mov	r0, r5
 8007478:	47b8      	blx	r7
 800747a:	3001      	adds	r0, #1
 800747c:	f43f aef7 	beq.w	800726e <_printf_float+0xc2>
 8007480:	f109 0901 	add.w	r9, r9, #1
 8007484:	e7ee      	b.n	8007464 <_printf_float+0x2b8>
 8007486:	bf00      	nop
 8007488:	7fefffff 	.word	0x7fefffff
 800748c:	0800b98c 	.word	0x0800b98c
 8007490:	0800b990 	.word	0x0800b990
 8007494:	0800b998 	.word	0x0800b998
 8007498:	0800b994 	.word	0x0800b994
 800749c:	0800b99c 	.word	0x0800b99c
 80074a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074a4:	429a      	cmp	r2, r3
 80074a6:	bfa8      	it	ge
 80074a8:	461a      	movge	r2, r3
 80074aa:	2a00      	cmp	r2, #0
 80074ac:	4691      	mov	r9, r2
 80074ae:	dc37      	bgt.n	8007520 <_printf_float+0x374>
 80074b0:	f04f 0b00 	mov.w	fp, #0
 80074b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074b8:	f104 021a 	add.w	r2, r4, #26
 80074bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074be:	9305      	str	r3, [sp, #20]
 80074c0:	eba3 0309 	sub.w	r3, r3, r9
 80074c4:	455b      	cmp	r3, fp
 80074c6:	dc33      	bgt.n	8007530 <_printf_float+0x384>
 80074c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074cc:	429a      	cmp	r2, r3
 80074ce:	db3b      	blt.n	8007548 <_printf_float+0x39c>
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	07da      	lsls	r2, r3, #31
 80074d4:	d438      	bmi.n	8007548 <_printf_float+0x39c>
 80074d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074d8:	9b05      	ldr	r3, [sp, #20]
 80074da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	eba2 0901 	sub.w	r9, r2, r1
 80074e2:	4599      	cmp	r9, r3
 80074e4:	bfa8      	it	ge
 80074e6:	4699      	movge	r9, r3
 80074e8:	f1b9 0f00 	cmp.w	r9, #0
 80074ec:	dc35      	bgt.n	800755a <_printf_float+0x3ae>
 80074ee:	f04f 0800 	mov.w	r8, #0
 80074f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074f6:	f104 0a1a 	add.w	sl, r4, #26
 80074fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074fe:	1a9b      	subs	r3, r3, r2
 8007500:	eba3 0309 	sub.w	r3, r3, r9
 8007504:	4543      	cmp	r3, r8
 8007506:	f77f af79 	ble.w	80073fc <_printf_float+0x250>
 800750a:	2301      	movs	r3, #1
 800750c:	4652      	mov	r2, sl
 800750e:	4631      	mov	r1, r6
 8007510:	4628      	mov	r0, r5
 8007512:	47b8      	blx	r7
 8007514:	3001      	adds	r0, #1
 8007516:	f43f aeaa 	beq.w	800726e <_printf_float+0xc2>
 800751a:	f108 0801 	add.w	r8, r8, #1
 800751e:	e7ec      	b.n	80074fa <_printf_float+0x34e>
 8007520:	4613      	mov	r3, r2
 8007522:	4631      	mov	r1, r6
 8007524:	4642      	mov	r2, r8
 8007526:	4628      	mov	r0, r5
 8007528:	47b8      	blx	r7
 800752a:	3001      	adds	r0, #1
 800752c:	d1c0      	bne.n	80074b0 <_printf_float+0x304>
 800752e:	e69e      	b.n	800726e <_printf_float+0xc2>
 8007530:	2301      	movs	r3, #1
 8007532:	4631      	mov	r1, r6
 8007534:	4628      	mov	r0, r5
 8007536:	9205      	str	r2, [sp, #20]
 8007538:	47b8      	blx	r7
 800753a:	3001      	adds	r0, #1
 800753c:	f43f ae97 	beq.w	800726e <_printf_float+0xc2>
 8007540:	9a05      	ldr	r2, [sp, #20]
 8007542:	f10b 0b01 	add.w	fp, fp, #1
 8007546:	e7b9      	b.n	80074bc <_printf_float+0x310>
 8007548:	ee18 3a10 	vmov	r3, s16
 800754c:	4652      	mov	r2, sl
 800754e:	4631      	mov	r1, r6
 8007550:	4628      	mov	r0, r5
 8007552:	47b8      	blx	r7
 8007554:	3001      	adds	r0, #1
 8007556:	d1be      	bne.n	80074d6 <_printf_float+0x32a>
 8007558:	e689      	b.n	800726e <_printf_float+0xc2>
 800755a:	9a05      	ldr	r2, [sp, #20]
 800755c:	464b      	mov	r3, r9
 800755e:	4442      	add	r2, r8
 8007560:	4631      	mov	r1, r6
 8007562:	4628      	mov	r0, r5
 8007564:	47b8      	blx	r7
 8007566:	3001      	adds	r0, #1
 8007568:	d1c1      	bne.n	80074ee <_printf_float+0x342>
 800756a:	e680      	b.n	800726e <_printf_float+0xc2>
 800756c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800756e:	2a01      	cmp	r2, #1
 8007570:	dc01      	bgt.n	8007576 <_printf_float+0x3ca>
 8007572:	07db      	lsls	r3, r3, #31
 8007574:	d538      	bpl.n	80075e8 <_printf_float+0x43c>
 8007576:	2301      	movs	r3, #1
 8007578:	4642      	mov	r2, r8
 800757a:	4631      	mov	r1, r6
 800757c:	4628      	mov	r0, r5
 800757e:	47b8      	blx	r7
 8007580:	3001      	adds	r0, #1
 8007582:	f43f ae74 	beq.w	800726e <_printf_float+0xc2>
 8007586:	ee18 3a10 	vmov	r3, s16
 800758a:	4652      	mov	r2, sl
 800758c:	4631      	mov	r1, r6
 800758e:	4628      	mov	r0, r5
 8007590:	47b8      	blx	r7
 8007592:	3001      	adds	r0, #1
 8007594:	f43f ae6b 	beq.w	800726e <_printf_float+0xc2>
 8007598:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800759c:	2200      	movs	r2, #0
 800759e:	2300      	movs	r3, #0
 80075a0:	f7f9 fa92 	bl	8000ac8 <__aeabi_dcmpeq>
 80075a4:	b9d8      	cbnz	r0, 80075de <_printf_float+0x432>
 80075a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075a8:	f108 0201 	add.w	r2, r8, #1
 80075ac:	3b01      	subs	r3, #1
 80075ae:	4631      	mov	r1, r6
 80075b0:	4628      	mov	r0, r5
 80075b2:	47b8      	blx	r7
 80075b4:	3001      	adds	r0, #1
 80075b6:	d10e      	bne.n	80075d6 <_printf_float+0x42a>
 80075b8:	e659      	b.n	800726e <_printf_float+0xc2>
 80075ba:	2301      	movs	r3, #1
 80075bc:	4652      	mov	r2, sl
 80075be:	4631      	mov	r1, r6
 80075c0:	4628      	mov	r0, r5
 80075c2:	47b8      	blx	r7
 80075c4:	3001      	adds	r0, #1
 80075c6:	f43f ae52 	beq.w	800726e <_printf_float+0xc2>
 80075ca:	f108 0801 	add.w	r8, r8, #1
 80075ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d0:	3b01      	subs	r3, #1
 80075d2:	4543      	cmp	r3, r8
 80075d4:	dcf1      	bgt.n	80075ba <_printf_float+0x40e>
 80075d6:	464b      	mov	r3, r9
 80075d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80075dc:	e6dc      	b.n	8007398 <_printf_float+0x1ec>
 80075de:	f04f 0800 	mov.w	r8, #0
 80075e2:	f104 0a1a 	add.w	sl, r4, #26
 80075e6:	e7f2      	b.n	80075ce <_printf_float+0x422>
 80075e8:	2301      	movs	r3, #1
 80075ea:	4642      	mov	r2, r8
 80075ec:	e7df      	b.n	80075ae <_printf_float+0x402>
 80075ee:	2301      	movs	r3, #1
 80075f0:	464a      	mov	r2, r9
 80075f2:	4631      	mov	r1, r6
 80075f4:	4628      	mov	r0, r5
 80075f6:	47b8      	blx	r7
 80075f8:	3001      	adds	r0, #1
 80075fa:	f43f ae38 	beq.w	800726e <_printf_float+0xc2>
 80075fe:	f108 0801 	add.w	r8, r8, #1
 8007602:	68e3      	ldr	r3, [r4, #12]
 8007604:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007606:	1a5b      	subs	r3, r3, r1
 8007608:	4543      	cmp	r3, r8
 800760a:	dcf0      	bgt.n	80075ee <_printf_float+0x442>
 800760c:	e6fa      	b.n	8007404 <_printf_float+0x258>
 800760e:	f04f 0800 	mov.w	r8, #0
 8007612:	f104 0919 	add.w	r9, r4, #25
 8007616:	e7f4      	b.n	8007602 <_printf_float+0x456>

08007618 <_printf_common>:
 8007618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800761c:	4616      	mov	r6, r2
 800761e:	4699      	mov	r9, r3
 8007620:	688a      	ldr	r2, [r1, #8]
 8007622:	690b      	ldr	r3, [r1, #16]
 8007624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007628:	4293      	cmp	r3, r2
 800762a:	bfb8      	it	lt
 800762c:	4613      	movlt	r3, r2
 800762e:	6033      	str	r3, [r6, #0]
 8007630:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007634:	4607      	mov	r7, r0
 8007636:	460c      	mov	r4, r1
 8007638:	b10a      	cbz	r2, 800763e <_printf_common+0x26>
 800763a:	3301      	adds	r3, #1
 800763c:	6033      	str	r3, [r6, #0]
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	0699      	lsls	r1, r3, #26
 8007642:	bf42      	ittt	mi
 8007644:	6833      	ldrmi	r3, [r6, #0]
 8007646:	3302      	addmi	r3, #2
 8007648:	6033      	strmi	r3, [r6, #0]
 800764a:	6825      	ldr	r5, [r4, #0]
 800764c:	f015 0506 	ands.w	r5, r5, #6
 8007650:	d106      	bne.n	8007660 <_printf_common+0x48>
 8007652:	f104 0a19 	add.w	sl, r4, #25
 8007656:	68e3      	ldr	r3, [r4, #12]
 8007658:	6832      	ldr	r2, [r6, #0]
 800765a:	1a9b      	subs	r3, r3, r2
 800765c:	42ab      	cmp	r3, r5
 800765e:	dc26      	bgt.n	80076ae <_printf_common+0x96>
 8007660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007664:	1e13      	subs	r3, r2, #0
 8007666:	6822      	ldr	r2, [r4, #0]
 8007668:	bf18      	it	ne
 800766a:	2301      	movne	r3, #1
 800766c:	0692      	lsls	r2, r2, #26
 800766e:	d42b      	bmi.n	80076c8 <_printf_common+0xb0>
 8007670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007674:	4649      	mov	r1, r9
 8007676:	4638      	mov	r0, r7
 8007678:	47c0      	blx	r8
 800767a:	3001      	adds	r0, #1
 800767c:	d01e      	beq.n	80076bc <_printf_common+0xa4>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	68e5      	ldr	r5, [r4, #12]
 8007682:	6832      	ldr	r2, [r6, #0]
 8007684:	f003 0306 	and.w	r3, r3, #6
 8007688:	2b04      	cmp	r3, #4
 800768a:	bf08      	it	eq
 800768c:	1aad      	subeq	r5, r5, r2
 800768e:	68a3      	ldr	r3, [r4, #8]
 8007690:	6922      	ldr	r2, [r4, #16]
 8007692:	bf0c      	ite	eq
 8007694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007698:	2500      	movne	r5, #0
 800769a:	4293      	cmp	r3, r2
 800769c:	bfc4      	itt	gt
 800769e:	1a9b      	subgt	r3, r3, r2
 80076a0:	18ed      	addgt	r5, r5, r3
 80076a2:	2600      	movs	r6, #0
 80076a4:	341a      	adds	r4, #26
 80076a6:	42b5      	cmp	r5, r6
 80076a8:	d11a      	bne.n	80076e0 <_printf_common+0xc8>
 80076aa:	2000      	movs	r0, #0
 80076ac:	e008      	b.n	80076c0 <_printf_common+0xa8>
 80076ae:	2301      	movs	r3, #1
 80076b0:	4652      	mov	r2, sl
 80076b2:	4649      	mov	r1, r9
 80076b4:	4638      	mov	r0, r7
 80076b6:	47c0      	blx	r8
 80076b8:	3001      	adds	r0, #1
 80076ba:	d103      	bne.n	80076c4 <_printf_common+0xac>
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c4:	3501      	adds	r5, #1
 80076c6:	e7c6      	b.n	8007656 <_printf_common+0x3e>
 80076c8:	18e1      	adds	r1, r4, r3
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	2030      	movs	r0, #48	; 0x30
 80076ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076d2:	4422      	add	r2, r4
 80076d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076dc:	3302      	adds	r3, #2
 80076de:	e7c7      	b.n	8007670 <_printf_common+0x58>
 80076e0:	2301      	movs	r3, #1
 80076e2:	4622      	mov	r2, r4
 80076e4:	4649      	mov	r1, r9
 80076e6:	4638      	mov	r0, r7
 80076e8:	47c0      	blx	r8
 80076ea:	3001      	adds	r0, #1
 80076ec:	d0e6      	beq.n	80076bc <_printf_common+0xa4>
 80076ee:	3601      	adds	r6, #1
 80076f0:	e7d9      	b.n	80076a6 <_printf_common+0x8e>
	...

080076f4 <_printf_i>:
 80076f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076f8:	460c      	mov	r4, r1
 80076fa:	4691      	mov	r9, r2
 80076fc:	7e27      	ldrb	r7, [r4, #24]
 80076fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007700:	2f78      	cmp	r7, #120	; 0x78
 8007702:	4680      	mov	r8, r0
 8007704:	469a      	mov	sl, r3
 8007706:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800770a:	d807      	bhi.n	800771c <_printf_i+0x28>
 800770c:	2f62      	cmp	r7, #98	; 0x62
 800770e:	d80a      	bhi.n	8007726 <_printf_i+0x32>
 8007710:	2f00      	cmp	r7, #0
 8007712:	f000 80d8 	beq.w	80078c6 <_printf_i+0x1d2>
 8007716:	2f58      	cmp	r7, #88	; 0x58
 8007718:	f000 80a3 	beq.w	8007862 <_printf_i+0x16e>
 800771c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007724:	e03a      	b.n	800779c <_printf_i+0xa8>
 8007726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800772a:	2b15      	cmp	r3, #21
 800772c:	d8f6      	bhi.n	800771c <_printf_i+0x28>
 800772e:	a001      	add	r0, pc, #4	; (adr r0, 8007734 <_printf_i+0x40>)
 8007730:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007734:	0800778d 	.word	0x0800778d
 8007738:	080077a1 	.word	0x080077a1
 800773c:	0800771d 	.word	0x0800771d
 8007740:	0800771d 	.word	0x0800771d
 8007744:	0800771d 	.word	0x0800771d
 8007748:	0800771d 	.word	0x0800771d
 800774c:	080077a1 	.word	0x080077a1
 8007750:	0800771d 	.word	0x0800771d
 8007754:	0800771d 	.word	0x0800771d
 8007758:	0800771d 	.word	0x0800771d
 800775c:	0800771d 	.word	0x0800771d
 8007760:	080078ad 	.word	0x080078ad
 8007764:	080077d1 	.word	0x080077d1
 8007768:	0800788f 	.word	0x0800788f
 800776c:	0800771d 	.word	0x0800771d
 8007770:	0800771d 	.word	0x0800771d
 8007774:	080078cf 	.word	0x080078cf
 8007778:	0800771d 	.word	0x0800771d
 800777c:	080077d1 	.word	0x080077d1
 8007780:	0800771d 	.word	0x0800771d
 8007784:	0800771d 	.word	0x0800771d
 8007788:	08007897 	.word	0x08007897
 800778c:	680b      	ldr	r3, [r1, #0]
 800778e:	1d1a      	adds	r2, r3, #4
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	600a      	str	r2, [r1, #0]
 8007794:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800779c:	2301      	movs	r3, #1
 800779e:	e0a3      	b.n	80078e8 <_printf_i+0x1f4>
 80077a0:	6825      	ldr	r5, [r4, #0]
 80077a2:	6808      	ldr	r0, [r1, #0]
 80077a4:	062e      	lsls	r6, r5, #24
 80077a6:	f100 0304 	add.w	r3, r0, #4
 80077aa:	d50a      	bpl.n	80077c2 <_printf_i+0xce>
 80077ac:	6805      	ldr	r5, [r0, #0]
 80077ae:	600b      	str	r3, [r1, #0]
 80077b0:	2d00      	cmp	r5, #0
 80077b2:	da03      	bge.n	80077bc <_printf_i+0xc8>
 80077b4:	232d      	movs	r3, #45	; 0x2d
 80077b6:	426d      	negs	r5, r5
 80077b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077bc:	485e      	ldr	r0, [pc, #376]	; (8007938 <_printf_i+0x244>)
 80077be:	230a      	movs	r3, #10
 80077c0:	e019      	b.n	80077f6 <_printf_i+0x102>
 80077c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80077c6:	6805      	ldr	r5, [r0, #0]
 80077c8:	600b      	str	r3, [r1, #0]
 80077ca:	bf18      	it	ne
 80077cc:	b22d      	sxthne	r5, r5
 80077ce:	e7ef      	b.n	80077b0 <_printf_i+0xbc>
 80077d0:	680b      	ldr	r3, [r1, #0]
 80077d2:	6825      	ldr	r5, [r4, #0]
 80077d4:	1d18      	adds	r0, r3, #4
 80077d6:	6008      	str	r0, [r1, #0]
 80077d8:	0628      	lsls	r0, r5, #24
 80077da:	d501      	bpl.n	80077e0 <_printf_i+0xec>
 80077dc:	681d      	ldr	r5, [r3, #0]
 80077de:	e002      	b.n	80077e6 <_printf_i+0xf2>
 80077e0:	0669      	lsls	r1, r5, #25
 80077e2:	d5fb      	bpl.n	80077dc <_printf_i+0xe8>
 80077e4:	881d      	ldrh	r5, [r3, #0]
 80077e6:	4854      	ldr	r0, [pc, #336]	; (8007938 <_printf_i+0x244>)
 80077e8:	2f6f      	cmp	r7, #111	; 0x6f
 80077ea:	bf0c      	ite	eq
 80077ec:	2308      	moveq	r3, #8
 80077ee:	230a      	movne	r3, #10
 80077f0:	2100      	movs	r1, #0
 80077f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077f6:	6866      	ldr	r6, [r4, #4]
 80077f8:	60a6      	str	r6, [r4, #8]
 80077fa:	2e00      	cmp	r6, #0
 80077fc:	bfa2      	ittt	ge
 80077fe:	6821      	ldrge	r1, [r4, #0]
 8007800:	f021 0104 	bicge.w	r1, r1, #4
 8007804:	6021      	strge	r1, [r4, #0]
 8007806:	b90d      	cbnz	r5, 800780c <_printf_i+0x118>
 8007808:	2e00      	cmp	r6, #0
 800780a:	d04d      	beq.n	80078a8 <_printf_i+0x1b4>
 800780c:	4616      	mov	r6, r2
 800780e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007812:	fb03 5711 	mls	r7, r3, r1, r5
 8007816:	5dc7      	ldrb	r7, [r0, r7]
 8007818:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800781c:	462f      	mov	r7, r5
 800781e:	42bb      	cmp	r3, r7
 8007820:	460d      	mov	r5, r1
 8007822:	d9f4      	bls.n	800780e <_printf_i+0x11a>
 8007824:	2b08      	cmp	r3, #8
 8007826:	d10b      	bne.n	8007840 <_printf_i+0x14c>
 8007828:	6823      	ldr	r3, [r4, #0]
 800782a:	07df      	lsls	r7, r3, #31
 800782c:	d508      	bpl.n	8007840 <_printf_i+0x14c>
 800782e:	6923      	ldr	r3, [r4, #16]
 8007830:	6861      	ldr	r1, [r4, #4]
 8007832:	4299      	cmp	r1, r3
 8007834:	bfde      	ittt	le
 8007836:	2330      	movle	r3, #48	; 0x30
 8007838:	f806 3c01 	strble.w	r3, [r6, #-1]
 800783c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007840:	1b92      	subs	r2, r2, r6
 8007842:	6122      	str	r2, [r4, #16]
 8007844:	f8cd a000 	str.w	sl, [sp]
 8007848:	464b      	mov	r3, r9
 800784a:	aa03      	add	r2, sp, #12
 800784c:	4621      	mov	r1, r4
 800784e:	4640      	mov	r0, r8
 8007850:	f7ff fee2 	bl	8007618 <_printf_common>
 8007854:	3001      	adds	r0, #1
 8007856:	d14c      	bne.n	80078f2 <_printf_i+0x1fe>
 8007858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800785c:	b004      	add	sp, #16
 800785e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007862:	4835      	ldr	r0, [pc, #212]	; (8007938 <_printf_i+0x244>)
 8007864:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	680e      	ldr	r6, [r1, #0]
 800786c:	061f      	lsls	r7, r3, #24
 800786e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007872:	600e      	str	r6, [r1, #0]
 8007874:	d514      	bpl.n	80078a0 <_printf_i+0x1ac>
 8007876:	07d9      	lsls	r1, r3, #31
 8007878:	bf44      	itt	mi
 800787a:	f043 0320 	orrmi.w	r3, r3, #32
 800787e:	6023      	strmi	r3, [r4, #0]
 8007880:	b91d      	cbnz	r5, 800788a <_printf_i+0x196>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	f023 0320 	bic.w	r3, r3, #32
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	2310      	movs	r3, #16
 800788c:	e7b0      	b.n	80077f0 <_printf_i+0xfc>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	f043 0320 	orr.w	r3, r3, #32
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	2378      	movs	r3, #120	; 0x78
 8007898:	4828      	ldr	r0, [pc, #160]	; (800793c <_printf_i+0x248>)
 800789a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800789e:	e7e3      	b.n	8007868 <_printf_i+0x174>
 80078a0:	065e      	lsls	r6, r3, #25
 80078a2:	bf48      	it	mi
 80078a4:	b2ad      	uxthmi	r5, r5
 80078a6:	e7e6      	b.n	8007876 <_printf_i+0x182>
 80078a8:	4616      	mov	r6, r2
 80078aa:	e7bb      	b.n	8007824 <_printf_i+0x130>
 80078ac:	680b      	ldr	r3, [r1, #0]
 80078ae:	6826      	ldr	r6, [r4, #0]
 80078b0:	6960      	ldr	r0, [r4, #20]
 80078b2:	1d1d      	adds	r5, r3, #4
 80078b4:	600d      	str	r5, [r1, #0]
 80078b6:	0635      	lsls	r5, r6, #24
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	d501      	bpl.n	80078c0 <_printf_i+0x1cc>
 80078bc:	6018      	str	r0, [r3, #0]
 80078be:	e002      	b.n	80078c6 <_printf_i+0x1d2>
 80078c0:	0671      	lsls	r1, r6, #25
 80078c2:	d5fb      	bpl.n	80078bc <_printf_i+0x1c8>
 80078c4:	8018      	strh	r0, [r3, #0]
 80078c6:	2300      	movs	r3, #0
 80078c8:	6123      	str	r3, [r4, #16]
 80078ca:	4616      	mov	r6, r2
 80078cc:	e7ba      	b.n	8007844 <_printf_i+0x150>
 80078ce:	680b      	ldr	r3, [r1, #0]
 80078d0:	1d1a      	adds	r2, r3, #4
 80078d2:	600a      	str	r2, [r1, #0]
 80078d4:	681e      	ldr	r6, [r3, #0]
 80078d6:	6862      	ldr	r2, [r4, #4]
 80078d8:	2100      	movs	r1, #0
 80078da:	4630      	mov	r0, r6
 80078dc:	f7f8 fc80 	bl	80001e0 <memchr>
 80078e0:	b108      	cbz	r0, 80078e6 <_printf_i+0x1f2>
 80078e2:	1b80      	subs	r0, r0, r6
 80078e4:	6060      	str	r0, [r4, #4]
 80078e6:	6863      	ldr	r3, [r4, #4]
 80078e8:	6123      	str	r3, [r4, #16]
 80078ea:	2300      	movs	r3, #0
 80078ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078f0:	e7a8      	b.n	8007844 <_printf_i+0x150>
 80078f2:	6923      	ldr	r3, [r4, #16]
 80078f4:	4632      	mov	r2, r6
 80078f6:	4649      	mov	r1, r9
 80078f8:	4640      	mov	r0, r8
 80078fa:	47d0      	blx	sl
 80078fc:	3001      	adds	r0, #1
 80078fe:	d0ab      	beq.n	8007858 <_printf_i+0x164>
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	079b      	lsls	r3, r3, #30
 8007904:	d413      	bmi.n	800792e <_printf_i+0x23a>
 8007906:	68e0      	ldr	r0, [r4, #12]
 8007908:	9b03      	ldr	r3, [sp, #12]
 800790a:	4298      	cmp	r0, r3
 800790c:	bfb8      	it	lt
 800790e:	4618      	movlt	r0, r3
 8007910:	e7a4      	b.n	800785c <_printf_i+0x168>
 8007912:	2301      	movs	r3, #1
 8007914:	4632      	mov	r2, r6
 8007916:	4649      	mov	r1, r9
 8007918:	4640      	mov	r0, r8
 800791a:	47d0      	blx	sl
 800791c:	3001      	adds	r0, #1
 800791e:	d09b      	beq.n	8007858 <_printf_i+0x164>
 8007920:	3501      	adds	r5, #1
 8007922:	68e3      	ldr	r3, [r4, #12]
 8007924:	9903      	ldr	r1, [sp, #12]
 8007926:	1a5b      	subs	r3, r3, r1
 8007928:	42ab      	cmp	r3, r5
 800792a:	dcf2      	bgt.n	8007912 <_printf_i+0x21e>
 800792c:	e7eb      	b.n	8007906 <_printf_i+0x212>
 800792e:	2500      	movs	r5, #0
 8007930:	f104 0619 	add.w	r6, r4, #25
 8007934:	e7f5      	b.n	8007922 <_printf_i+0x22e>
 8007936:	bf00      	nop
 8007938:	0800b99e 	.word	0x0800b99e
 800793c:	0800b9af 	.word	0x0800b9af

08007940 <_scanf_float>:
 8007940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007944:	b087      	sub	sp, #28
 8007946:	4617      	mov	r7, r2
 8007948:	9303      	str	r3, [sp, #12]
 800794a:	688b      	ldr	r3, [r1, #8]
 800794c:	1e5a      	subs	r2, r3, #1
 800794e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007952:	bf83      	ittte	hi
 8007954:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007958:	195b      	addhi	r3, r3, r5
 800795a:	9302      	strhi	r3, [sp, #8]
 800795c:	2300      	movls	r3, #0
 800795e:	bf86      	itte	hi
 8007960:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007964:	608b      	strhi	r3, [r1, #8]
 8007966:	9302      	strls	r3, [sp, #8]
 8007968:	680b      	ldr	r3, [r1, #0]
 800796a:	468b      	mov	fp, r1
 800796c:	2500      	movs	r5, #0
 800796e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007972:	f84b 3b1c 	str.w	r3, [fp], #28
 8007976:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800797a:	4680      	mov	r8, r0
 800797c:	460c      	mov	r4, r1
 800797e:	465e      	mov	r6, fp
 8007980:	46aa      	mov	sl, r5
 8007982:	46a9      	mov	r9, r5
 8007984:	9501      	str	r5, [sp, #4]
 8007986:	68a2      	ldr	r2, [r4, #8]
 8007988:	b152      	cbz	r2, 80079a0 <_scanf_float+0x60>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	2b4e      	cmp	r3, #78	; 0x4e
 8007990:	d864      	bhi.n	8007a5c <_scanf_float+0x11c>
 8007992:	2b40      	cmp	r3, #64	; 0x40
 8007994:	d83c      	bhi.n	8007a10 <_scanf_float+0xd0>
 8007996:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800799a:	b2c8      	uxtb	r0, r1
 800799c:	280e      	cmp	r0, #14
 800799e:	d93a      	bls.n	8007a16 <_scanf_float+0xd6>
 80079a0:	f1b9 0f00 	cmp.w	r9, #0
 80079a4:	d003      	beq.n	80079ae <_scanf_float+0x6e>
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80079b2:	f1ba 0f01 	cmp.w	sl, #1
 80079b6:	f200 8113 	bhi.w	8007be0 <_scanf_float+0x2a0>
 80079ba:	455e      	cmp	r6, fp
 80079bc:	f200 8105 	bhi.w	8007bca <_scanf_float+0x28a>
 80079c0:	2501      	movs	r5, #1
 80079c2:	4628      	mov	r0, r5
 80079c4:	b007      	add	sp, #28
 80079c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80079ce:	2a0d      	cmp	r2, #13
 80079d0:	d8e6      	bhi.n	80079a0 <_scanf_float+0x60>
 80079d2:	a101      	add	r1, pc, #4	; (adr r1, 80079d8 <_scanf_float+0x98>)
 80079d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80079d8:	08007b17 	.word	0x08007b17
 80079dc:	080079a1 	.word	0x080079a1
 80079e0:	080079a1 	.word	0x080079a1
 80079e4:	080079a1 	.word	0x080079a1
 80079e8:	08007b77 	.word	0x08007b77
 80079ec:	08007b4f 	.word	0x08007b4f
 80079f0:	080079a1 	.word	0x080079a1
 80079f4:	080079a1 	.word	0x080079a1
 80079f8:	08007b25 	.word	0x08007b25
 80079fc:	080079a1 	.word	0x080079a1
 8007a00:	080079a1 	.word	0x080079a1
 8007a04:	080079a1 	.word	0x080079a1
 8007a08:	080079a1 	.word	0x080079a1
 8007a0c:	08007add 	.word	0x08007add
 8007a10:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007a14:	e7db      	b.n	80079ce <_scanf_float+0x8e>
 8007a16:	290e      	cmp	r1, #14
 8007a18:	d8c2      	bhi.n	80079a0 <_scanf_float+0x60>
 8007a1a:	a001      	add	r0, pc, #4	; (adr r0, 8007a20 <_scanf_float+0xe0>)
 8007a1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007a20:	08007acf 	.word	0x08007acf
 8007a24:	080079a1 	.word	0x080079a1
 8007a28:	08007acf 	.word	0x08007acf
 8007a2c:	08007b63 	.word	0x08007b63
 8007a30:	080079a1 	.word	0x080079a1
 8007a34:	08007a7d 	.word	0x08007a7d
 8007a38:	08007ab9 	.word	0x08007ab9
 8007a3c:	08007ab9 	.word	0x08007ab9
 8007a40:	08007ab9 	.word	0x08007ab9
 8007a44:	08007ab9 	.word	0x08007ab9
 8007a48:	08007ab9 	.word	0x08007ab9
 8007a4c:	08007ab9 	.word	0x08007ab9
 8007a50:	08007ab9 	.word	0x08007ab9
 8007a54:	08007ab9 	.word	0x08007ab9
 8007a58:	08007ab9 	.word	0x08007ab9
 8007a5c:	2b6e      	cmp	r3, #110	; 0x6e
 8007a5e:	d809      	bhi.n	8007a74 <_scanf_float+0x134>
 8007a60:	2b60      	cmp	r3, #96	; 0x60
 8007a62:	d8b2      	bhi.n	80079ca <_scanf_float+0x8a>
 8007a64:	2b54      	cmp	r3, #84	; 0x54
 8007a66:	d077      	beq.n	8007b58 <_scanf_float+0x218>
 8007a68:	2b59      	cmp	r3, #89	; 0x59
 8007a6a:	d199      	bne.n	80079a0 <_scanf_float+0x60>
 8007a6c:	2d07      	cmp	r5, #7
 8007a6e:	d197      	bne.n	80079a0 <_scanf_float+0x60>
 8007a70:	2508      	movs	r5, #8
 8007a72:	e029      	b.n	8007ac8 <_scanf_float+0x188>
 8007a74:	2b74      	cmp	r3, #116	; 0x74
 8007a76:	d06f      	beq.n	8007b58 <_scanf_float+0x218>
 8007a78:	2b79      	cmp	r3, #121	; 0x79
 8007a7a:	e7f6      	b.n	8007a6a <_scanf_float+0x12a>
 8007a7c:	6821      	ldr	r1, [r4, #0]
 8007a7e:	05c8      	lsls	r0, r1, #23
 8007a80:	d51a      	bpl.n	8007ab8 <_scanf_float+0x178>
 8007a82:	9b02      	ldr	r3, [sp, #8]
 8007a84:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007a88:	6021      	str	r1, [r4, #0]
 8007a8a:	f109 0901 	add.w	r9, r9, #1
 8007a8e:	b11b      	cbz	r3, 8007a98 <_scanf_float+0x158>
 8007a90:	3b01      	subs	r3, #1
 8007a92:	3201      	adds	r2, #1
 8007a94:	9302      	str	r3, [sp, #8]
 8007a96:	60a2      	str	r2, [r4, #8]
 8007a98:	68a3      	ldr	r3, [r4, #8]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	60a3      	str	r3, [r4, #8]
 8007a9e:	6923      	ldr	r3, [r4, #16]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	6123      	str	r3, [r4, #16]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	607b      	str	r3, [r7, #4]
 8007aac:	f340 8084 	ble.w	8007bb8 <_scanf_float+0x278>
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	603b      	str	r3, [r7, #0]
 8007ab6:	e766      	b.n	8007986 <_scanf_float+0x46>
 8007ab8:	eb1a 0f05 	cmn.w	sl, r5
 8007abc:	f47f af70 	bne.w	80079a0 <_scanf_float+0x60>
 8007ac0:	6822      	ldr	r2, [r4, #0]
 8007ac2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007ac6:	6022      	str	r2, [r4, #0]
 8007ac8:	f806 3b01 	strb.w	r3, [r6], #1
 8007acc:	e7e4      	b.n	8007a98 <_scanf_float+0x158>
 8007ace:	6822      	ldr	r2, [r4, #0]
 8007ad0:	0610      	lsls	r0, r2, #24
 8007ad2:	f57f af65 	bpl.w	80079a0 <_scanf_float+0x60>
 8007ad6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ada:	e7f4      	b.n	8007ac6 <_scanf_float+0x186>
 8007adc:	f1ba 0f00 	cmp.w	sl, #0
 8007ae0:	d10e      	bne.n	8007b00 <_scanf_float+0x1c0>
 8007ae2:	f1b9 0f00 	cmp.w	r9, #0
 8007ae6:	d10e      	bne.n	8007b06 <_scanf_float+0x1c6>
 8007ae8:	6822      	ldr	r2, [r4, #0]
 8007aea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007aee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007af2:	d108      	bne.n	8007b06 <_scanf_float+0x1c6>
 8007af4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007af8:	6022      	str	r2, [r4, #0]
 8007afa:	f04f 0a01 	mov.w	sl, #1
 8007afe:	e7e3      	b.n	8007ac8 <_scanf_float+0x188>
 8007b00:	f1ba 0f02 	cmp.w	sl, #2
 8007b04:	d055      	beq.n	8007bb2 <_scanf_float+0x272>
 8007b06:	2d01      	cmp	r5, #1
 8007b08:	d002      	beq.n	8007b10 <_scanf_float+0x1d0>
 8007b0a:	2d04      	cmp	r5, #4
 8007b0c:	f47f af48 	bne.w	80079a0 <_scanf_float+0x60>
 8007b10:	3501      	adds	r5, #1
 8007b12:	b2ed      	uxtb	r5, r5
 8007b14:	e7d8      	b.n	8007ac8 <_scanf_float+0x188>
 8007b16:	f1ba 0f01 	cmp.w	sl, #1
 8007b1a:	f47f af41 	bne.w	80079a0 <_scanf_float+0x60>
 8007b1e:	f04f 0a02 	mov.w	sl, #2
 8007b22:	e7d1      	b.n	8007ac8 <_scanf_float+0x188>
 8007b24:	b97d      	cbnz	r5, 8007b46 <_scanf_float+0x206>
 8007b26:	f1b9 0f00 	cmp.w	r9, #0
 8007b2a:	f47f af3c 	bne.w	80079a6 <_scanf_float+0x66>
 8007b2e:	6822      	ldr	r2, [r4, #0]
 8007b30:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007b34:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007b38:	f47f af39 	bne.w	80079ae <_scanf_float+0x6e>
 8007b3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007b40:	6022      	str	r2, [r4, #0]
 8007b42:	2501      	movs	r5, #1
 8007b44:	e7c0      	b.n	8007ac8 <_scanf_float+0x188>
 8007b46:	2d03      	cmp	r5, #3
 8007b48:	d0e2      	beq.n	8007b10 <_scanf_float+0x1d0>
 8007b4a:	2d05      	cmp	r5, #5
 8007b4c:	e7de      	b.n	8007b0c <_scanf_float+0x1cc>
 8007b4e:	2d02      	cmp	r5, #2
 8007b50:	f47f af26 	bne.w	80079a0 <_scanf_float+0x60>
 8007b54:	2503      	movs	r5, #3
 8007b56:	e7b7      	b.n	8007ac8 <_scanf_float+0x188>
 8007b58:	2d06      	cmp	r5, #6
 8007b5a:	f47f af21 	bne.w	80079a0 <_scanf_float+0x60>
 8007b5e:	2507      	movs	r5, #7
 8007b60:	e7b2      	b.n	8007ac8 <_scanf_float+0x188>
 8007b62:	6822      	ldr	r2, [r4, #0]
 8007b64:	0591      	lsls	r1, r2, #22
 8007b66:	f57f af1b 	bpl.w	80079a0 <_scanf_float+0x60>
 8007b6a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007b6e:	6022      	str	r2, [r4, #0]
 8007b70:	f8cd 9004 	str.w	r9, [sp, #4]
 8007b74:	e7a8      	b.n	8007ac8 <_scanf_float+0x188>
 8007b76:	6822      	ldr	r2, [r4, #0]
 8007b78:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007b7c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007b80:	d006      	beq.n	8007b90 <_scanf_float+0x250>
 8007b82:	0550      	lsls	r0, r2, #21
 8007b84:	f57f af0c 	bpl.w	80079a0 <_scanf_float+0x60>
 8007b88:	f1b9 0f00 	cmp.w	r9, #0
 8007b8c:	f43f af0f 	beq.w	80079ae <_scanf_float+0x6e>
 8007b90:	0591      	lsls	r1, r2, #22
 8007b92:	bf58      	it	pl
 8007b94:	9901      	ldrpl	r1, [sp, #4]
 8007b96:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007b9a:	bf58      	it	pl
 8007b9c:	eba9 0101 	subpl.w	r1, r9, r1
 8007ba0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007ba4:	bf58      	it	pl
 8007ba6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007baa:	6022      	str	r2, [r4, #0]
 8007bac:	f04f 0900 	mov.w	r9, #0
 8007bb0:	e78a      	b.n	8007ac8 <_scanf_float+0x188>
 8007bb2:	f04f 0a03 	mov.w	sl, #3
 8007bb6:	e787      	b.n	8007ac8 <_scanf_float+0x188>
 8007bb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	4798      	blx	r3
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	f43f aedf 	beq.w	8007986 <_scanf_float+0x46>
 8007bc8:	e6ea      	b.n	80079a0 <_scanf_float+0x60>
 8007bca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007bce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007bd2:	463a      	mov	r2, r7
 8007bd4:	4640      	mov	r0, r8
 8007bd6:	4798      	blx	r3
 8007bd8:	6923      	ldr	r3, [r4, #16]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	6123      	str	r3, [r4, #16]
 8007bde:	e6ec      	b.n	80079ba <_scanf_float+0x7a>
 8007be0:	1e6b      	subs	r3, r5, #1
 8007be2:	2b06      	cmp	r3, #6
 8007be4:	d825      	bhi.n	8007c32 <_scanf_float+0x2f2>
 8007be6:	2d02      	cmp	r5, #2
 8007be8:	d836      	bhi.n	8007c58 <_scanf_float+0x318>
 8007bea:	455e      	cmp	r6, fp
 8007bec:	f67f aee8 	bls.w	80079c0 <_scanf_float+0x80>
 8007bf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007bf4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007bf8:	463a      	mov	r2, r7
 8007bfa:	4640      	mov	r0, r8
 8007bfc:	4798      	blx	r3
 8007bfe:	6923      	ldr	r3, [r4, #16]
 8007c00:	3b01      	subs	r3, #1
 8007c02:	6123      	str	r3, [r4, #16]
 8007c04:	e7f1      	b.n	8007bea <_scanf_float+0x2aa>
 8007c06:	9802      	ldr	r0, [sp, #8]
 8007c08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c0c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007c10:	9002      	str	r0, [sp, #8]
 8007c12:	463a      	mov	r2, r7
 8007c14:	4640      	mov	r0, r8
 8007c16:	4798      	blx	r3
 8007c18:	6923      	ldr	r3, [r4, #16]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	6123      	str	r3, [r4, #16]
 8007c1e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007c22:	fa5f fa8a 	uxtb.w	sl, sl
 8007c26:	f1ba 0f02 	cmp.w	sl, #2
 8007c2a:	d1ec      	bne.n	8007c06 <_scanf_float+0x2c6>
 8007c2c:	3d03      	subs	r5, #3
 8007c2e:	b2ed      	uxtb	r5, r5
 8007c30:	1b76      	subs	r6, r6, r5
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	05da      	lsls	r2, r3, #23
 8007c36:	d52f      	bpl.n	8007c98 <_scanf_float+0x358>
 8007c38:	055b      	lsls	r3, r3, #21
 8007c3a:	d510      	bpl.n	8007c5e <_scanf_float+0x31e>
 8007c3c:	455e      	cmp	r6, fp
 8007c3e:	f67f aebf 	bls.w	80079c0 <_scanf_float+0x80>
 8007c42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c4a:	463a      	mov	r2, r7
 8007c4c:	4640      	mov	r0, r8
 8007c4e:	4798      	blx	r3
 8007c50:	6923      	ldr	r3, [r4, #16]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	6123      	str	r3, [r4, #16]
 8007c56:	e7f1      	b.n	8007c3c <_scanf_float+0x2fc>
 8007c58:	46aa      	mov	sl, r5
 8007c5a:	9602      	str	r6, [sp, #8]
 8007c5c:	e7df      	b.n	8007c1e <_scanf_float+0x2de>
 8007c5e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007c62:	6923      	ldr	r3, [r4, #16]
 8007c64:	2965      	cmp	r1, #101	; 0x65
 8007c66:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007c6a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8007c6e:	6123      	str	r3, [r4, #16]
 8007c70:	d00c      	beq.n	8007c8c <_scanf_float+0x34c>
 8007c72:	2945      	cmp	r1, #69	; 0x45
 8007c74:	d00a      	beq.n	8007c8c <_scanf_float+0x34c>
 8007c76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c7a:	463a      	mov	r2, r7
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	4798      	blx	r3
 8007c80:	6923      	ldr	r3, [r4, #16]
 8007c82:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	1eb5      	subs	r5, r6, #2
 8007c8a:	6123      	str	r3, [r4, #16]
 8007c8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c90:	463a      	mov	r2, r7
 8007c92:	4640      	mov	r0, r8
 8007c94:	4798      	blx	r3
 8007c96:	462e      	mov	r6, r5
 8007c98:	6825      	ldr	r5, [r4, #0]
 8007c9a:	f015 0510 	ands.w	r5, r5, #16
 8007c9e:	d158      	bne.n	8007d52 <_scanf_float+0x412>
 8007ca0:	7035      	strb	r5, [r6, #0]
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cac:	d11c      	bne.n	8007ce8 <_scanf_float+0x3a8>
 8007cae:	9b01      	ldr	r3, [sp, #4]
 8007cb0:	454b      	cmp	r3, r9
 8007cb2:	eba3 0209 	sub.w	r2, r3, r9
 8007cb6:	d124      	bne.n	8007d02 <_scanf_float+0x3c2>
 8007cb8:	2200      	movs	r2, #0
 8007cba:	4659      	mov	r1, fp
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	f000 fe9d 	bl	80089fc <_strtod_r>
 8007cc2:	9b03      	ldr	r3, [sp, #12]
 8007cc4:	6821      	ldr	r1, [r4, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f011 0f02 	tst.w	r1, #2
 8007ccc:	ec57 6b10 	vmov	r6, r7, d0
 8007cd0:	f103 0204 	add.w	r2, r3, #4
 8007cd4:	d020      	beq.n	8007d18 <_scanf_float+0x3d8>
 8007cd6:	9903      	ldr	r1, [sp, #12]
 8007cd8:	600a      	str	r2, [r1, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	e9c3 6700 	strd	r6, r7, [r3]
 8007ce0:	68e3      	ldr	r3, [r4, #12]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	60e3      	str	r3, [r4, #12]
 8007ce6:	e66c      	b.n	80079c2 <_scanf_float+0x82>
 8007ce8:	9b04      	ldr	r3, [sp, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d0e4      	beq.n	8007cb8 <_scanf_float+0x378>
 8007cee:	9905      	ldr	r1, [sp, #20]
 8007cf0:	230a      	movs	r3, #10
 8007cf2:	462a      	mov	r2, r5
 8007cf4:	3101      	adds	r1, #1
 8007cf6:	4640      	mov	r0, r8
 8007cf8:	f000 ff0a 	bl	8008b10 <_strtol_r>
 8007cfc:	9b04      	ldr	r3, [sp, #16]
 8007cfe:	9e05      	ldr	r6, [sp, #20]
 8007d00:	1ac2      	subs	r2, r0, r3
 8007d02:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007d06:	429e      	cmp	r6, r3
 8007d08:	bf28      	it	cs
 8007d0a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007d0e:	4912      	ldr	r1, [pc, #72]	; (8007d58 <_scanf_float+0x418>)
 8007d10:	4630      	mov	r0, r6
 8007d12:	f000 f82b 	bl	8007d6c <siprintf>
 8007d16:	e7cf      	b.n	8007cb8 <_scanf_float+0x378>
 8007d18:	f011 0f04 	tst.w	r1, #4
 8007d1c:	9903      	ldr	r1, [sp, #12]
 8007d1e:	600a      	str	r2, [r1, #0]
 8007d20:	d1db      	bne.n	8007cda <_scanf_float+0x39a>
 8007d22:	f8d3 8000 	ldr.w	r8, [r3]
 8007d26:	ee10 2a10 	vmov	r2, s0
 8007d2a:	ee10 0a10 	vmov	r0, s0
 8007d2e:	463b      	mov	r3, r7
 8007d30:	4639      	mov	r1, r7
 8007d32:	f7f8 fefb 	bl	8000b2c <__aeabi_dcmpun>
 8007d36:	b128      	cbz	r0, 8007d44 <_scanf_float+0x404>
 8007d38:	4808      	ldr	r0, [pc, #32]	; (8007d5c <_scanf_float+0x41c>)
 8007d3a:	f000 f811 	bl	8007d60 <nanf>
 8007d3e:	ed88 0a00 	vstr	s0, [r8]
 8007d42:	e7cd      	b.n	8007ce0 <_scanf_float+0x3a0>
 8007d44:	4630      	mov	r0, r6
 8007d46:	4639      	mov	r1, r7
 8007d48:	f7f8 ff4e 	bl	8000be8 <__aeabi_d2f>
 8007d4c:	f8c8 0000 	str.w	r0, [r8]
 8007d50:	e7c6      	b.n	8007ce0 <_scanf_float+0x3a0>
 8007d52:	2500      	movs	r5, #0
 8007d54:	e635      	b.n	80079c2 <_scanf_float+0x82>
 8007d56:	bf00      	nop
 8007d58:	0800b9c0 	.word	0x0800b9c0
 8007d5c:	0800bdd8 	.word	0x0800bdd8

08007d60 <nanf>:
 8007d60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007d68 <nanf+0x8>
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	7fc00000 	.word	0x7fc00000

08007d6c <siprintf>:
 8007d6c:	b40e      	push	{r1, r2, r3}
 8007d6e:	b500      	push	{lr}
 8007d70:	b09c      	sub	sp, #112	; 0x70
 8007d72:	ab1d      	add	r3, sp, #116	; 0x74
 8007d74:	9002      	str	r0, [sp, #8]
 8007d76:	9006      	str	r0, [sp, #24]
 8007d78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d7c:	4809      	ldr	r0, [pc, #36]	; (8007da4 <siprintf+0x38>)
 8007d7e:	9107      	str	r1, [sp, #28]
 8007d80:	9104      	str	r1, [sp, #16]
 8007d82:	4909      	ldr	r1, [pc, #36]	; (8007da8 <siprintf+0x3c>)
 8007d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d88:	9105      	str	r1, [sp, #20]
 8007d8a:	6800      	ldr	r0, [r0, #0]
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	a902      	add	r1, sp, #8
 8007d90:	f002 fe98 	bl	800aac4 <_svfiprintf_r>
 8007d94:	9b02      	ldr	r3, [sp, #8]
 8007d96:	2200      	movs	r2, #0
 8007d98:	701a      	strb	r2, [r3, #0]
 8007d9a:	b01c      	add	sp, #112	; 0x70
 8007d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007da0:	b003      	add	sp, #12
 8007da2:	4770      	bx	lr
 8007da4:	20000010 	.word	0x20000010
 8007da8:	ffff0208 	.word	0xffff0208

08007dac <sulp>:
 8007dac:	b570      	push	{r4, r5, r6, lr}
 8007dae:	4604      	mov	r4, r0
 8007db0:	460d      	mov	r5, r1
 8007db2:	ec45 4b10 	vmov	d0, r4, r5
 8007db6:	4616      	mov	r6, r2
 8007db8:	f002 fc20 	bl	800a5fc <__ulp>
 8007dbc:	ec51 0b10 	vmov	r0, r1, d0
 8007dc0:	b17e      	cbz	r6, 8007de2 <sulp+0x36>
 8007dc2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007dc6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	dd09      	ble.n	8007de2 <sulp+0x36>
 8007dce:	051b      	lsls	r3, r3, #20
 8007dd0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007dd4:	2400      	movs	r4, #0
 8007dd6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007dda:	4622      	mov	r2, r4
 8007ddc:	462b      	mov	r3, r5
 8007dde:	f7f8 fc0b 	bl	80005f8 <__aeabi_dmul>
 8007de2:	bd70      	pop	{r4, r5, r6, pc}
 8007de4:	0000      	movs	r0, r0
	...

08007de8 <_strtod_l>:
 8007de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dec:	b0a3      	sub	sp, #140	; 0x8c
 8007dee:	461f      	mov	r7, r3
 8007df0:	2300      	movs	r3, #0
 8007df2:	931e      	str	r3, [sp, #120]	; 0x78
 8007df4:	4ba4      	ldr	r3, [pc, #656]	; (8008088 <_strtod_l+0x2a0>)
 8007df6:	9219      	str	r2, [sp, #100]	; 0x64
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	9307      	str	r3, [sp, #28]
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	4618      	mov	r0, r3
 8007e00:	4688      	mov	r8, r1
 8007e02:	f7f8 f9e5 	bl	80001d0 <strlen>
 8007e06:	f04f 0a00 	mov.w	sl, #0
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	f04f 0b00 	mov.w	fp, #0
 8007e10:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007e14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e16:	781a      	ldrb	r2, [r3, #0]
 8007e18:	2a2b      	cmp	r2, #43	; 0x2b
 8007e1a:	d04c      	beq.n	8007eb6 <_strtod_l+0xce>
 8007e1c:	d839      	bhi.n	8007e92 <_strtod_l+0xaa>
 8007e1e:	2a0d      	cmp	r2, #13
 8007e20:	d832      	bhi.n	8007e88 <_strtod_l+0xa0>
 8007e22:	2a08      	cmp	r2, #8
 8007e24:	d832      	bhi.n	8007e8c <_strtod_l+0xa4>
 8007e26:	2a00      	cmp	r2, #0
 8007e28:	d03c      	beq.n	8007ea4 <_strtod_l+0xbc>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	930e      	str	r3, [sp, #56]	; 0x38
 8007e2e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007e30:	7833      	ldrb	r3, [r6, #0]
 8007e32:	2b30      	cmp	r3, #48	; 0x30
 8007e34:	f040 80b4 	bne.w	8007fa0 <_strtod_l+0x1b8>
 8007e38:	7873      	ldrb	r3, [r6, #1]
 8007e3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e3e:	2b58      	cmp	r3, #88	; 0x58
 8007e40:	d16c      	bne.n	8007f1c <_strtod_l+0x134>
 8007e42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e44:	9301      	str	r3, [sp, #4]
 8007e46:	ab1e      	add	r3, sp, #120	; 0x78
 8007e48:	9702      	str	r7, [sp, #8]
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	4a8f      	ldr	r2, [pc, #572]	; (800808c <_strtod_l+0x2a4>)
 8007e4e:	ab1f      	add	r3, sp, #124	; 0x7c
 8007e50:	a91d      	add	r1, sp, #116	; 0x74
 8007e52:	4620      	mov	r0, r4
 8007e54:	f001 fd40 	bl	80098d8 <__gethex>
 8007e58:	f010 0707 	ands.w	r7, r0, #7
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	d005      	beq.n	8007e6c <_strtod_l+0x84>
 8007e60:	2f06      	cmp	r7, #6
 8007e62:	d12a      	bne.n	8007eba <_strtod_l+0xd2>
 8007e64:	3601      	adds	r6, #1
 8007e66:	2300      	movs	r3, #0
 8007e68:	961d      	str	r6, [sp, #116]	; 0x74
 8007e6a:	930e      	str	r3, [sp, #56]	; 0x38
 8007e6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f040 8596 	bne.w	80089a0 <_strtod_l+0xbb8>
 8007e74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e76:	b1db      	cbz	r3, 8007eb0 <_strtod_l+0xc8>
 8007e78:	4652      	mov	r2, sl
 8007e7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007e7e:	ec43 2b10 	vmov	d0, r2, r3
 8007e82:	b023      	add	sp, #140	; 0x8c
 8007e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e88:	2a20      	cmp	r2, #32
 8007e8a:	d1ce      	bne.n	8007e2a <_strtod_l+0x42>
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	931d      	str	r3, [sp, #116]	; 0x74
 8007e90:	e7c0      	b.n	8007e14 <_strtod_l+0x2c>
 8007e92:	2a2d      	cmp	r2, #45	; 0x2d
 8007e94:	d1c9      	bne.n	8007e2a <_strtod_l+0x42>
 8007e96:	2201      	movs	r2, #1
 8007e98:	920e      	str	r2, [sp, #56]	; 0x38
 8007e9a:	1c5a      	adds	r2, r3, #1
 8007e9c:	921d      	str	r2, [sp, #116]	; 0x74
 8007e9e:	785b      	ldrb	r3, [r3, #1]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1c4      	bne.n	8007e2e <_strtod_l+0x46>
 8007ea4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ea6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f040 8576 	bne.w	800899c <_strtod_l+0xbb4>
 8007eb0:	4652      	mov	r2, sl
 8007eb2:	465b      	mov	r3, fp
 8007eb4:	e7e3      	b.n	8007e7e <_strtod_l+0x96>
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	e7ee      	b.n	8007e98 <_strtod_l+0xb0>
 8007eba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007ebc:	b13a      	cbz	r2, 8007ece <_strtod_l+0xe6>
 8007ebe:	2135      	movs	r1, #53	; 0x35
 8007ec0:	a820      	add	r0, sp, #128	; 0x80
 8007ec2:	f002 fca6 	bl	800a812 <__copybits>
 8007ec6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f002 f86b 	bl	8009fa4 <_Bfree>
 8007ece:	3f01      	subs	r7, #1
 8007ed0:	2f05      	cmp	r7, #5
 8007ed2:	d807      	bhi.n	8007ee4 <_strtod_l+0xfc>
 8007ed4:	e8df f007 	tbb	[pc, r7]
 8007ed8:	1d180b0e 	.word	0x1d180b0e
 8007edc:	030e      	.short	0x030e
 8007ede:	f04f 0b00 	mov.w	fp, #0
 8007ee2:	46da      	mov	sl, fp
 8007ee4:	0728      	lsls	r0, r5, #28
 8007ee6:	d5c1      	bpl.n	8007e6c <_strtod_l+0x84>
 8007ee8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007eec:	e7be      	b.n	8007e6c <_strtod_l+0x84>
 8007eee:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007ef2:	e7f7      	b.n	8007ee4 <_strtod_l+0xfc>
 8007ef4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007ef8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007efa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007efe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007f02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007f06:	e7ed      	b.n	8007ee4 <_strtod_l+0xfc>
 8007f08:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008090 <_strtod_l+0x2a8>
 8007f0c:	f04f 0a00 	mov.w	sl, #0
 8007f10:	e7e8      	b.n	8007ee4 <_strtod_l+0xfc>
 8007f12:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007f16:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007f1a:	e7e3      	b.n	8007ee4 <_strtod_l+0xfc>
 8007f1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	921d      	str	r2, [sp, #116]	; 0x74
 8007f22:	785b      	ldrb	r3, [r3, #1]
 8007f24:	2b30      	cmp	r3, #48	; 0x30
 8007f26:	d0f9      	beq.n	8007f1c <_strtod_l+0x134>
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d09f      	beq.n	8007e6c <_strtod_l+0x84>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	f04f 0900 	mov.w	r9, #0
 8007f32:	9304      	str	r3, [sp, #16]
 8007f34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f36:	930a      	str	r3, [sp, #40]	; 0x28
 8007f38:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007f3c:	464f      	mov	r7, r9
 8007f3e:	220a      	movs	r2, #10
 8007f40:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007f42:	7806      	ldrb	r6, [r0, #0]
 8007f44:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007f48:	b2d9      	uxtb	r1, r3
 8007f4a:	2909      	cmp	r1, #9
 8007f4c:	d92a      	bls.n	8007fa4 <_strtod_l+0x1bc>
 8007f4e:	9907      	ldr	r1, [sp, #28]
 8007f50:	462a      	mov	r2, r5
 8007f52:	f002 fed1 	bl	800acf8 <strncmp>
 8007f56:	b398      	cbz	r0, 8007fc0 <_strtod_l+0x1d8>
 8007f58:	2000      	movs	r0, #0
 8007f5a:	4633      	mov	r3, r6
 8007f5c:	463d      	mov	r5, r7
 8007f5e:	9007      	str	r0, [sp, #28]
 8007f60:	4602      	mov	r2, r0
 8007f62:	2b65      	cmp	r3, #101	; 0x65
 8007f64:	d001      	beq.n	8007f6a <_strtod_l+0x182>
 8007f66:	2b45      	cmp	r3, #69	; 0x45
 8007f68:	d118      	bne.n	8007f9c <_strtod_l+0x1b4>
 8007f6a:	b91d      	cbnz	r5, 8007f74 <_strtod_l+0x18c>
 8007f6c:	9b04      	ldr	r3, [sp, #16]
 8007f6e:	4303      	orrs	r3, r0
 8007f70:	d098      	beq.n	8007ea4 <_strtod_l+0xbc>
 8007f72:	2500      	movs	r5, #0
 8007f74:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007f78:	f108 0301 	add.w	r3, r8, #1
 8007f7c:	931d      	str	r3, [sp, #116]	; 0x74
 8007f7e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007f82:	2b2b      	cmp	r3, #43	; 0x2b
 8007f84:	d075      	beq.n	8008072 <_strtod_l+0x28a>
 8007f86:	2b2d      	cmp	r3, #45	; 0x2d
 8007f88:	d07b      	beq.n	8008082 <_strtod_l+0x29a>
 8007f8a:	f04f 0c00 	mov.w	ip, #0
 8007f8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007f92:	2909      	cmp	r1, #9
 8007f94:	f240 8082 	bls.w	800809c <_strtod_l+0x2b4>
 8007f98:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007f9c:	2600      	movs	r6, #0
 8007f9e:	e09d      	b.n	80080dc <_strtod_l+0x2f4>
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	e7c4      	b.n	8007f2e <_strtod_l+0x146>
 8007fa4:	2f08      	cmp	r7, #8
 8007fa6:	bfd8      	it	le
 8007fa8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007faa:	f100 0001 	add.w	r0, r0, #1
 8007fae:	bfda      	itte	le
 8007fb0:	fb02 3301 	mlale	r3, r2, r1, r3
 8007fb4:	9309      	strle	r3, [sp, #36]	; 0x24
 8007fb6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007fba:	3701      	adds	r7, #1
 8007fbc:	901d      	str	r0, [sp, #116]	; 0x74
 8007fbe:	e7bf      	b.n	8007f40 <_strtod_l+0x158>
 8007fc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007fc2:	195a      	adds	r2, r3, r5
 8007fc4:	921d      	str	r2, [sp, #116]	; 0x74
 8007fc6:	5d5b      	ldrb	r3, [r3, r5]
 8007fc8:	2f00      	cmp	r7, #0
 8007fca:	d037      	beq.n	800803c <_strtod_l+0x254>
 8007fcc:	9007      	str	r0, [sp, #28]
 8007fce:	463d      	mov	r5, r7
 8007fd0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007fd4:	2a09      	cmp	r2, #9
 8007fd6:	d912      	bls.n	8007ffe <_strtod_l+0x216>
 8007fd8:	2201      	movs	r2, #1
 8007fda:	e7c2      	b.n	8007f62 <_strtod_l+0x17a>
 8007fdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	921d      	str	r2, [sp, #116]	; 0x74
 8007fe2:	785b      	ldrb	r3, [r3, #1]
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	2b30      	cmp	r3, #48	; 0x30
 8007fe8:	d0f8      	beq.n	8007fdc <_strtod_l+0x1f4>
 8007fea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007fee:	2a08      	cmp	r2, #8
 8007ff0:	f200 84db 	bhi.w	80089aa <_strtod_l+0xbc2>
 8007ff4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007ff6:	9007      	str	r0, [sp, #28]
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	920a      	str	r2, [sp, #40]	; 0x28
 8007ffc:	4605      	mov	r5, r0
 8007ffe:	3b30      	subs	r3, #48	; 0x30
 8008000:	f100 0201 	add.w	r2, r0, #1
 8008004:	d014      	beq.n	8008030 <_strtod_l+0x248>
 8008006:	9907      	ldr	r1, [sp, #28]
 8008008:	4411      	add	r1, r2
 800800a:	9107      	str	r1, [sp, #28]
 800800c:	462a      	mov	r2, r5
 800800e:	eb00 0e05 	add.w	lr, r0, r5
 8008012:	210a      	movs	r1, #10
 8008014:	4572      	cmp	r2, lr
 8008016:	d113      	bne.n	8008040 <_strtod_l+0x258>
 8008018:	182a      	adds	r2, r5, r0
 800801a:	2a08      	cmp	r2, #8
 800801c:	f105 0501 	add.w	r5, r5, #1
 8008020:	4405      	add	r5, r0
 8008022:	dc1c      	bgt.n	800805e <_strtod_l+0x276>
 8008024:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008026:	220a      	movs	r2, #10
 8008028:	fb02 3301 	mla	r3, r2, r1, r3
 800802c:	9309      	str	r3, [sp, #36]	; 0x24
 800802e:	2200      	movs	r2, #0
 8008030:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008032:	1c59      	adds	r1, r3, #1
 8008034:	911d      	str	r1, [sp, #116]	; 0x74
 8008036:	785b      	ldrb	r3, [r3, #1]
 8008038:	4610      	mov	r0, r2
 800803a:	e7c9      	b.n	8007fd0 <_strtod_l+0x1e8>
 800803c:	4638      	mov	r0, r7
 800803e:	e7d2      	b.n	8007fe6 <_strtod_l+0x1fe>
 8008040:	2a08      	cmp	r2, #8
 8008042:	dc04      	bgt.n	800804e <_strtod_l+0x266>
 8008044:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008046:	434e      	muls	r6, r1
 8008048:	9609      	str	r6, [sp, #36]	; 0x24
 800804a:	3201      	adds	r2, #1
 800804c:	e7e2      	b.n	8008014 <_strtod_l+0x22c>
 800804e:	f102 0c01 	add.w	ip, r2, #1
 8008052:	f1bc 0f10 	cmp.w	ip, #16
 8008056:	bfd8      	it	le
 8008058:	fb01 f909 	mulle.w	r9, r1, r9
 800805c:	e7f5      	b.n	800804a <_strtod_l+0x262>
 800805e:	2d10      	cmp	r5, #16
 8008060:	bfdc      	itt	le
 8008062:	220a      	movle	r2, #10
 8008064:	fb02 3909 	mlale	r9, r2, r9, r3
 8008068:	e7e1      	b.n	800802e <_strtod_l+0x246>
 800806a:	2300      	movs	r3, #0
 800806c:	9307      	str	r3, [sp, #28]
 800806e:	2201      	movs	r2, #1
 8008070:	e77c      	b.n	8007f6c <_strtod_l+0x184>
 8008072:	f04f 0c00 	mov.w	ip, #0
 8008076:	f108 0302 	add.w	r3, r8, #2
 800807a:	931d      	str	r3, [sp, #116]	; 0x74
 800807c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008080:	e785      	b.n	8007f8e <_strtod_l+0x1a6>
 8008082:	f04f 0c01 	mov.w	ip, #1
 8008086:	e7f6      	b.n	8008076 <_strtod_l+0x28e>
 8008088:	0800bc18 	.word	0x0800bc18
 800808c:	0800b9c8 	.word	0x0800b9c8
 8008090:	7ff00000 	.word	0x7ff00000
 8008094:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008096:	1c59      	adds	r1, r3, #1
 8008098:	911d      	str	r1, [sp, #116]	; 0x74
 800809a:	785b      	ldrb	r3, [r3, #1]
 800809c:	2b30      	cmp	r3, #48	; 0x30
 800809e:	d0f9      	beq.n	8008094 <_strtod_l+0x2ac>
 80080a0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80080a4:	2908      	cmp	r1, #8
 80080a6:	f63f af79 	bhi.w	8007f9c <_strtod_l+0x1b4>
 80080aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80080ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080b0:	9308      	str	r3, [sp, #32]
 80080b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080b4:	1c59      	adds	r1, r3, #1
 80080b6:	911d      	str	r1, [sp, #116]	; 0x74
 80080b8:	785b      	ldrb	r3, [r3, #1]
 80080ba:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80080be:	2e09      	cmp	r6, #9
 80080c0:	d937      	bls.n	8008132 <_strtod_l+0x34a>
 80080c2:	9e08      	ldr	r6, [sp, #32]
 80080c4:	1b89      	subs	r1, r1, r6
 80080c6:	2908      	cmp	r1, #8
 80080c8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80080cc:	dc02      	bgt.n	80080d4 <_strtod_l+0x2ec>
 80080ce:	4576      	cmp	r6, lr
 80080d0:	bfa8      	it	ge
 80080d2:	4676      	movge	r6, lr
 80080d4:	f1bc 0f00 	cmp.w	ip, #0
 80080d8:	d000      	beq.n	80080dc <_strtod_l+0x2f4>
 80080da:	4276      	negs	r6, r6
 80080dc:	2d00      	cmp	r5, #0
 80080de:	d14f      	bne.n	8008180 <_strtod_l+0x398>
 80080e0:	9904      	ldr	r1, [sp, #16]
 80080e2:	4301      	orrs	r1, r0
 80080e4:	f47f aec2 	bne.w	8007e6c <_strtod_l+0x84>
 80080e8:	2a00      	cmp	r2, #0
 80080ea:	f47f aedb 	bne.w	8007ea4 <_strtod_l+0xbc>
 80080ee:	2b69      	cmp	r3, #105	; 0x69
 80080f0:	d027      	beq.n	8008142 <_strtod_l+0x35a>
 80080f2:	dc24      	bgt.n	800813e <_strtod_l+0x356>
 80080f4:	2b49      	cmp	r3, #73	; 0x49
 80080f6:	d024      	beq.n	8008142 <_strtod_l+0x35a>
 80080f8:	2b4e      	cmp	r3, #78	; 0x4e
 80080fa:	f47f aed3 	bne.w	8007ea4 <_strtod_l+0xbc>
 80080fe:	499e      	ldr	r1, [pc, #632]	; (8008378 <_strtod_l+0x590>)
 8008100:	a81d      	add	r0, sp, #116	; 0x74
 8008102:	f001 fe41 	bl	8009d88 <__match>
 8008106:	2800      	cmp	r0, #0
 8008108:	f43f aecc 	beq.w	8007ea4 <_strtod_l+0xbc>
 800810c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	2b28      	cmp	r3, #40	; 0x28
 8008112:	d12d      	bne.n	8008170 <_strtod_l+0x388>
 8008114:	4999      	ldr	r1, [pc, #612]	; (800837c <_strtod_l+0x594>)
 8008116:	aa20      	add	r2, sp, #128	; 0x80
 8008118:	a81d      	add	r0, sp, #116	; 0x74
 800811a:	f001 fe49 	bl	8009db0 <__hexnan>
 800811e:	2805      	cmp	r0, #5
 8008120:	d126      	bne.n	8008170 <_strtod_l+0x388>
 8008122:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008124:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008128:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800812c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008130:	e69c      	b.n	8007e6c <_strtod_l+0x84>
 8008132:	210a      	movs	r1, #10
 8008134:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008138:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800813c:	e7b9      	b.n	80080b2 <_strtod_l+0x2ca>
 800813e:	2b6e      	cmp	r3, #110	; 0x6e
 8008140:	e7db      	b.n	80080fa <_strtod_l+0x312>
 8008142:	498f      	ldr	r1, [pc, #572]	; (8008380 <_strtod_l+0x598>)
 8008144:	a81d      	add	r0, sp, #116	; 0x74
 8008146:	f001 fe1f 	bl	8009d88 <__match>
 800814a:	2800      	cmp	r0, #0
 800814c:	f43f aeaa 	beq.w	8007ea4 <_strtod_l+0xbc>
 8008150:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008152:	498c      	ldr	r1, [pc, #560]	; (8008384 <_strtod_l+0x59c>)
 8008154:	3b01      	subs	r3, #1
 8008156:	a81d      	add	r0, sp, #116	; 0x74
 8008158:	931d      	str	r3, [sp, #116]	; 0x74
 800815a:	f001 fe15 	bl	8009d88 <__match>
 800815e:	b910      	cbnz	r0, 8008166 <_strtod_l+0x37e>
 8008160:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008162:	3301      	adds	r3, #1
 8008164:	931d      	str	r3, [sp, #116]	; 0x74
 8008166:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008394 <_strtod_l+0x5ac>
 800816a:	f04f 0a00 	mov.w	sl, #0
 800816e:	e67d      	b.n	8007e6c <_strtod_l+0x84>
 8008170:	4885      	ldr	r0, [pc, #532]	; (8008388 <_strtod_l+0x5a0>)
 8008172:	f002 fda9 	bl	800acc8 <nan>
 8008176:	ed8d 0b04 	vstr	d0, [sp, #16]
 800817a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800817e:	e675      	b.n	8007e6c <_strtod_l+0x84>
 8008180:	9b07      	ldr	r3, [sp, #28]
 8008182:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008184:	1af3      	subs	r3, r6, r3
 8008186:	2f00      	cmp	r7, #0
 8008188:	bf08      	it	eq
 800818a:	462f      	moveq	r7, r5
 800818c:	2d10      	cmp	r5, #16
 800818e:	9308      	str	r3, [sp, #32]
 8008190:	46a8      	mov	r8, r5
 8008192:	bfa8      	it	ge
 8008194:	f04f 0810 	movge.w	r8, #16
 8008198:	f7f8 f9b4 	bl	8000504 <__aeabi_ui2d>
 800819c:	2d09      	cmp	r5, #9
 800819e:	4682      	mov	sl, r0
 80081a0:	468b      	mov	fp, r1
 80081a2:	dd13      	ble.n	80081cc <_strtod_l+0x3e4>
 80081a4:	4b79      	ldr	r3, [pc, #484]	; (800838c <_strtod_l+0x5a4>)
 80081a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80081aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80081ae:	f7f8 fa23 	bl	80005f8 <__aeabi_dmul>
 80081b2:	4682      	mov	sl, r0
 80081b4:	4648      	mov	r0, r9
 80081b6:	468b      	mov	fp, r1
 80081b8:	f7f8 f9a4 	bl	8000504 <__aeabi_ui2d>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4650      	mov	r0, sl
 80081c2:	4659      	mov	r1, fp
 80081c4:	f7f8 f862 	bl	800028c <__adddf3>
 80081c8:	4682      	mov	sl, r0
 80081ca:	468b      	mov	fp, r1
 80081cc:	2d0f      	cmp	r5, #15
 80081ce:	dc38      	bgt.n	8008242 <_strtod_l+0x45a>
 80081d0:	9b08      	ldr	r3, [sp, #32]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f43f ae4a 	beq.w	8007e6c <_strtod_l+0x84>
 80081d8:	dd24      	ble.n	8008224 <_strtod_l+0x43c>
 80081da:	2b16      	cmp	r3, #22
 80081dc:	dc0b      	bgt.n	80081f6 <_strtod_l+0x40e>
 80081de:	4d6b      	ldr	r5, [pc, #428]	; (800838c <_strtod_l+0x5a4>)
 80081e0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80081e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80081e8:	4652      	mov	r2, sl
 80081ea:	465b      	mov	r3, fp
 80081ec:	f7f8 fa04 	bl	80005f8 <__aeabi_dmul>
 80081f0:	4682      	mov	sl, r0
 80081f2:	468b      	mov	fp, r1
 80081f4:	e63a      	b.n	8007e6c <_strtod_l+0x84>
 80081f6:	9a08      	ldr	r2, [sp, #32]
 80081f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80081fc:	4293      	cmp	r3, r2
 80081fe:	db20      	blt.n	8008242 <_strtod_l+0x45a>
 8008200:	4c62      	ldr	r4, [pc, #392]	; (800838c <_strtod_l+0x5a4>)
 8008202:	f1c5 050f 	rsb	r5, r5, #15
 8008206:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800820a:	4652      	mov	r2, sl
 800820c:	465b      	mov	r3, fp
 800820e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008212:	f7f8 f9f1 	bl	80005f8 <__aeabi_dmul>
 8008216:	9b08      	ldr	r3, [sp, #32]
 8008218:	1b5d      	subs	r5, r3, r5
 800821a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800821e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008222:	e7e3      	b.n	80081ec <_strtod_l+0x404>
 8008224:	9b08      	ldr	r3, [sp, #32]
 8008226:	3316      	adds	r3, #22
 8008228:	db0b      	blt.n	8008242 <_strtod_l+0x45a>
 800822a:	9b07      	ldr	r3, [sp, #28]
 800822c:	4a57      	ldr	r2, [pc, #348]	; (800838c <_strtod_l+0x5a4>)
 800822e:	1b9e      	subs	r6, r3, r6
 8008230:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008234:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008238:	4650      	mov	r0, sl
 800823a:	4659      	mov	r1, fp
 800823c:	f7f8 fb06 	bl	800084c <__aeabi_ddiv>
 8008240:	e7d6      	b.n	80081f0 <_strtod_l+0x408>
 8008242:	9b08      	ldr	r3, [sp, #32]
 8008244:	eba5 0808 	sub.w	r8, r5, r8
 8008248:	4498      	add	r8, r3
 800824a:	f1b8 0f00 	cmp.w	r8, #0
 800824e:	dd71      	ble.n	8008334 <_strtod_l+0x54c>
 8008250:	f018 030f 	ands.w	r3, r8, #15
 8008254:	d00a      	beq.n	800826c <_strtod_l+0x484>
 8008256:	494d      	ldr	r1, [pc, #308]	; (800838c <_strtod_l+0x5a4>)
 8008258:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800825c:	4652      	mov	r2, sl
 800825e:	465b      	mov	r3, fp
 8008260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008264:	f7f8 f9c8 	bl	80005f8 <__aeabi_dmul>
 8008268:	4682      	mov	sl, r0
 800826a:	468b      	mov	fp, r1
 800826c:	f038 080f 	bics.w	r8, r8, #15
 8008270:	d04d      	beq.n	800830e <_strtod_l+0x526>
 8008272:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008276:	dd22      	ble.n	80082be <_strtod_l+0x4d6>
 8008278:	2500      	movs	r5, #0
 800827a:	462e      	mov	r6, r5
 800827c:	9509      	str	r5, [sp, #36]	; 0x24
 800827e:	9507      	str	r5, [sp, #28]
 8008280:	2322      	movs	r3, #34	; 0x22
 8008282:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008394 <_strtod_l+0x5ac>
 8008286:	6023      	str	r3, [r4, #0]
 8008288:	f04f 0a00 	mov.w	sl, #0
 800828c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800828e:	2b00      	cmp	r3, #0
 8008290:	f43f adec 	beq.w	8007e6c <_strtod_l+0x84>
 8008294:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008296:	4620      	mov	r0, r4
 8008298:	f001 fe84 	bl	8009fa4 <_Bfree>
 800829c:	9907      	ldr	r1, [sp, #28]
 800829e:	4620      	mov	r0, r4
 80082a0:	f001 fe80 	bl	8009fa4 <_Bfree>
 80082a4:	4631      	mov	r1, r6
 80082a6:	4620      	mov	r0, r4
 80082a8:	f001 fe7c 	bl	8009fa4 <_Bfree>
 80082ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082ae:	4620      	mov	r0, r4
 80082b0:	f001 fe78 	bl	8009fa4 <_Bfree>
 80082b4:	4629      	mov	r1, r5
 80082b6:	4620      	mov	r0, r4
 80082b8:	f001 fe74 	bl	8009fa4 <_Bfree>
 80082bc:	e5d6      	b.n	8007e6c <_strtod_l+0x84>
 80082be:	2300      	movs	r3, #0
 80082c0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80082c4:	4650      	mov	r0, sl
 80082c6:	4659      	mov	r1, fp
 80082c8:	4699      	mov	r9, r3
 80082ca:	f1b8 0f01 	cmp.w	r8, #1
 80082ce:	dc21      	bgt.n	8008314 <_strtod_l+0x52c>
 80082d0:	b10b      	cbz	r3, 80082d6 <_strtod_l+0x4ee>
 80082d2:	4682      	mov	sl, r0
 80082d4:	468b      	mov	fp, r1
 80082d6:	4b2e      	ldr	r3, [pc, #184]	; (8008390 <_strtod_l+0x5a8>)
 80082d8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80082dc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80082e0:	4652      	mov	r2, sl
 80082e2:	465b      	mov	r3, fp
 80082e4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80082e8:	f7f8 f986 	bl	80005f8 <__aeabi_dmul>
 80082ec:	4b29      	ldr	r3, [pc, #164]	; (8008394 <_strtod_l+0x5ac>)
 80082ee:	460a      	mov	r2, r1
 80082f0:	400b      	ands	r3, r1
 80082f2:	4929      	ldr	r1, [pc, #164]	; (8008398 <_strtod_l+0x5b0>)
 80082f4:	428b      	cmp	r3, r1
 80082f6:	4682      	mov	sl, r0
 80082f8:	d8be      	bhi.n	8008278 <_strtod_l+0x490>
 80082fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80082fe:	428b      	cmp	r3, r1
 8008300:	bf86      	itte	hi
 8008302:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800839c <_strtod_l+0x5b4>
 8008306:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800830a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800830e:	2300      	movs	r3, #0
 8008310:	9304      	str	r3, [sp, #16]
 8008312:	e081      	b.n	8008418 <_strtod_l+0x630>
 8008314:	f018 0f01 	tst.w	r8, #1
 8008318:	d007      	beq.n	800832a <_strtod_l+0x542>
 800831a:	4b1d      	ldr	r3, [pc, #116]	; (8008390 <_strtod_l+0x5a8>)
 800831c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	f7f8 f968 	bl	80005f8 <__aeabi_dmul>
 8008328:	2301      	movs	r3, #1
 800832a:	f109 0901 	add.w	r9, r9, #1
 800832e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008332:	e7ca      	b.n	80082ca <_strtod_l+0x4e2>
 8008334:	d0eb      	beq.n	800830e <_strtod_l+0x526>
 8008336:	f1c8 0800 	rsb	r8, r8, #0
 800833a:	f018 020f 	ands.w	r2, r8, #15
 800833e:	d00a      	beq.n	8008356 <_strtod_l+0x56e>
 8008340:	4b12      	ldr	r3, [pc, #72]	; (800838c <_strtod_l+0x5a4>)
 8008342:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008346:	4650      	mov	r0, sl
 8008348:	4659      	mov	r1, fp
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	f7f8 fa7d 	bl	800084c <__aeabi_ddiv>
 8008352:	4682      	mov	sl, r0
 8008354:	468b      	mov	fp, r1
 8008356:	ea5f 1828 	movs.w	r8, r8, asr #4
 800835a:	d0d8      	beq.n	800830e <_strtod_l+0x526>
 800835c:	f1b8 0f1f 	cmp.w	r8, #31
 8008360:	dd1e      	ble.n	80083a0 <_strtod_l+0x5b8>
 8008362:	2500      	movs	r5, #0
 8008364:	462e      	mov	r6, r5
 8008366:	9509      	str	r5, [sp, #36]	; 0x24
 8008368:	9507      	str	r5, [sp, #28]
 800836a:	2322      	movs	r3, #34	; 0x22
 800836c:	f04f 0a00 	mov.w	sl, #0
 8008370:	f04f 0b00 	mov.w	fp, #0
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	e789      	b.n	800828c <_strtod_l+0x4a4>
 8008378:	0800b999 	.word	0x0800b999
 800837c:	0800b9dc 	.word	0x0800b9dc
 8008380:	0800b991 	.word	0x0800b991
 8008384:	0800bb1c 	.word	0x0800bb1c
 8008388:	0800bdd8 	.word	0x0800bdd8
 800838c:	0800bcb8 	.word	0x0800bcb8
 8008390:	0800bc90 	.word	0x0800bc90
 8008394:	7ff00000 	.word	0x7ff00000
 8008398:	7ca00000 	.word	0x7ca00000
 800839c:	7fefffff 	.word	0x7fefffff
 80083a0:	f018 0310 	ands.w	r3, r8, #16
 80083a4:	bf18      	it	ne
 80083a6:	236a      	movne	r3, #106	; 0x6a
 80083a8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008760 <_strtod_l+0x978>
 80083ac:	9304      	str	r3, [sp, #16]
 80083ae:	4650      	mov	r0, sl
 80083b0:	4659      	mov	r1, fp
 80083b2:	2300      	movs	r3, #0
 80083b4:	f018 0f01 	tst.w	r8, #1
 80083b8:	d004      	beq.n	80083c4 <_strtod_l+0x5dc>
 80083ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 80083be:	f7f8 f91b 	bl	80005f8 <__aeabi_dmul>
 80083c2:	2301      	movs	r3, #1
 80083c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80083c8:	f109 0908 	add.w	r9, r9, #8
 80083cc:	d1f2      	bne.n	80083b4 <_strtod_l+0x5cc>
 80083ce:	b10b      	cbz	r3, 80083d4 <_strtod_l+0x5ec>
 80083d0:	4682      	mov	sl, r0
 80083d2:	468b      	mov	fp, r1
 80083d4:	9b04      	ldr	r3, [sp, #16]
 80083d6:	b1bb      	cbz	r3, 8008408 <_strtod_l+0x620>
 80083d8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80083dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	4659      	mov	r1, fp
 80083e4:	dd10      	ble.n	8008408 <_strtod_l+0x620>
 80083e6:	2b1f      	cmp	r3, #31
 80083e8:	f340 8128 	ble.w	800863c <_strtod_l+0x854>
 80083ec:	2b34      	cmp	r3, #52	; 0x34
 80083ee:	bfde      	ittt	le
 80083f0:	3b20      	suble	r3, #32
 80083f2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80083f6:	fa02 f303 	lslle.w	r3, r2, r3
 80083fa:	f04f 0a00 	mov.w	sl, #0
 80083fe:	bfcc      	ite	gt
 8008400:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008404:	ea03 0b01 	andle.w	fp, r3, r1
 8008408:	2200      	movs	r2, #0
 800840a:	2300      	movs	r3, #0
 800840c:	4650      	mov	r0, sl
 800840e:	4659      	mov	r1, fp
 8008410:	f7f8 fb5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008414:	2800      	cmp	r0, #0
 8008416:	d1a4      	bne.n	8008362 <_strtod_l+0x57a>
 8008418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800841e:	462b      	mov	r3, r5
 8008420:	463a      	mov	r2, r7
 8008422:	4620      	mov	r0, r4
 8008424:	f001 fe2a 	bl	800a07c <__s2b>
 8008428:	9009      	str	r0, [sp, #36]	; 0x24
 800842a:	2800      	cmp	r0, #0
 800842c:	f43f af24 	beq.w	8008278 <_strtod_l+0x490>
 8008430:	9b07      	ldr	r3, [sp, #28]
 8008432:	1b9e      	subs	r6, r3, r6
 8008434:	9b08      	ldr	r3, [sp, #32]
 8008436:	2b00      	cmp	r3, #0
 8008438:	bfb4      	ite	lt
 800843a:	4633      	movlt	r3, r6
 800843c:	2300      	movge	r3, #0
 800843e:	9310      	str	r3, [sp, #64]	; 0x40
 8008440:	9b08      	ldr	r3, [sp, #32]
 8008442:	2500      	movs	r5, #0
 8008444:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008448:	9318      	str	r3, [sp, #96]	; 0x60
 800844a:	462e      	mov	r6, r5
 800844c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800844e:	4620      	mov	r0, r4
 8008450:	6859      	ldr	r1, [r3, #4]
 8008452:	f001 fd67 	bl	8009f24 <_Balloc>
 8008456:	9007      	str	r0, [sp, #28]
 8008458:	2800      	cmp	r0, #0
 800845a:	f43f af11 	beq.w	8008280 <_strtod_l+0x498>
 800845e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008460:	691a      	ldr	r2, [r3, #16]
 8008462:	3202      	adds	r2, #2
 8008464:	f103 010c 	add.w	r1, r3, #12
 8008468:	0092      	lsls	r2, r2, #2
 800846a:	300c      	adds	r0, #12
 800846c:	f7fe fde8 	bl	8007040 <memcpy>
 8008470:	ec4b ab10 	vmov	d0, sl, fp
 8008474:	aa20      	add	r2, sp, #128	; 0x80
 8008476:	a91f      	add	r1, sp, #124	; 0x7c
 8008478:	4620      	mov	r0, r4
 800847a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800847e:	f002 f939 	bl	800a6f4 <__d2b>
 8008482:	901e      	str	r0, [sp, #120]	; 0x78
 8008484:	2800      	cmp	r0, #0
 8008486:	f43f aefb 	beq.w	8008280 <_strtod_l+0x498>
 800848a:	2101      	movs	r1, #1
 800848c:	4620      	mov	r0, r4
 800848e:	f001 fe8f 	bl	800a1b0 <__i2b>
 8008492:	4606      	mov	r6, r0
 8008494:	2800      	cmp	r0, #0
 8008496:	f43f aef3 	beq.w	8008280 <_strtod_l+0x498>
 800849a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800849c:	9904      	ldr	r1, [sp, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	bfab      	itete	ge
 80084a2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80084a4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80084a6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80084a8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80084ac:	bfac      	ite	ge
 80084ae:	eb03 0902 	addge.w	r9, r3, r2
 80084b2:	1ad7      	sublt	r7, r2, r3
 80084b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80084b6:	eba3 0801 	sub.w	r8, r3, r1
 80084ba:	4490      	add	r8, r2
 80084bc:	4ba3      	ldr	r3, [pc, #652]	; (800874c <_strtod_l+0x964>)
 80084be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80084c2:	4598      	cmp	r8, r3
 80084c4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80084c8:	f280 80cc 	bge.w	8008664 <_strtod_l+0x87c>
 80084cc:	eba3 0308 	sub.w	r3, r3, r8
 80084d0:	2b1f      	cmp	r3, #31
 80084d2:	eba2 0203 	sub.w	r2, r2, r3
 80084d6:	f04f 0101 	mov.w	r1, #1
 80084da:	f300 80b6 	bgt.w	800864a <_strtod_l+0x862>
 80084de:	fa01 f303 	lsl.w	r3, r1, r3
 80084e2:	9311      	str	r3, [sp, #68]	; 0x44
 80084e4:	2300      	movs	r3, #0
 80084e6:	930c      	str	r3, [sp, #48]	; 0x30
 80084e8:	eb09 0802 	add.w	r8, r9, r2
 80084ec:	9b04      	ldr	r3, [sp, #16]
 80084ee:	45c1      	cmp	r9, r8
 80084f0:	4417      	add	r7, r2
 80084f2:	441f      	add	r7, r3
 80084f4:	464b      	mov	r3, r9
 80084f6:	bfa8      	it	ge
 80084f8:	4643      	movge	r3, r8
 80084fa:	42bb      	cmp	r3, r7
 80084fc:	bfa8      	it	ge
 80084fe:	463b      	movge	r3, r7
 8008500:	2b00      	cmp	r3, #0
 8008502:	bfc2      	ittt	gt
 8008504:	eba8 0803 	subgt.w	r8, r8, r3
 8008508:	1aff      	subgt	r7, r7, r3
 800850a:	eba9 0903 	subgt.w	r9, r9, r3
 800850e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008510:	2b00      	cmp	r3, #0
 8008512:	dd17      	ble.n	8008544 <_strtod_l+0x75c>
 8008514:	4631      	mov	r1, r6
 8008516:	461a      	mov	r2, r3
 8008518:	4620      	mov	r0, r4
 800851a:	f001 ff05 	bl	800a328 <__pow5mult>
 800851e:	4606      	mov	r6, r0
 8008520:	2800      	cmp	r0, #0
 8008522:	f43f aead 	beq.w	8008280 <_strtod_l+0x498>
 8008526:	4601      	mov	r1, r0
 8008528:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800852a:	4620      	mov	r0, r4
 800852c:	f001 fe56 	bl	800a1dc <__multiply>
 8008530:	900f      	str	r0, [sp, #60]	; 0x3c
 8008532:	2800      	cmp	r0, #0
 8008534:	f43f aea4 	beq.w	8008280 <_strtod_l+0x498>
 8008538:	991e      	ldr	r1, [sp, #120]	; 0x78
 800853a:	4620      	mov	r0, r4
 800853c:	f001 fd32 	bl	8009fa4 <_Bfree>
 8008540:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008542:	931e      	str	r3, [sp, #120]	; 0x78
 8008544:	f1b8 0f00 	cmp.w	r8, #0
 8008548:	f300 8091 	bgt.w	800866e <_strtod_l+0x886>
 800854c:	9b08      	ldr	r3, [sp, #32]
 800854e:	2b00      	cmp	r3, #0
 8008550:	dd08      	ble.n	8008564 <_strtod_l+0x77c>
 8008552:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008554:	9907      	ldr	r1, [sp, #28]
 8008556:	4620      	mov	r0, r4
 8008558:	f001 fee6 	bl	800a328 <__pow5mult>
 800855c:	9007      	str	r0, [sp, #28]
 800855e:	2800      	cmp	r0, #0
 8008560:	f43f ae8e 	beq.w	8008280 <_strtod_l+0x498>
 8008564:	2f00      	cmp	r7, #0
 8008566:	dd08      	ble.n	800857a <_strtod_l+0x792>
 8008568:	9907      	ldr	r1, [sp, #28]
 800856a:	463a      	mov	r2, r7
 800856c:	4620      	mov	r0, r4
 800856e:	f001 ff35 	bl	800a3dc <__lshift>
 8008572:	9007      	str	r0, [sp, #28]
 8008574:	2800      	cmp	r0, #0
 8008576:	f43f ae83 	beq.w	8008280 <_strtod_l+0x498>
 800857a:	f1b9 0f00 	cmp.w	r9, #0
 800857e:	dd08      	ble.n	8008592 <_strtod_l+0x7aa>
 8008580:	4631      	mov	r1, r6
 8008582:	464a      	mov	r2, r9
 8008584:	4620      	mov	r0, r4
 8008586:	f001 ff29 	bl	800a3dc <__lshift>
 800858a:	4606      	mov	r6, r0
 800858c:	2800      	cmp	r0, #0
 800858e:	f43f ae77 	beq.w	8008280 <_strtod_l+0x498>
 8008592:	9a07      	ldr	r2, [sp, #28]
 8008594:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008596:	4620      	mov	r0, r4
 8008598:	f001 ffa8 	bl	800a4ec <__mdiff>
 800859c:	4605      	mov	r5, r0
 800859e:	2800      	cmp	r0, #0
 80085a0:	f43f ae6e 	beq.w	8008280 <_strtod_l+0x498>
 80085a4:	68c3      	ldr	r3, [r0, #12]
 80085a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80085a8:	2300      	movs	r3, #0
 80085aa:	60c3      	str	r3, [r0, #12]
 80085ac:	4631      	mov	r1, r6
 80085ae:	f001 ff81 	bl	800a4b4 <__mcmp>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	da65      	bge.n	8008682 <_strtod_l+0x89a>
 80085b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085b8:	ea53 030a 	orrs.w	r3, r3, sl
 80085bc:	f040 8087 	bne.w	80086ce <_strtod_l+0x8e6>
 80085c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f040 8082 	bne.w	80086ce <_strtod_l+0x8e6>
 80085ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80085ce:	0d1b      	lsrs	r3, r3, #20
 80085d0:	051b      	lsls	r3, r3, #20
 80085d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80085d6:	d97a      	bls.n	80086ce <_strtod_l+0x8e6>
 80085d8:	696b      	ldr	r3, [r5, #20]
 80085da:	b913      	cbnz	r3, 80085e2 <_strtod_l+0x7fa>
 80085dc:	692b      	ldr	r3, [r5, #16]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	dd75      	ble.n	80086ce <_strtod_l+0x8e6>
 80085e2:	4629      	mov	r1, r5
 80085e4:	2201      	movs	r2, #1
 80085e6:	4620      	mov	r0, r4
 80085e8:	f001 fef8 	bl	800a3dc <__lshift>
 80085ec:	4631      	mov	r1, r6
 80085ee:	4605      	mov	r5, r0
 80085f0:	f001 ff60 	bl	800a4b4 <__mcmp>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	dd6a      	ble.n	80086ce <_strtod_l+0x8e6>
 80085f8:	9904      	ldr	r1, [sp, #16]
 80085fa:	4a55      	ldr	r2, [pc, #340]	; (8008750 <_strtod_l+0x968>)
 80085fc:	465b      	mov	r3, fp
 80085fe:	2900      	cmp	r1, #0
 8008600:	f000 8085 	beq.w	800870e <_strtod_l+0x926>
 8008604:	ea02 010b 	and.w	r1, r2, fp
 8008608:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800860c:	dc7f      	bgt.n	800870e <_strtod_l+0x926>
 800860e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008612:	f77f aeaa 	ble.w	800836a <_strtod_l+0x582>
 8008616:	4a4f      	ldr	r2, [pc, #316]	; (8008754 <_strtod_l+0x96c>)
 8008618:	2300      	movs	r3, #0
 800861a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800861e:	4650      	mov	r0, sl
 8008620:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008624:	4659      	mov	r1, fp
 8008626:	f7f7 ffe7 	bl	80005f8 <__aeabi_dmul>
 800862a:	460b      	mov	r3, r1
 800862c:	4303      	orrs	r3, r0
 800862e:	bf08      	it	eq
 8008630:	2322      	moveq	r3, #34	; 0x22
 8008632:	4682      	mov	sl, r0
 8008634:	468b      	mov	fp, r1
 8008636:	bf08      	it	eq
 8008638:	6023      	streq	r3, [r4, #0]
 800863a:	e62b      	b.n	8008294 <_strtod_l+0x4ac>
 800863c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008640:	fa02 f303 	lsl.w	r3, r2, r3
 8008644:	ea03 0a0a 	and.w	sl, r3, sl
 8008648:	e6de      	b.n	8008408 <_strtod_l+0x620>
 800864a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800864e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008652:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008656:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800865a:	fa01 f308 	lsl.w	r3, r1, r8
 800865e:	930c      	str	r3, [sp, #48]	; 0x30
 8008660:	9111      	str	r1, [sp, #68]	; 0x44
 8008662:	e741      	b.n	80084e8 <_strtod_l+0x700>
 8008664:	2300      	movs	r3, #0
 8008666:	930c      	str	r3, [sp, #48]	; 0x30
 8008668:	2301      	movs	r3, #1
 800866a:	9311      	str	r3, [sp, #68]	; 0x44
 800866c:	e73c      	b.n	80084e8 <_strtod_l+0x700>
 800866e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008670:	4642      	mov	r2, r8
 8008672:	4620      	mov	r0, r4
 8008674:	f001 feb2 	bl	800a3dc <__lshift>
 8008678:	901e      	str	r0, [sp, #120]	; 0x78
 800867a:	2800      	cmp	r0, #0
 800867c:	f47f af66 	bne.w	800854c <_strtod_l+0x764>
 8008680:	e5fe      	b.n	8008280 <_strtod_l+0x498>
 8008682:	465f      	mov	r7, fp
 8008684:	d16e      	bne.n	8008764 <_strtod_l+0x97c>
 8008686:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008688:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800868c:	b342      	cbz	r2, 80086e0 <_strtod_l+0x8f8>
 800868e:	4a32      	ldr	r2, [pc, #200]	; (8008758 <_strtod_l+0x970>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d128      	bne.n	80086e6 <_strtod_l+0x8fe>
 8008694:	9b04      	ldr	r3, [sp, #16]
 8008696:	4650      	mov	r0, sl
 8008698:	b1eb      	cbz	r3, 80086d6 <_strtod_l+0x8ee>
 800869a:	4a2d      	ldr	r2, [pc, #180]	; (8008750 <_strtod_l+0x968>)
 800869c:	403a      	ands	r2, r7
 800869e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80086a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80086a6:	d819      	bhi.n	80086dc <_strtod_l+0x8f4>
 80086a8:	0d12      	lsrs	r2, r2, #20
 80086aa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80086ae:	fa01 f303 	lsl.w	r3, r1, r3
 80086b2:	4298      	cmp	r0, r3
 80086b4:	d117      	bne.n	80086e6 <_strtod_l+0x8fe>
 80086b6:	4b29      	ldr	r3, [pc, #164]	; (800875c <_strtod_l+0x974>)
 80086b8:	429f      	cmp	r7, r3
 80086ba:	d102      	bne.n	80086c2 <_strtod_l+0x8da>
 80086bc:	3001      	adds	r0, #1
 80086be:	f43f addf 	beq.w	8008280 <_strtod_l+0x498>
 80086c2:	4b23      	ldr	r3, [pc, #140]	; (8008750 <_strtod_l+0x968>)
 80086c4:	403b      	ands	r3, r7
 80086c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80086ca:	f04f 0a00 	mov.w	sl, #0
 80086ce:	9b04      	ldr	r3, [sp, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1a0      	bne.n	8008616 <_strtod_l+0x82e>
 80086d4:	e5de      	b.n	8008294 <_strtod_l+0x4ac>
 80086d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086da:	e7ea      	b.n	80086b2 <_strtod_l+0x8ca>
 80086dc:	460b      	mov	r3, r1
 80086de:	e7e8      	b.n	80086b2 <_strtod_l+0x8ca>
 80086e0:	ea53 030a 	orrs.w	r3, r3, sl
 80086e4:	d088      	beq.n	80085f8 <_strtod_l+0x810>
 80086e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086e8:	b1db      	cbz	r3, 8008722 <_strtod_l+0x93a>
 80086ea:	423b      	tst	r3, r7
 80086ec:	d0ef      	beq.n	80086ce <_strtod_l+0x8e6>
 80086ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086f0:	9a04      	ldr	r2, [sp, #16]
 80086f2:	4650      	mov	r0, sl
 80086f4:	4659      	mov	r1, fp
 80086f6:	b1c3      	cbz	r3, 800872a <_strtod_l+0x942>
 80086f8:	f7ff fb58 	bl	8007dac <sulp>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008704:	f7f7 fdc2 	bl	800028c <__adddf3>
 8008708:	4682      	mov	sl, r0
 800870a:	468b      	mov	fp, r1
 800870c:	e7df      	b.n	80086ce <_strtod_l+0x8e6>
 800870e:	4013      	ands	r3, r2
 8008710:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008714:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008718:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800871c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008720:	e7d5      	b.n	80086ce <_strtod_l+0x8e6>
 8008722:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008724:	ea13 0f0a 	tst.w	r3, sl
 8008728:	e7e0      	b.n	80086ec <_strtod_l+0x904>
 800872a:	f7ff fb3f 	bl	8007dac <sulp>
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008736:	f7f7 fda7 	bl	8000288 <__aeabi_dsub>
 800873a:	2200      	movs	r2, #0
 800873c:	2300      	movs	r3, #0
 800873e:	4682      	mov	sl, r0
 8008740:	468b      	mov	fp, r1
 8008742:	f7f8 f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008746:	2800      	cmp	r0, #0
 8008748:	d0c1      	beq.n	80086ce <_strtod_l+0x8e6>
 800874a:	e60e      	b.n	800836a <_strtod_l+0x582>
 800874c:	fffffc02 	.word	0xfffffc02
 8008750:	7ff00000 	.word	0x7ff00000
 8008754:	39500000 	.word	0x39500000
 8008758:	000fffff 	.word	0x000fffff
 800875c:	7fefffff 	.word	0x7fefffff
 8008760:	0800b9f0 	.word	0x0800b9f0
 8008764:	4631      	mov	r1, r6
 8008766:	4628      	mov	r0, r5
 8008768:	f002 f820 	bl	800a7ac <__ratio>
 800876c:	ec59 8b10 	vmov	r8, r9, d0
 8008770:	ee10 0a10 	vmov	r0, s0
 8008774:	2200      	movs	r2, #0
 8008776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800877a:	4649      	mov	r1, r9
 800877c:	f7f8 f9b8 	bl	8000af0 <__aeabi_dcmple>
 8008780:	2800      	cmp	r0, #0
 8008782:	d07c      	beq.n	800887e <_strtod_l+0xa96>
 8008784:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008786:	2b00      	cmp	r3, #0
 8008788:	d04c      	beq.n	8008824 <_strtod_l+0xa3c>
 800878a:	4b95      	ldr	r3, [pc, #596]	; (80089e0 <_strtod_l+0xbf8>)
 800878c:	2200      	movs	r2, #0
 800878e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008792:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80089e0 <_strtod_l+0xbf8>
 8008796:	f04f 0800 	mov.w	r8, #0
 800879a:	4b92      	ldr	r3, [pc, #584]	; (80089e4 <_strtod_l+0xbfc>)
 800879c:	403b      	ands	r3, r7
 800879e:	9311      	str	r3, [sp, #68]	; 0x44
 80087a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80087a2:	4b91      	ldr	r3, [pc, #580]	; (80089e8 <_strtod_l+0xc00>)
 80087a4:	429a      	cmp	r2, r3
 80087a6:	f040 80b2 	bne.w	800890e <_strtod_l+0xb26>
 80087aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80087b2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80087b6:	ec4b ab10 	vmov	d0, sl, fp
 80087ba:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80087be:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80087c2:	f001 ff1b 	bl	800a5fc <__ulp>
 80087c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80087ca:	ec53 2b10 	vmov	r2, r3, d0
 80087ce:	f7f7 ff13 	bl	80005f8 <__aeabi_dmul>
 80087d2:	4652      	mov	r2, sl
 80087d4:	465b      	mov	r3, fp
 80087d6:	f7f7 fd59 	bl	800028c <__adddf3>
 80087da:	460b      	mov	r3, r1
 80087dc:	4981      	ldr	r1, [pc, #516]	; (80089e4 <_strtod_l+0xbfc>)
 80087de:	4a83      	ldr	r2, [pc, #524]	; (80089ec <_strtod_l+0xc04>)
 80087e0:	4019      	ands	r1, r3
 80087e2:	4291      	cmp	r1, r2
 80087e4:	4682      	mov	sl, r0
 80087e6:	d95e      	bls.n	80088a6 <_strtod_l+0xabe>
 80087e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087ea:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d103      	bne.n	80087fa <_strtod_l+0xa12>
 80087f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f4:	3301      	adds	r3, #1
 80087f6:	f43f ad43 	beq.w	8008280 <_strtod_l+0x498>
 80087fa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80089f8 <_strtod_l+0xc10>
 80087fe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008802:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008804:	4620      	mov	r0, r4
 8008806:	f001 fbcd 	bl	8009fa4 <_Bfree>
 800880a:	9907      	ldr	r1, [sp, #28]
 800880c:	4620      	mov	r0, r4
 800880e:	f001 fbc9 	bl	8009fa4 <_Bfree>
 8008812:	4631      	mov	r1, r6
 8008814:	4620      	mov	r0, r4
 8008816:	f001 fbc5 	bl	8009fa4 <_Bfree>
 800881a:	4629      	mov	r1, r5
 800881c:	4620      	mov	r0, r4
 800881e:	f001 fbc1 	bl	8009fa4 <_Bfree>
 8008822:	e613      	b.n	800844c <_strtod_l+0x664>
 8008824:	f1ba 0f00 	cmp.w	sl, #0
 8008828:	d11b      	bne.n	8008862 <_strtod_l+0xa7a>
 800882a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800882e:	b9f3      	cbnz	r3, 800886e <_strtod_l+0xa86>
 8008830:	4b6b      	ldr	r3, [pc, #428]	; (80089e0 <_strtod_l+0xbf8>)
 8008832:	2200      	movs	r2, #0
 8008834:	4640      	mov	r0, r8
 8008836:	4649      	mov	r1, r9
 8008838:	f7f8 f950 	bl	8000adc <__aeabi_dcmplt>
 800883c:	b9d0      	cbnz	r0, 8008874 <_strtod_l+0xa8c>
 800883e:	4640      	mov	r0, r8
 8008840:	4649      	mov	r1, r9
 8008842:	4b6b      	ldr	r3, [pc, #428]	; (80089f0 <_strtod_l+0xc08>)
 8008844:	2200      	movs	r2, #0
 8008846:	f7f7 fed7 	bl	80005f8 <__aeabi_dmul>
 800884a:	4680      	mov	r8, r0
 800884c:	4689      	mov	r9, r1
 800884e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008852:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008856:	931b      	str	r3, [sp, #108]	; 0x6c
 8008858:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800885c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008860:	e79b      	b.n	800879a <_strtod_l+0x9b2>
 8008862:	f1ba 0f01 	cmp.w	sl, #1
 8008866:	d102      	bne.n	800886e <_strtod_l+0xa86>
 8008868:	2f00      	cmp	r7, #0
 800886a:	f43f ad7e 	beq.w	800836a <_strtod_l+0x582>
 800886e:	4b61      	ldr	r3, [pc, #388]	; (80089f4 <_strtod_l+0xc0c>)
 8008870:	2200      	movs	r2, #0
 8008872:	e78c      	b.n	800878e <_strtod_l+0x9a6>
 8008874:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80089f0 <_strtod_l+0xc08>
 8008878:	f04f 0800 	mov.w	r8, #0
 800887c:	e7e7      	b.n	800884e <_strtod_l+0xa66>
 800887e:	4b5c      	ldr	r3, [pc, #368]	; (80089f0 <_strtod_l+0xc08>)
 8008880:	4640      	mov	r0, r8
 8008882:	4649      	mov	r1, r9
 8008884:	2200      	movs	r2, #0
 8008886:	f7f7 feb7 	bl	80005f8 <__aeabi_dmul>
 800888a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800888c:	4680      	mov	r8, r0
 800888e:	4689      	mov	r9, r1
 8008890:	b933      	cbnz	r3, 80088a0 <_strtod_l+0xab8>
 8008892:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008896:	9012      	str	r0, [sp, #72]	; 0x48
 8008898:	9313      	str	r3, [sp, #76]	; 0x4c
 800889a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800889e:	e7dd      	b.n	800885c <_strtod_l+0xa74>
 80088a0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80088a4:	e7f9      	b.n	800889a <_strtod_l+0xab2>
 80088a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80088aa:	9b04      	ldr	r3, [sp, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1a8      	bne.n	8008802 <_strtod_l+0xa1a>
 80088b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80088b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80088b6:	0d1b      	lsrs	r3, r3, #20
 80088b8:	051b      	lsls	r3, r3, #20
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d1a1      	bne.n	8008802 <_strtod_l+0xa1a>
 80088be:	4640      	mov	r0, r8
 80088c0:	4649      	mov	r1, r9
 80088c2:	f7f8 f9f9 	bl	8000cb8 <__aeabi_d2lz>
 80088c6:	f7f7 fe69 	bl	800059c <__aeabi_l2d>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4640      	mov	r0, r8
 80088d0:	4649      	mov	r1, r9
 80088d2:	f7f7 fcd9 	bl	8000288 <__aeabi_dsub>
 80088d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088dc:	ea43 030a 	orr.w	r3, r3, sl
 80088e0:	4313      	orrs	r3, r2
 80088e2:	4680      	mov	r8, r0
 80088e4:	4689      	mov	r9, r1
 80088e6:	d053      	beq.n	8008990 <_strtod_l+0xba8>
 80088e8:	a335      	add	r3, pc, #212	; (adr r3, 80089c0 <_strtod_l+0xbd8>)
 80088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ee:	f7f8 f8f5 	bl	8000adc <__aeabi_dcmplt>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	f47f acce 	bne.w	8008294 <_strtod_l+0x4ac>
 80088f8:	a333      	add	r3, pc, #204	; (adr r3, 80089c8 <_strtod_l+0xbe0>)
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	4640      	mov	r0, r8
 8008900:	4649      	mov	r1, r9
 8008902:	f7f8 f909 	bl	8000b18 <__aeabi_dcmpgt>
 8008906:	2800      	cmp	r0, #0
 8008908:	f43f af7b 	beq.w	8008802 <_strtod_l+0xa1a>
 800890c:	e4c2      	b.n	8008294 <_strtod_l+0x4ac>
 800890e:	9b04      	ldr	r3, [sp, #16]
 8008910:	b333      	cbz	r3, 8008960 <_strtod_l+0xb78>
 8008912:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008914:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008918:	d822      	bhi.n	8008960 <_strtod_l+0xb78>
 800891a:	a32d      	add	r3, pc, #180	; (adr r3, 80089d0 <_strtod_l+0xbe8>)
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	4640      	mov	r0, r8
 8008922:	4649      	mov	r1, r9
 8008924:	f7f8 f8e4 	bl	8000af0 <__aeabi_dcmple>
 8008928:	b1a0      	cbz	r0, 8008954 <_strtod_l+0xb6c>
 800892a:	4649      	mov	r1, r9
 800892c:	4640      	mov	r0, r8
 800892e:	f7f8 f93b 	bl	8000ba8 <__aeabi_d2uiz>
 8008932:	2801      	cmp	r0, #1
 8008934:	bf38      	it	cc
 8008936:	2001      	movcc	r0, #1
 8008938:	f7f7 fde4 	bl	8000504 <__aeabi_ui2d>
 800893c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800893e:	4680      	mov	r8, r0
 8008940:	4689      	mov	r9, r1
 8008942:	bb13      	cbnz	r3, 800898a <_strtod_l+0xba2>
 8008944:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008948:	9014      	str	r0, [sp, #80]	; 0x50
 800894a:	9315      	str	r3, [sp, #84]	; 0x54
 800894c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008950:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008956:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008958:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800895c:	1a9b      	subs	r3, r3, r2
 800895e:	930d      	str	r3, [sp, #52]	; 0x34
 8008960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008964:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008968:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800896c:	f001 fe46 	bl	800a5fc <__ulp>
 8008970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008974:	ec53 2b10 	vmov	r2, r3, d0
 8008978:	f7f7 fe3e 	bl	80005f8 <__aeabi_dmul>
 800897c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008980:	f7f7 fc84 	bl	800028c <__adddf3>
 8008984:	4682      	mov	sl, r0
 8008986:	468b      	mov	fp, r1
 8008988:	e78f      	b.n	80088aa <_strtod_l+0xac2>
 800898a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800898e:	e7dd      	b.n	800894c <_strtod_l+0xb64>
 8008990:	a311      	add	r3, pc, #68	; (adr r3, 80089d8 <_strtod_l+0xbf0>)
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	f7f8 f8a1 	bl	8000adc <__aeabi_dcmplt>
 800899a:	e7b4      	b.n	8008906 <_strtod_l+0xb1e>
 800899c:	2300      	movs	r3, #0
 800899e:	930e      	str	r3, [sp, #56]	; 0x38
 80089a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80089a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089a4:	6013      	str	r3, [r2, #0]
 80089a6:	f7ff ba65 	b.w	8007e74 <_strtod_l+0x8c>
 80089aa:	2b65      	cmp	r3, #101	; 0x65
 80089ac:	f43f ab5d 	beq.w	800806a <_strtod_l+0x282>
 80089b0:	2b45      	cmp	r3, #69	; 0x45
 80089b2:	f43f ab5a 	beq.w	800806a <_strtod_l+0x282>
 80089b6:	2201      	movs	r2, #1
 80089b8:	f7ff bb92 	b.w	80080e0 <_strtod_l+0x2f8>
 80089bc:	f3af 8000 	nop.w
 80089c0:	94a03595 	.word	0x94a03595
 80089c4:	3fdfffff 	.word	0x3fdfffff
 80089c8:	35afe535 	.word	0x35afe535
 80089cc:	3fe00000 	.word	0x3fe00000
 80089d0:	ffc00000 	.word	0xffc00000
 80089d4:	41dfffff 	.word	0x41dfffff
 80089d8:	94a03595 	.word	0x94a03595
 80089dc:	3fcfffff 	.word	0x3fcfffff
 80089e0:	3ff00000 	.word	0x3ff00000
 80089e4:	7ff00000 	.word	0x7ff00000
 80089e8:	7fe00000 	.word	0x7fe00000
 80089ec:	7c9fffff 	.word	0x7c9fffff
 80089f0:	3fe00000 	.word	0x3fe00000
 80089f4:	bff00000 	.word	0xbff00000
 80089f8:	7fefffff 	.word	0x7fefffff

080089fc <_strtod_r>:
 80089fc:	4b01      	ldr	r3, [pc, #4]	; (8008a04 <_strtod_r+0x8>)
 80089fe:	f7ff b9f3 	b.w	8007de8 <_strtod_l>
 8008a02:	bf00      	nop
 8008a04:	20000078 	.word	0x20000078

08008a08 <_strtol_l.isra.0>:
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a0e:	d001      	beq.n	8008a14 <_strtol_l.isra.0+0xc>
 8008a10:	2b24      	cmp	r3, #36	; 0x24
 8008a12:	d906      	bls.n	8008a22 <_strtol_l.isra.0+0x1a>
 8008a14:	f7fe faea 	bl	8006fec <__errno>
 8008a18:	2316      	movs	r3, #22
 8008a1a:	6003      	str	r3, [r0, #0]
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a22:	4f3a      	ldr	r7, [pc, #232]	; (8008b0c <_strtol_l.isra.0+0x104>)
 8008a24:	468e      	mov	lr, r1
 8008a26:	4676      	mov	r6, lr
 8008a28:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008a2c:	5de5      	ldrb	r5, [r4, r7]
 8008a2e:	f015 0508 	ands.w	r5, r5, #8
 8008a32:	d1f8      	bne.n	8008a26 <_strtol_l.isra.0+0x1e>
 8008a34:	2c2d      	cmp	r4, #45	; 0x2d
 8008a36:	d134      	bne.n	8008aa2 <_strtol_l.isra.0+0x9a>
 8008a38:	f89e 4000 	ldrb.w	r4, [lr]
 8008a3c:	f04f 0801 	mov.w	r8, #1
 8008a40:	f106 0e02 	add.w	lr, r6, #2
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d05c      	beq.n	8008b02 <_strtol_l.isra.0+0xfa>
 8008a48:	2b10      	cmp	r3, #16
 8008a4a:	d10c      	bne.n	8008a66 <_strtol_l.isra.0+0x5e>
 8008a4c:	2c30      	cmp	r4, #48	; 0x30
 8008a4e:	d10a      	bne.n	8008a66 <_strtol_l.isra.0+0x5e>
 8008a50:	f89e 4000 	ldrb.w	r4, [lr]
 8008a54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008a58:	2c58      	cmp	r4, #88	; 0x58
 8008a5a:	d14d      	bne.n	8008af8 <_strtol_l.isra.0+0xf0>
 8008a5c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008a60:	2310      	movs	r3, #16
 8008a62:	f10e 0e02 	add.w	lr, lr, #2
 8008a66:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008a6a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008a6e:	2600      	movs	r6, #0
 8008a70:	fbbc f9f3 	udiv	r9, ip, r3
 8008a74:	4635      	mov	r5, r6
 8008a76:	fb03 ca19 	mls	sl, r3, r9, ip
 8008a7a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008a7e:	2f09      	cmp	r7, #9
 8008a80:	d818      	bhi.n	8008ab4 <_strtol_l.isra.0+0xac>
 8008a82:	463c      	mov	r4, r7
 8008a84:	42a3      	cmp	r3, r4
 8008a86:	dd24      	ble.n	8008ad2 <_strtol_l.isra.0+0xca>
 8008a88:	2e00      	cmp	r6, #0
 8008a8a:	db1f      	blt.n	8008acc <_strtol_l.isra.0+0xc4>
 8008a8c:	45a9      	cmp	r9, r5
 8008a8e:	d31d      	bcc.n	8008acc <_strtol_l.isra.0+0xc4>
 8008a90:	d101      	bne.n	8008a96 <_strtol_l.isra.0+0x8e>
 8008a92:	45a2      	cmp	sl, r4
 8008a94:	db1a      	blt.n	8008acc <_strtol_l.isra.0+0xc4>
 8008a96:	fb05 4503 	mla	r5, r5, r3, r4
 8008a9a:	2601      	movs	r6, #1
 8008a9c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008aa0:	e7eb      	b.n	8008a7a <_strtol_l.isra.0+0x72>
 8008aa2:	2c2b      	cmp	r4, #43	; 0x2b
 8008aa4:	bf08      	it	eq
 8008aa6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008aaa:	46a8      	mov	r8, r5
 8008aac:	bf08      	it	eq
 8008aae:	f106 0e02 	addeq.w	lr, r6, #2
 8008ab2:	e7c7      	b.n	8008a44 <_strtol_l.isra.0+0x3c>
 8008ab4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008ab8:	2f19      	cmp	r7, #25
 8008aba:	d801      	bhi.n	8008ac0 <_strtol_l.isra.0+0xb8>
 8008abc:	3c37      	subs	r4, #55	; 0x37
 8008abe:	e7e1      	b.n	8008a84 <_strtol_l.isra.0+0x7c>
 8008ac0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008ac4:	2f19      	cmp	r7, #25
 8008ac6:	d804      	bhi.n	8008ad2 <_strtol_l.isra.0+0xca>
 8008ac8:	3c57      	subs	r4, #87	; 0x57
 8008aca:	e7db      	b.n	8008a84 <_strtol_l.isra.0+0x7c>
 8008acc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008ad0:	e7e4      	b.n	8008a9c <_strtol_l.isra.0+0x94>
 8008ad2:	2e00      	cmp	r6, #0
 8008ad4:	da05      	bge.n	8008ae2 <_strtol_l.isra.0+0xda>
 8008ad6:	2322      	movs	r3, #34	; 0x22
 8008ad8:	6003      	str	r3, [r0, #0]
 8008ada:	4665      	mov	r5, ip
 8008adc:	b942      	cbnz	r2, 8008af0 <_strtol_l.isra.0+0xe8>
 8008ade:	4628      	mov	r0, r5
 8008ae0:	e79d      	b.n	8008a1e <_strtol_l.isra.0+0x16>
 8008ae2:	f1b8 0f00 	cmp.w	r8, #0
 8008ae6:	d000      	beq.n	8008aea <_strtol_l.isra.0+0xe2>
 8008ae8:	426d      	negs	r5, r5
 8008aea:	2a00      	cmp	r2, #0
 8008aec:	d0f7      	beq.n	8008ade <_strtol_l.isra.0+0xd6>
 8008aee:	b10e      	cbz	r6, 8008af4 <_strtol_l.isra.0+0xec>
 8008af0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8008af4:	6011      	str	r1, [r2, #0]
 8008af6:	e7f2      	b.n	8008ade <_strtol_l.isra.0+0xd6>
 8008af8:	2430      	movs	r4, #48	; 0x30
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1b3      	bne.n	8008a66 <_strtol_l.isra.0+0x5e>
 8008afe:	2308      	movs	r3, #8
 8008b00:	e7b1      	b.n	8008a66 <_strtol_l.isra.0+0x5e>
 8008b02:	2c30      	cmp	r4, #48	; 0x30
 8008b04:	d0a4      	beq.n	8008a50 <_strtol_l.isra.0+0x48>
 8008b06:	230a      	movs	r3, #10
 8008b08:	e7ad      	b.n	8008a66 <_strtol_l.isra.0+0x5e>
 8008b0a:	bf00      	nop
 8008b0c:	0800ba19 	.word	0x0800ba19

08008b10 <_strtol_r>:
 8008b10:	f7ff bf7a 	b.w	8008a08 <_strtol_l.isra.0>

08008b14 <quorem>:
 8008b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b18:	6903      	ldr	r3, [r0, #16]
 8008b1a:	690c      	ldr	r4, [r1, #16]
 8008b1c:	42a3      	cmp	r3, r4
 8008b1e:	4607      	mov	r7, r0
 8008b20:	f2c0 8081 	blt.w	8008c26 <quorem+0x112>
 8008b24:	3c01      	subs	r4, #1
 8008b26:	f101 0814 	add.w	r8, r1, #20
 8008b2a:	f100 0514 	add.w	r5, r0, #20
 8008b2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b32:	9301      	str	r3, [sp, #4]
 8008b34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b48:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b4c:	d331      	bcc.n	8008bb2 <quorem+0x9e>
 8008b4e:	f04f 0e00 	mov.w	lr, #0
 8008b52:	4640      	mov	r0, r8
 8008b54:	46ac      	mov	ip, r5
 8008b56:	46f2      	mov	sl, lr
 8008b58:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b5c:	b293      	uxth	r3, r2
 8008b5e:	fb06 e303 	mla	r3, r6, r3, lr
 8008b62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	ebaa 0303 	sub.w	r3, sl, r3
 8008b6c:	0c12      	lsrs	r2, r2, #16
 8008b6e:	f8dc a000 	ldr.w	sl, [ip]
 8008b72:	fb06 e202 	mla	r2, r6, r2, lr
 8008b76:	fa13 f38a 	uxtah	r3, r3, sl
 8008b7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b7e:	fa1f fa82 	uxth.w	sl, r2
 8008b82:	f8dc 2000 	ldr.w	r2, [ip]
 8008b86:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008b8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b94:	4581      	cmp	r9, r0
 8008b96:	f84c 3b04 	str.w	r3, [ip], #4
 8008b9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b9e:	d2db      	bcs.n	8008b58 <quorem+0x44>
 8008ba0:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ba4:	b92b      	cbnz	r3, 8008bb2 <quorem+0x9e>
 8008ba6:	9b01      	ldr	r3, [sp, #4]
 8008ba8:	3b04      	subs	r3, #4
 8008baa:	429d      	cmp	r5, r3
 8008bac:	461a      	mov	r2, r3
 8008bae:	d32e      	bcc.n	8008c0e <quorem+0xfa>
 8008bb0:	613c      	str	r4, [r7, #16]
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	f001 fc7e 	bl	800a4b4 <__mcmp>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	db24      	blt.n	8008c06 <quorem+0xf2>
 8008bbc:	3601      	adds	r6, #1
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	f04f 0c00 	mov.w	ip, #0
 8008bc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008bc8:	f8d0 e000 	ldr.w	lr, [r0]
 8008bcc:	b293      	uxth	r3, r2
 8008bce:	ebac 0303 	sub.w	r3, ip, r3
 8008bd2:	0c12      	lsrs	r2, r2, #16
 8008bd4:	fa13 f38e 	uxtah	r3, r3, lr
 8008bd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008bdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008be6:	45c1      	cmp	r9, r8
 8008be8:	f840 3b04 	str.w	r3, [r0], #4
 8008bec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008bf0:	d2e8      	bcs.n	8008bc4 <quorem+0xb0>
 8008bf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bfa:	b922      	cbnz	r2, 8008c06 <quorem+0xf2>
 8008bfc:	3b04      	subs	r3, #4
 8008bfe:	429d      	cmp	r5, r3
 8008c00:	461a      	mov	r2, r3
 8008c02:	d30a      	bcc.n	8008c1a <quorem+0x106>
 8008c04:	613c      	str	r4, [r7, #16]
 8008c06:	4630      	mov	r0, r6
 8008c08:	b003      	add	sp, #12
 8008c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0e:	6812      	ldr	r2, [r2, #0]
 8008c10:	3b04      	subs	r3, #4
 8008c12:	2a00      	cmp	r2, #0
 8008c14:	d1cc      	bne.n	8008bb0 <quorem+0x9c>
 8008c16:	3c01      	subs	r4, #1
 8008c18:	e7c7      	b.n	8008baa <quorem+0x96>
 8008c1a:	6812      	ldr	r2, [r2, #0]
 8008c1c:	3b04      	subs	r3, #4
 8008c1e:	2a00      	cmp	r2, #0
 8008c20:	d1f0      	bne.n	8008c04 <quorem+0xf0>
 8008c22:	3c01      	subs	r4, #1
 8008c24:	e7eb      	b.n	8008bfe <quorem+0xea>
 8008c26:	2000      	movs	r0, #0
 8008c28:	e7ee      	b.n	8008c08 <quorem+0xf4>
 8008c2a:	0000      	movs	r0, r0
 8008c2c:	0000      	movs	r0, r0
	...

08008c30 <_dtoa_r>:
 8008c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c34:	ed2d 8b02 	vpush	{d8}
 8008c38:	ec57 6b10 	vmov	r6, r7, d0
 8008c3c:	b095      	sub	sp, #84	; 0x54
 8008c3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c44:	9105      	str	r1, [sp, #20]
 8008c46:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c50:	b975      	cbnz	r5, 8008c70 <_dtoa_r+0x40>
 8008c52:	2010      	movs	r0, #16
 8008c54:	f001 f94c 	bl	8009ef0 <malloc>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	6260      	str	r0, [r4, #36]	; 0x24
 8008c5c:	b920      	cbnz	r0, 8008c68 <_dtoa_r+0x38>
 8008c5e:	4bb2      	ldr	r3, [pc, #712]	; (8008f28 <_dtoa_r+0x2f8>)
 8008c60:	21ea      	movs	r1, #234	; 0xea
 8008c62:	48b2      	ldr	r0, [pc, #712]	; (8008f2c <_dtoa_r+0x2fc>)
 8008c64:	f002 f868 	bl	800ad38 <__assert_func>
 8008c68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c6c:	6005      	str	r5, [r0, #0]
 8008c6e:	60c5      	str	r5, [r0, #12]
 8008c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c72:	6819      	ldr	r1, [r3, #0]
 8008c74:	b151      	cbz	r1, 8008c8c <_dtoa_r+0x5c>
 8008c76:	685a      	ldr	r2, [r3, #4]
 8008c78:	604a      	str	r2, [r1, #4]
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	4093      	lsls	r3, r2
 8008c7e:	608b      	str	r3, [r1, #8]
 8008c80:	4620      	mov	r0, r4
 8008c82:	f001 f98f 	bl	8009fa4 <_Bfree>
 8008c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	1e3b      	subs	r3, r7, #0
 8008c8e:	bfb9      	ittee	lt
 8008c90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c94:	9303      	strlt	r3, [sp, #12]
 8008c96:	2300      	movge	r3, #0
 8008c98:	f8c8 3000 	strge.w	r3, [r8]
 8008c9c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008ca0:	4ba3      	ldr	r3, [pc, #652]	; (8008f30 <_dtoa_r+0x300>)
 8008ca2:	bfbc      	itt	lt
 8008ca4:	2201      	movlt	r2, #1
 8008ca6:	f8c8 2000 	strlt.w	r2, [r8]
 8008caa:	ea33 0309 	bics.w	r3, r3, r9
 8008cae:	d11b      	bne.n	8008ce8 <_dtoa_r+0xb8>
 8008cb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008cb6:	6013      	str	r3, [r2, #0]
 8008cb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cbc:	4333      	orrs	r3, r6
 8008cbe:	f000 857a 	beq.w	80097b6 <_dtoa_r+0xb86>
 8008cc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cc4:	b963      	cbnz	r3, 8008ce0 <_dtoa_r+0xb0>
 8008cc6:	4b9b      	ldr	r3, [pc, #620]	; (8008f34 <_dtoa_r+0x304>)
 8008cc8:	e024      	b.n	8008d14 <_dtoa_r+0xe4>
 8008cca:	4b9b      	ldr	r3, [pc, #620]	; (8008f38 <_dtoa_r+0x308>)
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	3308      	adds	r3, #8
 8008cd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cd2:	6013      	str	r3, [r2, #0]
 8008cd4:	9800      	ldr	r0, [sp, #0]
 8008cd6:	b015      	add	sp, #84	; 0x54
 8008cd8:	ecbd 8b02 	vpop	{d8}
 8008cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce0:	4b94      	ldr	r3, [pc, #592]	; (8008f34 <_dtoa_r+0x304>)
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	3303      	adds	r3, #3
 8008ce6:	e7f3      	b.n	8008cd0 <_dtoa_r+0xa0>
 8008ce8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cec:	2200      	movs	r2, #0
 8008cee:	ec51 0b17 	vmov	r0, r1, d7
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008cf8:	f7f7 fee6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cfc:	4680      	mov	r8, r0
 8008cfe:	b158      	cbz	r0, 8008d18 <_dtoa_r+0xe8>
 8008d00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d02:	2301      	movs	r3, #1
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f000 8551 	beq.w	80097b0 <_dtoa_r+0xb80>
 8008d0e:	488b      	ldr	r0, [pc, #556]	; (8008f3c <_dtoa_r+0x30c>)
 8008d10:	6018      	str	r0, [r3, #0]
 8008d12:	1e43      	subs	r3, r0, #1
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	e7dd      	b.n	8008cd4 <_dtoa_r+0xa4>
 8008d18:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008d1c:	aa12      	add	r2, sp, #72	; 0x48
 8008d1e:	a913      	add	r1, sp, #76	; 0x4c
 8008d20:	4620      	mov	r0, r4
 8008d22:	f001 fce7 	bl	800a6f4 <__d2b>
 8008d26:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d2a:	4683      	mov	fp, r0
 8008d2c:	2d00      	cmp	r5, #0
 8008d2e:	d07c      	beq.n	8008e2a <_dtoa_r+0x1fa>
 8008d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d32:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008d36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d3a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008d3e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d4a:	4b7d      	ldr	r3, [pc, #500]	; (8008f40 <_dtoa_r+0x310>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	4630      	mov	r0, r6
 8008d50:	4639      	mov	r1, r7
 8008d52:	f7f7 fa99 	bl	8000288 <__aeabi_dsub>
 8008d56:	a36e      	add	r3, pc, #440	; (adr r3, 8008f10 <_dtoa_r+0x2e0>)
 8008d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5c:	f7f7 fc4c 	bl	80005f8 <__aeabi_dmul>
 8008d60:	a36d      	add	r3, pc, #436	; (adr r3, 8008f18 <_dtoa_r+0x2e8>)
 8008d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d66:	f7f7 fa91 	bl	800028c <__adddf3>
 8008d6a:	4606      	mov	r6, r0
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	460f      	mov	r7, r1
 8008d70:	f7f7 fbd8 	bl	8000524 <__aeabi_i2d>
 8008d74:	a36a      	add	r3, pc, #424	; (adr r3, 8008f20 <_dtoa_r+0x2f0>)
 8008d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7a:	f7f7 fc3d 	bl	80005f8 <__aeabi_dmul>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4630      	mov	r0, r6
 8008d84:	4639      	mov	r1, r7
 8008d86:	f7f7 fa81 	bl	800028c <__adddf3>
 8008d8a:	4606      	mov	r6, r0
 8008d8c:	460f      	mov	r7, r1
 8008d8e:	f7f7 fee3 	bl	8000b58 <__aeabi_d2iz>
 8008d92:	2200      	movs	r2, #0
 8008d94:	4682      	mov	sl, r0
 8008d96:	2300      	movs	r3, #0
 8008d98:	4630      	mov	r0, r6
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	f7f7 fe9e 	bl	8000adc <__aeabi_dcmplt>
 8008da0:	b148      	cbz	r0, 8008db6 <_dtoa_r+0x186>
 8008da2:	4650      	mov	r0, sl
 8008da4:	f7f7 fbbe 	bl	8000524 <__aeabi_i2d>
 8008da8:	4632      	mov	r2, r6
 8008daa:	463b      	mov	r3, r7
 8008dac:	f7f7 fe8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008db0:	b908      	cbnz	r0, 8008db6 <_dtoa_r+0x186>
 8008db2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008db6:	f1ba 0f16 	cmp.w	sl, #22
 8008dba:	d854      	bhi.n	8008e66 <_dtoa_r+0x236>
 8008dbc:	4b61      	ldr	r3, [pc, #388]	; (8008f44 <_dtoa_r+0x314>)
 8008dbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008dca:	f7f7 fe87 	bl	8000adc <__aeabi_dcmplt>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d04b      	beq.n	8008e6a <_dtoa_r+0x23a>
 8008dd2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	930e      	str	r3, [sp, #56]	; 0x38
 8008dda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ddc:	1b5d      	subs	r5, r3, r5
 8008dde:	1e6b      	subs	r3, r5, #1
 8008de0:	9304      	str	r3, [sp, #16]
 8008de2:	bf43      	ittte	mi
 8008de4:	2300      	movmi	r3, #0
 8008de6:	f1c5 0801 	rsbmi	r8, r5, #1
 8008dea:	9304      	strmi	r3, [sp, #16]
 8008dec:	f04f 0800 	movpl.w	r8, #0
 8008df0:	f1ba 0f00 	cmp.w	sl, #0
 8008df4:	db3b      	blt.n	8008e6e <_dtoa_r+0x23e>
 8008df6:	9b04      	ldr	r3, [sp, #16]
 8008df8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008dfc:	4453      	add	r3, sl
 8008dfe:	9304      	str	r3, [sp, #16]
 8008e00:	2300      	movs	r3, #0
 8008e02:	9306      	str	r3, [sp, #24]
 8008e04:	9b05      	ldr	r3, [sp, #20]
 8008e06:	2b09      	cmp	r3, #9
 8008e08:	d869      	bhi.n	8008ede <_dtoa_r+0x2ae>
 8008e0a:	2b05      	cmp	r3, #5
 8008e0c:	bfc4      	itt	gt
 8008e0e:	3b04      	subgt	r3, #4
 8008e10:	9305      	strgt	r3, [sp, #20]
 8008e12:	9b05      	ldr	r3, [sp, #20]
 8008e14:	f1a3 0302 	sub.w	r3, r3, #2
 8008e18:	bfcc      	ite	gt
 8008e1a:	2500      	movgt	r5, #0
 8008e1c:	2501      	movle	r5, #1
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	d869      	bhi.n	8008ef6 <_dtoa_r+0x2c6>
 8008e22:	e8df f003 	tbb	[pc, r3]
 8008e26:	4e2c      	.short	0x4e2c
 8008e28:	5a4c      	.short	0x5a4c
 8008e2a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008e2e:	441d      	add	r5, r3
 8008e30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e34:	2b20      	cmp	r3, #32
 8008e36:	bfc1      	itttt	gt
 8008e38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e3c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e40:	fa09 f303 	lslgt.w	r3, r9, r3
 8008e44:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e48:	bfda      	itte	le
 8008e4a:	f1c3 0320 	rsble	r3, r3, #32
 8008e4e:	fa06 f003 	lslle.w	r0, r6, r3
 8008e52:	4318      	orrgt	r0, r3
 8008e54:	f7f7 fb56 	bl	8000504 <__aeabi_ui2d>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e60:	3d01      	subs	r5, #1
 8008e62:	9310      	str	r3, [sp, #64]	; 0x40
 8008e64:	e771      	b.n	8008d4a <_dtoa_r+0x11a>
 8008e66:	2301      	movs	r3, #1
 8008e68:	e7b6      	b.n	8008dd8 <_dtoa_r+0x1a8>
 8008e6a:	900e      	str	r0, [sp, #56]	; 0x38
 8008e6c:	e7b5      	b.n	8008dda <_dtoa_r+0x1aa>
 8008e6e:	f1ca 0300 	rsb	r3, sl, #0
 8008e72:	9306      	str	r3, [sp, #24]
 8008e74:	2300      	movs	r3, #0
 8008e76:	eba8 080a 	sub.w	r8, r8, sl
 8008e7a:	930d      	str	r3, [sp, #52]	; 0x34
 8008e7c:	e7c2      	b.n	8008e04 <_dtoa_r+0x1d4>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	9308      	str	r3, [sp, #32]
 8008e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	dc39      	bgt.n	8008efc <_dtoa_r+0x2cc>
 8008e88:	f04f 0901 	mov.w	r9, #1
 8008e8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e90:	464b      	mov	r3, r9
 8008e92:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008e96:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e98:	2200      	movs	r2, #0
 8008e9a:	6042      	str	r2, [r0, #4]
 8008e9c:	2204      	movs	r2, #4
 8008e9e:	f102 0614 	add.w	r6, r2, #20
 8008ea2:	429e      	cmp	r6, r3
 8008ea4:	6841      	ldr	r1, [r0, #4]
 8008ea6:	d92f      	bls.n	8008f08 <_dtoa_r+0x2d8>
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f001 f83b 	bl	8009f24 <_Balloc>
 8008eae:	9000      	str	r0, [sp, #0]
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d14b      	bne.n	8008f4c <_dtoa_r+0x31c>
 8008eb4:	4b24      	ldr	r3, [pc, #144]	; (8008f48 <_dtoa_r+0x318>)
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ebc:	e6d1      	b.n	8008c62 <_dtoa_r+0x32>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e7de      	b.n	8008e80 <_dtoa_r+0x250>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	9308      	str	r3, [sp, #32]
 8008ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec8:	eb0a 0903 	add.w	r9, sl, r3
 8008ecc:	f109 0301 	add.w	r3, r9, #1
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	bfb8      	it	lt
 8008ed6:	2301      	movlt	r3, #1
 8008ed8:	e7dd      	b.n	8008e96 <_dtoa_r+0x266>
 8008eda:	2301      	movs	r3, #1
 8008edc:	e7f2      	b.n	8008ec4 <_dtoa_r+0x294>
 8008ede:	2501      	movs	r5, #1
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	9305      	str	r3, [sp, #20]
 8008ee4:	9508      	str	r5, [sp, #32]
 8008ee6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008eea:	2200      	movs	r2, #0
 8008eec:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ef0:	2312      	movs	r3, #18
 8008ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ef4:	e7cf      	b.n	8008e96 <_dtoa_r+0x266>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	9308      	str	r3, [sp, #32]
 8008efa:	e7f4      	b.n	8008ee6 <_dtoa_r+0x2b6>
 8008efc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008f00:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f04:	464b      	mov	r3, r9
 8008f06:	e7c6      	b.n	8008e96 <_dtoa_r+0x266>
 8008f08:	3101      	adds	r1, #1
 8008f0a:	6041      	str	r1, [r0, #4]
 8008f0c:	0052      	lsls	r2, r2, #1
 8008f0e:	e7c6      	b.n	8008e9e <_dtoa_r+0x26e>
 8008f10:	636f4361 	.word	0x636f4361
 8008f14:	3fd287a7 	.word	0x3fd287a7
 8008f18:	8b60c8b3 	.word	0x8b60c8b3
 8008f1c:	3fc68a28 	.word	0x3fc68a28
 8008f20:	509f79fb 	.word	0x509f79fb
 8008f24:	3fd34413 	.word	0x3fd34413
 8008f28:	0800bb26 	.word	0x0800bb26
 8008f2c:	0800bb3d 	.word	0x0800bb3d
 8008f30:	7ff00000 	.word	0x7ff00000
 8008f34:	0800bb22 	.word	0x0800bb22
 8008f38:	0800bb19 	.word	0x0800bb19
 8008f3c:	0800b99d 	.word	0x0800b99d
 8008f40:	3ff80000 	.word	0x3ff80000
 8008f44:	0800bcb8 	.word	0x0800bcb8
 8008f48:	0800bb9c 	.word	0x0800bb9c
 8008f4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f4e:	9a00      	ldr	r2, [sp, #0]
 8008f50:	601a      	str	r2, [r3, #0]
 8008f52:	9b01      	ldr	r3, [sp, #4]
 8008f54:	2b0e      	cmp	r3, #14
 8008f56:	f200 80ad 	bhi.w	80090b4 <_dtoa_r+0x484>
 8008f5a:	2d00      	cmp	r5, #0
 8008f5c:	f000 80aa 	beq.w	80090b4 <_dtoa_r+0x484>
 8008f60:	f1ba 0f00 	cmp.w	sl, #0
 8008f64:	dd36      	ble.n	8008fd4 <_dtoa_r+0x3a4>
 8008f66:	4ac3      	ldr	r2, [pc, #780]	; (8009274 <_dtoa_r+0x644>)
 8008f68:	f00a 030f 	and.w	r3, sl, #15
 8008f6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f70:	ed93 7b00 	vldr	d7, [r3]
 8008f74:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008f78:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008f7c:	eeb0 8a47 	vmov.f32	s16, s14
 8008f80:	eef0 8a67 	vmov.f32	s17, s15
 8008f84:	d016      	beq.n	8008fb4 <_dtoa_r+0x384>
 8008f86:	4bbc      	ldr	r3, [pc, #752]	; (8009278 <_dtoa_r+0x648>)
 8008f88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f90:	f7f7 fc5c 	bl	800084c <__aeabi_ddiv>
 8008f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f98:	f007 070f 	and.w	r7, r7, #15
 8008f9c:	2503      	movs	r5, #3
 8008f9e:	4eb6      	ldr	r6, [pc, #728]	; (8009278 <_dtoa_r+0x648>)
 8008fa0:	b957      	cbnz	r7, 8008fb8 <_dtoa_r+0x388>
 8008fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fa6:	ec53 2b18 	vmov	r2, r3, d8
 8008faa:	f7f7 fc4f 	bl	800084c <__aeabi_ddiv>
 8008fae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fb2:	e029      	b.n	8009008 <_dtoa_r+0x3d8>
 8008fb4:	2502      	movs	r5, #2
 8008fb6:	e7f2      	b.n	8008f9e <_dtoa_r+0x36e>
 8008fb8:	07f9      	lsls	r1, r7, #31
 8008fba:	d508      	bpl.n	8008fce <_dtoa_r+0x39e>
 8008fbc:	ec51 0b18 	vmov	r0, r1, d8
 8008fc0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008fc4:	f7f7 fb18 	bl	80005f8 <__aeabi_dmul>
 8008fc8:	ec41 0b18 	vmov	d8, r0, r1
 8008fcc:	3501      	adds	r5, #1
 8008fce:	107f      	asrs	r7, r7, #1
 8008fd0:	3608      	adds	r6, #8
 8008fd2:	e7e5      	b.n	8008fa0 <_dtoa_r+0x370>
 8008fd4:	f000 80a6 	beq.w	8009124 <_dtoa_r+0x4f4>
 8008fd8:	f1ca 0600 	rsb	r6, sl, #0
 8008fdc:	4ba5      	ldr	r3, [pc, #660]	; (8009274 <_dtoa_r+0x644>)
 8008fde:	4fa6      	ldr	r7, [pc, #664]	; (8009278 <_dtoa_r+0x648>)
 8008fe0:	f006 020f 	and.w	r2, r6, #15
 8008fe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ff0:	f7f7 fb02 	bl	80005f8 <__aeabi_dmul>
 8008ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ff8:	1136      	asrs	r6, r6, #4
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2502      	movs	r5, #2
 8008ffe:	2e00      	cmp	r6, #0
 8009000:	f040 8085 	bne.w	800910e <_dtoa_r+0x4de>
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1d2      	bne.n	8008fae <_dtoa_r+0x37e>
 8009008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 808c 	beq.w	8009128 <_dtoa_r+0x4f8>
 8009010:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009014:	4b99      	ldr	r3, [pc, #612]	; (800927c <_dtoa_r+0x64c>)
 8009016:	2200      	movs	r2, #0
 8009018:	4630      	mov	r0, r6
 800901a:	4639      	mov	r1, r7
 800901c:	f7f7 fd5e 	bl	8000adc <__aeabi_dcmplt>
 8009020:	2800      	cmp	r0, #0
 8009022:	f000 8081 	beq.w	8009128 <_dtoa_r+0x4f8>
 8009026:	9b01      	ldr	r3, [sp, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d07d      	beq.n	8009128 <_dtoa_r+0x4f8>
 800902c:	f1b9 0f00 	cmp.w	r9, #0
 8009030:	dd3c      	ble.n	80090ac <_dtoa_r+0x47c>
 8009032:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009036:	9307      	str	r3, [sp, #28]
 8009038:	2200      	movs	r2, #0
 800903a:	4b91      	ldr	r3, [pc, #580]	; (8009280 <_dtoa_r+0x650>)
 800903c:	4630      	mov	r0, r6
 800903e:	4639      	mov	r1, r7
 8009040:	f7f7 fada 	bl	80005f8 <__aeabi_dmul>
 8009044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009048:	3501      	adds	r5, #1
 800904a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800904e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009052:	4628      	mov	r0, r5
 8009054:	f7f7 fa66 	bl	8000524 <__aeabi_i2d>
 8009058:	4632      	mov	r2, r6
 800905a:	463b      	mov	r3, r7
 800905c:	f7f7 facc 	bl	80005f8 <__aeabi_dmul>
 8009060:	4b88      	ldr	r3, [pc, #544]	; (8009284 <_dtoa_r+0x654>)
 8009062:	2200      	movs	r2, #0
 8009064:	f7f7 f912 	bl	800028c <__adddf3>
 8009068:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800906c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009070:	9303      	str	r3, [sp, #12]
 8009072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009074:	2b00      	cmp	r3, #0
 8009076:	d15c      	bne.n	8009132 <_dtoa_r+0x502>
 8009078:	4b83      	ldr	r3, [pc, #524]	; (8009288 <_dtoa_r+0x658>)
 800907a:	2200      	movs	r2, #0
 800907c:	4630      	mov	r0, r6
 800907e:	4639      	mov	r1, r7
 8009080:	f7f7 f902 	bl	8000288 <__aeabi_dsub>
 8009084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009088:	4606      	mov	r6, r0
 800908a:	460f      	mov	r7, r1
 800908c:	f7f7 fd44 	bl	8000b18 <__aeabi_dcmpgt>
 8009090:	2800      	cmp	r0, #0
 8009092:	f040 8296 	bne.w	80095c2 <_dtoa_r+0x992>
 8009096:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800909a:	4630      	mov	r0, r6
 800909c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090a0:	4639      	mov	r1, r7
 80090a2:	f7f7 fd1b 	bl	8000adc <__aeabi_dcmplt>
 80090a6:	2800      	cmp	r0, #0
 80090a8:	f040 8288 	bne.w	80095bc <_dtoa_r+0x98c>
 80090ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80090b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f2c0 8158 	blt.w	800936c <_dtoa_r+0x73c>
 80090bc:	f1ba 0f0e 	cmp.w	sl, #14
 80090c0:	f300 8154 	bgt.w	800936c <_dtoa_r+0x73c>
 80090c4:	4b6b      	ldr	r3, [pc, #428]	; (8009274 <_dtoa_r+0x644>)
 80090c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80090ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f280 80e3 	bge.w	800929c <_dtoa_r+0x66c>
 80090d6:	9b01      	ldr	r3, [sp, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f300 80df 	bgt.w	800929c <_dtoa_r+0x66c>
 80090de:	f040 826d 	bne.w	80095bc <_dtoa_r+0x98c>
 80090e2:	4b69      	ldr	r3, [pc, #420]	; (8009288 <_dtoa_r+0x658>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	4640      	mov	r0, r8
 80090e8:	4649      	mov	r1, r9
 80090ea:	f7f7 fa85 	bl	80005f8 <__aeabi_dmul>
 80090ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090f2:	f7f7 fd07 	bl	8000b04 <__aeabi_dcmpge>
 80090f6:	9e01      	ldr	r6, [sp, #4]
 80090f8:	4637      	mov	r7, r6
 80090fa:	2800      	cmp	r0, #0
 80090fc:	f040 8243 	bne.w	8009586 <_dtoa_r+0x956>
 8009100:	9d00      	ldr	r5, [sp, #0]
 8009102:	2331      	movs	r3, #49	; 0x31
 8009104:	f805 3b01 	strb.w	r3, [r5], #1
 8009108:	f10a 0a01 	add.w	sl, sl, #1
 800910c:	e23f      	b.n	800958e <_dtoa_r+0x95e>
 800910e:	07f2      	lsls	r2, r6, #31
 8009110:	d505      	bpl.n	800911e <_dtoa_r+0x4ee>
 8009112:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009116:	f7f7 fa6f 	bl	80005f8 <__aeabi_dmul>
 800911a:	3501      	adds	r5, #1
 800911c:	2301      	movs	r3, #1
 800911e:	1076      	asrs	r6, r6, #1
 8009120:	3708      	adds	r7, #8
 8009122:	e76c      	b.n	8008ffe <_dtoa_r+0x3ce>
 8009124:	2502      	movs	r5, #2
 8009126:	e76f      	b.n	8009008 <_dtoa_r+0x3d8>
 8009128:	9b01      	ldr	r3, [sp, #4]
 800912a:	f8cd a01c 	str.w	sl, [sp, #28]
 800912e:	930c      	str	r3, [sp, #48]	; 0x30
 8009130:	e78d      	b.n	800904e <_dtoa_r+0x41e>
 8009132:	9900      	ldr	r1, [sp, #0]
 8009134:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009138:	4b4e      	ldr	r3, [pc, #312]	; (8009274 <_dtoa_r+0x644>)
 800913a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800913e:	4401      	add	r1, r0
 8009140:	9102      	str	r1, [sp, #8]
 8009142:	9908      	ldr	r1, [sp, #32]
 8009144:	eeb0 8a47 	vmov.f32	s16, s14
 8009148:	eef0 8a67 	vmov.f32	s17, s15
 800914c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009150:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009154:	2900      	cmp	r1, #0
 8009156:	d045      	beq.n	80091e4 <_dtoa_r+0x5b4>
 8009158:	494c      	ldr	r1, [pc, #304]	; (800928c <_dtoa_r+0x65c>)
 800915a:	2000      	movs	r0, #0
 800915c:	f7f7 fb76 	bl	800084c <__aeabi_ddiv>
 8009160:	ec53 2b18 	vmov	r2, r3, d8
 8009164:	f7f7 f890 	bl	8000288 <__aeabi_dsub>
 8009168:	9d00      	ldr	r5, [sp, #0]
 800916a:	ec41 0b18 	vmov	d8, r0, r1
 800916e:	4639      	mov	r1, r7
 8009170:	4630      	mov	r0, r6
 8009172:	f7f7 fcf1 	bl	8000b58 <__aeabi_d2iz>
 8009176:	900c      	str	r0, [sp, #48]	; 0x30
 8009178:	f7f7 f9d4 	bl	8000524 <__aeabi_i2d>
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	4630      	mov	r0, r6
 8009182:	4639      	mov	r1, r7
 8009184:	f7f7 f880 	bl	8000288 <__aeabi_dsub>
 8009188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800918a:	3330      	adds	r3, #48	; 0x30
 800918c:	f805 3b01 	strb.w	r3, [r5], #1
 8009190:	ec53 2b18 	vmov	r2, r3, d8
 8009194:	4606      	mov	r6, r0
 8009196:	460f      	mov	r7, r1
 8009198:	f7f7 fca0 	bl	8000adc <__aeabi_dcmplt>
 800919c:	2800      	cmp	r0, #0
 800919e:	d165      	bne.n	800926c <_dtoa_r+0x63c>
 80091a0:	4632      	mov	r2, r6
 80091a2:	463b      	mov	r3, r7
 80091a4:	4935      	ldr	r1, [pc, #212]	; (800927c <_dtoa_r+0x64c>)
 80091a6:	2000      	movs	r0, #0
 80091a8:	f7f7 f86e 	bl	8000288 <__aeabi_dsub>
 80091ac:	ec53 2b18 	vmov	r2, r3, d8
 80091b0:	f7f7 fc94 	bl	8000adc <__aeabi_dcmplt>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	f040 80b9 	bne.w	800932c <_dtoa_r+0x6fc>
 80091ba:	9b02      	ldr	r3, [sp, #8]
 80091bc:	429d      	cmp	r5, r3
 80091be:	f43f af75 	beq.w	80090ac <_dtoa_r+0x47c>
 80091c2:	4b2f      	ldr	r3, [pc, #188]	; (8009280 <_dtoa_r+0x650>)
 80091c4:	ec51 0b18 	vmov	r0, r1, d8
 80091c8:	2200      	movs	r2, #0
 80091ca:	f7f7 fa15 	bl	80005f8 <__aeabi_dmul>
 80091ce:	4b2c      	ldr	r3, [pc, #176]	; (8009280 <_dtoa_r+0x650>)
 80091d0:	ec41 0b18 	vmov	d8, r0, r1
 80091d4:	2200      	movs	r2, #0
 80091d6:	4630      	mov	r0, r6
 80091d8:	4639      	mov	r1, r7
 80091da:	f7f7 fa0d 	bl	80005f8 <__aeabi_dmul>
 80091de:	4606      	mov	r6, r0
 80091e0:	460f      	mov	r7, r1
 80091e2:	e7c4      	b.n	800916e <_dtoa_r+0x53e>
 80091e4:	ec51 0b17 	vmov	r0, r1, d7
 80091e8:	f7f7 fa06 	bl	80005f8 <__aeabi_dmul>
 80091ec:	9b02      	ldr	r3, [sp, #8]
 80091ee:	9d00      	ldr	r5, [sp, #0]
 80091f0:	930c      	str	r3, [sp, #48]	; 0x30
 80091f2:	ec41 0b18 	vmov	d8, r0, r1
 80091f6:	4639      	mov	r1, r7
 80091f8:	4630      	mov	r0, r6
 80091fa:	f7f7 fcad 	bl	8000b58 <__aeabi_d2iz>
 80091fe:	9011      	str	r0, [sp, #68]	; 0x44
 8009200:	f7f7 f990 	bl	8000524 <__aeabi_i2d>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	4630      	mov	r0, r6
 800920a:	4639      	mov	r1, r7
 800920c:	f7f7 f83c 	bl	8000288 <__aeabi_dsub>
 8009210:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009212:	3330      	adds	r3, #48	; 0x30
 8009214:	f805 3b01 	strb.w	r3, [r5], #1
 8009218:	9b02      	ldr	r3, [sp, #8]
 800921a:	429d      	cmp	r5, r3
 800921c:	4606      	mov	r6, r0
 800921e:	460f      	mov	r7, r1
 8009220:	f04f 0200 	mov.w	r2, #0
 8009224:	d134      	bne.n	8009290 <_dtoa_r+0x660>
 8009226:	4b19      	ldr	r3, [pc, #100]	; (800928c <_dtoa_r+0x65c>)
 8009228:	ec51 0b18 	vmov	r0, r1, d8
 800922c:	f7f7 f82e 	bl	800028c <__adddf3>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	4630      	mov	r0, r6
 8009236:	4639      	mov	r1, r7
 8009238:	f7f7 fc6e 	bl	8000b18 <__aeabi_dcmpgt>
 800923c:	2800      	cmp	r0, #0
 800923e:	d175      	bne.n	800932c <_dtoa_r+0x6fc>
 8009240:	ec53 2b18 	vmov	r2, r3, d8
 8009244:	4911      	ldr	r1, [pc, #68]	; (800928c <_dtoa_r+0x65c>)
 8009246:	2000      	movs	r0, #0
 8009248:	f7f7 f81e 	bl	8000288 <__aeabi_dsub>
 800924c:	4602      	mov	r2, r0
 800924e:	460b      	mov	r3, r1
 8009250:	4630      	mov	r0, r6
 8009252:	4639      	mov	r1, r7
 8009254:	f7f7 fc42 	bl	8000adc <__aeabi_dcmplt>
 8009258:	2800      	cmp	r0, #0
 800925a:	f43f af27 	beq.w	80090ac <_dtoa_r+0x47c>
 800925e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009260:	1e6b      	subs	r3, r5, #1
 8009262:	930c      	str	r3, [sp, #48]	; 0x30
 8009264:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009268:	2b30      	cmp	r3, #48	; 0x30
 800926a:	d0f8      	beq.n	800925e <_dtoa_r+0x62e>
 800926c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009270:	e04a      	b.n	8009308 <_dtoa_r+0x6d8>
 8009272:	bf00      	nop
 8009274:	0800bcb8 	.word	0x0800bcb8
 8009278:	0800bc90 	.word	0x0800bc90
 800927c:	3ff00000 	.word	0x3ff00000
 8009280:	40240000 	.word	0x40240000
 8009284:	401c0000 	.word	0x401c0000
 8009288:	40140000 	.word	0x40140000
 800928c:	3fe00000 	.word	0x3fe00000
 8009290:	4baf      	ldr	r3, [pc, #700]	; (8009550 <_dtoa_r+0x920>)
 8009292:	f7f7 f9b1 	bl	80005f8 <__aeabi_dmul>
 8009296:	4606      	mov	r6, r0
 8009298:	460f      	mov	r7, r1
 800929a:	e7ac      	b.n	80091f6 <_dtoa_r+0x5c6>
 800929c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80092a0:	9d00      	ldr	r5, [sp, #0]
 80092a2:	4642      	mov	r2, r8
 80092a4:	464b      	mov	r3, r9
 80092a6:	4630      	mov	r0, r6
 80092a8:	4639      	mov	r1, r7
 80092aa:	f7f7 facf 	bl	800084c <__aeabi_ddiv>
 80092ae:	f7f7 fc53 	bl	8000b58 <__aeabi_d2iz>
 80092b2:	9002      	str	r0, [sp, #8]
 80092b4:	f7f7 f936 	bl	8000524 <__aeabi_i2d>
 80092b8:	4642      	mov	r2, r8
 80092ba:	464b      	mov	r3, r9
 80092bc:	f7f7 f99c 	bl	80005f8 <__aeabi_dmul>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	4630      	mov	r0, r6
 80092c6:	4639      	mov	r1, r7
 80092c8:	f7f6 ffde 	bl	8000288 <__aeabi_dsub>
 80092cc:	9e02      	ldr	r6, [sp, #8]
 80092ce:	9f01      	ldr	r7, [sp, #4]
 80092d0:	3630      	adds	r6, #48	; 0x30
 80092d2:	f805 6b01 	strb.w	r6, [r5], #1
 80092d6:	9e00      	ldr	r6, [sp, #0]
 80092d8:	1bae      	subs	r6, r5, r6
 80092da:	42b7      	cmp	r7, r6
 80092dc:	4602      	mov	r2, r0
 80092de:	460b      	mov	r3, r1
 80092e0:	d137      	bne.n	8009352 <_dtoa_r+0x722>
 80092e2:	f7f6 ffd3 	bl	800028c <__adddf3>
 80092e6:	4642      	mov	r2, r8
 80092e8:	464b      	mov	r3, r9
 80092ea:	4606      	mov	r6, r0
 80092ec:	460f      	mov	r7, r1
 80092ee:	f7f7 fc13 	bl	8000b18 <__aeabi_dcmpgt>
 80092f2:	b9c8      	cbnz	r0, 8009328 <_dtoa_r+0x6f8>
 80092f4:	4642      	mov	r2, r8
 80092f6:	464b      	mov	r3, r9
 80092f8:	4630      	mov	r0, r6
 80092fa:	4639      	mov	r1, r7
 80092fc:	f7f7 fbe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009300:	b110      	cbz	r0, 8009308 <_dtoa_r+0x6d8>
 8009302:	9b02      	ldr	r3, [sp, #8]
 8009304:	07d9      	lsls	r1, r3, #31
 8009306:	d40f      	bmi.n	8009328 <_dtoa_r+0x6f8>
 8009308:	4620      	mov	r0, r4
 800930a:	4659      	mov	r1, fp
 800930c:	f000 fe4a 	bl	8009fa4 <_Bfree>
 8009310:	2300      	movs	r3, #0
 8009312:	702b      	strb	r3, [r5, #0]
 8009314:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009316:	f10a 0001 	add.w	r0, sl, #1
 800931a:	6018      	str	r0, [r3, #0]
 800931c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800931e:	2b00      	cmp	r3, #0
 8009320:	f43f acd8 	beq.w	8008cd4 <_dtoa_r+0xa4>
 8009324:	601d      	str	r5, [r3, #0]
 8009326:	e4d5      	b.n	8008cd4 <_dtoa_r+0xa4>
 8009328:	f8cd a01c 	str.w	sl, [sp, #28]
 800932c:	462b      	mov	r3, r5
 800932e:	461d      	mov	r5, r3
 8009330:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009334:	2a39      	cmp	r2, #57	; 0x39
 8009336:	d108      	bne.n	800934a <_dtoa_r+0x71a>
 8009338:	9a00      	ldr	r2, [sp, #0]
 800933a:	429a      	cmp	r2, r3
 800933c:	d1f7      	bne.n	800932e <_dtoa_r+0x6fe>
 800933e:	9a07      	ldr	r2, [sp, #28]
 8009340:	9900      	ldr	r1, [sp, #0]
 8009342:	3201      	adds	r2, #1
 8009344:	9207      	str	r2, [sp, #28]
 8009346:	2230      	movs	r2, #48	; 0x30
 8009348:	700a      	strb	r2, [r1, #0]
 800934a:	781a      	ldrb	r2, [r3, #0]
 800934c:	3201      	adds	r2, #1
 800934e:	701a      	strb	r2, [r3, #0]
 8009350:	e78c      	b.n	800926c <_dtoa_r+0x63c>
 8009352:	4b7f      	ldr	r3, [pc, #508]	; (8009550 <_dtoa_r+0x920>)
 8009354:	2200      	movs	r2, #0
 8009356:	f7f7 f94f 	bl	80005f8 <__aeabi_dmul>
 800935a:	2200      	movs	r2, #0
 800935c:	2300      	movs	r3, #0
 800935e:	4606      	mov	r6, r0
 8009360:	460f      	mov	r7, r1
 8009362:	f7f7 fbb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009366:	2800      	cmp	r0, #0
 8009368:	d09b      	beq.n	80092a2 <_dtoa_r+0x672>
 800936a:	e7cd      	b.n	8009308 <_dtoa_r+0x6d8>
 800936c:	9a08      	ldr	r2, [sp, #32]
 800936e:	2a00      	cmp	r2, #0
 8009370:	f000 80c4 	beq.w	80094fc <_dtoa_r+0x8cc>
 8009374:	9a05      	ldr	r2, [sp, #20]
 8009376:	2a01      	cmp	r2, #1
 8009378:	f300 80a8 	bgt.w	80094cc <_dtoa_r+0x89c>
 800937c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800937e:	2a00      	cmp	r2, #0
 8009380:	f000 80a0 	beq.w	80094c4 <_dtoa_r+0x894>
 8009384:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009388:	9e06      	ldr	r6, [sp, #24]
 800938a:	4645      	mov	r5, r8
 800938c:	9a04      	ldr	r2, [sp, #16]
 800938e:	2101      	movs	r1, #1
 8009390:	441a      	add	r2, r3
 8009392:	4620      	mov	r0, r4
 8009394:	4498      	add	r8, r3
 8009396:	9204      	str	r2, [sp, #16]
 8009398:	f000 ff0a 	bl	800a1b0 <__i2b>
 800939c:	4607      	mov	r7, r0
 800939e:	2d00      	cmp	r5, #0
 80093a0:	dd0b      	ble.n	80093ba <_dtoa_r+0x78a>
 80093a2:	9b04      	ldr	r3, [sp, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	dd08      	ble.n	80093ba <_dtoa_r+0x78a>
 80093a8:	42ab      	cmp	r3, r5
 80093aa:	9a04      	ldr	r2, [sp, #16]
 80093ac:	bfa8      	it	ge
 80093ae:	462b      	movge	r3, r5
 80093b0:	eba8 0803 	sub.w	r8, r8, r3
 80093b4:	1aed      	subs	r5, r5, r3
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	9304      	str	r3, [sp, #16]
 80093ba:	9b06      	ldr	r3, [sp, #24]
 80093bc:	b1fb      	cbz	r3, 80093fe <_dtoa_r+0x7ce>
 80093be:	9b08      	ldr	r3, [sp, #32]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 809f 	beq.w	8009504 <_dtoa_r+0x8d4>
 80093c6:	2e00      	cmp	r6, #0
 80093c8:	dd11      	ble.n	80093ee <_dtoa_r+0x7be>
 80093ca:	4639      	mov	r1, r7
 80093cc:	4632      	mov	r2, r6
 80093ce:	4620      	mov	r0, r4
 80093d0:	f000 ffaa 	bl	800a328 <__pow5mult>
 80093d4:	465a      	mov	r2, fp
 80093d6:	4601      	mov	r1, r0
 80093d8:	4607      	mov	r7, r0
 80093da:	4620      	mov	r0, r4
 80093dc:	f000 fefe 	bl	800a1dc <__multiply>
 80093e0:	4659      	mov	r1, fp
 80093e2:	9007      	str	r0, [sp, #28]
 80093e4:	4620      	mov	r0, r4
 80093e6:	f000 fddd 	bl	8009fa4 <_Bfree>
 80093ea:	9b07      	ldr	r3, [sp, #28]
 80093ec:	469b      	mov	fp, r3
 80093ee:	9b06      	ldr	r3, [sp, #24]
 80093f0:	1b9a      	subs	r2, r3, r6
 80093f2:	d004      	beq.n	80093fe <_dtoa_r+0x7ce>
 80093f4:	4659      	mov	r1, fp
 80093f6:	4620      	mov	r0, r4
 80093f8:	f000 ff96 	bl	800a328 <__pow5mult>
 80093fc:	4683      	mov	fp, r0
 80093fe:	2101      	movs	r1, #1
 8009400:	4620      	mov	r0, r4
 8009402:	f000 fed5 	bl	800a1b0 <__i2b>
 8009406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009408:	2b00      	cmp	r3, #0
 800940a:	4606      	mov	r6, r0
 800940c:	dd7c      	ble.n	8009508 <_dtoa_r+0x8d8>
 800940e:	461a      	mov	r2, r3
 8009410:	4601      	mov	r1, r0
 8009412:	4620      	mov	r0, r4
 8009414:	f000 ff88 	bl	800a328 <__pow5mult>
 8009418:	9b05      	ldr	r3, [sp, #20]
 800941a:	2b01      	cmp	r3, #1
 800941c:	4606      	mov	r6, r0
 800941e:	dd76      	ble.n	800950e <_dtoa_r+0x8de>
 8009420:	2300      	movs	r3, #0
 8009422:	9306      	str	r3, [sp, #24]
 8009424:	6933      	ldr	r3, [r6, #16]
 8009426:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800942a:	6918      	ldr	r0, [r3, #16]
 800942c:	f000 fe70 	bl	800a110 <__hi0bits>
 8009430:	f1c0 0020 	rsb	r0, r0, #32
 8009434:	9b04      	ldr	r3, [sp, #16]
 8009436:	4418      	add	r0, r3
 8009438:	f010 001f 	ands.w	r0, r0, #31
 800943c:	f000 8086 	beq.w	800954c <_dtoa_r+0x91c>
 8009440:	f1c0 0320 	rsb	r3, r0, #32
 8009444:	2b04      	cmp	r3, #4
 8009446:	dd7f      	ble.n	8009548 <_dtoa_r+0x918>
 8009448:	f1c0 001c 	rsb	r0, r0, #28
 800944c:	9b04      	ldr	r3, [sp, #16]
 800944e:	4403      	add	r3, r0
 8009450:	4480      	add	r8, r0
 8009452:	4405      	add	r5, r0
 8009454:	9304      	str	r3, [sp, #16]
 8009456:	f1b8 0f00 	cmp.w	r8, #0
 800945a:	dd05      	ble.n	8009468 <_dtoa_r+0x838>
 800945c:	4659      	mov	r1, fp
 800945e:	4642      	mov	r2, r8
 8009460:	4620      	mov	r0, r4
 8009462:	f000 ffbb 	bl	800a3dc <__lshift>
 8009466:	4683      	mov	fp, r0
 8009468:	9b04      	ldr	r3, [sp, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	dd05      	ble.n	800947a <_dtoa_r+0x84a>
 800946e:	4631      	mov	r1, r6
 8009470:	461a      	mov	r2, r3
 8009472:	4620      	mov	r0, r4
 8009474:	f000 ffb2 	bl	800a3dc <__lshift>
 8009478:	4606      	mov	r6, r0
 800947a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800947c:	2b00      	cmp	r3, #0
 800947e:	d069      	beq.n	8009554 <_dtoa_r+0x924>
 8009480:	4631      	mov	r1, r6
 8009482:	4658      	mov	r0, fp
 8009484:	f001 f816 	bl	800a4b4 <__mcmp>
 8009488:	2800      	cmp	r0, #0
 800948a:	da63      	bge.n	8009554 <_dtoa_r+0x924>
 800948c:	2300      	movs	r3, #0
 800948e:	4659      	mov	r1, fp
 8009490:	220a      	movs	r2, #10
 8009492:	4620      	mov	r0, r4
 8009494:	f000 fda8 	bl	8009fe8 <__multadd>
 8009498:	9b08      	ldr	r3, [sp, #32]
 800949a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800949e:	4683      	mov	fp, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 818f 	beq.w	80097c4 <_dtoa_r+0xb94>
 80094a6:	4639      	mov	r1, r7
 80094a8:	2300      	movs	r3, #0
 80094aa:	220a      	movs	r2, #10
 80094ac:	4620      	mov	r0, r4
 80094ae:	f000 fd9b 	bl	8009fe8 <__multadd>
 80094b2:	f1b9 0f00 	cmp.w	r9, #0
 80094b6:	4607      	mov	r7, r0
 80094b8:	f300 808e 	bgt.w	80095d8 <_dtoa_r+0x9a8>
 80094bc:	9b05      	ldr	r3, [sp, #20]
 80094be:	2b02      	cmp	r3, #2
 80094c0:	dc50      	bgt.n	8009564 <_dtoa_r+0x934>
 80094c2:	e089      	b.n	80095d8 <_dtoa_r+0x9a8>
 80094c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80094ca:	e75d      	b.n	8009388 <_dtoa_r+0x758>
 80094cc:	9b01      	ldr	r3, [sp, #4]
 80094ce:	1e5e      	subs	r6, r3, #1
 80094d0:	9b06      	ldr	r3, [sp, #24]
 80094d2:	42b3      	cmp	r3, r6
 80094d4:	bfbf      	itttt	lt
 80094d6:	9b06      	ldrlt	r3, [sp, #24]
 80094d8:	9606      	strlt	r6, [sp, #24]
 80094da:	1af2      	sublt	r2, r6, r3
 80094dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80094de:	bfb6      	itet	lt
 80094e0:	189b      	addlt	r3, r3, r2
 80094e2:	1b9e      	subge	r6, r3, r6
 80094e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80094e6:	9b01      	ldr	r3, [sp, #4]
 80094e8:	bfb8      	it	lt
 80094ea:	2600      	movlt	r6, #0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	bfb5      	itete	lt
 80094f0:	eba8 0503 	sublt.w	r5, r8, r3
 80094f4:	9b01      	ldrge	r3, [sp, #4]
 80094f6:	2300      	movlt	r3, #0
 80094f8:	4645      	movge	r5, r8
 80094fa:	e747      	b.n	800938c <_dtoa_r+0x75c>
 80094fc:	9e06      	ldr	r6, [sp, #24]
 80094fe:	9f08      	ldr	r7, [sp, #32]
 8009500:	4645      	mov	r5, r8
 8009502:	e74c      	b.n	800939e <_dtoa_r+0x76e>
 8009504:	9a06      	ldr	r2, [sp, #24]
 8009506:	e775      	b.n	80093f4 <_dtoa_r+0x7c4>
 8009508:	9b05      	ldr	r3, [sp, #20]
 800950a:	2b01      	cmp	r3, #1
 800950c:	dc18      	bgt.n	8009540 <_dtoa_r+0x910>
 800950e:	9b02      	ldr	r3, [sp, #8]
 8009510:	b9b3      	cbnz	r3, 8009540 <_dtoa_r+0x910>
 8009512:	9b03      	ldr	r3, [sp, #12]
 8009514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009518:	b9a3      	cbnz	r3, 8009544 <_dtoa_r+0x914>
 800951a:	9b03      	ldr	r3, [sp, #12]
 800951c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009520:	0d1b      	lsrs	r3, r3, #20
 8009522:	051b      	lsls	r3, r3, #20
 8009524:	b12b      	cbz	r3, 8009532 <_dtoa_r+0x902>
 8009526:	9b04      	ldr	r3, [sp, #16]
 8009528:	3301      	adds	r3, #1
 800952a:	9304      	str	r3, [sp, #16]
 800952c:	f108 0801 	add.w	r8, r8, #1
 8009530:	2301      	movs	r3, #1
 8009532:	9306      	str	r3, [sp, #24]
 8009534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009536:	2b00      	cmp	r3, #0
 8009538:	f47f af74 	bne.w	8009424 <_dtoa_r+0x7f4>
 800953c:	2001      	movs	r0, #1
 800953e:	e779      	b.n	8009434 <_dtoa_r+0x804>
 8009540:	2300      	movs	r3, #0
 8009542:	e7f6      	b.n	8009532 <_dtoa_r+0x902>
 8009544:	9b02      	ldr	r3, [sp, #8]
 8009546:	e7f4      	b.n	8009532 <_dtoa_r+0x902>
 8009548:	d085      	beq.n	8009456 <_dtoa_r+0x826>
 800954a:	4618      	mov	r0, r3
 800954c:	301c      	adds	r0, #28
 800954e:	e77d      	b.n	800944c <_dtoa_r+0x81c>
 8009550:	40240000 	.word	0x40240000
 8009554:	9b01      	ldr	r3, [sp, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	dc38      	bgt.n	80095cc <_dtoa_r+0x99c>
 800955a:	9b05      	ldr	r3, [sp, #20]
 800955c:	2b02      	cmp	r3, #2
 800955e:	dd35      	ble.n	80095cc <_dtoa_r+0x99c>
 8009560:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009564:	f1b9 0f00 	cmp.w	r9, #0
 8009568:	d10d      	bne.n	8009586 <_dtoa_r+0x956>
 800956a:	4631      	mov	r1, r6
 800956c:	464b      	mov	r3, r9
 800956e:	2205      	movs	r2, #5
 8009570:	4620      	mov	r0, r4
 8009572:	f000 fd39 	bl	8009fe8 <__multadd>
 8009576:	4601      	mov	r1, r0
 8009578:	4606      	mov	r6, r0
 800957a:	4658      	mov	r0, fp
 800957c:	f000 ff9a 	bl	800a4b4 <__mcmp>
 8009580:	2800      	cmp	r0, #0
 8009582:	f73f adbd 	bgt.w	8009100 <_dtoa_r+0x4d0>
 8009586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009588:	9d00      	ldr	r5, [sp, #0]
 800958a:	ea6f 0a03 	mvn.w	sl, r3
 800958e:	f04f 0800 	mov.w	r8, #0
 8009592:	4631      	mov	r1, r6
 8009594:	4620      	mov	r0, r4
 8009596:	f000 fd05 	bl	8009fa4 <_Bfree>
 800959a:	2f00      	cmp	r7, #0
 800959c:	f43f aeb4 	beq.w	8009308 <_dtoa_r+0x6d8>
 80095a0:	f1b8 0f00 	cmp.w	r8, #0
 80095a4:	d005      	beq.n	80095b2 <_dtoa_r+0x982>
 80095a6:	45b8      	cmp	r8, r7
 80095a8:	d003      	beq.n	80095b2 <_dtoa_r+0x982>
 80095aa:	4641      	mov	r1, r8
 80095ac:	4620      	mov	r0, r4
 80095ae:	f000 fcf9 	bl	8009fa4 <_Bfree>
 80095b2:	4639      	mov	r1, r7
 80095b4:	4620      	mov	r0, r4
 80095b6:	f000 fcf5 	bl	8009fa4 <_Bfree>
 80095ba:	e6a5      	b.n	8009308 <_dtoa_r+0x6d8>
 80095bc:	2600      	movs	r6, #0
 80095be:	4637      	mov	r7, r6
 80095c0:	e7e1      	b.n	8009586 <_dtoa_r+0x956>
 80095c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80095c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80095c8:	4637      	mov	r7, r6
 80095ca:	e599      	b.n	8009100 <_dtoa_r+0x4d0>
 80095cc:	9b08      	ldr	r3, [sp, #32]
 80095ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 80fd 	beq.w	80097d2 <_dtoa_r+0xba2>
 80095d8:	2d00      	cmp	r5, #0
 80095da:	dd05      	ble.n	80095e8 <_dtoa_r+0x9b8>
 80095dc:	4639      	mov	r1, r7
 80095de:	462a      	mov	r2, r5
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 fefb 	bl	800a3dc <__lshift>
 80095e6:	4607      	mov	r7, r0
 80095e8:	9b06      	ldr	r3, [sp, #24]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d05c      	beq.n	80096a8 <_dtoa_r+0xa78>
 80095ee:	6879      	ldr	r1, [r7, #4]
 80095f0:	4620      	mov	r0, r4
 80095f2:	f000 fc97 	bl	8009f24 <_Balloc>
 80095f6:	4605      	mov	r5, r0
 80095f8:	b928      	cbnz	r0, 8009606 <_dtoa_r+0x9d6>
 80095fa:	4b80      	ldr	r3, [pc, #512]	; (80097fc <_dtoa_r+0xbcc>)
 80095fc:	4602      	mov	r2, r0
 80095fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009602:	f7ff bb2e 	b.w	8008c62 <_dtoa_r+0x32>
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	3202      	adds	r2, #2
 800960a:	0092      	lsls	r2, r2, #2
 800960c:	f107 010c 	add.w	r1, r7, #12
 8009610:	300c      	adds	r0, #12
 8009612:	f7fd fd15 	bl	8007040 <memcpy>
 8009616:	2201      	movs	r2, #1
 8009618:	4629      	mov	r1, r5
 800961a:	4620      	mov	r0, r4
 800961c:	f000 fede 	bl	800a3dc <__lshift>
 8009620:	9b00      	ldr	r3, [sp, #0]
 8009622:	3301      	adds	r3, #1
 8009624:	9301      	str	r3, [sp, #4]
 8009626:	9b00      	ldr	r3, [sp, #0]
 8009628:	444b      	add	r3, r9
 800962a:	9307      	str	r3, [sp, #28]
 800962c:	9b02      	ldr	r3, [sp, #8]
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	46b8      	mov	r8, r7
 8009634:	9306      	str	r3, [sp, #24]
 8009636:	4607      	mov	r7, r0
 8009638:	9b01      	ldr	r3, [sp, #4]
 800963a:	4631      	mov	r1, r6
 800963c:	3b01      	subs	r3, #1
 800963e:	4658      	mov	r0, fp
 8009640:	9302      	str	r3, [sp, #8]
 8009642:	f7ff fa67 	bl	8008b14 <quorem>
 8009646:	4603      	mov	r3, r0
 8009648:	3330      	adds	r3, #48	; 0x30
 800964a:	9004      	str	r0, [sp, #16]
 800964c:	4641      	mov	r1, r8
 800964e:	4658      	mov	r0, fp
 8009650:	9308      	str	r3, [sp, #32]
 8009652:	f000 ff2f 	bl	800a4b4 <__mcmp>
 8009656:	463a      	mov	r2, r7
 8009658:	4681      	mov	r9, r0
 800965a:	4631      	mov	r1, r6
 800965c:	4620      	mov	r0, r4
 800965e:	f000 ff45 	bl	800a4ec <__mdiff>
 8009662:	68c2      	ldr	r2, [r0, #12]
 8009664:	9b08      	ldr	r3, [sp, #32]
 8009666:	4605      	mov	r5, r0
 8009668:	bb02      	cbnz	r2, 80096ac <_dtoa_r+0xa7c>
 800966a:	4601      	mov	r1, r0
 800966c:	4658      	mov	r0, fp
 800966e:	f000 ff21 	bl	800a4b4 <__mcmp>
 8009672:	9b08      	ldr	r3, [sp, #32]
 8009674:	4602      	mov	r2, r0
 8009676:	4629      	mov	r1, r5
 8009678:	4620      	mov	r0, r4
 800967a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800967e:	f000 fc91 	bl	8009fa4 <_Bfree>
 8009682:	9b05      	ldr	r3, [sp, #20]
 8009684:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009686:	9d01      	ldr	r5, [sp, #4]
 8009688:	ea43 0102 	orr.w	r1, r3, r2
 800968c:	9b06      	ldr	r3, [sp, #24]
 800968e:	430b      	orrs	r3, r1
 8009690:	9b08      	ldr	r3, [sp, #32]
 8009692:	d10d      	bne.n	80096b0 <_dtoa_r+0xa80>
 8009694:	2b39      	cmp	r3, #57	; 0x39
 8009696:	d029      	beq.n	80096ec <_dtoa_r+0xabc>
 8009698:	f1b9 0f00 	cmp.w	r9, #0
 800969c:	dd01      	ble.n	80096a2 <_dtoa_r+0xa72>
 800969e:	9b04      	ldr	r3, [sp, #16]
 80096a0:	3331      	adds	r3, #49	; 0x31
 80096a2:	9a02      	ldr	r2, [sp, #8]
 80096a4:	7013      	strb	r3, [r2, #0]
 80096a6:	e774      	b.n	8009592 <_dtoa_r+0x962>
 80096a8:	4638      	mov	r0, r7
 80096aa:	e7b9      	b.n	8009620 <_dtoa_r+0x9f0>
 80096ac:	2201      	movs	r2, #1
 80096ae:	e7e2      	b.n	8009676 <_dtoa_r+0xa46>
 80096b0:	f1b9 0f00 	cmp.w	r9, #0
 80096b4:	db06      	blt.n	80096c4 <_dtoa_r+0xa94>
 80096b6:	9905      	ldr	r1, [sp, #20]
 80096b8:	ea41 0909 	orr.w	r9, r1, r9
 80096bc:	9906      	ldr	r1, [sp, #24]
 80096be:	ea59 0101 	orrs.w	r1, r9, r1
 80096c2:	d120      	bne.n	8009706 <_dtoa_r+0xad6>
 80096c4:	2a00      	cmp	r2, #0
 80096c6:	ddec      	ble.n	80096a2 <_dtoa_r+0xa72>
 80096c8:	4659      	mov	r1, fp
 80096ca:	2201      	movs	r2, #1
 80096cc:	4620      	mov	r0, r4
 80096ce:	9301      	str	r3, [sp, #4]
 80096d0:	f000 fe84 	bl	800a3dc <__lshift>
 80096d4:	4631      	mov	r1, r6
 80096d6:	4683      	mov	fp, r0
 80096d8:	f000 feec 	bl	800a4b4 <__mcmp>
 80096dc:	2800      	cmp	r0, #0
 80096de:	9b01      	ldr	r3, [sp, #4]
 80096e0:	dc02      	bgt.n	80096e8 <_dtoa_r+0xab8>
 80096e2:	d1de      	bne.n	80096a2 <_dtoa_r+0xa72>
 80096e4:	07da      	lsls	r2, r3, #31
 80096e6:	d5dc      	bpl.n	80096a2 <_dtoa_r+0xa72>
 80096e8:	2b39      	cmp	r3, #57	; 0x39
 80096ea:	d1d8      	bne.n	800969e <_dtoa_r+0xa6e>
 80096ec:	9a02      	ldr	r2, [sp, #8]
 80096ee:	2339      	movs	r3, #57	; 0x39
 80096f0:	7013      	strb	r3, [r2, #0]
 80096f2:	462b      	mov	r3, r5
 80096f4:	461d      	mov	r5, r3
 80096f6:	3b01      	subs	r3, #1
 80096f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096fc:	2a39      	cmp	r2, #57	; 0x39
 80096fe:	d050      	beq.n	80097a2 <_dtoa_r+0xb72>
 8009700:	3201      	adds	r2, #1
 8009702:	701a      	strb	r2, [r3, #0]
 8009704:	e745      	b.n	8009592 <_dtoa_r+0x962>
 8009706:	2a00      	cmp	r2, #0
 8009708:	dd03      	ble.n	8009712 <_dtoa_r+0xae2>
 800970a:	2b39      	cmp	r3, #57	; 0x39
 800970c:	d0ee      	beq.n	80096ec <_dtoa_r+0xabc>
 800970e:	3301      	adds	r3, #1
 8009710:	e7c7      	b.n	80096a2 <_dtoa_r+0xa72>
 8009712:	9a01      	ldr	r2, [sp, #4]
 8009714:	9907      	ldr	r1, [sp, #28]
 8009716:	f802 3c01 	strb.w	r3, [r2, #-1]
 800971a:	428a      	cmp	r2, r1
 800971c:	d02a      	beq.n	8009774 <_dtoa_r+0xb44>
 800971e:	4659      	mov	r1, fp
 8009720:	2300      	movs	r3, #0
 8009722:	220a      	movs	r2, #10
 8009724:	4620      	mov	r0, r4
 8009726:	f000 fc5f 	bl	8009fe8 <__multadd>
 800972a:	45b8      	cmp	r8, r7
 800972c:	4683      	mov	fp, r0
 800972e:	f04f 0300 	mov.w	r3, #0
 8009732:	f04f 020a 	mov.w	r2, #10
 8009736:	4641      	mov	r1, r8
 8009738:	4620      	mov	r0, r4
 800973a:	d107      	bne.n	800974c <_dtoa_r+0xb1c>
 800973c:	f000 fc54 	bl	8009fe8 <__multadd>
 8009740:	4680      	mov	r8, r0
 8009742:	4607      	mov	r7, r0
 8009744:	9b01      	ldr	r3, [sp, #4]
 8009746:	3301      	adds	r3, #1
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	e775      	b.n	8009638 <_dtoa_r+0xa08>
 800974c:	f000 fc4c 	bl	8009fe8 <__multadd>
 8009750:	4639      	mov	r1, r7
 8009752:	4680      	mov	r8, r0
 8009754:	2300      	movs	r3, #0
 8009756:	220a      	movs	r2, #10
 8009758:	4620      	mov	r0, r4
 800975a:	f000 fc45 	bl	8009fe8 <__multadd>
 800975e:	4607      	mov	r7, r0
 8009760:	e7f0      	b.n	8009744 <_dtoa_r+0xb14>
 8009762:	f1b9 0f00 	cmp.w	r9, #0
 8009766:	9a00      	ldr	r2, [sp, #0]
 8009768:	bfcc      	ite	gt
 800976a:	464d      	movgt	r5, r9
 800976c:	2501      	movle	r5, #1
 800976e:	4415      	add	r5, r2
 8009770:	f04f 0800 	mov.w	r8, #0
 8009774:	4659      	mov	r1, fp
 8009776:	2201      	movs	r2, #1
 8009778:	4620      	mov	r0, r4
 800977a:	9301      	str	r3, [sp, #4]
 800977c:	f000 fe2e 	bl	800a3dc <__lshift>
 8009780:	4631      	mov	r1, r6
 8009782:	4683      	mov	fp, r0
 8009784:	f000 fe96 	bl	800a4b4 <__mcmp>
 8009788:	2800      	cmp	r0, #0
 800978a:	dcb2      	bgt.n	80096f2 <_dtoa_r+0xac2>
 800978c:	d102      	bne.n	8009794 <_dtoa_r+0xb64>
 800978e:	9b01      	ldr	r3, [sp, #4]
 8009790:	07db      	lsls	r3, r3, #31
 8009792:	d4ae      	bmi.n	80096f2 <_dtoa_r+0xac2>
 8009794:	462b      	mov	r3, r5
 8009796:	461d      	mov	r5, r3
 8009798:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800979c:	2a30      	cmp	r2, #48	; 0x30
 800979e:	d0fa      	beq.n	8009796 <_dtoa_r+0xb66>
 80097a0:	e6f7      	b.n	8009592 <_dtoa_r+0x962>
 80097a2:	9a00      	ldr	r2, [sp, #0]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d1a5      	bne.n	80096f4 <_dtoa_r+0xac4>
 80097a8:	f10a 0a01 	add.w	sl, sl, #1
 80097ac:	2331      	movs	r3, #49	; 0x31
 80097ae:	e779      	b.n	80096a4 <_dtoa_r+0xa74>
 80097b0:	4b13      	ldr	r3, [pc, #76]	; (8009800 <_dtoa_r+0xbd0>)
 80097b2:	f7ff baaf 	b.w	8008d14 <_dtoa_r+0xe4>
 80097b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f47f aa86 	bne.w	8008cca <_dtoa_r+0x9a>
 80097be:	4b11      	ldr	r3, [pc, #68]	; (8009804 <_dtoa_r+0xbd4>)
 80097c0:	f7ff baa8 	b.w	8008d14 <_dtoa_r+0xe4>
 80097c4:	f1b9 0f00 	cmp.w	r9, #0
 80097c8:	dc03      	bgt.n	80097d2 <_dtoa_r+0xba2>
 80097ca:	9b05      	ldr	r3, [sp, #20]
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	f73f aec9 	bgt.w	8009564 <_dtoa_r+0x934>
 80097d2:	9d00      	ldr	r5, [sp, #0]
 80097d4:	4631      	mov	r1, r6
 80097d6:	4658      	mov	r0, fp
 80097d8:	f7ff f99c 	bl	8008b14 <quorem>
 80097dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80097e0:	f805 3b01 	strb.w	r3, [r5], #1
 80097e4:	9a00      	ldr	r2, [sp, #0]
 80097e6:	1aaa      	subs	r2, r5, r2
 80097e8:	4591      	cmp	r9, r2
 80097ea:	ddba      	ble.n	8009762 <_dtoa_r+0xb32>
 80097ec:	4659      	mov	r1, fp
 80097ee:	2300      	movs	r3, #0
 80097f0:	220a      	movs	r2, #10
 80097f2:	4620      	mov	r0, r4
 80097f4:	f000 fbf8 	bl	8009fe8 <__multadd>
 80097f8:	4683      	mov	fp, r0
 80097fa:	e7eb      	b.n	80097d4 <_dtoa_r+0xba4>
 80097fc:	0800bb9c 	.word	0x0800bb9c
 8009800:	0800b99c 	.word	0x0800b99c
 8009804:	0800bb19 	.word	0x0800bb19

08009808 <rshift>:
 8009808:	6903      	ldr	r3, [r0, #16]
 800980a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800980e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009812:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009816:	f100 0414 	add.w	r4, r0, #20
 800981a:	dd45      	ble.n	80098a8 <rshift+0xa0>
 800981c:	f011 011f 	ands.w	r1, r1, #31
 8009820:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009824:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009828:	d10c      	bne.n	8009844 <rshift+0x3c>
 800982a:	f100 0710 	add.w	r7, r0, #16
 800982e:	4629      	mov	r1, r5
 8009830:	42b1      	cmp	r1, r6
 8009832:	d334      	bcc.n	800989e <rshift+0x96>
 8009834:	1a9b      	subs	r3, r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	1eea      	subs	r2, r5, #3
 800983a:	4296      	cmp	r6, r2
 800983c:	bf38      	it	cc
 800983e:	2300      	movcc	r3, #0
 8009840:	4423      	add	r3, r4
 8009842:	e015      	b.n	8009870 <rshift+0x68>
 8009844:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009848:	f1c1 0820 	rsb	r8, r1, #32
 800984c:	40cf      	lsrs	r7, r1
 800984e:	f105 0e04 	add.w	lr, r5, #4
 8009852:	46a1      	mov	r9, r4
 8009854:	4576      	cmp	r6, lr
 8009856:	46f4      	mov	ip, lr
 8009858:	d815      	bhi.n	8009886 <rshift+0x7e>
 800985a:	1a9b      	subs	r3, r3, r2
 800985c:	009a      	lsls	r2, r3, #2
 800985e:	3a04      	subs	r2, #4
 8009860:	3501      	adds	r5, #1
 8009862:	42ae      	cmp	r6, r5
 8009864:	bf38      	it	cc
 8009866:	2200      	movcc	r2, #0
 8009868:	18a3      	adds	r3, r4, r2
 800986a:	50a7      	str	r7, [r4, r2]
 800986c:	b107      	cbz	r7, 8009870 <rshift+0x68>
 800986e:	3304      	adds	r3, #4
 8009870:	1b1a      	subs	r2, r3, r4
 8009872:	42a3      	cmp	r3, r4
 8009874:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009878:	bf08      	it	eq
 800987a:	2300      	moveq	r3, #0
 800987c:	6102      	str	r2, [r0, #16]
 800987e:	bf08      	it	eq
 8009880:	6143      	streq	r3, [r0, #20]
 8009882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009886:	f8dc c000 	ldr.w	ip, [ip]
 800988a:	fa0c fc08 	lsl.w	ip, ip, r8
 800988e:	ea4c 0707 	orr.w	r7, ip, r7
 8009892:	f849 7b04 	str.w	r7, [r9], #4
 8009896:	f85e 7b04 	ldr.w	r7, [lr], #4
 800989a:	40cf      	lsrs	r7, r1
 800989c:	e7da      	b.n	8009854 <rshift+0x4c>
 800989e:	f851 cb04 	ldr.w	ip, [r1], #4
 80098a2:	f847 cf04 	str.w	ip, [r7, #4]!
 80098a6:	e7c3      	b.n	8009830 <rshift+0x28>
 80098a8:	4623      	mov	r3, r4
 80098aa:	e7e1      	b.n	8009870 <rshift+0x68>

080098ac <__hexdig_fun>:
 80098ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80098b0:	2b09      	cmp	r3, #9
 80098b2:	d802      	bhi.n	80098ba <__hexdig_fun+0xe>
 80098b4:	3820      	subs	r0, #32
 80098b6:	b2c0      	uxtb	r0, r0
 80098b8:	4770      	bx	lr
 80098ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80098be:	2b05      	cmp	r3, #5
 80098c0:	d801      	bhi.n	80098c6 <__hexdig_fun+0x1a>
 80098c2:	3847      	subs	r0, #71	; 0x47
 80098c4:	e7f7      	b.n	80098b6 <__hexdig_fun+0xa>
 80098c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80098ca:	2b05      	cmp	r3, #5
 80098cc:	d801      	bhi.n	80098d2 <__hexdig_fun+0x26>
 80098ce:	3827      	subs	r0, #39	; 0x27
 80098d0:	e7f1      	b.n	80098b6 <__hexdig_fun+0xa>
 80098d2:	2000      	movs	r0, #0
 80098d4:	4770      	bx	lr
	...

080098d8 <__gethex>:
 80098d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	ed2d 8b02 	vpush	{d8}
 80098e0:	b089      	sub	sp, #36	; 0x24
 80098e2:	ee08 0a10 	vmov	s16, r0
 80098e6:	9304      	str	r3, [sp, #16]
 80098e8:	4bbc      	ldr	r3, [pc, #752]	; (8009bdc <__gethex+0x304>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	9301      	str	r3, [sp, #4]
 80098ee:	4618      	mov	r0, r3
 80098f0:	468b      	mov	fp, r1
 80098f2:	4690      	mov	r8, r2
 80098f4:	f7f6 fc6c 	bl	80001d0 <strlen>
 80098f8:	9b01      	ldr	r3, [sp, #4]
 80098fa:	f8db 2000 	ldr.w	r2, [fp]
 80098fe:	4403      	add	r3, r0
 8009900:	4682      	mov	sl, r0
 8009902:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009906:	9305      	str	r3, [sp, #20]
 8009908:	1c93      	adds	r3, r2, #2
 800990a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800990e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009912:	32fe      	adds	r2, #254	; 0xfe
 8009914:	18d1      	adds	r1, r2, r3
 8009916:	461f      	mov	r7, r3
 8009918:	f813 0b01 	ldrb.w	r0, [r3], #1
 800991c:	9100      	str	r1, [sp, #0]
 800991e:	2830      	cmp	r0, #48	; 0x30
 8009920:	d0f8      	beq.n	8009914 <__gethex+0x3c>
 8009922:	f7ff ffc3 	bl	80098ac <__hexdig_fun>
 8009926:	4604      	mov	r4, r0
 8009928:	2800      	cmp	r0, #0
 800992a:	d13a      	bne.n	80099a2 <__gethex+0xca>
 800992c:	9901      	ldr	r1, [sp, #4]
 800992e:	4652      	mov	r2, sl
 8009930:	4638      	mov	r0, r7
 8009932:	f001 f9e1 	bl	800acf8 <strncmp>
 8009936:	4605      	mov	r5, r0
 8009938:	2800      	cmp	r0, #0
 800993a:	d168      	bne.n	8009a0e <__gethex+0x136>
 800993c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009940:	eb07 060a 	add.w	r6, r7, sl
 8009944:	f7ff ffb2 	bl	80098ac <__hexdig_fun>
 8009948:	2800      	cmp	r0, #0
 800994a:	d062      	beq.n	8009a12 <__gethex+0x13a>
 800994c:	4633      	mov	r3, r6
 800994e:	7818      	ldrb	r0, [r3, #0]
 8009950:	2830      	cmp	r0, #48	; 0x30
 8009952:	461f      	mov	r7, r3
 8009954:	f103 0301 	add.w	r3, r3, #1
 8009958:	d0f9      	beq.n	800994e <__gethex+0x76>
 800995a:	f7ff ffa7 	bl	80098ac <__hexdig_fun>
 800995e:	2301      	movs	r3, #1
 8009960:	fab0 f480 	clz	r4, r0
 8009964:	0964      	lsrs	r4, r4, #5
 8009966:	4635      	mov	r5, r6
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	463a      	mov	r2, r7
 800996c:	4616      	mov	r6, r2
 800996e:	3201      	adds	r2, #1
 8009970:	7830      	ldrb	r0, [r6, #0]
 8009972:	f7ff ff9b 	bl	80098ac <__hexdig_fun>
 8009976:	2800      	cmp	r0, #0
 8009978:	d1f8      	bne.n	800996c <__gethex+0x94>
 800997a:	9901      	ldr	r1, [sp, #4]
 800997c:	4652      	mov	r2, sl
 800997e:	4630      	mov	r0, r6
 8009980:	f001 f9ba 	bl	800acf8 <strncmp>
 8009984:	b980      	cbnz	r0, 80099a8 <__gethex+0xd0>
 8009986:	b94d      	cbnz	r5, 800999c <__gethex+0xc4>
 8009988:	eb06 050a 	add.w	r5, r6, sl
 800998c:	462a      	mov	r2, r5
 800998e:	4616      	mov	r6, r2
 8009990:	3201      	adds	r2, #1
 8009992:	7830      	ldrb	r0, [r6, #0]
 8009994:	f7ff ff8a 	bl	80098ac <__hexdig_fun>
 8009998:	2800      	cmp	r0, #0
 800999a:	d1f8      	bne.n	800998e <__gethex+0xb6>
 800999c:	1bad      	subs	r5, r5, r6
 800999e:	00ad      	lsls	r5, r5, #2
 80099a0:	e004      	b.n	80099ac <__gethex+0xd4>
 80099a2:	2400      	movs	r4, #0
 80099a4:	4625      	mov	r5, r4
 80099a6:	e7e0      	b.n	800996a <__gethex+0x92>
 80099a8:	2d00      	cmp	r5, #0
 80099aa:	d1f7      	bne.n	800999c <__gethex+0xc4>
 80099ac:	7833      	ldrb	r3, [r6, #0]
 80099ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80099b2:	2b50      	cmp	r3, #80	; 0x50
 80099b4:	d13b      	bne.n	8009a2e <__gethex+0x156>
 80099b6:	7873      	ldrb	r3, [r6, #1]
 80099b8:	2b2b      	cmp	r3, #43	; 0x2b
 80099ba:	d02c      	beq.n	8009a16 <__gethex+0x13e>
 80099bc:	2b2d      	cmp	r3, #45	; 0x2d
 80099be:	d02e      	beq.n	8009a1e <__gethex+0x146>
 80099c0:	1c71      	adds	r1, r6, #1
 80099c2:	f04f 0900 	mov.w	r9, #0
 80099c6:	7808      	ldrb	r0, [r1, #0]
 80099c8:	f7ff ff70 	bl	80098ac <__hexdig_fun>
 80099cc:	1e43      	subs	r3, r0, #1
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b18      	cmp	r3, #24
 80099d2:	d82c      	bhi.n	8009a2e <__gethex+0x156>
 80099d4:	f1a0 0210 	sub.w	r2, r0, #16
 80099d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80099dc:	f7ff ff66 	bl	80098ac <__hexdig_fun>
 80099e0:	1e43      	subs	r3, r0, #1
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b18      	cmp	r3, #24
 80099e6:	d91d      	bls.n	8009a24 <__gethex+0x14c>
 80099e8:	f1b9 0f00 	cmp.w	r9, #0
 80099ec:	d000      	beq.n	80099f0 <__gethex+0x118>
 80099ee:	4252      	negs	r2, r2
 80099f0:	4415      	add	r5, r2
 80099f2:	f8cb 1000 	str.w	r1, [fp]
 80099f6:	b1e4      	cbz	r4, 8009a32 <__gethex+0x15a>
 80099f8:	9b00      	ldr	r3, [sp, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	bf14      	ite	ne
 80099fe:	2700      	movne	r7, #0
 8009a00:	2706      	moveq	r7, #6
 8009a02:	4638      	mov	r0, r7
 8009a04:	b009      	add	sp, #36	; 0x24
 8009a06:	ecbd 8b02 	vpop	{d8}
 8009a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0e:	463e      	mov	r6, r7
 8009a10:	4625      	mov	r5, r4
 8009a12:	2401      	movs	r4, #1
 8009a14:	e7ca      	b.n	80099ac <__gethex+0xd4>
 8009a16:	f04f 0900 	mov.w	r9, #0
 8009a1a:	1cb1      	adds	r1, r6, #2
 8009a1c:	e7d3      	b.n	80099c6 <__gethex+0xee>
 8009a1e:	f04f 0901 	mov.w	r9, #1
 8009a22:	e7fa      	b.n	8009a1a <__gethex+0x142>
 8009a24:	230a      	movs	r3, #10
 8009a26:	fb03 0202 	mla	r2, r3, r2, r0
 8009a2a:	3a10      	subs	r2, #16
 8009a2c:	e7d4      	b.n	80099d8 <__gethex+0x100>
 8009a2e:	4631      	mov	r1, r6
 8009a30:	e7df      	b.n	80099f2 <__gethex+0x11a>
 8009a32:	1bf3      	subs	r3, r6, r7
 8009a34:	3b01      	subs	r3, #1
 8009a36:	4621      	mov	r1, r4
 8009a38:	2b07      	cmp	r3, #7
 8009a3a:	dc0b      	bgt.n	8009a54 <__gethex+0x17c>
 8009a3c:	ee18 0a10 	vmov	r0, s16
 8009a40:	f000 fa70 	bl	8009f24 <_Balloc>
 8009a44:	4604      	mov	r4, r0
 8009a46:	b940      	cbnz	r0, 8009a5a <__gethex+0x182>
 8009a48:	4b65      	ldr	r3, [pc, #404]	; (8009be0 <__gethex+0x308>)
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	21de      	movs	r1, #222	; 0xde
 8009a4e:	4865      	ldr	r0, [pc, #404]	; (8009be4 <__gethex+0x30c>)
 8009a50:	f001 f972 	bl	800ad38 <__assert_func>
 8009a54:	3101      	adds	r1, #1
 8009a56:	105b      	asrs	r3, r3, #1
 8009a58:	e7ee      	b.n	8009a38 <__gethex+0x160>
 8009a5a:	f100 0914 	add.w	r9, r0, #20
 8009a5e:	f04f 0b00 	mov.w	fp, #0
 8009a62:	f1ca 0301 	rsb	r3, sl, #1
 8009a66:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a6a:	f8cd b000 	str.w	fp, [sp]
 8009a6e:	9306      	str	r3, [sp, #24]
 8009a70:	42b7      	cmp	r7, r6
 8009a72:	d340      	bcc.n	8009af6 <__gethex+0x21e>
 8009a74:	9802      	ldr	r0, [sp, #8]
 8009a76:	9b00      	ldr	r3, [sp, #0]
 8009a78:	f840 3b04 	str.w	r3, [r0], #4
 8009a7c:	eba0 0009 	sub.w	r0, r0, r9
 8009a80:	1080      	asrs	r0, r0, #2
 8009a82:	0146      	lsls	r6, r0, #5
 8009a84:	6120      	str	r0, [r4, #16]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 fb42 	bl	800a110 <__hi0bits>
 8009a8c:	1a30      	subs	r0, r6, r0
 8009a8e:	f8d8 6000 	ldr.w	r6, [r8]
 8009a92:	42b0      	cmp	r0, r6
 8009a94:	dd63      	ble.n	8009b5e <__gethex+0x286>
 8009a96:	1b87      	subs	r7, r0, r6
 8009a98:	4639      	mov	r1, r7
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f000 fedc 	bl	800a858 <__any_on>
 8009aa0:	4682      	mov	sl, r0
 8009aa2:	b1a8      	cbz	r0, 8009ad0 <__gethex+0x1f8>
 8009aa4:	1e7b      	subs	r3, r7, #1
 8009aa6:	1159      	asrs	r1, r3, #5
 8009aa8:	f003 021f 	and.w	r2, r3, #31
 8009aac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009ab0:	f04f 0a01 	mov.w	sl, #1
 8009ab4:	fa0a f202 	lsl.w	r2, sl, r2
 8009ab8:	420a      	tst	r2, r1
 8009aba:	d009      	beq.n	8009ad0 <__gethex+0x1f8>
 8009abc:	4553      	cmp	r3, sl
 8009abe:	dd05      	ble.n	8009acc <__gethex+0x1f4>
 8009ac0:	1eb9      	subs	r1, r7, #2
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 fec8 	bl	800a858 <__any_on>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d145      	bne.n	8009b58 <__gethex+0x280>
 8009acc:	f04f 0a02 	mov.w	sl, #2
 8009ad0:	4639      	mov	r1, r7
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f7ff fe98 	bl	8009808 <rshift>
 8009ad8:	443d      	add	r5, r7
 8009ada:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ade:	42ab      	cmp	r3, r5
 8009ae0:	da4c      	bge.n	8009b7c <__gethex+0x2a4>
 8009ae2:	ee18 0a10 	vmov	r0, s16
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	f000 fa5c 	bl	8009fa4 <_Bfree>
 8009aec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009aee:	2300      	movs	r3, #0
 8009af0:	6013      	str	r3, [r2, #0]
 8009af2:	27a3      	movs	r7, #163	; 0xa3
 8009af4:	e785      	b.n	8009a02 <__gethex+0x12a>
 8009af6:	1e73      	subs	r3, r6, #1
 8009af8:	9a05      	ldr	r2, [sp, #20]
 8009afa:	9303      	str	r3, [sp, #12]
 8009afc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d019      	beq.n	8009b38 <__gethex+0x260>
 8009b04:	f1bb 0f20 	cmp.w	fp, #32
 8009b08:	d107      	bne.n	8009b1a <__gethex+0x242>
 8009b0a:	9b02      	ldr	r3, [sp, #8]
 8009b0c:	9a00      	ldr	r2, [sp, #0]
 8009b0e:	f843 2b04 	str.w	r2, [r3], #4
 8009b12:	9302      	str	r3, [sp, #8]
 8009b14:	2300      	movs	r3, #0
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	469b      	mov	fp, r3
 8009b1a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009b1e:	f7ff fec5 	bl	80098ac <__hexdig_fun>
 8009b22:	9b00      	ldr	r3, [sp, #0]
 8009b24:	f000 000f 	and.w	r0, r0, #15
 8009b28:	fa00 f00b 	lsl.w	r0, r0, fp
 8009b2c:	4303      	orrs	r3, r0
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	f10b 0b04 	add.w	fp, fp, #4
 8009b34:	9b03      	ldr	r3, [sp, #12]
 8009b36:	e00d      	b.n	8009b54 <__gethex+0x27c>
 8009b38:	9b03      	ldr	r3, [sp, #12]
 8009b3a:	9a06      	ldr	r2, [sp, #24]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	42bb      	cmp	r3, r7
 8009b40:	d3e0      	bcc.n	8009b04 <__gethex+0x22c>
 8009b42:	4618      	mov	r0, r3
 8009b44:	9901      	ldr	r1, [sp, #4]
 8009b46:	9307      	str	r3, [sp, #28]
 8009b48:	4652      	mov	r2, sl
 8009b4a:	f001 f8d5 	bl	800acf8 <strncmp>
 8009b4e:	9b07      	ldr	r3, [sp, #28]
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d1d7      	bne.n	8009b04 <__gethex+0x22c>
 8009b54:	461e      	mov	r6, r3
 8009b56:	e78b      	b.n	8009a70 <__gethex+0x198>
 8009b58:	f04f 0a03 	mov.w	sl, #3
 8009b5c:	e7b8      	b.n	8009ad0 <__gethex+0x1f8>
 8009b5e:	da0a      	bge.n	8009b76 <__gethex+0x29e>
 8009b60:	1a37      	subs	r7, r6, r0
 8009b62:	4621      	mov	r1, r4
 8009b64:	ee18 0a10 	vmov	r0, s16
 8009b68:	463a      	mov	r2, r7
 8009b6a:	f000 fc37 	bl	800a3dc <__lshift>
 8009b6e:	1bed      	subs	r5, r5, r7
 8009b70:	4604      	mov	r4, r0
 8009b72:	f100 0914 	add.w	r9, r0, #20
 8009b76:	f04f 0a00 	mov.w	sl, #0
 8009b7a:	e7ae      	b.n	8009ada <__gethex+0x202>
 8009b7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009b80:	42a8      	cmp	r0, r5
 8009b82:	dd72      	ble.n	8009c6a <__gethex+0x392>
 8009b84:	1b45      	subs	r5, r0, r5
 8009b86:	42ae      	cmp	r6, r5
 8009b88:	dc36      	bgt.n	8009bf8 <__gethex+0x320>
 8009b8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d02a      	beq.n	8009be8 <__gethex+0x310>
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d02c      	beq.n	8009bf0 <__gethex+0x318>
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d115      	bne.n	8009bc6 <__gethex+0x2ee>
 8009b9a:	42ae      	cmp	r6, r5
 8009b9c:	d113      	bne.n	8009bc6 <__gethex+0x2ee>
 8009b9e:	2e01      	cmp	r6, #1
 8009ba0:	d10b      	bne.n	8009bba <__gethex+0x2e2>
 8009ba2:	9a04      	ldr	r2, [sp, #16]
 8009ba4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ba8:	6013      	str	r3, [r2, #0]
 8009baa:	2301      	movs	r3, #1
 8009bac:	6123      	str	r3, [r4, #16]
 8009bae:	f8c9 3000 	str.w	r3, [r9]
 8009bb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009bb4:	2762      	movs	r7, #98	; 0x62
 8009bb6:	601c      	str	r4, [r3, #0]
 8009bb8:	e723      	b.n	8009a02 <__gethex+0x12a>
 8009bba:	1e71      	subs	r1, r6, #1
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	f000 fe4b 	bl	800a858 <__any_on>
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	d1ed      	bne.n	8009ba2 <__gethex+0x2ca>
 8009bc6:	ee18 0a10 	vmov	r0, s16
 8009bca:	4621      	mov	r1, r4
 8009bcc:	f000 f9ea 	bl	8009fa4 <_Bfree>
 8009bd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	6013      	str	r3, [r2, #0]
 8009bd6:	2750      	movs	r7, #80	; 0x50
 8009bd8:	e713      	b.n	8009a02 <__gethex+0x12a>
 8009bda:	bf00      	nop
 8009bdc:	0800bc18 	.word	0x0800bc18
 8009be0:	0800bb9c 	.word	0x0800bb9c
 8009be4:	0800bbad 	.word	0x0800bbad
 8009be8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1eb      	bne.n	8009bc6 <__gethex+0x2ee>
 8009bee:	e7d8      	b.n	8009ba2 <__gethex+0x2ca>
 8009bf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1d5      	bne.n	8009ba2 <__gethex+0x2ca>
 8009bf6:	e7e6      	b.n	8009bc6 <__gethex+0x2ee>
 8009bf8:	1e6f      	subs	r7, r5, #1
 8009bfa:	f1ba 0f00 	cmp.w	sl, #0
 8009bfe:	d131      	bne.n	8009c64 <__gethex+0x38c>
 8009c00:	b127      	cbz	r7, 8009c0c <__gethex+0x334>
 8009c02:	4639      	mov	r1, r7
 8009c04:	4620      	mov	r0, r4
 8009c06:	f000 fe27 	bl	800a858 <__any_on>
 8009c0a:	4682      	mov	sl, r0
 8009c0c:	117b      	asrs	r3, r7, #5
 8009c0e:	2101      	movs	r1, #1
 8009c10:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009c14:	f007 071f 	and.w	r7, r7, #31
 8009c18:	fa01 f707 	lsl.w	r7, r1, r7
 8009c1c:	421f      	tst	r7, r3
 8009c1e:	4629      	mov	r1, r5
 8009c20:	4620      	mov	r0, r4
 8009c22:	bf18      	it	ne
 8009c24:	f04a 0a02 	orrne.w	sl, sl, #2
 8009c28:	1b76      	subs	r6, r6, r5
 8009c2a:	f7ff fded 	bl	8009808 <rshift>
 8009c2e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009c32:	2702      	movs	r7, #2
 8009c34:	f1ba 0f00 	cmp.w	sl, #0
 8009c38:	d048      	beq.n	8009ccc <__gethex+0x3f4>
 8009c3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d015      	beq.n	8009c6e <__gethex+0x396>
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	d017      	beq.n	8009c76 <__gethex+0x39e>
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d109      	bne.n	8009c5e <__gethex+0x386>
 8009c4a:	f01a 0f02 	tst.w	sl, #2
 8009c4e:	d006      	beq.n	8009c5e <__gethex+0x386>
 8009c50:	f8d9 0000 	ldr.w	r0, [r9]
 8009c54:	ea4a 0a00 	orr.w	sl, sl, r0
 8009c58:	f01a 0f01 	tst.w	sl, #1
 8009c5c:	d10e      	bne.n	8009c7c <__gethex+0x3a4>
 8009c5e:	f047 0710 	orr.w	r7, r7, #16
 8009c62:	e033      	b.n	8009ccc <__gethex+0x3f4>
 8009c64:	f04f 0a01 	mov.w	sl, #1
 8009c68:	e7d0      	b.n	8009c0c <__gethex+0x334>
 8009c6a:	2701      	movs	r7, #1
 8009c6c:	e7e2      	b.n	8009c34 <__gethex+0x35c>
 8009c6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c70:	f1c3 0301 	rsb	r3, r3, #1
 8009c74:	9315      	str	r3, [sp, #84]	; 0x54
 8009c76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0f0      	beq.n	8009c5e <__gethex+0x386>
 8009c7c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c80:	f104 0314 	add.w	r3, r4, #20
 8009c84:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009c88:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009c8c:	f04f 0c00 	mov.w	ip, #0
 8009c90:	4618      	mov	r0, r3
 8009c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c96:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009c9a:	d01c      	beq.n	8009cd6 <__gethex+0x3fe>
 8009c9c:	3201      	adds	r2, #1
 8009c9e:	6002      	str	r2, [r0, #0]
 8009ca0:	2f02      	cmp	r7, #2
 8009ca2:	f104 0314 	add.w	r3, r4, #20
 8009ca6:	d13f      	bne.n	8009d28 <__gethex+0x450>
 8009ca8:	f8d8 2000 	ldr.w	r2, [r8]
 8009cac:	3a01      	subs	r2, #1
 8009cae:	42b2      	cmp	r2, r6
 8009cb0:	d10a      	bne.n	8009cc8 <__gethex+0x3f0>
 8009cb2:	1171      	asrs	r1, r6, #5
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009cba:	f006 061f 	and.w	r6, r6, #31
 8009cbe:	fa02 f606 	lsl.w	r6, r2, r6
 8009cc2:	421e      	tst	r6, r3
 8009cc4:	bf18      	it	ne
 8009cc6:	4617      	movne	r7, r2
 8009cc8:	f047 0720 	orr.w	r7, r7, #32
 8009ccc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cce:	601c      	str	r4, [r3, #0]
 8009cd0:	9b04      	ldr	r3, [sp, #16]
 8009cd2:	601d      	str	r5, [r3, #0]
 8009cd4:	e695      	b.n	8009a02 <__gethex+0x12a>
 8009cd6:	4299      	cmp	r1, r3
 8009cd8:	f843 cc04 	str.w	ip, [r3, #-4]
 8009cdc:	d8d8      	bhi.n	8009c90 <__gethex+0x3b8>
 8009cde:	68a3      	ldr	r3, [r4, #8]
 8009ce0:	459b      	cmp	fp, r3
 8009ce2:	db19      	blt.n	8009d18 <__gethex+0x440>
 8009ce4:	6861      	ldr	r1, [r4, #4]
 8009ce6:	ee18 0a10 	vmov	r0, s16
 8009cea:	3101      	adds	r1, #1
 8009cec:	f000 f91a 	bl	8009f24 <_Balloc>
 8009cf0:	4681      	mov	r9, r0
 8009cf2:	b918      	cbnz	r0, 8009cfc <__gethex+0x424>
 8009cf4:	4b1a      	ldr	r3, [pc, #104]	; (8009d60 <__gethex+0x488>)
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	2184      	movs	r1, #132	; 0x84
 8009cfa:	e6a8      	b.n	8009a4e <__gethex+0x176>
 8009cfc:	6922      	ldr	r2, [r4, #16]
 8009cfe:	3202      	adds	r2, #2
 8009d00:	f104 010c 	add.w	r1, r4, #12
 8009d04:	0092      	lsls	r2, r2, #2
 8009d06:	300c      	adds	r0, #12
 8009d08:	f7fd f99a 	bl	8007040 <memcpy>
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	ee18 0a10 	vmov	r0, s16
 8009d12:	f000 f947 	bl	8009fa4 <_Bfree>
 8009d16:	464c      	mov	r4, r9
 8009d18:	6923      	ldr	r3, [r4, #16]
 8009d1a:	1c5a      	adds	r2, r3, #1
 8009d1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d20:	6122      	str	r2, [r4, #16]
 8009d22:	2201      	movs	r2, #1
 8009d24:	615a      	str	r2, [r3, #20]
 8009d26:	e7bb      	b.n	8009ca0 <__gethex+0x3c8>
 8009d28:	6922      	ldr	r2, [r4, #16]
 8009d2a:	455a      	cmp	r2, fp
 8009d2c:	dd0b      	ble.n	8009d46 <__gethex+0x46e>
 8009d2e:	2101      	movs	r1, #1
 8009d30:	4620      	mov	r0, r4
 8009d32:	f7ff fd69 	bl	8009808 <rshift>
 8009d36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d3a:	3501      	adds	r5, #1
 8009d3c:	42ab      	cmp	r3, r5
 8009d3e:	f6ff aed0 	blt.w	8009ae2 <__gethex+0x20a>
 8009d42:	2701      	movs	r7, #1
 8009d44:	e7c0      	b.n	8009cc8 <__gethex+0x3f0>
 8009d46:	f016 061f 	ands.w	r6, r6, #31
 8009d4a:	d0fa      	beq.n	8009d42 <__gethex+0x46a>
 8009d4c:	449a      	add	sl, r3
 8009d4e:	f1c6 0620 	rsb	r6, r6, #32
 8009d52:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009d56:	f000 f9db 	bl	800a110 <__hi0bits>
 8009d5a:	42b0      	cmp	r0, r6
 8009d5c:	dbe7      	blt.n	8009d2e <__gethex+0x456>
 8009d5e:	e7f0      	b.n	8009d42 <__gethex+0x46a>
 8009d60:	0800bb9c 	.word	0x0800bb9c

08009d64 <L_shift>:
 8009d64:	f1c2 0208 	rsb	r2, r2, #8
 8009d68:	0092      	lsls	r2, r2, #2
 8009d6a:	b570      	push	{r4, r5, r6, lr}
 8009d6c:	f1c2 0620 	rsb	r6, r2, #32
 8009d70:	6843      	ldr	r3, [r0, #4]
 8009d72:	6804      	ldr	r4, [r0, #0]
 8009d74:	fa03 f506 	lsl.w	r5, r3, r6
 8009d78:	432c      	orrs	r4, r5
 8009d7a:	40d3      	lsrs	r3, r2
 8009d7c:	6004      	str	r4, [r0, #0]
 8009d7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d82:	4288      	cmp	r0, r1
 8009d84:	d3f4      	bcc.n	8009d70 <L_shift+0xc>
 8009d86:	bd70      	pop	{r4, r5, r6, pc}

08009d88 <__match>:
 8009d88:	b530      	push	{r4, r5, lr}
 8009d8a:	6803      	ldr	r3, [r0, #0]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d92:	b914      	cbnz	r4, 8009d9a <__match+0x12>
 8009d94:	6003      	str	r3, [r0, #0]
 8009d96:	2001      	movs	r0, #1
 8009d98:	bd30      	pop	{r4, r5, pc}
 8009d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009da2:	2d19      	cmp	r5, #25
 8009da4:	bf98      	it	ls
 8009da6:	3220      	addls	r2, #32
 8009da8:	42a2      	cmp	r2, r4
 8009daa:	d0f0      	beq.n	8009d8e <__match+0x6>
 8009dac:	2000      	movs	r0, #0
 8009dae:	e7f3      	b.n	8009d98 <__match+0x10>

08009db0 <__hexnan>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	680b      	ldr	r3, [r1, #0]
 8009db6:	6801      	ldr	r1, [r0, #0]
 8009db8:	115e      	asrs	r6, r3, #5
 8009dba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009dbe:	f013 031f 	ands.w	r3, r3, #31
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	bf18      	it	ne
 8009dc6:	3604      	addne	r6, #4
 8009dc8:	2500      	movs	r5, #0
 8009dca:	1f37      	subs	r7, r6, #4
 8009dcc:	4682      	mov	sl, r0
 8009dce:	4690      	mov	r8, r2
 8009dd0:	9301      	str	r3, [sp, #4]
 8009dd2:	f846 5c04 	str.w	r5, [r6, #-4]
 8009dd6:	46b9      	mov	r9, r7
 8009dd8:	463c      	mov	r4, r7
 8009dda:	9502      	str	r5, [sp, #8]
 8009ddc:	46ab      	mov	fp, r5
 8009dde:	784a      	ldrb	r2, [r1, #1]
 8009de0:	1c4b      	adds	r3, r1, #1
 8009de2:	9303      	str	r3, [sp, #12]
 8009de4:	b342      	cbz	r2, 8009e38 <__hexnan+0x88>
 8009de6:	4610      	mov	r0, r2
 8009de8:	9105      	str	r1, [sp, #20]
 8009dea:	9204      	str	r2, [sp, #16]
 8009dec:	f7ff fd5e 	bl	80098ac <__hexdig_fun>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d14f      	bne.n	8009e94 <__hexnan+0xe4>
 8009df4:	9a04      	ldr	r2, [sp, #16]
 8009df6:	9905      	ldr	r1, [sp, #20]
 8009df8:	2a20      	cmp	r2, #32
 8009dfa:	d818      	bhi.n	8009e2e <__hexnan+0x7e>
 8009dfc:	9b02      	ldr	r3, [sp, #8]
 8009dfe:	459b      	cmp	fp, r3
 8009e00:	dd13      	ble.n	8009e2a <__hexnan+0x7a>
 8009e02:	454c      	cmp	r4, r9
 8009e04:	d206      	bcs.n	8009e14 <__hexnan+0x64>
 8009e06:	2d07      	cmp	r5, #7
 8009e08:	dc04      	bgt.n	8009e14 <__hexnan+0x64>
 8009e0a:	462a      	mov	r2, r5
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f7ff ffa8 	bl	8009d64 <L_shift>
 8009e14:	4544      	cmp	r4, r8
 8009e16:	d950      	bls.n	8009eba <__hexnan+0x10a>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f1a4 0904 	sub.w	r9, r4, #4
 8009e1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e22:	f8cd b008 	str.w	fp, [sp, #8]
 8009e26:	464c      	mov	r4, r9
 8009e28:	461d      	mov	r5, r3
 8009e2a:	9903      	ldr	r1, [sp, #12]
 8009e2c:	e7d7      	b.n	8009dde <__hexnan+0x2e>
 8009e2e:	2a29      	cmp	r2, #41	; 0x29
 8009e30:	d156      	bne.n	8009ee0 <__hexnan+0x130>
 8009e32:	3102      	adds	r1, #2
 8009e34:	f8ca 1000 	str.w	r1, [sl]
 8009e38:	f1bb 0f00 	cmp.w	fp, #0
 8009e3c:	d050      	beq.n	8009ee0 <__hexnan+0x130>
 8009e3e:	454c      	cmp	r4, r9
 8009e40:	d206      	bcs.n	8009e50 <__hexnan+0xa0>
 8009e42:	2d07      	cmp	r5, #7
 8009e44:	dc04      	bgt.n	8009e50 <__hexnan+0xa0>
 8009e46:	462a      	mov	r2, r5
 8009e48:	4649      	mov	r1, r9
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f7ff ff8a 	bl	8009d64 <L_shift>
 8009e50:	4544      	cmp	r4, r8
 8009e52:	d934      	bls.n	8009ebe <__hexnan+0x10e>
 8009e54:	f1a8 0204 	sub.w	r2, r8, #4
 8009e58:	4623      	mov	r3, r4
 8009e5a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009e5e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009e62:	429f      	cmp	r7, r3
 8009e64:	d2f9      	bcs.n	8009e5a <__hexnan+0xaa>
 8009e66:	1b3b      	subs	r3, r7, r4
 8009e68:	f023 0303 	bic.w	r3, r3, #3
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	3401      	adds	r4, #1
 8009e70:	3e03      	subs	r6, #3
 8009e72:	42b4      	cmp	r4, r6
 8009e74:	bf88      	it	hi
 8009e76:	2304      	movhi	r3, #4
 8009e78:	4443      	add	r3, r8
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f843 2b04 	str.w	r2, [r3], #4
 8009e80:	429f      	cmp	r7, r3
 8009e82:	d2fb      	bcs.n	8009e7c <__hexnan+0xcc>
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	b91b      	cbnz	r3, 8009e90 <__hexnan+0xe0>
 8009e88:	4547      	cmp	r7, r8
 8009e8a:	d127      	bne.n	8009edc <__hexnan+0x12c>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	603b      	str	r3, [r7, #0]
 8009e90:	2005      	movs	r0, #5
 8009e92:	e026      	b.n	8009ee2 <__hexnan+0x132>
 8009e94:	3501      	adds	r5, #1
 8009e96:	2d08      	cmp	r5, #8
 8009e98:	f10b 0b01 	add.w	fp, fp, #1
 8009e9c:	dd06      	ble.n	8009eac <__hexnan+0xfc>
 8009e9e:	4544      	cmp	r4, r8
 8009ea0:	d9c3      	bls.n	8009e2a <__hexnan+0x7a>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ea8:	2501      	movs	r5, #1
 8009eaa:	3c04      	subs	r4, #4
 8009eac:	6822      	ldr	r2, [r4, #0]
 8009eae:	f000 000f 	and.w	r0, r0, #15
 8009eb2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009eb6:	6022      	str	r2, [r4, #0]
 8009eb8:	e7b7      	b.n	8009e2a <__hexnan+0x7a>
 8009eba:	2508      	movs	r5, #8
 8009ebc:	e7b5      	b.n	8009e2a <__hexnan+0x7a>
 8009ebe:	9b01      	ldr	r3, [sp, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d0df      	beq.n	8009e84 <__hexnan+0xd4>
 8009ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ec8:	f1c3 0320 	rsb	r3, r3, #32
 8009ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8009ed0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ed4:	401a      	ands	r2, r3
 8009ed6:	f846 2c04 	str.w	r2, [r6, #-4]
 8009eda:	e7d3      	b.n	8009e84 <__hexnan+0xd4>
 8009edc:	3f04      	subs	r7, #4
 8009ede:	e7d1      	b.n	8009e84 <__hexnan+0xd4>
 8009ee0:	2004      	movs	r0, #4
 8009ee2:	b007      	add	sp, #28
 8009ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ee8 <_localeconv_r>:
 8009ee8:	4800      	ldr	r0, [pc, #0]	; (8009eec <_localeconv_r+0x4>)
 8009eea:	4770      	bx	lr
 8009eec:	20000168 	.word	0x20000168

08009ef0 <malloc>:
 8009ef0:	4b02      	ldr	r3, [pc, #8]	; (8009efc <malloc+0xc>)
 8009ef2:	4601      	mov	r1, r0
 8009ef4:	6818      	ldr	r0, [r3, #0]
 8009ef6:	f000 bd2f 	b.w	800a958 <_malloc_r>
 8009efa:	bf00      	nop
 8009efc:	20000010 	.word	0x20000010

08009f00 <__ascii_mbtowc>:
 8009f00:	b082      	sub	sp, #8
 8009f02:	b901      	cbnz	r1, 8009f06 <__ascii_mbtowc+0x6>
 8009f04:	a901      	add	r1, sp, #4
 8009f06:	b142      	cbz	r2, 8009f1a <__ascii_mbtowc+0x1a>
 8009f08:	b14b      	cbz	r3, 8009f1e <__ascii_mbtowc+0x1e>
 8009f0a:	7813      	ldrb	r3, [r2, #0]
 8009f0c:	600b      	str	r3, [r1, #0]
 8009f0e:	7812      	ldrb	r2, [r2, #0]
 8009f10:	1e10      	subs	r0, r2, #0
 8009f12:	bf18      	it	ne
 8009f14:	2001      	movne	r0, #1
 8009f16:	b002      	add	sp, #8
 8009f18:	4770      	bx	lr
 8009f1a:	4610      	mov	r0, r2
 8009f1c:	e7fb      	b.n	8009f16 <__ascii_mbtowc+0x16>
 8009f1e:	f06f 0001 	mvn.w	r0, #1
 8009f22:	e7f8      	b.n	8009f16 <__ascii_mbtowc+0x16>

08009f24 <_Balloc>:
 8009f24:	b570      	push	{r4, r5, r6, lr}
 8009f26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f28:	4604      	mov	r4, r0
 8009f2a:	460d      	mov	r5, r1
 8009f2c:	b976      	cbnz	r6, 8009f4c <_Balloc+0x28>
 8009f2e:	2010      	movs	r0, #16
 8009f30:	f7ff ffde 	bl	8009ef0 <malloc>
 8009f34:	4602      	mov	r2, r0
 8009f36:	6260      	str	r0, [r4, #36]	; 0x24
 8009f38:	b920      	cbnz	r0, 8009f44 <_Balloc+0x20>
 8009f3a:	4b18      	ldr	r3, [pc, #96]	; (8009f9c <_Balloc+0x78>)
 8009f3c:	4818      	ldr	r0, [pc, #96]	; (8009fa0 <_Balloc+0x7c>)
 8009f3e:	2166      	movs	r1, #102	; 0x66
 8009f40:	f000 fefa 	bl	800ad38 <__assert_func>
 8009f44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f48:	6006      	str	r6, [r0, #0]
 8009f4a:	60c6      	str	r6, [r0, #12]
 8009f4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009f4e:	68f3      	ldr	r3, [r6, #12]
 8009f50:	b183      	cbz	r3, 8009f74 <_Balloc+0x50>
 8009f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f5a:	b9b8      	cbnz	r0, 8009f8c <_Balloc+0x68>
 8009f5c:	2101      	movs	r1, #1
 8009f5e:	fa01 f605 	lsl.w	r6, r1, r5
 8009f62:	1d72      	adds	r2, r6, #5
 8009f64:	0092      	lsls	r2, r2, #2
 8009f66:	4620      	mov	r0, r4
 8009f68:	f000 fc97 	bl	800a89a <_calloc_r>
 8009f6c:	b160      	cbz	r0, 8009f88 <_Balloc+0x64>
 8009f6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f72:	e00e      	b.n	8009f92 <_Balloc+0x6e>
 8009f74:	2221      	movs	r2, #33	; 0x21
 8009f76:	2104      	movs	r1, #4
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f000 fc8e 	bl	800a89a <_calloc_r>
 8009f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f80:	60f0      	str	r0, [r6, #12]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1e4      	bne.n	8009f52 <_Balloc+0x2e>
 8009f88:	2000      	movs	r0, #0
 8009f8a:	bd70      	pop	{r4, r5, r6, pc}
 8009f8c:	6802      	ldr	r2, [r0, #0]
 8009f8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f92:	2300      	movs	r3, #0
 8009f94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f98:	e7f7      	b.n	8009f8a <_Balloc+0x66>
 8009f9a:	bf00      	nop
 8009f9c:	0800bb26 	.word	0x0800bb26
 8009fa0:	0800bc2c 	.word	0x0800bc2c

08009fa4 <_Bfree>:
 8009fa4:	b570      	push	{r4, r5, r6, lr}
 8009fa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009fa8:	4605      	mov	r5, r0
 8009faa:	460c      	mov	r4, r1
 8009fac:	b976      	cbnz	r6, 8009fcc <_Bfree+0x28>
 8009fae:	2010      	movs	r0, #16
 8009fb0:	f7ff ff9e 	bl	8009ef0 <malloc>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	6268      	str	r0, [r5, #36]	; 0x24
 8009fb8:	b920      	cbnz	r0, 8009fc4 <_Bfree+0x20>
 8009fba:	4b09      	ldr	r3, [pc, #36]	; (8009fe0 <_Bfree+0x3c>)
 8009fbc:	4809      	ldr	r0, [pc, #36]	; (8009fe4 <_Bfree+0x40>)
 8009fbe:	218a      	movs	r1, #138	; 0x8a
 8009fc0:	f000 feba 	bl	800ad38 <__assert_func>
 8009fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fc8:	6006      	str	r6, [r0, #0]
 8009fca:	60c6      	str	r6, [r0, #12]
 8009fcc:	b13c      	cbz	r4, 8009fde <_Bfree+0x3a>
 8009fce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fd0:	6862      	ldr	r2, [r4, #4]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009fd8:	6021      	str	r1, [r4, #0]
 8009fda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009fde:	bd70      	pop	{r4, r5, r6, pc}
 8009fe0:	0800bb26 	.word	0x0800bb26
 8009fe4:	0800bc2c 	.word	0x0800bc2c

08009fe8 <__multadd>:
 8009fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fec:	690e      	ldr	r6, [r1, #16]
 8009fee:	4607      	mov	r7, r0
 8009ff0:	4698      	mov	r8, r3
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	f101 0014 	add.w	r0, r1, #20
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	6805      	ldr	r5, [r0, #0]
 8009ffc:	b2a9      	uxth	r1, r5
 8009ffe:	fb02 8101 	mla	r1, r2, r1, r8
 800a002:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a006:	0c2d      	lsrs	r5, r5, #16
 800a008:	fb02 c505 	mla	r5, r2, r5, ip
 800a00c:	b289      	uxth	r1, r1
 800a00e:	3301      	adds	r3, #1
 800a010:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a014:	429e      	cmp	r6, r3
 800a016:	f840 1b04 	str.w	r1, [r0], #4
 800a01a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a01e:	dcec      	bgt.n	8009ffa <__multadd+0x12>
 800a020:	f1b8 0f00 	cmp.w	r8, #0
 800a024:	d022      	beq.n	800a06c <__multadd+0x84>
 800a026:	68a3      	ldr	r3, [r4, #8]
 800a028:	42b3      	cmp	r3, r6
 800a02a:	dc19      	bgt.n	800a060 <__multadd+0x78>
 800a02c:	6861      	ldr	r1, [r4, #4]
 800a02e:	4638      	mov	r0, r7
 800a030:	3101      	adds	r1, #1
 800a032:	f7ff ff77 	bl	8009f24 <_Balloc>
 800a036:	4605      	mov	r5, r0
 800a038:	b928      	cbnz	r0, 800a046 <__multadd+0x5e>
 800a03a:	4602      	mov	r2, r0
 800a03c:	4b0d      	ldr	r3, [pc, #52]	; (800a074 <__multadd+0x8c>)
 800a03e:	480e      	ldr	r0, [pc, #56]	; (800a078 <__multadd+0x90>)
 800a040:	21b5      	movs	r1, #181	; 0xb5
 800a042:	f000 fe79 	bl	800ad38 <__assert_func>
 800a046:	6922      	ldr	r2, [r4, #16]
 800a048:	3202      	adds	r2, #2
 800a04a:	f104 010c 	add.w	r1, r4, #12
 800a04e:	0092      	lsls	r2, r2, #2
 800a050:	300c      	adds	r0, #12
 800a052:	f7fc fff5 	bl	8007040 <memcpy>
 800a056:	4621      	mov	r1, r4
 800a058:	4638      	mov	r0, r7
 800a05a:	f7ff ffa3 	bl	8009fa4 <_Bfree>
 800a05e:	462c      	mov	r4, r5
 800a060:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a064:	3601      	adds	r6, #1
 800a066:	f8c3 8014 	str.w	r8, [r3, #20]
 800a06a:	6126      	str	r6, [r4, #16]
 800a06c:	4620      	mov	r0, r4
 800a06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a072:	bf00      	nop
 800a074:	0800bb9c 	.word	0x0800bb9c
 800a078:	0800bc2c 	.word	0x0800bc2c

0800a07c <__s2b>:
 800a07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a080:	460c      	mov	r4, r1
 800a082:	4615      	mov	r5, r2
 800a084:	461f      	mov	r7, r3
 800a086:	2209      	movs	r2, #9
 800a088:	3308      	adds	r3, #8
 800a08a:	4606      	mov	r6, r0
 800a08c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a090:	2100      	movs	r1, #0
 800a092:	2201      	movs	r2, #1
 800a094:	429a      	cmp	r2, r3
 800a096:	db09      	blt.n	800a0ac <__s2b+0x30>
 800a098:	4630      	mov	r0, r6
 800a09a:	f7ff ff43 	bl	8009f24 <_Balloc>
 800a09e:	b940      	cbnz	r0, 800a0b2 <__s2b+0x36>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	4b19      	ldr	r3, [pc, #100]	; (800a108 <__s2b+0x8c>)
 800a0a4:	4819      	ldr	r0, [pc, #100]	; (800a10c <__s2b+0x90>)
 800a0a6:	21ce      	movs	r1, #206	; 0xce
 800a0a8:	f000 fe46 	bl	800ad38 <__assert_func>
 800a0ac:	0052      	lsls	r2, r2, #1
 800a0ae:	3101      	adds	r1, #1
 800a0b0:	e7f0      	b.n	800a094 <__s2b+0x18>
 800a0b2:	9b08      	ldr	r3, [sp, #32]
 800a0b4:	6143      	str	r3, [r0, #20]
 800a0b6:	2d09      	cmp	r5, #9
 800a0b8:	f04f 0301 	mov.w	r3, #1
 800a0bc:	6103      	str	r3, [r0, #16]
 800a0be:	dd16      	ble.n	800a0ee <__s2b+0x72>
 800a0c0:	f104 0909 	add.w	r9, r4, #9
 800a0c4:	46c8      	mov	r8, r9
 800a0c6:	442c      	add	r4, r5
 800a0c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a0cc:	4601      	mov	r1, r0
 800a0ce:	3b30      	subs	r3, #48	; 0x30
 800a0d0:	220a      	movs	r2, #10
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f7ff ff88 	bl	8009fe8 <__multadd>
 800a0d8:	45a0      	cmp	r8, r4
 800a0da:	d1f5      	bne.n	800a0c8 <__s2b+0x4c>
 800a0dc:	f1a5 0408 	sub.w	r4, r5, #8
 800a0e0:	444c      	add	r4, r9
 800a0e2:	1b2d      	subs	r5, r5, r4
 800a0e4:	1963      	adds	r3, r4, r5
 800a0e6:	42bb      	cmp	r3, r7
 800a0e8:	db04      	blt.n	800a0f4 <__s2b+0x78>
 800a0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ee:	340a      	adds	r4, #10
 800a0f0:	2509      	movs	r5, #9
 800a0f2:	e7f6      	b.n	800a0e2 <__s2b+0x66>
 800a0f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a0f8:	4601      	mov	r1, r0
 800a0fa:	3b30      	subs	r3, #48	; 0x30
 800a0fc:	220a      	movs	r2, #10
 800a0fe:	4630      	mov	r0, r6
 800a100:	f7ff ff72 	bl	8009fe8 <__multadd>
 800a104:	e7ee      	b.n	800a0e4 <__s2b+0x68>
 800a106:	bf00      	nop
 800a108:	0800bb9c 	.word	0x0800bb9c
 800a10c:	0800bc2c 	.word	0x0800bc2c

0800a110 <__hi0bits>:
 800a110:	0c03      	lsrs	r3, r0, #16
 800a112:	041b      	lsls	r3, r3, #16
 800a114:	b9d3      	cbnz	r3, 800a14c <__hi0bits+0x3c>
 800a116:	0400      	lsls	r0, r0, #16
 800a118:	2310      	movs	r3, #16
 800a11a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a11e:	bf04      	itt	eq
 800a120:	0200      	lsleq	r0, r0, #8
 800a122:	3308      	addeq	r3, #8
 800a124:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a128:	bf04      	itt	eq
 800a12a:	0100      	lsleq	r0, r0, #4
 800a12c:	3304      	addeq	r3, #4
 800a12e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a132:	bf04      	itt	eq
 800a134:	0080      	lsleq	r0, r0, #2
 800a136:	3302      	addeq	r3, #2
 800a138:	2800      	cmp	r0, #0
 800a13a:	db05      	blt.n	800a148 <__hi0bits+0x38>
 800a13c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a140:	f103 0301 	add.w	r3, r3, #1
 800a144:	bf08      	it	eq
 800a146:	2320      	moveq	r3, #32
 800a148:	4618      	mov	r0, r3
 800a14a:	4770      	bx	lr
 800a14c:	2300      	movs	r3, #0
 800a14e:	e7e4      	b.n	800a11a <__hi0bits+0xa>

0800a150 <__lo0bits>:
 800a150:	6803      	ldr	r3, [r0, #0]
 800a152:	f013 0207 	ands.w	r2, r3, #7
 800a156:	4601      	mov	r1, r0
 800a158:	d00b      	beq.n	800a172 <__lo0bits+0x22>
 800a15a:	07da      	lsls	r2, r3, #31
 800a15c:	d424      	bmi.n	800a1a8 <__lo0bits+0x58>
 800a15e:	0798      	lsls	r0, r3, #30
 800a160:	bf49      	itett	mi
 800a162:	085b      	lsrmi	r3, r3, #1
 800a164:	089b      	lsrpl	r3, r3, #2
 800a166:	2001      	movmi	r0, #1
 800a168:	600b      	strmi	r3, [r1, #0]
 800a16a:	bf5c      	itt	pl
 800a16c:	600b      	strpl	r3, [r1, #0]
 800a16e:	2002      	movpl	r0, #2
 800a170:	4770      	bx	lr
 800a172:	b298      	uxth	r0, r3
 800a174:	b9b0      	cbnz	r0, 800a1a4 <__lo0bits+0x54>
 800a176:	0c1b      	lsrs	r3, r3, #16
 800a178:	2010      	movs	r0, #16
 800a17a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a17e:	bf04      	itt	eq
 800a180:	0a1b      	lsreq	r3, r3, #8
 800a182:	3008      	addeq	r0, #8
 800a184:	071a      	lsls	r2, r3, #28
 800a186:	bf04      	itt	eq
 800a188:	091b      	lsreq	r3, r3, #4
 800a18a:	3004      	addeq	r0, #4
 800a18c:	079a      	lsls	r2, r3, #30
 800a18e:	bf04      	itt	eq
 800a190:	089b      	lsreq	r3, r3, #2
 800a192:	3002      	addeq	r0, #2
 800a194:	07da      	lsls	r2, r3, #31
 800a196:	d403      	bmi.n	800a1a0 <__lo0bits+0x50>
 800a198:	085b      	lsrs	r3, r3, #1
 800a19a:	f100 0001 	add.w	r0, r0, #1
 800a19e:	d005      	beq.n	800a1ac <__lo0bits+0x5c>
 800a1a0:	600b      	str	r3, [r1, #0]
 800a1a2:	4770      	bx	lr
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	e7e8      	b.n	800a17a <__lo0bits+0x2a>
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	4770      	bx	lr
 800a1ac:	2020      	movs	r0, #32
 800a1ae:	4770      	bx	lr

0800a1b0 <__i2b>:
 800a1b0:	b510      	push	{r4, lr}
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	f7ff feb5 	bl	8009f24 <_Balloc>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	b928      	cbnz	r0, 800a1ca <__i2b+0x1a>
 800a1be:	4b05      	ldr	r3, [pc, #20]	; (800a1d4 <__i2b+0x24>)
 800a1c0:	4805      	ldr	r0, [pc, #20]	; (800a1d8 <__i2b+0x28>)
 800a1c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a1c6:	f000 fdb7 	bl	800ad38 <__assert_func>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	6144      	str	r4, [r0, #20]
 800a1ce:	6103      	str	r3, [r0, #16]
 800a1d0:	bd10      	pop	{r4, pc}
 800a1d2:	bf00      	nop
 800a1d4:	0800bb9c 	.word	0x0800bb9c
 800a1d8:	0800bc2c 	.word	0x0800bc2c

0800a1dc <__multiply>:
 800a1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e0:	4614      	mov	r4, r2
 800a1e2:	690a      	ldr	r2, [r1, #16]
 800a1e4:	6923      	ldr	r3, [r4, #16]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	bfb8      	it	lt
 800a1ea:	460b      	movlt	r3, r1
 800a1ec:	460d      	mov	r5, r1
 800a1ee:	bfbc      	itt	lt
 800a1f0:	4625      	movlt	r5, r4
 800a1f2:	461c      	movlt	r4, r3
 800a1f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a1f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a1fc:	68ab      	ldr	r3, [r5, #8]
 800a1fe:	6869      	ldr	r1, [r5, #4]
 800a200:	eb0a 0709 	add.w	r7, sl, r9
 800a204:	42bb      	cmp	r3, r7
 800a206:	b085      	sub	sp, #20
 800a208:	bfb8      	it	lt
 800a20a:	3101      	addlt	r1, #1
 800a20c:	f7ff fe8a 	bl	8009f24 <_Balloc>
 800a210:	b930      	cbnz	r0, 800a220 <__multiply+0x44>
 800a212:	4602      	mov	r2, r0
 800a214:	4b42      	ldr	r3, [pc, #264]	; (800a320 <__multiply+0x144>)
 800a216:	4843      	ldr	r0, [pc, #268]	; (800a324 <__multiply+0x148>)
 800a218:	f240 115d 	movw	r1, #349	; 0x15d
 800a21c:	f000 fd8c 	bl	800ad38 <__assert_func>
 800a220:	f100 0614 	add.w	r6, r0, #20
 800a224:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a228:	4633      	mov	r3, r6
 800a22a:	2200      	movs	r2, #0
 800a22c:	4543      	cmp	r3, r8
 800a22e:	d31e      	bcc.n	800a26e <__multiply+0x92>
 800a230:	f105 0c14 	add.w	ip, r5, #20
 800a234:	f104 0314 	add.w	r3, r4, #20
 800a238:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a23c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a240:	9202      	str	r2, [sp, #8]
 800a242:	ebac 0205 	sub.w	r2, ip, r5
 800a246:	3a15      	subs	r2, #21
 800a248:	f022 0203 	bic.w	r2, r2, #3
 800a24c:	3204      	adds	r2, #4
 800a24e:	f105 0115 	add.w	r1, r5, #21
 800a252:	458c      	cmp	ip, r1
 800a254:	bf38      	it	cc
 800a256:	2204      	movcc	r2, #4
 800a258:	9201      	str	r2, [sp, #4]
 800a25a:	9a02      	ldr	r2, [sp, #8]
 800a25c:	9303      	str	r3, [sp, #12]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d808      	bhi.n	800a274 <__multiply+0x98>
 800a262:	2f00      	cmp	r7, #0
 800a264:	dc55      	bgt.n	800a312 <__multiply+0x136>
 800a266:	6107      	str	r7, [r0, #16]
 800a268:	b005      	add	sp, #20
 800a26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26e:	f843 2b04 	str.w	r2, [r3], #4
 800a272:	e7db      	b.n	800a22c <__multiply+0x50>
 800a274:	f8b3 a000 	ldrh.w	sl, [r3]
 800a278:	f1ba 0f00 	cmp.w	sl, #0
 800a27c:	d020      	beq.n	800a2c0 <__multiply+0xe4>
 800a27e:	f105 0e14 	add.w	lr, r5, #20
 800a282:	46b1      	mov	r9, r6
 800a284:	2200      	movs	r2, #0
 800a286:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a28a:	f8d9 b000 	ldr.w	fp, [r9]
 800a28e:	b2a1      	uxth	r1, r4
 800a290:	fa1f fb8b 	uxth.w	fp, fp
 800a294:	fb0a b101 	mla	r1, sl, r1, fp
 800a298:	4411      	add	r1, r2
 800a29a:	f8d9 2000 	ldr.w	r2, [r9]
 800a29e:	0c24      	lsrs	r4, r4, #16
 800a2a0:	0c12      	lsrs	r2, r2, #16
 800a2a2:	fb0a 2404 	mla	r4, sl, r4, r2
 800a2a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a2aa:	b289      	uxth	r1, r1
 800a2ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a2b0:	45f4      	cmp	ip, lr
 800a2b2:	f849 1b04 	str.w	r1, [r9], #4
 800a2b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a2ba:	d8e4      	bhi.n	800a286 <__multiply+0xaa>
 800a2bc:	9901      	ldr	r1, [sp, #4]
 800a2be:	5072      	str	r2, [r6, r1]
 800a2c0:	9a03      	ldr	r2, [sp, #12]
 800a2c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a2c6:	3304      	adds	r3, #4
 800a2c8:	f1b9 0f00 	cmp.w	r9, #0
 800a2cc:	d01f      	beq.n	800a30e <__multiply+0x132>
 800a2ce:	6834      	ldr	r4, [r6, #0]
 800a2d0:	f105 0114 	add.w	r1, r5, #20
 800a2d4:	46b6      	mov	lr, r6
 800a2d6:	f04f 0a00 	mov.w	sl, #0
 800a2da:	880a      	ldrh	r2, [r1, #0]
 800a2dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a2e0:	fb09 b202 	mla	r2, r9, r2, fp
 800a2e4:	4492      	add	sl, r2
 800a2e6:	b2a4      	uxth	r4, r4
 800a2e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a2ec:	f84e 4b04 	str.w	r4, [lr], #4
 800a2f0:	f851 4b04 	ldr.w	r4, [r1], #4
 800a2f4:	f8be 2000 	ldrh.w	r2, [lr]
 800a2f8:	0c24      	lsrs	r4, r4, #16
 800a2fa:	fb09 2404 	mla	r4, r9, r4, r2
 800a2fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a302:	458c      	cmp	ip, r1
 800a304:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a308:	d8e7      	bhi.n	800a2da <__multiply+0xfe>
 800a30a:	9a01      	ldr	r2, [sp, #4]
 800a30c:	50b4      	str	r4, [r6, r2]
 800a30e:	3604      	adds	r6, #4
 800a310:	e7a3      	b.n	800a25a <__multiply+0x7e>
 800a312:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1a5      	bne.n	800a266 <__multiply+0x8a>
 800a31a:	3f01      	subs	r7, #1
 800a31c:	e7a1      	b.n	800a262 <__multiply+0x86>
 800a31e:	bf00      	nop
 800a320:	0800bb9c 	.word	0x0800bb9c
 800a324:	0800bc2c 	.word	0x0800bc2c

0800a328 <__pow5mult>:
 800a328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a32c:	4615      	mov	r5, r2
 800a32e:	f012 0203 	ands.w	r2, r2, #3
 800a332:	4606      	mov	r6, r0
 800a334:	460f      	mov	r7, r1
 800a336:	d007      	beq.n	800a348 <__pow5mult+0x20>
 800a338:	4c25      	ldr	r4, [pc, #148]	; (800a3d0 <__pow5mult+0xa8>)
 800a33a:	3a01      	subs	r2, #1
 800a33c:	2300      	movs	r3, #0
 800a33e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a342:	f7ff fe51 	bl	8009fe8 <__multadd>
 800a346:	4607      	mov	r7, r0
 800a348:	10ad      	asrs	r5, r5, #2
 800a34a:	d03d      	beq.n	800a3c8 <__pow5mult+0xa0>
 800a34c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a34e:	b97c      	cbnz	r4, 800a370 <__pow5mult+0x48>
 800a350:	2010      	movs	r0, #16
 800a352:	f7ff fdcd 	bl	8009ef0 <malloc>
 800a356:	4602      	mov	r2, r0
 800a358:	6270      	str	r0, [r6, #36]	; 0x24
 800a35a:	b928      	cbnz	r0, 800a368 <__pow5mult+0x40>
 800a35c:	4b1d      	ldr	r3, [pc, #116]	; (800a3d4 <__pow5mult+0xac>)
 800a35e:	481e      	ldr	r0, [pc, #120]	; (800a3d8 <__pow5mult+0xb0>)
 800a360:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a364:	f000 fce8 	bl	800ad38 <__assert_func>
 800a368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a36c:	6004      	str	r4, [r0, #0]
 800a36e:	60c4      	str	r4, [r0, #12]
 800a370:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a378:	b94c      	cbnz	r4, 800a38e <__pow5mult+0x66>
 800a37a:	f240 2171 	movw	r1, #625	; 0x271
 800a37e:	4630      	mov	r0, r6
 800a380:	f7ff ff16 	bl	800a1b0 <__i2b>
 800a384:	2300      	movs	r3, #0
 800a386:	f8c8 0008 	str.w	r0, [r8, #8]
 800a38a:	4604      	mov	r4, r0
 800a38c:	6003      	str	r3, [r0, #0]
 800a38e:	f04f 0900 	mov.w	r9, #0
 800a392:	07eb      	lsls	r3, r5, #31
 800a394:	d50a      	bpl.n	800a3ac <__pow5mult+0x84>
 800a396:	4639      	mov	r1, r7
 800a398:	4622      	mov	r2, r4
 800a39a:	4630      	mov	r0, r6
 800a39c:	f7ff ff1e 	bl	800a1dc <__multiply>
 800a3a0:	4639      	mov	r1, r7
 800a3a2:	4680      	mov	r8, r0
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f7ff fdfd 	bl	8009fa4 <_Bfree>
 800a3aa:	4647      	mov	r7, r8
 800a3ac:	106d      	asrs	r5, r5, #1
 800a3ae:	d00b      	beq.n	800a3c8 <__pow5mult+0xa0>
 800a3b0:	6820      	ldr	r0, [r4, #0]
 800a3b2:	b938      	cbnz	r0, 800a3c4 <__pow5mult+0x9c>
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	f7ff ff0f 	bl	800a1dc <__multiply>
 800a3be:	6020      	str	r0, [r4, #0]
 800a3c0:	f8c0 9000 	str.w	r9, [r0]
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	e7e4      	b.n	800a392 <__pow5mult+0x6a>
 800a3c8:	4638      	mov	r0, r7
 800a3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ce:	bf00      	nop
 800a3d0:	0800bd80 	.word	0x0800bd80
 800a3d4:	0800bb26 	.word	0x0800bb26
 800a3d8:	0800bc2c 	.word	0x0800bc2c

0800a3dc <__lshift>:
 800a3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	6849      	ldr	r1, [r1, #4]
 800a3e4:	6923      	ldr	r3, [r4, #16]
 800a3e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3ea:	68a3      	ldr	r3, [r4, #8]
 800a3ec:	4607      	mov	r7, r0
 800a3ee:	4691      	mov	r9, r2
 800a3f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3f4:	f108 0601 	add.w	r6, r8, #1
 800a3f8:	42b3      	cmp	r3, r6
 800a3fa:	db0b      	blt.n	800a414 <__lshift+0x38>
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f7ff fd91 	bl	8009f24 <_Balloc>
 800a402:	4605      	mov	r5, r0
 800a404:	b948      	cbnz	r0, 800a41a <__lshift+0x3e>
 800a406:	4602      	mov	r2, r0
 800a408:	4b28      	ldr	r3, [pc, #160]	; (800a4ac <__lshift+0xd0>)
 800a40a:	4829      	ldr	r0, [pc, #164]	; (800a4b0 <__lshift+0xd4>)
 800a40c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a410:	f000 fc92 	bl	800ad38 <__assert_func>
 800a414:	3101      	adds	r1, #1
 800a416:	005b      	lsls	r3, r3, #1
 800a418:	e7ee      	b.n	800a3f8 <__lshift+0x1c>
 800a41a:	2300      	movs	r3, #0
 800a41c:	f100 0114 	add.w	r1, r0, #20
 800a420:	f100 0210 	add.w	r2, r0, #16
 800a424:	4618      	mov	r0, r3
 800a426:	4553      	cmp	r3, sl
 800a428:	db33      	blt.n	800a492 <__lshift+0xb6>
 800a42a:	6920      	ldr	r0, [r4, #16]
 800a42c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a430:	f104 0314 	add.w	r3, r4, #20
 800a434:	f019 091f 	ands.w	r9, r9, #31
 800a438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a43c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a440:	d02b      	beq.n	800a49a <__lshift+0xbe>
 800a442:	f1c9 0e20 	rsb	lr, r9, #32
 800a446:	468a      	mov	sl, r1
 800a448:	2200      	movs	r2, #0
 800a44a:	6818      	ldr	r0, [r3, #0]
 800a44c:	fa00 f009 	lsl.w	r0, r0, r9
 800a450:	4302      	orrs	r2, r0
 800a452:	f84a 2b04 	str.w	r2, [sl], #4
 800a456:	f853 2b04 	ldr.w	r2, [r3], #4
 800a45a:	459c      	cmp	ip, r3
 800a45c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a460:	d8f3      	bhi.n	800a44a <__lshift+0x6e>
 800a462:	ebac 0304 	sub.w	r3, ip, r4
 800a466:	3b15      	subs	r3, #21
 800a468:	f023 0303 	bic.w	r3, r3, #3
 800a46c:	3304      	adds	r3, #4
 800a46e:	f104 0015 	add.w	r0, r4, #21
 800a472:	4584      	cmp	ip, r0
 800a474:	bf38      	it	cc
 800a476:	2304      	movcc	r3, #4
 800a478:	50ca      	str	r2, [r1, r3]
 800a47a:	b10a      	cbz	r2, 800a480 <__lshift+0xa4>
 800a47c:	f108 0602 	add.w	r6, r8, #2
 800a480:	3e01      	subs	r6, #1
 800a482:	4638      	mov	r0, r7
 800a484:	612e      	str	r6, [r5, #16]
 800a486:	4621      	mov	r1, r4
 800a488:	f7ff fd8c 	bl	8009fa4 <_Bfree>
 800a48c:	4628      	mov	r0, r5
 800a48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a492:	f842 0f04 	str.w	r0, [r2, #4]!
 800a496:	3301      	adds	r3, #1
 800a498:	e7c5      	b.n	800a426 <__lshift+0x4a>
 800a49a:	3904      	subs	r1, #4
 800a49c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4a4:	459c      	cmp	ip, r3
 800a4a6:	d8f9      	bhi.n	800a49c <__lshift+0xc0>
 800a4a8:	e7ea      	b.n	800a480 <__lshift+0xa4>
 800a4aa:	bf00      	nop
 800a4ac:	0800bb9c 	.word	0x0800bb9c
 800a4b0:	0800bc2c 	.word	0x0800bc2c

0800a4b4 <__mcmp>:
 800a4b4:	b530      	push	{r4, r5, lr}
 800a4b6:	6902      	ldr	r2, [r0, #16]
 800a4b8:	690c      	ldr	r4, [r1, #16]
 800a4ba:	1b12      	subs	r2, r2, r4
 800a4bc:	d10e      	bne.n	800a4dc <__mcmp+0x28>
 800a4be:	f100 0314 	add.w	r3, r0, #20
 800a4c2:	3114      	adds	r1, #20
 800a4c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a4c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a4cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a4d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a4d4:	42a5      	cmp	r5, r4
 800a4d6:	d003      	beq.n	800a4e0 <__mcmp+0x2c>
 800a4d8:	d305      	bcc.n	800a4e6 <__mcmp+0x32>
 800a4da:	2201      	movs	r2, #1
 800a4dc:	4610      	mov	r0, r2
 800a4de:	bd30      	pop	{r4, r5, pc}
 800a4e0:	4283      	cmp	r3, r0
 800a4e2:	d3f3      	bcc.n	800a4cc <__mcmp+0x18>
 800a4e4:	e7fa      	b.n	800a4dc <__mcmp+0x28>
 800a4e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4ea:	e7f7      	b.n	800a4dc <__mcmp+0x28>

0800a4ec <__mdiff>:
 800a4ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	4606      	mov	r6, r0
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	4617      	mov	r7, r2
 800a4fa:	f7ff ffdb 	bl	800a4b4 <__mcmp>
 800a4fe:	1e05      	subs	r5, r0, #0
 800a500:	d110      	bne.n	800a524 <__mdiff+0x38>
 800a502:	4629      	mov	r1, r5
 800a504:	4630      	mov	r0, r6
 800a506:	f7ff fd0d 	bl	8009f24 <_Balloc>
 800a50a:	b930      	cbnz	r0, 800a51a <__mdiff+0x2e>
 800a50c:	4b39      	ldr	r3, [pc, #228]	; (800a5f4 <__mdiff+0x108>)
 800a50e:	4602      	mov	r2, r0
 800a510:	f240 2132 	movw	r1, #562	; 0x232
 800a514:	4838      	ldr	r0, [pc, #224]	; (800a5f8 <__mdiff+0x10c>)
 800a516:	f000 fc0f 	bl	800ad38 <__assert_func>
 800a51a:	2301      	movs	r3, #1
 800a51c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a524:	bfa4      	itt	ge
 800a526:	463b      	movge	r3, r7
 800a528:	4627      	movge	r7, r4
 800a52a:	4630      	mov	r0, r6
 800a52c:	6879      	ldr	r1, [r7, #4]
 800a52e:	bfa6      	itte	ge
 800a530:	461c      	movge	r4, r3
 800a532:	2500      	movge	r5, #0
 800a534:	2501      	movlt	r5, #1
 800a536:	f7ff fcf5 	bl	8009f24 <_Balloc>
 800a53a:	b920      	cbnz	r0, 800a546 <__mdiff+0x5a>
 800a53c:	4b2d      	ldr	r3, [pc, #180]	; (800a5f4 <__mdiff+0x108>)
 800a53e:	4602      	mov	r2, r0
 800a540:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a544:	e7e6      	b.n	800a514 <__mdiff+0x28>
 800a546:	693e      	ldr	r6, [r7, #16]
 800a548:	60c5      	str	r5, [r0, #12]
 800a54a:	6925      	ldr	r5, [r4, #16]
 800a54c:	f107 0114 	add.w	r1, r7, #20
 800a550:	f104 0914 	add.w	r9, r4, #20
 800a554:	f100 0e14 	add.w	lr, r0, #20
 800a558:	f107 0210 	add.w	r2, r7, #16
 800a55c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a560:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a564:	46f2      	mov	sl, lr
 800a566:	2700      	movs	r7, #0
 800a568:	f859 3b04 	ldr.w	r3, [r9], #4
 800a56c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a570:	fa1f f883 	uxth.w	r8, r3
 800a574:	fa17 f78b 	uxtah	r7, r7, fp
 800a578:	0c1b      	lsrs	r3, r3, #16
 800a57a:	eba7 0808 	sub.w	r8, r7, r8
 800a57e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a582:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a586:	fa1f f888 	uxth.w	r8, r8
 800a58a:	141f      	asrs	r7, r3, #16
 800a58c:	454d      	cmp	r5, r9
 800a58e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a592:	f84a 3b04 	str.w	r3, [sl], #4
 800a596:	d8e7      	bhi.n	800a568 <__mdiff+0x7c>
 800a598:	1b2b      	subs	r3, r5, r4
 800a59a:	3b15      	subs	r3, #21
 800a59c:	f023 0303 	bic.w	r3, r3, #3
 800a5a0:	3304      	adds	r3, #4
 800a5a2:	3415      	adds	r4, #21
 800a5a4:	42a5      	cmp	r5, r4
 800a5a6:	bf38      	it	cc
 800a5a8:	2304      	movcc	r3, #4
 800a5aa:	4419      	add	r1, r3
 800a5ac:	4473      	add	r3, lr
 800a5ae:	469e      	mov	lr, r3
 800a5b0:	460d      	mov	r5, r1
 800a5b2:	4565      	cmp	r5, ip
 800a5b4:	d30e      	bcc.n	800a5d4 <__mdiff+0xe8>
 800a5b6:	f10c 0203 	add.w	r2, ip, #3
 800a5ba:	1a52      	subs	r2, r2, r1
 800a5bc:	f022 0203 	bic.w	r2, r2, #3
 800a5c0:	3903      	subs	r1, #3
 800a5c2:	458c      	cmp	ip, r1
 800a5c4:	bf38      	it	cc
 800a5c6:	2200      	movcc	r2, #0
 800a5c8:	441a      	add	r2, r3
 800a5ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a5ce:	b17b      	cbz	r3, 800a5f0 <__mdiff+0x104>
 800a5d0:	6106      	str	r6, [r0, #16]
 800a5d2:	e7a5      	b.n	800a520 <__mdiff+0x34>
 800a5d4:	f855 8b04 	ldr.w	r8, [r5], #4
 800a5d8:	fa17 f488 	uxtah	r4, r7, r8
 800a5dc:	1422      	asrs	r2, r4, #16
 800a5de:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a5e2:	b2a4      	uxth	r4, r4
 800a5e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a5e8:	f84e 4b04 	str.w	r4, [lr], #4
 800a5ec:	1417      	asrs	r7, r2, #16
 800a5ee:	e7e0      	b.n	800a5b2 <__mdiff+0xc6>
 800a5f0:	3e01      	subs	r6, #1
 800a5f2:	e7ea      	b.n	800a5ca <__mdiff+0xde>
 800a5f4:	0800bb9c 	.word	0x0800bb9c
 800a5f8:	0800bc2c 	.word	0x0800bc2c

0800a5fc <__ulp>:
 800a5fc:	b082      	sub	sp, #8
 800a5fe:	ed8d 0b00 	vstr	d0, [sp]
 800a602:	9b01      	ldr	r3, [sp, #4]
 800a604:	4912      	ldr	r1, [pc, #72]	; (800a650 <__ulp+0x54>)
 800a606:	4019      	ands	r1, r3
 800a608:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a60c:	2900      	cmp	r1, #0
 800a60e:	dd05      	ble.n	800a61c <__ulp+0x20>
 800a610:	2200      	movs	r2, #0
 800a612:	460b      	mov	r3, r1
 800a614:	ec43 2b10 	vmov	d0, r2, r3
 800a618:	b002      	add	sp, #8
 800a61a:	4770      	bx	lr
 800a61c:	4249      	negs	r1, r1
 800a61e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a622:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a626:	f04f 0200 	mov.w	r2, #0
 800a62a:	f04f 0300 	mov.w	r3, #0
 800a62e:	da04      	bge.n	800a63a <__ulp+0x3e>
 800a630:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a634:	fa41 f300 	asr.w	r3, r1, r0
 800a638:	e7ec      	b.n	800a614 <__ulp+0x18>
 800a63a:	f1a0 0114 	sub.w	r1, r0, #20
 800a63e:	291e      	cmp	r1, #30
 800a640:	bfda      	itte	le
 800a642:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a646:	fa20 f101 	lsrle.w	r1, r0, r1
 800a64a:	2101      	movgt	r1, #1
 800a64c:	460a      	mov	r2, r1
 800a64e:	e7e1      	b.n	800a614 <__ulp+0x18>
 800a650:	7ff00000 	.word	0x7ff00000

0800a654 <__b2d>:
 800a654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a656:	6905      	ldr	r5, [r0, #16]
 800a658:	f100 0714 	add.w	r7, r0, #20
 800a65c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a660:	1f2e      	subs	r6, r5, #4
 800a662:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a666:	4620      	mov	r0, r4
 800a668:	f7ff fd52 	bl	800a110 <__hi0bits>
 800a66c:	f1c0 0320 	rsb	r3, r0, #32
 800a670:	280a      	cmp	r0, #10
 800a672:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a6f0 <__b2d+0x9c>
 800a676:	600b      	str	r3, [r1, #0]
 800a678:	dc14      	bgt.n	800a6a4 <__b2d+0x50>
 800a67a:	f1c0 0e0b 	rsb	lr, r0, #11
 800a67e:	fa24 f10e 	lsr.w	r1, r4, lr
 800a682:	42b7      	cmp	r7, r6
 800a684:	ea41 030c 	orr.w	r3, r1, ip
 800a688:	bf34      	ite	cc
 800a68a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a68e:	2100      	movcs	r1, #0
 800a690:	3015      	adds	r0, #21
 800a692:	fa04 f000 	lsl.w	r0, r4, r0
 800a696:	fa21 f10e 	lsr.w	r1, r1, lr
 800a69a:	ea40 0201 	orr.w	r2, r0, r1
 800a69e:	ec43 2b10 	vmov	d0, r2, r3
 800a6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6a4:	42b7      	cmp	r7, r6
 800a6a6:	bf3a      	itte	cc
 800a6a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a6ac:	f1a5 0608 	subcc.w	r6, r5, #8
 800a6b0:	2100      	movcs	r1, #0
 800a6b2:	380b      	subs	r0, #11
 800a6b4:	d017      	beq.n	800a6e6 <__b2d+0x92>
 800a6b6:	f1c0 0c20 	rsb	ip, r0, #32
 800a6ba:	fa04 f500 	lsl.w	r5, r4, r0
 800a6be:	42be      	cmp	r6, r7
 800a6c0:	fa21 f40c 	lsr.w	r4, r1, ip
 800a6c4:	ea45 0504 	orr.w	r5, r5, r4
 800a6c8:	bf8c      	ite	hi
 800a6ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a6ce:	2400      	movls	r4, #0
 800a6d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a6d4:	fa01 f000 	lsl.w	r0, r1, r0
 800a6d8:	fa24 f40c 	lsr.w	r4, r4, ip
 800a6dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a6e0:	ea40 0204 	orr.w	r2, r0, r4
 800a6e4:	e7db      	b.n	800a69e <__b2d+0x4a>
 800a6e6:	ea44 030c 	orr.w	r3, r4, ip
 800a6ea:	460a      	mov	r2, r1
 800a6ec:	e7d7      	b.n	800a69e <__b2d+0x4a>
 800a6ee:	bf00      	nop
 800a6f0:	3ff00000 	.word	0x3ff00000

0800a6f4 <__d2b>:
 800a6f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6f8:	4689      	mov	r9, r1
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	ec57 6b10 	vmov	r6, r7, d0
 800a700:	4690      	mov	r8, r2
 800a702:	f7ff fc0f 	bl	8009f24 <_Balloc>
 800a706:	4604      	mov	r4, r0
 800a708:	b930      	cbnz	r0, 800a718 <__d2b+0x24>
 800a70a:	4602      	mov	r2, r0
 800a70c:	4b25      	ldr	r3, [pc, #148]	; (800a7a4 <__d2b+0xb0>)
 800a70e:	4826      	ldr	r0, [pc, #152]	; (800a7a8 <__d2b+0xb4>)
 800a710:	f240 310a 	movw	r1, #778	; 0x30a
 800a714:	f000 fb10 	bl	800ad38 <__assert_func>
 800a718:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a71c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a720:	bb35      	cbnz	r5, 800a770 <__d2b+0x7c>
 800a722:	2e00      	cmp	r6, #0
 800a724:	9301      	str	r3, [sp, #4]
 800a726:	d028      	beq.n	800a77a <__d2b+0x86>
 800a728:	4668      	mov	r0, sp
 800a72a:	9600      	str	r6, [sp, #0]
 800a72c:	f7ff fd10 	bl	800a150 <__lo0bits>
 800a730:	9900      	ldr	r1, [sp, #0]
 800a732:	b300      	cbz	r0, 800a776 <__d2b+0x82>
 800a734:	9a01      	ldr	r2, [sp, #4]
 800a736:	f1c0 0320 	rsb	r3, r0, #32
 800a73a:	fa02 f303 	lsl.w	r3, r2, r3
 800a73e:	430b      	orrs	r3, r1
 800a740:	40c2      	lsrs	r2, r0
 800a742:	6163      	str	r3, [r4, #20]
 800a744:	9201      	str	r2, [sp, #4]
 800a746:	9b01      	ldr	r3, [sp, #4]
 800a748:	61a3      	str	r3, [r4, #24]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	bf14      	ite	ne
 800a74e:	2202      	movne	r2, #2
 800a750:	2201      	moveq	r2, #1
 800a752:	6122      	str	r2, [r4, #16]
 800a754:	b1d5      	cbz	r5, 800a78c <__d2b+0x98>
 800a756:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a75a:	4405      	add	r5, r0
 800a75c:	f8c9 5000 	str.w	r5, [r9]
 800a760:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a764:	f8c8 0000 	str.w	r0, [r8]
 800a768:	4620      	mov	r0, r4
 800a76a:	b003      	add	sp, #12
 800a76c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a774:	e7d5      	b.n	800a722 <__d2b+0x2e>
 800a776:	6161      	str	r1, [r4, #20]
 800a778:	e7e5      	b.n	800a746 <__d2b+0x52>
 800a77a:	a801      	add	r0, sp, #4
 800a77c:	f7ff fce8 	bl	800a150 <__lo0bits>
 800a780:	9b01      	ldr	r3, [sp, #4]
 800a782:	6163      	str	r3, [r4, #20]
 800a784:	2201      	movs	r2, #1
 800a786:	6122      	str	r2, [r4, #16]
 800a788:	3020      	adds	r0, #32
 800a78a:	e7e3      	b.n	800a754 <__d2b+0x60>
 800a78c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a790:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a794:	f8c9 0000 	str.w	r0, [r9]
 800a798:	6918      	ldr	r0, [r3, #16]
 800a79a:	f7ff fcb9 	bl	800a110 <__hi0bits>
 800a79e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7a2:	e7df      	b.n	800a764 <__d2b+0x70>
 800a7a4:	0800bb9c 	.word	0x0800bb9c
 800a7a8:	0800bc2c 	.word	0x0800bc2c

0800a7ac <__ratio>:
 800a7ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b0:	4688      	mov	r8, r1
 800a7b2:	4669      	mov	r1, sp
 800a7b4:	4681      	mov	r9, r0
 800a7b6:	f7ff ff4d 	bl	800a654 <__b2d>
 800a7ba:	a901      	add	r1, sp, #4
 800a7bc:	4640      	mov	r0, r8
 800a7be:	ec55 4b10 	vmov	r4, r5, d0
 800a7c2:	f7ff ff47 	bl	800a654 <__b2d>
 800a7c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a7ce:	eba3 0c02 	sub.w	ip, r3, r2
 800a7d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a7d6:	1a9b      	subs	r3, r3, r2
 800a7d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a7dc:	ec51 0b10 	vmov	r0, r1, d0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	bfd6      	itet	le
 800a7e4:	460a      	movle	r2, r1
 800a7e6:	462a      	movgt	r2, r5
 800a7e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a7ec:	468b      	mov	fp, r1
 800a7ee:	462f      	mov	r7, r5
 800a7f0:	bfd4      	ite	le
 800a7f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a7f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	ee10 2a10 	vmov	r2, s0
 800a800:	465b      	mov	r3, fp
 800a802:	4639      	mov	r1, r7
 800a804:	f7f6 f822 	bl	800084c <__aeabi_ddiv>
 800a808:	ec41 0b10 	vmov	d0, r0, r1
 800a80c:	b003      	add	sp, #12
 800a80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a812 <__copybits>:
 800a812:	3901      	subs	r1, #1
 800a814:	b570      	push	{r4, r5, r6, lr}
 800a816:	1149      	asrs	r1, r1, #5
 800a818:	6914      	ldr	r4, [r2, #16]
 800a81a:	3101      	adds	r1, #1
 800a81c:	f102 0314 	add.w	r3, r2, #20
 800a820:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a824:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a828:	1f05      	subs	r5, r0, #4
 800a82a:	42a3      	cmp	r3, r4
 800a82c:	d30c      	bcc.n	800a848 <__copybits+0x36>
 800a82e:	1aa3      	subs	r3, r4, r2
 800a830:	3b11      	subs	r3, #17
 800a832:	f023 0303 	bic.w	r3, r3, #3
 800a836:	3211      	adds	r2, #17
 800a838:	42a2      	cmp	r2, r4
 800a83a:	bf88      	it	hi
 800a83c:	2300      	movhi	r3, #0
 800a83e:	4418      	add	r0, r3
 800a840:	2300      	movs	r3, #0
 800a842:	4288      	cmp	r0, r1
 800a844:	d305      	bcc.n	800a852 <__copybits+0x40>
 800a846:	bd70      	pop	{r4, r5, r6, pc}
 800a848:	f853 6b04 	ldr.w	r6, [r3], #4
 800a84c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a850:	e7eb      	b.n	800a82a <__copybits+0x18>
 800a852:	f840 3b04 	str.w	r3, [r0], #4
 800a856:	e7f4      	b.n	800a842 <__copybits+0x30>

0800a858 <__any_on>:
 800a858:	f100 0214 	add.w	r2, r0, #20
 800a85c:	6900      	ldr	r0, [r0, #16]
 800a85e:	114b      	asrs	r3, r1, #5
 800a860:	4298      	cmp	r0, r3
 800a862:	b510      	push	{r4, lr}
 800a864:	db11      	blt.n	800a88a <__any_on+0x32>
 800a866:	dd0a      	ble.n	800a87e <__any_on+0x26>
 800a868:	f011 011f 	ands.w	r1, r1, #31
 800a86c:	d007      	beq.n	800a87e <__any_on+0x26>
 800a86e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a872:	fa24 f001 	lsr.w	r0, r4, r1
 800a876:	fa00 f101 	lsl.w	r1, r0, r1
 800a87a:	428c      	cmp	r4, r1
 800a87c:	d10b      	bne.n	800a896 <__any_on+0x3e>
 800a87e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a882:	4293      	cmp	r3, r2
 800a884:	d803      	bhi.n	800a88e <__any_on+0x36>
 800a886:	2000      	movs	r0, #0
 800a888:	bd10      	pop	{r4, pc}
 800a88a:	4603      	mov	r3, r0
 800a88c:	e7f7      	b.n	800a87e <__any_on+0x26>
 800a88e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a892:	2900      	cmp	r1, #0
 800a894:	d0f5      	beq.n	800a882 <__any_on+0x2a>
 800a896:	2001      	movs	r0, #1
 800a898:	e7f6      	b.n	800a888 <__any_on+0x30>

0800a89a <_calloc_r>:
 800a89a:	b513      	push	{r0, r1, r4, lr}
 800a89c:	434a      	muls	r2, r1
 800a89e:	4611      	mov	r1, r2
 800a8a0:	9201      	str	r2, [sp, #4]
 800a8a2:	f000 f859 	bl	800a958 <_malloc_r>
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	b118      	cbz	r0, 800a8b2 <_calloc_r+0x18>
 800a8aa:	9a01      	ldr	r2, [sp, #4]
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	f7fc fbd5 	bl	800705c <memset>
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	b002      	add	sp, #8
 800a8b6:	bd10      	pop	{r4, pc}

0800a8b8 <_free_r>:
 800a8b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ba:	2900      	cmp	r1, #0
 800a8bc:	d048      	beq.n	800a950 <_free_r+0x98>
 800a8be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8c2:	9001      	str	r0, [sp, #4]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f1a1 0404 	sub.w	r4, r1, #4
 800a8ca:	bfb8      	it	lt
 800a8cc:	18e4      	addlt	r4, r4, r3
 800a8ce:	f000 fa7d 	bl	800adcc <__malloc_lock>
 800a8d2:	4a20      	ldr	r2, [pc, #128]	; (800a954 <_free_r+0x9c>)
 800a8d4:	9801      	ldr	r0, [sp, #4]
 800a8d6:	6813      	ldr	r3, [r2, #0]
 800a8d8:	4615      	mov	r5, r2
 800a8da:	b933      	cbnz	r3, 800a8ea <_free_r+0x32>
 800a8dc:	6063      	str	r3, [r4, #4]
 800a8de:	6014      	str	r4, [r2, #0]
 800a8e0:	b003      	add	sp, #12
 800a8e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8e6:	f000 ba77 	b.w	800add8 <__malloc_unlock>
 800a8ea:	42a3      	cmp	r3, r4
 800a8ec:	d90b      	bls.n	800a906 <_free_r+0x4e>
 800a8ee:	6821      	ldr	r1, [r4, #0]
 800a8f0:	1862      	adds	r2, r4, r1
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	bf04      	itt	eq
 800a8f6:	681a      	ldreq	r2, [r3, #0]
 800a8f8:	685b      	ldreq	r3, [r3, #4]
 800a8fa:	6063      	str	r3, [r4, #4]
 800a8fc:	bf04      	itt	eq
 800a8fe:	1852      	addeq	r2, r2, r1
 800a900:	6022      	streq	r2, [r4, #0]
 800a902:	602c      	str	r4, [r5, #0]
 800a904:	e7ec      	b.n	800a8e0 <_free_r+0x28>
 800a906:	461a      	mov	r2, r3
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	b10b      	cbz	r3, 800a910 <_free_r+0x58>
 800a90c:	42a3      	cmp	r3, r4
 800a90e:	d9fa      	bls.n	800a906 <_free_r+0x4e>
 800a910:	6811      	ldr	r1, [r2, #0]
 800a912:	1855      	adds	r5, r2, r1
 800a914:	42a5      	cmp	r5, r4
 800a916:	d10b      	bne.n	800a930 <_free_r+0x78>
 800a918:	6824      	ldr	r4, [r4, #0]
 800a91a:	4421      	add	r1, r4
 800a91c:	1854      	adds	r4, r2, r1
 800a91e:	42a3      	cmp	r3, r4
 800a920:	6011      	str	r1, [r2, #0]
 800a922:	d1dd      	bne.n	800a8e0 <_free_r+0x28>
 800a924:	681c      	ldr	r4, [r3, #0]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	6053      	str	r3, [r2, #4]
 800a92a:	4421      	add	r1, r4
 800a92c:	6011      	str	r1, [r2, #0]
 800a92e:	e7d7      	b.n	800a8e0 <_free_r+0x28>
 800a930:	d902      	bls.n	800a938 <_free_r+0x80>
 800a932:	230c      	movs	r3, #12
 800a934:	6003      	str	r3, [r0, #0]
 800a936:	e7d3      	b.n	800a8e0 <_free_r+0x28>
 800a938:	6825      	ldr	r5, [r4, #0]
 800a93a:	1961      	adds	r1, r4, r5
 800a93c:	428b      	cmp	r3, r1
 800a93e:	bf04      	itt	eq
 800a940:	6819      	ldreq	r1, [r3, #0]
 800a942:	685b      	ldreq	r3, [r3, #4]
 800a944:	6063      	str	r3, [r4, #4]
 800a946:	bf04      	itt	eq
 800a948:	1949      	addeq	r1, r1, r5
 800a94a:	6021      	streq	r1, [r4, #0]
 800a94c:	6054      	str	r4, [r2, #4]
 800a94e:	e7c7      	b.n	800a8e0 <_free_r+0x28>
 800a950:	b003      	add	sp, #12
 800a952:	bd30      	pop	{r4, r5, pc}
 800a954:	20004cb0 	.word	0x20004cb0

0800a958 <_malloc_r>:
 800a958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95a:	1ccd      	adds	r5, r1, #3
 800a95c:	f025 0503 	bic.w	r5, r5, #3
 800a960:	3508      	adds	r5, #8
 800a962:	2d0c      	cmp	r5, #12
 800a964:	bf38      	it	cc
 800a966:	250c      	movcc	r5, #12
 800a968:	2d00      	cmp	r5, #0
 800a96a:	4606      	mov	r6, r0
 800a96c:	db01      	blt.n	800a972 <_malloc_r+0x1a>
 800a96e:	42a9      	cmp	r1, r5
 800a970:	d903      	bls.n	800a97a <_malloc_r+0x22>
 800a972:	230c      	movs	r3, #12
 800a974:	6033      	str	r3, [r6, #0]
 800a976:	2000      	movs	r0, #0
 800a978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a97a:	f000 fa27 	bl	800adcc <__malloc_lock>
 800a97e:	4921      	ldr	r1, [pc, #132]	; (800aa04 <_malloc_r+0xac>)
 800a980:	680a      	ldr	r2, [r1, #0]
 800a982:	4614      	mov	r4, r2
 800a984:	b99c      	cbnz	r4, 800a9ae <_malloc_r+0x56>
 800a986:	4f20      	ldr	r7, [pc, #128]	; (800aa08 <_malloc_r+0xb0>)
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	b923      	cbnz	r3, 800a996 <_malloc_r+0x3e>
 800a98c:	4621      	mov	r1, r4
 800a98e:	4630      	mov	r0, r6
 800a990:	f000 f9a2 	bl	800acd8 <_sbrk_r>
 800a994:	6038      	str	r0, [r7, #0]
 800a996:	4629      	mov	r1, r5
 800a998:	4630      	mov	r0, r6
 800a99a:	f000 f99d 	bl	800acd8 <_sbrk_r>
 800a99e:	1c43      	adds	r3, r0, #1
 800a9a0:	d123      	bne.n	800a9ea <_malloc_r+0x92>
 800a9a2:	230c      	movs	r3, #12
 800a9a4:	6033      	str	r3, [r6, #0]
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	f000 fa16 	bl	800add8 <__malloc_unlock>
 800a9ac:	e7e3      	b.n	800a976 <_malloc_r+0x1e>
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	1b5b      	subs	r3, r3, r5
 800a9b2:	d417      	bmi.n	800a9e4 <_malloc_r+0x8c>
 800a9b4:	2b0b      	cmp	r3, #11
 800a9b6:	d903      	bls.n	800a9c0 <_malloc_r+0x68>
 800a9b8:	6023      	str	r3, [r4, #0]
 800a9ba:	441c      	add	r4, r3
 800a9bc:	6025      	str	r5, [r4, #0]
 800a9be:	e004      	b.n	800a9ca <_malloc_r+0x72>
 800a9c0:	6863      	ldr	r3, [r4, #4]
 800a9c2:	42a2      	cmp	r2, r4
 800a9c4:	bf0c      	ite	eq
 800a9c6:	600b      	streq	r3, [r1, #0]
 800a9c8:	6053      	strne	r3, [r2, #4]
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f000 fa04 	bl	800add8 <__malloc_unlock>
 800a9d0:	f104 000b 	add.w	r0, r4, #11
 800a9d4:	1d23      	adds	r3, r4, #4
 800a9d6:	f020 0007 	bic.w	r0, r0, #7
 800a9da:	1ac2      	subs	r2, r0, r3
 800a9dc:	d0cc      	beq.n	800a978 <_malloc_r+0x20>
 800a9de:	1a1b      	subs	r3, r3, r0
 800a9e0:	50a3      	str	r3, [r4, r2]
 800a9e2:	e7c9      	b.n	800a978 <_malloc_r+0x20>
 800a9e4:	4622      	mov	r2, r4
 800a9e6:	6864      	ldr	r4, [r4, #4]
 800a9e8:	e7cc      	b.n	800a984 <_malloc_r+0x2c>
 800a9ea:	1cc4      	adds	r4, r0, #3
 800a9ec:	f024 0403 	bic.w	r4, r4, #3
 800a9f0:	42a0      	cmp	r0, r4
 800a9f2:	d0e3      	beq.n	800a9bc <_malloc_r+0x64>
 800a9f4:	1a21      	subs	r1, r4, r0
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	f000 f96e 	bl	800acd8 <_sbrk_r>
 800a9fc:	3001      	adds	r0, #1
 800a9fe:	d1dd      	bne.n	800a9bc <_malloc_r+0x64>
 800aa00:	e7cf      	b.n	800a9a2 <_malloc_r+0x4a>
 800aa02:	bf00      	nop
 800aa04:	20004cb0 	.word	0x20004cb0
 800aa08:	20004cb4 	.word	0x20004cb4

0800aa0c <__ssputs_r>:
 800aa0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa10:	688e      	ldr	r6, [r1, #8]
 800aa12:	429e      	cmp	r6, r3
 800aa14:	4682      	mov	sl, r0
 800aa16:	460c      	mov	r4, r1
 800aa18:	4690      	mov	r8, r2
 800aa1a:	461f      	mov	r7, r3
 800aa1c:	d838      	bhi.n	800aa90 <__ssputs_r+0x84>
 800aa1e:	898a      	ldrh	r2, [r1, #12]
 800aa20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa24:	d032      	beq.n	800aa8c <__ssputs_r+0x80>
 800aa26:	6825      	ldr	r5, [r4, #0]
 800aa28:	6909      	ldr	r1, [r1, #16]
 800aa2a:	eba5 0901 	sub.w	r9, r5, r1
 800aa2e:	6965      	ldr	r5, [r4, #20]
 800aa30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa38:	3301      	adds	r3, #1
 800aa3a:	444b      	add	r3, r9
 800aa3c:	106d      	asrs	r5, r5, #1
 800aa3e:	429d      	cmp	r5, r3
 800aa40:	bf38      	it	cc
 800aa42:	461d      	movcc	r5, r3
 800aa44:	0553      	lsls	r3, r2, #21
 800aa46:	d531      	bpl.n	800aaac <__ssputs_r+0xa0>
 800aa48:	4629      	mov	r1, r5
 800aa4a:	f7ff ff85 	bl	800a958 <_malloc_r>
 800aa4e:	4606      	mov	r6, r0
 800aa50:	b950      	cbnz	r0, 800aa68 <__ssputs_r+0x5c>
 800aa52:	230c      	movs	r3, #12
 800aa54:	f8ca 3000 	str.w	r3, [sl]
 800aa58:	89a3      	ldrh	r3, [r4, #12]
 800aa5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa5e:	81a3      	strh	r3, [r4, #12]
 800aa60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa68:	6921      	ldr	r1, [r4, #16]
 800aa6a:	464a      	mov	r2, r9
 800aa6c:	f7fc fae8 	bl	8007040 <memcpy>
 800aa70:	89a3      	ldrh	r3, [r4, #12]
 800aa72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa7a:	81a3      	strh	r3, [r4, #12]
 800aa7c:	6126      	str	r6, [r4, #16]
 800aa7e:	6165      	str	r5, [r4, #20]
 800aa80:	444e      	add	r6, r9
 800aa82:	eba5 0509 	sub.w	r5, r5, r9
 800aa86:	6026      	str	r6, [r4, #0]
 800aa88:	60a5      	str	r5, [r4, #8]
 800aa8a:	463e      	mov	r6, r7
 800aa8c:	42be      	cmp	r6, r7
 800aa8e:	d900      	bls.n	800aa92 <__ssputs_r+0x86>
 800aa90:	463e      	mov	r6, r7
 800aa92:	4632      	mov	r2, r6
 800aa94:	6820      	ldr	r0, [r4, #0]
 800aa96:	4641      	mov	r1, r8
 800aa98:	f000 f97e 	bl	800ad98 <memmove>
 800aa9c:	68a3      	ldr	r3, [r4, #8]
 800aa9e:	6822      	ldr	r2, [r4, #0]
 800aaa0:	1b9b      	subs	r3, r3, r6
 800aaa2:	4432      	add	r2, r6
 800aaa4:	60a3      	str	r3, [r4, #8]
 800aaa6:	6022      	str	r2, [r4, #0]
 800aaa8:	2000      	movs	r0, #0
 800aaaa:	e7db      	b.n	800aa64 <__ssputs_r+0x58>
 800aaac:	462a      	mov	r2, r5
 800aaae:	f000 f999 	bl	800ade4 <_realloc_r>
 800aab2:	4606      	mov	r6, r0
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d1e1      	bne.n	800aa7c <__ssputs_r+0x70>
 800aab8:	6921      	ldr	r1, [r4, #16]
 800aaba:	4650      	mov	r0, sl
 800aabc:	f7ff fefc 	bl	800a8b8 <_free_r>
 800aac0:	e7c7      	b.n	800aa52 <__ssputs_r+0x46>
	...

0800aac4 <_svfiprintf_r>:
 800aac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac8:	4698      	mov	r8, r3
 800aaca:	898b      	ldrh	r3, [r1, #12]
 800aacc:	061b      	lsls	r3, r3, #24
 800aace:	b09d      	sub	sp, #116	; 0x74
 800aad0:	4607      	mov	r7, r0
 800aad2:	460d      	mov	r5, r1
 800aad4:	4614      	mov	r4, r2
 800aad6:	d50e      	bpl.n	800aaf6 <_svfiprintf_r+0x32>
 800aad8:	690b      	ldr	r3, [r1, #16]
 800aada:	b963      	cbnz	r3, 800aaf6 <_svfiprintf_r+0x32>
 800aadc:	2140      	movs	r1, #64	; 0x40
 800aade:	f7ff ff3b 	bl	800a958 <_malloc_r>
 800aae2:	6028      	str	r0, [r5, #0]
 800aae4:	6128      	str	r0, [r5, #16]
 800aae6:	b920      	cbnz	r0, 800aaf2 <_svfiprintf_r+0x2e>
 800aae8:	230c      	movs	r3, #12
 800aaea:	603b      	str	r3, [r7, #0]
 800aaec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaf0:	e0d1      	b.n	800ac96 <_svfiprintf_r+0x1d2>
 800aaf2:	2340      	movs	r3, #64	; 0x40
 800aaf4:	616b      	str	r3, [r5, #20]
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	9309      	str	r3, [sp, #36]	; 0x24
 800aafa:	2320      	movs	r3, #32
 800aafc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab00:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab04:	2330      	movs	r3, #48	; 0x30
 800ab06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800acb0 <_svfiprintf_r+0x1ec>
 800ab0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab0e:	f04f 0901 	mov.w	r9, #1
 800ab12:	4623      	mov	r3, r4
 800ab14:	469a      	mov	sl, r3
 800ab16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab1a:	b10a      	cbz	r2, 800ab20 <_svfiprintf_r+0x5c>
 800ab1c:	2a25      	cmp	r2, #37	; 0x25
 800ab1e:	d1f9      	bne.n	800ab14 <_svfiprintf_r+0x50>
 800ab20:	ebba 0b04 	subs.w	fp, sl, r4
 800ab24:	d00b      	beq.n	800ab3e <_svfiprintf_r+0x7a>
 800ab26:	465b      	mov	r3, fp
 800ab28:	4622      	mov	r2, r4
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	4638      	mov	r0, r7
 800ab2e:	f7ff ff6d 	bl	800aa0c <__ssputs_r>
 800ab32:	3001      	adds	r0, #1
 800ab34:	f000 80aa 	beq.w	800ac8c <_svfiprintf_r+0x1c8>
 800ab38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab3a:	445a      	add	r2, fp
 800ab3c:	9209      	str	r2, [sp, #36]	; 0x24
 800ab3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f000 80a2 	beq.w	800ac8c <_svfiprintf_r+0x1c8>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab52:	f10a 0a01 	add.w	sl, sl, #1
 800ab56:	9304      	str	r3, [sp, #16]
 800ab58:	9307      	str	r3, [sp, #28]
 800ab5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab5e:	931a      	str	r3, [sp, #104]	; 0x68
 800ab60:	4654      	mov	r4, sl
 800ab62:	2205      	movs	r2, #5
 800ab64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab68:	4851      	ldr	r0, [pc, #324]	; (800acb0 <_svfiprintf_r+0x1ec>)
 800ab6a:	f7f5 fb39 	bl	80001e0 <memchr>
 800ab6e:	9a04      	ldr	r2, [sp, #16]
 800ab70:	b9d8      	cbnz	r0, 800abaa <_svfiprintf_r+0xe6>
 800ab72:	06d0      	lsls	r0, r2, #27
 800ab74:	bf44      	itt	mi
 800ab76:	2320      	movmi	r3, #32
 800ab78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab7c:	0711      	lsls	r1, r2, #28
 800ab7e:	bf44      	itt	mi
 800ab80:	232b      	movmi	r3, #43	; 0x2b
 800ab82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab86:	f89a 3000 	ldrb.w	r3, [sl]
 800ab8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab8c:	d015      	beq.n	800abba <_svfiprintf_r+0xf6>
 800ab8e:	9a07      	ldr	r2, [sp, #28]
 800ab90:	4654      	mov	r4, sl
 800ab92:	2000      	movs	r0, #0
 800ab94:	f04f 0c0a 	mov.w	ip, #10
 800ab98:	4621      	mov	r1, r4
 800ab9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab9e:	3b30      	subs	r3, #48	; 0x30
 800aba0:	2b09      	cmp	r3, #9
 800aba2:	d94e      	bls.n	800ac42 <_svfiprintf_r+0x17e>
 800aba4:	b1b0      	cbz	r0, 800abd4 <_svfiprintf_r+0x110>
 800aba6:	9207      	str	r2, [sp, #28]
 800aba8:	e014      	b.n	800abd4 <_svfiprintf_r+0x110>
 800abaa:	eba0 0308 	sub.w	r3, r0, r8
 800abae:	fa09 f303 	lsl.w	r3, r9, r3
 800abb2:	4313      	orrs	r3, r2
 800abb4:	9304      	str	r3, [sp, #16]
 800abb6:	46a2      	mov	sl, r4
 800abb8:	e7d2      	b.n	800ab60 <_svfiprintf_r+0x9c>
 800abba:	9b03      	ldr	r3, [sp, #12]
 800abbc:	1d19      	adds	r1, r3, #4
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	9103      	str	r1, [sp, #12]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	bfbb      	ittet	lt
 800abc6:	425b      	neglt	r3, r3
 800abc8:	f042 0202 	orrlt.w	r2, r2, #2
 800abcc:	9307      	strge	r3, [sp, #28]
 800abce:	9307      	strlt	r3, [sp, #28]
 800abd0:	bfb8      	it	lt
 800abd2:	9204      	strlt	r2, [sp, #16]
 800abd4:	7823      	ldrb	r3, [r4, #0]
 800abd6:	2b2e      	cmp	r3, #46	; 0x2e
 800abd8:	d10c      	bne.n	800abf4 <_svfiprintf_r+0x130>
 800abda:	7863      	ldrb	r3, [r4, #1]
 800abdc:	2b2a      	cmp	r3, #42	; 0x2a
 800abde:	d135      	bne.n	800ac4c <_svfiprintf_r+0x188>
 800abe0:	9b03      	ldr	r3, [sp, #12]
 800abe2:	1d1a      	adds	r2, r3, #4
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	9203      	str	r2, [sp, #12]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	bfb8      	it	lt
 800abec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800abf0:	3402      	adds	r4, #2
 800abf2:	9305      	str	r3, [sp, #20]
 800abf4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800acc0 <_svfiprintf_r+0x1fc>
 800abf8:	7821      	ldrb	r1, [r4, #0]
 800abfa:	2203      	movs	r2, #3
 800abfc:	4650      	mov	r0, sl
 800abfe:	f7f5 faef 	bl	80001e0 <memchr>
 800ac02:	b140      	cbz	r0, 800ac16 <_svfiprintf_r+0x152>
 800ac04:	2340      	movs	r3, #64	; 0x40
 800ac06:	eba0 000a 	sub.w	r0, r0, sl
 800ac0a:	fa03 f000 	lsl.w	r0, r3, r0
 800ac0e:	9b04      	ldr	r3, [sp, #16]
 800ac10:	4303      	orrs	r3, r0
 800ac12:	3401      	adds	r4, #1
 800ac14:	9304      	str	r3, [sp, #16]
 800ac16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac1a:	4826      	ldr	r0, [pc, #152]	; (800acb4 <_svfiprintf_r+0x1f0>)
 800ac1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac20:	2206      	movs	r2, #6
 800ac22:	f7f5 fadd 	bl	80001e0 <memchr>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	d038      	beq.n	800ac9c <_svfiprintf_r+0x1d8>
 800ac2a:	4b23      	ldr	r3, [pc, #140]	; (800acb8 <_svfiprintf_r+0x1f4>)
 800ac2c:	bb1b      	cbnz	r3, 800ac76 <_svfiprintf_r+0x1b2>
 800ac2e:	9b03      	ldr	r3, [sp, #12]
 800ac30:	3307      	adds	r3, #7
 800ac32:	f023 0307 	bic.w	r3, r3, #7
 800ac36:	3308      	adds	r3, #8
 800ac38:	9303      	str	r3, [sp, #12]
 800ac3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac3c:	4433      	add	r3, r6
 800ac3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ac40:	e767      	b.n	800ab12 <_svfiprintf_r+0x4e>
 800ac42:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac46:	460c      	mov	r4, r1
 800ac48:	2001      	movs	r0, #1
 800ac4a:	e7a5      	b.n	800ab98 <_svfiprintf_r+0xd4>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	3401      	adds	r4, #1
 800ac50:	9305      	str	r3, [sp, #20]
 800ac52:	4619      	mov	r1, r3
 800ac54:	f04f 0c0a 	mov.w	ip, #10
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac5e:	3a30      	subs	r2, #48	; 0x30
 800ac60:	2a09      	cmp	r2, #9
 800ac62:	d903      	bls.n	800ac6c <_svfiprintf_r+0x1a8>
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d0c5      	beq.n	800abf4 <_svfiprintf_r+0x130>
 800ac68:	9105      	str	r1, [sp, #20]
 800ac6a:	e7c3      	b.n	800abf4 <_svfiprintf_r+0x130>
 800ac6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac70:	4604      	mov	r4, r0
 800ac72:	2301      	movs	r3, #1
 800ac74:	e7f0      	b.n	800ac58 <_svfiprintf_r+0x194>
 800ac76:	ab03      	add	r3, sp, #12
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	462a      	mov	r2, r5
 800ac7c:	4b0f      	ldr	r3, [pc, #60]	; (800acbc <_svfiprintf_r+0x1f8>)
 800ac7e:	a904      	add	r1, sp, #16
 800ac80:	4638      	mov	r0, r7
 800ac82:	f7fc fa93 	bl	80071ac <_printf_float>
 800ac86:	1c42      	adds	r2, r0, #1
 800ac88:	4606      	mov	r6, r0
 800ac8a:	d1d6      	bne.n	800ac3a <_svfiprintf_r+0x176>
 800ac8c:	89ab      	ldrh	r3, [r5, #12]
 800ac8e:	065b      	lsls	r3, r3, #25
 800ac90:	f53f af2c 	bmi.w	800aaec <_svfiprintf_r+0x28>
 800ac94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac96:	b01d      	add	sp, #116	; 0x74
 800ac98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9c:	ab03      	add	r3, sp, #12
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	462a      	mov	r2, r5
 800aca2:	4b06      	ldr	r3, [pc, #24]	; (800acbc <_svfiprintf_r+0x1f8>)
 800aca4:	a904      	add	r1, sp, #16
 800aca6:	4638      	mov	r0, r7
 800aca8:	f7fc fd24 	bl	80076f4 <_printf_i>
 800acac:	e7eb      	b.n	800ac86 <_svfiprintf_r+0x1c2>
 800acae:	bf00      	nop
 800acb0:	0800bd8c 	.word	0x0800bd8c
 800acb4:	0800bd96 	.word	0x0800bd96
 800acb8:	080071ad 	.word	0x080071ad
 800acbc:	0800aa0d 	.word	0x0800aa0d
 800acc0:	0800bd92 	.word	0x0800bd92
 800acc4:	00000000 	.word	0x00000000

0800acc8 <nan>:
 800acc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800acd0 <nan+0x8>
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	00000000 	.word	0x00000000
 800acd4:	7ff80000 	.word	0x7ff80000

0800acd8 <_sbrk_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4d06      	ldr	r5, [pc, #24]	; (800acf4 <_sbrk_r+0x1c>)
 800acdc:	2300      	movs	r3, #0
 800acde:	4604      	mov	r4, r0
 800ace0:	4608      	mov	r0, r1
 800ace2:	602b      	str	r3, [r5, #0]
 800ace4:	f7f7 f8b6 	bl	8001e54 <_sbrk>
 800ace8:	1c43      	adds	r3, r0, #1
 800acea:	d102      	bne.n	800acf2 <_sbrk_r+0x1a>
 800acec:	682b      	ldr	r3, [r5, #0]
 800acee:	b103      	cbz	r3, 800acf2 <_sbrk_r+0x1a>
 800acf0:	6023      	str	r3, [r4, #0]
 800acf2:	bd38      	pop	{r3, r4, r5, pc}
 800acf4:	20004cfc 	.word	0x20004cfc

0800acf8 <strncmp>:
 800acf8:	b510      	push	{r4, lr}
 800acfa:	b16a      	cbz	r2, 800ad18 <strncmp+0x20>
 800acfc:	3901      	subs	r1, #1
 800acfe:	1884      	adds	r4, r0, r2
 800ad00:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ad04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d103      	bne.n	800ad14 <strncmp+0x1c>
 800ad0c:	42a0      	cmp	r0, r4
 800ad0e:	d001      	beq.n	800ad14 <strncmp+0x1c>
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1f5      	bne.n	800ad00 <strncmp+0x8>
 800ad14:	1a98      	subs	r0, r3, r2
 800ad16:	bd10      	pop	{r4, pc}
 800ad18:	4610      	mov	r0, r2
 800ad1a:	e7fc      	b.n	800ad16 <strncmp+0x1e>

0800ad1c <__ascii_wctomb>:
 800ad1c:	b149      	cbz	r1, 800ad32 <__ascii_wctomb+0x16>
 800ad1e:	2aff      	cmp	r2, #255	; 0xff
 800ad20:	bf85      	ittet	hi
 800ad22:	238a      	movhi	r3, #138	; 0x8a
 800ad24:	6003      	strhi	r3, [r0, #0]
 800ad26:	700a      	strbls	r2, [r1, #0]
 800ad28:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ad2c:	bf98      	it	ls
 800ad2e:	2001      	movls	r0, #1
 800ad30:	4770      	bx	lr
 800ad32:	4608      	mov	r0, r1
 800ad34:	4770      	bx	lr
	...

0800ad38 <__assert_func>:
 800ad38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad3a:	4614      	mov	r4, r2
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	4b09      	ldr	r3, [pc, #36]	; (800ad64 <__assert_func+0x2c>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4605      	mov	r5, r0
 800ad44:	68d8      	ldr	r0, [r3, #12]
 800ad46:	b14c      	cbz	r4, 800ad5c <__assert_func+0x24>
 800ad48:	4b07      	ldr	r3, [pc, #28]	; (800ad68 <__assert_func+0x30>)
 800ad4a:	9100      	str	r1, [sp, #0]
 800ad4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad50:	4906      	ldr	r1, [pc, #24]	; (800ad6c <__assert_func+0x34>)
 800ad52:	462b      	mov	r3, r5
 800ad54:	f000 f80e 	bl	800ad74 <fiprintf>
 800ad58:	f000 fa84 	bl	800b264 <abort>
 800ad5c:	4b04      	ldr	r3, [pc, #16]	; (800ad70 <__assert_func+0x38>)
 800ad5e:	461c      	mov	r4, r3
 800ad60:	e7f3      	b.n	800ad4a <__assert_func+0x12>
 800ad62:	bf00      	nop
 800ad64:	20000010 	.word	0x20000010
 800ad68:	0800bd9d 	.word	0x0800bd9d
 800ad6c:	0800bdaa 	.word	0x0800bdaa
 800ad70:	0800bdd8 	.word	0x0800bdd8

0800ad74 <fiprintf>:
 800ad74:	b40e      	push	{r1, r2, r3}
 800ad76:	b503      	push	{r0, r1, lr}
 800ad78:	4601      	mov	r1, r0
 800ad7a:	ab03      	add	r3, sp, #12
 800ad7c:	4805      	ldr	r0, [pc, #20]	; (800ad94 <fiprintf+0x20>)
 800ad7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad82:	6800      	ldr	r0, [r0, #0]
 800ad84:	9301      	str	r3, [sp, #4]
 800ad86:	f000 f87d 	bl	800ae84 <_vfiprintf_r>
 800ad8a:	b002      	add	sp, #8
 800ad8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad90:	b003      	add	sp, #12
 800ad92:	4770      	bx	lr
 800ad94:	20000010 	.word	0x20000010

0800ad98 <memmove>:
 800ad98:	4288      	cmp	r0, r1
 800ad9a:	b510      	push	{r4, lr}
 800ad9c:	eb01 0402 	add.w	r4, r1, r2
 800ada0:	d902      	bls.n	800ada8 <memmove+0x10>
 800ada2:	4284      	cmp	r4, r0
 800ada4:	4623      	mov	r3, r4
 800ada6:	d807      	bhi.n	800adb8 <memmove+0x20>
 800ada8:	1e43      	subs	r3, r0, #1
 800adaa:	42a1      	cmp	r1, r4
 800adac:	d008      	beq.n	800adc0 <memmove+0x28>
 800adae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adb6:	e7f8      	b.n	800adaa <memmove+0x12>
 800adb8:	4402      	add	r2, r0
 800adba:	4601      	mov	r1, r0
 800adbc:	428a      	cmp	r2, r1
 800adbe:	d100      	bne.n	800adc2 <memmove+0x2a>
 800adc0:	bd10      	pop	{r4, pc}
 800adc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adca:	e7f7      	b.n	800adbc <memmove+0x24>

0800adcc <__malloc_lock>:
 800adcc:	4801      	ldr	r0, [pc, #4]	; (800add4 <__malloc_lock+0x8>)
 800adce:	f000 bc09 	b.w	800b5e4 <__retarget_lock_acquire_recursive>
 800add2:	bf00      	nop
 800add4:	20004d04 	.word	0x20004d04

0800add8 <__malloc_unlock>:
 800add8:	4801      	ldr	r0, [pc, #4]	; (800ade0 <__malloc_unlock+0x8>)
 800adda:	f000 bc04 	b.w	800b5e6 <__retarget_lock_release_recursive>
 800adde:	bf00      	nop
 800ade0:	20004d04 	.word	0x20004d04

0800ade4 <_realloc_r>:
 800ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade6:	4607      	mov	r7, r0
 800ade8:	4614      	mov	r4, r2
 800adea:	460e      	mov	r6, r1
 800adec:	b921      	cbnz	r1, 800adf8 <_realloc_r+0x14>
 800adee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800adf2:	4611      	mov	r1, r2
 800adf4:	f7ff bdb0 	b.w	800a958 <_malloc_r>
 800adf8:	b922      	cbnz	r2, 800ae04 <_realloc_r+0x20>
 800adfa:	f7ff fd5d 	bl	800a8b8 <_free_r>
 800adfe:	4625      	mov	r5, r4
 800ae00:	4628      	mov	r0, r5
 800ae02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae04:	f000 fc54 	bl	800b6b0 <_malloc_usable_size_r>
 800ae08:	42a0      	cmp	r0, r4
 800ae0a:	d20f      	bcs.n	800ae2c <_realloc_r+0x48>
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	4638      	mov	r0, r7
 800ae10:	f7ff fda2 	bl	800a958 <_malloc_r>
 800ae14:	4605      	mov	r5, r0
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d0f2      	beq.n	800ae00 <_realloc_r+0x1c>
 800ae1a:	4631      	mov	r1, r6
 800ae1c:	4622      	mov	r2, r4
 800ae1e:	f7fc f90f 	bl	8007040 <memcpy>
 800ae22:	4631      	mov	r1, r6
 800ae24:	4638      	mov	r0, r7
 800ae26:	f7ff fd47 	bl	800a8b8 <_free_r>
 800ae2a:	e7e9      	b.n	800ae00 <_realloc_r+0x1c>
 800ae2c:	4635      	mov	r5, r6
 800ae2e:	e7e7      	b.n	800ae00 <_realloc_r+0x1c>

0800ae30 <__sfputc_r>:
 800ae30:	6893      	ldr	r3, [r2, #8]
 800ae32:	3b01      	subs	r3, #1
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	b410      	push	{r4}
 800ae38:	6093      	str	r3, [r2, #8]
 800ae3a:	da08      	bge.n	800ae4e <__sfputc_r+0x1e>
 800ae3c:	6994      	ldr	r4, [r2, #24]
 800ae3e:	42a3      	cmp	r3, r4
 800ae40:	db01      	blt.n	800ae46 <__sfputc_r+0x16>
 800ae42:	290a      	cmp	r1, #10
 800ae44:	d103      	bne.n	800ae4e <__sfputc_r+0x1e>
 800ae46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae4a:	f000 b94b 	b.w	800b0e4 <__swbuf_r>
 800ae4e:	6813      	ldr	r3, [r2, #0]
 800ae50:	1c58      	adds	r0, r3, #1
 800ae52:	6010      	str	r0, [r2, #0]
 800ae54:	7019      	strb	r1, [r3, #0]
 800ae56:	4608      	mov	r0, r1
 800ae58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae5c:	4770      	bx	lr

0800ae5e <__sfputs_r>:
 800ae5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae60:	4606      	mov	r6, r0
 800ae62:	460f      	mov	r7, r1
 800ae64:	4614      	mov	r4, r2
 800ae66:	18d5      	adds	r5, r2, r3
 800ae68:	42ac      	cmp	r4, r5
 800ae6a:	d101      	bne.n	800ae70 <__sfputs_r+0x12>
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	e007      	b.n	800ae80 <__sfputs_r+0x22>
 800ae70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae74:	463a      	mov	r2, r7
 800ae76:	4630      	mov	r0, r6
 800ae78:	f7ff ffda 	bl	800ae30 <__sfputc_r>
 800ae7c:	1c43      	adds	r3, r0, #1
 800ae7e:	d1f3      	bne.n	800ae68 <__sfputs_r+0xa>
 800ae80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae84 <_vfiprintf_r>:
 800ae84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae88:	460d      	mov	r5, r1
 800ae8a:	b09d      	sub	sp, #116	; 0x74
 800ae8c:	4614      	mov	r4, r2
 800ae8e:	4698      	mov	r8, r3
 800ae90:	4606      	mov	r6, r0
 800ae92:	b118      	cbz	r0, 800ae9c <_vfiprintf_r+0x18>
 800ae94:	6983      	ldr	r3, [r0, #24]
 800ae96:	b90b      	cbnz	r3, 800ae9c <_vfiprintf_r+0x18>
 800ae98:	f000 fb06 	bl	800b4a8 <__sinit>
 800ae9c:	4b89      	ldr	r3, [pc, #548]	; (800b0c4 <_vfiprintf_r+0x240>)
 800ae9e:	429d      	cmp	r5, r3
 800aea0:	d11b      	bne.n	800aeda <_vfiprintf_r+0x56>
 800aea2:	6875      	ldr	r5, [r6, #4]
 800aea4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aea6:	07d9      	lsls	r1, r3, #31
 800aea8:	d405      	bmi.n	800aeb6 <_vfiprintf_r+0x32>
 800aeaa:	89ab      	ldrh	r3, [r5, #12]
 800aeac:	059a      	lsls	r2, r3, #22
 800aeae:	d402      	bmi.n	800aeb6 <_vfiprintf_r+0x32>
 800aeb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeb2:	f000 fb97 	bl	800b5e4 <__retarget_lock_acquire_recursive>
 800aeb6:	89ab      	ldrh	r3, [r5, #12]
 800aeb8:	071b      	lsls	r3, r3, #28
 800aeba:	d501      	bpl.n	800aec0 <_vfiprintf_r+0x3c>
 800aebc:	692b      	ldr	r3, [r5, #16]
 800aebe:	b9eb      	cbnz	r3, 800aefc <_vfiprintf_r+0x78>
 800aec0:	4629      	mov	r1, r5
 800aec2:	4630      	mov	r0, r6
 800aec4:	f000 f960 	bl	800b188 <__swsetup_r>
 800aec8:	b1c0      	cbz	r0, 800aefc <_vfiprintf_r+0x78>
 800aeca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aecc:	07dc      	lsls	r4, r3, #31
 800aece:	d50e      	bpl.n	800aeee <_vfiprintf_r+0x6a>
 800aed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aed4:	b01d      	add	sp, #116	; 0x74
 800aed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeda:	4b7b      	ldr	r3, [pc, #492]	; (800b0c8 <_vfiprintf_r+0x244>)
 800aedc:	429d      	cmp	r5, r3
 800aede:	d101      	bne.n	800aee4 <_vfiprintf_r+0x60>
 800aee0:	68b5      	ldr	r5, [r6, #8]
 800aee2:	e7df      	b.n	800aea4 <_vfiprintf_r+0x20>
 800aee4:	4b79      	ldr	r3, [pc, #484]	; (800b0cc <_vfiprintf_r+0x248>)
 800aee6:	429d      	cmp	r5, r3
 800aee8:	bf08      	it	eq
 800aeea:	68f5      	ldreq	r5, [r6, #12]
 800aeec:	e7da      	b.n	800aea4 <_vfiprintf_r+0x20>
 800aeee:	89ab      	ldrh	r3, [r5, #12]
 800aef0:	0598      	lsls	r0, r3, #22
 800aef2:	d4ed      	bmi.n	800aed0 <_vfiprintf_r+0x4c>
 800aef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aef6:	f000 fb76 	bl	800b5e6 <__retarget_lock_release_recursive>
 800aefa:	e7e9      	b.n	800aed0 <_vfiprintf_r+0x4c>
 800aefc:	2300      	movs	r3, #0
 800aefe:	9309      	str	r3, [sp, #36]	; 0x24
 800af00:	2320      	movs	r3, #32
 800af02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af06:	f8cd 800c 	str.w	r8, [sp, #12]
 800af0a:	2330      	movs	r3, #48	; 0x30
 800af0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b0d0 <_vfiprintf_r+0x24c>
 800af10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af14:	f04f 0901 	mov.w	r9, #1
 800af18:	4623      	mov	r3, r4
 800af1a:	469a      	mov	sl, r3
 800af1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af20:	b10a      	cbz	r2, 800af26 <_vfiprintf_r+0xa2>
 800af22:	2a25      	cmp	r2, #37	; 0x25
 800af24:	d1f9      	bne.n	800af1a <_vfiprintf_r+0x96>
 800af26:	ebba 0b04 	subs.w	fp, sl, r4
 800af2a:	d00b      	beq.n	800af44 <_vfiprintf_r+0xc0>
 800af2c:	465b      	mov	r3, fp
 800af2e:	4622      	mov	r2, r4
 800af30:	4629      	mov	r1, r5
 800af32:	4630      	mov	r0, r6
 800af34:	f7ff ff93 	bl	800ae5e <__sfputs_r>
 800af38:	3001      	adds	r0, #1
 800af3a:	f000 80aa 	beq.w	800b092 <_vfiprintf_r+0x20e>
 800af3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af40:	445a      	add	r2, fp
 800af42:	9209      	str	r2, [sp, #36]	; 0x24
 800af44:	f89a 3000 	ldrb.w	r3, [sl]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f000 80a2 	beq.w	800b092 <_vfiprintf_r+0x20e>
 800af4e:	2300      	movs	r3, #0
 800af50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af58:	f10a 0a01 	add.w	sl, sl, #1
 800af5c:	9304      	str	r3, [sp, #16]
 800af5e:	9307      	str	r3, [sp, #28]
 800af60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af64:	931a      	str	r3, [sp, #104]	; 0x68
 800af66:	4654      	mov	r4, sl
 800af68:	2205      	movs	r2, #5
 800af6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af6e:	4858      	ldr	r0, [pc, #352]	; (800b0d0 <_vfiprintf_r+0x24c>)
 800af70:	f7f5 f936 	bl	80001e0 <memchr>
 800af74:	9a04      	ldr	r2, [sp, #16]
 800af76:	b9d8      	cbnz	r0, 800afb0 <_vfiprintf_r+0x12c>
 800af78:	06d1      	lsls	r1, r2, #27
 800af7a:	bf44      	itt	mi
 800af7c:	2320      	movmi	r3, #32
 800af7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af82:	0713      	lsls	r3, r2, #28
 800af84:	bf44      	itt	mi
 800af86:	232b      	movmi	r3, #43	; 0x2b
 800af88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af8c:	f89a 3000 	ldrb.w	r3, [sl]
 800af90:	2b2a      	cmp	r3, #42	; 0x2a
 800af92:	d015      	beq.n	800afc0 <_vfiprintf_r+0x13c>
 800af94:	9a07      	ldr	r2, [sp, #28]
 800af96:	4654      	mov	r4, sl
 800af98:	2000      	movs	r0, #0
 800af9a:	f04f 0c0a 	mov.w	ip, #10
 800af9e:	4621      	mov	r1, r4
 800afa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afa4:	3b30      	subs	r3, #48	; 0x30
 800afa6:	2b09      	cmp	r3, #9
 800afa8:	d94e      	bls.n	800b048 <_vfiprintf_r+0x1c4>
 800afaa:	b1b0      	cbz	r0, 800afda <_vfiprintf_r+0x156>
 800afac:	9207      	str	r2, [sp, #28]
 800afae:	e014      	b.n	800afda <_vfiprintf_r+0x156>
 800afb0:	eba0 0308 	sub.w	r3, r0, r8
 800afb4:	fa09 f303 	lsl.w	r3, r9, r3
 800afb8:	4313      	orrs	r3, r2
 800afba:	9304      	str	r3, [sp, #16]
 800afbc:	46a2      	mov	sl, r4
 800afbe:	e7d2      	b.n	800af66 <_vfiprintf_r+0xe2>
 800afc0:	9b03      	ldr	r3, [sp, #12]
 800afc2:	1d19      	adds	r1, r3, #4
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	9103      	str	r1, [sp, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	bfbb      	ittet	lt
 800afcc:	425b      	neglt	r3, r3
 800afce:	f042 0202 	orrlt.w	r2, r2, #2
 800afd2:	9307      	strge	r3, [sp, #28]
 800afd4:	9307      	strlt	r3, [sp, #28]
 800afd6:	bfb8      	it	lt
 800afd8:	9204      	strlt	r2, [sp, #16]
 800afda:	7823      	ldrb	r3, [r4, #0]
 800afdc:	2b2e      	cmp	r3, #46	; 0x2e
 800afde:	d10c      	bne.n	800affa <_vfiprintf_r+0x176>
 800afe0:	7863      	ldrb	r3, [r4, #1]
 800afe2:	2b2a      	cmp	r3, #42	; 0x2a
 800afe4:	d135      	bne.n	800b052 <_vfiprintf_r+0x1ce>
 800afe6:	9b03      	ldr	r3, [sp, #12]
 800afe8:	1d1a      	adds	r2, r3, #4
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	9203      	str	r2, [sp, #12]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	bfb8      	it	lt
 800aff2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aff6:	3402      	adds	r4, #2
 800aff8:	9305      	str	r3, [sp, #20]
 800affa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b0e0 <_vfiprintf_r+0x25c>
 800affe:	7821      	ldrb	r1, [r4, #0]
 800b000:	2203      	movs	r2, #3
 800b002:	4650      	mov	r0, sl
 800b004:	f7f5 f8ec 	bl	80001e0 <memchr>
 800b008:	b140      	cbz	r0, 800b01c <_vfiprintf_r+0x198>
 800b00a:	2340      	movs	r3, #64	; 0x40
 800b00c:	eba0 000a 	sub.w	r0, r0, sl
 800b010:	fa03 f000 	lsl.w	r0, r3, r0
 800b014:	9b04      	ldr	r3, [sp, #16]
 800b016:	4303      	orrs	r3, r0
 800b018:	3401      	adds	r4, #1
 800b01a:	9304      	str	r3, [sp, #16]
 800b01c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b020:	482c      	ldr	r0, [pc, #176]	; (800b0d4 <_vfiprintf_r+0x250>)
 800b022:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b026:	2206      	movs	r2, #6
 800b028:	f7f5 f8da 	bl	80001e0 <memchr>
 800b02c:	2800      	cmp	r0, #0
 800b02e:	d03f      	beq.n	800b0b0 <_vfiprintf_r+0x22c>
 800b030:	4b29      	ldr	r3, [pc, #164]	; (800b0d8 <_vfiprintf_r+0x254>)
 800b032:	bb1b      	cbnz	r3, 800b07c <_vfiprintf_r+0x1f8>
 800b034:	9b03      	ldr	r3, [sp, #12]
 800b036:	3307      	adds	r3, #7
 800b038:	f023 0307 	bic.w	r3, r3, #7
 800b03c:	3308      	adds	r3, #8
 800b03e:	9303      	str	r3, [sp, #12]
 800b040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b042:	443b      	add	r3, r7
 800b044:	9309      	str	r3, [sp, #36]	; 0x24
 800b046:	e767      	b.n	800af18 <_vfiprintf_r+0x94>
 800b048:	fb0c 3202 	mla	r2, ip, r2, r3
 800b04c:	460c      	mov	r4, r1
 800b04e:	2001      	movs	r0, #1
 800b050:	e7a5      	b.n	800af9e <_vfiprintf_r+0x11a>
 800b052:	2300      	movs	r3, #0
 800b054:	3401      	adds	r4, #1
 800b056:	9305      	str	r3, [sp, #20]
 800b058:	4619      	mov	r1, r3
 800b05a:	f04f 0c0a 	mov.w	ip, #10
 800b05e:	4620      	mov	r0, r4
 800b060:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b064:	3a30      	subs	r2, #48	; 0x30
 800b066:	2a09      	cmp	r2, #9
 800b068:	d903      	bls.n	800b072 <_vfiprintf_r+0x1ee>
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d0c5      	beq.n	800affa <_vfiprintf_r+0x176>
 800b06e:	9105      	str	r1, [sp, #20]
 800b070:	e7c3      	b.n	800affa <_vfiprintf_r+0x176>
 800b072:	fb0c 2101 	mla	r1, ip, r1, r2
 800b076:	4604      	mov	r4, r0
 800b078:	2301      	movs	r3, #1
 800b07a:	e7f0      	b.n	800b05e <_vfiprintf_r+0x1da>
 800b07c:	ab03      	add	r3, sp, #12
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	462a      	mov	r2, r5
 800b082:	4b16      	ldr	r3, [pc, #88]	; (800b0dc <_vfiprintf_r+0x258>)
 800b084:	a904      	add	r1, sp, #16
 800b086:	4630      	mov	r0, r6
 800b088:	f7fc f890 	bl	80071ac <_printf_float>
 800b08c:	4607      	mov	r7, r0
 800b08e:	1c78      	adds	r0, r7, #1
 800b090:	d1d6      	bne.n	800b040 <_vfiprintf_r+0x1bc>
 800b092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b094:	07d9      	lsls	r1, r3, #31
 800b096:	d405      	bmi.n	800b0a4 <_vfiprintf_r+0x220>
 800b098:	89ab      	ldrh	r3, [r5, #12]
 800b09a:	059a      	lsls	r2, r3, #22
 800b09c:	d402      	bmi.n	800b0a4 <_vfiprintf_r+0x220>
 800b09e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0a0:	f000 faa1 	bl	800b5e6 <__retarget_lock_release_recursive>
 800b0a4:	89ab      	ldrh	r3, [r5, #12]
 800b0a6:	065b      	lsls	r3, r3, #25
 800b0a8:	f53f af12 	bmi.w	800aed0 <_vfiprintf_r+0x4c>
 800b0ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0ae:	e711      	b.n	800aed4 <_vfiprintf_r+0x50>
 800b0b0:	ab03      	add	r3, sp, #12
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	462a      	mov	r2, r5
 800b0b6:	4b09      	ldr	r3, [pc, #36]	; (800b0dc <_vfiprintf_r+0x258>)
 800b0b8:	a904      	add	r1, sp, #16
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	f7fc fb1a 	bl	80076f4 <_printf_i>
 800b0c0:	e7e4      	b.n	800b08c <_vfiprintf_r+0x208>
 800b0c2:	bf00      	nop
 800b0c4:	0800bdfc 	.word	0x0800bdfc
 800b0c8:	0800be1c 	.word	0x0800be1c
 800b0cc:	0800bddc 	.word	0x0800bddc
 800b0d0:	0800bd8c 	.word	0x0800bd8c
 800b0d4:	0800bd96 	.word	0x0800bd96
 800b0d8:	080071ad 	.word	0x080071ad
 800b0dc:	0800ae5f 	.word	0x0800ae5f
 800b0e0:	0800bd92 	.word	0x0800bd92

0800b0e4 <__swbuf_r>:
 800b0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e6:	460e      	mov	r6, r1
 800b0e8:	4614      	mov	r4, r2
 800b0ea:	4605      	mov	r5, r0
 800b0ec:	b118      	cbz	r0, 800b0f6 <__swbuf_r+0x12>
 800b0ee:	6983      	ldr	r3, [r0, #24]
 800b0f0:	b90b      	cbnz	r3, 800b0f6 <__swbuf_r+0x12>
 800b0f2:	f000 f9d9 	bl	800b4a8 <__sinit>
 800b0f6:	4b21      	ldr	r3, [pc, #132]	; (800b17c <__swbuf_r+0x98>)
 800b0f8:	429c      	cmp	r4, r3
 800b0fa:	d12b      	bne.n	800b154 <__swbuf_r+0x70>
 800b0fc:	686c      	ldr	r4, [r5, #4]
 800b0fe:	69a3      	ldr	r3, [r4, #24]
 800b100:	60a3      	str	r3, [r4, #8]
 800b102:	89a3      	ldrh	r3, [r4, #12]
 800b104:	071a      	lsls	r2, r3, #28
 800b106:	d52f      	bpl.n	800b168 <__swbuf_r+0x84>
 800b108:	6923      	ldr	r3, [r4, #16]
 800b10a:	b36b      	cbz	r3, 800b168 <__swbuf_r+0x84>
 800b10c:	6923      	ldr	r3, [r4, #16]
 800b10e:	6820      	ldr	r0, [r4, #0]
 800b110:	1ac0      	subs	r0, r0, r3
 800b112:	6963      	ldr	r3, [r4, #20]
 800b114:	b2f6      	uxtb	r6, r6
 800b116:	4283      	cmp	r3, r0
 800b118:	4637      	mov	r7, r6
 800b11a:	dc04      	bgt.n	800b126 <__swbuf_r+0x42>
 800b11c:	4621      	mov	r1, r4
 800b11e:	4628      	mov	r0, r5
 800b120:	f000 f92e 	bl	800b380 <_fflush_r>
 800b124:	bb30      	cbnz	r0, 800b174 <__swbuf_r+0x90>
 800b126:	68a3      	ldr	r3, [r4, #8]
 800b128:	3b01      	subs	r3, #1
 800b12a:	60a3      	str	r3, [r4, #8]
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	1c5a      	adds	r2, r3, #1
 800b130:	6022      	str	r2, [r4, #0]
 800b132:	701e      	strb	r6, [r3, #0]
 800b134:	6963      	ldr	r3, [r4, #20]
 800b136:	3001      	adds	r0, #1
 800b138:	4283      	cmp	r3, r0
 800b13a:	d004      	beq.n	800b146 <__swbuf_r+0x62>
 800b13c:	89a3      	ldrh	r3, [r4, #12]
 800b13e:	07db      	lsls	r3, r3, #31
 800b140:	d506      	bpl.n	800b150 <__swbuf_r+0x6c>
 800b142:	2e0a      	cmp	r6, #10
 800b144:	d104      	bne.n	800b150 <__swbuf_r+0x6c>
 800b146:	4621      	mov	r1, r4
 800b148:	4628      	mov	r0, r5
 800b14a:	f000 f919 	bl	800b380 <_fflush_r>
 800b14e:	b988      	cbnz	r0, 800b174 <__swbuf_r+0x90>
 800b150:	4638      	mov	r0, r7
 800b152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b154:	4b0a      	ldr	r3, [pc, #40]	; (800b180 <__swbuf_r+0x9c>)
 800b156:	429c      	cmp	r4, r3
 800b158:	d101      	bne.n	800b15e <__swbuf_r+0x7a>
 800b15a:	68ac      	ldr	r4, [r5, #8]
 800b15c:	e7cf      	b.n	800b0fe <__swbuf_r+0x1a>
 800b15e:	4b09      	ldr	r3, [pc, #36]	; (800b184 <__swbuf_r+0xa0>)
 800b160:	429c      	cmp	r4, r3
 800b162:	bf08      	it	eq
 800b164:	68ec      	ldreq	r4, [r5, #12]
 800b166:	e7ca      	b.n	800b0fe <__swbuf_r+0x1a>
 800b168:	4621      	mov	r1, r4
 800b16a:	4628      	mov	r0, r5
 800b16c:	f000 f80c 	bl	800b188 <__swsetup_r>
 800b170:	2800      	cmp	r0, #0
 800b172:	d0cb      	beq.n	800b10c <__swbuf_r+0x28>
 800b174:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b178:	e7ea      	b.n	800b150 <__swbuf_r+0x6c>
 800b17a:	bf00      	nop
 800b17c:	0800bdfc 	.word	0x0800bdfc
 800b180:	0800be1c 	.word	0x0800be1c
 800b184:	0800bddc 	.word	0x0800bddc

0800b188 <__swsetup_r>:
 800b188:	4b32      	ldr	r3, [pc, #200]	; (800b254 <__swsetup_r+0xcc>)
 800b18a:	b570      	push	{r4, r5, r6, lr}
 800b18c:	681d      	ldr	r5, [r3, #0]
 800b18e:	4606      	mov	r6, r0
 800b190:	460c      	mov	r4, r1
 800b192:	b125      	cbz	r5, 800b19e <__swsetup_r+0x16>
 800b194:	69ab      	ldr	r3, [r5, #24]
 800b196:	b913      	cbnz	r3, 800b19e <__swsetup_r+0x16>
 800b198:	4628      	mov	r0, r5
 800b19a:	f000 f985 	bl	800b4a8 <__sinit>
 800b19e:	4b2e      	ldr	r3, [pc, #184]	; (800b258 <__swsetup_r+0xd0>)
 800b1a0:	429c      	cmp	r4, r3
 800b1a2:	d10f      	bne.n	800b1c4 <__swsetup_r+0x3c>
 800b1a4:	686c      	ldr	r4, [r5, #4]
 800b1a6:	89a3      	ldrh	r3, [r4, #12]
 800b1a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1ac:	0719      	lsls	r1, r3, #28
 800b1ae:	d42c      	bmi.n	800b20a <__swsetup_r+0x82>
 800b1b0:	06dd      	lsls	r5, r3, #27
 800b1b2:	d411      	bmi.n	800b1d8 <__swsetup_r+0x50>
 800b1b4:	2309      	movs	r3, #9
 800b1b6:	6033      	str	r3, [r6, #0]
 800b1b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b1bc:	81a3      	strh	r3, [r4, #12]
 800b1be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1c2:	e03e      	b.n	800b242 <__swsetup_r+0xba>
 800b1c4:	4b25      	ldr	r3, [pc, #148]	; (800b25c <__swsetup_r+0xd4>)
 800b1c6:	429c      	cmp	r4, r3
 800b1c8:	d101      	bne.n	800b1ce <__swsetup_r+0x46>
 800b1ca:	68ac      	ldr	r4, [r5, #8]
 800b1cc:	e7eb      	b.n	800b1a6 <__swsetup_r+0x1e>
 800b1ce:	4b24      	ldr	r3, [pc, #144]	; (800b260 <__swsetup_r+0xd8>)
 800b1d0:	429c      	cmp	r4, r3
 800b1d2:	bf08      	it	eq
 800b1d4:	68ec      	ldreq	r4, [r5, #12]
 800b1d6:	e7e6      	b.n	800b1a6 <__swsetup_r+0x1e>
 800b1d8:	0758      	lsls	r0, r3, #29
 800b1da:	d512      	bpl.n	800b202 <__swsetup_r+0x7a>
 800b1dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1de:	b141      	cbz	r1, 800b1f2 <__swsetup_r+0x6a>
 800b1e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1e4:	4299      	cmp	r1, r3
 800b1e6:	d002      	beq.n	800b1ee <__swsetup_r+0x66>
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f7ff fb65 	bl	800a8b8 <_free_r>
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	6363      	str	r3, [r4, #52]	; 0x34
 800b1f2:	89a3      	ldrh	r3, [r4, #12]
 800b1f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b1f8:	81a3      	strh	r3, [r4, #12]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	6063      	str	r3, [r4, #4]
 800b1fe:	6923      	ldr	r3, [r4, #16]
 800b200:	6023      	str	r3, [r4, #0]
 800b202:	89a3      	ldrh	r3, [r4, #12]
 800b204:	f043 0308 	orr.w	r3, r3, #8
 800b208:	81a3      	strh	r3, [r4, #12]
 800b20a:	6923      	ldr	r3, [r4, #16]
 800b20c:	b94b      	cbnz	r3, 800b222 <__swsetup_r+0x9a>
 800b20e:	89a3      	ldrh	r3, [r4, #12]
 800b210:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b218:	d003      	beq.n	800b222 <__swsetup_r+0x9a>
 800b21a:	4621      	mov	r1, r4
 800b21c:	4630      	mov	r0, r6
 800b21e:	f000 fa07 	bl	800b630 <__smakebuf_r>
 800b222:	89a0      	ldrh	r0, [r4, #12]
 800b224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b228:	f010 0301 	ands.w	r3, r0, #1
 800b22c:	d00a      	beq.n	800b244 <__swsetup_r+0xbc>
 800b22e:	2300      	movs	r3, #0
 800b230:	60a3      	str	r3, [r4, #8]
 800b232:	6963      	ldr	r3, [r4, #20]
 800b234:	425b      	negs	r3, r3
 800b236:	61a3      	str	r3, [r4, #24]
 800b238:	6923      	ldr	r3, [r4, #16]
 800b23a:	b943      	cbnz	r3, 800b24e <__swsetup_r+0xc6>
 800b23c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b240:	d1ba      	bne.n	800b1b8 <__swsetup_r+0x30>
 800b242:	bd70      	pop	{r4, r5, r6, pc}
 800b244:	0781      	lsls	r1, r0, #30
 800b246:	bf58      	it	pl
 800b248:	6963      	ldrpl	r3, [r4, #20]
 800b24a:	60a3      	str	r3, [r4, #8]
 800b24c:	e7f4      	b.n	800b238 <__swsetup_r+0xb0>
 800b24e:	2000      	movs	r0, #0
 800b250:	e7f7      	b.n	800b242 <__swsetup_r+0xba>
 800b252:	bf00      	nop
 800b254:	20000010 	.word	0x20000010
 800b258:	0800bdfc 	.word	0x0800bdfc
 800b25c:	0800be1c 	.word	0x0800be1c
 800b260:	0800bddc 	.word	0x0800bddc

0800b264 <abort>:
 800b264:	b508      	push	{r3, lr}
 800b266:	2006      	movs	r0, #6
 800b268:	f000 fa52 	bl	800b710 <raise>
 800b26c:	2001      	movs	r0, #1
 800b26e:	f7f6 fd7a 	bl	8001d66 <_exit>
	...

0800b274 <__sflush_r>:
 800b274:	898a      	ldrh	r2, [r1, #12]
 800b276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b27a:	4605      	mov	r5, r0
 800b27c:	0710      	lsls	r0, r2, #28
 800b27e:	460c      	mov	r4, r1
 800b280:	d458      	bmi.n	800b334 <__sflush_r+0xc0>
 800b282:	684b      	ldr	r3, [r1, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	dc05      	bgt.n	800b294 <__sflush_r+0x20>
 800b288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	dc02      	bgt.n	800b294 <__sflush_r+0x20>
 800b28e:	2000      	movs	r0, #0
 800b290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b296:	2e00      	cmp	r6, #0
 800b298:	d0f9      	beq.n	800b28e <__sflush_r+0x1a>
 800b29a:	2300      	movs	r3, #0
 800b29c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b2a0:	682f      	ldr	r7, [r5, #0]
 800b2a2:	602b      	str	r3, [r5, #0]
 800b2a4:	d032      	beq.n	800b30c <__sflush_r+0x98>
 800b2a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2a8:	89a3      	ldrh	r3, [r4, #12]
 800b2aa:	075a      	lsls	r2, r3, #29
 800b2ac:	d505      	bpl.n	800b2ba <__sflush_r+0x46>
 800b2ae:	6863      	ldr	r3, [r4, #4]
 800b2b0:	1ac0      	subs	r0, r0, r3
 800b2b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2b4:	b10b      	cbz	r3, 800b2ba <__sflush_r+0x46>
 800b2b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2b8:	1ac0      	subs	r0, r0, r3
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	4602      	mov	r2, r0
 800b2be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2c0:	6a21      	ldr	r1, [r4, #32]
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	47b0      	blx	r6
 800b2c6:	1c43      	adds	r3, r0, #1
 800b2c8:	89a3      	ldrh	r3, [r4, #12]
 800b2ca:	d106      	bne.n	800b2da <__sflush_r+0x66>
 800b2cc:	6829      	ldr	r1, [r5, #0]
 800b2ce:	291d      	cmp	r1, #29
 800b2d0:	d82c      	bhi.n	800b32c <__sflush_r+0xb8>
 800b2d2:	4a2a      	ldr	r2, [pc, #168]	; (800b37c <__sflush_r+0x108>)
 800b2d4:	40ca      	lsrs	r2, r1
 800b2d6:	07d6      	lsls	r6, r2, #31
 800b2d8:	d528      	bpl.n	800b32c <__sflush_r+0xb8>
 800b2da:	2200      	movs	r2, #0
 800b2dc:	6062      	str	r2, [r4, #4]
 800b2de:	04d9      	lsls	r1, r3, #19
 800b2e0:	6922      	ldr	r2, [r4, #16]
 800b2e2:	6022      	str	r2, [r4, #0]
 800b2e4:	d504      	bpl.n	800b2f0 <__sflush_r+0x7c>
 800b2e6:	1c42      	adds	r2, r0, #1
 800b2e8:	d101      	bne.n	800b2ee <__sflush_r+0x7a>
 800b2ea:	682b      	ldr	r3, [r5, #0]
 800b2ec:	b903      	cbnz	r3, 800b2f0 <__sflush_r+0x7c>
 800b2ee:	6560      	str	r0, [r4, #84]	; 0x54
 800b2f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2f2:	602f      	str	r7, [r5, #0]
 800b2f4:	2900      	cmp	r1, #0
 800b2f6:	d0ca      	beq.n	800b28e <__sflush_r+0x1a>
 800b2f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2fc:	4299      	cmp	r1, r3
 800b2fe:	d002      	beq.n	800b306 <__sflush_r+0x92>
 800b300:	4628      	mov	r0, r5
 800b302:	f7ff fad9 	bl	800a8b8 <_free_r>
 800b306:	2000      	movs	r0, #0
 800b308:	6360      	str	r0, [r4, #52]	; 0x34
 800b30a:	e7c1      	b.n	800b290 <__sflush_r+0x1c>
 800b30c:	6a21      	ldr	r1, [r4, #32]
 800b30e:	2301      	movs	r3, #1
 800b310:	4628      	mov	r0, r5
 800b312:	47b0      	blx	r6
 800b314:	1c41      	adds	r1, r0, #1
 800b316:	d1c7      	bne.n	800b2a8 <__sflush_r+0x34>
 800b318:	682b      	ldr	r3, [r5, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d0c4      	beq.n	800b2a8 <__sflush_r+0x34>
 800b31e:	2b1d      	cmp	r3, #29
 800b320:	d001      	beq.n	800b326 <__sflush_r+0xb2>
 800b322:	2b16      	cmp	r3, #22
 800b324:	d101      	bne.n	800b32a <__sflush_r+0xb6>
 800b326:	602f      	str	r7, [r5, #0]
 800b328:	e7b1      	b.n	800b28e <__sflush_r+0x1a>
 800b32a:	89a3      	ldrh	r3, [r4, #12]
 800b32c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b330:	81a3      	strh	r3, [r4, #12]
 800b332:	e7ad      	b.n	800b290 <__sflush_r+0x1c>
 800b334:	690f      	ldr	r7, [r1, #16]
 800b336:	2f00      	cmp	r7, #0
 800b338:	d0a9      	beq.n	800b28e <__sflush_r+0x1a>
 800b33a:	0793      	lsls	r3, r2, #30
 800b33c:	680e      	ldr	r6, [r1, #0]
 800b33e:	bf08      	it	eq
 800b340:	694b      	ldreq	r3, [r1, #20]
 800b342:	600f      	str	r7, [r1, #0]
 800b344:	bf18      	it	ne
 800b346:	2300      	movne	r3, #0
 800b348:	eba6 0807 	sub.w	r8, r6, r7
 800b34c:	608b      	str	r3, [r1, #8]
 800b34e:	f1b8 0f00 	cmp.w	r8, #0
 800b352:	dd9c      	ble.n	800b28e <__sflush_r+0x1a>
 800b354:	6a21      	ldr	r1, [r4, #32]
 800b356:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b358:	4643      	mov	r3, r8
 800b35a:	463a      	mov	r2, r7
 800b35c:	4628      	mov	r0, r5
 800b35e:	47b0      	blx	r6
 800b360:	2800      	cmp	r0, #0
 800b362:	dc06      	bgt.n	800b372 <__sflush_r+0xfe>
 800b364:	89a3      	ldrh	r3, [r4, #12]
 800b366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b36a:	81a3      	strh	r3, [r4, #12]
 800b36c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b370:	e78e      	b.n	800b290 <__sflush_r+0x1c>
 800b372:	4407      	add	r7, r0
 800b374:	eba8 0800 	sub.w	r8, r8, r0
 800b378:	e7e9      	b.n	800b34e <__sflush_r+0xda>
 800b37a:	bf00      	nop
 800b37c:	20400001 	.word	0x20400001

0800b380 <_fflush_r>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	690b      	ldr	r3, [r1, #16]
 800b384:	4605      	mov	r5, r0
 800b386:	460c      	mov	r4, r1
 800b388:	b913      	cbnz	r3, 800b390 <_fflush_r+0x10>
 800b38a:	2500      	movs	r5, #0
 800b38c:	4628      	mov	r0, r5
 800b38e:	bd38      	pop	{r3, r4, r5, pc}
 800b390:	b118      	cbz	r0, 800b39a <_fflush_r+0x1a>
 800b392:	6983      	ldr	r3, [r0, #24]
 800b394:	b90b      	cbnz	r3, 800b39a <_fflush_r+0x1a>
 800b396:	f000 f887 	bl	800b4a8 <__sinit>
 800b39a:	4b14      	ldr	r3, [pc, #80]	; (800b3ec <_fflush_r+0x6c>)
 800b39c:	429c      	cmp	r4, r3
 800b39e:	d11b      	bne.n	800b3d8 <_fflush_r+0x58>
 800b3a0:	686c      	ldr	r4, [r5, #4]
 800b3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d0ef      	beq.n	800b38a <_fflush_r+0xa>
 800b3aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3ac:	07d0      	lsls	r0, r2, #31
 800b3ae:	d404      	bmi.n	800b3ba <_fflush_r+0x3a>
 800b3b0:	0599      	lsls	r1, r3, #22
 800b3b2:	d402      	bmi.n	800b3ba <_fflush_r+0x3a>
 800b3b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3b6:	f000 f915 	bl	800b5e4 <__retarget_lock_acquire_recursive>
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	4621      	mov	r1, r4
 800b3be:	f7ff ff59 	bl	800b274 <__sflush_r>
 800b3c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3c4:	07da      	lsls	r2, r3, #31
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	d4e0      	bmi.n	800b38c <_fflush_r+0xc>
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	059b      	lsls	r3, r3, #22
 800b3ce:	d4dd      	bmi.n	800b38c <_fflush_r+0xc>
 800b3d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3d2:	f000 f908 	bl	800b5e6 <__retarget_lock_release_recursive>
 800b3d6:	e7d9      	b.n	800b38c <_fflush_r+0xc>
 800b3d8:	4b05      	ldr	r3, [pc, #20]	; (800b3f0 <_fflush_r+0x70>)
 800b3da:	429c      	cmp	r4, r3
 800b3dc:	d101      	bne.n	800b3e2 <_fflush_r+0x62>
 800b3de:	68ac      	ldr	r4, [r5, #8]
 800b3e0:	e7df      	b.n	800b3a2 <_fflush_r+0x22>
 800b3e2:	4b04      	ldr	r3, [pc, #16]	; (800b3f4 <_fflush_r+0x74>)
 800b3e4:	429c      	cmp	r4, r3
 800b3e6:	bf08      	it	eq
 800b3e8:	68ec      	ldreq	r4, [r5, #12]
 800b3ea:	e7da      	b.n	800b3a2 <_fflush_r+0x22>
 800b3ec:	0800bdfc 	.word	0x0800bdfc
 800b3f0:	0800be1c 	.word	0x0800be1c
 800b3f4:	0800bddc 	.word	0x0800bddc

0800b3f8 <std>:
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	b510      	push	{r4, lr}
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	e9c0 3300 	strd	r3, r3, [r0]
 800b402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b406:	6083      	str	r3, [r0, #8]
 800b408:	8181      	strh	r1, [r0, #12]
 800b40a:	6643      	str	r3, [r0, #100]	; 0x64
 800b40c:	81c2      	strh	r2, [r0, #14]
 800b40e:	6183      	str	r3, [r0, #24]
 800b410:	4619      	mov	r1, r3
 800b412:	2208      	movs	r2, #8
 800b414:	305c      	adds	r0, #92	; 0x5c
 800b416:	f7fb fe21 	bl	800705c <memset>
 800b41a:	4b05      	ldr	r3, [pc, #20]	; (800b430 <std+0x38>)
 800b41c:	6263      	str	r3, [r4, #36]	; 0x24
 800b41e:	4b05      	ldr	r3, [pc, #20]	; (800b434 <std+0x3c>)
 800b420:	62a3      	str	r3, [r4, #40]	; 0x28
 800b422:	4b05      	ldr	r3, [pc, #20]	; (800b438 <std+0x40>)
 800b424:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b426:	4b05      	ldr	r3, [pc, #20]	; (800b43c <std+0x44>)
 800b428:	6224      	str	r4, [r4, #32]
 800b42a:	6323      	str	r3, [r4, #48]	; 0x30
 800b42c:	bd10      	pop	{r4, pc}
 800b42e:	bf00      	nop
 800b430:	0800b749 	.word	0x0800b749
 800b434:	0800b76b 	.word	0x0800b76b
 800b438:	0800b7a3 	.word	0x0800b7a3
 800b43c:	0800b7c7 	.word	0x0800b7c7

0800b440 <_cleanup_r>:
 800b440:	4901      	ldr	r1, [pc, #4]	; (800b448 <_cleanup_r+0x8>)
 800b442:	f000 b8af 	b.w	800b5a4 <_fwalk_reent>
 800b446:	bf00      	nop
 800b448:	0800b381 	.word	0x0800b381

0800b44c <__sfmoreglue>:
 800b44c:	b570      	push	{r4, r5, r6, lr}
 800b44e:	1e4a      	subs	r2, r1, #1
 800b450:	2568      	movs	r5, #104	; 0x68
 800b452:	4355      	muls	r5, r2
 800b454:	460e      	mov	r6, r1
 800b456:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b45a:	f7ff fa7d 	bl	800a958 <_malloc_r>
 800b45e:	4604      	mov	r4, r0
 800b460:	b140      	cbz	r0, 800b474 <__sfmoreglue+0x28>
 800b462:	2100      	movs	r1, #0
 800b464:	e9c0 1600 	strd	r1, r6, [r0]
 800b468:	300c      	adds	r0, #12
 800b46a:	60a0      	str	r0, [r4, #8]
 800b46c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b470:	f7fb fdf4 	bl	800705c <memset>
 800b474:	4620      	mov	r0, r4
 800b476:	bd70      	pop	{r4, r5, r6, pc}

0800b478 <__sfp_lock_acquire>:
 800b478:	4801      	ldr	r0, [pc, #4]	; (800b480 <__sfp_lock_acquire+0x8>)
 800b47a:	f000 b8b3 	b.w	800b5e4 <__retarget_lock_acquire_recursive>
 800b47e:	bf00      	nop
 800b480:	20004d08 	.word	0x20004d08

0800b484 <__sfp_lock_release>:
 800b484:	4801      	ldr	r0, [pc, #4]	; (800b48c <__sfp_lock_release+0x8>)
 800b486:	f000 b8ae 	b.w	800b5e6 <__retarget_lock_release_recursive>
 800b48a:	bf00      	nop
 800b48c:	20004d08 	.word	0x20004d08

0800b490 <__sinit_lock_acquire>:
 800b490:	4801      	ldr	r0, [pc, #4]	; (800b498 <__sinit_lock_acquire+0x8>)
 800b492:	f000 b8a7 	b.w	800b5e4 <__retarget_lock_acquire_recursive>
 800b496:	bf00      	nop
 800b498:	20004d03 	.word	0x20004d03

0800b49c <__sinit_lock_release>:
 800b49c:	4801      	ldr	r0, [pc, #4]	; (800b4a4 <__sinit_lock_release+0x8>)
 800b49e:	f000 b8a2 	b.w	800b5e6 <__retarget_lock_release_recursive>
 800b4a2:	bf00      	nop
 800b4a4:	20004d03 	.word	0x20004d03

0800b4a8 <__sinit>:
 800b4a8:	b510      	push	{r4, lr}
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	f7ff fff0 	bl	800b490 <__sinit_lock_acquire>
 800b4b0:	69a3      	ldr	r3, [r4, #24]
 800b4b2:	b11b      	cbz	r3, 800b4bc <__sinit+0x14>
 800b4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b8:	f7ff bff0 	b.w	800b49c <__sinit_lock_release>
 800b4bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b4c0:	6523      	str	r3, [r4, #80]	; 0x50
 800b4c2:	4b13      	ldr	r3, [pc, #76]	; (800b510 <__sinit+0x68>)
 800b4c4:	4a13      	ldr	r2, [pc, #76]	; (800b514 <__sinit+0x6c>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b4ca:	42a3      	cmp	r3, r4
 800b4cc:	bf04      	itt	eq
 800b4ce:	2301      	moveq	r3, #1
 800b4d0:	61a3      	streq	r3, [r4, #24]
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f000 f820 	bl	800b518 <__sfp>
 800b4d8:	6060      	str	r0, [r4, #4]
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f000 f81c 	bl	800b518 <__sfp>
 800b4e0:	60a0      	str	r0, [r4, #8]
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 f818 	bl	800b518 <__sfp>
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	60e0      	str	r0, [r4, #12]
 800b4ec:	2104      	movs	r1, #4
 800b4ee:	6860      	ldr	r0, [r4, #4]
 800b4f0:	f7ff ff82 	bl	800b3f8 <std>
 800b4f4:	68a0      	ldr	r0, [r4, #8]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	2109      	movs	r1, #9
 800b4fa:	f7ff ff7d 	bl	800b3f8 <std>
 800b4fe:	68e0      	ldr	r0, [r4, #12]
 800b500:	2202      	movs	r2, #2
 800b502:	2112      	movs	r1, #18
 800b504:	f7ff ff78 	bl	800b3f8 <std>
 800b508:	2301      	movs	r3, #1
 800b50a:	61a3      	str	r3, [r4, #24]
 800b50c:	e7d2      	b.n	800b4b4 <__sinit+0xc>
 800b50e:	bf00      	nop
 800b510:	0800b988 	.word	0x0800b988
 800b514:	0800b441 	.word	0x0800b441

0800b518 <__sfp>:
 800b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51a:	4607      	mov	r7, r0
 800b51c:	f7ff ffac 	bl	800b478 <__sfp_lock_acquire>
 800b520:	4b1e      	ldr	r3, [pc, #120]	; (800b59c <__sfp+0x84>)
 800b522:	681e      	ldr	r6, [r3, #0]
 800b524:	69b3      	ldr	r3, [r6, #24]
 800b526:	b913      	cbnz	r3, 800b52e <__sfp+0x16>
 800b528:	4630      	mov	r0, r6
 800b52a:	f7ff ffbd 	bl	800b4a8 <__sinit>
 800b52e:	3648      	adds	r6, #72	; 0x48
 800b530:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b534:	3b01      	subs	r3, #1
 800b536:	d503      	bpl.n	800b540 <__sfp+0x28>
 800b538:	6833      	ldr	r3, [r6, #0]
 800b53a:	b30b      	cbz	r3, 800b580 <__sfp+0x68>
 800b53c:	6836      	ldr	r6, [r6, #0]
 800b53e:	e7f7      	b.n	800b530 <__sfp+0x18>
 800b540:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b544:	b9d5      	cbnz	r5, 800b57c <__sfp+0x64>
 800b546:	4b16      	ldr	r3, [pc, #88]	; (800b5a0 <__sfp+0x88>)
 800b548:	60e3      	str	r3, [r4, #12]
 800b54a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b54e:	6665      	str	r5, [r4, #100]	; 0x64
 800b550:	f000 f847 	bl	800b5e2 <__retarget_lock_init_recursive>
 800b554:	f7ff ff96 	bl	800b484 <__sfp_lock_release>
 800b558:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b55c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b560:	6025      	str	r5, [r4, #0]
 800b562:	61a5      	str	r5, [r4, #24]
 800b564:	2208      	movs	r2, #8
 800b566:	4629      	mov	r1, r5
 800b568:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b56c:	f7fb fd76 	bl	800705c <memset>
 800b570:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b574:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b578:	4620      	mov	r0, r4
 800b57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b57c:	3468      	adds	r4, #104	; 0x68
 800b57e:	e7d9      	b.n	800b534 <__sfp+0x1c>
 800b580:	2104      	movs	r1, #4
 800b582:	4638      	mov	r0, r7
 800b584:	f7ff ff62 	bl	800b44c <__sfmoreglue>
 800b588:	4604      	mov	r4, r0
 800b58a:	6030      	str	r0, [r6, #0]
 800b58c:	2800      	cmp	r0, #0
 800b58e:	d1d5      	bne.n	800b53c <__sfp+0x24>
 800b590:	f7ff ff78 	bl	800b484 <__sfp_lock_release>
 800b594:	230c      	movs	r3, #12
 800b596:	603b      	str	r3, [r7, #0]
 800b598:	e7ee      	b.n	800b578 <__sfp+0x60>
 800b59a:	bf00      	nop
 800b59c:	0800b988 	.word	0x0800b988
 800b5a0:	ffff0001 	.word	0xffff0001

0800b5a4 <_fwalk_reent>:
 800b5a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5a8:	4606      	mov	r6, r0
 800b5aa:	4688      	mov	r8, r1
 800b5ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5b0:	2700      	movs	r7, #0
 800b5b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5b6:	f1b9 0901 	subs.w	r9, r9, #1
 800b5ba:	d505      	bpl.n	800b5c8 <_fwalk_reent+0x24>
 800b5bc:	6824      	ldr	r4, [r4, #0]
 800b5be:	2c00      	cmp	r4, #0
 800b5c0:	d1f7      	bne.n	800b5b2 <_fwalk_reent+0xe>
 800b5c2:	4638      	mov	r0, r7
 800b5c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5c8:	89ab      	ldrh	r3, [r5, #12]
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d907      	bls.n	800b5de <_fwalk_reent+0x3a>
 800b5ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	d003      	beq.n	800b5de <_fwalk_reent+0x3a>
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4630      	mov	r0, r6
 800b5da:	47c0      	blx	r8
 800b5dc:	4307      	orrs	r7, r0
 800b5de:	3568      	adds	r5, #104	; 0x68
 800b5e0:	e7e9      	b.n	800b5b6 <_fwalk_reent+0x12>

0800b5e2 <__retarget_lock_init_recursive>:
 800b5e2:	4770      	bx	lr

0800b5e4 <__retarget_lock_acquire_recursive>:
 800b5e4:	4770      	bx	lr

0800b5e6 <__retarget_lock_release_recursive>:
 800b5e6:	4770      	bx	lr

0800b5e8 <__swhatbuf_r>:
 800b5e8:	b570      	push	{r4, r5, r6, lr}
 800b5ea:	460e      	mov	r6, r1
 800b5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5f0:	2900      	cmp	r1, #0
 800b5f2:	b096      	sub	sp, #88	; 0x58
 800b5f4:	4614      	mov	r4, r2
 800b5f6:	461d      	mov	r5, r3
 800b5f8:	da07      	bge.n	800b60a <__swhatbuf_r+0x22>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	602b      	str	r3, [r5, #0]
 800b5fe:	89b3      	ldrh	r3, [r6, #12]
 800b600:	061a      	lsls	r2, r3, #24
 800b602:	d410      	bmi.n	800b626 <__swhatbuf_r+0x3e>
 800b604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b608:	e00e      	b.n	800b628 <__swhatbuf_r+0x40>
 800b60a:	466a      	mov	r2, sp
 800b60c:	f000 f902 	bl	800b814 <_fstat_r>
 800b610:	2800      	cmp	r0, #0
 800b612:	dbf2      	blt.n	800b5fa <__swhatbuf_r+0x12>
 800b614:	9a01      	ldr	r2, [sp, #4]
 800b616:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b61a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b61e:	425a      	negs	r2, r3
 800b620:	415a      	adcs	r2, r3
 800b622:	602a      	str	r2, [r5, #0]
 800b624:	e7ee      	b.n	800b604 <__swhatbuf_r+0x1c>
 800b626:	2340      	movs	r3, #64	; 0x40
 800b628:	2000      	movs	r0, #0
 800b62a:	6023      	str	r3, [r4, #0]
 800b62c:	b016      	add	sp, #88	; 0x58
 800b62e:	bd70      	pop	{r4, r5, r6, pc}

0800b630 <__smakebuf_r>:
 800b630:	898b      	ldrh	r3, [r1, #12]
 800b632:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b634:	079d      	lsls	r5, r3, #30
 800b636:	4606      	mov	r6, r0
 800b638:	460c      	mov	r4, r1
 800b63a:	d507      	bpl.n	800b64c <__smakebuf_r+0x1c>
 800b63c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b640:	6023      	str	r3, [r4, #0]
 800b642:	6123      	str	r3, [r4, #16]
 800b644:	2301      	movs	r3, #1
 800b646:	6163      	str	r3, [r4, #20]
 800b648:	b002      	add	sp, #8
 800b64a:	bd70      	pop	{r4, r5, r6, pc}
 800b64c:	ab01      	add	r3, sp, #4
 800b64e:	466a      	mov	r2, sp
 800b650:	f7ff ffca 	bl	800b5e8 <__swhatbuf_r>
 800b654:	9900      	ldr	r1, [sp, #0]
 800b656:	4605      	mov	r5, r0
 800b658:	4630      	mov	r0, r6
 800b65a:	f7ff f97d 	bl	800a958 <_malloc_r>
 800b65e:	b948      	cbnz	r0, 800b674 <__smakebuf_r+0x44>
 800b660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b664:	059a      	lsls	r2, r3, #22
 800b666:	d4ef      	bmi.n	800b648 <__smakebuf_r+0x18>
 800b668:	f023 0303 	bic.w	r3, r3, #3
 800b66c:	f043 0302 	orr.w	r3, r3, #2
 800b670:	81a3      	strh	r3, [r4, #12]
 800b672:	e7e3      	b.n	800b63c <__smakebuf_r+0xc>
 800b674:	4b0d      	ldr	r3, [pc, #52]	; (800b6ac <__smakebuf_r+0x7c>)
 800b676:	62b3      	str	r3, [r6, #40]	; 0x28
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	6020      	str	r0, [r4, #0]
 800b67c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b680:	81a3      	strh	r3, [r4, #12]
 800b682:	9b00      	ldr	r3, [sp, #0]
 800b684:	6163      	str	r3, [r4, #20]
 800b686:	9b01      	ldr	r3, [sp, #4]
 800b688:	6120      	str	r0, [r4, #16]
 800b68a:	b15b      	cbz	r3, 800b6a4 <__smakebuf_r+0x74>
 800b68c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b690:	4630      	mov	r0, r6
 800b692:	f000 f8d1 	bl	800b838 <_isatty_r>
 800b696:	b128      	cbz	r0, 800b6a4 <__smakebuf_r+0x74>
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	f023 0303 	bic.w	r3, r3, #3
 800b69e:	f043 0301 	orr.w	r3, r3, #1
 800b6a2:	81a3      	strh	r3, [r4, #12]
 800b6a4:	89a0      	ldrh	r0, [r4, #12]
 800b6a6:	4305      	orrs	r5, r0
 800b6a8:	81a5      	strh	r5, [r4, #12]
 800b6aa:	e7cd      	b.n	800b648 <__smakebuf_r+0x18>
 800b6ac:	0800b441 	.word	0x0800b441

0800b6b0 <_malloc_usable_size_r>:
 800b6b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6b4:	1f18      	subs	r0, r3, #4
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	bfbc      	itt	lt
 800b6ba:	580b      	ldrlt	r3, [r1, r0]
 800b6bc:	18c0      	addlt	r0, r0, r3
 800b6be:	4770      	bx	lr

0800b6c0 <_raise_r>:
 800b6c0:	291f      	cmp	r1, #31
 800b6c2:	b538      	push	{r3, r4, r5, lr}
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	460d      	mov	r5, r1
 800b6c8:	d904      	bls.n	800b6d4 <_raise_r+0x14>
 800b6ca:	2316      	movs	r3, #22
 800b6cc:	6003      	str	r3, [r0, #0]
 800b6ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}
 800b6d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b6d6:	b112      	cbz	r2, 800b6de <_raise_r+0x1e>
 800b6d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6dc:	b94b      	cbnz	r3, 800b6f2 <_raise_r+0x32>
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f000 f830 	bl	800b744 <_getpid_r>
 800b6e4:	462a      	mov	r2, r5
 800b6e6:	4601      	mov	r1, r0
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6ee:	f000 b817 	b.w	800b720 <_kill_r>
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d00a      	beq.n	800b70c <_raise_r+0x4c>
 800b6f6:	1c59      	adds	r1, r3, #1
 800b6f8:	d103      	bne.n	800b702 <_raise_r+0x42>
 800b6fa:	2316      	movs	r3, #22
 800b6fc:	6003      	str	r3, [r0, #0]
 800b6fe:	2001      	movs	r0, #1
 800b700:	e7e7      	b.n	800b6d2 <_raise_r+0x12>
 800b702:	2400      	movs	r4, #0
 800b704:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b708:	4628      	mov	r0, r5
 800b70a:	4798      	blx	r3
 800b70c:	2000      	movs	r0, #0
 800b70e:	e7e0      	b.n	800b6d2 <_raise_r+0x12>

0800b710 <raise>:
 800b710:	4b02      	ldr	r3, [pc, #8]	; (800b71c <raise+0xc>)
 800b712:	4601      	mov	r1, r0
 800b714:	6818      	ldr	r0, [r3, #0]
 800b716:	f7ff bfd3 	b.w	800b6c0 <_raise_r>
 800b71a:	bf00      	nop
 800b71c:	20000010 	.word	0x20000010

0800b720 <_kill_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4d07      	ldr	r5, [pc, #28]	; (800b740 <_kill_r+0x20>)
 800b724:	2300      	movs	r3, #0
 800b726:	4604      	mov	r4, r0
 800b728:	4608      	mov	r0, r1
 800b72a:	4611      	mov	r1, r2
 800b72c:	602b      	str	r3, [r5, #0]
 800b72e:	f7f6 fb0a 	bl	8001d46 <_kill>
 800b732:	1c43      	adds	r3, r0, #1
 800b734:	d102      	bne.n	800b73c <_kill_r+0x1c>
 800b736:	682b      	ldr	r3, [r5, #0]
 800b738:	b103      	cbz	r3, 800b73c <_kill_r+0x1c>
 800b73a:	6023      	str	r3, [r4, #0]
 800b73c:	bd38      	pop	{r3, r4, r5, pc}
 800b73e:	bf00      	nop
 800b740:	20004cfc 	.word	0x20004cfc

0800b744 <_getpid_r>:
 800b744:	f7f6 baf7 	b.w	8001d36 <_getpid>

0800b748 <__sread>:
 800b748:	b510      	push	{r4, lr}
 800b74a:	460c      	mov	r4, r1
 800b74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b750:	f000 f894 	bl	800b87c <_read_r>
 800b754:	2800      	cmp	r0, #0
 800b756:	bfab      	itete	ge
 800b758:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b75a:	89a3      	ldrhlt	r3, [r4, #12]
 800b75c:	181b      	addge	r3, r3, r0
 800b75e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b762:	bfac      	ite	ge
 800b764:	6563      	strge	r3, [r4, #84]	; 0x54
 800b766:	81a3      	strhlt	r3, [r4, #12]
 800b768:	bd10      	pop	{r4, pc}

0800b76a <__swrite>:
 800b76a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b76e:	461f      	mov	r7, r3
 800b770:	898b      	ldrh	r3, [r1, #12]
 800b772:	05db      	lsls	r3, r3, #23
 800b774:	4605      	mov	r5, r0
 800b776:	460c      	mov	r4, r1
 800b778:	4616      	mov	r6, r2
 800b77a:	d505      	bpl.n	800b788 <__swrite+0x1e>
 800b77c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b780:	2302      	movs	r3, #2
 800b782:	2200      	movs	r2, #0
 800b784:	f000 f868 	bl	800b858 <_lseek_r>
 800b788:	89a3      	ldrh	r3, [r4, #12]
 800b78a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b78e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b792:	81a3      	strh	r3, [r4, #12]
 800b794:	4632      	mov	r2, r6
 800b796:	463b      	mov	r3, r7
 800b798:	4628      	mov	r0, r5
 800b79a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b79e:	f000 b817 	b.w	800b7d0 <_write_r>

0800b7a2 <__sseek>:
 800b7a2:	b510      	push	{r4, lr}
 800b7a4:	460c      	mov	r4, r1
 800b7a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7aa:	f000 f855 	bl	800b858 <_lseek_r>
 800b7ae:	1c43      	adds	r3, r0, #1
 800b7b0:	89a3      	ldrh	r3, [r4, #12]
 800b7b2:	bf15      	itete	ne
 800b7b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7be:	81a3      	strheq	r3, [r4, #12]
 800b7c0:	bf18      	it	ne
 800b7c2:	81a3      	strhne	r3, [r4, #12]
 800b7c4:	bd10      	pop	{r4, pc}

0800b7c6 <__sclose>:
 800b7c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ca:	f000 b813 	b.w	800b7f4 <_close_r>
	...

0800b7d0 <_write_r>:
 800b7d0:	b538      	push	{r3, r4, r5, lr}
 800b7d2:	4d07      	ldr	r5, [pc, #28]	; (800b7f0 <_write_r+0x20>)
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	4608      	mov	r0, r1
 800b7d8:	4611      	mov	r1, r2
 800b7da:	2200      	movs	r2, #0
 800b7dc:	602a      	str	r2, [r5, #0]
 800b7de:	461a      	mov	r2, r3
 800b7e0:	f7f6 fae8 	bl	8001db4 <_write>
 800b7e4:	1c43      	adds	r3, r0, #1
 800b7e6:	d102      	bne.n	800b7ee <_write_r+0x1e>
 800b7e8:	682b      	ldr	r3, [r5, #0]
 800b7ea:	b103      	cbz	r3, 800b7ee <_write_r+0x1e>
 800b7ec:	6023      	str	r3, [r4, #0]
 800b7ee:	bd38      	pop	{r3, r4, r5, pc}
 800b7f0:	20004cfc 	.word	0x20004cfc

0800b7f4 <_close_r>:
 800b7f4:	b538      	push	{r3, r4, r5, lr}
 800b7f6:	4d06      	ldr	r5, [pc, #24]	; (800b810 <_close_r+0x1c>)
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	4608      	mov	r0, r1
 800b7fe:	602b      	str	r3, [r5, #0]
 800b800:	f7f6 faf4 	bl	8001dec <_close>
 800b804:	1c43      	adds	r3, r0, #1
 800b806:	d102      	bne.n	800b80e <_close_r+0x1a>
 800b808:	682b      	ldr	r3, [r5, #0]
 800b80a:	b103      	cbz	r3, 800b80e <_close_r+0x1a>
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	bd38      	pop	{r3, r4, r5, pc}
 800b810:	20004cfc 	.word	0x20004cfc

0800b814 <_fstat_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	4d07      	ldr	r5, [pc, #28]	; (800b834 <_fstat_r+0x20>)
 800b818:	2300      	movs	r3, #0
 800b81a:	4604      	mov	r4, r0
 800b81c:	4608      	mov	r0, r1
 800b81e:	4611      	mov	r1, r2
 800b820:	602b      	str	r3, [r5, #0]
 800b822:	f7f6 faef 	bl	8001e04 <_fstat>
 800b826:	1c43      	adds	r3, r0, #1
 800b828:	d102      	bne.n	800b830 <_fstat_r+0x1c>
 800b82a:	682b      	ldr	r3, [r5, #0]
 800b82c:	b103      	cbz	r3, 800b830 <_fstat_r+0x1c>
 800b82e:	6023      	str	r3, [r4, #0]
 800b830:	bd38      	pop	{r3, r4, r5, pc}
 800b832:	bf00      	nop
 800b834:	20004cfc 	.word	0x20004cfc

0800b838 <_isatty_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	4d06      	ldr	r5, [pc, #24]	; (800b854 <_isatty_r+0x1c>)
 800b83c:	2300      	movs	r3, #0
 800b83e:	4604      	mov	r4, r0
 800b840:	4608      	mov	r0, r1
 800b842:	602b      	str	r3, [r5, #0]
 800b844:	f7f6 faee 	bl	8001e24 <_isatty>
 800b848:	1c43      	adds	r3, r0, #1
 800b84a:	d102      	bne.n	800b852 <_isatty_r+0x1a>
 800b84c:	682b      	ldr	r3, [r5, #0]
 800b84e:	b103      	cbz	r3, 800b852 <_isatty_r+0x1a>
 800b850:	6023      	str	r3, [r4, #0]
 800b852:	bd38      	pop	{r3, r4, r5, pc}
 800b854:	20004cfc 	.word	0x20004cfc

0800b858 <_lseek_r>:
 800b858:	b538      	push	{r3, r4, r5, lr}
 800b85a:	4d07      	ldr	r5, [pc, #28]	; (800b878 <_lseek_r+0x20>)
 800b85c:	4604      	mov	r4, r0
 800b85e:	4608      	mov	r0, r1
 800b860:	4611      	mov	r1, r2
 800b862:	2200      	movs	r2, #0
 800b864:	602a      	str	r2, [r5, #0]
 800b866:	461a      	mov	r2, r3
 800b868:	f7f6 fae7 	bl	8001e3a <_lseek>
 800b86c:	1c43      	adds	r3, r0, #1
 800b86e:	d102      	bne.n	800b876 <_lseek_r+0x1e>
 800b870:	682b      	ldr	r3, [r5, #0]
 800b872:	b103      	cbz	r3, 800b876 <_lseek_r+0x1e>
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	bd38      	pop	{r3, r4, r5, pc}
 800b878:	20004cfc 	.word	0x20004cfc

0800b87c <_read_r>:
 800b87c:	b538      	push	{r3, r4, r5, lr}
 800b87e:	4d07      	ldr	r5, [pc, #28]	; (800b89c <_read_r+0x20>)
 800b880:	4604      	mov	r4, r0
 800b882:	4608      	mov	r0, r1
 800b884:	4611      	mov	r1, r2
 800b886:	2200      	movs	r2, #0
 800b888:	602a      	str	r2, [r5, #0]
 800b88a:	461a      	mov	r2, r3
 800b88c:	f7f6 fa75 	bl	8001d7a <_read>
 800b890:	1c43      	adds	r3, r0, #1
 800b892:	d102      	bne.n	800b89a <_read_r+0x1e>
 800b894:	682b      	ldr	r3, [r5, #0]
 800b896:	b103      	cbz	r3, 800b89a <_read_r+0x1e>
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	bd38      	pop	{r3, r4, r5, pc}
 800b89c:	20004cfc 	.word	0x20004cfc

0800b8a0 <_init>:
 800b8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a2:	bf00      	nop
 800b8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8a6:	bc08      	pop	{r3}
 800b8a8:	469e      	mov	lr, r3
 800b8aa:	4770      	bx	lr

0800b8ac <_fini>:
 800b8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ae:	bf00      	nop
 800b8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8b2:	bc08      	pop	{r3}
 800b8b4:	469e      	mov	lr, r3
 800b8b6:	4770      	bx	lr
