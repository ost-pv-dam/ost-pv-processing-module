
ost-pv-processing-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004488  08004488  00014488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e8  080044e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080044e8  080044e8  000144e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044f0  080044f0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f0  080044f0  000144f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044f4  080044f4  000144f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080044f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c8  20000010  08004508  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049d8  08004508  000249d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013897  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002801  00000000  00000000  000338d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  000360d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00036f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000028af  00000000  00000000  00037d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107b6  00000000  00000000  0003a607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbf98  00000000  00000000  0004adbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00116d55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d28  00000000  00000000  00116da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004470 	.word	0x08004470

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004470 	.word	0x08004470

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 f9a2 	bl	8000814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f818 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8a2 	bl	800061c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f872 	bl	80005c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004dc:	f001 fa3a 	bl	8001954 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <main+0x30>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4805      	ldr	r0, [pc, #20]	; (80004fc <main+0x34>)
 80004e6:	f001 fa7f 	bl	80019e8 <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <main+0x38>)
 80004ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004f0:	f001 fa54 	bl	800199c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x2c>
 80004f6:	bf00      	nop
 80004f8:	080044ac 	.word	0x080044ac
 80004fc:	08000651 	.word	0x08000651
 8000500:	2000493c 	.word	0x2000493c

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	; 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	2230      	movs	r2, #48	; 0x30
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f003 ffa4 	bl	8004460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <SystemClock_Config+0xb4>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	4a21      	ldr	r2, [pc, #132]	; (80005b8 <SystemClock_Config+0xb4>)
 8000532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000536:	6413      	str	r3, [r2, #64]	; 0x40
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <SystemClock_Config+0xb4>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <SystemClock_Config+0xb8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a1b      	ldr	r2, [pc, #108]	; (80005bc <SystemClock_Config+0xb8>)
 800054e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <SystemClock_Config+0xb8>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000568:	2310      	movs	r3, #16
 800056a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056c:	2300      	movs	r3, #0
 800056e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0320 	add.w	r3, r7, #32
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fd85 	bl	8001084 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000580:	f000 f86e 	bl	8000660 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 ffe8 	bl	8001574 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005aa:	f000 f859 	bl	8000660 <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3750      	adds	r7, #80	; 0x50
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_I2C1_Init+0x50>)
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <MX_I2C1_Init+0x54>)
 80005c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_I2C1_Init+0x50>)
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <MX_I2C1_Init+0x58>)
 80005ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_I2C1_Init+0x50>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_I2C1_Init+0x50>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_I2C1_Init+0x50>)
 80005de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <MX_I2C1_Init+0x50>)
 80005fe:	f000 fbfd 	bl	8000dfc <HAL_I2C_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000608:	f000 f82a 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20004940 	.word	0x20004940
 8000614:	40005400 	.word	0x40005400
 8000618:	000186a0 	.word	0x000186a0

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_GPIO_Init+0x30>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <MX_GPIO_Init+0x30>)
 800062c:	f043 0302 	orr.w	r3, r3, #2
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_GPIO_Init+0x30>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800

08000650 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f001 fa57 	bl	8001b0c <osDelay>
 800065e:	e7fb      	b.n	8000658 <StartDefaultTask+0x8>

08000660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000664:	b672      	cpsid	i
}
 8000666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000668:	e7fe      	b.n	8000668 <Error_Handler+0x8>
	...

0800066c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_MspInit+0x54>)
 8000678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067a:	4a11      	ldr	r2, [pc, #68]	; (80006c0 <HAL_MspInit+0x54>)
 800067c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000680:	6453      	str	r3, [r2, #68]	; 0x44
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_MspInit+0x54>)
 8000684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <HAL_MspInit+0x54>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <HAL_MspInit+0x54>)
 8000698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069c:	6413      	str	r3, [r2, #64]	; 0x40
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HAL_MspInit+0x54>)
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	210f      	movs	r1, #15
 80006ae:	f06f 0001 	mvn.w	r0, #1
 80006b2:	f000 f9de 	bl	8000a72 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800

080006c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a19      	ldr	r2, [pc, #100]	; (8000748 <HAL_I2C_MspInit+0x84>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d12b      	bne.n	800073e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <HAL_I2C_MspInit+0x88>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a17      	ldr	r2, [pc, #92]	; (800074c <HAL_I2C_MspInit+0x88>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <HAL_I2C_MspInit+0x88>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000702:	23c0      	movs	r3, #192	; 0xc0
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000706:	2312      	movs	r3, #18
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070a:	2301      	movs	r3, #1
 800070c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000712:	2304      	movs	r3, #4
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <HAL_I2C_MspInit+0x8c>)
 800071e:	f000 f9d1 	bl	8000ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_I2C_MspInit+0x88>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <HAL_I2C_MspInit+0x88>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_I2C_MspInit+0x88>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	; 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40005400 	.word	0x40005400
 800074c:	40023800 	.word	0x40023800
 8000750:	40020400 	.word	0x40020400

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <NMI_Handler+0x4>

0800075a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <MemManage_Handler+0x4>

08000766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <BusFault_Handler+0x4>

0800076c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <UsageFault_Handler+0x4>

08000772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000784:	f000 f898 	bl	80008b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000788:	f002 fdce 	bl	8003328 <xTaskGetSchedulerState>
 800078c:	4603      	mov	r3, r0
 800078e:	2b01      	cmp	r3, #1
 8000790:	d001      	beq.n	8000796 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000792:	f003 fbb9 	bl	8003f08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <SystemInit+0x20>)
 80007a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007a6:	4a05      	ldr	r2, [pc, #20]	; (80007bc <SystemInit+0x20>)
 80007a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007c6:	490e      	ldr	r1, [pc, #56]	; (8000800 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007c8:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007cc:	e002      	b.n	80007d4 <LoopCopyDataInit>

080007ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d2:	3304      	adds	r3, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d8:	d3f9      	bcc.n	80007ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007da:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007dc:	4c0b      	ldr	r4, [pc, #44]	; (800080c <LoopFillZerobss+0x26>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e0:	e001      	b.n	80007e6 <LoopFillZerobss>

080007e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e4:	3204      	adds	r2, #4

080007e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e8:	d3fb      	bcc.n	80007e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007ea:	f7ff ffd7 	bl	800079c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ee:	f003 fe05 	bl	80043fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007f2:	f7ff fe69 	bl	80004c8 <main>
  bx  lr    
 80007f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000800:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000804:	080044f8 	.word	0x080044f8
  ldr r2, =_sbss
 8000808:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800080c:	200049d8 	.word	0x200049d8

08000810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC_IRQHandler>
	...

08000814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <HAL_Init+0x40>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <HAL_Init+0x40>)
 800081e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_Init+0x40>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <HAL_Init+0x40>)
 800082a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800082e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_Init+0x40>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <HAL_Init+0x40>)
 8000836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800083a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800083c:	2003      	movs	r0, #3
 800083e:	f000 f90d 	bl	8000a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000842:	200f      	movs	r0, #15
 8000844:	f000 f808 	bl	8000858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000848:	f7ff ff10 	bl	800066c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023c00 	.word	0x40023c00

08000858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_InitTick+0x54>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_InitTick+0x58>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000872:	fbb2 f3f3 	udiv	r3, r2, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f917 	bl	8000aaa <HAL_SYSTICK_Config>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	e00e      	b.n	80008a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b0f      	cmp	r3, #15
 800088a:	d80a      	bhi.n	80008a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088c:	2200      	movs	r2, #0
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000894:	f000 f8ed 	bl	8000a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000898:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <HAL_InitTick+0x5c>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800089e:	2300      	movs	r3, #0
 80008a0:	e000      	b.n	80008a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000000 	.word	0x20000000
 80008b0:	20000008 	.word	0x20000008
 80008b4:	20000004 	.word	0x20000004

080008b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_IncTick+0x20>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_IncTick+0x24>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	4a04      	ldr	r2, [pc, #16]	; (80008dc <HAL_IncTick+0x24>)
 80008ca:	6013      	str	r3, [r2, #0]
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20004994 	.word	0x20004994

080008e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return uwTick;
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <HAL_GetTick+0x14>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20004994 	.word	0x20004994

080008f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000914:	4013      	ands	r3, r2
 8000916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092a:	4a04      	ldr	r2, [pc, #16]	; (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	60d3      	str	r3, [r2, #12]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <__NVIC_GetPriorityGrouping+0x18>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	f003 0307 	and.w	r3, r3, #7
}
 800094e:	4618      	mov	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	db0a      	blt.n	8000986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	490c      	ldr	r1, [pc, #48]	; (80009a8 <__NVIC_SetPriority+0x4c>)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	0112      	lsls	r2, r2, #4
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	440b      	add	r3, r1
 8000980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000984:	e00a      	b.n	800099c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4908      	ldr	r1, [pc, #32]	; (80009ac <__NVIC_SetPriority+0x50>)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	3b04      	subs	r3, #4
 8000994:	0112      	lsls	r2, r2, #4
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	440b      	add	r3, r1
 800099a:	761a      	strb	r2, [r3, #24]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000e100 	.word	0xe000e100
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b089      	sub	sp, #36	; 0x24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f1c3 0307 	rsb	r3, r3, #7
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	bf28      	it	cs
 80009ce:	2304      	movcs	r3, #4
 80009d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3304      	adds	r3, #4
 80009d6:	2b06      	cmp	r3, #6
 80009d8:	d902      	bls.n	80009e0 <NVIC_EncodePriority+0x30>
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3b03      	subs	r3, #3
 80009de:	e000      	b.n	80009e2 <NVIC_EncodePriority+0x32>
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43da      	mvns	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	401a      	ands	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	43d9      	mvns	r1, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	4313      	orrs	r3, r2
         );
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3724      	adds	r7, #36	; 0x24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a28:	d301      	bcc.n	8000a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00f      	b.n	8000a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <SysTick_Config+0x40>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a36:	210f      	movs	r1, #15
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a3c:	f7ff ff8e 	bl	800095c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <SysTick_Config+0x40>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <SysTick_Config+0x40>)
 8000a48:	2207      	movs	r2, #7
 8000a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	e000e010 	.word	0xe000e010

08000a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff ff47 	bl	80008f8 <__NVIC_SetPriorityGrouping>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a84:	f7ff ff5c 	bl	8000940 <__NVIC_GetPriorityGrouping>
 8000a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	6978      	ldr	r0, [r7, #20]
 8000a90:	f7ff ff8e 	bl	80009b0 <NVIC_EncodePriority>
 8000a94:	4602      	mov	r2, r0
 8000a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff5d 	bl	800095c <__NVIC_SetPriority>
}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ffb0 	bl	8000a18 <SysTick_Config>
 8000ab8:	4603      	mov	r3, r0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
 8000ade:	e16b      	b.n	8000db8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	f040 815a 	bne.w	8000db2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0303 	and.w	r3, r3, #3
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d005      	beq.n	8000b16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d130      	bne.n	8000b78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	2203      	movs	r2, #3
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	68da      	ldr	r2, [r3, #12]
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	69ba      	ldr	r2, [r7, #24]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	091b      	lsrs	r3, r3, #4
 8000b62:	f003 0201 	and.w	r2, r3, #1
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f003 0303 	and.w	r3, r3, #3
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d017      	beq.n	8000bb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	2203      	movs	r2, #3
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 0303 	and.w	r3, r3, #3
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d123      	bne.n	8000c08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	08da      	lsrs	r2, r3, #3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3208      	adds	r2, #8
 8000bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	f003 0307 	and.w	r3, r3, #7
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	691a      	ldr	r2, [r3, #16]
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	08da      	lsrs	r2, r3, #3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	3208      	adds	r2, #8
 8000c02:	69b9      	ldr	r1, [r7, #24]
 8000c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	2203      	movs	r2, #3
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f003 0203 	and.w	r2, r3, #3
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f000 80b4 	beq.w	8000db2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b60      	ldr	r3, [pc, #384]	; (8000dd0 <HAL_GPIO_Init+0x30c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a5f      	ldr	r2, [pc, #380]	; (8000dd0 <HAL_GPIO_Init+0x30c>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b5d      	ldr	r3, [pc, #372]	; (8000dd0 <HAL_GPIO_Init+0x30c>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c66:	4a5b      	ldr	r2, [pc, #364]	; (8000dd4 <HAL_GPIO_Init+0x310>)
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	220f      	movs	r2, #15
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4013      	ands	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a52      	ldr	r2, [pc, #328]	; (8000dd8 <HAL_GPIO_Init+0x314>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d02b      	beq.n	8000cea <HAL_GPIO_Init+0x226>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a51      	ldr	r2, [pc, #324]	; (8000ddc <HAL_GPIO_Init+0x318>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d025      	beq.n	8000ce6 <HAL_GPIO_Init+0x222>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a50      	ldr	r2, [pc, #320]	; (8000de0 <HAL_GPIO_Init+0x31c>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d01f      	beq.n	8000ce2 <HAL_GPIO_Init+0x21e>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a4f      	ldr	r2, [pc, #316]	; (8000de4 <HAL_GPIO_Init+0x320>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d019      	beq.n	8000cde <HAL_GPIO_Init+0x21a>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a4e      	ldr	r2, [pc, #312]	; (8000de8 <HAL_GPIO_Init+0x324>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d013      	beq.n	8000cda <HAL_GPIO_Init+0x216>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a4d      	ldr	r2, [pc, #308]	; (8000dec <HAL_GPIO_Init+0x328>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d00d      	beq.n	8000cd6 <HAL_GPIO_Init+0x212>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a4c      	ldr	r2, [pc, #304]	; (8000df0 <HAL_GPIO_Init+0x32c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d007      	beq.n	8000cd2 <HAL_GPIO_Init+0x20e>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a4b      	ldr	r2, [pc, #300]	; (8000df4 <HAL_GPIO_Init+0x330>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d101      	bne.n	8000cce <HAL_GPIO_Init+0x20a>
 8000cca:	2307      	movs	r3, #7
 8000ccc:	e00e      	b.n	8000cec <HAL_GPIO_Init+0x228>
 8000cce:	2308      	movs	r3, #8
 8000cd0:	e00c      	b.n	8000cec <HAL_GPIO_Init+0x228>
 8000cd2:	2306      	movs	r3, #6
 8000cd4:	e00a      	b.n	8000cec <HAL_GPIO_Init+0x228>
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	e008      	b.n	8000cec <HAL_GPIO_Init+0x228>
 8000cda:	2304      	movs	r3, #4
 8000cdc:	e006      	b.n	8000cec <HAL_GPIO_Init+0x228>
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e004      	b.n	8000cec <HAL_GPIO_Init+0x228>
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	e002      	b.n	8000cec <HAL_GPIO_Init+0x228>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <HAL_GPIO_Init+0x228>
 8000cea:	2300      	movs	r3, #0
 8000cec:	69fa      	ldr	r2, [r7, #28]
 8000cee:	f002 0203 	and.w	r2, r2, #3
 8000cf2:	0092      	lsls	r2, r2, #2
 8000cf4:	4093      	lsls	r3, r2
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cfc:	4935      	ldr	r1, [pc, #212]	; (8000dd4 <HAL_GPIO_Init+0x310>)
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	089b      	lsrs	r3, r3, #2
 8000d02:	3302      	adds	r3, #2
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d0a:	4b3b      	ldr	r3, [pc, #236]	; (8000df8 <HAL_GPIO_Init+0x334>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	43db      	mvns	r3, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4013      	ands	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d2e:	4a32      	ldr	r2, [pc, #200]	; (8000df8 <HAL_GPIO_Init+0x334>)
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d34:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <HAL_GPIO_Init+0x334>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d58:	4a27      	ldr	r2, [pc, #156]	; (8000df8 <HAL_GPIO_Init+0x334>)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d5e:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <HAL_GPIO_Init+0x334>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d82:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <HAL_GPIO_Init+0x334>)
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <HAL_GPIO_Init+0x334>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dac:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <HAL_GPIO_Init+0x334>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3301      	adds	r3, #1
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	2b0f      	cmp	r3, #15
 8000dbc:	f67f ae90 	bls.w	8000ae0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3724      	adds	r7, #36	; 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40013800 	.word	0x40013800
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40020c00 	.word	0x40020c00
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40021400 	.word	0x40021400
 8000df0:	40021800 	.word	0x40021800
 8000df4:	40021c00 	.word	0x40021c00
 8000df8:	40013c00 	.word	0x40013c00

08000dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d101      	bne.n	8000e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e12b      	b.n	8001066 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d106      	bne.n	8000e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff fc4e 	bl	80006c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2224      	movs	r2, #36	; 0x24
 8000e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 0201 	bic.w	r2, r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e60:	f000 fd30 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 8000e64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	4a81      	ldr	r2, [pc, #516]	; (8001070 <HAL_I2C_Init+0x274>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d807      	bhi.n	8000e80 <HAL_I2C_Init+0x84>
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4a80      	ldr	r2, [pc, #512]	; (8001074 <HAL_I2C_Init+0x278>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	bf94      	ite	ls
 8000e78:	2301      	movls	r3, #1
 8000e7a:	2300      	movhi	r3, #0
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	e006      	b.n	8000e8e <HAL_I2C_Init+0x92>
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4a7d      	ldr	r2, [pc, #500]	; (8001078 <HAL_I2C_Init+0x27c>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	bf94      	ite	ls
 8000e88:	2301      	movls	r3, #1
 8000e8a:	2300      	movhi	r3, #0
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e0e7      	b.n	8001066 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4a78      	ldr	r2, [pc, #480]	; (800107c <HAL_I2C_Init+0x280>)
 8000e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9e:	0c9b      	lsrs	r3, r3, #18
 8000ea0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68ba      	ldr	r2, [r7, #8]
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	4a6a      	ldr	r2, [pc, #424]	; (8001070 <HAL_I2C_Init+0x274>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d802      	bhi.n	8000ed0 <HAL_I2C_Init+0xd4>
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	e009      	b.n	8000ee4 <HAL_I2C_Init+0xe8>
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ed6:	fb02 f303 	mul.w	r3, r2, r3
 8000eda:	4a69      	ldr	r2, [pc, #420]	; (8001080 <HAL_I2C_Init+0x284>)
 8000edc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee0:	099b      	lsrs	r3, r3, #6
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	6812      	ldr	r2, [r2, #0]
 8000ee8:	430b      	orrs	r3, r1
 8000eea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000ef6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	495c      	ldr	r1, [pc, #368]	; (8001070 <HAL_I2C_Init+0x274>)
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d819      	bhi.n	8000f38 <HAL_I2C_Init+0x13c>
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	1e59      	subs	r1, r3, #1
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f12:	1c59      	adds	r1, r3, #1
 8000f14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f18:	400b      	ands	r3, r1
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00a      	beq.n	8000f34 <HAL_I2C_Init+0x138>
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	1e59      	subs	r1, r3, #1
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f32:	e051      	b.n	8000fd8 <HAL_I2C_Init+0x1dc>
 8000f34:	2304      	movs	r3, #4
 8000f36:	e04f      	b.n	8000fd8 <HAL_I2C_Init+0x1dc>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d111      	bne.n	8000f64 <HAL_I2C_Init+0x168>
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	1e58      	subs	r0, r3, #1
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6859      	ldr	r1, [r3, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	440b      	add	r3, r1
 8000f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f52:	3301      	adds	r3, #1
 8000f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf0c      	ite	eq
 8000f5c:	2301      	moveq	r3, #1
 8000f5e:	2300      	movne	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	e012      	b.n	8000f8a <HAL_I2C_Init+0x18e>
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	1e58      	subs	r0, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6859      	ldr	r1, [r3, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	0099      	lsls	r1, r3, #2
 8000f74:	440b      	add	r3, r1
 8000f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	bf0c      	ite	eq
 8000f84:	2301      	moveq	r3, #1
 8000f86:	2300      	movne	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_I2C_Init+0x196>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e022      	b.n	8000fd8 <HAL_I2C_Init+0x1dc>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10e      	bne.n	8000fb8 <HAL_I2C_Init+0x1bc>
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	1e58      	subs	r0, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6859      	ldr	r1, [r3, #4]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	440b      	add	r3, r1
 8000fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fac:	3301      	adds	r3, #1
 8000fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fb6:	e00f      	b.n	8000fd8 <HAL_I2C_Init+0x1dc>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	1e58      	subs	r0, r3, #1
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6859      	ldr	r1, [r3, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	0099      	lsls	r1, r3, #2
 8000fc8:	440b      	add	r3, r1
 8000fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fce:	3301      	adds	r3, #1
 8000fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	6809      	ldr	r1, [r1, #0]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69da      	ldr	r2, [r3, #28]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001006:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6911      	ldr	r1, [r2, #16]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68d2      	ldr	r2, [r2, #12]
 8001012:	4311      	orrs	r1, r2
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	6812      	ldr	r2, [r2, #0]
 8001018:	430b      	orrs	r3, r1
 800101a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	431a      	orrs	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	430a      	orrs	r2, r1
 8001036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f042 0201 	orr.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2220      	movs	r2, #32
 8001052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	000186a0 	.word	0x000186a0
 8001074:	001e847f 	.word	0x001e847f
 8001078:	003d08ff 	.word	0x003d08ff
 800107c:	431bde83 	.word	0x431bde83
 8001080:	10624dd3 	.word	0x10624dd3

08001084 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e264      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d075      	beq.n	800118e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010a2:	4ba3      	ldr	r3, [pc, #652]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 030c 	and.w	r3, r3, #12
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	d00c      	beq.n	80010c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ae:	4ba0      	ldr	r3, [pc, #640]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d112      	bne.n	80010e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ba:	4b9d      	ldr	r3, [pc, #628]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010c6:	d10b      	bne.n	80010e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c8:	4b99      	ldr	r3, [pc, #612]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d05b      	beq.n	800118c <HAL_RCC_OscConfig+0x108>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d157      	bne.n	800118c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e23f      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e8:	d106      	bne.n	80010f8 <HAL_RCC_OscConfig+0x74>
 80010ea:	4b91      	ldr	r3, [pc, #580]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a90      	ldr	r2, [pc, #576]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80010f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e01d      	b.n	8001134 <HAL_RCC_OscConfig+0xb0>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001100:	d10c      	bne.n	800111c <HAL_RCC_OscConfig+0x98>
 8001102:	4b8b      	ldr	r3, [pc, #556]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a8a      	ldr	r2, [pc, #552]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b88      	ldr	r3, [pc, #544]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a87      	ldr	r2, [pc, #540]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e00b      	b.n	8001134 <HAL_RCC_OscConfig+0xb0>
 800111c:	4b84      	ldr	r3, [pc, #528]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a83      	ldr	r2, [pc, #524]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b81      	ldr	r3, [pc, #516]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a80      	ldr	r2, [pc, #512]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 800112e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d013      	beq.n	8001164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fbd0 	bl	80008e0 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff fbcc 	bl	80008e0 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b64      	cmp	r3, #100	; 0x64
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e204      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001156:	4b76      	ldr	r3, [pc, #472]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0f0      	beq.n	8001144 <HAL_RCC_OscConfig+0xc0>
 8001162:	e014      	b.n	800118e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fbbc 	bl	80008e0 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fbb8 	bl	80008e0 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	; 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e1f0      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117e:	4b6c      	ldr	r3, [pc, #432]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0xe8>
 800118a:	e000      	b.n	800118e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d063      	beq.n	8001262 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800119a:	4b65      	ldr	r3, [pc, #404]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00b      	beq.n	80011be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a6:	4b62      	ldr	r3, [pc, #392]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d11c      	bne.n	80011ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011b2:	4b5f      	ldr	r3, [pc, #380]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d116      	bne.n	80011ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011be:	4b5c      	ldr	r3, [pc, #368]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d005      	beq.n	80011d6 <HAL_RCC_OscConfig+0x152>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d001      	beq.n	80011d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e1c4      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d6:	4b56      	ldr	r3, [pc, #344]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4952      	ldr	r1, [pc, #328]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ea:	e03a      	b.n	8001262 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d020      	beq.n	8001236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f4:	4b4f      	ldr	r3, [pc, #316]	; (8001334 <HAL_RCC_OscConfig+0x2b0>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fa:	f7ff fb71 	bl	80008e0 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001202:	f7ff fb6d 	bl	80008e0 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e1a5      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001214:	4b46      	ldr	r3, [pc, #280]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0f0      	beq.n	8001202 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001220:	4b43      	ldr	r3, [pc, #268]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	4940      	ldr	r1, [pc, #256]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	4313      	orrs	r3, r2
 8001232:	600b      	str	r3, [r1, #0]
 8001234:	e015      	b.n	8001262 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001236:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <HAL_RCC_OscConfig+0x2b0>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123c:	f7ff fb50 	bl	80008e0 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001244:	f7ff fb4c 	bl	80008e0 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e184      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001256:	4b36      	ldr	r3, [pc, #216]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f0      	bne.n	8001244 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	d030      	beq.n	80012d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d016      	beq.n	80012a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001276:	4b30      	ldr	r3, [pc, #192]	; (8001338 <HAL_RCC_OscConfig+0x2b4>)
 8001278:	2201      	movs	r2, #1
 800127a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127c:	f7ff fb30 	bl	80008e0 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001284:	f7ff fb2c 	bl	80008e0 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e164      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001296:	4b26      	ldr	r3, [pc, #152]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0x200>
 80012a2:	e015      	b.n	80012d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <HAL_RCC_OscConfig+0x2b4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012aa:	f7ff fb19 	bl	80008e0 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b2:	f7ff fb15 	bl	80008e0 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e14d      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80012c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f0      	bne.n	80012b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80a0 	beq.w	800141e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10f      	bne.n	800130e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800130a:	2301      	movs	r3, #1
 800130c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_RCC_OscConfig+0x2b8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d121      	bne.n	800135e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_RCC_OscConfig+0x2b8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_RCC_OscConfig+0x2b8>)
 8001320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001326:	f7ff fadb 	bl	80008e0 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132c:	e011      	b.n	8001352 <HAL_RCC_OscConfig+0x2ce>
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	42470000 	.word	0x42470000
 8001338:	42470e80 	.word	0x42470e80
 800133c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001340:	f7ff face 	bl	80008e0 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e106      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001352:	4b85      	ldr	r3, [pc, #532]	; (8001568 <HAL_RCC_OscConfig+0x4e4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d106      	bne.n	8001374 <HAL_RCC_OscConfig+0x2f0>
 8001366:	4b81      	ldr	r3, [pc, #516]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 8001368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136a:	4a80      	ldr	r2, [pc, #512]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6713      	str	r3, [r2, #112]	; 0x70
 8001372:	e01c      	b.n	80013ae <HAL_RCC_OscConfig+0x32a>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b05      	cmp	r3, #5
 800137a:	d10c      	bne.n	8001396 <HAL_RCC_OscConfig+0x312>
 800137c:	4b7b      	ldr	r3, [pc, #492]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	4a7a      	ldr	r2, [pc, #488]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	6713      	str	r3, [r2, #112]	; 0x70
 8001388:	4b78      	ldr	r3, [pc, #480]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138c:	4a77      	ldr	r2, [pc, #476]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6713      	str	r3, [r2, #112]	; 0x70
 8001394:	e00b      	b.n	80013ae <HAL_RCC_OscConfig+0x32a>
 8001396:	4b75      	ldr	r3, [pc, #468]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139a:	4a74      	ldr	r2, [pc, #464]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	6713      	str	r3, [r2, #112]	; 0x70
 80013a2:	4b72      	ldr	r3, [pc, #456]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a6:	4a71      	ldr	r2, [pc, #452]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 80013a8:	f023 0304 	bic.w	r3, r3, #4
 80013ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d015      	beq.n	80013e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b6:	f7ff fa93 	bl	80008e0 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013bc:	e00a      	b.n	80013d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7ff fa8f 	bl	80008e0 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e0c5      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d4:	4b65      	ldr	r3, [pc, #404]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 80013d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0ee      	beq.n	80013be <HAL_RCC_OscConfig+0x33a>
 80013e0:	e014      	b.n	800140c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e2:	f7ff fa7d 	bl	80008e0 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e8:	e00a      	b.n	8001400 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ea:	f7ff fa79 	bl	80008e0 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e0af      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001400:	4b5a      	ldr	r3, [pc, #360]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1ee      	bne.n	80013ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d105      	bne.n	800141e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001412:	4b56      	ldr	r3, [pc, #344]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a55      	ldr	r2, [pc, #340]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 8001418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 809b 	beq.w	800155e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001428:	4b50      	ldr	r3, [pc, #320]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 030c 	and.w	r3, r3, #12
 8001430:	2b08      	cmp	r3, #8
 8001432:	d05c      	beq.n	80014ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d141      	bne.n	80014c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143c:	4b4c      	ldr	r3, [pc, #304]	; (8001570 <HAL_RCC_OscConfig+0x4ec>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fa4d 	bl	80008e0 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144a:	f7ff fa49 	bl	80008e0 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e081      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145c:	4b43      	ldr	r3, [pc, #268]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f0      	bne.n	800144a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69da      	ldr	r2, [r3, #28]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	019b      	lsls	r3, r3, #6
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	085b      	lsrs	r3, r3, #1
 8001480:	3b01      	subs	r3, #1
 8001482:	041b      	lsls	r3, r3, #16
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	061b      	lsls	r3, r3, #24
 800148c:	4937      	ldr	r1, [pc, #220]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001492:	4b37      	ldr	r3, [pc, #220]	; (8001570 <HAL_RCC_OscConfig+0x4ec>)
 8001494:	2201      	movs	r2, #1
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fa22 	bl	80008e0 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff fa1e 	bl	80008e0 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e056      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b2:	4b2e      	ldr	r3, [pc, #184]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x41c>
 80014be:	e04e      	b.n	800155e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c0:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_RCC_OscConfig+0x4ec>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c6:	f7ff fa0b 	bl	80008e0 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ce:	f7ff fa07 	bl	80008e0 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e03f      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f0      	bne.n	80014ce <HAL_RCC_OscConfig+0x44a>
 80014ec:	e037      	b.n	800155e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e032      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d028      	beq.n	800155a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001512:	429a      	cmp	r2, r3
 8001514:	d121      	bne.n	800155a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001520:	429a      	cmp	r2, r3
 8001522:	d11a      	bne.n	800155a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800152a:	4013      	ands	r3, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001530:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001532:	4293      	cmp	r3, r2
 8001534:	d111      	bne.n	800155a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	085b      	lsrs	r3, r3, #1
 8001542:	3b01      	subs	r3, #1
 8001544:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001546:	429a      	cmp	r2, r3
 8001548:	d107      	bne.n	800155a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001554:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001556:	429a      	cmp	r2, r3
 8001558:	d001      	beq.n	800155e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40007000 	.word	0x40007000
 800156c:	40023800 	.word	0x40023800
 8001570:	42470060 	.word	0x42470060

08001574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0cc      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001588:	4b68      	ldr	r3, [pc, #416]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d90c      	bls.n	80015b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	4b65      	ldr	r3, [pc, #404]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800159e:	4b63      	ldr	r3, [pc, #396]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0b8      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d020      	beq.n	80015fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c8:	4b59      	ldr	r3, [pc, #356]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a58      	ldr	r2, [pc, #352]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e0:	4b53      	ldr	r3, [pc, #332]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4a52      	ldr	r2, [pc, #328]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ec:	4b50      	ldr	r3, [pc, #320]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	494d      	ldr	r1, [pc, #308]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d044      	beq.n	8001694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	4b47      	ldr	r3, [pc, #284]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d119      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e07f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d003      	beq.n	8001632 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800162e:	2b03      	cmp	r3, #3
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001632:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d109      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e06f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001642:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e067      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001652:	4b37      	ldr	r3, [pc, #220]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f023 0203 	bic.w	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4934      	ldr	r1, [pc, #208]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	4313      	orrs	r3, r2
 8001662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001664:	f7ff f93c 	bl	80008e0 <HAL_GetTick>
 8001668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	e00a      	b.n	8001682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800166c:	f7ff f938 	bl	80008e0 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f241 3288 	movw	r2, #5000	; 0x1388
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e04f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001682:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 020c 	and.w	r2, r3, #12
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	429a      	cmp	r2, r3
 8001692:	d1eb      	bne.n	800166c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001694:	4b25      	ldr	r3, [pc, #148]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d20c      	bcs.n	80016bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e032      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	4916      	ldr	r1, [pc, #88]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d009      	beq.n	80016fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	490e      	ldr	r1, [pc, #56]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016fa:	f000 f821 	bl	8001740 <HAL_RCC_GetSysClockFreq>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	490a      	ldr	r1, [pc, #40]	; (8001734 <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	5ccb      	ldrb	r3, [r1, r3]
 800170e:	fa22 f303 	lsr.w	r3, r2, r3
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_RCC_ClockConfig+0x1c8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f89c 	bl	8000858 <HAL_InitTick>

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023c00 	.word	0x40023c00
 8001730:	40023800 	.word	0x40023800
 8001734:	080044d0 	.word	0x080044d0
 8001738:	20000000 	.word	0x20000000
 800173c:	20000004 	.word	0x20000004

08001740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001740:	b5b0      	push	{r4, r5, r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001746:	2100      	movs	r1, #0
 8001748:	6079      	str	r1, [r7, #4]
 800174a:	2100      	movs	r1, #0
 800174c:	60f9      	str	r1, [r7, #12]
 800174e:	2100      	movs	r1, #0
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001752:	2100      	movs	r1, #0
 8001754:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001756:	4952      	ldr	r1, [pc, #328]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001758:	6889      	ldr	r1, [r1, #8]
 800175a:	f001 010c 	and.w	r1, r1, #12
 800175e:	2908      	cmp	r1, #8
 8001760:	d00d      	beq.n	800177e <HAL_RCC_GetSysClockFreq+0x3e>
 8001762:	2908      	cmp	r1, #8
 8001764:	f200 8094 	bhi.w	8001890 <HAL_RCC_GetSysClockFreq+0x150>
 8001768:	2900      	cmp	r1, #0
 800176a:	d002      	beq.n	8001772 <HAL_RCC_GetSysClockFreq+0x32>
 800176c:	2904      	cmp	r1, #4
 800176e:	d003      	beq.n	8001778 <HAL_RCC_GetSysClockFreq+0x38>
 8001770:	e08e      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001772:	4b4c      	ldr	r3, [pc, #304]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001774:	60bb      	str	r3, [r7, #8]
       break;
 8001776:	e08e      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001778:	4b4b      	ldr	r3, [pc, #300]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x168>)
 800177a:	60bb      	str	r3, [r7, #8]
      break;
 800177c:	e08b      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800177e:	4948      	ldr	r1, [pc, #288]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001780:	6849      	ldr	r1, [r1, #4]
 8001782:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001786:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001788:	4945      	ldr	r1, [pc, #276]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800178a:	6849      	ldr	r1, [r1, #4]
 800178c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001790:	2900      	cmp	r1, #0
 8001792:	d024      	beq.n	80017de <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001794:	4942      	ldr	r1, [pc, #264]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001796:	6849      	ldr	r1, [r1, #4]
 8001798:	0989      	lsrs	r1, r1, #6
 800179a:	4608      	mov	r0, r1
 800179c:	f04f 0100 	mov.w	r1, #0
 80017a0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80017a4:	f04f 0500 	mov.w	r5, #0
 80017a8:	ea00 0204 	and.w	r2, r0, r4
 80017ac:	ea01 0305 	and.w	r3, r1, r5
 80017b0:	493d      	ldr	r1, [pc, #244]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80017b2:	fb01 f003 	mul.w	r0, r1, r3
 80017b6:	2100      	movs	r1, #0
 80017b8:	fb01 f102 	mul.w	r1, r1, r2
 80017bc:	1844      	adds	r4, r0, r1
 80017be:	493a      	ldr	r1, [pc, #232]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80017c0:	fba2 0101 	umull	r0, r1, r2, r1
 80017c4:	1863      	adds	r3, r4, r1
 80017c6:	4619      	mov	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	461a      	mov	r2, r3
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	f7fe fcfe 	bl	80001d0 <__aeabi_uldivmod>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4613      	mov	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	e04a      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	099b      	lsrs	r3, r3, #6
 80017e4:	461a      	mov	r2, r3
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017ee:	f04f 0100 	mov.w	r1, #0
 80017f2:	ea02 0400 	and.w	r4, r2, r0
 80017f6:	ea03 0501 	and.w	r5, r3, r1
 80017fa:	4620      	mov	r0, r4
 80017fc:	4629      	mov	r1, r5
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	014b      	lsls	r3, r1, #5
 8001808:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800180c:	0142      	lsls	r2, r0, #5
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	1b00      	subs	r0, r0, r4
 8001814:	eb61 0105 	sbc.w	r1, r1, r5
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	018b      	lsls	r3, r1, #6
 8001822:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001826:	0182      	lsls	r2, r0, #6
 8001828:	1a12      	subs	r2, r2, r0
 800182a:	eb63 0301 	sbc.w	r3, r3, r1
 800182e:	f04f 0000 	mov.w	r0, #0
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	00d9      	lsls	r1, r3, #3
 8001838:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800183c:	00d0      	lsls	r0, r2, #3
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	1912      	adds	r2, r2, r4
 8001844:	eb45 0303 	adc.w	r3, r5, r3
 8001848:	f04f 0000 	mov.w	r0, #0
 800184c:	f04f 0100 	mov.w	r1, #0
 8001850:	0299      	lsls	r1, r3, #10
 8001852:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001856:	0290      	lsls	r0, r2, #10
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	461a      	mov	r2, r3
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	f7fe fcb2 	bl	80001d0 <__aeabi_uldivmod>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4613      	mov	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	0c1b      	lsrs	r3, r3, #16
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	3301      	adds	r3, #1
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	fbb2 f3f3 	udiv	r3, r2, r3
 800188c:	60bb      	str	r3, [r7, #8]
      break;
 800188e:	e002      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001892:	60bb      	str	r3, [r7, #8]
      break;
 8001894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001896:	68bb      	ldr	r3, [r7, #8]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bdb0      	pop	{r4, r5, r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	00f42400 	.word	0x00f42400
 80018a8:	017d7840 	.word	0x017d7840

080018ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000000 	.word	0x20000000

080018c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018c8:	f7ff fff0 	bl	80018ac <HAL_RCC_GetHCLKFreq>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	0a9b      	lsrs	r3, r3, #10
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	4903      	ldr	r1, [pc, #12]	; (80018e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018da:	5ccb      	ldrb	r3, [r1, r3]
 80018dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40023800 	.word	0x40023800
 80018e8:	080044e0 	.word	0x080044e0

080018ec <__NVIC_SetPriority>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0a      	blt.n	8001916 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	; (8001938 <__NVIC_SetPriority+0x4c>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001914:	e00a      	b.n	800192c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4908      	ldr	r1, [pc, #32]	; (800193c <__NVIC_SetPriority+0x50>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3b04      	subs	r3, #4
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	440b      	add	r3, r1
 800192a:	761a      	strb	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001944:	2100      	movs	r1, #0
 8001946:	f06f 0004 	mvn.w	r0, #4
 800194a:	f7ff ffcf 	bl	80018ec <__NVIC_SetPriority>
#endif
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800195a:	f3ef 8305 	mrs	r3, IPSR
 800195e:	603b      	str	r3, [r7, #0]
  return(result);
 8001960:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001966:	f06f 0305 	mvn.w	r3, #5
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	e00c      	b.n	8001988 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <osKernelInitialize+0x44>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d105      	bne.n	8001982 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <osKernelInitialize+0x44>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800197c:	2300      	movs	r3, #0
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	e002      	b.n	8001988 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001986:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001988:	687b      	ldr	r3, [r7, #4]
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	2000002c 	.word	0x2000002c

0800199c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019a2:	f3ef 8305 	mrs	r3, IPSR
 80019a6:	603b      	str	r3, [r7, #0]
  return(result);
 80019a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80019ae:	f06f 0305 	mvn.w	r3, #5
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	e010      	b.n	80019d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <osKernelStart+0x48>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d109      	bne.n	80019d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80019be:	f7ff ffbf 	bl	8001940 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <osKernelStart+0x48>)
 80019c4:	2202      	movs	r2, #2
 80019c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80019c8:	f001 f866 	bl	8002a98 <vTaskStartScheduler>
      stat = osOK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	e002      	b.n	80019d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80019d8:	687b      	ldr	r3, [r7, #4]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000002c 	.word	0x2000002c

080019e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08e      	sub	sp, #56	; 0x38
 80019ec:	af04      	add	r7, sp, #16
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019f8:	f3ef 8305 	mrs	r3, IPSR
 80019fc:	617b      	str	r3, [r7, #20]
  return(result);
 80019fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d17e      	bne.n	8001b02 <osThreadNew+0x11a>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d07b      	beq.n	8001b02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001a0e:	2318      	movs	r3, #24
 8001a10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d045      	beq.n	8001aae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <osThreadNew+0x48>
        name = attr->name;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d008      	beq.n	8001a56 <osThreadNew+0x6e>
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2b38      	cmp	r3, #56	; 0x38
 8001a48:	d805      	bhi.n	8001a56 <osThreadNew+0x6e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <osThreadNew+0x72>
        return (NULL);
 8001a56:	2300      	movs	r3, #0
 8001a58:	e054      	b.n	8001b04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00e      	beq.n	8001a90 <osThreadNew+0xa8>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2b5b      	cmp	r3, #91	; 0x5b
 8001a78:	d90a      	bls.n	8001a90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d006      	beq.n	8001a90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <osThreadNew+0xa8>
        mem = 1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	61bb      	str	r3, [r7, #24]
 8001a8e:	e010      	b.n	8001ab2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10c      	bne.n	8001ab2 <osThreadNew+0xca>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d108      	bne.n	8001ab2 <osThreadNew+0xca>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d104      	bne.n	8001ab2 <osThreadNew+0xca>
          mem = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	e001      	b.n	8001ab2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d110      	bne.n	8001ada <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ac0:	9202      	str	r2, [sp, #8]
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	6a3a      	ldr	r2, [r7, #32]
 8001acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 fe0c 	bl	80026ec <xTaskCreateStatic>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	e013      	b.n	8001b02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d110      	bne.n	8001b02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	f107 0310 	add.w	r3, r7, #16
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 fe57 	bl	80027a6 <xTaskCreate>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d001      	beq.n	8001b02 <osThreadNew+0x11a>
            hTask = NULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001b02:	693b      	ldr	r3, [r7, #16]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b14:	f3ef 8305 	mrs	r3, IPSR
 8001b18:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <osDelay+0x1c>
    stat = osErrorISR;
 8001b20:	f06f 0305 	mvn.w	r3, #5
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	e007      	b.n	8001b38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 ff7c 	bl	8002a30 <vTaskDelay>
    }
  }

  return (stat);
 8001b38:	68fb      	ldr	r3, [r7, #12]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	4a06      	ldr	r2, [pc, #24]	; (8001b74 <vApplicationGetIdleTaskMemory+0x30>)
 8001b5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	601a      	str	r2, [r3, #0]
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000030 	.word	0x20000030
 8001b74:	2000008c 	.word	0x2000008c

08001b78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <vApplicationGetTimerTaskMemory+0x2c>)
 8001b88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	4a06      	ldr	r2, [pc, #24]	; (8001ba8 <vApplicationGetTimerTaskMemory+0x30>)
 8001b8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b96:	601a      	str	r2, [r3, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	2000028c 	.word	0x2000028c
 8001ba8:	200002e8 	.word	0x200002e8

08001bac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f103 0208 	add.w	r2, r3, #8
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f103 0208 	add.w	r2, r3, #8
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f103 0208 	add.w	r2, r3, #8
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c06:	b480      	push	{r7}
 8001c08:	b085      	sub	sp, #20
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	601a      	str	r2, [r3, #0]
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b085      	sub	sp, #20
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c64:	d103      	bne.n	8001c6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e00c      	b.n	8001c88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3308      	adds	r3, #8
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	e002      	b.n	8001c7c <vListInsert+0x2e>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d2f6      	bcs.n	8001c76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	601a      	str	r2, [r3, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6892      	ldr	r2, [r2, #8]
 8001cd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6852      	ldr	r2, [r2, #4]
 8001ce0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d103      	bne.n	8001cf4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	1e5a      	subs	r2, r3, #1
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10a      	bne.n	8001d3e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d2c:	f383 8811 	msr	BASEPRI, r3
 8001d30:	f3bf 8f6f 	isb	sy
 8001d34:	f3bf 8f4f 	dsb	sy
 8001d38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d3a:	bf00      	nop
 8001d3c:	e7fe      	b.n	8001d3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001d3e:	f002 f851 	bl	8003de4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4a:	68f9      	ldr	r1, [r7, #12]
 8001d4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d4e:	fb01 f303 	mul.w	r3, r1, r3
 8001d52:	441a      	add	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	68f9      	ldr	r1, [r7, #12]
 8001d72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d74:	fb01 f303 	mul.w	r3, r1, r3
 8001d78:	441a      	add	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	22ff      	movs	r2, #255	; 0xff
 8001d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	22ff      	movs	r2, #255	; 0xff
 8001d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d114      	bne.n	8001dbe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d01a      	beq.n	8001dd2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3310      	adds	r3, #16
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 f903 	bl	8002fac <xTaskRemoveFromEventList>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d012      	beq.n	8001dd2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <xQueueGenericReset+0xcc>)
 8001dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	f3bf 8f4f 	dsb	sy
 8001db8:	f3bf 8f6f 	isb	sy
 8001dbc:	e009      	b.n	8001dd2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3310      	adds	r3, #16
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fef2 	bl	8001bac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	3324      	adds	r3, #36	; 0x24
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff feed 	bl	8001bac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001dd2:	f002 f837 	bl	8003e44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	e000ed04 	.word	0xe000ed04

08001de4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08e      	sub	sp, #56	; 0x38
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10a      	bne.n	8001e0e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dfc:	f383 8811 	msr	BASEPRI, r3
 8001e00:	f3bf 8f6f 	isb	sy
 8001e04:	f3bf 8f4f 	dsb	sy
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001e0a:	bf00      	nop
 8001e0c:	e7fe      	b.n	8001e0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10a      	bne.n	8001e2a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e18:	f383 8811 	msr	BASEPRI, r3
 8001e1c:	f3bf 8f6f 	isb	sy
 8001e20:	f3bf 8f4f 	dsb	sy
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001e26:	bf00      	nop
 8001e28:	e7fe      	b.n	8001e28 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <xQueueGenericCreateStatic+0x52>
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <xQueueGenericCreateStatic+0x56>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <xQueueGenericCreateStatic+0x58>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10a      	bne.n	8001e56 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e44:	f383 8811 	msr	BASEPRI, r3
 8001e48:	f3bf 8f6f 	isb	sy
 8001e4c:	f3bf 8f4f 	dsb	sy
 8001e50:	623b      	str	r3, [r7, #32]
}
 8001e52:	bf00      	nop
 8001e54:	e7fe      	b.n	8001e54 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <xQueueGenericCreateStatic+0x7e>
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <xQueueGenericCreateStatic+0x82>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <xQueueGenericCreateStatic+0x84>
 8001e66:	2300      	movs	r3, #0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10a      	bne.n	8001e82 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e70:	f383 8811 	msr	BASEPRI, r3
 8001e74:	f3bf 8f6f 	isb	sy
 8001e78:	f3bf 8f4f 	dsb	sy
 8001e7c:	61fb      	str	r3, [r7, #28]
}
 8001e7e:	bf00      	nop
 8001e80:	e7fe      	b.n	8001e80 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001e82:	2350      	movs	r3, #80	; 0x50
 8001e84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b50      	cmp	r3, #80	; 0x50
 8001e8a:	d00a      	beq.n	8001ea2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e90:	f383 8811 	msr	BASEPRI, r3
 8001e94:	f3bf 8f6f 	isb	sy
 8001e98:	f3bf 8f4f 	dsb	sy
 8001e9c:	61bb      	str	r3, [r7, #24]
}
 8001e9e:	bf00      	nop
 8001ea0:	e7fe      	b.n	8001ea0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001ea2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00d      	beq.n	8001eca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001eb6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	68b9      	ldr	r1, [r7, #8]
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f805 	bl	8001ed4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3730      	adds	r7, #48	; 0x30
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d103      	bne.n	8001ef0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e002      	b.n	8001ef6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f02:	2101      	movs	r1, #1
 8001f04:	69b8      	ldr	r0, [r7, #24]
 8001f06:	f7ff ff05 	bl	8001d14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	78fa      	ldrb	r2, [r7, #3]
 8001f0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08e      	sub	sp, #56	; 0x38
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10a      	bne.n	8001f4e <xQueueGenericSend+0x32>
	__asm volatile
 8001f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3c:	f383 8811 	msr	BASEPRI, r3
 8001f40:	f3bf 8f6f 	isb	sy
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001f4a:	bf00      	nop
 8001f4c:	e7fe      	b.n	8001f4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d103      	bne.n	8001f5c <xQueueGenericSend+0x40>
 8001f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <xQueueGenericSend+0x44>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <xQueueGenericSend+0x46>
 8001f60:	2300      	movs	r3, #0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10a      	bne.n	8001f7c <xQueueGenericSend+0x60>
	__asm volatile
 8001f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f6a:	f383 8811 	msr	BASEPRI, r3
 8001f6e:	f3bf 8f6f 	isb	sy
 8001f72:	f3bf 8f4f 	dsb	sy
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001f78:	bf00      	nop
 8001f7a:	e7fe      	b.n	8001f7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d103      	bne.n	8001f8a <xQueueGenericSend+0x6e>
 8001f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <xQueueGenericSend+0x72>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <xQueueGenericSend+0x74>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10a      	bne.n	8001faa <xQueueGenericSend+0x8e>
	__asm volatile
 8001f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f98:	f383 8811 	msr	BASEPRI, r3
 8001f9c:	f3bf 8f6f 	isb	sy
 8001fa0:	f3bf 8f4f 	dsb	sy
 8001fa4:	623b      	str	r3, [r7, #32]
}
 8001fa6:	bf00      	nop
 8001fa8:	e7fe      	b.n	8001fa8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001faa:	f001 f9bd 	bl	8003328 <xTaskGetSchedulerState>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <xQueueGenericSend+0x9e>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <xQueueGenericSend+0xa2>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <xQueueGenericSend+0xa4>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10a      	bne.n	8001fda <xQueueGenericSend+0xbe>
	__asm volatile
 8001fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc8:	f383 8811 	msr	BASEPRI, r3
 8001fcc:	f3bf 8f6f 	isb	sy
 8001fd0:	f3bf 8f4f 	dsb	sy
 8001fd4:	61fb      	str	r3, [r7, #28]
}
 8001fd6:	bf00      	nop
 8001fd8:	e7fe      	b.n	8001fd8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001fda:	f001 ff03 	bl	8003de4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d302      	bcc.n	8001ff0 <xQueueGenericSend+0xd4>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d129      	bne.n	8002044 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	68b9      	ldr	r1, [r7, #8]
 8001ff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ff6:	f000 fa0b 	bl	8002410 <prvCopyDataToQueue>
 8001ffa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	2b00      	cmp	r3, #0
 8002002:	d010      	beq.n	8002026 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002006:	3324      	adds	r3, #36	; 0x24
 8002008:	4618      	mov	r0, r3
 800200a:	f000 ffcf 	bl	8002fac <xTaskRemoveFromEventList>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d013      	beq.n	800203c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002014:	4b3f      	ldr	r3, [pc, #252]	; (8002114 <xQueueGenericSend+0x1f8>)
 8002016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	f3bf 8f4f 	dsb	sy
 8002020:	f3bf 8f6f 	isb	sy
 8002024:	e00a      	b.n	800203c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800202c:	4b39      	ldr	r3, [pc, #228]	; (8002114 <xQueueGenericSend+0x1f8>)
 800202e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	f3bf 8f4f 	dsb	sy
 8002038:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800203c:	f001 ff02 	bl	8003e44 <vPortExitCritical>
				return pdPASS;
 8002040:	2301      	movs	r3, #1
 8002042:	e063      	b.n	800210c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d103      	bne.n	8002052 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800204a:	f001 fefb 	bl	8003e44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800204e:	2300      	movs	r3, #0
 8002050:	e05c      	b.n	800210c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002054:	2b00      	cmp	r3, #0
 8002056:	d106      	bne.n	8002066 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4618      	mov	r0, r3
 800205e:	f001 f809 	bl	8003074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002062:	2301      	movs	r3, #1
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002066:	f001 feed 	bl	8003e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800206a:	f000 fd7b 	bl	8002b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800206e:	f001 feb9 	bl	8003de4 <vPortEnterCritical>
 8002072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002074:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002078:	b25b      	sxtb	r3, r3
 800207a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800207e:	d103      	bne.n	8002088 <xQueueGenericSend+0x16c>
 8002080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800208e:	b25b      	sxtb	r3, r3
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002094:	d103      	bne.n	800209e <xQueueGenericSend+0x182>
 8002096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800209e:	f001 fed1 	bl	8003e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80020a2:	1d3a      	adds	r2, r7, #4
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fff8 	bl	80030a0 <xTaskCheckForTimeOut>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d124      	bne.n	8002100 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80020b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020b8:	f000 faa2 	bl	8002600 <prvIsQueueFull>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d018      	beq.n	80020f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80020c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c4:	3310      	adds	r3, #16
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 ff1e 	bl	8002f0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80020d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020d2:	f000 fa2d 	bl	8002530 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80020d6:	f000 fd53 	bl	8002b80 <xTaskResumeAll>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f47f af7c 	bne.w	8001fda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80020e2:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <xQueueGenericSend+0x1f8>)
 80020e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	f3bf 8f4f 	dsb	sy
 80020ee:	f3bf 8f6f 	isb	sy
 80020f2:	e772      	b.n	8001fda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80020f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020f6:	f000 fa1b 	bl	8002530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80020fa:	f000 fd41 	bl	8002b80 <xTaskResumeAll>
 80020fe:	e76c      	b.n	8001fda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002102:	f000 fa15 	bl	8002530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002106:	f000 fd3b 	bl	8002b80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800210a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800210c:	4618      	mov	r0, r3
 800210e:	3738      	adds	r7, #56	; 0x38
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	e000ed04 	.word	0xe000ed04

08002118 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b090      	sub	sp, #64	; 0x40
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800212a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10a      	bne.n	8002146 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002134:	f383 8811 	msr	BASEPRI, r3
 8002138:	f3bf 8f6f 	isb	sy
 800213c:	f3bf 8f4f 	dsb	sy
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002142:	bf00      	nop
 8002144:	e7fe      	b.n	8002144 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d103      	bne.n	8002154 <xQueueGenericSendFromISR+0x3c>
 800214c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <xQueueGenericSendFromISR+0x40>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <xQueueGenericSendFromISR+0x42>
 8002158:	2300      	movs	r3, #0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10a      	bne.n	8002174 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800215e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002162:	f383 8811 	msr	BASEPRI, r3
 8002166:	f3bf 8f6f 	isb	sy
 800216a:	f3bf 8f4f 	dsb	sy
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002170:	bf00      	nop
 8002172:	e7fe      	b.n	8002172 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d103      	bne.n	8002182 <xQueueGenericSendFromISR+0x6a>
 800217a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <xQueueGenericSendFromISR+0x6e>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <xQueueGenericSendFromISR+0x70>
 8002186:	2300      	movs	r3, #0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10a      	bne.n	80021a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800218c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002190:	f383 8811 	msr	BASEPRI, r3
 8002194:	f3bf 8f6f 	isb	sy
 8002198:	f3bf 8f4f 	dsb	sy
 800219c:	623b      	str	r3, [r7, #32]
}
 800219e:	bf00      	nop
 80021a0:	e7fe      	b.n	80021a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80021a2:	f001 ff01 	bl	8003fa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80021a6:	f3ef 8211 	mrs	r2, BASEPRI
 80021aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ae:	f383 8811 	msr	BASEPRI, r3
 80021b2:	f3bf 8f6f 	isb	sy
 80021b6:	f3bf 8f4f 	dsb	sy
 80021ba:	61fa      	str	r2, [r7, #28]
 80021bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80021be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d302      	bcc.n	80021d4 <xQueueGenericSendFromISR+0xbc>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d12f      	bne.n	8002234 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80021d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80021ea:	f000 f911 	bl	8002410 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80021ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80021f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021f6:	d112      	bne.n	800221e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d016      	beq.n	800222e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002202:	3324      	adds	r3, #36	; 0x24
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fed1 	bl	8002fac <xTaskRemoveFromEventList>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00e      	beq.n	800222e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e007      	b.n	800222e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800221e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002222:	3301      	adds	r3, #1
 8002224:	b2db      	uxtb	r3, r3
 8002226:	b25a      	sxtb	r2, r3
 8002228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800222e:	2301      	movs	r3, #1
 8002230:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002232:	e001      	b.n	8002238 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002234:	2300      	movs	r3, #0
 8002236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002242:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002246:	4618      	mov	r0, r3
 8002248:	3740      	adds	r7, #64	; 0x40
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08c      	sub	sp, #48	; 0x30
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800225c:	2300      	movs	r3, #0
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10a      	bne.n	8002280 <xQueueReceive+0x30>
	__asm volatile
 800226a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226e:	f383 8811 	msr	BASEPRI, r3
 8002272:	f3bf 8f6f 	isb	sy
 8002276:	f3bf 8f4f 	dsb	sy
 800227a:	623b      	str	r3, [r7, #32]
}
 800227c:	bf00      	nop
 800227e:	e7fe      	b.n	800227e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <xQueueReceive+0x3e>
 8002286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <xQueueReceive+0x42>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <xQueueReceive+0x44>
 8002292:	2300      	movs	r3, #0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <xQueueReceive+0x5e>
	__asm volatile
 8002298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229c:	f383 8811 	msr	BASEPRI, r3
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	f3bf 8f4f 	dsb	sy
 80022a8:	61fb      	str	r3, [r7, #28]
}
 80022aa:	bf00      	nop
 80022ac:	e7fe      	b.n	80022ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022ae:	f001 f83b 	bl	8003328 <xTaskGetSchedulerState>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d102      	bne.n	80022be <xQueueReceive+0x6e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <xQueueReceive+0x72>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <xQueueReceive+0x74>
 80022c2:	2300      	movs	r3, #0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10a      	bne.n	80022de <xQueueReceive+0x8e>
	__asm volatile
 80022c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022cc:	f383 8811 	msr	BASEPRI, r3
 80022d0:	f3bf 8f6f 	isb	sy
 80022d4:	f3bf 8f4f 	dsb	sy
 80022d8:	61bb      	str	r3, [r7, #24]
}
 80022da:	bf00      	nop
 80022dc:	e7fe      	b.n	80022dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022de:	f001 fd81 	bl	8003de4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d01f      	beq.n	800232e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022f2:	f000 f8f7 	bl	80024e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	1e5a      	subs	r2, r3, #1
 80022fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00f      	beq.n	8002326 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002308:	3310      	adds	r3, #16
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fe4e 	bl	8002fac <xTaskRemoveFromEventList>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002316:	4b3d      	ldr	r3, [pc, #244]	; (800240c <xQueueReceive+0x1bc>)
 8002318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002326:	f001 fd8d 	bl	8003e44 <vPortExitCritical>
				return pdPASS;
 800232a:	2301      	movs	r3, #1
 800232c:	e069      	b.n	8002402 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d103      	bne.n	800233c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002334:	f001 fd86 	bl	8003e44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002338:	2300      	movs	r3, #0
 800233a:	e062      	b.n	8002402 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002342:	f107 0310 	add.w	r3, r7, #16
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fe94 	bl	8003074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800234c:	2301      	movs	r3, #1
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002350:	f001 fd78 	bl	8003e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002354:	f000 fc06 	bl	8002b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002358:	f001 fd44 	bl	8003de4 <vPortEnterCritical>
 800235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002362:	b25b      	sxtb	r3, r3
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002368:	d103      	bne.n	8002372 <xQueueReceive+0x122>
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002378:	b25b      	sxtb	r3, r3
 800237a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800237e:	d103      	bne.n	8002388 <xQueueReceive+0x138>
 8002380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002388:	f001 fd5c 	bl	8003e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800238c:	1d3a      	adds	r2, r7, #4
 800238e:	f107 0310 	add.w	r3, r7, #16
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fe83 	bl	80030a0 <xTaskCheckForTimeOut>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d123      	bne.n	80023e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023a2:	f000 f917 	bl	80025d4 <prvIsQueueEmpty>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d017      	beq.n	80023dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	3324      	adds	r3, #36	; 0x24
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 fda9 	bl	8002f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80023ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023bc:	f000 f8b8 	bl	8002530 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80023c0:	f000 fbde 	bl	8002b80 <xTaskResumeAll>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d189      	bne.n	80022de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <xQueueReceive+0x1bc>)
 80023cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	f3bf 8f4f 	dsb	sy
 80023d6:	f3bf 8f6f 	isb	sy
 80023da:	e780      	b.n	80022de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80023dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023de:	f000 f8a7 	bl	8002530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023e2:	f000 fbcd 	bl	8002b80 <xTaskResumeAll>
 80023e6:	e77a      	b.n	80022de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80023e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023ea:	f000 f8a1 	bl	8002530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023ee:	f000 fbc7 	bl	8002b80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023f4:	f000 f8ee 	bl	80025d4 <prvIsQueueEmpty>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f43f af6f 	beq.w	80022de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002400:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002402:	4618      	mov	r0, r3
 8002404:	3730      	adds	r7, #48	; 0x30
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	e000ed04 	.word	0xe000ed04

08002410 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002424:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10d      	bne.n	800244a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d14d      	bne.n	80024d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	4618      	mov	r0, r3
 800243c:	f000 ff92 	bl	8003364 <xTaskPriorityDisinherit>
 8002440:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	e043      	b.n	80024d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d119      	bne.n	8002484 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6858      	ldr	r0, [r3, #4]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	461a      	mov	r2, r3
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	f001 fff2 	bl	8004444 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	441a      	add	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	429a      	cmp	r2, r3
 8002478:	d32b      	bcc.n	80024d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	e026      	b.n	80024d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	68d8      	ldr	r0, [r3, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	461a      	mov	r2, r3
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	f001 ffd8 	bl	8004444 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	425b      	negs	r3, r3
 800249e:	441a      	add	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d207      	bcs.n	80024c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	425b      	negs	r3, r3
 80024ba:	441a      	add	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d105      	bne.n	80024d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80024da:	697b      	ldr	r3, [r7, #20]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d018      	beq.n	8002528 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	441a      	add	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	429a      	cmp	r2, r3
 800250e:	d303      	bcc.n	8002518 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68d9      	ldr	r1, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	461a      	mov	r2, r3
 8002522:	6838      	ldr	r0, [r7, #0]
 8002524:	f001 ff8e 	bl	8004444 <memcpy>
	}
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002538:	f001 fc54 	bl	8003de4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002542:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002544:	e011      	b.n	800256a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	2b00      	cmp	r3, #0
 800254c:	d012      	beq.n	8002574 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3324      	adds	r3, #36	; 0x24
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fd2a 	bl	8002fac <xTaskRemoveFromEventList>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800255e:	f000 fe01 	bl	8003164 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	3b01      	subs	r3, #1
 8002566:	b2db      	uxtb	r3, r3
 8002568:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800256a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256e:	2b00      	cmp	r3, #0
 8002570:	dce9      	bgt.n	8002546 <prvUnlockQueue+0x16>
 8002572:	e000      	b.n	8002576 <prvUnlockQueue+0x46>
					break;
 8002574:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	22ff      	movs	r2, #255	; 0xff
 800257a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800257e:	f001 fc61 	bl	8003e44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002582:	f001 fc2f 	bl	8003de4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800258c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800258e:	e011      	b.n	80025b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d012      	beq.n	80025be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3310      	adds	r3, #16
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fd05 	bl	8002fac <xTaskRemoveFromEventList>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80025a8:	f000 fddc 	bl	8003164 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80025ac:	7bbb      	ldrb	r3, [r7, #14]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	dce9      	bgt.n	8002590 <prvUnlockQueue+0x60>
 80025bc:	e000      	b.n	80025c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80025be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	22ff      	movs	r2, #255	; 0xff
 80025c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80025c8:	f001 fc3c 	bl	8003e44 <vPortExitCritical>
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025dc:	f001 fc02 	bl	8003de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80025e8:	2301      	movs	r3, #1
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	e001      	b.n	80025f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80025f2:	f001 fc27 	bl	8003e44 <vPortExitCritical>

	return xReturn;
 80025f6:	68fb      	ldr	r3, [r7, #12]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002608:	f001 fbec 	bl	8003de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002614:	429a      	cmp	r2, r3
 8002616:	d102      	bne.n	800261e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002618:	2301      	movs	r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	e001      	b.n	8002622 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002622:	f001 fc0f 	bl	8003e44 <vPortExitCritical>

	return xReturn;
 8002626:	68fb      	ldr	r3, [r7, #12]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	e014      	b.n	800266a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002640:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <vQueueAddToRegistry+0x50>)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10b      	bne.n	8002664 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800264c:	490c      	ldr	r1, [pc, #48]	; (8002680 <vQueueAddToRegistry+0x50>)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <vQueueAddToRegistry+0x50>)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002662:	e006      	b.n	8002672 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3301      	adds	r3, #1
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b07      	cmp	r3, #7
 800266e:	d9e7      	bls.n	8002640 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20004998 	.word	0x20004998

08002684 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002694:	f001 fba6 	bl	8003de4 <vPortEnterCritical>
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800269e:	b25b      	sxtb	r3, r3
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026a4:	d103      	bne.n	80026ae <vQueueWaitForMessageRestricted+0x2a>
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026b4:	b25b      	sxtb	r3, r3
 80026b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ba:	d103      	bne.n	80026c4 <vQueueWaitForMessageRestricted+0x40>
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026c4:	f001 fbbe 	bl	8003e44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d106      	bne.n	80026de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	3324      	adds	r3, #36	; 0x24
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fc3b 	bl	8002f54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80026de:	6978      	ldr	r0, [r7, #20]
 80026e0:	f7ff ff26 	bl	8002530 <prvUnlockQueue>
	}
 80026e4:	bf00      	nop
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08e      	sub	sp, #56	; 0x38
 80026f0:	af04      	add	r7, sp, #16
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80026fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10a      	bne.n	8002716 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	623b      	str	r3, [r7, #32]
}
 8002712:	bf00      	nop
 8002714:	e7fe      	b.n	8002714 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <xTaskCreateStatic+0x46>
	__asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	61fb      	str	r3, [r7, #28]
}
 800272e:	bf00      	nop
 8002730:	e7fe      	b.n	8002730 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002732:	235c      	movs	r3, #92	; 0x5c
 8002734:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	2b5c      	cmp	r3, #92	; 0x5c
 800273a:	d00a      	beq.n	8002752 <xTaskCreateStatic+0x66>
	__asm volatile
 800273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	61bb      	str	r3, [r7, #24]
}
 800274e:	bf00      	nop
 8002750:	e7fe      	b.n	8002750 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002752:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002756:	2b00      	cmp	r3, #0
 8002758:	d01e      	beq.n	8002798 <xTaskCreateStatic+0xac>
 800275a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01b      	beq.n	8002798 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002768:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	2202      	movs	r2, #2
 800276e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002772:	2300      	movs	r3, #0
 8002774:	9303      	str	r3, [sp, #12]
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	9302      	str	r3, [sp, #8]
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f850 	bl	8002830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002792:	f000 f8dd 	bl	8002950 <prvAddNewTaskToReadyList>
 8002796:	e001      	b.n	800279c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800279c:	697b      	ldr	r3, [r7, #20]
	}
 800279e:	4618      	mov	r0, r3
 80027a0:	3728      	adds	r7, #40	; 0x28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b08c      	sub	sp, #48	; 0x30
 80027aa:	af04      	add	r7, sp, #16
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	4613      	mov	r3, r2
 80027b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 fc34 	bl	8004028 <pvPortMalloc>
 80027c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00e      	beq.n	80027e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027c8:	205c      	movs	r0, #92	; 0x5c
 80027ca:	f001 fc2d 	bl	8004028 <pvPortMalloc>
 80027ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
 80027dc:	e005      	b.n	80027ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f001 fcee 	bl	80041c0 <vPortFree>
 80027e4:	e001      	b.n	80027ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d017      	beq.n	8002820 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	2300      	movs	r3, #0
 80027fc:	9303      	str	r3, [sp, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	9302      	str	r3, [sp, #8]
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f80e 	bl	8002830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002814:	69f8      	ldr	r0, [r7, #28]
 8002816:	f000 f89b 	bl	8002950 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800281a:	2301      	movs	r3, #1
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e002      	b.n	8002826 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002824:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002826:	69bb      	ldr	r3, [r7, #24]
	}
 8002828:	4618      	mov	r0, r3
 800282a:	3720      	adds	r7, #32
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002840:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	461a      	mov	r2, r3
 8002848:	21a5      	movs	r1, #165	; 0xa5
 800284a:	f001 fe09 	bl	8004460 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002858:	3b01      	subs	r3, #1
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f023 0307 	bic.w	r3, r3, #7
 8002866:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	617b      	str	r3, [r7, #20]
}
 8002884:	bf00      	nop
 8002886:	e7fe      	b.n	8002886 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d01f      	beq.n	80028ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	e012      	b.n	80028ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4413      	add	r3, r2
 800289a:	7819      	ldrb	r1, [r3, #0]
 800289c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	4413      	add	r3, r2
 80028a2:	3334      	adds	r3, #52	; 0x34
 80028a4:	460a      	mov	r2, r1
 80028a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	4413      	add	r3, r2
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d006      	beq.n	80028c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	3301      	adds	r3, #1
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	2b0f      	cmp	r3, #15
 80028be:	d9e9      	bls.n	8002894 <prvInitialiseNewTask+0x64>
 80028c0:	e000      	b.n	80028c4 <prvInitialiseNewTask+0x94>
			{
				break;
 80028c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028cc:	e003      	b.n	80028d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	2b37      	cmp	r3, #55	; 0x37
 80028da:	d901      	bls.n	80028e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028dc:	2337      	movs	r3, #55	; 0x37
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80028e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80028e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	2200      	movs	r2, #0
 80028f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f4:	3304      	adds	r3, #4
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff f978 	bl	8001bec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fe:	3318      	adds	r3, #24
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff f973 	bl	8001bec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800290a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002914:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800291a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	2200      	movs	r2, #0
 8002920:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	68f9      	ldr	r1, [r7, #12]
 800292e:	69b8      	ldr	r0, [r7, #24]
 8002930:	f001 f928 	bl	8003b84 <pxPortInitialiseStack>
 8002934:	4602      	mov	r2, r0
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002946:	bf00      	nop
 8002948:	3720      	adds	r7, #32
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002958:	f001 fa44 	bl	8003de4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800295c:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <prvAddNewTaskToReadyList+0xc4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	3301      	adds	r3, #1
 8002962:	4a2c      	ldr	r2, [pc, #176]	; (8002a14 <prvAddNewTaskToReadyList+0xc4>)
 8002964:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002966:	4b2c      	ldr	r3, [pc, #176]	; (8002a18 <prvAddNewTaskToReadyList+0xc8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800296e:	4a2a      	ldr	r2, [pc, #168]	; (8002a18 <prvAddNewTaskToReadyList+0xc8>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <prvAddNewTaskToReadyList+0xc4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d110      	bne.n	800299e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800297c:	f000 fc16 	bl	80031ac <prvInitialiseTaskLists>
 8002980:	e00d      	b.n	800299e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002982:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <prvAddNewTaskToReadyList+0xcc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800298a:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <prvAddNewTaskToReadyList+0xc8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	429a      	cmp	r2, r3
 8002996:	d802      	bhi.n	800299e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002998:	4a1f      	ldr	r2, [pc, #124]	; (8002a18 <prvAddNewTaskToReadyList+0xc8>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <prvAddNewTaskToReadyList+0xd0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	3301      	adds	r3, #1
 80029a4:	4a1e      	ldr	r2, [pc, #120]	; (8002a20 <prvAddNewTaskToReadyList+0xd0>)
 80029a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029a8:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <prvAddNewTaskToReadyList+0xd0>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <prvAddNewTaskToReadyList+0xd4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d903      	bls.n	80029c4 <prvAddNewTaskToReadyList+0x74>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	4a18      	ldr	r2, [pc, #96]	; (8002a24 <prvAddNewTaskToReadyList+0xd4>)
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4a15      	ldr	r2, [pc, #84]	; (8002a28 <prvAddNewTaskToReadyList+0xd8>)
 80029d2:	441a      	add	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3304      	adds	r3, #4
 80029d8:	4619      	mov	r1, r3
 80029da:	4610      	mov	r0, r2
 80029dc:	f7ff f913 	bl	8001c06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80029e0:	f001 fa30 	bl	8003e44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80029e4:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <prvAddNewTaskToReadyList+0xcc>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00e      	beq.n	8002a0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <prvAddNewTaskToReadyList+0xc8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d207      	bcs.n	8002a0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <prvAddNewTaskToReadyList+0xdc>)
 80029fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000bbc 	.word	0x20000bbc
 8002a18:	200006e8 	.word	0x200006e8
 8002a1c:	20000bc8 	.word	0x20000bc8
 8002a20:	20000bd8 	.word	0x20000bd8
 8002a24:	20000bc4 	.word	0x20000bc4
 8002a28:	200006ec 	.word	0x200006ec
 8002a2c:	e000ed04 	.word	0xe000ed04

08002a30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d017      	beq.n	8002a72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a42:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <vTaskDelay+0x60>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <vTaskDelay+0x30>
	__asm volatile
 8002a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	60bb      	str	r3, [r7, #8]
}
 8002a5c:	bf00      	nop
 8002a5e:	e7fe      	b.n	8002a5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002a60:	f000 f880 	bl	8002b64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a64:	2100      	movs	r1, #0
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fcea 	bl	8003440 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a6c:	f000 f888 	bl	8002b80 <xTaskResumeAll>
 8002a70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d107      	bne.n	8002a88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <vTaskDelay+0x64>)
 8002a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002a88:	bf00      	nop
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000be4 	.word	0x20000be4
 8002a94:	e000ed04 	.word	0xe000ed04

08002a98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002aa6:	463a      	mov	r2, r7
 8002aa8:	1d39      	adds	r1, r7, #4
 8002aaa:	f107 0308 	add.w	r3, r7, #8
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f848 	bl	8001b44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ab4:	6839      	ldr	r1, [r7, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	9202      	str	r2, [sp, #8]
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	460a      	mov	r2, r1
 8002ac6:	4921      	ldr	r1, [pc, #132]	; (8002b4c <vTaskStartScheduler+0xb4>)
 8002ac8:	4821      	ldr	r0, [pc, #132]	; (8002b50 <vTaskStartScheduler+0xb8>)
 8002aca:	f7ff fe0f 	bl	80026ec <xTaskCreateStatic>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4a20      	ldr	r2, [pc, #128]	; (8002b54 <vTaskStartScheduler+0xbc>)
 8002ad2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ad4:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <vTaskStartScheduler+0xbc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002adc:	2301      	movs	r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	e001      	b.n	8002ae6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d102      	bne.n	8002af2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002aec:	f000 fcfc 	bl	80034e8 <xTimerCreateTimerTask>
 8002af0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d116      	bne.n	8002b26 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	613b      	str	r3, [r7, #16]
}
 8002b0a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <vTaskStartScheduler+0xc0>)
 8002b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b12:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <vTaskStartScheduler+0xc4>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <vTaskStartScheduler+0xc8>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b20:	f001 f8be 	bl	8003ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b24:	e00e      	b.n	8002b44 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b2c:	d10a      	bne.n	8002b44 <vTaskStartScheduler+0xac>
	__asm volatile
 8002b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b32:	f383 8811 	msr	BASEPRI, r3
 8002b36:	f3bf 8f6f 	isb	sy
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	60fb      	str	r3, [r7, #12]
}
 8002b40:	bf00      	nop
 8002b42:	e7fe      	b.n	8002b42 <vTaskStartScheduler+0xaa>
}
 8002b44:	bf00      	nop
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	08004494 	.word	0x08004494
 8002b50:	0800317d 	.word	0x0800317d
 8002b54:	20000be0 	.word	0x20000be0
 8002b58:	20000bdc 	.word	0x20000bdc
 8002b5c:	20000bc8 	.word	0x20000bc8
 8002b60:	20000bc0 	.word	0x20000bc0

08002b64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <vTaskSuspendAll+0x18>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	4a03      	ldr	r2, [pc, #12]	; (8002b7c <vTaskSuspendAll+0x18>)
 8002b70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002b72:	bf00      	nop
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	20000be4 	.word	0x20000be4

08002b80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b8e:	4b42      	ldr	r3, [pc, #264]	; (8002c98 <xTaskResumeAll+0x118>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10a      	bne.n	8002bac <xTaskResumeAll+0x2c>
	__asm volatile
 8002b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	603b      	str	r3, [r7, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	e7fe      	b.n	8002baa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002bac:	f001 f91a 	bl	8003de4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002bb0:	4b39      	ldr	r3, [pc, #228]	; (8002c98 <xTaskResumeAll+0x118>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	4a38      	ldr	r2, [pc, #224]	; (8002c98 <xTaskResumeAll+0x118>)
 8002bb8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bba:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <xTaskResumeAll+0x118>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d162      	bne.n	8002c88 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bc2:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <xTaskResumeAll+0x11c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d05e      	beq.n	8002c88 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bca:	e02f      	b.n	8002c2c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bcc:	4b34      	ldr	r3, [pc, #208]	; (8002ca0 <xTaskResumeAll+0x120>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	3318      	adds	r3, #24
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff f871 	bl	8001cc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3304      	adds	r3, #4
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff f86c 	bl	8001cc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bec:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <xTaskResumeAll+0x124>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d903      	bls.n	8002bfc <xTaskResumeAll+0x7c>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	4a2a      	ldr	r2, [pc, #168]	; (8002ca4 <xTaskResumeAll+0x124>)
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4a27      	ldr	r2, [pc, #156]	; (8002ca8 <xTaskResumeAll+0x128>)
 8002c0a:	441a      	add	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	4619      	mov	r1, r3
 8002c12:	4610      	mov	r0, r2
 8002c14:	f7fe fff7 	bl	8001c06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1c:	4b23      	ldr	r3, [pc, #140]	; (8002cac <xTaskResumeAll+0x12c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d302      	bcc.n	8002c2c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002c26:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <xTaskResumeAll+0x130>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <xTaskResumeAll+0x120>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1cb      	bne.n	8002bcc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c3a:	f000 fb55 	bl	80032e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <xTaskResumeAll+0x134>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d010      	beq.n	8002c6c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c4a:	f000 f847 	bl	8002cdc <xTaskIncrementTick>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002c54:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <xTaskResumeAll+0x130>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f1      	bne.n	8002c4a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002c66:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <xTaskResumeAll+0x134>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c6c:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <xTaskResumeAll+0x130>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d009      	beq.n	8002c88 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c74:	2301      	movs	r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <xTaskResumeAll+0x138>)
 8002c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c88:	f001 f8dc 	bl	8003e44 <vPortExitCritical>

	return xAlreadyYielded;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000be4 	.word	0x20000be4
 8002c9c:	20000bbc 	.word	0x20000bbc
 8002ca0:	20000b7c 	.word	0x20000b7c
 8002ca4:	20000bc4 	.word	0x20000bc4
 8002ca8:	200006ec 	.word	0x200006ec
 8002cac:	200006e8 	.word	0x200006e8
 8002cb0:	20000bd0 	.word	0x20000bd0
 8002cb4:	20000bcc 	.word	0x20000bcc
 8002cb8:	e000ed04 	.word	0xe000ed04

08002cbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <xTaskGetTickCount+0x1c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002cc8:	687b      	ldr	r3, [r7, #4]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000bc0 	.word	0x20000bc0

08002cdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ce6:	4b4f      	ldr	r3, [pc, #316]	; (8002e24 <xTaskIncrementTick+0x148>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f040 808f 	bne.w	8002e0e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cf0:	4b4d      	ldr	r3, [pc, #308]	; (8002e28 <xTaskIncrementTick+0x14c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002cf8:	4a4b      	ldr	r2, [pc, #300]	; (8002e28 <xTaskIncrementTick+0x14c>)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d120      	bne.n	8002d46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d04:	4b49      	ldr	r3, [pc, #292]	; (8002e2c <xTaskIncrementTick+0x150>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <xTaskIncrementTick+0x48>
	__asm volatile
 8002d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d12:	f383 8811 	msr	BASEPRI, r3
 8002d16:	f3bf 8f6f 	isb	sy
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	603b      	str	r3, [r7, #0]
}
 8002d20:	bf00      	nop
 8002d22:	e7fe      	b.n	8002d22 <xTaskIncrementTick+0x46>
 8002d24:	4b41      	ldr	r3, [pc, #260]	; (8002e2c <xTaskIncrementTick+0x150>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	4b41      	ldr	r3, [pc, #260]	; (8002e30 <xTaskIncrementTick+0x154>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a3f      	ldr	r2, [pc, #252]	; (8002e2c <xTaskIncrementTick+0x150>)
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4a3f      	ldr	r2, [pc, #252]	; (8002e30 <xTaskIncrementTick+0x154>)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b3e      	ldr	r3, [pc, #248]	; (8002e34 <xTaskIncrementTick+0x158>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	4a3d      	ldr	r2, [pc, #244]	; (8002e34 <xTaskIncrementTick+0x158>)
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	f000 fad1 	bl	80032e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d46:	4b3c      	ldr	r3, [pc, #240]	; (8002e38 <xTaskIncrementTick+0x15c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d349      	bcc.n	8002de4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d50:	4b36      	ldr	r3, [pc, #216]	; (8002e2c <xTaskIncrementTick+0x150>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d104      	bne.n	8002d64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d5a:	4b37      	ldr	r3, [pc, #220]	; (8002e38 <xTaskIncrementTick+0x15c>)
 8002d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d60:	601a      	str	r2, [r3, #0]
					break;
 8002d62:	e03f      	b.n	8002de4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d64:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <xTaskIncrementTick+0x150>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d203      	bcs.n	8002d84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d7c:	4a2e      	ldr	r2, [pc, #184]	; (8002e38 <xTaskIncrementTick+0x15c>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d82:	e02f      	b.n	8002de4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	3304      	adds	r3, #4
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fe ff99 	bl	8001cc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d004      	beq.n	8002da0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	3318      	adds	r3, #24
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe ff90 	bl	8001cc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da4:	4b25      	ldr	r3, [pc, #148]	; (8002e3c <xTaskIncrementTick+0x160>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d903      	bls.n	8002db4 <xTaskIncrementTick+0xd8>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	4a22      	ldr	r2, [pc, #136]	; (8002e3c <xTaskIncrementTick+0x160>)
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4a1f      	ldr	r2, [pc, #124]	; (8002e40 <xTaskIncrementTick+0x164>)
 8002dc2:	441a      	add	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4610      	mov	r0, r2
 8002dcc:	f7fe ff1b 	bl	8001c06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <xTaskIncrementTick+0x168>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d3b8      	bcc.n	8002d50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002dde:	2301      	movs	r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002de2:	e7b5      	b.n	8002d50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002de4:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <xTaskIncrementTick+0x168>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dea:	4915      	ldr	r1, [pc, #84]	; (8002e40 <xTaskIncrementTick+0x164>)
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d901      	bls.n	8002e00 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002e00:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <xTaskIncrementTick+0x16c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	e004      	b.n	8002e18 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <xTaskIncrementTick+0x170>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3301      	adds	r3, #1
 8002e14:	4a0d      	ldr	r2, [pc, #52]	; (8002e4c <xTaskIncrementTick+0x170>)
 8002e16:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002e18:	697b      	ldr	r3, [r7, #20]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000be4 	.word	0x20000be4
 8002e28:	20000bc0 	.word	0x20000bc0
 8002e2c:	20000b74 	.word	0x20000b74
 8002e30:	20000b78 	.word	0x20000b78
 8002e34:	20000bd4 	.word	0x20000bd4
 8002e38:	20000bdc 	.word	0x20000bdc
 8002e3c:	20000bc4 	.word	0x20000bc4
 8002e40:	200006ec 	.word	0x200006ec
 8002e44:	200006e8 	.word	0x200006e8
 8002e48:	20000bd0 	.word	0x20000bd0
 8002e4c:	20000bcc 	.word	0x20000bcc

08002e50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e56:	4b28      	ldr	r3, [pc, #160]	; (8002ef8 <vTaskSwitchContext+0xa8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e5e:	4b27      	ldr	r3, [pc, #156]	; (8002efc <vTaskSwitchContext+0xac>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e64:	e041      	b.n	8002eea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8002e66:	4b25      	ldr	r3, [pc, #148]	; (8002efc <vTaskSwitchContext+0xac>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e6c:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <vTaskSwitchContext+0xb0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	e010      	b.n	8002e96 <vTaskSwitchContext+0x46>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10a      	bne.n	8002e90 <vTaskSwitchContext+0x40>
	__asm volatile
 8002e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7e:	f383 8811 	msr	BASEPRI, r3
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	607b      	str	r3, [r7, #4]
}
 8002e8c:	bf00      	nop
 8002e8e:	e7fe      	b.n	8002e8e <vTaskSwitchContext+0x3e>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	491b      	ldr	r1, [pc, #108]	; (8002f04 <vTaskSwitchContext+0xb4>)
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0e4      	beq.n	8002e74 <vTaskSwitchContext+0x24>
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4a13      	ldr	r2, [pc, #76]	; (8002f04 <vTaskSwitchContext+0xb4>)
 8002eb6:	4413      	add	r3, r2
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	3308      	adds	r3, #8
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d104      	bne.n	8002eda <vTaskSwitchContext+0x8a>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <vTaskSwitchContext+0xb8>)
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	4a06      	ldr	r2, [pc, #24]	; (8002f00 <vTaskSwitchContext+0xb0>)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6013      	str	r3, [r2, #0]
}
 8002eea:	bf00      	nop
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000be4 	.word	0x20000be4
 8002efc:	20000bd0 	.word	0x20000bd0
 8002f00:	20000bc4 	.word	0x20000bc4
 8002f04:	200006ec 	.word	0x200006ec
 8002f08:	200006e8 	.word	0x200006e8

08002f0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f20:	f383 8811 	msr	BASEPRI, r3
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	60fb      	str	r3, [r7, #12]
}
 8002f2e:	bf00      	nop
 8002f30:	e7fe      	b.n	8002f30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f32:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <vTaskPlaceOnEventList+0x44>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3318      	adds	r3, #24
 8002f38:	4619      	mov	r1, r3
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fe fe87 	bl	8001c4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f40:	2101      	movs	r1, #1
 8002f42:	6838      	ldr	r0, [r7, #0]
 8002f44:	f000 fa7c 	bl	8003440 <prvAddCurrentTaskToDelayedList>
}
 8002f48:	bf00      	nop
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	200006e8 	.word	0x200006e8

08002f54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10a      	bne.n	8002f7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6a:	f383 8811 	msr	BASEPRI, r3
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	617b      	str	r3, [r7, #20]
}
 8002f78:	bf00      	nop
 8002f7a:	e7fe      	b.n	8002f7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <vTaskPlaceOnEventListRestricted+0x54>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3318      	adds	r3, #24
 8002f82:	4619      	mov	r1, r3
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f7fe fe3e 	bl	8001c06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	68b8      	ldr	r0, [r7, #8]
 8002f9a:	f000 fa51 	bl	8003440 <prvAddCurrentTaskToDelayedList>
	}
 8002f9e:	bf00      	nop
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200006e8 	.word	0x200006e8

08002fac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10a      	bne.n	8002fd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	60fb      	str	r3, [r7, #12]
}
 8002fd4:	bf00      	nop
 8002fd6:	e7fe      	b.n	8002fd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	3318      	adds	r3, #24
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fe fe6f 	bl	8001cc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fe2:	4b1e      	ldr	r3, [pc, #120]	; (800305c <xTaskRemoveFromEventList+0xb0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d11d      	bne.n	8003026 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	3304      	adds	r3, #4
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe fe66 	bl	8001cc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <xTaskRemoveFromEventList+0xb4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d903      	bls.n	8003008 <xTaskRemoveFromEventList+0x5c>
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	4a16      	ldr	r2, [pc, #88]	; (8003060 <xTaskRemoveFromEventList+0xb4>)
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4a13      	ldr	r2, [pc, #76]	; (8003064 <xTaskRemoveFromEventList+0xb8>)
 8003016:	441a      	add	r2, r3
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	3304      	adds	r3, #4
 800301c:	4619      	mov	r1, r3
 800301e:	4610      	mov	r0, r2
 8003020:	f7fe fdf1 	bl	8001c06 <vListInsertEnd>
 8003024:	e005      	b.n	8003032 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	3318      	adds	r3, #24
 800302a:	4619      	mov	r1, r3
 800302c:	480e      	ldr	r0, [pc, #56]	; (8003068 <xTaskRemoveFromEventList+0xbc>)
 800302e:	f7fe fdea 	bl	8001c06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003036:	4b0d      	ldr	r3, [pc, #52]	; (800306c <xTaskRemoveFromEventList+0xc0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	429a      	cmp	r2, r3
 800303e:	d905      	bls.n	800304c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003040:	2301      	movs	r3, #1
 8003042:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003044:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <xTaskRemoveFromEventList+0xc4>)
 8003046:	2201      	movs	r2, #1
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	e001      	b.n	8003050 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003050:	697b      	ldr	r3, [r7, #20]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000be4 	.word	0x20000be4
 8003060:	20000bc4 	.word	0x20000bc4
 8003064:	200006ec 	.word	0x200006ec
 8003068:	20000b7c 	.word	0x20000b7c
 800306c:	200006e8 	.word	0x200006e8
 8003070:	20000bd0 	.word	0x20000bd0

08003074 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <vTaskInternalSetTimeOutState+0x24>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <vTaskInternalSetTimeOutState+0x28>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	605a      	str	r2, [r3, #4]
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	20000bd4 	.word	0x20000bd4
 800309c:	20000bc0 	.word	0x20000bc0

080030a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10a      	bne.n	80030c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	613b      	str	r3, [r7, #16]
}
 80030c2:	bf00      	nop
 80030c4:	e7fe      	b.n	80030c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10a      	bne.n	80030e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	60fb      	str	r3, [r7, #12]
}
 80030de:	bf00      	nop
 80030e0:	e7fe      	b.n	80030e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80030e2:	f000 fe7f 	bl	8003de4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80030e6:	4b1d      	ldr	r3, [pc, #116]	; (800315c <xTaskCheckForTimeOut+0xbc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030fe:	d102      	bne.n	8003106 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003100:	2300      	movs	r3, #0
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	e023      	b.n	800314e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4b15      	ldr	r3, [pc, #84]	; (8003160 <xTaskCheckForTimeOut+0xc0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d007      	beq.n	8003122 <xTaskCheckForTimeOut+0x82>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	429a      	cmp	r2, r3
 800311a:	d302      	bcc.n	8003122 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800311c:	2301      	movs	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	e015      	b.n	800314e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	429a      	cmp	r2, r3
 800312a:	d20b      	bcs.n	8003144 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	1ad2      	subs	r2, r2, r3
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ff9b 	bl	8003074 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	e004      	b.n	800314e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800314a:	2301      	movs	r3, #1
 800314c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800314e:	f000 fe79 	bl	8003e44 <vPortExitCritical>

	return xReturn;
 8003152:	69fb      	ldr	r3, [r7, #28]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3720      	adds	r7, #32
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000bc0 	.word	0x20000bc0
 8003160:	20000bd4 	.word	0x20000bd4

08003164 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <vTaskMissedYield+0x14>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	20000bd0 	.word	0x20000bd0

0800317c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003184:	f000 f852 	bl	800322c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <prvIdleTask+0x28>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d9f9      	bls.n	8003184 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <prvIdleTask+0x2c>)
 8003192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031a0:	e7f0      	b.n	8003184 <prvIdleTask+0x8>
 80031a2:	bf00      	nop
 80031a4:	200006ec 	.word	0x200006ec
 80031a8:	e000ed04 	.word	0xe000ed04

080031ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
 80031b6:	e00c      	b.n	80031d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4a12      	ldr	r2, [pc, #72]	; (800320c <prvInitialiseTaskLists+0x60>)
 80031c4:	4413      	add	r3, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe fcf0 	bl	8001bac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3301      	adds	r3, #1
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b37      	cmp	r3, #55	; 0x37
 80031d6:	d9ef      	bls.n	80031b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80031d8:	480d      	ldr	r0, [pc, #52]	; (8003210 <prvInitialiseTaskLists+0x64>)
 80031da:	f7fe fce7 	bl	8001bac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80031de:	480d      	ldr	r0, [pc, #52]	; (8003214 <prvInitialiseTaskLists+0x68>)
 80031e0:	f7fe fce4 	bl	8001bac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80031e4:	480c      	ldr	r0, [pc, #48]	; (8003218 <prvInitialiseTaskLists+0x6c>)
 80031e6:	f7fe fce1 	bl	8001bac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80031ea:	480c      	ldr	r0, [pc, #48]	; (800321c <prvInitialiseTaskLists+0x70>)
 80031ec:	f7fe fcde 	bl	8001bac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80031f0:	480b      	ldr	r0, [pc, #44]	; (8003220 <prvInitialiseTaskLists+0x74>)
 80031f2:	f7fe fcdb 	bl	8001bac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80031f6:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <prvInitialiseTaskLists+0x78>)
 80031f8:	4a05      	ldr	r2, [pc, #20]	; (8003210 <prvInitialiseTaskLists+0x64>)
 80031fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <prvInitialiseTaskLists+0x7c>)
 80031fe:	4a05      	ldr	r2, [pc, #20]	; (8003214 <prvInitialiseTaskLists+0x68>)
 8003200:	601a      	str	r2, [r3, #0]
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	200006ec 	.word	0x200006ec
 8003210:	20000b4c 	.word	0x20000b4c
 8003214:	20000b60 	.word	0x20000b60
 8003218:	20000b7c 	.word	0x20000b7c
 800321c:	20000b90 	.word	0x20000b90
 8003220:	20000ba8 	.word	0x20000ba8
 8003224:	20000b74 	.word	0x20000b74
 8003228:	20000b78 	.word	0x20000b78

0800322c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003232:	e019      	b.n	8003268 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003234:	f000 fdd6 	bl	8003de4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003238:	4b10      	ldr	r3, [pc, #64]	; (800327c <prvCheckTasksWaitingTermination+0x50>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3304      	adds	r3, #4
 8003244:	4618      	mov	r0, r3
 8003246:	f7fe fd3b 	bl	8001cc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <prvCheckTasksWaitingTermination+0x54>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3b01      	subs	r3, #1
 8003250:	4a0b      	ldr	r2, [pc, #44]	; (8003280 <prvCheckTasksWaitingTermination+0x54>)
 8003252:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <prvCheckTasksWaitingTermination+0x58>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3b01      	subs	r3, #1
 800325a:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <prvCheckTasksWaitingTermination+0x58>)
 800325c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800325e:	f000 fdf1 	bl	8003e44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f810 	bl	8003288 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <prvCheckTasksWaitingTermination+0x58>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1e1      	bne.n	8003234 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000b90 	.word	0x20000b90
 8003280:	20000bbc 	.word	0x20000bbc
 8003284:	20000ba4 	.word	0x20000ba4

08003288 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003296:	2b00      	cmp	r3, #0
 8003298:	d108      	bne.n	80032ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 ff8e 	bl	80041c0 <vPortFree>
				vPortFree( pxTCB );
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 ff8b 	bl	80041c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032aa:	e018      	b.n	80032de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d103      	bne.n	80032be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 ff82 	bl	80041c0 <vPortFree>
	}
 80032bc:	e00f      	b.n	80032de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d00a      	beq.n	80032de <prvDeleteTCB+0x56>
	__asm volatile
 80032c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	60fb      	str	r3, [r7, #12]
}
 80032da:	bf00      	nop
 80032dc:	e7fe      	b.n	80032dc <prvDeleteTCB+0x54>
	}
 80032de:	bf00      	nop
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032ee:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <prvResetNextTaskUnblockTime+0x38>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d104      	bne.n	8003302 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032f8:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <prvResetNextTaskUnblockTime+0x3c>)
 80032fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003300:	e008      	b.n	8003314 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003302:	4b07      	ldr	r3, [pc, #28]	; (8003320 <prvResetNextTaskUnblockTime+0x38>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a04      	ldr	r2, [pc, #16]	; (8003324 <prvResetNextTaskUnblockTime+0x3c>)
 8003312:	6013      	str	r3, [r2, #0]
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	20000b74 	.word	0x20000b74
 8003324:	20000bdc 	.word	0x20000bdc

08003328 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800332e:	4b0b      	ldr	r3, [pc, #44]	; (800335c <xTaskGetSchedulerState+0x34>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d102      	bne.n	800333c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003336:	2301      	movs	r3, #1
 8003338:	607b      	str	r3, [r7, #4]
 800333a:	e008      	b.n	800334e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <xTaskGetSchedulerState+0x38>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003344:	2302      	movs	r3, #2
 8003346:	607b      	str	r3, [r7, #4]
 8003348:	e001      	b.n	800334e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800334a:	2300      	movs	r3, #0
 800334c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800334e:	687b      	ldr	r3, [r7, #4]
	}
 8003350:	4618      	mov	r0, r3
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	20000bc8 	.word	0x20000bc8
 8003360:	20000be4 	.word	0x20000be4

08003364 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d056      	beq.n	8003428 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800337a:	4b2e      	ldr	r3, [pc, #184]	; (8003434 <xTaskPriorityDisinherit+0xd0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	429a      	cmp	r2, r3
 8003382:	d00a      	beq.n	800339a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	60fb      	str	r3, [r7, #12]
}
 8003396:	bf00      	nop
 8003398:	e7fe      	b.n	8003398 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80033a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	60bb      	str	r3, [r7, #8]
}
 80033b4:	bf00      	nop
 80033b6:	e7fe      	b.n	80033b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033bc:	1e5a      	subs	r2, r3, #1
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d02c      	beq.n	8003428 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d128      	bne.n	8003428 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	3304      	adds	r3, #4
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe fc70 	bl	8001cc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f8:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <xTaskPriorityDisinherit+0xd4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d903      	bls.n	8003408 <xTaskPriorityDisinherit+0xa4>
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	4a0c      	ldr	r2, [pc, #48]	; (8003438 <xTaskPriorityDisinherit+0xd4>)
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4a09      	ldr	r2, [pc, #36]	; (800343c <xTaskPriorityDisinherit+0xd8>)
 8003416:	441a      	add	r2, r3
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	3304      	adds	r3, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f7fe fbf1 	bl	8001c06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003424:	2301      	movs	r3, #1
 8003426:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003428:	697b      	ldr	r3, [r7, #20]
	}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	200006e8 	.word	0x200006e8
 8003438:	20000bc4 	.word	0x20000bc4
 800343c:	200006ec 	.word	0x200006ec

08003440 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800344a:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003450:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3304      	adds	r3, #4
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe fc32 	bl	8001cc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003462:	d10a      	bne.n	800347a <prvAddCurrentTaskToDelayedList+0x3a>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d007      	beq.n	800347a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800346a:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3304      	adds	r3, #4
 8003470:	4619      	mov	r1, r3
 8003472:	4819      	ldr	r0, [pc, #100]	; (80034d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003474:	f7fe fbc7 	bl	8001c06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003478:	e026      	b.n	80034c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4413      	add	r3, r2
 8003480:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003482:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	429a      	cmp	r2, r3
 8003490:	d209      	bcs.n	80034a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003492:	4b12      	ldr	r3, [pc, #72]	; (80034dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3304      	adds	r3, #4
 800349c:	4619      	mov	r1, r3
 800349e:	4610      	mov	r0, r2
 80034a0:	f7fe fbd5 	bl	8001c4e <vListInsert>
}
 80034a4:	e010      	b.n	80034c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f7fe fbcb 	bl	8001c4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034b8:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d202      	bcs.n	80034c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80034c2:	4a08      	ldr	r2, [pc, #32]	; (80034e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	6013      	str	r3, [r2, #0]
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20000bc0 	.word	0x20000bc0
 80034d4:	200006e8 	.word	0x200006e8
 80034d8:	20000ba8 	.word	0x20000ba8
 80034dc:	20000b78 	.word	0x20000b78
 80034e0:	20000b74 	.word	0x20000b74
 80034e4:	20000bdc 	.word	0x20000bdc

080034e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	; 0x28
 80034ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80034f2:	f000 fb07 	bl	8003b04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80034f6:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <xTimerCreateTimerTask+0x80>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d021      	beq.n	8003542 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003506:	1d3a      	adds	r2, r7, #4
 8003508:	f107 0108 	add.w	r1, r7, #8
 800350c:	f107 030c 	add.w	r3, r7, #12
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe fb31 	bl	8001b78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	9202      	str	r2, [sp, #8]
 800351e:	9301      	str	r3, [sp, #4]
 8003520:	2302      	movs	r3, #2
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2300      	movs	r3, #0
 8003526:	460a      	mov	r2, r1
 8003528:	4910      	ldr	r1, [pc, #64]	; (800356c <xTimerCreateTimerTask+0x84>)
 800352a:	4811      	ldr	r0, [pc, #68]	; (8003570 <xTimerCreateTimerTask+0x88>)
 800352c:	f7ff f8de 	bl	80026ec <xTaskCreateStatic>
 8003530:	4603      	mov	r3, r0
 8003532:	4a10      	ldr	r2, [pc, #64]	; (8003574 <xTimerCreateTimerTask+0x8c>)
 8003534:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003536:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <xTimerCreateTimerTask+0x8c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800353e:	2301      	movs	r3, #1
 8003540:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10a      	bne.n	800355e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	613b      	str	r3, [r7, #16]
}
 800355a:	bf00      	nop
 800355c:	e7fe      	b.n	800355c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800355e:	697b      	ldr	r3, [r7, #20]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000c18 	.word	0x20000c18
 800356c:	0800449c 	.word	0x0800449c
 8003570:	080036ad 	.word	0x080036ad
 8003574:	20000c1c 	.word	0x20000c1c

08003578 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	; 0x28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003586:	2300      	movs	r3, #0
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	623b      	str	r3, [r7, #32]
}
 80035a2:	bf00      	nop
 80035a4:	e7fe      	b.n	80035a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80035a6:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <xTimerGenericCommand+0x98>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d02a      	beq.n	8003604 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b05      	cmp	r3, #5
 80035be:	dc18      	bgt.n	80035f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80035c0:	f7ff feb2 	bl	8003328 <xTaskGetSchedulerState>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d109      	bne.n	80035de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80035ca:	4b11      	ldr	r3, [pc, #68]	; (8003610 <xTimerGenericCommand+0x98>)
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	f107 0110 	add.w	r1, r7, #16
 80035d2:	2300      	movs	r3, #0
 80035d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d6:	f7fe fca1 	bl	8001f1c <xQueueGenericSend>
 80035da:	6278      	str	r0, [r7, #36]	; 0x24
 80035dc:	e012      	b.n	8003604 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80035de:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <xTimerGenericCommand+0x98>)
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	f107 0110 	add.w	r1, r7, #16
 80035e6:	2300      	movs	r3, #0
 80035e8:	2200      	movs	r2, #0
 80035ea:	f7fe fc97 	bl	8001f1c <xQueueGenericSend>
 80035ee:	6278      	str	r0, [r7, #36]	; 0x24
 80035f0:	e008      	b.n	8003604 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80035f2:	4b07      	ldr	r3, [pc, #28]	; (8003610 <xTimerGenericCommand+0x98>)
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	f107 0110 	add.w	r1, r7, #16
 80035fa:	2300      	movs	r3, #0
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	f7fe fd8b 	bl	8002118 <xQueueGenericSendFromISR>
 8003602:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003606:	4618      	mov	r0, r3
 8003608:	3728      	adds	r7, #40	; 0x28
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000c18 	.word	0x20000c18

08003614 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af02      	add	r7, sp, #8
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800361e:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <prvProcessExpiredTimer+0x94>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	3304      	adds	r3, #4
 800362c:	4618      	mov	r0, r3
 800362e:	f7fe fb47 	bl	8001cc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d022      	beq.n	8003686 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	699a      	ldr	r2, [r3, #24]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	18d1      	adds	r1, r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	6978      	ldr	r0, [r7, #20]
 800364e:	f000 f8d1 	bl	80037f4 <prvInsertTimerInActiveList>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01f      	beq.n	8003698 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003658:	2300      	movs	r3, #0
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2300      	movs	r3, #0
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	2100      	movs	r1, #0
 8003662:	6978      	ldr	r0, [r7, #20]
 8003664:	f7ff ff88 	bl	8003578 <xTimerGenericCommand>
 8003668:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d113      	bne.n	8003698 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	60fb      	str	r3, [r7, #12]
}
 8003682:	bf00      	nop
 8003684:	e7fe      	b.n	8003684 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	b2da      	uxtb	r2, r3
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	6978      	ldr	r0, [r7, #20]
 800369e:	4798      	blx	r3
}
 80036a0:	bf00      	nop
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20000c10 	.word	0x20000c10

080036ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036b4:	f107 0308 	add.w	r3, r7, #8
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 f857 	bl	800376c <prvGetNextExpireTime>
 80036be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4619      	mov	r1, r3
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f803 	bl	80036d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80036ca:	f000 f8d5 	bl	8003878 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036ce:	e7f1      	b.n	80036b4 <prvTimerTask+0x8>

080036d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80036da:	f7ff fa43 	bl	8002b64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036de:	f107 0308 	add.w	r3, r7, #8
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f866 	bl	80037b4 <prvSampleTimeNow>
 80036e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d130      	bne.n	8003752 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10a      	bne.n	800370c <prvProcessTimerOrBlockTask+0x3c>
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d806      	bhi.n	800370c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80036fe:	f7ff fa3f 	bl	8002b80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003702:	68f9      	ldr	r1, [r7, #12]
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ff85 	bl	8003614 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800370a:	e024      	b.n	8003756 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003712:	4b13      	ldr	r3, [pc, #76]	; (8003760 <prvProcessTimerOrBlockTask+0x90>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <prvProcessTimerOrBlockTask+0x50>
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <prvProcessTimerOrBlockTask+0x52>
 8003720:	2300      	movs	r3, #0
 8003722:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003724:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <prvProcessTimerOrBlockTask+0x94>)
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	4619      	mov	r1, r3
 8003732:	f7fe ffa7 	bl	8002684 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003736:	f7ff fa23 	bl	8002b80 <xTaskResumeAll>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <prvProcessTimerOrBlockTask+0x98>)
 8003742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	f3bf 8f6f 	isb	sy
}
 8003750:	e001      	b.n	8003756 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003752:	f7ff fa15 	bl	8002b80 <xTaskResumeAll>
}
 8003756:	bf00      	nop
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20000c14 	.word	0x20000c14
 8003764:	20000c18 	.word	0x20000c18
 8003768:	e000ed04 	.word	0xe000ed04

0800376c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003774:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <prvGetNextExpireTime+0x44>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <prvGetNextExpireTime+0x16>
 800377e:	2201      	movs	r2, #1
 8003780:	e000      	b.n	8003784 <prvGetNextExpireTime+0x18>
 8003782:	2200      	movs	r2, #0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d105      	bne.n	800379c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003790:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <prvGetNextExpireTime+0x44>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	e001      	b.n	80037a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80037a0:	68fb      	ldr	r3, [r7, #12]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20000c10 	.word	0x20000c10

080037b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80037bc:	f7ff fa7e 	bl	8002cbc <xTaskGetTickCount>
 80037c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80037c2:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <prvSampleTimeNow+0x3c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d205      	bcs.n	80037d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80037cc:	f000 f936 	bl	8003a3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	e002      	b.n	80037de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80037de:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <prvSampleTimeNow+0x3c>)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80037e4:	68fb      	ldr	r3, [r7, #12]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000c20 	.word	0x20000c20

080037f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	429a      	cmp	r2, r3
 8003818:	d812      	bhi.n	8003840 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	1ad2      	subs	r2, r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	429a      	cmp	r2, r3
 8003826:	d302      	bcc.n	800382e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	e01b      	b.n	8003866 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800382e:	4b10      	ldr	r3, [pc, #64]	; (8003870 <prvInsertTimerInActiveList+0x7c>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3304      	adds	r3, #4
 8003836:	4619      	mov	r1, r3
 8003838:	4610      	mov	r0, r2
 800383a:	f7fe fa08 	bl	8001c4e <vListInsert>
 800383e:	e012      	b.n	8003866 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d206      	bcs.n	8003856 <prvInsertTimerInActiveList+0x62>
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d302      	bcc.n	8003856 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003850:	2301      	movs	r3, #1
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	e007      	b.n	8003866 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003856:	4b07      	ldr	r3, [pc, #28]	; (8003874 <prvInsertTimerInActiveList+0x80>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3304      	adds	r3, #4
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f7fe f9f4 	bl	8001c4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003866:	697b      	ldr	r3, [r7, #20]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000c14 	.word	0x20000c14
 8003874:	20000c10 	.word	0x20000c10

08003878 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08e      	sub	sp, #56	; 0x38
 800387c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800387e:	e0ca      	b.n	8003a16 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	da18      	bge.n	80038b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003886:	1d3b      	adds	r3, r7, #4
 8003888:	3304      	adds	r3, #4
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003896:	f383 8811 	msr	BASEPRI, r3
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	61fb      	str	r3, [r7, #28]
}
 80038a4:	bf00      	nop
 80038a6:	e7fe      	b.n	80038a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80038a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ae:	6850      	ldr	r0, [r2, #4]
 80038b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b2:	6892      	ldr	r2, [r2, #8]
 80038b4:	4611      	mov	r1, r2
 80038b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f2c0 80aa 	blt.w	8003a14 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80038c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d004      	beq.n	80038d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	3304      	adds	r3, #4
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe f9f5 	bl	8001cc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038d6:	463b      	mov	r3, r7
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff ff6b 	bl	80037b4 <prvSampleTimeNow>
 80038de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b09      	cmp	r3, #9
 80038e4:	f200 8097 	bhi.w	8003a16 <prvProcessReceivedCommands+0x19e>
 80038e8:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <prvProcessReceivedCommands+0x78>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003919 	.word	0x08003919
 80038f4:	08003919 	.word	0x08003919
 80038f8:	08003919 	.word	0x08003919
 80038fc:	0800398d 	.word	0x0800398d
 8003900:	080039a1 	.word	0x080039a1
 8003904:	080039eb 	.word	0x080039eb
 8003908:	08003919 	.word	0x08003919
 800390c:	08003919 	.word	0x08003919
 8003910:	0800398d 	.word	0x0800398d
 8003914:	080039a1 	.word	0x080039a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	b2da      	uxtb	r2, r3
 8003924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003926:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	18d1      	adds	r1, r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003938:	f7ff ff5c 	bl	80037f4 <prvInsertTimerInActiveList>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d069      	beq.n	8003a16 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003948:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d05e      	beq.n	8003a16 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	441a      	add	r2, r3
 8003960:	2300      	movs	r3, #0
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	2300      	movs	r3, #0
 8003966:	2100      	movs	r1, #0
 8003968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800396a:	f7ff fe05 	bl	8003578 <xTimerGenericCommand>
 800396e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d14f      	bne.n	8003a16 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	61bb      	str	r3, [r7, #24]
}
 8003988:	bf00      	nop
 800398a:	e7fe      	b.n	800398a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	b2da      	uxtb	r2, r3
 8003998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800399e:	e03a      	b.n	8003a16 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80039b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10a      	bne.n	80039d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	617b      	str	r3, [r7, #20]
}
 80039d2:	bf00      	nop
 80039d4:	e7fe      	b.n	80039d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	18d1      	adds	r1, r2, r3
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039e4:	f7ff ff06 	bl	80037f4 <prvInsertTimerInActiveList>
					break;
 80039e8:	e015      	b.n	8003a16 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d103      	bne.n	8003a00 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80039f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039fa:	f000 fbe1 	bl	80041c0 <vPortFree>
 80039fe:	e00a      	b.n	8003a16 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a06:	f023 0301 	bic.w	r3, r3, #1
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003a12:	e000      	b.n	8003a16 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003a14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <prvProcessReceivedCommands+0x1c0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	1d39      	adds	r1, r7, #4
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fe fc16 	bl	8002250 <xQueueReceive>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f47f af2a 	bne.w	8003880 <prvProcessReceivedCommands+0x8>
	}
}
 8003a2c:	bf00      	nop
 8003a2e:	bf00      	nop
 8003a30:	3730      	adds	r7, #48	; 0x30
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000c18 	.word	0x20000c18

08003a3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a42:	e048      	b.n	8003ad6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a44:	4b2d      	ldr	r3, [pc, #180]	; (8003afc <prvSwitchTimerLists+0xc0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a4e:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <prvSwitchTimerLists+0xc0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fe f92f 	bl	8001cc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d02e      	beq.n	8003ad6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4413      	add	r3, r2
 8003a80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d90e      	bls.n	8003aa8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a96:	4b19      	ldr	r3, [pc, #100]	; (8003afc <prvSwitchTimerLists+0xc0>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	f7fe f8d4 	bl	8001c4e <vListInsert>
 8003aa6:	e016      	b.n	8003ad6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	2300      	movs	r3, #0
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f7ff fd60 	bl	8003578 <xTimerGenericCommand>
 8003ab8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	603b      	str	r3, [r7, #0]
}
 8003ad2:	bf00      	nop
 8003ad4:	e7fe      	b.n	8003ad4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <prvSwitchTimerLists+0xc0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1b1      	bne.n	8003a44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <prvSwitchTimerLists+0xc0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003ae6:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <prvSwitchTimerLists+0xc4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a04      	ldr	r2, [pc, #16]	; (8003afc <prvSwitchTimerLists+0xc0>)
 8003aec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003aee:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <prvSwitchTimerLists+0xc4>)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	6013      	str	r3, [r2, #0]
}
 8003af4:	bf00      	nop
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20000c10 	.word	0x20000c10
 8003b00:	20000c14 	.word	0x20000c14

08003b04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003b0a:	f000 f96b 	bl	8003de4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003b0e:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <prvCheckForValidListAndQueue+0x60>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d120      	bne.n	8003b58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003b16:	4814      	ldr	r0, [pc, #80]	; (8003b68 <prvCheckForValidListAndQueue+0x64>)
 8003b18:	f7fe f848 	bl	8001bac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003b1c:	4813      	ldr	r0, [pc, #76]	; (8003b6c <prvCheckForValidListAndQueue+0x68>)
 8003b1e:	f7fe f845 	bl	8001bac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003b22:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <prvCheckForValidListAndQueue+0x6c>)
 8003b24:	4a10      	ldr	r2, [pc, #64]	; (8003b68 <prvCheckForValidListAndQueue+0x64>)
 8003b26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003b28:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <prvCheckForValidListAndQueue+0x70>)
 8003b2a:	4a10      	ldr	r2, [pc, #64]	; (8003b6c <prvCheckForValidListAndQueue+0x68>)
 8003b2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003b2e:	2300      	movs	r3, #0
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <prvCheckForValidListAndQueue+0x74>)
 8003b34:	4a11      	ldr	r2, [pc, #68]	; (8003b7c <prvCheckForValidListAndQueue+0x78>)
 8003b36:	2110      	movs	r1, #16
 8003b38:	200a      	movs	r0, #10
 8003b3a:	f7fe f953 	bl	8001de4 <xQueueGenericCreateStatic>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <prvCheckForValidListAndQueue+0x60>)
 8003b42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003b44:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <prvCheckForValidListAndQueue+0x60>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <prvCheckForValidListAndQueue+0x60>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	490b      	ldr	r1, [pc, #44]	; (8003b80 <prvCheckForValidListAndQueue+0x7c>)
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fd6c 	bl	8002630 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b58:	f000 f974 	bl	8003e44 <vPortExitCritical>
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000c18 	.word	0x20000c18
 8003b68:	20000be8 	.word	0x20000be8
 8003b6c:	20000bfc 	.word	0x20000bfc
 8003b70:	20000c10 	.word	0x20000c10
 8003b74:	20000c14 	.word	0x20000c14
 8003b78:	20000cc4 	.word	0x20000cc4
 8003b7c:	20000c24 	.word	0x20000c24
 8003b80:	080044a4 	.word	0x080044a4

08003b84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3b04      	subs	r3, #4
 8003b94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	3b04      	subs	r3, #4
 8003ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f023 0201 	bic.w	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3b04      	subs	r3, #4
 8003bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003bb4:	4a0c      	ldr	r2, [pc, #48]	; (8003be8 <pxPortInitialiseStack+0x64>)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3b14      	subs	r3, #20
 8003bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3b04      	subs	r3, #4
 8003bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f06f 0202 	mvn.w	r2, #2
 8003bd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3b20      	subs	r3, #32
 8003bd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003bda:	68fb      	ldr	r3, [r7, #12]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	08003bed 	.word	0x08003bed

08003bec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003bf6:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <prvTaskExitError+0x54>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bfe:	d00a      	beq.n	8003c16 <prvTaskExitError+0x2a>
	__asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	60fb      	str	r3, [r7, #12]
}
 8003c12:	bf00      	nop
 8003c14:	e7fe      	b.n	8003c14 <prvTaskExitError+0x28>
	__asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	60bb      	str	r3, [r7, #8]
}
 8003c28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c2a:	bf00      	nop
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0fc      	beq.n	8003c2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c32:	bf00      	nop
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	2000000c 	.word	0x2000000c
	...

08003c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <pxCurrentTCBConst2>)
 8003c52:	6819      	ldr	r1, [r3, #0]
 8003c54:	6808      	ldr	r0, [r1, #0]
 8003c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c5a:	f380 8809 	msr	PSP, r0
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f04f 0000 	mov.w	r0, #0
 8003c66:	f380 8811 	msr	BASEPRI, r0
 8003c6a:	4770      	bx	lr
 8003c6c:	f3af 8000 	nop.w

08003c70 <pxCurrentTCBConst2>:
 8003c70:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop

08003c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003c78:	4808      	ldr	r0, [pc, #32]	; (8003c9c <prvPortStartFirstTask+0x24>)
 8003c7a:	6800      	ldr	r0, [r0, #0]
 8003c7c:	6800      	ldr	r0, [r0, #0]
 8003c7e:	f380 8808 	msr	MSP, r0
 8003c82:	f04f 0000 	mov.w	r0, #0
 8003c86:	f380 8814 	msr	CONTROL, r0
 8003c8a:	b662      	cpsie	i
 8003c8c:	b661      	cpsie	f
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	df00      	svc	0
 8003c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c9a:	bf00      	nop
 8003c9c:	e000ed08 	.word	0xe000ed08

08003ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ca6:	4b46      	ldr	r3, [pc, #280]	; (8003dc0 <xPortStartScheduler+0x120>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a46      	ldr	r2, [pc, #280]	; (8003dc4 <xPortStartScheduler+0x124>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d10a      	bne.n	8003cc6 <xPortStartScheduler+0x26>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	613b      	str	r3, [r7, #16]
}
 8003cc2:	bf00      	nop
 8003cc4:	e7fe      	b.n	8003cc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003cc6:	4b3e      	ldr	r3, [pc, #248]	; (8003dc0 <xPortStartScheduler+0x120>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a3f      	ldr	r2, [pc, #252]	; (8003dc8 <xPortStartScheduler+0x128>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d10a      	bne.n	8003ce6 <xPortStartScheduler+0x46>
	__asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	60fb      	str	r3, [r7, #12]
}
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ce6:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <xPortStartScheduler+0x12c>)
 8003ce8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	4b31      	ldr	r3, [pc, #196]	; (8003dd0 <xPortStartScheduler+0x130>)
 8003d0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d0e:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <xPortStartScheduler+0x134>)
 8003d10:	2207      	movs	r2, #7
 8003d12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d14:	e009      	b.n	8003d2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003d16:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <xPortStartScheduler+0x134>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	4a2d      	ldr	r2, [pc, #180]	; (8003dd4 <xPortStartScheduler+0x134>)
 8003d1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b80      	cmp	r3, #128	; 0x80
 8003d34:	d0ef      	beq.n	8003d16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d36:	4b27      	ldr	r3, [pc, #156]	; (8003dd4 <xPortStartScheduler+0x134>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f1c3 0307 	rsb	r3, r3, #7
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d00a      	beq.n	8003d58 <xPortStartScheduler+0xb8>
	__asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	60bb      	str	r3, [r7, #8]
}
 8003d54:	bf00      	nop
 8003d56:	e7fe      	b.n	8003d56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d58:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <xPortStartScheduler+0x134>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	021b      	lsls	r3, r3, #8
 8003d5e:	4a1d      	ldr	r2, [pc, #116]	; (8003dd4 <xPortStartScheduler+0x134>)
 8003d60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d62:	4b1c      	ldr	r3, [pc, #112]	; (8003dd4 <xPortStartScheduler+0x134>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d6a:	4a1a      	ldr	r2, [pc, #104]	; (8003dd4 <xPortStartScheduler+0x134>)
 8003d6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d76:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <xPortStartScheduler+0x138>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <xPortStartScheduler+0x138>)
 8003d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d82:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <xPortStartScheduler+0x138>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a14      	ldr	r2, [pc, #80]	; (8003dd8 <xPortStartScheduler+0x138>)
 8003d88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d8e:	f000 f8dd 	bl	8003f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d92:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <xPortStartScheduler+0x13c>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003d98:	f000 f8fc 	bl	8003f94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d9c:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <xPortStartScheduler+0x140>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0f      	ldr	r2, [pc, #60]	; (8003de0 <xPortStartScheduler+0x140>)
 8003da2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003da6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003da8:	f7ff ff66 	bl	8003c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003dac:	f7ff f850 	bl	8002e50 <vTaskSwitchContext>
	prvTaskExitError();
 8003db0:	f7ff ff1c 	bl	8003bec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	e000ed00 	.word	0xe000ed00
 8003dc4:	410fc271 	.word	0x410fc271
 8003dc8:	410fc270 	.word	0x410fc270
 8003dcc:	e000e400 	.word	0xe000e400
 8003dd0:	20000d14 	.word	0x20000d14
 8003dd4:	20000d18 	.word	0x20000d18
 8003dd8:	e000ed20 	.word	0xe000ed20
 8003ddc:	2000000c 	.word	0x2000000c
 8003de0:	e000ef34 	.word	0xe000ef34

08003de4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	607b      	str	r3, [r7, #4]
}
 8003dfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <vPortEnterCritical+0x58>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3301      	adds	r3, #1
 8003e04:	4a0d      	ldr	r2, [pc, #52]	; (8003e3c <vPortEnterCritical+0x58>)
 8003e06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e08:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <vPortEnterCritical+0x58>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d10f      	bne.n	8003e30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <vPortEnterCritical+0x5c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <vPortEnterCritical+0x4c>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	603b      	str	r3, [r7, #0]
}
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <vPortEnterCritical+0x4a>
	}
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	2000000c 	.word	0x2000000c
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e4a:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <vPortExitCritical+0x50>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <vPortExitCritical+0x24>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	607b      	str	r3, [r7, #4]
}
 8003e64:	bf00      	nop
 8003e66:	e7fe      	b.n	8003e66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003e68:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <vPortExitCritical+0x50>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <vPortExitCritical+0x50>)
 8003e70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e72:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <vPortExitCritical+0x50>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d105      	bne.n	8003e86 <vPortExitCritical+0x42>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	f383 8811 	msr	BASEPRI, r3
}
 8003e84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	2000000c 	.word	0x2000000c
	...

08003ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ea0:	f3ef 8009 	mrs	r0, PSP
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <pxCurrentTCBConst>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	f01e 0f10 	tst.w	lr, #16
 8003eb0:	bf08      	it	eq
 8003eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eba:	6010      	str	r0, [r2, #0]
 8003ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ec4:	f380 8811 	msr	BASEPRI, r0
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f7fe ffbe 	bl	8002e50 <vTaskSwitchContext>
 8003ed4:	f04f 0000 	mov.w	r0, #0
 8003ed8:	f380 8811 	msr	BASEPRI, r0
 8003edc:	bc09      	pop	{r0, r3}
 8003ede:	6819      	ldr	r1, [r3, #0]
 8003ee0:	6808      	ldr	r0, [r1, #0]
 8003ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee6:	f01e 0f10 	tst.w	lr, #16
 8003eea:	bf08      	it	eq
 8003eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ef0:	f380 8809 	msr	PSP, r0
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	f3af 8000 	nop.w

08003f00 <pxCurrentTCBConst>:
 8003f00:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop

08003f08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	607b      	str	r3, [r7, #4]
}
 8003f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f22:	f7fe fedb 	bl	8002cdc <xTaskIncrementTick>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <xPortSysTickHandler+0x40>)
 8003f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	2300      	movs	r3, #0
 8003f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f383 8811 	msr	BASEPRI, r3
}
 8003f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	e000ed04 	.word	0xe000ed04

08003f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <vPortSetupTimerInterrupt+0x34>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <vPortSetupTimerInterrupt+0x38>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <vPortSetupTimerInterrupt+0x3c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <vPortSetupTimerInterrupt+0x40>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	099b      	lsrs	r3, r3, #6
 8003f68:	4a09      	ldr	r2, [pc, #36]	; (8003f90 <vPortSetupTimerInterrupt+0x44>)
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f6e:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <vPortSetupTimerInterrupt+0x34>)
 8003f70:	2207      	movs	r2, #7
 8003f72:	601a      	str	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	e000e010 	.word	0xe000e010
 8003f84:	e000e018 	.word	0xe000e018
 8003f88:	20000000 	.word	0x20000000
 8003f8c:	10624dd3 	.word	0x10624dd3
 8003f90:	e000e014 	.word	0xe000e014

08003f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003f94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003fa4 <vPortEnableVFP+0x10>
 8003f98:	6801      	ldr	r1, [r0, #0]
 8003f9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003f9e:	6001      	str	r1, [r0, #0]
 8003fa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003fa2:	bf00      	nop
 8003fa4:	e000ed88 	.word	0xe000ed88

08003fa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003fae:	f3ef 8305 	mrs	r3, IPSR
 8003fb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b0f      	cmp	r3, #15
 8003fb8:	d914      	bls.n	8003fe4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003fba:	4a17      	ldr	r2, [pc, #92]	; (8004018 <vPortValidateInterruptPriority+0x70>)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003fc4:	4b15      	ldr	r3, [pc, #84]	; (800401c <vPortValidateInterruptPriority+0x74>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	7afa      	ldrb	r2, [r7, #11]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d20a      	bcs.n	8003fe4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	607b      	str	r3, [r7, #4]
}
 8003fe0:	bf00      	nop
 8003fe2:	e7fe      	b.n	8003fe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003fe4:	4b0e      	ldr	r3, [pc, #56]	; (8004020 <vPortValidateInterruptPriority+0x78>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fec:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <vPortValidateInterruptPriority+0x7c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d90a      	bls.n	800400a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	603b      	str	r3, [r7, #0]
}
 8004006:	bf00      	nop
 8004008:	e7fe      	b.n	8004008 <vPortValidateInterruptPriority+0x60>
	}
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	e000e3f0 	.word	0xe000e3f0
 800401c:	20000d14 	.word	0x20000d14
 8004020:	e000ed0c 	.word	0xe000ed0c
 8004024:	20000d18 	.word	0x20000d18

08004028 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004030:	2300      	movs	r3, #0
 8004032:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004034:	f7fe fd96 	bl	8002b64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004038:	4b5b      	ldr	r3, [pc, #364]	; (80041a8 <pvPortMalloc+0x180>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004040:	f000 f920 	bl	8004284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004044:	4b59      	ldr	r3, [pc, #356]	; (80041ac <pvPortMalloc+0x184>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	f040 8093 	bne.w	8004178 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01d      	beq.n	8004094 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004058:	2208      	movs	r2, #8
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4413      	add	r3, r2
 800405e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	2b00      	cmp	r3, #0
 8004068:	d014      	beq.n	8004094 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f023 0307 	bic.w	r3, r3, #7
 8004070:	3308      	adds	r3, #8
 8004072:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <pvPortMalloc+0x6c>
	__asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	617b      	str	r3, [r7, #20]
}
 8004090:	bf00      	nop
 8004092:	e7fe      	b.n	8004092 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d06e      	beq.n	8004178 <pvPortMalloc+0x150>
 800409a:	4b45      	ldr	r3, [pc, #276]	; (80041b0 <pvPortMalloc+0x188>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d869      	bhi.n	8004178 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80040a4:	4b43      	ldr	r3, [pc, #268]	; (80041b4 <pvPortMalloc+0x18c>)
 80040a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80040a8:	4b42      	ldr	r3, [pc, #264]	; (80041b4 <pvPortMalloc+0x18c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040ae:	e004      	b.n	80040ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d903      	bls.n	80040cc <pvPortMalloc+0xa4>
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f1      	bne.n	80040b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040cc:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <pvPortMalloc+0x180>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d050      	beq.n	8004178 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2208      	movs	r2, #8
 80040dc:	4413      	add	r3, r2
 80040de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	1ad2      	subs	r2, r2, r3
 80040f0:	2308      	movs	r3, #8
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d91f      	bls.n	8004138 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <pvPortMalloc+0xf8>
	__asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	613b      	str	r3, [r7, #16]
}
 800411c:	bf00      	nop
 800411e:	e7fe      	b.n	800411e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	1ad2      	subs	r2, r2, r3
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004132:	69b8      	ldr	r0, [r7, #24]
 8004134:	f000 f908 	bl	8004348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004138:	4b1d      	ldr	r3, [pc, #116]	; (80041b0 <pvPortMalloc+0x188>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	4a1b      	ldr	r2, [pc, #108]	; (80041b0 <pvPortMalloc+0x188>)
 8004144:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004146:	4b1a      	ldr	r3, [pc, #104]	; (80041b0 <pvPortMalloc+0x188>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <pvPortMalloc+0x190>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d203      	bcs.n	800415a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004152:	4b17      	ldr	r3, [pc, #92]	; (80041b0 <pvPortMalloc+0x188>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a18      	ldr	r2, [pc, #96]	; (80041b8 <pvPortMalloc+0x190>)
 8004158:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <pvPortMalloc+0x184>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	431a      	orrs	r2, r3
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800416e:	4b13      	ldr	r3, [pc, #76]	; (80041bc <pvPortMalloc+0x194>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3301      	adds	r3, #1
 8004174:	4a11      	ldr	r2, [pc, #68]	; (80041bc <pvPortMalloc+0x194>)
 8004176:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004178:	f7fe fd02 	bl	8002b80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <pvPortMalloc+0x174>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	60fb      	str	r3, [r7, #12]
}
 8004198:	bf00      	nop
 800419a:	e7fe      	b.n	800419a <pvPortMalloc+0x172>
	return pvReturn;
 800419c:	69fb      	ldr	r3, [r7, #28]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3728      	adds	r7, #40	; 0x28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20004924 	.word	0x20004924
 80041ac:	20004938 	.word	0x20004938
 80041b0:	20004928 	.word	0x20004928
 80041b4:	2000491c 	.word	0x2000491c
 80041b8:	2000492c 	.word	0x2000492c
 80041bc:	20004930 	.word	0x20004930

080041c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d04d      	beq.n	800426e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80041d2:	2308      	movs	r3, #8
 80041d4:	425b      	negs	r3, r3
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4413      	add	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	4b24      	ldr	r3, [pc, #144]	; (8004278 <vPortFree+0xb8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10a      	bne.n	8004204 <vPortFree+0x44>
	__asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	60fb      	str	r3, [r7, #12]
}
 8004200:	bf00      	nop
 8004202:	e7fe      	b.n	8004202 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <vPortFree+0x62>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	60bb      	str	r3, [r7, #8]
}
 800421e:	bf00      	nop
 8004220:	e7fe      	b.n	8004220 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	4b14      	ldr	r3, [pc, #80]	; (8004278 <vPortFree+0xb8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4013      	ands	r3, r2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01e      	beq.n	800426e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d11a      	bne.n	800426e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <vPortFree+0xb8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	43db      	mvns	r3, r3
 8004242:	401a      	ands	r2, r3
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004248:	f7fe fc8c 	bl	8002b64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	4b0a      	ldr	r3, [pc, #40]	; (800427c <vPortFree+0xbc>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4413      	add	r3, r2
 8004256:	4a09      	ldr	r2, [pc, #36]	; (800427c <vPortFree+0xbc>)
 8004258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800425a:	6938      	ldr	r0, [r7, #16]
 800425c:	f000 f874 	bl	8004348 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004260:	4b07      	ldr	r3, [pc, #28]	; (8004280 <vPortFree+0xc0>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3301      	adds	r3, #1
 8004266:	4a06      	ldr	r2, [pc, #24]	; (8004280 <vPortFree+0xc0>)
 8004268:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800426a:	f7fe fc89 	bl	8002b80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800426e:	bf00      	nop
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20004938 	.word	0x20004938
 800427c:	20004928 	.word	0x20004928
 8004280:	20004934 	.word	0x20004934

08004284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800428a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800428e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004290:	4b27      	ldr	r3, [pc, #156]	; (8004330 <prvHeapInit+0xac>)
 8004292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00c      	beq.n	80042b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3307      	adds	r3, #7
 80042a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0307 	bic.w	r3, r3, #7
 80042aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	4a1f      	ldr	r2, [pc, #124]	; (8004330 <prvHeapInit+0xac>)
 80042b4:	4413      	add	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042bc:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <prvHeapInit+0xb0>)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042c2:	4b1c      	ldr	r3, [pc, #112]	; (8004334 <prvHeapInit+0xb0>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	4413      	add	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80042d0:	2208      	movs	r2, #8
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0307 	bic.w	r3, r3, #7
 80042de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a15      	ldr	r2, [pc, #84]	; (8004338 <prvHeapInit+0xb4>)
 80042e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80042e6:	4b14      	ldr	r3, [pc, #80]	; (8004338 <prvHeapInit+0xb4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2200      	movs	r2, #0
 80042ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80042ee:	4b12      	ldr	r3, [pc, #72]	; (8004338 <prvHeapInit+0xb4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	1ad2      	subs	r2, r2, r3
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <prvHeapInit+0xb4>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4a0a      	ldr	r2, [pc, #40]	; (800433c <prvHeapInit+0xb8>)
 8004312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	4a09      	ldr	r2, [pc, #36]	; (8004340 <prvHeapInit+0xbc>)
 800431a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800431c:	4b09      	ldr	r3, [pc, #36]	; (8004344 <prvHeapInit+0xc0>)
 800431e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004322:	601a      	str	r2, [r3, #0]
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	20000d1c 	.word	0x20000d1c
 8004334:	2000491c 	.word	0x2000491c
 8004338:	20004924 	.word	0x20004924
 800433c:	2000492c 	.word	0x2000492c
 8004340:	20004928 	.word	0x20004928
 8004344:	20004938 	.word	0x20004938

08004348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004350:	4b28      	ldr	r3, [pc, #160]	; (80043f4 <prvInsertBlockIntoFreeList+0xac>)
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e002      	b.n	800435c <prvInsertBlockIntoFreeList+0x14>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	429a      	cmp	r2, r3
 8004364:	d8f7      	bhi.n	8004356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	4413      	add	r3, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	429a      	cmp	r2, r3
 8004376:	d108      	bne.n	800438a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	441a      	add	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	441a      	add	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d118      	bne.n	80043d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b15      	ldr	r3, [pc, #84]	; (80043f8 <prvInsertBlockIntoFreeList+0xb0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d00d      	beq.n	80043c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	441a      	add	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	e008      	b.n	80043d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <prvInsertBlockIntoFreeList+0xb0>)
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	e003      	b.n	80043d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d002      	beq.n	80043e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043e6:	bf00      	nop
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	2000491c 	.word	0x2000491c
 80043f8:	20004924 	.word	0x20004924

080043fc <__libc_init_array>:
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	4d0d      	ldr	r5, [pc, #52]	; (8004434 <__libc_init_array+0x38>)
 8004400:	4c0d      	ldr	r4, [pc, #52]	; (8004438 <__libc_init_array+0x3c>)
 8004402:	1b64      	subs	r4, r4, r5
 8004404:	10a4      	asrs	r4, r4, #2
 8004406:	2600      	movs	r6, #0
 8004408:	42a6      	cmp	r6, r4
 800440a:	d109      	bne.n	8004420 <__libc_init_array+0x24>
 800440c:	4d0b      	ldr	r5, [pc, #44]	; (800443c <__libc_init_array+0x40>)
 800440e:	4c0c      	ldr	r4, [pc, #48]	; (8004440 <__libc_init_array+0x44>)
 8004410:	f000 f82e 	bl	8004470 <_init>
 8004414:	1b64      	subs	r4, r4, r5
 8004416:	10a4      	asrs	r4, r4, #2
 8004418:	2600      	movs	r6, #0
 800441a:	42a6      	cmp	r6, r4
 800441c:	d105      	bne.n	800442a <__libc_init_array+0x2e>
 800441e:	bd70      	pop	{r4, r5, r6, pc}
 8004420:	f855 3b04 	ldr.w	r3, [r5], #4
 8004424:	4798      	blx	r3
 8004426:	3601      	adds	r6, #1
 8004428:	e7ee      	b.n	8004408 <__libc_init_array+0xc>
 800442a:	f855 3b04 	ldr.w	r3, [r5], #4
 800442e:	4798      	blx	r3
 8004430:	3601      	adds	r6, #1
 8004432:	e7f2      	b.n	800441a <__libc_init_array+0x1e>
 8004434:	080044f0 	.word	0x080044f0
 8004438:	080044f0 	.word	0x080044f0
 800443c:	080044f0 	.word	0x080044f0
 8004440:	080044f4 	.word	0x080044f4

08004444 <memcpy>:
 8004444:	440a      	add	r2, r1
 8004446:	4291      	cmp	r1, r2
 8004448:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800444c:	d100      	bne.n	8004450 <memcpy+0xc>
 800444e:	4770      	bx	lr
 8004450:	b510      	push	{r4, lr}
 8004452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800445a:	4291      	cmp	r1, r2
 800445c:	d1f9      	bne.n	8004452 <memcpy+0xe>
 800445e:	bd10      	pop	{r4, pc}

08004460 <memset>:
 8004460:	4402      	add	r2, r0
 8004462:	4603      	mov	r3, r0
 8004464:	4293      	cmp	r3, r2
 8004466:	d100      	bne.n	800446a <memset+0xa>
 8004468:	4770      	bx	lr
 800446a:	f803 1b01 	strb.w	r1, [r3], #1
 800446e:	e7f9      	b.n	8004464 <memset+0x4>

08004470 <_init>:
 8004470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004472:	bf00      	nop
 8004474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004476:	bc08      	pop	{r3}
 8004478:	469e      	mov	lr, r3
 800447a:	4770      	bx	lr

0800447c <_fini>:
 800447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447e:	bf00      	nop
 8004480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004482:	bc08      	pop	{r3}
 8004484:	469e      	mov	lr, r3
 8004486:	4770      	bx	lr
